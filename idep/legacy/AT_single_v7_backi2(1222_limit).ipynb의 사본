{"cells":[{"cell_type":"code","execution_count":1,"metadata":{"id":"6rmQpzEGXfCw","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1640233943238,"user_tz":-540,"elapsed":22210,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"998d5d90-1716-4cbb-b966-9a7d5351fdc5"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')\n","\n","import os, sys\n","\n","current_path = '/content/drive/My Drive/Colab Notebooks/JnQ/'\n","\n","os.chdir(current_path)\n","\n","nb_path = '/content/notebooks'\n","try:\n","  sys.path.insert(0, '/content/drive/My Drive/Colab Notebooks/JnQ')\n","  sys.path.insert(0, '/content/drive/My Drive/Colab Notebooks/JnQ/funcs')\n","  os.symlink('/content/drive/My Drive/Colab Notebooks/JnQ/mpl_finance', nb_path)\n","  sys.path.insert(0, nb_path)\n","except:\n","  pass"]},{"cell_type":"markdown","metadata":{"id":"8uqYv5StTazo"},"source":["# requirements"]},{"cell_type":"code","execution_count":2,"metadata":{"id":"9qGt60DKTZmf","executionInfo":{"status":"ok","timestamp":1640233968069,"user_tz":-540,"elapsed":24833,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}}},"outputs":[],"source":["# !pip install findiff\n","\n","# import nvstrings, nvcategory, cudf\n","# import cuml\n","# import cudf\n","\n","import matplotlib.pyplot as plt\n","from matplotlib import gridspec\n","from tqdm.notebook import tqdm\n","from funcs.funcs_indicator import *\n","from funcs.funcs_for_trade import *\n","\n","from utils import utils_v3_1219 as utils2\n","from utils import utils_v5_2_1216 as utils1\n","from utils import utils_public_1216 as utils_public\n","\n","import mpl_finance as mf\n","import os\n","import datetime\n","\n","import IPython\n","import IPython.display\n","import matplotlib as mpl\n","\n","import numpy as np\n","# import jax.numpy as np\n","import pandas as pd\n","import seaborn as sns\n","# import tensorflow as tf\n","\n","import pickle\n","import shutil\n","import json\n","from easydict import EasyDict\n","\n","# from trendln import trendln\n","\n","from datetime import datetime\n","import random\n","import time\n","\n","# mpl.rcParams['figure.figsize'] = (8, 6)\n","# mpl.rcParams['axes.grid'] = False\n","\n","pd.set_option('display.max_rows', 500)\n","pd.set_option('display.max_columns', 500)\n","pd.set_option('display.width', 1000)"]},{"cell_type":"markdown","metadata":{"id":"M8-EChy0VsDr"},"source":["## cudf"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":414,"status":"ok","timestamp":1638754008241,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"b09qAb1sVtRP","outputId":"3a824202-064a-4544-b791-ffc777bb3f9c"},"outputs":[{"name":"stdout","output_type":"stream","text":["usage: conda [-h] [-V] command ...\n","conda: error: unrecognized arguments: -t=/content/notebooks\n"]}],"source":["# !conda install -c rapidsai-nightly -c nvidia -c numba -c conda-forge \\\n","#     cudf python=3.7 cudatoolkit=11.1 -t=$nb_path"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":413,"status":"ok","timestamp":1638754715310,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"Jnz6i7ZqRnb0","outputId":"207bc57b-a17a-4f67-fb26-24e46e2c6e26"},"outputs":[{"name":"stdout","output_type":"stream","text":["***********************************************************************\n","Woo! Your instance has the right kind of GPU, a Tesla P100-PCIE-16GB!\n","***********************************************************************\n","\n"]}],"source":["# !git clone https://github.com/rapidsai/rapidsai-csp-utils.git\n","!python rapidsai-csp-utils/colab/env-check.py"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"4sKA_9Dbg4s2"},"outputs":[],"source":["# This will update the Colab environment and restart the kernel.  Don't run the next cell until you see the session crash.\n","!bash rapidsai-csp-utils/colab/update_gcc.sh\n","import os\n","os._exit(00)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"d1C4pNiBhYHX"},"outputs":[],"source":["# This will install CondaColab.  This will restart your kernel one last time.  Run this cell by itself and only run the next cell once you see the session crash.\n","import condacolab\n","condacolab.install()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":414,"status":"ok","timestamp":1638754863073,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"iGx3ACTvZqck","outputId":"e8379cc4-c325-4fe0-ac46-5fbbd7d38829"},"outputs":[{"name":"stdout","output_type":"stream","text":["‚ú®üç∞‚ú® Everything looks OK!\n"]}],"source":["# you can now run the rest of the cells as normal\n","import condacolab\n","condacolab.check()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"oR8s7U8c7C28","outputId":"22be2731-fae1-45fc-f310-e48f60774bb2"},"outputs":[{"name":"stdout","output_type":"stream","text":["Installing RAPIDS Stable 21.10\n","Starting the RAPIDS install on Colab.  This will take about 15 minutes.\n","Collecting package metadata (current_repodata.json): ...working... done\n","Solving environment: ...working... WARNING conda.core.solve:_add_specs(611): pinned spec cudatoolkit=11.1 conflicts with explicit specs.  Overriding pinned spec.\n","failed with initial frozen solve. Retrying with flexible solve.\n","Solving environment: ...working... WARNING conda.core.solve:_add_specs(611): pinned spec cudatoolkit=11.1 conflicts with explicit specs.  Overriding pinned spec.\n","failed with repodata from current_repodata.json, will retry with next repodata source.\n","Collecting package metadata (repodata.json): ...working... done\n"]}],"source":["# Installing RAPIDS is now 'python rapidsai-csp-utils/colab/install_rapids.py <release> <packages>'\n","# The <release> options are 'stable' and 'nightly'.  Leaving it blank or adding any other words will default to stable.\n","# The <packages> option are default blank or 'core'.  By default, we install RAPIDSAI and BlazingSQL.  The 'core' option will install only RAPIDSAI and not include BlazingSQL, \n","!python rapidsai-csp-utils/colab/install_rapids.py stable\n","import os\n","os.environ['NUMBAPRO_NVVM'] = '/usr/local/cuda/nvvm/lib64/libnvvm.so'\n","os.environ['NUMBAPRO_LIBDEVICE'] = '/usr/local/cuda/nvvm/libdevice/'\n","os.environ['CONDA_PREFIX'] = '/usr/local'"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"kWsxi4ZpKtGt"},"outputs":[],"source":["import shutil\n","import sys\n","\n","colab_env = \"/usr/lib\"\n","\n","rapids_path = os.path.join(current_path, \"rapidsai-csp-utils/lib\")\n","rapids_libs = os.listdir(rapids_path)\n","print(rapids_libs)\n","# break\n","\n","for lib_ in rapids_libs:\n","  try:\n","    shutil.copy(os.path.join(rapids_path, lib_), os.path.join(colab_env, lib_))\n","    sys.path.append(os.path.join(colab_env, lib_))\n","    print(\"copied to\" + os.path.join(colab_env, lib_))\n","  except Exception as e:\n","    print(e)"]},{"cell_type":"markdown","metadata":{"id":"Iy76iO7gztne"},"source":["## move legacy files"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"hMRht32Czwry"},"outputs":[],"source":["# print()\n","cur_dir_list = os.listdir('.')\n","for f in cur_dir_list:\n","  if 'legacy' in f :\n","    # print(f)\n","    if os.path.isdir(current_path + f,):\n","      continue\n","\n","    shutil.move(current_path + f, current_path + 'legacy/' + f)\n","    print(\"moved to\" + current_path + 'legacy/' +  f)"]},{"cell_type":"markdown","metadata":{"id":"Ic1mfmwWCIBu"},"source":["# makeset"]},{"cell_type":"markdown","metadata":{"id":"Ci_jUnNTZbm9"},"source":["## load data"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":22503,"status":"ok","timestamp":1638246127510,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"_bXyS2yrZYC6","outputId":"b24a8a66-48b1-42b5-aa79-63f5a8542bac"},"outputs":[{"name":"stdout","output_type":"stream","text":["['2021-05-30 ETHUSDT.xlsx', '2021-04-30 ETHUSDT.xlsx', '2021-07-03 ETHUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-10-10 ETCUSDT.xlsx', '2021-10-10 BTCUSDT.xlsx', '2021-10-10 ETHUSDT.xlsx', '2021-10-10 ADAUSDT.xlsx', '2021-10-10 XLMUSDT.xlsx', '2021-10-10 LINKUSDT.xlsx', '2021-10-10 LTCUSDT.xlsx', '2021-10-10 EOSUSDT.xlsx', '2021-10-10 XRPUSDT.xlsx', '2021-10-10 BCHUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr', '2021-10-10 ETCUSDT.ftr', '2021-10-10 BTCUSDT.ftr', '2021-10-10 ETHUSDT.ftr', '2021-10-10 ADAUSDT.ftr', '2021-10-10 XLMUSDT.ftr', '2021-10-10 LINKUSDT.ftr', '2021-10-10 LTCUSDT.ftr', '2021-10-10 EOSUSDT.ftr', '2021-10-10 XRPUSDT.ftr', '2021-10-10 BCHUSDT.ftr', '2021-11-16 EOSUSDT.ftr', '2021-11-16 LTCUSDT.ftr', '2021-11-16 LINKUSDT.ftr', '2021-11-16 XLMUSDT.ftr', '2021-11-16 ADAUSDT.ftr', '2021-11-16 ETCUSDT.ftr', '2021-11-16 BTCUSDT.ftr', '2021-11-16 ETHUSDT.ftr', '2021-11-16 BCHUSDT.ftr', '2021-11-16 XRPUSDT.ftr']\n","['2021-05-30 ETHUSDT.xlsx', '2021-04-30 ETHUSDT.xlsx', '2021-07-03 ETHUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-10-10 ETCUSDT.xlsx', '2021-10-10 BTCUSDT.xlsx', '2021-10-10 ETHUSDT.xlsx', '2021-10-10 ADAUSDT.xlsx', '2021-10-10 XLMUSDT.xlsx', '2021-10-10 LINKUSDT.xlsx', '2021-10-10 LTCUSDT.xlsx', '2021-10-10 EOSUSDT.xlsx', '2021-10-10 XRPUSDT.xlsx', '2021-10-10 BCHUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr', '2021-10-10 ETCUSDT.ftr', '2021-10-10 BTCUSDT.ftr', '2021-10-10 ETHUSDT.ftr', '2021-10-10 ADAUSDT.ftr', '2021-10-10 XLMUSDT.ftr', '2021-10-10 LINKUSDT.ftr', '2021-10-10 LTCUSDT.ftr', '2021-10-10 EOSUSDT.ftr', '2021-10-10 XRPUSDT.ftr', '2021-10-10 BCHUSDT.ftr', '2021-11-16 LINKUSDT.ftr', '2021-11-16 ADAUSDT.ftr', '2021-11-16 ETCUSDT.ftr', '2021-11-16 XLMUSDT.ftr', '2021-11-16 XRPUSDT.ftr', '2021-11-16 EOSUSDT.ftr', '2021-11-16 BTCUSDT.ftr', '2021-11-16 BCHUSDT.ftr', '2021-11-16 ETHUSDT.ftr', '2021-11-16 LTCUSDT.ftr']\n","['2021-05-30 ETHUSDT.xlsx', '2021-04-30 ETHUSDT.xlsx', '2021-07-03 ETHUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-10-10 ETCUSDT.xlsx', '2021-10-10 BTCUSDT.xlsx', '2021-10-10 ETHUSDT.xlsx', '2021-10-10 ADAUSDT.xlsx', '2021-10-10 XLMUSDT.xlsx', '2021-10-10 LINKUSDT.xlsx', '2021-10-10 LTCUSDT.xlsx', '2021-10-10 EOSUSDT.xlsx', '2021-10-10 XRPUSDT.xlsx', '2021-10-10 BCHUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr', '2021-10-10 ETCUSDT.ftr', '2021-10-10 BTCUSDT.ftr', '2021-10-10 ETHUSDT.ftr', '2021-10-10 ADAUSDT.ftr', '2021-10-10 XLMUSDT.ftr', '2021-10-10 LINKUSDT.ftr', '2021-10-10 LTCUSDT.ftr', '2021-10-10 EOSUSDT.ftr', '2021-10-10 XRPUSDT.ftr', '2021-10-10 BCHUSDT.ftr', '2021-11-16 LINKUSDT.ftr', '2021-11-16 XLMUSDT.ftr', '2021-11-16 ADAUSDT.ftr', '2021-11-16 ETCUSDT.ftr', '2021-11-16 BTCUSDT.ftr', '2021-11-16 BCHUSDT.ftr', '2021-11-16 XRPUSDT.ftr', '2021-11-16 LTCUSDT.ftr', '2021-11-16 EOSUSDT.ftr', '2021-11-16 ETHUSDT.ftr']\n","['2021-07-03 ETHUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-10-10 ETCUSDT.xlsx', '2021-10-10 BTCUSDT.xlsx', '2021-10-10 ETHUSDT.xlsx', '2021-10-10 ADAUSDT.xlsx', '2021-10-10 XLMUSDT.xlsx', '2021-10-10 LINKUSDT.xlsx', '2021-10-10 LTCUSDT.xlsx', '2021-10-10 EOSUSDT.xlsx', '2021-10-10 XRPUSDT.xlsx', '2021-10-10 BCHUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr', '2021-10-10 ETCUSDT.ftr', '2021-10-10 BTCUSDT.ftr', '2021-10-10 ETHUSDT.ftr', '2021-10-10 ADAUSDT.ftr', '2021-10-10 XLMUSDT.ftr', '2021-10-10 LINKUSDT.ftr', '2021-10-10 LTCUSDT.ftr', '2021-10-10 EOSUSDT.ftr', '2021-10-10 XRPUSDT.ftr', '2021-10-10 BCHUSDT.ftr', '2021-11-16 XLMUSDT.ftr', '2021-11-16 ADAUSDT.ftr', '2021-11-16 ETCUSDT.ftr', '2021-11-16 BTCUSDT.ftr', '2021-11-16 ETHUSDT.ftr', '2021-11-16 BCHUSDT.ftr', '2021-11-16 XRPUSDT.ftr', '2021-11-16 EOSUSDT.ftr', '2021-11-16 LTCUSDT.ftr', '2021-11-16 LINKUSDT.ftr']\n","['2021-07-03 ETHUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-08-31 SUSHIUSDT.xlsx', '2021-08-31 CVCUSDT.xlsx', '2021-08-31 BTSUSDT.xlsx', '2021-08-31 HOTUSDT.xlsx', '2021-08-31 ZRXUSDT.xlsx', '2021-08-31 QTUMUSDT.xlsx', '2021-08-31 IOTAUSDT.xlsx', '2021-08-31 BTCBUSD.xlsx', '2021-08-31 WAVESUSDT.xlsx', '2021-08-31 ADAUSDT.xlsx', '2021-08-31 LITUSDT.xlsx', '2021-08-31 XTZUSDT.xlsx', '2021-08-31 BNBUSDT.xlsx', '2021-08-31 AKROUSDT.xlsx', '2021-08-31 HNTUSDT.xlsx', '2021-08-31 ETCUSDT.xlsx', '2021-08-31 XMRUSDT.xlsx', '2021-08-31 YFIUSDT.xlsx', '2021-08-31 ETHUSDT.xlsx', '2021-08-31 ALICEUSDT.xlsx', '2021-08-31 ALPHAUSDT.xlsx', '2021-08-31 SFPUSDT.xlsx', '2021-08-31 REEFUSDT.xlsx', '2021-08-31 BATUSDT.xlsx', '2021-08-31 DOGEUSDT.xlsx', '2021-08-31 TRXUSDT.xlsx', '2021-08-31 RLCUSDT.xlsx', '2021-08-31 BTCSTUSDT.xlsx', '2021-08-31 STORJUSDT.xlsx', '2021-08-31 SNXUSDT.xlsx', '2021-08-31 XLMUSDT.xlsx', '2021-08-31 NEOUSDT.xlsx', '2021-08-31 UNFIUSDT.xlsx', '2021-08-31 SANDUSDT.xlsx', '2021-08-31 DASHUSDT.xlsx', '2021-08-31 KAVAUSDT.xlsx', '2021-08-31 RUNEUSDT.xlsx', '2021-08-31 CTKUSDT.xlsx', '2021-08-31 LINKUSDT.xlsx', '2021-08-31 CELRUSDT.xlsx', '2021-08-31 RSRUSDT.xlsx', '2021-08-31 DGBUSDT.xlsx', '2021-08-31 SKLUSDT.xlsx', '2021-08-31 RENUSDT.xlsx', '2021-08-31 TOMOUSDT.xlsx', '2021-08-31 MTLUSDT.xlsx', '2021-08-31 LTCUSDT.xlsx', '2021-08-31 DODOUSDT.xlsx', '2021-08-31 EGLDUSDT.xlsx', '2021-08-31 KSMUSDT.xlsx', '2021-08-31 ONTUSDT.xlsx', '2021-08-31 VETUSDT.xlsx', '2021-08-31 TRBUSDT.xlsx', '2021-08-31 MANAUSDT.xlsx', '2021-08-31 COTIUSDT.xlsx', '2021-08-31 CHRUSDT.xlsx', '2021-08-31 ETHUSDT_210924.xlsx', '2021-08-31 BAKEUSDT.xlsx', '2021-08-31 GRTUSDT.xlsx', '2021-08-31 FLMUSDT.xlsx', '2021-08-31 EOSUSDT.xlsx', '2021-08-31 OGNUSDT.xlsx', '2021-08-31 SCUSDT.xlsx', '2021-08-31 BALUSDT.xlsx', '2021-08-31 STMXUSDT.xlsx', '2021-08-31 BTTUSDT.xlsx', '2021-08-31 LUNAUSDT.xlsx', '2021-08-31 DENTUSDT.xlsx', '2021-08-31 KNCUSDT.xlsx', '2021-08-31 SRMUSDT.xlsx', '2021-08-31 ENJUSDT.xlsx', '2021-08-31 ZENUSDT.xlsx', '2021-08-31 ATOMUSDT.xlsx', '2021-08-31 NEARUSDT.xlsx', '2021-08-31 BCHUSDT.xlsx', '2021-08-31 IOSTUSDT.xlsx', '2021-08-31 HBARUSDT.xlsx', '2021-08-31 ZECUSDT.xlsx', '2021-08-31 1000SHIBUSDT.xlsx', '2021-08-31 TLMUSDT.xlsx', '2021-08-31 BZRXUSDT.xlsx', '2021-08-31 ETHBUSD.xlsx', '2021-08-31 AAVEUSDT.xlsx', '2021-08-31 GTCUSDT.xlsx', '2021-08-31 ALGOUSDT.xlsx', '2021-08-31 ICPUSDT.xlsx', '2021-08-31 BTCUSDT_210924.xlsx', '2021-08-31 LRCUSDT.xlsx', '2021-08-31 AVAXUSDT.xlsx', '2021-08-31 MATICUSDT.xlsx', '2021-08-31 1INCHUSDT.xlsx', '2021-08-31 MKRUSDT.xlsx', '2021-08-31 THETAUSDT.xlsx', '2021-08-31 UNIUSDT.xlsx', '2021-08-31 LINAUSDT.xlsx', '2021-08-31 RVNUSDT.xlsx', '2021-08-31 FILUSDT.xlsx', '2021-08-31 NKNUSDT.xlsx', '2021-08-31 DEFIUSDT.xlsx', '2021-08-31 COMPUSDT.xlsx', '2021-08-31 BTCDOMUSDT.xlsx', '2021-08-31 SOLUSDT.xlsx', '2021-08-31 BTCUSDT.xlsx', '2021-08-31 OMGUSDT.xlsx', '2021-08-31 ICXUSDT.xlsx', '2021-08-31 BLZUSDT.xlsx', '2021-08-31 FTMUSDT.xlsx', '2021-08-31 YFIIUSDT.xlsx', '2021-08-31 KEEPUSDT.xlsx', '2021-08-31 BANDUSDT.xlsx', '2021-08-31 XRPUSDT.xlsx', '2021-08-31 SXPUSDT.xlsx', '2021-08-31 CRVUSDT.xlsx', '2021-08-31 BELUSDT.xlsx', '2021-08-31 DOTUSDT.xlsx', '2021-08-31 XEMUSDT.xlsx', '2021-08-31 ONEUSDT.xlsx', '2021-08-31 ZILUSDT.xlsx', '2021-08-31 AXSUSDT.xlsx', '2021-08-31 OCEANUSDT.xlsx', '2021-08-31 CHZUSDT.xlsx', '2021-08-31 ANKRUSDT.xlsx', '2021-08-31 SUSHIUSDT_res_dfs.pkl', '2021-07-01 ADAUSDT.xlsx', '2021-10-10 ETCUSDT.xlsx', '2021-10-10 BTCUSDT.xlsx', '2021-10-10 ETHUSDT.xlsx', '2021-10-10 ADAUSDT.xlsx', '2021-10-10 XLMUSDT.xlsx', '2021-10-10 LINKUSDT.xlsx', '2021-10-10 LTCUSDT.xlsx', '2021-10-10 EOSUSDT.xlsx', '2021-10-10 XRPUSDT.xlsx', '2021-10-10 BCHUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr', '2021-10-10 ETCUSDT.ftr', '2021-10-10 BTCUSDT.ftr', '2021-10-10 ETHUSDT.ftr', '2021-10-10 ADAUSDT.ftr', '2021-10-10 XLMUSDT.ftr', '2021-10-10 LINKUSDT.ftr', '2021-10-10 LTCUSDT.ftr', '2021-10-10 EOSUSDT.ftr', '2021-10-10 XRPUSDT.ftr', '2021-10-10 BCHUSDT.ftr', '2021-11-16 EOSUSDT.ftr', '2021-11-16 LTCUSDT.ftr', '2021-11-16 LINKUSDT.ftr', '2021-11-16 XLMUSDT.ftr', '2021-11-16 ADAUSDT.ftr', '2021-11-16 ETCUSDT.ftr', '2021-11-16 BTCUSDT.ftr', '2021-11-16 ETHUSDT.ftr', '2021-11-16 BCHUSDT.ftr', '2021-11-16 XRPUSDT.ftr']\n","['2021-07-01 BTCUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr', '2021-10-10 LTCUSDT.xlsx', '2021-10-10 LINKUSDT.xlsx', '2021-10-10 XLMUSDT.xlsx', '2021-10-10 ADAUSDT.xlsx', '2021-10-10 ETCUSDT.xlsx', '2021-10-10 BTCUSDT.xlsx', '2021-10-10 ETHUSDT.xlsx', '2021-10-10 BCHUSDT.xlsx', '2021-10-10 XRPUSDT.xlsx', '2021-10-10 EOSUSDT.xlsx', '2021-10-10 ETCUSDT.ftr', '2021-10-10 BTCUSDT.ftr', '2021-10-10 ETHUSDT.ftr', '2021-10-10 ADAUSDT.ftr', '2021-10-10 XLMUSDT.ftr', '2021-10-10 LINKUSDT.ftr', '2021-10-10 LTCUSDT.ftr', '2021-10-10 EOSUSDT.ftr', '2021-10-10 XRPUSDT.ftr', '2021-10-10 BCHUSDT.ftr', '2021-11-16 XLMUSDT.ftr', '2021-11-16 ADAUSDT.ftr', '2021-11-16 ETCUSDT.ftr', '2021-11-16 BTCUSDT.ftr', '2021-11-16 ETHUSDT.ftr', '2021-11-16 BCHUSDT.ftr', '2021-11-16 XRPUSDT.ftr', '2021-11-16 EOSUSDT.ftr', '2021-11-16 LTCUSDT.ftr', '2021-11-16 LINKUSDT.ftr']\n","['2021-02-07 BTC.xlsx', '2021-02-07 ETH.xlsx', '2021-02-11 BCHUSDT.xlsx', '2021-02-11 XRPUSDT.xlsx', '2021-02-11 EOSUSDT.xlsx', '2021-02-11 LTCUSDT.xlsx', '2021-02-11 ETCUSDT.xlsx', '2021-02-11 LINKUSDT.xlsx', '2021-02-11 XLMUSDT.xlsx', '2021-02-11 ADAUSDT.xlsx', '2021-02-11 XMRUSDT.xlsx', '2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr', '2021-10-10 ETCUSDT.xlsx', '2021-10-10 XLMUSDT.xlsx', '2021-10-10 BCHUSDT.xlsx', '2021-10-10 ADAUSDT.xlsx', '2021-10-10 XRPUSDT.xlsx', '2021-10-10 BTCUSDT.xlsx', '2021-10-10 EOSUSDT.xlsx', '2021-10-10 ETHUSDT.xlsx', '2021-10-10 LTCUSDT.xlsx', '2021-10-10 LINKUSDT.xlsx', '2021-10-10 ETCUSDT.ftr', '2021-10-10 BTCUSDT.ftr', '2021-10-10 ETHUSDT.ftr', '2021-10-10 ADAUSDT.ftr', '2021-10-10 XLMUSDT.ftr', '2021-10-10 LINKUSDT.ftr', '2021-10-10 LTCUSDT.ftr', '2021-10-10 EOSUSDT.ftr', '2021-10-10 XRPUSDT.ftr', '2021-10-10 BCHUSDT.ftr', '2021-11-16 LTCUSDT.ftr', '2021-11-16 LINKUSDT.ftr', '2021-11-16 XLMUSDT.ftr', '2021-11-16 ADAUSDT.ftr', '2021-11-16 ETCUSDT.ftr', '2021-11-16 BTCUSDT.ftr', '2021-11-16 ETHUSDT.ftr', '2021-11-16 XRPUSDT.ftr', '2021-11-16 BCHUSDT.ftr', '2021-11-16 EOSUSDT.ftr']\n","['2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx']\n"]}],"source":["interval = '1m'\n","date_path = './candlestick_concated/%s/quant_v2/' % interval\n","file_list = os.listdir(date_path)\n","print((file_list))\n","\n","interval2 = '3m'\n","date_path2 = './candlestick_concated/%s/quant_v2/' % interval2\n","file_list2 = os.listdir(date_path2)\n","print((file_list2))\n","\n","interval3 = '5m'\n","date_path3 = './candlestick_concated/%s/quant_v2/' % interval3\n","file_list3 = os.listdir(date_path3)\n","print((file_list3))\n","\n","interval4 = '15m'\n","date_path4 = './candlestick_concated/%s/quant_v2/' % interval4\n","file_list4 = os.listdir(date_path4)\n","print((file_list4))\n","\n","interval5 = '30m'\n","date_path5 = './candlestick_concated/%s/quant_v2/' % interval5\n","file_list5 = os.listdir(date_path5)\n","print((file_list5))\n","\n","interval6 = '1h'\n","date_path6 = './candlestick_concated/%s/quant_v2/' % interval6\n","file_list6 = os.listdir(date_path6)\n","print((file_list6))\n","\n","interval7 = '4h'\n","date_path7 = './candlestick_concated/%s/quant_v2/' % interval7\n","file_list7 = os.listdir(date_path7)\n","print((file_list7))\n","\n","interval8 = '1d'\n","date_path8 = './candlestick_concated/%s/quant_v2/' % interval8\n","file_list8 = os.listdir(date_path8)\n","print((file_list8))"]},{"cell_type":"markdown","metadata":{"id":"AUSBU7T8Suzi"},"source":["## basic_func"]},{"cell_type":"code","execution_count":2,"metadata":{"id":"QmhLikYlSuzi","executionInfo":{"status":"ok","timestamp":1640116253258,"user_tz":-540,"elapsed":973,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}}},"outputs":[],"source":["def sync_check(df, second_df=None, third_df=None, fourth_df=None, fifth_df=None,\n","               sixth_df=None, seventh_df=None, eighth_df=None):\n","\n","    #           supertrend          #\n","    # df = st_price_line(df, second_df, '3m')\n","    # # print(df.head(100))\n","    # # return\n","\n","    # df = st_price_line(df, third_df, '5m')\n","    # df = st_price_line(df, fourth_df, '15m')\n","    # df = st_price_line(df, fifth_df, '30m')\n","    # df = st_price_line(df, sixth_df, '1h')\n","    # df = st_price_line(df, seventh_df, '4h')\n","\n","    # print(\"supertrend phase done\")\n","\n","    # --------------- rsi --------------- #  \n","    # df['rsi_1m'] = rsi(df, 14)    \n","    # third_df['rsi_5m'] = rsi(third_df, 14)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, third_df, [-1]), columns=['rsi_5m']))\n","    \n","    # print(\"rsi phase done\")\n","\n","\n","    # --------------- cci --------------- #  \n","    df['cci_1m'] = cci(df, 20)\n","\n","    print(\"cci phase done\")\n","\n","\n","    # --------------- ema --------------- #      \n","    # third_df['ema_5m'] = ema(third_df['close'], 200)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, third_df, [-1]), columns=['ema_5m']))\n","    \n","    # print(\"ema phase done\")\n","\n","\n","    # # --------------- dc --------------- #  \n","    # df = dc_line(df, None, '1m', dc_period=20)\n","    # df = dc_line(df, second_df, '3m', dc_period=20)\n","    # df = dc_line(df, third_df, '5m', dc_period=20)\n","    # df = dc_line(df, fourth_df, '15m', dc_period=20)\n","    # df = dc_line(df, fifth_df, '30m', dc_period=20)\n","    # df = dc_line(df, sixth_df, '1h', dc_period=20)\n","    # df = dc_line(df, seventh_df, '4h', dc_period=20)\n","\n","    # print(\"dc phase done\")\n","    \n","    # # --------------- bband --------------- #  \n","    # df = bb_line(df, None, '1m')\n","    # df = bb_line(df, second_df, '3m')\n","    # df = bb_line(df, third_df, '5m')\n","    # df = bb_line(df, fourth_df, '15m')\n","    # df = bb_line(df, fifth_df, '30m')\n","    # df = bb_line(df, sixth_df, '1h')\n","    # df = bb_line(df, seventh_df, '4h')\n","\n","    # print(\"bband phase done\")\n","\n","    # --------------- cbline --------------- #    \n","    # second_df['cloud_bline_3m'] = cloud_bline(second_df, 26)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, second_df, [-1]), columns=['cloud_bline_3m']))\n","    # third_df['cloud_bline_5m'] = cloud_bline(third_df, 26)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, third_df, [-1]), columns=['cloud_bline_5m']))\n","    # fourth_df['cloud_bline_15m'] = cloud_bline(fourth_df, 26)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, fourth_df, [-1]), columns=['cloud_bline_15m']))\n","    # fifth_df['cloud_bline_30m'] = cloud_bline(fifth_df, 26)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, fifth_df, [-1]), columns=['cloud_bline_30m']))\n","    # sixth_df['cloud_bline_1h'] = cloud_bline(sixth_df, 26)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, sixth_df, [-1]), columns=['cloud_bline_1h']))\n","    # seventh_df['cloud_bline_4h'] = cloud_bline(seventh_df, 26)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, seventh_df, [-1]), columns=['cloud_bline_4h']))\n","\n","    # print(\"cbline phase done\")\n","    \n","\n","    #           lucid sar              #\n","    # df['sar_1m'], df['sar_uptrend_1m'] = lucid_sar(df, return_uptrend=True)\n","\n","    # third_df['sar_5m'], third_df['sar_uptrend_5m'] = lucid_sar(third_df, return_uptrend=True)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, third_df, [-2, -1], backing_i=-1), columns=['sar_5m', 'sar_uptrend_5m']))\n","\n","    # fourth_df['sar_15m'], fourth_df['sar_uptrend_15m'] = lucid_sar(fourth_df, return_uptrend=True)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, fourth_df, [-2, -1], backing_i=-1), columns=['sar_15m', 'sar_uptrend_15m']))\n","\n","    # seventh_df['sar_4h'], seventh_df['sar_uptrend_4h'] = lucid_sar(seventh_df, return_uptrend=True)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, seventh_df, [-2, -1], backing_i=-1), columns=['sar_4h', 'sar_uptrend_4h']))\n","    \n","    # print(\"sar phase done\")\n","\n","    \n","    #           stochastic              #\n","    # df['stoch_1m'] = stoch(df, 13, 3, 3)\n","\n","    # third_df['stoch'] = stoch(third_df, 13, 3, 3)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, third_df, [-1], backing_i=-1), columns=['stoch_5m']))\n","\n","    # print(\"stoch phase done\")\n","\n","\n","    return df\n"]},{"cell_type":"markdown","metadata":{"id":"mEKyVbHWSuzi"},"source":["## make & save res_df (concat ÏÉùÍ∞ÅÌïòÎ©¥, timeindex sync ÎßûÏ∂∞ÏïºÌï®)"]},{"cell_type":"markdown","metadata":{"id":"VdukVo5-Suzj"},"source":["### old (xlsx)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":11,"status":"error","timestamp":1636201718856,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"khKb9nhlSuzj","outputId":"02bf2c60-f298-4fe9-e6bb-78230ac1348c"},"outputs":[{"ename":"NameError","evalue":"ignored","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-5-ee034491b257>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     11\u001b[0m \u001b[0ma_day\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m3600\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0;36m24\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     12\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 13\u001b[0;31m \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mtqdm\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfile_list\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     14\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     15\u001b[0m   \u001b[0mkeys\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mfile_list\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'file_list' is not defined"]}],"source":["pd.set_option('display.max_rows', 500)\n","pd.set_option('display.max_columns', 500)\n","pd.set_option('display.width', 1000)\n","\n","\n","save_path = './candlestick_concated/res_df/'\n","\n","exist_list = os.listdir(save_path)\n","\n","\n","a_day = 3600 * 24\n","\n","for i in tqdm(range(len(file_list))):\n","\n","  keys = [file_list[i]]\n","\n","  # if 'neo'.upper() not in file_list[i]:\n","    # continue\n","\n","  # if '2021-04-30'.upper() not in file_list[i]:\n","  if '2021-07-01'.upper() not in file_list[i]:\n","  # if '2021-10-10'.upper() not in file_list[i]:\n","    continue\n","\n","\n","  for key in keys:      \n","\n","    # if 'eth'.upper() not in key:\n","    #   continue\n","\n","    excel_name = key.replace(\".xlsx\", \"_st1h_backi2.xlsx\")\n","    excel_path = save_path + excel_name\n","\n","    if excel_name in exist_list:\n","      print(excel_name, \"already exist !\")\n","      continue\n","    \n","    open_indexes = []\n","    \n","    df = pd.read_excel(date_path + key, index_col=0)\n","    second_df = pd.read_excel(date_path2 + key, index_col=0)\n","    third_df = pd.read_excel(date_path3 + key, index_col=0)\n","    fourth_df = pd.read_excel(date_path4 + key, index_col=0)\n","    fifth_df = pd.read_excel(date_path5 + key, index_col=0)\n","    \n","    print(df.index[[0, -1]])\n","    print(second_df.index[[0, -1]])\n","    print(third_df.index[[0, -1]])\n","    print(fourth_df.index[[0, -1]])\n","    print(fifth_df.index[[0, -1]])\n","\n","    open_indexes.append(df.index[0])\n","    open_indexes.append(second_df.index[0])\n","    open_indexes.append(third_df.index[0])\n","    open_indexes.append(fourth_df.index[0])\n","    open_indexes.append(fifth_df.index[0])\n","    \n","    try:\n","      #     Todo    #\n","      #      1. 1m ÎßàÏßÄÎßâ timeindex Ïùò date Í∏∞Ï§Ä, 08:59:59.999000 Î•º last timestamp Î°ú ÏÑ§Ï†ï\n","      #      2. ÏãúÏûë timestamp Îäî Î™®Îì† tf Ïùò Í∞ÄÏû• ÏµúÍ∑º ÏãúÏûë index,\n","      #       a. 1m Ïùò ÏãúÏûë timeindex Îäî ÏµúÏÜå, htf Ïùò ÏãúÏûë timeindex Î≥¥Îã§ interval ÎßåÌÅº ÏïûÏÑúÏïºÌï®\n","      #         i. Îî∞ÎùºÏÑú 1m open_index, latest_open_index + 1d Î•º ÌïòÎ©¥ Îåê\n","      #           1. timestamp ÏúºÎ°ú Î≥ÄÌôòÌõÑ 1day Î•º ÎçîÌïòÍ≥† datetime ÏúºÎ°ú Î≥ÄÌôò\n","      sixth_df = pd.read_excel(date_path6 + key, index_col=0)\n","      seventh_df = pd.read_excel(date_path7 + key, index_col=0)\n","\n","      print(sixth_df.index[[0, -1]])\n","      print(seventh_df.index[[0, -1]])\n","      print()\n","\n","      open_indexes.append(sixth_df.index[0])\n","      open_indexes.append(seventh_df.index[0])\n","\n","    except Exception as e:\n","      print(e)\n","\n","    latest_open_index = sorted(open_indexes)[-1]\n","    \n","    open_ts = datetime.timestamp(latest_open_index)\n","    latest_open_index_1m = datetime.fromtimestamp(open_ts + a_day)\n","\n","    #   str Î°ú ÎßåÎì§Ïñ¥ Ï†ëÍ∑ºÌïòÎ©¥ Î∂àÍ∞ÄÌï®  #\n","    end_index = pd.to_datetime(str(df.index[-1]).split(\" \")[0] + \" 08:59:59.999000\")\n","    # break\n","\n","    sliced_df = df.loc[latest_open_index_1m:end_index] # to_lower_tf Ïùò Í∏∞Ï§Ä ltf\n","    sliced_second_df = second_df.loc[latest_open_index:end_index]\n","    sliced_third_df = third_df.loc[latest_open_index:end_index]\n","    sliced_fourth_df = fourth_df.loc[latest_open_index:end_index]\n","    sliced_fifth_df = fifth_df.loc[latest_open_index:end_index]\n","\n","    print(\"sliced index\")\n","    print(sliced_df.index[[0, -1]])\n","    print(sliced_second_df.index[[0, -1]])\n","    print(sliced_third_df.index[[0, -1]])\n","    print(sliced_fourth_df.index[[0, -1]])\n","    print(sliced_fifth_df.index[[0, -1]])\n","\n","    try:\n","      sliced_sixth_df = sixth_df.loc[latest_open_index:end_index]\n","      sliced_seventh_df = seventh_df.loc[latest_open_index:end_index]\n","\n","      print(sliced_sixth_df.index[[0, -1]])\n","      print(sliced_seventh_df.index[[0, -1]])\n","\n","      res_df = sync_check(sliced_df, sliced_second_df, sliced_third_df, sliced_fourth_df, sliced_fifth_df, sliced_sixth_df, sliced_seventh_df)\n","    \n","    except:\n","      res_df = sync_check(sliced_df, sliced_second_df, sliced_third_df, sliced_fourth_df, sliced_fifth_df)\n","\n","\n","\n","    res_df.to_excel(excel_path)\n","    print(excel_name, \"saved succesfully !\")"]},{"cell_type":"markdown","metadata":{"id":"Bw5JibDKSuzj"},"source":["### xlsx to feather"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":355,"referenced_widgets":["be2b848dbcb14a079a2b7bd605af6435"]},"id":"VA-_gcA7Suzj","outputId":"f6f3b55d-ec2c-4b2c-d62e-3de7c0384dc4"},"outputs":[{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"be2b848dbcb14a079a2b7bd605af6435","version_major":2,"version_minor":0},"text/plain":["  0%|          | 0/156 [00:00<?, ?it/s]"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["DatetimeIndex(['2021-06-28 00:00:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:02:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:04:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:14:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:29:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-09-14 03:59:59.999000', '2021-11-15 14:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-03-10 20:59:59.999000', '2021-11-15 16:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","\n","xlsx converted to feather !\n","DatetimeIndex(['2021-06-28 00:00:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:02:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:04:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:14:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:29:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-09-14 03:59:59.999000', '2021-11-15 14:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-03-10 20:59:59.999000', '2021-11-15 16:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","\n","xlsx converted to feather !\n"]}],"source":["pd.set_option('display.max_rows', 500)\n","pd.set_option('display.max_columns', 500)\n","pd.set_option('display.width', 1000)\n","\n","\n","save_path = './candlestick_concated/res_df/'\n","\n","exist_list = os.listdir(save_path)\n","\n","\n","a_day = 3600 * 24\n","\n","for i in tqdm(range(len(file_list))):\n","\n","  keys = [file_list[i]]\n","\n","  # if 'neo'.upper() not in file_list[i]:\n","    # continue\n","\n","  # if '2021-04-30'.upper() not in file_list[i]:\n","  # if '2021-07-01'.upper() not in file_list[i]:\n","  if '2021-10-10'.upper() not in file_list[i]:\n","    continue\n","\n","\n","  for key in keys:      \n","\n","    # if 'eth'.upper() not in key:\n","    #   continue\n","\n","    feather_name = key.replace(\".xlsx\", \".ftr\")\n","    # feather_path = save_path + feather_name\n","\n","    if feather_name in exist_list:\n","      print(feather_name, \"already exist !\")\n","      continue\n","    \n","    open_indexes = []\n","    \n","    df = pd.read_excel(date_path + key, index_col=0)\n","    second_df = pd.read_excel(date_path2 + key, index_col=0)\n","    third_df = pd.read_excel(date_path3 + key, index_col=0)\n","    fourth_df = pd.read_excel(date_path4 + key, index_col=0)\n","    fifth_df = pd.read_excel(date_path5 + key, index_col=0)\n","    \n","    print(df.index[[0, -1]])\n","    print(second_df.index[[0, -1]])\n","    print(third_df.index[[0, -1]])\n","    print(fourth_df.index[[0, -1]])\n","    print(fifth_df.index[[0, -1]])\n","\n","    open_indexes.append(df.index[0])\n","    open_indexes.append(second_df.index[0])\n","    open_indexes.append(third_df.index[0])\n","    open_indexes.append(fourth_df.index[0])\n","    open_indexes.append(fifth_df.index[0])\n","    \n","    try:\n","      #     Todo    #\n","      #      1. 1m ÎßàÏßÄÎßâ timeindex Ïùò date Í∏∞Ï§Ä, 08:59:59.999000 Î•º last timestamp Î°ú ÏÑ§Ï†ï\n","      #      2. ÏãúÏûë timestamp Îäî Î™®Îì† tf Ïùò Í∞ÄÏû• ÏµúÍ∑º ÏãúÏûë index,\n","      #       a. 1m Ïùò ÏãúÏûë timeindex Îäî ÏµúÏÜå, htf Ïùò ÏãúÏûë timeindex Î≥¥Îã§ interval ÎßåÌÅº ÏïûÏÑúÏïºÌï®\n","      #         i. Îî∞ÎùºÏÑú 1m open_index, latest_open_index + 1d Î•º ÌïòÎ©¥ Îåê\n","      #           1. timestamp ÏúºÎ°ú Î≥ÄÌôòÌõÑ 1day Î•º ÎçîÌïòÍ≥† datetime ÏúºÎ°ú Î≥ÄÌôò\n","      sixth_df = pd.read_excel(date_path6 + key, index_col=0)\n","      seventh_df = pd.read_excel(date_path7 + key, index_col=0)\n","\n","      print(sixth_df.index[[0, -1]])\n","      print(seventh_df.index[[0, -1]])\n","      print()\n","\n","      open_indexes.append(sixth_df.index[0])\n","      open_indexes.append(seventh_df.index[0])\n","\n","    except Exception as e:\n","      print(e)\n","\n","\n","    df.reset_index().to_feather(date_path + feather_name, compression='lz4')\n","    second_df.reset_index().to_feather(date_path2 + feather_name, compression='lz4')\n","    third_df.reset_index().to_feather(date_path3 + feather_name, compression='lz4')\n","    fourth_df.reset_index().to_feather(date_path4 + feather_name, compression='lz4')\n","    fifth_df.reset_index().to_feather(date_path5 + feather_name, compression='lz4')\n","    sixth_df.reset_index().to_feather(date_path6 + feather_name, compression='lz4')\n","    seventh_df.reset_index().to_feather(date_path7 + feather_name, compression='lz4')\n","\n","    print(\"xlsx converted to feather !\")\n","    "]},{"cell_type":"markdown","metadata":{"id":"Pe0QpnORSuzk"},"source":["### add itv_name to ftr"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":223,"referenced_widgets":["e3225655da874b8d89cc8b2a381b3fb6"]},"executionInfo":{"elapsed":43664,"status":"ok","timestamp":1638246331122,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"M-gl30KxSuzk","outputId":"1cfcb580-8d25-4bd0-fdd0-213640779ce2"},"outputs":[{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"e3225655da874b8d89cc8b2a381b3fb6","version_major":2,"version_minor":0},"text/plain":["  0%|          | 0/175 [00:00<?, ?it/s]"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 BTCUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 BCHUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 XRPUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 EOSUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 LTCUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 ETCUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 LINKUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 XLMUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 ADAUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 ETHUSDT_1m.ftr\n"]}],"source":["save_path = './candlestick_concated/res_df/'\n","\n","# dir_path = \"bbdc3m_backi2\"\n","# date = '2021-10-10'\n","date = '2021-07-01'\n","\n","db_path = './candlestick_concated/database_bn/non_cum/%s/' % date\n","os.makedirs(os.path.join(db_path), exist_ok=True)\n","\n","# exist_list = os.listdir(os.path.join(save_path, dir_path))\n","# break\n","\n","\n","a_day = 3600 * 24\n","\n","for i in tqdm(range(len(file_list))):\n","\n","  keys = [file_list[i]]\n","\n","  # if 'neo'.upper() not in file_list[i]:\n","    # continue\n","\n","  if date not in file_list[i]:\n","    continue\n","\n","\n","  for key in keys:      \n","\n","    # if 'eth'.upper() not in key:\n","    #   continue\n","    # print(key)\n","    \n","    if \".ftr\" not in key:\n","      continue\n","        \n","    df = shutil.copy(date_path + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval))\n","    second_df = shutil.copy(date_path2 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval2))\n","    third_df = shutil.copy(date_path3 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval3))\n","    fourth_df = shutil.copy(date_path4 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval4))\n","    fifth_df = shutil.copy(date_path5 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval5))\n","    sixth_df = shutil.copy(date_path6 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval6))\n","    seventh_df = shutil.copy(date_path7 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval7))\n","\n","    print(\"copied to\" + db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval))\n"]},{"cell_type":"markdown","metadata":{"id":"4oZ1ohTtSuzk"},"source":["### feather ver."]},{"cell_type":"code","execution_count":5,"metadata":{"id":"vgVHpnUsSuzk","colab":{"base_uri":"https://localhost:8080/","height":0,"referenced_widgets":["3248269ddb834177a2b9ba345f725914","e30de8369fd0496c808858ae84d62a38","e6f38efe525e45f1b3e8829c2c1f4ab2","a437d95e0ad54294852915b1e1efcc32","c0600a657ddd4fe4b1412dbdbe31ad98","dcb23ab76ffb463082df93d2b28e4755","6cd132bb6dbe45fe8c9ae8f28cfd5061","95bab76eb9ec41ecb69672bb7b7a4573","1a7b046717e243828bfb878a7add3f84","bc605d72a60b4e44893ee8babc593960","790b1bdff52747bc84a3ff4425c7b198"]},"executionInfo":{"status":"ok","timestamp":1640118645943,"user_tz":-540,"elapsed":2334304,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"df5b4def-cb2a-4136-9cbb-443da9f80f0e"},"outputs":[{"output_type":"display_data","data":{"application/vnd.jupyter.widget-view+json":{"model_id":"3248269ddb834177a2b9ba345f725914","version_minor":0,"version_major":2},"text/plain":["  0%|          | 0/70 [00:00<?, ?it/s]"]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["DatetimeIndex(['2020-09-05 00:00:59.999000', '2021-11-17 00:47:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-04 00:02:59.999000', '2021-11-17 00:53:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-04 00:04:59.999000', '2021-11-17 00:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-04 00:14:59.999000', '2021-11-17 01:14:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-04 00:29:59.999000', '2021-11-17 01:29:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-05 00:59:59.999000', '2021-11-17 01:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-05 04:59:59.999000', '2021-11-17 04:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","\n","sliced index\n","DatetimeIndex(['2020-09-06 04:59:59.999000', '2021-11-16 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-05 04:59:59.999000', '2021-11-16 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-05 04:59:59.999000', '2021-11-16 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-05 04:59:59.999000', '2021-11-16 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-05 04:59:59.999000', '2021-11-16 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-05 04:59:59.999000', '2021-11-16 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-05 04:59:59.999000', '2021-11-16 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:26: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n"]},{"output_type":"stream","name":"stdout","text":["cci phase done\n","./candlestick_concated/res_df/cci_backi2/noncat/cum/2021-11-17/2021-11-17 ETHUSDT.ftr saved succesfully !\n","DatetimeIndex(['2020-09-05 00:00:59.999000', '2021-11-17 00:47:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-04 00:02:59.999000', '2021-11-17 00:53:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-04 00:04:59.999000', '2021-11-17 00:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-04 00:14:59.999000', '2021-11-17 01:14:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-04 00:29:59.999000', '2021-11-17 01:29:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-05 00:59:59.999000', '2021-11-17 01:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-05 04:59:59.999000', '2021-11-17 04:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","\n","sliced index\n","DatetimeIndex(['2020-09-06 04:59:59.999000', '2021-11-16 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-05 04:59:59.999000', '2021-11-16 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-05 04:59:59.999000', '2021-11-16 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-05 04:59:59.999000', '2021-11-16 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-05 04:59:59.999000', '2021-11-16 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-05 04:59:59.999000', '2021-11-16 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-05 04:59:59.999000', '2021-11-16 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","cci phase done\n","./candlestick_concated/res_df/cci_backi2/noncat/cum/2021-11-17/2021-11-17 BTCUSDT.ftr saved succesfully !\n","DatetimeIndex(['2020-09-05 00:00:59.999000', '2021-11-17 00:47:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-04 00:02:59.999000', '2021-11-17 00:53:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-04 00:04:59.999000', '2021-11-17 00:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-04 00:14:59.999000', '2021-11-17 01:14:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-04 00:29:59.999000', '2021-11-17 01:29:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-05 00:59:59.999000', '2021-11-17 01:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-05 04:59:59.999000', '2021-11-17 04:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","\n","sliced index\n","DatetimeIndex(['2020-09-06 04:59:59.999000', '2021-11-16 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-05 04:59:59.999000', '2021-11-16 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-05 04:59:59.999000', '2021-11-16 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-05 04:59:59.999000', '2021-11-16 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-05 04:59:59.999000', '2021-11-16 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-05 04:59:59.999000', '2021-11-16 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-05 04:59:59.999000', '2021-11-16 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","cci phase done\n","./candlestick_concated/res_df/cci_backi2/noncat/cum/2021-11-17/2021-11-17 ETCUSDT.ftr saved succesfully !\n","DatetimeIndex(['2020-09-05 00:00:59.999000', '2021-11-17 00:48:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-04 00:02:59.999000', '2021-11-17 00:53:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-04 00:04:59.999000', '2021-11-17 00:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-04 00:14:59.999000', '2021-11-17 01:14:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-04 00:29:59.999000', '2021-11-17 01:29:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-05 00:59:59.999000', '2021-11-17 01:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-05 04:59:59.999000', '2021-11-17 04:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","\n","sliced index\n","DatetimeIndex(['2020-09-06 04:59:59.999000', '2021-11-16 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-05 04:59:59.999000', '2021-11-16 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-05 04:59:59.999000', '2021-11-16 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-05 04:59:59.999000', '2021-11-16 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-05 04:59:59.999000', '2021-11-16 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-05 04:59:59.999000', '2021-11-16 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-05 04:59:59.999000', '2021-11-16 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","cci phase done\n","./candlestick_concated/res_df/cci_backi2/noncat/cum/2021-11-17/2021-11-17 ADAUSDT.ftr saved succesfully !\n","DatetimeIndex(['2020-09-05 00:00:59.999000', '2021-11-17 00:49:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-04 00:02:59.999000', '2021-11-17 00:53:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-04 00:04:59.999000', '2021-11-17 00:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-04 00:14:59.999000', '2021-11-17 01:14:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-04 00:29:59.999000', '2021-11-17 01:29:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-05 00:59:59.999000', '2021-11-17 01:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-05 04:59:59.999000', '2021-11-17 04:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","\n","sliced index\n","DatetimeIndex(['2020-09-06 04:59:59.999000', '2021-11-16 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-05 04:59:59.999000', '2021-11-16 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-05 04:59:59.999000', '2021-11-16 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-05 04:59:59.999000', '2021-11-16 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-05 04:59:59.999000', '2021-11-16 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-05 04:59:59.999000', '2021-11-16 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-05 04:59:59.999000', '2021-11-16 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","cci phase done\n","./candlestick_concated/res_df/cci_backi2/noncat/cum/2021-11-17/2021-11-17 LINKUSDT.ftr saved succesfully !\n","DatetimeIndex(['2020-09-05 00:00:59.999000', '2021-11-17 00:48:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-04 00:02:59.999000', '2021-11-17 00:53:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-04 00:04:59.999000', '2021-11-17 00:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-04 00:14:59.999000', '2021-11-17 01:14:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-04 00:29:59.999000', '2021-11-17 01:29:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-05 00:59:59.999000', '2021-11-17 01:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-05 04:59:59.999000', '2021-11-17 04:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","\n","sliced index\n","DatetimeIndex(['2020-09-06 04:59:59.999000', '2021-11-16 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-05 04:59:59.999000', '2021-11-16 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-05 04:59:59.999000', '2021-11-16 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-05 04:59:59.999000', '2021-11-16 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-05 04:59:59.999000', '2021-11-16 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-05 04:59:59.999000', '2021-11-16 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-05 04:59:59.999000', '2021-11-16 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","cci phase done\n","./candlestick_concated/res_df/cci_backi2/noncat/cum/2021-11-17/2021-11-17 XLMUSDT.ftr saved succesfully !\n","DatetimeIndex(['2020-09-05 00:00:59.999000', '2021-11-17 00:49:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-04 00:02:59.999000', '2021-11-17 00:56:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-04 00:04:59.999000', '2021-11-17 00:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-04 00:14:59.999000', '2021-11-17 01:14:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-04 00:29:59.999000', '2021-11-17 01:29:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-05 00:59:59.999000', '2021-11-17 01:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-05 04:59:59.999000', '2021-11-17 04:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","\n","sliced index\n","DatetimeIndex(['2020-09-06 04:59:59.999000', '2021-11-16 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-05 04:59:59.999000', '2021-11-16 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-05 04:59:59.999000', '2021-11-16 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-05 04:59:59.999000', '2021-11-16 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-05 04:59:59.999000', '2021-11-16 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-05 04:59:59.999000', '2021-11-16 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-05 04:59:59.999000', '2021-11-16 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","cci phase done\n","./candlestick_concated/res_df/cci_backi2/noncat/cum/2021-11-17/2021-11-17 LTCUSDT.ftr saved succesfully !\n","DatetimeIndex(['2020-09-05 00:00:59.999000', '2021-11-17 00:50:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-04 00:02:59.999000', '2021-11-17 00:56:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-04 00:04:59.999000', '2021-11-17 00:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-04 00:14:59.999000', '2021-11-17 01:14:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-04 00:29:59.999000', '2021-11-17 01:29:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-05 00:59:59.999000', '2021-11-17 01:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-05 04:59:59.999000', '2021-11-17 04:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","\n","sliced index\n","DatetimeIndex(['2020-09-06 04:59:59.999000', '2021-11-16 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-05 04:59:59.999000', '2021-11-16 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-05 04:59:59.999000', '2021-11-16 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-05 04:59:59.999000', '2021-11-16 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-05 04:59:59.999000', '2021-11-16 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-05 04:59:59.999000', '2021-11-16 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-05 04:59:59.999000', '2021-11-16 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","cci phase done\n","./candlestick_concated/res_df/cci_backi2/noncat/cum/2021-11-17/2021-11-17 EOSUSDT.ftr saved succesfully !\n","DatetimeIndex(['2020-09-05 00:00:59.999000', '2021-11-17 00:50:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-04 00:02:59.999000', '2021-11-17 00:56:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-04 00:04:59.999000', '2021-11-17 00:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-04 00:14:59.999000', '2021-11-17 01:14:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-04 00:29:59.999000', '2021-11-17 01:29:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-05 00:59:59.999000', '2021-11-17 01:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-05 04:59:59.999000', '2021-11-17 04:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","\n","sliced index\n","DatetimeIndex(['2020-09-06 04:59:59.999000', '2021-11-16 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-05 04:59:59.999000', '2021-11-16 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-05 04:59:59.999000', '2021-11-16 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-05 04:59:59.999000', '2021-11-16 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-05 04:59:59.999000', '2021-11-16 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-05 04:59:59.999000', '2021-11-16 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-05 04:59:59.999000', '2021-11-16 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","cci phase done\n","./candlestick_concated/res_df/cci_backi2/noncat/cum/2021-11-17/2021-11-17 XRPUSDT.ftr saved succesfully !\n","DatetimeIndex(['2020-09-05 00:00:59.999000', '2021-11-17 00:51:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-04 00:02:59.999000', '2021-11-17 00:56:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-04 00:04:59.999000', '2021-11-17 00:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-04 00:14:59.999000', '2021-11-17 01:14:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-04 00:29:59.999000', '2021-11-17 01:29:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-05 00:59:59.999000', '2021-11-17 01:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-05 04:59:59.999000', '2021-11-17 04:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","\n","sliced index\n","DatetimeIndex(['2020-09-06 04:59:59.999000', '2021-11-16 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-05 04:59:59.999000', '2021-11-16 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-05 04:59:59.999000', '2021-11-16 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-05 04:59:59.999000', '2021-11-16 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-05 04:59:59.999000', '2021-11-16 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-05 04:59:59.999000', '2021-11-16 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-05 04:59:59.999000', '2021-11-16 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","cci phase done\n","./candlestick_concated/res_df/cci_backi2/noncat/cum/2021-11-17/2021-11-17 BCHUSDT.ftr saved succesfully !\n"]}],"source":["# db_path = './candlestick_concated/database_ub/'\n","db_path = './candlestick_concated/database_bn/'\n","\n","\n","save_path = './candlestick_concated/res_df/'\n","save_dir_path = \"cci_backi2\"\n","\n","date = '2021-11-17'\n","\n","data_path = os.path.join(db_path, \"cum\", date) \n","save_path = os.path.join(save_path, save_dir_path, 'noncat/cum', date)\n","os.makedirs(save_path, exist_ok=True)\n","\n","file_list = os.listdir(data_path)\n","exist_list = os.listdir(save_path)\n","# break\n","\n","interval = '1m'\n","interval2 = '3m'\n","interval3 = '5m'\n","interval4 = '15m'\n","interval5 = '30m'\n","interval6 = '1h'\n","interval7 = '4h'\n","interval8 = '1d'\n","\n","a_day = 3600 * 24\n","\n","for i in tqdm(range(len(file_list))):\n","\n","  keys = [file_list[i]]\n","\n","  # if 'neo'.upper() not in file_list[i]:\n","    # continue\n","\n","  if date not in file_list[i]:\n","    continue\n","\n","\n","  for key in keys:      \n","\n","    # if 'eth'.upper() not in key:\n","    #   continue\n","    # print(key)\n","    \n","    if \".ftr\" not in key:\n","      continue\n","\n","    if \"_1m\" not in key:\n","      continue\n","\n","    # feather_name = key.replace(\".ftr\", \"_%.ftr\" % save_dir_path)\n","    feather_name = key.replace(\"_1m\", \"\")\n","    feather_path = os.path.join(save_path, feather_name)\n","\n","    if feather_name in exist_list:\n","      print(feather_name, \"already exist !\")\n","      continue\n","    \n","    open_indexes = []\n","    end_indexes = []\n","    \n","    df = pd.read_feather(os.path.join(data_path, key), columns=None, use_threads=True).set_index(\"index\")\n","    second_df = pd.read_feather(os.path.join(data_path, key.replace(interval, interval2)), columns=None, use_threads=True).set_index(\"index\")\n","    third_df = pd.read_feather(os.path.join(data_path, key.replace(interval, interval3)), columns=None, use_threads=True).set_index(\"index\")\n","    fourth_df = pd.read_feather(os.path.join(data_path, key.replace(interval, interval4)), columns=None, use_threads=True).set_index(\"index\")\n","    fifth_df = pd.read_feather(os.path.join(data_path, key.replace(interval, interval5)), columns=None, use_threads=True).set_index(\"index\")\n","        \n","    print(df.index[[0, -1]])\n","    print(second_df.index[[0, -1]])\n","    print(third_df.index[[0, -1]])\n","    print(fourth_df.index[[0, -1]])\n","    print(fifth_df.index[[0, -1]])\n","\n","    open_indexes.append(df.index[0])\n","    open_indexes.append(second_df.index[0])\n","    open_indexes.append(third_df.index[0])\n","    open_indexes.append(fourth_df.index[0])\n","    open_indexes.append(fifth_df.index[0])\n","    end_indexes.append(df.index[-1])\n","    end_indexes.append(second_df.index[-1])\n","    end_indexes.append(third_df.index[-1])\n","    end_indexes.append(fourth_df.index[-1])\n","    end_indexes.append(fifth_df.index[-1])\n","    \n","    try:\n","      #     Todo    #\n","      #      1. 1m ÎßàÏßÄÎßâ timeindex Ïùò date Í∏∞Ï§Ä, 08:59:59.999000 Î•º last timestamp Î°ú ÏÑ§Ï†ï\n","      #      2. ÏãúÏûë timestamp Îäî Î™®Îì† tf Ïùò Í∞ÄÏû• ÏµúÍ∑º ÏãúÏûë index,\n","      #       a. 1m Ïùò ÏãúÏûë timeindex Îäî ÏµúÏÜå, htf Ïùò ÏãúÏûë timeindex Î≥¥Îã§ interval ÎßåÌÅº ÏïûÏÑúÏïºÌï®\n","      #         i. Îî∞ÎùºÏÑú 1m open_index, latest_open_index + 1d Î•º ÌïòÎ©¥ Îåê\n","      #           1. timestamp ÏúºÎ°ú Î≥ÄÌôòÌõÑ 1day Î•º ÎçîÌïòÍ≥† datetime ÏúºÎ°ú Î≥ÄÌôò\n","      sixth_df = pd.read_feather(os.path.join(data_path, key.replace(interval, interval6)), columns=None, use_threads=True).set_index(\"index\")\n","      seventh_df = pd.read_feather(os.path.join(data_path, key.replace(interval, interval7)), columns=None, use_threads=True).set_index(\"index\")\n","\n","      print(sixth_df.index[[0, -1]])\n","      print(seventh_df.index[[0, -1]])\n","      print()\n","\n","      open_indexes.append(sixth_df.index[0])\n","      open_indexes.append(seventh_df.index[0])\n","      end_indexes.append(sixth_df.index[-1])\n","      end_indexes.append(seventh_df.index[-1])\n","\n","    except Exception as e:\n","      print(e)\n","\n","    latest_open_index = sorted(open_indexes)[-1]\n","    recent_end_index = sorted(end_indexes)[0]\n","    \n","    open_ts = datetime.timestamp(latest_open_index)\n","    latest_open_index_1m = datetime.fromtimestamp(open_ts + a_day)\n","\n","    end_ts = datetime.timestamp(recent_end_index)\n","    recent_end_index_1m = datetime.fromtimestamp(end_ts - a_day)\n","\n","    #   str Î°ú ÎßåÎì§Ïñ¥ Ï†ëÍ∑ºÌïòÎ©¥ Î∂àÍ∞ÄÌï®  #\n","    #   latest_open_index_1m ÏùÄ latest_open_index Î≥¥Îã§ ÌÅ¨Í∏∞Îßå ÌïòÎ©¥ Îê®   # (9:00:00 ÍµêÏ≤¥ ÌïÑÏöîÏóÜÏù¥)\n","    if \"999000\" in str(df.index[-1]):\n","      # end_index = pd.to_datetime(str(df.index[-1]).split(\" \")[0] + \" 08:59:59.999000\")\n","      end_index = pd.to_datetime(str(recent_end_index_1m).split(\" \")[0] + \" 08:59:59.999000\")\n","    else:\n","      # end_index = pd.to_datetime(str(df.index[-1]).split(\" \")[0] + \" 09:00:00\")\n","      end_index = pd.to_datetime(str(recent_end_index_1m).split(\" \")[0] + \" 09:00:00\")\n","      # end_index = pd.to_datetime(\"2021-11-15\" + \" 09:00:00\")\n","\n","    #   ***** 1m open_idx Îäî htf Î≥¥Îã§ Ïª§ÏïºÌï® --> to_lower_tf Î•º ÏÇ¨Ïö©ÌïòÍ∏∞ ÏúÑÌï®ÏûÑ   #\n","    sliced_df = df.loc[latest_open_index_1m:end_index] # to_lower_tf Ïùò Í∏∞Ï§Ä ltf\n","\n","    sliced_second_df = second_df.loc[latest_open_index:end_index]\n","    sliced_third_df = third_df.loc[latest_open_index:end_index]\n","    sliced_fourth_df = fourth_df.loc[latest_open_index:end_index]\n","    sliced_fifth_df = fifth_df.loc[latest_open_index:end_index]\n","\n","    print(\"sliced index\")\n","    print(sliced_df.index[[0, -1]])\n","    print(sliced_second_df.index[[0, -1]])\n","    print(sliced_third_df.index[[0, -1]])\n","    print(sliced_fourth_df.index[[0, -1]])\n","    print(sliced_fifth_df.index[[0, -1]])\n","\n","    try:\n","      sliced_sixth_df = sixth_df.loc[latest_open_index:end_index]\n","      sliced_seventh_df = seventh_df.loc[latest_open_index:end_index]\n","\n","      print(sliced_sixth_df.index[[0, -1]])\n","      print(sliced_seventh_df.index[[0, -1]])\n","\n","      res_df = sync_check(sliced_df, sliced_second_df, sliced_third_df, sliced_fourth_df, sliced_fifth_df, sliced_sixth_df, sliced_seventh_df)\n","    \n","    except:\n","      res_df = sync_check(sliced_df, sliced_second_df, sliced_third_df, sliced_fourth_df, sliced_fifth_df)\n","\n","\n","\n","    # res_df.to_feather(feather_path)\n","    res_df.reset_index().to_feather(feather_path, compression='lz4')\n","    print(feather_path, \"saved succesfully !\")"]},{"cell_type":"markdown","metadata":{"id":"jTN3M842Suzl"},"source":["## concat & save new res_df"]},{"cell_type":"markdown","metadata":{"id":"MlFkpO1MSuzl"},"source":["### old (xlsx)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"U-3QkfbFSuzl"},"outputs":[],"source":["save_path = './candlestick_concated/res_df/'\n","\n","dict_name = \"2021-07-01 ETHUSDT_bb15m_backi2_res_dfs.pkl\"\n","\n","#     load with pickle    #\n","with open(save_path + dict_name, 'rb') as f:\n","  saved_res_df_dict = pickle.load(f)\n","\n","print(dict_name, \"loaded !\")\n","res_df_files = os.listdir(save_path)\n","res_df_files.reverse()\n","\n","print(res_df_files)\n","\n","res_df_dict = {}\n","\n","base_postfix = '_bb15m_backi2.xlsx'\n","new_postfix = '_st1h_backi2.xlsx'\n","\n","max_cnt = 10\n","sample_cnt = max_cnt\n","\n","for k_i, key in enumerate(res_df_files):\n","\n","  if '2021-07-01'.upper() not in key:\n","  # if '2021-10-10'.upper() not in key:\n","    continue\n","\n","  # if \"link\".upper() not in key:\n","  # if \"btc\".upper() not in key:\n","  #   continue\n","\n","  if new_postfix not in key:\n","    continue\n","\n","  # if key in \n","\n","  if sample_cnt == max_cnt:\n","    dict_name = \"%s_res_dfs.pkl\" % key.split(\".\")[0]\n","    print(\"dict_name :\", dict_name)\n","\n","  base_df = saved_res_df_dict[key.replace(new_postfix, base_postfix)]\n","  # base_df = pd.read_excel(save_path + key.replace(new_postfix, base_postfix), index_col=0)  \n","  res_df = pd.read_excel(save_path + key, index_col=0)  \n","\n","  # print(base_df.head())\n","  # print(res_df.head())\n","  # break\n","\n","  new_res_df = pd.concat([base_df, res_df], axis=1) # df_tot.drop_duplicates()\n","  # new_res_df.head()\n","\n","  droped_new_res_df = new_res_df.loc[:,~new_res_df.columns.duplicated(keep='last')]\n","  droped_new_res_df.head()\n","  # break\n","\n","  # res_df_dict[key] = res_df\n","  res_df_dict[key] = droped_new_res_df\n","  print(key, \"saved to dict !\")\n","\n","  #     save with pickle    #\n","  with open(save_path + dict_name, 'wb') as f:\n","    pickle.dump(res_df_dict, f)\n","\n","  sample_cnt -= 1\n","\n","  if sample_cnt <= 0:\n","    break\n"]},{"cell_type":"markdown","metadata":{"id":"t1E_eAyPSuzm"},"source":["### new col to latest feather (1m_indi. only)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"xyI5NrM7Suzm"},"outputs":[],"source":["save_path = './candlestick_concated/res_df/'\n","\n","cum_dir = \"cum\"\n","\n","new_dir_path = \"rsi_backi2\"\n","base_dir_path = \"bbdc3m_backi2\"\n","\n","new_date = '2021-11-17'\n","\n","\n","\n","#     load ftr list    #\n","base_save_path = os.path.join(save_path, base_dir_path, \"concat/cum\", new_date)\n","new_save_path = base_save_path.replace(base_dir_path, new_dir_path)\n","\n","#     save to (new) cum dir    #\n","#      1. if dir. not exists, makedir\n","os.makedirs(new_save_path, exist_ok=True)\n","\n","ftr_list = [s for s in os.listdir(base_save_path) if \"ftr\" in s]\n","print(ftr_list)\n","# break\n","\n","\n","max_cnt = 10\n","sample_cnt = max_cnt\n","\n","for key in ftr_list:\n","\n","  if new_date not in key:\n","    continue\n","\n","\n","  #       read from base postfix's directory    #\n","  base_df = pd.read_feather(os.path.join(base_save_path, key), columns=None, use_threads=True).set_index(\"index\")\n","  # print(base_df.head())\n","  # print(res_df.head())\n","  # break\n","\n","  droped_new_res_df = sync_check(base_df)\n","\n","  # new_res_df = pd.concat([base_df, res_df], axis=0) # df_tot.drop_duplicates()\n","  # # new_res_df.head()\n","\n","  # intersection_cols = res_df.columns.intersection(base_df.columns)\n","\n","  # droped_new_res_df = new_res_df.loc[~new_res_df.index.duplicated(keep='last'),intersection_cols]\n","  # droped_new_res_df = new_res_df.loc[:,~new_res_df.columns.duplicated(keep='last')]\n","  # droped_new_res_df = new_res_df.loc[:,~new_res_df.index.duplicated(keep='last')]\n","  # droped_new_res_df.head()\n","  # break\n","\n","  droped_new_res_df.reset_index().to_feather(os.path.join(new_save_path, key), compression='lz4')\n","\n","  print(os.path.join(new_save_path, key), \"saved !\")\n","\n","  # sample_cnt -= 1\n","\n","  # if sample_cnt <= 0:\n","  #   break\n"]},{"cell_type":"markdown","metadata":{"id":"nUs4fjVHSuzl"},"source":["### feather ver. (col concat)"]},{"cell_type":"code","execution_count":7,"metadata":{"id":"6cu-Y82iSuzl","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1640140601025,"user_tz":-540,"elapsed":43795,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"ed1b25d9-4019-45dd-f8ce-20e08dbbba87"},"outputs":[{"output_type":"stream","name":"stdout","text":["['2021-11-17 ETHUSDT.ftr', '2021-11-17 BTCUSDT.ftr', '2021-11-17 ETCUSDT.ftr', '2021-11-17 ADAUSDT.ftr', '2021-11-17 LINKUSDT.ftr', '2021-11-17 XLMUSDT.ftr', '2021-11-17 LTCUSDT.ftr', '2021-11-17 EOSUSDT.ftr', '2021-11-17 XRPUSDT.ftr', '2021-11-17 BCHUSDT.ftr']\n","./candlestick_concated/res_df/cci_backi2/concat/cum/2021-11-17/2021-11-17 ETHUSDT.ftr saved !\n","./candlestick_concated/res_df/cci_backi2/concat/cum/2021-11-17/2021-11-17 BTCUSDT.ftr saved !\n","./candlestick_concated/res_df/cci_backi2/concat/cum/2021-11-17/2021-11-17 ETCUSDT.ftr saved !\n","./candlestick_concated/res_df/cci_backi2/concat/cum/2021-11-17/2021-11-17 ADAUSDT.ftr saved !\n","./candlestick_concated/res_df/cci_backi2/concat/cum/2021-11-17/2021-11-17 LINKUSDT.ftr saved !\n","./candlestick_concated/res_df/cci_backi2/concat/cum/2021-11-17/2021-11-17 XLMUSDT.ftr saved !\n","./candlestick_concated/res_df/cci_backi2/concat/cum/2021-11-17/2021-11-17 LTCUSDT.ftr saved !\n","./candlestick_concated/res_df/cci_backi2/concat/cum/2021-11-17/2021-11-17 EOSUSDT.ftr saved !\n","./candlestick_concated/res_df/cci_backi2/concat/cum/2021-11-17/2021-11-17 XRPUSDT.ftr saved !\n","./candlestick_concated/res_df/cci_backi2/concat/cum/2021-11-17/2021-11-17 BCHUSDT.ftr saved !\n"]}],"source":["new_dir_path = \"cci_backi2\"\n","base_dir_path = \"ema5m_backi2\"\n","\n","# new_date = \"2021-07-01\"\n","new_date = \"2021-11-17\"\n","\n","#     save to (new) concat dir    #\n","#      1. if dir. not exists, makedir\n","save_path = './candlestick_concated/res_df/'\n","save_path = os.path.join(save_path, new_dir_path, \"concat/cum\", new_date)\n","os.makedirs(save_path, exist_ok=True)\n","\n","\n","#     load ftr list    #\n","# ftr_list = [s for s in os.listdir(os.path.join(save_path, new_dir_path)) if \"ftr\" in s]\n","\n","noncat_path = save_path.replace(\"concat/\", \"noncat/\")\n","ftr_list = [s for s in os.listdir(noncat_path) if \"ftr\" in s]\n","print(ftr_list)\n","# break\n","\n","\n","for key in ftr_list:\n","\n","  if new_date not in key:\n","    continue\n","\n","  #       read from base postfix's directory    #\n","  base_df = pd.read_feather(os.path.join(save_path.replace(new_dir_path, base_dir_path), key), columns=None, use_threads=True).set_index(\"index\")\n","  res_df = pd.read_feather(os.path.join(noncat_path, key), columns=None, use_threads=True).set_index(\"index\")\n","\n","  # print(base_df.head())\n","  # print(res_df.head())\n","  # break\n","\n","  new_res_df = pd.concat([base_df, res_df], axis=1) # df_tot.drop_duplicates()\n","  # new_res_df.head()\n","\n","  droped_new_res_df = new_res_df.loc[:,~new_res_df.columns.duplicated(keep='last')]\n","  # droped_new_res_df.head()\n","  # break\n","\n","  droped_new_res_df.reset_index().to_feather(os.path.join(save_path, key), compression='lz4')\n","\n","  # res_df_dict[key] = res_df\n","  # res_df_dict[key] = droped_new_res_df\n","  print(os.path.join(save_path, key), \"saved !\")\n","  \n","\n","  # sample_cnt -= 1\n","\n","  # if sample_cnt <= 0:\n","  #   break\n"]},{"cell_type":"code","execution_count":8,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":456,"status":"ok","timestamp":1640140606516,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"4GiF2NJPSuzm","outputId":"f68e17a9-ddb3-4e4b-f9ac-7a785bcea243"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["Index(['dc_upper_1m', 'dc_lower_1m', 'dc_base_1m', 'dc_upper_3m', 'dc_lower_3m', 'dc_base_3m', 'dc_upper_5m', 'dc_lower_5m', 'dc_base_5m', 'dc_upper_15m', 'dc_lower_15m', 'dc_base_15m', 'dc_upper_30m', 'dc_lower_30m', 'dc_base_30m', 'dc_upper_1h', 'dc_lower_1h', 'dc_base_1h', 'dc_upper_4h', 'dc_lower_4h', 'dc_base_4h', 'bb_upper_1m', 'bb_lower_1m', 'bb_upper_3m', 'bb_lower_3m', 'bb_upper_5m', 'bb_lower_5m', 'bb_upper_15m', 'bb_lower_15m', 'bb_upper_30m', 'bb_lower_30m', 'bb_upper_1h', 'bb_lower_1h', 'bb_upper_4h', 'bb_lower_4h', 'rsi_1m', 'rsi_5m', 'ema_5m', 'open', 'high', 'low', 'close', 'volume', 'cci_1m'], dtype='object')"]},"metadata":{},"execution_count":8}],"source":["droped_new_res_df.columns"]},{"cell_type":"markdown","metadata":{"id":"WVAKq3i8Suzm"},"source":["### feather ver. (row concat) , database cum ÎèÑ Ìò∏ÌôòÍ∞ÄÎä•"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"XG2p9OhhSuzm"},"outputs":[],"source":["save_path = './candlestick_concated/res_df/'\n","save_path = './candlestick_concated/database_bn/'\n","\n","new_date = '2021-11-17'\n","# base_date = '2021-10-10'\n","base_date = '2021-07-01'\n","\n","#     load ftr list    #\n","if \"database\" in save_path:\n","  dir_path = \"\"\n","  concat_dir = \"\"\n","else:\n","  dir_path = \"bbdc3m_backi2\"\n","  concat_dir = \"concat\"\n","\n","# base_date_path = os.path.join(save_path, dir_path, concat_dir, \"cum\", base_date)    # --> base ÎèÑ non_cum Í∞ÄÎä•Ìï®\n","base_date_path = os.path.join(save_path, dir_path, concat_dir, \"non_cum\", base_date)    # --> base ÎèÑ non_cum Í∞ÄÎä•Ìï®\n","# new_date_path = os.path.join(save_path, dir_path, concat_dir, \"non_cum\", new_date)\n","new_date_path = os.path.join(save_path, dir_path, concat_dir, \"cum\", new_date)    # --> cum Í∞ÄÎä•Ìï®\n","  \n","\n","\n","#     save to (new) concat dir    #\n","#      1. if dir. not exists, makedir\n","save_path = new_date_path.replace(\"non_cum\", \"cum\")\n","os.makedirs(save_path, exist_ok=True)   # noncat / concat ÎëêÍ∞ÄÏßÄ Í≤ΩÏö∞ Ï°¥Ïû¨Í∞ÄÎä•Ìï† Í≤É\n","# os.makedirs(os.path.join(save_path, dir_path, \"noncat/cum\", new_date), exist_ok=True)\n","\n","\n","ftr_list = [s for s in os.listdir(new_date_path) if \"ftr\" in s]\n","exist_list = os.listdir(save_path)\n","print(ftr_list)\n","# break\n","\n","\n","max_cnt = 10\n","sample_cnt = max_cnt\n","\n","for key in ftr_list:\n","\n","  if new_date not in key:\n","    continue\n","\n","  # if key in exist_list:\n","  #   print(key, \"already exist !\")\n","  #   continue\n","\n","  #       read from base postfix's directory    #\n","  base_df = pd.read_feather(os.path.join(base_date_path, key.replace(new_date, base_date)), columns=None, use_threads=True).set_index(\"index\")\n","  res_df = pd.read_feather(os.path.join(new_date_path, key), columns=None, use_threads=True).set_index(\"index\")\n","\n","  # print(base_df.head())\n","  # print(res_df.head())\n","  # break\n","\n","  new_res_df = pd.concat([base_df, res_df], axis=0) # df_tot.drop_duplicates()\n","  # new_res_df.head()\n","\n","  intersection_cols = res_df.columns.intersection(base_df.columns)\n","\n","  droped_new_res_df = new_res_df.loc[~new_res_df.index.duplicated(keep='last'),intersection_cols]\n","  # droped_new_res_df = new_res_df.loc[:,~new_res_df.columns.duplicated(keep='last')]\n","  # droped_new_res_df = new_res_df.loc[:,~new_res_df.index.duplicated(keep='last')]\n","  # droped_new_res_df.head()\n","  # break\n","  \n","  interval = key.split(\".\")[0].split(\"_\")[-1] \n","  itv_num = to_itvnum(interval)\n","\n","  # verified_df = consecutive_df(droped_new_res_df, to_itvnum(interval))\n","\n","  # verified_df.reset_index().to_feather(os.path.join(save_path, key), compression='lz4')\n","\n","  # res_df_dict[key] = res_df\n","  # res_df_dict[key] = droped_new_res_df\n","  \n","  print(droped_new_res_df.iloc[[0, -1]])\n","\n","  np_idx_ts = np.array(list(map(lambda x: datetime.timestamp(x), droped_new_res_df.index)))\n","  ideal_ts_gap = 60 * itv_num\n","\n","  for ts_i in range(len(np_idx_ts)):\n","    \n","    if ts_i != 0:\n","      ts_gap = np_idx_ts[ts_i] - np_idx_ts[ts_i - 1]\n","\n","      if ts_gap > ideal_ts_gap or ts_gap < ideal_ts_gap:\n","      # if ts_gap == ideal_ts_gap:\n","        print(droped_new_res_df.index[ts_i - 1])\n","        print(droped_new_res_df.index[ts_i])\n","        # print(ts_gap)\n","        print(\"-------------------- unideal ts_gap --------------------\")\n","\n","  droped_new_res_df.reset_index().to_feather(os.path.join(save_path, key), compression='lz4')\n","\n","  print(os.path.join(save_path, key), \"saved !\")\n","  \n","\n","  # sample_cnt -= 1\n","\n","  # if sample_cnt <= 0:\n","  #   break\n"]},{"cell_type":"markdown","metadata":{"id":"L7l5CTJfSuzn"},"source":["#### check continuity"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"nGzMGyC3Suzn"},"outputs":[],"source":["# print(droped_new_res_df.columns)\n","\n","print(droped_new_res_df.iloc[[0, -1]])\n","\n","np_idx_ts = np.array(list(map(lambda x: datetime.timestamp(x), droped_new_res_df.index)))\n","\n","print(np_idx_ts[:10])\n","for ts_i in range(len(np_idx_ts)):\n","  \n","  if ts_i != 0:\n","    ts_gap = np_idx_ts[ts_i] - np_idx_ts[ts_i - 1]\n","\n","    if ts_gap > 60 or ts_gap < 60:\n","    # if ts_gap == 60:\n","      print(droped_new_res_df.index[ts_i - 1])\n","      print(droped_new_res_df.index[ts_i])\n","      # print(ts_gap)\n","      print()\n"]},{"cell_type":"markdown","metadata":{"id":"qNGeuYuGDXfv"},"source":["# pr check with strategy"]},{"cell_type":"markdown","metadata":{"id":"6HOjnZjSgzk1"},"source":["## load ftr_list"]},{"cell_type":"code","execution_count":3,"metadata":{"id":"7FPBG5Qqg2jB","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1640233970141,"user_tz":-540,"elapsed":2075,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"48fb9acb-0963-4669-f6dc-208fa95ad2be"},"outputs":[{"output_type":"stream","name":"stdout","text":["['2021-11-17 ETHUSDT.ftr', '2021-11-17 BTCUSDT.ftr', '2021-11-17 ETCUSDT.ftr', '2021-11-17 ADAUSDT.ftr', '2021-11-17 LINKUSDT.ftr', '2021-11-17 XLMUSDT.ftr', '2021-11-17 LTCUSDT.ftr', '2021-11-17 EOSUSDT.ftr', '2021-11-17 XRPUSDT.ftr', '2021-11-17 BCHUSDT.ftr']\n"]}],"source":["save_path = './candlestick_concated/res_df/'\n","\n","dir_path = \"cci_backi2\"\n","\n","date = \"2021-11-17\"\n","\n","ftr_path = os.path.join(save_path, dir_path, \"concat/cum\", date)\n","\n","#     load ftr list    #\n","ftr_list = [s for s in os.listdir(ftr_path) if \"ftr\" in s if date in s]\n","# ftr_list = [s for s in os.listdir(os.path.join(save_path, dir_path)) if \"ftr\" in s if date in s]\n","print(ftr_list)"]},{"cell_type":"markdown","metadata":{"id":"5duWn8t4BRyv"},"source":["## hvp platform"]},{"cell_type":"markdown","metadata":{"id":"wmnyUTS-yjF1"},"source":["##### config"]},{"cell_type":"markdown","source":["###### set config (override available)"],"metadata":{"id":"JjKHyqftzhD7"}},{"cell_type":"code","execution_count":4,"metadata":{"id":"q_4E-zH02WJy","executionInfo":{"status":"ok","timestamp":1640233970141,"user_tz":-540,"elapsed":3,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}}},"outputs":[],"source":["#     caution : MARKET / LIMIT spelling   #\n","#      json doesn't support single quotes     #\n","\n","param_dict = \\\n","{\n","  \"strat_version\": \"v7\",\n","  \"trader_set\": {\n","    \"run\": 1,\n","    \"df_log\": 0,\n","    \"last_index\": -2,\n","    \"limit_fee\": 0.0002,\n","    \"market_fee\": 0.0004,\n","    \"initial_asset\": 1200,\n","    \"asset_changed\": 1,\n","    \"symbol\": \"ETHUSDT\",\n","    \"symbol_changed\": 0,\n","    \"interval_list\": [\n","      \"1m\",\n","      \"5m\",\n","      \"15m\"\n","    ],\n","    \"row_list\": [\n","      200,\n","      100,\n","      100\n","    ],\n","    \"bar_close_second\": 59,\n","    \"realtime_term\": 0.01,\n","    \"api_retry_term\": 3,\n","    \"check_entry_sec\": 10,\n","    \"entry_execution_wait\": 60,\n","    \"breakout_qty_ratio\": 0.97,\n","    \"qty_check_term\": 30,\n","    \"exit_execution_wait\": 60,\n","    \"close_complete_term\": 5,\n","    \"save_stacked_df\": 0,\n","    \"stacked_df_exist\": 1\n","  },\n","  \"pos_set\": {\n","    \"short_inversion\": 0,\n","    \"long_inversion\": 0,\n","    \"short_ban\": 1,\n","    \"long_ban\": 0\n","  },\n","  \"loc_set\": {\n","    \"zone\": {\n","      \"dtk_itv\": \"5m\",\n","      \"short_spread\": \"None\",\n","      \"long_spread\": \"None\",\n","      \"tr_thresh\": \"None\",\n","      \"dtk_dc_itv\": \"None\",\n","      \"dt_k\": \"None\",\n","      \"dc_period\": 135,\n","      \"ei_k\": -0.,\n","      \"use_dtk_line\": 0,\n","      \"zone_rejection\": 1,\n","      \"bbz_itv\": \"15m\",\n","      \"zone_dt_k\": 0.4,\n","      \"zone_dc_period\": 135,\n","      \"dr_error\": 0.1,\n","      \"bbwp_thresh\": 0.5,\n","      \"entry_incycle\": 5,\n","      \"max_eplim_pct\": 0.05,\n","      \"min_eplim_pct\": 0.013\n","    },\n","    \"point\": {\n","      \"exp_itv\": \"1m\",\n","      \"tpg_itv\": \"5m\",\n","      \"outg_itv\": \"5m\",\n","      \"outg_dc_period\": \"None\",\n","      \"tf_entry\": 1,\n","      \"htf_entry\": 15,\n","      \"candle_ratio\": \"None\",\n","      \"osc_band\": 200\n","    }\n","  },\n","  \"tr_set\": {\n","    \"ep_gap\": 0.0,\n","    \"tp_gap\": 0.38,\n","    \"out_gap\": 0.15,\n","    \"c_ep_gap\": \"None\",\n","    \"t_out_gap\": -0.0\n","  },\n","  \"ep_set\": {\n","    \"short_entry_score\": -2,\n","    \"entry_type\": \"LIMIT\",\n","    \"static_ep\": 1,\n","    \"tpout_onexec\": 0\n","  },\n","  \"out_set\": {\n","    \"out_type\": \"MARKET\",\n","    \"use_out\": 1,\n","    \"static_out\": 1,\n","    \"hl_out\": 1,\n","    \"price_restoration\": 0,\n","    \"retouch\": 0,\n","    \"retouch_out_period\": 500,\n","    \"second_out\": 0,\n","    \"approval_st_gap\": 1.5,\n","    \"second_out_gap\": 0.5\n","  },\n","  \"tp_set\": {\n","    \"non_tp\": 0,\n","    \"tp_type\": \"LIMIT\",\n","    \"static_tp\": 1,\n","    \"partial_num\": 1,\n","    \"partial_qty_divider\": 1.5\n","  },\n","  \"lvrg_set\": {\n","    \"leverage\": 2,\n","    \"static_lvrg\": 0,\n","    \"allow_float\": 0,\n","    \"target_pct\": 0.1,\n","    \"lvrg_rejection\": 0\n","  }\n","}\n","\n","config1 = EasyDict(param_dict)\n","# param_json = json.dumps(param_dict, indent=2)"]},{"cell_type":"markdown","source":["###### save config"],"metadata":{"id":"dzla8i9_ysmP"}},{"cell_type":"code","source":["config_name = \"config_v5_2.1220_candlejson\"\n","# config_name = \"config_v3.json\"\n","cfg_full_path = os.path.join(current_path, \"config\", config_name)\n","\n","\n","with open(cfg_full_path, 'w') as cfg:\n","    json.dump(config1, cfg, indent=2)\n","    print(\"{} dumped !\".format(cfg_full_path))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"FlNGKvW_w2za","executionInfo":{"status":"ok","timestamp":1639994748940,"user_tz":-540,"elapsed":544,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"c575ce69-def0-4e6c-c949-a63707467b2e"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["/content/drive/My Drive/Colab Notebooks/JnQ/config/config_v5_2.1220_candlejson dumped !\n"]}]},{"cell_type":"markdown","source":["###### load config"],"metadata":{"id":"vOVr2jLczFQJ"}},{"cell_type":"code","source":["config1_name = \"config_v5_2_1216.json\"\n","config2_name = \"config_v3_1216.json\"\n","cfg_full_path1 = os.path.join(current_path, \"config\", config1_name)\n","cfg_full_path2 = os.path.join(current_path, \"config\", config2_name)\n","\n","with open(cfg_full_path1, 'r') as cfg:\n","    config1 = EasyDict(json.load(cfg))\n","with open(cfg_full_path2, 'r') as cfg:\n","    config2 = EasyDict(json.load(cfg))\n","  \n","print(config1.strat_version)\n","print(config2.strat_version)"],"metadata":{"id":"uPpMThtZzGtZ","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1639963579929,"user_tz":-540,"elapsed":511,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"f2fb7919-c2ff-489e-8337-d4de5aab9f1a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["v5_2\n","v3\n"]}]},{"cell_type":"markdown","metadata":{"id":"rrIGjmUzqU-D"},"source":["##### utils override"]},{"cell_type":"markdown","source":["###### utils_"],"metadata":{"id":"leSQlImg4_9L"}},{"cell_type":"code","source":["\n","def enlist_rtc(res_df, config):\n","\n","    strat_version = config.strat_version\n","\n","    # res_df['short_rtc_1_{}'.format(strat_version)] = res_df['bb_lower_%s' % config.loc_set.point.tpg_itv]\n","    res_df['short_rtc_1_{}'.format(strat_version)] = res_df['dc_lower_%s' % config.loc_set.point.tpg_itv]\n","    res_df['short_rtc_0_{}'.format(strat_version)] = res_df['dc_upper_%s' % config.loc_set.point.outg_itv]\n","\n","    # res_df['long_rtc_1_{}'.format(strat_version)] = res_df['bb_upper_%s' % config.loc_set.point.tpg_itv]\n","    res_df['long_rtc_1_{}'.format(strat_version)] = res_df['dc_upper_%s' % config.loc_set.point.tpg_itv]\n","    res_df['long_rtc_0_{}'.format(strat_version)] = res_df['dc_lower_%s' % config.loc_set.point.outg_itv]\n","    \n","    #      entry reversion    #\n","    if config.ep_set.short_entry_score > 0:      \n","      short_rtc_1_copy = res_df['short_rtc_1_{}'.format(strat_version)].copy()\n","      res_df['short_rtc_1_{}'.format(strat_version)] = res_df['long_rtc_1_{}'.format(strat_version)]\n","      res_df['long_rtc_1_{}'.format(strat_version)] = short_rtc_1_copy\n","\n","      short_rtc_0_copy = res_df['short_rtc_0_{}'.format(strat_version)].copy()\n","      res_df['short_rtc_0_{}'.format(strat_version)] = res_df['long_rtc_0_{}'.format(strat_version)]\n","      res_df['long_rtc_0_{}'.format(strat_version)] = short_rtc_0_copy\n","\n","    res_df['short_rtc_gap_{}'.format(strat_version)] = abs(res_df['short_rtc_0_{}'.format(strat_version)] - res_df['short_rtc_1_{}'.format(strat_version)])\n","    res_df['long_rtc_gap_{}'.format(strat_version)] = abs(res_df['long_rtc_1_{}'.format(strat_version)] - res_df['long_rtc_0_{}'.format(strat_version)])\n","\n","    # res_df['h_short_rtc_1_{}'.format(strat_version)] = res_df['bb_lower_%s' % config.loc_set.point.tpg_itv]\n","    res_df['h_short_rtc_1_{}'.format(strat_version)] = res_df['dc_lower_%s' % config.loc_set.point.tpg_itv]\n","    res_df['h_short_rtc_0_{}'.format(strat_version)] = res_df['dc_upper_%s' % config.loc_set.point.tpg_itv]\n","\n","    # res_df['h_long_rtc_1_{}'.format(strat_version)] = res_df['bb_upper_%s' % config.loc_set.point.tpg_itv]\n","    res_df['h_long_rtc_1_{}'.format(strat_version)] = res_df['dc_upper_%s' % config.loc_set.point.tpg_itv]\n","    res_df['h_long_rtc_0_{}'.format(strat_version)] = res_df['dc_lower_%s' % config.loc_set.point.tpg_itv]\n","\n","    #      entry reversion    #\n","    if config.ep_set.short_entry_score > 0:      \n","      h_short_rtc_1_copy = res_df['h_short_rtc_1_{}'.format(strat_version)].copy()\n","      res_df['h_short_rtc_1_{}'.format(strat_version)] = res_df['h_long_rtc_1_{}'.format(strat_version)]\n","      res_df['h_long_rtc_1_{}'.format(strat_version)] = h_short_rtc_1_copy\n","\n","      h_short_rtc_0_copy = res_df['h_short_rtc_0_{}'.format(strat_version)].copy()\n","      res_df['h_short_rtc_0_{}'.format(strat_version)] = res_df['h_long_rtc_0_{}'.format(strat_version)]\n","      res_df['h_long_rtc_0_{}'.format(strat_version)] = h_short_rtc_0_copy\n","\n","    res_df['h_short_rtc_gap_{}'.format(strat_version)] = abs(res_df['h_short_rtc_0_{}'.format(strat_version)] - res_df['h_short_rtc_1_{}'.format(strat_version)])\n","    res_df['h_long_rtc_gap_{}'.format(strat_version)] = abs(res_df['h_long_rtc_1_{}'.format(strat_version)] - res_df['h_long_rtc_0_{}'.format(strat_version)])   \n","\n","    res_df['short_dtk_1_{}'.format(strat_version)] = res_df['bb_lower_%s' % config.loc_set.zone.dtk_itv]\n","    res_df['short_dtk_0_{}'.format(strat_version)] = res_df['dc_upper_%s' % config.loc_set.zone.dtk_itv]\n","    res_df['short_dtk_gap_{}'.format(strat_version)] = res_df['short_dtk_0_{}'.format(strat_version)] - res_df['short_dtk_1_{}'.format(strat_version)]\n","\n","    res_df['long_dtk_1_{}'.format(strat_version)] = res_df['bb_upper_%s' % config.loc_set.zone.dtk_itv]\n","    res_df['long_dtk_0_{}'.format(strat_version)] = res_df['dc_lower_%s' % config.loc_set.zone.dtk_itv]\n","    res_df['long_dtk_gap_{}'.format(strat_version)] = res_df['long_dtk_1_{}'.format(strat_version)] - res_df['long_dtk_0_{}'.format(strat_version)]\n","\n","    return res_df\n","\n","\n","def enlist_tr(res_df, config, np_timeidx):\n","\n","    strat_version = config.strat_version\n","\n","    res_df['entry_{}'.format(strat_version)] = np.zeros(len(res_df))\n","    res_df['h_entry_{}'.format(strat_version)] = np.zeros(len(res_df))\n","\n","    # -------- set ep level -------- #\n","\n","    #       limit ver.     #\n","    # res_df['short_ep_{}'.format(strat_version)] = res_df['h_short_rtc_1_{}'.format(strat_version)] + res_df['h_short_rtc_gap_{}'.format(strat_version)] * config.tr_set.ep_gap\n","    # res_df['long_ep_{}'.format(strat_version)] = res_df['h_long_rtc_1_{}'.format(strat_version)] - res_df['h_long_rtc_gap_{}'.format(strat_version)] * config.tr_set.ep_gap\n","\n","    res_df['short_ep_{}'.format(strat_version)] = res_df['close'] #+ res_df['h_short_rtc_gap'] * config.tr_set.ep_gap\n","    res_df['long_ep_{}'.format(strat_version)] = res_df['close'] #- res_df['h_long_rtc_gap'] * config.tr_set.ep_gap\n","\n","\n","    if config.tr_set.c_ep_gap != \"None\":\n","        res_df['short_ep_org_{}'.format(strat_version)] = res_df['short_ep_{}'.format(strat_version)].copy()\n","        res_df['long_ep_org_{}'.format(strat_version)] = res_df['long_ep_{}'.format(strat_version)].copy()\n","\n","        res_df['short_ep2_{}'.format(strat_version)] = res_df['h_short_rtc_1_{}'.format(strat_version)] + res_df['h_short_rtc_gap_{}'.format(strat_version)] * config.tr_set.c_ep_gap\n","        res_df['long_ep2_{}'.format(strat_version)] = res_df['h_long_rtc_1_{}'.format(strat_version)] - res_df['h_long_rtc_gap_{}'.format(strat_version)] * config.tr_set.c_ep_gap\n","\n","    res_df['short_spread_ep_{}'.format(strat_version)] = res_df['bb_lower_5m'] #+ res_df['h_short_rtc_gap'] * config.loc_set.zone.spread_ep_gap\n","    res_df['long_spread_ep_{}'.format(strat_version)] = res_df['bb_upper_5m']  #- res_df['h_long_rtc_gap'] * config.loc_set.zone.spread_ep_gap\n","\n","    #       market ver.     #\n","    if config.ep_set.entry_type == \"MARKET\":\n","        res_df['short_ep_{}'.format(strat_version)] = res_df['close']\n","        res_df['long_ep_{}'.format(strat_version)] = res_df['close']\n","\n","    # ---------------------------------------- short = -1 ---------------------------------------- #\n","    # ---------------- ep_time  ---------------- #\n","\n","    # cci_upper = 150\n","    # cci_lower = -150\n","    cci_upper = config.loc_set.point.osc_band\n","    cci_lower = -config.loc_set.point.osc_band\n","\n","    res_df['cci_%s_shift' % config.loc_set.point.exp_itv] = res_df['cci_%s' % config.loc_set.point.exp_itv].shift(config.loc_set.point.tf_entry)\n","\n","    res_df['entry_{}'.format(strat_version)] = np.where((res_df['cci_%s_shift' % config.loc_set.point.exp_itv] >= cci_upper) &\n","                              (res_df['cci_%s' % config.loc_set.point.exp_itv] < cci_upper)\n","                              , res_df['entry_{}'.format(strat_version)] - 1, res_df['entry_{}'.format(strat_version)])\n","\n","    res_df['entry_{}'.format(strat_version)] = np.where((res_df['entry_{}'.format(strat_version)] < 0) &\n","                              (np_timeidx % config.loc_set.point.tf_entry == (config.loc_set.point.tf_entry - 1))\n","                              , res_df['entry_{}'.format(strat_version)] - 1, res_df['entry_{}'.format(strat_version)])\n","    \n","    res_df['h_entry_{}'.format(strat_version)] = np.where(  # (res_df['open'] >= res_df['bb_lower_%s' % config.loc_set.zone.dtk_itv]) &\n","        (res_df['close'].shift(config.loc_set.point.htf_entry * 1) >= res_df['bb_lower_%s' % config.loc_set.zone.dtk_itv]) &\n","        (res_df['close'] < res_df['bb_lower_%s' % config.loc_set.zone.dtk_itv]) &\n","        (np_timeidx % config.loc_set.point.htf_entry == (config.loc_set.point.htf_entry - 1))\n","        , res_df['h_entry_{}'.format(strat_version)] - 1, res_df['h_entry_{}'.format(strat_version)])\n","\n","    # ---------------------------------------- long = 1 ---------------------------------------- #\n","    # ---------------------- ep_time ---------------------- #\n","\n","    res_df['entry_{}'.format(strat_version)] = np.where((res_df['cci_%s_shift' % config.loc_set.point.exp_itv] <= cci_lower) &\n","                              (res_df['cci_%s' % config.loc_set.point.exp_itv] > cci_lower)\n","                              , res_df['entry_{}'.format(strat_version)] + 1, res_df['entry_{}'.format(strat_version)])\n","\n","    res_df['entry_{}'.format(strat_version)] = np.where((res_df['entry_{}'.format(strat_version)] > 0) &\n","                              (np_timeidx % config.loc_set.point.tf_entry == (config.loc_set.point.tf_entry - 1))\n","                              , res_df['entry_{}'.format(strat_version)] + 1, res_df['entry_{}'.format(strat_version)])\n","      \n","    res_df['h_entry_{}'.format(strat_version)] = np.where(  # (res_df['open'] <= res_df['bb_upper_%s' % config.loc_set.zone.dtk_itv]) &\n","        (res_df['close'].shift(config.loc_set.point.htf_entry * 1) <= res_df['bb_upper_%s' % config.loc_set.zone.dtk_itv]) &\n","        (res_df['close'] > res_df['bb_upper_%s' % config.loc_set.zone.dtk_itv]) &\n","        (np_timeidx % config.loc_set.point.htf_entry == (config.loc_set.point.htf_entry - 1))\n","        , res_df['h_entry_{}'.format(strat_version)] + 1, res_df['h_entry_{}'.format(strat_version)])\n","\n","    # ------------------------------ rtc tp & out ------------------------------ #\n","    # --------------- bb rtc out --------------- #\n","\n","    if config.loc_set.point.outg_dc_period != \"None\":\n","        res_df['short_rtc_0_{}'.format(strat_version)] = res_df['high'].rolling(config.loc_set.point.outg_dc_period).max()\n","        res_df['long_rtc_0_{}'.format(strat_version)] = res_df['low'].rolling(config.loc_set.point.outg_dc_period).min()\n","\n","    # res_df['short_out_{}'.format(strat_version)] = res_df['short_rtc_0_{}'.format(strat_version)] + res_df['short_rtc_gap_{}'.format(strat_version)] * config.tr_set.out_gap\n","    # res_df['long_out_{}'.format(strat_version)] = res_df['long_rtc_0_{}'.format(strat_version)] - res_df['long_rtc_gap_{}'.format(strat_version)] * config.tr_set.out_gap\n","    \n","    res_df['short_out_{}'.format(strat_version)] = res_df['short_ep_{}'.format(strat_version)] + res_df['short_rtc_gap_{}'.format(strat_version)] * config.tr_set.out_gap\n","    res_df['long_out_{}'.format(strat_version)] = res_df['long_ep_{}'.format(strat_version)] - res_df['long_rtc_gap_{}'.format(strat_version)] * config.tr_set.out_gap\n","\n","    if config.tr_set.t_out_gap != \"None\":\n","        res_df['short_out_org_{}'.format(strat_version)] = res_df['short_out_{}'.format(strat_version)].copy()\n","        res_df['long_out_org_{}'.format(strat_version)] = res_df['long_out_{}'.format(strat_version)].copy()\n","\n","        res_df['short_out2_{}'.format(strat_version)] = res_df['short_rtc_0_{}'.format(strat_version)] + res_df['short_rtc_gap_{}'.format(strat_version)] * config.tr_set.t_out_gap\n","        res_df['long_out2_{}'.format(strat_version)] = res_df['long_rtc_0_{}'.format(strat_version)] - res_df['long_rtc_gap_{}'.format(strat_version)] * config.tr_set.t_out_gap\n","\n","    # ------------------------------ tp ------------------------------ #\n","    # --------------- bb rtc tp --------------- #\n","    res_df['short_tp_{}'.format(strat_version)] = res_df['h_short_rtc_1_{}'.format(strat_version)] - res_df['h_short_rtc_gap_{}'.format(strat_version)] * config.tr_set.tp_gap\n","    res_df['long_tp_{}'.format(strat_version)] = res_df['h_long_rtc_1_{}'.format(strat_version)] + res_df['h_long_rtc_gap_{}'.format(strat_version)] * config.tr_set.tp_gap\n","\n","    # --------------- set tp_line / dtk_line --------------- #\n","    # res_df['short_tp_1_{}'.format(strat_version)] = np.where(res_df['h_entry_{}'.format(strat_version)] == -1, res_df['short_rtc_1_{}'.format(strat_version)], np.nan)\n","    # res_df['short_tp_1_{}'.format(strat_version)] = ffill(res_df['short_tp_1_{}'.format(strat_version)].values.reshape(1, -1)).reshape(-1, 1)\n","    # res_df['short_tp_gap_{}'.format(strat_version)] = np.where(res_df['h_entry_{}'.format(strat_version)] == -1, res_df['h_short_rtc_gap_{}'.format(strat_version)], np.nan)  # ltf_gap ÏùÄ out ÏùÑ ÏúÑÌïú gap ÏûÑ\n","    # res_df['short_tp_gap_{}'.format(strat_version)] = ffill(res_df['short_tp_gap_{}'.format(strat_version)].values.reshape(1, -1)).reshape(-1, 1)\n","\n","    # res_df['long_tp_1_{}'.format(strat_version)] = np.where(res_df['h_entry_{}'.format(strat_version)] == 1, res_df['long_rtc_1_{}'.format(strat_version)], np.nan)\n","    # res_df['long_tp_1_{}'.format(strat_version)] = ffill(res_df['long_tp_1_{}'.format(strat_version)].values.reshape(1, -1)).reshape(-1, 1)\n","    # res_df['long_tp_gap_{}'.format(strat_version)] = np.where(res_df['h_entry_{}'.format(strat_version)] == 1, res_df['h_long_rtc_gap_{}'.format(strat_version)], np.nan)\n","    # res_df['long_tp_gap_{}'.format(strat_version)] = ffill(res_df['long_tp_gap_{}'.format(strat_version)].values.reshape(1, -1)).reshape(-1, 1)\n","\n","    # res_df['h_short_tp_1_{}'.format(strat_version)] = np.where(res_df['h_entry_{}'.format(strat_version)] == -1, res_df['h_short_rtc_1_{}'.format(strat_version)], np.nan)\n","    # res_df['h_short_tp_1_{}'.format(strat_version)] = ffill(res_df['h_short_tp_1_{}'.format(strat_version)].values.reshape(1, -1)).reshape(-1, 1)\n","    # res_df['h_short_tp_gap_{}'.format(strat_version)] = np.where(res_df['h_entry_{}'.format(strat_version)] == -1, res_df['h_short_rtc_gap_{}'.format(strat_version)], np.nan)\n","    # res_df['h_short_tp_gap_{}'.format(strat_version)] = ffill(res_df['h_short_tp_gap_{}'.format(strat_version)].values.reshape(1, -1)).reshape(-1, 1)\n","\n","    # res_df['h_long_tp_1_{}'.format(strat_version)] = np.where(res_df['h_entry_{}'.format(strat_version)] == 1, res_df['h_long_rtc_1_{}'.format(strat_version)], np.nan)\n","    # res_df['h_long_tp_1_{}'.format(strat_version)] = ffill(res_df['h_long_tp_1_{}'.format(strat_version)].values.reshape(1, -1)).reshape(-1, 1)\n","    # res_df['h_long_tp_gap_{}'.format(strat_version)] = np.where(res_df['h_entry_{}'.format(strat_version)] == 1, res_df['h_long_rtc_gap_{}'.format(strat_version)], np.nan)\n","    # res_df['h_long_tp_gap_{}'.format(strat_version)] = ffill(res_df['h_long_tp_gap_{}'.format(strat_version)].values.reshape(1, -1)).reshape(-1, 1)\n","   \n","\n","    if config.loc_set.zone.use_dtk_line:\n","      res_df['short_dtk_1_{}'.format(strat_version)] = np.where(res_df['h_entry_{}'.format(strat_version)] == -1, res_df['short_dtk_1_{}'.format(strat_version)], np.nan)\n","      res_df['short_dtk_1_{}'.format(strat_version)] = ffill(res_df['short_dtk_1_{}'.format(strat_version)].values.reshape(1, -1)).reshape(-1, 1)\n","      res_df['short_dtk_gap_{}'.format(strat_version)] = np.where(res_df['h_entry_{}'.format(strat_version)] == -1, res_df['short_dtk_gap_{}'.format(strat_version)], np.nan)\n","      res_df['short_dtk_gap_{}'.format(strat_version)] = ffill(res_df['short_dtk_gap_{}'.format(strat_version)].values.reshape(1, -1)).reshape(-1, 1)\n","\n","      res_df['long_dtk_1_{}'.format(strat_version)] = np.where(res_df['h_entry_{}'.format(strat_version)] == 1, res_df['long_dtk_1_{}'.format(strat_version)], np.nan)\n","      res_df['long_dtk_1_{}'.format(strat_version)] = ffill(res_df['long_dtk_1_{}'.format(strat_version)].values.reshape(1, -1)).reshape(-1, 1)\n","      res_df['long_dtk_gap_{}'.format(strat_version)] = np.where(res_df['h_entry_{}'.format(strat_version)] == 1, res_df['long_dtk_gap_{}'.format(strat_version)], np.nan)\n","      res_df['long_dtk_gap_{}'.format(strat_version)] = ffill(res_df['long_dtk_gap_{}'.format(strat_version)].values.reshape(1, -1)).reshape(-1, 1)\n","\n","    res_df['dc_upper_v2_{}'.format(strat_version)] = res_df['high'].rolling(config.loc_set.zone.dc_period).max()\n","    res_df['dc_lower_v2_{}'.format(strat_version)] = res_df['low'].rolling(config.loc_set.zone.dc_period).min()\n","    \n","    res_df['zone_dc_upper_v2_{}'.format(strat_version)] = res_df['high'].rolling(config.loc_set.zone.zone_dc_period).max()\n","    res_df['zone_dc_lower_v2_{}'.format(strat_version)] = res_df['low'].rolling(config.loc_set.zone.zone_dc_period).min()\n","\n","    return res_df\n"],"metadata":{"id":"CB2yZdQ95Cdg","executionInfo":{"status":"ok","timestamp":1640233982835,"user_tz":-540,"elapsed":928,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}}},"execution_count":5,"outputs":[]},{"cell_type":"markdown","source":["###### utils_public"],"metadata":{"id":"HKdUKKl-483N"}},{"cell_type":"code","execution_count":9,"metadata":{"id":"nzOYWA2kqZ0d","executionInfo":{"status":"ok","timestamp":1640234548595,"user_tz":-540,"elapsed":3031,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}}},"outputs":[],"source":["\n","class OrderSide:\n","    BUY = \"BUY\"\n","    SELL = \"SELL\"\n","    INVALID = None\n","\n","\n","def lvrg_set(res_df, config, open_side, ep_, out_, fee, limit_leverage=50):\n","\n","    strat_version = config.strat_version\n","\n","    if open_side == OrderSide.SELL:\n","\n","        if strat_version in [\"v3\"]:\n","            # config.lvrg_set.leverage = config.lvrg_set.target_pct / (out_ / ep_ - 1 - (fee + config.trader_set.market_fee))\n","            config.lvrg_set.leverage = config.lvrg_set.target_pct / (\n","                        out_ / ep_ - 1 - (fee + config.trader_set.market_fee))\n","\n","            #     zone Ïóê Îî∞Î•∏ c_ep_gap Î•º Í≥†Î†§ (loss ÏôÑÌôî Î∞©Ìñ•) / Ïúó Ï§ÑÏùÄ ÏàòÏùµ Í∑πÎåÄÌôî Î∞©Ìñ•\n","            # config.lvrg_set.leverage = config.lvrg_set.target_pct / (out_ / res_df['short_ep_org'].iloc[ep_j] - 1 - (fee + config.trader_set.market_fee))\n","\n","        elif strat_version in [\"v5_2\", \"v7\"]:\n","            # config.lvrg_set.leverage = config.lvrg_set.target_pct / abs(ep_ / out_ - 1 - (fee + config.trader_set.market_fee))\n","            config.lvrg_set.leverage = config.lvrg_set.target_pct / abs(\n","                ep_ / out_ - 1 - (fee + config.trader_set.market_fee))\n","            # config.lvrg_set.leverage = config.lvrg_set.target_pct / abs(res_df['short_ep_org'].iloc[ep_j] / out_ - 1 - (fee + config.trader_set.market_fee))\n","\n","    else:\n","        #   Ïúó phase Îäî min_pr Ïùò Ïò§Ï∞®Í∞Ä Ïª§Ïßê\n","        if strat_version in [\"v3\"]:\n","            # config.lvrg_set.leverage = config.lvrg_set.target_pct / (ep_ / out_ - 1 - (fee + config.trader_set.market_fee))\n","            config.lvrg_set.leverage = config.lvrg_set.target_pct / (\n","                        ep_ / out_ - 1 - (fee + config.trader_set.market_fee))\n","            # config.lvrg_set.leverage = config.lvrg_set.target_pct / (res_df['long_ep_org'].iloc[ep_j] / out_ - 1 - (fee + config.trader_set.market_fee))\n","\n","        elif strat_version in [\"v5_2\", \"v7\"]:\n","            # config.lvrg_set.leverage = config.lvrg_set.target_pct / abs(out_ / ep_ - 1 - (fee + config.trader_set.market_fee))\n","            config.lvrg_set.leverage = config.lvrg_set.target_pct / abs(\n","                out_ / ep_ - 1 - (fee + config.trader_set.market_fee))\n","            # config.lvrg_set.leverage = config.lvrg_set.target_pct / abs(out_ / res_df['long_ep_org'].iloc[ep_j] - 1 - (fee + config.trader_set.market_fee))\n","\n","    if not config.lvrg_set.allow_float:\n","        config.lvrg_set.leverage = int(config.lvrg_set.leverage)\n","\n","    # -------------- leverage rejection -------------- #\n","    if config.lvrg_set.leverage < 1 and config.lvrg_set.lvrg_rejection:\n","        return None\n","\n","    config.lvrg_set.leverage = max(config.lvrg_set.leverage, 1)\n","\n","    config.lvrg_set.leverage = min(limit_leverage, config.lvrg_set.leverage)\n","\n","    return config.lvrg_set.leverage\n","\n","\n","def public_indi(res_df):\n","    res_df = bb_level(res_df, '5m', 1)\n","    res_df = dc_level(res_df, '5m', 1)\n","    res_df = bb_level(res_df, '15m', 1)\n","    res_df = dc_level(res_df, '15m', 1)\n","    # res_df = bb_level(res_df, '30m', 1)\n","    # res_df = dc_level(res_df, '30m', 1)\n","\n","    return res_df\n","\n","\n","def short_ep_loc(res_df, config, i, show_detail=True):\n","    strat_version = config.strat_version\n","\n","    # ------- param init ------- #\n","    open_side = None\n","\n","    mr_const_cnt = 0\n","    mr_score = 0\n","    zone = 'n'\n","\n","    if config.ep_set.entry_type == 'MARKET':\n","        if config.tp_set.tp_type != 'MARKET':\n","            tp_fee = config.trader_set.market_fee + config.trader_set.limit_fee\n","        else:\n","            tp_fee = config.trader_set.market_fee + config.trader_set.market_fee\n","        out_fee = config.trader_set.market_fee + config.trader_set.market_fee\n","    else:\n","        if config.tp_set.tp_type != 'MARKET':\n","            tp_fee = config.trader_set.limit_fee + config.trader_set.limit_fee\n","        else:\n","            tp_fee = config.trader_set.limit_fee + config.trader_set.market_fee\n","        out_fee = config.trader_set.limit_fee + config.trader_set.market_fee\n","\n","    # -------------- candle_ratio -------------- #\n","    if config.loc_set.point.candle_ratio != \"None\":\n","      mr_const_cnt += 1\n","      if res_df['candle_ratio'].iloc[i] >= config.loc_set.point.candle_ratio:\n","        mr_score += 1\n","    \n","\n","    # # -------------- tr scheduling -------------- #\n","    # if config.loc_set.zone.tr_thresh != \"None\":\n","\n","    #   mr_const_cnt += 1\n","    #   tr = ((done_tp - ep_list[0] - tp_fee * ep_list[0]) / (ep_list[0] - done_out + out_fee * ep_list[0]))\n","\n","    # -------------- spread scheduling -------------- #\n","    if config.loc_set.zone.short_spread != \"None\":\n","\n","        mr_const_cnt += 1\n","\n","        spread = (res_df['bb_base_5m'].iloc[i] - res_df['bb_lower_5m'].iloc[i] - tp_fee * res_df['bb_base_5m'].iloc[\n","            # spread = (res_df['bb_base_5m'].iloc[i] - res_df['bb_lower_5m'].iloc[i] - out_fee * res_df['bb_base_5m'].iloc[\n","            # i]) / (res_df['bb_base_5m'].iloc[i] - res_df['bb_lower_5m'].iloc[i] + tp_fee *\n","            i]) / (res_df['bb_base_5m'].iloc[i] - res_df['bb_lower_5m'].iloc[i] + out_fee *\n","                  res_df['bb_base_5m'].iloc[i])\n","        # spread = (res_df['bb_base_15m'].iloc[i] - res_df['bb_lower_5m'].iloc[i] - tp_fee * res_df['bb_base_15m'].iloc[\n","        #     i]) / (res_df['bb_base_15m'].iloc[i] - res_df['bb_lower_5m'].iloc[i] + out_fee *\n","        #             res_df['bb_base_15m'].iloc[i])\n","\n","        # spread = (res_df['dc_upper_5m'].iloc[i] - res_df['bb_lower_5m'].iloc[i] - tp_fee * res_df['bb_lower_5m'].iloc[\n","        #     i]) / (res_df['dc_upper_5m'].iloc[i] - res_df['bb_lower_5m'].iloc[i] + out_fee *\n","        #             res_df['bb_lower_5m'].iloc[i])\n","        # spread = (res_df['short_rtc_gap'].iloc[i] * (0.443) - tp_fee * res_df['short_ep'].iloc[\n","        #     i]) / (res_df['short_rtc_gap'].iloc[i] * (0.417) + out_fee * res_df['short_ep'].iloc[i])\n","\n","        # spread = (res_df['dc_upper_15m'].iloc[i] - res_df['dc_lower_5m'].iloc[i] - tp_fee * res_df['dc_lower_5m'].iloc[\n","        #     i]) / (res_df['dc_upper_15m'].iloc[i] - res_df['dc_lower_5m'].iloc[i] + out_fee *\n","        #             res_df['dc_lower_5m'].iloc[i])\n","        # spread = ((res_df['dc_upper_15m'].iloc[i] - res_df['dc_lower_5m'].iloc[i])/2 - tp_fee * res_df['dc_lower_5m'].iloc[\n","        #     i]) / ((res_df['dc_upper_15m'].iloc[i] - res_df['dc_lower_5m'].iloc[i])/2 + out_fee *\n","        #             res_df['dc_lower_5m'].iloc[i])\n","\n","        if spread >= config.loc_set.zone.short_spread:\n","            mr_score += 1\n","\n","        if show_detail:\n","            print(\"spread :\", spread)\n","\n","    # -------------- dtk -------------- #\n","    if config.loc_set.zone.dt_k != \"None\":\n","\n","        mr_const_cnt += 1\n","        # if res_df['dc_lower_%s' % config.loc_set.zone.dtk_dc_itv].iloc[i] >= res_df['short_rtc_1'].iloc[i] - res_df['h_short_rtc_gap'].iloc[i] * config.loc_set.zone.dt_k:\n","        #     dtk_v1 & v2 platform     #\n","        if config.loc_set.zone.dtk_dc_itv != \"None\":\n","            dc = res_df['dc_lower_%s' % config.loc_set.zone.dtk_dc_itv].iloc[i]\n","            dt_k = res_df['short_dtk_1_{}'.format(strat_version)].iloc[i] - \\\n","                  res_df['short_dtk_gap_{}'.format(strat_version)].iloc[i] * config.loc_set.zone.dt_k\n","            if dc >= dt_k:\n","                mr_score += 1\n","\n","                #     dc_v2   #\n","        else:\n","            dc = res_df['dc_lower_v2_{}'.format(strat_version)].iloc[i]\n","            dt_k = res_df['short_dtk_1_{}'.format(strat_version)].iloc[i] - \\\n","                  res_df['short_dtk_gap_{}'.format(strat_version)].iloc[i] * config.loc_set.zone.dt_k\n","            if dc >= dt_k:\n","                # if res_df['dc_lower_v2_{}'.format(strat_version)].iloc[i] >= res_df['short_dtk_1_{}'.format(strat_version)].iloc[i] - res_df['short_dtk_gap_{}'.format(strat_version)].iloc[i] * config.loc_set.zone.dt_k and \\\n","                # res_df['dc_upper_v2_{}'.format(strat_version)].iloc[i] <= res_df['long_dtk_1_{}'.format(strat_version)].iloc[i] + res_df['long_dtk_gap_{}'.format(strat_version)].iloc[i] * config.loc_set.zone.dt_k:\n","                mr_score += 1\n","\n","        if show_detail:\n","            print(\"dc :\", dc)\n","            print(\"dt_k :\", dt_k)\n","\n","    # -------------- zone rejection  -------------- #\n","    if config.loc_set.zone.zone_rejection:\n","\n","        #       by bb and dc - rsi      #\n","        # mr_const_cnt += 1\n","        # if res_df['bb_base_%s' % config.loc_set.zone.bbz_itv].iloc[i] <= res_df['dc_upper_1m'].iloc[i] <= res_df['bb_upper_%s' % config.loc_set.zone.bbz_itv].iloc[i]:\n","        #   mr_score += 1\n","\n","        #       by bb       # \n","        mr_const_cnt += 1\n","        # if res_df['bb_upper_5m'].iloc[i] < res_df['bb_base_%s' % config.loc_set.zone.bbz_itv].iloc[i]:\n","\n","        # if res_df['close'].iloc[i] < res_df['bb_lower_%s' % config.loc_set.zone.bbz_itv].iloc[i]:   # org\n","        # if res_df['close'].iloc[i] > res_df['bb_lower_%s' % config.loc_set.zone.bbz_itv].iloc[i]:  # inv\n","        # if res_df['close'].iloc[i] > res_df['bb_upper_%s' % config.loc_set.zone.bbz_itv].iloc[i]:\n","        # if res_df['close'].iloc[i] > res_df['bb_upper2_%s' % config.loc_set.zone.bbz_itv].iloc[i]:\n","        # if res_df['close'].iloc[i] > res_df['bb_upper3_%s' % config.loc_set.zone.bbz_itv].iloc[i]:\n","\n","        if res_df['bb_upper_1m'].iloc[i] < res_df['bb_lower_%s' % config.loc_set.zone.bbz_itv].iloc[i]:\n","            mr_score += 1\n","\n","        mr_const_cnt += 1\n","        if res_df['short_ep_{}'.format(strat_version)].iloc[i] < res_df['bb_base_5m'].iloc[i]:\n","            mr_score += 1\n","\n","        #      by macd    #\n","        # mr_const_cnt += 1\n","        # if res_df['ma30_1m'].iloc[i] < res_df['ma60_1m'].iloc[i]:\n","        #     mr_score += 1\n","\n","        #       by ema       #\n","        # mr_const_cnt += 1\n","        # # if res_df['short_ep'].iloc[i] < res_df['ema_5m'].iloc[i]:\n","        # if res_df['close'].iloc[i] < res_df['ema_5m'].iloc[i]:\n","        #     mr_score += 1\n","\n","        #       by zone_dtk       #\n","        # mr_const_cnt += 1\n","        # if res_df['zone_dc_upper_v2_{}'.format(strat_version)].iloc[i] < res_df['long_dtk_plot_1'].iloc[i] + res_df['long_dtk_plot_gap'].iloc[\n","        #     i] * config.loc_set.zone.zone_dt_k:\n","        #   mr_score += 1\n","\n","    # -------------- zoned tr_set -------------- #\n","    if config.tr_set.c_ep_gap != \"None\":\n","\n","        #       by bb       # \n","        # if res_df['close'].iloc[i] > res_df['bb_lower_%s' % config.loc_set.zone.bbz_itv].iloc[i]:\n","\n","        #       by zone_dtk       #\n","\n","        #         c_zone        #\n","        if res_df['zone_dc_upper_v2_{}'.format(strat_version)].iloc[i] > res_df['long_dtk_plot_1'].iloc[i] + \\\n","                res_df['long_dtk_plot_gap'].iloc[\n","                    i] * config.loc_set.zone.zone_dt_k:\n","\n","            if config.ep_set.static_ep:\n","                res_df['short_ep_{}'.format(strat_version)].iloc[i] = res_df['short_ep2_{}'.format(strat_version)].iloc[\n","                    i]\n","            else:\n","                res_df['short_ep_{}'.format(strat_version)] = res_df['short_ep2_{}'.format(strat_version)]\n","\n","            if config.out_set.static_out:\n","                res_df['short_out_{}'.format(strat_version)].iloc[i] = \\\n","                res_df['short_out_org_{}'.format(strat_version)].iloc[i]\n","            else:\n","                res_df['short_out_{}'.format(strat_version)] = res_df['short_out_org_{}'.format(strat_version)]\n","\n","            zone = 'c'\n","\n","        #         t_zone        #\n","        else:\n","\n","            # mr_const_cnt += 1   # zone_rejection - temporary\n","\n","            if config.ep_set.static_ep:\n","                res_df['short_ep_{}'.format(strat_version)].iloc[i] = \\\n","                res_df['short_ep_org_{}'.format(strat_version)].iloc[i]\n","            else:\n","                res_df['short_ep_{}'.format(strat_version)] = res_df['short_ep_org_{}'.format(strat_version)]\n","\n","            if config.out_set.static_out:\n","                res_df['short_out_{}'.format(strat_version)].iloc[i] = \\\n","                res_df['short_out2_{}'.format(strat_version)].iloc[i]\n","            else:\n","                res_df['short_out_{}'.format(strat_version)] = res_df['short_out2_{}'.format(strat_version)]\n","\n","            zone = 't'\n","\n","    if mr_const_cnt == mr_score:\n","        open_side = OrderSide.SELL\n","\n","    return res_df, open_side, zone\n","\n","\n","def long_ep_loc(res_df, config, i, show_detail=True):\n","    strat_version = config.strat_version\n","\n","    # ------- param init ------- #\n","    open_side = None\n","\n","    mr_const_cnt = 0\n","    mr_score = 0\n","    zone = 'n'\n","\n","    if config.ep_set.entry_type == 'MARKET':\n","        if config.tp_set.tp_type != 'MARKET':\n","            tp_fee = config.trader_set.market_fee + config.trader_set.limit_fee\n","        else:\n","            tp_fee = config.trader_set.market_fee + config.trader_set.market_fee\n","        out_fee = config.trader_set.market_fee + config.trader_set.market_fee\n","    else:\n","        if config.tp_set.tp_type != 'MARKET':\n","            tp_fee = config.trader_set.limit_fee + config.trader_set.limit_fee\n","        else:\n","            tp_fee = config.trader_set.limit_fee + config.trader_set.market_fee\n","        out_fee = config.trader_set.limit_fee + config.trader_set.market_fee\n","\n","\n","    # -------------- candle_ratio -------------- #\n","    if config.loc_set.point.candle_ratio != \"None\":\n","      mr_const_cnt += 1\n","      if res_df['candle_ratio'].iloc[i] >= config.loc_set.point.candle_ratio:\n","      # if config.loc_set.point.candle_ratio + 10 >= res_df['candle_ratio'].iloc[i] >= config.loc_set.point.candle_ratio:\n","        mr_score += 1\n","\n","\n","    # -------------- spread scheduling -------------- #\n","    if config.loc_set.zone.long_spread != \"None\":\n","\n","        mr_const_cnt += 1\n","\n","        # spread = (res_df['bb_upper_5m'].iloc[i] - res_df['bb_base_5m'].iloc[i] - tp_fee * res_df['bb_base_5m'].iloc[\n","        #     i]) / (res_df['bb_base_5m'].iloc[i] - res_df['bb_lower_5m'].iloc[i] + out_fee *\n","        #             res_df['bb_base_5m'].iloc[i])\n","        # spread = (res_df['bb_upper_5m'].iloc[i] - res_df['bb_base_15m'].iloc[i] - tp_fee * res_df['bb_base_15m'].iloc[\n","        #     i]) / (res_df['bb_upper_5m'].iloc[i] - res_df['bb_base_15m'].iloc[i] + out_fee *\n","        #             res_df['bb_base_15m'].iloc[i])\n","\n","        spread = (res_df['bb_upper_5m'].iloc[i] - res_df['dc_lower_5m'].iloc[i] - tp_fee * res_df['bb_upper_5m'].iloc[\n","            # spread = (res_df['bb_upper_5m'].iloc[i] - res_df['dc_lower_5m'].iloc[i] - out_fee * res_df['bb_upper_5m'].iloc[\n","            # i]) / (res_df['bb_upper_5m'].iloc[i] - res_df['dc_lower_5m'].iloc[i] + tp_fee *\n","            i]) / (res_df['bb_upper_5m'].iloc[i] - res_df['dc_lower_5m'].iloc[i] + out_fee *\n","                  res_df['bb_upper_5m'].iloc[i])\n","        # spread = (res_df['long_rtc_gap'].iloc[i] * (0.443) - tp_fee * res_df['long_ep'].iloc[\n","        #     i]) / (res_df['long_rtc_gap'].iloc[i] * (0.417) + out_fee * res_df['long_ep'].iloc[i])\n","\n","        # spread = (res_df['dc_upper_5m'].iloc[i] - res_df['dc_lower_15m'].iloc[i] - tp_fee * res_df['dc_upper_5m'].iloc[\n","        #     i]) / (res_df['dc_upper_5m'].iloc[i] - res_df['dc_lower_15m'].iloc[i] + out_fee *\n","        #             res_df['dc_upper_5m'].iloc[i])\n","        # spread = ((res_df['dc_upper_5m'].iloc[i] - res_df['dc_lower_15m'].iloc[i])/2 - tp_fee * res_df['dc_upper_5m'].iloc[\n","        #     i]) / ((res_df['dc_upper_5m'].iloc[i] - res_df['dc_lower_15m'].iloc[i])/2 + out_fee *\n","        #             res_df['dc_upper_5m'].iloc[i])\n","\n","        if spread >= config.loc_set.zone.long_spread:\n","            mr_score += 1\n","\n","        if show_detail:\n","            print(\"spread :\", spread)\n","\n","    # -------------- dtk -------------- #\n","    if config.loc_set.zone.dt_k != \"None\":\n","\n","        mr_const_cnt += 1\n","        # if res_df['dc_upper_%s' % config.loc_set.zone.dtk_dc_itv].iloc[i] <= res_df['long_rtc_1'].iloc[i] + res_df['long_rtc_gap'].iloc[i] * config.loc_set.zone.dt_k:\n","        #     dtk_v1 & v2 platform    #\n","        if config.loc_set.zone.dtk_dc_itv != \"None\":\n","            dc = res_df['dc_upper_%s' % config.loc_set.zone.dtk_dc_itv].iloc[i]\n","            dt_k = res_df['long_dtk_1_{}'.format(strat_version)].iloc[i] + \\\n","                  res_df['long_dtk_gap_{}'.format(strat_version)].iloc[i] * config.loc_set.zone.dt_k\n","            if dc <= dt_k:\n","                mr_score += 1\n","\n","        else:\n","            #     dc_v2     #\n","            dc = res_df['dc_upper_v2_{}'.format(strat_version)].iloc[i]\n","            dt_k = res_df['long_dtk_1_{}'.format(strat_version)].iloc[i] + \\\n","                  res_df['long_dtk_gap_{}'.format(strat_version)].iloc[i] * config.loc_set.zone.dt_k\n","            if dc <= dt_k:\n","                # if res_df['dc_upper_v2_{}'.format(strat_version)].iloc[i] >= res_df['long_dtk_1_{}'.format(strat_version)].iloc[i] + res_df['long_dtk_gap_{}'.format(strat_version)].iloc[i] * config.loc_set.zone.dt_k:\n","\n","                # if res_df['dc_upper_v2_{}'.format(strat_version)].iloc[i] <= res_df['long_dtk_1_{}'.format(strat_version)].iloc[i] + res_df['long_dtk_gap_{}'.format(strat_version)].iloc[i] * config.loc_set.zone.dt_k and \\\n","                #   res_df['dc_lower_v2_{}'.format(strat_version)].iloc[i] >= res_df['short_dtk_1_{}'.format(strat_version)].iloc[i] - res_df['short_dtk_gap_{}'.format(strat_version)].iloc[i] * config.loc_set.zone.dt_k:\n","\n","                mr_score += 1\n","\n","        if show_detail:\n","            print(\"dc :\", dc)\n","            print(\"dt_k :\", dt_k)\n","\n","    # -------------- zone rejection  -------------- #\n","    if config.loc_set.zone.zone_rejection:\n","\n","        # #       by bb and dc - rsi      #\n","        # mr_const_cnt += 1\n","        # if res_df['bb_base_%s' % config.loc_set.zone.bbz_itv].iloc[i] >= res_df['dc_lower_1m'].iloc[i] >= res_df['bb_lower_%s' % config.loc_set.zone.bbz_itv].iloc[i]:\n","        #   mr_score += 1\n","\n","        #       by bb       #       \n","        mr_const_cnt += 1\n","        # if  res_df['bb_lower_5m'].iloc[i] > res_df['bb_base_%s' % config.loc_set.zone.bbz_itv].iloc[i]:\n","\n","        # if res_df['close'].iloc[i] > res_df['bb_upper_%s' % config.loc_set.zone.bbz_itv].iloc[i]:    # org\n","        # if res_df['close'].iloc[i] < res_df['bb_upper_%s' % config.loc_set.zone.bbz_itv].iloc[i]:  # inv\n","        # if res_df['close'].iloc[i] < res_df['bb_lower_%s' % config.loc_set.zone.bbz_itv].iloc[i]:\n","        # if res_df['close'].iloc[i] < res_df['bb_lower2_%s' % config.loc_set.zone.bbz_itv].iloc[i]:\n","        # if res_df['close'].iloc[i] < res_df['bb_lower3_%s' % config.loc_set.zone.bbz_itv].iloc[i]:\n","\n","        if res_df['bb_lower_1m'].iloc[i] > res_df['bb_upper_%s' % config.loc_set.zone.bbz_itv].iloc[i]:\n","            mr_score += 1\n","\n","        \n","        mr_const_cnt += 1\n","        if res_df['long_ep_{}'.format(strat_version)].iloc[i] > res_df['bb_base_5m'].iloc[i]:\n","            mr_score += 1\n","        \n","        #      by macd    #\n","        # mr_const_cnt += 1\n","        # if res_df['ma30_1m'].iloc[i] > res_df['ma60_1m'].iloc[i]:\n","        #     mr_score += 1\n","\n","        #       by ema       #\n","        # mr_const_cnt += 1\n","        # # if  res_df['long_ep'].iloc[i] > res_df['ema_5m'].iloc[i]:\n","        # if res_df['close'].iloc[i] > res_df['ema_5m'].iloc[i]:\n","        #     mr_score += 1\n","\n","        #       by zone_dtk       #\n","        # mr_const_cnt += 1\n","        # if res_df['zone_dc_lower_v2_{}'.format(strat_version)].iloc[i] > res_df['short_dtk_plot_1'].iloc[i] - res_df['short_dtk_plot_gap'].iloc[i] * config.loc_set.zone.zone_dt_k:\n","        #   mr_score += 1\n","\n","    # -------------- zoned tr_set -------------- #\n","    if config.tr_set.c_ep_gap != \"None\":\n","        #       by bb       # \n","        # if res_df['close'].iloc[i] < res_df['bb_upper_%s' % config.loc_set.zone.bbz_itv].iloc[i]:\n","\n","        #       by zone_dtk       #\n","\n","        #         c_zone        #\n","        if res_df['zone_dc_lower_v2_{}'.format(strat_version)].iloc[i] < res_df['short_dtk_plot_1'].iloc[i] - \\\n","                res_df['short_dtk_plot_gap'].iloc[i] * config.loc_set.zone.zone_dt_k:\n","\n","            if config.ep_set.static_ep:\n","                res_df['long_ep_{}'.format(strat_version)].iloc[i] = res_df['long_ep2_{}'.format(strat_version)].iloc[i]\n","            else:\n","                res_df['long_ep_{}'.format(strat_version)] = res_df['long_ep2_{}'.format(strat_version)]\n","\n","            if config.out_set.static_out:\n","                res_df['long_out_{}'.format(strat_version)].iloc[i] = \\\n","                res_df['long_out_org_{}'.format(strat_version)].iloc[i]\n","            else:\n","                res_df['long_out_{}'.format(strat_version)] = res_df['long_out_org_{}'.format(strat_version)]\n","\n","            zone = 'c'\n","\n","            # mr_const_cnt += 1\n","            # dc_lb_period = 100\n","            # if np.sum((res_df['dc_upper_15m'] > res_df['dc_upper_15m'].shift(15)).iloc[i - dc_lb_period:i]) == 0:\n","            #   mr_score += 1\n","\n","            #         t_zone        #\n","        else:\n","\n","            # mr_const_cnt += 1   # zone_rejection - temporary\n","\n","            if config.ep_set.static_ep:\n","                res_df['long_ep_{}'.format(strat_version)].iloc[i] = \\\n","                res_df['long_ep_org_{}'.format(strat_version)].iloc[i]\n","            else:\n","                res_df['long_ep_{}'.format(strat_version)] = res_df['long_ep_org_{}'.format(strat_version)]\n","\n","            if config.out_set.static_out:\n","                res_df['long_out_{}'.format(strat_version)].iloc[i] = res_df['long_out2_{}'.format(strat_version)].iloc[\n","                    i]\n","            else:\n","                res_df['long_out_{}'.format(strat_version)] = res_df['long_out2_{}'.format(strat_version)]\n","\n","            zone = 't'\n","\n","    if mr_const_cnt == mr_score:\n","        open_side = OrderSide.BUY\n","\n","    return res_df, open_side, zone"]},{"cell_type":"markdown","metadata":{"id":"rLI8unIyroiC"},"source":["##### run"]},{"cell_type":"code","execution_count":10,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"TdAn2bHHBWMF","outputId":"e060b07b-87e0-4422-ad2b-81fc09f4c44c","executionInfo":{"status":"ok","timestamp":1640234603393,"user_tz":-540,"elapsed":50271,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["2021-11-17 ETHUSDT.ftr loaded !\n"]},{"output_type":"stream","name":"stderr","text":["/content/drive/My Drive/Colab Notebooks/JnQ/funcs/funcs_indicator.py:87: RuntimeWarning: invalid value encountered in true_divide\n","  upper_wick = (h - np.maximum(c, o)) / total_len\n","/content/drive/My Drive/Colab Notebooks/JnQ/funcs/funcs_indicator.py:88: RuntimeWarning: invalid value encountered in true_divide\n","  lower_wick = (np.minimum(c, o) - l) / total_len\n","/content/drive/My Drive/Colab Notebooks/JnQ/funcs/funcs_indicator.py:89: RuntimeWarning: invalid value encountered in true_divide\n","  body = abs(c - o) / total_len\n"]},{"output_type":"stream","name":"stdout","text":["config.loc_set.point.exp_itv : 1m\n","config.loc_set.point.tpg_itv : 5m\n","config.loc_set.point.outg_itv : 5m\n","config.loc_set.point.outg_dc_period : None\n","config.loc_set.zone.dtk_itv : 5m\n","-----------------------------------\n","config.loc_set.zone.tr_thresh : None\n","config.loc_set.zone.short_spread : None\n","config.loc_set.zone.long_spread : None\n","config.loc_set.zone.dt_k : None\n","config.loc_set.zone.ei_k : -0.0\n","config.loc_set.zone.dc_period : 135\n","config.loc_set.zone.use_dtk_line : 0\n","config.loc_set.zone.zone_rejection : 1\n","config.loc_set.zone.bbz_itv : 15m\n","config.loc_set.zone.zone_dt_k : 0.4\n","config.loc_set.zone.zone_dc_period : 135\n","-----------------------------------\n","config.loc_set.point.tf_entry : 1\n","config.loc_set.point.htf_entry : 15\n","config.loc_set.point.candle_ratio : None\n","config.loc_set.point.osc_band : 200\n","config.tr_set.ep_gap : 0.0\n","config.tr_set.out_gap : 0.15\n","config.tr_set.tp_gap : 0.38\n","config.tr_set.c_ep_gap : None\n","config.tr_set.t_out_gap : -0.0\n","-----------------------------------\n","config.lvrg_set.leverage : 26\n","config.lvrg_set.target_pct : 0.1\n","elapsed_time : 14.980678081512451\n","supblot231 passed\n","supblot232 passed\n","supblot233 passed\n"]},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1600x1200 with 6 Axes>"]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\n"]}],"source":["config = config1\n","\n","multi_mode = 0\n","override = 1\n","\n","# ------- tp / out fee calc ------- #\n","if config.ep_set.entry_type == 'MARKET':\n","  if config.tp_set.tp_type != 'MARKET':   # Todo : Ïã§Ï†úÎ°ú, tp_fee Í∞Ä ÏïÑÎãå spread const. Î•º ÏúÑÌïú spread_fee1 ÏûÑ (Ï∂îÌõÑ ÏàòÏ†ï Í∂åÍ≥†)\n","    tp_fee = config.trader_set.market_fee + config.trader_set.limit_fee\n","  else:\n","    tp_fee = config.trader_set.market_fee + config.trader_set.market_fee\n","  out_fee = config.trader_set.market_fee + config.trader_set.market_fee\n","else:\n","  if config.tp_set.tp_type != 'MARKET':\n","    tp_fee = config.trader_set.limit_fee + config.trader_set.limit_fee\n","  else:\n","    tp_fee = config.trader_set.limit_fee + config.trader_set.market_fee\n","  out_fee = config.trader_set.limit_fee + config.trader_set.market_fee\n","  \n","\n","# ------- inversion set ------- #\n","inversion = 0\n","fdist_thresh = 1\n","\n","title_position = (0.30, 1)\n","show_plot = 1\n","show_detail = 0\n","\n","for key in ftr_list:\n","\n","  if config.trader_set.symbol in key:\n","    pass\n","  else:\n","    continue\n","\n","\n","  res_df = pd.read_feather(os.path.join(ftr_path, key), columns=None, use_threads=True).set_index(\"index\")#.loc[pd.to_datetime(\"2021-07-10 04:59:59.999000\"):]\n","  print(key, \"loaded !\")\n","  # break\n","  \n","  # print(\"res_df.columns :\", res_df.columns)  \n","  # print(res_df.tail(100))\n","  # print(\"res_df.index[0] :\", res_df.index[0])\n","  # # print(\"intmin(res_df.index[0]) :\", intmin(res_df.index[0]))\n","  # break\n","\n","  # -------------------- additional indi. -------------------- #    \n","  np_timeidx = np.array(list(map(lambda x : intmin(x), res_df.index)))\n","\n","  if override:\n","    res_df = public_indi(res_df)\n","  else:\n","    res_df = utils_public.public_indi(res_df)\n","\n","  #     temp indi.    #\n","  res_df[\"candle_ratio\"] = candle_ratio(res_df)\n","  res_df[\"ma30_1m\"] = res_df['close'].rolling(30).mean()\n","  res_df[\"ma60_1m\"] = res_df['close'].rolling(60).mean()\n","  # break\n","  \n","  if override:\n","    res_df = enlist_rtc(res_df, config1)\n","  else:\n","    res_df = utils1.enlist_rtc(res_df, config1)\n","    if multi_mode:\n","      res_df = utils2.enlist_rtc(res_df, config2)\n","\n","  #   temp param    #\n","  allow_rsi_touch = 1\n","  rsi_gap = 5\n","\n","  rsi_upper = 70\n","  rsi_lower = 30\n","\n","  early_out_tpg = 0.36\n","\n","  itv_num_list = [1, 3, 5, 15]\n","\n","  itv_list = ['15m', '30m', '1h', '4h']\n","  # itv_list = ['3m', '5m', '15m', '30m', '1h', '4h']\n","\n","  x_val_list = np.arange(0.5, 0.1, -0.03)     # prcn 2\n","  # x_val_list = np.arange(-0.64, -0.7, -0.001)    # prcn 3\n","  # x_val_list = np.arange(0.944, 0.945, 0.0001)    # prcn 4\n","  x_val_list = np.arange(150, 230, 10)   # prcn < 0\n","\n","  y_val_cols = [\"wr\", \"frq\", \"dpf\", \"min_pr\", \"acc_pr\", \"sum_pr\", \"liqd\", \"tr\", \"dr\", \"sr\"]\n","  # y_rev_val_cols = [\"wr\", \"min_pr\", \"acc_pr\", \"sum_pr\"]\n","  y_rev_val_cols = [\"wr\", \"min_pr\", \"acc_pr\", \"sum_pr\", \"sr\"]\n","\n","  survey_df = pd.DataFrame(index=x_val_list, columns=y_val_cols)\n","  short_survey_df = pd.DataFrame(index=x_val_list, columns=y_val_cols)\n","  long_survey_df = pd.DataFrame(index=x_val_list, columns=y_val_cols)\n","  rev_survey_df = pd.DataFrame(index=x_val_list, columns=y_rev_val_cols)\n","  rev_short_survey_df = pd.DataFrame(index=x_val_list, columns=y_rev_val_cols)\n","  rev_long_survey_df = pd.DataFrame(index=x_val_list, columns=y_rev_val_cols)\n","\n","  for survey_i, just_loop in enumerate(range(1)):\n","  # for survey_i, config.loc_set.zone.tr_thresh in enumerate(x_val_list): \n","  # for survey_i, config.loc_set.zone.short_spread in enumerate(x_val_list): \n","  # for survey_i, config.loc_set.zone.long_spread in enumerate(x_val_list): \n","  # for survey_i, config.loc_set.zone.dt_k in enumerate(x_val_list):\n","  # for survey_i, config.loc_set.zone.dc_period in enumerate(x_val_list):\n","  # for survey_i, config.loc_set.zone.ei_k in enumerate(x_val_list):   \n","  # for survey_i, config.loc_set.zone.dr_error in enumerate(x_val_list): \n","  # for survey_i, config.loc_set.zone.bbz_itv in enumerate(itv_list):\n","  # for survey_i, config.loc_set.point.tf_entry in enumerate(x_val_list):\n","  # for survey_i, config.loc_set.point.candle_ratio in enumerate(x_val_list):\n","  # for survey_i, config.loc_set.point.osc_band in enumerate(x_val_list):\n","  # for survey_i, config.tr_set.ep_gap in enumerate(x_val_list): \n","  # for survey_i, config.tr_set.out_gap in enumerate(x_val_list): \n","  # for survey_i, config.tr_set.tp_gap in enumerate(x_val_list): \n","  # for survey_i, config.lvrg_set.leverage in enumerate(x_val_list):\n","  # for survey_i, config.lvrg_set.target_pct in enumerate(x_val_list):   \n","  # for survey_i, outg_dc_itv_num in enumerate(x_val_list): \n","  # for survey_i, exp_itv in enumerate(itv_list): \n","  # for survey_i, zone_dt_k in enumerate(x_val_list): \n","  # for survey_i, t_out_gap in enumerate(x_val_list): \n","  # for survey_i, zone_dc_period in enumerate(x_val_list): \n","  # for survey_i, early_out_tpg in enumerate(x_val_list): \n","  \n","    start_0 = time.time()\n","\n","    print(\"config.loc_set.point.exp_itv :\", config.loc_set.point.exp_itv)\n","    print(\"config.loc_set.point.tpg_itv :\", config.loc_set.point.tpg_itv)\n","    print(\"config.loc_set.point.outg_itv :\", config.loc_set.point.outg_itv)\n","    print(\"config.loc_set.point.outg_dc_period :\", config.loc_set.point.outg_dc_period)\n","    print(\"config.loc_set.zone.dtk_itv :\", config.loc_set.zone.dtk_itv)\n","    print(\"-----------------------------------\")    \n","    # print(\"dtk_dc_itv :\", dtk_dc_itv)    \n","    # print(\"config.loc_set.dtk_dc_itv_num :\", config.loc_set.dtk_dc_itv_num :\",)\n","    print(\"config.loc_set.zone.tr_thresh :\", config.loc_set.zone.tr_thresh)\n","    print(\"config.loc_set.zone.short_spread :\", config.loc_set.zone.short_spread)\n","    print(\"config.loc_set.zone.long_spread :\", config.loc_set.zone.long_spread)\n","    print(\"config.loc_set.zone.dt_k :\", config.loc_set.zone.dt_k)\n","    print(\"config.loc_set.zone.ei_k :\", config.loc_set.zone.ei_k)\n","    print(\"config.loc_set.zone.dc_period :\", config.loc_set.zone.dc_period)\n","    print(\"config.loc_set.zone.use_dtk_line :\", config.loc_set.zone.use_dtk_line)\n","\n","    print(\"config.loc_set.zone.zone_rejection :\", config.loc_set.zone.zone_rejection)\n","    print(\"config.loc_set.zone.bbz_itv :\", config.loc_set.zone.bbz_itv)\n","    print(\"config.loc_set.zone.zone_dt_k :\", config.loc_set.zone.zone_dt_k)\n","    print(\"config.loc_set.zone.zone_dc_period :\", config.loc_set.zone.zone_dc_period)\n","    # print(\"config.loc_set.open_shift :\", config.loc_set.open_shift)\n","    print(\"-----------------------------------\")\n","    # print(\"config.ep_set.dr_error :\", config.ep_set.dr_error)\n","    print(\"config.loc_set.point.tf_entry :\", config.loc_set.point.tf_entry)\n","    print(\"config.loc_set.point.htf_entry :\", config.loc_set.point.htf_entry)\n","    print(\"config.loc_set.point.candle_ratio :\", config.loc_set.point.candle_ratio)\n","    print(\"config.loc_set.point.osc_band :\", config.loc_set.point.osc_band)\n","    print(\"config.tr_set.ep_gap :\", config.tr_set.ep_gap)\n","    print(\"config.tr_set.out_gap :\", config.tr_set.out_gap)\n","    print(\"config.tr_set.tp_gap :\", config.tr_set.tp_gap)  \n","    print(\"config.tr_set.c_ep_gap :\", config.tr_set.c_ep_gap)\n","    print(\"config.tr_set.t_out_gap :\", config.tr_set.t_out_gap)\n","    print(\"-----------------------------------\")\n","    print(\"config.lvrg_set.leverage :\", config.lvrg_set.leverage)\n","    print(\"config.lvrg_set.target_pct :\", config.lvrg_set.target_pct)\n","    \n","    # print(\"early_out_tpg :\", early_out_tpg)\n","\n","    # res_df['sma_1m'] = res_df['close'].rolling(sma_period).mean()  \n","    # res_df = bb_level(res_df, '5m', bbg)\n","    \n","    if override:\n","      res_df = enlist_tr(res_df, config1, np_timeidx)\n","    else:\n","      res_df = utils1.enlist_tr(res_df, config1, np_timeidx)\n","      if multi_mode:\n","        res_df = utils2.enlist_tr(res_df, config2, np_timeidx)\n","\n","\n","    #       trading : Ïó¨Í∏∞ÎèÑ Ï≤¥Í≤∞ Í≤∞Í≥ºÏóê ÎåÄÌï¥ Î¨òÏÇ¨Ìï®       #\n","    trade_list = []\n","    h_trade_list = []\n","    leverage_list = []\n","    fee_list = []\n","    short_fee_list = []\n","    long_fee_list = []\n","    open_list = []\n","    zone_list = []\n","    side_list = []\n","\n","    tp_ratio_list = []\n","    short_tp_ratio_list = []\n","    long_tp_ratio_list = []\n","\n","    dr_list = []\n","    short_dr_list = []\n","    long_dr_list = []\n","\n","    liqd_list = []\n","    short_liqd_list = []\n","    long_liqd_list = []\n","\n","    nontp_liqd_list = []\n","    nontp_short_liqd_list = []\n","    nontp_long_liqd_list = []\n","\n","    nontp_pr_list = []\n","    nontp_short_pr_list = []\n","    nontp_long_pr_list = []\n","\n","    nontp_short_indexs = []\n","    nontp_long_indexs = []\n","\n","    nontp_short_ep_list = []\n","    nontp_long_ep_list = []\n","\n","    pr_list = []\n","    long_list = []\n","    short_list = []\n","\n","    h_pr_list = []\n","    h_long_list = []\n","    h_short_list = []\n","\n","    ep_tp_list = []\n","    h_ep_tp_list = []\n","    tp_state_list = []\n","\n","    i = 0\n","    while 1:\n","    # for i in range(len(res_df)):  \n","\n","      run = 0\n","      # if res_df['entry_{}'.format(config.strat_version)][i] == config.ep_set.short_entry_score: \n","      if multi_mode:\n","        if res_df['entry_{}'.format(config1.strat_version)][i] == config1.ep_set.short_entry_score or \\\n","            res_df['entry_{}'.format(config2.strat_version)][i] == config2.ep_set.short_entry_score: \n","          run = -1\n","        elif res_df['entry_{}'.format(config1.strat_version)][i] == -config1.ep_set.short_entry_score or \\\n","          res_df['entry_{}'.format(config2.strat_version)][i] == -config2.ep_set.short_entry_score: \n","          run = 1 \n","      else:\n","        if res_df['entry_{}'.format(config1.strat_version)][i] == config1.ep_set.short_entry_score:\n","          run = -1\n","        elif res_df['entry_{}'.format(config1.strat_version)][i] == -config1.ep_set.short_entry_score:\n","          run = 1\n","\n","      if run == -1:\n","        # print(\"i in short :\", i)\n","\n","        #     Ïù¥Í≥≥ÏóêÏÑú ÏÇ¨Ïö©Îê† config Í∞Ä Ï†ïÌï¥Ïßê    #\n","        if res_df['entry_{}'.format(config1.strat_version)][i] == config1.ep_set.short_entry_score:\n","          config = config1\n","        else:\n","          config = config2\n","\n","        strat_version = config.strat_version\n","    \n","        # ------- fee init ------- #\n","        if config.ep_set.entry_type == 'LIMIT':\n","          fee = config.trader_set.limit_fee\n","        else:\n","          fee = config.trader_set.market_fee\n","        \n","        # --------------- set partial tp --------------- #\n","        short_tps = [res_df['short_tp_{}'.format(strat_version)]]\n","        long_tps = [res_df['long_tp_{}'.format(strat_version)]]\n","\n","        # short_tps = [short_tp2, short_tp] # org\n","        # long_tps = [long_tp2, long_tp]\n","        \n","        # short_tps = [short_tp, short_tp2]\n","        # long_tps = [long_tp, long_tp2]\n","\n","        initial_i = i\n","\n","        if config.out_set.static_out:\n","          p_i = initial_i\n","        else:\n","          p_i = i\n","\n","\n","        if override:\n","          res_df, open_side_str, zone = short_ep_loc(res_df, config, i, show_detail)          \n","        else:\n","          res_df, open_side_str, zone = utils_public.short_ep_loc(res_df, config, i, show_detail)\n","\n","\n","        # -------------- mr_score summation -------------- #\n","        if open_side_str is not None:          \n","          pass\n","\n","        else:\n","          i += 1\n","          if i >= len(res_df):\n","            break\n","          continue\n","\n","\n","        ep_j = initial_i\n","        out_j = initial_i\n","\n","        # -------------- limit waiting : limit_out -------------- #\n","\n","        if config.ep_set.entry_type == \"LIMIT\":\n","\n","          allow_ep_in = 0 if strat_version in [\"v5_2\"] else 1\n","          entry_done = 0\n","          entry_open = 0\n","          prev_sar = None\n","\n","          # for e_j in range(i, len(res_df)): # entry_signal Ïù¥ open Í∏∞Ï§Ä (Ìï¥Îãπ bar ÏóêÏÑú Ï≤¥Í≤∞ Í∞ÄÎä•Ìï®)\n","          if i + 1 >= len(res_df):  # i should be checked if e_j starts from i+1\n","            break\n","          for e_j in range(i + 1, len(res_df)): # entry signalÏù¥ close Í∏∞Ï§Ä Ïùº Í≤ΩÏö∞\n","        \n","            if not config.ep_set.static_ep:\n","              ep_j = e_j\n","              out_j = e_j\n","\n","            if config.tp_set.static_tp:\n","              # if config.ep_set.tpout_onexec:\n","              #   tp_j = e_j\n","              # else:\n","                tp_j = initial_i\n","            else:\n","              tp_j = e_j  \n","\n","            #             1. ep ÏÑ§Ï†ï \n","            # -------------- np.inf ep -------------- #\n","            # if short_ep.iloc[initial_i] == np.inf:\n","            #   break\n","\n","\n","            #     1. check ep_out     #\n","            if config.loc_set.zone.ei_k != \"None\":\n","\n","              # if strat_version == \"v3\":\n","              if res_df['low'].iloc[e_j] <= res_df['h_short_rtc_1_{}'.format(strat_version)].iloc[tp_j] - \\\n","                res_df['h_short_rtc_gap_{}'.format(strat_version)].iloc[tp_j] * config.loc_set.zone.ei_k:\n","                break\n","\n","              # elif strat_version == \"v5_2\":\n","              # if res_df['low'].iloc[e_j] <= res_df['short_tp_{}'.format(strat_version)].iloc[tp_j]: # ep_out : tp_done\n","              # # if np_timeidx[e_j] % config.loc_set.point.tf_entry == config.loc_set.point.tf_entry - 1:\n","              #   break\n","\n","              # elif (res_df['rsi_%s' % config.loc_set.point.exp_itv].iloc[e_j - 1] >= rsi_lower) & \\\n","              #                  (res_df['rsi_%s' % config.loc_set.point.exp_itv].iloc[e_j] < rsi_lower):\n","              #   break\n","\n","            #     2. ep_loc.point2\n","            if strat_version == \"v5_2\" and allow_ep_in == 0:\n","              if (res_df['dc_upper_1m'].iloc[e_j - 1] <= res_df['dc_upper_15m'].iloc[e_j]) & \\\n","                  (res_df['dc_upper_15m'].iloc[e_j - 1] != res_df['dc_upper_15m'].iloc[e_j]): # & \\\n","                  # (res_df['dc_upper_15m'].iloc[e_j] <= res_df['ema_5m'].iloc[e_j]):\n","                allow_ep_in = 1\n","                out_j = e_j\n","                # ep_j = e_j\n","                # continue  # limit entry Ïùò Í≤ΩÏö∞ ep_loc.point2 ÏôÑÎ£å ÏãúÏ†ê Ïù¥ÌõÑÎ°ú ÏßÑÏûÖÏù¥ Í∞ÄÎä•Ìïú Ï†ê\n","\n","              #     2-1. ep_out (ep_loc2) by ep_loc.point\n","              # if allow_ep_in and config.loc_set.zone.tr_thresh != \"None\":\n","              #   ep_ = res_df['close'].iloc[ep_j - 1]\n","              #   tr = ((res_df['short_tp_{}'.format(strat_version)].iloc[tp_j] - ep_ - tp_fee * ep_) / (ep_ - res_df['short_out_{}'.format(strat_version)].iloc[out_j] + out_fee * ep_))\n","              #   if tr < config.loc_set.zone.tr_thresh:\n","              #     break\n","\n","            #     3. check ep_in       #\n","            if allow_ep_in and res_df['high'].iloc[e_j] >= res_df['short_ep_{}'.format(strat_version)].iloc[ep_j]:\n","              entry_done = 1\n","              # print(\"res_df['high'].iloc[e_j] :\", res_df['high'].iloc[e_j])\n","              # print(\"e_j :\", e_j)\n","\n","              #     Ïù¥ÎØ∏, e_j open Ïù¥ ep Î≥¥Îã§ ÎÜíÏùÄ Í≤ΩÏö∞, entry[ep_j] => -2 Î°ú Î≥ÄÍ≤Ω   #\n","              if res_df['open'].iloc[e_j] >= res_df['short_ep_{}'.format(strat_version)].iloc[ep_j]:\n","                entry_open = 1\n","\n","              break\n","\n","\n","          i = e_j\n","          # print(\"i = e_j :\", i)\n","\n","          if entry_done:      \n","            pass\n","\n","          else:\n","            i += 1\n","            if i >= len(res_df):\n","              break\n","            continue\n","\n","        # ----------------- end wait ----------------- #\n","\n","        # if e_j - initial_i >= 200:\n","        #   print(\"e_j, initial_i :\", e_j, initial_i)\n","        # print(\"e_j - initial_i :\", e_j - initial_i)\n","        # print()\n","\n","        open_list.append(initial_i)\n","        zone_list.append(zone)\n","        side_list.append('s')\n","        \n","        #     e_j ÎùºÎäî Î≥ÄÏàòÎäî MARKET Ïóê ÏûàÏñ¥ÏÑú Ï†ïÏùòÎêòÏÑúÎäî ÏïàÎêòÎäî Î≥ÄÏàòÏûÑ   #\n","        if config.ep_set.entry_type == 'MARKET':\n","          # try:\n","          #   ep_list = [res_df['close'].iloc[e_j]]\n","          # except Exception as e:\n","          #   # print('error in ep_list (initial) :', e)\n","          ep_list = [res_df['close'].iloc[ep_j]]\n","\n","        else:          \n","          if not entry_open:\n","            ep_list = [res_df['short_ep_{}'.format(strat_version)].iloc[ep_j]]\n","          \n","          else:\n","            #   ep_j Îäî Ìï≠ÏÉÅ ÏûàÏùå, LIMIT Ïù∏ Í≤ΩÏö∞ e_j ÎèÑ Ìï≠ÏÉÅ Ï°¥Ïû¨Ìï® --> dynamic_ep Ïó¨Î∂ÄÏóê Îî∞Îùº ep_j = e_j Í∞Ä ÎêòÎäî Í≤ΩÏö∞Îßå Ï°¥Ïû¨Ìï† ÎøêÏûÑ \n","            #   Îî∞ÎùºÏÑú, ep_j Î°ú ÌÜµÏùº Í∞ÄÎä•Ìï® (dynamic_ep Ïù∏ Í≤ΩÏö∞, ep_j = e_j ÎêòÏñ¥ÏûàÏùå)\n","            fee = config.trader_set.market_fee\n","            ep_list = [res_df['open'].iloc[e_j]]  # --> Ï≤¥Í≤∞Ïù¥ ÎêòÎäî e_j idx Í∏∞Ï§ÄÏúºÎ°ú ÌïòÎäîÍ≤å ÎßûÏùå\n","\n","        if not config.lvrg_set.static_lvrg:\n","\n","          ep_ = ep_list[0]\n","          out_ = res_df['short_out_{}'.format(strat_version)].iloc[out_j]\n","          if override:\n","            config.lvrg_set.leverage = lvrg_set(res_df, config, \"SELL\", ep_, out_, fee)\n","          else:\n","            config.lvrg_set.leverage = utils_public.lvrg_set(res_df, config, \"SELL\", ep_, out_, fee)\n","\n","          # -------------- leverage rejection -------------- #\n","          if config.lvrg_set.leverage == None:\n","            open_list.pop()\n","            zone_list.pop()\n","            side_list.pop()\n","            i += 1\n","            if i >= len(res_df):\n","              break\n","            continue          \n","        \n","        leverage_list.append(config.lvrg_set.leverage)\n","\n","        # try:\n","        if config.ep_set.entry_type == \"MARKET\":\n","          ep_idx_list = [ep_j]  # ep_j Îäî ep_type Ïú†Í¥ÄÌïòÍ≤å Ï°¥Ïû¨ÌïòÎäî Î≥ÄÏàòÎãàÍπå try Ïóê Í±∏Ïñ¥ÎëêÎäîÍ≤å ÎßûÏùå <-- # market Ïù∏Îç∞, e_j Î≥ÄÏàòÍ∞Ä Ìï†ÎãπÎêú Í≤ΩÏö∞ Í≥†Î†§Ìï¥ÏïºÌï®\n","        else:\n","          ep_idx_list = [e_j]\n","\n","        out_idx_list = [out_j]\n","\n","        # except Exception as e:\n","        #   # print('error in ep_idx_list :', e)        \n","        #   ep_idx_list = [e_j]\n","\n","        tp_list = []\n","        tp_idx_list = []\n","\n","        partial_tp_cnt = 0\n","        hedge_cnt = 1\n","\n","        h_ep, h_tp = None, None\n","        h_i, h_j = None, None\n","        \n","        trade_done = 0\n","        cross_on = 0\n","        out = 0\n","        # config.out_set.retouch\n","\n","        #     Todo    #\n","        #      1. future_work : ÏÉÅÎã®Ïùò retouch ÏôÄ Í≤πÏπ® \n","        config.out_set.retouch = 0\n","        \n","\n","        if i == len(res_df) - 1: # if j start from i + 1 \n","          open_list.pop()       \n","          zone_list.pop()       \n","          side_list.pop()       \n","        for j in range(i + 1, len(res_df)):\n","\n","        # for j in range(i, len(res_df)):\n","\n","          if config.tp_set.static_tp:\n","            if not config.ep_set.static_ep and config.ep_set.entry_type == \"LIMIT\" and config.ep_set.tpout_onexec:\n","              tp_j = ep_j  # tpout_onexec = using dynamic_ep --> using ep_j Ïóê ÎåÄÌïú Ïù¥Ïú†\n","            else:\n","              tp_j = initial_i\n","          else:\n","            tp_j = j\n","\n","          if config.out_set.static_out:\n","            if not config.ep_set.static_ep and config.ep_set.entry_type == \"LIMIT\" and config.ep_set.tpout_onexec:\n","              out_j = ep_j\n","            # else:           \n","            #   out_j = initial_i   # --> referenced upper phase as initail_j / e_j (start of limit wait)\n","          else:\n","            out_j = j\n","\n","\n","          # -------------- sub ep -------------- #\n","          # if res_df['high'].iloc[j - 1] <= res_df['sar2'].iloc[j - 1] and res_df['high'].iloc[j] > res_df['sar2'].iloc[j]:\n","            \n","          #   sub_ep = res_df['sar2'].iloc[j - 1]\n","\n","          #   if sub_ep < ep_list[-1]:\n","          #     ep_list.append(sub_ep)\n","          #     ep_idx_list.append(j)\n","\n","          \n","          # -------------- hedge only once -------------- #\n","          #             ÏùºÎã®, h_quantity Îäî Ï¥àÍ∏∞ ÏßÑÏûÖÍ≥º ÎèôÏùºÌïòÍ≤å ÏÑ§Ï†ï         #\n","          # if res_df['high'].iloc[j] >= res_df['minor_ST2_Up'].iloc[j] and hedge_cnt == 1:\n","          # if res_df['close'].iloc[j] >= res_df['minor_ST2_Up'].iloc[j] and hedge_cnt == 1:\n","          # if res_df['close'].iloc[j] >= res_df['minor_ST3_Up'].iloc[j] and hedge_cnt == 1:\n","\n","          #   h_ep = res_df['close'].iloc[j]\n","          #   hedge_cnt -= 1\n","          #   h_i = j\n","\n","\n","          # -------------- ultimate limit tp -------------- #\n","          if not config.tp_set.non_tp:\n","\n","            #               1. by price line             #\n","            if config.tp_set.tp_type == 'LIMIT' or config.tp_set.tp_type == \"BOTH\":\n","\n","              for s_i, short_tp_ in enumerate(short_tps):\n","\n","                if res_df['low'].iloc[j] <= short_tp_.iloc[tp_j] and partial_tp_cnt == s_i: # we use static tp now\n","                # if res_df['low'].iloc[j] <= short_tp_.iloc[j]:\n","                # if res_df['low'].iloc[j] <= short_tp_.iloc[j] <= res_df['high'].iloc[j]: --> Ïù¥Í±¥ ÏûòÎ™ªÎêòÏóàÏùå\n","\n","                  if s_i == len(short_tps) - 1:\n","                    trade_done = 1\n","                  \n","                  partial_tp_cnt += 1\n","\n","                  #         dynamic tp        #\n","                  # if 0:\n","                  if short_tp_.iloc[j] != short_tp_.iloc[j - 1] and not config.tp_set.static_tp:\n","\n","                    #   tp limit Ïù¥ Î∂àÍ∞ÄÌïú Í≤ΩÏö∞ = open Ïù¥ Ïù¥ÎØ∏, tp Î•º ÎÑòÏùÄ Í≤ΩÏö∞ # \n","                    # if res_df['open'].iloc[j] < short_tp_.iloc[initial_i]:\n","                    if res_df['open'].iloc[j] < short_tp_.iloc[j]:\n","\n","                      # tp = short_tp_.iloc[initial_i]\n","                      tp = res_df['open'].iloc[j]\n","\n","                      if trade_done:\n","                        tp_state_list.append(\"d-short_open {}\".format(strat_version))\n","\n","                    #   tp limit Ïù¥ Í∞ÄÎä•Ìïú Í≤ΩÏö∞ = open Ïù¥ ÏïÑÏßÅ, tp Î•º ÎÑòÏßÄ ÏïäÏùÄ Í≤ΩÏö∞ # \n","                    else:\n","\n","                      # tp = short_tp_.iloc[initial_i]\n","                      tp = short_tp_.iloc[j]\n","                      # tp = res_df['open'].iloc[j]\n","\n","                      if trade_done:\n","                        tp_state_list.append(\"d-short_tp {}\".format(strat_version))\n","\n","                  #         static tp         #\n","                  else:\n","                    \n","                    #   tp limit Ïù¥ Î∂àÍ∞ÄÌïú Í≤ΩÏö∞ = open Ïù¥ Ïù¥ÎØ∏, tp Î•º ÎÑòÏùÄ Í≤ΩÏö∞ # \n","                    #   non_inversion Ïùò Í≤ΩÏö∞, short_tp Í∞Ä Í∞ÄÎä•Ìï®   #              \n","\n","                    # if res_df['open'].iloc[j] < short_tp_.iloc[initial_i]:\n","                    if res_df['open'].iloc[j] < short_tp_.iloc[tp_j]:\n","\n","                      # tp = short_tp_.iloc[initial_i]\n","                      tp = short_tp_.iloc[tp_j]\n","\n","                      # tp = res_df['open'].iloc[j]\n","\n","                      if trade_done:\n","                        tp_state_list.append(\"s-short_tp {}\".format(strat_version))\n","\n","                    #   tp limit Ïù¥ Í∞ÄÎä•Ìïú Í≤ΩÏö∞ = open Ïù¥ ÏïÑÏßÅ, tp Î•º ÎÑòÏßÄ ÏïäÏùÄ Í≤ΩÏö∞ # \n","                    else:\n","\n","                      # tp = short_tp_.iloc[initial_i]\n","                      tp = short_tp_.iloc[tp_j]\n","\n","                      # tp = res_df['open'].iloc[j]\n","\n","                      if trade_done:\n","                        tp_state_list.append(\"s-short_tp {}\".format(strat_version))   \n","\n","                  tp_list.append(tp)     \n","                  tp_idx_list.append(j)\n","                  fee += config.trader_set.limit_fee\n","\n","\n","            #           2. by signal        #\n","            if config.tp_set.tp_type == 'MARKET' or (config.tp_set.tp_type == \"BOTH\" and not trade_done):\n","\n","              market_tp = 0\n","\n","              # -------------- sar tp -------------- #\n","              # if (res_df['high'].iloc[j] >= res_df['sar2'].iloc[j]) & \\\n","              #   (res_df['high'].iloc[j - 1] < res_df['sar2'].iloc[j - 1]) & \\\n","              #   (res_df['high'].iloc[j - 2] < res_df['sar2'].iloc[j - 2]):\n","\n","              #       inversion     #\n","              # if (res_df['low'].iloc[j] <= res_df['sar2'].iloc[j]) & \\\n","              #   (res_df['low'].iloc[j - 1] > res_df['sar2'].iloc[j - 1]) & \\\n","              #   (res_df['low'].iloc[j - 2] > res_df['sar2'].iloc[j - 2]):\n","              \n","              # ----------- st short ----------- #\n","              # if res_df['close'].iloc[j] <= res_df['short_tp'].iloc[tp_j]:\n","              \n","              # -------------- sar pb tp -------------- #\n","              # if res_df['low'].iloc[j] <= res_df['short_tp'].iloc[initial_i]:\n","\n","              # -------------- st tp -------------- #\n","              # if res_df['close'].iloc[j] > res_df['middle_line'].iloc[j]:       \n","\n","              # -------------- fisher tp -------------- #            \n","              # if entry[j] == 1:\n","              \n","              # -------------- timestamp -------------- #\n","              # if np_timeidx[j] % config.loc_set.point.tf_entry == config.loc_set.point.tf_entry - 1:       \n","\n","              # -------------- rsi -------------- #\n","              # if (res_df['rsi_%s' % config.loc_set.point.exp_itv].iloc[j - 1] >= rsi_lower) & \\\n","              #                  (res_df['rsi_%s' % config.loc_set.point.exp_itv].iloc[j] < rsi_lower):                            \n","              #   market_tp = 1\n","\n","              # ---------------------------- early out ---------------------------- #\n","\n","              # #         rsi slight touch        #\n","              # elif allow_rsi_touch:\n","              #   if (np.min(res_df['rsi_%s' % config.loc_set.point.exp_itv].iloc[initial_i:j]) < rsi_lower + rsi_gap) & \\\n","              #     (res_df['rsi_%s' % config.loc_set.point.exp_itv].iloc[j] >= 50):\n","              #     market_tp = 1              \n","                           \n","              #           tp early out          #\n","              # # if (np.min(res_df['low'].iloc[e_j:j]) < res_df['short_tp'].iloc[tp_j]) & \\\n","              # if (np.min(res_df['low'].iloc[e_j:j]) < res_df['h_short_rtc_1'].iloc[tp_j] - res_df['h_short_rtc_gap'].iloc[tp_j] * early_out_tpg) & \\\n","              #   (res_df['close'].iloc[j] >= res_df['short_ep'].iloc[ep_j]):\n","              #   market_tp = 1 \n","\n","              #         bb_upper early out        #\n","              if strat_version == \"v5_2\":\n","                if res_df['close'].iloc[j] < res_df['bb_lower_5m'].iloc[j] < res_df['close'].iloc[j - 1]:\n","                  cross_on = 1\n","\n","                if cross_on == 1 and res_df['close'].iloc[j] > res_df['bb_upper_5m'].iloc[j] > res_df['close'].iloc[j - 1]:\n","                  market_tp = 1\n","\n","              if market_tp:\n","                \n","                tp = res_df['close'].iloc[j]\n","                # tp = res_df['open'].iloc[j]\n","                trade_done = 1\n","\n","                if trade_done:\n","                  tp_state_list.append(\"short close tp\")\n","\n","                tp_list.append(tp) \n","                tp_idx_list.append(j)\n","                fee += config.trader_set.market_fee\n","\n","\n","                  \n","          # -------------- out -------------- #\n","          if not trade_done and config.out_set.use_out and j != len(res_df) - 1:\n","\n","            # -------------- macd -------------- #\n","            # if res_df['macd_hist3'].iloc[j] > 0:  #  macd out\n","            # if res_df['macd_hist3'].iloc[i] < 0 and res_df['macd_hist3'].iloc[j] > 0:\n","\n","            # -------------- st config.out_set.retouch -------------- #\n","            # out = 1 ÏÉÅÌÉúÎ©¥ ÎèôÏùº tick ÏóêÏÑú config.out_set.retouch Î•º Ï°∞ÏÇ¨Ìï† Í±∞Í∏∞ ÎïåÎ¨∏Ïóê, Î®ºÏ†Ä Í≤ÄÏÇ¨Ìï®\n","            # Í∑∏Î¶¨Í≥†, out Í∏∞Ï§ÄÏù¥ close Îùº Ïù¥Í≤å ÎßûÏùå \n","            # close Í∞Ä short_out Î≥¥Îã§ Ïò¨ÎùºÍ∞ÄÏûàÎäî ÏÉÅÌÉúÏùºÌÖåÎãà low Î•º Ï°∞ÏÇ¨ÌïòÎäîÍ≤å ÎßûÏùå           \n","            # if out and res_df['low'].iloc[j] <= short_out.iloc[out_j]:\n","            #   config.out_set.retouch = 1\n","\n","            \n","             # ------- ÏùºÏ†ïÏãúÍ∞Ñ Ïù¥ÏÉÅ, dynamic_out Ï†ÅÏö© ------ #\n","            try:\n","              if j - out_idx >= config.out_set.retouch_out_period:\n","                static_short_out = res_df['short_out_{}'.format(strat_version)].iloc[j]\n","            \n","            except Exception as e:\n","              pass\n","\n","              # ------- static out ------ #\n","            try:\n","              if out and res_df['low'].iloc[j] <= static_short_out:\n","                config.out_set.retouch = 1\n","            except Exception as e:\n","              pass\n","\n","            \n","              # ------- config.out_set.retouch out ------ #\n","            # if out and res_df['low'].iloc[j] <= short_out2.iloc[out_j]:\n","            #   config.out_set.retouch = 1\n","\n","\n","            # -------------- st -------------- #\n","            # if res_df['close'].iloc[j] > res_df['middle_line'].iloc[j]:    \n","            # if res_df['close'].iloc[j] > res_df['minor_ST3_Up'].iloc[j]:\n","            # if res_df['close'].iloc[j] > upper_middle.iloc[j]:\n","            # if res_df['close'].iloc[j] > res_df['minor_ST1_Up'].iloc[j]:\n","            if out == 0:              \n","              if config.out_set.hl_out:\n","                if res_df['high'].iloc[j] >= res_df['short_out_{}'.format(strat_version)].iloc[out_j]: # check out only once\n","                  out = 1\n","\n","              else:\n","                if res_df['close'].iloc[j] >= res_df['short_out_{}'.format(strat_version)].iloc[out_j]: # check out only once\n","                  out = 1\n","\n","              # out_idx = j\n","              # static_short_out = short_out.iloc[out_j]\n","              # if config.out_set.second_out:              \n","                # static_short_out = short_out.iloc[out_j] + res_df['st_gap'].iloc[out_j] * config.out_set.second_out_gap\n","            \n","            # if out == 0 and res_df['high'].iloc[j] >= short_out.iloc[out_j]: # check out only once\n","            #   out = 1\n","             \n","\n","            # -------------- sma -------------- #\n","            # if res_df['close'].iloc[j] > res_df[sma].iloc[j]:\n","\n","            # -------------- sar -------------- #\n","            # if res_df['close'].iloc[j] > res_df['minor_ST3_Up'].iloc[j] \\\n","            #   or res_df['sar2'].iloc[j] <= res_df['high'].iloc[j]:\n","            # if res_df['close'].iloc[j] > short_out.iloc[initial_i]: # or \\\n","            #   out = 1\n","              # res_df['sar2_uptrend'].iloc[j] == 1: # or \\\n","\n","            # if res_df['sar2_uptrend'].iloc[j] == 1:\n","\n","            #   if prev_sar is None:\n","            #     prev_sar = res_df['sar2'].iloc[j - 1]\n","              \n","            #   if res_df['close'].iloc[j] > prev_sar:\n","            #     out = 1\n","\n","            # else:\n","            #   if res_df['close'].iloc[j] > res_df['sar2'].iloc[j]:\n","            #     out = 1\n","              \n","            # -------------- hl -------------- #\n","            # if res_df['close'].iloc[j] > short_out.iloc[tp_j]:\n","            \n","            # -------------- stoch -------------- #\n","            # if res_df['stoch'].iloc[j - 2] >= res_df['stoch'].iloc[j - 1] and \\\n","            #   res_df['stoch'].iloc[j - 1] < res_df['stoch'].iloc[j] and \\\n","            #   res_df['stoch'].iloc[j - 1] <= stoch_lower:\n","            #   out = 1\n","\n","            # config.out_set.retouch 1 Í≤ΩÏö∞, config.out_set.retouch Ï°∞Í±¥ÎèÑ ÏûàÏñ¥ÏïºÌï®\n","            if out:\n","              if config.out_set.retouch:\n","                if config.out_set.retouch:\n","                  pass\n","                else:\n","                    continue\n","\n","              else:\n","                pass\n","\n","              if config.out_set.price_restoration:\n","                tp = res_df['short_out_{}'.format(strat_version)].iloc[out_j]\n","                if config.out_set.second_out:\n","                  tp = res_df['short_out2_{}'.format(strat_version)].iloc[out_j]\n","                \n","                # if res_df['close'].iloc[j] > tp: # Ïù¥ Í≤ΩÏö∞Î•º protect ÌïòÎäîÍ±¥ insane ÏûÑ\n","                #   tp = res_df['close'].iloc[j]\n","\n","              else:\n","                \n","                if res_df['open'].iloc[j] >= res_df['short_out_{}'.format(strat_version)].iloc[out_j]:\n","                  tp = res_df['open'].iloc[j]\n","                else:\n","                  if config.out_set.hl_out:\n","                    tp = res_df['short_out_{}'.format(strat_version)].iloc[out_j]\n","                  else:\n","                    tp = res_df['close'].iloc[j]\n","                \n","                # if not config.out_set.static_out:\n","                #   if res_df['open'].iloc[j] >= res_df['short_out_{}'.format(strat_version)].iloc[out_j]: # close Í∏∞Ï§ÄÏù¥Îùº Ïù¥Îü∞ Ï°∞Í±¥ÏùÑ Î™ªÏîÄ, Ï∞®ÎùºÎ¶¨ j Î•º i Î∂ÄÌÑ∞ ÏãúÏûë\n","                #     tp = res_df['open'].iloc[j]\n","                #   else:\n","                #     tp = res_df['close'].iloc[j]\n","\n","                # else:\n","                #   tp = res_df['close'].iloc[j]\n","\n","              \n","              if config.out_set.retouch: # out Í≥º open ÎπÑÍµê\n","                if config.out_set.second_out:\n","                  if res_df['open'].iloc[j] <= res_df['short_out2_{}'.format(strat_version)].iloc[out_j]:\n","                    tp = res_df['open'].iloc[j]\n","                else:\n","                  if res_df['open'].iloc[j] <= res_df['short_out_{}'.format(strat_version)].iloc[out_j]:\n","                    tp = res_df['open'].iloc[j]\n","\n","                try: # static_short_out Ïù∏ Í≤ΩÏö∞, open ÎèÑ Í≥†Î†§Ìïú tp set\n","                  if res_df['open'].iloc[j] <= static_short_out:\n","                    tp = res_df['open'].iloc[j]\n","                  else:\n","                    tp = static_short_out\n","                except Exception as e:\n","                  pass\n","\n","              trade_done = 1\n","              tp_state_list.append(\"short close_out {}\".format(strat_version))\n","            \n","\n","              tp_list.append(tp) \n","              tp_idx_list.append(j)\n","              fee += config.trader_set.market_fee\n","\n","\n","          # -------------- non tp -------------- #\n","          if j == len(res_df) - 1:\n","            trade_done = 1\n","            tp = res_df['close'].iloc[j]\n","            tp_list.append(tp) \n","            tp_idx_list.append(j)\n","            fee += config.trader_set.market_fee\n","          \n","\n","\n","          # -------------- append trade data -------------- #\n","          if trade_done:\n","\n","            # --------------- tp_ratio info --------------- #\n","            #         Todo        #\n","            #          short_out Ïóê ÎåÄÌïú Ï†ïÎ≥¥Îäî Ï°¥Ïû¨Ìï®,\n","            #          short_tp Ïóê ÎåÄÌïú Ï†ïÎ≥¥Îäî Ï°¥Ïû¨Ìï®,\n","            #       => initial_i Í∏∞Ï§ÄÏúºÎ°ú ,dynamic | static set ÏùÑ tp ÏôÄ out Ïóê Í∞ÅÍ∞Å Ï†ÅÏö©\n","            #          config.lvrg_set.leverage Îäî initial_i Í∏∞Ï§ÄÏúºÎ°ú Ï†ÅÏö©ÎêòÎãàÍπå\n","            #          Ï†ÅÏö©Îêú tp & out ÏúºÎ°ú abs((tp - ep) / (ep - out)) Í≥ÑÏÇ∞\n","            try:\n","              if config.out_set.use_out:\n","                done_tp = res_df['short_tp_{}'.format(strat_version)].iloc[tp_j]\n","                done_out = res_df['short_out_{}'.format(strat_version)].iloc[out_j]\n","\n","                if done_out <= ep_list[0]: # loss > 1\n","                  dr = np.nan\n","                  tp_ratio = np.nan\n","                else:                \n","                  dr = ((ep_list[0] - done_tp) / (done_out - ep_list[0]))\n","                  tp_ratio = ((ep_list[0] - done_tp - tp_fee * ep_list[0]) / (done_out - ep_list[0] + out_fee * ep_list[0]))\n","                \n","              else:\n","                dr = np.nan\n","                tp_ratio = np.nan  \n","\n","\n","            except Exception as e:\n","              dr = np.nan \n","              tp_ratio = np.nan  \n","            \n","            tp_ratio_list.append(tp_ratio)\n","            short_tp_ratio_list.append(tp_ratio)     \n","            dr_list.append(dr)\n","            short_dr_list.append(dr)   \n","\n","\n","            # -------------------- partial tp -------------------- #\n","            #        1. len(tp_list) Ïóê ÎåÄÏùëÌïòÎäî qty_list Î•º ÎßåÎì§Ïñ¥ÏïºÌï®    #\n","            #        2. temp_pr_list Î•º ÎßåÎì§Ïñ¥ Ï¥ùÌï© + 1 ÏùÑ pr_list Ïóê Ï†ÄÏû•      #\n","            #        2-1. temp_pr = sum((ep / tp_list[i] - fee - 1) * qty_list[i])   #\n","            #        3. temp_pr_list Ïùò Ï≤´ tp ÏóêÎäî r_qty Î•º Ìï†ÎãπÌï®        #\n","            qty_list = []\n","            temp_pr_list = []\n","            r_qty = 1\n","            for q_i in range(len(tp_list) - 1, -1, -1):\n","\n","              if len(tp_list) == 1:\n","                temp_qty = r_qty\n","              else:\n","                if q_i !=0:\n","                  temp_qty = r_qty / config.tp_set.partial_qty_divider\n","                else:\n","                  temp_qty = r_qty\n","\n","              temp_pr = (ep_list[0] / tp_list[q_i] - fee - 1) * temp_qty * config.lvrg_set.leverage\n","              # temp_pr = (ep_list[0] / tp_list[q_i] - fee - 1) * temp_qty\n","              r_qty -= temp_qty\n","\n","              temp_pr_list.append(temp_pr)\n","              qty_list.append(temp_qty)\n","\n","            # if len(temp_pr_list) == 1:\n","            #   print(\"qty_list :\", qty_list)\n","            #   print(\"temp_pr_list :\", temp_pr_list)\n","\n","            temp_pr = sum(temp_pr_list) + 1\n","\n","            # -------------------- sub ep -> pr calc -------------------- #\n","            if len(ep_list) > 1:\n","            \n","              p_ep_pr = []\n","              for sub_ep_ in ep_list:\n","                sub_pr = (sub_ep_ / tp - fee - 1) * config.lvrg_set.leverage\n","                p_ep_pr.append(sub_pr)\n","\n","              temp_pr = sum(p_ep_pr) + 1\n","\n","              print(\"temp_pr :\", temp_pr)\n","\n","            # ------------ hedge + non_hedge pr summation ------------ #\n","            #         hedge pr direction is opposite to the origin       #\n","            hedge_pr = 1\n","            if hedge_cnt == 0:\n","\n","              #       hedge tp      #\n","              h_tp = res_df['close'].iloc[j]\n","              hedge_pr = (h_tp / h_ep - fee - 1) * config.lvrg_set.leverage  # hedge long\n","              temp_pr += hedge_pr\n","              h_j = j\n","\n","            \n","            # hh = max(res_df['high'].iloc[i:j + 1])\n","            hh = max(res_df['high'].iloc[i:j])    # pos. Ï†ïÎ¶¨ÌïòÍ∏∞ Î∞îÎ°ú ÏßÅÏ†ÑÍπåÏßÄ\n","            short_liq = (ep_list[0] / hh - fee - 1) * config.lvrg_set.leverage + 1\n","\n","            if j != len(res_df) - 1:\n","\n","              # ep_tp_list.append((ep, tp_list))  \n","              ep_tp_list.append((ep_list, tp_list))  \n","              # trade_list.append([initial_i, i, j])\n","              # trade_list.append((ep_idx_list, tp_idx_list))\n","              trade_list.append((ep_idx_list, out_idx_list, tp_idx_list))\n","\n","              liqd_list.append(short_liq)\n","              short_liqd_list.append(short_liq)\n","\n","              h_ep_tp_list.append((h_ep, h_tp))      # hedge ÎèÑ ep_tp_list Ï≤òÎüº Î≥ÄÍ≤ΩÌï¥Ï£ºÏñ¥ÏïºÌïòÎäîÎç∞ ÏïÑÏßÅ ÏïàÍ±¥ÎìúÎ¶º, Îî±Ìûà ÏÇ¨Ïö©Ìï† ÏùºÏù¥ ÏóÜÏñ¥Î≥¥Ïó¨   \n","              h_trade_list.append([initial_i, h_i, h_j])                \n","\n","              pr_list.append(temp_pr)\n","              fee_list.append(fee)\n","              short_list.append(temp_pr)\n","              short_fee_list.append(fee)\n","\n","              h_pr_list.append(hedge_pr)\n","              h_short_list.append(hedge_pr)\n","\n","              i = j\n","              break\n","\n","            else:\n","\n","              # ep_tp_list.append((ep_list, tp_list))\n","              # trade_list.append((ep_idx_list, tp_idx_list))\n","              # plot_check ÎïåÎ¨∏Ïóê, pr_list ÍπåÏßÄ ÌïòÍ≤åÎêòÎ©¥ acc_pr eval Ïù¥ Íº¨Ïù¥Í≤åÎåê\n","          \n","              # pr_list Î•º ÎÑ£ÏßÄ ÏïäÏùÑÍ±∞ÎãàÍπå, open_list ÏóêÏÑú Ìï¥Îãπ idx Îäî pop\n","              open_list.pop()\n","              zone_list.pop()\n","              side_list.pop()\n","              \n","              #         tp ÎØ∏Ï≤¥Í≤∞ survey        #\n","              nontp_liqd_list.append(short_liq)\n","              nontp_short_liqd_list.append(short_liq)\n","              nontp_short_indexs.append(i)\n","              nontp_short_ep_list.append(ep_list[0])\n","\n","              nontp_short_pr = (ep_list[0] / tp - fee - 1) * config.lvrg_set.leverage + 1\n","              nontp_pr_list.append(nontp_short_pr)\n","              nontp_short_pr_list.append(nontp_short_pr)\n","\n","\n","      #                  long  phase                #\n","      # elif res_df['entry'][i] == -config.ep_set.short_entry_score:       \n","      # elif res_df['entry_{}'.format(config1.strat_version)][i] == -config1.ep_set.short_entry_score or \\\n","      #     res_df['entry_{}'.format(config2.strat_version)][i] == -config2.ep_set.short_entry_score: \n","      elif run == 1:\n","      \n","        #     Ïù¥Í≥≥ÏóêÏÑú ÏÇ¨Ïö©Îê† config Í∞Ä Ï†ïÌï¥Ïßê    #\n","        if res_df['entry_{}'.format(config1.strat_version)][i] == -config1.ep_set.short_entry_score:\n","          config = config1\n","        else:\n","          config = config2\n","\n","        strat_version = config.strat_version\n","    \n","        # ------- fee init ------- #\n","        if config.ep_set.entry_type == 'LIMIT':\n","          fee = config.trader_set.limit_fee\n","        else:\n","          fee = config.trader_set.market_fee\n","        \n","        # --------------- set partial tp --------------- #\n","        short_tps = [res_df['short_tp_{}'.format(strat_version)]]\n","        long_tps = [res_df['long_tp_{}'.format(strat_version)]]\n","\n","        # short_tps = [short_tp2, short_tp] # org\n","        # long_tps = [long_tp2, long_tp]\n","        \n","        # short_tps = [short_tp, short_tp2]\n","        # long_tps = [long_tp, long_tp2]\n","\n","        initial_i = i\n","\n","        if config.out_set.static_out:\n","          p_i = initial_i\n","        else:\n","          p_i = i\n","\n","\n","        if override:\n","          res_df, open_side_str, zone = long_ep_loc(res_df, config, i, show_detail)\n","        else:          \n","          res_df, open_side_str, zone = utils_public.long_ep_loc(res_df, config, i, show_detail)\n","\n","\n","        # -------------- mr_score summation -------------- #\n","        if open_side_str is not None:        \n","          pass\n","        \n","        else:\n","          i += 1\n","          if i >= len(res_df):\n","            break\n","          continue\n","\n","        # print(\"i after long_ep_loc :\", i)\n","\n","\n","        ep_j = initial_i\n","        out_j = initial_i\n","      \n","        # -------------- limit waiting const. -------------- #      \n","        if config.ep_set.entry_type == \"LIMIT\":\n","\n","          allow_ep_in = 0 if strat_version in [\"v5_2\"] else 1\n","          entry_done = 0\n","          entry_open = 0\n","          prev_sar = None\n","\n","          # for e_j in range(i, len(res_df)):   \n","\n","          if i + 1 >= len(res_df):  # i should be checked if e_j starts from i+1\n","            break\n","          for e_j in range(i + 1, len(res_df)):  # entry Í∞Ä close Í∏∞Ï§ÄÏùº Í≤ΩÏö∞ ÏÇ¨Ïö© (open Í∏∞Ï§ÄÏùº Í≤ΩÏö∞ i Î∂ÄÌÑ∞ ÏãúÏûëÌï¥ÎèÑ Î¨¥Î∞©Ìï®)\n","            \n","            if not config.ep_set.static_ep:\n","              ep_j = e_j  \n","              out_j = e_j\n","            \n","            if config.tp_set.static_tp:\n","              # if config.ep_set.tpout_onexec:\n","              #   tp_j = e_j\n","              # else:\n","                tp_j = initial_i\n","            else:\n","              tp_j = e_j  \n","\n","            \n","            #          np.inf ep         #\n","            # if long_ep.iloc[initial_i] == np.inf:\n","            #   break\n","            \n","            #     1. check ep_out     #\n","            if config.loc_set.zone.ei_k != \"None\":\n","\n","              if res_df['high'].iloc[e_j] >= res_df['h_long_rtc_1_{}'.format(strat_version)].iloc[tp_j] + \\\n","                res_df['h_long_rtc_gap_{}'.format(strat_version)].iloc[tp_j] * config.loc_set.zone.ei_k:\n","              # if res_df['high'].iloc[e_j] >= res_df['long_tp_{}'.format(strat_version)].iloc[tp_j]:                \n","              # if np_timeidx[e_j] % config.loc_set.point.tf_entry == config.loc_set.point.tf_entry - 1:\n","                break\n","\n","              # elif (res_df['rsi_%s' % config.loc_set.point.exp_itv].iloc[e_j - 1] <= rsi_upper) & \\\n","              #                  (res_df['rsi_%s' % config.loc_set.point.exp_itv].iloc[e_j] > rsi_upper):\n","              #   break            \n","\n","            \n","            #     2. ep_loc.point2\n","            if strat_version == \"v5_2\" and allow_ep_in == 0:\n","              if (res_df['dc_lower_1m'].iloc[e_j - 1] >= res_df['dc_lower_15m'].iloc[e_j]) & \\\n","                  (res_df['dc_lower_15m'].iloc[e_j - 1] != res_df['dc_lower_15m'].iloc[e_j]): # & \\\n","                  # (res_df['dc_lower_15m'].iloc[e_j] >= res_df['ema_5m'].iloc[e_j]):\n","                allow_ep_in = 1\n","                out_j = e_j\n","                # ep_j = e_j\n","                # continue  # limit entry Ïùò Í≤ΩÏö∞ ep_loc.point2 ÏôÑÎ£å ÏãúÏ†ê Ïù¥ÌõÑÎ°ú ÏßÑÏûÖÏù¥ Í∞ÄÎä•Ìïú Ï†ê\n","                #     htf indi. Í∞Ä backi2 Í∏∞Ï§ÄÏù¥Îùº continue ÌïòÏßÄ ÏïäÏïÑÎèÑ Îê®\n","              \n","              #     2-1. ep_out (ep_loc2) by ep_loc.point\n","              # if allow_ep_in and config.loc_set.zone.tr_thresh != \"None\":\n","              #   ep_ = res_df['close'].iloc[ep_j - 1]\n","              #   tr = ((res_df['long_tp_{}'.format(strat_version)].iloc[tp_j] - ep_ - tp_fee * ep_) / (ep_ - res_df['long_out_{}'.format(strat_version)].iloc[out_j] + out_fee * ep_))\n","              #   # print(\"tr in long :\", tr)\n","              #   if tr < config.loc_set.zone.tr_thresh:\n","              #     break\n","\n","            #     3. check ep_in      #\n","            if allow_ep_in and res_df['low'].iloc[e_j] <= res_df['long_ep_{}'.format(strat_version)].iloc[ep_j]:\n","              entry_done = 1\n","              # print(\"e_j :\", e_j)\n","              \n","              #     Ïù¥ÎØ∏, e_j open Ïù¥ ep Î≥¥Îã§ ÎÇÆÏùÄ Í≤ΩÏö∞, entry[initial_i] => -2 Î°ú Î≥ÄÍ≤Ω   #\n","              if res_df['open'].iloc[e_j] <= res_df['long_ep_{}'.format(strat_version)].iloc[ep_j]:\n","                entry_open = 1\n","\n","              break\n","\n","\n","          i = e_j\n","          # print(\"i = e_j :\", i)\n","\n","          if entry_done:      \n","            pass\n","            # print(\"i, entry_done :\", i, entry_done)\n","\n","          else:\n","            i += 1\n","            if i >= len(res_df):\n","              # print(\"i :\", i)\n","              break\n","\n","            # print(\"i in continue :\", i)          \n","            continue\n","\n","\n","        # ---------------- end wait ---------------- #\n","        # if e_j - initial_i >= 200:\n","        #   print(\"e_j, initial_i :\", e_j, initial_i)\n","        \n","        # print(i)\n","\n","        open_list.append(initial_i)\n","        zone_list.append(zone)\n","        side_list.append('l')\n","\n","        if config.ep_set.entry_type == 'MARKET':\n","          ep_list = [res_df['close'].iloc[ep_j]]\n","        else:\n","          if not entry_open:\n","            ep_list = [res_df['long_ep_{}'.format(strat_version)].iloc[ep_j]]    # dynamic_ep Ïù∏ Í≤ΩÏö∞ÏóêÎèÑ e_j Í∞Ä ep_j Î°ú ÎåÄÏùëÎêòÍ∏∞ ÎïåÎ¨∏Ïóê ep_j Îßå ÏÇ¨Ïö©Ìï¥ÎèÑ Î¨¥Í¥Ä\n","          else:\n","            # try:\n","            #   ep_list = [res_df['open'].iloc[e_j]]\n","            # except Exception as e:\n","            fee = config.trader_set.market_fee\n","            ep_list = [res_df['open'].iloc[e_j]]  # --> Ï≤¥Í≤∞Ïù¥ ÎêòÎäî e_j idx Í∏∞Ï§ÄÏúºÎ°ú ÌïòÎäîÍ≤å ÎßûÏùå\n","\n","        if not config.lvrg_set.static_lvrg:\n","\n","          ep_ = ep_list[0]\n","          out_ = res_df['long_out_{}'.format(strat_version)].iloc[out_j]\n","          if override:\n","            config.lvrg_set.leverage = lvrg_set(res_df, config, \"BUY\", ep_, out_, fee)\n","          else:\n","            config.lvrg_set.leverage = utils_public.lvrg_set(res_df, config, \"BUY\", ep_, out_, fee)\n","\n","          # -------------- leverage rejection -------------- #\n","          if config.lvrg_set.leverage == None:\n","            open_list.pop()\n","            zone_list.pop()\n","            side_list.pop()\n","            i += 1\n","            if i >= len(res_df):\n","              break\n","            continue   \n","\n","        leverage_list.append(config.lvrg_set.leverage)\n","          \n","        if config.ep_set.entry_type == \"MARKET\":\n","          ep_idx_list = [ep_j]\n","        else:\n","          ep_idx_list = [e_j]\n","\n","        out_idx_list = [out_j]\n","\n","        tp_list = []\n","        tp_idx_list = []\n","\n","        partial_tp_cnt = 0\n","        hedge_cnt = 1\n","\n","        h_ep, h_tp = None, None        \n","        h_i, h_j = None, None      \n","\n","        trade_done = 0\n","        cross_on = 0\n","        out = 0          \n","        config.out_set.retouch = 0\n","\n","\n","        if i == len(res_df) - 1: # if j start from i + 1 \n","          open_list.pop()\n","          zone_list.pop()\n","          side_list.pop()\n","\n","        for j in range(i + 1, len(res_df)):\n","\n","        # for j in range(i, len(res_df)):  \n","          \n","          if config.tp_set.static_tp:\n","            if not config.ep_set.static_ep and config.ep_set.entry_type == \"LIMIT\" and config.ep_set.tpout_onexec:\n","              tp_j = ep_j\n","            else:\n","              tp_j = initial_i\n","          else:\n","            tp_j = j\n","\n","          if config.out_set.static_out:\n","            if not config.ep_set.static_ep and config.ep_set.entry_type == \"LIMIT\" and config.ep_set.tpout_onexec:\n","              out_j = ep_j\n","            # else:           \n","            #   out_j = initial_i\n","          else:\n","            out_j = j   \n","\n","          # -------------- hedge only once -------------- #\n","          #             ÏùºÎã®, h_quantity Îäî Ï¥àÍ∏∞ ÏßÑÏûÖÍ≥º ÎèôÏùºÌïòÍ≤å ÏÑ§Ï†ï         #\n","          # if res_df['low'].iloc[j] <= res_df['minor_ST2_Down'].iloc[j] and hedge_cnt == 1:\n","          # if res_df['close'].iloc[j] <= res_df['minor_ST2_Down'].iloc[j] and hedge_cnt == 1:\n","          # if res_df['close'].iloc[j] <= res_df['minor_ST3_Down'].iloc[j] and hedge_cnt == 1:\n","\n","          #   h_ep = res_df['close'].iloc[j]\n","          #   hedge_cnt -= 1\n","          #   h_i = j\n","\n","          # -------------- sub ep -------------- #\n","          # if res_df['low'].iloc[j - 1] >= res_df['sar2'].iloc[j - 1] and res_df['low'].iloc[j] < res_df['sar2'].iloc[j]:\n","            \n","          #   sub_ep = res_df['sar2'].iloc[j - 1]\n","\n","          #   if sub_ep > ep_list[-1]:\n","          #     ep_list.append(sub_ep)\n","          #     ep_idx_list.append(j)\n","\n","\n","          # -------------- ultimate tp -------------- #\n","          if not config.tp_set.non_tp:\n","            #            1. by level          #\n","            if config.tp_set.tp_type == \"LIMIT\" or config.tp_set.tp_type == \"BOTH\":\n","              \n","\n","              for l_i, long_tp_ in enumerate(long_tps):\n","\n","                if res_df['high'].iloc[j] >= long_tp_.iloc[tp_j] and partial_tp_cnt == l_i:\n","                # if res_df['high'].iloc[j] >= long_tp.iloc[j]:\n","\n","                  if l_i == len(long_tps) - 1:\n","                    trade_done = 1\n","\n","                  partial_tp_cnt += 1\n","\n","                  #         dynamic tp        #\n","                  # if 0:\n","                  if long_tp_.iloc[j] != long_tp_.iloc[j - 1] and not config.tp_set.static_tp:\n","\n","                    #   tp limit Ïù¥ Î∂àÍ∞ÄÌïú Í≤ΩÏö∞ = open Ïù¥ Ïù¥ÎØ∏, tp Î•º ÎÑòÏùÄ Í≤ΩÏö∞ # \n","                    # if res_df['open'].iloc[j] >= long_tp_.iloc[initial_i]:\n","                    if res_df['open'].iloc[j] >= long_tp_.iloc[j]:\n","\n","                      # tp = long_tp_.iloc[initial_i]\n","                      tp = res_df['open'].iloc[j]\n","\n","                      if trade_done:\n","                        tp_state_list.append(\"d-long_open {}\".format(strat_version))\n","\n","                    \n","                    #   tp limit Ïù¥ Í∞ÄÎä•Ìïú Í≤ΩÏö∞ = open Ïù¥ ÏïÑÏßÅ, tp Î•º ÎÑòÏßÄ ÏïäÏùÄ Í≤ΩÏö∞ # \n","                    else:\n","                      \n","                      # tp = long_tp_.iloc[initial_i]\n","                      tp = long_tp_.iloc[j]\n","                      # tp = res_df['open'].iloc[j]\n","                      \n","                      if trade_done:\n","                        tp_state_list.append(\"d-long_tp {}\".format(strat_version))\n","\n","                  #         static tp         #\n","                  else:\n","\n","                    #   tp limit Ïù¥ Î∂àÍ∞ÄÌïú Í≤ΩÏö∞ = open Ïù¥ Ïù¥ÎØ∏, tp Î•º ÎÑòÏùÄ Í≤ΩÏö∞ # \n","                    #   non_inversion Ïùò Í≤ΩÏö∞, short_tp Í∞Ä Í∞ÄÎä•Ìï®   #\n","\n","                    if res_df['open'].iloc[j] >= long_tp_.iloc[tp_j]:\n","                    # if res_df['open'].iloc[j] >= long_tp_.iloc[initial_i]:\n","\n","                      # tp = long_tp_.iloc[initial_i]\n","                      tp = long_tp_.iloc[tp_j]\n","\n","                      # tp = res_df['open'].iloc[j]\n","\n","                      if trade_done:\n","                        tp_state_list.append(\"s-long_tp {}\".format(strat_version))\n","\n","                    \n","                    #   tp limit Ïù¥ Í∞ÄÎä•Ìïú Í≤ΩÏö∞ = open Ïù¥ ÏïÑÏßÅ, tp Î•º ÎÑòÏßÄ ÏïäÏùÄ Í≤ΩÏö∞ # \n","                    else:\n","                      \n","                      # tp = long_tp_.iloc[initial_i]\n","                      tp = long_tp_.iloc[tp_j]\n","\n","                      # tp = res_df['open'].iloc[j]\n","\n","                      if trade_done:\n","                        tp_state_list.append(\"s-long_tp {}\".format(strat_version))         \n","                  \n","                  tp_list.append(tp)\n","                  tp_idx_list.append(j)\n","                  fee += config.trader_set.limit_fee\n","\n","            #           2. by time        #\n","            if config.tp_set.tp_type == 'MARKET' or (config.tp_set.tp_type == \"BOTH\" and not trade_done):\n","\n","              market_tp = 0\n","\n","              # -------------- sar tp -------------- #\n","              # if (res_df['low'].iloc[j] <= res_df['sar2'].iloc[j]) & \\\n","              #   (res_df['low'].iloc[j - 1] > res_df['sar2'].iloc[j - 1]) & \\\n","              #   (res_df['low'].iloc[j - 2] > res_df['sar2'].iloc[j - 2]):\n","              \n","              #       inversion     #\n","              # if (res_df['high'].iloc[j] >= res_df['sar2'].iloc[j]) & \\\n","              #   (res_df['high'].iloc[j - 1] < res_df['sar2'].iloc[j - 1]) & \\\n","              #   (res_df['high'].iloc[j - 2] < res_df['sar2'].iloc[j - 2]):\n","\n","\n","              # ----------- st long ----------- #\n","              # if res_df['close'].iloc[j] >= res_df['long_tp'].iloc[tp_j]:\n","\n","              # -------------- sar pb tp -------------- #\n","              # if res_df['high'].iloc[j] >= res_df['long_tp'].iloc[initial_i]:\n","\n","              # -------------- st tp -------------- #\n","              # if res_df['close'].iloc[j] < res_df['middle_line'].iloc[j]:\n","\n","              # -------------- fisher tp -------------- #\n","              # if entry[j] == -1:\n","              \n","              # -------------- timestamp -------------- #\n","              # if np_timeidx[j] % config.loc_set.point.tf_entry == config.loc_set.point.tf_entry - 1:\n","\n","              # -------------- rsi -------------- #\n","              # if (res_df['rsi_%s' % config.loc_set.point.exp_itv].iloc[j - 1] <= rsi_upper) & \\\n","              #                  (res_df['rsi_%s' % config.loc_set.point.exp_itv].iloc[j] > rsi_upper):\n","              #   market_tp = 1\n","              \n","              # ---------------------------- early out phase ---------------------------- #\n","\n","              # #        rsi slight touch     #\n","              # elif allow_rsi_touch:\n","              #   if (np.max(res_df['rsi_%s' % config.loc_set.point.exp_itv].iloc[initial_i:j]) > rsi_upper - rsi_gap) & \\\n","              #     (res_df['rsi_%s' % config.loc_set.point.exp_itv].iloc[j] <= 50):\n","              #     market_tp = 1\n","\n","              #         tp early out        #\n","              # # if (np.max(res_df['high'].iloc[e_j:j]) > res_df['long_tp'].iloc[tp_j]) & \\\n","              # if (np.max(res_df['high'].iloc[e_j:j]) > res_df['h_long_rtc_1'].iloc[tp_j] + res_df['h_long_rtc_gap'].iloc[tp_j] * early_out_tpg) & \\\n","              #   (res_df['close'].iloc[j] <= res_df['long_ep'].iloc[ep_j]):\n","              #   market_tp = 1 \n","\n","              #         bb_upper early out        #\n","              if res_df['close'].iloc[j] > res_df['bb_upper_5m'].iloc[j] > res_df['close'].iloc[j - 1]:\n","                cross_on = 1\n","\n","              if cross_on == 1 and res_df['close'].iloc[j] < res_df['bb_lower_5m'].iloc[j] < res_df['close'].iloc[j - 1]:\n","                market_tp = 1\n","                              \n","              if market_tp:\n","\n","                tp = res_df['close'].iloc[j]\n","                # tp = res_df['open'].iloc[j]\n","                trade_done = 1\n","\n","                if trade_done:\n","                  tp_state_list.append(\"long close tp {}\".format(strat_version))\n","                  # print(\"early_out passed !\")\n","\n","                tp_list.append(tp) \n","                tp_idx_list.append(j)\n","                fee += config.trader_set.market_fee\n","\n","\n","\n","          # -------------- out -------------- #\n","          if not trade_done and config.out_set.use_out and j != len(res_df) - 1:              \n","\n","            # -------------- macd -------------- #\n","            # if res_df['macd_hist3'].iloc[j] < 0:\n","            # # if res_df['macd_hist3'].iloc[i] > 0 and res_df['macd_hist3'].iloc[j] < 0:\n","\n","            # -------------- st config.out_set.retouch -------------- #\n","            # out = 1 ÏÉÅÌÉúÎ©¥ ÎèôÏùº tick ÏóêÏÑú config.out_set.retouch Î•º Ï°∞ÏÇ¨Ìï† Í±∞Í∏∞ ÎïåÎ¨∏Ïóê, Î®ºÏ†Ä Í≤ÄÏÇ¨Ìï®\n","            # Í∑∏Î¶¨Í≥†, out Í∏∞Ï§ÄÏù¥ close Îùº Ïù¥Í≤å ÎßûÏùå \n","            # close Í∞Ä long_out Î≥¥Îã§ ÎÇ¥Î†§Í∞ÄÏûàÎäî ÏÉÅÌÉúÏùºÌÖåÎãà high Î•º Ï°∞ÏÇ¨ÌïòÎäîÍ≤å ÎßûÏùå           \n","            # if out and res_df['high'].iloc[j] >= long_out.iloc[out_j]:\n","            #   config.out_set.retouch = 1\n","\n","            \n","            # ------- ÏùºÏ†ïÏãúÍ∞Ñ Ïù¥ÏÉÅ, dynamic_out Ï†ÅÏö© ------ #\n","            try:\n","              if j - out_idx >= config.out_set.retouch_out_period:\n","                static_long_out = res_df['long_out_{}'.format(strat_version)].iloc[j]\n","            \n","            except Exception as e:\n","              pass\n","\n","              # ------- static out ------ #\n","            try:\n","              if out and res_df['high'].iloc[j] >= static_long_out:\n","                config.out_set.retouch = 1\n","            except Exception as e:\n","              pass\n","\n","              # ------- config.out_set.retouch out ------ #\n","            # if out and res_df['high'].iloc[j] >= long_out2.iloc[out_j]:\n","            #   config.out_set.retouch = 1\n","\n","\n","\n","            # -------------- st -------------- #\n","            # if res_df['close'].iloc[j] < res_df['middle_line'].iloc[j]:\n","            # if res_df['close'].iloc[j] < res_df['minor_ST3_Down'].iloc[j]:\n","            # if res_df['close'].iloc[j] < lower_middle.iloc[j]:\n","            # if res_df['close'].iloc[j] < res_df['minor_ST1_Down'].iloc[j]:\n","            if out == 0:\n","              if config.out_set.hl_out:\n","                if res_df['low'].iloc[j] <= res_df['long_out_{}'.format(strat_version)].iloc[out_j]: # check out only once\n","                  out = 1\n","\n","              else:\n","                if res_df['close'].iloc[j] <= res_df['long_out_{}'.format(strat_version)].iloc[out_j]: # check out only once\n","                  out = 1\n","\n","              # out_idx = j\n","              # static_long_out = long_out.iloc[out_j]\n","              # if config.out_set.second_out:\n","              # static_long_out = long_out.iloc[out_j] - res_df['st_gap'].iloc[out_j] * config.out_set.second_out_gap\n","\n","            # if out == 0 and res_df['low'].iloc[j] <= long_out.iloc[out_j]: # check out only once\n","            #   out = 1            \n","            \n","\n","\n","            # -------------- sma -------------- #\n","            # if res_df['close'].iloc[j] < res_df[sma].iloc[j]:\n","\n","            # -------------- sar -------------- #\n","            # if res_df['close'].iloc[j] < res_df['minor_ST3_Down'].iloc[j] \\\n","            #   or res_df['sar2'].iloc[j] >= res_df['low'].iloc[j]:\n","            # if res_df['close'].iloc[j] < long_out.iloc[initial_i]: # or \\\n","            #   #  res_df['close'].iloc[j] < res_df['sar2'].iloc[j]:\n","            #   #  res_df['sar2_uptrend'].iloc[j] == 0 or \\\n","            #   out = 1\n","            \n","            # if res_df['sar2_uptrend'].iloc[j] == 0:\n","\n","            #     if prev_sar is None:\n","            #       prev_sar = res_df['sar2'].iloc[j - 1]\n","                \n","            #     if res_df['close'].iloc[j] < prev_sar:\n","            #       out = 1\n","\n","            # else:\n","            #   if res_df['close'].iloc[j] < res_df['sar2'].iloc[j]:\n","            #     out = 1\n","\n","            # -------------- hl -------------- #\n","            # if res_df['close'].iloc[j] < long_out.iloc[tp_j]:\n","\n","            # -------------- stoch -------------- #\n","            # if res_df['stoch'].iloc[j - 2] <= res_df['stoch'].iloc[j - 1] and \\\n","            #   res_df['stoch'].iloc[j - 1] > res_df['stoch'].iloc[j] and \\\n","            #   res_df['stoch'].iloc[j - 1] >= stoch_upper:\n","            #   out = 1\n","\n","            # config.out_set.retouch 1 Í≤ΩÏö∞, config.out_set.retouch Ï°∞Í±¥ÎèÑ ÏûàÏñ¥ÏïºÌï®\n","            if out:\n","              if config.out_set.retouch:\n","                if config.out_set.retouch:\n","                  pass\n","                else:\n","                    continue\n","\n","              else:\n","                pass\n","\n","              if config.out_set.price_restoration:\n","                tp = res_df['long_out_{}'.format(strat_version)].iloc[out_j]\n","                if config.out_set.second_out:\n","                  tp = res_df['long_out2_{}'.format(strat_version)].iloc[out_j]\n","\n","                # if res_df['close'].iloc[j] < tp: # Ïù¥ Í≤ΩÏö∞Î•º protect ÌïòÎäîÍ±¥ insane ÏûÑ\n","                # # if res_df['high'].iloc[j] < tp: # --> config.out_set.hl_out ÏÇ¨Ïö©Ïãú Ïù¥ Ï°∞Í±¥ÏùÄ valid Ìï®\n","                #   tp = res_df['close'].iloc[j]\n","\n","              else:\n","\n","                if res_df['open'].iloc[j] <= res_df['long_out_{}'.format(strat_version)].iloc[out_j]:\n","                  tp = res_df['open'].iloc[j]\n","                else:\n","                  if config.out_set.hl_out:\n","                    tp = res_df['long_out_{}'.format(strat_version)].iloc[out_j]\n","                  else:\n","                    tp = res_df['close'].iloc[j]\n","\n","                # if not config.out_set.static_out:\n","                #   if res_df['open'].iloc[j] <= res_df['long_out'].iloc[out_j]: # dynamic close out Ïùò open Í≥†Î†§\n","                #     tp = res_df['open'].iloc[j]\n","                #   else:\n","                #     tp = res_df['close'].iloc[j]\n","\n","                # else:\n","                #   tp = res_df['close'].iloc[j]\n","\n","              if config.out_set.retouch: # out Í≥º open ÎπÑÍµê\n","                if config.out_set.second_out:  # long_out = sell\n","                # config.out_set.second_out ÏùÄ Í∏∞Î≥∏Ï†ÅÏúºÎ°ú limit Ïù¥Îùº Ïù¥ Íµ¨Ï°∞Í∞Ä Í∞ÄÎä•Ìï®\n","                  if res_df['open'].iloc[j] >= res_df['long_out2_{}'.format(strat_version)].iloc[out_j]: # dynamic_out Ïùº Í≤ΩÏö∞ Í≥†Î†§Ìï¥ÏïºÌï®\n","                    tp = res_df['open'].iloc[j]\n","                else:\n","                  if res_df['open'].iloc[j] >= res_df['long_out_{}'.format(strat_version)].iloc[out_j]: # dynamic_out Ïùº Í≤ΩÏö∞ Í≥†Î†§Ìï¥ÏïºÌï®\n","                    tp = res_df['open'].iloc[j]\n","\n","                try:\n","                  if res_df['open'].iloc[j] >= static_long_out:\n","                    tp = res_df['open'].iloc[j]\n","                  else:\n","                    tp = static_long_out\n","                except Exception as e:\n","                  pass\n","\n","              # tp = res_df['open'].iloc[j]\n","              tp_state_list.append(\"long close_out {}\".format(strat_version))\n","              trade_done = 1\n","\n","              tp_list.append(tp)\n","              tp_idx_list.append(j)\n","              fee += config.trader_set.market_fee\n","\n","          \n","          # -------------- non tp -------------- #\n","          if j == len(res_df) - 1:\n","            trade_done = 1\n","            tp = res_df['close'].iloc[j]\n","            tp_list.append(tp) \n","            tp_idx_list.append(j)\n","            fee += config.trader_set.market_fee\n","\n","\n","          if trade_done:\n","\n","            # --------------- tp_ratio info --------------- #\n","            try:\n","              if config.out_set.use_out:\n","                done_tp = res_df['long_tp_{}'.format(strat_version)].iloc[tp_j]\n","                done_out = res_df['long_out_{}'.format(strat_version)].iloc[out_j]\n","\n","                if done_out >= ep_list[0]: # loss >= 1\n","                  tp_ratio = np.nan\n","                  dr = np.nan\n","                  # print(\"loss >= 1\")\n","                else:\n","                  tp_ratio = ((done_tp - ep_list[0] - tp_fee * ep_list[0]) / (ep_list[0] - done_out + out_fee * ep_list[0]))                \n","                  dr = ((done_tp - ep_list[0]) / (ep_list[0] - done_out))          \n","\n","              else:      \n","                dr = np.nan\n","                tp_ratio = np.nan\n","\n","            except Exception as e:\n","              print(\"error in tr phase :\", e)\n","              dr = np.nan              \n","              tp_ratio = np.nan\n","            \n","            tp_ratio_list.append(tp_ratio)\n","            long_tp_ratio_list.append(tp_ratio)\n","            dr_list.append(dr)\n","            long_dr_list.append(dr)\n","\n","\n","            qty_list = []\n","            temp_pr_list = []\n","            r_qty = 1\n","            for q_i in range(len(tp_list) - 1, -1, -1):\n","\n","              if len(tp_list) == 1:\n","                temp_qty = r_qty\n","              else:\n","                if q_i !=0:\n","                  temp_qty = r_qty / config.tp_set.partial_qty_divider\n","                else:\n","                  temp_qty = r_qty\n","\n","              # temp_pr = (tp_list[q_i] / ep_list[0] - fee - 1) * temp_qty\n","              temp_pr = (tp_list[q_i] / ep_list[0] - fee - 1) * temp_qty * config.lvrg_set.leverage\n","              r_qty -= temp_qty\n","\n","              temp_pr_list.append(temp_pr)\n","\n","            temp_pr = sum(temp_pr_list) + 1\n","\n","            # -------------------- sub ep -> pr calc -------------------- #\n","            if len(ep_list) > 1:\n","            \n","              p_ep_pr = []\n","              for sub_ep_ in ep_list:\n","                sub_pr = (tp / sub_ep_ - fee - 1) * config.lvrg_set.leverage\n","                p_ep_pr.append(sub_pr)\n","\n","              temp_pr = sum(p_ep_pr) + 1\n","\n","              print(\"temp_pr :\", temp_pr)\n","\n","            # ------------ hedge + non_hedge pr summation ------------ #\n","            #         hedge pr direction is opposite to the origin       #\n","            hedge_pr = 1\n","            if hedge_cnt == 0:\n","\n","              #       hedge tp      #\n","              h_tp = res_df['close'].iloc[j]\n","              hedge_pr = (h_ep / h_tp - fee - 1) * config.lvrg_set.leverage  # hedge short\n","              temp_pr += hedge_pr\n","              h_j = j\n","\n","\n","            # ll = min(res_df['low'].iloc[i:j + 1])\n","            ll = min(res_df['low'].iloc[i:j])   # pos. Ï†ïÎ¶¨ÌïòÍ∏∞ Î∞îÎ°ú ÏßÅÏ†ÑÍπåÏßÄ\n","            long_liq = (ll / ep_list[0] - fee - 1) * config.lvrg_set.leverage + 1\n","\n","            if j != len(res_df) - 1:\n","\n","              ep_tp_list.append((ep_list, tp_list))\n","              # trade_list.append((ep_idx_list, tp_idx_list))\n","              trade_list.append((ep_idx_list, out_idx_list, tp_idx_list))\n","\n","              liqd_list.append(long_liq)\n","              long_liqd_list.append(long_liq)\n","\n","              h_ep_tp_list.append((h_ep, h_tp))        \n","              h_trade_list.append([initial_i, h_i, h_j])                \n","\n","              pr_list.append(temp_pr)\n","              fee_list.append(fee)\n","              long_list.append(temp_pr)\n","              long_fee_list.append(fee)\n","\n","              h_pr_list.append(hedge_pr)\n","              h_long_list.append(hedge_pr)                    \n","\n","              i = j\n","              break\n","            \n","            else:\n","\n","              # ep_tp_list.append((ep_list, tp_list))\n","              # trade_list.append((ep_idx_list, tp_idx_list))\n","              \n","              # pr_list Î•º ÎÑ£ÏßÄ ÏïäÏùÑÍ±∞ÎãàÍπå, open_list ÏóêÏÑú Ìï¥Îãπ idx Îäî pop\n","              open_list.pop()\n","              zone_list.pop()\n","              side_list.pop()\n","          \n","              #         tp ÎØ∏Ï≤¥Í≤∞ survey        #\n","              nontp_liqd_list.append(long_liq)\n","              nontp_long_liqd_list.append(long_liq)\n","              nontp_long_indexs.append(i)\n","              nontp_long_ep_list.append(ep_list[0])\n","              \n","              nontp_long_pr = (tp / ep_list[0] - fee - 1) * config.lvrg_set.leverage + 1\n","              nontp_pr_list.append(nontp_long_pr)\n","              nontp_long_pr_list.append(nontp_long_pr)\n","\n","            if len(open_list) > len(trade_list):\n","              print('debug from index :', i)\n","              print(len(open_list), len(trade_list))\n","              print(\"len(res_df) :\", len(res_df))\n","              assert len(open_list) == len(trade_list), 'stopped'\n","      \n","      i += 1  # if entry starts with prev trade's close, do not use it ! \n","      # print(\"i in end :\", i)\n","      if i >= len(res_df):\n","        break\n","\n","\n","\n","    # -------------------- result analysis -------------------- #\n","    # try:\n","    print(\"elapsed_time :\", time.time() - start_0)\n","\n","    plt.style.use('default')\n","    # mpl.rcParams.update(mpl.rcParamsDefault)\n","\n","    plt.figure(figsize=(16, 12))\n","    # plt.figure(figsize=(12, 8))\n","    # plt.figure(figsize=(10, 6))\n","    plt.suptitle(key)\n","\n","    try:\n","      np_pr = np.array(pr_list)\n","\n","      sr = sharpe_ratio(np_pr)\n","\n","      dpf = (len(res_df) / 1440) / len(np_pr)\n","\n","      np_zone_list = np.array(zone_list)\n","      # np_pr_list = np.array(pr_list)\n","      np_side_list = np.array(side_list)\n","\n","      t_w = np.sum(np.where((np_zone_list == 't') & (np_pr > 1), 1, 0))\n","      c_w = np.sum(np.where((np_zone_list == 'c') & (np_pr > 1), 1, 0))\n","      t_ls = np.sum(np.where((np_zone_list == 't') & (np_pr < 1), 1, 0))\n","      c_ls = np.sum(np.where((np_zone_list == 'c') & (np_pr < 1), 1, 0))\n","\n","      # np_pr = (np.array(pr_list) - 1) * config.lvrg_set.leverage + 1\n","\n","      # ----- fake_pr ----- #\n","      # np_pr = np.where(np_pr > 1, 1 + (np_pr - 1) * 3, np_pr)\n","\n","      total_pr = np.cumprod(np_pr)\n","\n","      for_sum_pr = np_pr - 1\n","      for_sum_pr[0] = 1\n","      sum_pr = np.cumsum(for_sum_pr)\n","      sum_pr = np.where(sum_pr < 0, 0, sum_pr)\n","\n","      wr = len(np_pr[np_pr > 1]) / len(np_pr[np_pr != 1])\n","\n","      np_tp_ratio_list = np.array(tp_ratio_list) # Ï¥àÍ∏∞Ïóê tr ÏùÑ Ï†ïÌïòÎäîÍ±∞Îùº mean ÏÇ¨Ïö©ÌïòÎäîÍ≤å ÎßûÏùå\n","      mean_tr = np.mean(np_tp_ratio_list[np.isnan(np_tp_ratio_list) == 0])\n","\n","      np_dr_list = np.array(dr_list) # Ï¥àÍ∏∞Ïóê tr ÏùÑ Ï†ïÌïòÎäîÍ±∞Îùº mean ÏÇ¨Ïö©ÌïòÎäîÍ≤å ÎßûÏùå\n","      mean_dr = np.mean(np_dr_list[np.isnan(np_dr_list) == 0])\n","\n","      # pr_gap = (np_pr - 1) / config.lvrg_set.leverage + fee\n","      # tp_gap_ = pr_gap[pr_gap > 0]\n","      # # mean_config.tr_set.tp_gap = np.mean(pr_gap[pr_gap > 0])\n","      # mean_ls_gap = np.mean(pr_gap[pr_gap < 0])\n","\n","      # ---- profit fee ratio ---- #\n","      # mean_pgfr = np.mean((tp_gap_ - fee) / abs(tp_gap_ + fee))\n","\n","      # plt.subplot(121)\n","      plt.subplot(231)\n","      plt.plot(total_pr)\n","      plt.plot(sum_pr, color='gold')\n","      if len(nontp_liqd_list) != 0:\n","        plt.title(\"wr : %.3f\\n len(td) : %s\\n dpf : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n sum_pr : %.3f\\n sr : %.3f\"\n","                  % (wr, len(np_pr[np_pr != 1]), dpf, np.min(np_pr), total_pr[-1], sum_pr[-1], sr) + \\\n","                  \"\\n leverage %s\\nliqd : %.3f\\nmean_tr : %.3f\\n mean_dr : %.3f\\n nontp_liqd_cnt : %s\\nnontp_liqd : %.3f\\nontp_liqd_pr : %.3f\\n tw cw tls cls : %s %s %s %s\" \n","                  % (config.lvrg_set.leverage, min(liqd_list), mean_tr, mean_dr, len(nontp_liqd_list), \n","                     min(nontp_liqd_list), min(nontp_pr_list), t_w, c_w, t_ls, c_ls),\n","                  position=title_position)\n","      else:\n","        plt.title(\"wr : %.3f\\n len(td) : %s\\n dpf : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n sum_pr : %.3f\\n sr : %.3f\" \n","                  % (wr, len(np_pr[np_pr != 1]), dpf, np.min(np_pr), total_pr[-1], sum_pr[-1], sr) + \\\n","                  \"\\n leverage %s\\nliqd : %.3f\\nmean_tr : %.3f\\n mean_dr : %.3f\\n nontp_liqd_cnt : %s\\n tw cw tls cls : %s %s %s %s\"\n","                  % (config.lvrg_set.leverage, min(liqd_list), mean_tr, mean_dr, len(nontp_liqd_list), t_w, c_w, t_ls, c_ls), \n","                  position=title_position)\n","      # plt.show()\n","\n","      survey_df.iloc[survey_i] = wr, len(np_pr[np_pr != 1]), dpf, np.min(np_pr), \\\n","        total_pr[-1], sum_pr[-1], min(liqd_list), mean_tr, mean_dr, sr \n","\n","      print('supblot231 passed')\n","\n","    except Exception as e:\n","      print(\"error in 231 :\", e)\n","\n","\n","    try:\n","      #         short only      #\n","      short_np_pr = np.array(short_list)\n","\n","      short_sr = sharpe_ratio(short_np_pr)\n","\n","      short_dpf = (len(res_df) / 1440) / len(short_np_pr)\n","\n","      total_short_pr = np.cumprod(short_np_pr)\n","      \n","      short_for_sum_pr = short_np_pr - 1\n","      short_for_sum_pr[0] = 1\n","      short_sum_pr = np.cumsum(short_for_sum_pr)\n","      short_sum_pr = np.where(short_sum_pr < 0, 0, short_sum_pr)\n","\n","      short_wr = len(short_np_pr[short_np_pr > 1]) / len(short_np_pr[short_np_pr != 1])\n","      \n","      t_w_s = np.sum(np.where((np_zone_list == 't') & (np_pr > 1) & (np_side_list == 's'), 1, 0))\n","      c_w_s = np.sum(np.where((np_zone_list == 'c') & (np_pr > 1) & (np_side_list == 's'), 1, 0))\n","      t_ls_s = np.sum(np.where((np_zone_list == 't') & (np_pr < 1) & (np_side_list == 's'), 1, 0))\n","      c_ls_s = np.sum(np.where((np_zone_list == 'c') & (np_pr < 1) & (np_side_list == 's'), 1, 0))\n","      # short_cumprod_profit = np.cumprod(short_np_pr[short_np_pr > 1])[-1]\n","      # short_cumprod_loss = np.cumprod(short_np_pr[short_np_pr < 1])[-1]\n","      # short_pr_tr = short_cumprod_profit * short_cumprod_loss\n","\n","      np_short_tp_ratio_list = np.array(short_tp_ratio_list)\n","      mean_short_tr = np.mean(np_short_tp_ratio_list[np.isnan(np_short_tp_ratio_list) == 0])\n","      \n","      np_short_dr_list = np.array(short_dr_list)\n","      mean_short_dr = np.mean(np_short_dr_list[np.isnan(np_short_dr_list) == 0])\n","      \n","      # short_pr_gap = (short_np_pr - 1) / config.lvrg_set.leverage + fee\n","      # short_tp_gap = short_pr_gap[short_pr_gap > 0]\n","      # # mean_short_tp_gap = np.mean(short_pr_gap[short_pr_gap > 0])\n","      # # mean_short_ls_gap = np.mean(short_pr_gap[short_pr_gap < 0])\n","\n","      # mean_short_pgfr = np.mean((short_tp_gap - fee) / abs(short_tp_gap + fee))\n","      \n","      plt.subplot(232)\n","      plt.plot(total_short_pr)\n","      plt.plot(short_sum_pr, color='gold')\n","      if len(nontp_short_liqd_list) != 0:   \n","\n","        max_nontp_short_term = len(res_df) - nontp_short_indexs[0]\n","        \n","        plt.title(\"wr : %.3f\\nlen(short_td) : %s\\n dpf : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n sum_pr : %.3f\\n sr : %.3f\"\n","                  % (short_wr, len(short_np_pr[short_np_pr != 1]), short_dpf, np.min(short_np_pr), total_short_pr[-1], short_sum_pr[-1], short_sr) + \\\n","                  \"\\n leverage %s\\nliqd : %.3f\\nmean_tr : %.3f\\n mean_dr : %.3f\\n nontp_short_liqd_cnt : %s\\nnontp_short_liqd : %.3f\\nontp_short_liqd_pr : %.3f\\nmax_nontp_short_term : %s\\n tw cw tls cls : %s %s %s %s\"\n","                  % (config.lvrg_set.leverage, min(short_liqd_list), mean_short_tr, mean_short_dr, \n","                     len(nontp_short_liqd_list), min(nontp_short_liqd_list), min(nontp_short_pr_list), max_nontp_short_term, t_w_s, c_w_s, t_ls_s, c_ls_s),\n","                  position=title_position)\n","      else:\n","        plt.title(\"wr : %.3f\\nlen(short_td) : %s\\n dpf : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n sum_pr : %.3f\\n sr : %.3f\"\n","                  % (short_wr, len(short_np_pr[short_np_pr != 1]), short_dpf, np.min(short_np_pr), total_short_pr[-1], short_sum_pr[-1], short_sr) + \\\n","                  \"\\n leverage %s\\nliqd : %.3f\\nmean_tr : %.3f\\n mean_dr : %.3f\\n nontp_short_liqd_cnt : %s\\n tw cw tls cls : %s %s %s %s\" \n","                  % (config.lvrg_set.leverage, min(short_liqd_list), mean_short_tr, mean_short_dr, len(nontp_short_liqd_list), t_w_s, c_w_s, t_ls_s, c_ls_s),\n","                  position=title_position)\n","\n","      short_survey_df.iloc[survey_i] = short_wr, len(short_np_pr[short_np_pr != 1]), short_dpf, np.min(short_np_pr), \\\n","          total_short_pr[-1], short_sum_pr[-1], min(short_liqd_list), mean_short_tr, mean_short_dr, short_sr     \n","\n","      print('supblot232 passed')\n","    \n","    except Exception as e:\n","      print(\"error in 232 :\", e)\n","\n","    try:\n","      #         long only      #\n","      long_np_pr = np.array(long_list)\n","      # long_np_pr = (np.array(long_list) - 1) * config.lvrg_set.leverage + 1\n","\n","      long_sr = sharpe_ratio(long_np_pr)\n","\n","      long_dpf = (len(res_df) / 1440) / len(long_np_pr)\n","\n","      total_long_pr = np.cumprod(long_np_pr)\n","      \n","      long_for_sum_pr = long_np_pr - 1\n","      long_for_sum_pr[0] = 1\n","      long_sum_pr = np.cumsum(long_for_sum_pr)\n","      long_sum_pr = np.where(long_sum_pr < 0, 0, long_sum_pr)\n","\n","      long_wr = len(long_np_pr[long_np_pr > 1]) / len(long_np_pr[long_np_pr != 1])\n","\n","      t_w_l = np.sum(np.where((np_zone_list == 't') & (np_pr > 1) & (np_side_list == 'l'), 1, 0))\n","      c_w_l = np.sum(np.where((np_zone_list == 'c') & (np_pr > 1) & (np_side_list == 'l'), 1, 0))\n","      t_ls_l = np.sum(np.where((np_zone_list == 't') & (np_pr < 1) & (np_side_list == 'l'), 1, 0))\n","      c_ls_l = np.sum(np.where((np_zone_list == 'c') & (np_pr < 1) & (np_side_list == 'l'), 1, 0))\n","      # long_cumprod_profit = np.cumprod(long_np_pr[long_np_pr > 1])[-1]\n","      # long_cumprod_loss = np.cumprod(long_np_pr[long_np_pr < 1])[-1]\n","      # long_pr_tr = long_cumprod_profit * long_cumprod_loss\n","\n","      np_long_tp_ratio_list = np.array(long_tp_ratio_list)\n","      mean_long_tr = np.mean(np_long_tp_ratio_list[np.isnan(np_long_tp_ratio_list) == 0])\n","      \n","      np_long_dr_list = np.array(long_dr_list)\n","      mean_long_dr = np.mean(np_long_dr_list[np.isnan(np_long_dr_list) == 0])\n","\n","      # long_pr_gap = (long_np_pr - 1) / config.lvrg_set.leverage + fee\n","      # long_tp_gap = long_pr_gap[long_pr_gap > 0]\n","      # # mean_long_tp_gap = np.mean(long_pr_gap[long_pr_gap > 0])\n","      # # mean_long_ls_gap = np.mean(long_pr_gap[long_pr_gap < 0])\n","\n","      # mean_long_pgfr = np.mean((long_tp_gap - fee) / abs(long_tp_gap + fee))\n","\n","      plt.subplot(233)\n","      plt.plot(total_long_pr)\n","      plt.plot(long_sum_pr, color='gold')\n","      if len(nontp_long_liqd_list) != 0:\n","\n","        max_nontp_long_term = len(res_df) - nontp_long_indexs[0]\n","\n","        plt.title(\"wr : %.3f\\nlen(long_td) : %s\\n dpf : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n sum_pr : %.3f\\n sr : %.3f\"\n","                  % (long_wr, len(long_np_pr[long_np_pr != 1]), long_dpf, np.min(long_np_pr), total_long_pr[-1], long_sum_pr[-1], long_sr) + \\\n","                  \"\\n leverage %s\\nliqd : %.3f\\nmean_tr : %.3f\\n mean_dr : %.3f\\n nontp_long_liqd_cnt : %s\\nnontp_long_liqd : %.3f\\nontp_long_liqd_pr : %.3f\\nmax_nontp_long_term : %s\\n tw cw tls cls : %s %s %s %s\"\n","                  % (config.lvrg_set.leverage, min(long_liqd_list), mean_long_tr, mean_long_dr, \n","                     len(nontp_long_liqd_list), min(nontp_long_liqd_list), min(nontp_long_pr_list), max_nontp_long_term, t_w_l, c_w_l, t_ls_l, c_ls_l),\n","                  position=title_position)\n","      else:\n","        plt.title(\"wr : %.3f\\nlen(long_td) : %s\\n dpf : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n sum_pr : %.3f\\n sr : %.3f\"\n","                  % (long_wr, len(long_np_pr[long_np_pr != 1]), long_dpf, np.min(long_np_pr), total_long_pr[-1], long_sum_pr[-1], long_sr) + \\\n","                  \"\\n leverage %s\\nliqd : %.3f\\nmean_tr : %.3f\\n mean_dr : %.3f\\n nontp_long_liqd_cnt : %s\\n tw cw tls cls : %s %s %s %s\" \n","                  % (config.lvrg_set.leverage, min(long_liqd_list), mean_long_tr, mean_long_dr, len(nontp_long_liqd_list), t_w_l, c_w_l, t_ls_l, c_ls_l),\n","                  position=title_position)\n","\n","      long_survey_df.iloc[survey_i] = long_wr, len(long_np_pr[long_np_pr != 1]), long_dpf, np.min(long_np_pr), \\\n","        total_long_pr[-1], long_sum_pr[-1], min(long_liqd_list), mean_long_tr, mean_long_dr, long_sr     \n","\n","      print('supblot233 passed')\n","\n","    except Exception as e:\n","      print(\"error in 233 :\", e)\n","\n","\n","    try:\n","      #     reversion adjustment      #\n","      # rev_np_pr = 1 / (np.array(pr_list) + fee) - fee\n","      rev_fee = tp_fee + out_fee - np.array(fee_list)\n","      rev_np_pr = (1 / ((np.array(pr_list) - 1) / config.lvrg_set.leverage + np.array(fee_list) + 1) - rev_fee - 1) * config.lvrg_set.leverage + 1\n","      # rev_np_pr = (1 / (np.array(pr_list) + fee) - fee - 1) * config.lvrg_set.leverage + 1\n","          \n","      rev_sr = sharpe_ratio(rev_np_pr)\n","\n","      rev_total_pr = np.cumprod(rev_np_pr)\n","      rev_wr = len(rev_np_pr[rev_np_pr > 1]) / len(rev_np_pr[rev_np_pr != 1])\n","\n","      rev_total_for_sum_pr = rev_np_pr - 1\n","      rev_total_for_sum_pr[0] = 1\n","      rev_total_sum_pr = np.cumsum(rev_total_for_sum_pr)\n","      rev_total_sum_pr = np.where(rev_total_sum_pr < 0, 0, rev_total_sum_pr)\n","\n","      # plt.subplot(122)\n","      plt.subplot(234)\n","      plt.plot(rev_total_pr)\n","      plt.plot(rev_total_sum_pr, color='gold')\n","\n","      plt.title(\"wr : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n sum_pr : %.3f\\n sr : %.3f\" \n","                % (rev_wr, np.min(rev_np_pr), rev_total_pr[-1], rev_total_sum_pr[-1], rev_sr))\n","      \n","      rev_survey_df.iloc[survey_i] = rev_wr, np.min(rev_np_pr), rev_total_pr[-1], rev_total_sum_pr[-1], rev_sr\n","\n","    except Exception as e:\n","      print(\"error in 234 :\", e)\n","\n","    try:\n","      #         short       #\n","      # rev_short_np_pr = 1 / (np.array(short_list) + fee) - fee\n","      rev_short_fee = tp_fee + out_fee - np.array(short_fee_list)\n","      rev_short_np_pr = (1 / ((np.array(short_list) - 1) / config.lvrg_set.leverage + np.array(short_fee_list) + 1) - rev_short_fee - 1) * config.lvrg_set.leverage + 1\n","      # rev_short_np_pr = (1 / (np.array(short_list) + fee) - fee - 1) * config.lvrg_set.leverage + 1\n","      \n","      rev_short_sr = sharpe_ratio(rev_short_np_pr)\n","          \n","      rev_total_short_pr = np.cumprod(rev_short_np_pr)\n","      rev_short_wr = len(rev_short_np_pr[rev_short_np_pr > 1]) / len(rev_short_np_pr[rev_short_np_pr != 1])\n","\n","      rev_short_for_sum_pr = rev_short_np_pr - 1\n","      rev_short_for_sum_pr[0] = 1\n","      rev_short_sum_pr = np.cumsum(rev_short_for_sum_pr)\n","      rev_short_sum_pr = np.where(rev_short_sum_pr < 0, 0, rev_short_sum_pr)\n","\n","      # plt.subplot(122)\n","      plt.subplot(235)\n","      plt.plot(rev_total_short_pr)\n","      plt.plot(rev_short_sum_pr, color='gold')\n","\n","      plt.title(\"wr : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n sum_pr : %.3f\\n sr : %.3f\" \n","                % (rev_short_wr, np.min(rev_short_np_pr), rev_total_short_pr[-1], rev_short_sum_pr[-1], rev_short_sr))\n","\n","      rev_short_survey_df.iloc[survey_i] = rev_short_wr, np.min(rev_short_np_pr), rev_total_short_pr[-1], rev_short_sum_pr[-1], rev_short_sr\n","\n","    except Exception as e:\n","      print(\"error in 235 :\", e)\n","\n","    try:\n","      #         long       #\n","      # rev_long_np_pr = 1 / (np.array(long_list) + fee) - fee\n","      rev_long_fee = tp_fee + out_fee - np.array(long_fee_list)\n","      rev_long_np_pr = (1 / ((np.array(long_list) - 1) / config.lvrg_set.leverage + np.array(long_fee_list) + 1) - rev_long_fee - 1) * config.lvrg_set.leverage + 1\n","          \n","      rev_long_sr = sharpe_ratio(rev_long_np_pr)\n","\n","      rev_total_long_pr = np.cumprod(rev_long_np_pr)\n","      rev_long_wr = len(rev_long_np_pr[rev_long_np_pr > 1]) / len(rev_long_np_pr[rev_long_np_pr != 1])\n","\n","      rev_long_for_sum_pr = rev_long_np_pr - 1\n","      rev_long_for_sum_pr[0] = 1\n","      rev_long_sum_pr = np.cumsum(rev_long_for_sum_pr)\n","      rev_long_sum_pr = np.where(rev_long_sum_pr < 0, 0, rev_long_sum_pr)\n","\n","      # plt.subplot(122)\n","      plt.subplot(236)\n","      plt.plot(rev_total_long_pr)\n","      plt.plot(rev_long_sum_pr, color='gold')\n","\n","      plt.title(\"wr : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n sum_pr : %.3f\\n sr : %.3f\" \n","                % (rev_long_wr, np.min(rev_long_np_pr), rev_total_long_pr[-1], rev_long_sum_pr[-1], rev_long_sr))\n","      \n","      rev_long_survey_df.iloc[survey_i] = rev_long_wr, np.min(rev_long_np_pr), rev_total_long_pr[-1], rev_long_sum_pr[-1], rev_long_sr\n","      \n","    except Exception as e:\n","      print(\"error in 236 :\", e)\n","\n","    if show_plot:\n","      plt.show()\n","    \n","\n","    try:\n","\n","      h_np_pr = np.array(h_pr_list)\n","      # h_rev_np_pr = 1 / (np.array(h_pr_list) + fee) - fee    # define, for plot_check below cell\n","      h_rev_np_pr = (1 / ((np.array(h_pr_list) - 1) / config.lvrg_set.leverage + np.array(fee_list) + 1) - np.array(fee_list) - 1) * config.lvrg_set.leverage + 1\n","\n","      # --------------------- h pr plot --------------------- #\n","      if len(h_np_pr[h_np_pr != 1]) != 0:\n","\n","        plt.figure(figsize=(16, 12))\n","        plt.suptitle(key + \" hedge\")\n","\n","        h_total_pr = np.cumprod(h_np_pr)\n","        h_wr = len(h_np_pr[h_np_pr > 1]) / len(h_np_pr[h_np_pr != 1])\n","\n","        # plt.subplot(121)\n","        plt.subplot(231)\n","        plt.plot(h_total_pr)\n","        plt.title(\"wr : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n leverage %s\" % (h_wr, np.min(h_np_pr), h_total_pr[-1], config.lvrg_set.leverage))\n","        # plt.show()\n","\n","        #         short only      #\n","        h_short_np_pr = np.array(h_short_list)\n","\n","        h_total_short_pr = np.cumprod(h_short_np_pr)\n","        h_short_wr = len(h_short_np_pr[h_short_np_pr > 1]) / len(h_short_np_pr[h_short_np_pr != 1])\n","        \n","        plt.subplot(232)\n","        plt.plot(h_total_short_pr)\n","        plt.title(\"wr : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n leverage %s\" % (h_short_wr, np.min(h_short_np_pr), h_total_short_pr[-1], config.lvrg_set.leverage))\n","\n","        #         long only      #\n","        h_long_np_pr = np.array(h_long_list)\n","\n","        h_total_long_pr = np.cumprod(h_long_np_pr)\n","        h_long_wr = len(h_long_np_pr[h_long_np_pr > 1]) / len(h_long_np_pr[h_long_np_pr != 1])\n","        \n","        plt.subplot(233)\n","        plt.plot(h_total_long_pr)\n","        plt.title(\"wr : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n leverage %s\" % (h_long_wr, np.min(h_long_np_pr), h_total_long_pr[-1], config.lvrg_set.leverage))\n","\n","\n","        #     reversion adjustment      #\n","            \n","        h_rev_total_pr = np.cumprod(h_rev_np_pr)\n","        h_rev_wr = len(h_rev_np_pr[h_rev_np_pr > 1]) / len(h_rev_np_pr[h_rev_np_pr != 1])\n","\n","        # plt.subplot(122)\n","        plt.subplot(234)\n","        plt.plot(h_rev_total_pr)\n","        plt.title(\"wr : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n leverage %s\" % (h_rev_wr, np.min(h_rev_np_pr), h_rev_total_pr[-1], config.lvrg_set.leverage))\n","\n","        #         short       #\n","        # h_rev_short_np_pr = 1 / (np.array(h_short_list) + fee) - fee\n","        h_rev_short_np_pr =  (1 / ((np.array(h_short_list) - 1) / config.lvrg_set.leverage + np.array(short_fee_list) + 1) - np.array(short_fee_list) - 1) * config.lvrg_set.leverage + 1\n","           \n","        h_rev_total_short_pr = np.cumprod(h_rev_short_np_pr)\n","        h_rev_short_wr = len(h_rev_short_np_pr[h_rev_short_np_pr > 1]) / len(h_rev_short_np_pr[h_rev_short_np_pr != 1])\n","\n","        # plt.subplot(122)\n","        plt.subplot(235)\n","        plt.plot(h_rev_total_short_pr)\n","        plt.title(\"wr : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n leverage %s\" % (h_rev_short_wr, np.min(h_rev_short_np_pr), h_rev_total_short_pr[-1], config.lvrg_set.leverage))\n","\n","        #         long       #\n","        # h_rev_long_np_pr = 1 / (np.array(h_long_list) + fee) - fee\n","        h_rev_long_np_pr =  (1 / ((np.array(h_long_list) - 1) / config.lvrg_set.leverage + np.array(long_fee_list) + 1) - np.array(long_fee_list) - 1) * config.lvrg_set.leverage + 1\n","            \n","        h_rev_total_long_pr = np.cumprod(h_rev_long_np_pr)\n","        h_rev_long_wr = len(h_rev_long_np_pr[h_rev_long_np_pr > 1]) / len(h_rev_long_np_pr[h_rev_long_np_pr != 1])\n","\n","        # plt.subplot(122)\n","        plt.subplot(236)\n","        plt.plot(h_rev_total_long_pr)\n","        plt.title(\"wr : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n leverage %s\" % (h_rev_long_wr, np.min(h_rev_long_np_pr), h_rev_total_long_pr[-1], config.lvrg_set.leverage))\n","        \n","        if show_plot:\n","          plt.show()\n","          \n","    except Exception as e:\n","      print('error in h_pr plot :', e)   \n","    \n","    print()\n","\n","\n","  # break # pair loop"]},{"cell_type":"markdown","metadata":{"id":"MteLY9PS2ZeK"},"source":["##### check statistical significance"]},{"cell_type":"code","execution_count":13,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":940},"executionInfo":{"elapsed":5187,"status":"ok","timestamp":1640166009385,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"NzbWuwSw2jaj","outputId":"8e15d7ac-d425-497d-d276-ceee47ce5d6e"},"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 3000x1000 with 30 Axes>"]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\n","\n"]},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 3000x1000 with 15 Axes>"]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\n","\n"]}],"source":["# print(survey_df)\n","\n","plt.style.use('dark_background')\n","\n","title_name_list = [[\"total\", \"short\", \"long\"], [\"rev_total\", \"rev_short\", \"rev_long\"]]\n","survey_dfs_list = [[survey_df, short_survey_df, long_survey_df], [rev_survey_df, rev_short_survey_df, rev_long_survey_df]]\n","# title_name = \n","# survey_df_list = \n","\n","space_ = \" \" * 140\n","\n","for d_idx, (title_name, survey_dfs) in enumerate(zip(title_name_list, survey_dfs_list)):\n","\n","  fig = plt.figure(figsize=(30, 10))\n","\n","  gs = gridspec.GridSpec(nrows=1, # row Î™á Í∞ú \n","                          ncols=3, # col Î™á Í∞ú \n","                          # height_ratios=[1, 1, 1]\n","                        )\n","\n","  # gs = fig.add_gridspec(1, 3, wspace=0, hspace=0)\n","\n","  # nrows, ncols, h_r = 3, 3, [1, 1, 1]\n","  nrows, ncols, h_r = 3, 4, [1, 1, 1]\n","  # nrows, ncols, h_r = 4, 3, [1, 1, 1, 1]\n","\n","  # if d_idx == 0:\n","  # else:\n","    # nrows, ncols, h_r = 2, 2, [1, 1]\n","\n","  for gs_idx, (title, s_df) in enumerate(zip(title_name, survey_dfs)):  \n","\n","\n","    inner_gs = gs[gs_idx].subgridspec(nrows=nrows, # row Î™á Í∞ú \n","                          ncols=ncols, # col Î™á Í∞ú \n","                          height_ratios=h_r\n","                        )\n","\n","    for col_idx, s_cols in enumerate(s_df.columns):\n","      plt.subplot(inner_gs[col_idx])\n","      plt.plot(s_df[s_cols])\n","      plt.title(s_cols)\n","\n","  # plt.suptitle(\"total\" + \" \" * 140 + \"short\" + \" \" * 140 + \"long\")\n","  plt.suptitle(space_.join(title_name))\n","  plt.show()\n","  print(\"\\n\")"]},{"cell_type":"markdown","metadata":{"id":"GZ0y_x9ugOUD"},"source":["##### check dent_detph"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":676},"executionInfo":{"elapsed":593,"status":"ok","timestamp":1637297839515,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"ETgm1avml0fE","outputId":"9df7a819-691a-4fdc-93bb-d6489812419b"},"outputs":[{"data":{"image/png":"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\n","text/plain":["<Figure size 400x800 with 2 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["target_pr = total_long_pr\n","\n","plt.figure(figsize=(4, 8))\n","gs = gridspec.GridSpec(nrows=2,\n","                        ncols=1,\n","                        height_ratios=[1, 1]\n","                      )\n","\n","plt.subplot(gs[0])\n","plt.plot(target_pr)\n","h_roll = pd.Series(target_pr).rolling(10).max()\n","plt.plot(h_roll)\n","# plt.show()\n","# print()\n","\n","plt.subplot(gs[1])\n","dent_depth = target_pr / h_roll\n","plt.plot(dent_depth)\n","plt.show()"]},{"cell_type":"markdown","metadata":{"id":"v2Gjv019AEz8"},"source":["##### check frequency "]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":464},"executionInfo":{"elapsed":720,"status":"ok","timestamp":1636862363013,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"atdBjod9-e21","outputId":"5925d52a-da23-40cd-a9b3-6c0323024bc0"},"outputs":[{"name":"stdout","output_type":"stream","text":["[0. 0. 0. ... 0. 0. 0.]\n","(70, 1)\n"]},{"data":{"image/png":"\n","text/plain":["<Figure size 640x480 with 1 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["total_len = np.zeros(len(res_df))\n","print(total_len)\n","np_trade_list = np.array(trade_list)\n","# print(np_trade_list.shape)\n","print(np_trade_list[:, [0], [0]].shape)\n","total_len[np_trade_list[:, [0], [0]]] = 1\n","\n","plt.plot(total_len)\n","plt.show()"]},{"cell_type":"markdown","source":["##### candle study (ÎÇúÏàò ÏÉùÏÑ±ÏùÑ ÌÜµÌï¥ candle strength ratio Î•º serialize Ìï† Ïàò ÏûàÏñ¥ÏïºÌï®)"],"metadata":{"id":"zItdCdJXhQtu"}},{"cell_type":"code","source":["# wick_score -> Ï†ïÏàòÏûêÎ¶¨, body_score -> ÏÜåÏàòÏ†ê ÏûêÎ¶¨\n","# def candle_strn_ratio(ohlc_data):\n","\n","#   # o, h, l, c = ohlc_data\n","#   if type(ohlc_data) != np.array:\n","#     ohlc_data = np.array(ohlc_data)\n","\n","#   o, h, l, c = np.split(ohlc_data, 4, axis=1)\n","#   #   check up / downward\n","#   # up = 1 if c >= o else 0\n","#   up = np.where(c >= o, 1, 0)\n","\n","#   total_len = h - l\n","#   upper_wick = (h - np.maximum(c, o)) / total_len\n","#   lower_wick = (np.minimum(c, o) - l) / total_len\n","#   body = abs(c - o) / total_len\n","\n","#   # if up:\n","    \n","#   # else:\n","    \n","#   up_score = (1 - upper_wick) * 100 + body\n","#   dn_score = (1 - lower_wick) * 100 + body\n","#   score = np.where(up, up_score, dn_score)  \n","\n","#   return score\n","\n","\n","def candle_strn_ratio(res_df, plot_check=0):\n","  \n","  ohlc_col = [\"open\", \"high\", \"low\", \"close\"]\n","  ohlcs = res_df[ohlc_col]\n","  o, h, l, c = np.split(ohlcs.values, 4, axis=1)\n","\n","  # if type(ohlc_data) != np.array:\n","  #   ohlc_data = np.array(ohlc_data)\n","\n","  #   check up / downward\n","  up = np.where(c >= o, 1, 0)\n","\n","  total_len = h - l\n","  upper_wick = (h - np.maximum(c, o)) / total_len\n","  lower_wick = (np.minimum(c, o) - l) / total_len\n","  body = abs(c - o) / total_len\n","    \n","  up_score = (1 - upper_wick) * 100 + body\n","  dn_score = (1 - lower_wick) * 100 + body\n","  score = np.where(up, up_score, dn_score)  \n","\n","  if plot_check:\n","    fig = plt.figure(figsize=(14, 18))\n","      \n","    gs = gridspec.GridSpec(nrows=3, # row Î™á Í∞ú \n","                          ncols=1, # col Î™á Í∞ú \n","                          height_ratios=[3, 1, 1]\n","                        )\n","\n","    ax = fig.add_subplot(gs[0])\n","\n","    # fig.show()\n","    # fig.canvas.draw()\n","\n","    temp_ohlc = ohlcs.values\n","    index = np.arange(len(temp_ohlc))\n","    candle = np.hstack((np.reshape(index, (-1, 1)), temp_ohlc))\n","    mf.candlestick_ohlc(ax, candle, width=0.5, colorup='#26a69a', colordown='#ef5350', alpha=0.5)\n","\n","    plt.show()\n","\n","  return score"],"metadata":{"id":"OTM-5HpehcSB"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#   plot_check    #\n","print(candle_strn_ratio(res_df.iloc[:20], 1))\n","# break\n","# ohlc_data\n","\n","# fig = plt.figure(figsize=(14, 18))\n","  \n","# gs = gridspec.GridSpec(nrows=3, # row Î™á Í∞ú \n","#                       ncols=1, # col Î™á Í∞ú \n","#                       height_ratios=[3, 1, 1]\n","#                     )\n","\n","# ax = fig.add_subplot(gs[0])\n","\n","# # fig.show()\n","# # fig.canvas.draw()\n","\n","# temp_ohlc = ohlc_data.values\n","# index = np.arange(len(temp_ohlc))\n","# candle = np.hstack((np.reshape(index, (-1, 1)), temp_ohlc))\n","# mf.candlestick_ohlc(ax, candle, width=0.5, colorup='#26a69a', colordown='#ef5350', alpha=0.5)\n","\n","# plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"KGJbx4BgKHKd","executionInfo":{"status":"ok","timestamp":1639793188612,"user_tz":-540,"elapsed":1080,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"892bab00-7b08-400f-89a6-f7a9de25d951"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1400x1800 with 1 Axes>"]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["[[ 97.40707965]\n"," [ 93.03448276]\n"," [ 65.23144105]\n"," [ 87.89839572]\n"," [ 98.6984127 ]\n"," [ 42.30612245]\n"," [ 92.01176471]\n"," [ 97.25819672]\n"," [ 48.76363636]\n"," [ 45.27299703]\n"," [ 78.11056511]\n"," [ 65.07943925]\n"," [ 89.64356436]\n"," [ 88.06410256]\n"," [ 87.93854749]\n"," [ 96.70093458]\n"," [100.79865772]\n"," [ 36.16981132]\n"," [ 82.87234043]\n"," [ 93.57608696]]\n"]}]},{"cell_type":"markdown","metadata":{"id":"o-XjNS1L31YB"},"source":["##### ep_loc.point & zone legacy"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"taB2j7kT33iN"},"outputs":[],"source":["\n","\n","    # res_df['entry_{}'.format(strat_version)] = np.where((res_df['open'] >= res_df['cloud_bline_%s' % cb_itv]) &\n","    #                 # (res_df['close'].shift(config.loc_set.point.tf_entry * 1) <= res_df['cloud_bline_%s' % cb_itv]) &\n","    #                 (res_df['close'] < res_df['cloud_bline_%s' % cb_itv])\n","    #                 , res_df['entry_{}'.format(strat_version)] - 1, res_df['entry_{}'.format(strat_version)])\n","\n","    # res_df['entry_{}'.format(strat_version)] = np.where((res_df['open'] >= res_df['bb_lower_1m']) &\n","    #                 # (res_df['close'].shift(config.loc_set.point.tf_entry * 1) <= res_df['bb_lower_1m']) &\n","    #                 (res_df['close'] < res_df['bb_lower_1m'])\n","    #                 , res_df['entry_{}'.format(strat_version)] - 1, res_df['entry_{}'.format(strat_version)])\n","\n","    # res_df['entry_{}'.format(strat_version)] = np.where((res_df['open'] <= res_df['cloud_bline_%s' % cb_itv]) &\n","    #                   # (res_df['close'].shift(config.loc_set.point.tf_entry * 1) >= res_df['cloud_bline_%s' % cb_itv]) &\n","    #                   (res_df['close'] > res_df['cloud_bline_%s' % cb_itv])\n","    #                 , res_df['entry_{}'.format(strat_version)] + 1, res_df['entry_{}'.format(strat_version)])\n","\n","    # res_df['entry_{}'.format(strat_version)] = np.where((res_df['open'] <= res_df['bb_upper_1m']) &\n","    #                   # (res_df['close'].shift(config.loc_set.point.tf_entry * 1) >= res_df['bb_upper_1m']) &\n","    #                   (res_df['close'] > res_df['bb_upper_1m'])\n","    #                 , res_df['entry_{}'.format(strat_version)] + 1, res_df['entry_{}'.format(strat_version)])\n","\n","\n","    \n","   # --------------- ema --------------- #   \n","  # res_df['ema5_1m'] = ema(res_df['close'], 5).shift(1)\n","\n","  #   # --------------- cloud bline --------------- #   \n","  # res_df['cloud_bline_1m'] = cloud_bline(res_df, 26).shift(1)\n","  \n","    #       stochastic      #\n","  # res_df['stoch'] = stoch(res_df, 5, 3, 3)\n","\n","    #       fisher      #\n","  # res_df['fisher30'] = fisher(res_df, 30)\n","  # res_df['fisher60'] = fisher(res_df, 60)\n","  # res_df['fisher120'] = fisher(res_df, 120)\n","\n","    #       cctbbo      #\n","  # res_df['cctbbo'], _ = cct_bbo(res_df, 21, 13)\n","\n","    #       ema_roc      #\n","  # res_df['ema_roc'] = ema_roc(res_df['close'], 13, 9)\n","\n","\n","   # ------------------------------ htf data ------------------------------ #    \n","\n","  #             Todo              #\n","  # htf_df = pd.read_excel(date_path2 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","  # htf_df = pd.read_excel(date_path3 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","  # # htf_df = pd.read_excel(date_path4 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","  # # # htf_df = pd.read_excel(date_path5 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","  # # # # # # htf_df = pd.read_excel(date_path6 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","\n","  # # ---- htf index slicing ---- #\n","  # htf_df = htf_df.loc[:res_df.index[-1]]\n","  \n","  # print(\"res_df.index[-1] :\", res_df.index[-1])\n","  # print(\"htf_df.index[-1] :\", htf_df.index[-1])\n","\n","  # res_df = dc_line(res_df, htf_df, '5m')\n","  # res_df = dc_level(res_df, '5m', 1)\n","\n","\n","  # # # if \"sma4\" in res_df.columns:\n","  # # #   res_df.drop(\"sma4\", axis=1, inplace=1)\n","\n","  # # htf_df['sma'] = htf_df['close'].rolling(60).mean()\n","  # # res_df = res_df.join(pd.DataFrame(index=res_df.index, data=to_lower_tf(res_df, htf_df, [-1]), columns=['sma_30m']))\n","  \n","  # htf_df['stoch'] = stoch(htf_df, 13, 3, 3)\n","  # res_df = res_df.join(pd.DataFrame(index=res_df.index, data=to_lower_tf(res_df, htf_df, [-1], backing_i=-1), columns=['stoch_5m']))\n","\n","   \n","  # fifth_df['ema'] = ema(fifth_df['close'], 5)\n","  # res_df = res_df.join(pd.DataFrame(index=res_df.index, data=to_lower_tf(res_df, fifth_df, [-1]), columns=['ema5']))\n","\n","        # -------------- dr scheduling -------------- #\n","        # if config.ep_set.entry_type == 'MARKET':\n","        #   mr_const_cnt += 1\n","        #   if (res_df['close'].iloc[i] - res_df['short_tp'].iloc[i]) / (res_df['short_out'].iloc[i] - res_df['close'].iloc[i]) <= config.ep_set.tr_thresh * (1 + config.ep_set.dr_error):  \n","        #     mr_score += 1\n","\n","           \n","        # ------- entry once ------- #   \n","        # prev_entry_cnt = 0\n","        # for back_i in range(i - 1, 0, -1):\n","        #   if res_df['entry'][back_i] == 1:\n","        #     break\n","\n","        #   elif res_df['entry'][back_i] == -1:\n","        #     prev_entry_cnt += 1          \n","        # # # print(\"prev_entry_cnt :\", prev_entry_cnt)\n","\n","        # mr_const_cnt += 1\n","        # # if prev_entry_cnt <= config.ep_set.entry_incycle:\n","        # # if prev_entry_cnt == config.ep_set.entry_incycle:\n","        # if prev_entry_cnt >= config.ep_set.entry_incycle:\n","        #   mr_score += 1\n","\n","        # ------- htf zoning ------- #   \n","        # mr_const_cnt += 1\n","        #   #       bb zone     #\n","        # if res_df['close'].iloc[i] < res_df['bb_lower_%s' % bbz_interval].iloc[i]:\n","        # # if res_df['close'].iloc[i] < res_df['bb_lower2_1h'].iloc[i]:\n","        # # if res_df['close'].iloc[i] < res_df['bb_base_1h'].iloc[i]:\n","\n","        #   #       cbline zone     #\n","        # # if res_df['close'].iloc[i] < res_df['cloud_bline_%s' % cb_interval].iloc[i]:\n","\n","        #   mr_score += 1\n","\n","  \n","        # ------- ben ep_in's tp done ------- #   \n","        # mr_const_cnt += 1\n","        # if res_df['low'].iloc[i] > res_df['short_tp'].iloc[i]:\n","        #   mr_score += 1\n","\n","\n","        # -------------- feature dist const. -------------- #\n","        # if initial_i < input_size:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","        # entry_input_x = min_max_scale(res_df[selected_price_colname].iloc[initial_i - input_size:initial_i].values)\n","       \n","        # re_entry_input_x = expand_dims(entry_input_x)\n","\n","        # entry_vector = model.predict(re_entry_input_x, verbose=0)\n","        # # print(test_result.shape)\n","\n","        # f_dist = vector_dist(entry_vector, selected_vector)\n","        # print(\"f_dist :\", f_dist)\n","\n","        # if f_dist < fdist_thresh:\n","          # mr_score += 1\n","\n","\n","\n","          \n","\n","        # -------------- dr scheduling -------------- #\n","        # if config.ep_set.entry_type == \"MARKET\":\n","          # mr_const_cnt += 1        \n","          # if (res_df['long_tp'].iloc[i] - res_df['close'].iloc[i]) / (res_df['close'].iloc[i] - res_df['long_out'].iloc[i]) <= config.ep_set.tr_thresh * (1 + config.ep_set.dr_error): # ÏùºÎ∞òÏ†ÅÏúºÎ°ú dr ÏÉÅÏóêÏÑú tp ÎπÑÏú®Ïù¥ Îçî Ïª§Ïßê (tr Î≥¥Îã§)\n","          #   mr_score += 1\n","\n","        # -------------- ep limit -------------- #    \n","        # mr_const_cnt += 1\n","        # # if (res_df['open'].iloc[i] - res_df['long_ep'].iloc[i]) / res_df['open'].iloc[i] < config.ep_set.max_eplim_pct:\n","        # if config.ep_set.min_eplim_pct < (res_df['open'].iloc[i] - res_df['long_ep'].iloc[i]) / res_df['open'].iloc[i] < config.ep_set.max_eplim_pct:\n","        # # if 0 < (res_df['open'].iloc[i] - res_df['long_ep'].iloc[i]) / res_df['open'].iloc[i] < config.ep_set.max_eplim_pct:\n","        #   # if res_df['st_gap_15m'].iloc[i] / res_df['open'].iloc[i] < 0:\n","        #   #   print(\"i, res_df['st_gap_15m'].iloc[i] :\", i, res_df['st_gap_15m'].iloc[i])\n","        #   mr_score += 1\n","\n","\n","        # -------------- entry once -------------- #    \n","        # prev_entry_cnt = 0\n","        # for back_i in range(i - 1, 0, -1):\n","        #   if res_df['entry'][back_i] == -1:\n","        #     break\n","\n","        #   elif res_df['entry'][back_i] == 1:\n","        #     prev_entry_cnt += 1\n","          \n","        # mr_const_cnt += 1\n","        # # if prev_entry_cnt <= config.ep_set.entry_incycle:\n","        # # if prev_entry_cnt == config.ep_set.entry_incycle:\n","        # if prev_entry_cnt >= config.ep_set.entry_incycle:\n","        #   mr_score += 1\n","\n","\n","        # ------- htf zoning ------- #   \n","        # mr_const_cnt += 1\n","          \n","        #   #       bb zone     #\n","        # if res_df['close'].iloc[i] > res_df['bb_upper_%s' % bbz_interval].iloc[i]:\n","        # # if res_df['close'].iloc[i] > res_df['bb_upper2_1h'].iloc[i]:\n","        # # if res_df['close'].iloc[i] > res_df['bb_base_1h'].iloc[i]:\n","        \n","        #   #       cbline zone     #\n","        # # if res_df['close'].iloc[i] > res_df['cloud_bline_%s' % cb_interval].iloc[i]:\n","\n","        #   mr_score += 1\n","\n","\n","        # ------- ben ep_in's tp done ------- #   \n","        # mr_const_cnt += 1\n","        # if res_df['high'].iloc[i] < res_df['long_tp'].iloc[i]:\n","        #   mr_score += 1\n","\n","\n","        # -------------- feature dist const. -------------- #\n","        # if initial_i < input_size:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","          \n","        # entry_input_x = min_max_scale(res_df[selected_price_colname].iloc[initial_i - input_size:initial_i].values)\n","       \n","        # re_entry_input_x = expand_dims(entry_input_x)\n","\n","        # entry_vector = model.predict(re_entry_input_x, verbose=0)\n","        # # print(test_result.shape)\n","\n","        # f_dist = vector_dist(entry_vector, selected_vector)\n","        # print(\"f_dist :\", f_dist)\n","\n","        # if f_dist < fdist_thresh:\n","          # mr_score += 1"]},{"cell_type":"markdown","metadata":{"id":"-IbP_Z3Dlwk4"},"source":["### nontp survey"]},{"cell_type":"markdown","metadata":{"id":"FxJ1y8v2fkCR"},"source":["##### term & liqd"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":614},"executionInfo":{"elapsed":8,"status":"ok","timestamp":1628300788555,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"},"user_tz":-540},"id":"-qIWa48pl1GO","outputId":"b2687c93-e070-4d45-8a67-4cc783fd78f1"},"outputs":[{"data":{"image/png":"\n","text/plain":["<Figure size 360x720 with 2 Axes>"]},"metadata":{"tags":[]},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["\n"]}],"source":["# print(nontp_long_indexs)\n","\n","plot_size = 100\n","\n","for s_i in range(plot_size, len(trade_list), plot_size):\n","\n","  slice_trade_list = trade_list[s_i - plot_size:s_i]\n","  slice_liqd_list = liqd_list[s_i - plot_size:s_i]\n","\n","  # print(len(slice_trade_list))\n","  np_trade = np.array(slice_trade_list)\n","  trade_term = np_trade[:, [2]] - np_trade[:, [1]]\n","\n","  plt.figure(figsize=(5, 10))\n","  plt.subplot(211)\n","  plt.bar(np.arange(len(trade_term)), trade_term.reshape(-1,), width=1, color='b')\n","\n","  # plt.plot(trade_term.reshape(-1,))\n","  plt.ylim(0, 1000)\n","  # plt.show()\n","  # print()\n","\n","  plt.subplot(212)\n","  # print(len(liqd_list))\n","  # plt.bar(np.arange(len(liqd_list)), liqd_list)\n","  plt.bar(np.arange(len(slice_liqd_list)), np.array(slice_liqd_list), width=1, color='r')\n","  # plt.plot(slice_liqd_list)\n","  plt.show()\n","\n","print()"]},{"cell_type":"markdown","metadata":{"id":"VBwVaUkvfnOd"},"source":["##### check nontp index"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":454,"status":"ok","timestamp":1628220543161,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"},"user_tz":-540},"id":"mRCMBOU4frNY","outputId":"ce4a9c9b-3589-40b3-8a19-4be03d5b9a1e"},"outputs":[{"name":"stdout","output_type":"stream","text":["32747\n"]}],"source":["# np_nontp_short_indexs = np.array(nontp_short_indexs)\n","# np_nontp_long_indexs = np.array(nontp_long_indexs)\n","\n","# short_til_term = len(res_df) - np_nontp_short_indexs\n","# long_til_term = len(res_df) - np_nontp_long_indexs\n","\n","max_nontp_short_term = len(res_df) - nontp_short_indexs[0]\n","max_nontp_long_term = len(res_df) - nontp_long_indexs[0]\n","\n","print(max_nontp_long_term)"]},{"cell_type":"markdown","metadata":{"id":"tApzvz_gK9lR"},"source":["## basic strategy"]},{"cell_type":"markdown","metadata":{"id":"FaRGwR4NEop2"},"source":["### shifting"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"a8aYsjEgQnGF"},"outputs":[],"source":["org_res_df = res_df.copy()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":291,"status":"ok","timestamp":1626515312874,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"},"user_tz":-540},"id":"RF3RM2G2RCb1","outputId":"ba8f6a75-d4df-4f85-cd0f-190935341f7a"},"outputs":[{"name":"stdout","output_type":"stream","text":["                            open     high  ...  min_upper  max_lower\n","2021-06-30 23:55:59.999  0.27223  0.27281  ...   0.272145    0.27005\n","2021-06-30 23:56:59.999  0.27274  0.27290  ...   0.272145    0.27005\n","2021-06-30 23:57:59.999  0.27246  0.27257  ...   0.272523    0.27021\n","2021-06-30 23:58:59.999  0.27166  0.27183  ...   0.272523    0.27021\n","2021-06-30 23:59:59.999  0.27144  0.27211  ...   0.272523    0.27021\n","\n","[5 rows x 37 columns]\n","                            open     high  ...  min_upper  max_lower\n","2021-06-30 23:55:59.999  0.27223  0.27281  ...   0.272523    0.27021\n","2021-06-30 23:56:59.999  0.27274  0.27290  ...        NaN        NaN\n","2021-06-30 23:57:59.999  0.27246  0.27257  ...        NaN        NaN\n","2021-06-30 23:58:59.999  0.27166  0.27183  ...        NaN        NaN\n","2021-06-30 23:59:59.999  0.27144  0.27211  ...        NaN        NaN\n","\n","[5 rows x 37 columns]\n"]}],"source":["#         refresh res_df      #\n","res_df = org_res_df.copy()\n","print(org_res_df.tail(5))\n","\n","# break\n","\n","\n","shift_size = -4\n","# shift_size = -1\n","# shift_size = -7\n","# shift_size = +3\n","\n","res_df['min_upper'] = res_df['min_upper'].shift(shift_size)\n","res_df['max_lower'] = res_df['max_lower'].shift(shift_size)\n","res_df['minor_ST1_Trend'] = res_df['minor_ST1_Trend'].shift(shift_size)\n","res_df['minor_ST2_Trend'] = res_df['minor_ST2_Trend'].shift(shift_size)\n","res_df['minor_ST3_Trend'] = res_df['minor_ST3_Trend'].shift(shift_size)\n","res_df['middle_line'] = res_df['middle_line'].shift(shift_size)\n","\n","print(res_df.tail(5))"]},{"cell_type":"markdown","metadata":{"id":"2gxvme1PC6ha"},"source":["### load model"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":5831,"status":"ok","timestamp":1628862368878,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"},"user_tz":-540},"id":"dtYdAuSsC72_","outputId":"e8dccc53-aaa7-4bab-ed8d-753f634c08d6"},"outputs":[{"name":"stdout","output_type":"stream","text":["Downloading data from https://storage.googleapis.com/tensorflow/keras-applications/resnet/resnet50_weights_tf_dim_ordering_tf_kernels_notop.h5\n","94773248/94765736 [==============================] - 1s 0us/step\n"]}],"source":["# model_name = 'inner_tick_cnnreg_lscalemm_prefee_gpu_%s_%s_%s_%s_%s.h5'\n","\n","# model = tf.keras.models.load_model(ckpt_path + model_name)\n","\n","from tensorflow.keras.applications.resnet50 import ResNet50\n","\n","model = ResNet50(weights='imagenet', include_top=False)\n","# model.summary()\n"]},{"cell_type":"markdown","metadata":{"id":"5la6usMOFzkX"},"source":["#### gen selected vector"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"oQk3-jbKF8FB"},"outputs":[],"source":["def min_max_scale(npy_x):\n","\n","  return (npy_x - np.min(npy_x)) / (np.max(npy_x) - np.min(npy_x))\n","\n","def expand_dims(npy_x):\n","\n","  row, col = npy_x.shape\n","  npy_x2 = np.array(npy_x).reshape(-1, row, col, 1).astype(np.float32)\n","  # input_x = np.array(data_x).reshape(-1, row, col).astype(np.float32)\n","\n","  #     1c to 3c    #\n","  npy_x3 = npy_x2 * np.ones(3, dtype=np.float32)[None, None, None, :]\n","\n","  return npy_x3\n","\n","\n","def vector_dist(f1, f2):\n","  return np.linalg.norm(f1-f2)\n","\n","\n","\n","# ------------------------ params ------------------------  #\n","selected_i = 500\n","input_size = 100\n","\n","\n","\n","#   1. ÏÑ†ÌÉùÎêú Ïù∏Îç±Ïä§Î•º ÏûÖÎ†•Î∞õÏïòÏùÑ Îïå, input generating ÌòïÌÉúÎßå ÎßåÎì§Ïñ¥ÎÜìÍ≥†,     #\n","#   1-1. input cols ÌïÑÏöîÌï®    #\n","\n","basic_list = ['open', 'high', 'low', 'close', 'minor_ST1_Up', 'minor_ST1_Down',\n","       'minor_ST2_Up', 'minor_ST2_Down', 'minor_ST3_Up', 'minor_ST3_Down',\n","       'middle_line', 'min_upper', 'max_lower']\n","# senkoua_list = ['senkou_a1', 'senkou_a2', 'senkou_a3', 'senkou_a4', 'senkou_a5']\n","# senkoub_list = ['senkou_b1', 'senkou_b2', 'senkou_b3', 'senkou_b4', 'senkou_b5']\n","senkoua_list = ['senkou_a1', 'senkou_a2', 'senkou_a3']\n","senkoub_list = ['senkou_b1', 'senkou_b2', 'senkou_b3']\n","# sar_list = ['sar1', 'sar2', 'sar3', 'sar4', 'sar5']\n","# sar_list = ['sar1', 'sar2', 'sar3', 'sar4', 'sar5']\n","sar_list = ['sar1', 'sar2', 'sar3']\n","sar_list = ['sar1', 'sar2', 'sar3']\n","\n","sma_list = ['sma']\n","\n","#     -------------- outer price phase --------------    #\n","macd_list = ['macd_hist1', 'macd_hist2', 'macd_hist3', 'macd_hist4', 'macd_hist5']\n","trix_list = ['trix1', 'trix2', 'trix3', 'trix4', 'trix5']\n","stoch_list = ['stoch']\n","fisher_list = ['fisher30', 'fisher60', 'fisher120']\n","cctbbo_list = ['cctbbo']\n","\n","selected_price_colname = basic_list + senkoua_list + senkoub_list + sar_list\n","selected_outprice_colname = [macd_list]\n","\n","\n","#         global scaling for outer price data       #\n","#         1. nan Ï≤òÎ¶¨       #\n","\n","# # print((np.isnan(df.values)))\n","# print(\"np.sum(np.isnan(df.values), axis=0) :\", np.sum(np.isnan(df.values), axis=0))\n","\n","# max_nan = np.max(np.sum(np.isnan(df.values), axis=0))\n","# # print(max_nan)\n","\n","# df = df.iloc[max_nan:-max_nan]\n","\n","# total_gdata = []\n","# for g_col in selected_outprice_colname:\n","\n","#   temp_data = min_max_scale(res_df[g_col])\n","#   total_gdata.append(temp_data)\n","\n","\n","\n","#   1-2. cols Ïóê Îî∞Î•∏, scaling method Íµ¨Î∂ÑÌï®    #\n","onprice_input_x = min_max_scale(res_df[selected_price_colname].iloc[selected_i - input_size:selected_i].values)\n","print(onprice_input_x.shape)\n","\n","\n","#   2. plot_check ÏóêÏÑú Î≥∏Ïù∏Ïù¥ ÏõêÌïòÎäî shape Ïùò Ïù∏Îç±Ïä§Î•º ÏÑ†ÌÉù   #\n","#   3. vertorize, \n","#   3-1. input generator Î•º Ïù¥Ïö©Ìï¥ entry signal Î∞úÏÉùÌï† ÎïåÎßàÎã§ dist ÎπÑÍµê ÏßÑÌñâ    #\n","re_onprice_input_x = expand_dims(onprice_input_x)\n","print(re_onprice_input_x.shape)\n","      \n","# break\n","\n","selected_vector = model.predict(re_onprice_input_x, verbose=1)\n","print(selected_vector.shape)"]},{"cell_type":"markdown","metadata":{"id":"OJqkmkpsLCYC"},"source":["### tr_tresh calc"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":446,"status":"ok","timestamp":1636015063790,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"gcpo4MGd9Wm4","outputId":"434b56b3-3a3c-45c1-f559-42681fea5f05"},"outputs":[{"name":"stdout","output_type":"stream","text":["res_wr : 0.6\n","tr_thresh : 0.6766666666666667\n","[0.95, 1.0338333333333334, 0.95, 0.95, 1.0338333333333334, 0.95, 0.95, 1.0338333333333334, 0.95, 1.0338333333333334]\n","\n","Î≥µÎ¶¨Î•º ÏúÑÌïú tr_thresh_ : 1.0\n","np.cumprod(test_trade_list)[-1] : 0.5751227991397774\n","total_pr :  0.5751227991397774\n","\n","[-0.05        0.03383333 -0.05       -0.05        0.03383333 -0.05\n"," -0.05        0.03383333 -0.05        0.03383333]\n","Îã®Î¶¨Î•º ÏúÑÌïú tr_thresh_ : 1.0\n","np.cumsum(np_test_trade)[-1] : 0.30000000000001137\n","total_pr :  1.3000000000000114\n"]}],"source":["res_wr = 0.6\n","# tr_thresh = 1\n","# tr_thresh = ((1 - res_wr) / res_wr) ** 0.5\n","tr_thresh = ((1 - res_wr) / res_wr) + 0.01\n","# tr_thresh = 2.6\n","print(\"res_wr :\", res_wr)\n","print(\"tr_thresh :\", tr_thresh)\n","\n","\n","#   Îã®Î¶¨    #\n","trade_num = 1000\n","asset = 1 # thousand USDT\n","test_loss_gap = 0.95  # fee adjusted\n","test_pr_gap = 1 + (1 - test_loss_gap) * tr_thresh\n","\n","test_loss_cnt = trade_num * (1 - res_wr)\n","test_pr_cnt = trade_num * res_wr\n","\n","test_trade_list = [test_pr_gap] * int(test_pr_cnt) + [test_loss_gap] * int(test_loss_cnt)\n","random.shuffle(test_trade_list)\n","# print(\"len(test_trade_list) :\", len(test_trade_list))\n","print(test_trade_list[:10])\n","print()\n","\n","# print(\"%.5f\" % np.cumprod(test_trade_list)[-1])\n","for tr_thresh_ in np.arange(1, 3, 0.2):\n","  if (1 + (1 - test_loss_gap) * tr_thresh_) ** test_pr_cnt * test_loss_gap ** test_loss_cnt > 1:\n","    break\n","print(\"Î≥µÎ¶¨Î•º ÏúÑÌïú tr_thresh_ :\", tr_thresh_)\n","# print(\"tr_thresh :\", tr_thresh)\n","print(\"np.cumprod(test_trade_list)[-1] :\", np.cumprod(test_trade_list)[-1])\n","print(\"total_pr : \", np.cumprod(test_trade_list)[-1])\n","print()\n","#   Î≥µÎ¶¨ tr_thresh  #\n","#   1. trade_num Ïóê ÏòÅÌñ• Î∞õÏßÄ ÏïäÏùå\n","#   2. loss_gap Ïóê ÎπÑÎ°ÄÌï®\n","\n","for tr_thresh_ in np.arange(1, 3, 0.01):\n","  if ((1 - test_loss_gap) * tr_thresh_) * test_pr_cnt + (test_loss_gap - 1) * test_loss_cnt > 0:\n","    break\n","np_test_trade = np.array(test_trade_list) - 1\n","print(np_test_trade[:10])\n","# print(\"%.3f\" % )\n","print(\"Îã®Î¶¨Î•º ÏúÑÌïú tr_thresh_ :\", tr_thresh_)\n","# print(\"tr_thresh :\", tr_thresh)\n","print(\"np.cumsum(np_test_trade)[-1] :\", np.cumsum(np_test_trade)[-1])\n","print(\"total_pr : \", 1 + np.cumsum(np_test_trade)[-1])\n"]},{"cell_type":"markdown","metadata":{"id":"JNQxkb06ZdTe"},"source":["# traded section plot"]},{"cell_type":"markdown","metadata":{"id":"UmH_Pb5BZUtm"},"source":["## plot with off-color st with dash"]},{"cell_type":"markdown","metadata":{"id":"5z4L3MMYmUI0"},"source":["### sorted plot_check"]},{"cell_type":"code","execution_count":12,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000,"output_embedded_package_id":"168X5GjGEI4DarPc_ATBCbf0Tt0KRduOR"},"executionInfo":{"elapsed":439114,"status":"error","timestamp":1640236718832,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"Qv1MM2MemZnF","outputId":"8c918345-99bc-4018-a24e-729b7f733885"},"outputs":[{"output_type":"display_data","data":{"text/plain":"Output hidden; open in https://colab.research.google.com to view."},"metadata":{}}],"source":["assert len(open_list) == len(trade_list), \"len(open_list) != len(trade_list)\"\n","assert len(tp_state_list) == len(fee_list), \"len(tp_state_list) != len(fee_list)\"\n","\n","if multi_mode:\n","  strat_version = \"v3\"\n","\n","save_plot = 0\n","pr_sort = 1     # Ïù¥ÏÉÅÌïú Ï≤¥Í≤∞ ÌôïÏù∏ÌïòÍ∏∞ Ï¢ãÏùå\n","pr_descend = 1\n","wl_case = -1     # 1 / -1 / 0 (win loss study)\n","position = 1    # -1 / 1 / 0 (short / long / both)\n","\n","inversion = 0\n","hedge = 0\n","\n","\n","if save_plot:\n","  plot_check_dir = current_path + \"plot_check/\" +  key.replace(\".ftr\", \"\")\n","  try:\n","    os.mkdir(plot_check_dir)\n","  except:\n","\n","    #     remove existing dir   #\n","    shutil.rmtree(plot_check_dir)\n","    print(plot_check_dir, 'removed !')\n","    os.mkdir(plot_check_dir)\n","    # pass\n","    \n","\n","prev_plotsize = 130\n","post_plotsize = 120\n","\n","\n","if position == -1:\n","  position = config.ep_set.short_entry_score\n","elif position == 1:\n","  position = -config.ep_set.short_entry_score\n","\n","\n","if inversion:  \n","\n","    plot_pr_list = rev_np_pr\n","    h_plot_pr_list = h_rev_np_pr  # hedge\n","\n","else:\n","\n","    plot_pr_list = np_pr\n","    try:\n","      h_plot_pr_list = h_np_pr\n","    except Exception as e:\n","      print(\"error in h_plot_pr :\", e)\n","      h_plot_pr_list = np_pr\n","\n","\n","h_candle_intv1 = 5\n","h_candle_intv2 = 15\n","res_df = h_candle(res_df, h_candle_intv1)\n","res_df = h_candle(res_df, h_candle_intv2)\n","\n","\n","res_df = dtk_plot(res_df, dtk_itv2='15m', hhtf_entry=15, use_dtk_line=config.loc_set.zone.use_dtk_line)\n","# res_df = dtk_plot(res_df, dtk_itv2='15m', hhtf_entry=1, use_dtk_line=1)\n","# break\n","\n","rtc_list = [\"short_tp_1_{}\".format(strat_version), \"short_tp_gap_{}\".format(strat_version), \"long_tp_1_{}\".format(strat_version), \"long_tp_gap_{}\".format(strat_version)]\n","# h_rtc_list = [\"h_short_tp_1\", \"h_short_tp_gap\", \"h_long_tp_1\", \"h_long_tp_gap\"]\n","dtk_list = [\"short_dtk_1_{}\".format(strat_version), \"short_dtk_gap_{}\".format(strat_version), \"long_dtk_1_{}\".format(strat_version), \"long_dtk_gap_{}\".format(strat_version),\n","            # \"short_dtk_1_line\", \"short_dtk_gap_line\", \"long_dtk_1_line\", \"long_dtk_gap_line\",\n","            \"short_dtk_plot_1\", \"short_dtk_plot_gap\", \"long_dtk_plot_1\", \"long_dtk_plot_gap\"]\n","dc_v2_list = ['dc_upper_v2_{}'.format(strat_version), 'dc_lower_v2_{}'.format(strat_version)]\n","\n","\n","ohlc_list = ['open', 'high', 'low', 'close'] # + basic_st_list\n","hcandle_list = ['hopen_%s' % h_candle_intv1, 'hclose_%s' % h_candle_intv1, 'hopen_%s' % h_candle_intv2, 'hclose_%s' % h_candle_intv2]\n","\n","# --------------------- dc & bb level --------------------- #\n","dc_interval = '1m'\n","hdc_interval = '5m'\n","hhdc_interval = '15m'\n","\n","dc_list = ['dc_upper_%s' % dc_interval, 'dc_lower_%s' % dc_interval]\n","hdc_list = ['dc_upper_%s' % hdc_interval, 'dc_lower_%s' % hdc_interval]\n","hhdc_list = ['dc_upper_%s' % hhdc_interval, 'dc_lower_%s' % hhdc_interval]\n","\n","bb_interval = dc_interval\n","hbb_interval = hdc_interval\n","hhbb_interval = hhdc_interval\n","\n","bb_list = ['bb_upper_%s' % bb_interval, 'bb_lower_%s' % bb_interval]\n","hbb_list = ['bb_upper_%s' % hbb_interval, 'bb_lower_%s' % hbb_interval]\n","hhbb_list = ['bb_upper_%s' % hhbb_interval, 'bb_lower_%s' % hhbb_interval]\n","\n","bbwp_list = ['bbwp', 'bbwp_ma']\n","\n","\n","senkoua_list = ['senkou_a1', 'senkou_a2', 'senkou_a3', 'senkou_a4', 'senkou_a5']\n","senkoub_list = ['senkou_b1', 'senkou_b2', 'senkou_b3', 'senkou_b4', 'senkou_b5']\n","senkoua_list = ['senkou_a1']\n","senkoub_list = ['senkou_b1']\n","\n","sar_list = ['sar_15m']\n","\n","# ma_list = ['sma1', 'sma4']\n","sma_list = ['sma_1m']\n","\n","ema_list = ['ema_5m']\n","# cb_list = ['cloud_bline_1m']\n","cb_list = ['cloud_bline_30m']\n","# cb_list = ['cloud_bline_5m']\n","\n","\n","\n","# -------------- under price phase -------------- #\n","# macd_list = ['macd_hist1', 'macd_hist2', 'macd_hist3']\n","# trix_list = ['trix1', 'trix2', 'trix3']\n","# stoch_list = ['stoch_5m']\n","# fisher_list = ['fisher30', 'fisher60', 'fisher120']\n","# cctbbo_list = ['cctbbo']\n","# emaroc_list = ['ema_roc']\n","rsi_list = ['rsi_%s' % config.loc_set.point.exp_itv] \n","cci_list = ['cci_%s' % config.loc_set.point.exp_itv] \n","cci_upper, cci_lower = 150, -150\n","\n","\n","# -------------- summation -------------- #\n","# input_colname = ohlc_list + basic_st_list + pline_list + bb_list + hbb_list + sma_list + cb_list + stoch_list + sar_list + dc_list\n","input_colname = ohlc_list + hcandle_list + bb_list + hbb_list + hhbb_list + dc_list + hdc_list + hhdc_list + dtk_list + dc_v2_list + rsi_list + ema_list + cci_list\n","\n","# yrange_colname = ohlc_list + basic_st_list + pline_list # currently just used for ymin, ymax\n","yrange_colname = ohlc_list + hcandle_list + bb_list + hbb_list + hhbb_list + dc_list + hdc_list + hhdc_list + dc_v2_list + ema_list # currently just used for ymin, ymax\n","yrange_colname = ohlc_list + hcandle_list + bb_list + hbb_list + hhbb_list + dc_list + hdc_list + dc_v2_list + ema_list # currently just used for ymin, ymax\n","\n","\n","# aggr_obj = dict(zip(plot_pr_list, open_list, enumerate(trade_list)))\n","aggr_obj = dict(zip(plot_pr_list, zip(open_list, enumerate(trade_list))))\n","\n","sorted_obj = sorted(aggr_obj.items(), key=(lambda x: x[0]), reverse=pr_descend)\n","# print(aggr_obj)\n","# print(sorted_obj)\n","\n","if pr_sort:\n","  iter_obj = sorted_obj\n","else:\n","  iter_obj = aggr_obj.items()\n","\n","# for temp_pr, (open_idx, (t_i, (ep_idx_list_, tp_idx_list_))) in iter_obj:  # 0.699700153073042, (291402, (3014, ([370012], [370014])))\n","for temp_pr, (open_idx, (t_i, (ep_idx_list_, out_idx_list_, tp_idx_list_))) in iter_obj:  # 0.699700153073042, (291402, (3014, ([370012], [370014])))\n","\n","\n","  if not(i >= prev_plotsize):\n","    continue\n","\n","  if wl_case == 1:\n","    if plot_pr_list[t_i] < 1.0:\n","      continue  \n","  \n","  elif wl_case == -1:\n","    if plot_pr_list[t_i] > 1.0:\n","      continue  \n","  \n","  #   open size indexing by open_idx    #\n","  open_side = res_df['entry_{}'.format(strat_version)].iloc[open_idx]\n","\n","  # ---------- const. zone ---------- #\n","\n","  if position != 0:\n","    if open_side == -position:\n","      continue\n","\n","  if not strat_version in tp_state_list[t_i]:\n","  # if tp_state_list[t_i] != 'long close tp':\n","  # if tp_state_list[t_i] != 's-long_tp':\n","    continue\n","\n","  # if open_idx == 63901:\n","  #   pass\n","  # else:\n","  #   continue\n","\n","\n","  # if tp_ratio_list[t_i] > 0.4:\n","  #   continue\n","\n"," \n","  # print(\"open_idx :\", open_idx)\n","  print(\"open_side :\", open_side)\n","  print(\"np_timeidx[open_idx] :\", np_timeidx[open_idx])\n","  print(\"open_idx, ep_idx_list_[0], tp_idx_list_[-1] :\", open_idx, ep_idx_list_[0], tp_idx_list_[-1])\n","  # break\n","\n","\n","  plot_df = res_df.iloc[open_idx - prev_plotsize:tp_idx_list_[-1] + post_plotsize][input_colname]\n","\n","\n","  #       keep off-color st with another variable         #\n","  # st_trend_plot_df = res_df[['ST1_Trend%s' % basic_st_interval, 'ST2_Trend%s' % basic_st_interval, 'ST3_Trend%s' % basic_st_interval]].iloc[ep_idx_list_[0] - prev_plotsize:tp_idx_list_[-1] + post_plotsize]\n","\n","  # fig = trendln.plot_support_resistance(plot_df['close'], accuracy=8, fromwindows=0, numbest=1,  window=30) # requires matplotlib - pip install matplotlib\n","  \n","  plt.style.use('dark_background')\n","\n","  fig = plt.figure(figsize=(14, 18))\n","  \n","  gs = gridspec.GridSpec(nrows=3, # row Î™á Í∞ú \n","                       ncols=1, # col Î™á Í∞ú \n","                       height_ratios=[3, 1, 1]\n","                      )\n","  \n","  ax = fig.add_subplot(gs[0])\n","\n","  # fig.show()\n","  # fig.canvas.draw()\n","\n","  temp_ohlc = plot_df.values[:, :4]\n","  index = np.arange(len(temp_ohlc))\n","  candle = np.hstack((np.reshape(index, (-1, 1)), temp_ohlc))\n","  mf.candlestick_ohlc(ax, candle, width=0.5, colorup='#26a69a', colordown='#ef5350', alpha=0.5)\n","\n","  # ---------- h_candle ---------- #\n","  alpha = 1\n","  lw = 1\n","  for cd_i, candle in enumerate(hcandle_list):\n","\n","    if cd_i == 2:\n","      lw = 2      \n","    plt.step(np.arange(len(plot_df)), plot_df[candle].values, alpha=alpha, color='#ffffff', linewidth=lw)\n","\n","  # alpha = 0.1\n","  # plt.fill_between(np.arange(len(plot_df)), plot_df['hclose_60'].values, plot_df['hopen_60'].values, \n","  #                     where=1, facecolor='#ffffff', alpha=alpha)  \n","  \n","\n","   # --------- ema --------- #\n","  alpha = 1\n","  lw = 4\n","  for sm_i, item in enumerate(ema_list):\n","    plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#03ed30', linewidth=lw)\n","\n","  # ---------------------- dc_v2 ---------------------- #\n","  # alpha = 1\n","  # lw = 2\n","  # for sm_i, item in enumerate(dc_v2_list):\n","  #     plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#ffeb3b', linewidth=lw)\n","\n","  # ---------------------- dc ---------------------- #\n","  alpha = 1\n","  lw = 2\n","  for sm_i, item in enumerate(dc_list):\n","      plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#ffeb3b', linewidth=lw)\n","\n","  # ---------------------- hdc ---------------------- #\n","  alpha = 1\n","  lw = 2\n","  for sm_i, item in enumerate(hdc_list):\n","      plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#e65100', linewidth=lw)\n","\n","  # ---------------------- hhdc ---------------------- #\n","  alpha = 1\n","  lw = 4\n","  for sm_i, item in enumerate(hhdc_list):\n","      plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#c2185b', linewidth=lw)\n","\n","\n","  # ---------------------- bb ---------------------- #\n","  alpha = 1\n","  lw = 1\n","  for sm_i, item in enumerate(bb_list):\n","    plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#ffffff', linewidth=lw)\n","\n","  alpha = 0.2\n","  plt.fill_between(np.arange(len(plot_df)), plot_df['bb_upper_%s' % bb_interval].values, plot_df['bb_lower_%s' % bb_interval].values, \n","                      where=plot_df['bb_upper_%s' % bb_interval].values >= plot_df['bb_lower_%s' % bb_interval].values, facecolor='#ffffff', alpha=alpha)   \n","\n","  # ---------------------- hbb ---------------------- #\n","  alpha = 1\n","  lw = 2\n","  for sm_i, item in enumerate(hbb_list):\n","    plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#ff00ff', linewidth=lw)\n","  \n","  alpha = 0.2\n","  plt.fill_between(np.arange(len(plot_df)), plot_df['bb_upper_%s' % hbb_interval].values, plot_df['bb_lower_%s' % hbb_interval].values, \n","                      where=plot_df['bb_upper_%s' % hbb_interval].values >= plot_df['bb_lower_%s' % hbb_interval].values, facecolor='#ff00ff', alpha=alpha) \n","  \n","  # ---------------------- hhbb ---------------------- #\n","\n","  alpha = 1\n","  lw = 4\n","  for sm_i, item in enumerate(hhbb_list):\n","    plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#3179f5', linewidth=lw)\n","  \n","  alpha = 0.2\n","  plt.fill_between(np.arange(len(plot_df)), plot_df['bb_upper_%s' % hhbb_interval].values, plot_df['bb_lower_%s' % hhbb_interval].values, \n","                      where=plot_df['bb_upper_%s' % hhbb_interval].values >= plot_df['bb_lower_%s' % hhbb_interval].values, facecolor='#3179f5', alpha=alpha) \n","  \n","  # ------------------- dtk_line (old, tp_line) ------------------- #\n","  \n","  # alpha = 1\n","  # lw = 2\n","  # rtc_ratio_list = [config.loc_set.zone.dt_k]\n","  \n","  # for rtc_k in rtc_ratio_list:    \n","  #   # plt.step(np.arange(len(plot_df)), plot_df['short_dtk_1_line'].values - plot_df['short_dtk_gap_line'].values * rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","  #   # plt.step(np.arange(len(plot_df)), plot_df['long_dtk_1_line'].values + plot_df['long_dtk_gap_line'].values * rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","  #   plt.step(np.arange(len(plot_df)), plot_df['short_dtk_1'].values - plot_df['short_dtk_gap'].values * rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","  #   plt.step(np.arange(len(plot_df)), plot_df['long_dtk_1'].values + plot_df['long_dtk_gap'].values * rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","\n","  # hy_min = np.min(plot_df['short_dtk_1'].values - plot_df['short_dtk_gap'].values * rtc_k)\n","  # hy_max = np.max(plot_df['long_dtk_1'].values + plot_df['long_dtk_gap'].values * rtc_k)  \n","\n","  # alpha = 1\n","  # lw = 4\n","  # # h_rtc_ratio_list = [config.loc_set.zone.dt_k]\n","  # h_rtc_ratio_list = [config.loc_set.zone.zone_dt_k]\n","  # # h_rtc_ratio_list = [0.272, 0.36, 0.4, 0.5]\n","  \n","  # for h_rtc_k in h_rtc_ratio_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df['short_dtk_plot_1'].values - plot_df['short_dtk_plot_gap'].values * h_rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","  #   plt.step(np.arange(len(plot_df)), plot_df['long_dtk_plot_1'].values + plot_df['long_dtk_plot_gap'].values * h_rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","  #   # plt.step(np.arange(len(plot_df)), plot_df['h_short_tp_1'].values - plot_df['h_short_tp_gap'].values * h_rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","  #   # plt.step(np.arange(len(plot_df)), plot_df['h_long_tp_1'].values + plot_df['h_long_tp_gap'].values * h_rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","\n","  # # hy_min = np.min(plot_df['short_dtk_plot_1'].values - plot_df['short_dtk_plot_gap'].values * h_rtc_k)\n","  # # hy_max = np.max(plot_df['long_dtk_plot_1'].values + plot_df['long_dtk_plot_gap'].values * h_rtc_k)  \n","\n","  # ------------------------------------------------------------- #\n","\n","\n","  # ------------- ep ------------- #\n","  # if i != initial_i:\n","  # if len(ep_idx_list_) > 1:\n","  \n","    #        initial order         #\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='#ffeb3b')\n","  plt.axvline(prev_plotsize, alpha=0.5, linestyle='--', color='#ffeb3b')\n","\n","  for ep_i in range(len(ep_idx_list_)):\n","    # plt.axvline(prev_plotsize + (ep_idx_list_[ep_i] - ep_idx_list_[0]), alpha=0.7, linestyle='--', color='#ffeb3b')\n","    plt.axvline(prev_plotsize + (ep_idx_list_[ep_i] - open_idx), alpha=0.7, linestyle='--', color='#ffeb3b')\n","\n","  # plt.axvline(prev_plotsize, alpha=0.5, linestyle='--')\n","\n","  x0,x1 = plt.gca().get_xlim()\n","\n","  # ep_xmin = (prev_plotsize + (ep_idx_list_[ep_i] - ep_idx_list_[0])) / x1\n","  ep_xmin = (prev_plotsize + (ep_idx_list_[ep_i] - open_idx)) / x1\n","  plt.axhline(ep_tp_list[t_i][0], linestyle='--', xmin=ep_xmin, xmax=1, alpha=1, color='lime')  # ep line axhline  \n","  plt.text(x1, ep_tp_list[t_i][0][0], ' ep :\\n %s' % ep_tp_list[t_i][0][0], ha='left', va='center', fontweight='bold') # ep line label\n","\n","  \n","  # ------------- tp ------------- #\n","  for sub_i in range(len(ep_tp_list[t_i][1])):\n","\n","    # tp_xmin = (prev_plotsize + (tp_idx_list_[sub_i] - ep_idx_list_[0])) / x1\n","    tp_xmin = (prev_plotsize + (tp_idx_list_[sub_i] - open_idx)) / x1\n","    plt.axhline(ep_tp_list[t_i][1][sub_i], linestyle='--', xmin=tp_xmin , xmax=1, alpha=1, color='lime')  # tp line axhline\n","    plt.text(x1, ep_tp_list[t_i][1][sub_i], ' tp :\\n %s' % ep_tp_list[t_i][1][sub_i], ha='left', va='center', fontweight='bold') # tp line label\n","     \n","    # plt.axvline(prev_plotsize + (tp_idx_list_[sub_i] - ep_idx_list_[0]), alpha=1., linestyle='--', color='#ffeb3b', zorder=2)\n","    plt.axvline(prev_plotsize + (tp_idx_list_[sub_i] - open_idx), alpha=1., linestyle='--', color='#ffeb3b', zorder=2)\n","\n","\n","  # ------------- rtc horizontal range ------------- # --> open_idx Î°ú Ìï†ÏßÄÎäî Ï∂îÌõÑ ÏàòÏ†ï Í∂åÍ≥† (ep_loc.point2 Ïóê ÏùòÌï¥ ÏßÑÏûÖ Í∏∞Ï§Ä point Í∞Ä Î≥ÄÍ≤ΩÎê† Ïàò ÏûàÏùå)\n","  # rtc_ratio_list = [0.272, 0.36, 0.4, 0.5]\n","  rtc_ratio_list = [0.]\n","  if open_side == config.ep_set.short_entry_score:\n","    # plt.axhline(res_df['short_rtc_1'].iloc[open_idx], linewidth=.5, linestyle='-', alpha=1, color='#ffffff')\n","    # plt.axhline(res_df['short_rtc_0'].iloc[open_idx], linewidth=.5, linestyle='-', alpha=1, color='#ffffff')\n","    out_line = res_df['short_out_{}'.format(strat_version)].iloc[out_idx_list_[0]]\n","    plt.axhline(out_line, linewidth=.5, linestyle='-', alpha=1, color='#ffffff')\n","    plt.text(x0, out_line, ' %s' % config.tr_set.out_gap, ha='left', va='center', fontweight='bold')\n","\n","    for rtc_k in rtc_ratio_list:\n","      plt.axhline(res_df['h_short_rtc_1_{}'.format(strat_version)].iloc[open_idx] - res_df['h_short_rtc_gap_{}'.format(strat_version)].iloc[open_idx] * rtc_k, linewidth=.5, linestyle='-', alpha=1, color='#ffffff')\n","      plt.text(x0, res_df['h_short_rtc_1_{}'.format(strat_version)].iloc[open_idx] - res_df['h_short_rtc_gap_{}'.format(strat_version)].iloc[open_idx] * rtc_k, ' %s' % rtc_k, ha='left', va='center', fontweight='bold')\n","      \n","    y_max = out_line\n","    y_min = res_df['h_short_rtc_1_{}'.format(strat_version)].iloc[tp_idx_list_[-1]] - res_df['h_short_rtc_gap_{}'.format(strat_version)].iloc[tp_idx_list_[-1]] * rtc_k\n","\n","    print(\"short_tp :\", res_df['short_tp_{}'.format(strat_version)].iloc[tp_idx_list_[-1]])\n","    print(\"short_out :\", out_line)\n","\n","  else:\n","    # plt.axhline(res_df['long_rtc_1'].iloc[open_idx], linewidth=.5, linestyle='-', alpha=1, color='#ffffff')\n","    # plt.axhline(res_df['long_rtc_0'].iloc[open_idx], linewidth=.5, linestyle='-', alpha=1, color='#ffffff') \n","    out_line = res_df['long_out_{}'.format(strat_version)].iloc[out_idx_list_[0]]\n","    plt.axhline(out_line, linewidth=.5, linestyle='-', alpha=1, color='#ffffff')\n","    plt.text(x0, out_line, ' %s' % config.tr_set.out_gap, ha='left', va='center', fontweight='bold')\n","\n","    for rtc_k in rtc_ratio_list:\n","      plt.axhline(res_df['h_long_rtc_1_{}'.format(strat_version)].iloc[open_idx] + res_df['h_long_rtc_gap_{}'.format(strat_version)].iloc[open_idx] * rtc_k, linewidth=.5, linestyle='-', alpha=1, color='#ffffff')\n","      plt.text(x0, res_df['h_long_rtc_1_{}'.format(strat_version)].iloc[open_idx] + res_df['h_long_rtc_gap_{}'.format(strat_version)].iloc[open_idx] * rtc_k, ' %s' % rtc_k, ha='left', va='center', fontweight='bold')\n","\n","    y_max = res_df['h_long_rtc_1_{}'.format(strat_version)].iloc[tp_idx_list_[-1]] + res_df['h_long_rtc_gap_{}'.format(strat_version)].iloc[tp_idx_list_[-1]] * rtc_k\n","    y_min = out_line\n","\n","    print(\"long_tp :\", res_df['long_tp_{}'.format(strat_version)].iloc[tp_idx_list_[-1]])\n","    print(\"long_out :\", out_line)\n","  \n","    # t_tr = ((res_df['long_tp'].iloc[open_idx] - res_df['close'].iloc[open_idx] - tp_fee * res_df['close'].iloc[open_idx]) / (res_df['close'].iloc[open_idx] - res_df['long_out'].iloc[open_idx] + out_fee * res_df['close'].iloc[open_idx]))\n","    # t_dr = ((res_df['long_tp'].iloc[open_idx] - res_df['close'].iloc[open_idx]) / (res_df['close'].iloc[open_idx] - res_df['long_out'].iloc[open_idx]))     \n","    # print(\"t_tr :\", t_tr)\n","    # print(\"t_dr :\", t_dr)\n","\n","  #         hedge ep & tp         #\n","  h_i = h_trade_list[t_i][1]\n","  if h_i is not None:\n","    # plt.axvline(prev_plotsize + (h_i - ep_idx_list_[0]), linestyle='--')\n","    plt.axvline(prev_plotsize + (h_i - open_idx), linestyle='--')\n","    plt.axhline(h_ep_tp_list[t_i][0], linestyle='-', xmin=0.75, xmax=1, linewidth=3, color='magenta')  # ep line axhline\n","    plt.axhline(h_ep_tp_list[t_i][1], linestyle='-', xmin=0.85, xmax=1, linewidth=3, color='magenta')  # tp line axhline\n","\n","  \n","  #         check pr        #\n","  if not config.lvrg_set.static_lvrg:\n","    \n","    #   list length Îßå sync ÎßûÏúºÎ©¥ t_i Í±±Ï†ï ÏïàÌï¥ÎèÑÎê®, zip Ìï¥ÏÑú ÏàúÏÑúÍ∞Ä Î∞îÎÄåÏóàÏùÑ Îøê, original serialized order ÏóêÏÑú t_i Î°ú indexing ÌïòÎäî Í≤ÉÎøêÏûÑ   #\n","    plt.title(\"%s ~ %s -> %.5f\\n %s\\n h_pr : %.5f\\n lvrg : %s\\ntp_ratio : %.3f\\n dr : %.3f\\n fee : %.4f\" % (ep_idx_list_[0], tp_idx_list_[-1], plot_pr_list[t_i], tp_state_list[t_i], \n","                                                                                                h_plot_pr_list[t_i], leverage_list[t_i], tp_ratio_list[t_i], dr_list[t_i], fee_list[t_i]))\n","\n","    print(\"short real pr :\", (ep_tp_list[t_i][0] / ep_tp_list[t_i][1][sub_i] - fee_list[t_i] - 1) * leverage_list[t_i] + 1)\n","    print(\"long real pr :\", (ep_tp_list[t_i][1][sub_i] / ep_tp_list[t_i][0] - fee_list[t_i] - 1) * leverage_list[t_i] + 1)    \n","\n","  else:\n","    plt.title(\"%s ~ %s -> %.5f\\n %s\\n h_pr : %.5f\\n tp_ratio : %.3f\\n dr : %.3f\\n fee : %.4f\" % (ep_idx_list_[0], tp_idx_list_[-1], plot_pr_list[t_i], tp_state_list[t_i], \n","                                                                                     h_plot_pr_list[t_i], tp_ratio_list[t_i], dr_list[t_i], fee_list[t_i]))\n","\n","    print(\"short real pr :\", (ep_tp_list[t_i][0] / ep_tp_list[t_i][1][sub_i] - fee_list[t_i] - 1) * config.lvrg_set.leverage + 1)\n","    print(\"long real pr :\", (ep_tp_list[t_i][1][sub_i] / ep_tp_list[t_i][0] - fee_list[t_i] - 1) * config.lvrg_set.leverage + 1)\n","  \n","  #           y lim           #  \n","  y_max_ = max(np.max(plot_df[yrange_colname]))\n","  y_min_ = min(np.min(plot_df[yrange_colname]))\n","  y_max = max(y_max, y_max_)\n","  y_min = min(y_min, y_min_)\n","  \n","  # hy_min = np.min(plot_df['short_dtk_1'].values - plot_df['short_dtk_gap'].values * 0.36)\n","  # hy_max = np.max(plot_df['long_dtk_1'].values + plot_df['long_dtk_gap'].values * 0.36)  \n","  # y_max = max(y_max, y_max_, hy_max)\n","  # y_min = min(y_min, y_min_, hy_min)\n","\n","  if np.isnan(y_max) or np.isnan(y_min):\n","    print('continued in yminmax')\n","    continue\n","  # print(\"y_max, y_min :\", y_max, y_min)\n","  # break\n","  \n","\n","  plt.ylim(y_min, y_max)\n","\n","  # ---------------------- plot ---------------------- #\n","\n","  # #           rsi          #    \n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for rsi_ in rsi_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[rsi_].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axhline(50, linestyle='--')\n","  # plt.axhline(rsi_upper, linestyle='--')\n","  # plt.axhline(rsi_lower, linestyle='--')\n","  \n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  \n","  #           cci          #    \n","  plt.subplot(gs[1])\n","  alpha = 1\n","  for cci_ in cci_list:\n","    plt.step(np.arange(len(plot_df)), plot_df[cci_].values, 'g', alpha=alpha)\n","    # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","    alpha -= 0.2\n","  plt.axhline(50, linestyle='--')\n","  plt.axhline(cci_upper, linestyle='--')\n","  plt.axhline(cci_lower, linestyle='--')\n","  \n","  plt.axvline(prev_plotsize, linestyle='--')\n","\n","  #     vline open     #\n","  for ep_i in range(len(ep_idx_list_)):\n","    plt.axvline(prev_plotsize + (ep_idx_list_[ep_i] - open_idx), alpha=0.7, linestyle='--', color='#ffeb3b')\n","  \n","  #     vline close     #\n","  for sub_i in range(len(ep_tp_list[t_i][1])):\n","    plt.axvline(prev_plotsize + (tp_idx_list_[sub_i] - open_idx), alpha=1., linestyle='--', color='#ffeb3b', zorder=2)\n","\n","\n","  if not save_plot:\n","    plt.show()\n","  \n","  else:\n","    # ---------- save mode ---------- #\n","    fig_name = plot_check_dir +  \"/%s.png\" % t_i\n","    plt.savefig(fig_name)\n","    print(fig_name, \"saved !\")\n","\n","  \n","  plt.close()\n","  print()\n","\n","  # break\n"]},{"cell_type":"markdown","metadata":{"id":"13a-U32Uy50I"},"source":["### brief np_pr survey"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":430},"executionInfo":{"elapsed":1018,"status":"ok","timestamp":1639013719005,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"L9LdjV2uUWnp","outputId":"dd374aaf-e8a4-4c03-a700-eb8400eb9f65"},"outputs":[{"data":{"image/png":"\n","text/plain":["<Figure size 640x480 with 1 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["# plot_pr_list[:100]\n","\n","plt.plot(np_pr)\n","plt.axhline(1)\n","plt.show()"]},{"cell_type":"markdown","metadata":{"id":"TBE0l6dHRYrE"},"source":["### whole pr & chart sync"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":877},"executionInfo":{"elapsed":1436,"status":"ok","timestamp":1636355589887,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"-txULkhXRbz5","outputId":"7cda9fc7-4a4e-4c52-ffa3-a974b5f7c66f"},"outputs":[{"data":{"image/png":"\n","text/plain":["<Figure size 640x480 with 3 Axes>"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["\n"]},{"data":{"image/png":"\n","text/plain":["<Figure size 640x480 with 3 Axes>"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["\n"]}],"source":["#     chunky survey ÌïÑÏöîÌï®    #\n","chunk_size = 50000\n","\n","sync_pr = np.ones(len(res_df))\n","sync_tr = np.zeros(len(res_df))\n","# sync_tr = np.empty(len(res_df))\n","# sync_tr[:] = np.nan\n","\n","max_tr = np.max(tp_ratio_list)\n","min_tr = np.min(tp_ratio_list)\n","\n","for ck_i in range(0, len(res_df), chunk_size):\n","\n","  chunked_df = res_df.iloc[ck_i:ck_i + chunk_size]\n","  # break\n","\n","  for pr_, eptp_idx, tr_ in zip(pr_list[ck_i:ck_i + chunk_size], trade_list[ck_i:ck_i + chunk_size], tp_ratio_list[ck_i:ck_i + chunk_size]):\n","    # print(pr_, eptp_idx)\n","    sync_pr[eptp_idx[-1][0]] = pr_\n","    sync_tr[eptp_idx[-1][0]] = tr_\n","    # break\n","\n","  chunked_pr = sync_pr[ck_i:ck_i + chunk_size]\n","  chunked_tr = sync_tr[ck_i:ck_i + chunk_size]\n","  chunked_tr = np.where(np.isnan(chunked_tr), pd.Series(chunked_tr).shift(1), chunked_tr)\n","\n","  # plt.figure(figsize=(8, 6))\n","\n","  plt.subplot(311)\n","  plt.plot(np.arange(len(chunked_df)), chunked_df['close'])\n","  # plt.show()\n","\n","  plt.subplot(312)\n","  plt.plot(np.cumprod(chunked_pr))\n","  \n","  plt.subplot(313)\n","  plt.plot(chunked_tr)\n","  plt.ylim(min_tr + 0.5 * (max_tr - min_tr), max_tr)\n","  \n","  plt.show()\n","  print()\n"]},{"cell_type":"markdown","metadata":{"id":"Qys2Bw5Ou3u9"},"source":["### plot indi. legacy"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"pi5ntOOVu6JT"},"outputs":[],"source":["\n","  # ---------------------- ma ---------------------- #\n","   # --------- ema --------- #\n","  # alpha = 1\n","  # for sm_i, item in enumerate(ema_list):\n","  #   if sm_i > 0:\n","  #     lw = 5\n","  #   else:\n","  #     lw = 2\n","  #   plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#03ed30', linewidth=lw)\n","  #   alpha -= 0.2\n","\n","  #   # --------- sma --------- #\n","  # alpha = 1\n","  # for sm_i, sma in enumerate(sma_list):\n","  #   if sm_i > 0:\n","  #     lw = 5\n","  #   else:\n","  #     lw = 4\n","  #   plt.step(np.arange(len(plot_df)), plot_df[sma].values, alpha=alpha, color='#e91e63', linewidth=lw)\n","  #   alpha -= 0.2\n","\n","  \n","  # ---------------------- cb ---------------------- #\n","  # alpha = 1\n","  # for sm_i, item in enumerate(cb_list):\n","  #   if sm_i > 0:\n","  #     lw = 5\n","  #   else:\n","  #     lw = 2\n","  #   plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#5b9cf6', linewidth=lw)\n","  #   alpha -= 0.2\n","\n","\n","  \n","  #               sar               #\n","  # alpha = 1\n","  # markersize = 5\n","  # for sar in sar_list:\n","  #   plt.step(plot_df[sar].values, 'c*', alpha=alpha, markersize=markersize, color='dodgerblue')  # sar mic\n","  #   markersize += 1\n","  #   alpha -= 0.1\n","\n","  # plt.step(plot_df.values[:, [12]], 'co', alpha=1, markersize=7)  # sar mac\n","\n","  #               cloud               #\n","  # alpha = 0.7\n","  # for senkoua, senkoub in zip(senkoua_list, senkoub_list):\n","  #   plt.fill_between(np.arange(len(plot_df)), plot_df[senkoua].values, plot_df[senkoub].values, # ichimoku\n","  #                     where=plot_df[senkoua].values >= plot_df[senkoub].values, facecolor='g', alpha=alpha) # ichimoku\n","  #   plt.fill_between(np.arange(len(plot_df)), plot_df[senkoua].values, plot_df[senkoub].values,\n","  #                     where=plot_df[senkoua].values <= plot_df[senkoub].values, facecolor='r', alpha=alpha)  \n","  #   alpha -= 0.05\n","  \n","\n","\n","  # ---------------------- outer price indi. ---------------------- #\n","  #           macd          #\n","  # plt.subplot(312)\n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for macd in macd_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[macd].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","\n","  # plt.axhline(0, linestyle='--')\n","\n","  \n","  # #           trix          #  \n","  # # plt.subplot(313)\n","  # plt.subplot(gs[2])\n","  # alpha = 1\n","  # for trix in trix_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[trix].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","  # plt.axhline(0, linestyle='--')\n","\n","  \n","  #           fisher          #  \n","  # plt.subplot(313)\n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for fisher in fisher_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[fisher].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","    \n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","\n","  # plt.axhline(0, linestyle='--')\n","  # plt.axhline(fisher_upper, linestyle='--')\n","  # plt.axhline(fisher_lower, linestyle='--')\n","\n","  #           stoch          #  \n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for stoch_ in stoch_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[stoch_].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axhline(50, linestyle='--')\n","  # plt.axhline(stoch_upper, linestyle='--')\n","  # plt.axhline(stoch_lower, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","\n","  # ---------- cctbbo ---------- #  \n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for cctbbo in cctbbo_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[cctbbo].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axhline(50, linestyle='--')\n","  # plt.axhline(cctbbo_upper, linestyle='--')\n","  # plt.axhline(cctbbo_lower, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","\n","  # ---------- ema_roc ---------- #  \n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for emaroc in emaroc_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[emaroc].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","  # plt.axhline(0, linestyle='--')\n","  \n","  # ---------- bbw ---------- #  \n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for bbwp_ in bbwp_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[bbwp_].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","  # plt.axhline(bbwp_thresh, linestyle='--')\n","\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","\n"]},{"cell_type":"markdown","metadata":{"id":"59nW2aKYzkN8"},"source":["### plot all indicator (stepline ver.)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":828},"executionInfo":{"elapsed":3326,"status":"ok","timestamp":1631665238032,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"JDH4rXgNzno6","outputId":"3ee8589d-27d7-4433-ed78-7bb1233cf175"},"outputs":[{"name":"stdout","output_type":"stream","text":["short real pr : [0.95849245]\n","long real pr : [1.0378222]\n"]},{"data":{"image/png":"\n","text/plain":["<Figure size 864x1152 with 2 Axes>"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["\n"]}],"source":["save_plot = False\n","\n","\n","if save_plot:\n","  plot_check_dir = current_path + \"plot_check/\" +  key.replace(\".xlsx\", \"\")\n","  try:\n","    os.mkdir(plot_check_dir)\n","  except:\n","\n","    #     remove existing dir   #\n","    shutil.rmtree(plot_check_dir)\n","    print(plot_check_dir, 'removed !')\n","    os.mkdir(plot_check_dir)\n","    # pass\n","    \n","# prev_plotsize = 120\n","prev_plotsize = 150\n","post_plotsize = 20\n","\n","# inversion = True\n","inversion = False\n","\n","# hedge = True\n","# hedge = False\n","\n","\n","if inversion:  \n","\n","    plot_pr_list = rev_np_pr\n","    h_plot_pr_list = h_rev_np_pr  # hedge\n","\n","else:\n","\n","    plot_pr_list = np_pr\n","    try:\n","      h_plot_pr_list = h_np_pr\n","    except Exception as e:\n","      print(\"error in h_plot_pr :\", e)\n","      h_plot_pr_list = np_pr\n","\n","\n","#         select plot columns       #\n","major_st_list = ['major_ST1_Up', 'major_ST1_Down', 'major_ST2_Up', 'major_ST2_Down', 'major_ST3_Up', 'major_ST3_Down',\n","                 'major_middle_line', 'major_upper_middle', 'major_lower_middle']\n","\n","basic_list = ['open', 'high', 'low', 'close', 'minor_ST1_Up', 'minor_ST1_Down',\n","       'minor_ST2_Up', 'minor_ST2_Down', 'minor_ST3_Up', 'minor_ST3_Down',\n","       'middle_line', 'min_upper', 'max_lower'] # + major_st_list\n","\n","\n","senkoua_list = ['senkou_a1', 'senkou_a2', 'senkou_a3', 'senkou_a4', 'senkou_a5']\n","senkoub_list = ['senkou_b1', 'senkou_b2', 'senkou_b3', 'senkou_b4', 'senkou_b5']\n","senkoua_list = ['senkou_a1',  'senkou_a2']\n","senkoub_list = ['senkou_b1',  'senkou_b2']\n","\n","# sar_list = ['sar1', 'sar2', 'sar3', 'sar4', 'sar5']\n","sar_list = ['sar1']\n","\n","# ma_list = ['sma1', 'sma4']\n","ma_list = ['ema5']\n","\n","\n","#     -------------- under price phase --------------    #\n","macd_list = ['macd_hist1', 'macd_hist2', 'macd_hist3', 'macd_hist4', 'macd_hist5']\n","# macd_list = ['macd_hist1', 'macd_hist2', 'macd_hist3']\n","# trix_list = ['trix1', 'trix2', 'trix3', 'trix4', 'trix5']\n","trix_list = ['trix1', 'trix2', 'trix3']\n","stoch_list = ['stoch']\n","fisher_list = ['fisher30', 'fisher60', 'fisher120']\n","cctbbo_list = ['cctbbo']\n","emaroc_list = ['ema_roc']\n","\n","\n","#       \n","# input_cols = basic_cols + sar_cols + ichimoku_cols + macd_cols + ichimoku_cols2\n","# input_colname = basic_list + senkoua_list + senkoub_list + sar_list + macd_list + trix_list\n","# input_colname = basic_list + senkoua_list + senkoub_list + sar_list + macd_list\n","# input_colname = basic_list + senkoua_list + senkoub_list + sar_list + macd_list + ma_list\n","# input_colname = basic_list + senkoua_list + senkoub_list + sar_list + ma_list + macd_list + stoch_list + fisher_list + cctbbo_list\n","input_colname = basic_list + major_st_list + senkoua_list + senkoub_list + sar_list + stoch_list + fisher_list + emaroc_list\n","price_colname = basic_list + senkoua_list + senkoub_list + sar_list # currently just used for ymin, ymax\n","# input_cols = basic_cols + sar_cols + ichimoku_cols + macd_cols\n","\n","\n","\n","\n","# for t_i, (initial_i, i, j) in enumerate(trade_list):\n","for t_i, (ep_idx_list_, tp_idx_list_) in enumerate(trade_list):\n","  # print(i, j)\n","\n","  if not(i >= prev_plotsize):\n","    continue\n","\n","  # if i <= 4860:\n","  # if i == 1536:\n","  # if 100 < i < 1860:\n","  if ep_idx_list_[0] == 370530:\n","    pass\n","  else:\n","    continue\n","\n","  # if tp_state_list[t_i] != 'd-open':\n","  #   continue\n","\n","  # if (entry[i] == -1) and res_df['close'].iloc[i - 1] > short_ep.iloc[i]:\n","  #   pass\n","  # else:\n","  #   continue\n","\n","  # if plot_pr_list[t_i] > 0.5:\n","  # if plot_pr_list[t_i] > 1.0:\n","  # # if plot_pr_list[t_i] < 1.0:\n","  #   continue\n","\n","  # plot_df = res_df.iloc[i - prev_plotsize:j + post_plotsize, input_cols]\n","  plot_df = res_df.iloc[ep_idx_list_[0] - prev_plotsize:tp_idx_list_[-1] + post_plotsize][input_colname]\n","\n","\n","  #       keep off-color st with another variable         #\n","  # st_trend_plot_df = res_df.iloc[ep_idx_list_[0] - prev_plotsize:tp_idx_list_[-1] + post_plotsize, [7, 10, 13]]\n","  # st_trend_plot_df = res_df[['minor_ST1_Trend', 'minor_ST2_Trend', 'minor_ST3_Trend']].iloc[ep_idx_list_[0] - prev_plotsize:tp_idx_list_[-1] + post_plotsize]\n","  st_trend_plot_df = res_df[['minor_ST1_Trend', 'minor_ST2_Trend', 'minor_ST3_Trend', 'major_ST1_Trend', 'major_ST2_Trend', 'major_ST3_Trend']].iloc[ep_idx_list_[0] - prev_plotsize:tp_idx_list_[-1] + post_plotsize]\n","  # htf_st_trend_plot_df = res_df[['major_ST1_Trend', 'major_ST2_Trend', 'major_ST3_Trend']].iloc[ep_idx_list_[0] - prev_plotsize:tp_idx_list_[-1] + post_plotsize]\n","\n","  # y_max = np.max(plot_df.iloc[:, [4, 6, 8]])\n","  # y_min = np.min(plot_df.iloc[:, [5, 7, 9]])\n","  # print(\"y_max, y_min :\", y_max, y_min)\n","  \n","  # y_max = max(np.max(plot_df.iloc[:, [4, 6, 8]]))\n","  # y_min = min(np.min(plot_df.iloc[:, [5, 7, 9]]))\n","  \n","  y_max = max(np.max(plot_df[price_colname]))\n","  y_min = min(np.min(plot_df[price_colname]))\n","\n","  if np.isnan(y_max) or np.isnan(y_min):\n","    continue\n","  # print(\"y_max, y_min :\", y_max, y_min)\n","  # break\n","  \n","  plot_df[\"off_color_upper_st1\"] = np.where(st_trend_plot_df['minor_ST1_Trend'] == 1, plot_df['minor_ST1_Up'], np.nan)\n","  plot_df[\"off_color_upper_st2\"] = np.where(st_trend_plot_df['minor_ST2_Trend'] == 1, plot_df['minor_ST2_Up'], np.nan)\n","  plot_df[\"off_color_upper_st3\"] = np.where(st_trend_plot_df['minor_ST3_Trend'] == 1, plot_df['minor_ST3_Up'], np.nan)\n","  plot_df[\"off_color_lower_st1\"] = np.where(st_trend_plot_df['minor_ST1_Trend'] == -1, plot_df['minor_ST1_Down'], np.nan)\n","  plot_df[\"off_color_lower_st2\"] = np.where(st_trend_plot_df['minor_ST2_Trend'] == -1, plot_df['minor_ST2_Down'], np.nan)\n","  plot_df[\"off_color_lower_st3\"] = np.where(st_trend_plot_df['minor_ST3_Trend'] == -1, plot_df['minor_ST3_Down'], np.nan)\n","\n","  plot_df[\"off_color_upper_hst1\"] = np.where(st_trend_plot_df['major_ST1_Trend'] == 1, plot_df['major_ST1_Up'], np.nan)\n","  plot_df[\"off_color_upper_hst2\"] = np.where(st_trend_plot_df['major_ST2_Trend'] == 1, plot_df['major_ST2_Up'], np.nan)\n","  plot_df[\"off_color_upper_hst3\"] = np.where(st_trend_plot_df['major_ST3_Trend'] == 1, plot_df['major_ST3_Up'], np.nan)\n","  plot_df[\"off_color_lower_hst1\"] = np.where(st_trend_plot_df['major_ST1_Trend'] == -1, plot_df['major_ST1_Down'], np.nan)\n","  plot_df[\"off_color_lower_hst2\"] = np.where(st_trend_plot_df['major_ST2_Trend'] == -1, plot_df['major_ST2_Down'], np.nan)\n","  plot_df[\"off_color_lower_hst3\"] = np.where(st_trend_plot_df['major_ST3_Trend'] == -1, plot_df['major_ST3_Down'], np.nan)\n","\n","\n","  #       replace st values with np.nan, using st trend     #\n","  plot_df['minor_ST1_Up'] = np.where(st_trend_plot_df['minor_ST1_Trend'] == 1, np.nan, plot_df['minor_ST1_Up'])\n","  plot_df['minor_ST2_Up'] = np.where(st_trend_plot_df['minor_ST2_Trend'] == 1, np.nan, plot_df['minor_ST2_Up'])\n","  plot_df['minor_ST3_Up'] = np.where(st_trend_plot_df['minor_ST3_Trend'] == 1, np.nan, plot_df['minor_ST3_Up'])\n","  plot_df['minor_ST1_Down'] = np.where(st_trend_plot_df['minor_ST1_Trend'] == -1, np.nan, plot_df['minor_ST1_Down'])\n","  plot_df['minor_ST2_Down'] = np.where(st_trend_plot_df['minor_ST2_Trend'] == -1, np.nan, plot_df['minor_ST2_Down'])\n","  plot_df['minor_ST3_Down'] = np.where(st_trend_plot_df['minor_ST3_Trend'] == -1, np.nan, plot_df['minor_ST3_Down'])\n","\n","  plot_df['major_ST1_Up'] = np.where(st_trend_plot_df['major_ST1_Trend'] == 1, np.nan, plot_df['major_ST1_Up'])\n","  plot_df['major_ST2_Up'] = np.where(st_trend_plot_df['major_ST2_Trend'] == 1, np.nan, plot_df['major_ST2_Up'])\n","  plot_df['major_ST3_Up'] = np.where(st_trend_plot_df['major_ST3_Trend'] == 1, np.nan, plot_df['major_ST3_Up'])\n","  plot_df['major_ST1_Down'] = np.where(st_trend_plot_df['major_ST1_Trend'] == -1, np.nan, plot_df['major_ST1_Down'])\n","  plot_df['major_ST2_Down'] = np.where(st_trend_plot_df['major_ST2_Trend'] == -1, np.nan, plot_df['major_ST2_Down'])\n","  plot_df['major_ST3_Down'] = np.where(st_trend_plot_df['major_ST3_Trend'] == -1, np.nan, plot_df['major_ST3_Down'])\n","\n","\n","  plot_short_ep = short_ep.iloc[ep_idx_list_[0] - prev_plotsize:tp_idx_list_[-1] + post_plotsize]\n","  plot_long_ep = long_ep.iloc[ep_idx_list_[0] - prev_plotsize:tp_idx_list_[-1] + post_plotsize]\n","\n","  plot_upper_middle = (plot_df['middle_line'] + plot_df['min_upper']) / 2\n","  plot_lower_middle = (plot_df['middle_line'] + plot_df['max_lower']) / 2\n","\n","  plot_short_tp = short_tp.iloc[ep_idx_list_[0] - prev_plotsize:tp_idx_list_[-1] + post_plotsize]\n","  plot_long_tp = long_tp.iloc[ep_idx_list_[0] - prev_plotsize:tp_idx_list_[-1] + post_plotsize]  \n","\n","\n","  # fig = trendln.plot_support_resistance(plot_df['close'], accuracy=8, fromwindows=False, numbest=1,  window=30) # requires matplotlib - pip install matplotlib\n","\n","  fig = plt.figure(figsize=(12, 16))\n","  \n","  gs = gridspec.GridSpec(nrows=3, # row Î™á Í∞ú \n","                       ncols=1, # col Î™á Í∞ú \n","                       height_ratios=[3, 1, 1]\n","                      )\n","  \n","  # fig = plt.figure(figsize=(8, 12))\n","  # ax = fig.add_subplot(111)\n","  # ax = fig.add_subplot(311)\n","  ax = fig.add_subplot(gs[0])\n","\n","  # fig.show()\n","  # fig.canvas.draw()\n","\n","  temp_ohlc = plot_df.values[:, :4]\n","  index = np.arange(len(temp_ohlc))\n","  candle = np.hstack((np.reshape(index, (-1, 1)), temp_ohlc))\n","  mf.candlestick_ohlc(ax, candle, width=0.5, colorup='r', colordown='b')\n","\n","  plt.step(plot_df[['minor_ST1_Up', 'minor_ST2_Up', 'minor_ST3_Up']].values, 'r', alpha=1)  # upper on color\n","  plt.step(plot_df[['minor_ST1_Down', 'minor_ST2_Down', 'minor_ST3_Down']].values, 'b', alpha=1)  # lower on color\n","  \n","  plt.step(plot_df[['major_ST1_Up', 'major_ST2_Up', 'major_ST3_Up']].values, 'r', alpha=1, linewidth=3)  # major upper on color\n","  plt.step(plot_df[['major_ST1_Down', 'major_ST2_Down', 'major_ST3_Down']].values, 'b', alpha=1, linewidth=3)  # major lower on color\n","\n","  plt.step(plot_df[['middle_line']].values, 'fuchsia', alpha=1)  # middle \n","  plt.step(plot_df[['major_middle_line']].values, 'fuchsia', alpha=1, linewidth=3)  # major_middle \n","  \n","  plt.step(plot_df[['off_color_upper_st1', 'off_color_upper_st2', 'off_color_upper_st3']].values, 'r', alpha=1, linestyle=':')  # upper off color\n","  plt.step(plot_df[['off_color_lower_st1', 'off_color_lower_st2', 'off_color_lower_st3']].values, 'b', alpha=1, linestyle=':')  # lower off color\n","  \n","  plt.step(plot_df[['off_color_upper_hst1', 'off_color_upper_hst2', 'off_color_upper_hst3']].values, 'r', alpha=1, linestyle=':', linewidth=3)  # major upper off color\n","  plt.step(plot_df[['off_color_lower_hst1', 'off_color_lower_hst2', 'off_color_lower_hst3']].values, 'b', alpha=1, linestyle=':', linewidth=3)  # major lower off color\n","\n","\n","  # plt.step(np.arange(len(plot_df)), plot_short_ep.values, alpha=1, linestyle='--', color='y')  # ep\n","  # plt.step(np.arange(len(plot_df)),plot_long_ep.values, alpha=1, linestyle='--', color='y')  # ep\n","\n","  plt.step(np.arange(len(plot_df)), plot_upper_middle.values, alpha=1, linestyle='--', color='g')  # 2nd middle\n","  plt.step(np.arange(len(plot_df)), plot_lower_middle.values, alpha=1, linestyle='--', color='g')  # 2nd middle\n","\n","  plt.step(plot_df[['major_upper_middle']].values, 'g', linestyle='--', alpha=1, linewidth=3)  # major_middle \n","  plt.step(plot_df[['major_lower_middle']].values, 'g', linestyle='--', alpha=1, linewidth=3)  # major_middle \n","  \n","\n","  # plt.step(np.arange(len(plot_df)), plot_short_tp.values, alpha=1, linestyle=':', color='y')  # tp\n","  # plt.step(np.arange(len(plot_df)), plot_long_tp.values, alpha=1, linestyle=':', color='y')  # tp\n","\n","\n","\n","  # ---------------------- on price indicator part ---------------------- #\n","\n","  # ---------------------- sma ---------------------- #\n","  # alpha = 1\n","  # for sm_i, sma in enumerate(ma_list):\n","  #   if sm_i > 0:\n","  #     lw = 5\n","  #   else:\n","  #     lw = 2\n","  #   plt.step(np.arange(len(plot_df)), plot_df[sma].values, alpha=alpha, color='black', linewidth=lw)\n","  #   alpha -= 0.2\n","  \n","  #               sar               #\n","  alpha = 1\n","  markersize = 5\n","  for sar in sar_list:\n","    plt.step(plot_df[sar].values, 'c*', alpha=alpha, markersize=markersize, color='dodgerblue')  # sar mic\n","    markersize += 1\n","    alpha -= 0.1\n","\n","  # plt.step(plot_df.values[:, [12]], 'co', alpha=1, markersize=7)  # sar mac\n","\n","  #               cloud               #\n","  alpha = 0.7\n","  for senkoua, senkoub in zip(senkoua_list, senkoub_list):\n","    plt.fill_between(np.arange(len(plot_df)), plot_df[senkoua].values, plot_df[senkoub].values, # ichimoku\n","                      where=plot_df[senkoua].values >= plot_df[senkoub].values, facecolor='g', alpha=alpha) # ichimoku\n","    plt.fill_between(np.arange(len(plot_df)), plot_df[senkoua].values, plot_df[senkoub].values,\n","                      where=plot_df[senkoua].values <= plot_df[senkoub].values, facecolor='r', alpha=alpha)  \n","    alpha -= 0.05\n","  \n","  # ------------------------------------------------------------- #\n","\n","\n","  #       ep & tp     #\n","  # if i != initial_i:\n","  # if len(ep_idx_list_) > 1:\n","  \n","  # ------------- initial order ------------- #\n","  plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_list[t_i]), alpha=0.5, linestyle='--', color='lime')\n","\n","  for ep_i in range(len(ep_idx_list_)):\n","    plt.axvline(prev_plotsize + (ep_idx_list_[ep_i] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","\n","  # plt.axvline(prev_plotsize, alpha=0.5, linestyle='--')\n","  plt.axhline(ep_tp_list[t_i][0], linestyle='-', xmin=0.75, xmax=1, linewidth=3, color='lime')  # ep line axhline\n","\n","  for sub_i in range(len(ep_tp_list[t_i][1])):\n","    plt.axhline(ep_tp_list[t_i][1][sub_i], linestyle='-', xmin=0.75 + 0.05 * (sub_i + 1) , xmax=1, linewidth=3, color='lime')  # tp line axhline\n","    # plt.axhline(ep_tp_list[t_i][1], linestyle='-', xmin=0.9, xmax=1, linewidth=3)  # tp line axhline  \n","    plt.axvline(prev_plotsize + (tp_idx_list_[sub_i] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","\n","\n","  #         hedge ep & tp         #\n","  h_i = h_trade_list[t_i][1]\n","  if h_i is not None:\n","    plt.axvline(prev_plotsize + (h_i - ep_idx_list_[0]), linestyle='--')\n","    plt.axhline(h_ep_tp_list[t_i][0], linestyle='-', xmin=0.75, xmax=1, linewidth=3, color='magenta')  # ep line axhline\n","    plt.axhline(h_ep_tp_list[t_i][1], linestyle='-', xmin=0.85, xmax=1, linewidth=3, color='magenta')  # tp line axhline\n","\n","  \n","  #         check pr        #\n","  if not static_lvrg:\n","    plt.title(\"%s ~ %s -> %.5f\\n %s\\n h_pr : %.5f\\nlvrg : %s\\ntp_ratio : %.2f\" % (ep_idx_list_[0], tp_idx_list_[-1], plot_pr_list[t_i], tp_state_list[t_i], h_plot_pr_list[t_i], lvrg_list[t_i], tp_ratio_list[t_i]))\n","  else:\n","    plt.title(\"%s ~ %s -> %.5f\\n %s\\n h_pr : %.5f\\ntp_ratio : %.2f\" % (ep_idx_list_[0], tp_idx_list_[-1], plot_pr_list[t_i], tp_state_list[t_i], h_plot_pr_list[t_i], tp_ratio_list[t_i]))\n","\n","  print(\"short real pr :\", (ep_tp_list[t_i][0] / ep_tp_list[t_i][1][sub_i] - fee - 1) * lvrg + 1)\n","  print(\"long real pr :\", (ep_tp_list[t_i][1][sub_i] / ep_tp_list[t_i][0] - fee - 1) * lvrg + 1)\n","\n","  #           y lim         #\n","  plt.ylim(y_min, y_max)\n","\n","\n","  # ---------------------- outer price indi. ---------------------- #\n","  #           macd          #\n","  # plt.subplot(312)\n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for macd in macd_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[macd].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_list[t_i]), alpha=0.5, linestyle='--', color='lime')\n","\n","  # plt.axhline(0, linestyle='--')\n","\n","  \n","  # #           trix          #  \n","  # # plt.subplot(313)\n","  # plt.subplot(gs[2])\n","  # alpha = 1\n","  # for trix in trix_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[trix].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_list[t_i]), alpha=0.5, linestyle='--', color='lime')\n","  # plt.axhline(0, linestyle='--')\n","\n","  \n","  #           fisher          #  \n","  # plt.subplot(313)\n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for fisher in fisher_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[fisher].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","    \n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_list[t_i]), alpha=0.5, linestyle='--', color='lime')\n","\n","  # plt.axhline(0, linestyle='--')\n","  # plt.axhline(fisher_upper, linestyle='--')\n","  # plt.axhline(fisher_lower, linestyle='--')\n","\n","  #           stoch          #  \n","  # # plt.subplot(313)\n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for stoch in stoch_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[stoch].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axhline(50, linestyle='--')\n","  # plt.axhline(stoch_upper, linestyle='--')\n","  # plt.axhline(stoch_lower, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_list[t_i]), alpha=0.5, linestyle='--', color='lime')\n","\n","  # ---------- cctbbo ---------- #  \n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for cctbbo in cctbbo_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[cctbbo].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axhline(50, linestyle='--')\n","  # plt.axhline(cctbbo_upper, linestyle='--')\n","  # plt.axhline(cctbbo_lower, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_list[t_i]), alpha=0.5, linestyle='--', color='lime')\n","\n","  # ---------- ema_roc ---------- #  \n","  plt.subplot(gs[1])\n","  alpha = 1\n","  for emaroc in emaroc_list:\n","    plt.step(np.arange(len(plot_df)), plot_df[emaroc].values, 'g', alpha=alpha)\n","    # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","    alpha -= 0.2\n","  plt.axvline(prev_plotsize, linestyle='--')\n","  plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_list[t_i]), alpha=0.5, linestyle='--', color='lime')\n","  plt.axhline(0, linestyle='--')\n","\n","\n","\n","\n","\n","  # ---------------------- plot ---------------------- #\n","\n","  if not save_plot:\n","    plt.show()\n","  \n","  else:\n","    # ---------- save mode ---------- #\n","    fig_name = plot_check_dir +  \"/%s.png\" % t_i\n","    plt.savefig(fig_name)\n","    print(fig_name, \"saved !\")\n","\n","  \n","  plt.close()\n","  print()\n","\n","  # break\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"KGuJu2j4Aby9"},"outputs":[],"source":["# print()\n","for item in os.listdir(current_path + \"plot_check/\"):\n","  if item.endswith('png'):\n","    os.remove(current_path + \"plot_check/\" + item)\n","    print(current_path + \"plot_check/\" + item, \"removed !\")"]},{"cell_type":"markdown","metadata":{"id":"cj9X6S1jJjER"},"source":["### plot nontp case"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Gb1jGrS4Jl8A"},"outputs":[],"source":["prev_plotsize = 50\n","\n","# inversion = True\n","inversion = False\n","\n","# hedge = True\n","# hedge = False\n","\n","short_ver = False\n","\n","\n","if inversion:  \n","\n","    plot_pr_list = rev_np_pr\n","    h_plot_pr_list = h_rev_np_pr  # hedge\n","\n","else:\n","\n","    plot_pr_list = np_pr\n","    h_plot_pr_list = h_np_pr\n","\n","\n","\n","#         select plot columns       #\n","# basic_cols = [0, 1, 2, 3, 5, 6, 8, 9, 11, 12, 14] # you don't need to touch\n","\n","# sar_cols = [15, 18] # 15 ~ 19\n","# ichimoku_cols = [20, 21]  # 20 ~ 29\n","# # ichimoku_cols = [22, 23]  # 20 ~ 29\n","# ichimoku_cols2 = [22, 23]  # 20 ~ 29\n","# macd_cols = [30]  # 30 ~ 34\n","\n","# print(res_df.columns[basic_cols])\n","# break\n","\n","basic_list = ['open', 'high', 'low', 'close', 'minor_ST1_Up', 'minor_ST1_Down',\n","       'minor_ST2_Up', 'minor_ST2_Down', 'minor_ST3_Up', 'minor_ST3_Down',\n","       'middle_line', 'min_upper', 'max_lower']\n","# senkoua_list = ['senkou_a1', 'senkou_a2', 'senkou_a3', 'senkou_a4', 'senkou_a5']\n","# senkoub_list = ['senkou_b1', 'senkou_b2', 'senkou_b3', 'senkou_b4', 'senkou_b5']\n","senkoua_list = ['senkou_a1', 'senkou_a2', 'senkou_a3']\n","senkoub_list = ['senkou_b1', 'senkou_b2', 'senkou_b3']\n","# sar_list = ['sar1', 'sar2', 'sar3', 'sar4', 'sar5']\n","# sar_list = ['sar1', 'sar2', 'sar3', 'sar4', 'sar5']\n","sar_list = ['sar1', 'sar2', 'sar3']\n","sar_list = ['sar1', 'sar2', 'sar3']\n","\n","#     -------------- under price phase --------------    #\n","macd_list = ['macd_hist1', 'macd_hist2', 'macd_hist3', 'macd_hist4', 'macd_hist5']\n","trix_list = ['trix1', 'trix2', 'trix3', 'trix4', 'trix5']\n","stoch_list = ['stoch']\n","fisher_list = ['fisher']\n","cctbbo_list = ['cctbbo']\n","\n","\n","#       \n","# input_cols = basic_cols + sar_cols + ichimoku_cols + macd_cols + ichimoku_cols2\n","# input_colname = basic_list + senkoua_list + senkoub_list + sar_list + macd_list + trix_list\n","input_colname = basic_list + senkoua_list + senkoub_list + sar_list + macd_list + stoch_list + fisher_list + cctbbo_list\n","price_colname = basic_list + senkoua_list + senkoub_list + sar_list \n","# input_cols = basic_cols + sar_cols + ichimoku_cols + macd_cols\n","\n","\n","if short_ver:\n","  nontp_indexs = nontp_short_indexs\n","  nontp_liqd_list = nontp_short_liqd_list\n","  nontp_pr_list = nontp_short_pr_list\n","  nontp_ep = nontp_short_ep_list\n","else:\n","  nontp_indexs = nontp_long_indexs\n","  nontp_liqd_list = nontp_long_liqd_list\n","  nontp_pr_list = nontp_long_pr_list\n","  nontp_ep = nontp_long_ep_list\n","\n","\n","for t_i, i in enumerate(nontp_indexs):\n","\n","  j = len(res_df) - 1\n","\n","  # print(i, j)\n","\n","  if not(i >= prev_plotsize):\n","    continue\n","\n","  # if i <= 4860:\n","  # if i == 1536:\n","  # # if 1800 < i < 1860:\n","  #   pass\n","  # else:\n","  #   continue\n","\n","  # if tp_state_list[t_i] != 'd-open':\n","  #   continue\n","\n","  # if (entry[i] == -1) and res_df['close'].iloc[i - 1] > upper_ep.iloc[i]:\n","  #   pass\n","  # else:\n","  #   continue\n","\n","  # if plot_pr_list[t_i] > 0.5:\n","  # if plot_pr_list[t_i] > 1.0:\n","  # # if plot_pr_list[t_i] < 1.0:\n","  #   continue\n","\n","  # plot_df = res_df.iloc[i - prev_plotsize:j + 1, input_cols]\n","  plot_df = res_df.iloc[i - prev_plotsize:j + 1][input_colname]\n","\n","\n","  #       keep off-color st with another variable         #\n","  st_trend_plot_df = res_df.iloc[i - prev_plotsize:j + 1, [7, 10, 13]]\n","\n","  # y_max = np.max(plot_df.iloc[:, [4, 6, 8]])\n","  # y_min = np.min(plot_df.iloc[:, [5, 7, 9]])\n","  # print(\"y_max, y_min :\", y_max, y_min)\n","  \n","  # y_max = max(np.max(plot_df.iloc[:, [4, 6, 8]]))\n","  # y_min = min(np.min(plot_df.iloc[:, [5, 7, 9]]))\n","  \n","  y_max = max(np.max(plot_df[price_colname]))\n","  y_min = min(np.min(plot_df[price_colname]))\n","  # print(\"y_max, y_min :\", y_max, y_min)\n","  # break\n","\n","  plot_df[\"off_color_upper_st1\"] = np.where(st_trend_plot_df.iloc[:, [0]] == 1, plot_df.iloc[:, [4]], np.nan)\n","  plot_df[\"off_color_upper_st2\"] = np.where(st_trend_plot_df.iloc[:, [1]] == 1, plot_df.iloc[:, [6]], np.nan)\n","  plot_df[\"off_color_upper_st3\"] = np.where(st_trend_plot_df.iloc[:, [2]] == 1, plot_df.iloc[:, [8]], np.nan)\n","  plot_df[\"off_color_lower_st1\"] = np.where(st_trend_plot_df.iloc[:, [0]] == -1, plot_df.iloc[:, [5]], np.nan)\n","  plot_df[\"off_color_lower_st2\"] = np.where(st_trend_plot_df.iloc[:, [1]] == -1, plot_df.iloc[:, [7]], np.nan)\n","  plot_df[\"off_color_lower_st3\"] = np.where(st_trend_plot_df.iloc[:, [2]] == -1, plot_df.iloc[:, [9]], np.nan)\n","\n","\n","  #       replace st values with np.nan, using st trend     #\n","  plot_df.iloc[:, [4]] = np.where(st_trend_plot_df.iloc[:, [0]] == 1, np.nan, plot_df.iloc[:, [4]])\n","  plot_df.iloc[:, [6]] = np.where(st_trend_plot_df.iloc[:, [1]] == 1, np.nan, plot_df.iloc[:, [6]])\n","  plot_df.iloc[:, [8]] = np.where(st_trend_plot_df.iloc[:, [2]] == 1, np.nan, plot_df.iloc[:, [8]])\n","  plot_df.iloc[:, [5]] = np.where(st_trend_plot_df.iloc[:, [0]] == -1, np.nan, plot_df.iloc[:, [5]])\n","  plot_df.iloc[:, [7]] = np.where(st_trend_plot_df.iloc[:, [1]] == -1, np.nan, plot_df.iloc[:, [7]])\n","  plot_df.iloc[:, [9]] = np.where(st_trend_plot_df.iloc[:, [2]] == -1, np.nan, plot_df.iloc[:, [9]])\n","\n","\n","  plot_upper_ep = upper_ep.iloc[i - prev_plotsize:j + 1]\n","  plot_lower_ep = lower_ep.iloc[i - prev_plotsize:j + 1]\n","\n","  plot_upper_middle = (plot_df['middle_line'] + plot_df['min_upper']) / 2\n","  plot_lower_middle = (plot_df['middle_line'] + plot_df['max_lower']) / 2\n","\n","  plot_short_tp = short_tp.iloc[i - prev_plotsize:j + 1]\n","  plot_long_tp = long_tp.iloc[i - prev_plotsize:j + 1]  \n","\n","\n","\n","  # fig = plt.figure(figsize=(12, 16))\n","  fig = plt.figure(figsize=(12, 16))\n","  \n","  gs = gridspec.GridSpec(nrows=3, # row Î™á Í∞ú \n","                       ncols=1, # col Î™á Í∞ú \n","                       height_ratios=[3, 1, 1]\n","                      )\n","  \n","  # fig = plt.figure(figsize=(8, 12))\n","  # ax = fig.add_subplot(111)\n","  # ax = fig.add_subplot(311)\n","  ax = fig.add_subplot(gs[0])\n","\n","  # fig.show()\n","  # fig.canvas.draw()\n","\n","  temp_ohlc = plot_df.values[:, :4]\n","  index = np.arange(len(temp_ohlc))\n","  candle = np.hstack((np.reshape(index, (-1, 1)), temp_ohlc))\n","  mf.candlestick_ohlc(ax, candle, width=0.5, colorup='r', colordown='b')\n","\n","  # print(plot_df.values[:, 4:])\n","  plt.step(plot_df.values[:, [4, 6, 8]], 'r', alpha=1)  # upper on color\n","  # plt.plot(plot_df.values[:, [4, 6, 8]], 'r', alpha=1)  # upper on color\n","  plt.step(plot_df.values[:, [5, 7, 9]], 'b', alpha=1)  # lower on color\n","  plt.step(plot_df.values[:, [10]], 'fuchsia', alpha=1)  # middle\n","  \n","  plt.step(plot_df.values[:, -6:-3], 'r', alpha=1, linestyle=':')  # upper off color\n","  plt.step(plot_df.values[:, -3:], 'b', alpha=1, linestyle=':')  # lower off color\n","\n","\n","\n","  # plt.step(np.arange(len(plot_df)), plot_upper_ep.values, alpha=1, linestyle='--', color='y')  # ep\n","  # plt.step(np.arange(len(plot_df)),plot_lower_ep.values, alpha=1, linestyle='--', color='y')  # ep\n","\n","  plt.step(np.arange(len(plot_df)), plot_upper_middle.values, alpha=1, linestyle='--', color='g')  # 2nd middle\n","  plt.step(np.arange(len(plot_df)), plot_lower_middle.values, alpha=1, linestyle='--', color='g')  # 2nd middle\n","\n","  # plt.step(np.arange(len(plot_df)), plot_short_tp.values, alpha=1, linestyle=':', color='y')  # tp\n","  # plt.step(np.arange(len(plot_df)), plot_long_tp.values, alpha=1, linestyle=':', color='y')  # tp\n","\n","\n","\n","  # ---------------------- indicator part ---------------------- #\n","  \n","  #               sar               #\n","  alpha = 1\n","  markersize = 5\n","  for sar in sar_list:\n","    plt.step(plot_df[sar].values, 'c*', alpha=alpha, markersize=markersize, color='dodgerblue')  # sar mic\n","    markersize += 1\n","    alpha -= 0.1\n","\n","  # plt.step(plot_df.values[:, [12]], 'co', alpha=1, markersize=7)  # sar mac\n","\n","  #               cloud               #\n","  alpha = 0.7\n","  for senkoua, senkoub in zip(senkoua_list, senkoub_list):\n","    plt.fill_between(np.arange(len(plot_df)), plot_df[senkoua].values, plot_df[senkoub].values, # ichimoku\n","                      where=plot_df[senkoua].values >= plot_df[senkoub].values, facecolor='g', alpha=alpha) # ichimoku\n","    plt.fill_between(np.arange(len(plot_df)), plot_df[senkoua].values, plot_df[senkoub].values,\n","                      where=plot_df[senkoua].values <= plot_df[senkoub].values, facecolor='r', alpha=alpha)  \n","    alpha -= 0.05\n","  \n","  # ------------------------------------------------------------- #\n","\n","\n","  #       ep & tp     #\n","  if i != initial_i:\n","    plt.axvline(prev_plotsize - (i - initial_i), alpha=0.5, linestyle='--')\n","  plt.axvline(prev_plotsize, alpha=0.5, linestyle='--')\n","  plt.axhline(nontp_ep[t_i], linestyle='-', xmin=0.75, xmax=1, linewidth=3, color='lime')  # ep line axhline\n","\n","  # for sub_i in range(len(ep_tp_list[t_i][1])):\n","  #   plt.axhline(ep_tp_list[t_i][1][sub_i], linestyle='-', xmin=0.75 + 0.05 * (sub_i + 1) , xmax=1, linewidth=3, color='lime')  # tp line axhline\n","    # plt.axhline(ep_tp_list[t_i][1], linestyle='-', xmin=0.9, xmax=1, linewidth=3)  # tp line axhline    \n","\n","  #         hedge ep & tp         #\n","  # h_i = h_trade_list[t_i][1]\n","  # if h_i is not None:\n","  #   plt.axvline(prev_plotsize + (h_i - i), linestyle='--')\n","  #   plt.axhline(h_ep_tp_list[t_i][0], linestyle='-', xmin=0.75, xmax=1, linewidth=3, color='magenta')  # ep line axhline\n","  #   plt.axhline(h_ep_tp_list[t_i][1], linestyle='-', xmin=0.85, xmax=1, linewidth=3, color='magenta')  # tp line axhline\n","\n","  \n","  #         check pr        #\n","  plt.title(\"%s ~ %s -> liqd : %.2f\\npr : %.2f\" % (i, j, nontp_liqd_list[t_i], nontp_pr_list[t_i]))\n","\n","  #           y lim         #\n","  plt.ylim(y_min, y_max)\n","\n","\n","  # #           macd          #\n","  # # plt.subplot(312)\n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for macd in macd_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[macd].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axhline(0, linestyle='--')\n","\n","  \n","  # #           trix          #  \n","  # # plt.subplot(313)\n","  # plt.subplot(gs[2])\n","  # alpha = 1\n","  # for trix in trix_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[trix].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axhline(0, linestyle='--')\n","\n","  \n","  #           fisher          #  \n","  # # plt.subplot(313)\n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for fisher in fisher_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[fisher].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axhline(0, linestyle='--')\n","  # plt.axhline(fisher_upper, linestyle='--')\n","  # plt.axhline(fisher_lower, linestyle='--')\n","\n","  #           stoch          #  \n","  # plt.subplot(313)\n","  plt.subplot(gs[1])\n","  alpha = 1\n","  for stoch in stoch_list:\n","    plt.step(np.arange(len(plot_df)), plot_df[stoch].values, 'g', alpha=alpha)\n","    # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","    alpha -= 0.2\n","  plt.axvline(prev_plotsize, linestyle='--')\n","  plt.axhline(50, linestyle='--')\n","  plt.axhline(stoch_upper, linestyle='--')\n","  plt.axhline(stoch_lower, linestyle='--')\n","\n","\n","\n","  # ---------------------- plot ---------------------- #\n","\n","  plt.show()\n","  # plt.draw()\n","  plt.close()\n","  print()\n","\n","  # break\n"]},{"cell_type":"markdown","metadata":{"id":"-g7YY5BvMcLS"},"source":["### show detail values"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":255,"status":"ok","timestamp":1625228960601,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"},"user_tz":-540},"id":"5TxQ3rDnKMa7","outputId":"422ac214-8c88-4f39-ec3a-7c823574f6da"},"outputs":[{"name":"stdout","output_type":"stream","text":["upper_ep.iloc[i] : 2348.266954813089\n","short_tp.iloc[j] : 2205.609333246829\n"]}],"source":["i, j = 27267, 27268\n","print(\"upper_ep.iloc[i] :\", upper_ep.iloc[i])\n","print(\"short_tp.iloc[j] :\", short_tp.iloc[j])"]},{"cell_type":"markdown","metadata":{"id":"7AIl6EBuZNOL"},"source":["## none plot off-color st"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"yaVxrNGzZgrF"},"outputs":[],"source":["prev_plotsize = 50\n","\n","for t_i, (i, j) in enumerate(trade_list):\n","  # print(i, j)\n","\n","  if not(i >= prev_plotsize):\n","    continue\n","\n","  # if pr_list[t_i] >= 1:\n","  #   continue\n","\n","  plot_df = res_df.iloc[i - prev_plotsize:j + 1, [0, 1, 2, 3, 5, 6, 8, 9, 11, 12, 14, 15, 16]]\n","\n","  #       replace st values with np.nan, using st trend     #\n","  st_trend_plot_df = res_df.iloc[i - prev_plotsize:j + 1, [7, 10, 13]]\n","  plot_df.iloc[:, [4]] = np.where(st_trend_plot_df.iloc[:, [0]] == 1, np.nan, plot_df.iloc[:, [4]])\n","  plot_df.iloc[:, [6]] = np.where(st_trend_plot_df.iloc[:, [1]] == 1, np.nan, plot_df.iloc[:, [6]])\n","  plot_df.iloc[:, [8]] = np.where(st_trend_plot_df.iloc[:, [2]] == 1, np.nan, plot_df.iloc[:, [8]])\n","  plot_df.iloc[:, [5]] = np.where(st_trend_plot_df.iloc[:, [0]] == -1, np.nan, plot_df.iloc[:, [5]])\n","  plot_df.iloc[:, [7]] = np.where(st_trend_plot_df.iloc[:, [1]] == -1, np.nan, plot_df.iloc[:, [7]])\n","  plot_df.iloc[:, [9]] = np.where(st_trend_plot_df.iloc[:, [2]] == -1, np.nan, plot_df.iloc[:, [9]])\n","\n","\n","  plot_upper_ep = upper_ep.iloc[i - prev_plotsize:j + 1]\n","  plot_lower_ep = lower_ep.iloc[i - prev_plotsize:j + 1]\n","\n","  fig = plt.figure(figsize=(8, 6))\n","  ax = fig.add_subplot(111)\n","\n","  # fig.show()\n","  # fig.canvas.draw()\n","\n","  temp_ohlc = plot_df.values[:, :4]\n","  index = np.arange(len(temp_ohlc))\n","  candle = np.hstack((np.reshape(index, (-1, 1)), temp_ohlc))\n","  mf.candlestick_ohlc(ax, candle, width=0.5, colorup='r', colordown='b')\n","\n","  # print(plot_df.values[:, 4:])\n","  plt.plot(plot_df.values[:, [4, 6, 8]], 'r', alpha=1)  # upper\n","  plt.plot(plot_df.values[:, [5, 7, 9]], 'b', alpha=1)  # lower\n","  plt.plot(plot_df.values[:, [10]], 'g', alpha=1)  # middle\n","\n","  plt.plot(plot_df.values[:, [11]], 'c*', alpha=1, markersize=5)  # sar mic\n","  plt.plot(plot_df.values[:, [12]], 'co', alpha=1, markersize=7)  # sar mac\n","\n","  plt.plot(plot_upper_ep.values, alpha=1, linestyle='--')  # ep\n","  plt.plot(plot_lower_ep.values, alpha=1, linestyle='--')  # ep\n","\n","  plt.axvline(prev_plotsize, linestyle='--')\n","\n","  plt.title(\"%s ~ %s -> %.5f\" % (i, j, pr_list[t_i]))\n","  plt.show()\n","  # plt.draw()\n","  plt.close()"]}],"metadata":{"accelerator":"GPU","colab":{"collapsed_sections":["M8-EChy0VsDr","Iy76iO7gztne","Ic1mfmwWCIBu","Ci_jUnNTZbm9","AUSBU7T8Suzi","VdukVo5-Suzj","Bw5JibDKSuzj","Pe0QpnORSuzk","4oZ1ohTtSuzk","t1E_eAyPSuzm","dzla8i9_ysmP","vOVr2jLczFQJ","GZ0y_x9ugOUD","v2Gjv019AEz8","o-XjNS1L31YB","FxJ1y8v2fkCR","VBwVaUkvfnOd"],"name":"AT_single_v7_backi2(1222_limit).ipynb","toc_visible":true,"provenance":[],"authorship_tag":"ABX9TyP5gp4o46EZPVVGNmWH5B6Y"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"},"widgets":{"application/vnd.jupyter.widget-state+json":{"3248269ddb834177a2b9ba345f725914":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_view_name":"HBoxView","_dom_classes":[],"_model_name":"HBoxModel","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.5.0","box_style":"","layout":"IPY_MODEL_e30de8369fd0496c808858ae84d62a38","_model_module":"@jupyter-widgets/controls","children":["IPY_MODEL_e6f38efe525e45f1b3e8829c2c1f4ab2","IPY_MODEL_a437d95e0ad54294852915b1e1efcc32","IPY_MODEL_c0600a657ddd4fe4b1412dbdbe31ad98"]}},"e30de8369fd0496c808858ae84d62a38":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"e6f38efe525e45f1b3e8829c2c1f4ab2":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_view_name":"HTMLView","style":"IPY_MODEL_dcb23ab76ffb463082df93d2b28e4755","_dom_classes":[],"description":"","_model_name":"HTMLModel","placeholder":"‚Äã","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":"100%","_view_count":null,"_view_module_version":"1.5.0","description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_6cd132bb6dbe45fe8c9ae8f28cfd5061"}},"a437d95e0ad54294852915b1e1efcc32":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_view_name":"ProgressView","style":"IPY_MODEL_95bab76eb9ec41ecb69672bb7b7a4573","_dom_classes":[],"description":"","_model_name":"FloatProgressModel","bar_style":"success","max":70,"_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":70,"_view_count":null,"_view_module_version":"1.5.0","orientation":"horizontal","min":0,"description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_1a7b046717e243828bfb878a7add3f84"}},"c0600a657ddd4fe4b1412dbdbe31ad98":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_view_name":"HTMLView","style":"IPY_MODEL_bc605d72a60b4e44893ee8babc593960","_dom_classes":[],"description":"","_model_name":"HTMLModel","placeholder":"‚Äã","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":" 70/70 [38:53&lt;00:00, 231.93s/it]","_view_count":null,"_view_module_version":"1.5.0","description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_790b1bdff52747bc84a3ff4425c7b198"}},"dcb23ab76ffb463082df93d2b28e4755":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_view_name":"StyleView","_model_name":"DescriptionStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"6cd132bb6dbe45fe8c9ae8f28cfd5061":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"95bab76eb9ec41ecb69672bb7b7a4573":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_view_name":"StyleView","_model_name":"ProgressStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","bar_color":null,"_model_module":"@jupyter-widgets/controls"}},"1a7b046717e243828bfb878a7add3f84":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"bc605d72a60b4e44893ee8babc593960":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_view_name":"StyleView","_model_name":"DescriptionStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"790b1bdff52747bc84a3ff4425c7b198":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}}}}},"nbformat":4,"nbformat_minor":0}