{"cells":[{"cell_type":"code","execution_count":2,"metadata":{"id":"6rmQpzEGXfCw","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1658884002611,"user_tz":-540,"elapsed":31694,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"d5508960-6324-4bc9-c76e-d693bd98abcd"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')\n","\n","import os, sys\n","\n","current_path = '/content/drive/My Drive/Colab Notebooks/JnQ/'\n","\n","os.chdir(current_path)\n","\n","strat_pkg = 'IDE'\n","\n","mpl_finance_path = '/content/drive/My Drive/Colab Notebooks/JnQ/mpl_finance'\n","ta_lib_path = '/content/drive/My Drive/Colab Notebooks/JnQ/ta_lib'\n","\n","if mpl_finance_path not in sys.path:\n","\n","  try:\n","    sys.path.insert(0, '/content/drive/My Drive/Colab Notebooks/JnQ')\n","    sys.path.insert(0, '/content/drive/My Drive/Colab Notebooks/JnQ/{}'.format(strat_pkg))\n","    sys.path.insert(0, '/content/drive/My Drive/Colab Notebooks/JnQ/funcs')\n","    sys.path.insert(0, mpl_finance_path)\n","    sys.path.insert(0, ta_lib_path)\n","    \n","  except Exception as e:\n","    print(e)"]},{"cell_type":"markdown","metadata":{"id":"8uqYv5StTazo"},"source":["# requirements"]},{"cell_type":"code","execution_count":3,"metadata":{"id":"9qGt60DKTZmf","executionInfo":{"status":"ok","timestamp":1658884034437,"user_tz":-540,"elapsed":31830,"user":{"displayName":"7th June","userId":"08178289703395036410"}}},"outputs":[],"source":["# !pip install zigzag --target=$'/content/drive/My Drive/Colab Notebooks/JnQ/zigzag'\n","# !pip install talib-binary --target=$'/content/drive/My Drive/Colab Notebooks/JnQ/ta_lib'\n","# !pip install findiff\n","\n","# import nvstrings, nvcategory, cudf\n","# import cuml\n","# import cudf\n","\n","import os\n","import talib\n","from funcs.funcs_idep import *\n","from funcs.funcs_duration_v2 import *\n","from funcs.funcs_plot_check import *\n","from funcs.funcs_pairing import *\n","# from funcs.funcs_ide import *\n","# from funcs.funcs_indicator_candlescore import *\n","from funcs.funcs_indicator import *\n","from funcs.funcs_trader import *\n","from ast import literal_eval\n","import logging\n","import importlib\n","\n","import mpl_finance as mf\n","import matplotlib.pyplot as plt\n","from matplotlib import gridspec\n","# from zigzag import *\n","# from tqdm.notebook import tqdm\n","\n","# import IPython\n","# import IPython.display\n","\n","import numpy as np\n","# import jax.numpy as np\n","import pandas as pd\n","# import seaborn as sns\n","# import tensorflow as tf\n","# from scipy import stats, signal\n","\n","import pickle\n","import shutil\n","import json\n","from easydict import EasyDict\n","import copy\n","\n","import datetime\n","from datetime import datetime\n","import random\n","import time\n","# import warnings\n","\n","# warnings.simplefilter(\"ignore\", category=RuntimeWarning)\n","\n","np.seterr(invalid=\"ignore\")\n","np.set_printoptions(suppress=True)\n","np.set_printoptions(linewidth=2000) \n","\n","pd.set_option('mode.chained_assignment',  None)\n","\n","pd.set_option('display.max_rows', 500)\n","pd.set_option('display.max_columns', 500)\n","pd.set_option('display.width', 1000)"]},{"cell_type":"markdown","metadata":{"id":"Ic1mfmwWCIBu"},"source":["# makeset - with to_htf dataframes"]},{"cell_type":"markdown","metadata":{"id":"AUSBU7T8Suzi"},"source":["## sync_check_make"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"QmhLikYlSuzi"},"outputs":[],"source":["def sync_check_make(df):\n","\n","    make_itv_list = ['3T', '5T', '15T', '30T', 'H', '4H', 'D']\n","    offset_list = ['1h', '1h', '1h', '1h', '1h', '1h', '9h']\n","\n","    assert len(make_itv_list) == len(offset_list), \"length of itv & offset_list should be equal\"\n","        \n","    htf_df_list = [to_htf(df, itv_=itv_, offset=offset_) for itv_, offset_ in zip(make_itv_list, offset_list)]\n","\n","    df_3T, df_5T, df_15T, df_30T, df_H, df_4H, df_D = htf_df_list\n","\n","    for htf_df in htf_df_list:\n","      print(\"{} -> \".format(pd.infer_freq(htf_df.index)), htf_df.tail(1))\n","\n","    # heikinashi_v2(res_df_)\n","    # h_candle_v3(df, df_5T, '5T')\n","    # df = h_candle_v4(df, df_5T)\n","    # df = h_candle_v4(df, df_15T)\n","    # df = h_candle_v4(df, df_30T)\n","    # df = h_candle_v4(df, 'D')\n","\n","    # df = candle_pattern_pkg(df, df_5T)\n","    # df = candle_pattern_pkg(df, df_30T)\n","    # df = candle_pattern_pkg(df, df_H)\n","    # df = candle_pattern_pkg(df, df_4H)\n","    \n","    # --------------- stochastic --------------- #\n","    df = stoch_v2(df)\n","    # df_5T['stoch'] = stoch(df_5T, 13, 3, 3)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf_v2(df, df_5T, [-1], backing_i=-1), columns=['stoch_5m']))\n","\n","    print(\"stoch phase done\")\n","\n","    # --------------- ma --------------- #  \n","    # df = ma(df, 60)\n","    # print(\"ma phase done\")\n","\n","    # df = macd_hist(df, 5, 35, 15)\n","    # print(\"macd_hist phase done\")\n","    \n","    # df = enough_space(df, '15T', 1)\n","    \n","    # --------------- dc --------------- #  \n","    dc_period = 1\n","    # df = donchian_channel_v4(df, dc_period)\n","    # df = dc_line(df, df_5T, '5T')  # join 사용시에만 return df 허용함\n","    # df = dc_line(df, df_15T, '15T')\n","    # df = dc_line_v2(df, df_H, 'H', dc_period=5)\n","\n","    # df = dc_line_v4(df, df, dc_period=10)\n","    # df = dc_line_v4(df, df, dc_period=20)\n","    # df = dc_line_v4(df, df, dc_period=100)\n","    # df = dc_line_v4(df, df_15T, dc_period=dc_period)\n","    # print(\"dc phase done\")\n","\n","    # --------------- bb --------------- #  \n","    bb_period = 100\n","\n","    # upper, base, lower = talib.BBANDS(res_df_.close, timeperiod=20, nbdevup=1, nbdevdn=1, matype=0)\n","    \n","    # df = bb_width_v3(df, period=60, multiple=1)\n","    # df = bb_line(df, df_5T, '5T')\n","    \n","    # df = bb_line_v3(df, df_15T, 60)\n","    \n","    # df = bb_line_v3(df, df, bb_period)\n","    # df = bb_level_v2(df, 'T', bb_period)\n","    # print(\"bb phase done\")\n","\n","    c_itv = '5T'\n","\n","    # df =  wick_ratio(df, c_itv)\n","    # df =  wick_ratio(df, c_itv)\n","\n","    bb_itv= 'T'\n","\n","    # df = candle_range_ratio(df, c_itv, bb_itv, bb_period)\n","    # # candle_pumping_ratio(df, c_itv, bb_itv, bb_period)\n","\n","    dc_itv= '15T'\n","    dc_period = 4\n","    # df = candle_pumping_ratio_v2(df, c_itv, dc_itv, dc_period)\n","    # print(\"candle_pumping_ratio_v2 phase done\")\n","\n","    # df = dc_over_body_ratio(df, c_itv, dc_itv, dc_period)\n","    # print(\"dc_over_body_ratio phase done\")\n","\n","    # df = body_rel_ratio(df, c_itv)\n","    # print(\"body_rel_ratio phase done\")\n","\n","    # --------------- cbline --------------- #    \n","    # cloud_bline(df_3T, 20)\n","    # df = df.join(to_lower_tf_v2(df, df_3T, [-1]), how='inner')\n","    # # cloud_bline(df_5T, 20)\n","    # # df = df.join(to_lower_tf_v2(df, df_5T, [-1]), how='inner')\n","    # cloud_bline(df_15T, 20)\n","    # df = df.join(to_lower_tf_v2(df, df_15T, [-1]), how='inner')\n","    # cloud_bline(df_30T, 20)\n","    # df = df.join(to_lower_tf_v2(df, df_30T, [-1]), how='inner')\n","    # cloud_bline(df_H, 20)\n","    # df = df.join(to_lower_tf_v2(df, df_H, [-1]), how='inner')\n","    # cloud_bline(df_4H, 20)\n","    # df = df.join(to_lower_tf_v2(df, df_4H, [-1]), how='inner')\n","\n","    # print(\"cbline phase done\")\n","\n","\n","\n","    # --------------- sd_dc --------------- #\n","    # df = sd_dc(df, 20, 40)\n","    # df = sd_dc(df, 20, 20)\n","    # df = sd_dc(df_5T, 20, 40, df)\n","    # df = sd_dc(df_H, 20, 40, df)\n","\n","    # print(\"sd_dc phase done\")\n","\n","    # --------------- imb_ratio --------------- #\n","    # imb_ratio(df, '5T')\n","    # imb_ratio_v3(df, \"5T\")\n","    # imb_ratio_v4(df, \"5T\")\n","\n","    # imb_ratio(df, 'H')\n","    # imb_ratio_v2(df, '5T')\n","    \n","    # print(\"imb_ratio phase done\")\n","\n","    # --------------- rel_abs_ratio --------------- #\n","    # rel_abs_ratio(df, '5T', norm_period=120)\n","\n","    # --------------- normalize data --------------- #\n","    # itv = 'T'\n","    # lb_period = 15\n","    # target_col = 'close_{}{}'.format(itv, lb_period)\n","    # target_data = df['close'].diff(lb_period).to_numpy()\n","    # norm_data(df, target_data, target_col)    \n","    # print(\"normalize data phase done !\")\n","\n","    # --------------- lucid sar --------------- #\n","    # lucid_sar_v2(df)\n","    # lucid_sar_v2(df_3T)\n","    # df = df.join(to_lower_tf_v2(df, df_3T, [-2, -1]), how='inner')\n","    # lucid_sar_v2(df_5T)\n","    # df = df.join(to_lower_tf_v2(df, df_5T, [-2, -1]), how='inner')\n","    # lucid_sar_v2(df_15T)\n","    # df = df.join(to_lower_tf_v2(df, df_15T, [-2, -1]), how='inner')\n","    # lucid_sar_v2(df_30T)\n","    # df = df.join(to_lower_tf_v2(df, df_30T, [-2, -1]), how='inner')       \n","\n","    # print(\"sar phase done\")\n","\n","    # --------------- supertrend --------------- #\n","    # df = st_price_line(df, df_3T, '3m')\n","    # df = st_price_line(df, df_5T, '5m')\n","    # df = st_price_line(df, df_15T, '15m')\n","    # df = st_price_line(df, df_30T, '30m')\n","    # df = st_price_line(df, df_H, '1h')\n","    # df = st_price_line(df, df_4H, '4h')\n","\n","    # print(\"supertrend phase done\")\n","\n","    # --------------- rsi --------------- #  \n","    # df['rsi_1m'] = rsi(df, 14)    \n","    # df_5T['rsi_5m'] = rsi(df_5T, 14)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf_v2(df, df_5T, [-1]), columns=['rsi_5m']))\n","    \n","    # print(\"rsi phase done\")\n","\n","\n","    # --------------- cci --------------- #  \n","    # df['cci_1m'] = cci(df, 20)\n","\n","    # print(\"cci phase done\")\n","\n","    # --------------- ema --------------- #      \n","    # df_5T['ema_5m'] = ema(df_5T['close'], 195)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf_v2(df, df_5T, [-1]), columns=['ema_5m']))\n","    \n","    # print(\"ema phase done\")        \n","\n","\n","    return df\n"]},{"cell_type":"markdown","metadata":{"id":"mEKyVbHWSuzi"},"source":["## make & save res_df (concat 생각하면, timeindex sync 맞춰야함)"]},{"cell_type":"markdown","metadata":{"id":"VdukVo5-Suzj"},"source":["### old (xlsx)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"khKb9nhlSuzj"},"outputs":[],"source":["pd.set_option('display.max_rows', 500)\n","pd.set_option('display.max_columns', 500)\n","pd.set_option('display.width', 1000)\n","\n","\n","save_path = './candlestick_concated/res_df/'\n","\n","exist_list = os.listdir(save_path)\n","\n","\n","a_day = 3600 * 24\n","\n","for i in tqdm(range(len(file_list))):\n","\n","  keys = [file_list[i]]\n","\n","  # if 'neo'.upper() not in file_list[i]:\n","    # continue\n","\n","  # if '2021-04-30'.upper() not in file_list[i]:\n","  if '2021-07-01'.upper() not in file_list[i]:\n","  # if '2021-10-10'.upper() not in file_list[i]:\n","    continue\n","\n","\n","  for key in keys:      \n","\n","    # if 'eth'.upper() not in key:\n","    #   continue\n","\n","    excel_name = key.replace(\".xlsx\", \"_st1h_backi2.xlsx\")\n","    excel_path = save_path + excel_name\n","\n","    if excel_name in exist_list:\n","      print(excel_name, \"already exist !\")\n","      continue\n","    \n","    open_indexes = []\n","    \n","    df = pd.read_excel(date_path + key, index_col=0)\n","    second_df = pd.read_excel(date_path2 + key, index_col=0)\n","    third_df = pd.read_excel(date_path3 + key, index_col=0)\n","    fourth_df = pd.read_excel(date_path4 + key, index_col=0)\n","    fifth_df = pd.read_excel(date_path5 + key, index_col=0)\n","    \n","    print(df.index[[0, -1]])\n","    print(second_df.index[[0, -1]])\n","    print(third_df.index[[0, -1]])\n","    print(fourth_df.index[[0, -1]])\n","    print(fifth_df.index[[0, -1]])\n","\n","    open_indexes.append(df.index[0])\n","    open_indexes.append(second_df.index[0])\n","    open_indexes.append(third_df.index[0])\n","    open_indexes.append(fourth_df.index[0])\n","    open_indexes.append(fifth_df.index[0])\n","    \n","    try:\n","      #     Todo    #\n","      #      1. 1m 마지막 timeindex 의 date 기준, 08:59:59.999000 를 last timestamp 로 설정\n","      #      2. 시작 timestamp 는 모든 tf 의 가장 최근 시작 index,\n","      #       a. 1m 의 시작 timeindex 는 최소, htf 의 시작 timeindex 보다 interval 만큼 앞서야함\n","      #         i. 따라서 1m open_index, latest_open_index + 1d 를 하면 댐\n","      #           1. timestamp 으로 변환후 1day 를 더하고 datetime 으로 변환\n","      sixth_df = pd.read_excel(date_path6 + key, index_col=0)\n","      seventh_df = pd.read_excel(date_path7 + key, index_col=0)\n","\n","      print(sixth_df.index[[0, -1]])\n","      print(seventh_df.index[[0, -1]])\n","      print()\n","\n","      open_indexes.append(sixth_df.index[0])\n","      open_indexes.append(seventh_df.index[0])\n","\n","    except Exception as e:\n","      print(e)\n","\n","    latest_open_index = sorted(open_indexes)[-1]\n","    \n","    open_ts = datetime.timestamp(latest_open_index)\n","    latest_open_index_1m = datetime.fromtimestamp(open_ts + a_day)\n","\n","    #   str 로 만들어 접근하면 불가함  #\n","    end_index = pd.to_datetime(str(df.index[-1]).split(\" \")[0] + \" 08:59:59.999000\")\n","    # break\n","\n","    sliced_df = df.loc[latest_open_index_1m:end_index] # to_lower_tf 의 기준 ltf\n","    sliced_second_df = second_df.loc[latest_open_index:end_index]\n","    sliced_third_df = third_df.loc[latest_open_index:end_index]\n","    sliced_fourth_df = fourth_df.loc[latest_open_index:end_index]\n","    sliced_fifth_df = fifth_df.loc[latest_open_index:end_index]\n","\n","    print(\"sliced index\")\n","    print(sliced_df.index[[0, -1]])\n","    print(sliced_second_df.index[[0, -1]])\n","    print(sliced_third_df.index[[0, -1]])\n","    print(sliced_fourth_df.index[[0, -1]])\n","    print(sliced_fifth_df.index[[0, -1]])\n","\n","    try:\n","      sliced_sixth_df = sixth_df.loc[latest_open_index:end_index]\n","      sliced_seventh_df = seventh_df.loc[latest_open_index:end_index]\n","\n","      print(sliced_sixth_df.index[[0, -1]])\n","      print(sliced_seventh_df.index[[0, -1]])\n","\n","      res_df = sync_check(sliced_df, sliced_second_df, sliced_third_df, sliced_fourth_df, sliced_fifth_df, sliced_sixth_df, sliced_seventh_df)\n","    \n","    except:\n","      res_df = sync_check(sliced_df, sliced_second_df, sliced_third_df, sliced_fourth_df, sliced_fifth_df)\n","\n","\n","\n","    res_df.to_excel(excel_path)\n","    print(excel_name, \"saved succesfully !\")"]},{"cell_type":"markdown","metadata":{"id":"Bw5JibDKSuzj"},"source":["### xlsx to feather"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"VA-_gcA7Suzj"},"outputs":[],"source":["pd.set_option('display.max_rows', 500)\n","pd.set_option('display.max_columns', 500)\n","pd.set_option('display.width', 1000)\n","\n","\n","save_path = './candlestick_concated/res_df/'\n","\n","exist_list = os.listdir(save_path)\n","\n","\n","a_day = 3600 * 24\n","\n","for i in tqdm(range(len(file_list))):\n","\n","  keys = [file_list[i]]\n","\n","  # if 'neo'.upper() not in file_list[i]:\n","    # continue\n","\n","  # if '2021-04-30'.upper() not in file_list[i]:\n","  # if '2021-07-01'.upper() not in file_list[i]:\n","  if '2021-10-10'.upper() not in file_list[i]:\n","    continue\n","\n","\n","  for key in keys:      \n","\n","    # if 'eth'.upper() not in key:\n","    #   continue\n","\n","    feather_name = key.replace(\".xlsx\", \".ftr\")\n","    # feather_path = save_path + feather_name\n","\n","    if feather_name in exist_list:\n","      print(feather_name, \"already exist !\")\n","      continue\n","    \n","    open_indexes = []\n","    \n","    df = pd.read_excel(date_path + key, index_col=0)\n","    second_df = pd.read_excel(date_path2 + key, index_col=0)\n","    third_df = pd.read_excel(date_path3 + key, index_col=0)\n","    fourth_df = pd.read_excel(date_path4 + key, index_col=0)\n","    fifth_df = pd.read_excel(date_path5 + key, index_col=0)\n","    \n","    print(df.index[[0, -1]])\n","    print(second_df.index[[0, -1]])\n","    print(third_df.index[[0, -1]])\n","    print(fourth_df.index[[0, -1]])\n","    print(fifth_df.index[[0, -1]])\n","\n","    open_indexes.append(df.index[0])\n","    open_indexes.append(second_df.index[0])\n","    open_indexes.append(third_df.index[0])\n","    open_indexes.append(fourth_df.index[0])\n","    open_indexes.append(fifth_df.index[0])\n","    \n","    try:\n","      #     Todo    #\n","      #      1. 1m 마지막 timeindex 의 date 기준, 08:59:59.999000 를 last timestamp 로 설정\n","      #      2. 시작 timestamp 는 모든 tf 의 가장 최근 시작 index,\n","      #       a. 1m 의 시작 timeindex 는 최소, htf 의 시작 timeindex 보다 interval 만큼 앞서야함\n","      #         i. 따라서 1m open_index, latest_open_index + 1d 를 하면 댐\n","      #           1. timestamp 으로 변환후 1day 를 더하고 datetime 으로 변환\n","      sixth_df = pd.read_excel(date_path6 + key, index_col=0)\n","      seventh_df = pd.read_excel(date_path7 + key, index_col=0)\n","\n","      print(sixth_df.index[[0, -1]])\n","      print(seventh_df.index[[0, -1]])\n","      print()\n","\n","      open_indexes.append(sixth_df.index[0])\n","      open_indexes.append(seventh_df.index[0])\n","\n","    except Exception as e:\n","      print(e)\n","\n","\n","    df.reset_index().to_feather(date_path + feather_name, compression='lz4')\n","    second_df.reset_index().to_feather(date_path2 + feather_name, compression='lz4')\n","    third_df.reset_index().to_feather(date_path3 + feather_name, compression='lz4')\n","    fourth_df.reset_index().to_feather(date_path4 + feather_name, compression='lz4')\n","    fifth_df.reset_index().to_feather(date_path5 + feather_name, compression='lz4')\n","    sixth_df.reset_index().to_feather(date_path6 + feather_name, compression='lz4')\n","    seventh_df.reset_index().to_feather(date_path7 + feather_name, compression='lz4')\n","\n","    print(\"xlsx converted to feather !\")\n","    "]},{"cell_type":"markdown","metadata":{"id":"Pe0QpnORSuzk"},"source":["### add itv_name to ftr"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"M-gl30KxSuzk"},"outputs":[],"source":["save_path = './candlestick_concated/res_df/'\n","\n","# dir_path = \"bbdc3m_backi2\"\n","# date = '2021-10-10'\n","date = '2021-07-01'\n","\n","db_path = './candlestick_concated/database_bn/non_cum/%s/' % date\n","os.makedirs(os.path.join(db_path), exist_ok=True)\n","\n","# exist_list = os.listdir(os.path.join(save_path, dir_path))\n","# break\n","\n","\n","a_day = 3600 * 24\n","\n","for i in tqdm(range(len(file_list))):\n","\n","  keys = [file_list[i]]\n","\n","  # if 'neo'.upper() not in file_list[i]:\n","    # continue\n","\n","  if date not in file_list[i]:\n","    continue\n","\n","\n","  for key in keys:      \n","\n","    # if 'eth'.upper() not in key:\n","    #   continue\n","    # print(key)\n","    \n","    if \".ftr\" not in key:\n","      continue\n","        \n","    df = shutil.copy(date_path + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval))\n","    second_df = shutil.copy(date_path2 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval2))\n","    third_df = shutil.copy(date_path3 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval3))\n","    fourth_df = shutil.copy(date_path4 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval4))\n","    fifth_df = shutil.copy(date_path5 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval5))\n","    sixth_df = shutil.copy(date_path6 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval6))\n","    seventh_df = shutil.copy(date_path7 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval7))\n","\n","    print(\"copied to\" + db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval))\n"]},{"cell_type":"markdown","metadata":{"id":"4oZ1ohTtSuzk"},"source":["### feather ver. (database to res_df)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"vgVHpnUsSuzk"},"outputs":[],"source":["# db_path = './candlestick_concated/database_ub/' # upbit\n","db_path = './candlestick_concated/database_bn/'   # binance\n","\n","save_path = './candlestick_concated/res_df/'\n","\n","save_dir_path = \"bb1d_backi2\"\n","date = '2022-02-17'\n","\n","# concat_path = 'noncat' # 새로운 cols 를 기존 cum/concat 에 붙이려는 경우\n","concat_path = 'concat'\n","cum_path = \"cum\"\n","# cum_path = \"non_cum\"  # non_cum 으로 진행하는 경우, row concat 용도이기 때문에 noncat -> concat 으로 변경 (base cols 를 모두 담고 있음)\n","\n","load_path = os.path.join(db_path, cum_path, date)\n","save_path = os.path.join(save_path, save_dir_path, concat_path, cum_path, date)\n","\n","os.makedirs(save_path, exist_ok=True)\n","\n","file_list = os.listdir(load_path)\n","exist_list = os.listdir(save_path)\n","# break\n","\n","a_day = 3600 * 24\n","\n","for i in tqdm(range(len(file_list))):\n","\n","  keys = [file_list[i]]\n","\n","  # if 'neo'.upper() not in file_list[i]:\n","    # continue\n","\n","  if date not in file_list[i]:\n","    continue\n","\n","\n","  for key in keys:      \n","\n","    # if 'eth'.upper() not in key:\n","    #   continue\n","    # print(key)\n","    \n","    if \".ftr\" not in key:\n","      continue\n","\n","    if \"_1m\" not in key:\n","      continue\n","\n","    # feather_name = key.replace(\".ftr\", \"_%.ftr\" % save_dir_path)\n","    feather_name = key.replace(\"_1m\", \"\")\n","    feather_path = os.path.join(save_path, feather_name)\n","\n","    if feather_name in exist_list:\n","      print(feather_name, \"already exist !\")\n","      continue\n","    \n","    df = pd.read_feather(os.path.join(load_path, key), columns=None, use_threads=True).set_index(\"index\")\n","\n","    res_df = sync_check_make(df)\n","\n","    res_df.reset_index().to_feather(feather_path, compression='lz4')\n","    print(feather_path, \"saved succesfully !\")"]},{"cell_type":"markdown","metadata":{"id":"YxCPUzoyidwH"},"source":["#### just add col to loaded df"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":620},"executionInfo":{"elapsed":492,"status":"ok","timestamp":1657897792233,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"odqVwQHpYo1M","outputId":"1bdfa271-4f0e-4409-9a3f-ff7ded70a640"},"outputs":[{"output_type":"stream","name":"stdout","text":["3T ->                          open     high      low    close\n","index                                                  \n","2022-04-27 08:45:00  2803.55  2803.97  2799.26  2800.43\n","5T ->                          open     high      low    close\n","index                                                  \n","2022-04-27 08:45:00  2803.55  2803.97  2799.26  2800.43\n","15T ->                          open     high      low    close\n","index                                                  \n","2022-04-27 08:45:00  2803.55  2803.97  2799.26  2800.43\n","30T ->                          open     high      low    close\n","index                                                  \n","2022-04-27 08:30:00  2783.61  2806.93  2780.79  2800.43\n","H ->                          open     high      low    close\n","index                                                  \n","2022-04-27 08:00:00  2819.33  2822.77  2761.27  2800.43\n","4H ->                          open    high      low    close\n","index                                                 \n","2022-04-27 05:00:00  2837.34  2855.0  2761.27  2800.43\n","D ->                          open    high      low    close\n","index                                                 \n","2022-04-26 09:00:00  3006.12  3043.0  2761.27  2800.43\n","stoch phase done\n"]},{"output_type":"execute_result","data":{"text/plain":["                         dc_base_T10  dc_upper_T20  dc_lower_T20  dc_base_T20  dc_upper_T30  dc_lower_T30  dc_base_T30       ma_T30       ma_T60  stoch_T1333\n","index                                                                                                                                                        \n","2022-04-27 08:41:59.999     2797.380       2806.93       2778.97     2792.950       2806.93       2761.27       2784.1  2792.450333  2806.733500    89.511327\n","2022-04-27 08:42:59.999     2798.165       2806.93       2780.26     2793.595       2806.93       2761.27       2784.1  2792.417000  2806.293167    87.416561\n","2022-04-27 08:43:59.999     2799.570       2806.93       2780.26     2793.595       2806.93       2761.27       2784.1  2792.547667  2805.914333    83.950235\n","2022-04-27 08:44:59.999     2799.570       2806.93       2780.26     2793.595       2806.93       2761.27       2784.1  2792.546000  2805.607667    81.475031\n","2022-04-27 08:45:59.999     2799.570       2806.93       2780.26     2793.595       2806.93       2761.27       2784.1  2792.391333  2805.184500    79.154400"],"text/html":["\n","  <div id=\"df-dc258601-603d-491e-8779-7a016ea6c688\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>dc_base_T10</th>\n","      <th>dc_upper_T20</th>\n","      <th>dc_lower_T20</th>\n","      <th>dc_base_T20</th>\n","      <th>dc_upper_T30</th>\n","      <th>dc_lower_T30</th>\n","      <th>dc_base_T30</th>\n","      <th>ma_T30</th>\n","      <th>ma_T60</th>\n","      <th>stoch_T1333</th>\n","    </tr>\n","    <tr>\n","      <th>index</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2022-04-27 08:41:59.999</th>\n","      <td>2797.380</td>\n","      <td>2806.93</td>\n","      <td>2778.97</td>\n","      <td>2792.950</td>\n","      <td>2806.93</td>\n","      <td>2761.27</td>\n","      <td>2784.1</td>\n","      <td>2792.450333</td>\n","      <td>2806.733500</td>\n","      <td>89.511327</td>\n","    </tr>\n","    <tr>\n","      <th>2022-04-27 08:42:59.999</th>\n","      <td>2798.165</td>\n","      <td>2806.93</td>\n","      <td>2780.26</td>\n","      <td>2793.595</td>\n","      <td>2806.93</td>\n","      <td>2761.27</td>\n","      <td>2784.1</td>\n","      <td>2792.417000</td>\n","      <td>2806.293167</td>\n","      <td>87.416561</td>\n","    </tr>\n","    <tr>\n","      <th>2022-04-27 08:43:59.999</th>\n","      <td>2799.570</td>\n","      <td>2806.93</td>\n","      <td>2780.26</td>\n","      <td>2793.595</td>\n","      <td>2806.93</td>\n","      <td>2761.27</td>\n","      <td>2784.1</td>\n","      <td>2792.547667</td>\n","      <td>2805.914333</td>\n","      <td>83.950235</td>\n","    </tr>\n","    <tr>\n","      <th>2022-04-27 08:44:59.999</th>\n","      <td>2799.570</td>\n","      <td>2806.93</td>\n","      <td>2780.26</td>\n","      <td>2793.595</td>\n","      <td>2806.93</td>\n","      <td>2761.27</td>\n","      <td>2784.1</td>\n","      <td>2792.546000</td>\n","      <td>2805.607667</td>\n","      <td>81.475031</td>\n","    </tr>\n","    <tr>\n","      <th>2022-04-27 08:45:59.999</th>\n","      <td>2799.570</td>\n","      <td>2806.93</td>\n","      <td>2780.26</td>\n","      <td>2793.595</td>\n","      <td>2806.93</td>\n","      <td>2761.27</td>\n","      <td>2784.1</td>\n","      <td>2792.391333</td>\n","      <td>2805.184500</td>\n","      <td>79.154400</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-dc258601-603d-491e-8779-7a016ea6c688')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-dc258601-603d-491e-8779-7a016ea6c688 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-dc258601-603d-491e-8779-7a016ea6c688');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":21}],"source":["res_df_ = sync_check_make(res_df_)  # suffix duplication 유의\n","res_df_.tail().iloc[:, -10:]\n","# res_df_.dtypes"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"3SKglsQCj5_x"},"outputs":[],"source":["test_df_ = sync_check_make(res_df_.iloc[-4000:])  # suffix duplication 유의\n","test_df_.tail().iloc[:, -10:]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"gOQxwYqK0jCS"},"outputs":[],"source":["# ------ validation ------ #\n","# res_df_.cppr_15T.describe()\n","print((res_df_.open_15T.to_numpy() - res_df_.close_15T.to_numpy())[-10:])\n","print((res_df_.dc_upper_15T4.to_numpy() - res_df_.dc_lower_15T4.to_numpy())[-10:])"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"RmiB5VU5DN6B"},"outputs":[],"source":["# np.where(res_df_.CDL3LINESTRIKE_15T) #.iloc[-1000:,]\n","\n","# CDL3LINESTRIKE = talib.CDL3LINESTRIKE(df_15T.open, df_15T.high, df_15T.low, df_15T.close)\n","for col in talib.get_function_groups()['Pattern Recognition']:  \n","  print(np.unique(res_df_[col + '_15T'].to_numpy(), return_counts=True))\n","\n","# CDLCLOSINGMARUBOZU = talib.CDLCLOSINGMARUBOZU(df_15T.open, df_15T.high, df_15T.low, df_15T.close)\n","# print(np.unique(CDLCLOSINGMARUBOZU.to_numpy(), return_counts=True))\n","# print(CDLCLOSINGMARUBOZU.tail(50))"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":1671,"status":"ok","timestamp":1657898286047,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"XrgJPQRuisCa","outputId":"183b3d68-2433-4956-b317-9cc177917417"},"outputs":[{"output_type":"stream","name":"stdout","text":["./candlestick_concated/database_bn/cum/2022-04-27/2022-04-27 ETHUSDT_1m.ftr saved !\n"]}],"source":["# ------------ save current res_df ------------ #\n","ftr_path = os.path.join(save_path.replace(\"res_df\", \"database_bn\"), \"cum\", date)\n","ftr_full_path = os.path.join(ftr_path, key)\n","\n","res_df_.reset_index().to_feather(ftr_full_path, compression='lz4')  # key 잘 확인하고 저장\n","print(ftr_full_path, 'saved !')"]},{"cell_type":"markdown","metadata":{"id":"E0n53hflJbnp"},"source":["### htf candle check"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"6xW0yugCWvGz"},"outputs":[],"source":["itv_list = ['3T', '5T', '15T', '30T', '1H', '4H']\n","comp_df_list = [second_df, third_df, fourth_df, fifth_df, sixth_df, seventh_df]\n","offset_list = ['1h', '2min', '2min', '2min', '2min', '2min']\n","# itv_list = ['4H']\n","# comp_df_list = [seventh_df]\n","\n","slice_len = 100\n","for itv_, comp_df_, offset in zip(itv_list, comp_df_list, offset_list):\n","\n","  print(\"itv_ :\", itv_)\n","\n","  # df = h_candle_v2(df, '3T')\n","  # end_ts = \n","  h_res_df = df.resample(itv_, offset=offset).agg({\n","          'open': 'first',\n","          'high': 'max',\n","          'low': 'min',\n","          'close': 'last'\n","      })\n","\n","  #   앞은 길이가 다르고, 뒤에서부터 잘라서 비교    #\n","  #   last_row 빼고는 동일, 4h 제외\n","  # print(df.tail())\n","  print(h_res_df.tail())\n","  print(comp_df_.tail())\n","  # # print(h_res_df.head())\n","  # # print(second_df.head())\n","\n","  # print(len(h_res_df))\n","  # print(len(second_df))\n","\n","  # print(h_res_df.values[-slice_len:])\n","  # print(second_df.iloc[:, :4].values[-slice_len:])\n","  # print(np.argwhere(h_res_df.values[-slice_len:] != comp_df_.iloc[:, :4].values[-slice_len:]))\n","  # print()\n","  break"]},{"cell_type":"markdown","metadata":{"id":"jTN3M842Suzl"},"source":["## concat & save new res_df"]},{"cell_type":"markdown","metadata":{"id":"MlFkpO1MSuzl"},"source":["### old (xlsx)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"U-3QkfbFSuzl"},"outputs":[],"source":["save_path = './candlestick_concated/res_df/'\n","\n","dict_name = \"2021-07-01 ETHUSDT_bb15m_backi2_res_dfs.pkl\"\n","\n","#     load with pickle    #\n","with open(save_path + dict_name, 'rb') as f:\n","  saved_res_df_dict = pickle.load(f)\n","\n","print(dict_name, \"loaded !\")\n","res_df_files = os.listdir(save_path)\n","res_df_files.reverse()\n","\n","print(res_df_files)\n","\n","res_df_dict = {}\n","\n","base_postfix = '_bb15m_backi2.xlsx'\n","new_postfix = '_st1h_backi2.xlsx'\n","\n","max_cnt = 10\n","sample_cnt = max_cnt\n","\n","for k_i, key in enumerate(res_df_files):\n","\n","  if '2021-07-01'.upper() not in key:\n","  # if '2021-10-10'.upper() not in key:\n","    continue\n","\n","  # if \"link\".upper() not in key:\n","  # if \"btc\".upper() not in key:\n","  #   continue\n","\n","  if new_postfix not in key:\n","    continue\n","\n","  # if key in \n","\n","  if sample_cnt == max_cnt:\n","    dict_name = \"%s_res_dfs.pkl\" % key.split(\".\")[0]\n","    print(\"dict_name :\", dict_name)\n","\n","  base_df = saved_res_df_dict[key.replace(new_postfix, base_postfix)]\n","  # base_df = pd.read_excel(save_path + key.replace(new_postfix, base_postfix), index_col=0)  \n","  res_df = pd.read_excel(save_path + key, index_col=0)  \n","\n","  # print(base_df.head())\n","  # print(res_df.head())\n","  # break\n","\n","  new_res_df = pd.concat([base_df, res_df], axis=1) # df_tot.drop_duplicates()\n","  # new_res_df.head()\n","\n","  droped_new_res_df = new_res_df.loc[:,~new_res_df.columns.duplicated(keep='last')]\n","  droped_new_res_df.head()\n","  # break\n","\n","  # res_df_dict[key] = res_df\n","  res_df_dict[key] = droped_new_res_df\n","  print(key, \"saved to dict !\")\n","\n","  #     save with pickle    #\n","  with open(save_path + dict_name, 'wb') as f:\n","    pickle.dump(res_df_dict, f)\n","\n","  sample_cnt -= 1\n","\n","  if sample_cnt <= 0:\n","    break\n"]},{"cell_type":"markdown","metadata":{"id":"t1E_eAyPSuzm"},"source":["### new col to latest feather (1m_indi. only)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"xyI5NrM7Suzm"},"outputs":[],"source":["save_path = './candlestick_concated/res_df/'\n","\n","cum_dir = \"cum\"\n","\n","new_dir_path = \"rsi_backi2\"\n","base_dir_path = \"bbdc3m_backi2\"\n","\n","new_date = '2021-11-17'\n","\n","\n","\n","#     load ftr list    #\n","base_save_path = os.path.join(save_path, base_dir_path, \"concat/cum\", new_date)\n","new_save_path = base_save_path.replace(base_dir_path, new_dir_path)\n","\n","#     save to (new) cum dir    #\n","#      1. if dir. not exists, makedir\n","os.makedirs(new_save_path, exist_ok=True)\n","\n","ftr_list = [s for s in os.listdir(base_save_path) if \"ftr\" in s]\n","print(ftr_list)\n","# break\n","\n","\n","max_cnt = 10\n","sample_cnt = max_cnt\n","\n","for key in ftr_list:\n","\n","  if new_date not in key:\n","    continue\n","\n","\n","  #       read from base postfix's directory    #\n","  base_df = pd.read_feather(os.path.join(base_save_path, key), columns=None, use_threads=True).set_index(\"index\")\n","  # print(base_df.head())\n","  # print(res_df.head())\n","  # break\n","\n","  droped_new_res_df = sync_check(base_df)\n","\n","  # new_res_df = pd.concat([base_df, res_df], axis=0) # df_tot.drop_duplicates()\n","  # # new_res_df.head()\n","\n","  # intersection_cols = res_df.columns.intersection(base_df.columns)\n","\n","  # droped_new_res_df = new_res_df.loc[~new_res_df.index.duplicated(keep='last'),intersection_cols]\n","  # droped_new_res_df = new_res_df.loc[:,~new_res_df.columns.duplicated(keep='last')]\n","  # droped_new_res_df = new_res_df.loc[:,~new_res_df.index.duplicated(keep='last')]\n","  # droped_new_res_df.head()\n","  # break\n","\n","  droped_new_res_df.reset_index().to_feather(os.path.join(new_save_path, key), compression='lz4')\n","\n","  print(os.path.join(new_save_path, key), \"saved !\")\n","\n","  # sample_cnt -= 1\n","\n","  # if sample_cnt <= 0:\n","  #   break\n"]},{"cell_type":"markdown","metadata":{"id":"nUs4fjVHSuzl"},"source":["### feather ver. (col concat)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"6cu-Y82iSuzl"},"outputs":[],"source":["new_dir_path = \"st3m_backi2\"\n","base_dir_path = \"bb1d_backi2\"\n","\n","# new_date = \"2021-11-17\"\n","new_date = \"2022-01-10\"\n","\n","#     save to (new) concat dir    #\n","#      1. if dir. not exists, makedir\n","save_path = './candlestick_concated/res_df/'\n","save_path = os.path.join(save_path, new_dir_path, \"concat/cum\", new_date)   \n","# save_path = os.path.join(save_path, new_dir_path, \"concat/non_cum\", new_date)   # row col 하려면 concat 맞음, noncum 사용\n","os.makedirs(save_path, exist_ok=True)\n","\n","\n","#     load ftr list    #\n","# ftr_list = [s for s in os.listdir(os.path.join(save_path, new_dir_path)) if \"ftr\" in s]\n","\n","noncat_path = save_path.replace(\"concat/\", \"noncat/\")\n","ftr_list = [s for s in os.listdir(noncat_path) if \"ftr\" in s]\n","print(ftr_list)\n","# break\n","\n","\n","for key in ftr_list:\n","\n","  if new_date not in key:\n","    continue\n","\n","  try:\n","\n","    #       read from base postfix's directory    #\n","    base_df = pd.read_feather(os.path.join(save_path.replace(new_dir_path, base_dir_path), key), columns=None, use_threads=True).set_index(\"index\")\n","    res_df = pd.read_feather(os.path.join(noncat_path, key), columns=None, use_threads=True).set_index(\"index\")\n","\n","    # print(base_df.head())\n","    # print(res_df.head())\n","    # break\n","\n","    new_res_df = pd.concat([base_df, res_df], axis=1) # df_tot.drop_duplicates()\n","    # new_res_df.head()\n","\n","    droped_new_res_df = new_res_df.loc[:,~new_res_df.columns.duplicated(keep='last')]\n","    # droped_new_res_df.head()\n","    # break\n","\n","    droped_new_res_df.reset_index().to_feather(os.path.join(save_path, key), compression='lz4')\n","\n","    # res_df_dict[key] = res_df\n","    # res_df_dict[key] = droped_new_res_df\n","    print(os.path.join(save_path, key), \"saved !\")\n","  \n","  except Exception as e:\n","    print(\"error occured ! :\", e)\n","  \n","\n","  # sample_cnt -= 1\n","\n","  # if sample_cnt <= 0:\n","  #   break\n"]},{"cell_type":"markdown","metadata":{"id":"WVAKq3i8Suzm"},"source":["### feather ver. (row concat) , database cum 도 호환가능"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"XG2p9OhhSuzm"},"outputs":[],"source":["# save_path = './candlestick_concated/res_df/'        # cols 추가된 cum db 에 new_row's cols 기준으로 합치는 경우\n","save_path = './candlestick_concated/database_bn/'   # ohlcv cum db 만들 경우\n","\n","base_date = '2022-04-25'\n","# new_date = '2022-02-17'\n","new_date = '2022-04-27'\n","\n","# ------ load ftr list ------ #\n","if \"database\" in save_path:\n","  base_dir_path = \"\"\n","  new_dir_path = \"\"\n","  concat_dir = \"\"\n","else:\n","  base_dir_path = \"sar_backi2\"\n","  new_dir_path = \"bb4h_backi2\"  # dir_path 가 base / new 서로 달라질 수 있어서 분할함\n","  concat_dir = \"concat\"\n","\n","base_date_path = os.path.join(save_path, base_dir_path, concat_dir, \"cum\", base_date)      # 기존 cum db 와 new_date db 를 cum 진행\n","# base_date_path = os.path.join(save_path, base_dir_path, concat_dir, \"non_cum\", base_date)    # non_cum db 와 new_date db 를 cum 진행\n","\n","# new_date_path = os.path.join(save_path, new_dir_path, concat_dir, \"cum\", new_date)      # 상황별로 직접 선택해야할 듯\n","new_date_path = os.path.join(save_path, new_dir_path, concat_dir, \"non_cum\", new_date)\n","\n","\n","\n","# ------ save to (new) concat dir ------ #\n","#      1. if dir. not exists, makedir\n","save_path = new_date_path.replace(\"non_cum\", \"cum\")   # non_cum 아니여도 무관\n","os.makedirs(save_path, exist_ok=True)   # noncat / concat 두가지 경우 존재가능할 것\n","# os.makedirs(os.path.join(save_path, dir_path, \"noncat/cum\", new_date), exist_ok=True)\n","\n","\n","ftr_list = [s for s in os.listdir(new_date_path) if \"ftr\" in s]\n","exist_list = os.listdir(save_path)\n","print(ftr_list)\n","# break\n","\n","\n","for key in ftr_list:\n","\n","  if new_date not in key:   # date rejection\n","    continue\n","  if '1m' not in key:  # itv rejection\n","    continue\n","\n","  # if key in exist_list:\n","  #   print(key, \"already exist !\")\n","  #   continue\n","\n","  #       read from base postfix's directory    #\n","  base_df = pd.read_feather(os.path.join(base_date_path, key.replace(new_date, base_date)), columns=None, use_threads=True).set_index(\"index\")   # key 에 new_date 담겨있음\n","  res_df = pd.read_feather(os.path.join(new_date_path, key), columns=None, use_threads=True).set_index(\"index\")\n","\n","  # print(base_df.head())\n","  # print(res_df.head())\n","  # break\n","\n","  new_res_df = pd.concat([base_df, res_df], axis=0) # df_tot.drop_duplicates()\n","  # new_res_df.head()\n","\n","  intersection_cols = res_df.columns.intersection(base_df.columns)\n","\n","  droped_new_res_df = new_res_df.loc[~new_res_df.index.duplicated(keep='last'),intersection_cols]\n","  # droped_new_res_df = new_res_df.loc[:,~new_res_df.columns.duplicated(keep='last')]\n","  # droped_new_res_df = new_res_df.loc[:,~new_res_df.index.duplicated(keep='last')]\n","  # droped_new_res_df.head()\n","  # break  \n","  \n","  print(droped_new_res_df.iloc[[0, -1]])  \n","\n","  # ------------- verify df continuity directly itv by itv ------------- #\n","  true_continue = True\n","  if \"_\" in key:\n","\n","    # interval = key.split(\".\")[0].split(\"_\")[-1] \n","    # itv_num = to_itvnum(interval)\n","\n","    # verified_df = consecutive_df(droped_new_res_df, to_itvnum(interval))\n","    # verified_df.reset_index().to_feather(os.path.join(save_path, key), compression='lz4')\n","\n","    # res_df_dict[key] = res_df\n","    # res_df_dict[key] = droped_new_res_df  \n","\n","    np_idx_ts = np.array(list(map(lambda x: datetime.timestamp(x), droped_new_res_df.index)))\n","    ideal_ts_gap = 60 # * itv_num\n","\n","    for ts_i in range(len(np_idx_ts)):\n","      \n","      if ts_i != 0:\n","        ts_gap = np_idx_ts[ts_i] - np_idx_ts[ts_i - 1]\n","        if ts_gap > ideal_ts_gap or ts_gap < ideal_ts_gap:\n","        # if ts_gap == ideal_ts_gap:\n","          print(droped_new_res_df.index[ts_i - 1])\n","          print(droped_new_res_df.index[ts_i])\n","          # print(ts_gap)\n","          print(\"------------------ unideal ts_gap ------------------\")\n","          true_continue = False\n","\n","    print(\"continuity checked !\")\n","\n","  if true_continue:\n","    droped_new_res_df.reset_index().to_feather(os.path.join(save_path, key), compression='lz4')\n","\n","  print(os.path.join(save_path, key), \"saved !\")\n","  \n"]},{"cell_type":"markdown","metadata":{"id":"L7l5CTJfSuzn"},"source":["### check continuity"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"w-5jn9opBl73"},"outputs":[],"source":["droped_new_res_df = res_df_"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"nGzMGyC3Suzn"},"outputs":[],"source":["# print(droped_new_res_df.columns)\n","\n","print(droped_new_res_df.iloc[[0, -1]])\n","\n","np_idx_ts = np.array(list(map(lambda x: datetime.timestamp(x), droped_new_res_df.index)))\n","\n","print(np_idx_ts[:10])\n","for ts_i in range(len(np_idx_ts)):\n","  \n","  if ts_i != 0:\n","    ts_gap = np_idx_ts[ts_i] - np_idx_ts[ts_i - 1]\n","\n","    if ts_gap > 60 or ts_gap < 60:\n","\n","      print(\"invalid ts_gap found !\")\n","    # if ts_gap == 60:\n","      print(droped_new_res_df.index[ts_i - 1])\n","      print(droped_new_res_df.index[ts_i])\n","      # print(ts_gap)\n","      print()\n"]},{"cell_type":"markdown","metadata":{"id":"x_XGJqBi8Jex"},"source":["### check length of front missing value + middle_data non_missing validity"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"yRNwqVeAu8X8"},"outputs":[],"source":["#       1. new_date 의 시작 timeidx 와 base_date end timeidx 의 최소 days' gap     #\n","#       2. new_date 의 시작 부분 indi. value 는 np.nan 으로 채워질 거기 때문에 계산해야함    #\n","\n","df_count = droped_new_res_df.count()\n","len_missing = df_count.max() - df_count.min()\n","print(len_missing / 1440)\n","\n","#       3. \n","missing_sliced_df = droped_new_res_df.iloc[len_missing:]\n","df_count2 = missing_sliced_df.count()\n","# print(df_count2)\n","print((df_count2.max() - df_count2.min()))    # this value should be zero !\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"AY7E2_hTBsyM"},"outputs":[],"source":["# df_count2.index[df_count2.argmin()]\n","# missing_sliced_df.head(5)\n","\n","stay_missed = np.sum(pd.isnull(missing_sliced_df), axis=0)\n","print(stay_missed)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"p9yqewOw9g33"},"outputs":[],"source":["stay_missed_cols = stay_missed[stay_missed != 0].index\n","\n","for sm_col in stay_missed_cols:\n","  \n","  row_idx = np.argwhere(pd.isnull(missing_sliced_df[sm_col].values))\n","\n","  plt.figure(figsize=(3,3))\n","  plt.plot(row_idx)\n","  plt.ylim(0, len(missing_sliced_df))\n","  plt.title(sm_col)\n","\n","  plt.show()\n"]},{"cell_type":"markdown","metadata":{"id":"MSUY4nnku3s9"},"source":["## legacy"]},{"cell_type":"markdown","metadata":{"id":"epgS5Dksu-HX"},"source":["### mv files"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"aJcVpEdrslA5"},"outputs":[],"source":["df_path = './candlestick_concated/survey_df_v2'\n","files_ = os.listdir(df_path)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"cEKyEYkotFDy"},"outputs":[],"source":["dirs = [file_ for file_ in files_ if not file_.endswith('.ftr')]\n","files = [file_ for file_ in files_ if file_.endswith('.ftr')]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"IgM79tcxtPVZ"},"outputs":[],"source":["dirs"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"M767iRtwtRQP"},"outputs":[],"source":["def move_fn(dir_, file_):\n","  src_path = os.path.join(df_path, file_)\n","  dst_path = os.path.join(df_path, dir_, file_)\n","  shutil.move(src_path, dst_path)\n","  print(\"moved to {}\".format(dst_path))\n","\n","_ = [move_fn('2022-01-10 ETHUSDT_all', file_) for file_ in files if 'eth'.upper() in file_]\n","# sols\n"]},{"cell_type":"markdown","metadata":{"id":"Iy76iO7gztne"},"source":["### move legacy files"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"hMRht32Czwry"},"outputs":[],"source":["# print()\n","cur_dir_list = os.listdir('.')\n","for f in cur_dir_list:\n","  if 'legacy' in f :\n","    # print(f)\n","    if os.path.isdir(current_path + f,):\n","      continue\n","\n","    shutil.move(current_path + f, current_path + 'legacy/' + f)\n","    print(\"moved to\" + current_path + 'legacy/' +  f)"]},{"cell_type":"markdown","metadata":{"id":"5duWn8t4BRyv"},"source":["# IDE platform\n"]},{"cell_type":"markdown","metadata":{"id":"6HOjnZjSgzk1"},"source":["## load ftr_list"]},{"cell_type":"code","execution_count":4,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":8508,"status":"ok","timestamp":1658884042934,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"7FPBG5Qqg2jB","outputId":"8414e231-42d4-48b4-c7f8-54ba9f935ffc"},"outputs":[{"output_type":"stream","name":"stdout","text":["['2022-04-27 ETHUSDT_1m.ftr']\n","2022-04-27 ETHUSDT_1m.ftr loaded !\n","load res_df_ elapsed time : 6.550065040588379\n"]}],"source":["save_path = './candlestick_concated/database_bn/'\n","\n","# dir_path = \"bb1d_backi2\"\n","# date = \"2022-02-17\"\n","# ftr_path = os.path.join(save_path, dir_path, \"concat/cum\", date)\n","\n","# ------ 1T_database ------ #\n","# date = \"2022-04-27\"\n","# ftr_path = os.path.join(save_path, \"non_cum\", date)\n","\n","date = \"2022-04-27\"\n","# date = \"2022-02-17\"\n","ftr_path = os.path.join(save_path, \"cum\", date)\n","\n","# ------ load ftr list ------ #\n","ftr_list = [s for s in os.listdir(ftr_path) if \"ftr\" in s if date in s]\n","print(ftr_list)\n","\n","start_0 = time.time()\n","key = ftr_list[0]  # tempoaray use single key\n","res_df_ = pd.read_feather(os.path.join(ftr_path, key), columns=None, use_threads=True).set_index(\"index\")\n","# print(res_df_.head())\n","print(key, \"loaded !\")\n","print(\"load res_df_ elapsed time :\", time.time() - start_0)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"RQH_l4opEh_O"},"outputs":[],"source":["res_df_.dtypes\n","# res_df_.index[[0, -1]]"]},{"cell_type":"markdown","metadata":{"id":"x2yj2SwAXDLp"},"source":["### edit cols"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"x9wkWw15XCAm","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1657898275247,"user_tz":-540,"elapsed":2,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"cf3fee46-d616-45e7-a3e2-3e0683513582"},"outputs":[{"output_type":"stream","name":"stdout","text":["['stoch_T1333']\n"]}],"source":["col_list = list(res_df_.columns)\n","\n","# ------ check target cols ------ #\n","print([col_ for col_ in col_list if 'stoch' in col_])\n","\n","# ------ drop ------ #\n","# res_df_.drop([col_ for col_ in col_list if 'open_15T' in col_], inplace=True, axis=1)\n","res_df_.drop([col_ for col_ in col_list if 'stoch' in col_], inplace=True, axis=1)\n","# res_df_.drop([col_ for col_ in col_list if '_T40' in col_], inplace=True, axis=1)\n","# res_df_.drop([col_ for col_ in col_list if 'long_base' in col_], inplace=True, axis=1)\n","# res_df_.drop([col_ for col_ in col_list[5:]], inplace=True, axis=1)\n","\n","# ------ replace ------ #\n","# for c_i, col_ in enumerate(col_list):\n","#   if 'basis' in col_:\n","# #   # if col_[-1] in ['m', 'h', 'd', 'H'] and '_' in col_:eTa_5T\n","# #   # if col_[0] in ['h'] and '_' in col_:\n","# #   if 'bir_' in col_:\n","\n","#     col_list[c_i] = col_.replace('basis', 'base')\n","# #     # col_list[c_i] = col_.replace('m', 'T').replace('h', 'H').replace('1T', 'T')\n","# #     # col_list[c_i] = col_.replace('1d', 'D')\n","# #     # col_list[c_i] = col_.replace('eTa_5T', 'ema_5T')\n","# #     # col_list[c_i] = col_list[c_i][1:]\n","# #     # print(col_list[c_i][0])\n","# res_df_.columns = col_list\n","# col_list[-2:] = ['resi_T', 'sup_T']"]},{"cell_type":"markdown","metadata":{"id":"14chOHeXh6JD"},"source":["### lab"]},{"cell_type":"markdown","metadata":{"id":"O87s8_EUakqS"},"source":["#### instant indi."]},{"cell_type":"code","source":["\n","def tc_cci_v2(t_df, wave_period):  # high_confirmation\n","    t_df = cci_v2(t_df, wave_period)\n","    itv = pd.infer_freq(t_df.index)\n","\n","    cci_ = t_df['cci_{}{}'.format(itv, wave_period)].to_numpy()\n","    b1_cci_ = t_df['cci_{}{}'.format(itv, wave_period)].shift(1).to_numpy()\n","\n","    baseline = 0\n","    band_width = 100\n","    upper_band = baseline + band_width\n","    lower_band = baseline - band_width\n","\n","    data_cols = ['open', 'high', 'low', 'close']\n","    ohlc_list = [t_df[col_].to_numpy() for col_ in data_cols]\n","    open, high, low, close = ohlc_list\n","    \n","    t_df['short_tc_{}{}'.format(itv, wave_period)] = (b1_cci_ < lower_band) & (lower_band < cci_)\n","    t_df['long_tc_{}{}'.format(itv, wave_period)] = (b1_cci_ > upper_band) & (upper_band > cci_)\n","\n","    return t_df\n","\n","def tc_cci(t_df, wave_period):\n","    t_df = cci_v2(t_df, wave_period)\n","    itv = pd.infer_freq(t_df.index)\n","\n","    cci_ = t_df['cci_{}{}'.format(itv, wave_period)].to_numpy()\n","    b1_cci_ = t_df['cci_{}{}'.format(itv, wave_period)].shift(1).to_numpy()\n","\n","    baseline = 0\n","    band_width = 100\n","    upper_band = baseline + band_width\n","    lower_band = baseline - band_width\n","\n","    data_cols = ['open', 'high', 'low', 'close']\n","    ohlc_list = [t_df[col_].to_numpy() for col_ in data_cols]\n","    open, high, low, close = ohlc_list\n","    \n","    t_df['short_tc_{}{}'.format(itv, wave_period)] = (b1_cci_ > lower_band) & (lower_band > cci_)\n","    t_df['long_tc_{}{}'.format(itv, wave_period)] = (b1_cci_ < upper_band) & (upper_band < cci_)\n","\n","    return t_df\n","\n","def tc_dc_base(t_df, dc_period):\n","    t_df = donchian_channel_v4(t_df, dc_period)\n","    itv = pd.infer_freq(t_df.index)\n","\n","    dc_base_ = t_df['dc_base_{}{}'.format(itv, dc_period)].to_numpy()\n","\n","    close = t_df['close'].to_numpy()\n","    b1_close = t_df['close'].shift(1).to_numpy()\n","\n","    t_df['short_tc_{}{}'.format(itv, dc_period)] = (b1_close > dc_base_) & (dc_base_ > close)\n","    t_df['long_tc_{}{}'.format(itv, dc_period)] = (b1_close < dc_base_) & (dc_base_ < close)\n","\n","    return t_df"],"metadata":{"id":"7V1RdTqtVM2b"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"LyGnAMvLYvOZ"},"source":["#### wave_range"]},{"cell_type":"markdown","metadata":{"id":"O1uu9vQnY5dn"},"source":["##### plot_check"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"YqBXjVPzdccC"},"outputs":[],"source":["i = random.randint(0, len(res_df))\n","# i = 235290, 512385\n","# i = 74470\n","# i = 82533\n","i = 387103\n","i = 370055\n","i = 370940\n","# i = 185369\n","i = 186060\n","\n","plot_size = 300 # 1500 150\n","# t_df = res_df.iloc[i - plot_size:i + plot_size]\n","t_df = res_df.iloc[i - plot_size:i]\n","a_data = t_df.to_numpy()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"PgaNnempXRd_"},"outputs":[],"source":["wave_itv1, wave_period1 = 'T', 20\n","roll_hl_cnt = 3\n","\n","if wave_itv1 != 'T':\n","    offset = '1h' if wave_itv1 != 'D' else '9h'\n","    htf_df = to_htf(t_df, wave_itv1, offset=offset)  # to_htf 는 ohlc, 4개의 col 만 존재 (현재까지)\n","    # htf_df = wave_range_cci_v3(htf_df, wave_period1)\n","    htf_df = wave_range_dc_envel_v1(htf_df, wave_period1)\n","    \n","\n","    cols = list(htf_df.columns)  # 그냥 다 넣어버리기 (추후 혼란 방지)\n","\n","    valid_high_prime_idx, valid_low_prime_idx, roll_prev_high_idx_arr, roll_prev_low_idx_arr = roll_wave_hl_idx_v5(htf_df, wave_itv1, wave_period1, roll_hl_cnt=roll_hl_cnt)\n","\n","    htf_df = get_roll_wave_data_v2(htf_df, valid_high_prime_idx, roll_prev_high_idx_arr, 'wave_high_fill_{}{}'.format(wave_itv1, wave_period1), roll_hl_cnt)\n","    cols += list(htf_df.columns[-roll_hl_cnt:])\n","\n","    htf_df = get_roll_wave_data_v2(htf_df, valid_low_prime_idx, roll_prev_low_idx_arr, 'wave_low_fill_{}{}'.format(wave_itv1, wave_period1), roll_hl_cnt)\n","    cols += list(htf_df.columns[-roll_hl_cnt:])\n","\n","    htf_df = wave_range_ratio_v4_2(htf_df, wave_itv1, wave_period1, roll_hl_cnt=3)\n","    cols += list(htf_df.columns[-4:])  # wrr 은 4개의 cols\n","\n","    # ------ 필요한 cols 만 join (htf's idx 정보는 ltf 와 sync. 가 맞지 않음 - join 불가함) ------ #\n","    t_df.drop(cols, inplace=True, axis=1, errors='ignore')\n","    t_df = t_df.join(to_lower_tf_v3(t_df, htf_df, cols, backing_i=0), how='inner')\n","\n","else:  \n","  # t_df = wave_range_cci_v4(t_df, wave_period1)\n","  t_df = wave_range_stoch_v1(t_df, wave_period1)\n","  # t_df = wave_range_dc_envel_v1(t_df, wave_period1)\n","\n","  valid_high_prime_idx, valid_low_prime_idx, roll_prev_high_idx_arr, roll_prev_low_idx_arr = roll_wave_hl_idx_v5(t_df, wave_itv1, wave_period1, roll_hl_cnt=roll_hl_cnt)\n","  t_df = get_roll_wave_data_v2(t_df, valid_high_prime_idx, roll_prev_high_idx_arr, 'wave_high_fill_{}{}'.format(wave_itv1, wave_period1), roll_hl_cnt)\n","  t_df = get_roll_wave_data_v2(t_df, valid_low_prime_idx, roll_prev_low_idx_arr, 'wave_low_fill_{}{}'.format(wave_itv1, wave_period1), roll_hl_cnt)\n","\n","  t_df = wave_range_ratio_v4_2(t_df, wave_itv1, wave_period1, roll_hl_cnt=roll_hl_cnt)\n","\n","# t_df = wave_range_v11(t_df, config)\n","# t_df = wave_range_v11_2(t_df, config)\n","# t_df = wave_range_dcbase_v11_3(t_df, config, over_period=2)\n","# t_df = wave_range_cci_v1(t_df, wave_itv1, wave_period1)\n","# t_df = wave_range_v12(t_df, config, ltf_df=None)\n","# t_df = wave_range_v13(t_df, config, ltf_df=None, term_thresh=1)\n","# t_df = wave_range_v14(t_df, config, ltf_df=None, term_thresh1=1, term_thresh2=3)\n","# t_df = wave_range_v15(t_df, config, term_thresh1=2, term_thresh2=3)\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":862},"executionInfo":{"elapsed":3886,"status":"ok","timestamp":1657898548226,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"-Dr_tTk9csFm","outputId":"e32038a0-9b82-417d-a689-7e1dea7b4972"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1080x1080 with 2 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["plt.style.use(['dark_background', 'fast'])\n","fig = plt.figure(figsize=(15, 15))\n","nrows, ncols = 2, 1\n","gs = gridspec.GridSpec(nrows=nrows,  # row 부터 index 채우고 col 채우는 순서임 (gs_idx)\n","                        ncols=ncols,\n","                        height_ratios=[3, 1]\n","                        )\n","\n","ax = fig.add_subplot(gs[0])\n","\n","# ------ candles ------ #\n","candle_plot(a_data[:, col_idx_dict['ohlc_col_idxs']], ax, alpha=1.0, wickwidth=1.0)\n","# _ = [step_col_plot(a_data[:, params[0]], *params[1:]) for params in col_idx_dict['step_col_info']]\n","\n","len_df = len(t_df)   \n","len_df_range = np.arange(len_df).astype(int)\n","\n","# ============ ============ ============ #\n","# ============ ============ ============ #\n","\n","wave_high_fill_ = t_df['wave_high_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","wave_low_fill_ = t_df['wave_low_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","wave_high_terms_cnt_fill_ = t_df['wave_high_terms_cnt_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","wave_low_terms_cnt_fill_ = t_df['wave_low_terms_cnt_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","\n","wave_cu_idx_ = get_index_bybool(t_df['wave_cu_{}{}'.format(wave_itv1, wave_period1)].to_numpy(), len_df_range)\n","wave_co_idx_ = get_index_bybool(t_df['wave_co_{}{}'.format(wave_itv1, wave_period1)].to_numpy(), len_df_range)\n","# wave_cu_bool_idx_ = get_index_bybool(t_df['wave_cu_bool_{}{}'.format(wave_itv1, wave_period1)].to_numpy(), len_df_range)\n","# wave_co_bool_idx_ = get_index_bybool(t_df['wave_co_bool_{}{}'.format(wave_itv1, wave_period1)].to_numpy(), len_df_range)\n","wave_update_low_cu_bool_idx_ = get_index_bybool(t_df['wave_update_low_cu_bool_{}{}'.format(wave_itv1, wave_period1)].to_numpy(), len_df_range)\n","wave_update_high_co_bool_idx_ = get_index_bybool(t_df['wave_update_high_co_bool_{}{}'.format(wave_itv1, wave_period1)].to_numpy(), len_df_range)\n","\n","wave_cu_prime_idx_ = t_df['wave_cu_prime_idx_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","wave_co_prime_idx_ = t_df['wave_co_prime_idx_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","wave_cu_prime_idx_fill_ = t_df['wave_cu_prime_idx_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","wave_co_prime_idx_fill_ = t_df['wave_co_prime_idx_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","\n","wave_cu_post_idx_ = t_df['wave_cu_post_idx_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","wave_co_post_idx_ = t_df['wave_co_post_idx_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","wave_cu_post_idx_fill_ = t_df['wave_cu_post_idx_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","wave_co_post_idx_fill_ = t_df['wave_co_post_idx_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","\n","wave_cu_marker_ = t_df['wave_cu_marker_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","wave_co_marker_ = t_df['wave_co_marker_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","\n","# high_prime_idx = t_df['wave_high_prime_idx_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","# low_prime_idx = t_df['wave_low_prime_idx_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","# high_prime_idx_fill = t_df['wave_high_prime_idx_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","# low_prime_idx_fill = t_df['wave_low_prime_idx_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","\n","# ============ plot_check ============ #\n","# dc_base_ = t_df['dc_base_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","# plt.step(len_df_range, dc_base_, alpha=1.0, color='cyan', linewidth=1)\n","\n","plt.step(len_df_range, wave_cu_marker_, \"o\", alpha=1.0, color='#ff00ff', markersize=3)\n","plt.step(len_df_range, wave_co_marker_, \"o\", alpha=1.0, color='#00ff00', markersize=3)\n","\n","plt.step(len_df_range, t_df['dc_upper_{}{}'.format(wave_itv1, wave_period1)], color='#ffeb3b')\n","plt.step(len_df_range, t_df['dc_lower_{}{}'.format(wave_itv1, wave_period1)], color='#ffeb3b')\n","\n","# [plt.axvline(int(idx_), color=\"#ff0000\") for idx_ in wave_cu_bool_idx_ if not np.isnan(idx_)]\n","# [plt.axvline(int(idx_), color=\"#0000ff\") for idx_ in wave_co_bool_idx_ if not np.isnan(idx_)]\n","[plt.axvline(int(idx_), color=\"#ff0000\") for idx_ in wave_update_low_cu_bool_idx_ if not np.isnan(idx_)]\n","[plt.axvline(int(idx_), color=\"#0000ff\") for idx_ in wave_update_high_co_bool_idx_ if not np.isnan(idx_)]\n","\n","# [plt.axvline(int(idx_), color=\"#ff00ff\") for idx_ in wave_cu_idx_ if not np.isnan(idx_)]\n","# [plt.axvline(int(idx_), color=\"#00ff00\") for idx_ in wave_co_idx_ if not np.isnan(idx_)]\n","\n","# [plt.axvline(int(idx_), color=\"#00ff00\") for idx_ in wave_high_prime_idx if not np.isnan(idx_)]\n","# [plt.axvline(int(idx_), color=\"#ff00ff\") for idx_ in wave_low_prime_idx if not np.isnan(idx_)]\n","\n","plt.step(len_df_range, wave_high_fill_, \"*\", alpha=1.0, color='#00ff00', markersize=6)\n","plt.step(len_df_range, wave_low_fill_, \"*\", alpha=1.0, color='#ff00ff', markersize=6)\n","\n","# ------ data check in gs[0] ------ #\n","plt.axvline(wave_cu_post_idx_fill_[230], color='r')\n","plt.axvline(wave_cu_prime_idx_fill_[230])\n","\n","plt.xlim(0, len_df)\n","\n","plt.subplot(gs[1])\n","\n","# --- cci --- #\n","# cci_ = t_df['cci_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","# plt.step(len_df_range, cci_, alpha=1.0, color='yellow', linewidth=2)\n","# plt.axhline(100, color=\"#ffffff\")\n","# plt.axhline(-100, color=\"#ffffff\")\n","\n","# --- stoch --- #\n","stoch_ = t_df['stoch_{}{}33'.format(wave_itv1, wave_period1)].to_numpy()\n","plt.step(len_df_range, stoch_, alpha=1.0, color='yellow', linewidth=2)\n","plt.axhline(67, color=\"#ffffff\")\n","plt.axhline(33, color=\"#ffffff\")\n","\n","[plt.axvline(int(idx_), color=\"#ff00ff\") for idx_ in wave_cu_idx_ if not np.isnan(idx_)]\n","[plt.axvline(int(idx_), color=\"#00ff00\") for idx_ in wave_co_idx_ if not np.isnan(idx_)]   # long 이라서 초록색임\n","\n","# plt.step(len_df_range, wave_high_terms_cnt_fill_, alpha=1.0, color='yellow', linewidth=2)\n","# plt.step(len_df_range, wave_low_terms_cnt_fill_, alpha=1.0, color='yellow', linewidth=2)\n","# plt.step(len_df_range, wave_high_terms_cnt_fill_, \"*\", alpha=1.0, color='#00ff00', markersize=6)\n","# plt.step(len_df_range, wave_low_terms_cnt_fill_, \"*\", alpha=1.0, color='#ff00ff', markersize=6)\n","\n","\n","plt.xlim(0, len_df)  # for sync. with gs[0]\n","\n","plt.show()"]},{"cell_type":"markdown","metadata":{"id":"c2yVTn1tnxMn"},"source":["###### data_window"]},{"cell_type":"code","source":["print(valid_high_prime_idx)  # = valid_co_prime_idx\n","print(roll_prev_high_idx_arr)   # = roll_prev_co_idx_arr"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"6bra-Br3lq1h","executionInfo":{"status":"ok","timestamp":1657850711133,"user_tz":-540,"elapsed":2,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"7971ff1e-f4eb-4b51-ac99-9b0b0e8e0587"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[ 99 128 170 240]\n","[[ 99 128 170]\n"," [128 170 240]]\n"]}]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":331,"status":"ok","timestamp":1657413924345,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"0DgdFydfB1f-","outputId":"6bee67ce-efa2-479c-f6e6-701f42f92bd1"},"outputs":[{"output_type":"stream","name":"stdout","text":["170.0\n","nan\n"]},{"output_type":"execute_result","data":{"text/plain":["300"]},"metadata":{},"execution_count":20}],"source":["# print(wave_cu_post_idx_fill_[210])\n","print(wave_co_prime_idx_fill_[210])\n","# print(wave_co_idx_[~np.isnan(wave_co_idx_)])\n","print(wave_co_idx_[249])\n","\n","# print(len(t_df))\n","len(wave_co_prime_idx_fill_)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"zj_d5wsfDzf_"},"outputs":[],"source":["roll_hl_cnt = 3\n","high_prime_idx = t_df['wave_high_prime_idx_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","low_prime_idx = t_df['wave_low_prime_idx_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","\n","valid_high_prime_idx = high_prime_idx[~np.isnan(high_prime_idx)].astype(int)  # roll_high 를 위한 prime_idx\n","valid_low_prime_idx = low_prime_idx[~np.isnan(low_prime_idx)].astype(int)  # roll_low 를 위한 prime_idx\n","\n","roll_high_idx_arr = np.array([valid_high_prime_idx[idx_ + 1 - roll_hl_cnt:idx_ + 1] for idx_ in range(len(valid_high_prime_idx)) if\n","                              idx_ + 1 >= roll_hl_cnt])  # cnt 수를 만족시키기 위해 idx 제한\n","roll_low_idx_arr = np.array(\n","    [valid_low_prime_idx[idx_ + 1 - roll_hl_cnt:idx_ + 1] for idx_ in range(len(valid_low_prime_idx)) if idx_ + 1 >= roll_hl_cnt])"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Z-EokTzIqb-T"},"outputs":[],"source":["%timeit -n1 -r1 wave_range_v10(res_df[-100000:], period1, ltf_df=None) # 23.7 s per loop\n","%timeit -n1 -r1 wave_range_v11(res_df[-100000:], period1, ltf_df=None) # 574 ms per loop"]},{"cell_type":"markdown","metadata":{"id":"Q_1wJTcRYpm8"},"source":["##### legacy"]},{"cell_type":"code","source":["def get_next_fibo_gap(x):\n","  if 0 < x < 0.214:\n","    return -0.786\n","  elif 0.214 < x < 0.382:\n","    return -0.618\n","  elif 0.382 < x < 0.5:\n","    return -0.5\n","  elif 0.5 < x < 0.618:\n","    return -0.382\n","  elif 0.618 < x < 0.764:\n","    return -0.236\n","  elif 0.764 < x < 1:\n","    return 0\n","  else:\n","    return np.nan # 일단은, wrr_32 < 1 만 허용키로.\n","\n","\n","def get_next_fibo_gap2(x):\n","  if 0 < x < 0.214:\n","    return -0.618\n","  elif 0.214 < x < 0.382:\n","    return -0.5\n","  elif 0.382 < x < 0.5:\n","    return -0.382\n","  elif 0.5 < x < 0.618:\n","    return -0.236\n","  elif 0.618 < x < 0.764:\n","    return 0\n","  elif 0.764 < x < 1:\n","    return 0\n","  else:\n","    return np.nan # 일단은, wrr_32 < 1 만 허용키로."],"metadata":{"id":"Bmp7faPhzydp"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"02DcTVB2cYuR"},"source":["##### dump"]},{"cell_type":"code","source":["roll_hl_cnt = 3\n","wave_itv = pd.infer_freq(t_df.index)\n","wave_period = config.tr_set.wave_period\n","\n","len_df = len(t_df)\n","\n","high_prime_idx = t_df['wave_high_prime_idx_{}{}'.format(wave_itv, wave_period)].to_numpy()   # cu_post_idx\n","low_prime_idx = t_df['wave_low_prime_idx_{}{}'.format(wave_itv, wave_period)].to_numpy()    \n","\n","valid_high_prime_idx = high_prime_idx[~np.isnan(high_prime_idx)].astype(int)  # roll_high 를 위한 prime_idx\n","valid_low_prime_idx = low_prime_idx[~np.isnan(low_prime_idx)].astype(int)  # roll_low 를 위한 prime_idx\n","\n","roll_high_idx_arr = np.array([valid_high_prime_idx[idx_ + 1 - roll_hl_cnt:idx_ + 1] for idx_ in range(len(valid_high_prime_idx)) if idx_ + 1 >= roll_hl_cnt])  # cnt 수를 만족시키기 위해 idx 제한\n","roll_low_idx_arr = np.array([valid_low_prime_idx[idx_ + 1 - roll_hl_cnt:idx_ + 1] for idx_ in range(len(valid_low_prime_idx)) if idx_ + 1 >= roll_hl_cnt])\n"],"metadata":{"id":"fjGcs9ngkh5s"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["t_df = cci_v2(t_df, wave_period)\n","\n","cci_ = t_df['cci_{}{}'.format(itv, wave_period)].to_numpy()\n","b1_cci_ = t_df['cci_{}{}'.format(itv, wave_period)].shift(1).to_numpy()\n","\n","band_width = 100\n","upper_band = band_width\n","lower_band = -band_width\n","\n","len_df = len(t_df)\n","len_df_range = np.arange(len_df).astype(int)\n","\n","data_cols = ['open', 'high', 'low', 'close']\n","open, high, low, close = [t_df[col_].to_numpy() for col_ in data_cols]\n","# b1_close = t_df.close.shift(itv_num).to_numpy()\n","\n","# ============ modules ============ #\n","# ------ define co, cu ------ # <- point missing 과 관련해 정교해아함\n","cu_bool = (b1_cci_ > upper_band) & (upper_band > cci_)\n","co_bool = (b1_cci_ < lower_band) & (lower_band < cci_)\n","\n","cu_idx = get_index_bybool(cu_bool, len_df_range)\n","co_idx = get_index_bybool(co_bool, len_df_range)\n","\n","cu_fill_idx, co_fill_idx, cu_prime_idx, co_prime_idx, cu_prime_fill_idx, co_prime_fill_idx, valid_cu_bool, valid_co_bool = get_terms_info_v4(\n","    cu_idx, co_idx, len_df, len_df_range)\n","\n","# ------ get post_terms ------ #\n","high_post_terms = np.vstack((co_fill_idx[valid_cu_bool], cu_idx[valid_cu_bool])).T.astype(int)\n","low_post_terms = np.vstack((cu_fill_idx[valid_co_bool], co_idx[valid_co_bool])).T.astype(int)\n","\n","high_post_terms_cnt = high_post_terms[:, 1] - high_post_terms[:, 0]\n","low_post_terms_cnt = low_post_terms[:, 1] - low_post_terms[:, 0]\n","\n","paired_post_cu_idx = high_post_terms[:, 1]\n","paired_post_co_idx = low_post_terms[:, 1]\n","\n","# ------ get prime_terms ------ # # 기본은 아래 logic 으로 수행하고, update_hl 도 해당 term 구간의 hl 이 더 작거나 클경우 적용 가능할 것\n","# high_prime_terms = np.vstack((co_prime_fill_idx[valid_cu_bool], cu_idx[valid_cu_bool])).T.astype(int)\n","# low_prime_terms = np.vstack((cu_prime_fill_idx[valid_co_bool], co_idx[valid_co_bool])).T.astype(int)\n","\n","# high_prime_terms_cnt = high_prime_terms[:, 1] - high_prime_terms[:, 0]\n","# low_prime_terms_cnt = low_prime_terms[:, 1] - low_prime_terms[:, 0]\n","\n","# paired_prime_cu_idx = high_prime_terms[:, 1]\n","# paired_prime_co_idx = low_prime_terms[:, 1]\n","\n","# ====== get wave_hl & terms ====== #\n","wave_high_ = np.full(len_df, np.nan)\n","wave_low_ = np.full(len_df, np.nan)\n","\n","wave_highs = np.array([high[iin:iout + 1].max() for iin, iout in high_post_terms])\n","wave_lows = np.array([low[iin:iout + 1].min() for iin, iout in low_post_terms])\n","\n","wave_high_[paired_post_cu_idx] = wave_highs\n","wave_low_[paired_post_co_idx] = wave_lows\n","\n","wave_high_fill_ = fill_arr(wave_high_)\n","wave_low_fill_ = fill_arr(wave_low_)\n","\n","# ------ Todo, update_hl 에 대해서, post_terms_hl 적용 ------ #\n","wave_high_terms_low_ = np.full(len_df, np.nan)\n","wave_low_terms_high_ = np.full(len_df, np.nan)\n","\n","wave_high_terms_lows = np.array([low[iin:iout + 1].min() for iin, iout in high_post_terms])  # for point rejection, Todo, min_max 설정 항상 주의\n","wave_low_terms_highs = np.array([high[iin:iout + 1].max() for iin, iout in low_post_terms])\n","\n","wave_high_terms_low_[paired_post_cu_idx] = wave_high_terms_lows\n","wave_low_terms_high_[paired_post_co_idx] = wave_low_terms_highs\n","\n","update_low_cu_bool = wave_high_terms_low_ < wave_low_fill_\n","update_high_co_bool = wave_low_terms_high_ > wave_high_fill_\n","\n","# ------ term cnt ------ #\n","wave_high_terms_cnt_ = np.full(len_df, np.nan)\n","wave_low_terms_cnt_ = np.full(len_df, np.nan)\n","\n","wave_high_terms_cnt_[paired_post_cu_idx] = high_post_terms_cnt\n","wave_low_terms_cnt_[paired_post_co_idx] = low_post_terms_cnt\n","\n","wave_high_terms_cnt_fill_ = fill_arr(wave_high_terms_cnt_)\n","wave_low_terms_cnt_fill_ = fill_arr(wave_low_terms_cnt_)\n","\n","# ------ hl_fill 의 prime_idx 를 찾아야함 ------ #\n","# b1_wave_high_fill_ = pd.Series(wave_high_fill_).shift(1).to_numpy()\n","# b1_wave_low_fill_ = pd.Series(wave_low_fill_).shift(1).to_numpy()\n","# wave_high_prime_idx = np.where((wave_high_fill_ != b1_wave_high_fill_) & ~np.isnan(wave_high_fill_), len_df_range, np.nan)\n","# wave_low_prime_idx = np.where((wave_low_fill_ != b1_wave_low_fill_) & ~np.isnan(wave_low_fill_), len_df_range, np.nan)\n","#\n","# high_prime_idx_fill_ = fill_arr(wave_high_prime_idx)\n","# low_prime_idx_fill_ = fill_arr(wave_low_prime_idx)\n","\n","# ============ enlist to df_cols ============ #\n","t_df['wave_high_fill_{}{}'.format(itv, wave_period)] = wave_high_fill_\n","t_df['wave_low_fill_{}{}'.format(itv, wave_period)] = wave_low_fill_\n","t_df['wave_high_terms_cnt_fill_{}{}'.format(itv, wave_period)] = wave_high_terms_cnt_fill_\n","t_df['wave_low_terms_cnt_fill_{}{}'.format(itv, wave_period)] = wave_low_terms_cnt_fill_\n","\n","# ------ for roll prev_hl ------ #\n","# high_post_idx 를 위해 co_prime_idx 입력\n","t_df['wave_high_prime_idx_{}{}'.format(itv, wave_period)] = co_prime_idx # co_prime_idx wave_high_prime_idx  # high 갱신을 고려해, prev_hl 는 prime_idx 기준으로 진행\n","t_df['wave_low_prime_idx_{}{}'.format(itv, wave_period)] = cu_prime_idx # cu_prime_idx wave_low_prime_idx  # cu_prime_idx's low 를 사용하겠다라는 의미, 즉 roll_prev 임\n","\n","# ------ for first_high ------ #\n","t_df['wave_high_prime_idx_fill_{}{}'.format(itv, wave_period)] = co_prime_fill_idx # co_prime_fill_idx high_prime_idx_fill_\n","t_df['wave_low_prime_idx_fill_{}{}'.format(itv, wave_period)] = cu_prime_fill_idx # cu_prime_fill_idx low_prime_idx_fill_\n","\n","# ------ for plot_checking ------ #\n","t_df['wave_cu_bool_{}{}'.format(itv, wave_period)] = cu_bool  # temporary, for plot_check\n","t_df['wave_co_bool_{}{}'.format(itv, wave_period)] = co_bool\n","t_df['wave_cu_{}{}'.format(itv, wave_period)] = cu_bool * ~update_low_cu_bool\n","t_df['wave_co_{}{}'.format(itv, wave_period)] = co_bool * ~update_high_co_bool\n","t_df['wave_cu_marker_{}{}'.format(itv, wave_period)] = get_line(cu_idx, close)\n","t_df['wave_co_marker_{}{}'.format(itv, wave_period)] = get_line(co_idx, close)\n","# t_df['update_low_cu_bool_{}{}'.format(itv, wave_period)] = update_low_cu_bool\n","# t_df['update_high_co_bool_{}{}'.format(itv, wave_period)] = update_high_co_bool\n","\n","if itv != 'T':\n","    join_cols = np.arange(-15, 0, 1).astype(int)  # wave vars. + wave_unit's col\n","    res_df.drop(t_df.columns[join_cols], inplace=True, axis=1, errors='ignore')\n","    try:\n","        res_df = res_df.join(to_lower_tf_v3(res_df, t_df, join_cols, backing_i=0), how='inner')\n","    except Exception as e:\n","        print(\"error in wave_range()'s join() :\", e)\n","\n","    return res_df\n","\n","else:\n","    return t_df"],"metadata":{"id":"CLYKs7ItkgIa"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Go7ARIUhfC1g"},"outputs":[],"source":["\n","\n","def get_roll_wave_data_v2(valid_prime_idx, roll_idx_arr, len_df, data, roll_prev_hl_cnt):\n","\n","    roll_data = pd.DataFrame(np.full((len_df, roll_prev_hl_cnt), np.nan))\n","    roll_data.iloc[valid_prime_idx[roll_prev_hl_cnt:], :] = data[roll_idx_arr]  # 제한된 idx 를 제외한 row 에 roll_hl 입력\n","\n","    return roll_data.ffill().to_numpy()\n","\n","def roll_wave_hl_v5(t_df, config, roll_prev_hl_cnt=3):\n","  \n","    wave_itv = pd.infer_freq(t_df.index)\n","    wave_period = config.tr_set.wave_period\n","\n","    len_df = len(t_df)\n","\n","    high_prime_idx = t_df['wave_high_prime_idx_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","    low_prime_idx = t_df['wave_low_prime_idx_{}{}'.format(wave_itv, wave_period)].to_numpy()    \n","\n","    valid_high_prime_idx = high_prime_idx[~np.isnan(high_prime_idx)].astype(int)  # roll_high 를 위한 prime_idx\n","    valid_low_prime_idx = low_prime_idx[~np.isnan(low_prime_idx)].astype(int)  # roll_low 를 위한 prime_idx\n","\n","    roll_prev_high_idx_arr = np.array([valid_high_prime_idx[idx_ - roll_prev_hl_cnt:idx_] for idx_ in range(len(valid_high_prime_idx)) if idx_ >= roll_prev_hl_cnt])  # cnt 수를 만족시키기 위해 idx 제한\n","    roll_prev_low_idx_arr = np.array([valid_low_prime_idx[idx_ - roll_prev_hl_cnt:idx_] for idx_ in range(len(valid_low_prime_idx)) if idx_ >= roll_prev_hl_cnt])\n","\n","    return valid_high_prime_idx, valid_low_prime_idx, roll_prev_high_idx_arr, roll_prev_low_idx_arr"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"pgA8QqyXZ66o"},"outputs":[],"source":["t_df[roll_cols].tail(100)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"wF7fKJ3mOhaf"},"outputs":[],"source":["data_col = 'wave_high_fill_{}{}'.format(wave_itv1, wave_period1)\n","data = htf_df[data_col].to_numpy()\n","len_htf_df = len(htf_df)\n","\n","\n","roll_data = pd.DataFrame(index=htf_df.index, data=np.full((len_htf_df, roll_hl_cnt), np.nan))\n","roll_data.iloc[valid_high_prime_idx[roll_hl_cnt - 1:], :] = data[roll_prev_high_idx_arr]  # 제한된 idx 를 제외한 row 에 roll_hl 입력\n","\n","# roll_data.ffill()\n","htf_df[roll_cols] = roll_data.ffill()\n","htf_df[roll_cols]\n","\n","# htf_df[roll_cols] = np.nan\n","# htf_df[roll_cols].iloc[valid_high_prime_idx[roll_hl_cnt - 1:]] = data[roll_prev_high_idx_arr]  # 제한된 idx 를 제외한 row 에 roll_hl 입력\n","\n","# htf_df[roll_cols] = htf_df[roll_cols].ffill().to_numpy()\n","\n","# valid_high_prime_idx\n","# np.sum(~np.isnan(roll_high))\n","# htf_df[roll_cols]\n","# roll_prev_low_idx_arr"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"3vHLGont-BFe"},"outputs":[],"source":["# t_df\n","to_lower_tf_v2(res_df, t_df, join_cols)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Mh3w2s-j34Zs"},"outputs":[],"source":["wave_post_highs = np.array([high[iin:iout + 1].max() for iin, iout in high_post_terms])\n","wave_post_lows = np.array([low[iin:iout + 1].min() for iin, iout in low_post_terms])\n","\n","# print(len(paired_cu_idx))\n","# print(len(wave_post_highs))\n","# print(len(cu_bool))\n","\n","update_paired_cu_bool = (cu_bool * (wave_high_terms_low_ < wave_low_fill_))[paired_cu_idx]\n","update_paired_cu_idx = paired_cu_idx[update_paired_cu_bool]\n","wave_high_[update_paired_cu_idx] = wave_post_highs[update_paired_cu_bool]\n","\n","update_paired_co_bool = (co_bool * (wave_low_terms_high_ > wave_high_fill_))[paired_co_idx]\n","update_paired_co_idx = paired_co_idx[update_paired_co_bool]\n","wave_low_[update_paired_co_idx] = wave_post_lows[update_paired_co_bool]\n","\n","wave_high_fill2_ = fill_arr(wave_high_)\n","wave_low_fill2_ = fill_arr(wave_low_)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":3,"status":"ok","timestamp":1651799326382,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"eQ06-kWq4m6F","outputId":"5c5df956-4fbd-4aa4-e1d6-dc5d0c23ac19"},"outputs":[{"name":"stdout","output_type":"stream","text":["11\n","11\n"]}],"source":["# wave_post_highs\n","# update_cu_bool = (cu_bool * (wave_high_terms_low_ < wave_low_fill_))[paired_cu_idx]\n","# print(paired_cu_idx[update_cu_bool])\n","# print(paired_cu_idx)\n","print(len(update_paired_cu_idx))\n","print(len(wave_post_highs[update_paired_cu_bool]))\n","# print(high_prime_terms[:, 1])\n","# print(high_post_terms[:, 1])"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"SUFmr9Z_kcCN"},"outputs":[],"source":["cu_idx = get_index_bybool(cu_bool, len_df_range)\n","co_idx = get_index_bybool(co_bool, len_df_range)\n","\n","cu_fill_idx = fill_arr(cu_idx)\n","co_fill_idx = fill_arr(co_idx)\n","\n","notnan_cu_bool = ~np.isnan(cu_idx)\n","notnan_co_bool = ~np.isnan(co_idx)\n","\n","# ------ 생략된 idx 에 대한 prime_idx 탐색 ------ #\n","high_bool = cu_fill_idx < co_fill_idx  # 이렇게 해야 high_terms[:, 1] 이 cu_idx 가 나옴\n","low_bool = co_fill_idx < cu_fill_idx\n","\n","high_terms_vec = get_index_bybool(high_bool, len_df_range)\n","low_terms_vec = get_index_bybool(low_bool, len_df_range) # -> low_terms\n","\n","high_terms_list = using_clump(high_terms_vec)\n","low_terms_list = using_clump(low_terms_vec)\n","\n","valid_cu_prime_idx = np.array([terms.min() for terms in low_terms_list])\n","valid_co_prime_idx = np.array([terms.min() for terms in high_terms_list])\n","\n","cu_prime_idx = np.full(len_df, np.nan)\n","co_prime_idx = np.full(len_df, np.nan)\n","\n","cu_prime_idx[valid_cu_prime_idx] = valid_cu_prime_idx\n","co_prime_idx[valid_co_prime_idx] = valid_co_prime_idx\n","\n","cu_prime_fill_idx = fill_arr(cu_prime_idx)\n","co_prime_fill_idx = fill_arr(co_prime_idx)\n","\n","# ------ get co, cu terms_v2 ------ # # 기본은 아래 logic 으로 수행하고, update_hl 도 해당 term 구간의 hl 이 더 작거나 클경우 적용 가능할 것\n","valid_cu_bool = notnan_cu_bool * ~np.isnan(co_fill_idx) * ~np.isnan(co_prime_fill_idx)\n","valid_co_bool = notnan_co_bool * ~np.isnan(cu_fill_idx) * ~np.isnan(cu_prime_fill_idx)\n","\n","high_post_terms = np.vstack((co_fill_idx[valid_cu_bool], cu_idx[valid_cu_bool])).T.astype(int)\n","low_post_terms = np.vstack((cu_fill_idx[valid_co_bool], co_idx[valid_co_bool])).T.astype(int)\n","\n","high_terms_cnt = high_post_terms[:, 1] - high_post_terms[:, 0] \n","low_terms_cnt = low_post_terms[:, 1] - low_post_terms[:, 0] \n","\n","high_prime_terms = np.vstack((co_prime_fill_idx[valid_cu_bool], cu_idx[valid_cu_bool])).T.astype(int)\n","low_prime_terms = np.vstack((cu_prime_fill_idx[valid_co_bool], co_idx[valid_co_bool])).T.astype(int)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"_3pOQtt2ttfk"},"outputs":[],"source":["# co_prime_idx\n","# co_prime_fill_idx\n","high_prime_terms"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":6,"status":"ok","timestamp":1651756811396,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"kKaD1fK3WPRP","outputId":"bbe470f3-17d0-4029-97e9-2fb383a0c752"},"outputs":[{"data":{"text/plain":["array([nan,  2.,  7.,  2.,  4.,  2.,  7.,  5.,  4.,  6.,  9.,  2.,  5., 11., 14.])"]},"execution_count":79,"metadata":{},"output_type":"execute_result"}],"source":["#  get_index_bybool(notnan_cu_bool, len_df_range)\n","valid_cu_idx = cu_idx[notnan_cu_bool]\n","valid_shift_cu_idx = pd.Series(valid_cu_idx).shift(1).to_numpy()\n","valid_co_idx = co_idx[notnan_co_bool]\n","valid_shift_co_idx = pd.Series(valid_co_idx).shift(1).to_numpy()\n","\n","valid_cu_idx - valid_shift_cu_idx\n","valid_co_idx - valid_shift_co_idx"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"YoZpr7lDn7z-"},"outputs":[],"source":["def wave_range_v14(t_df, config, ltf_df=None, term_thresh1=1, term_thresh2=3):  # v2 for period1 only\n","\n","  itv = pd.infer_freq(t_df.index)\n","  period1 = config.tr_set.wave_period\n","  # print(period1)\n","\n","  itv_num = to_itvnum(itv)\n","  # print(itv_num)\n","\n","  t_df = donchian_channel_v4(t_df, period1) \n","\n","  dc_base_ = t_df['dc_base_{}{}'.format(itv, period1)].to_numpy()\n","  b1_dc_base_ = t_df['dc_base_{}{}'.format(itv, period1)].shift(itv_num).to_numpy()\n","\n","  len_df = len(t_df)   \n","  len_df_range = np.arange(len_df).astype(int)\n","  # short_open_res = np.ones(len_df)\n","  # long_open_res = np.ones(len_df)\n","\n","  data_cols = ['open', 'high', 'low', 'close']\n","  open, high, low, close = [t_df[col_].to_numpy() for col_ in data_cols]\n","  b1_close = t_df.close.shift(itv_num).to_numpy()\n","  \n","  # ============ modules ============ #  \n","  # ------ define co, cu ------ # <- point missing 과 관련해 정교해아함\n","  cu_bool = ((b1_close > b1_dc_base_) & (dc_base_ > close)) | ((b1_close > dc_base_) & (dc_base_ > close))\n","  co_bool = (b1_close < b1_dc_base_) & (dc_base_ < close) | ((b1_close < dc_base_) & (dc_base_ < close))\n","\n","  cu_idx = get_index_bybool(cu_bool, len_df_range)   # for marking\n","  co_idx = get_index_bybool(co_bool, len_df_range)\n","\n","  # high_terms, low_terms, high_terms_cnt, low_terms_cnt = get_terms_info(cu_bool, co_bool, len_df_range)\n","  # high_terms, low_terms, high_terms_cnt, low_terms_cnt, cu_idx_term, co_idx_term = get_terms_info_v2(cu_bool, co_bool, len_df_range)\n","  high_terms, low_terms, high_terms_cnt, low_terms_cnt, cu_idx_term, co_idx_term = get_terms_info_v3(cu_bool, co_bool, len_df_range)\n","\n","  paired_cu_idx = high_terms[:, 1]\n","  paired_co_idx = low_terms[:, 1]\n","\n","  # ------ 생략 이전 terms' hl ------ #\n","  wave_high_terms_low_ = np.full(len_df, np.nan)\n","  wave_low_terms_high_ = np.full(len_df, np.nan)\n","\n","  wave_high_terms_lows = np.array([low[iin:iout + 1].min() for iin, iout in high_terms])\n","  wave_low_terms_highs = np.array([high[iin:iout + 1].max() for iin, iout in low_terms])  \n","\n","  wave_high_terms_low_[paired_cu_idx] = wave_high_terms_lows\n","  wave_low_terms_high_[paired_co_idx] = wave_low_terms_highs\n","\n","  # ------ 생략된 cu, co 에 대한 2nd pairing 진행 ------ #\n","  # cu_bool[high_terms[:, 1][high_terms_cnt <= term_thresh]] = False\n","  # co_bool[low_terms[:, 1][low_terms_cnt <= term_thresh]] = False  \n","  cu_bool[high_terms[:, 1][(high_terms_cnt <= term_thresh1) & (cu_idx_term <= term_thresh2)]] = False\n","  co_bool[low_terms[:, 1][(low_terms_cnt <= term_thresh1) & (co_idx_term <= term_thresh2)]] = False  \n","\n","  # high_terms, low_terms, high_terms_cnt, low_terms_cnt = get_terms_info(cu_bool, co_bool, len_df_range)\n","  # high_terms, low_terms, high_terms_cnt, low_terms_cnt, _, _ = get_terms_info_v2(cu_bool, co_bool, len_df_range)\n","  high_post_terms, low_post_terms, high_terms_cnt, low_terms_cnt, high_prime_terms, low_prime_terms, cu_idx_term, co_idx_term = get_terms_info_v3(cu_bool, co_bool, len_df_range)\n","  \n","  paired_cu_idx = high_prime_terms[:, 1]\n","  paired_co_idx = low_prime_terms[:, 1]\n","\n","  # ====== get wave_hl & terms ====== #\n","  wave_high_ = np.full(len_df, np.nan)\n","  wave_low_ = np.full(len_df, np.nan)\n","\n","  wave_highs = np.array([high[iin:iout + 1].max() for iin, iout in high_terms])\n","  wave_lows = np.array([low[iin:iout + 1].min() for iin, iout in low_terms])\n","\n","  wave_high_[paired_cu_idx] = wave_highs\n","  wave_low_[paired_co_idx] = wave_lows\n","\n","  wave_high_fill_ = fill_arr(wave_high_)\n","  wave_low_fill_ = fill_arr(wave_low_)\n","\n","  # wave_high_terms_low_ = np.full(len_df, np.nan)\n","  # wave_low_terms_high_ = np.full(len_df, np.nan)\n","\n","  # wave_high_terms_lows = np.array([low[iin:iout + 1].min() for iin, iout in high_terms])  # for point rejection, Todo, min_max 설정 항상 주의\n","  # wave_low_terms_highs = np.array([high[iin:iout + 1].max() for iin, iout in low_terms])\n","\n","  # wave_high_terms_low_[paired_cu_idx] = wave_high_terms_lows\n","  # wave_low_terms_high_[paired_co_idx] = wave_low_terms_highs\n","\n","  wave_high_terms_cnt_ = np.full(len_df, np.nan)\n","  wave_low_terms_cnt_ = np.full(len_df, np.nan)\n","\n","  wave_high_terms_cnt_[paired_cu_idx] = high_terms_cnt\n","  wave_low_terms_cnt_[paired_co_idx] = low_terms_cnt\n","\n","  wave_high_terms_cnt_fill_ = fill_arr(wave_high_terms_cnt_)\n","  wave_low_terms_cnt_fill_ = fill_arr(wave_low_terms_cnt_)\n","  \n","  # ------ hl_fill 의 prime_idx 를 찾아야함 ------ # \n","  b1_wave_high_fill_ = pd.Series(wave_high_fill_).shift(1).to_numpy()\n","  b1_wave_low_fill_ = pd.Series(wave_low_fill_).shift(1).to_numpy()\n","  wave_high_prime_idx = np.where((wave_high_fill_ != b1_wave_high_fill_) & ~np.isnan(wave_high_fill_), len_df_range, np.nan)\n","  wave_low_prime_idx = np.where((wave_low_fill_ != b1_wave_low_fill_) & ~np.isnan(wave_low_fill_), len_df_range, np.nan)\n","\n","  cu_prime_idx = wave_high_prime_idx\n","  cu_prime_idx_fill_ = fill_arr(cu_prime_idx)\n","\n","  co_prime_idx = wave_low_prime_idx\n","  co_prime_idx_fill_ = fill_arr(wave_low_prime_idx)  \n","\n","  # ============ enlist to df_cols ============ #       \n","  t_df['wave_high_fill_{}{}'.format(itv, period1)] = wave_high_fill_\n","  t_df['wave_low_fill_{}{}'.format(itv, period1)] = wave_low_fill_\n","\n","  t_df['wave_high_terms_cnt_fill_{}{}'.format(itv, period1)] = wave_high_terms_cnt_fill_\n","  t_df['wave_low_terms_cnt_fill_{}{}'.format(itv, period1)] = wave_low_terms_cnt_fill_\n","  t_df['wave_cu_{}{}'.format(itv, period1)] = cu_bool * (wave_high_terms_low_ >= wave_low_fill_)   # co ~ cu’s low 가 wave_low 갱신할 경우 point 에서 제외\n","  t_df['wave_co_{}{}'.format(itv, period1)] = co_bool * (wave_low_terms_high_ <= wave_high_fill_)\n","  t_df['wave_cu_bool_{}{}'.format(itv, period1)] = cu_bool   # temporary, for plot_check\n","  t_df['wave_co_bool_{}{}'.format(itv, period1)] = co_bool\n","  t_df['wave_cu_marker_{}{}'.format(itv, period1)] = get_line(cu_idx, dc_base_)\n","  t_df['wave_co_marker_{}{}'.format(itv, period1)] = get_line(co_idx, dc_base_)\n","\n","  # ------ for roll prev_hl ------ # \n","  t_df['wave_cu_prime_idx_{}{}'.format(itv, period1)] = cu_prime_idx\n","  t_df['wave_co_prime_idx_{}{}'.format(itv, period1)] = co_prime_idx\n","  \n","  # ------ for first_high ------ # \n","  t_df['wave_cu_prime_idx_fill_{}{}'.format(itv, period1)] = cu_prime_idx_fill_\n","  t_df['wave_co_prime_idx_fill_{}{}'.format(itv, period1)] = co_prime_idx_fill_\n","    \n","  if itv != 'T':\n","    assert ltf_df is not None, \"assert ltf_df is not None\"\n","    join_cols = np.arange(-15, 0 ,1).astype(int)  # points & donchian_channels\n","    ltf_df.drop(t_df.columns[join_cols], inplace=True, axis=1, errors='ignore')\n","    try:\n","      ltf_df = ltf_df.join(to_lower_tf_v2(ltf_df, t_df, join_cols), how='inner')\n","    except Exception as e:\n","      print(\"error in wave_range()'s join() :\", e)\n","  else:\n","    ltf_df = t_df    \n","\n","  return ltf_df\n","  \n","def wave_range_v13(t_df, config, ltf_df=None, term_thresh=2):  # v2 for period1 only\n","\n","  itv = pd.infer_freq(t_df.index)\n","  period1 = config.tr_set.wave_period\n","  # print(period1)\n","\n","  itv_num = to_itvnum(itv)\n","  # print(itv_num)\n","\n","  t_df = donchian_channel_v4(t_df, period1) \n","\n","  dc_base_ = t_df['dc_base_{}{}'.format(itv, period1)].to_numpy()\n","  b1_dc_base_ = t_df['dc_base_{}{}'.format(itv, period1)].shift(itv_num).to_numpy()\n","\n","  len_df = len(t_df)   \n","  len_df_range = np.arange(len_df).astype(int)\n","  # short_open_res = np.ones(len_df)\n","  # long_open_res = np.ones(len_df)\n","\n","  data_cols = ['open', 'high', 'low', 'close']\n","  open, high, low, close = [t_df[col_].to_numpy() for col_ in data_cols]\n","  b1_close = t_df.close.shift(itv_num).to_numpy()\n","  \n","  # ============ modules ============ #  \n","  # ------ define co, cu ------ # <- point missing 과 관련해 정교해아함\n","  cu_bool = ((b1_close > b1_dc_base_) & (dc_base_ > close)) | ((b1_close > dc_base_) & (dc_base_ > close))\n","  co_bool = (b1_close < b1_dc_base_) & (dc_base_ < close) | ((b1_close < dc_base_) & (dc_base_ < close))\n","\n","  cu_idx = get_index_bybool(cu_bool, len_df_range)   # for marking\n","  co_idx = get_index_bybool(co_bool, len_df_range)\n","\n","  high_terms, low_terms, high_terms_cnt, low_terms_cnt = get_terms_info(cu_bool, co_bool, len_df_range)\n","\n","  wave_high_terms_low_ = np.full(len_df, np.nan)\n","  wave_low_terms_high_ = np.full(len_df, np.nan)\n","\n","  wave_high_terms_lows = np.array([low[iin:iout + 1].min() for iin, iout in high_terms])  # 생략 이전 terms' hl\n","  wave_low_terms_highs = np.array([high[iin:iout + 1].max() for iin, iout in low_terms])  \n","\n","  paired_cu_idx = high_terms[:, 1]\n","  paired_co_idx = low_terms[:, 1]\n","\n","  wave_high_terms_low_[paired_cu_idx] = wave_high_terms_lows\n","  wave_low_terms_high_[paired_co_idx] = wave_low_terms_highs\n","\n","  # ------ add update_hl ------ #\n","  wave_high_ = np.full(len_df, np.nan)\n","  wave_low_ = np.full(len_df, np.nan)\n","\n","  wave_low_[paired_cu_idx] = wave_high_terms_lows  \n","  wave_high_[paired_co_idx] = wave_low_terms_highs\n","\n","  # ------ 생략된 cu, co 에 대한 2nd pairing 진행 ------ #\n","  cu_bool[high_terms[:, 1][high_terms_cnt <= term_thresh]] = False\n","  co_bool[low_terms[:, 1][low_terms_cnt <= term_thresh]] = False  \n","  high_terms, low_terms, high_terms_cnt, low_terms_cnt = get_terms_info(cu_bool, co_bool, len_df_range)\n","  \n","  paired_cu_idx = high_terms[:, 1]\n","  paired_co_idx = low_terms[:, 1]\n","\n","  # ====== get wave_hl & terms ====== #\n","  wave_highs = np.array([high[iin:iout + 1].max() for iin, iout in high_terms])\n","  wave_lows = np.array([low[iin:iout + 1].min() for iin, iout in low_terms])\n","\n","  wave_high_[paired_cu_idx] = wave_highs\n","  wave_low_[paired_co_idx] = wave_lows\n","\n","  wave_high_fill_ = fill_arr(wave_high_)\n","  wave_low_fill_ = fill_arr(wave_low_)\n","\n","  # wave_high_terms_low_ = np.full(len_df, np.nan)\n","  # wave_low_terms_high_ = np.full(len_df, np.nan)\n","\n","  # wave_high_terms_lows = np.array([low[iin:iout + 1].min() for iin, iout in high_terms])  # for point rejection, Todo, min_max 설정 항상 주의\n","  # wave_low_terms_highs = np.array([high[iin:iout + 1].max() for iin, iout in low_terms])\n","\n","  # wave_high_terms_low_[paired_cu_idx] = wave_high_terms_lows\n","  # wave_low_terms_high_[paired_co_idx] = wave_low_terms_highs\n","\n","  wave_high_terms_cnt_ = np.full(len_df, np.nan)\n","  wave_low_terms_cnt_ = np.full(len_df, np.nan)\n","\n","  wave_high_terms_cnt_[paired_cu_idx] = high_terms_cnt\n","  wave_low_terms_cnt_[paired_co_idx] = low_terms_cnt\n","\n","  wave_high_terms_cnt_fill_ = fill_arr(wave_high_terms_cnt_)\n","  wave_low_terms_cnt_fill_ = fill_arr(wave_low_terms_cnt_)\n","  \n","  # ------ hl_fill 의 prime_idx 를 찾아야함 ------ # \n","  b1_wave_high_fill_ = pd.Series(wave_high_fill_).shift(1).to_numpy()\n","  b1_wave_low_fill_ = pd.Series(wave_low_fill_).shift(1).to_numpy()\n","  wave_high_prime_idx = np.where((wave_high_fill_ != b1_wave_high_fill_) & ~np.isnan(wave_high_fill_), len_df_range, np.nan)\n","  wave_low_prime_idx = np.where((wave_low_fill_ != b1_wave_low_fill_) & ~np.isnan(wave_low_fill_), len_df_range, np.nan)\n","\n","  cu_prime_idx = wave_high_prime_idx\n","  cu_prime_idx_fill_ = fill_arr(cu_prime_idx)\n","\n","  co_prime_idx = wave_low_prime_idx\n","  co_prime_idx_fill_ = fill_arr(wave_low_prime_idx)  \n","\n","  # ============ enlist to df_cols ============ #       \n","  t_df['wave_high_fill_{}{}'.format(itv, period1)] = wave_high_fill_\n","  t_df['wave_low_fill_{}{}'.format(itv, period1)] = wave_low_fill_\n","\n","  t_df['wave_high_terms_cnt_fill_{}{}'.format(itv, period1)] = wave_high_terms_cnt_fill_\n","  t_df['wave_low_terms_cnt_fill_{}{}'.format(itv, period1)] = wave_low_terms_cnt_fill_\n","  t_df['wave_cu_{}{}'.format(itv, period1)] = cu_bool * (wave_high_terms_low_ >= wave_low_fill_)   # co ~ cu’s low 가 wave_low 갱신할 경우 point 에서 제외\n","  t_df['wave_co_{}{}'.format(itv, period1)] = co_bool * (wave_low_terms_high_ <= wave_high_fill_)\n","  t_df['wave_cu_bool_{}{}'.format(itv, period1)] = cu_bool   # temporary, for plot_check\n","  t_df['wave_co_bool_{}{}'.format(itv, period1)] = co_bool\n","  t_df['wave_cu_marker_{}{}'.format(itv, period1)] = get_line(cu_idx, dc_base_)\n","  t_df['wave_co_marker_{}{}'.format(itv, period1)] = get_line(co_idx, dc_base_)\n","\n","  # ------ for roll prev_hl ------ # \n","  t_df['wave_cu_prime_idx_{}{}'.format(itv, period1)] = cu_prime_idx\n","  t_df['wave_co_prime_idx_{}{}'.format(itv, period1)] = co_prime_idx\n","  \n","  # ------ for first_high ------ # \n","  t_df['wave_cu_prime_idx_fill_{}{}'.format(itv, period1)] = cu_prime_idx_fill_\n","  t_df['wave_co_prime_idx_fill_{}{}'.format(itv, period1)] = co_prime_idx_fill_\n","    \n","  if itv != 'T':\n","    assert ltf_df is not None, \"assert ltf_df is not None\"\n","    join_cols = np.arange(-15, 0 ,1).astype(int)  # points & donchian_channels\n","    ltf_df.drop(t_df.columns[join_cols], inplace=True, axis=1, errors='ignore')\n","    try:\n","      ltf_df = ltf_df.join(to_lower_tf_v2(ltf_df, t_df, join_cols), how='inner')\n","    except Exception as e:\n","      print(\"error in wave_range()'s join() :\", e)\n","  else:\n","    ltf_df = t_df    \n","\n","  return ltf_df\n","\n","\n","def wave_range_v12(t_df, config, ltf_df=None):  # v2 for period1 only\n","\n","  itv = pd.infer_freq(t_df.index)\n","  period1 = config.tr_set.wave_period\n","  # print(period1)\n","\n","  itv_num = to_itvnum(itv)\n","  # print(itv_num)\n","\n","  t_df = donchian_channel_v4(t_df, period1) \n","\n","  dc_base_ = t_df['dc_base_{}{}'.format(itv, period1)].to_numpy()\n","  b1_dc_base_ = t_df['dc_base_{}{}'.format(itv, period1)].shift(itv_num).to_numpy()\n","\n","  len_df = len(t_df)   \n","  len_df_range = np.arange(len_df).astype(int)\n","  # short_open_res = np.ones(len_df)\n","  # long_open_res = np.ones(len_df)\n","\n","  data_cols = ['open', 'high', 'low', 'close']\n","  open, high, low, close = [t_df[col_].to_numpy() for col_ in data_cols]\n","  b1_close = t_df.close.shift(itv_num).to_numpy()\n","  \n","  # ============ modules ============ #  \n","  # ------ define co, cu ------ # <- point missing 과 관련해 정교해아함\n","  cu_bool = ((b1_close > b1_dc_base_) & (dc_base_ > close)) | ((b1_close > dc_base_) & (dc_base_ > close))\n","  co_bool = (b1_close < b1_dc_base_) & (dc_base_ < close) | ((b1_close < dc_base_) & (dc_base_ < close))\n","\n","  # Todo, term 조정은 이 line 에서 해야할 것\n","  b1_cu_bool = pd.Series(cu_bool).shift(1).to_numpy()\n","  b1_co_bool = pd.Series(co_bool).shift(1).to_numpy()\n","\n","  cu_bool *= ~b1_co_bool.astype(bool)  # short_term point 생략\n","  co_bool *= ~b1_cu_bool.astype(bool)\n","\n","  cu_idx = get_index_bybool(cu_bool, len_df_range)\n","  co_idx = get_index_bybool(co_bool, len_df_range)\n","\n","  cu_fill_idx = fill_arr(cu_idx)\n","  co_fill_idx = fill_arr(co_idx)\n","\n","  # ------ get co, cu terms ------ #\n","  high_bool = cu_fill_idx < co_fill_idx  # 이렇게 해야 high_terms[:, 1] 이 cu_idx 가 나옴\n","  low_bool = co_fill_idx < cu_fill_idx\n","\n","  high_terms_vec = get_index_bybool(high_bool, len_df_range)\n","  low_terms_vec = get_index_bybool(low_bool, len_df_range) # -> low_terms\n","\n","  high_terms_list = using_clump(high_terms_vec)\n","  low_terms_list = using_clump(low_terms_vec)\n","\n","  high_terms = np.array([[terms.min(), terms.max() + 1] for terms in high_terms_list])\n","  low_terms = np.array([[terms.min(), terms.max() + 1] for terms in low_terms_list])\n","\n","  high_terms_cnt = high_terms[:, 1] - high_terms[:, 0] \n","  low_terms_cnt = low_terms[:, 1] - low_terms[:, 0] \n","\n","  wave_highs = np.array([high[iin:iout + 1].max() for iin, iout in high_terms])\n","  wave_lows = np.array([low[iin:iout + 1].min() for iin, iout in low_terms])\n","\n","  # ------ get valid_idx range (inner len_df) ------ #\n","  paired_cu_idx = high_terms[:, 1]\n","  paired_co_idx = low_terms[:, 1]\n","\n","  valid_cu_bool = paired_cu_idx < len_df\n","  valid_co_bool = paired_co_idx < len_df\n","\n","  paired_cu_valid_idx = paired_cu_idx[valid_cu_bool]\n","  paired_co_valid_idx = paired_co_idx[valid_co_bool]\n","\n","  # ------ get wave_hl & terms ------ #\n","  wave_high_ = np.full(len_df, np.nan)\n","  wave_low_ = np.full(len_df, np.nan)\n","\n","  wave_high_[paired_cu_valid_idx] = wave_highs[valid_cu_bool]\n","  wave_low_[paired_co_valid_idx] = wave_lows[valid_co_bool]\n","\n","  wave_high_fill_ = fill_arr(wave_high_)\n","  wave_low_fill_ = fill_arr(wave_low_)\n","\n","  wave_high_terms_cnt_ = np.full(len_df, np.nan)\n","  wave_low_terms_cnt_ = np.full(len_df, np.nan)\n","\n","  wave_high_terms_cnt_[paired_cu_valid_idx] = high_terms_cnt[valid_cu_bool]\n","  wave_low_terms_cnt_[paired_co_valid_idx] = low_terms_cnt[valid_co_bool]\n","\n","  wave_high_terms_cnt_fill_ = fill_arr(wave_high_terms_cnt_)\n","  wave_low_terms_cnt_fill_ = fill_arr(wave_low_terms_cnt_)\n","\n","  # ------ check update high & low (occurs by point missing) ------ # \n","  co_prime_idx = np.full(len_df, np.nan)\n","  co_prime_idx[paired_co_valid_idx] = paired_co_valid_idx\n","  co_prime_idx_fill_ = fill_arr(co_prime_idx)\n","  # valid_idx = co_idx > co_prime_idx_fill_\n","  valid_idx = cu_idx > co_prime_idx_fill_\n","\n","  # update_low[valid_idx] = [low[iin:iout + 1].min() for iin, iout in zip(cu_prime_idx_fill_[valid_idx].astype(int), cu_idx[valid_idx].astype(int))]  # include open low\n","  # 1. 잘 생각해보면, cu_idx 에는 co_prime_idx_fill_ 을 사용하는게 맞음\n","  #   a. cu_idx 에 달려있는 low 가 co_prime_idx_fill_ 기준이니까\n","  # update_low = np.full(len_df, np.nan)\n","  # update_low[valid_idx] = [low[iin:iout + 1].min() for iin, iout in zip(co_prime_idx_fill_[valid_idx].astype(int), cu_idx[valid_idx].astype(int))]   # high 아닌가\n","  \n","  update_high = np.full(len_df, np.nan)\n","  update_high[valid_idx] = [high[iin:iout + 1].max() for iin, iout in zip(co_prime_idx_fill_[valid_idx].astype(int), cu_idx[valid_idx].astype(int))]   # high 아닌가 => 아님 update_low 이기 때문\n","  \n","  cu_prime_idx = np.full(len_df, np.nan)\n","  cu_prime_idx[paired_cu_valid_idx] = paired_cu_valid_idx\n","  cu_prime_idx_fill_ = fill_arr(cu_prime_idx)\n","  valid_idx = co_idx > cu_prime_idx_fill_\n","\n","  # update_high = np.full(len_df, np.nan)\n","  # update_high[valid_idx] = [high[iin:iout + 1].max() for iin, iout in zip(cu_prime_idx_fill_[valid_idx].astype(int), co_idx[valid_idx].astype(int))]\n","\n","  update_low = np.full(len_df, np.nan)\n","  update_low[valid_idx] = [low[iin:iout + 1].min() for iin, iout in zip(cu_prime_idx_fill_[valid_idx].astype(int), co_idx[valid_idx].astype(int))]\n","\n","  # ============ enlist to df_cols ============ #       \n","  t_df['wave_high_fill_{}{}'.format(itv, period1)] = wave_high_fill_\n","  t_df['wave_low_fill_{}{}'.format(itv, period1)] = wave_low_fill_\n","\n","  t_df['wave_update_high_fill_{}{}'.format(itv, period1)] = update_high\n","  t_df['wave_update_low_fill_{}{}'.format(itv, period1)] = update_low\n","\n","  t_df['wave_high_terms_cnt_fill_{}{}'.format(itv, period1)] = wave_high_terms_cnt_fill_\n","  t_df['wave_low_terms_cnt_fill_{}{}'.format(itv, period1)] = wave_low_terms_cnt_fill_\n","  t_df['wave_cu_{}{}'.format(itv, period1)] = cu_bool * ~(update_low < wave_low_fill_)   # Todo, 이곳 다시 한번 확인 (old, point_missing 으로 인한 low 갱신 회피)\n","  t_df['wave_co_{}{}'.format(itv, period1)] = co_bool * ~(update_high > wave_high_fill_)\n","  t_df['wave_cu_marker_{}{}'.format(itv, period1)] = get_line(cu_idx, dc_base_)\n","  t_df['wave_co_marker_{}{}'.format(itv, period1)] = get_line(co_idx, dc_base_)\n","\n","  # ------ for roll prev_hl ------ # \n","  t_df['wave_cu_prime_idx_{}{}'.format(itv, period1)] = cu_prime_idx\n","  t_df['wave_co_prime_idx_{}{}'.format(itv, period1)] = co_prime_idx\n","  \n","  # ------ for first_high ------ # \n","  t_df['wave_cu_prime_idx_fill_{}{}'.format(itv, period1)] = cu_prime_idx_fill_\n","  t_df['wave_co_prime_idx_fill_{}{}'.format(itv, period1)] = co_prime_idx_fill_\n","    \n","  if itv != 'T':\n","    assert ltf_df is not None, \"assert ltf_df is not None\"\n","    join_cols = np.arange(-17, 0 ,1).astype(int)  # points & donchian_channels\n","    ltf_df.drop(t_df.columns[join_cols], inplace=True, axis=1, errors='ignore')\n","    try:\n","      ltf_df = ltf_df.join(to_lower_tf_v2(ltf_df, t_df, join_cols), how='inner')\n","    except Exception as e:\n","      print(\"error in wave_range()'s join() :\", e)\n","  else:\n","    ltf_df = t_df    \n","\n","  return ltf_df\n","\n","\n"]},{"cell_type":"markdown","metadata":{"id":"1MNVIExLULhJ"},"source":["#### legacy"]},{"cell_type":"markdown","metadata":{"id":"EOXQbXixiQcK"},"source":["##### volume_profile"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"7pFuazxpgx9B"},"outputs":[],"source":["session_df = res_df_.iloc[-1440:] # 0.159 -> 0.024 (14400 -> 1440)\n","volume = session_df['volume'].to_numpy()\n","close = session_df['close'].to_numpy()\n","# px.histogram(session_df, x='volume', y='close', nbins=150, orientation='h').show()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"SoPJkiyKiXLM"},"outputs":[],"source":["kde_factor = 0.05\n","num_samples = 100\n","\n","start_0 = time.time()\n","kde = stats.gaussian_kde(close,weights=volume,bw_method=kde_factor)\n","kdx = np.linspace(close.min(),close.max(),num_samples)\n","kdy = kde(kdx)\n","ticks_per_sample = (kdx.max() - kdx.min()) / num_samples\n","print(\"ticks_per_sample :\", ticks_per_sample)  # sample 당 가격\n","print(\"kdy elapsed_time :\", time.time() - start_0)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"mK2jBddAxJ14"},"outputs":[],"source":["peaks,_ = signal.find_peaks(kdy)\n","pkx = kdx[peaks]\n","pky = kdy[peaks]\n","\n","plt.figure(figsize=(10,5))\n","# plt.hist(close, bins=num_samples, weights=volume, alpha=.8, color='#1592e6')\n","# plt.plot(kdx, kdy, color='white')\n","# plt.plot(pkx, pky, 'bo', color='yellow')\n","plt.plot(kdy, kdx, color='white')\n","plt.plot(pky, pkx, 'bo', color='yellow')\n","plt.show()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"a8tpQZCy0SO1"},"outputs":[],"source":["pkx"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"gfA946s8UgS0"},"outputs":[],"source":["# ------ vp 의 indi. 화가 필요함 -> point 설정 ------ #\n","# 1. 4 level 은 미리 만들어놓는게 맞는걸로 보임 -> 추종하는 function 이 많음 (utils_tr, ep_out ...)\n","#   a. 4 level 에 국한하는게 아니라, 모든 peaks 에 대해 levels 설정\n","#   b. 각 session 별로 peak_list 가 주어질 것\n","#     i. prev_data 사용해야하는점 주의 (session vp 는 future_data)"]},{"cell_type":"markdown","metadata":{"id":"3T-9FwWFXR4f"},"source":["###### prominence_info"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"RmBt2agljClE"},"outputs":[],"source":["start_0 = time.time()\n","min_prom = kdy.max() * 0.0\n","pipsize = 0.01\n","max_width_pips = 20\n","# width_range=(1, max_width_pips * pipsize / ticks_per_sample)\n","width_range= max_width_pips * pipsize / ticks_per_sample\n","peaks, peak_props = signal.find_peaks(kdy, prominence=min_prom, width=width_range)\n","\n","peak_x = kdx[peaks]\n","peak_y = kdy[peaks]\n","# ------ prominence lines ------ #\n","left_base = peak_props['left_bases']\n","right_base = peak_props['right_bases']\n","line_x = peak_x\n","line_y0 = peak_y\n","line_y1 = peak_y # - peak_props['prominences']\n","print(\"prom_line elapsed_time :\", time.time() - start_0)\n","\n","\n","for x, y0, y1 in zip(line_x, line_y0, line_y1):\n","    fig.add_shape(type='line',\n","        xref='x', yref='y',\n","        # x0=x, y0=y0, x1=x, y1=y1,\n","        x0=x, y0=0, x1=x, y1=y1,\n","        line=dict(\n","            color='red',\n","            width=2,\n","        )\n","    )\n","\n","# ------ width ------ #\n","left_ips = peak_props['left_ips']\n","right_ips = peak_props['right_ips']\n","# width_x0 = kdx.min() + (left_ips * ticks_per_sample)\n","# width_x1 = kdx.min() + (right_ips * ticks_per_sample)\n","width_x0 = kdx.min() + (left_base * ticks_per_sample)\n","width_x1 = kdx.min() + (right_base * ticks_per_sample)\n","\n","# int_from = kdx.min() + (left_base * ticks_per_sample)\n","# int_to = kdx.min() + (right_base * ticks_per_sample)\n","# [kde.integrate_box_1d(x0, x1) for x0, x1 in zip(int_from, int_to)]\n","\n","width_y = peak_props['width_heights']\n","\n","for x0, x1, y in zip(width_x0, width_x1, width_y):\n","    fig.add_shape(type='line',\n","        xref='x', yref='y',\n","        x0=x0, y0=y, x1=x1, y1=y,\n","        line=dict(\n","            color='red',\n","            width=2,\n","        )\n","    )\n","fig.show()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"zqj944n-WzyZ"},"outputs":[],"source":["# peaks  # ndarray\n","# kdx  # ndarray\n","# kdy  # ndarray\n","# kdx.min()\n","left_base * ticks_per_sample\n","# volume"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Rvqv0RGojo9h"},"outputs":[],"source":["print(peak_y)\n","print(peak_props['prominences'])\n","peak_props"]},{"cell_type":"markdown","metadata":{"id":"c2729DJ6h720"},"source":["##### imb."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Rucj-iepiR_-"},"outputs":[],"source":["t_df = res_df_.iloc[-120:-100]\n","a_data = t_df.to_numpy()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ktm1aB-Bh7GH"},"outputs":[],"source":["plt.style.use(['dark_background', 'fast'])\n","fig = plt.figure(figsize=(15, 9))\n","nrows, ncols = 1, 1\n","gs = gridspec.GridSpec(nrows=nrows,  # row 부터 index 채우고 col 채우는 순서임 (gs_idx)\n","                        ncols=ncols\n","                        # height_ratios=[3, 1]\n","                        )\n","\n","ax = fig.add_subplot(gs[0])\n","\n","# ------ candles ------ #\n","candle_plot(a_data[:, col_idx_dict['ohlc_col_idxs']], ax, alpha=1.0, wickwidth=1.0)\n","_ = [step_col_plot(a_data[:, params[0]], *params[1:]) for params in col_idx_dict['step_col_info']]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"jMQBhQ1Ljt5Y"},"outputs":[],"source":["def imb_ratio_v4(df, itv):\n","\n","  itv_num = to_itvnum(itv)\n","\n","  close = df['close_{}'.format(itv)].to_numpy()\n","  open = df['open_{}'.format(itv)].to_numpy()\n","\n","  b1_close = df['close_{}'.format(itv)].shift(itv_num).to_numpy()\n","  b1_open = df['open_{}'.format(itv)].shift(itv_num).to_numpy()\n","  b1_high = df['high_{}'.format(itv)].shift(itv_num).to_numpy()\n","  b1_low = df['low_{}'.format(itv)].shift(itv_num).to_numpy()\n","\n","  body_range = abs(close - open)\n","  b1_body_range = abs(b1_close - b1_open)\n","\n","  df['body_rel_ratio_{}'.format(itv)] = body_range / b1_body_range\n","\n","  short_body_range = np.where(close <= b1_low, body_range, b1_body_range)\n","  long_body_range = np.where(close >= b1_high, body_range, b1_body_range)\n","\n","  # 추후에 통계 측정해야함 -> bir 에 따른 개별 trader 의 epout / tpep 이라던가 => short 에 양봉은 취급안함 (why use np.nan)\n","  df['short_ir_{}'.format(itv)] = np.where(close < open, (b1_low - close) / short_body_range, np.nan) # close < open & close < b1_low\n","  df['long_ir_{}'.format(itv)] = np.where(close > open, (close - b1_high) / long_body_range, np.nan) # close > open & close > b1_high\n","\n","  return"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"I1Vq_BiKpY3P"},"outputs":[],"source":["def imb_ratio_v3(df, itv):\n","\n","  itv_num = to_itvnum(itv)\n","\n","  # high = df['high_{}'.format(itv)].to_numpy()\n","  # low = df['low_{}'.format(itv)].to_numpy()\n","  # candle_range = high - low\n","\n","  close = df['close_{}'.format(itv)].to_numpy()\n","  open = df['open_{}'.format(itv)].to_numpy()\n","\n","  b1_close = df['close_{}'.format(itv)].shift(itv_num).to_numpy()\n","  b1_open = df['open_{}'.format(itv)].shift(itv_num).to_numpy()\n","  b1_high = df['high_{}'.format(itv)].shift(itv_num).to_numpy()\n","  b1_low = df['low_{}'.format(itv)].shift(itv_num).to_numpy()\n","\n","  body_range = abs(close - open)\n","  b1_body_range = abs(b1_close - b1_open)\n","\n","  df['body_rel_ratio_{}'.format(itv)] = body_range / b1_body_range\n","\n","  short_body_ratio = np.where(close <= b1_low, body_range, b1_body_range)\n","  long_body_range = np.where(close >= b1_high, body_range, b1_body_range)\n","\n","  # 추후에 통계 측정해야함 -> bir 에 따른 개별 trader 의 epout / tpep 이라던가 => short 에 양봉은 취급안함 (why use np.nan)\n","  df['short_ir_{}'.format(itv)] = np.where(close < open, (b1_low - close) / body_range, np.nan) # close < open & close < b1_low\n","  df['long_ir_{}'.format(itv)] = np.where(close > open, (close - b1_high) / body_range, np.nan) # close > open & close > b1_high\n","\n","  return"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"mtnMUkhwkdrE"},"outputs":[],"source":["imb_ratio(t_df, \"5T\")\n","# imb_ratio_v3(t_df, \"5T\")\n","# imb_ratio_v4(t_df, \"5T\")\n","\n","t_df.tail(100).short_ir_5T  # .461871\n","# t_df.iloc[:, -10:]\n","# t_df.dtypes"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"RVUs1YE_pgBI"},"outputs":[],"source":["# imb_ratio(t_df, \"5T\")\n","# imb_ratio_v3(t_df, \"5T\")\n","imb_ratio_v4(t_df, \"5T\")\n","\n","t_df.tail(100).short_ir_5T  # .461871\n","# t_df.iloc[:, -10:]\n","# t_df.dtypes"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"bieHiKjBkuFL"},"outputs":[],"source":["# ------ rtc 1, 0 개념 ------ #\n","# short_rtc_1 = close\n","# short_rtc_0 = b1_low\n","\n","# long_rtc_1 = close\n","# long_rtc_0 = b1_high\n","\n","# rtc 로 활용하려면, col 로 추가해야할 것 -> 추가할만한 col_name 은 아님\n","# 1. h_candle 인 경우 -> ?\n","#   a. h_candle_v3 먹이고, open_{}.shift(num_itv).to_numpy() 진행 -> ex. res_df['close_{}'.format(hc_itv)].shift(itv_num).to_numpy() "]},{"cell_type":"code","execution_count":null,"metadata":{"id":"3X6bMXJIjPYy"},"outputs":[],"source":["# 1. 현재 종가 - 이전 고가 = imb_range (long)\n","long_imb_range = t_df.close - t_df.high.shift(1)\n","# 2. 이전 저가 - 현재 종가 - imb_range (short)\n","short_imb_range = t_df.low.shift(1) - t_df.close"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"q1nEA19v7Qpj"},"outputs":[],"source":["from math import floor\n","\n","\n","def _calc_dev(base_price, price):\n","    return 100 * (price - base_price) / base_price\n","\n","\n","def zigzag(highs, lows, depth=10, dev_threshold=5):\n","    def pivots(src_raw, length, isHigh):\n","        src = list(reversed(src_raw))\n","        bar_index = list(range(len(src)))\n","        for start in range(0, len(src)):\n","            if start + 2 * length + 1 > len(src) - 1:\n","                return\n","            p = 0\n","            if length < len(src) - start:\n","                p = src[start + length]\n","            if length == 0:\n","                yield 0, p\n","            else:\n","                isFound = True\n","                for i in range(start, start + length):\n","                    if isHigh and src[i] > p:\n","                        isFound = False\n","                    if not isHigh and src[i] < p:\n","                        isFound = False\n","                for i in range(start + length + 1, start + 2 * length + 1):\n","                    if isHigh and src[i] >= p:\n","                        isFound = False\n","                    c = not isHigh and src[i] <= p\n","                    if c:\n","                        isFound = False\n","                if isFound:\n","                    yield (bar_index[start + length], p)\n","                else:\n","                    yield None, None\n","\n","    data_highs = [x for x in pivots(highs, floor(depth / 2), True) if x[0]]\n","    data_lows = [x for x in pivots(lows, floor(depth / 2), False) if x[0]]\n","\n","    raw_pairs = []\n","\n","    for i, (ind, p) in enumerate(data_highs):\n","        lows_d = sorted([(ind_l, p_l) for ind_l, p_l in data_lows if ind > ind_l], key=lambda x: x[0])\n","        if lows_d:\n","            lows = lows_d[-1]\n","\n","            if abs(_calc_dev(lows[1], p)) >= dev_threshold:\n","                raw_pairs.append(\n","                    ((ind, p),\n","                     (lows[0], lows[1]))\n","                )\n","\n","    result = []\n","\n","    for (i_h, p_h),(i_l, p_l) in raw_pairs:\n","        if not result:\n","            result.append(((i_h, p_h),(i_l, p_l)))\n","            continue\n","\n","        if i_l == result[-1][1][0]:\n","            if p_h > result[-1][0][1]:\n","                result = result[:-1]\n","            else:\n","                continue\n","\n","        result.append(((i_h, p_h),(i_l, p_l)))\n","\n","    return result\n","\n","# highs, lows = t_df.high.to_numpy(), t_df.low.to_numpy()\n","# zigzag(highs, lows, depth=5, dev_threshold=5)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"fGlmdyb97j4Q"},"outputs":[],"source":["t_df = res_df_.iloc[-120:]\n","a_data = t_df.to_numpy()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ropzIp0wUPAA"},"outputs":[],"source":["# import plotly.express as px\n","# import plotly.graph_objects as go\n","\n","def get_dist_plot(c, v, kx, ky):\n","    fig = go.Figure()\n","    fig.add_trace(go.Histogram(name='Vol Profile', x=c, y=v, nbinsx=150, \n","                               histfunc='sum', histnorm='probability density',\n","                               marker_color='#B0C4DE'))\n","    fig.add_trace(go.Scatter(name='KDE', x=kx, y=ky, mode='lines', marker_color='#D2691E'))    \n","\n","    peaks,_ = signal.find_peaks(kdy)\n","    pkx = kdx[peaks]\n","    pky = kdy[peaks]\n","    pk_marker_args=dict(size=10, color='black')\n","    fig.add_trace(go.Scatter(name=\"Peaks\", x=pkx, y=pky, mode='markers', marker=pk_marker_args))\n","    fig.show()\n","\n","    return fig"]},{"cell_type":"markdown","metadata":{"id":"RZJ6uIA_VcJs"},"source":["##### instant."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"nLWAP1Cl2Hvu"},"outputs":[],"source":["def wave_range_ratio(res_df, config, bb_itv, bb_period):\n","\n","  wave_itv = pd.infer_freq(res_df.index)\n","  wave_period = config.tr_set.wave_period\n","\n","  bb_upper_ = res_df['bb_upper_{}{}'.format(bb_itv, bb_period)].to_numpy()\n","  bb_lower_ = res_df['bb_lower_{}{}'.format(bb_itv, bb_period)].to_numpy()\n","  \n","  cu_prime_idx_fill_ = res_df['wave_cu_prime_idx_fill_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","  co_prime_idx_fill_ = res_df['wave_co_prime_idx_fill_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","\n","  cu_bb_range = get_line(co_prime_idx_fill_, bb_upper_) - get_line(co_prime_idx_fill_, bb_lower_)  # cu 에서 co_prime 의 bb_range 사용\n","  co_bb_range = get_line(cu_prime_idx_fill_, bb_upper_) - get_line(cu_prime_idx_fill_, bb_lower_)\n","\n","  wave_range = res_df['wave_high_fill_{}{}'.format(wave_itv, wave_period)].to_numpy() - res_df['wave_low_fill_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","  \n","  res_df['cu_wrr_{}{}'.format(wave_itv, wave_period)] = wave_range / cu_bb_range   # for cu (currently, long)\n","  res_df['co_wrr_{}{}'.format(wave_itv, wave_period)] = wave_range / co_bb_range\n","\n","  return res_df"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"H_zPYIshbZgP"},"outputs":[],"source":["# Todo, future_data\n","def enough_space(res_df, itv, period):\n","\n","  dc_upper_ = res_df['dc_upper_{}{}'.format(itv, period)].to_numpy()\n","  dc_base_ = res_df['dc_base_{}{}'.format(itv, period)].to_numpy()\n","  dc_lower_ = res_df['dc_lower_{}{}'.format(itv, period)].to_numpy()  \n","  high_ = res_df['high_{}'.format(config.loc_set.point.tf_entry)].to_numpy()\n","  low_ = res_df['low_{}'.format(config.loc_set.point.tf_entry)].to_numpy()\n","\n","  half_dc_gap = dc_upper_ - dc_base_\n","\n","  res_df['cu_es_{}{}'.format(itv, period)] = (low_ - dc_lower_) / half_dc_gap\n","  res_df['co_es_{}{}'.format(itv, period)] = (dc_upper_ - high_) / half_dc_gap\n","\n","  return res_df"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"o3IUBc59VR5D"},"outputs":[],"source":["# Todo, future_data\n","def candle_range_ratio(res_df, c_itv, bb_itv, bb_period):\n","\n","  itv_num = to_itvnum(c_itv)\n","\n","  b1_bb_upper_ = res_df['bb_upper_{}{}'.format(bb_itv, bb_period)].shift(itv_num).to_numpy()\n","  b1_bb_lower_ = res_df['bb_lower_{}{}'.format(bb_itv, bb_period)].shift(itv_num).to_numpy()\n","  bb_range = b1_bb_upper_ - b1_bb_lower_   # <-- h_candle's open_idx 의 bb_gap 사용\n","\n","  high_ = res_df['high_{}'.format(c_itv)].to_numpy()\n","  low_ = res_df['low_{}'.format(c_itv)].to_numpy()\n","  candle_range = high_ - low_  # 부호로 양 / 음봉 구분 (양봉 > 0)\n","  \n","  res_df['crr_{}'.format(c_itv)] = candle_range / bb_range\n","\n","  return res_df"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"u3yFd8Dcok5m"},"outputs":[],"source":["def body_rel_ratio(res_df, c_itv):\n","\n","  itv_num = to_itvnum(c_itv)\n","  \n","  b1_close_ = res_df['close_{}'.format(c_itv)].shift(itv_num).to_numpy()\n","  b1_open_ = res_df['open_{}'.format(c_itv)].shift(itv_num).to_numpy()\n","  b1_body_range = abs(b1_close_ - b1_open_)\n","\n","  close_ = res_df['close_{}'.format(c_itv)].to_numpy()\n","  open_ = res_df['open_{}'.format(c_itv)].to_numpy()\n","  body_range = abs(close_ - open_)\n","  \n","  res_df['body_rel_ratio_{}'.format(c_itv)] = body_range / b1_body_range\n","\n","  return res_df\n","\n","def dc_over_body_ratio(res_df, c_itv, dc_itv, dc_period):\n","  close_ = res_df['close_{}'.format(c_itv)].to_numpy()\n","  open_ = res_df['open_{}'.format(c_itv)].to_numpy()\n","  body_range = abs(close_ - open_)\n","  \n","  dc_upper_ = res_df['dc_upper_{}{}'.format(dc_itv, dc_period)].to_numpy()\n","  dc_lower_ = res_df['dc_lower_{}{}'.format(dc_itv, dc_period)].to_numpy() \n","\n","  res_df['dc_upper_{}{}_br'.format(dc_itv, dc_period)] = (close_ - dc_upper_) / body_range\n","  res_df['dc_lower_{}{}_br'.format(dc_itv, dc_period)] = (dc_lower_ - close_) / body_range\n","\n","  return res_df"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"JWj02LLGbnji"},"outputs":[],"source":["def candle_pumping_ratio_v2(res_df, c_itv, dc_itv, period):\n","\n","  res_df = dc_line_v3(res_df, dc_itv, dc_period=period)\n","\n","  dc_upper_ = res_df['dc_upper_{}{}'.format(dc_itv, period)].to_numpy()\n","  dc_lower_ = res_df['dc_lower_{}{}'.format(dc_itv, period)].to_numpy()\n","  dc_range = dc_upper_ - dc_lower_\n"," \n","  open_ = res_df['open_{}'.format(c_itv)].to_numpy()\n","  close_ = res_df['close_{}'.format(c_itv)].to_numpy()\n","  body = close_ - open_  # 부호로 양 / 음봉 구분 (양봉 > 0)\n","  \n","  res_df['cppr_{}'.format(c_itv)] = body / dc_range\n","\n","  return res_df\n","\n","\n","# Todo, future_data\n","def candle_pumping_ratio(res_df, c_itv, bb_itv, period):\n","\n","  itv_num = to_itvnum(c_itv)\n","\n","  # 여기에도 v2 처럼 bb_indi. 추가 (자동화)\n","\n","  b1_bb_upper_ = res_df['bb_upper_{}{}'.format(bb_itv, period)].shift(itv_num).to_numpy()\n","  b1_bb_lower_ = res_df['bb_lower_{}{}'.format(bb_itv, period)].shift(itv_num).to_numpy()\n","  bb_range = b1_bb_upper_ - b1_bb_lower_\n","\n","  open_ = res_df['open_{}'.format(c_itv)].to_numpy()\n","  close_ = res_df['close_{}'.format(c_itv)].to_numpy()\n","  body = close_ - open_  # 부호로 양 / 음봉 구분 (양봉 > 0)\n","  \n","  res_df['cppr_{}'.format(c_itv)] = body / bb_range\n","\n","  return res_df\n","\n","\n","def pumping_ratio(res_df, config, itv, period1, period2):\n","\n","  bb_lower_5T = res_df['bb_lower_5T'].to_numpy()\n","  bb_upper_5T = res_df['bb_upper_5T'].to_numpy()\n","  bb_range = bb_upper_5T - bb_lower_5T\n","\n","  selection_id = config.selection_id\n","  \n","  res_df['short_ppr_{}'.format(selection_id)] = res_df['short_tp_gap_{}'.format(selection_id)].to_numpy() / get_line(res_df['short_wave_high_idx_{}{}{}'.format(itv, period1, period2)].to_numpy(), bb_range)\n","  res_df['long_ppr_{}'.format(selection_id)] = res_df['long_tp_gap_{}'.format(selection_id)].to_numpy() / get_line(res_df['long_wave_low_idx_{}{}{}'.format(itv, period1, period2)].to_numpy(), bb_range)\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"OpkclLSzazZ-"},"outputs":[],"source":["def wave_body_ratio(res_df_, itv, period):\n","  dc_upper_ = res_df_['dc_upper_{}{}'.format(itv, period)].to_numpy()\n","  dc_lower_ = res_df_['dc_lower_{}{}'.format(itv, period)].to_numpy()\n","  close_ = res_df_['close_{}'.format(itv)].to_numpy()\n","  open_ = res_df_['open_{}'.format(itv)].to_numpy()\n","\n","  dc_range = dc_upper_ - dc_lower_\n","  body_range = abs(close_ - open_)\n","\n","  res_df_['wave_body_ratio'] = body_range / dc_range\n","  res_df_['dc_upper_body_ratio'] = (np.maximum(close_, open_) - dc_upper_) / body_range\n","  res_df_['dc_lower_body_ratio'] = (dc_lower_) - np.minimum(close_, open_) / body_range\n","\n","  return"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"0-zzitQRbnz8"},"outputs":[],"source":["# res_df_['wave_body_ratio'].tail(200)\n","\n","itv = 'H'\n","period = 5\n","wave_body_ratio(res_df_, itv, period)"]},{"cell_type":"markdown","metadata":{"id":"qsyPhNR8yP1c"},"source":["##### dump"]},{"cell_type":"markdown","metadata":{"id":"xpyP5t8Ht_pE"},"source":["### calc recursive indi's min_period"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"N1Hbm4OA4Tkk"},"outputs":[],"source":["ticker_prcn = get_precision_by_price(res_df.close.iloc[-1]) + 2\n","\n","target_len = 300000\n","slice_len_list = list(range(50, 10000, 100))\n","slice_len_list.insert(0, target_len)\n","\n","start_0 = time.time()\n","# prev_int_, prev_pnts_ = None, None\n","offset = 1\n","\n","for sl_idx, sample_len in enumerate(slice_len_list):\n","\n","  sample_df = res_df.iloc[-sample_len -offset:-offset]\n","  sample_len2 = sample_len\n","\n","  # --------- input using indi.s --------- #\n","  # res = ema_v0(sample_df['close'], 190)\n","  res = rsi(sample_df, 14)\n","\n","    #    to_htf()    #\n","  # df_5T = to_htf(sample_df, itv_='5T', offset='1h')\n","  # sample_len2 = len(df_5T)\n","\n","  # # --------- input using htf_indi. --------- #\n","  # res = ema(df_5T['close'], 195)\n","  # -------------------------------------- #\n","\n","  res_last_row = res.iloc[-1]\n","  if pd.isnull(res_last_row):\n","    continue\n","\n","  # print(res_last_row)\n","  # break\n","\n","  # sample_df = sample_df.join(to_lower_tf_v2(sample_df, df_5T, [-1]), how='inner')\n","\n","\n","  #   자리수 분할 계산    #\n","  int_, points_ = str(res_last_row).split('.')\n","  pnts_ = points_[:ticker_prcn]\n","\n","  if sl_idx == 0:\n","    target_int_ = int_\n","    target_pnts_ = pnts_\n","    print(\"target {} ({}) -> {} {}\".format(sample_len, sample_len2, int_, points_))\n","\n","  else:\n","    if target_int_ == int_ and target_pnts_ == pnts_:\n","      # print(sample_len, \"({})\".format(sample_len2), '->', int_, pnts_, end='\\n\\n')\n","      print(\"{} ({}) -> {} {}\\n\".format(sample_len, sample_len2, int_, points_))\n","      break\n","\n","print(time.time() - start_0)  # (1301)(1361)(1301)"]},{"cell_type":"markdown","metadata":{"id":"rrIGjmUzqU-D"},"source":["## import utils & config"]},{"cell_type":"code","execution_count":5,"metadata":{"id":"SeJan_0t95yL","executionInfo":{"status":"ok","timestamp":1658884048685,"user_tz":-540,"elapsed":5762,"user":{"displayName":"7th June","userId":"08178289703395036410"}}},"outputs":[],"source":["frame_ver = \"0114_htf\"\n","ID_arr = np.array(['v3', 'v5_2'])\n","\n","utils_public_name = \"{}.utils.{}_utils_public\".format(strat_pkg, frame_ver)\n","utils_public_lib = importlib.import_module(utils_public_name)\n","utils_public = utils_public_lib   # temporary\n","\n","u_name_list = [\"{}.utils.{}_utils_{}\".format(strat_pkg, frame_ver, id_) for id_ in ID_arr]\n","utils_arr = np.array([importlib.import_module(u_name) for u_name in u_name_list])\n","\n","config_name_list = [\"{}_config_{}.json\".format(frame_ver, id_) for id_ in ID_arr]\n","cfg_path_list = [os.path.join(current_path, strat_pkg, \"config\", name_) for name_ in config_name_list]\n","cfg_file_list = [open(cfg_path) for cfg_path in cfg_path_list]\n","config_arr = np.array([EasyDict(json.load(cfg_)) for cfg_ in cfg_file_list])\n","\n","# ------ opened files should be closed --> 닫지 않으면 reopen 시 error occurs ------ #\n","_ = [cfg_.close() for cfg_ in cfg_file_list]\n","show_plot = 1   # idep's var - do not touch"]},{"cell_type":"markdown","metadata":{"id":"leSQlImg4_9L"},"source":["### utils_"]},{"cell_type":"code","execution_count":6,"metadata":{"id":"CB2yZdQ95Cdg","executionInfo":{"status":"ok","timestamp":1658884049998,"user_tz":-540,"elapsed":1324,"user":{"displayName":"7th June","userId":"08178289703395036410"}}},"outputs":[],"source":["# import pandas as pd\n","# import numpy as np\n","# import logging\n","\n","def enlist_tr(res_df, config, np_timeidx, mode='OPEN', show_detail=True):\n","\n","    # ================== enlist wave_unit ================== #\n","    selection_id = config.selection_id\n","    \n","    len_df = len(res_df)\n","    len_df_range = np.arange(len_df)\n","\n","    # if config.tr_set.check_hlm == 2:  # 동일한 param 으로도 p2_hlm 시도를 충분히 할 수 있음 (csdbox 와 같은)\n","    #   assert not (wave_itv1 == wave_itv2 and wave_period1 == wave_period2)\n","\n","    # ------------ get wave_features ------------ #      \n","    wave_itv1 = config.tr_set.wave_itv1\n","    wave_period1 = config.tr_set.wave_period1\n","    wave_itv2 = config.tr_set.wave_itv2\n","    wave_period2 = config.tr_set.wave_period2\n","    roll_hl_cnt = 3\n","\n","    roll_highs1 = [res_df['wave_high_fill_{}{}_-{}'.format(wave_itv1, wave_period1, cnt_ + 1)].to_numpy() for cnt_ in reversed(range(roll_hl_cnt))]\n","    roll_lows1 = [res_df['wave_low_fill_{}{}_-{}'.format(wave_itv1, wave_period1, cnt_ + 1)].to_numpy() for cnt_ in reversed(range(roll_hl_cnt))]\n","\n","    wave_high_fill1_ = res_df['wave_high_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","    wave_low_fill1_ = res_df['wave_low_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","\n","    # roll_highs2 = [res_df['wave_high_fill_{}{}_-{}'.format(wave_itv2, wave_period2, cnt_ + 1)].to_numpy() for cnt_ in reversed(range(roll_hl_cnt))]\n","    # roll_lows2 = [res_df['wave_low_fill_{}{}_-{}'.format(wave_itv2, wave_period2, cnt_ + 1)].to_numpy() for cnt_ in reversed(range(roll_hl_cnt))]\n","\n","    # wave_high_fill2_ = res_df['wave_high_fill_{}{}'.format(wave_itv2, wave_period2)].to_numpy()\n","    # wave_low_fill2_ = res_df['wave_low_fill_{}{}'.format(wave_itv2, wave_period2)].to_numpy()\n","    \n","    # res_df['short_wave_spread_fill_{}{}'.format(wave_itv1, wave_period1)] = roll_highs1[-1] / wave_low_fill1_\n","    # res_df['long_wave_spread_fill_{}{}'.format(wave_itv1, wave_period1)] = wave_high_fill1_ / roll_lows1[-1]\n","    res_df['short_wave_spread_fill_{}{}'.format(wave_itv1, wave_period1)] = wave_high_fill1_ / wave_low_fill1_\n","    res_df['long_wave_spread_fill_{}{}'.format(wave_itv1, wave_period1)] = wave_high_fill1_ / wave_low_fill1_\n","\n","    # ------------ enlist tr_unit ------------ #\n","    # cu's roll_high_[:, -1] = prev_high & cu's roll_low_[:, -1] = current_low\n","    # co's roll_low_[:, -1] = prev_low & co's roll_high_[:, -1] = current_high\n","    res_df['short_tp_1_{}'.format(selection_id)] = wave_low_fill1_   # wave_low_fill_ b2_low_5T\n","    res_df['short_tp_0_{}'.format(selection_id)] = roll_highs1[-1]   # roll_highs1[-1] wave_high_fill1_  # roll_high_[:, -2]\n","    res_df['long_tp_1_{}'.format(selection_id)] = wave_high_fill1_   # wave_high_fill_ b2_high_5T\n","    res_df['long_tp_0_{}'.format(selection_id)] = roll_lows1[-1]    # roll_lows1[-1]  wave_low_fill1_   # roll_low_[:, -2]\n","\n","    res_df['short_ep1_1_{}'.format(selection_id)] = wave_low_fill1_   # b2_low_5T\n","    res_df['short_ep1_0_{}'.format(selection_id)] = wave_high_fill1_  # roll_high_[:, -2]\n","    res_df['long_ep1_1_{}'.format(selection_id)] = wave_high_fill1_   # b2_high_5T\n","    res_df['long_ep1_0_{}'.format(selection_id)] = wave_low_fill1_    # roll_low_[:, -2]\n","\n","    # --> out use p1's low, (allow prev_low as out for p1_hhm only)\n","    res_df['short_out_1_{}'.format(selection_id)] = wave_low_fill1_   # wave_low_fill1_   # wave_low_fill2_   # b2_low_5T\n","    res_df['short_out_0_{}'.format(selection_id)] = wave_high_fill1_ # roll_highs1[-1] if not config.tr_set.check_hlm else wave_high_fill1_   # roll_highs2[-1]  # roll_high_[:, -2]\n","    res_df['long_out_1_{}'.format(selection_id)] = wave_high_fill1_   # wave_high_fill1_   # wave_high_fill2_   # b2_high_5T\n","    res_df['long_out_0_{}'.format(selection_id)] = wave_low_fill1_ # roll_lows1[-1] if not config.tr_set.check_hlm else wave_low_fill1_   # roll_lows2[-1]    # roll_low_[:, -2]\n","\n","    # --> p2's ep use p1's ep\n","    res_df['short_ep2_1_{}'.format(selection_id)] = wave_low_fill1_  # wave_low_fill2_   # b2_low_5T\n","    res_df['short_ep2_0_{}'.format(selection_id)] = wave_high_fill1_ # wave_high_fill2_  # roll_high_[:, -2]\n","    res_df['long_ep2_1_{}'.format(selection_id)] = wave_high_fill1_  # wave_high_fill2_   # b2_high_5T\n","    res_df['long_ep2_0_{}'.format(selection_id)] = wave_low_fill1_   # wave_low_fill2_    # roll_low_[:, -2]\n","\n","    # --- inversion --- #\n","    if config.pos_set.short_inversion or config.pos_set.long_inversion:\n","        res_df.rename({short_tp_1_: long_tp_1_, long_tp_1_: short_tp_1_}, axis=1, inplace=True)\n","        res_df.rename({short_tp_0_: long_tp_0_, long_tp_0_: short_tp_0_}, axis=1, inplace=True)\n","        res_df.rename({short_epout_1_: long_epout_1_, long_epout_1_: short_epout_1_}, axis=1, inplace=True)\n","        res_df.rename({short_epout_0_: long_epout_0_, long_epout_0_: short_epout_0_}, axis=1, inplace=True)\n","\n","    res_df['short_tp_gap_{}'.format(selection_id)] = abs(res_df['short_tp_1_{}'.format(selection_id)] - res_df['short_tp_0_{}'.format(selection_id)])\n","    res_df['long_tp_gap_{}'.format(selection_id)] = abs(res_df['long_tp_1_{}'.format(selection_id)] - res_df['long_tp_0_{}'.format(selection_id)])\n","    res_df['short_ep1_gap_{}'.format(selection_id)] = abs(res_df['short_ep1_1_{}'.format(selection_id)] - res_df['short_ep1_0_{}'.format(selection_id)])\n","    res_df['long_ep1_gap_{}'.format(selection_id)] = abs(res_df['long_ep1_1_{}'.format(selection_id)] - res_df['long_ep1_0_{}'.format(selection_id)])\n","\n","    res_df['short_out_gap_{}'.format(selection_id)] = abs(res_df['short_out_1_{}'.format(selection_id)] - res_df['short_out_0_{}'.format(selection_id)])\n","    res_df['long_out_gap_{}'.format(selection_id)] = abs(res_df['long_out_1_{}'.format(selection_id)] - res_df['long_out_0_{}'.format(selection_id)])\n","    res_df['short_ep2_gap_{}'.format(selection_id)] = abs(res_df['short_ep2_1_{}'.format(selection_id)] - res_df['short_ep2_0_{}'.format(selection_id)])\n","    res_df['long_ep2_gap_{}'.format(selection_id)] = abs(res_df['long_ep2_1_{}'.format(selection_id)] - res_df['long_ep2_0_{}'.format(selection_id)])\n","\n","\n","    data_cols = ['open', 'high', 'low', 'close']  # Todo - public_indi 이전에 해야할지도 모름 # 'close', 'haopen', 'hahigh', 'halow', 'haclose'\n","    open, high, low, close = [res_df[col_].to_numpy() for col_ in data_cols]\n","\n","    # ================== point ================== #     \n","    short_open_res1 = np.ones(len_df) #.astype(object)\n","    long_open_res1 = np.ones(len_df)  #.astype(object)\n","    short_open_res2 = np.ones(len_df) #.astype(object)\n","    long_open_res2 = np.ones(len_df)  #.astype(object)\n","    \n","    # ------------ wave_point ------------ #\n","    notnan_cu = ~pd.isnull(res_df['wave_cu_{}{}'.format(wave_itv1, wave_period1)].to_numpy())  # isnull for object\n","    notnan_co = ~pd.isnull(res_df['wave_co_{}{}'.format(wave_itv1, wave_period1)].to_numpy())\n","\n","    short_open_res1 *= res_df['wave_cu_{}{}'.format(wave_itv1, wave_period1)].to_numpy().astype(bool) * notnan_cu  # object로 변환되는 경우에 대응해, bool 로 재정의\n","    long_open_res1 *= res_df['wave_co_{}{}'.format(wave_itv1, wave_period1)].to_numpy().astype(bool) * notnan_co  # np.nan = bool type 으로 True 임..\n","    short_open_res2 *= res_df['short_tc_{}{}'.format(wave_itv2, wave_period2)].to_numpy()\n","    long_open_res2 *= res_df['long_tc_{}{}'.format(wave_itv2, wave_period2)].to_numpy()\n","\n","    if show_detail:\n","      sys_log.warning(\"wave_point\")\n","      sys_log.warning(\"np.sum(short_open_res1 == 1) : {}\".format(np.sum(short_open_res1 == 1)))\n","      sys_log.warning(\"np.sum(long_open_res1 == 1) : {}\".format(np.sum(long_open_res1 == 1)))  \n","      sys_log.warning(\"np.sum(short_open_res2 == 1) : {}\".format(np.sum(short_open_res2 == 1)))\n","      sys_log.warning(\"np.sum(long_open_res2 == 1) : {}\".format(np.sum(long_open_res2 == 1)))  \n","    \n","    # ------ reject wave_update_hl ------ #\n","    notnan_update_low_cu = ~pd.isnull(res_df['wave_update_low_cu_bool_{}{}'.format(wave_itv1, wave_period1)].to_numpy())\n","    notnan_update_high_co = ~pd.isnull(res_df['wave_update_high_co_bool_{}{}'.format(wave_itv1, wave_period1)].to_numpy())\n","\n","    short_open_res1 *= ~(res_df['wave_update_low_cu_bool_{}{}'.format(wave_itv1, wave_period1)].to_numpy().astype(bool)) * notnan_update_low_cu\n","    long_open_res1 *= ~(res_df['wave_update_high_co_bool_{}{}'.format(wave_itv1, wave_period1)].to_numpy().astype(bool)) * notnan_update_high_co\n","    # short_open_res2 *= ~(res_df['wave_update_low_cu_bool_{}{}'.format(wave_itv2, wave_period2)].to_numpy().astype(bool)) * notnan_update_low_cu\n","    # long_open_res2 *= ~(res_df['wave_update_high_co_bool_{}{}'.format(wave_itv2, wave_period2)].to_numpy().astype(bool)) * notnan_update_high_co\n","\n","    # short_open_res1 *= ~res_df['wave_update_low_cu_bool_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","    # long_open_res1 *= ~res_df['wave_update_high_co_bool_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","    # short_open_res2 *= ~res_df['wave_update_low_cu_bool_{}{}'.format(wave_itv2, wave_period2)].to_numpy()\n","    # long_open_res2 *= ~res_df['wave_update_high_co_bool_{}{}'.format(wave_itv2, wave_period2)].to_numpy()\n","\n","    if show_detail:\n","      sys_log.warning(\"reject update_hl\")\n","      sys_log.warning(\"np.sum(short_open_res1 == 1) : {}\".format(np.sum(short_open_res1 == 1)))\n","      sys_log.warning(\"np.sum(long_open_res1 == 1) : {}\".format(np.sum(long_open_res1 == 1)))  \n","      # sys_log.warning(\"np.sum(short_open_res2 == 1) : {}\".format(np.sum(short_open_res2 == 1)))\n","      # sys_log.warning(\"np.sum(long_open_res2 == 1) : {}\".format(np.sum(long_open_res2 == 1)))  \n","\n","    # ------ wave_itv ------ #    \n","    if wave_itv1 != 'T':      \n","      wave_itv1_num = to_itvnum(wave_itv1)\n","      short_open_res1 *= np_timeidx % wave_itv1_num == (wave_itv1_num - 1)\n","      long_open_res1 *= np_timeidx % wave_itv1_num == (wave_itv1_num - 1) \n","\n","      if show_detail:\n","        sys_log.warning(\"wave_itv1\")\n","        sys_log.warning(\"np.sum(short_open_res1 == 1) : {}\".format(np.sum(short_open_res1 == 1)))\n","        sys_log.warning(\"np.sum(long_open_res1 == 1) : {}\".format(np.sum(long_open_res1 == 1)))  \n","    \n","    if wave_itv2 != 'T':\n","      wave_itv2_num = to_itvnum(wave_itv2)\n","      short_open_res2 *= np_timeidx % wave_itv2_num == (wave_itv2_num - 1)\n","      long_open_res2 *= np_timeidx % wave_itv2_num == (wave_itv2_num - 1) \n","\n","      if show_detail:\n","        sys_log.warning(\"wave_itv2\")\n","        sys_log.warning(\"np.sum(short_open_res2 == 1) : {}\".format(np.sum(short_open_res2 == 1)))\n","        sys_log.warning(\"np.sum(long_open_res2 == 1) : {}\".format(np.sum(long_open_res2 == 1)))\n","\n","    # ------ wave_mm ------ #\n","    wave_high_terms_cnt_fill1_ = res_df['wave_high_terms_cnt_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","    wave_low_terms_cnt_fill1_ = res_df['wave_low_terms_cnt_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","\n","    short_open_res1 *= (wave_high_terms_cnt_fill1_ > config.tr_set.wave_greater2) & (wave_low_terms_cnt_fill1_ > config.tr_set.wave_greater1)\n","    long_open_res1 *= (wave_low_terms_cnt_fill1_ > config.tr_set.wave_greater2) & (wave_high_terms_cnt_fill1_ > config.tr_set.wave_greater1)\n","\n","    # wave_high_terms_cnt_fill2_ = res_df['wave_high_terms_cnt_fill_{}{}'.format(wave_itv2, wave_period2)].to_numpy()\n","    # wave_low_terms_cnt_fill2_ = res_df['wave_low_terms_cnt_fill_{}{}'.format(wave_itv2, wave_period2)].to_numpy()\n","\n","    # short_open_res2 *= (wave_high_terms_cnt_fill2_ > config.tr_set.wave_greater2) & (wave_low_terms_cnt_fill2_ > config.tr_set.wave_greater1)\n","    # long_open_res2 *= (wave_low_terms_cnt_fill2_ > config.tr_set.wave_greater2) & (wave_high_terms_cnt_fill2_ > config.tr_set.wave_greater1)\n","\n","    if show_detail:\n","      sys_log.warning(\"wave_mm\")\n","      sys_log.warning(\"np.sum(short_open_res1 == 1) : {}\".format(np.sum(short_open_res1 == 1)))\n","      sys_log.warning(\"np.sum(long_open_res1 == 1) : {}\".format(np.sum(long_open_res1 == 1)))\n","      # sys_log.warning(\"np.sum(short_open_res2 == 1) : {}\".format(np.sum(short_open_res2 == 1)))\n","      # sys_log.warning(\"np.sum(long_open_res2 == 1) : {}\".format(np.sum(long_open_res2 == 1)))\n","\n","    # ------ wave_length ------ #\n","    if config.tr_set.wave_length1 != \"None\": \n","      short_wave_length_fill_ = res_df['short_wave_length_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","      long_wave_length_fill_ = res_df['long_wave_length_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","\n","      short_open_res1 *= short_wave_length_fill_ >= config.tr_set.wave_length1\n","      long_open_res1 *= long_wave_length_fill_ >= config.tr_set.wave_length1\n","\n","      if show_detail:\n","        sys_log.warning(\"wave_length\")\n","        sys_log.warning(\"np.sum(short_open_res1 == 1) : {}\".format(np.sum(short_open_res1 == 1)))\n","        sys_log.warning(\"np.sum(long_open_res1 == 1) : {}\".format(np.sum(long_open_res1 == 1)))\n","\n","    # ------ wave_spread ------ #\n","    if config.tr_set.wave_spread1 != \"None\":\n","      short_wave_spread_fill = res_df['short_wave_spread_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","      long_wave_spread_fill = res_df['long_wave_spread_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","\n","      short_open_res1 *= short_wave_spread_fill >= config.tr_set.wave_spread1\n","      long_open_res1 *= long_wave_spread_fill >= config.tr_set.wave_spread1\n","\n","      if show_detail:\n","        sys_log.warning(\"wave_spread\")\n","        sys_log.warning(\"np.sum(short_open_res1 == 1) : {}\".format(np.sum(short_open_res1 == 1)))\n","        sys_log.warning(\"np.sum(long_open_res1 == 1) : {}\".format(np.sum(long_open_res1 == 1)))      \n","\n","\n","    # ------------ 추세선 리스트 ------------ #\n","    # ------ ma & prev_low ------ #    \n","    # ma_period = 60\n","\n","    # short_prev_ma_ = res_df['short_ma_T{}_-1'.format(ma_period)].to_numpy()\n","    # long_prev_ma_ = res_df['long_ma_T{}_-1'.format(ma_period)].to_numpy()    \n","    \n","    # short_open_res1 *= short_prev_ma_ > roll_highs1[-1]  # Todo, index sync. 요망\n","    # long_open_res1 *= long_prev_ma_ < roll_lows1[-1]\n","\n","    # if show_detail:\n","    #   sys_log.warning(\"ma & prev_low\")\n","    #   sys_log.warning(\"np.sum(short_open_res1 == 1) : {}\".format(np.sum(short_open_res1 == 1)))\n","    #   sys_log.warning(\"np.sum(long_open_res1 == 1) : {}\".format(np.sum(long_open_res1 == 1)))     \n","\n","\n","    # ================== tr_set ================== #\n","    # ------------ tp ------------ #\n","    tpg = config.tr_set.tp_gap\n","    res_df['short_tp_{}'.format(selection_id)] = res_df['short_tp_1_{}'.format(selection_id)].to_numpy() - res_df['short_tp_gap_{}'.format(selection_id)].to_numpy() * tpg\n","    res_df['long_tp_{}'.format(selection_id)] = res_df['long_tp_1_{}'.format(selection_id)].to_numpy() + res_df['long_tp_gap_{}'.format(selection_id)].to_numpy() * tpg\n","    # res_df['short_tp_{}'.format(selection_id)] = short_tp_1 - short_epout_gap * tpg\n","    # res_df['long_tp_{}'.format(selection_id)] = long_tp_1 + long_epout_gap * tpg\n","\n","    # ------ limit_ep1 ------ #\n","    if config.ep_set.entry_type == \"LIMIT\":\n","        epg1 = config.tr_set.ep_gap1\n","\n","        # ------ epbox as epg ------ #\n","        res_df['short_ep1_{}'.format(selection_id)] = res_df['short_ep1_0_{}'.format(selection_id)].to_numpy() + res_df['short_ep1_gap_{}'.format(selection_id)].to_numpy() * epg1\n","        res_df['long_ep1_{}'.format(selection_id)] = res_df['long_ep1_0_{}'.format(selection_id)].to_numpy() - res_df['long_ep1_gap_{}'.format(selection_id)].to_numpy() * epg1     \n","\n","        # ------ tpbox as epg ------ #\n","        # p1_hlm 을 위해선, tp_0 를 기준할 수 없음 --> ep1 & ep2 를 기준으로 진행\n","        # res_df['short_ep1_{}'.format(selection_id)] = res_df['short_ep1_0_{}'.format(selection_id)].to_numpy() + res_df['short_tp_gap_{}'.format(selection_id)].to_numpy() * epg1  # fibonacci 고려하면, tp / out gap 기준이 맞지 않을까\n","        # res_df['long_ep1_{}'.format(selection_id)] = res_df['long_ep1_0_{}'.format(selection_id)].to_numpy() - res_df['long_tp_gap_{}'.format(selection_id)].to_numpy() * epg1      \n","        \n","        # ------ fibo_ep ------ #\n","        # res_df['short_ep1_{}'.format(selection_id)] = res_df['short_tp_0_{}'.format(selection_id)].to_numpy() + res_df['short_tp_gap_{}'.format(selection_id)].to_numpy() * epg1  # fibonacci 고려하면, tp / out gap 기준이 맞지 않을까\n","        # res_df['long_ep1_{}'.format(selection_id)] = res_df['long_tp_0_{}'.format(selection_id)].to_numpy() - res_df['long_tp_gap_{}'.format(selection_id)].to_numpy() * epg1    \n","                \n","    # ------ market_ep1 ------ #\n","    else:\n","        res_df['short_ep1_{}'.format(selection_id)] = close\n","        res_df['long_ep1_{}'.format(selection_id)] = close\n","    \n","    # ------ limit_ep2 ------ #   \n","    if config.ep_set.point2.entry_type == \"LIMIT\":\n","        epg2 = config.tr_set.ep_gap2\n","\n","        # ------ epbox as epg ------ #\n","        res_df['short_ep2_{}'.format(selection_id)] = res_df['short_ep2_0_{}'.format(selection_id)].to_numpy() + res_df['short_ep2_gap_{}'.format(selection_id)].to_numpy() * epg2\n","        res_df['long_ep2_{}'.format(selection_id)] = res_df['long_ep2_0_{}'.format(selection_id)].to_numpy() - res_df['long_ep2_gap_{}'.format(selection_id)].to_numpy() * epg2  \n","\n","        # ------ tpbox as epg ------ #\n","        # res_df['short_ep2_{}'.format(selection_id)] = res_df['short_ep2_0_{}'.format(selection_id)].to_numpy() + res_df['short_out_gap_{}'.format(selection_id)].to_numpy() * epg2\n","        # res_df['long_ep2_{}'.format(selection_id)] = res_df['long_ep2_0_{}'.format(selection_id)].to_numpy() - res_df['long_out_gap_{}'.format(selection_id)].to_numpy() * epg2  \n","        \n","        # ------ fibo_ep ------ #\n","        # res_df['short_ep2_{}'.format(selection_id)] = res_df['short_tp_0_{}'.format(selection_id)].to_numpy() + res_df['short_tp_gap_{}'.format(selection_id)].to_numpy() * epg2  # fibonacci 고려하면, tp / out gap 기준이 맞지 않을까\n","        # res_df['long_ep2_{}'.format(selection_id)] = res_df['long_tp_0_{}'.format(selection_id)].to_numpy() - res_df['long_tp_gap_{}'.format(selection_id)].to_numpy() * epg2   \n","\n","    # ------ market_ep2 ------ #\n","    else: \n","        res_df['short_ep2_{}'.format(selection_id)] = close\n","        res_df['long_ep2_{}'.format(selection_id)] = close\n","                \n","\n","    # ------------ out ------------ #\n","    outg = config.tr_set.out_gap\n","    # res_df['short_out_{}'.format(selection_id)] = short_tp_0 + short_tp_gap * outg            # 1. for hhm check -> 규칙성과 wave_range 기반 거래 기준의 hhm 확인\n","    # res_df['long_out_{}'.format(selection_id)] = long_tp_0 - long_tp_gap * outg\n","\n","    if config.tr_set.check_hlm == 0:\n","      res_df['short_out_{}'.format(selection_id)] = res_df['short_tp_0_{}'.format(selection_id)].to_numpy() + res_df['short_tp_gap_{}'.format(selection_id)].to_numpy() * outg\n","      res_df['long_out_{}'.format(selection_id)] = res_df['long_tp_0_{}'.format(selection_id)].to_numpy() - res_df['long_tp_gap_{}'.format(selection_id)].to_numpy() * outg\n","\n","    elif config.tr_set.check_hlm == 1:    # for p1_hlm\n","      # ------ irregular - next_fibo ------ #\n","      co_wrr_32_ = res_df['co_wrr_32_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","      cu_wrr_32_ = res_df['cu_wrr_32_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","\n","      short_next_fibo_outg = np.vectorize(get_next_fibo_gap2)(cu_wrr_32_)\n","      long_next_fibo_outg = np.vectorize(get_next_fibo_gap2)(co_wrr_32_)\n","\n","      res_df['short_out_{}'.format(selection_id)] = res_df['short_tp_0_{}'.format(selection_id)].to_numpy() + res_df['short_tp_gap_{}'.format(selection_id)].to_numpy() * short_next_fibo_outg  # ep 와 마찬가지로, tpg 기준 가능\n","      res_df['long_out_{}'.format(selection_id)] = res_df['long_tp_0_{}'.format(selection_id)].to_numpy() - res_df['long_tp_gap_{}'.format(selection_id)].to_numpy() * long_next_fibo_outg \n","\n","      # ------ ep1box as outg ------ #\n","      # res_df['short_out_{}'.format(selection_id)] = res_df['short_ep1_0_{}'.format(selection_id)].to_numpy() + res_df['short_ep1_gap_{}'.format(selection_id)].to_numpy() * outg\n","      # res_df['long_out_{}'.format(selection_id)] = res_df['long_ep1_0_{}'.format(selection_id)].to_numpy() - res_df['long_ep1_gap_{}'.format(selection_id)].to_numpy() * outg \n","\n","      # ------ ep1box as outg for 1_tr ------ #\n","      # res_df['short_out_{}'.format(selection_id)] = res_df['short_ep1_0_{}'.format(selection_id)].to_numpy() + res_df['short_ep1_gap_{}'.format(selection_id)].to_numpy() * outg\n","      # res_df['long_out_{}'.format(selection_id)] = res_df['long_ep1_0_{}'.format(selection_id)].to_numpy() - res_df['long_ep1_gap_{}'.format(selection_id)].to_numpy() * outg \n","      \n","      # ------ 1_tr - auto_calculation ------ #\n","      # res_df['short_out_{}'.format(selection_id)] = res_df['short_ep1_{}'.format(selection_id)] + (res_df['short_ep1_{}'.format(selection_id)].to_numpy() - res_df['short_tp_{}'.format(selection_id)].to_numpy())\n","      # res_df['long_out_{}'.format(selection_id)] = res_df['long_ep1_{}'.format(selection_id)].to_numpy() - (res_df['long_tp_{}'.format(selection_id)].to_numpy() - res_df['long_ep1_{}'.format(selection_id)].to_numpy())\n","\n","      # ------ tpbox as outg ------ #\n","      # res_df['short_out_{}'.format(selection_id)] = res_df['short_ep1_0_{}'.format(selection_id)].to_numpy() + res_df['short_tp_gap_{}'.format(selection_id)].to_numpy() * outg  # ep 와 마찬가지로, tpg 기준 가능\n","      # res_df['long_out_{}'.format(selection_id)] = res_df['long_ep1_0_{}'.format(selection_id)].to_numpy() - res_df['long_tp_gap_{}'.format(selection_id)].to_numpy() * outg \n","      \n","      # ------ fibo_out ------ #      \n","      # res_df['short_out_{}'.format(selection_id)] = res_df['short_tp_0_{}'.format(selection_id)].to_numpy() + res_df['short_tp_gap_{}'.format(selection_id)].to_numpy() * outg  # ep 와 마찬가지로, tpg 기준 가능\n","      # res_df['long_out_{}'.format(selection_id)] = res_df['long_tp_0_{}'.format(selection_id)].to_numpy() - res_df['long_tp_gap_{}'.format(selection_id)].to_numpy() * outg \n","    \n","    else:  # p2_hlm\n","      res_df['short_out_{}'.format(selection_id)] = res_df['short_out_0_{}'.format(selection_id)].to_numpy() + res_df['short_out_gap_{}'.format(selection_id)].to_numpy() * outg\n","      res_df['long_out_{}'.format(selection_id)] = res_df['long_out_0_{}'.format(selection_id)].to_numpy() - res_df['long_out_gap_{}'.format(selection_id)].to_numpy() * outg\n","\n","      # res_df['short_out_{}'.format(selection_id)] = res_df['short_tp_0_{}'.format(selection_id)].to_numpy() + res_df['short_tp_gap_{}'.format(selection_id)].to_numpy() * outg\n","      # res_df['long_out_{}'.format(selection_id)] = res_df['long_tp_0_{}'.format(selection_id)].to_numpy() - res_df['long_tp_gap_{}'.format(selection_id)].to_numpy() * outg\n","\n","      # res_df['short_out_{}'.format(selection_id)] = res_df['short_ep2_0_{}'.format(selection_id)].to_numpy() + res_df['short_ep2_gap_{}'.format(selection_id)].to_numpy() * outg   # p2's ep_box 를 out 으로 사용한다?\n","      # res_df['long_out_{}'.format(selection_id)] = res_df['long_ep2_0_{}'.format(selection_id)].to_numpy() - res_df['long_ep2_gap_{}'.format(selection_id)].to_numpy() * outg     \n","      \n","\n","    # ------------ point validation ------------ # - vecto. 로 미리 거를 수 있는걸 거르면 좋을 것\n","    short_tp_ = res_df['short_tp_{}'.format(selection_id)].to_numpy()\n","    short_ep1_ = res_df['short_ep1_{}'.format(selection_id)].to_numpy()\n","    short_ep2_ = res_df['short_ep2_{}'.format(selection_id)].to_numpy()\n","    short_out_ = res_df['short_out_{}'.format(selection_id)].to_numpy()\n","\n","    long_tp_ = res_df['long_tp_{}'.format(selection_id)].to_numpy()\n","    long_ep1_ = res_df['long_ep1_{}'.format(selection_id)].to_numpy()\n","    long_ep2_ = res_df['long_ep2_{}'.format(selection_id)].to_numpy()\n","    long_out_ = res_df['long_out_{}'.format(selection_id)].to_numpy()\n","\n","    # ------ p1 point_validation ------ #\n","    short_open_res1 *= (short_tp_ < short_ep1_) & (short_ep1_ < short_out_)  # tr_set validation reject nan data & 정상 거래 위한 tp > ep / --> p2_box location (cannot be vectorized)\n","    # short_open_res1 *= close < short_ep1_   # reject entry open_execution\n","    short_open_res1 *= close < short_out_ # res_df['short_ep1_0_{}'.format(selection_id)].to_numpy()   # reject hl_out open_execution -> close always < ep1_0 at wave_p1\n","    # short_out_  res_df['short_tp_0_{}'.format(selection_id)].to_numpy() res_df['short_ep1_0_{}'.format(selection_id)].to_numpy()\n","\n","    long_open_res1 *= (long_tp_ > long_ep1_) & (long_ep1_ > long_out_)  # (long_tp_ > long_ep_) # tr_set validation     \n","    # long_open_res1 *= close > long_ep1_  # reject entry open_execution    \n","    long_open_res1 *= close > long_out_ # res_df['long_ep1_0_{}'.format(selection_id)].to_numpy()  # reject hl_out open_execution  \n","    # long_out_ res_df['long_tp_0_{}'.format(selection_id)].to_numpy() res_df['long_ep1_0_{}'.format(selection_id)].to_numpy()\n","\n","    # ------ p2 point_validation ------ # --> executed in en_ex_pairing() function.\n","    # short_open_res2 *= (short_ep2_ < short_out_) # tr_set validation (short_tp_ < short_ep_) # --> p2_box location (cannot be vectorized)\n","    # short_open_res2 *= close < short_out_    # reject hl_out open_execution\n","\n","    # long_open_res2 *= (long_ep2_ > long_out_)  # tr_set validation (long_tp_ > long_ep_) &   # p2's ep & out cannot be vectorized\n","    # long_open_res2 *= close > long_out_    # reject hl_out open_execution\n","\n","    res_df['short_open1_{}'.format(selection_id)] = short_open_res1 * (not config.pos_set.short_ban)\n","    res_df['long_open1_{}'.format(selection_id)] = long_open_res1 * (not config.pos_set.long_ban)\n","    # print(\"res_df['long_open1_{}'.format(selection_id)].to_numpy() :\", res_df['long_open1_{}'.format(selection_id)].to_numpy()) \n","    res_df['short_open2_{}'.format(selection_id)] = short_open_res2\n","    res_df['long_open2_{}'.format(selection_id)] = long_open_res2\n","\n","    if show_detail:\n","      sys_log.warning(\"point validation\")\n","      sys_log.warning(\"np.sum(short_open_res1 == 1) : {}\".format(np.sum(short_open_res1 == 1)))\n","      sys_log.warning(\"np.sum(long_open_res1 == 1) : {}\".format(np.sum(long_open_res1 == 1)))\n","      # sys_log.warning(\"np.sum(short_open_res2 == 1) : {}\".format(np.sum(short_open_res2 == 1)))\n","      # sys_log.warning(\"np.sum(long_open_res2 == 1) : {}\".format(np.sum(long_open_res2 == 1)))\n","    \n","    # ------------ higher_high momentum ------------ #\n","    # wb_tpg = config.tr_set.wb_tp_gap\n","    # wb_outg = config.tr_set.wb_out_gap\n","    # res_df['short_wave_1_{}'.format(selection_id)] = res_df['short_tp_1_{}'.format(selection_id)].to_numpy() - res_df['short_tp_gap_{}'.format(selection_id)].to_numpy() * wb_tpg\n","    # res_df['long_wave_1_{}'.format(selection_id)] = res_df['long_tp_1_{}'.format(selection_id)].to_numpy() + res_df['long_tp_gap_{}'.format(selection_id)].to_numpy() * wb_tpg\n","    \n","    # res_df['short_wave_0_{}'.format(selection_id)] = res_df['short_tp_0_{}'.format(selection_id)].to_numpy() + res_df['short_tp_gap_{}'.format(selection_id)].to_numpy() * wb_outg        # hhm check\n","    # res_df['long_wave_0_{}'.format(selection_id)] = res_df['long_tp_0_{}'.format(selection_id)].to_numpy() - res_df['long_tp_gap_{}'.format(selection_id)].to_numpy() * wb_outg\n","    # res_df['short_wave_0_{}'.format(selection_id)] = short_epout_0 + short_epout_gap * wb_outg\n","    # res_df['long_wave_0_{}'.format(selection_id)] = long_epout_0 - long_epout_gap * wb_outg\n","\n","    # ------ tr ------ #\n","    if config.tr_set.check_hlm == 2:\n","      res_df['short_tr_{}'.format(selection_id)] = np.nan\n","      res_df['long_tr_{}'.format(selection_id)] = np.nan\n","    else:      \n","      res_df['short_tr_{}'.format(selection_id)] = abs(\n","          (short_ep1_ / short_tp_ - config.trader_set.limit_fee - 1) / (short_ep1_ / short_out_ - config.trader_set.market_fee - 1))   # 이게 맞음, loss 의 분모 > 분자 & profit 의 분모 < 분자\n","      res_df['long_tr_{}'.format(selection_id)] = abs(\n","          (long_tp_ / long_ep1_ - config.trader_set.limit_fee - 1) / (long_out_ / long_ep1_ - config.trader_set.market_fee - 1))\n","\n","    # ------ zoned_ep ------ #\n","    # if config.tr_set.c_ep_gap != \"None\":\n","    #     # res_df['short_ep_org_{}'.format(selection_id)] = res_df['short_ep_{}'.format(selection_id)].copy()\n","    #     # res_df['long_ep_org_{}'.format(selection_id)] = res_df['long_ep_{}'.format(selection_id)].copy()\n","    #     res_df['short_ep2_{}'.format(selection_id)] = short_epout_1 + short_epout_gap * config.tr_set.c_ep_gap\n","    #     res_df['long_ep2_{}'.format(selection_id)] = long_epout_1 - long_epout_gap * config.tr_set.c_ep_gap\n","\n","    # # ------ zoned_out ------ #\n","    # if config.tr_set.t_out_gap != \"None\":\n","    #     # res_df['short_out_org_{}'.format(selection_id)] = res_df['short_out_{}'.format(selection_id)].copy()\n","    #     # res_df['long_out_org_{}'.format(selection_id)] = res_df['long_out_{}'.format(selection_id)].copy()\n","    #     res_df['short_out2_{}'.format(selection_id)] = short_epout_0 + short_epout_gap * config.tr_set.t_out_gap\n","    #     res_df['long_out2_{}'.format(selection_id)] = long_epout_0 - long_epout_gap * config.tr_set.t_out_gap\n","\n","    return res_df\n"]},{"cell_type":"markdown","metadata":{"id":"HuCb0phoPN83"},"source":["#### legacy"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"-DNPumVZi0xs"},"outputs":[],"source":["\n","\n","    # ------ wave_point 분리 ------ #\n","    # cci_ = res_df['cci_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","    # b1_cci_ = res_df['cci_{}{}'.format(wave_itv1, wave_period1)].shift(1).to_numpy()        \n","    \n","    # band_width = 100\n","    # upper_band = band_width\n","    # lower_band = -band_width\n","\n","    # update_low_cu_bool = res_df['update_low_cu_bool_{}{}'.format(wave_itv1, wave_period1)]\n","    # update_high_co_bool = res_df['update_high_co_bool_{}{}'.format(wave_itv1, wave_period1)]\n","\n","    # short_open_res1 *= (b1_cci_ > upper_band) & (upper_band > cci_) & ~update_low_cu_bool\n","    # long_open_res1 *= (b1_cci_ < lower_band) & (lower_band < cci_) & ~update_high_co_bool   \n","\n","    \n","# ------------ csd ------------ #\n","    # ------ dc ------ #\n","    # dc_upper_ = res_df['dc_upper_T30'].to_numpy()    \n","    # dc_lower_ = res_df['dc_lower_T30'].to_numpy()    \n","\n","    # # Todo, post_cu ~ co 의 dc_lower == low (=touched) 여부 조사\n","    # short_open_idx1 = get_index_bybool(short_open_res1, len_df_range)\n","    # long_open_idx1 = get_index_bybool(long_open_res1, len_df_range)\n","    # wave_co_post_idx_fill_ = res_df['wave_co_post_idx_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","    # wave_cu_post_idx_fill_ = res_df['wave_cu_post_idx_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()   # co_prime_idx (wave_high 정보를 지정하기 위한 front co_idx 지정)\n","\n","    # # 1. dc_lower == low 여부 조사, np.nan 덕분에 vectorize 불가하다고 봄\n","    # short_valid_idx_bool = ~(pd.isnull(wave_co_post_idx_fill_) | pd.isnull(short_open_idx1)) # get_index_bybool\n","    # dc_upper_touch = dc_upper_ <= high\n","    # dc_upper_touch_span = np.full(len_df, np.nan)\n","    # dc_upper_touch_span[short_valid_idx_bool] = [dc_upper_touch[int(iin):int(iout) + 1].sum() for iin, iout in zip(wave_co_post_idx_fill_, short_open_idx1) if not pd.isnull(iin) if not pd.isnull(iout)]\n","\n","    # long_valid_idx_bool = ~(pd.isnull(wave_cu_post_idx_fill_) | pd.isnull(long_open_idx1)) # get_index_bybool\n","    # dc_lower_touch = dc_lower_ >= low\n","    # dc_lower_touch_span = np.full(len_df, np.nan)\n","    # dc_lower_touch_span[long_valid_idx_bool] = [dc_lower_touch[int(iin):int(iout) + 1].sum() for iin, iout in zip(wave_cu_post_idx_fill_, long_open_idx1) if not pd.isnull(iin) if not pd.isnull(iout)]\n","\n","    # short_open_res1 *= dc_upper_touch_span == 0\n","    # long_open_res1 *= dc_lower_touch_span == 0\n","\n","    # if show_detail:\n","    #   sys_log.warning(\"csd - dc\")\n","    #   sys_log.warning(\"np.sum(short_open_res1 == 1) : {}\".format(np.sum(short_open_res1 == 1)))\n","    #   sys_log.warning(\"np.sum(long_open_res1 == 1) : {}\".format(np.sum(long_open_res1 == 1)))\n","    #   # sys_log.warning(\"np.sum(short_open_res2 == 1) : {}\".format(np.sum(short_open_res2 == 1)))\n","    #   # sys_log.warning(\"np.sum(long_open_res2 == 1) : {}\".format(np.sum(long_open_res2 == 1)))   \n","    \n","    # ================== pattern depiction ================== #  \n","    # bb_upper_ = res_df['bb_upper_{}{}'.format('T', 60)].to_numpy()\n","    # bb_lower_ = res_df['bb_lower_{}{}'.format('T', 60)].to_numpy()\n","    # bb_upper2_ = res_df['bb_upper2_{}{}'.format('T', 60)].to_numpy()\n","    # bb_lower2_ = res_df['bb_lower2_{}{}'.format('T', 60)].to_numpy()\n","    # bb_upper3_ = res_df['bb_upper3_{}{}'.format('T', 60)].to_numpy()\n","    # bb_lower3_ = res_df['bb_lower3_{}{}'.format('T', 60)].to_numpy()\n","    \n","    # ------ 양 / 음봉 (long) ------ #\n","    # short_open_res1 *= close < open\n","    # long_open_res1 *= close > open\n","\n","    # if show_detail:\n","    #   sys_log.warning(\"close > open\")\n","    #   sys_log.warning(\"np.sum(short_open_res1 == 1) : {}\".format(np.sum(short_open_res1 == 1)))\n","    #   sys_log.warning(\"np.sum(long_open_res1 == 1) : {}\".format(np.sum(long_open_res1 == 1)))\n","\n","    \n","    # # ------ even_break, hhhl (long) ------ #        \n","    # # cu's roll_high_[:, -1] = prev_high & cu's roll_low_[:, -1] = current_low\n","    # # co's roll_low_[:, -1] = prev_low & co's roll_high_[:, -1] = current_high\n","    # short_open_res1 *= (roll_low_[:, -2] > roll_low_[:, -1]) # & (roll_high_[:, -2] > roll_high_[:, -1])\n","    # long_open_res1 *= (roll_high_[:, -2] < roll_high_[:, -1]) # & (roll_low_[:, -2] < roll_low_[:, -1])\n","\n","    # if show_detail:\n","    #   sys_log.warning(\"even_break\")\n","    #   sys_log.warning(\"np.sum(short_open_res1 == 1) : {}\".format(np.sum(short_open_res1 == 1)))\n","    #   sys_log.warning(\"np.sum(long_open_res1 == 1) : {}\".format(np.sum(long_open_res1 == 1)))\n","\n","    # # ------ roll_high < bb_upper2 (long) ------ #\n","    # short_open_res1 *= (roll_low_[:, -4] > roll_low_bb_lower2_[:, -4])\n","    # short_open_res1 *= (roll_low_[:, -3] > roll_low_bb_lower2_[:, -3])\n","    # short_open_res1 *= (roll_low_[:, -2] > roll_low_bb_lower2_[:, -2])\n","    # short_open_res1 *= (roll_low_[:, -1] > roll_low_bb_lower2_[:, -1])\n","\n","    # long_open_res1 *= (roll_high_[:, -4] < roll_high_bb_upper2_[:, -4])\n","    # long_open_res1 *= (roll_high_[:, -3] < roll_high_bb_upper2_[:, -3])\n","    # long_open_res1 *= (roll_high_[:, -2] < roll_high_bb_upper2_[:, -2])\n","    # long_open_res1 *= (roll_high_[:, -1] < roll_high_bb_upper2_[:, -1])\n","    \n","    # if show_detail:\n","    #   sys_log.warning(\"roll_high < bb_upper2\")\n","    #   sys_log.warning(\"np.sum(short_open_res1 == 1) : {}\".format(np.sum(short_open_res1 == 1)))\n","    #   sys_log.warning(\"np.sum(long_open_res1 == 1) : {}\".format(np.sum(long_open_res1 == 1)))\n","\n","\n","    # ------ get candle_lastidx ------ #        \n","    # tf_entry = to_itvnum(config.loc_set.point.tf_entry)\n","    # b1_shift = np_timeidx % tf_entry + 1  # dynamic\n","    # b1_candle_lastidx = (len_df_range - b1_shift).astype(float)\n","    # b2_candle_lastidx = (len_df_range - (b1_shift + tf_entry)).astype(float)\n","    # b3_candle_lastidx = (len_df_range - (b1_shift + 2 * tf_entry)).astype(float)\n","    # b1_candle_lastidx[b1_candle_lastidx < 0] = np.nan\n","    # b2_candle_lastidx[b2_candle_lastidx < 0] = np.nan\n","    # b3_candle_lastidx[b3_candle_lastidx < 0] = np.nan\n","\n","    # high_5T = res_df['high_5T'].to_numpy()\n","    # low_5T = res_df['low_5T'].to_numpy()\n","\n","    # b2_high_5T = get_line(b2_candle_lastidx, high_5T)\n","    # b2_low_5T = get_line(b2_candle_lastidx, low_5T)\n","    \n","        # # ------ bb_stream ------ #        \n","        # roll_high_bb_upper_ = get_roll_wave_data(valid_high_prime_idx, roll_high_idx_arr, len_df, bb_upper_, roll_hl_cnt)\n","        # roll_low_bb_upper_ = get_roll_wave_data(valid_low_prime_idx, roll_low_idx_arr, len_df, bb_upper_, roll_hl_cnt)\n","        # roll_high_bb_upper2_ = get_roll_wave_data(valid_high_prime_idx, roll_high_idx_arr, len_df, bb_upper2_, roll_hl_cnt)\n","        # roll_low_bb_upper2_ = get_roll_wave_data(valid_low_prime_idx, roll_low_idx_arr, len_df, bb_upper2_, roll_hl_cnt)\n","\n","        # roll_high_bb_lower_ = get_roll_wave_data(valid_high_prime_idx, roll_high_idx_arr, len_df, bb_lower_, roll_hl_cnt)\n","        # roll_low_bb_lower_ = get_roll_wave_data(valid_low_prime_idx, roll_low_idx_arr, len_df, bb_lower_, roll_hl_cnt)\n","        # roll_high_bb_lower2_ = get_roll_wave_data(valid_high_prime_idx, roll_high_idx_arr, len_df, bb_lower2_, roll_hl_cnt)\n","        # roll_low_bb_lower2_ = get_roll_wave_data(valid_low_prime_idx, roll_low_idx_arr, len_df, bb_lower2_, roll_hl_cnt)\n","\n","        # wave_base_ = res_df['dc_base_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","\n","        # roll_high_wave_base_ = get_roll_wave_data(valid_high_prime_idx, roll_high_idx_arr, len_df, wave_base_, roll_hl_cnt)\n","        # roll_low_wave_base_ = get_roll_wave_data(valid_low_prime_idx, roll_low_idx_arr, len_df, wave_base_, roll_hl_cnt)\n","\n","        # short_open_res *= (roll_high_bb_lower_[:, -2] > roll_high_wave_base_[:, -2]) & (roll_high_wave_base_[:, -2] > roll_high_bb_lower2_[:, -2])\n","        # short_open_res *= (roll_low_bb_lower_[:, -1] > roll_low_wave_base_[:, -1]) & (roll_low_wave_base_[:, -1] > roll_low_bb_lower2_[:, -1])\n","        # short_open_res *= (roll_high_bb_lower_[:, -1] > roll_high_wave_base_[:, -1]) & (roll_high_wave_base_[:, -1] > roll_high_bb_lower2_[:, -1])\n","\n","        # long_open_res *= (roll_low_bb_upper_[:, -2] < roll_low_wave_base_[:, -2]) & (roll_low_wave_base_[:, -2] < roll_low_bb_upper2_[:, -2])\n","        # long_open_res *= (roll_high_bb_upper_[:, -1] < roll_high_wave_base_[:, -1]) & (roll_high_wave_base_[:, -1] < roll_high_bb_upper2_[:, -1])\n","        # long_open_res *= (roll_low_bb_upper_[:, -1] < roll_low_wave_base_[:, -1]) & (roll_low_wave_base_[:, -1] < roll_low_bb_upper2_[:, -1])\n","\n","        # if show_detail:\n","        #   sys_log.warning(\"bb_stream\")\n","        #   sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","        #   sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))  \n","\n","        # ------ candle_pattern  ------ #   \n","        # b3_bb_upper_ = get_line(b3_candle_lastidx, bb_upper_)\n","        # b3_bb_lower_ = get_line(b3_candle_lastidx, bb_lower_)\n","        # b3_bb_upper2_ = get_line(b3_candle_lastidx, bb_upper2_)\n","        # b3_bb_lower2_ = get_line(b3_candle_lastidx, bb_lower2_)\n","        # b3_close = get_line(b3_candle_lastidx, close)\n","\n","        # b2_bb_upper2_ = get_line(b2_candle_lastidx, bb_upper2_)\n","        # b2_bb_lower2_ = get_line(b2_candle_lastidx, bb_lower2_)\n","        # b2_bb_upper3_ = get_line(b2_candle_lastidx, bb_upper3_)\n","        # b2_bb_lower3_ = get_line(b2_candle_lastidx, bb_lower3_)\n","        # b2_close = get_line(b2_candle_lastidx, close)\n","\n","        # b1_bb_upper_ = get_line(b1_candle_lastidx, bb_upper_)\n","        # b1_bb_lower_ = get_line(b1_candle_lastidx, bb_lower_)\n","        # b1_bb_upper2_ = get_line(b1_candle_lastidx, bb_upper2_)\n","        # b1_bb_lower2_ = get_line(b1_candle_lastidx, bb_lower2_)\n","        # b1_close = get_line(b1_candle_lastidx, close)\n","        # b1_high_5T = get_line(b1_candle_lastidx, high_5T)\n","        # b1_low_5T = get_line(b1_candle_lastidx, low_5T)\n","\n","        # short_open_res *= (b3_bb_lower_ > b3_close) & (b3_close > b3_bb_lower2_)\n","        # short_open_res *= (b2_bb_lower2_ > b2_close) & (b2_close > b2_bb_lower3_)\n","        # short_open_res *= (b1_bb_lower_ > b1_close) & (b1_close > b1_bb_lower2_)\n","\n","        # long_open_res *= (b3_bb_upper_ < b3_close) & (b3_close < b3_bb_upper2_)\n","        # long_open_res *= (b2_bb_upper2_ < b2_close) & (b2_close < b2_bb_upper3_)\n","        # long_open_res *= (b1_bb_upper_ < b1_close) & (b1_close < b1_bb_upper2_)\n","\n","        # # short_open_res *= (b2_low_5T < b1_low_5T) & (b2_close < b1_close)\n","        # # long_open_res *= (b2_high_5T > b1_high_5T) & (b2_close > b1_close)\n","\n","        # if show_detail:\n","        #   sys_log.warning(\"candle_pattern\")\n","        #   sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","        #   sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1))) \n","\n","\n","        # ------ low_confirm ------ #\n","        # short_open_res *= b1_high_5T > wave_high_fill_\n","        # long_open_res *= b1_low_5T < wave_low_fill_\n","\n","        # if show_detail:\n","        #   sys_log.warning(\"low_confirm\")\n","        #   sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","        #   sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1))) \n","        \n","        # ------ candle_ratio ------ #\n","        # b2_candle_range_5T = b2_high_5T - b2_low_5T\n","        # b1_candle_range_5T = b1_high_5T - b1_low_5T\n","        \n","        # short_open_res *= b1_candle_range_5T / b2_candle_range_5T < config.loc_set.point.crr\n","        # long_open_res *= b1_candle_range_5T / b2_candle_range_5T < config.loc_set.point.crr\n","\n","        # if show_detail:\n","        #   sys_log.warning(\"candle_ratio\")\n","        #   sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","        #   sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1))) \n","\n","        # ------ wick_ratio ------ #\n","        # upper_wick_ratio_ = res_df['upper_wick_ratio_{}'.format(config.loc_set.point.wick_itv)].to_numpy()\n","        # lower_wick_ratio_ = res_df['lower_wick_ratio_{}'.format(config.loc_set.point.wick_itv)].to_numpy()\n","        # b2_upper_wick_ratio_ = get_line(b2_candle_lastidx, upper_wick_ratio_)\n","        # b2_lower_wick_ratio_ = get_line(b2_candle_lastidx, lower_wick_ratio_)\n","\n","        # short_open_res *= b2_upper_wick_ratio_ < config.loc_set.point.short_wick_ratio\n","        # long_open_res *= b2_upper_wick_ratio_ < config.loc_set.point.long_wick_ratio\n","\n","        # if show_detail:\n","        #   sys_log.warning(\"wick_ratio\")\n","        #   sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","        #   sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1))) \n","\n","        # ------ large wave1_range ------ #          \n","        # roll_bb_upper_ = get_roll_wave_data(valid_high_prime_idx, roll_high_idx_arr, len_df, bb_upper_, roll_hl_cnt)\n","        # roll_bb_lower_ = get_roll_wave_data(valid_low_prime_idx, roll_low_idx_arr, len_df, bb_lower_, roll_hl_cnt)\n","        # roll_bb_upper3_ = get_roll_wave_data(valid_high_prime_idx, roll_high_idx_arr, len_df, bb_upper3_, roll_hl_cnt)\n","        # roll_bb_lower3_ = get_roll_wave_data(valid_low_prime_idx, roll_low_idx_arr, len_df, bb_lower3_, roll_hl_cnt)\n","\n","        # short_open_res *= (roll_bb_upper_[:, -2] < roll_high_[:, -2]) & (roll_low_[:, -1] < roll_bb_lower_[:, -1]) & (roll_low_[:, -1] > roll_bb_lower3_[:, -1])\n","        # long_open_res *= (roll_bb_upper_[:, -1] < roll_high_[:, -1]) & (roll_low_[:, -2] < roll_bb_lower_[:, -2]) & (roll_high_[:, -1] < roll_bb_upper3_[:, -1])\n","\n","        # if show_detail:\n","        #   sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","        #   sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))\n","        \n","        # ------ low in bb_level3 ------ #  Todo, idx sync 맞춰야할 것\n","        # short_open_res *= (bb_upper2_ < wave_high_fill_) & (wave_high_fill_ < bb_upper3_)\n","        # long_open_res *= (bb_lower3_ < wave_low_fill_) & (wave_low_fill_ < bb_lower2_)\n","\n","        # if show_detail:\n","        #   sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","        #   sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))\n","\n","        # ------ first_high ------ #        \n","        # wave_high_prime_idx_fill_= res_df['wave_high_prime_idx_fill_{}{}'.format(itv, period1)].to_numpy()\n","        # wave_low_prime_idx_fill_= res_df['wave_low_prime_idx_fill_{}{}'.format(itv, period1)].to_numpy()\n","        # cu_prime_wave_base = get_line(cu_prime_idx_fill_, wave_base_)\n","        # co_prime_wave_base = get_line(co_prime_idx_fill_, wave_base_)\n","\n","        # # short_open_res *= (co_roll_high_[:, -1] > dc_base_) & (dc_base_ > co_roll_low_[:, -1])\n","        # # long_open_res *= (cu_roll_low_[:, -1] < dc_base_) & (dc_base_ < cu_roll_high_[:, -1])\n","\n","        # short_open_res *= (cu_prime_wave_base > dc_base_) & (dc_base_ > co_prime_wave_base)\n","        # long_open_res *= (co_prime_wave_base < dc_base_) & (dc_base_ < cu_prime_wave_base)\n","\n","        # if show_detail:\n","        #   sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","        #   sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))\n","\n","        # cu_prime_dc_base = get_line(cu_prime_idx_fill_, dc_base_)        \n","        # co_prime_dc_base = get_line(co_prime_idx_fill_, dc_base_)\n","        \n","        # shift_size = to_itvnum(p1_itv1)\n","        # b1_dc_base_ = res_df['dc_base_{}{}'.format(p1_itv1, p1_period1)].shift(shift_size).to_numpy()\n","\n","        # short_open_res *= (b1_dc_base_ < dc_base_)\n","        # long_open_res *= (b1_dc_base_ > dc_base_)\n","\n","        # if show_detail:\n","        #   sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","        #   sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))\n","\n","        # ------ b1_base_15T < wave_high ------ #\n","        # short_open_res *= (b1_dc_base_ > co_roll_low_[:, -1])\n","        # long_open_res *= (b1_dc_base_ < cu_roll_high_[:, -1])\n","\n","        # if show_detail:\n","        #   sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","        #   sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))   \n","        \n","        \n","    # b1_itv_num = to_itvnum(config.tr_set.p2_itv0)\n","    # b2_itv_num = to_itvnum(config.tr_set.p2_itv0) * 2  # multi 2 for imb_v2\n","\n","    # res_df[short_tp_1_] = res_df['dc_lower_{}{}'.format(itv, period1)]\n","    # res_df[short_tp_0_] = res_df['dc_upper_{}{}'.format(itv, period2)]\n","    # # res_df[short_tp_0_] = res_df['dc_upper_15T4']\n","    # res_df[long_tp_1_] = res_df['dc_upper_{}{}'.format(itv, period1)]\n","    # res_df[long_tp_0_] = res_df['dc_lower_{}{}'.format(itv, period2)]\n","    # # res_df[long_tp_0_] = res_df['dc_lower_15T4']\n","    \n","        # ------ base_cc ------ #\n","        dc_base_ = res_df['dc_base_{}{}'.format(p1_itv1, p1_period1)].to_numpy()\n","\n","        # close_ = res_df['close_{}'.format(config.loc_set.point.tf_entry)].to_numpy()\n","        # b1_dc_base_ = res_df['dc_base_{}{}'.format(p1_itv1, p1_period1)].shift(tf_entry).to_numpy()\n","        # b1_close_ = res_df['close_{}'.format(config.loc_set.point.tf_entry)].shift(tf_entry).to_numpy()\n","\n","        # short_open_res *= ((b1_close_ > dc_base_) & (dc_base_ > close_)) | ((b1_close_ > b1_dc_base_) & (dc_base_ > close_))\n","        # long_open_res *= ((b1_close_ < dc_base_) & (dc_base_ < close_)) | ((b1_close_ < b1_dc_base_) & (dc_base_ < close_))\n","\n","        # if show_detail:\n","        #   sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","        #   sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))\n","        \n","        # ------ tf_entry ------ #\n","        # tf_entry = to_itvnum(config.loc_set.point.tf_entry)\n","        \n","        # short_open_res *= np_timeidx % tf_entry == (tf_entry - 1)\n","        # long_open_res *= np_timeidx % tf_entry == (tf_entry - 1) \n","\n","        # if show_detail:\n","        #   sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","        #   sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))\n","\n","    \n","        # ------ cppr 로 양음봉 check ------ # \n","        # tf_entry = to_itvnum(config.loc_set.point.tf_entry)\n","\n","        # res_df['b1_cppr_{}'.format(config.loc_set.point.tf_entry)] = res_df['cppr_{}'.format(config.loc_set.point.tf_entry)].shift(tf_entry)\n","        # b1_cppr_ = res_df['b1_cppr_{}'.format(config.loc_set.point.tf_entry)].to_numpy()  # check b1's cppr in ep_loc\n","        # cppr_ = res_df['cppr_{}'.format(config.loc_set.point.tf_entry)].to_numpy()\n","        # short_open_res *= (b1_cppr_ > 0) & (cppr_ < 0)\n","        # long_open_res *= (b1_cppr_ < 0) & (cppr_ > 0)\n","\n","        # res_df['b1_updbr'] = res_df['dc_upper_15T4_br'].shift(tf_entry).to_numpy()\n","        # res_df['b1_lwdbr'] = res_df['dc_lower_15T4_br'].shift(tf_entry).to_numpy()\n","        \n","        # res_df['b1_updbr_cppr'] = b1_cppr_ * res_df['b1_updbr'].to_numpy()\n","        # res_df['b1_lwdbr_cppr'] = b1_cppr_ * res_df['b1_lwdbr'].to_numpy()\n","\n","        # if show_detail:\n","        #   sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","        #   sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))\n","\n","        # ------ dc_cross ------ #\n","        # b1_dc_upper_15T4 = res_df['dc_upper_15T4'].shift(tf_entry).to_numpy()\n","        # b1_dc_lower_15T4 = res_df['dc_lower_15T4'].shift(tf_entry).to_numpy()\n","        # b1_high_ = res_df['high_{}'.format(config.loc_set.point.tf_entry)].shift(tf_entry).to_numpy()\n","        # b1_low_ = res_df['low_{}'.format(config.loc_set.point.tf_entry)].shift(tf_entry).to_numpy()\n","        # short_open_res *= b1_high_ > b1_dc_upper_15T4\n","        # long_open_res *= b1_low_ < b1_dc_lower_15T4\n","        \n","        # ------ dc_cc ------ #\n","        # b1_close_ = res_df['close_{}'.format(config.loc_set.point.tf_entry)].shift(tf_entry).to_numpy()\n","        # short_open_res *= b1_close_ > b1_dc_upper_15T4\n","        # long_open_res *= b1_close_ < b1_dc_lower_15T4\n","\n","        # if show_detail:\n","        #   sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","        #   sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))\n","\n","        # ------ empty_space ------ #       \n","        # dc_upper_15T4 = res_df['dc_upper_15T4'].to_numpy()\n","        # dc_lower_15T4 = res_df['dc_lower_15T4'].to_numpy() \n","        # high_ = res_df['high_{}'.format(config.loc_set.point.tf_entry)].to_numpy()\n","        # low_ = res_df['low_{}'.format(config.loc_set.point.tf_entry)].to_numpy()\n","        # short_open_res *= high_ < dc_upper_15T4\n","        # long_open_res *= low_ > dc_lower_15T4\n","        \n","        # ------ candle_pattern ------ #  \n","        # pattern_column = \"{}_{}\".format(config.loc_set.point.candle_pattern, config.loc_set.point.tf_entry)\n","        # short_open_res *= res_df[pattern_column].to_numpy() < 0\n","        # long_open_res *= res_df[pattern_column].to_numpy() > 0\n","\n","        # if show_detail:\n","        #   sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","        #   sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))\n","\n","\n","        # ------ lower_touch > upper_touch (long) ------ #\n","        # short_open_res *= res_df['short_upper_touch_idx_{}{}{}'.format(p1_itv1, p1_period1, p1_period2)].to_numpy() > res_df['short_lower_touch_idx_{}{}{}'.format(p1_itv1, p1_period1, p1_period2)].to_numpy()\n","        # long_open_res *= res_df['long_lower_touch_idx_{}{}{}'.format(p1_itv1, p1_period1, p1_period2)].to_numpy() > res_df['long_upper_touch_idx_{}{}{}'.format(p1_itv1, p1_period1, p1_period2)].to_numpy()\n","\n","        # ------ base_3T cross ------ #\n","        # dc_base_3T = res_df['dc_base_3T'].to_numpy()\n","        # b1_close = res_df['close'].shift(1).to_numpy()\n","        # short_open_res *= (b1_close > dc_base_3T) & (dc_base_3T > close)\n","        # long_open_res *= (b1_close < dc_base_3T) & (dc_base_3T < close)\n","\n","        # ------ wave_low < base_5T (long) ------ #\n","        # dc_base_5T = res_df['dc_base_5T'].to_numpy()        \n","        # short_open_res *= res_df['short_upper_touch_line_{}{}{}'.format(p1_itv1, p1_period1, p1_period2)].to_numpy() > dc_base_5T\n","        # long_open_res *= res_df['long_lower_touch_line_{}{}{}'.format(p1_itv1, p1_period1, p1_period2)].to_numpy() < dc_base_5T      \n","\n","        # ------ ppr ------ #\n","        # pumping_ratio(res_df, config, p1_itv1, p1_period1, p1_period2)  "]},{"cell_type":"markdown","metadata":{"id":"aTV4h3LjTZBp"},"source":["#### dump"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"dc49JPmoTaPQ"},"outputs":[],"source":["\n","    \n","    csd_period = 40\n","    res_df = dc_line_v4(res_df, res_df, dc_period=csd_period)\n","    \n","    dc_upper_ = res_df['dc_upper_T{}'.format(csd_period)].to_numpy()    \n","    dc_lower_ = res_df['dc_lower_T{}'.format(csd_period)].to_numpy()  \n","\n","    short_open_res2 *= dc_upper_touch_span == 0\n","    long_open_res2 *= dc_lower_touch_span == 0\n","\n","    # ------ csdbox ------ # --> 결국 dc's upper & lower\n","    if show_detail:\n","      sys_log.warning(\"csdbox\")\n","      # sys_log.warning(\"np.sum(short_open_res1 == 1) : {}\".format(np.sum(short_open_res1 == 1)))\n","      # sys_log.warning(\"np.sum(long_open_res1 == 1) : {}\".format(np.sum(long_open_res1 == 1)))\n","      sys_log.warning(\"np.sum(short_open_res2 == 1) : {}\".format(np.sum(short_open_res2 == 1)))\n","      sys_log.warning(\"np.sum(long_open_res2 == 1) : {}\".format(np.sum(long_open_res2 == 1)))\n","      \n","    # olds,\n","    # np.nan - np.nan = np.nan -> vectorize 가능할 것 => xx\n","    # 1. wave_high_prime_idx_ ~ long_open_idx1 의 valid(not_non) 한 idx 를 max_dc_lower 와 min_low 의 비교값으로 채워넣음\n","    # valid_idx = ~(pd.isnull(wave_cu_post_idx_fill_) | pd.isnull(long_open_idx1))\n","    # max_dc_lower_ = [dc_lower_[int(iin):int(iout)].max() for iin, iout in zip(wave_cu_post_idx_fill_, long_open_idx1) if not pd.isnull(iin) if not pd.isnull(iout)]\n","    # min_low = [low[int(iin):int(iout)].min() for iin, iout in zip(wave_high_prime_idx_, long_open_idx1) if not pd.isnull(iin) if not pd.isnull(iout)]\n","    \n","    short_tp_1_, long_tp_1_ = 'short_tp_1_{}'.format(selection_id), 'long_tp_1_{}'.format(selection_id)\n","    short_tp_0_, long_tp_0_ = 'short_tp_0_{}'.format(selection_id), 'long_tp_0_{}'.format(selection_id)\n","    short_tp_gap_, long_tp_gap_ = 'short_tp_gap_{}'.format(selection_id), 'long_tp_gap_{}'.format(selection_id)\n","\n","    short_ep_1_, long_ep_1_ = 'short_ep_1_{}'.format(selection_id), 'long_ep_1_{}'.format(selection_id)\n","    short_ep_0_, long_ep_0_ = 'short_ep_0_{}'.format(selection_id), 'long_ep_0_{}'.format(selection_id)\n","    short_ep_gap_, long_ep_gap_ = 'short_ep_gap_{}'.format(selection_id), 'long_ep_gap_{}'.format(selection_id)\n","\n","    short_epout_1_, long_epout_1_ = 'short_epout_1_{}'.format(selection_id), 'long_epout_1_{}'.format(selection_id)\n","    short_epout_0_, long_epout_0_ = 'short_epout_0_{}'.format(selection_id), 'long_epout_0_{}'.format(selection_id)\n","    short_epout_gap_, long_epout_gap_ = 'short_epout_gap_{}'.format(selection_id), 'long_epout_gap_{}'.format(selection_id)\n","    \n","    # ================== convert unit -> numpy ================== #   \n","    # tp_cols = [short_tp_1_, short_tp_0_, short_tp_gap_, long_tp_1_, long_tp_0_, long_tp_gap_]\n","    # epout_cols = [short_epout_1_, short_epout_0_, short_epout_gap_, long_epout_1_, long_epout_0_, long_epout_gap_]\n","\n","    # short_tp_1, short_tp_0, short_tp_gap, long_tp_1, long_tp_0, long_tp_gap = [res_df[col_].to_numpy() for col_ in tp_cols]\n","    # short_epout_1, short_epout_0, short_epout_gap, long_epout_1, long_epout_0, long_epout_gap = [res_df[col_].to_numpy() for col_ in epout_cols]\n","\n","    if p2_itv1 != \"None\":  # vectorized point2\n","        short_point1_on2_idx = pd.Series(\n","            np.where(res_df['short_wave_point_{}{}{}'.format(p1_itv1, p1_period1, p1_period2)], len_df_range, np.nan)).rolling(point1_to2_period,\n","                                                                                                                                    min_periods=1).max().to_numpy()  # period 내의 max_point1_idx\n","        long_point1_on2_idx = pd.Series(\n","            np.where(res_df['long_wave_point_{}{}{}'.format(p1_itv1, p1_period1, p1_period2)], len_df_range, np.nan)).rolling(point1_to2_period,\n","                                                                                                                                   min_periods=1).max().to_numpy()\n","\n","        short_point2_idx = pd.Series(\n","            np.where(res_df['short_wave_point_{}{}{}'.format(p2_itv1, p2_period1, p2_period2)], len_df_range, np.nan)).to_numpy()\n","        long_point2_idx = pd.Series(\n","            np.where(res_df['long_wave_point_{}{}{}'.format(p2_itv1, p2_period1, p2_period2)], len_df_range, np.nan)).to_numpy()\n","\n","        res_df['short_point_idxgap_{}'.format(selection_id)] = short_point2_idx - short_point1_on2_idx\n","        res_df['long_point_idxgap_{}'.format(selection_id)] = long_point2_idx - long_point1_on2_idx\n","\n","        # ------ p1 & p2 ------ #\n","        short_open_res *= ~np.isnan(res_df['short_point_idxgap_{}'.format(selection_id)].to_numpy())\n","        long_open_res *= ~np.isnan(res_df['long_point_idxgap_{}'.format(selection_id)].to_numpy())\n","\n","        if show_detail:\n","          sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","          sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))\n","\n","        # ------ p2 amax > p1_idx (long) ------ #\n","        short_open_res *= res_df['short_upper_touch_idx_{}{}{}'.format(p2_itv1, p2_period1, p2_period2)].to_numpy() > short_point1_on2_idx\n","        long_open_res *= res_df['long_lower_touch_idx_{}{}{}'.format(p2_itv1, p2_period1, p2_period2)].to_numpy() > long_point1_on2_idx\n","\n","        if show_detail:\n","          sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","          sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))\n","\n","        # ------ higher low (long) ------ #\n","        # short_a_line1_on2_ = get_line(short_point1_on2_idx, res_df['short_a_line_{}{}{}'.format(p1_itv1, p1_period1, p1_period2)].to_numpy())\n","        # long_a_line1_on2_ = get_line(long_point1_on2_idx, res_df['long_a_line_{}{}{}'.format(p1_itv1, p1_period1, p1_period2)].to_numpy())\n","\n","        # short_a_line2_ = res_df['short_a_line_{}{}{}'.format(p2_itv1, p2_period1, p2_period2)].to_numpy()\n","        # long_a_line2_ = res_df['long_a_line_{}{}{}'.format(p2_itv1, p2_period1, p2_period2)].to_numpy()\n","\n","        # short_open_res *= short_a_line1_on2_ >= short_a_line2_\n","        # long_open_res *= long_a_line1_on2_ <= long_a_line2_\n","\n","        # print(np.sum(long_open_res == 1))\n","\n","        # ------ higher high (long) ------ #\n","        # short_open_res *= co_roll_low_[:, -2] > co_roll_low_[:, -1]\n","        # long_open_res *= cu_roll_high_[:, -2] < cu_roll_high_[:, -1]\n","\n","        # short_open_res *= co_roll_low_[:, -3] > co_roll_low_[:, -2]\n","        # long_open_res *= cu_roll_high_[:, -3] < cu_roll_high_[:, -2]\n","\n","        # if show_detail:\n","        #   sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","        #   sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))\n","\n","        # ------ higher low (long) ------ # \n","        # short_open_res *= co_roll_high_[:, -2] > co_roll_high_[:, -1]\n","        # long_open_res *= cu_roll_low_[:, -2] < cu_roll_low_[:, -1]\n","\n","        # if show_detail:\n","        #   sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","        #   sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))  \n","\n","        # ------ tf2_base < wave_low ------ #\n","        # short_open_res *= (dc_base_ > co_roll_high_[:, -1])\n","        # long_open_res *= (dc_base_ < cu_roll_low_[:, -1])\n","\n","        # if show_detail:\n","        #   sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","        #   sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))  \n","\n","        # short_open_res *= (cu_prime_wave_base > cu_prime_dc_base) & (dc_base_ > co_prime_wave_base)\n","        # long_open_res *= (co_prime_wave_base < co_prime_dc_base) & (dc_base_ < cu_prime_wave_base)\n","\n","        short_open_res *= (co_prime_dc_base < co_roll_low_[:, -2])\n","        long_open_res *= (cu_prime_dc_base > cu_roll_high_[:, -2])  #  b1_cu_prime_idx’s tf2_base > b1_high -> b1 이 아님 (error)\n","\n","\n","        res_df[short_epout_1_] = res_df['short_wave_low_{}{}{}'.format(itv, period1, period2)]\n","        res_df[short_epout_0_] = res_df['short_new_wave_high_{}{}{}'.format(itv, period1, period2)]\n","        res_df[long_epout_1_] = res_df['long_wave_high_{}{}{}'.format(itv, period1, period2)]\n","        res_df[long_epout_0_] = res_df['long_new_wave_low_{}{}{}'.format(itv, period1, period2)]\n","        \n","        # ------ get candle_lastidx ------ #        \n","        tf_entry = to_itvnum(config.loc_set.point.tf_entry)\n","        b1_candle_shift = np_timeidx % tf_entry + 1\n","        b2_candle_shift = b1_candle_shift + tf_entry\n","        b3_candle_shift = b1_candle_shift + 2 * tf_entry\n","\n","        print(b3_candle_shift)\n","\n","        # bb_upper_ = res_df['bb_upper_{}{}'.format('T', 60)].to_numpy()\n","        # bb_lower_ = res_df['bb_lower_{}{}'.format('T', 60)].to_numpy()\n","        # bb_upper2_ = res_df['bb_upper2_{}{}'.format('T', 60)].to_numpy()\n","        # bb_lower2_ = res_df['bb_lower2_{}{}'.format('T', 60)].to_numpy()\n","        # bb_upper3_ = res_df['bb_upper3_{}{}'.format('T', 60)].to_numpy()\n","        # bb_lower3_ = res_df['bb_lower3_{}{}'.format('T', 60)].to_numpy()\n","\n","        # ------ compare by back_idx  ------ #   \n","        b3_bb_upper_ = res_df['bb_upper_{}{}'.format('T', 60)].shift(b3_candle_shift).to_numpy()\n","        b3_bb_lower_ = res_df['bb_lower_{}{}'.format('T', 60)].shift(b3_candle_shift).to_numpy()\n","        b3_bb_upper2_ = res_df['bb_upper2_{}{}'.format('T', 60)].shift(b3_candle_shift).to_numpy()\n","        b3_bb_lower2_ = res_df['bb_lower2_{}{}'.format('T', 60)].shift(b3_candle_shift).to_numpy()\n","        b3_close = res_df['close'].shift(b3_candle_shift).to_numpy()\n","\n","        b2_bb_upper2_ = res_df['bb_upper2_{}{}'.format('T', 60)].shift(b2_candle_shift).to_numpy()\n","        b2_bb_lower2_ = res_df['bb_lower2_{}{}'.format('T', 60)].shift(b2_candle_shift).to_numpy()\n","        b2_bb_upper3_ = res_df['bb_upper3_{}{}'.format('T', 60)].shift(b2_candle_shift).to_numpy()\n","        b2_bb_lower3_ = res_df['bb_lower3_{}{}'.format('T', 60)].shift(b2_candle_shift).to_numpy()\n","        b2_close = res_df['close'].shift(b2_candle_shift).to_numpy()\n","\n","        b1_bb_upper_ = res_df['bb_upper_{}{}'.format('T', 60)].shift(b1_candle_shift).to_numpy()\n","        b1_bb_lower_ = res_df['bb_lower_{}{}'.format('T', 60)].shift(b1_candle_shift).to_numpy()\n","        b1_bb_upper2_ = res_df['bb_upper2_{}{}'.format('T', 60)].shift(b1_candle_shift).to_numpy()\n","        b1_bb_lower2_ = res_df['bb_lower2_{}{}'.format('T', 60)].shift(b1_candle_shift).to_numpy()\n","        b1_close = res_df['close'].shift(b1_candle_shift).to_numpy()\n"]},{"cell_type":"markdown","metadata":{"id":"HKdUKKl-483N"},"source":["### utils_public"]},{"cell_type":"code","execution_count":7,"metadata":{"id":"nzOYWA2kqZ0d","executionInfo":{"status":"ok","timestamp":1658884054367,"user_tz":-540,"elapsed":4371,"user":{"displayName":"7th June","userId":"08178289703395036410"}}},"outputs":[],"source":["# from funcs.funcs_indicator import *\n","# from funcs.funcs_trader import *\n","# import logging\n","# from ast import literal_eval\n","\n","pd.set_option('mode.chained_assignment',  None)\n","sys_log = logging.getLogger()\n","\n","\n","class OrderSide:\n","    BUY = \"BUY\"\n","    SELL = \"SELL\"\n","    INVALID = None\n","\n","\n","def lvrg_set(res_df, config, open_side, ep_, out_, fee, limit_leverage=50):\n","    selection_id = config.selection_id\n","    if not pd.isnull(out_) and not config.lvrg_set.static_lvrg:\n","        if selection_id in ['v3']:\n","            if open_side == OrderSide.SELL:\n","                loss = out_ / ep_\n","            else:\n","                loss = ep_ / out_\n","        else:  # 이 phase 가 정석, 윗 phase 는 결과가 수익 극대화라 사용함\n","            if open_side == OrderSide.SELL:\n","                loss = ep_ / out_\n","            else:\n","                loss = out_ / ep_\n","\n","        config.lvrg_set.leverage = config.lvrg_set.target_pct / abs(loss - 1 - (fee + config.trader_set.market_fee))\n","\n","    # ------------ leverage rejection ------------ #\n","    # 감당하기 힘든 fluc. 의 경우 진입하지 않음 - dynamic_lvrg 사용 경우\n","    if config.lvrg_set.leverage < 1 and config.lvrg_set.lvrg_rejection:\n","        # if config.lvrg_set.leverage >= 1 and config.lvrg_set.lvrg_rejection:\n","        return None\n","\n","    if not config.lvrg_set.allow_float:\n","        config.lvrg_set.leverage = int(config.lvrg_set.leverage)\n","\n","    config.lvrg_set.leverage = min(limit_leverage, max(config.lvrg_set.leverage, 1))\n","\n","    return config.lvrg_set.leverage\n","\n","\n","def sync_check(df_, config, order_side=\"OPEN\", row_slice=True):\n","    try:\n","        make_itv_list = [m_itv.replace('m', 'T') for m_itv in literal_eval(config.trader_set.itv_list)]\n","        row_list = literal_eval(config.trader_set.row_list)\n","        rec_row_list = literal_eval(config.trader_set.rec_row_list)\n","        offset_list = literal_eval(config.trader_set.offset_list)\n","\n","        assert len(make_itv_list) == len(offset_list), \"length of itv & offset_list should be equal\"\n","        htf_df_list = [to_htf(df_, itv_=itv_, offset=offset_) for itv_idx, (itv_, offset_)\n","                       in enumerate(zip(make_itv_list, offset_list)) if itv_idx != 0]  #\n","        htf_df_list.insert(0, df_)\n","\n","        # for htf_df_ in htf_df_list:\n","        #     print(htf_df_.tail())\n","\n","        #       Todo        #\n","        #        1. row_list calc.\n","        #           a. indi. 를 만들기 위한 최소 period 가 존재하고, 그 indi. 를 사용한 lb_period 가 존재함\n","        #           b. => default_period + lb_period\n","        #               i. from sync_check, public_indi, ep_point2, ep_dur 의 tf 별 max lb_period check\n","        #                   1. default_period + max lb_period check\n","        #                       a. 현재까지 lb_period_list\n","        #                           h_prev_idx (open / close) 60\n","        #                           dc_period 135\n","        #                           zone_dc_period 135\n","\n","        # --------- slicing (in trader phase only) --------- #\n","        #               --> latency 영향도가 높은 곳은 이곳\n","        if row_slice:  # recursive 가 아닌 indi. 의 latency 를 고려한 slicing\n","            df, df_3T, df_5T, df_15T, df_30T, df_H, df_4H = [df_s.iloc[-row_list[row_idx]:].copy() for row_idx, df_s in enumerate(htf_df_list)]\n","            rec_df, rec_df_3T, rec_df_5T, rec_df_15T, rec_df_30T, rec_df_H, rec_df_4H = [df_s.iloc[-rec_row_list[row_idx]:].copy() for row_idx, df_s\n","                                                                                         in\n","                                                                                         enumerate(htf_df_list)]\n","        else:\n","            df, df_3T, df_5T, df_15T, df_30T, df_H, df_4H = htf_df_list\n","            rec_df, rec_df_3T, rec_df_5T, rec_df_15T, rec_df_30T, rec_df_H, rec_df_4H = htf_df_list\n","\n","        # --------- add indi. --------- #\n","\n","        #        1. 필요한 indi. 는 enlist_epouttp & mr_check 보면서 삽입\n","        #        2. min use_rows 계산을 위해서, tf 별로 gathering 함        #\n","        # start_0 = time.time()\n","\n","        # ------ T ------ #\n","        # df = dc_line(df, None, 'T', dc_period=20)\n","        # df = bb_line(df, None, 'T')\n","        #\n","        # ------ 3T ------ #\n","        # df = dc_line(df, df_3T, '3T')\n","\n","        # ------ 5T ------ #\n","        # h_candle_v3(df, '5T')\n","        df = dc_line(df, df_5T, '5T')\n","        df = bb_line(df, df_5T, '5T')\n","        #\n","        # ------ 15T ------ #\n","        # h_candle_v3(df, '15T')\n","        df = dc_line(df, df_15T, '15T')\n","        df = bb_line(df, df_15T, '15T')\n","        #\n","        # ------ 30T ------ #\n","        # df = bb_line(df, df_30T, '30T')\n","        #\n","        # ------ H ------ #\n","        # h_candle_v3(df, 'H')\n","        # df = dc_line(df, df_H, 'H')\n","\n","        # ------ 4H ------ #\n","        # df = bb_line(df, df_4H, '4H')\n","\n","        # rec_df['rsi_1m'] = rsi(rec_df, 14)  # Todo - recursive, 250 period\n","        # df = df.join(to_lower_tf_v2(df, rec_df.iloc[:, [-1]], [-1], backing_i=0), how='inner')  # <-- join same_tf manual\n","        #\n","        # if order_side in [\"OPEN\"]:\n","        #     rec_df_5T['ema_5T'] = ema(rec_df_5T['close'], 195)  # Todo - recursive, 1100 period (5T)\n","        #     df = df.join(to_lower_tf_v2(df, rec_df_5T, [-1]), how='inner')\n","\n","    except Exception as e:\n","        sys_log.error(\"error in sync_check :\", e)\n","    else:\n","        return df\n","\n","\n","def public_indi(res_df, config, np_timeidx, order_side=\"OPEN\"):\n","\n","    selection_id = config.selection_id\n","\n","    wave_itv1 = config.tr_set.wave_itv1\n","    wave_itv2 = config.tr_set.wave_itv2\n","    wave_period1 = config.tr_set.wave_period1\n","    wave_period2 = config.tr_set.wave_period2\n","    roll_hl_cnt = 3\n","  \n","    # assert to_itvnum(wave_itv1) > 1  # wave_itv2 == 'T' and \n","    # ====== public ====== #\n","    # res_df = wave_range_dcbase_v11_3(res_df, config, over_period=2) \n","    \n","    # ------------ wave_period1 ------------ #\n","    if to_itvnum(wave_itv1) > 1: \n","      offset = '1h' if wave_itv1 != 'D' else '9h'\n","      htf_df = to_htf(res_df, wave_itv1, offset=offset)\n","      htf_df = wave_range_cci_v4(htf_df, wave_period1)\n","      \n","      # cols = list(htf_df.columns[-15:-4])  # except idx col\n","      cols = list(htf_df.columns[4:])  # 15T_ohlc 를 제외한 wave_range_cci_v4 로 추가된 cols, 다 넣어버리기 (추후 혼란 방지)\n","\n","      valid_co_prime_idx, valid_cu_prime_idx, roll_co_idx_arr, roll_cu_idx_arr = roll_wave_hl_idx_v5(htf_df, wave_itv1, wave_period1, roll_hl_cnt=roll_hl_cnt)\n","\n","      htf_df = get_roll_wave_data_v2(htf_df, valid_co_prime_idx, roll_co_idx_arr, 'wave_high_fill_{}{}'.format(wave_itv1, wave_period1), roll_hl_cnt)\n","      cols += list(htf_df.columns[-roll_hl_cnt:])\n","\n","      htf_df = get_roll_wave_data_v2(htf_df, valid_cu_prime_idx, roll_cu_idx_arr, 'wave_low_fill_{}{}'.format(wave_itv1, wave_period1), roll_hl_cnt)\n","      cols += list(htf_df.columns[-roll_hl_cnt:])\n","\n","      htf_df = wave_range_ratio_v4_3(htf_df, wave_itv1, wave_period1, roll_hl_cnt=roll_hl_cnt)\n","      cols += list(htf_df.columns[-4:])\n","\n","      # ------ 필요한 cols 만 join (htf's idx 정보는 ltf 와 sync. 가 맞지 않음 - join 불가함) ------ #\n","      res_df.drop(cols, inplace=True, axis=1, errors='ignore')\n","      res_df = res_df.join(to_lower_tf_v3(res_df, htf_df, cols, backing_i=1), how='inner')\n","    else:\n","      res_df = wave_range_cci_v4(res_df, wave_period1)\n","      # res_df = wave_range_stoch_v1(res_df, wave_period1)\n","      # res_df = wave_range_dc_envel_v1(res_df, wave_period1)\n","\n","      valid_co_prime_idx, valid_cu_prime_idx, roll_co_idx_arr, roll_cu_idx_arr = roll_wave_hl_idx_v5(res_df, wave_itv1, wave_period1, roll_hl_cnt=roll_hl_cnt)\n","      res_df = get_roll_wave_data_v2(res_df, valid_co_prime_idx, roll_co_idx_arr, 'wave_high_fill_{}{}'.format(wave_itv1, wave_period1), roll_hl_cnt)  # Todo, 갱신되는 high 의 last_high 를 추리기 위해 co_prime 사용함\n","      res_df = get_roll_wave_data_v2(res_df, valid_cu_prime_idx, roll_cu_idx_arr, 'wave_low_fill_{}{}'.format(wave_itv1, wave_period1), roll_hl_cnt)\n","      \n","      res_df = wave_range_ratio_v4_3(res_df, wave_itv1, wave_period1, roll_hl_cnt=roll_hl_cnt)\n","      res_df = get_wave_length(res_df,valid_co_prime_idx, valid_cu_prime_idx, roll_co_idx_arr, roll_cu_idx_arr, wave_itv1, wave_period1, roll_hl_cnt=roll_hl_cnt)\n","\n","      # res_df = tc_dc_base(res_df, wave_period2)\n","      res_df = tc_cci(res_df, wave_period2)\n","      # res_df = tc_cci_v2(res_df, wave_period2)\n","\n","      # ------ prev_low vs ma ------ #\n","      # ma_period = 60\n","      # res_df = ma(res_df, ma_period)\n","      \n","      # res_df['short_ma_T{}'.format(ma_period)] = res_df['ma_T{}'.format(ma_period)]\n","      # res_df['long_ma_T{}'.format(ma_period)] = res_df['ma_T{}'.format(ma_period)]\n","      \n","      # res_df = get_roll_wave_data_v2(res_df, valid_co_prime_idx, roll_co_idx_arr, 'short_ma_T{}'.format(ma_period), roll_hl_cnt)   # Todo, for index sync.\n","      # res_df = get_roll_wave_data_v2(res_df, valid_cu_prime_idx, roll_cu_idx_arr, 'long_ma_T{}'.format(ma_period), roll_hl_cnt)   # Todo, for index sync.\n","\n","    # ------------ wave_period2 ------------ #\n","    # if wave_itv1 != wave_itv2 or wave_period1 != wave_period2:\n","    #   assert wave_itv2 == 'T'      \n","      \n","      # res_df = wave_range_cci_v4(res_df, wave_period2)\n","\n","      # valid_co_prime_idx, valid_cu_prime_idx, roll_co_idx_arr, roll_cu_idx_arr = roll_wave_hl_idx_v5(res_df, wave_itv2, wave_period2, roll_hl_cnt=roll_hl_cnt)\n","      # res_df = get_roll_wave_data_v2(res_df, valid_co_prime_idx, roll_co_idx_arr, 'wave_high_fill_{}{}'.format(wave_itv2, wave_period2), roll_hl_cnt)\n","      # res_df = get_roll_wave_data_v2(res_df, valid_cu_prime_idx, roll_cu_idx_arr, 'wave_low_fill_{}{}'.format(wave_itv2, wave_period2), roll_hl_cnt)\n","\n","      # res_df = wave_range_ratio_v4_3(res_df, wave_itv2, wave_period2, roll_hl_cnt=roll_hl_cnt)\n","      \n","\n","    # ------ wave_loc_pct (bb) ------ #\n","    # res_df = wave_loc_pct_v2(res_df, config, 'T', 60)\n","    # res_df = wave_loc_pct(res_df, config, 'T', 60)\n","\n","    # future_cols = ['cu_es_15T1', 'co_es_15T1', 'upper_wick_ratio_15T', 'lower_wick_ratio_15T']\n","    # itv_list = ['15T', '15T', '15T', '15T']\n","    # res_df = backing_future_data(res_df, future_cols, itv_list)\n","\n","    # ====== intervaly ====== #    \n","    # ------ 5T ------ #\n","    # res_df = dc_level(res_df, '5T', 1)\n","    # res_df = bb_level(res_df, '5T', 1)\n","\n","    # res_df = st_level(res_df, '5T', 1)\n","\n","    # ------ 15T ------ #\n","    # res_df = dc_level(res_df, '15T', 1)\n","    # res_df = bb_level(res_df, '15T', 1)\n","    # res_df = dtk_plot(res_df, dtk_itv2='15T', hhtf_entry=15, use_dtk_line=config.loc_set.zone1.use_dtk_line, np_timeidx=np_timeidx)\n","\n","    # res_df = st_level(res_df, '15T', 1)\n","\n","    # ------ 30T ------ #\n","    # res_df = dc_level(res_df, '30T', 1)\n","    # res_df = bb_level(res_df, '30T', 1)\n","    # res_df = st_level(res_df, '30T', 1)\n","\n","    # ------ H ------ #\n","    # res_df = bb_level(res_df, 'H', 1)\n","\n","    # ------ 4H ------ #\n","    # res_df = bb_level(res_df, '4H', 1)\n","\n","    # res_df['dc_upper_v2'.format(selection_id)] = res_df['high'].rolling(config.loc_set.zone1.dc_period).max()   # Todo, consider dc_period\n","    # res_df['dc_lower_v2'.format(selection_id)] = res_df['low'].rolling(config.loc_set.zone1.dc_period).min()\n","\n","    # res_df['zone_dc_upper_v2'.format(selection_id)] = res_df['high'].rolling(config.loc_set.zone1.zone_dc_period).max()   # Todo, consider zone_dc_period\n","    # res_df['zone_dc_lower_v2'.format(selection_id)] = res_df['low'].rolling(config.loc_set.zone1.zone_dc_period).min()\n","\n","    # if order_side in [\"OPEN\"]:\n","        # candle_score_v3(res_df, 'T', unsigned=False)\n","        # candle_score_v3(res_df, config.loc_set.point1.exp_itv, unsigned=False)\n","\n","    #     temp indi.    #\n","    # res_df[\"ma30_1m\"] = res_df['close'].rolling(30).mean()\n","    # res_df[\"ma60_1m\"] = res_df['close'].rolling(60).mean()\n","    # res_df = dtk_plot(res_df, dtk_itv2='15T', hhtf_entry=15, use_dtk_line=config.loc_set.zone1.use_dtk_line, np_timeidx=np_timeidx)\n","\n","    return res_df\n","\n","\n","def expiry_v0(res_df, config, op_idx, e_j, tp_j, np_datas, open_side):\n","    high, low = np_datas\n","    selection_id = config.selection_id\n","    expire = 0\n","\n","    if config.tr_set.expire_tick != \"None\":\n","        if e_j - op_idx >= config.tr_set.expire_tick:\n","            expire = 1\n","\n","    if config.tr_set.expire_k1 != \"None\":\n","        if open_side == OrderSide.SELL:\n","            short_tp_1_ = res_df['short_tp_1_{}'.format(selection_id)].to_numpy()  # id 에 따라 dynamic 변수라 이곳에서 numpy 화 진행\n","            short_tp_gap_ = res_df['short_tp_gap_{}'.format(selection_id)].to_numpy()\n","            if low[e_j] <= short_tp_1_[tp_j] - short_tp_gap_[tp_j] * config.tr_set.expire_k1:\n","                expire = 1\n","        else:\n","            long_tp_1_ = res_df['long_tp_1_{}'.format(selection_id)].to_numpy()  # iloc 이 빠를까, to_numpy() 가 빠를까  # 3.94 ms --> 5.34 ms (iloc)\n","            long_tp_gap_ = res_df['long_tp_gap_{}'.format(selection_id)].to_numpy()\n","            if high[e_j] >= long_tp_1_[tp_j] + long_tp_gap_[tp_j] * config.tr_set.expire_k1:\n","                expire = 1\n","\n","    return expire\n","\n","\n","def expiry(res_df, config, op_idx, e_j, tp_j, np_datas, open_side):\n","    high, low = np_datas\n","    selection_id = config.selection_id\n","    expire = 0\n","\n","    if config.tr_set.expire_tick != \"None\":\n","        if e_j - op_idx >= config.tr_set.expire_tick:\n","            expire = 1\n","\n","    if config.tr_set.expire_k1 != \"None\":\n","        if open_side == OrderSide.SELL:\n","            short_tp_ = res_df['short_tp_{}'.format(selection_id)].to_numpy()  # id 에 따라 dynamic 변수라 이곳에서 numpy 화 진행\n","            short_tp_gap_ = res_df['short_tp_gap_{}'.format(selection_id)].to_numpy()\n","            if low[e_j] <= short_tp_[tp_j] + short_tp_gap_[tp_j] * config.tr_set.expire_k1:\n","                expire = 1\n","        else:\n","            long_tp_ = res_df['long_tp_{}'.format(selection_id)].to_numpy()  # iloc 이 빠를까, to_numpy() 가 빠를까  # 3.94 ms --> 5.34 ms (iloc)\n","            long_tp_gap_ = res_df['long_tp_gap_{}'.format(selection_id)].to_numpy()\n","            if high[e_j] >= long_tp_[tp_j] - long_tp_gap_[tp_j] * config.tr_set.expire_k1:\n","                expire = 1\n","\n","    return expire\n","\n","\n","# def expiry_p1(res_df, config, op_idx1, i, op_idx2, np_datas, open_side):\n","def expiry_p1(res_df, config, op_idx1, op_idx2, tp1, tp0, tp_gap, np_datas, open_side):\n","    high, low = np_datas\n","    selection_id = config.selection_id\n","    expire = 0\n","    touch_idx = None\n","\n","    # if config.tr_set.expire_tick != \"None\":\n","    #     if e_j - op_idx >= config.tr_set.expire_tick:\n","    #         expire = 1\n","\n","    # Todo, p1's tp1, 0 cannot be vectorized\n","    #   a. expiration 의 조건은 wave1, 0 의 broken\n","    idx_range = np.arange(op_idx1, op_idx2)\n","    if config.tr_set.expire_k1 != \"None\":\n","        if open_side == OrderSide.SELL:\n","            touch_idx = np.where((low[op_idx1:op_idx2] <= tp1 + tp_gap * config.tr_set.expire_k1) | \\\n","                                 (high[op_idx1:op_idx2] >= tp0 - tp_gap * config.tr_set.expire_k1),\n","                                 idx_range, np.nan)\n","            # if op_idx1 >= 16353:\n","            #   print(\"high[16353], tp0 :\", high[16353], tp0)\n","            if np.sum(~np.isnan(touch_idx)) > 0:  # touch 가 존재하면, \n","            # if low[op_idx1:op_idx2].min() <= tp1 + tp_gap * config.tr_set.expire_k1 or \\\n","            # high[op_idx1:op_idx2].max() >= tp0 - tp_gap * config.tr_set.expire_k1:   # p2_box loc. 이 있어서, op_idx2 + 1 안함\n","                expire = 1\n","        else:\n","            touch_idx = np.where((high[op_idx1:op_idx2] >= tp1 - tp_gap * config.tr_set.expire_k1) | \\\n","                                  (low[op_idx1:op_idx2] <= tp0 + tp_gap * config.tr_set.expire_k1),\n","                                  idx_range, np.nan)\n","            if np.sum(~np.isnan(touch_idx)) > 0:                                  \n","            # if high[op_idx1:op_idx2].max() >= tp1 - tp_gap * config.tr_set.expire_k1 or \\\n","            # low[op_idx1:op_idx2].min() <= tp0 + tp_gap * config.tr_set.expire_k1:\n","                expire = 1\n","\n","    return expire, np.nanmin(touch_idx)\n","\n","\n","def expiry_p2(res_df, config, op_idx, e_j, wave1, wave_gap, np_datas, open_side):\n","    high, low = np_datas\n","    selection_id = config.selection_id\n","    expire = 0\n","\n","    if config.tr_set.expire_tick != \"None\":\n","        if e_j - op_idx >= config.tr_set.expire_tick:\n","            expire = 1\n","\n","    if config.tr_set.expire_k2 != \"None\":\n","        if open_side == OrderSide.SELL:\n","            if low[e_j] <= wave1 + wave_gap * config.tr_set.expire_k2:\n","                expire = 1\n","        else:\n","            if high[e_j] >= wave1 - wave_gap * config.tr_set.expire_k2:\n","                expire = 1\n","\n","    return expire\n","\n","\n","# def ep_loc_point2_v2(res_df, config, i, out_j, side=OrderSide.SELL):\n","#     allow_ep_in = 1\n","#     if config.selection_id in ['v5_2']:\n","#         if side == OrderSide.SELL:\n","#             dc_upper_T = res_df['dc_upper_T'].to_numpy()\n","#             dc_upper_15T = res_df['dc_upper_15T'].to_numpy()\n","#             allow_ep_in *= (dc_upper_T[i - 1] <= dc_upper_15T[i]) & \\\n","#                            (dc_upper_15T[i - 1] != dc_upper_15T[i])\n","#         else:\n","#             dc_lower_T = res_df['dc_lower_T'].to_numpy()\n","#             dc_lower_15T = res_df['dc_lower_15T'].to_numpy()\n","#             allow_ep_in *= (dc_lower_T[i - 1] >= dc_lower_15T[i]) & \\\n","#                            (dc_lower_15T[i - 1] != dc_lower_15T[i])\n","\n","#     if config.selection_id in ['v3_4']:\n","#         wick_score_list = literal_eval(config.ep_set.point2.wick_score_list)\n","#         wick_scores = [res_df['wick_score_{}'.format(s_itv)].to_numpy() for s_itv in literal_eval(config.ep_set.point2.score_itv_list)]\n","#         close = res_df['close'].to_numpy()\n","#         if side == OrderSide.SELL:\n","#             sup_T = res_df['sup_T'].to_numpy()\n","#             allow_ep_in *= close[i] < sup_T[i - 1]\n","#             if len(wick_score_list) != 0:\n","#                 allow_ep_in *= wick_scores[0][i] < -wick_score_list[0]\n","#         else:\n","#             resi_T = res_df['resi_T'].to_numpy()\n","#             allow_ep_in *= close[i] > resi_T[i - 1]\n","#             if len(wick_score_list) != 0:\n","#                 allow_ep_in *= wick_scores[0][i] > wick_score_list[0]\n","\n","#     if allow_ep_in:\n","#         out_j = i\n","#     return allow_ep_in, out_j\n","\n","\n","# vectorized calc.\n","# multi-stem 에 따라 dynamic vars.가 입력되기 때문에 class 내부 vars. 로 종속시키지 않음\n","def ep_loc_p1_v3(res_df, config, np_timeidx, show_detail=True, ep_loc_side=OrderSide.SELL):\n","    # ------- param init ------- #\n","    selection_id = config.selection_id\n","    c_i = config.trader_set.complete_index\n","    len_df = len(res_df)\n","    mr_res = np.ones(len_df)\n","    zone_arr = np.full(len_df, 'n')\n","\n","    # ------ process 한번에 처리해서 param_check 만 ver. 별로 하면 될 것 ------ #\n","    #     => public_indi() 가 될 것\n","    #     1. 사용한 param 정보와 matching 된 data 병렬로 나열 logging 될 것\n","    tp_fee, out_fee = calc_tp_out_fee_v2(config)\n","\n","    # ============ tr_thresh ============ #  # vectorize allow only for p1_hhm\n","    if config.loc_set.point1.short_tr_thresh != \"None\":  #  and not config.tr_set.check_hlm:\n","        if ep_loc_side == OrderSide.SELL:\n","            short_tr_ = res_df['short_tr_{}'.format(selection_id)].to_numpy()\n","            mr_res *= short_tr_ >= config.loc_set.point1.short_tr_thresh\n","            # mr_res *= short_tr_ <= config.loc_set.point1.short_tr_thresh + 0.1\n","            if show_detail:\n","                sys_log.warning(\n","                    \"short_tr_ >= short_tr_thresh : {:.5f} {:.5f} ({})\".format(short_tr_[c_i], config.loc_set.point1.short_tr_thresh, mr_res[c_i]))\n","        else:\n","            long_tr_ = res_df['long_tr_{}'.format(selection_id)].to_numpy()\n","            mr_res *= long_tr_ >= config.loc_set.point1.long_tr_thresh\n","            # mr_res *= long_tr_ <= config.loc_set.point1.long_tr_thresh + 0.1\n","            if show_detail:\n","                sys_log.warning(\n","                    \"long_tr_ >= long_tr_thresh : {:.5f} {:.5f} ({})\".format(long_tr_[c_i], config.loc_set.point1.long_tr_thresh, mr_res[c_i]))\n","\n","    # ============ spread - independent to tr_set ============ #  --> Todo, 사용 안하고 싶은 wave_point1\n","    if config.loc_set.point1.short_spread != \"None\":\n","        if selection_id in ['v3']:\n","            if ep_loc_side == OrderSide.SELL:\n","                bb_base_5T = res_df['bb_base_5T'].to_numpy()  # to_numpy() 는 ep_loc 에서 진행됨\n","                bb_lower_5T = res_df['bb_lower_5T'].to_numpy()\n","                short_spread = (bb_base_5T - bb_lower_5T - tp_fee * bb_base_5T) / (bb_base_5T - bb_lower_5T + out_fee * bb_base_5T)\n","                mr_res *= short_spread >= config.loc_set.point1.short_spread\n","                if show_detail:\n","                    sys_log.warning(\n","                        \"short_spread >= config.loc_set.point1.short_spread : {:.5f} {:.5f} ({})\".format(short_spread[c_i], config.loc_set.point1.short_spread, mr_res[c_i]))\n","            else:\n","                bb_upper_5T = res_df['bb_upper_5T'].to_numpy()\n","                dc_lower_5T = res_df['dc_lower_5T'].to_numpy()\n","                # mr_res *= (bb_base_5T - dc_lower_5T - tp_fee * bb_upper_5T) / (bb_base_5T - dc_lower_5T + out_fee * bb_base_5T) >= config.loc_set.point1.long_spread\n","                long_spread = (bb_upper_5T - dc_lower_5T - tp_fee * bb_upper_5T) / (bb_upper_5T - dc_lower_5T + out_fee * bb_upper_5T)\n","                mr_res *= long_spread >= config.loc_set.point1.long_spread\n","                if show_detail:\n","                    sys_log.warning(\n","                        \"long_spread >= config.loc_set.point1.long_spread : {:.5f} {:.5f} ({})\".format(long_spread[c_i], config.loc_set.point1.long_spread, mr_res[c_i]))                  \n","\n","    # ============ point1 ratios ============ #\n","    # ------ wave_range_ratio ------ #    \n","    if config.loc_set.point1.wrr_10 != \"None\":   # for excessive range rejection         \n","      wave_itv1 = config.tr_set.wave_itv1\n","      wave_period1 = config.tr_set.wave_period1\n","      co_wrr_10_ = res_df['co_wrr_10_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","      cu_wrr_10_ = res_df['cu_wrr_10_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","      if ep_loc_side == OrderSide.SELL:\n","        mr_res *= cu_wrr_10_ <= config.loc_set.point1.wrr_10\n","        # mr_res *= cu_wrr_10_ >= config.loc_set.point1.wrr_10\n","        if show_detail:\n","            sys_log.warning(\"cu_wrr_10_ <= config.loc_set.point1.wrr_10 : {:.5f} {:.5f} ({})\".format(cu_wrr_10_[c_i], config.loc_set.point1.wrr_10, mr_res[c_i]))\n","      else:\n","        mr_res *= co_wrr_10_ <= config.loc_set.point1.wrr_10\n","        # mr_res *= co_wrr_10_ >= config.loc_set.point1.wrr_10\n","        if show_detail:\n","            sys_log.warning(\"co_wrr_10_ <= config.loc_set.point1.wrr_10 : {:.5f} {:.5f} ({})\".format(co_wrr_10_[c_i], config.loc_set.point1.wrr_10, mr_res[c_i]))\n","\n","    if config.loc_set.point1.wrr_21 != \"None\":   # for excessive range rejection         \n","      wave_itv1 = config.tr_set.wave_itv1\n","      wave_period1 = config.tr_set.wave_period1\n","      co_wrr_21_ = res_df['co_wrr_21_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","      cu_wrr_21_ = res_df['cu_wrr_21_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","      if ep_loc_side == OrderSide.SELL:\n","        mr_res *= cu_wrr_21_ <= config.loc_set.point1.wrr_21\n","        # mr_res *= cu_wrr_21_ >= config.loc_set.point1.wrr_21\n","        if show_detail:\n","            sys_log.warning(\"cu_wrr_21_ <= config.loc_set.point1.wrr_21 : {:.5f} {:.5f} ({})\".format(cu_wrr_21_[c_i], config.loc_set.point1.wrr_21, mr_res[c_i]))\n","      else:\n","        mr_res *= co_wrr_21_ <= config.loc_set.point1.wrr_21\n","        # mr_res *= co_wrr_21_ >= config.loc_set.point1.wrr_21\n","        if show_detail:\n","            sys_log.warning(\"co_wrr_21_ <= config.loc_set.point1.wrr_21 : {:.5f} {:.5f} ({})\".format(co_wrr_21_[c_i], config.loc_set.point1.wrr_21, mr_res[c_i]))\n","\n","    if config.loc_set.point1.wrr_32 != \"None\":            \n","      wave_itv1 = config.tr_set.wave_itv1\n","      wave_period1 = config.tr_set.wave_period1\n","      co_wrr_32_ = res_df['co_wrr_32_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","      cu_wrr_32_ = res_df['cu_wrr_32_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","      if ep_loc_side == OrderSide.SELL:\n","        mr_res *= cu_wrr_32_ <= config.loc_set.point1.wrr_32 #+ 0.1  # 0.1 0.05\n","        # mr_res *= (cu_wrr_32_ >= config.loc_set.point1.wrr_32) # & (cu_wrr_32_ <= 1)\n","        # mr_res *= cu_wrr_32_ >= config.loc_set.point1.wrr_32 - 0.1\n","        if show_detail:\n","            sys_log.warning(\"cu_wrr_32_ <= config.loc_set.point1.wrr_32 : {:.5f} {:.5f} ({})\".format(cu_wrr_32_[c_i], config.loc_set.point1.wrr_32, mr_res[c_i]))\n","      else:\n","        mr_res *= co_wrr_32_ <= config.loc_set.point1.wrr_32 #+ 0.1  # 0.1 0.05\n","        # mr_res *= (co_wrr_32_ >= config.loc_set.point1.wrr_32) # & (co_wrr_32_ <= 1)\n","        # mr_res *= co_wrr_32_ >= config.loc_set.point1.wrr_32 - 0.1\n","        if show_detail:\n","            sys_log.warning(\"co_wrr_32_ <= config.loc_set.point1.wrr_32 : {:.5f} {:.5f} ({})\".format(co_wrr_32_[c_i], config.loc_set.point1.wrr_32, mr_res[c_i]))\n","\n","    # ------ enough_space - Todo, future_data ------ #\n","    if config.loc_set.point1.co_es != \"None\":      \n","      itv, period1 = config.tr_set.p1_itv1, config.tr_set.p1_period1 \n","      b1_cu_es_ = res_df['b1_cu_es_{}{}'.format(itv, period1)].to_numpy()\n","      b1_co_es_ = res_df['b1_co_es_{}{}'.format(itv, period1)].to_numpy()\n","      if ep_loc_side == OrderSide.SELL:\n","        mr_res *= b1_co_es_ >= config.loc_set.point1.co_es\n","        mr_res *= b1_co_es_ <= config.loc_set.point1.co_es + 2\n","        if show_detail:\n","            sys_log.warning(\"b1_co_es_ >= config.loc_set.point1.co_es : {:.5f} {:.5f} ({})\".format(b1_co_es_[c_i], config.loc_set.point1.co_es, mr_res[c_i]))\n","      else:\n","        mr_res *= b1_cu_es_ >= config.loc_set.point1.cu_es\n","        mr_res *= b1_cu_es_ <= config.loc_set.point1.cu_es + 1\n","        if show_detail:\n","            sys_log.warning(\"b1_cu_es_ >= config.loc_set.point1.cu_es : {:.5f} {:.5f} ({})\".format(b1_cu_es_[c_i], config.loc_set.point1.cu_es, mr_res[c_i]))\n","\n","    # ------------ wick_ratio - Todo, future_data ------------ #\n","    # if config.loc_set.point1.short_wick_ratio != \"None\":\n","    #   b1_upper_wick_ratio_ = res_df['b1_upper_wick_ratio_{}'.format(config.loc_set.point1.wick_itv)].to_numpy()\n","    #   b1_lower_wick_ratio_ = res_df['b1_lower_wick_ratio_{}'.format(config.loc_set.point1.wick_itv)].to_numpy()      \n","    #   if ep_loc_side == OrderSide.SELL:\n","    #       # mr_res *= b1_upper_wick_ratio_ >= config.loc_set.point1.short_wick_ratio\n","    #       mr_res *= b1_lower_wick_ratio_ >= config.loc_set.point1.short_wick_ratio\n","    #       if show_detail:\n","    #           sys_log.warning(\"b1_lower_wick_ratio_ >= config.loc_set.point1.short_wick_ratio : {:.5f} {:.5f} ({})\".format(b1_lower_wick_ratio_[c_i], config.loc_set.point1.short_wick_ratio, mr_res[c_i]))\n","    #   else:\n","    #       # mr_res *= b1_lower_wick_ratio_ >= config.loc_set.point1.long_wick_ratio\n","    #       mr_res *= b1_upper_wick_ratio_ >= config.loc_set.point1.long_wick_ratio\n","    #       if show_detail:\n","    #           sys_log.warning(\"b1_upper_wick_ratio_ >= config.loc_set.point1.long_wick_ratio : {:.5f} {:.5f} ({})\".format(b1_upper_wick_ratio_[c_i], config.loc_set.point1.long_wick_ratio, mr_res[c_i]))\n","\n","    # ------ candle_range_ratio - Todo, future_data ------ #\n","    # if config.loc_set.point1.crr != \"None\":   \n","    #   tf_entry = to_itvnum(config.loc_set.point1.tf_entry)\n","    #   b1_crr_ = res_df['crr_{}'.format(config.loc_set.point1.tf_entry)].shift(tf_entry).to_numpy()\n","    #   mr_res *= b1_crr_ >= config.loc_set.point1.crr\n","    #   if show_detail:\n","    #       sys_log.warning(\"b1_crr_ >= config.loc_set.point1.crr : {:.5f} {:.5f} ({})\".format(b1_crr_[c_i], config.loc_set.point1.crr, mr_res[c_i]))\n","    \n","    # ------ dc_over_body_ratio ------ #\n","    if config.loc_set.point1.dbr != \"None\":\n","      b1_lwdbr = res_df['b1_lwdbr'].to_numpy()\n","      b1_updbr = res_df['b1_updbr'].to_numpy()\n","      if ep_loc_side == OrderSide.SELL:        \n","        mr_res *= b1_lwdbr >= config.loc_set.point1.dbr\n","        if show_detail:\n","            sys_log.warning(\n","                \"b1_lwdbr >= config.loc_set.point1.dbr : {:.5f} {:.5f} ({})\".format(b1_lwdbr[c_i], config.loc_set.point1.dbr, mr_res[c_i]))\n","      else:\n","        mr_res *= b1_updbr >= config.loc_set.point1.dbr\n","        if show_detail:\n","            sys_log.warning(\n","                \"b1_updbr >= config.loc_set.point1.dbr : {:.5f} {:.5f} ({})\".format(b1_updbr[c_i], config.loc_set.point1.dbr, mr_res[c_i]))\n","            \n","    if config.loc_set.point1.dbr2 != \"None\":\n","      b1_lwdbr = res_df['b1_lwdbr'].to_numpy()\n","      b1_updbr = res_df['b1_updbr'].to_numpy()\n","      if ep_loc_side == OrderSide.SELL:    \n","        mr_res *= b1_updbr >= config.loc_set.point1.dbr2\n","        if show_detail:\n","            sys_log.warning(\n","                \"b1_updbr >= config.loc_set.point1.dbr2 : {:.5f} {:.5f} ({})\".format(b1_updbr[c_i], config.loc_set.point1.dbr2, mr_res[c_i]))\n","      else:\n","        mr_res *= b1_lwdbr >= config.loc_set.point1.dbr2\n","        if show_detail:\n","            sys_log.warning(\n","                \"b1_lwdbr >= config.loc_set.point1.dbr2 : {:.5f} {:.5f} ({})\".format(b1_lwdbr[c_i], config.loc_set.point1.dbr2, mr_res[c_i]))\n","\n","    # ------ wick_body_ratio ------ #\n","    if config.loc_set.point1.wbr != \"None\":\n","        wave_body_ratio = res_df['wave_body_ratio'].to_numpy()\n","        mr_res *= wave_body_ratio >= config.loc_set.point1.wbr\n","        if show_detail:\n","            sys_log.warning(\n","                \"wave_body_ratio >= config.loc_set.point1.wbr : {:.5f} {:.5f} ({})\".format(wave_body_ratio[c_i], config.loc_set.point1.wbr, mr_res[c_i]))\n","            \n","    # ------ body_rel_ratio ------ #\n","    if config.loc_set.point1.brr != \"None\":\n","        body_rel_ratio_ = res_df['body_rel_ratio_{}'.format(config.loc_set.point1.tf_entry)].to_numpy()\n","        mr_res *= body_rel_ratio_ <= config.loc_set.point1.brr\n","        if show_detail:\n","            sys_log.warning(\n","                \"body_rel_ratio_ <= config.loc_set.point1.brr : {:.5f} {:.5f} ({})\".format(body_rel_ratio_[c_i], config.loc_set.point1.brr, mr_res[c_i]))\n","\n","    # ------ pumping_ratio ------ #\n","    if config.loc_set.point1.ppr != \"None\":\n","      if ep_loc_side == OrderSide.SELL:\n","        short_ppr_ = res_df['short_ppr_{}'.format(selection_id)].to_numpy()\n","        mr_res *= short_ppr_ >= config.loc_set.point1.ppr\n","        if show_detail:\n","            sys_log.warning(\"short_ppr_ >= config.loc_set.point1.ppr : {:.5f} {:.5f} ({})\".format(short_ppr_[c_i], config.loc_set.point1.ppr, mr_res[c_i]))\n","      else:\n","        long_ppr_ = res_df['long_ppr_{}'.format(selection_id)].to_numpy()\n","        mr_res *= long_ppr_ >= config.loc_set.point1.ppr\n","        if show_detail:\n","            sys_log.warning(\"long_ppr_ >= config.loc_set.point1.ppr : {:.5f} {:.5f} ({})\".format(long_ppr_[c_i], config.loc_set.point1.ppr, mr_res[c_i]))\n"," \n","    # ============ rtc_zone  ============ #  --> Todo, 사용 안하고 싶은 wave_dur., 추후 zone 으로 옮길 것\n","    # ------ dtk ------ #\n","    if config.loc_set.zone1.dt_k != \"None\":\n","        # ------ dc_v2 ------ #\n","        dc_lower_v2 = res_df['dc_lower_v2'.format(selection_id)].to_numpy()\n","        short_dtk_1_ = res_df['short_dtk_1_{}'.format(selection_id)].to_numpy() - \\\n","                       res_df['short_dtk_gap_{}'.format(selection_id)].to_numpy() * config.loc_set.zone1.dt_k\n","        dc_upper_v2 = res_df['dc_upper_v2'.format(selection_id)].to_numpy()\n","        long_dtk_1_ = res_df['long_dtk_1_{}'.format(selection_id)].to_numpy() + \\\n","                      res_df['long_dtk_gap_{}'.format(selection_id)].to_numpy() * config.loc_set.zone1.dt_k\n","        if ep_loc_side == OrderSide.SELL:\n","            mr_res *= dc_lower_v2 >= short_dtk_1_\n","            if show_detail:\n","                sys_log.warning(\n","                    \"dc_lower_v2 >= short_dtk_1_ : {:.5f} {:.5f} ({})\".format(dc_lower_v2[c_i], short_dtk_1_[c_i], mr_res[c_i]))\n","        else:\n","            mr_res *= dc_upper_v2 <= long_dtk_1_\n","            if show_detail:\n","                sys_log.warning(\n","                    \"dc_upper_v2 <= long_dtk_1_ : {:.5f} {:.5f} ({})\".format(dc_upper_v2[c_i], long_dtk_1_[c_i], mr_res[c_i]))\n","                \n","    # ============ zone ============ #\n","    # ------ config var. 이 등록되지 않은 dur. 은 selection_id 으로 조건문을 나눔 (lvrg_set 과 동일) ------ #\n","    if config.loc_set.zone1.use_zone:\n","\n","      # ------------ 추세선 리스트 on_price ------------ #\n","      wave_itv1 = config.tr_set.wave_itv1\n","      wave_period1 = config.tr_set.wave_period1      \n","      \n","      wave_high_fill1_ = res_df['wave_high_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","      wave_low_fill1_ = res_df['wave_low_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","\n","        # ------ ma ------ #\n","      ma_period = 60\n","      # res_df = ma(res_df, ma_period)       \n","      ma_ = res_df['ma_T{}'.format(ma_period)].to_numpy()\n","\n","      if ep_loc_side == OrderSide.SELL:\n","        mr_res *= wave_high_fill1_ < ma_\n","        if show_detail:\n","          sys_log.warning(\"wave_high_fill1_ < ma_ : {:.5f} {:.5f} ({})\".format(wave_high_fill1_[c_i], ma_[c_i], mr_res[c_i]))\n","      else:\n","        mr_res *= wave_low_fill1_ > ma_\n","        if show_detail:\n","          sys_log.warning(\"wave_low_fill1_ > ma_ : {:.5f} {:.5f} ({})\".format(wave_low_fill1_[c_i], ma_[c_i], mr_res[c_i]))\n","        \n","        # ------ dc_base ------ #      \n","      # dc_base_ = res_df['dc_base_T100'].to_numpy()\n","\n","      # if ep_loc_side == OrderSide.SELL:\n","      #   mr_res *= wave_high_fill1_ < dc_base_\n","      #   if show_detail:\n","      #     sys_log.warning(\"wave_high_fill1_ < dc_base_ : {:.5f} {:.5f} ({})\".format(wave_high_fill1_[c_i], dc_base_[c_i], mr_res[c_i]))\n","      # else:\n","      #   mr_res *= wave_low_fill1_ > dc_base_\n","      #   if show_detail:\n","      #     sys_log.warning(\"wave_low_fill1_ > dc_base_ : {:.5f} {:.5f} ({})\".format(wave_low_fill1_[c_i], dc_base_[c_i], mr_res[c_i]))    \n","      \n","      # ------------ out_price ------------ #\n","        # ------ macd ------ #\n","      # # macd_ = res_df['macd_T535'].to_numpy()\n","      # macd_ = res_df['macd_hist_T53515'].to_numpy()\n","\n","      # if ep_loc_side == OrderSide.SELL:\n","      #   mr_res *= macd_ < 0\n","      #   if show_detail:\n","      #     sys_log.warning(\"macd_ < 0 : {:.5f} {:.5f} ({})\".format(macd_[c_i], 0, mr_res[c_i]))\n","      # else:\n","      #   mr_res *= macd_ > 0\n","      #   if show_detail:\n","      #     sys_log.warning(\"macd_ > 0 : {:.5f} {:.5f} ({})\".format(macd_[c_i], 0, mr_res[c_i]))\n","\n","      # ------ bb_base uptrend ------ #\n","      # bb_base_T100 = res_df['bb_base_T100'].to_numpy()\n","      # b1_bb_base_T100 = res_df['bb_base_T100'].shift(1).to_numpy()\n","\n","      # lb_period = config.loc_set.zone1.bb_trend_period\n","      # bb_base_downtrend = pd.Series(b1_bb_base_T100 < bb_base_T100).rolling(lb_period).sum().to_numpy() == 0\n","      # bb_base_uptrend = pd.Series(b1_bb_base_T100 > bb_base_T100).rolling(lb_period).sum().to_numpy() == 0\n","\n","      # if ep_loc_side == OrderSide.SELL:\n","      #   mr_res *= bb_base_downtrend\n","      #   if show_detail:\n","      #       sys_log.warning(\"bb_base_downtrend : {:.5f} ({})\".format(bb_base_downtrend[c_i], mr_res[c_i]))       \n","      # else:\n","      #   mr_res *= bb_base_uptrend\n","      #   if show_detail:\n","      #       sys_log.warning(\"bb_base_uptrend : {:.5f} ({})\".format(bb_base_uptrend[c_i], mr_res[c_i]))    \n","\n","    # -------------- zoned tr_set - post_work -------------- #\n","    if config.tr_set.c_ep_gap != \"None\" or config.tr_set.t_out_gap != \"None\":\n","        #       by zone_dtk       #\n","        #         c_zone        #\n","        zone_dc_upper_v2_ = res_df['zone_dc_upper_v2'.format(selection_id)].to_numpy()\n","        long_dtk_plot_1 = res_df['long_dtk_plot_1'].to_numpy() + res_df['long_dtk_plot_gap'].to_numpy() * config.loc_set.zone1.zone_dt_k\n","        zone_dc_lower_v2_ = res_df['zone_dc_lower_v2'.format(selection_id)].to_numpy()\n","        short_dtk_plot_1 = res_df['short_dtk_plot_1'].to_numpy() - res_df['short_dtk_plot_gap'].to_numpy() * config.loc_set.zone1.zone_dt_k\n","        if ep_loc_side == OrderSide.SELL:\n","            zone_res = zone_dc_upper_v2_ > long_dtk_plot_1  # mr_res 와는 별개임\n","            pos = 'short'\n","        else:\n","            zone_res = zone_dc_lower_v2_ < short_dtk_plot_1\n","            pos = 'long'\n","\n","        # static 여부에 따른 vectorized adj. - dynamic 은 vectorize 불가\n","        if config.ep_set.static_ep and config.tr_set.c_ep_gap != \"None\":\n","            res_df['{}_ep_{}'.format(pos, selection_id)][zone_res] = res_df['{}_ep2_{}'.format(pos, selection_id)][zone_res]\n","        if config.out_set.static_out and config.tr_set.t_out_gap != \"None\":\n","            res_df['{}_out_{}'.format(pos, selection_id)][~zone_res] = res_df['{}_out2_{}'.format(pos, selection_id)][\n","                ~zone_res]  # t_zone 에 대한 out2 setting\n","        zone_arr = np.where(zone_res == 1, 'c', 't')\n","\n","    return mr_res, zone_arr  # mr_res 의 True idx 가 open signal\n","\n","\n","def ep_loc_p2_v3(res_df, config, np_timeidx, show_detail=True, ep_loc_side=OrderSide.SELL):\n","    # ------- param init ------- #\n","    selection_id = config.selection_id\n","    c_i = config.trader_set.complete_index\n","    len_df = len(res_df)\n","    mr_res = np.ones(len_df)\n","    zone_arr = np.full(len_df, 'n')\n","\n","    # ------ process 한번에 처리해서 param_check 만 ver. 별로 하면 될 것 ------ #\n","    #     => public_indi() 가 될 것\n","    #     1. 사용한 param 정보와 matching 된 data 병렬로 나열 logging 될 것\n","    # tp_fee, out_fee = calc_tp_out_fee_v2(config)\n","\n","    # ============ point1 ratios ============ #\n","    # ------ wave_range_ratio ------ #\n","    # if config.loc_set.point2.cu_wrr_21 != \"None\":   # for excessive range rejection         \n","    #   wave_itv1 = config.tr_set.wave_itv1\n","    #   wave_period1 = config.tr_set.wave_period1\n","    #   co_wrr_21_ = res_df['co_wrr_21_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","    #   cu_wrr_21_ = res_df['cu_wrr_21_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","    #   if ep_loc_side == OrderSide.SELL:\n","    #     mr_res *= cu_wrr_21_ <= config.loc_set.point2.cu_wrr_21\n","    #     mr_res *= cu_wrr_21_ >= config.loc_set.point2.cu_wrr_21 - 0.2\n","    #     if show_detail:\n","    #         sys_log.warning(\"cu_wrr_21_ <= config.loc_set.point2.cu_wrr_21 : {:.5f} {:.5f} ({})\".format(cu_wrr_21_[c_i], config.loc_set.point2.cu_wrr_21, mr_res[c_i]))\n","    #   else:\n","    #     mr_res *= co_wrr_21_ <= config.loc_set.point2.co_wrr_21\n","    #     mr_res *= co_wrr_21_ >= config.loc_set.point2.co_wrr_21 - 0.2\n","    #     if show_detail:\n","    #         sys_log.warning(\"co_wrr_21_ <= config.loc_set.point2.co_wrr_21 : {:.5f} {:.5f} ({})\".format(co_wrr_21_[c_i], config.loc_set.point2.co_wrr_21, mr_res[c_i]))\n","\n","    if config.loc_set.point2.wrr_32 != \"None\":            \n","      wave_itv2 = config.tr_set.wave_itv2\n","      wave_period2 = config.tr_set.wave_period2\n","      co_wrr_32_ = res_df['co_wrr_32_{}{}'.format(wave_itv2, wave_period2)].to_numpy()\n","      cu_wrr_32_ = res_df['cu_wrr_32_{}{}'.format(wave_itv2, wave_period2)].to_numpy()\n","      if ep_loc_side == OrderSide.SELL:\n","        mr_res *= cu_wrr_32_ <= config.loc_set.point2.wrr_32  #  + 0.1  # 0.1 0.05\n","        # mr_res *= cu_wrr_32_ >= config.loc_set.point2.wrr_32\n","        if show_detail:\n","            sys_log.warning(\"cu_wrr_32_ <= config.loc_set.point2.wrr_32 : {:.5f} {:.5f} ({})\".format(cu_wrr_32_[c_i], config.loc_set.point2.wrr_32, mr_res[c_i]))\n","      else:\n","        mr_res *= co_wrr_32_ <= config.loc_set.point2.wrr_32  #  + 0.1  # 0.1 0.05\n","        # mr_res *= co_wrr_32_ >= config.loc_set.point2.wrr_32\n","        if show_detail:\n","            sys_log.warning(\"co_wrr_32_ <= config.loc_set.point2.wrr_32 : {:.5f} {:.5f} ({})\".format(co_wrr_32_[c_i], config.loc_set.point2.wrr_32, mr_res[c_i]))\n","\n","    if config.loc_set.point2.csd_period != \"None\":\n","      wave_itv2 = config.tr_set.wave_itv2\n","      csd_period = config.loc_set.point2.csd_period\n","      \n","      res_df = dc_line_v4(res_df, res_df, dc_period=csd_period)\n","      dc_upper_ = res_df['dc_upper_{}{}'.format(wave_itv2, csd_period)].to_numpy()    \n","      dc_lower_ = res_df['dc_lower_{}{}'.format(wave_itv2, csd_period)].to_numpy()\n","      if ep_loc_side == OrderSide.SELL:\n","        csdbox = res_df['short_tp_1_{}'.format(selection_id)].to_numpy() + res_df['short_tp_gap_{}'.format(selection_id)].to_numpy() * config.loc_set.point2.csdbox_range\n","        mr_res *= dc_upper_ <= csdbox\n","        if show_detail:\n","            sys_log.warning(\"dc_upper_ <= csdbox : {:.5f} {:.5f} ({})\".format(dc_upper_[c_i], csdbox[c_i], mr_res[c_i]))\n","      else:\n","        csdbox = res_df['long_tp_1_{}'.format(selection_id)].to_numpy() - res_df['long_tp_gap_{}'.format(selection_id)].to_numpy() * config.loc_set.point2.csdbox_range\n","        mr_res *= dc_lower_ >= csdbox\n","        if show_detail:\n","            sys_log.warning(\"dc_lower_ >= csdbox : {:.5f} {:.5f} ({})\".format(dc_lower_[c_i], csdbox[c_i], mr_res[c_i]))\n","\n","    # ============ zone ============ #    \n","    # ------------ 추세선 리스트 on_price ------------ #\n","    if config.loc_set.zone2.use_zone:\n","      wave_itv1 = config.tr_set.wave_itv1\n","      wave_period1 = config.tr_set.wave_period1      \n","      \n","      wave_high_fill1_ = res_df['wave_high_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","      wave_low_fill1_ = res_df['wave_low_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","\n","        # ------ ma ------ #\n","      ma_period = 60\n","      # res_df = ma(res_df, ma_period)       \n","      ma_ = res_df['ma_T{}'.format(ma_period)].to_numpy()\n","\n","      if ep_loc_side == OrderSide.SELL:\n","        mr_res *= wave_high_fill1_ < ma_\n","        if show_detail:\n","          sys_log.warning(\"wave_high_fill1_ < ma_ : {:.5f} {:.5f} ({})\".format(wave_high_fill1_[c_i], ma_[c_i], mr_res[c_i]))\n","      else:\n","        mr_res *= wave_low_fill1_ > ma_\n","        if show_detail:\n","          sys_log.warning(\"wave_low_fill1_ > ma_ : {:.5f} {:.5f} ({})\".format(wave_low_fill1_[c_i], ma_[c_i], mr_res[c_i]))\n","\n","\n","    return mr_res, zone_arr  # mr_res 의 True idx 가 open signal"]},{"cell_type":"markdown","metadata":{"id":"EQ63Jwpvr7qA"},"source":["#### legacy"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"csZwxsP5r_Pz"},"outputs":[],"source":["      \n","    # ------ hl_loc_pct ------ #\n","    if config.loc_set.zone.hl_loc_pct != \"None\":      \n","      wave_high_loc_pct_ = res_df['wave_high_loc_pct_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","      wave_low_loc_pct_ = res_df['wave_low_loc_pct_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","\n","      if ep_loc_side == OrderSide.SELL:\n","        mr_res *= wave_high_loc_pct_ >= config.loc_set.zone.hl_loc_pct\n","        mr_res *= wave_high_loc_pct_ <= config.loc_set.zone.hl_loc_pct + 0.5\n","        if show_detail:\n","            sys_log.warning(\"wave_high_loc_pct_ >= config.loc_set.zone.hl_loc_pct : {:.5f} {:.5f} ({})\".format(wave_high_loc_pct_[c_i], config.loc_set.zone.hl_loc_pct, mr_res[c_i]))\n","      else:\n","        mr_res *= wave_low_loc_pct_ >= config.loc_set.zone.hl_loc_pct\n","        mr_res *= wave_low_loc_pct_ <= config.loc_set.zone.hl_loc_pct + 0.5\n","        if show_detail:\n","            sys_log.warning(\"wave_low_loc_pct_ >= config.loc_set.zone.hl_loc_pct : {:.5f} {:.5f} ({})\".format(wave_low_loc_pct_[c_i], config.loc_set.zone.hl_loc_pct, mr_res[c_i]))\n","\n","            \n","        # ------------------ wave_biaser (sr_confirmer) ------------------ #\n","        if selection_id in ['3_9']:     \n","          itv, period1, period2 = config.tr_set.p1_itv1, config.tr_set.p1_period1, config.tr_set.p1_period2          \n","\n","          if ep_loc_side == OrderSide.SELL:\n","            short_wave_high_ = res_df['short_wave_high_{}{}{}'.format(itv, period1, period2)]\n","            bb_lower_5T_amax = get_line(res_df['short_wave_high_idx_{}{}{}'.format(itv, period1, period2)].to_numpy(), res_df['bb_lower_5T'].to_numpy())\n","            mr_res *= short_wave_high_ <= bb_lower_5T_amax\n","            if show_detail:\n","                sys_log.warning(\"short_wave_high_ <= bb_lower_5T_amax : {:.5f} {:.5f} ({})\".format(short_wave_high_[c_i], bb_lower_5T_amax[c_i], mr_res[c_i]))\n","          else:\n","            long_wave_low_ = res_df['long_wave_low_{}{}{}'.format(itv, period1, period2)]\n","            bb_upper_5T_amax = get_line(res_df['long_wave_low_idx_{}{}{}'.format(itv, period1, period2)].to_numpy(), res_df['bb_upper_5T'].to_numpy())\n","            mr_res *= long_wave_low_ >= bb_upper_5T_amax\n","            if show_detail:\n","                sys_log.warning(\"long_wave_low_ >= bb_upper_5T_amax : {:.5f} {:.5f} ({})\".format(long_wave_low_[c_i], bb_upper_5T_amax[c_i], mr_res[c_i]))\n","\n","\n","        if selection_id in ['4_3', '3_5', '3_51']:\n","            dc_base_T20 = res_df['dc_base_T20'].to_numpy()\n","            dc_base_3T20 = res_df['dc_base_3T20'].to_numpy()\n","            # b1_dc_base_3T20 = res_df['dc_base_3T20'].shift(3).to_numpy()\n","            # dc_base_5T = res_df['dc_base_5T'].to_numpy()\n","            # dc_base_15T = res_df['dc_base_15T'].to_numpy()\n","            # dc_base_30T = res_df['dc_base_30T'].to_numpy()\n","            dc_base_H20 = res_df['dc_base_H20'].to_numpy()\n","            # dc_base_4H = res_df['dc_base_4H'].to_numpy()\n","            # dc_base_D = res_df['dc_base_D'].to_numpy()\n","\n","            itv, period1, period2 = config.tr_set.p1_itv1, config.tr_set.p1_period1, config.tr_set.p1_period2\n","            if ep_loc_side == OrderSide.SELL:\n","                # ------ short_base_ <= dc_base_3T20 ------ #\n","                short_base_ = res_df['short_base_{}{}{}'.format(itv, period1, period2)].to_numpy()\n","                mr_res *= short_base_ <= dc_base_3T20\n","                if show_detail:\n","                    sys_log.warning(\"short_base_ <= dc_base_3T20 : {:.5f} {:.5f} ({})\".format(short_base_[c_i], dc_base_3T20[c_i], mr_res[c_i]))\n","\n","                # mr_res *= short_base_ <= dc_base_T20\n","                # if show_detail:\n","                #     sys_log.warning(\"short_base_ <= dc_base_T20 : {:.5f} {:.5f} ({})\".format(short_base_[c_i], dc_base_T20[c_i], mr_res[c_i]))\n","\n","                # ------ reject csd ------ #\n","                # dc_upper_ = res_df['dc_upper_{}{}'.format(itv, period1)].to_numpy()\n","                # mr_res *= dc_upper_ <= dc_base_3T\n","                # if show_detail:\n","                #     sys_log.warning(\"dc_upper_ <= dc_base_3T20 : {:.5f} {:.5f} ({})\".format(dc_upper_[c_i], dc_base_3T[c_i], mr_res[c_i]))\n","\n","                # Todo, 부호 조심\n","                # dc_upper2_ = res_df['dc_upper_{}{}'.format(itv, period2)].to_numpy()\n","                # mr_res *= dc_upper2_ >= dc_base_H\n","                # if show_detail:\n","                #     sys_log.warning(\"dc_upper2_ >= dc_base_H20 : {:.5f} {:.5f} ({})\".format(dc_upper2_[c_i], dc_base_H[c_i], mr_res[c_i]))  \n","\n","                # long 과 동일한 dur.\n","                dc_lower2_ = res_df['dc_lower_{}{}'.format(itv, period2)].to_numpy()\n","                mr_res *= dc_lower2_ >= dc_base_H20\n","                if show_detail:\n","                    sys_log.warning(\"dc_lower2_ >= dc_base_H20 : {:.5f} {:.5f} ({})\".format(dc_lower2_[c_i], dc_base_H20[c_i], mr_res[c_i]))  \n","\n","                # ------ consecutive base ascender ------ #\n","                # ------ 1. roll_min ------ #\n","                dc_base_3T20_rollmin = res_df['dc_base_3T20'].rolling(config.loc_set.zone.base_roll_period).min().to_numpy()\n","                mr_res *= dc_base_3T20_rollmin == dc_base_3T20\n","                if show_detail:\n","                    sys_log.warning(\n","                        \"dc_base_3T20_rollmin == dc_base_3T2020 : {:.5f} {:.5f} ({})\".format(dc_base_3T20_rollmin[c_i], dc_base_3T20[c_i], mr_res[c_i]))\n","            else:\n","                # ------ long_base >= dc_base_3T20 ------ #\n","                long_base_ = res_df['long_base_{}{}{}'.format(itv, period1, period2)].to_numpy()\n","                mr_res *= long_base_ >= dc_base_3T20\n","                if show_detail:\n","                    sys_log.warning(\"long_base_ >= dc_base_3T20 : {:.5f} {:.5f} ({})\".format(long_base_[c_i], dc_base_3T20[c_i], mr_res[c_i]))\n","\n","                # mr_res *= long_base_ >= dc_base_T20\n","                # if show_detail:\n","                #     sys_log.warning(\"long_base_ >= dc_base_T20 : {:.5f} {:.5f} ({})\".format(long_base_[c_i], dc_base_T20[c_i], mr_res[c_i]))\n","\n","                # ------ reject csd ------ #\n","                # dc_lower_ = res_df['dc_lower_{}{}'.format(itv, period1)].to_numpy()\n","                # mr_res *= dc_lower_ >= dc_base_3T\n","                # if show_detail:\n","                #     sys_log.warning(\"dc_lower_ >= dc_base_3T20 : {:.5f} {:.5f} ({})\".format(dc_lower_[c_i], dc_base_3T[c_i], mr_res[c_i]))\n","\n","                dc_lower2_ = res_df['dc_lower_{}{}'.format(itv, period2)].to_numpy()\n","                mr_res *= dc_lower2_ >= dc_base_H20\n","                if show_detail:\n","                    sys_log.warning(\"dc_lower2_ >= dc_base_H20 : {:.5f} {:.5f} ({})\".format(dc_lower2_[c_i], dc_base_H20[c_i], mr_res[c_i]))\n","\n","                # bb_lower_5T = res_df['bb_lower_5T'].to_numpy()\n","                # mr_res *= dc_lower2_ >= bb_lower_5T\n","                # if show_detail:\n","                #     sys_log.warning(\"dc_lower2_ >= bb_lower_5T : {:.5f} {:.5f} ({})\".format(dc_lower2_[c_i], bb_lower_5T[c_i], mr_res[c_i]))\n","\n","                # ------ alignment ------ #\n","                # mr_res *= (dc_base_3T20 > dc_base_5T) & (dc_base_5T > dc_base_15T) & (dc_base_15T > dc_base_30T)\n","\n","                # ------ consecutive base ascender ------ #\n","                # ------ 1. roll_max ------ #\n","                dc_base_3T20_rollmax = res_df['dc_base_3T20'].rolling(config.loc_set.zone.base_roll_period).max().to_numpy()\n","                mr_res *= dc_base_3T20_rollmax == dc_base_3T20\n","                if show_detail:\n","                    sys_log.warning(\n","                        \"dc_base_3T20_rollmax == dc_base_3T2020 : {:.5f} {:.5f} ({})\".format(dc_base_3T20_rollmax[c_i], dc_base_3T20[c_i], mr_res[c_i]))\n","\n","                # ------ 2. roll_max_v2 - ascender  ------ #\n","                # dc_base_3T_ascend = (res_df['dc_base_3T'] >= res_df['dc_base_3T'].shift(3)).rolling(config.loc_set.zone.base_roll_period).sum().to_numpy()\n","                # # mr_res *= dc_base_3T_ascend == config.loc_set.zone.base_roll_period\n","                # mr_res *= dc_base_3T_ascend != config.loc_set.zone.base_roll_period\n","                # if show_detail:\n","                #     sys_log.warning(\"dc_base_3T_ascend == config.loc_set.zone.base_roll_period : {:.5f} {:.5f} ({})\".format(dc_base_3T_ascend[c_i], config.loc_set.zone.base_roll_period, mr_res[c_i]))\n","\n","\n","    if config.loc_set.point.wrr != \"None\":            \n","      wave_itv = 'T'\n","      wave_period = config.tr_set.wave_period\n","      co_wrr_ = res_df['co_wrr_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","      cu_wrr_ = res_df['cu_wrr_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","      if ep_loc_side == OrderSide.SELL:\n","        mr_res *= co_wrr_ <= config.loc_set.point.wrr\n","        if show_detail:\n","            sys_log.warning(\"co_wrr_ <= config.loc_set.point.wrr : {:.5f} {:.5f} ({})\".format(co_wrr_[c_i], config.loc_set.point.wrr, mr_res[c_i]))\n","      else:\n","        mr_res *= cu_wrr_ <= config.loc_set.point.wrr\n","        if show_detail:\n","            sys_log.warning(\"cu_wrr_ <= config.loc_set.point.wrr : {:.5f} {:.5f} ({})\".format(cu_wrr_[c_i], config.loc_set.point.wrr, mr_res[c_i]))\n","            \n","      # if ep_loc_side == OrderSide.SELL:\n","      #   mr_res *= cu_es_ >= config.loc_set.point.cu_es\n","      #   mr_res *= cu_es_ <= config.loc_set.point.cu_es + 2\n","      #   if show_detail:\n","      #       sys_log.warning(\"cu_es_ >= config.loc_set.point.cu_es : {:.5f} {:.5f} ({})\".format(cu_es_[c_i], config.loc_set.point.cu_es, mr_res[c_i]))\n","      # else:\n","      #   mr_res *= co_es_ >= config.loc_set.point.co_es\n","      #   mr_res *= co_es_ <= config.loc_set.point.co_es + 1\n","      #   if show_detail:\n","      #       sys_log.warning(\"co_es_ >= config.loc_set.point.co_es : {:.5f} {:.5f} ({})\".format(co_es_[c_i], config.loc_set.point.co_es, mr_res[c_i]))\n","\n","\n","      if ep_loc_side == OrderSide.SELL:\n","          mr_res *= lower_wick_ratio_ >= config.loc_set.point.wick_ratio\n","          # mr_res *= upper_wick_ratio_ >= config.loc_set.point.wick_ratio\n","          if show_detail:\n","              sys_log.warning(\"upper_wick_ratio_ >= config.loc_set.point.wick_ratio : {:.5f} {:.5f} ({})\".format(upper_wick_ratio_[c_i], config.loc_set.point.wick_ratio, mr_res[c_i]))\n","      else:\n","          mr_res *= upper_wick_ratio_ >= config.loc_set.point.wick_ratio\n","          mr_res *= upper_wick_ratio_ <= config.loc_set.point.wick_ratio + 0.1\n","          # mr_res *= lower_wick_ratio_ >= config.loc_set.point.wick_ratio\n","          if show_detail:\n","              sys_log.warning(\"lower_wick_ratio_ >= config.loc_set.point.wick_ratio : {:.5f} {:.5f} ({})\".format(lower_wick_ratio_[c_i], config.loc_set.point.wick_ratio, mr_res[c_i]))\n","              \n","      crr_ = res_df['crr_{}'.format(config.loc_set.point.tf_entry)].to_numpy()\n","      mr_res *= crr_ >= config.loc_set.point.crr\n","     \n","      if show_detail:\n","          sys_log.warning(\"crr_ >= config.loc_set.point.crr : {:.5f} {:.5f} ({})\".format(crr_[c_i], config.loc_set.point.crr, mr_res[c_i]))\n","\n","      b1_upper_wick_ratio_ = res_df['upper_wick_ratio_{}'.format(config.loc_set.point.wick_itv)].shift(itv_num).to_numpy()\n","      b1_lower_wick_ratio_ = res_df['lower_wick_ratio_{}'.format(config.loc_set.point.wick_itv)].shift(itv_num).to_numpy()\n","\n","      if ep_loc_side == OrderSide.SELL:\n","          upper_wick_ratio_ = res_df['upper_wick_ratio_{}'.format(config.loc_set.point.wick_itv)].to_numpy()\n","          mr_res *= upper_wick_ratio_ >= config.loc_set.point.wick_ratio\n","          if show_detail:\n","              sys_log.warning(\"upper_wick_ratio_ >= config.loc_set.point.wick_ratio : {:.5f} {:.5f} ({})\".format(upper_wick_ratio_[c_i], config.loc_set.point.wick_ratio, mr_res[c_i]))\n","      else:\n","          lower_wick_ratio_ = res_df['lower_wick_ratio_{}'.format(config.loc_set.point.wick_itv)].to_numpy()\n","          mr_res *= lower_wick_ratio_ >= config.loc_set.point.wick_ratio\n","          if show_detail:\n","              sys_log.warning(\"lower_wick_ratio_ >= config.loc_set.point.wick_ratio : {:.5f} {:.5f} ({})\".format(lower_wick_ratio_[c_i], config.loc_set.point.wick_ratio, mr_res[c_i]))\n","\n","    if config.loc_set.point.cppr != \"None\":   \n","      tf_entry = to_itvnum(config.loc_set.point.tf_entry)\n","      b1_cppr_ = res_df['b1_cppr_{}'.format(config.loc_set.point.tf_entry)].to_numpy()  # check b1's cppr in ep_loc\n","      if ep_loc_side == OrderSide.SELL:\n","        mr_res *= b1_cppr_ >= config.loc_set.point.cppr\n","        if show_detail:\n","            sys_log.warning(\"b1_cppr_ >= config.loc_set.point.cppr : {:.5f} {:.5f} ({})\".format(b1_cppr_[c_i], config.loc_set.point.cppr, mr_res[c_i]))\n","      else:\n","        mr_res *= b1_cppr_ <= -config.loc_set.point.cppr\n","        if show_detail:\n","            sys_log.warning(\"b1_cppr_ <= -config.loc_set.point.cppr : {:.5f} {:.5f} ({})\".format(b1_cppr_[c_i], config.loc_set.point.cppr, mr_res[c_i]))\n","            \n","    # ------------ candle_score ------------ #\n","    wick_score_list = literal_eval(config.loc_set.point.wick_score_list)\n","    if len(wick_score_list) != 0:\n","        score_itv_list = literal_eval(config.loc_set.point.score_itv_list)\n","        # ------ candle_score_v0 (1m initial tick 기준임) ------ #  Todo - higher timeframe 경우 back_data 사용해야함\n","        for wick_score_, score_itv_ in zip(wick_score_list, score_itv_list):\n","            wick_score = res_df['wick_score_{}'.format(score_itv_)].to_numpy()\n","            if ep_loc_side == OrderSide.SELL:\n","                mr_res *= wick_score <= -wick_score_\n","                if show_detail:\n","                    sys_log.warning(\"wick_score <= -wick_score_ : {:.5f} {:.5f} ({})\".format(wick_score[c_i], -wick_score_, mr_res[c_i]))\n","            else:\n","                mr_res *= wick_score >= wick_score_\n","                if show_detail:\n","                    sys_log.warning(\"wick_score >= wick_score_ : {:.5f} {:.5f} ({})\".format(wick_score[c_i], wick_score_, mr_res[c_i]))\n","            \n","\n","        # ------------------ swing_middle ------------------ #\n","        # ------------ 1. envelope ------------ #\n","\n","        # ------ a. dc ------ #\n","        # ep_loc check 기준 idx 가 entry 기준이라는 걸 명심\n","        if selection_id in ['v3_2']:\n","            hc_itv = '15T'\n","            dc_itv = '15T'\n","            shift_num = [0, to_itvnum(hc_itv)]\n","            div_res = [1, 0]\n","            for itv_num, res in zip(shift_num, div_res):\n","                close_ = res_df['close_{}'.format(hc_itv)].shift(itv_num).to_numpy()  # close_bar timein 사용하는 경우, 특수로 shift(0) 사용가능\n","                if ep_loc_side == OrderSide.SELL:\n","                    dc_lower_ = res_df['dc_lower_%s' % dc_itv].shift(itv_num).to_numpy()\n","                    mr_res *= (close_ < dc_lower_) == res\n","                else:\n","                    dc_upper_ = res_df['dc_upper_%s' % dc_itv].shift(itv_num).to_numpy()\n","                    mr_res *= (close_ > dc_upper_) == res\n","\n","        # ------------ 2. degree ------------ #\n","        # ------ a. norm_body_ratio ------ #\n","        if config.loc_set.zone.abs_ratio != \"None\":\n","            itv = config.loc_set.point.tf_entry\n","            abs_ratio_ = res_df['abs_ratio_{}'.format(itv)].to_numpy()\n","            mr_res *= abs_ratio_ >= config.loc_set.zone.abs_ratio\n","            # mr_res *= abs_ratio_ <= config.loc_set.zone.abs_ratio\n","\n","    # ------------ 2. imbalance_ratio ------------ #\n","    if config.loc_set.zone.ir != \"None\":\n","        itv = config.loc_set.point.tf_entry\n","        itv_num = to_itvnum(itv)\n","        if ep_loc_side == OrderSide.SELL:\n","            short_ir_ = res_df['short_ir_{}'.format(itv)].to_numpy()\n","            # short_ir_ = res_df['short_ir_{}'.format(itv)].shift(itv_num).to_numpy()\n","\n","            # mr_res *= short_ir_ >= config.loc_set.zone.ir     # greater\n","            mr_res *= short_ir_ <= config.loc_set.zone.ir  # lesser\n","            if show_detail:\n","                sys_log.warning(\n","                    \"short_ir_ <= config.loc_set.zone.ir : {:.5f} {:.5f} ({})\".format(short_ir_[c_i], config.loc_set.zone.ir, mr_res[c_i]))\n","        else:\n","            long_ir_ = res_df['long_ir_{}'.format(itv)].to_numpy()\n","            # long_ir_ = res_df['long_ir_{}'.format(itv)].shift(itv_num).to_numpy()\n","\n","            # mr_res *= long_ir_ >= config.loc_set.zone.ir\n","            mr_res *= long_ir_ <= config.loc_set.zone.ir\n","            if show_detail:\n","                sys_log.warning(\n","                    \"long_ir_ <= config.loc_set.zone.ir : {:.5f} {:.5f} ({})\".format(long_ir_[c_i], config.loc_set.zone.ir, mr_res[c_i]))\n","                \n","        # if selection_id in ['3_6']:\n","        #   itv, period1, period2 = config.loc_set.point.p1_itv0, config.loc_set.point.p1_period1, config.loc_set.point.p1_period2          \n","\n","        #   if ep_loc_side == OrderSide.SELL:\n","        #     high_5T = res_df['high_5T'].to_numpy()  # Todo, tf_entry - 1 open 기준이라 future_data 사용 가능\n","        #     short_base_ = res_df['short_base_{}{}{}'.format(itv, period1, period2)]\n","        #     mr_res *= high_5T < short_base_\n","        #     if show_detail:\n","        #         sys_log.warning(\n","        #             \"high_5T < short_base_ : {:.5f} {:.5f} ({})\".format(high_5T[c_i], short_base_[c_i], mr_res[c_i]))\n","        #   else:\n","        #     low_5T = res_df['low_5T'].to_numpy()  # Todo, tf_entry - 1 open 기준이라 future_data 사용 가능\n","        #     long_base_ = res_df['long_base_{}{}{}'.format(itv, period1, period2)]\n","        #     mr_res *= low_5T > long_base_\n","        #     if show_detail:\n","        #         sys_log.warning(\n","        #             \"low_5T > long_base_ : {:.5f} {:.5f} ({})\".format(low_5T[c_i], long_base_[c_i], mr_res[c_i]))'\n","        \n","        # ------ dc_base ------ #\n","        # if selection_id in ['4']:  # 'v3_3', 'v3_4',\n","        #   hc_itv = '5T'\n","        #   dc_itv = '5T'\n","        #   itv_num = to_itvnum(hc_itv)\n","        #   close_ = res_df['close_{}'.format(hc_itv)].shift(itv_num).to_numpy()   # 따라서 future_data 사용시, shifting 필요함\n","        #   if ep_loc_side == OrderSide.SELL:\n","        #     dc_lower_ = res_df['dc_lower_%s' % dc_itv].shift(itv_num).to_numpy()\n","        #     mr_res *= close_ < dc_lower_\n","        #   else:\n","        #     dc_upper_ = res_df['dc_upper_%s' % dc_itv].shift(itv_num).to_numpy()\n","        #     mr_res *= close_ > dc_upper_\n","\n","        # ------ ema ------ #\n","        # if selection_id in ['v5_2']: # 'v3'\n","        #   ema_5T = res_df['ema_5T'].to_numpy()\n","        #   if ep_loc_side == OrderSide.SELL:\n","        #     mr_res *= close < ema_5T\n","        #   else:\n","        #     mr_res *= close > ema_5T\n","        \n","        # ------ b. bb ------ #\n","        # close = res_df['close'].to_numpy()\n","\n","        # if selection_id in ['v3_3']:\n","        #   open = res_df['open'].to_numpy()\n","        #   if ep_loc_side == OrderSide.SELL:\n","        #     bb_lower_1m = res_df['bb_lower_1m'].to_numpy()\n","        #     # mr_res *= close <= bb_lower_1m\n","        #     mr_res *= open <= bb_lower_1m\n","        #   else:\n","        #     bb_upper_1m = res_df['bb_upper_1m'].to_numpy()\n","        #     # mr_res *= close >= bb_upper_1m\n","        #     mr_res *= open >= bb_upper_1m\n","\n","        if selection_id in ['4_1']:\n","            if ep_loc_side == OrderSide.SELL:\n","                bb_lower_15T = res_df['bb_lower_15T'].to_numpy()\n","                short_ep_ = res_df['short_ep_{}'.format(selection_id)].to_numpy()\n","                mr_res *= bb_lower_15T >= short_ep_\n","            else:\n","                bb_upper_15T = res_df['bb_upper_15T'].to_numpy()\n","                long_ep_ = res_df['long_ep_{}'.format(selection_id)].to_numpy()\n","                mr_res *= bb_upper_15T <= long_ep_\n","\n","        # if selection_id in ['v5_2']:\n","        #   bb_upper2_ = res_df['bb_upper2_%s' % config.loc_set.zone.bbz_itv].to_numpy()\n","        #   bb_lower2_ = res_df['bb_lower2_%s' % config.loc_set.zone.bbz_itv].to_numpy()\n","        #   if ep_loc_side == OrderSide.SELL:\n","        #     mr_res *= bb_upper2_ < close\n","        #   else:\n","        #     mr_res *= bb_lower2_ > close\n","\n","        # degree_list = literal_eval(config.loc_set.zone.degree_list)\n","        # if len(degree_list) != 0:\n","        # # if selection_id in ['v3_3', 'v3_4']:\n","        #   norm_close_15 = res_df['norm_close_15'].to_numpy()   # -> 이거 뭘로 만들었는지 불분명함,,\n","        #   b1_norm_close_15 = res_df['norm_close_15'].shift(15).to_numpy()\n","\n","        #   if ep_loc_side == OrderSide.SELL:\n","        #     mr_res *= norm_close_15 <= -degree_list[0]\n","        #     # mr_res *= b1_norm_close_15 <= -degree_list[1]\n","        #   else:\n","        #     mr_res *= norm_close_15 >= degree_list[0]\n","        #     # mr_res *= b1_norm_close_15 >= degree_list[1]\n","\n","        # ------ b. dc ------ #\n","        # if selection_id in ['v3_3']:\n","        #   if ep_loc_side == OrderSide.SELL:\n","        #     dc_lower_ = res_df['dc_lower_1m'].to_numpy()\n","        #     b1_dc_lower_ = res_df['dc_lower_1m'].shift(1).to_numpy()\n","        #     mr_res *= dc_lower_ < b1_dc_lower_\n","        #   else:\n","        #     dc_upper_ = res_df['dc_upper_1m'].to_numpy()\n","        #     b1_dc_upper_ = res_df['dc_upper_1m'].shift(1).to_numpy()\n","        #     mr_res *= dc_upper_ > b1_dc_upper_\n","\n","        # ------ c. sar ------ #\n","        # if selection_id in ['v3_3']:\n","        # sar_uptrend_3T = res_df['sar_uptrend_3T'].to_numpy()\n","        # if ep_loc_side == OrderSide.SELL:\n","        #   mr_res *= sar_uptrend_3T == 0\n","        # else:\n","        #   mr_res *= sar_uptrend_3T == 1"]},{"cell_type":"markdown","metadata":{"id":"JjKHyqftzhD7"},"source":["### set config (override available)"]},{"cell_type":"code","execution_count":8,"metadata":{"id":"q_4E-zH02WJy","executionInfo":{"status":"ok","timestamp":1658884054368,"user_tz":-540,"elapsed":5,"user":{"displayName":"7th June","userId":"08178289703395036410"}}},"outputs":[],"source":["#     caution : MARKET / LIMIT spelling   #\n","#      json doesn't support single quotes     #\n","\n","param_dict = {\n","  \"selection_id\": \"5_48\",\n","  \"trader_set\": {\n","    \"backtrade\": 0,\n","    \"back_data_path\": \"C:\\\\Users\\\\Lenovo\\\\PycharmProjects\\\\System_Trading\\\\JnQ\\\\candlestick_concated\\\\database_bn\\\\2022-02-17\\\\2022-02-17 ETHUSDT_1m.ftr\",\n","    \"start_datetime\": \"2020-09-05 00:00:59.999\",\n","    \"run\": 1,\n","    \"df_log\": 0,\n","    \"latest_index\": -1,\n","    \"complete_index\": -2,\n","    \"limit_fee\": 1e-10,\n","    \"market_fee\": 1e-10,\n","    \"initial_asset\": 24500,\n","    \"asset_changed\": 0,\n","    \"symbol\": \"ETHUSDT\",\n","    \"symbol_changed\": 0,\n","    \"itv_list\": \"['T', '3T', '5T', '15T', '30T', 'H', '4H']\",\n","    \"row_list\": \"[100, 50, 1, 1, 1, 50, 1]\",\n","    \"rec_row_list\": \"[1, 1, 1, 1, 1, 1, 1]\",\n","    \"offset_list\": \"['1h', '1h', '1h', '1h', '1h', '1h', '1h']\",\n","    \"bar_close_second\": 59,\n","    \"realtime_term\": 0.01,\n","    \"order_term\": 0.25,\n","    \"api_retry_term\": 1,\n","    \"check_entry_sec\": 10,\n","    \"entry_execution_wait\": 60,\n","    \"breakout_qty_ratio\": 0.97,\n","    \"qty_check_term\": 30,\n","    \"exit_execution_wait\": 60,\n","    \"close_complete_term\": 5,\n","    \"save_stacked_df\": 0,\n","    \"stacked_df_exist\": 1\n","  },\n","  \"pos_set\": {\n","    \"short_inversion\": 0,\n","    \"long_inversion\": 0,\n","    \"short_ban\": 0,\n","    \"long_ban\": 0\n","  },\n","  \"loc_set\": {      \n","    \"point1\": {\n","      \"exp_itv\": \"5T\",\n","      \"tf_entry\": \"15T\",\n","      \"candle_pattern\": \"CDLMARUBOZU\",\n","      \"short_spread\": \"None\",\n","      \"long_spread\": \"None\",\n","      \"short_tr_thresh\": \"None\",\n","      \"long_tr_thresh\": \"None\",\n","      \"short_wick_ratio\": \"None\",\n","      \"long_wick_ratio\": \"None\",\n","      \"wick_itv\": \"5T\",\n","      \"wrr_10\": \"None\",\n","      \"wrr_21\": \"None\",\n","      \"wrr_32\": 0.3,\n","      \"co_es\": \"None\",\n","      \"cu_es\": \"None\",\n","      \"crr\": \"None\",\n","      \"cppr\": \"None\",\n","      \"ppr\": \"None\",\n","      \"wbr\": \"None\",\n","      \"dbr\": \"None\",\n","      \"dbr2\": \"None\",\n","      \"brr\": \"None\",\n","      \"ir\": \"None\",\n","      \"abs_ratio\": \"None\"\n","    },\n","    \"point2\": {\n","      \"wrr_32\": \"None\",\n","      \"csdbox_range\": 0.3,\n","      \"csd_period\": \"None\"\n","    },\n","    \"zone1\": {\n","      \"use_zone\": 0,\n","      \"base_roll_period\": 50,\n","      \"degree_list\": \"[]\",\n","      \"dtk_itv\": \"5T\",\n","      \"dt_k\": \"None\",\n","      \"dc_period\": 135,\n","      \"use_dtk_line\": 0,\n","      \"zone_dt_k\": 0.4,\n","      \"zone_dc_period\": 135\n","    },\n","    \"zone2\": {\n","      \"use_zone\": 0\n","    }\n","  },\n","  \"tr_set\": {\n","    \"check_hlm\": 0,\n","    \"wave_itv1\" : \"T\",\n","    \"wave_period1\": 20,\n","    \"wave_length1\": \"None\",\n","    \"wave_spread1\": \"None\",\n","    \"wave_itv2\" : \"T\",    \n","    \"wave_period2\": 20,\n","    \"wave_greater1\": 0,\n","    \"wave_greater2\": 0,\n","    \"wave_lesser1\": 2,\n","    \"wave_lesser2\": 2,\n","    \"expire_k1\": 0.0,\n","    \"expire_k2\": 0.0,\n","    \"expire_tick\": \"None\",\n","    \"p2_box_k1\" : 0,\n","    \"p2_box_k2\" : 0,\n","    \"p1p2_low\": 0.0,\n","    \"tp_gap\": 0.0,\n","    \"ep_gap1\": -0.12,\n","    \"ep_gap2\": -0.12,\n","    \"out_gap\": 0,\n","    \"decay_gap\": \"None\",\n","    \"c_ep_gap\": \"None\",\n","    \"t_out_gap\": \"None\",\n","    \"wb_tp_gap\": 0,\n","    \"wb_out_gap\": 0,\n","    \"bias_info_tick\": 30000\n","  },\n","  \"ep_set\": {\n","    \"entry_type\": \"LIMIT\",\n","    \"static_ep\": 1,\n","    \"point2\": {\n","      \"entry_type\": \"MARKET\"\n","    }\n","  },\n","  \"tp_set\": {\n","    \"non_tp\": 0,\n","    \"static_tp\": 1,\n","    \"tp_onexec\": 0,\n","    \"decay_term\": 60,\n","    \"p_ranges\": \"[1]\",\n","    \"p_qty_ratio\": \"[1]\"\n","  },\n","  \"out_set\": {\n","    \"hl_out\": 1,\n","    \"static_out\": 1,\n","    \"out_onexec\": 0,\n","    \"tf_exit\": \"None\",\n","    \"rsi_exit\": 0\n","  },\n","  \"lvrg_set\": {\n","    \"static_lvrg\": 1,\n","    \"leverage\": 5,\n","    \"target_pct\": 0.03,\n","    \"allow_float\": 0,\n","    \"lvrg_rejection\": 0\n","  }\n","}\n","\n","config = EasyDict(param_dict)"]},{"cell_type":"markdown","metadata":{"id":"MuD_2vY7TI_8"},"source":["#### legacy"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"EKag94Y2TMCO"},"outputs":[],"source":[",\n","      \"hc_itv\": 60,\n","      \"osc_band\": 20\n","      \n","      \"wick_score_list\": \"[]\",\n","      \"body_score_list\": \"[]\",\n","      \"score_itv_list\": \"[]\",,\n","\n","      \"wick_score_list\": \"[]\",\n","      \"body_score_list\": \"[]\",\n","      \"score_itv_list\": \"['T']\""]},{"cell_type":"markdown","metadata":{"id":"rLI8unIyroiC"},"source":["## run"]},{"cell_type":"code","execution_count":11,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":655,"status":"ok","timestamp":1658884119156,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"qBJfPsmJzVIr","outputId":"b692c674-4025-445a-9099-a248402b4ca4"},"outputs":[{"output_type":"stream","name":"stdout","text":["\"5_48\" {\n"," \"point1\": {\n","  \"exp_itv\": \"5T\",\n","  \"tf_entry\": \"15T\",\n","  \"candle_pattern\": \"CDLMARUBOZU\",\n","  \"short_spread\": \"None\",\n","  \"long_spread\": \"None\",\n","  \"short_tr_thresh\": \"None\",\n","  \"long_tr_thresh\": \"None\",\n","  \"short_wick_ratio\": \"None\",\n","  \"long_wick_ratio\": \"None\",\n","  \"wick_itv\": \"5T\",\n","  \"wrr_10\": \"None\",\n","  \"wrr_21\": \"None\",\n","  \"wrr_32\": 0.3,\n","  \"co_es\": \"None\",\n","  \"cu_es\": \"None\",\n","  \"crr\": \"None\",\n","  \"cppr\": \"None\",\n","  \"ppr\": \"None\",\n","  \"wbr\": \"None\",\n","  \"dbr\": \"None\",\n","  \"dbr2\": \"None\",\n","  \"brr\": \"None\",\n","  \"ir\": \"None\",\n","  \"abs_ratio\": \"None\"\n"," },\n"," \"point2\": {\n","  \"wrr_32\": \"None\",\n","  \"csdbox_range\": 0.3,\n","  \"csd_period\": \"None\"\n"," },\n"," \"zone1\": {\n","  \"use_zone\": 0,\n","  \"base_roll_period\": 50,\n","  \"degree_list\": \"[]\",\n","  \"dtk_itv\": \"5T\",\n","  \"dt_k\": \"None\",\n","  \"dc_period\": 135,\n","  \"use_dtk_line\": 0,\n","  \"zone_dt_k\": 0.4,\n","  \"zone_dc_period\": 135\n"," },\n"," \"zone2\": {\n","  \"use_zone\": 0\n"," }\n","} {\n"," \"check_hlm\": 0,\n"," \"wave_itv1\": \"T\",\n"," \"wave_period1\": 20,\n"," \"wave_length1\": \"None\",\n"," \"wave_spread1\": \"None\",\n"," \"wave_itv2\": \"T\",\n"," \"wave_period2\": 20,\n"," \"wave_greater1\": 0,\n"," \"wave_greater2\": 0,\n"," \"wave_lesser1\": 2,\n"," \"wave_lesser2\": 2,\n"," \"expire_k1\": 0.0,\n"," \"expire_k2\": 0.0,\n"," \"expire_tick\": \"None\",\n"," \"p2_box_k1\": 0,\n"," \"p2_box_k2\": 0,\n"," \"p1p2_low\": 0.0,\n"," \"tp_gap\": 0.0,\n"," \"ep_gap1\": -0.12,\n"," \"ep_gap2\": -0.12,\n"," \"out_gap\": 0,\n"," \"decay_gap\": \"None\",\n"," \"c_ep_gap\": \"None\",\n"," \"t_out_gap\": \"None\",\n"," \"wb_tp_gap\": 0,\n"," \"wb_out_gap\": 0,\n"," \"bias_info_tick\": 30000\n","} {\n"," \"entry_type\": \"LIMIT\",\n"," \"static_ep\": 1,\n"," \"point2\": {\n","  \"entry_type\": \"MARKET\"\n"," }\n","} {\n"," \"non_tp\": 0,\n"," \"static_tp\": 1,\n"," \"tp_onexec\": 0,\n"," \"decay_term\": 60,\n"," \"p_ranges\": \"[1]\",\n"," \"p_qty_ratio\": \"[1]\"\n","} {\n"," \"hl_out\": 1,\n"," \"static_out\": 1,\n"," \"out_onexec\": 0,\n"," \"tf_exit\": \"None\",\n"," \"rsi_exit\": 0\n","} {\n"," \"static_lvrg\": 1,\n"," \"leverage\": 5,\n"," \"target_pct\": 0.03,\n"," \"allow_float\": 0,\n"," \"lvrg_rejection\": 0\n","} "]}],"source":["# funcs = [expire_v2, ep_loc_point2_v2, lvrg_set]  # expire for p1 & p2\n","funcs = [expiry_p1, expiry_p2, lvrg_set]     # expire for p1-only\n","# funcs = [expire_v0, ep_loc_point2_v2, lvrg_set]  # expire for v3\n","\n","id_idx_list = [0]  # ID_arr 에서 import 할 id_idx 선택\n","public_override = 1\n","utils_override = 1\n","config_override = 1\n","\n","# ------ config_list 와 같은 org_var 에 override 하는거 다시 생각하기 ------ #\n","ID_list = ID_arr[id_idx_list]\n","utils_list = utils_arr[id_idx_list]\n","config_list = config_arr[id_idx_list]\n","\n","if config_override or utils_override:\n","  assert len(config_list) == 1\n","  if config_override:    \n","    config_list[0] = config\n","    ID_list[0] = config.selection_id\n","  \n","config = config_list[0]  # base config = config_list[0]\n","tp_fee, out_fee = calc_tp_out_fee_v2(config)   # -> rev_pr 때문에 일단 이곳에도 선언함\n","\n","# ------- inversion set ------- #\n","inversion = 0\n","fdist_thresh = 1\n","# ------- plot param ------- #\n","show_detail = 0\n","# ------- temp param ------- #\n","allow_osc_touch = 0\n","rsi_gap = 5\n","\n","# ------- just printing config ------- #\n","_ = [print(json.dumps(config[key_], indent=1), end=' ') for key_ in ['selection_id', 'loc_set', 'tr_set', 'ep_set', 'tp_set', 'out_set', 'lvrg_set']] #  'trader_set',"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"afUV2b1jaggN"},"outputs":[],"source":["# config.trader_set.start_datetime = \"2020-09-05 00:00:59.999\" #  \"2020-09-05 00:00:59.999\" # 2022-02-01 16:34:59.999000 2022-01-14 16:34:59.999000  \"2020-09-05 00:00:59.999\" \"2022-01-10 00:00:59.999\" \"2021-10-04 02:39:59.999000\"\n","# ------ p1_hhm 의 경우 out_box 를 위해 wave_itv 1 & 2 를 동일하게 설정해야함 ------ #\n","# config_list[0].tr_set.wave_itv1 = 'T'\n","# config_list[0].tr_set.wave_period1 = 20 \n","config_list[0].tr_set.wave_itv2 = 'T'\n","config_list[0].tr_set.wave_period2 = 20"]},{"cell_type":"code","execution_count":12,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":2872,"status":"ok","timestamp":1658884125729,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"WstWVNihCNH8","outputId":"8b1df5fd-787d-45aa-d432-bb94d8f7168a"},"outputs":[{"output_type":"stream","name":"stdout","text":["public_indi elapsed time : 1.149094820022583\n","make data_list elapsed time : 0.00016880035400390625\n"]}],"source":["# ------ slicing res_df ------ #\n","res_df = res_df_.loc[pd.to_datetime(config.trader_set.start_datetime):]\n","\n","np_timeidx = np.array([intmin_np(date_) for date_ in res_df.index.to_numpy()])\n","\n","# ------------ public_indi ------------ # - 딱히 반복될 이유가 없는 phase - annot. 달때, why 까지 적어주면 좋음\n","start_0 = time.time()\n","if public_override:\n","    res_df = public_indi(res_df, config_list[0], np_timeidx)  # 현재 대부분의 시간은 h_candle 에서 소비되고 있음\n","else:\n","    res_df = utils_public.public_indi(res_df, config_list[0], np_timeidx)\n","print(\"public_indi elapsed time :\", time.time() - start_0)\n","\n","# ------------ make data_list ------------ # - 반복될 이유가 없는 phase - public_indo 에 종속\n","start_0 = time.time()\n","ohlc_cols = ['open', 'high', 'low', 'close']\n","ohlc_list = [res_df[col_].to_numpy() for col_ in ohlc_cols]\n","print(\"make data_list elapsed time :\", time.time() - start_0)"]},{"cell_type":"markdown","metadata":{"id":"RqRF1eyZ0xBL"},"source":["### idep_plot"]},{"cell_type":"code","execution_count":13,"metadata":{"id":"_iYcJk8nK8Yq","executionInfo":{"status":"ok","timestamp":1658884133747,"user_tz":-540,"elapsed":1169,"user":{"displayName":"7th June","userId":"08178289703395036410"}}},"outputs":[],"source":["# ------ edit utils config ------ #\n","config_list[0].tr_set.check_hlm = 0\n","# config_list[0].loc_set.point.candle_pattern = talib.get_function_groups()['Pattern Recognition'][51]   # \"None\" # 0.5 0.7\n","# config_list[0].pos_set.short_ban = 0\n","# config_list[0].pos_set.long_ban = 0\n","# config_list[0].tr_set.wave_lesser = 3\n","config_list[0].tr_set.wave_length1 = \"None\"  # \"None\" 15 110 0 \n","# config_list[0].tr_set.wave_spread1 = \"None\"  # \"None\" 15 110 0 \n","# config_list[0].tr_set.wave_greater1 = 0  # 0 50 \n","# config_list[0].tr_set.wave_greater2 = 0  # 10\n","# config_list[0].tr_set.p1_period1 = 5\n","# config_list[0].tr_set.p1_period2 = 5\n","# # config_list[0].tr_set.p2_period1 = 20\n","# # config_list[0].tr_set.p2_period2 = 20\n","config_list[0].ep_set.entry_type = \"MARKET\" # \"LIMIT\" # \"MARKET\"\n","config_list[0].ep_set.point2.entry_type = \"MARKET\" # \"LIMIT\" # \"MARKET\"\n","# config_list[0].tr_set.tp_gap = 0.5\n","config_list[0].tr_set.ep_gap1 = -0.12 # -0.618 -0.23 -0.382 0.19 0.8 -0.12 -0.26\n","# config_list[0].tr_set.ep_gap2 = -0.12 # -0.618 -0.23 -0.382 0.19 \n","# config_list[0].tr_set.out_gap = 0.0  # 0 -0.35\n","# config_list[0].tr_set.wb_tp_gap = 0.5\n","# config_list[0].tr_set.wb_out_gap = -0.0\n","# config_list[0].tr_set.bias_info_tick = 30000\n","# config_list[0].trader_set.limit_fee = 1e-10\n","# config_list[0].trader_set.market_fee = 1e-10\n","# config_list[0].trader_set.limit_fee = 0.0002\n","# config_list[0].trader_set.market_fee = 0.0004\n","# config_list[0].loc_set.point.short_wick_ratio = 0.2 # \"None\" # 2.5\n","# config_list[0].loc_set.point.long_wick_ratio = 0.2 # \"None\" # 2.5\n","# config_list[0].loc_set.point.crr = 0.5"]},{"cell_type":"code","execution_count":14,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":6,"status":"ok","timestamp":1658884135489,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"iI39YI_5GguK","outputId":"ca855d72-b160-448b-9bd3-058070220564"},"outputs":[{"output_type":"stream","name":"stderr","text":["wave_point\n","np.sum(short_open_res1 == 1) : 42048\n","np.sum(long_open_res1 == 1) : 42240\n","np.sum(short_open_res2 == 1) : 42240\n","np.sum(long_open_res2 == 1) : 42048\n","reject update_hl\n","np.sum(short_open_res1 == 1) : 40427\n","np.sum(long_open_res1 == 1) : 40130\n","wave_mm\n","np.sum(short_open_res1 == 1) : 40425\n","np.sum(long_open_res1 == 1) : 40128\n","point validation\n","np.sum(short_open_res1 == 1) : 28319\n","np.sum(long_open_res1 == 1) : 28683\n"]},{"output_type":"stream","name":"stdout","text":["enlist_tr elapsed time : 0.2772085666656494\n"]}],"source":["if utils_override:   # 현재, utils_override 하는 경우 1개의 ID 만 허용함 \n","  # start_0 = time.time()\n","  # res_df = enlist_rtc(res_df, config_list[0], np_timeidx)\n","  # print(\"enlist_rtc elapsed time :\", time.time() - start_0)\n","  start_0 = time.time()\n","  res_df = enlist_tr(res_df, config_list[0], np_timeidx)    # 36995.0 -> 152766.0 # 4044 np.sum(long_open_res == 1) : 4325\n","  print(\"enlist_tr elapsed time :\", time.time() - start_0)\n","else:\n","    start_0 = time.time()\n","    for utils_, config_ in zip(utils_list, config_list):\n","        # res_df = utils_.enlist_rtc(res_df, config_, np_timeidx)\n","        res_df = utils_.enlist_tr(res_df, config_, np_timeidx)\n","    print(\"elapsed time :\", time.time() - start_0)"]},{"cell_type":"code","execution_count":15,"metadata":{"id":"gfDSOGMd91rE","executionInfo":{"status":"ok","timestamp":1658884138268,"user_tz":-540,"elapsed":6,"user":{"displayName":"7th June","userId":"08178289703395036410"}}},"outputs":[],"source":["# ------ edit loc_set config ------ #\n","config_list[0].loc_set.point1.wrr_10 = \"None\" # \"None\" 0.3\n","config_list[0].loc_set.point1.wrr_21 = \"None\" # \"None\" \n","config_list[0].loc_set.point1.wrr_32 = 0.3 # \"None\" 1 0.5 0.482 0.302\n","config_list[0].loc_set.point2.wrr_32 = \"None\" # \"None\" 1 0.5 0.382 0.302 0.25\n","config_list[0].loc_set.point2.csd_period = \"None\"  # \"None\" 100\n","config_list[0].loc_set.zone1.use_zone = 0\n","config_list[0].loc_set.zone1.bb_trend_period = 150\n","# config_list[0].loc_set.zone1.hl_loc_pct = \"None\" # \"None\" 1 0.5\n","config_list[0].loc_set.zone2.use_zone = 0\n","# config_list[0].loc_set.point1.cu_es = \"None\" # \"None\" # -2\n","# config_list[0].loc_set.point1.co_es = \"None\" # \"None\" # -3\n","# config_list[0].loc_set.point1.cppr = 0.5   # \"None\" # 0.5 0.7\n","# config_list[0].loc_set.point1.wbr = \"None\" # 0.7\n","# config_list[0].loc_set.point1.dbr = \"None\"   # 0.7\n","# config_list[0].loc_set.point1.dbr2 = \"None\"  # 0.7\n","# config_list[0].loc_set.point1.brr = \"None\"   # 0.8\n","# config_list[0].loc_set.point1.ir = \"None\" # \"None\" 0.8\n","# config_list[0].loc_set.point1.wick_score_list = \"[]\"\n","# config_list[0].loc_set.point1.score_itv_list = \"['H']\"\n","# # config_list[0].loc_set.point1.abs_ratio = \"None\"  # 0.7\n","config_list[0].loc_set.point1.short_tr_thresh = \"None\"  #  \"None\" 0.5 2 0.8 # # 0.7 # tr_thresh 엄청 민감함\n","config_list[0].loc_set.point1.long_tr_thresh = 0.2  #  \"None\" 2 0.8 ## 0.7\n","# # config_list[0].loc_set.zone1.base_roll_period = 60"]},{"cell_type":"code","execution_count":16,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":2080,"status":"ok","timestamp":1658884140343,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"9DPgykxQ92mU","outputId":"03dc9c4b-bece-474f-c303-04c76d8cb796"},"outputs":[{"output_type":"stream","name":"stderr","text":["cu_wrr_32_ <= config.loc_set.point1.wrr_32 : 0.54867 0.30000 (0.0)\n","co_wrr_32_ <= config.loc_set.point1.wrr_32 : 1.00000 0.30000 (0.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 1.1406283378601074\n","get_open_info_df elapsed time : 1.1954741477966309\n"]}],"source":["open_info_df1 = get_open_info_df_v2(ep_loc_p1_v3, res_df, np_timeidx, ID_list, config_list, id_idx_list, open_num=1)  # --> point * dur. 관련 (loc_set) param 에 종속 (open_info 가 변경되는게 아니라면, 재실행할 필요없음)\n","open_info_df2 = get_open_info_df_v2(ep_loc_p2_v3, res_df, np_timeidx, ID_list, config_list, id_idx_list, open_num=2)\n","open_info_df_list = [open_info_df1, open_info_df2]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"KqVkg236t_f2"},"outputs":[],"source":["# ------ edit entry & exit (ep, tp, out, ..) config ------ #\n","# config_list[0].tr_set.expire_k = -0.5\n","# config_list[0].tr_set.expire_tick = \"None\"\n","config_list[0].tr_set.p2_box_k1 = 0.0  # 0 ~ 1 사이 값 사용 tp_1 로부터 떨어지는 거리\n","config_list[0].tr_set.p2_box_k2 = 0.0  # 0.5 0 --> \"None\" 불가, 0 ~ 1 사이 값 사용 tp_0 로부터 떨어지는 거리, 본디 p2_box 는 p1_box 내부에 존재해야, 정확한 hhm 이 측정가능해짐\n","config_list[0].tr_set.p1p2_low = 0.5  # 0.5 0.7 0  0 is equal to \"None\", 마찬가지로 tp_0 로부터 떨어지는 거리\n","config_list[0].loc_set.point2.short_tr_thresh = \"None\"  #  \"None\" 0.5 2 0.8 # # 0.7 # tr_thresh 엄청 민감함\n","config_list[0].loc_set.point2.long_tr_thresh = 2  #  \"None\" 2 0.8 ## 0.7\n","# # # config_list[0].ep_set.point2.entry_type = \"LIMIT\"\n","# # # config_list[0].ep_set.point2.wick_score_list = str([])\n","# # # config_list[0].tp_set.static_tp = 1\n","# # # config_list[0].tp_set.non_tp = 0 # 0 1\n","# config_list[0].tp_set.p_ranges = \"[1]\"\n","# config_list[0].tp_set.p_qty_ratio = \"[1]\"\n","# config_list[0].tp_set.p_ranges = \"[0.2, 0.66, 1]\"\n","# config_list[0].tp_set.p_qty_ratio = \"[0.25, 0.25, 0.5]\"\n","# config_list[0].tp_set.p_ranges = \"[0.66, 1]\"\n","# config_list[0].tp_set.p_qty_ratio = \"[0.3, 0.7]\"\n","# # # config_list[0].out_set.hl_out = 1\n","# # # config_list[0].out_set.tf_exit = \"None\" # 15 \"None\"\n","config_list[0].lvrg_set.static_lvrg = 1\n","config_list[0].lvrg_set.leverage = 1\n","config_list[0].lvrg_set.target_pct = 0.03 # 0.1 0.03\n","# # config_list[0].lvrg_set.allow_float = 0\n","# config_list[0].lvrg_set.lvrg_rejection = 0"]},{"cell_type":"code","source":["test_ratio = 0.0\n","short_pr, short_obj, short_lvrg_arr, short_fee_arr, short_tpout_arr, short_tr_arr, short_bias_arr, short_net_p1_bias_tick, short_p2exec_p1_bias_tick, short_net_p1_idx_arr, short_p2_idx_arr, short_tp_1, short_tp_0, short_out_1, short_out_0, short_ep2_0, \\\n","      long_pr, long_obj, long_lvrg_arr, long_fee_arr, long_tpout_arr, long_tr_arr, long_bias_arr, long_net_p1_bias_tick, long_p2exec_p1_bias_tick, long_net_p1_idx_arr, long_p2_idx_arr, long_tp_1, long_tp_0, long_out_1, long_out_0, long_ep2_0 = \\\n","get_res_v9(res_df, open_info_df_list, ohlc_list, config_list, np_timeidx, funcs, test_ratio=test_ratio, plot_is=1, signi=0, show_detail=0)   # open 이 많을 수록 en_ex_pairing elapsed time : 11.58370590209961"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":681},"id":"TvGs5mBxsuBK","executionInfo":{"status":"ok","timestamp":1658886606674,"user_tz":-540,"elapsed":3424,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"84d8e24e-fa6a-426f-f59c-839d8cd5ac0a"},"execution_count":30,"outputs":[{"output_type":"stream","name":"stdout","text":["en_ex_pairing elapsed time : 0.6355669498443604\n","short_net_p1_bias_tick, long_net_p1_bias_tick, short_p2exec_p1_bias_tick, long_p2exec_p1_bias_tick : 129.93051359516616 116.48041775456919 129.93051359516616 116.48041775456919\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1728x576 with 6 Axes>"],"image/png":"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bNkyu3btmuXn55t0/eP/VqxYYWZmV69etRMnToTeBw8aNMjMzFJTU0PtTZkyxaqqqtr93BGEPJAAQXgmlixZYmvXrjVJtnfv3tAboocfftiuXr1qFy9eDMXly5dDBW/o0KG2detWq62ttfr6erty5Yp98sknoXbNzL7zne+0SY7xTMz++te/tn/9619R15eXl9vjjz9+w2PyzjvvRFwXCASssbHR7r777nY/dwRBEIS3w6s19qWXXrIXXngh9DjWxOzIkSPNzOwHP/hBaNmzzz7b7E2sdOOJ2cceeyzqm8F+/frZ559/bkuXLm33c0YQBEH4I7xaYydPnmx1dXU2ZswY69Kli917771WU1NjI0aMiPm8SBOz0vW/ci0uLra6ujpbsWKFFRcX2+zZs02S/eY3v7HPPvvMMjIyLCkpyebOnWsnTpyw7t27h/5i1vnZtj/96U/5i1nCK9HuCRCEZyIjI8MuXrxo3/ve9+zSpUuh/64xfvx4Ky8vj/q8nTt32h/+8Afr1auXSdf/pXHPnj2h9W35uazxTMweO3bMnnjiiYjrvv/971tjY2Mo52ixePFi27RpU8R1gUDAGhoa7J577mn3c0cQBEF4O7xaYw8dOmTnz5+32tpaq62tta+++souXLhgixcvbrFt9+7d7csvv2z2hZqLFi2Ke2J2x44dtnz58hbL09PTrbCw0H7729+2+/kiCIIg/BNerbHPPfdcixq5efNme+6552I+L9rErDPS0tKsoaHBsrOzTZJt3bo19LEGwbh48aKNGTPGpOufMRv8q2JJtnz5cj5jlvBEBAQgpLq6WgUFBfr73/+uTZs26csvv5QkHThwQA0NDVq8eLG6deumQCCg7373u7r33nslSb1799bly5fV2Nio7OxsPfnkk22eW0pKilJTU1v8Hs2ECROUkZGhjRs3Rlw/d+5cbdq0SY2Njc2Wz5w5U+np6ZKknJwcPf3003rvvfckScOHD9eIESMUCATUs2dP/fGPf1R1dbVKS0tvdfcAAB2cV2vs5MmTdffdd2vkyJEaOXKkampq9Itf/EKvvfZai23/+9//6q233tLixYvVq1cvZWRkaMGCBXr//fdD26SmpoZqtPP3oIyMDE2aNEl/+9vfmi3v3bu3tm/frs8++0zPP/98m+4jAKBj82qNLSgoUG5urkaMGCFJGjlypHJzc3Xk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\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["idep_plot elapsed time : 1.5663554668426514\n"]}]},{"cell_type":"code","execution_count":null,"metadata":{"id":"8lYgsqH-rfAM"},"outputs":[],"source":["# ------ inversion ------ #\n","_ = get_res_v5(res_df, open_info_df, ohlc_list, config_list, np_timeidx, funcs, inversion=True, test_ratio=test_ratio, plot_is=1, signi=False)"]},{"cell_type":"markdown","metadata":{"id":"n6gc7lERC4VE"},"source":["### statistics (stem 별로 진행)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"HHjIdn2MC4VE"},"outputs":[],"source":["selection_id = config.selection_id\n","\n","short_p1_idx = short_obj[-1].astype(int)\n","long_p1_idx = long_obj[-1].astype(int)\n","\n","short_open_tp_1 = res_df['short_tp_1_{}'.format(selection_id)].to_numpy()[short_p1_idx]\n","long_open_tp_1 = res_df['long_tp_1_{}'.format(selection_id)].to_numpy()[long_p1_idx]\n","\n","short_open_tp_0 = res_df['short_tp_0_{}'.format(selection_id)].to_numpy()[short_p1_idx]\n","long_open_tp_0 = res_df['long_tp_0_{}'.format(selection_id)].to_numpy()[long_p1_idx]\n","\n","short_open_tp_gap = res_df['short_tp_gap_{}'.format(selection_id)].to_numpy()[short_p1_idx]  # use open_i\n","long_open_tp_gap = res_df['long_tp_gap_{}'.format(selection_id)].to_numpy()[long_p1_idx]\n","\n","short_open_out_0 = res_df['short_out_0_{}'.format(selection_id)].to_numpy()[short_p1_idx]\n","long_open_out_0 = res_df['long_out_0_{}'.format(selection_id)].to_numpy()[long_p1_idx]\n","\n","short_open_out_gap = res_df['short_out_gap_{}'.format(selection_id)].to_numpy()[short_p1_idx]  # use open_i\n","long_open_out_gap = res_df['long_out_gap_{}'.format(selection_id)].to_numpy()[long_p1_idx]\n","\n","# ------ out case 의 max_high check (long) ------ #\n","short_max_tpg = get_max_tpg_v2(OrderSide.SELL, ohlc_list, short_pr, short_obj[:4], short_open_tp_1, short_open_tp_gap)\n","long_max_tpg = get_max_tpg_v2(OrderSide.BUY, ohlc_list, long_pr, long_obj[:4], long_open_tp_1, long_open_tp_gap)\n","# short_max_tpg = get_max_tpg_v2(OrderSide.SELL, ohlc_list, short_pr, short_obj[:4], short_open_tp_1, short_open_out_gap)\n","# long_max_tpg = get_max_tpg_v2(OrderSide.BUY, ohlc_list, long_pr, long_obj[:4], long_open_tp_1, long_open_out_gap)\n","\n","# ------ true_bias 의 outg 확인 ------ # --> 추후, outg 로 tp_gap / out_gap custom 여부를 위해, 본 cell 을 지우지 않음\n","short_max_outg = get_max_outg_v4(OrderSide.SELL, config, ohlc_list, short_obj, short_tpout_arr, short_open_tp_0, short_open_tp_gap)  # tp_box's mean_low 확인 위해 tp_gap 입력함\n","long_max_outg = get_max_outg_v4(OrderSide.BUY, config, ohlc_list, long_obj, long_tpout_arr, long_open_tp_0, long_open_tp_gap)\n","\n","current_tpg = config.tr_set.tp_gap\n","current_outg = config.tr_set.out_gap"]},{"cell_type":"markdown","metadata":{"id":"tOFkzUX2imQu"},"source":["#### consecutive dur. value survey on bias"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"CgvSrXaZEkMZ"},"outputs":[],"source":["res_df.dtypes"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"gnSvYKIzC4VF"},"outputs":[],"source":["# ------------ dependent vars. ------------ #\n","# res_df 에 존재하는 col 는 모두 사용가능함\n","\n","# ------ 1. 도출한 outg 와 vars. pairing 진행 (by valid_idx) ------ #\n","devided_cols, public_cols = [], []\n","\n","devided_cols.append('tr_{}'.format(selection_id))\n","\n","devided_cols.append('wave_length_fill_{}{}'.format(wave_itv1, wave_period1))\n","devided_cols.append('wave_spread_fill_{}{}'.format(wave_itv1, wave_period1))\n","\n","wave_itv1 = 'T'\n","wave_period1 = config.tr_set.wave_period1\n","\n","# public_cols.append('cu_wrr_21_{}{}'.format(wave_itv1, wave_period1))\n","public_cols.append('cu_wrr_32_{}{}'.format(wave_itv1, wave_period1))\n","# public_cols.append('co_wrr_21_{}{}'.format(wave_itv1, wave_period1))\n","public_cols.append('co_wrr_32_{}{}'.format(wave_itv1, wave_period1))\n","\n","# public_cols.append('wave_high_terms_cnt_fill_T5')\n","# public_cols.append('wave_low_terms_cnt_fill_T5')\n","# public_cols.append('wave_high_loc_pct_T5')\n","# public_cols.append('wave_low_loc_pct_T5')\n","\n","# public_cols.append('b1_co_es_15T1')\n","# public_cols.append('b1_cu_es_15T1')\n","# public_cols.append('b1_upper_wick_ratio_15T')\n","# public_cols.append('b1_lower_wick_ratio_15T')\n","\n","#  'co_wrr_T5', 'cu_wrr_T5', 'b1_cppr_15T', 'b1_updbr', 'b1_lwdbr', 'b1_updbr_cppr', 'b1_lwdbr_cppr' 'abs_ratio_5T', 'rel_ratio_5T', 'body_rel_ratio_5T'\n","\n","# devided_cols = ['tr_{}'.format(selection_id)]  # , 'ir_5T'\n","# public_cols = ['wave_high_terms_cnt_fill_T5', 'wave_low_terms_cnt_fill_T5', 'wave_high_loc_pct_T5', 'wave_low_loc_pct_T5', \n","#                'b1_co_es_15T1', 'b1_cu_es_15T1', 'b1_upper_wick_ratio_15T', 'b1_lower_wick_ratio_15T']\n","\n","short_datas = [res_df['short_' + col].to_numpy() for col in devided_cols] + [res_df[col].to_numpy() for col in public_cols]\n","long_datas = [res_df['long_' + col].to_numpy() for col in devided_cols] + [res_df[col].to_numpy() for col in public_cols]\n","\n","titles = devided_cols + public_cols"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"elapsed":4479,"status":"ok","timestamp":1658034578976,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"Sahvc-R0jD1A","outputId":"d8b458c5-24c9-40d3-cc1d-5672d1432ae9"},"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/numpy/core/fromnumeric.py:3208: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.\n","  return asarray(a).size\n","/usr/local/lib/python3.7/dist-packages/matplotlib/cbook/__init__.py:1376: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.\n","  X = np.atleast_1d(X.T if isinstance(X, np.ndarray) else np.asarray(X))\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1008x1800 with 20 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["plt.style.use(['dark_background', 'fast'])\n","fig = plt.figure(figsize=(14, len(titles) * 5))\n","nrows, ncols = len(short_datas), 1\n","gs = gridspec.GridSpec(nrows=nrows,  # row 부터 index 채우고 col 채우는 순서임 (gs_idx)\n","                        ncols=ncols\n","                        )\n","\n","num_samples = 30\n","alpha = 0.8\n","xmin = 0\n","xmax = 10\n","\n","for ings_idx, (title, short_data, long_data) in enumerate(zip(titles, short_datas, long_datas)):\n","  inner_gs = gs[ings_idx].subgridspec(nrows=2, ncols=2)\n","\n","  short_open_data = short_data[short_p1_idx]\n","  long_open_data = long_data[long_p1_idx]\n","\n","  short_true_data = short_open_data[short_bias_arr.ravel()]\n","  # short_false_data = short_open_data[short_false_bias_arr.ravel()]\n","  short_false_data = short_open_data[~short_bias_arr.ravel()]\n","  long_true_data = long_open_data[long_bias_arr.ravel()]\n","  # long_false_data = long_open_data[long_false_bias_arr.ravel()]\n","  long_false_data = long_open_data[~long_bias_arr.ravel()]\n","  \n","  short_true_valid_idx = np.ones_like(short_true_data).astype(bool)\n","  short_false_valid_idx = np.ones_like(short_false_data).astype(bool)\n","  long_true_valid_idx = np.ones_like(long_true_data).astype(bool)\n","  long_false_valid_idx = np.ones_like(long_false_data).astype(bool)\n","\n","  short_true_valid_idx *= ~np.isinf(short_true_data)\n","  short_false_valid_idx *= ~np.isinf(short_false_data)\n","  long_true_valid_idx *= ~np.isinf(long_true_data)\n","  long_false_valid_idx *= ~np.isinf(long_false_data)\n","\n","  try:\n","    short_true_valid_idx *= short_true_data > xmin\n","    short_false_valid_idx *= short_false_data > xmin\n","    long_true_valid_idx *= long_true_data > xmin\n","    long_false_valid_idx *= long_false_data > xmin\n","\n","  except:\n","    pass\n","\n","  try:\n","    short_true_valid_idx *= short_true_data < xmax\n","    short_false_valid_idx *= short_false_data < xmax\n","    long_true_valid_idx *= long_true_data < xmax\n","    long_false_valid_idx *= long_false_data < xmax\n","    \n","  except:\n","    pass\n","    \n","  plt.subplot(inner_gs[0])\n","  ns, bins, patches = plt.hist([short_true_data[short_true_valid_idx], short_false_data[short_false_valid_idx]], \n","           bins=num_samples, alpha=alpha, color=['#00ff00', '#ff0000'], edgecolor='black')  \n","  plt.title('short_' + title)  \n","\n","  plt.subplot(inner_gs[2])\n","  total_ns = np.sum(ns, axis=0)\n","  hist_ratio = ns[0] / total_ns\n","  # valid_idx = total_ns > 1\n","  valid_idx = np.full(len(hist_ratio), True)\n","  valid_hist_ratio = hist_ratio[valid_idx]\n","  plt.hist(bins[:-1][valid_idx], weights=valid_hist_ratio, bins=num_samples, color='#00ff00', edgecolor='black')\n","  plt.ylim(0, 1)\n","  \n","\n","  plt.subplot(inner_gs[1])\n","  ns, bins, patches = plt.hist([long_true_data[long_true_valid_idx], long_false_data[long_false_valid_idx]], \n","           bins=num_samples, alpha=alpha, color=['#00ff00', '#ff0000'], edgecolor='black')\n","  plt.title('long_' + title)\n","  \n","  plt.subplot(inner_gs[3])\n","  total_ns = np.sum(ns, axis=0)\n","  hist_ratio = ns[0] / total_ns\n","  # valid_idx = total_ns > 1\n","  valid_idx = np.full(len(hist_ratio), True)\n","  valid_hist_ratio = hist_ratio[valid_idx]\n","  plt.hist(bins[:-1][valid_idx], weights=valid_hist_ratio, bins=num_samples, color='#00ff00', edgecolor='black')\n","  plt.ylim(0, 1)\n","\n","  \n","# plt.suptitle(title)\n","plt.show()"]},{"cell_type":"markdown","metadata":{"id":"Arnb-kXlC4VF"},"source":["#### tpg & outg survey"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":881},"executionInfo":{"elapsed":1957,"status":"ok","timestamp":1657335427143,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"jHh0uFkXC4VF","outputId":"7c3e0657-e0bd-4bf4-be0c-3bddb61452a0"},"outputs":[{"output_type":"stream","name":"stdout","text":["293\n","685\n","293\n","685\n","293\n","685\n","293\n","685\n","pkx : [0.05346088 0.14578409 0.37659213 0.48737999 0.77358195]\n","pkx : [0.08375248 0.15590148 0.29118087 0.78720528]\n","\n","56\n","115\n","56\n","115\n","56\n","115\n","56\n","115\n","pkx : [-0.22675861 -0.1793134  -0.1450474  -0.08178711 -0.03697774]\n","pkx : [-0.2594824  -0.17702805 -0.13854936 -0.08907675 -0.02586175]\n","\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 864x576 with 4 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["# 1. outg 는 partial 을 위한 histogram 작성 진행\n","# 현재, outg 내부에는 tp 한것과 out 한것이 공존하는 상태\n","titles = ['outg', 'tpg']\n","short_max_datas = [short_max_outg[short_bias_arr], short_max_tpg]\n","long_max_datas = [long_max_outg[long_bias_arr], long_max_tpg]\n","\n","# titles = ['tpg']\n","# short_max_datas = [short_max_tpg]\n","# long_max_datas = [long_max_tpg]\n","\n","plt.style.use(['dark_background', 'fast'])\n","fig = plt.figure(figsize=(12, 8))\n","nrows, ncols = 2, 1\n","gs = gridspec.GridSpec(nrows=nrows,  # row 부터 index 채우고 col 채우는 순서임 (gs_idx)\n","                        ncols=ncols\n","                        )\n","  \n","for ings_idx, (title, short_max_data, long_max_data) in enumerate(zip(titles, short_max_datas, long_max_datas)):\n","\n","  inner_gs = gs[ings_idx].subgridspec(nrows=1, ncols=2)\n","  if ings_idx == 0:\n","    axvline = current_outg\n","    title_add = 'true_' + title\n","  else:\n","    axvline = current_tpg\n","    title_add = 'false_' + title\n","\n","  print(len(short_max_data))\n","  print(len(long_max_data))\n","\n","  short_plot_idx = np.ones_like(short_max_data).astype(bool)\n","  long_plot_idx = np.ones_like(long_max_data).astype(bool)\n","  # short_plot_idx = short_max_data <= axvline\n","  # long_plot_idx = long_max_data <= axvline\n","\n","  print(np.sum(short_plot_idx))\n","  print(np.sum(long_plot_idx))    \n","\n","  short_plot_idx *= ~np.isnan(short_max_data)\n","  long_plot_idx *= ~np.isnan(long_max_data)  # nan 과 inf 때문에 이 방식 채택\n","\n","  print(np.sum(short_plot_idx))\n","  print(np.sum(long_plot_idx))\n","\n","  short_plot_idx *= ~np.isinf(short_max_data)\n","  long_plot_idx *= ~np.isinf(long_max_data)  # nan 과 inf 때문에 이 방식 채택\n","  \n","  print(np.sum(short_plot_idx))\n","  print(np.sum(long_plot_idx))\n","    \n","  plt.subplot(inner_gs[0])\n","  kde_plot_v2(*np.unique(short_max_data[short_plot_idx], return_counts=True))\n","  plt.title('short_' + title_add)  \n","  plt.axvline(axvline, color='red', linewidth=3)\n","\n","  plt.subplot(inner_gs[1])\n","  kde_plot_v2(*np.unique(long_max_data[long_plot_idx], return_counts=True))\n","  plt.title('long_' + title_add)\n","  plt.axvline(axvline, color='red', linewidth=3)\n","\n","  print()\n","\n","# plt.suptitle(title)\n","plt.show()"]},{"cell_type":"markdown","metadata":{"id":"mScdfR9hmjVu"},"source":["#### legacy"]},{"cell_type":"markdown","metadata":{"id":"xivLUsSGC4VF"},"source":["##### outg survey for precision (eploc vars. dependency)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"LB28R3QIjCDc"},"outputs":[],"source":["# ------------ dependent vars. ------------ #\n","# res_df 에 존재하는 col 는 모두 사용가능함\n","# ------ 1. 도출한 outg 와 vars. pairing 진행 (by valid_idx) ------ #\n","devided_cols = ['tr_{}'.format(strat_version)]  # , 'ir_5T'\n","public_cols = ['wave_body_ratio']  # 'abs_ratio_5T', 'rel_ratio_5T', 'body_rel_ratio_5T'\n","\n","short_datas = [res_df['short_' + col].to_numpy() for col in devided_cols] + [res_df[col].to_numpy() for col in public_cols]\n","long_datas = [res_df['long_' + col].to_numpy() for col in devided_cols] + [res_df[col].to_numpy() for col in public_cols]\n","\n","titles = devided_cols + public_cols"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"nX9TpLcvFu7T"},"outputs":[],"source":["plot_outg_range = (-1, 10)\n","plot_data_range = (-10, 100)\n","\n","plt.style.use(['dark_background', 'fast'])\n","fig = plt.figure(figsize=(12, 18))\n","nrows, ncols = len(short_datas), 1\n","gs = gridspec.GridSpec(nrows=nrows,  # row 부터 index 채우고 col 채우는 순서임 (gs_idx)\n","                        ncols=ncols\n","                        )\n","\n","for ings_idx, (title, short_data, long_data) in enumerate(zip(titles, short_datas, long_datas)):\n","  inner_gs = gs[ings_idx].subgridspec(nrows=1, ncols=2)\n","\n","  print(len(long_max_outg))\n","\n","  short_plot_idx = (plot_outg_range[0] <= short_max_outg) & (short_max_outg <= plot_outg_range[1])\n","  long_plot_idx = (plot_outg_range[0] <= long_max_outg) & (long_max_outg <= plot_outg_range[1])  # nan 과 inf 때문에 이 방식 채택\n","\n","  print(np.sum(long_plot_idx))\n","\n","  short_open_data = short_data[short_open_idx]\n","  long_open_data = long_data[long_open_idx]\n","  \n","  short_plot_idx *= (plot_data_range[0] <= short_open_data) * (short_open_data <= plot_data_range[1])\n","  long_plot_idx *= (plot_data_range[0] <= long_open_data) * (long_open_data <= plot_data_range[1]) # nan 과 inf 때문에 이 방식 채택\n","\n","  short_plot_idx *= ~np.isnan(short_open_data)\n","  long_plot_idx *= ~np.isnan(long_open_data)  # nan 과 inf 때문에 이 방식 채택\n","\n","  print(np.sum(long_plot_idx))\n","\n","  short_plot_idx *= ~np.isinf(short_open_data)\n","  long_plot_idx *= ~np.isinf(long_open_data)  # nan 과 inf 때문에 이 방식 채택\n","\n","  print(np.sum(long_plot_idx))\n","\n","  short_true_idx = short_plot_idx * short_true_open_idxth\n","  long_true_idx = long_plot_idx * long_true_open_idxth\n","  \n","  short_false_idx = short_plot_idx * ~short_true_open_idxth\n","  long_false_idx = long_plot_idx * ~long_true_open_idxth\n","\n","  plt.subplot(inner_gs[0])\n","  # ------ true_bias ------ #\n","  x, y = short_max_outg[short_true_idx].ravel(), short_open_data[short_true_idx].ravel()  \n","  plt.scatter(x, y, color='white', alpha=0.5)\n","  # ------ false_bias ------ #\n","  x, y = short_max_outg[short_false_idx].ravel(), short_open_data[short_false_idx].ravel()\n","  plt.scatter(x, y, color='fuchsia', alpha=0.3)\n","  plt.axvline(current_outg, color='red', linewidth=3)\n","  plt.title(\"{} coef : {:0.3f}\".format(title, np.corrcoef(-x, y)[0, 1]))\n","\n","  plt.subplot(inner_gs[1])    \n","  # ------ true_bias ------ #\n","  x, y = long_max_outg[long_true_idx].ravel(), long_open_data[long_true_idx].ravel()  \n","  plt.scatter(x, y, color='white', alpha=0.5)\n","  # ------ false_bias ------ #\n","  x, y = long_max_outg[long_false_idx].ravel(), long_open_data[long_false_idx].ravel()\n","  plt.scatter(x, y, color='fuchsia', alpha=0.3)\n","  plt.axvline(current_outg, color='red', linewidth=3)\n","  plt.title(\"{} coef : {:0.3f}\".format(title, np.corrcoef(-x, y)[0, 1]))\n","\n","  print()  \n","\n","# plt.suptitle(title)\n","plt.show()\n","# print()"]},{"cell_type":"markdown","metadata":{"id":"983aUwM76s6X"},"source":["#### dump"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"p_e8PtFXa7mc"},"outputs":[],"source":["# len(np.unique(long_obj[-1]))\n","p1_hhm_p1_idx = long_obj[-1]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"nLZDkNNxbZPO"},"outputs":[],"source":["p1_hlm_p1_idx = long_obj[-1]"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":261,"status":"ok","timestamp":1653452376525,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"WhCPOi1qbkHS","outputId":"e3b8db71-3e48-4177-a3fe-9f891a362596"},"outputs":[{"data":{"text/plain":["array([350065., 440065., 502833., 735204., 836258.])"]},"execution_count":161,"metadata":{},"output_type":"execute_result"}],"source":["# len(p1_hhm_p1_idx[~np.isin(p1_hhm_p1_idx, p1_hlm_p1_idx)])\n","p1_hlm_p1_idx[~np.isin(p1_hlm_p1_idx, p1_hhm_p1_idx)]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"wgERZ65F5RBB"},"outputs":[],"source":["org_p1_idx = long_p2_idx_arr  # long_obj[-1]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"rAao95SEnOY0"},"outputs":[],"source":["new_p1_idx = long_p2_idx_arr  # long_obj[-1]"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":267,"status":"ok","timestamp":1653119592395,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"OEQ9KWXVnQ2J","outputId":"85c3e998-5c1e-4b5a-8366-28fe8cc3639b"},"outputs":[{"name":"stdout","output_type":"stream","text":["153\n","163\n"]},{"data":{"text/plain":["array([ 35609, 105164, 188999, 347399, 358994, 379304, 379544, 397274, 482474, 550919, 656774, 833129])"]},"execution_count":220,"metadata":{},"output_type":"execute_result"}],"source":["uniq_org_p1_idx = np.unique(org_p1_idx)\n","uniq_new_p1_idx = np.unique(new_p1_idx)\n","print(len(uniq_org_p1_idx))\n","print(len(uniq_new_p1_idx))\n","uniq_new_p1_idx[~np.isin(uniq_new_p1_idx, uniq_org_p1_idx)]\n","# np.unique(new_p1_idx).remove(np.unique(org_p1_idx))"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"hOtCGUeBQ4hn"},"outputs":[],"source":["open_idx = open_info_df.index.to_numpy()\n","# len_df = len(res_df)\n","# s_idx = (open_idx < int(len_df * (1 - test_ratio))) == plot_is\n","# s_open_info_df = open_info_df[s_idx]\n","# s_open_idx = open_idx[s_idx]\n","\n","# open_info_list = [s_open_info_df[col_].to_numpy() for col_ in s_open_info_df.columns]\n","# side_arr, zone_arr, id_arr, id_idx_arr = open_info_list\n","\n","long_open_ = res_df['long_open_{}'.format(config.selection_id)].to_numpy()\n","short_open_ = res_df['short_open_{}'.format(config.selection_id)].to_numpy()\n","\n","long_open_idx = get_index_bybool(long_open_, np.arange(len(res_df)))\n","short_open_idx = get_index_bybool(short_open_, np.arange(len(res_df)))"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"QPhjkZQhRLqr"},"outputs":[],"source":["valid_long_open_idx = long_open_idx[~np.isnan(long_open_idx)]\n","valid_short_open_idx = short_open_idx[~np.isnan(short_open_idx)]\n","\n","# print(valid_long_open_idx[valid_long_open_idx > 4000][:10])\n","# print(valid_short_open_idx[valid_short_open_idx > 4000][:10])\n","\n","print(open_idx[open_idx > 4000][:10])\n","\n","print(np.hstack((long_obj[-1], long_obj[3]))[:10])\n","print(np.hstack((short_obj[-1], short_obj[3]))[:10])\n","# print([:10])"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"cFd7Fz0Y6ucU"},"outputs":[],"source":["# short_max_outg, short_outg_open_idx = get_max_outg_v2(\"SELL\", config, ohlc_list, short_obj, short_tpout_arr, short_open_epout_0, short_open_epout_gap)\n","# long_max_outg, long_outg_open_idx = get_max_outg_v2(\"BUY\", config, ohlc_list, long_obj, long_tpout_arr, long_open_epout_0, long_open_epout_gap)\n","# short_max_outg, short_open_idx, short_true_open_idxth = get_max_outg_v3(\"SELL\", config, ohlc_list, short_obj, short_tpout_arr, short_open_epout_0, short_open_epout_gap)\n","# long_max_outg, long_open_idx, long_true_open_idxth = get_max_outg_v3(\"BUY\", config, ohlc_list, long_obj, long_tpout_arr, long_open_epout_0, long_open_epout_gap)"]},{"cell_type":"markdown","metadata":{"id":"EtjwB7Qk-Grj"},"source":["### significance_v4"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"elapsed":57651,"status":"ok","timestamp":1658286067185,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"oVifICO4-Grk","outputId":"e8bca602-40c8-4ca5-f7a9-d55b6b7f4554"},"outputs":[{"output_type":"stream","name":"stderr","text":["WARNING:root:wave_point\n","WARNING:root:np.sum(short_open_res1 == 1) : 42048\n","WARNING:root:np.sum(long_open_res1 == 1) : 42240\n","WARNING:root:np.sum(short_open_res2 == 1) : 42048\n","WARNING:root:np.sum(long_open_res2 == 1) : 42240\n","WARNING:root:reject update_hl\n","WARNING:root:np.sum(short_open_res1 == 1) : 40427\n","WARNING:root:np.sum(long_open_res1 == 1) : 40130\n","WARNING:root:np.sum(short_open_res2 == 1) : 40427\n","WARNING:root:np.sum(long_open_res2 == 1) : 40130\n","WARNING:root:wave_mm\n","WARNING:root:np.sum(short_open_res1 == 1) : 40425\n","WARNING:root:np.sum(long_open_res1 == 1) : 40128\n","WARNING:root:np.sum(short_open_res2 == 1) : 40425\n","WARNING:root:np.sum(long_open_res2 == 1) : 40128\n","WARNING:root:wave_length\n","WARNING:root:np.sum(short_open_res1 == 1) : 2243\n","WARNING:root:np.sum(long_open_res1 == 1) : 2197\n","WARNING:root:point validation\n","WARNING:root:np.sum(short_open_res1 == 1) : 2242\n","WARNING:root:np.sum(long_open_res1 == 1) : 2197\n","WARNING:root:np.sum(short_open_res2 == 1) : 24865\n","WARNING:root:np.sum(long_open_res2 == 1) : 24969\n","WARNING:root:cu_wrr_32_ <= config.loc_set.point1.wrr_32 : 0.54867 0.30000 (0.0)\n","WARNING:root:co_wrr_32_ <= config.loc_set.point1.wrr_32 : 1.00000 0.30000 (0.0)\n","WARNING:root:cu_wrr_32_ <= config.loc_set.point2.wrr_32 : 0.54867 0.30000 (0.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 1.183316707611084\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:root:co_wrr_32_ <= config.loc_set.point2.wrr_32 : 1.00000 0.30000 (0.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9840562343597412\n","en_ex_pairing elapsed time : 0.22379302978515625\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:root:wave_point\n","WARNING:root:np.sum(short_open_res1 == 1) : 42048\n","WARNING:root:np.sum(long_open_res1 == 1) : 42240\n","WARNING:root:np.sum(short_open_res2 == 1) : 42048\n","WARNING:root:np.sum(long_open_res2 == 1) : 42240\n","WARNING:root:reject update_hl\n","WARNING:root:np.sum(short_open_res1 == 1) : 40427\n","WARNING:root:np.sum(long_open_res1 == 1) : 40130\n","WARNING:root:np.sum(short_open_res2 == 1) : 40427\n","WARNING:root:np.sum(long_open_res2 == 1) : 40130\n","WARNING:root:wave_mm\n","WARNING:root:np.sum(short_open_res1 == 1) : 40425\n","WARNING:root:np.sum(long_open_res1 == 1) : 40128\n","WARNING:root:np.sum(short_open_res2 == 1) : 40425\n","WARNING:root:np.sum(long_open_res2 == 1) : 40128\n","WARNING:root:wave_length\n","WARNING:root:np.sum(short_open_res1 == 1) : 2166\n"]},{"output_type":"stream","name":"stdout","text":["idep_plot elapsed time : 0.21873188018798828\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:root:np.sum(long_open_res1 == 1) : 2084\n","WARNING:root:point validation\n","WARNING:root:np.sum(short_open_res1 == 1) : 2165\n","WARNING:root:np.sum(long_open_res1 == 1) : 2084\n","WARNING:root:np.sum(short_open_res2 == 1) : 24865\n","WARNING:root:np.sum(long_open_res2 == 1) : 24969\n","WARNING:root:cu_wrr_32_ <= config.loc_set.point1.wrr_32 : 0.54867 0.30000 (0.0)\n","WARNING:root:co_wrr_32_ <= config.loc_set.point1.wrr_32 : 1.00000 0.30000 (0.0)\n","WARNING:root:cu_wrr_32_ <= config.loc_set.point2.wrr_32 : 0.54867 0.30000 (0.0)\n","WARNING:root:co_wrr_32_ <= config.loc_set.point2.wrr_32 : 1.00000 0.30000 (0.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9884688854217529\n","get_open_info_df elapsed time : 0.9695727825164795\n","en_ex_pairing elapsed time : 0.20090174674987793\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:root:wave_point\n","WARNING:root:np.sum(short_open_res1 == 1) : 42048\n","WARNING:root:np.sum(long_open_res1 == 1) : 42240\n","WARNING:root:np.sum(short_open_res2 == 1) : 42048\n","WARNING:root:np.sum(long_open_res2 == 1) : 42240\n","WARNING:root:reject update_hl\n","WARNING:root:np.sum(short_open_res1 == 1) : 40427\n","WARNING:root:np.sum(long_open_res1 == 1) : 40130\n","WARNING:root:np.sum(short_open_res2 == 1) : 40427\n","WARNING:root:np.sum(long_open_res2 == 1) : 40130\n","WARNING:root:wave_mm\n","WARNING:root:np.sum(short_open_res1 == 1) : 40425\n","WARNING:root:np.sum(long_open_res1 == 1) : 40128\n","WARNING:root:np.sum(short_open_res2 == 1) : 40425\n","WARNING:root:np.sum(long_open_res2 == 1) : 40128\n","WARNING:root:wave_length\n","WARNING:root:np.sum(short_open_res1 == 1) : 2091\n"]},{"output_type":"stream","name":"stdout","text":["idep_plot elapsed time : 0.21144509315490723\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:root:np.sum(long_open_res1 == 1) : 1982\n","WARNING:root:point validation\n","WARNING:root:np.sum(short_open_res1 == 1) : 2090\n","WARNING:root:np.sum(long_open_res1 == 1) : 1982\n","WARNING:root:np.sum(short_open_res2 == 1) : 24865\n","WARNING:root:np.sum(long_open_res2 == 1) : 24969\n","WARNING:root:cu_wrr_32_ <= config.loc_set.point1.wrr_32 : 0.54867 0.30000 (0.0)\n","WARNING:root:co_wrr_32_ <= config.loc_set.point1.wrr_32 : 1.00000 0.30000 (0.0)\n","WARNING:root:cu_wrr_32_ <= config.loc_set.point2.wrr_32 : 0.54867 0.30000 (0.0)\n","WARNING:root:co_wrr_32_ <= config.loc_set.point2.wrr_32 : 1.00000 0.30000 (0.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9675097465515137\n","get_open_info_df elapsed time : 0.9653093814849854\n","en_ex_pairing elapsed time : 0.19496536254882812\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:root:wave_point\n","WARNING:root:np.sum(short_open_res1 == 1) : 42048\n","WARNING:root:np.sum(long_open_res1 == 1) : 42240\n","WARNING:root:np.sum(short_open_res2 == 1) : 42048\n","WARNING:root:np.sum(long_open_res2 == 1) : 42240\n","WARNING:root:reject update_hl\n","WARNING:root:np.sum(short_open_res1 == 1) : 40427\n","WARNING:root:np.sum(long_open_res1 == 1) : 40130\n","WARNING:root:np.sum(short_open_res2 == 1) : 40427\n","WARNING:root:np.sum(long_open_res2 == 1) : 40130\n","WARNING:root:wave_mm\n","WARNING:root:np.sum(short_open_res1 == 1) : 40425\n","WARNING:root:np.sum(long_open_res1 == 1) : 40128\n","WARNING:root:np.sum(short_open_res2 == 1) : 40425\n","WARNING:root:np.sum(long_open_res2 == 1) : 40128\n"]},{"output_type":"stream","name":"stdout","text":["idep_plot elapsed time : 0.21195030212402344\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:root:wave_length\n","WARNING:root:np.sum(short_open_res1 == 1) : 2006\n","WARNING:root:np.sum(long_open_res1 == 1) : 1854\n","WARNING:root:point validation\n","WARNING:root:np.sum(short_open_res1 == 1) : 2005\n","WARNING:root:np.sum(long_open_res1 == 1) : 1854\n","WARNING:root:np.sum(short_open_res2 == 1) : 24865\n","WARNING:root:np.sum(long_open_res2 == 1) : 24969\n","WARNING:root:cu_wrr_32_ <= config.loc_set.point1.wrr_32 : 0.54867 0.30000 (0.0)\n","WARNING:root:co_wrr_32_ <= config.loc_set.point1.wrr_32 : 1.00000 0.30000 (0.0)\n","WARNING:root:cu_wrr_32_ <= config.loc_set.point2.wrr_32 : 0.54867 0.30000 (0.0)\n","WARNING:root:co_wrr_32_ <= config.loc_set.point2.wrr_32 : 1.00000 0.30000 (0.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9745476245880127\n","get_open_info_df elapsed time : 0.9549682140350342\n","en_ex_pairing elapsed time : 0.18856239318847656\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:root:wave_point\n","WARNING:root:np.sum(short_open_res1 == 1) : 42048\n","WARNING:root:np.sum(long_open_res1 == 1) : 42240\n","WARNING:root:np.sum(short_open_res2 == 1) : 42048\n","WARNING:root:np.sum(long_open_res2 == 1) : 42240\n","WARNING:root:reject update_hl\n","WARNING:root:np.sum(short_open_res1 == 1) : 40427\n","WARNING:root:np.sum(long_open_res1 == 1) : 40130\n","WARNING:root:np.sum(short_open_res2 == 1) : 40427\n","WARNING:root:np.sum(long_open_res2 == 1) : 40130\n","WARNING:root:wave_mm\n","WARNING:root:np.sum(short_open_res1 == 1) : 40425\n","WARNING:root:np.sum(long_open_res1 == 1) : 40128\n","WARNING:root:np.sum(short_open_res2 == 1) : 40425\n","WARNING:root:np.sum(long_open_res2 == 1) : 40128\n","WARNING:root:wave_length\n","WARNING:root:np.sum(short_open_res1 == 1) : 1909\n","WARNING:root:np.sum(long_open_res1 == 1) : 1731\n"]},{"output_type":"stream","name":"stdout","text":["idep_plot elapsed time : 0.22078585624694824\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:root:point validation\n","WARNING:root:np.sum(short_open_res1 == 1) : 1908\n","WARNING:root:np.sum(long_open_res1 == 1) : 1731\n","WARNING:root:np.sum(short_open_res2 == 1) : 24865\n","WARNING:root:np.sum(long_open_res2 == 1) : 24969\n","WARNING:root:cu_wrr_32_ <= config.loc_set.point1.wrr_32 : 0.54867 0.30000 (0.0)\n","WARNING:root:co_wrr_32_ <= config.loc_set.point1.wrr_32 : 1.00000 0.30000 (0.0)\n","WARNING:root:cu_wrr_32_ <= config.loc_set.point2.wrr_32 : 0.54867 0.30000 (0.0)\n","WARNING:root:co_wrr_32_ <= config.loc_set.point2.wrr_32 : 1.00000 0.30000 (0.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9680428504943848\n","get_open_info_df elapsed time : 0.9761159420013428\n","en_ex_pairing elapsed time : 0.18214702606201172\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:root:wave_point\n","WARNING:root:np.sum(short_open_res1 == 1) : 42048\n","WARNING:root:np.sum(long_open_res1 == 1) : 42240\n","WARNING:root:np.sum(short_open_res2 == 1) : 42048\n","WARNING:root:np.sum(long_open_res2 == 1) : 42240\n","WARNING:root:reject update_hl\n","WARNING:root:np.sum(short_open_res1 == 1) : 40427\n","WARNING:root:np.sum(long_open_res1 == 1) : 40130\n","WARNING:root:np.sum(short_open_res2 == 1) : 40427\n","WARNING:root:np.sum(long_open_res2 == 1) : 40130\n","WARNING:root:wave_mm\n","WARNING:root:np.sum(short_open_res1 == 1) : 40425\n","WARNING:root:np.sum(long_open_res1 == 1) : 40128\n","WARNING:root:np.sum(short_open_res2 == 1) : 40425\n","WARNING:root:np.sum(long_open_res2 == 1) : 40128\n","WARNING:root:wave_length\n","WARNING:root:np.sum(short_open_res1 == 1) : 1846\n","WARNING:root:np.sum(long_open_res1 == 1) : 1655\n"]},{"output_type":"stream","name":"stdout","text":["idep_plot elapsed time : 0.210496187210083\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:root:point validation\n","WARNING:root:np.sum(short_open_res1 == 1) : 1845\n","WARNING:root:np.sum(long_open_res1 == 1) : 1655\n","WARNING:root:np.sum(short_open_res2 == 1) : 24865\n","WARNING:root:np.sum(long_open_res2 == 1) : 24969\n","WARNING:root:cu_wrr_32_ <= config.loc_set.point1.wrr_32 : 0.54867 0.30000 (0.0)\n","WARNING:root:co_wrr_32_ <= config.loc_set.point1.wrr_32 : 1.00000 0.30000 (0.0)\n","WARNING:root:cu_wrr_32_ <= config.loc_set.point2.wrr_32 : 0.54867 0.30000 (0.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9607577323913574\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:root:co_wrr_32_ <= config.loc_set.point2.wrr_32 : 1.00000 0.30000 (0.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9695115089416504\n","en_ex_pairing elapsed time : 0.17920970916748047\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:root:wave_point\n","WARNING:root:np.sum(short_open_res1 == 1) : 42048\n","WARNING:root:np.sum(long_open_res1 == 1) : 42240\n","WARNING:root:np.sum(short_open_res2 == 1) : 42048\n","WARNING:root:np.sum(long_open_res2 == 1) : 42240\n","WARNING:root:reject update_hl\n","WARNING:root:np.sum(short_open_res1 == 1) : 40427\n","WARNING:root:np.sum(long_open_res1 == 1) : 40130\n","WARNING:root:np.sum(short_open_res2 == 1) : 40427\n","WARNING:root:np.sum(long_open_res2 == 1) : 40130\n","WARNING:root:wave_mm\n","WARNING:root:np.sum(short_open_res1 == 1) : 40425\n","WARNING:root:np.sum(long_open_res1 == 1) : 40128\n","WARNING:root:np.sum(short_open_res2 == 1) : 40425\n","WARNING:root:np.sum(long_open_res2 == 1) : 40128\n","WARNING:root:wave_length\n","WARNING:root:np.sum(short_open_res1 == 1) : 1741\n","WARNING:root:np.sum(long_open_res1 == 1) : 1581\n"]},{"output_type":"stream","name":"stdout","text":["idep_plot elapsed time : 0.21857118606567383\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:root:point validation\n","WARNING:root:np.sum(short_open_res1 == 1) : 1740\n","WARNING:root:np.sum(long_open_res1 == 1) : 1581\n","WARNING:root:np.sum(short_open_res2 == 1) : 24865\n","WARNING:root:np.sum(long_open_res2 == 1) : 24969\n","WARNING:root:cu_wrr_32_ <= config.loc_set.point1.wrr_32 : 0.54867 0.30000 (0.0)\n","WARNING:root:co_wrr_32_ <= config.loc_set.point1.wrr_32 : 1.00000 0.30000 (0.0)\n","WARNING:root:cu_wrr_32_ <= config.loc_set.point2.wrr_32 : 0.54867 0.30000 (0.0)\n","WARNING:root:co_wrr_32_ <= config.loc_set.point2.wrr_32 : 1.00000 0.30000 (0.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 1.0782229900360107\n","get_open_info_df elapsed time : 0.9635043144226074\n","en_ex_pairing elapsed time : 0.161146879196167\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:root:wave_point\n","WARNING:root:np.sum(short_open_res1 == 1) : 42048\n","WARNING:root:np.sum(long_open_res1 == 1) : 42240\n","WARNING:root:np.sum(short_open_res2 == 1) : 42048\n","WARNING:root:np.sum(long_open_res2 == 1) : 42240\n","WARNING:root:reject update_hl\n","WARNING:root:np.sum(short_open_res1 == 1) : 40427\n","WARNING:root:np.sum(long_open_res1 == 1) : 40130\n","WARNING:root:np.sum(short_open_res2 == 1) : 40427\n","WARNING:root:np.sum(long_open_res2 == 1) : 40130\n","WARNING:root:wave_mm\n","WARNING:root:np.sum(short_open_res1 == 1) : 40425\n","WARNING:root:np.sum(long_open_res1 == 1) : 40128\n","WARNING:root:np.sum(short_open_res2 == 1) : 40425\n","WARNING:root:np.sum(long_open_res2 == 1) : 40128\n","WARNING:root:wave_length\n","WARNING:root:np.sum(short_open_res1 == 1) : 1657\n","WARNING:root:np.sum(long_open_res1 == 1) : 1516\n"]},{"output_type":"stream","name":"stdout","text":["idep_plot elapsed time : 0.21243715286254883\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:root:point validation\n","WARNING:root:np.sum(short_open_res1 == 1) : 1656\n","WARNING:root:np.sum(long_open_res1 == 1) : 1516\n","WARNING:root:np.sum(short_open_res2 == 1) : 24865\n","WARNING:root:np.sum(long_open_res2 == 1) : 24969\n","WARNING:root:cu_wrr_32_ <= config.loc_set.point1.wrr_32 : 0.54867 0.30000 (0.0)\n","WARNING:root:co_wrr_32_ <= config.loc_set.point1.wrr_32 : 1.00000 0.30000 (0.0)\n","WARNING:root:cu_wrr_32_ <= config.loc_set.point2.wrr_32 : 0.54867 0.30000 (0.0)\n","WARNING:root:co_wrr_32_ <= config.loc_set.point2.wrr_32 : 1.00000 0.30000 (0.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9899005889892578\n","get_open_info_df elapsed time : 0.9786531925201416\n","en_ex_pairing elapsed time : 0.15755510330200195\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:root:wave_point\n","WARNING:root:np.sum(short_open_res1 == 1) : 42048\n","WARNING:root:np.sum(long_open_res1 == 1) : 42240\n","WARNING:root:np.sum(short_open_res2 == 1) : 42048\n","WARNING:root:np.sum(long_open_res2 == 1) : 42240\n","WARNING:root:reject update_hl\n","WARNING:root:np.sum(short_open_res1 == 1) : 40427\n","WARNING:root:np.sum(long_open_res1 == 1) : 40130\n","WARNING:root:np.sum(short_open_res2 == 1) : 40427\n","WARNING:root:np.sum(long_open_res2 == 1) : 40130\n","WARNING:root:wave_mm\n","WARNING:root:np.sum(short_open_res1 == 1) : 40425\n","WARNING:root:np.sum(long_open_res1 == 1) : 40128\n","WARNING:root:np.sum(short_open_res2 == 1) : 40425\n","WARNING:root:np.sum(long_open_res2 == 1) : 40128\n","WARNING:root:wave_length\n"]},{"output_type":"stream","name":"stdout","text":["idep_plot elapsed time : 0.2108614444732666\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:root:np.sum(short_open_res1 == 1) : 1601\n","WARNING:root:np.sum(long_open_res1 == 1) : 1462\n","WARNING:root:point validation\n","WARNING:root:np.sum(short_open_res1 == 1) : 1600\n","WARNING:root:np.sum(long_open_res1 == 1) : 1462\n","WARNING:root:np.sum(short_open_res2 == 1) : 24865\n","WARNING:root:np.sum(long_open_res2 == 1) : 24969\n","WARNING:root:cu_wrr_32_ <= config.loc_set.point1.wrr_32 : 0.54867 0.30000 (0.0)\n","WARNING:root:co_wrr_32_ <= config.loc_set.point1.wrr_32 : 1.00000 0.30000 (0.0)\n","WARNING:root:cu_wrr_32_ <= config.loc_set.point2.wrr_32 : 0.54867 0.30000 (0.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9800107479095459\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:root:co_wrr_32_ <= config.loc_set.point2.wrr_32 : 1.00000 0.30000 (0.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9724676609039307\n","en_ex_pairing elapsed time : 0.17316198348999023\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:root:wave_point\n","WARNING:root:np.sum(short_open_res1 == 1) : 42048\n","WARNING:root:np.sum(long_open_res1 == 1) : 42240\n","WARNING:root:np.sum(short_open_res2 == 1) : 42048\n","WARNING:root:np.sum(long_open_res2 == 1) : 42240\n","WARNING:root:reject update_hl\n","WARNING:root:np.sum(short_open_res1 == 1) : 40427\n","WARNING:root:np.sum(long_open_res1 == 1) : 40130\n","WARNING:root:np.sum(short_open_res2 == 1) : 40427\n","WARNING:root:np.sum(long_open_res2 == 1) : 40130\n","WARNING:root:wave_mm\n","WARNING:root:np.sum(short_open_res1 == 1) : 40425\n","WARNING:root:np.sum(long_open_res1 == 1) : 40128\n","WARNING:root:np.sum(short_open_res2 == 1) : 40425\n","WARNING:root:np.sum(long_open_res2 == 1) : 40128\n","WARNING:root:wave_length\n","WARNING:root:np.sum(short_open_res1 == 1) : 1530\n","WARNING:root:np.sum(long_open_res1 == 1) : 1370\n"]},{"output_type":"stream","name":"stdout","text":["idep_plot elapsed time : 0.21606159210205078\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:root:point validation\n","WARNING:root:np.sum(short_open_res1 == 1) : 1529\n","WARNING:root:np.sum(long_open_res1 == 1) : 1370\n","WARNING:root:np.sum(short_open_res2 == 1) : 24865\n","WARNING:root:np.sum(long_open_res2 == 1) : 24969\n","WARNING:root:cu_wrr_32_ <= config.loc_set.point1.wrr_32 : 0.54867 0.30000 (0.0)\n","WARNING:root:co_wrr_32_ <= config.loc_set.point1.wrr_32 : 1.00000 0.30000 (0.0)\n","WARNING:root:cu_wrr_32_ <= config.loc_set.point2.wrr_32 : 0.54867 0.30000 (0.0)\n","WARNING:root:co_wrr_32_ <= config.loc_set.point2.wrr_32 : 1.00000 0.30000 (0.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9759373664855957\n","get_open_info_df elapsed time : 0.986823558807373\n","en_ex_pairing elapsed time : 0.14832687377929688\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:root:wave_point\n","WARNING:root:np.sum(short_open_res1 == 1) : 42048\n","WARNING:root:np.sum(long_open_res1 == 1) : 42240\n","WARNING:root:np.sum(short_open_res2 == 1) : 42048\n","WARNING:root:np.sum(long_open_res2 == 1) : 42240\n","WARNING:root:reject update_hl\n","WARNING:root:np.sum(short_open_res1 == 1) : 40427\n","WARNING:root:np.sum(long_open_res1 == 1) : 40130\n","WARNING:root:np.sum(short_open_res2 == 1) : 40427\n","WARNING:root:np.sum(long_open_res2 == 1) : 40130\n","WARNING:root:wave_mm\n","WARNING:root:np.sum(short_open_res1 == 1) : 40425\n","WARNING:root:np.sum(long_open_res1 == 1) : 40128\n","WARNING:root:np.sum(short_open_res2 == 1) : 40425\n","WARNING:root:np.sum(long_open_res2 == 1) : 40128\n","WARNING:root:wave_length\n"]},{"output_type":"stream","name":"stdout","text":["idep_plot elapsed time : 0.2083590030670166\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:root:np.sum(short_open_res1 == 1) : 1463\n","WARNING:root:np.sum(long_open_res1 == 1) : 1316\n","WARNING:root:point validation\n","WARNING:root:np.sum(short_open_res1 == 1) : 1463\n","WARNING:root:np.sum(long_open_res1 == 1) : 1316\n","WARNING:root:np.sum(short_open_res2 == 1) : 24865\n","WARNING:root:np.sum(long_open_res2 == 1) : 24969\n","WARNING:root:cu_wrr_32_ <= config.loc_set.point1.wrr_32 : 0.54867 0.30000 (0.0)\n","WARNING:root:co_wrr_32_ <= config.loc_set.point1.wrr_32 : 1.00000 0.30000 (0.0)\n","WARNING:root:cu_wrr_32_ <= config.loc_set.point2.wrr_32 : 0.54867 0.30000 (0.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9757084846496582\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:root:co_wrr_32_ <= config.loc_set.point2.wrr_32 : 1.00000 0.30000 (0.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9947011470794678\n","en_ex_pairing elapsed time : 0.15147137641906738\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:root:wave_point\n","WARNING:root:np.sum(short_open_res1 == 1) : 42048\n","WARNING:root:np.sum(long_open_res1 == 1) : 42240\n","WARNING:root:np.sum(short_open_res2 == 1) : 42048\n","WARNING:root:np.sum(long_open_res2 == 1) : 42240\n","WARNING:root:reject update_hl\n","WARNING:root:np.sum(short_open_res1 == 1) : 40427\n","WARNING:root:np.sum(long_open_res1 == 1) : 40130\n","WARNING:root:np.sum(short_open_res2 == 1) : 40427\n","WARNING:root:np.sum(long_open_res2 == 1) : 40130\n","WARNING:root:wave_mm\n","WARNING:root:np.sum(short_open_res1 == 1) : 40425\n","WARNING:root:np.sum(long_open_res1 == 1) : 40128\n","WARNING:root:np.sum(short_open_res2 == 1) : 40425\n","WARNING:root:np.sum(long_open_res2 == 1) : 40128\n","WARNING:root:wave_length\n"]},{"output_type":"stream","name":"stdout","text":["idep_plot elapsed time : 0.21394109725952148\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:root:np.sum(short_open_res1 == 1) : 1388\n","WARNING:root:np.sum(long_open_res1 == 1) : 1266\n","WARNING:root:point validation\n","WARNING:root:np.sum(short_open_res1 == 1) : 1388\n","WARNING:root:np.sum(long_open_res1 == 1) : 1266\n","WARNING:root:np.sum(short_open_res2 == 1) : 24865\n","WARNING:root:np.sum(long_open_res2 == 1) : 24969\n","WARNING:root:cu_wrr_32_ <= config.loc_set.point1.wrr_32 : 0.54867 0.30000 (0.0)\n","WARNING:root:co_wrr_32_ <= config.loc_set.point1.wrr_32 : 1.00000 0.30000 (0.0)\n","WARNING:root:cu_wrr_32_ <= config.loc_set.point2.wrr_32 : 0.54867 0.30000 (0.0)\n","WARNING:root:co_wrr_32_ <= config.loc_set.point2.wrr_32 : 1.00000 0.30000 (0.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9745967388153076\n","get_open_info_df elapsed time : 0.9780423641204834\n","en_ex_pairing elapsed time : 0.14276409149169922\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:root:wave_point\n","WARNING:root:np.sum(short_open_res1 == 1) : 42048\n","WARNING:root:np.sum(long_open_res1 == 1) : 42240\n","WARNING:root:np.sum(short_open_res2 == 1) : 42048\n","WARNING:root:np.sum(long_open_res2 == 1) : 42240\n","WARNING:root:reject update_hl\n","WARNING:root:np.sum(short_open_res1 == 1) : 40427\n","WARNING:root:np.sum(long_open_res1 == 1) : 40130\n","WARNING:root:np.sum(short_open_res2 == 1) : 40427\n","WARNING:root:np.sum(long_open_res2 == 1) : 40130\n","WARNING:root:wave_mm\n","WARNING:root:np.sum(short_open_res1 == 1) : 40425\n","WARNING:root:np.sum(long_open_res1 == 1) : 40128\n","WARNING:root:np.sum(short_open_res2 == 1) : 40425\n","WARNING:root:np.sum(long_open_res2 == 1) : 40128\n","WARNING:root:wave_length\n","WARNING:root:np.sum(short_open_res1 == 1) : 1319\n"]},{"output_type":"stream","name":"stdout","text":["idep_plot elapsed time : 0.21091866493225098\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:root:np.sum(long_open_res1 == 1) : 1208\n","WARNING:root:point validation\n","WARNING:root:np.sum(short_open_res1 == 1) : 1319\n","WARNING:root:np.sum(long_open_res1 == 1) : 1208\n","WARNING:root:np.sum(short_open_res2 == 1) : 24865\n","WARNING:root:np.sum(long_open_res2 == 1) : 24969\n","WARNING:root:cu_wrr_32_ <= config.loc_set.point1.wrr_32 : 0.54867 0.30000 (0.0)\n","WARNING:root:co_wrr_32_ <= config.loc_set.point1.wrr_32 : 1.00000 0.30000 (0.0)\n","WARNING:root:cu_wrr_32_ <= config.loc_set.point2.wrr_32 : 0.54867 0.30000 (0.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9673671722412109\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:root:co_wrr_32_ <= config.loc_set.point2.wrr_32 : 1.00000 0.30000 (0.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 1.0268194675445557\n","en_ex_pairing elapsed time : 0.13862824440002441\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:root:wave_point\n","WARNING:root:np.sum(short_open_res1 == 1) : 42048\n","WARNING:root:np.sum(long_open_res1 == 1) : 42240\n","WARNING:root:np.sum(short_open_res2 == 1) : 42048\n","WARNING:root:np.sum(long_open_res2 == 1) : 42240\n","WARNING:root:reject update_hl\n","WARNING:root:np.sum(short_open_res1 == 1) : 40427\n","WARNING:root:np.sum(long_open_res1 == 1) : 40130\n","WARNING:root:np.sum(short_open_res2 == 1) : 40427\n","WARNING:root:np.sum(long_open_res2 == 1) : 40130\n","WARNING:root:wave_mm\n","WARNING:root:np.sum(short_open_res1 == 1) : 40425\n","WARNING:root:np.sum(long_open_res1 == 1) : 40128\n","WARNING:root:np.sum(short_open_res2 == 1) : 40425\n","WARNING:root:np.sum(long_open_res2 == 1) : 40128\n","WARNING:root:wave_length\n","WARNING:root:np.sum(short_open_res1 == 1) : 1258\n"]},{"output_type":"stream","name":"stdout","text":["idep_plot elapsed time : 0.21175861358642578\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:root:np.sum(long_open_res1 == 1) : 1168\n","WARNING:root:point validation\n","WARNING:root:np.sum(short_open_res1 == 1) : 1258\n","WARNING:root:np.sum(long_open_res1 == 1) : 1168\n","WARNING:root:np.sum(short_open_res2 == 1) : 24865\n","WARNING:root:np.sum(long_open_res2 == 1) : 24969\n","WARNING:root:cu_wrr_32_ <= config.loc_set.point1.wrr_32 : 0.54867 0.30000 (0.0)\n","WARNING:root:co_wrr_32_ <= config.loc_set.point1.wrr_32 : 1.00000 0.30000 (0.0)\n","WARNING:root:cu_wrr_32_ <= config.loc_set.point2.wrr_32 : 0.54867 0.30000 (0.0)\n","WARNING:root:co_wrr_32_ <= config.loc_set.point2.wrr_32 : 1.00000 0.30000 (0.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9668574333190918\n","get_open_info_df elapsed time : 0.9674062728881836\n","en_ex_pairing elapsed time : 0.14765095710754395\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:root:wave_point\n","WARNING:root:np.sum(short_open_res1 == 1) : 42048\n","WARNING:root:np.sum(long_open_res1 == 1) : 42240\n","WARNING:root:np.sum(short_open_res2 == 1) : 42048\n","WARNING:root:np.sum(long_open_res2 == 1) : 42240\n","WARNING:root:reject update_hl\n","WARNING:root:np.sum(short_open_res1 == 1) : 40427\n","WARNING:root:np.sum(long_open_res1 == 1) : 40130\n","WARNING:root:np.sum(short_open_res2 == 1) : 40427\n","WARNING:root:np.sum(long_open_res2 == 1) : 40130\n","WARNING:root:wave_mm\n","WARNING:root:np.sum(short_open_res1 == 1) : 40425\n","WARNING:root:np.sum(long_open_res1 == 1) : 40128\n","WARNING:root:np.sum(short_open_res2 == 1) : 40425\n","WARNING:root:np.sum(long_open_res2 == 1) : 40128\n","WARNING:root:wave_length\n","WARNING:root:np.sum(short_open_res1 == 1) : 1203\n","WARNING:root:np.sum(long_open_res1 == 1) : 1129\n"]},{"output_type":"stream","name":"stdout","text":["idep_plot elapsed time : 0.20909714698791504\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:root:point validation\n","WARNING:root:np.sum(short_open_res1 == 1) : 1203\n","WARNING:root:np.sum(long_open_res1 == 1) : 1129\n","WARNING:root:np.sum(short_open_res2 == 1) : 24865\n","WARNING:root:np.sum(long_open_res2 == 1) : 24969\n","WARNING:root:cu_wrr_32_ <= config.loc_set.point1.wrr_32 : 0.54867 0.30000 (0.0)\n","WARNING:root:co_wrr_32_ <= config.loc_set.point1.wrr_32 : 1.00000 0.30000 (0.0)\n","WARNING:root:cu_wrr_32_ <= config.loc_set.point2.wrr_32 : 0.54867 0.30000 (0.0)\n","WARNING:root:co_wrr_32_ <= config.loc_set.point2.wrr_32 : 1.00000 0.30000 (0.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9663641452789307\n","get_open_info_df elapsed time : 0.9678199291229248\n","en_ex_pairing elapsed time : 0.15280413627624512\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:root:wave_point\n","WARNING:root:np.sum(short_open_res1 == 1) : 42048\n","WARNING:root:np.sum(long_open_res1 == 1) : 42240\n","WARNING:root:np.sum(short_open_res2 == 1) : 42048\n","WARNING:root:np.sum(long_open_res2 == 1) : 42240\n","WARNING:root:reject update_hl\n","WARNING:root:np.sum(short_open_res1 == 1) : 40427\n","WARNING:root:np.sum(long_open_res1 == 1) : 40130\n","WARNING:root:np.sum(short_open_res2 == 1) : 40427\n","WARNING:root:np.sum(long_open_res2 == 1) : 40130\n","WARNING:root:wave_mm\n","WARNING:root:np.sum(short_open_res1 == 1) : 40425\n","WARNING:root:np.sum(long_open_res1 == 1) : 40128\n","WARNING:root:np.sum(short_open_res2 == 1) : 40425\n","WARNING:root:np.sum(long_open_res2 == 1) : 40128\n","WARNING:root:wave_length\n"]},{"output_type":"stream","name":"stdout","text":["idep_plot elapsed time : 0.20291733741760254\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:root:np.sum(short_open_res1 == 1) : 1150\n","WARNING:root:np.sum(long_open_res1 == 1) : 1064\n","WARNING:root:point validation\n","WARNING:root:np.sum(short_open_res1 == 1) : 1150\n","WARNING:root:np.sum(long_open_res1 == 1) : 1064\n","WARNING:root:np.sum(short_open_res2 == 1) : 24865\n","WARNING:root:np.sum(long_open_res2 == 1) : 24969\n","WARNING:root:cu_wrr_32_ <= config.loc_set.point1.wrr_32 : 0.54867 0.30000 (0.0)\n","WARNING:root:co_wrr_32_ <= config.loc_set.point1.wrr_32 : 1.00000 0.30000 (0.0)\n","WARNING:root:cu_wrr_32_ <= config.loc_set.point2.wrr_32 : 0.54867 0.30000 (0.0)\n","WARNING:root:co_wrr_32_ <= config.loc_set.point2.wrr_32 : 1.00000 0.30000 (0.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9645693302154541\n","get_open_info_df elapsed time : 0.9721312522888184\n","en_ex_pairing elapsed time : 0.13347530364990234\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:root:wave_point\n","WARNING:root:np.sum(short_open_res1 == 1) : 42048\n","WARNING:root:np.sum(long_open_res1 == 1) : 42240\n","WARNING:root:np.sum(short_open_res2 == 1) : 42048\n","WARNING:root:np.sum(long_open_res2 == 1) : 42240\n","WARNING:root:reject update_hl\n","WARNING:root:np.sum(short_open_res1 == 1) : 40427\n","WARNING:root:np.sum(long_open_res1 == 1) : 40130\n","WARNING:root:np.sum(short_open_res2 == 1) : 40427\n","WARNING:root:np.sum(long_open_res2 == 1) : 40130\n","WARNING:root:wave_mm\n","WARNING:root:np.sum(short_open_res1 == 1) : 40425\n","WARNING:root:np.sum(long_open_res1 == 1) : 40128\n","WARNING:root:np.sum(short_open_res2 == 1) : 40425\n","WARNING:root:np.sum(long_open_res2 == 1) : 40128\n","WARNING:root:wave_length\n","WARNING:root:np.sum(short_open_res1 == 1) : 1108\n"]},{"output_type":"stream","name":"stdout","text":["idep_plot elapsed time : 0.21446681022644043\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:root:np.sum(long_open_res1 == 1) : 991\n","WARNING:root:point validation\n","WARNING:root:np.sum(short_open_res1 == 1) : 1108\n","WARNING:root:np.sum(long_open_res1 == 1) : 991\n","WARNING:root:np.sum(short_open_res2 == 1) : 24865\n","WARNING:root:np.sum(long_open_res2 == 1) : 24969\n","WARNING:root:cu_wrr_32_ <= config.loc_set.point1.wrr_32 : 0.54867 0.30000 (0.0)\n","WARNING:root:co_wrr_32_ <= config.loc_set.point1.wrr_32 : 1.00000 0.30000 (0.0)\n","WARNING:root:cu_wrr_32_ <= config.loc_set.point2.wrr_32 : 0.54867 0.30000 (0.0)\n","WARNING:root:co_wrr_32_ <= config.loc_set.point2.wrr_32 : 1.00000 0.30000 (0.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9566135406494141\n","get_open_info_df elapsed time : 0.9713888168334961\n","en_ex_pairing elapsed time : 0.12442564964294434\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:root:wave_point\n","WARNING:root:np.sum(short_open_res1 == 1) : 42048\n","WARNING:root:np.sum(long_open_res1 == 1) : 42240\n","WARNING:root:np.sum(short_open_res2 == 1) : 42048\n","WARNING:root:np.sum(long_open_res2 == 1) : 42240\n","WARNING:root:reject update_hl\n","WARNING:root:np.sum(short_open_res1 == 1) : 40427\n","WARNING:root:np.sum(long_open_res1 == 1) : 40130\n","WARNING:root:np.sum(short_open_res2 == 1) : 40427\n","WARNING:root:np.sum(long_open_res2 == 1) : 40130\n","WARNING:root:wave_mm\n","WARNING:root:np.sum(short_open_res1 == 1) : 40425\n","WARNING:root:np.sum(long_open_res1 == 1) : 40128\n","WARNING:root:np.sum(short_open_res2 == 1) : 40425\n","WARNING:root:np.sum(long_open_res2 == 1) : 40128\n","WARNING:root:wave_length\n","WARNING:root:np.sum(short_open_res1 == 1) : 1068\n","WARNING:root:np.sum(long_open_res1 == 1) : 930\n"]},{"output_type":"stream","name":"stdout","text":["idep_plot elapsed time : 0.20700550079345703\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:root:point validation\n","WARNING:root:np.sum(short_open_res1 == 1) : 1068\n","WARNING:root:np.sum(long_open_res1 == 1) : 930\n","WARNING:root:np.sum(short_open_res2 == 1) : 24865\n","WARNING:root:np.sum(long_open_res2 == 1) : 24969\n","WARNING:root:cu_wrr_32_ <= config.loc_set.point1.wrr_32 : 0.54867 0.30000 (0.0)\n","WARNING:root:co_wrr_32_ <= config.loc_set.point1.wrr_32 : 1.00000 0.30000 (0.0)\n","WARNING:root:cu_wrr_32_ <= config.loc_set.point2.wrr_32 : 0.54867 0.30000 (0.0)\n","WARNING:root:co_wrr_32_ <= config.loc_set.point2.wrr_32 : 1.00000 0.30000 (0.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9670774936676025\n","get_open_info_df elapsed time : 0.9715290069580078\n","en_ex_pairing elapsed time : 0.12322115898132324\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:root:wave_point\n","WARNING:root:np.sum(short_open_res1 == 1) : 42048\n","WARNING:root:np.sum(long_open_res1 == 1) : 42240\n","WARNING:root:np.sum(short_open_res2 == 1) : 42048\n","WARNING:root:np.sum(long_open_res2 == 1) : 42240\n","WARNING:root:reject update_hl\n","WARNING:root:np.sum(short_open_res1 == 1) : 40427\n","WARNING:root:np.sum(long_open_res1 == 1) : 40130\n","WARNING:root:np.sum(short_open_res2 == 1) : 40427\n","WARNING:root:np.sum(long_open_res2 == 1) : 40130\n","WARNING:root:wave_mm\n","WARNING:root:np.sum(short_open_res1 == 1) : 40425\n","WARNING:root:np.sum(long_open_res1 == 1) : 40128\n","WARNING:root:np.sum(short_open_res2 == 1) : 40425\n","WARNING:root:np.sum(long_open_res2 == 1) : 40128\n","WARNING:root:wave_length\n","WARNING:root:np.sum(short_open_res1 == 1) : 1038\n"]},{"output_type":"stream","name":"stdout","text":["idep_plot elapsed time : 0.19513368606567383\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:root:np.sum(long_open_res1 == 1) : 873\n","WARNING:root:point validation\n","WARNING:root:np.sum(short_open_res1 == 1) : 1038\n","WARNING:root:np.sum(long_open_res1 == 1) : 873\n","WARNING:root:np.sum(short_open_res2 == 1) : 24865\n","WARNING:root:np.sum(long_open_res2 == 1) : 24969\n","WARNING:root:cu_wrr_32_ <= config.loc_set.point1.wrr_32 : 0.54867 0.30000 (0.0)\n","WARNING:root:co_wrr_32_ <= config.loc_set.point1.wrr_32 : 1.00000 0.30000 (0.0)\n","WARNING:root:cu_wrr_32_ <= config.loc_set.point2.wrr_32 : 0.54867 0.30000 (0.0)\n","WARNING:root:co_wrr_32_ <= config.loc_set.point2.wrr_32 : 1.00000 0.30000 (0.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.969663143157959\n","get_open_info_df elapsed time : 0.9736535549163818\n","en_ex_pairing elapsed time : 0.1262373924255371\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:root:wave_point\n","WARNING:root:np.sum(short_open_res1 == 1) : 42048\n","WARNING:root:np.sum(long_open_res1 == 1) : 42240\n","WARNING:root:np.sum(short_open_res2 == 1) : 42048\n","WARNING:root:np.sum(long_open_res2 == 1) : 42240\n","WARNING:root:reject update_hl\n","WARNING:root:np.sum(short_open_res1 == 1) : 40427\n","WARNING:root:np.sum(long_open_res1 == 1) : 40130\n","WARNING:root:np.sum(short_open_res2 == 1) : 40427\n","WARNING:root:np.sum(long_open_res2 == 1) : 40130\n","WARNING:root:wave_mm\n","WARNING:root:np.sum(short_open_res1 == 1) : 40425\n","WARNING:root:np.sum(long_open_res1 == 1) : 40128\n","WARNING:root:np.sum(short_open_res2 == 1) : 40425\n","WARNING:root:np.sum(long_open_res2 == 1) : 40128\n","WARNING:root:wave_length\n","WARNING:root:np.sum(short_open_res1 == 1) : 997\n"]},{"output_type":"stream","name":"stdout","text":["idep_plot elapsed time : 0.21213579177856445\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:root:np.sum(long_open_res1 == 1) : 839\n","WARNING:root:point validation\n","WARNING:root:np.sum(short_open_res1 == 1) : 997\n","WARNING:root:np.sum(long_open_res1 == 1) : 839\n","WARNING:root:np.sum(short_open_res2 == 1) : 24865\n","WARNING:root:np.sum(long_open_res2 == 1) : 24969\n","WARNING:root:cu_wrr_32_ <= config.loc_set.point1.wrr_32 : 0.54867 0.30000 (0.0)\n","WARNING:root:co_wrr_32_ <= config.loc_set.point1.wrr_32 : 1.00000 0.30000 (0.0)\n","WARNING:root:cu_wrr_32_ <= config.loc_set.point2.wrr_32 : 0.54867 0.30000 (0.0)\n","WARNING:root:co_wrr_32_ <= config.loc_set.point2.wrr_32 : 1.00000 0.30000 (0.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9711620807647705\n","get_open_info_df elapsed time : 0.974346399307251\n","en_ex_pairing elapsed time : 0.1185002326965332\n","idep_plot elapsed time : 0.20534253120422363\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1728x576 with 36 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["# from google.colab import output\n","# ------------ survey param ------------ #\n","# itv_num_list = [1, 3, 5, 15]\n","# itv_list = ['15m', '30m', '1h', '4h']\n","# itv_list = ['3m', '5m', '15m', '30m', '1h', '4h']\n","# val_list = np.arange(-0.5, -0.9, -0.1)     # prcn 1\n","# val_list = np.arange(-0.0, -0.5, -0.03)  # prcn 2\n","# val_list = np.arange(-0.5, 0., 0.03)  # prcn 2\n","# val_list = np.arange(-0.5, -0.6, -0.005)    # prcn 3\n","# val_list = np.arange(0.944, 0.945, 0.0001)    # prcn 4\n","# val_list = np.arange(70, 80, 1)   # prcn -1\n","val_list = np.arange(100, 120, 1)   # prcn -2\n","# val_list = talib.get_function_groups()['Pattern Recognition']\n","\n","# ------------ get survey_res ------------ #\n","result = []\n","res_shape = (3, 12)  # short, long, both x data\n","config_list_copy = copy.deepcopy(config_list)\n","for set_val in val_list:\n","  # ------------ open 결정 이전의 인자값 ------------ #\n","  # ------ point * dur. ------ #\n","  # config_list_copy[0].loc_set.point1.wrr_32 = set_val\n","  # config_list_copy[0].loc_set.point1.candle_pattern = set_val\n","  # config_list_copy[0].loc_set.zone.degree_list = set_val\n","  # config_list_copy[0].loc_set.point2.wick_score_list = str([set_val])\n","  # config_list_copy[0].loc_set.zone.ir = set_val  \n","  # config_list_copy[0].loc_set.zone.abs_ratio = set_val  \n","\n","  # ------------ open 결정 이후의 인자값 ------------ #\n","  # ------ utils ------ #\n","  # config_list_copy[0].tr_set.tp_gap = set_val  \n","  # config_list_copy[0].tr_set.ep_gap1 = set_val \n","  # config_list_copy[0].tr_set.ep_gap2 = set_val \n","  # config_list_copy[0].tr_set.out_gap = set_val  \n","  config_list_copy[0].tr_set.wave_length1 = set_val  \n","\n","  # config_list_copy[0].tr_set.tp_gap = abs(set_val) - 0.5\n","  # config_list_copy[0].tr_set.out_gap = set_val + 0.5\n","  # config_list_copy[0].tr_set.wb_tp_gap = config_list_copy[0].tr_set.tp_gap\n","  # config_list_copy[0].tr_set.wb_out_gap = config_list_copy[0].tr_set.out_gap\n","\n","  # ------ entry, exit (ep, tp, out vars.) ------ #\n","  # config_list_copy[0].tr_set.expire_k = set_val\n","  # config_list_copy[0].ep_set.expire_tick = set_val  \n"," \n","  for utils_, config_ in zip(utils_list, config_list_copy):\n","    enlist_tr(res_df, config_, np_timeidx)\n","  # open_info_df = get_open_info_df(ep_loc_v3, res_df, np_timeidx, ID_list, config_list_copy, id_idx_list)   # point * mr_res 이기 때문에 utils_tr & rtc 의 영향을 충분히 받음\n","  open_info_df1 = get_open_info_df_v2(ep_loc_p1_v3, res_df, np_timeidx, ID_list, config_list_copy, id_idx_list, open_num=1)  # --> point * dur. 관련 (loc_set) param 에 종속 (open_info 가 변경되는게 아니라면, 재실행할 필요없음)\n","  open_info_df2 = get_open_info_df_v2(ep_loc_p2_v3, res_df, np_timeidx, ID_list, config_list_copy, id_idx_list, open_num=2)\n","  open_info_df_list = [open_info_df1, open_info_df2]\n","\n","  try:\n","    result.append(get_res_v9(res_df, open_info_df_list, ohlc_list, config_list_copy, np_timeidx, funcs, test_ratio=test_ratio, plot_is=1, signi=True))    \n","  except:\n","    result.append(np.full(res_shape, np.nan))\n","    # pass\n","\n","survey_res_list = [np.array(result)[:, s_i::3] for s_i in range(3)]   # 3 for s, l, b\n","# short_res, long_res, both_res = survey_res_list\n","\n","# ------------ plot survey_res ------------ #\n","title_list = [\"short\", \"long\", \"both\"]\n","sub_title_list = ['hhm', 'hlm', 'frq', 'dpf', 'wr', 'sr', 'acc_pr', 'sum_pr', 'min_pr', 'liqd', 'acc_mdd', 'sum_mdd']\n","space_ = \" \" * 120\n","\n","fig = plt.figure(figsize=(24, 8))\n","plt.style.use('dark_background')\n","gs = gridspec.GridSpec(nrows=1,\n","                        ncols=3,\n","                        # height_ratios=[1, 1, 1]\n","                      )\n","# nrows, ncols, h_r = 3, 3, [1, 1, 1]\n","nrows, ncols, h_r = 3, 4, [1, 1, 1]\n","# nrows, ncols, h_r = 4, 3, [1, 1, 1, 1]\n","# if d_idx == 0:\n","# else:\n","  # nrows, ncols, h_r = 2, 2, [1, 1]\n","\n","for d_idx, (title_name, survey_res) in enumerate(zip(title_list, survey_res_list)):  \n","  inner_gs = gs[d_idx].subgridspec(nrows=nrows,\n","                        ncols=ncols,\n","                        height_ratios=h_r\n","                      )\n","  for in_idx, (data_, sub_title) in enumerate(zip(survey_res.T, sub_title_list)):\n","    plt.subplot(inner_gs[in_idx])\n","    data = data_.ravel()\n","    valid_idx = ~np.isnan(data)\n","    if np.sum(valid_idx) > 0:\n","      if type(val_list[0]) == str:\n","        x, y = np.arange(len(val_list))[valid_idx], data[valid_idx]\n","      else:\n","        x, y = val_list[valid_idx], data[valid_idx]\n","      plt.plot(x, y)  # 앞에서부터 len(result) 만큼만    \n","      plt.title(sub_title + '_{:.2f}'.format(x[np.argmax(y)]))\n","    else:\n","      plt.title(sub_title)\n","\n","plt.suptitle(space_.join(title_list))\n","plt.show()\n","# print(\"\\n\")"]},{"cell_type":"markdown","metadata":{"id":"EJ4f-3Zf4ImT"},"source":["### backtrader validation"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"BPI-9QX74ImW"},"outputs":[],"source":["trade_log_name = \"ETHUSDT_1658210884.pkl\"\n","trade_log_dir_path = \"./trade_log/0717_5_47_trader\"\n","\n","with open(os.path.join(trade_log_dir_path, trade_log_name), 'rb') as f:\n","  trade_log = pickle.load(f)"]},{"cell_type":"code","source":["trade_log  # both pos_side's log"],"metadata":{"id":"9Kymnik4ZpA6"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"DiTKuq9T4ImY","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1658222594162,"user_tz":-540,"elapsed":431,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"a06c3f6a-311d-4a7d-c425-00563fd8980f"},"outputs":[{"output_type":"stream","name":"stdout","text":["lacked_open_ts : []\n","added_open_ts : ['2022-01-14 17:27:59.999000']\n","\n","lacked_entry_ts : []\n","added_entry_ts : ['2022-01-14 17:28:59.999000']\n","\n","lacked_exit_ts : []\n","added_exit_ts : ['2022-01-14 19:53:59.999000']\n","\n"]}],"source":["# 1. ts 에 pair 된 en_p, ex_p 만 비교하면 될 것\n","#   -> open_idx, en_idx, ex_idx 조회하면 될 것\n","\n","pos_side = \"SELL\" # BUY\n","val_obj = short_obj if pos_side == \"SELL\" else long_obj\n","\n","# ------ get idep trade_info ------ #\n","op_ts = list(map(lambda x : str(x), res_df.index[val_obj[4].astype(int).ravel()])) \n","en_ts = list(map(lambda x : str(x), res_df.index[val_obj[2].astype(int).ravel()])) \n","ex_ts = list(map(lambda x : str(x), res_df.index[val_obj[3].astype(int).ravel()])) \n","en_p = val_obj[0].ravel()\n","ex_p = val_obj[1].ravel()\n","\n","for order_type, ts_ in zip(['open', 'entry', 'exit'], [op_ts, en_ts, ex_ts]):\n","  trade_log_ts = [k for k, v in trade_log.items() if order_type in v if pos_side in v]\n","  lacked_ts = [ts for ts in ts_ if not ts in trade_log_ts]\n","  added_ts = [ts for ts in trade_log_ts if not ts in ts_]\n","\n","  print(\"lacked_{}_ts :\".format(order_type), lacked_ts)\n","  print(\"added_{}_ts :\".format(order_type), added_ts)\n","  print()"]},{"cell_type":"code","source":["# ex_ts\n","# [k for k, v in trade_log.items() if order_type in v if pos_side in v]\n","# list(trade_log.keys())[1]\n","res_df.iloc[-0:]"],"metadata":{"id":"ZlcPZeuO-UnB"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["#### check added_ts"],"metadata":{"id":"bPfWgZCI73LZ"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"VnTmGTJI4ImZ"},"outputs":[],"source":["keys = list(trade_log.keys())\n","\n","for k_i in range(len(keys)):\n","  if keys[k_i] in added_ts:\n","    # print(trade_log[keys[k_i]])\n","    # print(trade_log[keys[k_i + 1]])\n","    print(keys[k_i], trade_log[keys[k_i]])\n","    print(keys[k_i + 1], trade_log[keys[k_i + 1]])"]},{"cell_type":"markdown","source":["#### price sync_check"],"metadata":{"id":"yMFIedEG77Yt"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"Vn5x7mcP4ImZ","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1658223074884,"user_tz":-540,"elapsed":378,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"96d56d1e-03f6-472a-cddd-5f449f3001ba"},"outputs":[{"output_type":"stream","name":"stdout","text":["2022-01-17 03:19:59.999000 -0.00580000000036307\n","\n","2022-01-18 16:49:59.999000 0.0\n","\n","2022-01-27 05:56:59.999000 -0.007399999999961437\n","\n","2022-01-27 11:51:59.999000 0.0\n","\n","2022-02-03 01:29:59.999000 0.0\n","\n","2022-02-05 10:58:59.999000 0.0\n","\n","2022-02-08 17:00:59.999000 -0.00559999999950378\n","\n","2022-02-13 07:03:59.999000 -0.003800000000410364\n","\n","2022-02-16 10:32:59.999000 -0.0039999999999054126\n","\n","2022-02-16 13:43:59.999000 0.0\n","\n"]}],"source":["accept_price_gap = 0.1\n","for i in range(len(en_ts)):\n","  try:\n","    print(en_ts[i], trade_log[en_ts[i]][0] - en_p[i])\n","    # print(trade_log[str(ex_ts[i])])\n","    # print(ex_ts[i], trade_log[ex_ts[i]][0] - ex_p[i])\n","    # print(ex_ts[i])\n","    print()\n","\n","  except Exception as e:\n","    print(e)\n"]},{"cell_type":"markdown","metadata":{"id":"1GVZ03zDyU2N"},"source":["### legacy"]},{"cell_type":"markdown","metadata":{"id":"IWO7KkqltMFt"},"source":["#### main_functions"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"MY1csdNRLGsk"},"outputs":[],"source":["def get_open_info_df_v2(ep_loc_v2, res_df, np_timeidx, ID_list, config_list, id_idx_list, open_num=1):\n","  start_0 = time.time()\n","  # ------ get mr_res, zone_arr ------ #\n","  short_mr_res_obj = np.array([ep_loc_v2(res_df, config_, np_timeidx, show_detail=True, ep_loc_side=OrderSide.SELL) for config_ in config_list])\n","  long_mr_res_obj = np.array([ep_loc_v2(res_df, config_, np_timeidx, show_detail=True, ep_loc_side=OrderSide.BUY) for config_ in config_list])\n","  short_open_idx_list = [np.where(res_df['short_open{}_{}'.format(open_num, id)].to_numpy() * mr_res)[0] for id, mr_res in zip(ID_list, short_mr_res_obj[:, 0].astype(np.float64))]   # \"point * mr_Res\"\n","  long_open_idx_list = [np.where(res_df['long_open{}_{}'.format(open_num, id)].to_numpy() * mr_res)[0] for id, mr_res in zip(ID_list, long_mr_res_obj[:, 0].astype(np.float64))]  # zip 으로 zone (str) 과 묶어서 dtype 변경됨\n","\n","  # ------ open_info_arr ------ #\n","  short_side_list = [np.full(len(list_), OrderSide.SELL) for list_ in short_open_idx_list]\n","  long_side_list = [np.full(len(list_), OrderSide.BUY) for list_ in long_open_idx_list]\n","\n","  short_zone_list = [zone_res[short_open_idx] for zone_res, short_open_idx in zip(short_mr_res_obj[:, 1], short_open_idx_list)]\n","  long_zone_list = [zone_res[long_open_idx] for zone_res, long_open_idx in zip(long_mr_res_obj[:, 1], long_open_idx_list)]\n","\n","  short_id_list = [np.full(len(list_), id) for id, list_ in zip(ID_list, short_open_idx_list)]\n","  long_id_list = [np.full(len(list_), id) for id, list_ in zip(ID_list, long_open_idx_list)]\n","\n","  selected_id_idx = np.arange(len(id_idx_list))\n","  short_id_idx_list = [np.full(len(list_), id) for id, list_ in zip(selected_id_idx, short_open_idx_list)]\n","  long_id_idx_list = [np.full(len(list_), id) for id, list_ in zip(selected_id_idx, long_open_idx_list)]\n","\n","  # ------ get open_info_df ------ #\n","  #   series 만들어서 short / long 끼리 합치고 둘이 합치고, 중복은 우선 순위 정해서 제거\n","  short_open_df_list = [pd.DataFrame(index=index_, data=np.vstack((data_)).T, columns=['side', 'zone', 'id', 'id_idx']) for index_, data_ in zip(short_open_idx_list, zip(short_side_list, short_zone_list, short_id_list, short_id_idx_list))]\n","  long_open_df_list = [pd.DataFrame(index=index_, data=np.vstack((data_)).T, columns=['side', 'zone', 'id', 'id_idx']) for index_, data_ in zip(long_open_idx_list, zip(long_side_list, long_zone_list, long_id_list, long_id_idx_list))]\n","\n","  open_info_df = pd.concat(short_open_df_list + long_open_df_list)\n","  # ------ sorting + unique ------ #\n","  open_info_df.sort_index(inplace=True)\n","  # print(len(open_info_df))\n","  # print(len(open_info_df))\n","  # open_info_df.head()\n","  print(\"get_open_info_df elapsed time :\", time.time() - start_0)\n","  return open_info_df[~open_info_df.index.duplicated(keep='first')]  # 먼저 순서를 우선으로 지정  "]},{"cell_type":"code","execution_count":29,"metadata":{"id":"eiQ36_SLLE3w","executionInfo":{"status":"ok","timestamp":1658886602529,"user_tz":-540,"elapsed":2,"user":{"displayName":"7th June","userId":"08178289703395036410"}}},"outputs":[],"source":["def get_res_v9(res_df, open_info_df_list, ohlc_list, config_list, np_timeidx, funcs, inversion=False, test_ratio=0.3, plot_is=True, signi=False, show_detail=False):\n","  # ------------ make open_info_list ------------ #\n","  open_idx1, open_idx2 = [open_info_df.index.to_numpy() for open_info_df in open_info_df_list]\n","  len_df = len(res_df)\n","\n","  sample_len = int(len_df * (1 - test_ratio))\n","  sample_idx1 = (open_idx1 < sample_len) == plot_is  # in / out sample plot 여부\n","  sample_open_idx1 = open_idx1[sample_idx1]  \n","  sample_idx2 = (open_idx2 < sample_len) == plot_is  # in / out sample plot 여부\n","\n","  # ------------ open_info_list 기준 = p1 ------------ #\n","  sample_open_info_df1, sample_open_info_df2 = [df_[idx_] for df_, idx_ in zip(open_info_df_list, [sample_idx1, sample_idx2])]\n","  open_info1 = [sample_open_info_df1[col_].to_numpy() for col_ in sample_open_info_df1.columns]\n","\n","  if config_list[0].tr_set.check_hlm in [0, 1]:   # 여기서 open_info 자동화하더라도, utils info 는 직접 실행해주어야함\n","    sample_open_idx2 = sample_open_idx1\n","    open_info2 = open_info1\n","  else:\n","    sample_open_idx2 = open_idx2[sample_idx2]\n","    open_info2 = [sample_open_info_df2[col_].to_numpy() for col_ in sample_open_info_df2.columns]\n","\n","  # ------------ get paired_res ------------ #\n","  start_0 = time.time()\n","  paired_res = en_ex_pairing_v9_2(res_df, [sample_open_idx1, sample_open_idx2], [open_info1, open_info2], ohlc_list, config_list, np_timeidx, funcs, show_detail)\n","  # valid_openi_arr, pair_idx_arr, pair_price_arr, lvrg_arr, fee_arr, tpout_arr = paired_res\n","  print(\"en_ex_pairing elapsed time :\", time.time() - start_0)  #  0.37 --> 0.3660471439361572 --> 0.21(lesser if)\n","\n","  # ------------ idep_plot ------------ #\n","  start_0 = time.time()\n","  high, low = ohlc_list[1:3]\n","  res = idep_plot_v16_2(res_df, len_df, config_list[0], high, low, sample_open_info_df1, paired_res, inversion=inversion, sample_ratio=1 - test_ratio, signi=signi)\n","  print(\"idep_plot elapsed time :\", time.time() - start_0)   # 1.40452 (v6) 1.4311 (v5)\n","\n","  return res"]},{"cell_type":"code","source":["def plot_info_v9(gs, gs_idx, len_df, sample_len, tr, hhm, p2_hhm, out_hhm, mean_low, hlm, bars_in, net_p1_frq, pr, total_pr, cum_pr, liqd, leverage, title_position, fontsize):\n","  try:\n","    plt.subplot(gs[gs_idx])\n","    idep_res_obj = get_res_info_nb_v2(sample_len, pr, total_pr, cum_pr, liqd)\n","    plt.plot(cum_pr)\n","    plt.plot(idep_res_obj[-1], color='gold')\n","    if sample_len is not None:\n","      plt.axvline(sample_len, alpha=1., linestyle='--', color='#ffeb3b')\n","    plt.xlim(0, len_df)\n","\n","    title_str = \"tr : {:.3f}\\n tpbox_hhm : {:.3f}\\n tpbox_p2exec_hhm : {:.3f}\\n outbox_hhm : {:.3f}\\n tpbox_mean_low : {:.3f}\\n hlm : {:.3f}\\n bars_in : {:.3f}\\n net_p1_frq : {}\\n frq : {}\\n dpf : {:.3f}\\n wr : {:.3f}\\n sr : {:.3f}\\n acc_pr : {:.3f}\\n sum_pr : {:.3f}\\n\" +\\\n","              \"min_pr : {:.3f}\\n liqd : {:.3f}\\n acc_mdd : -{:.3f}\\n sum_mdd : -{:.3f}\\n leverage {:.3f}\"\n","    plt.title(title_str.format(tr, hhm, p2_hhm, out_hhm, mean_low, hlm, bars_in, net_p1_frq, *idep_res_obj[:-1], leverage), position=title_position, fontsize=fontsize)\n","  except Exception as e:\n","    print(\"error in plot_info :\", e)\n","\n","  return gs_idx + 1"],"metadata":{"id":"8hdpN7S8JJF-"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":27,"metadata":{"id":"xafHpMLwESKf","executionInfo":{"status":"ok","timestamp":1658886540524,"user_tz":-540,"elapsed":1269,"user":{"displayName":"7th June","userId":"08178289703395036410"}}},"outputs":[],"source":["def idep_plot_v16_2(res_df, len_df, config, high, low, open_info_df1, paired_res, inversion=False, sample_ratio=0.7, title_position=(0.5, 0.5),\n","                  fontsize=15, signi=False):  # open_idx, side_arr\n","    if not signi:\n","        plt.style.use(['dark_background', 'fast'])\n","        plt.figure(figsize=(24, 8))\n","        gs = gridspec.GridSpec(nrows=2,  # row 몇 개\n","                               ncols=3,  # col 몇 개\n","                               height_ratios=[10, 1]\n","                               # height_ratios=[10, 10, 1]\n","                               )\n","    gs_idx = 0\n","    # plt.suptitle(key)\n","\n","    p_ranges, p_qty_ratio = literal_eval(config.tp_set.p_ranges), literal_eval(config.tp_set.p_qty_ratio)\n","    assert np.sum(p_qty_ratio) == 1.0\n","    assert len(p_ranges) == len(p_qty_ratio)\n","\n","    if sample_ratio is not None:\n","        sample_len = int(len_df * sample_ratio)\n","    else:\n","        sample_len = len_df\n","\n","    # ------ short & long data preparation ------ #\n","    # start_0 = time.time()\n","\n","    net_p1_idx_arr, p1_idx_arr, p2_idx_arr, pair_idx_arr, pair_price_arr, lvrg_arr, fee_arr, tpout_arr, tr_arr = paired_res\n","    assert len(p1_idx_arr) != 0, \"assert len(p1_idx_arr) != 0\"\n","\n","    short_net_p1_idx_arr = net_p1_idx_arr[np.where(open_info_df1.side.loc[net_p1_idx_arr] == OrderSide.SELL)[0]]\n","    long_net_p1_idx_arr = net_p1_idx_arr[np.where(open_info_df1.side.loc[net_p1_idx_arr] == OrderSide.BUY)[0]]\n","\n","    short_net_p1_frq = len(short_net_p1_idx_arr)\n","    long_net_p1_frq = len(long_net_p1_idx_arr)\n","    # print(\"len(short_net_p1_true_bias_bool) :\", len(short_net_p1_idx_arr))\n","    # print(\"len(long_net_p1_true_bias_bool) :\", len(long_net_p1_idx_arr))\n","\n","    short_p1_openi_idx = np.where(open_info_df1.side.loc[p1_idx_arr] == OrderSide.SELL)[0]  # p1_idx_arr 에 대한 idx, # side_arr,\n","    long_p1_openi_idx = np.where(open_info_df1.side.loc[p1_idx_arr] == OrderSide.BUY)[0]\n","\n","    # p1_idx = open_idx[p1_openi_arr].reshape(-1, 1)   # != p1_idx_arr, p1_openi_arr 은 exit_done 기준임\n","\n","    np_obj = np.hstack((pair_price_arr, pair_idx_arr, p1_idx_arr.reshape(-1, 1)))  # p1_idx_arr is 1d, need to be changed to 2d (for stacking)\n","    short_obj = np_obj[short_p1_openi_idx]\n","    long_obj = np_obj[long_p1_openi_idx]\n","    both_obj = np.vstack((short_obj, long_obj))\n","    # print(\"short_obj.shape :\", short_obj.shape)\n","    # print(\"long_obj.shape :\", long_obj.shape)\n","\n","    short_obj, long_obj, both_obj = [np.split(obj_, 5, axis=1) for obj_ in [short_obj, long_obj, both_obj]]\n","\n","    short_p2_idx_arr, long_p2_idx_arr = [p2_idx_arr[openi_idx_].reshape(-1, 1) for openi_idx_ in [short_p1_openi_idx, long_p1_openi_idx]]\n","    short_lvrg_arr, long_lvrg_arr = [lvrg_arr[openi_idx_].reshape(-1, 1) for openi_idx_ in [short_p1_openi_idx, long_p1_openi_idx]]\n","    short_fee_arr, long_fee_arr = [fee_arr[openi_idx_].reshape(-1, 1) for openi_idx_ in [short_p1_openi_idx, long_p1_openi_idx]]\n","    short_tpout_arr, long_tpout_arr = [tpout_arr[openi_idx_] for openi_idx_ in [short_p1_openi_idx, long_p1_openi_idx]]\n","    # short_bias_arr, long_bias_arr = [bias_arr[openi_idx_] for openi_idx_ in [short_p1_openi_idx, long_p1_openi_idx]]\n","    short_tr_arr, long_tr_arr = [tr_arr[openi_idx_] for openi_idx_ in [short_p1_openi_idx, long_p1_openi_idx]]\n","    # print(\"long_bias_arr.shape :\", long_bias_arr.shape)\n","    # print(\"short / long arr setting elapsed time :\", time.time() - start_0)\n","\n","    # start_0 = time.time()\n","\n","    short_tpbox_hhm, long_tpbox_hhm, short_tpbox_p2exec_hhm, long_tpbox_p2exec_hhm, short_outbox_hhm, long_outbox_hhm, \\\n","          short_net_p1_bias_tick, long_net_p1_bias_tick, short_p2exec_p1_bias_tick, long_p2exec_p1_bias_tick, short_p2_true_bias_bool, long_p2_true_bias_bool, \\\n","          short_tp_1, short_tp_0, long_tp_1, long_tp_0, short_out_1, short_out_0, long_out_1, long_out_0, short_ep2_0, long_ep2_0 = \\\n","      get_wave_bias_v6(res_df, config, high, low, len_df, short_net_p1_idx_arr, long_net_p1_idx_arr, short_p2_idx_arr, long_p2_idx_arr, short_obj, long_obj)\n","\n","    # print(\"get_wave_bias elapsed time :\", time.time() - start_0)\n","    print(\"short_net_p1_bias_tick, long_net_p1_bias_tick, short_p2exec_p1_bias_tick, long_p2exec_p1_bias_tick :\", short_net_p1_bias_tick, long_net_p1_bias_tick, short_p2exec_p1_bias_tick, long_p2exec_p1_bias_tick)\n","\n","    len_short, len_long = len(short_p1_openi_idx), len(long_p1_openi_idx)\n","\n","    # ------ plot_data ------ #\n","    try:\n","        # start_0 = time.time()\n","        if len_short == 0:\n","            short_pr = []\n","            gs_idx += 1\n","        else:\n","            short_tr = short_tr_arr.mean()\n","            short_pr, short_liqd = get_pr_v4(OrderSide.SELL, high, low, short_obj, short_tpout_arr, short_lvrg_arr, short_fee_arr, p_ranges,\n","                                             p_qty_ratio, inversion)\n","            short_total_pr = to_total_pr(len_df, short_pr, short_obj[-2])\n","            short_cum_pr = np.cumprod(short_total_pr)\n","            short_hlm = hlm(short_pr, short_p2_true_bias_bool)\n","            short_trade_ticks = np.mean(short_obj[-2] - short_obj[-1])\n","            if signi:\n","                short_idep_res_obj = (short_tpbox_p2exec_hhm, short_hlm) + get_res_info_nb_v2(sample_len, short_pr, short_total_pr, short_cum_pr, short_liqd)\n","            else:\n","                gs_idx = plot_info_v8(gs, gs_idx, len_df, sample_len, short_tr, short_tpbox_hhm, short_tpbox_p2exec_hhm, short_outbox_hhm, short_hlm, short_trade_ticks, short_net_p1_frq, short_pr, short_total_pr,\n","                                      short_cum_pr, short_liqd, short_lvrg_arr.mean(), title_position, fontsize)\n","        # print(\"short plot_data elapsed time :\", time.time() - start_0)\n","\n","    except Exception as e:\n","        gs_idx += 1\n","        print(\"error in short plot_data :\", e)\n","\n","    try:\n","        # start_0 = time.time()\n","        if len_long == 0:\n","            long_pr = []\n","            gs_idx += 1\n","        else:\n","            long_tr = long_tr_arr.mean()\n","            long_pr, long_liqd = get_pr_v4(OrderSide.BUY, high, low, long_obj, long_tpout_arr, long_lvrg_arr, long_fee_arr, p_ranges, p_qty_ratio,\n","                                           inversion)\n","            long_total_pr = to_total_pr(len_df, long_pr, long_obj[-2])\n","            long_cum_pr = np.cumprod(long_total_pr)\n","            # long_hhm = long_net_p1_hhm\n","            long_hlm = hlm(long_pr, long_p2_true_bias_bool)\n","            long_trade_ticks = np.mean(long_obj[-2] - long_obj[-1])\n","            if signi:\n","                long_idep_res_obj = (long_tpbox_p2exec_hhm, long_hlm) + get_res_info_nb_v2(sample_len, long_pr, long_total_pr, long_cum_pr, long_liqd)\n","            else:\n","                gs_idx = plot_info_v8(gs, gs_idx, len_df, sample_len, long_tr, long_tpbox_hhm, long_tpbox_p2exec_hhm, long_outbox_hhm, long_hlm, long_trade_ticks, long_net_p1_frq, long_pr, long_total_pr,\n","                                      long_cum_pr, long_liqd, long_lvrg_arr.mean(), title_position, fontsize)\n","        # print(\"long plot_data elapsed time :\", time.time() - start_0)\n","    except Exception as e:\n","        gs_idx += 1\n","        print(\"error in long plot_data :\", e)\n","\n","    try:\n","        # start_0 = time.time()\n","        if len_short * len_long == 0:\n","            both_pr = []\n","            gs_idx += 1\n","        else:\n","            both_tr = (short_tr + long_tr) / 2\n","            both_pr = np.vstack((short_pr, long_pr))  # for 2d arr, obj 를 1d 로 만들지 않는 이상, pr 은 2d 유지될 것\n","            both_total_pr = to_total_pr(len_df, both_pr, both_obj[-2])\n","            both_cum_pr = np.cumprod(both_total_pr)\n","            both_liqd = min(short_liqd, long_liqd)\n","            both_p2_true_bias_bool = np.hstack((short_p2_true_bias_bool, long_p2_true_bias_bool))  # hstack for 1d arr, vstack for 2d arr\n","            both_tpbox_hhm = (short_tpbox_hhm + long_tpbox_hhm) / 2\n","            both_tpbox_p2exec_hhm, both_hlm = (short_tpbox_p2exec_hhm + long_tpbox_p2exec_hhm) / 2, (short_hlm + long_hlm) / 2\n","            both_outbox_hhm = (short_outbox_hhm + long_outbox_hhm) / 2\n","            both_trade_ticks = np.mean(both_obj[-2] - both_obj[-1])\n","            both_net_p1_frq = short_net_p1_frq + long_net_p1_frq\n","            if signi:\n","                both_idep_res_obj = (both_tpbox_p2exec_hhm, both_hlm) + get_res_info_nb_v2(sample_len, both_pr, both_total_pr, both_cum_pr, both_liqd)\n","            else:\n","                gs_idx = plot_info_v8(gs, gs_idx, len_df, sample_len, both_tr, both_tpbox_hhm, both_tpbox_p2exec_hhm, both_outbox_hhm, both_hlm, both_trade_ticks, both_net_p1_frq, both_pr, both_total_pr,\n","                                      both_cum_pr, both_liqd, lvrg_arr.mean(), title_position, fontsize)\n","        # print(\"both plot_data elapsed time :\", time.time() - start_0)\n","    except Exception as e:\n","        gs_idx += 1\n","        print(\"error in both plot_data :\", e)\n","\n","    if not signi:\n","        if len_short * len_long > 0:\n","            for obj, bias_arr, cum_pr in zip([short_obj, long_obj, both_obj], [short_p2_true_bias_bool, long_p2_true_bias_bool, both_p2_true_bias_bool],\n","                                             [short_cum_pr, long_cum_pr, both_cum_pr]):\n","                try:\n","                    # start_0 = time.time()\n","                    gs_idx = frq_dev_plot_v4(gs, gs_idx, len_df, sample_len, obj[-2], bias_arr, cum_pr[-1], fontsize)\n","                    # print(\"frq_dev_plot elapsed time :\", time.time() - start_0)\n","                except Exception as e:\n","                    gs_idx += 1\n","                    print(\"error in frq_dev_plot :\", e)\n","            plt.show()\n","            plt.close()\n","\n","        return short_pr, short_obj, short_lvrg_arr, short_fee_arr, short_tpout_arr, short_tr_arr, short_p2_true_bias_bool, short_net_p1_bias_tick, short_p2exec_p1_bias_tick, short_net_p1_idx_arr, short_p2_idx_arr, short_tp_1, short_tp_0, short_out_1, short_out_0, short_ep2_0, \\\n","               long_pr, long_obj, long_lvrg_arr, long_fee_arr, long_tpout_arr, long_tr_arr, long_p2_true_bias_bool, long_net_p1_bias_tick, long_p2exec_p1_bias_tick, long_net_p1_idx_arr, long_p2_idx_arr, long_tp_1, long_tp_0, long_out_1, long_out_0, long_ep2_0  # long_net_p1_idx_arr long_p2_idx_arr\n","\n","    else:\n","        return [short_idep_res_obj[:-1], long_idep_res_obj[:-1], both_idep_res_obj[:-1]]"]},{"cell_type":"markdown","metadata":{"id":"EFyWTuscH8VH"},"source":["#### get paired_res function"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"qfbtFVMR01UJ"},"outputs":[],"source":["def en_ex_pairing_v9_2(res_df, open_idx_list, open_info_list, ohlc_list, config_list, np_timeidx, funcs, show_detail=False):  # 이미 충분히 줄여놓은 idx 임\n","\n","    open_info1, open_info2 = open_info_list\n","    side_arr1, _, _, id_idx_arr1 = open_info1\n","    side_arr2, _, _, _ = open_info2\n","\n","    expiry_p1, expiry_p2, lvrg_set = funcs\n","\n","    net_p1_idx_list, p1_idx_list, p2_idx_list, pair_idx_list, pair_price_list, lvrg_list, fee_list, tpout_list, tr_list = [[] for li in range(9)]\n","    len_df = len(res_df)\n","\n","    open, high, low, close = ohlc_list\n","    \n","    open_idx1, open_idx2 = open_idx_list\n","    len_open_idx1 = len(open_idx1)\n","    len_open_idx2 = len(open_idx2)\n","    i, open_i1, open_i2 = 0, -1, -1  # i for total_res_df indexing\n","\n","    while 1:   # for p1's loop\n","\n","        # Todo, \n","        #   1. (갱신) p1's open_i + 1 과 op_idx 를 꺼내오는 건, eik1 또는 tp 체결의 경우만 해당됨, \n","        #   2. out 의 경우 p2's op_idx 기준으로 retry 필요\n","        #     a. 또한, p2's op_idx > p1's op_idx\n","\n","        # ============ get p1_info ============ #\n","        # if eik1 or tp_done or first loop:\n","        open_i1 += 1  # 확인 끝났으면 조기 이탈(+1), 다음 open_idx 조사 진행\n","        if open_i1 >= len_open_idx1:\n","            break\n","\n","        if show_detail:\n","            print(\"open_i1 :\", open_i1, side_arr1[open_i1])\n","\n","        op_idx1 = open_idx1[open_i1]  # open_i1 는 i 와 별개로 운영\n","        if op_idx1 < i:  # i = 이전 거래 끝난후의 res_df index - \"거래 종료후 거래 시작\", '<' : 거래 종료시점 진입 가능하다는 의미\n","            continue\n","\n","        # ------ set loop index i ------ #\n","        i = op_idx1      # + 1 --> op_idx1 = op_idx2 가능함 # open_signal 이 close_bar.shift(1) 이라고 가정하고 다음 bar 부터 체결확인한다는 의미\n","        if i >= len_df:  # res_df 의 last_index 까지 돌아야함\n","            break        \n","\n","        # ------ dynamic arr info by ID ------ #\n","        #     1. 해당 id 로 config 재할당해야함\n","        #       a. use open_i1\n","        open_side = side_arr1[open_i1]\n","        id_idx = id_idx_arr1.astype(int)[open_i1]\n","        config = config_list[id_idx]\n","        selection_id = config.selection_id\n","        check_hlm = config.tr_set.check_hlm   \n","\n","        # check_net_hhm = 1 if (config.tr_set.wave_itv1 == config.tr_set.wave_itv2) and (config.tr_set.wave_period1 == config.tr_set.wave_period2) else 0\n","\n","        side_pos = 'short' if open_side == OrderSide.SELL else 'long'   \n","        if show_detail:\n","          print(\"============ op_idx1 : {} {} ============\".format(op_idx1, open_side))\n","     \n","        # if show_detail:\n","        #   print(\"check_hlm :\", check_hlm)\n","\n","        # ------ load tr_data ------ #\n","        tp_arr = res_df['{}_tp_{}'.format(side_pos, selection_id)].to_numpy()\n","        ep1_arr = res_df['{}_ep1_{}'.format(side_pos, selection_id)].to_numpy()\n","        ep2_arr = res_df['{}_ep2_{}'.format(side_pos, selection_id)].to_numpy()\n","        out_arr = res_df['{}_out_{}'.format(side_pos, selection_id)].to_numpy()\n","\n","        tr_arr = res_df['{}_tr_{}'.format(side_pos, selection_id)].to_numpy()  # just for p1_hhm\n","\n","        tp_1_ = res_df['{}_tp_1_{}'.format(side_pos, selection_id)].to_numpy()[op_idx1]  # for p2_box location & p1's exipiry\n","        tp_0_ = res_df['{}_tp_0_{}'.format(side_pos, selection_id)].to_numpy()[op_idx1]\n","        tp_gap_ = res_df['{}_tp_gap_{}'.format(side_pos, selection_id)].to_numpy()[op_idx1]    \n","\n","        # if not check_net_hhm:  # this phase exist for p1 entry (net hhm sync.) in p2_platform\n","        exec_j, ep_j, tp_j, out_j, entry_done, en_p, fee = check_entry_v6(res_df, config, config.ep_set.entry_type, op_idx1, tp_1_, tp_gap_, len_df, open_side,\n","                                                                                [*ohlc_list, ep1_arr], expiry_p2)        \n","        i = exec_j  # = entry_loop 를 돌고 나온 e_j\n","        if not entry_done:\n","            if show_detail:\n","              print(\"p1's expiry by expiry_p2 function in p1's loop : continue\")\n","            continue   \n","        # else:        \n","        #   tp_j = op_idx1\n","\n","        prev_open_i2 = open_i2\n","        net_p1_idx_list.append(op_idx1)\n","        # if check_hlm in [0, 1]:\n","        #   i = op_idx1  # allow op_idx2 = op_idx1\n","        # allow_exit = 1\n","        # ============ entry loop ============ #\n","        while 1:  # for p2's loop (allow retry)\n","\n","          # ============ get p2_info ============ #\n","          if check_hlm == 2:\n","            open_i2 += 1  # 확인 끝났으면 조기 이탈(+1), 다음 open_idx 조사 진행\n","            if open_i2 >= len_open_idx2:  # open_i2 소진\n","                break\n","\n","            if show_detail:\n","              print(\"open_i2 :\", open_i2, side_arr2[open_i2])\n","\n","            # ------ check side sync. ------ #\n","            if open_side != side_arr2[open_i2]:\n","              continue\n","\n","            # ------ assert, op_idx2 >= exec_j ------ #\n","            op_idx2 = open_idx2[open_i2]  # open_i2 는 i 와 별개로 운영\n","            if op_idx2 < i:   # p1 execution 이후의 i 를 허용 (old, 이곳 i = op_idx1 + 1 or p2's exec_j or exit_loop's i + 1)\n","              continue\n","            \n","            if show_detail:\n","              print(\"op_idx1, op_idx2 :\", op_idx1, op_idx2, side_arr2[open_i2])\n","            \n","            i = op_idx2 + 1  # open_signal 이 close_bar.shift(1) 이라고 가정하고 다음 bar 부터 체결확인한다는 의미\n","            if i >= len_df:  # res_df 의 last_index 까지 돌아야함\n","                break\n","\n","          else:\n","            op_idx2 = op_idx1\n","\n","          tp_ = tp_arr[op_idx1]          \n","          ep2_ = ep2_arr[op_idx2]\n","          out_ = out_arr[op_idx2]\n","\n","          out_1_ = res_df['{}_out_1_{}'.format(side_pos, selection_id)].to_numpy()[op_idx2]\n","          out_0_ = res_df['{}_out_0_{}'.format(side_pos, selection_id)].to_numpy()[op_idx2]\n","          out_gap_ = res_df['{}_out_gap_{}'.format(side_pos, selection_id)].to_numpy()[op_idx2]          \n","          \n","\n","          if check_hlm == 2:\n","            # ------ check p1's expiry - Todo, priority ------ # - p2_box 생성 이전의 hl_survey\n","            # 1. op_idx1 ~ op_idx2 까지의 hl_check \n","            # if check_hlm:  # p1_hlm, p2_hlm --> Todo, 이거를 왜 p1_hlm 에도 적용했는지 잘 모르겠음\n","            if op_idx1 < op_idx2:\n","              expire, touch_idx = expiry_p1(res_df, config, op_idx1, op_idx2, tp_1_, tp_0_, tp_gap_, ohlc_list[1:3], open_side)\n","              if expire:   # p1's expiry\n","                  if show_detail:\n","                    print(\"expiry_p1, touch_idx = {} : break\".format(touch_idx))\n","                  i = touch_idx  #  + 1  --> 이거 아닌것 같음 # op_idx1 과 op_idx2 사이의 op_idx1' 을 살리기 위함, 즉 바로 다음 op_idx1 로 회귀 (건너뛰지 않고)\n","                  open_i2 = prev_open_i2\n","                  break   # change op_idx1\n","\n","            # ------ p2 point_validation - vectorization unavailable ------ # p1_loop 로 return 되는 정확한 i 를 반환하기 위해서 expiry_p1 에 순서 양보  # Todo, 새로운 tp, ep, out 에 대한 처리 필요 (p1_hlm 사용시)\n","            if open_side == OrderSide.SELL:\n","              if not (tp_ < ep2_):  # tr_set validation & reject hl_out open_exec.\n","                break  # change op_idx1\n","              elif not (ep2_ < out_ and close[op_idx2] < out_):\n","                if show_detail:\n","                  print(\"point validation : continue\")\n","                continue  # change op_idx2\n","            else:\n","              if not (tp_ > ep2_):              \n","                break\n","              elif not (ep2_ > out_ and close[op_idx2] > out_):\n","                if show_detail:\n","                  print(\"point validation : continue\")\n","                continue\n","\n","            # ------ p2_box location ------ #\n","            if open_side == OrderSide.SELL:\n","              if not ((tp_1_ + tp_gap_ * config.tr_set.p2_box_k1 <= out_1_) and (out_0_ <= tp_0_ - tp_gap_ * config.tr_set.p2_box_k2)):  # tp1, tp0 에 닿으면 expiry\n","              # if not ((tp_1_ + tp_gap_ * config.tr_set.p2_box_k1 >= out_1_) and (out_0_ <= tp_0_ - tp_gap_ * config.tr_set.p2_box_k2)):  # tp1, tp0 에 닿으면 expiry\n","                if show_detail:\n","                    print(\"p2_box rejection : continue\")\n","                continue\n","              else:                \n","                # ------ p1p2_low ------ #\n","                if not high[op_idx1:op_idx2 + 1].max() < tp_0_ - tp_gap_ * config.tr_set.p1p2_low:\n","                  if show_detail:\n","                    print(\"p1p2_low rejection : continue\")\n","                  continue\n","            else:\n","              if not ((tp_1_ - tp_gap_ * config.tr_set.p2_box_k1 >= out_1_) and (out_0_ >= tp_0_ + tp_gap_ * config.tr_set.p2_box_k2)):\n","              # if not ((tp_1_ - tp_gap_ * config.tr_set.p2_box_k1 <= out_1_) and (out_0_ >= tp_0_ + tp_gap_ * config.tr_set.p2_box_k2)):\n","                if show_detail:\n","                    print(\"p2_box rejection : continue\")\n","                continue\n","              else:\n","                # ------ p1p2_low ------ #\n","                if not low[op_idx1:op_idx2 + 1].min() > tp_0_ + tp_gap_ * config.tr_set.p1p2_low:\n","                  if show_detail:\n","                    print(\"p1p2_low rejection : continue\")\n","                  continue\n","\n","            # ------ check p2's expiry ------ #\n","            exec_j, ep_j, _, out_j, entry_done, en_p, fee = check_entry_v6(res_df, config, config.ep_set.point2.entry_type, op_idx2, tp_1_, tp_gap_, len_df, open_side,\n","                                                                                    [*ohlc_list, ep2_arr], expiry_p2)   # Todo, tp_1 & tp_gap 사용이 맞을 것으로 봄\n","            i = exec_j  # = entry_loop 를 돌고 나온 e_j\n","            if not entry_done:   # p2's expiry\n","                if show_detail:\n","                    print(\"expiry_p2, i = {} : continue\".format(i))\n","                continue  # change op_idx2            \n","            \n","            # ------ devectorized tr_calc ------ #   # en_p 에 대해 하는게 맞을 것으로봄\n","            if open_side == OrderSide.SELL:\n","              tr_ = abs((en_p / tp_ - config.trader_set.limit_fee - 1) / (en_p / out_ - config.trader_set.market_fee - 1))\n","            else:\n","              tr_ = abs((tp_ / en_p - config.trader_set.limit_fee - 1) / (out_ / en_p - config.trader_set.market_fee - 1))              \n","\n","            # ------ tr_threshold ------ #\n","            if config.loc_set.point2.short_tr_thresh != \"None\":\n","              if open_side == OrderSide.SELL:\n","                if tr_ < config.loc_set.point2.short_tr_thresh:\n","                  if show_detail:\n","                    print(\"tr_threshold : continue\")\n","                  continue\n","              else:\n","                if tr_ < config.loc_set.point2.long_tr_thresh:\n","                  if show_detail:\n","                    print(\"tr_threshold : continue\")\n","                  continue\n","                \n","          else:\n","            tr_ = tr_arr[op_idx1]\n","\n","          # ------ leverage ------ #\n","          # out = out_arr[out_j]  # lvrg_set use out on out_j (out_j shoud be based on p2)\n","          leverage = lvrg_set(res_df, config, open_side, en_p, out_, fee)  # res_df 변수 사용됨 - 주석 처리 된 상태일뿐\n","          if leverage is None:\n","              if show_detail:\n","                    print(\"leverage is None : continue\")\n","              if check_hlm:\n","                continue  # change op_idx2\n","              else:\n","                break   # change op_idx1\n","\n","          exit_done, cross_on = 0, 0\n","          # ------ check tpout_onexec ------ #\n","          # if not config.ep_set.static_ep and config.ep_set.entry_type == \"LIMIT\" and config.ep_set.tpout_onexec:\n","          if config.ep_set.entry_type == \"LIMIT\":\n","              if config.tp_set.tp_onexec:  # dynamic 은 tp_onexec 사용하는 의미가 없음\n","                  tp_j = exec_j\n","              if config.out_set.out_onexec:  # dynamic 은 out_onexec 사용하는 의미가 없음\n","                  out_j = exec_j\n","\n","          # ============ exit loop ============ # --> p1_hlm 의 경우, 1번만 실행\n","          # if not allow_exit:\n","          #   continue\n","\n","          while 1:\n","              if not config.tp_set.static_tp:  # 앞으로 왠만하면 static 만 사용할 예정\n","                  tp_j = i\n","              if not config.out_set.static_out:\n","                  out_j = i\n","\n","              # ------------ out ------------ #  # out 우선 (보수적 검증)\n","              # ------ signal_out ------ #\n","              if not exit_done:\n","                  exit_done, cross_on, ex_p, fee = check_signal_out_v3(res_df, config, open_i2, i, len_df, fee, open_side, cross_on, exit_done, [*ohlc_list, np_timeidx])\n","              # ------ hl_out ------ #\n","              if config.out_set.hl_out != \"None\":\n","                  if not exit_done:  # and i != len_df - 1:\n","                      exit_done, ex_p, fee = check_hl_out_v2(config, i, out_j, len_df, fee, open_side, exit_done, [*ohlc_list, out_arr])\n","\n","              # ------------ tp ------------ #\n","              if not config.tp_set.non_tp and i != exec_j:\n","                if not exit_done:\n","                  exit_done, ex_p, fee = check_limit_tp_exec(res_df, config, open_i2, i, tp_j, len_df, fee, open_side, exit_done,\n","                                                            [*ohlc_list, [tp_arr]])  # 여기서는 j -> i 로 변경해야함\n","                  # if config.tp_set.tp_type in ['LIMIT']:  # 'BOTH' -> 앞으로는, LIMIT 밖에 없을거라 주석처리함\n","                  # if not exit_done and config.tp_set.tp_type in ['MARKET', 'BOTH']:\n","\n","              if exit_done:  # 이 phase 는 exit_phase 뒤에도 있어야할 것 - entry_done var. 사용은 안하겠지만\n","                  # ------ append dynamic vars. ------ #\n","                  p1_idx_list.append(op_idx1)  # side, zone, start_ver arr 모두 openi_list 로 접근하기 위해 open_i 를 담음\n","                  p2_idx_list.append(op_idx2)\n","                  pair_idx_list.append([exec_j, i])  # entry & exit (체결 기준임)\n","                  pair_price_list.append([en_p, ex_p])\n","                  lvrg_list.append(leverage)\n","                  fee_list.append(fee)\n","                  tpout_list.append([tp_arr[tp_j], out_arr[out_j]])  # for tpout_line plot_check\n","                  tr_list.append(tr_)   # Todo, tr vectorize 불가함, 직접 구해주어야할 건데.. (오래걸리지 않을까 --> tr_set 데이터만 모아서 vecto 계산이 나을 것)\n","\n","                  # open_i += 1  # 다음 open_idx 조사 진행\n","                  break\n","\n","              # 1. 아래있으면, 체결 기준부터 tp, out 허용 -> tp 가 entry_idx 에 체결되는게 다소 염려되기는 함, 일단 진행 (그런 case 가 많지 않았으므로)\n","              # 2. 위에있으면, entry 다음 tick 부터 exit 허용\n","              i += 1\n","              if i >= len_df:  # res_df 의 last_index 까지 돌아야함\n","                  break\n","          \n","          if i >= len_df:  # res_df 의 last_index 까지 돌아야함\n","              break\n","\n","          if exit_done == 1:  # tp_done\n","            if show_detail:\n","                    print(\"exit_done = {}, i = {} : break\".format(exit_done, i))\n","            break   # change op_idx1\n","          else:  # exit_done -> -1 or 0 (0 means end of df) \n","            if check_hlm == 2:\n","              # if check_hlm == 1:   # exit only once in p1_hlm mode\n","              #   allow_exit = 0\n","              if show_detail:\n","                      print(\"exit_done = {}, i = {} : continue\".format(exit_done, i))\n","              continue  # change op_idx2\n","            else:\n","              if show_detail:\n","                      print(\"exit_done = {}, i = {} : break\".format(exit_done, i))\n","              break   # change op_idx1    \n","\n","        # if op_idx1 >= 16355:\n","        #   break\n","\n","        if i >= len_df:  # or open_i >= len_open_idx:  # res_df 의 last_index 까지 돌아야함\n","            break\n","        else:\n","            continue\n","\n","    return np.array(net_p1_idx_list), np.array(p1_idx_list), np.array(p2_idx_list), np.array(pair_idx_list), np.array(pair_price_list), np.array(lvrg_list), np.array(\n","        fee_list), np.array(tpout_list), np.array(tr_list)\n","\n","\n","def check_entry_v6(res_df, config, entry_type, op_idx, wave1, wave_gap, len_df, open_side, np_datas, expiry):\n","    open, high, low, close, ep_arr = np_datas\n","    ep_j = op_idx\n","    tp_j = op_idx\n","    out_j = op_idx\n","\n","    # print(\"ep_arr[op_idx] :\", ep_arr[op_idx])\n","\n","    selection_id = config.selection_id    \n","    # allow_ep_in = 0 if config.ep_set.point2.use_point2 else 1\n","    entry_done = 0\n","    ep = None\n","\n","    if entry_type == \"LIMIT\":\n","        fee = config.trader_set.limit_fee\n","\n","        for e_j in range(op_idx + 1, len_df):\n","            # ------ index setting for dynamic options ------ #\n","            if not config.ep_set.static_ep:\n","                ep_j = e_j  # dynamic_ep 를 위한 ep_index var.\n","                out_j = e_j  # dynamic_out 를 위한 out_index var. - 조건식이 static_ep 와 같이 있는 이유 모름 => dynamic_lvrg 로 사료됨\n","\n","            if not config.tp_set.static_tp:\n","                tp_j = e_j\n","\n","            # ------ expire_k & expire_tick ------ # - limit 사용하면 default 로 expire_k 가 존재해야함\n","            if expiry(res_df, config, op_idx, e_j, wave1, wave_gap, [high, low], open_side):  # tp_j, \n","              break\n","\n","            # ------ point2 ------ #\n","            # if not allow_ep_in:\n","            #     allow_ep_in, out_j = ep_loc_point2(res_df, config, e_j, out_j, side=OrderSide.SELL)\n","            #     if allow_ep_in:\n","            #       if config.ep_set.point2.entry_type == \"LIMIT\":\n","            #         ep_j = e_j\n","            #         # print(\"e_j in point2 :\", e_j)\n","            #         continue\n","\n","            # ------ check ep_exec ------ #\n","            # if allow_ep_in:\n","              # if config.ep_set.point2.use_point2 and config.ep_set.point2.entry_type == 'MARKET':\n","              #   entry_done = 1\n","              #   ep = c[e_j]\n","              #   break\n","              # else:\n","\n","            if open_side == OrderSide.SELL:\n","              if high[e_j] >= ep_arr[ep_j]:\n","                  entry_done = 1\n","                  ep = ep_arr[ep_j]\n","                  if open[e_j] >= ep_arr[ep_j]:  # open comp 는 결국, 수익률에 얹어주는 logic (반보수) -> 사용 보류\n","                      ep = open[e_j]\n","                  break\n","            else:\n","              if low[e_j] <= ep_arr[ep_j]:\n","                  entry_done = 1\n","                  ep = ep_arr[ep_j]\n","                  if open[e_j] <= ep_arr[ep_j]:\n","                      ep = open[e_j]\n","                  break\n","\n","    else:  # market entry\n","        e_j = op_idx + 1\n","        entry_done = 1\n","        ep = close[op_idx]\n","        fee = config.trader_set.market_fee\n","\n","    return e_j, ep_j, tp_j, out_j, entry_done, ep, fee  # 다음 start_i <-- e_j 로 변경\n","    #   e_j => 다음 phase 의 시작 index <-> ep_j : ep 의 기준 index\n","    #   ep_j, tp_j, out_j 가 return 되어야함 - exit phase 에서 이어가기 위함\n","\n","\n","def check_limit_tp_exec(res_df, config, open_i, i, tp_j, len_df, fee, open_side, exit_done, np_datas):\n","\n","    open, high, low, close, tps = np_datas\n","    tp = None\n","    selection_id = config.selection_id\n","    len_tps = len(tps)\n","\n","    for tp_i, tp_arr in enumerate(tps):\n","\n","        #     decay adjustment    #\n","        #     tp_j includes dynamic_j - functionalize  #\n","        # try:\n","        #     if config.tr_set.decay_gap != \"None\":\n","        #         decay_share = (j - open_i) // config.tp_set.decay_term\n","        #         decay_remain = (j - open_i) % config.tp_set.decay_term\n","        #         if j != open_i and decay_remain == 0:\n","        #             if open_side == OrderSide.SELL:\n","        #                 tp_arr[tp_j] += res_df['short_tp_gap_{}'.format(selection_id)].iloc[open_i] * config.tr_set.decay_gap * decay_share\n","        #             else:\n","        #                 tp_arr[tp_j] -= res_df['long_tp_gap_{}'.format(selection_id)].iloc[open_i] * config.tr_set.decay_gap * decay_share\n","        # except:\n","        #     pass\n","\n","        if open_side == OrderSide.SELL:\n","            if low[i] <= tp_arr[tp_j]:  # and partial_tp_cnt == tp_i:  # we use static tp now\n","                # if low[i] <= tp_arr[i] <= h[i]: --> 이건 잘못되었음\n","                # partial_tp_cnt += 1 --> partial_tp 보류\n","\n","                # ------ dynamic tp ------ #\n","                if tp_arr[i] != tp_arr[i - 1] and not config.tp_set.static_tp:\n","                    # tp limit 이 불가한 경우 - open 이 이미, tp 를 넘은 경우\n","                    if open[i] < tp_arr[i]:\n","                        tp = open[i]\n","                    # tp limit 이 가능한 경우 - open 이 아직, tp 를 넘지 않은 경우\n","                    else:\n","                        tp = tp_arr[i]\n","\n","                # ------ static tp ------ #\n","                else:\n","                    #   tp limit 이 불가한 경우 - open 이 이미, tp 를 넘은 경우\n","                    if open[i] < tp_arr[tp_j]:  # static 해놓고 decay 사용하면 dynamic 이니까\n","                        if config.tr_set.decay_gap != \"None\" and decay_remain == 0:\n","                            tp = open[i]  # tp_j -> open_i 를 가리키기 때문에 decay 는 한번만 진행되는게 맞음\n","                        else:\n","                            tp = tp_arr[tp_j]\n","                    else:\n","                        tp = tp_arr[tp_j]\n","\n","                if tp_i == len_tps - 1:\n","                    exit_done = 1  # partial 을 고려해 exit_done = 1 상태는 tp_i 가 last_index 로 체결된 경우만 해당\n","\n","        else:\n","            if high[i] >= tp_arr[tp_j]:\n","                # ------ dynamic tp ------ #\n","                if tp_arr[i] != tp_arr[i - 1] and not config.tp_set.static_tp:\n","                    if open[i] > tp_arr[i]:\n","                        tp = open[i]\n","                    else:\n","                        tp = tp_arr[i]\n","\n","                # ------ static tp ------ #\n","                else:\n","                    if open[i] > tp_arr[tp_j]:\n","                        if config.tr_set.decay_gap != \"None\" and decay_remain == 0:\n","                            tp = open[i]\n","                        else:\n","                            tp = tp_arr[tp_j]\n","                    else:\n","                        tp = tp_arr[tp_j]\n","\n","                if tp_i == len_tps - 1:\n","                    exit_done = 1  # partial 을 고려해 exit_done = 1 상태는 tp_i 가 last_index 로 체결된 경우만 해당\n","\n","    if exit_done:\n","        fee += config.trader_set.limit_fee\n","\n","    return exit_done, tp, fee\n","\n","\n","def check_signal_out_v3(res_df, config, open_i, i, len_df, fee, open_side, cross_on, exit_done, np_datas):    \n","\n","    _, _, _, close, np_timeidx = np_datas\n","    ex_p = None\n","    selection_id = config.selection_id\n","\n","    # ------ timestamp ------ #\n","    if config.out_set.tf_exit != \"None\":\n","        if np_timeidx[i] % config.out_set.tf_exit == config.out_set.tf_exit - 1 and i != open_i:\n","            exit_done = -1\n","\n","    # ------ rsi ------ # -> vectorize 가능함 => 추후 적용\n","    if config.out_set.rsi_exit:\n","        rsi_T = res_df['rsi_T'].to_numpy()\n","\n","        if open_side == OrderSide.SELL:\n","            if (rsi_T[i - 1] >= 50 - config.loc_set.point.osc_band) & (rsi_T[i] < 50 - config.loc_set.point.osc_band):\n","                exit_done = -1\n","        else:\n","            if (rsi_T[i - 1] <= 50 + config.loc_set.point.osc_band) & (rsi_T[i] > 50 + config.loc_set.point.osc_band):\n","                exit_done = -1\n","\n","    # ------ heikin_ashi ------ #\n","    # if selection_id in ['v3_3']:\n","    #     if open_side == OrderSide.SELL:\n","    #       if (ha_o[i] < ha_c[i]):# & (ha_o[i] == ha_l[i]):   # 양봉 출현\n","    #           exit_done = -1\n","    #     else:\n","    #       if (ha_o[i] > ha_c[i]):# & (ha_o[i] == ha_h[i]):  # 음봉 출현\n","    #           exit_done = -1\n","\n","    # ------------ early out ------------ #\n","    # ------ bb ------ # --> cross_on 기능은 ide latency 개선 여부에 해당되지 않음\n","    if selection_id in ['v5_2']:\n","        bb_upper_5T = res_df['bb_upper_5T'].to_numpy()\n","        bb_lower_5T = res_df['bb_lower_5T'].to_numpy()\n","\n","        if open_side == OrderSide.SELL:\n","            if close[i] < bb_lower_5T[i] < close[i - 1]:\n","                cross_on = 1\n","            if cross_on == 1 and close[i] > bb_upper_5T[i] > close[i - 1]:\n","                exit_done = -1\n","        else:\n","            if close[i] > bb_upper_5T[i] > close[i - 1]:\n","                cross_on = 1\n","            if cross_on == 1 and close[i] < bb_lower_5T[i] < close[i - 1]:\n","                exit_done = -1\n","\n","    if exit_done:\n","        ex_p = close[i]\n","        fee += config.trader_set.market_fee\n","\n","    return exit_done, cross_on, ex_p, fee\n","\n","\n","def check_hl_out_v2(config, i, out_j, len_df, fee, open_side, exit_done, np_datas):\n","\n","    open, high, low, close, out_arr = np_datas\n","    ex_p = None\n","\n","    if config.out_set.hl_out:\n","        if open_side == OrderSide.SELL:\n","            if high[i] >= out_arr[out_j]:  # check out only once\n","                exit_done = -1\n","        else:\n","            if low[i] <= out_arr[out_j]:  # check out only once\n","                exit_done = -1\n","    else:  # close_out\n","        if open_side == OrderSide.SELL:\n","            if close[i] >= out_arr[out_j]:  # check out only once\n","                exit_done = -1\n","        else:\n","            if close[i] <= out_arr[out_j]:  # check out only once\n","                ex_p = close[i]\n","                exit_done = -1\n","\n","    if exit_done:\n","        if config.out_set.hl_out:\n","            ex_p = out_arr[out_j]\n","        else:\n","            ex_p = close[i]\n","\n","        if open_side == OrderSide.SELL:\n","            if open[i] >= out_arr[out_j]:\n","                ex_p = open[i]\n","        else:\n","            if open[i] <= out_arr[out_j]:\n","                ex_p = open[i]\n","\n","        fee += config.trader_set.market_fee\n","\n","    return exit_done, ex_p, fee"]},{"cell_type":"markdown","metadata":{"id":"zQ-roiifspcX"},"source":["#### ep_loc.point & zone legacy"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Js5eL87VspcX"},"outputs":[],"source":["\n","    # res_df['entry_{}'.format(selection_id)] = np.where((res_df['open'] >= res_df['cloud_bline_%s' % cb_itv]) &\n","    #                 # (res_df['close'].shift(config.loc_set.point.tf_entry * 1) <= res_df['cloud_bline_%s' % cb_itv]) &\n","    #                 (res_df['close'] < res_df['cloud_bline_%s' % cb_itv])\n","    #                 , res_df['entry_{}'.format(selection_id)] - 1, res_df['entry_{}'.format(selection_id)])\n","\n","    # res_df['entry_{}'.format(selection_id)] = np.where((res_df['open'] >= res_df['bb_lower_1m']) &\n","    #                 # (res_df['close'].shift(config.loc_set.point.tf_entry * 1) <= res_df['bb_lower_1m']) &\n","    #                 (res_df['close'] < res_df['bb_lower_1m'])\n","    #                 , res_df['entry_{}'.format(selection_id)] - 1, res_df['entry_{}'.format(selection_id)])\n","\n","    # res_df['entry_{}'.format(selection_id)] = np.where((res_df['open'] <= res_df['cloud_bline_%s' % cb_itv]) &\n","    #                   # (res_df['close'].shift(config.loc_set.point.tf_entry * 1) >= res_df['cloud_bline_%s' % cb_itv]) &\n","    #                   (res_df['close'] > res_df['cloud_bline_%s' % cb_itv])\n","    #                 , res_df['entry_{}'.format(selection_id)] + 1, res_df['entry_{}'.format(selection_id)])\n","\n","    # res_df['entry_{}'.format(selection_id)] = np.where((res_df['open'] <= res_df['bb_upper_1m']) &\n","    #                   # (res_df['close'].shift(config.loc_set.point.tf_entry * 1) >= res_df['bb_upper_1m']) &\n","    #                   (res_df['close'] > res_df['bb_upper_1m'])\n","    #                 , res_df['entry_{}'.format(selection_id)] + 1, res_df['entry_{}'.format(selection_id)])\n","\n","\n","    \n","   # --------------- ema --------------- #   \n","  # res_df['ema5_1m'] = ema(res_df['close'], 5).shift(1)\n","\n","  #   # --------------- cloud bline --------------- #   \n","  # res_df['cloud_bline_1m'] = cloud_bline(res_df, 26).shift(1)\n","  \n","    #       stochastic      #\n","  # res_df['stoch'] = stoch(res_df, 5, 3, 3)\n","\n","    #       fisher      #\n","  # res_df['fisher30'] = fisher(res_df, 30)\n","  # res_df['fisher60'] = fisher(res_df, 60)\n","  # res_df['fisher120'] = fisher(res_df, 120)\n","\n","    #       cctbbo      #\n","  # res_df['cctbbo'], _ = cct_bbo(res_df, 21, 13)\n","\n","    #       ema_roc      #\n","  # res_df['ema_roc'] = ema_roc(res_df['close'], 13, 9)\n","\n","\n","   # ------------------------------ htf data ------------------------------ #    \n","\n","  #             Todo              #\n","  # htf_df = pd.read_excel(date_path2 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","  # htf_df = pd.read_excel(date_path3 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","  # # htf_df = pd.read_excel(date_path4 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","  # # # htf_df = pd.read_excel(date_path5 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","  # # # # # # htf_df = pd.read_excel(date_path6 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","\n","  # # ---- htf index slicing ---- #\n","  # htf_df = htf_df.loc[:res_df.index[-1]]\n","  \n","  # print(\"res_df.index[-1] :\", res_df.index[-1])\n","  # print(\"htf_df.index[-1] :\", htf_df.index[-1])\n","\n","  # res_df = dc_line(res_df, htf_df, '5m')\n","  # res_df = dc_level(res_df, '5m', 1)\n","\n","\n","  # # # if \"sma4\" in res_df.columns:\n","  # # #   res_df.drop(\"sma4\", axis=1, inplace=1)\n","\n","  # # htf_df['sma'] = htf_df['close'].rolling(60).mean()\n","  # # res_df = res_df.join(pd.DataFrame(index=res_df.index, data=to_lower_tf_v2(res_df, htf_df, [-1]), columns=['sma_30m']))\n","  \n","  # htf_df['stoch'] = stoch(htf_df, 13, 3, 3)\n","  # res_df = res_df.join(pd.DataFrame(index=res_df.index, data=to_lower_tf_v2(res_df, htf_df, [-1], backing_i=-1), columns=['stoch_5m']))\n","\n","   \n","  # fifth_df['ema'] = ema(fifth_df['close'], 5)\n","  # res_df = res_df.join(pd.DataFrame(index=res_df.index, data=to_lower_tf_v2(res_df, fifth_df, [-1]), columns=['ema5']))\n","\n","        # ------------------------------------ short ------------------------------------ # \n","\n","        # --------- by sar --------- # \n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_3m'].iloc[i] == 0:\n","        #   mr_score += 1\n","\n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_5m'].iloc[i] == 0:\n","        #   mr_score += 1          \n","\n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_15m'].iloc[i] == 0:\n","        #   mr_score += 1\n","\n","          #      dc & sar      # \n","        # mr_const_cnt += 1\n","        # # if res_df['dc_upper_1m'].iloc[i] <= res_df['sar_15m'].iloc[i]:\n","        # if res_df['dc_upper_3m'].iloc[i] <= res_df['sar_5m'].iloc[i]:\n","        # # if res_df['dc_upper_5m'].iloc[i] <= res_df['sar_15m'].iloc[i]:\n","        #   mr_score += 1\n","\n","        # -------------- dr scheduling -------------- #\n","        # if config.ep_set.entry_type == 'MARKET':\n","        #   mr_const_cnt += 1\n","        #   if (res_df['close'].iloc[i] - res_df['short_tp'].iloc[i]) / (res_df['short_out'].iloc[i] - res_df['close'].iloc[i]) <= config.ep_set.tr_thresh * (1 + config.ep_set.dr_error):  \n","        #     mr_score += 1\n","\n","           \n","        # ------- entry once ------- #   \n","        # prev_entry_cnt = 0\n","        # for back_i in range(i - 1, 0, -1):\n","        #   if res_df['entry'][back_i] == 1:\n","        #     break\n","\n","        #   elif res_df['entry'][back_i] == -1:\n","        #     prev_entry_cnt += 1          \n","        # # # print(\"prev_entry_cnt :\", prev_entry_cnt)\n","\n","        # mr_const_cnt += 1\n","        # # if prev_entry_cnt <= config.ep_set.entry_incycle:\n","        # # if prev_entry_cnt == config.ep_set.entry_incycle:\n","        # if prev_entry_cnt >= config.ep_set.entry_incycle:\n","        #   mr_score += 1\n","\n","        # ------- htf zoning ------- #   \n","        # mr_const_cnt += 1\n","        #   #       bb zone     #\n","        # if res_df['close'].iloc[i] < res_df['bb_lower_%s' % bbz_interval].iloc[i]:\n","        # # if res_df['close'].iloc[i] < res_df['bb_lower2_1h'].iloc[i]:\n","        # # if res_df['close'].iloc[i] < res_df['bb_base_1h'].iloc[i]:\n","\n","        #   #       cbline zone     #\n","        # # if res_df['close'].iloc[i] < res_df['cloud_bline_%s' % cb_interval].iloc[i]:\n","\n","        #   mr_score += 1\n","\n","  \n","        # ------- ben ep_in's tp done ------- #   \n","        # mr_const_cnt += 1\n","        # if res_df['low'].iloc[i] > res_df['short_tp'].iloc[i]:\n","        #   mr_score += 1\n","\n","\n","        # -------------- feature dist const. -------------- #\n","        # if initial_i < input_size:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","        # entry_input_x = min_max_scale(res_df[selected_price_colname].iloc[initial_i - input_size:initial_i].values)\n","       \n","        # re_entry_input_x = expand_dims(entry_input_x)\n","\n","        # entry_vector = model.predict(re_entry_input_x, verbose=0)\n","        # # print(test_result.shape)\n","\n","        # f_dist = vector_dist(entry_vector, selected_vector)\n","        # print(\"f_dist :\", f_dist)\n","\n","        # if f_dist < fdist_thresh:\n","          # mr_score += 1\n","\n","\n","\n","        # ------------------------------------ long ------------------------------------ # \n","          \n","\n","        # --------- by sar --------- # \n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_3m'].iloc[i] == 1:\n","        #   mr_score += 1   \n","\n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_5m'].iloc[i] == 1:\n","        #   mr_score += 1     \n","\n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_15m'].iloc[i] == 1:\n","          # mr_score += 1\n","\n","          #      dc & sar      # \n","        # mr_const_cnt += 1\n","        # # if res_df['dc_lower_1m'].iloc[i] >= res_df['sar_15m'].iloc[i]:\n","        # if res_df['dc_lower_3m'].iloc[i] >= res_df['sar_5m'].iloc[i]:\n","        # # if res_df['dc_lower_5m'].iloc[i] >= res_df['sar_15m'].iloc[i]:\n","        #   mr_score += 1\n","\n","        # -------------- dr scheduling -------------- #\n","        # if config.ep_set.entry_type == \"MARKET\":\n","          # mr_const_cnt += 1        \n","          # if (res_df['long_tp'].iloc[i] - res_df['close'].iloc[i]) / (res_df['close'].iloc[i] - res_df['long_out'].iloc[i]) <= config.ep_set.tr_thresh * (1 + config.ep_set.dr_error): # 일반적으로 dr 상에서 tp 비율이 더 커짐 (tr 보다)\n","          #   mr_score += 1\n","\n","        # -------------- ep limit -------------- #    \n","        # mr_const_cnt += 1\n","        # # if (res_df['open'].iloc[i] - res_df['long_ep'].iloc[i]) / res_df['open'].iloc[i] < config.ep_set.max_eplim_pct:\n","        # if config.ep_set.min_eplim_pct < (res_df['open'].iloc[i] - res_df['long_ep'].iloc[i]) / res_df['open'].iloc[i] < config.ep_set.max_eplim_pct:\n","        # # if 0 < (res_df['open'].iloc[i] - res_df['long_ep'].iloc[i]) / res_df['open'].iloc[i] < config.ep_set.max_eplim_pct:\n","        #   # if res_df['st_gap_15m'].iloc[i] / res_df['open'].iloc[i] < 0:\n","        #   #   print(\"i, res_df['st_gap_15m'].iloc[i] :\", i, res_df['st_gap_15m'].iloc[i])\n","        #   mr_score += 1\n","\n","\n","        # -------------- entry once -------------- #    \n","        # prev_entry_cnt = 0\n","        # for back_i in range(i - 1, 0, -1):\n","        #   if res_df['entry'][back_i] == -1:\n","        #     break\n","\n","        #   elif res_df['entry'][back_i] == 1:\n","        #     prev_entry_cnt += 1\n","          \n","        # mr_const_cnt += 1\n","        # # if prev_entry_cnt <= config.ep_set.entry_incycle:\n","        # # if prev_entry_cnt == config.ep_set.entry_incycle:\n","        # if prev_entry_cnt >= config.ep_set.entry_incycle:\n","        #   mr_score += 1\n","\n","\n","        # ------- htf zoning ------- #   \n","        # mr_const_cnt += 1\n","          \n","        #   #       bb zone     #\n","        # if res_df['close'].iloc[i] > res_df['bb_upper_%s' % bbz_interval].iloc[i]:\n","        # # if res_df['close'].iloc[i] > res_df['bb_upper2_1h'].iloc[i]:\n","        # # if res_df['close'].iloc[i] > res_df['bb_base_1h'].iloc[i]:\n","        \n","        #   #       cbline zone     #\n","        # # if res_df['close'].iloc[i] > res_df['cloud_bline_%s' % cb_interval].iloc[i]:\n","\n","        #   mr_score += 1\n","\n","\n","        # ------- ben ep_in's tp done ------- #   \n","        # mr_const_cnt += 1\n","        # if res_df['high'].iloc[i] < res_df['long_tp'].iloc[i]:\n","        #   mr_score += 1\n","\n","\n","        # -------------- feature dist const. -------------- #\n","        # if initial_i < input_size:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","          \n","        # entry_input_x = min_max_scale(res_df[selected_price_colname].iloc[initial_i - input_size:initial_i].values)\n","       \n","        # re_entry_input_x = expand_dims(entry_input_x)\n","\n","        # entry_vector = model.predict(re_entry_input_x, verbose=0)\n","        # # print(test_result.shape)\n","\n","        # f_dist = vector_dist(entry_vector, selected_vector)\n","        # print(\"f_dist :\", f_dist)\n","\n","        # if f_dist < fdist_thresh:\n","          # mr_score += 1"]},{"cell_type":"markdown","metadata":{"id":"qM6H6fmrKtsA"},"source":["#### legacy"]},{"cell_type":"code","source":["# np.nanmin([np.nan, 1])\n","np.nan <= np.nan"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"AH3JXLkwL_B6","executionInfo":{"status":"ok","timestamp":1658884508950,"user_tz":-540,"elapsed":1076,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"0fa49ccd-e99c-44fd-ac0a-84441dd585d4"},"execution_count":21,"outputs":[{"output_type":"execute_result","data":{"text/plain":["False"]},"metadata":{},"execution_count":21}]},{"cell_type":"code","execution_count":22,"metadata":{"id":"uB-I09hKKvmu","executionInfo":{"status":"ok","timestamp":1658885138988,"user_tz":-540,"elapsed":553,"user":{"displayName":"7th June","userId":"08178289703395036410"}}},"outputs":[],"source":["def get_wave_bias_v6(res_df, config, high, low, len_df, short_net_p1_idx_arr, long_net_p1_idx_arr, short_p2_idx_arr, long_p2_idx_arr, short_obj,\n","                     long_obj):\n","    short_net_p1_idx = short_net_p1_idx_arr.astype(int)  # .reshape(-1, 1)\n","    short_p1_idx = short_obj[-1].astype(int).ravel()\n","    short_p2_idx = short_p2_idx_arr.astype(int).ravel()  # .reshape(-1, 1)\n","    short_en_idx = short_obj[2].astype(int)\n","\n","    short_tp_1 = ffill_line(res_df['short_tp_1_{}'.format(config.selection_id)].to_numpy(),\n","                            short_net_p1_idx)  # net_p1_idx ~ net_p1_idx' 사이에 대한 momentum 조사 (net 이유는 logic's validation)\n","    short_tp_0 = ffill_line(res_df['short_tp_0_{}'.format(config.selection_id)].to_numpy(), short_net_p1_idx)\n","    short_out_1 = ffill_line(res_df['short_out_1_{}'.format(config.selection_id)].to_numpy(),\n","                             short_p2_idx)  # 체결된, p2_idx ~ p2_idx' 사이에 대한 momentum 조사\n","    short_out_0 = ffill_line(res_df['short_out_0_{}'.format(config.selection_id)].to_numpy(), short_p2_idx)\n","    short_ep2_0 = ffill_line(res_df['short_ep2_0_{}'.format(config.selection_id)].to_numpy(), short_p2_idx)\n","    # short_net_wave_1 = ffill_line(res_df['short_wave_1_{}'.format(config.selection_id)].to_numpy(), short_op_idx)  # en_idx 에 sync 된 open_idx 를 사용해야함\n","    # short_net_wave_0 = ffill_line(res_df['short_wave_0_{}'.format(config.selection_id)].to_numpy(), short_op_idx)\n","\n","    long_net_p1_idx = long_net_p1_idx_arr.astype(int)  # .reshape(-1, 1)\n","    long_p1_idx = long_obj[-1].astype(int).ravel()\n","    long_p2_idx = long_p2_idx_arr.astype(int).ravel()  # .reshape(-1, 1)\n","    long_en_idx = long_obj[2].astype(int)\n","\n","    long_tp_1 = ffill_line(res_df['long_tp_1_{}'.format(config.selection_id)].to_numpy(), long_net_p1_idx)\n","    long_tp_0 = ffill_line(res_df['long_tp_0_{}'.format(config.selection_id)].to_numpy(), long_net_p1_idx)\n","    long_out_1 = ffill_line(res_df['long_out_1_{}'.format(config.selection_id)].to_numpy(), long_p2_idx)  # 체결된, p2_idx ~ p2_idx' 사이에 대한 momentum 조사\n","    long_out_0 = ffill_line(res_df['long_out_0_{}'.format(config.selection_id)].to_numpy(), long_p2_idx)\n","    long_ep2_0 = ffill_line(res_df['long_ep2_0_{}'.format(config.selection_id)].to_numpy(), long_p2_idx)\n","\n","    short_p2exec_p1_idx = np.unique(short_p1_idx)  # .reshape(-1, 1)   # 통일성을 위해 2d 로 설정\n","    long_p2exec_p1_idx = np.unique(long_p1_idx)  # .reshape(-1, 1)\n","\n","    bias_info_tick = config.tr_set.bias_info_tick\n","\n","    # print(\"long_net_p1_idx.shape :\", long_net_p1_idx.shape)\n","    # print(\"long_en_idx.shape :\", long_en_idx.shape)\n","\n","    # ================== touch idx ================== #\n","    # 1. min 에 초점을 맞추는 거니까, touch 없을시 len_df 로 설정\n","    # 2. future_data 사용이니까, shift(-bias_info_tick) 설정\n","    # 3. entry 다음 idx 부터 -> tp & out 체결 logic 이 현재 entry_idx 부터 되어있어서 취소\n","    # Todo, high 와 low 중 어디에 먼저닿느냐가 중요함을 key 로 잡고만든 logic 임\n","    len_df_range = np.arange(len_df)\n","    last_idx = len_df - 1  # nan 발생하면 대소 비교로 hhm 확인이 불가능해짐, np.nan <= np.nan --> false\n","    shift_range = bias_info_tick - 1  # entry_idx 까지 포함해서 wave_bias check\n","\n","    # ------------ pair & idxs ------------ #\n","    short_net_p1_pair = list(zip(short_net_p1_idx, np.append(short_net_p1_idx[1:], last_idx)))   # p1's 1st & 2nd pair 위해서 last_idx 마지막에 붙여준 것\n","    long_net_p1_pair = list(zip(long_net_p1_idx, np.append(long_net_p1_idx[1:], last_idx)))\n","\n","    short_p2_pair = list(zip(short_p2_idx, np.append(short_p2_idx[1:], last_idx)))\n","    long_p2_pair = list(zip(long_p2_idx, np.append(long_p2_idx[1:], last_idx)))\n","\n","    short_tp_1_touch_idxs = np.where(low <= short_tp_1, len_df_range,\n","                                     last_idx)  # .rolling(bias_info_tick, min_periods=1).min().shift(-shift_range).to_numpy()\n","    short_tp_0_touch_idxs = np.where(high >= short_tp_0, len_df_range,\n","                                     last_idx)  # .rolling(bias_info_tick, min_periods=1).min().shift(-shift_range).to_numpy()\n","    long_tp_1_touch_idxs = np.where(high >= long_tp_1, len_df_range,\n","                                    last_idx)  # .rolling(bias_info_tick, min_periods=1).min().shift(-shift_range).to_numpy()\n","    long_tp_0_touch_idxs = np.where(low <= long_tp_0, len_df_range,\n","                                    last_idx)  # .rolling(bias_info_tick, min_periods=1).min().shift(-shift_range).to_numpy()\n","\n","    short_out_1_touch_idxs = np.where(low <= short_out_1, len_df_range,\n","                                      last_idx)  # .rolling(bias_info_tick, min_periods=1).min().shift(-shift_range).to_numpy()\n","    short_out_0_touch_idxs = np.where(high >= short_out_0, len_df_range,\n","                                      last_idx)  # .rolling(bias_info_tick, min_periods=1).min().shift(-shift_range).to_numpy()\n","    long_out_1_touch_idxs = np.where(high >= long_out_1, len_df_range,\n","                                     last_idx)  # .rolling(bias_info_tick, min_periods=1).min().shift(-shift_range).to_numpy()\n","    long_out_0_touch_idxs = np.where(low <= long_out_0, len_df_range,\n","                                     last_idx)  # .rolling(bias_info_tick, min_periods=1).min().shift(-shift_range).to_numpy()\n","\n","    # ------------ min touch_idx ------------ #\n","    short_tp_1_touch_idx = get_touch_idx_fill(short_tp_1_touch_idxs, short_net_p1_pair, short_net_p1_idx, len_df)  # pair means 구간\n","    short_tp_0_touch_idx = get_touch_idx_fill(short_tp_0_touch_idxs, short_net_p1_pair, short_net_p1_idx, len_df)\n","    long_tp_1_touch_idx = get_touch_idx_fill(long_tp_1_touch_idxs, long_net_p1_pair, long_net_p1_idx, len_df)\n","    long_tp_0_touch_idx = get_touch_idx_fill(long_tp_0_touch_idxs, long_net_p1_pair, long_net_p1_idx, len_df)\n","\n","    short_out_1_touch_idx = get_touch_idx_fill(short_out_1_touch_idxs, short_p2_pair, short_p2_idx, len_df)  # pair means 구간\n","    short_out_0_touch_idx = get_touch_idx_fill(short_out_0_touch_idxs, short_p2_pair, short_p2_idx, len_df)\n","    long_out_1_touch_idx = get_touch_idx_fill(long_out_1_touch_idxs, long_p2_pair, long_p2_idx, len_df)\n","    long_out_0_touch_idx = get_touch_idx_fill(long_out_0_touch_idxs, long_p2_pair, long_p2_idx, len_df)\n","\n","    # ------------ point's touch_idx ------------ #\n","    short_tp_1_net_p1_touch_idx = short_tp_1_touch_idx[short_net_p1_idx]  # for tp_box's net_hhm\n","    short_tp_0_net_p1_touch_idx = short_tp_0_touch_idx[short_net_p1_idx]\n","    long_tp_1_net_p1_touch_idx = long_tp_1_touch_idx[long_net_p1_idx]\n","    long_tp_0_net_p1_touch_idx = long_tp_0_touch_idx[long_net_p1_idx]\n","    # print(\"long_tp_1_net_p1_touch_idx :\", long_tp_1_net_p1_touch_idx)\n","\n","    short_tp_1_p2exec_p1_touch_idx = short_tp_1_touch_idx[short_p2exec_p1_idx]  # p2 까지 체결된 p1's hhm (p2 executed p1_hhm)\n","    short_tp_0_p2exec_p1_touch_idx = short_tp_0_touch_idx[short_p2exec_p1_idx]\n","    long_tp_1_p2exec_p1_touch_idx = long_tp_1_touch_idx[long_p2exec_p1_idx]\n","    long_tp_0_p2exec_p1_touch_idx = long_tp_0_touch_idx[long_p2exec_p1_idx]\n","\n","    short_tp_1_p2_touch_idx = short_tp_1_touch_idx[short_p2_idx]  # hlm 을 위한 hhm (on p2)\n","    short_tp_0_p2_touch_idx = short_tp_0_touch_idx[short_p2_idx]\n","    long_tp_1_p2_touch_idx = long_tp_1_touch_idx[long_p2_idx]\n","    long_tp_0_p2_touch_idx = long_tp_0_touch_idx[long_p2_idx]\n","\n","    short_out_1_p2_touch_idx = short_out_1_touch_idx[short_p2_idx]  # for out_box's executed_hhm\n","    short_out_0_p2_touch_idx = short_out_0_touch_idx[short_p2_idx]\n","    long_out_1_p2_touch_idx = long_out_1_touch_idx[long_p2_idx]\n","    long_out_0_p2_touch_idx = long_out_0_touch_idx[long_p2_idx]\n","\n","    # ------------ get wave's bias_tick ------------ #\n","    short_tp_1_net_p1_touch_idx2 = np.where(short_tp_1_net_p1_touch_idx == last_idx, np.nan, short_tp_1_net_p1_touch_idx)\n","    long_tp_1_net_p1_touch_idx2 = np.where(long_tp_1_net_p1_touch_idx == last_idx, np.nan, long_tp_1_net_p1_touch_idx)\n","\n","    short_tp_1_p2exec_p1_touch_idx2 = np.where(short_tp_1_p2exec_p1_touch_idx == last_idx, np.nan, short_tp_1_p2exec_p1_touch_idx)\n","    long_tp_1_p2exec_p1_touch_idx2 = np.where(long_tp_1_p2exec_p1_touch_idx == last_idx, np.nan, long_tp_1_p2exec_p1_touch_idx)\n","\n","    short_net_p1_bias_tick = np.nanmean(short_tp_1_net_p1_touch_idx2 - short_net_p1_idx)\n","    long_net_p1_bias_tick = np.nanmean(long_tp_1_net_p1_touch_idx2 - long_net_p1_idx)\n","\n","    short_p2exec_p1_bias_tick = np.nanmean(short_tp_1_p2exec_p1_touch_idx2 - short_p2exec_p1_idx)\n","    long_p2exec_p1_bias_tick = np.nanmean(long_tp_1_p2exec_p1_touch_idx2 - long_p2exec_p1_idx)\n","\n","    # ------------------ bias_bool & hhm ------------------ #\n","    short_net_p1_true_bias_bool = short_tp_1_net_p1_touch_idx < short_tp_0_net_p1_touch_idx  # true_bias 의 조건\n","    short_net_p1_false_bias_bool = short_tp_1_net_p1_touch_idx >= short_tp_0_net_p1_touch_idx  # false_bias 의 조건, ~true_bias_bool 와 같지 않음, why ..? = en_idx\n","    long_net_p1_true_bias_bool = long_tp_1_net_p1_touch_idx < long_tp_0_net_p1_touch_idx\n","    long_net_p1_false_bias_bool = long_tp_1_net_p1_touch_idx >= long_tp_0_net_p1_touch_idx\n","\n","    short_p2exec_p1_true_bias_bool = short_tp_1_p2exec_p1_touch_idx < short_tp_0_p2exec_p1_touch_idx  # true_bias 의 조건\n","    short_p2exec_p1_false_bias_bool = short_tp_1_p2exec_p1_touch_idx >= short_tp_0_p2exec_p1_touch_idx  # false_bias 의 조건, ~true_bias_bool 와 같지 않음, why ..? = en_idx\n","    long_p2exec_p1_true_bias_bool = long_tp_1_p2exec_p1_touch_idx < long_tp_0_p2exec_p1_touch_idx\n","    long_p2exec_p1_false_bias_bool = long_tp_1_p2exec_p1_touch_idx >= long_tp_0_p2exec_p1_touch_idx\n","\n","    short_p2_true_bias_bool = short_tp_1_p2_touch_idx < short_tp_0_p2_touch_idx\n","    # short_p2_false_bias_bool = short_tp_1_p2_touch_idx >= short_tp_0_p2_touch_idx\n","    long_p2_true_bias_bool = long_tp_1_p2_touch_idx < long_tp_0_p2_touch_idx\n","    # long_p2_false_bias_bool = long_tp_1_p2_touch_idx >= long_tp_0_p2_touch_idx\n","\n","    short_p2_out_true_bias_bool = short_out_1_p2_touch_idx < short_out_0_p2_touch_idx\n","    short_p2_out_false_bias_bool = short_out_1_p2_touch_idx >= short_out_0_p2_touch_idx\n","    long_p2_out_true_bias_bool = long_out_1_p2_touch_idx < long_out_0_p2_touch_idx\n","    long_p2_out_false_bias_bool = long_out_1_p2_touch_idx >= long_out_0_p2_touch_idx\n","\n","    short_tpbox_hhm = hhm(short_net_p1_true_bias_bool, short_net_p1_false_bias_bool)\n","    long_tpbox_hhm = hhm(long_net_p1_true_bias_bool, long_net_p1_false_bias_bool)\n","\n","    short_p2exec_tpbox_hhm = hhm(short_p2exec_p1_true_bias_bool, short_p2exec_p1_false_bias_bool)\n","    long_p2exec_tpbox_hhm = hhm(long_p2exec_p1_true_bias_bool, long_p2exec_p1_false_bias_bool)\n","\n","    # short_p2_hhm = hhm(short_p2_true_bias_bool, short_p2_false_bias_bool)\n","    # long_p2_hhm = hhm(long_p2_true_bias_bool, long_p2_false_bias_bool)\n","\n","    short_outbox_hhm = hhm(short_p2_out_true_bias_bool, short_p2_out_false_bias_bool)\n","    long_outbox_hhm = hhm(long_p2_out_true_bias_bool, long_p2_out_false_bias_bool)\n","\n","    # print(\"short_tpbox_hhm, short_p2_hhm, short_outbox_hhm :\", short_tpbox_hhm, short_p2_hhm, short_outbox_hhm)\n","\n","    return short_tpbox_hhm, long_tpbox_hhm, short_p2exec_tpbox_hhm, long_p2exec_tpbox_hhm, short_outbox_hhm, long_outbox_hhm, \\\n","           short_net_p1_bias_tick, long_net_p1_bias_tick, short_p2exec_p1_bias_tick, long_p2exec_p1_bias_tick, short_p2_true_bias_bool, long_p2_true_bias_bool, \\\n","           short_tp_1[short_en_idx], short_tp_0[short_en_idx], long_tp_1[long_en_idx], long_tp_0[long_en_idx], \\\n","           short_out_1[short_en_idx], short_out_0[short_en_idx], long_out_1[long_en_idx], long_out_0[long_en_idx], short_ep2_0[short_en_idx], long_ep2_0[long_en_idx]  # plot_check 을 위해 en_idx 넣음"]},{"cell_type":"code","source":["def idep_plot_v17(res_df, len_df, config, high, low, open_info_df1, paired_res, inversion=False, sample_ratio=0.7, title_position=(0.5, 0.5),\n","                  fontsize=15, signi=False):  # open_idx, side_arr\n","    if not signi:\n","        plt.style.use(['dark_background', 'fast'])\n","        plt.figure(figsize=(24, 8))\n","        gs = gridspec.GridSpec(nrows=2,  # row 몇 개\n","                               ncols=3,  # col 몇 개\n","                               height_ratios=[10, 1]\n","                               # height_ratios=[10, 10, 1]\n","                               )\n","    gs_idx = 0\n","    # plt.suptitle(key)\n","\n","    p_ranges, p_qty_ratio = literal_eval(config.tp_set.p_ranges), literal_eval(config.tp_set.p_qty_ratio)\n","    assert np.sum(p_qty_ratio) == 1.0\n","    assert len(p_ranges) == len(p_qty_ratio)\n","\n","    if sample_ratio is not None:\n","        sample_len = int(len_df * sample_ratio)\n","    else:\n","        sample_len = len_df\n","\n","    # ------ short & long data preparation ------ #\n","    # start_0 = time.time()\n","\n","    net_p1_idx_arr, p1_idx_arr, p2_idx_arr, pair_idx_arr, pair_price_arr, lvrg_arr, fee_arr, tpout_arr, tr_arr = paired_res\n","    assert len(p1_idx_arr) != 0, \"assert len(p1_idx_arr) != 0\"\n","\n","    short_net_p1_idx_arr = net_p1_idx_arr[np.where(open_info_df1.side.loc[net_p1_idx_arr] == OrderSide.SELL)[0]]\n","    long_net_p1_idx_arr = net_p1_idx_arr[np.where(open_info_df1.side.loc[net_p1_idx_arr] == OrderSide.BUY)[0]]\n","\n","    short_net_p1_frq = len(short_net_p1_idx_arr)\n","    long_net_p1_frq = len(long_net_p1_idx_arr)\n","    # print(\"short_net_p1_frq :\", short_net_p1_frq)\n","    # print(\"long_net_p1_frq :\", long_net_p1_frq)\n","\n","    short_p1_openi_idx = np.where(open_info_df1.side.loc[p1_idx_arr] == OrderSide.SELL)[0]  # p1_idx_arr 에 대한 idx, # side_arr,\n","    long_p1_openi_idx = np.where(open_info_df1.side.loc[p1_idx_arr] == OrderSide.BUY)[0]\n","\n","    # p1_idx = open_idx[p1_openi_arr].reshape(-1, 1)   # != p1_idx_arr, p1_openi_arr 은 exit_done 기준임\n","\n","    np_obj = np.hstack((pair_price_arr, pair_idx_arr, p1_idx_arr.reshape(-1, 1)))  # p1_idx_arr is 1d, need to be changed to 2d (for stacking)\n","    short_obj = np_obj[short_p1_openi_idx]\n","    long_obj = np_obj[long_p1_openi_idx]\n","    both_obj = np.vstack((short_obj, long_obj))\n","    print(\"short_obj.shape :\", short_obj.shape)\n","    print(\"long_obj.shape :\", long_obj.shape)\n","\n","    short_obj, long_obj, both_obj = [np.split(obj_, 5, axis=1) for obj_ in [short_obj, long_obj, both_obj]]\n","\n","    short_p2_idx_arr, long_p2_idx_arr = [p2_idx_arr[openi_idx_].reshape(-1, 1) for openi_idx_ in [short_p1_openi_idx, long_p1_openi_idx]]\n","    short_lvrg_arr, long_lvrg_arr = [lvrg_arr[openi_idx_].reshape(-1, 1) for openi_idx_ in [short_p1_openi_idx, long_p1_openi_idx]]\n","    short_fee_arr, long_fee_arr = [fee_arr[openi_idx_].reshape(-1, 1) for openi_idx_ in [short_p1_openi_idx, long_p1_openi_idx]]\n","    short_tpout_arr, long_tpout_arr = [tpout_arr[openi_idx_] for openi_idx_ in [short_p1_openi_idx, long_p1_openi_idx]]\n","    # short_bias_arr, long_bias_arr = [bias_arr[openi_idx_] for openi_idx_ in [short_p1_openi_idx, long_p1_openi_idx]]\n","    short_tr_arr, long_tr_arr = [tr_arr[openi_idx_] for openi_idx_ in [short_p1_openi_idx, long_p1_openi_idx]]\n","    # print(\"long_bias_arr.shape :\", long_bias_arr.shape)\n","    # print(\"short / long arr setting elapsed time :\", time.time() - start_0)\n","\n","\n","    # ------ get hhm ------ #    \n","    # start_0 = time.time()\n","    short_tpbox_hhm, long_tpbox_hhm, short_tpbox_p2exec_hhm, long_tpbox_p2exec_hhm, short_outbox_hhm, long_outbox_hhm, short_p2_true_bias_bool, long_p2_true_bias_bool, \\\n","          short_tp_1, short_tp_0, long_tp_1, long_tp_0, short_out_1, short_out_0, long_out_1, long_out_0, short_ep2_0, long_ep2_0 = \\\n","      get_wave_bias_v5(res_df, config, high, low, len_df, short_net_p1_idx_arr, long_net_p1_idx_arr, short_p2_idx_arr, long_p2_idx_arr, short_obj, long_obj)\n","    # print(\"get_wave_bias elapsed time :\", time.time() - start_0)\n","\n","\n","    # ------ mean_low ------ #    \n","    # start_0 = time.time()\n","    selection_id = config.selection_id\n","\n","    short_p1_idx = short_obj[-1].astype(int)\n","    long_p1_idx = long_obj[-1].astype(int)    \n","\n","    short_open_tp_1 = res_df['short_tp_1_{}'.format(selection_id)].to_numpy()[short_p1_idx] # != short_tp_1\n","    long_open_tp_1 = res_df['long_tp_1_{}'.format(selection_id)].to_numpy()[long_p1_idx]\n","\n","    short_open_tp_0 = res_df['short_tp_0_{}'.format(selection_id)].to_numpy()[short_p1_idx]\n","    long_open_tp_0 = res_df['long_tp_0_{}'.format(selection_id)].to_numpy()[long_p1_idx]\n","\n","    short_open_tp_gap = res_df['short_tp_gap_{}'.format(selection_id)].to_numpy()[short_p1_idx]  # use open_i\n","    long_open_tp_gap = res_df['long_tp_gap_{}'.format(selection_id)].to_numpy()[long_p1_idx]\n","\n","    short_max_outg = get_max_outg_v4(OrderSide.SELL, config, ohlc_list, short_obj, short_tpout_arr, short_open_tp_0, short_open_tp_gap)  # tp_box's mean_low 확인 위해 tp_gap 입력함\n","    long_max_outg = get_max_outg_v4(OrderSide.BUY, config, ohlc_list, long_obj, long_tpout_arr, long_open_tp_0, long_open_tp_gap)\n","\n","    short_mean_low = short_max_outg[short_p2_true_bias_bool].mean()\n","    long_mean_low = long_max_outg[long_p2_true_bias_bool].mean()\n","    both_mean_low = (short_mean_low + long_mean_low) / 2\n","    # print(\"short_mean_low :\", short_mean_low)\n","    # print(\"long_mean_low :\", long_mean_low)\n","    # print(\"both_mean_low :\", both_mean_low)\n","    # print(\"mean_low elapsed time :\", time.time() - start_0)\n","\n","    # ------ plot_data ------ #\n","    len_short, len_long = len(short_p1_openi_idx), len(long_p1_openi_idx)\n","\n","    try:\n","        # start_0 = time.time()\n","        if len_short == 0:\n","            short_pr = []\n","            gs_idx += 1\n","        else:\n","            short_tr = short_tr_arr.mean()\n","            short_pr, short_liqd = get_pr_v4(OrderSide.SELL, high, low, short_obj, short_tpout_arr, short_lvrg_arr, short_fee_arr, p_ranges,\n","                                             p_qty_ratio, inversion)\n","            short_total_pr = to_total_pr(len_df, short_pr, short_obj[-2])\n","            short_cum_pr = np.cumprod(short_total_pr)\n","            short_hlm = hlm(short_pr, short_p2_true_bias_bool)\n","            short_trade_ticks = np.mean(short_obj[-2] - short_obj[-1])\n","            if signi:\n","                short_idep_res_obj = (short_tpbox_p2exec_hhm, short_hlm) + get_res_info_nb_v2(sample_len, short_pr, short_total_pr, short_cum_pr, short_liqd)\n","            else:\n","                gs_idx = plot_info_v9(gs, gs_idx, len_df, sample_len, short_tr, short_tpbox_hhm, short_tpbox_p2exec_hhm, short_outbox_hhm, short_mean_low, short_hlm, short_trade_ticks, short_net_p1_frq, short_pr, short_total_pr,\n","                                      short_cum_pr, short_liqd, short_lvrg_arr.mean(), title_position, fontsize)\n","        # print(\"short plot_data elapsed time :\", time.time() - start_0)\n","\n","    except Exception as e:\n","        gs_idx += 1\n","        print(\"error in short plot_data :\", e)\n","\n","    try:\n","        # start_0 = time.time()\n","        if len_long == 0:\n","            long_pr = []\n","            gs_idx += 1\n","        else:\n","            long_tr = long_tr_arr.mean()\n","            long_pr, long_liqd = get_pr_v4(OrderSide.BUY, high, low, long_obj, long_tpout_arr, long_lvrg_arr, long_fee_arr, p_ranges, p_qty_ratio,\n","                                           inversion)\n","            long_total_pr = to_total_pr(len_df, long_pr, long_obj[-2])\n","            long_cum_pr = np.cumprod(long_total_pr)\n","            # long_hhm = long_net_p1_hhm\n","            long_hlm = hlm(long_pr, long_p2_true_bias_bool)\n","            long_trade_ticks = np.mean(long_obj[-2] - long_obj[-1])\n","            if signi:\n","                long_idep_res_obj = (long_tpbox_p2exec_hhm, long_hlm) + get_res_info_nb_v2(sample_len, long_pr, long_total_pr, long_cum_pr, long_liqd)\n","            else:\n","                gs_idx = plot_info_v9(gs, gs_idx, len_df, sample_len, long_tr, long_tpbox_hhm, long_tpbox_p2exec_hhm, long_outbox_hhm, long_mean_low, long_hlm, long_trade_ticks, long_net_p1_frq, long_pr, long_total_pr,\n","                                      long_cum_pr, long_liqd, long_lvrg_arr.mean(), title_position, fontsize)\n","        # print(\"long plot_data elapsed time :\", time.time() - start_0)\n","    except Exception as e:\n","        gs_idx += 1\n","        print(\"error in long plot_data :\", e)\n","\n","    try:\n","        # start_0 = time.time()\n","        if len_short * len_long == 0:\n","            both_pr = []\n","            gs_idx += 1\n","        else:\n","            both_tr = (short_tr + long_tr) / 2\n","            both_pr = np.vstack((short_pr, long_pr))  # for 2d arr, obj 를 1d 로 만들지 않는 이상, pr 은 2d 유지될 것\n","            both_total_pr = to_total_pr(len_df, both_pr, both_obj[-2])\n","            both_cum_pr = np.cumprod(both_total_pr)\n","            both_liqd = min(short_liqd, long_liqd)\n","            both_p2_true_bias_bool = np.hstack((short_p2_true_bias_bool, long_p2_true_bias_bool))  # hstack for 1d arr, vstack for 2d arr\n","            both_tpbox_hhm = (short_tpbox_hhm + long_tpbox_hhm) / 2\n","            both_tpbox_p2exec_hhm, both_hlm = (short_tpbox_p2exec_hhm + long_tpbox_p2exec_hhm) / 2, (short_hlm + long_hlm) / 2\n","            both_outbox_hhm = (short_outbox_hhm + long_outbox_hhm) / 2\n","            both_trade_ticks = np.mean(both_obj[-2] - both_obj[-1])\n","            both_net_p1_frq = short_net_p1_frq + long_net_p1_frq\n","            if signi:\n","                both_idep_res_obj = (both_tpbox_p2exec_hhm, both_hlm) + get_res_info_nb_v2(sample_len, both_pr, both_total_pr, both_cum_pr, both_liqd)\n","            else:\n","                gs_idx = plot_info_v9(gs, gs_idx, len_df, sample_len, both_tr, both_tpbox_hhm, both_tpbox_p2exec_hhm, both_outbox_hhm, both_mean_low, both_hlm, both_trade_ticks, both_net_p1_frq, both_pr, both_total_pr,\n","                                      both_cum_pr, both_liqd, lvrg_arr.mean(), title_position, fontsize)\n","        # print(\"both plot_data elapsed time :\", time.time() - start_0)\n","    except Exception as e:\n","        gs_idx += 1\n","        print(\"error in both plot_data :\", e)\n","\n","    if not signi:\n","        if len_short * len_long > 0:\n","            for obj, bias_arr, cum_pr in zip([short_obj, long_obj, both_obj], [short_p2_true_bias_bool, long_p2_true_bias_bool, both_p2_true_bias_bool],\n","                                             [short_cum_pr, long_cum_pr, both_cum_pr]):\n","                try:\n","                    # start_0 = time.time()\n","                    gs_idx = frq_dev_plot_v4(gs, gs_idx, len_df, sample_len, obj[-2], bias_arr, cum_pr[-1], fontsize)\n","                    # print(\"frq_dev_plot elapsed time :\", time.time() - start_0)\n","                except Exception as e:\n","                    gs_idx += 1\n","                    print(\"error in frq_dev_plot :\", e)\n","            plt.show()\n","            plt.close()\n","\n","        return short_pr, short_obj, short_lvrg_arr, short_fee_arr, short_tpout_arr, short_tr_arr, short_p2_true_bias_bool, short_p2_idx_arr, short_tp_1, short_tp_0, short_out_1, short_out_0, short_ep2_0, \\\n","               long_pr, long_obj, long_lvrg_arr, long_fee_arr, long_tpout_arr, long_tr_arr, long_p2_true_bias_bool, long_p2_idx_arr, long_tp_1, long_tp_0, long_out_1, long_out_0, long_ep2_0  # long_net_p1_idx_arr long_p2_idx_arr\n","\n","    else:\n","        return [short_idep_res_obj[:-1], long_idep_res_obj[:-1], both_idep_res_obj[:-1]]"],"metadata":{"id":"Eos0FoAgrfW5"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":260,"status":"ok","timestamp":1653436951068,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"oLDZobRcgg6E","outputId":"2f07e665-41ba-4c7e-b5d7-43fc14d09cd5"},"outputs":[{"data":{"text/plain":["Rolling [window=100,center=False,axis=0,method=single]"]},"execution_count":92,"metadata":{},"output_type":"execute_result"}],"source":["res_df.low.rolling(100) #> 1000"]},{"cell_type":"markdown","metadata":{"id":"_blyFhQJUd5X"},"source":["#### dump"]},{"cell_type":"code","source":["def get_pr_v4(open_side, h, l, obj, tpout, lvrg, fee, p_ranges, p_qty_ratio, inversion=False):  # --> 여기서 사용하는 ex_p = ex_p\n","\n","    en_p = obj[0]\n","    # ex_p = obj[1]\n","    tp, out = np.split(tpout, 2, axis=1)\n","    len_p = len(p_ranges)\n","    en_ps, tps, outs, lvrgs, fees = [np.tile(arr_, (1, len_p)) for arr_ in [en_p, tp, out, lvrg, fee]]\n","\n","    np_obj = np.array(obj).T[0]\n","    assert len(np_obj.shape) == 2\n","\n","    # iin == iout 인 경우 분리\n","    en_idx = np_obj[:, 2]\n","    ex_idx = np_obj[:, 3]\n","    equal_idx = en_idx == ex_idx    # equal_idx 는 어차피 out 임\n","    issue_idx = en_idx > ex_idx    # equal_idx 는 어차피 out 임\n","\n","    print('pass')\n","    idx_gap_ = (ex_idx - en_idx)[~equal_idx]\n","    print(\"en_idx[issue_idx] :\", en_idx[issue_idx])\n","    print(\"ex_idx[issue_idx] :\", ex_idx[issue_idx])\n","    print(\"idx_gap_[idx_gap_ <= 0] :\", idx_gap_[idx_gap_ <= 0])\n","\n","    min_low = np.full_like(en_p, np.nan)\n","    min_low[~equal_idx] = np.array([np.min(l[int(iin + 1):int(iout + 1)]) for _, _, iin, iout in np_obj[~equal_idx, :4]]).reshape(-1, 1)  # start from iin + 1 (tp 체결을 entry_idx 부터 보지 않음)\n","    max_high = np.full_like(en_p, np.nan)\n","    max_high[~equal_idx] = np.array([np.max(h[int(iin + 1):int(iout + 1)]) for _, _, iin, iout in np_obj[~equal_idx, :4]]).reshape(-1, 1)\n","\n","    if open_side == \"SELL\":\n","        p_tps = en_ps - (en_ps - tps) * p_ranges\n","        # min_low = np.full_like(en_p, np.nan)\n","        # min_low[~equal_idx] = np.array([np.min(l[int(iin + 1):int(iout + 1)]) for _, _, iin, iout in np_obj[~equal_idx, :4]]).reshape(-1, 1)  # start from iin + 1 (tp 체결을 entry_idx 부터 보지 않음)\n","        tp_idx = (np.tile(min_low, (1, len_p)) <= p_tps) * (np.tile(max_high, (1, len_p)) <= outs)  # entry_idx 포함해서 out touch 금지 (보수적 검증)\n","    else:\n","        p_tps = en_ps + (tps - en_ps) * p_ranges\n","        # max_high = np.full_like(en_p, np.nan)\n","        # max_high[~equal_idx] = np.array([np.max(h[int(iin + 1):int(iout + 1)]) for _, _, iin, iout in np_obj[~equal_idx, :4]]).reshape(-1, 1)\n","        tp_idx = (np.tile(max_high, (1, len_p)) >= p_tps) * (np.tile(min_low, (1, len_p)) >= outs)\n","\n","    ex_ps = outs.copy()\n","    ex_ps[tp_idx] = p_tps[tp_idx]\n","\n","    if open_side == \"SELL\":\n","        if not inversion:\n","            pr = ((en_ps / ex_ps - fees - 1) * lvrgs * p_qty_ratio).sum(axis=1) + 1\n","            # ------ liquidation ------ #\n","            max_high = np.full_like(en_p, np.nan)\n","            max_high[~equal_idx] = np.array([np.max(h[int(iin):int(iout)]) for _, _, iin, iout in np_obj[~equal_idx, :4]]).reshape(-1, 1)\n","            liqd = np.nanmin((en_p / max_high - fee - 1) * lvrg + 1)\n","        else:\n","            pr = ((ex_ps / en_ps - fees - 1) * lvrgs * p_qty_ratio).sum(axis=1) + 1\n","            # ------ liquidation ------ #\n","            min_low = np.full_like(en_p, np.nan)\n","            min_low[~equal_idx] = np.array([np.min(l[int(iin):int(iout)]) for _, _, iin, iout in np_obj[~equal_idx, :4]]).reshape(-1, 1)\n","            liqd = np.nanmin((min_low / en_p - fee - 1) * lvrg + 1)\n","    else:\n","        if not inversion:\n","            pr = ((ex_ps / en_ps - fees - 1) * lvrgs * p_qty_ratio).sum(axis=1) + 1\n","            # ------ liquidation ------ #\n","            min_low = np.full_like(en_p, np.nan)\n","            min_low[~equal_idx] = np.array([np.min(l[int(iin):int(iout)]) for _, _, iin, iout in np_obj[~equal_idx, :4]]).reshape(-1, 1)\n","            liqd = np.nanmin((min_low / en_p - fee - 1) * lvrg + 1)\n","        else:\n","            pr = ((en_ps / ex_ps - fees - 1) * lvrgs * p_qty_ratio).sum(axis=1) + 1\n","            # ------ liquidation ------ #\n","            max_high = np.full_like(en_p, np.nan)\n","            max_high[~equal_idx] = np.array([np.max(h[int(iin):int(iout)]) for _, _, iin, iout in np_obj[~equal_idx, :4]]).reshape(-1, 1)\n","            liqd = np.nanmin((en_p / max_high - fee - 1) * lvrg + 1)\n","\n","    return pr.reshape(-1, 1), liqd"],"metadata":{"id":"wDQWK3v5xOFa"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def idep_plot_v16(res_df, len_df, config, high, low, open_info_df1, paired_res, inversion=False, sample_ratio=0.7, title_position=(0.5, 0.5),\n","                  fontsize=15, signi=False):  # open_idx, side_arr\n","    if not signi:\n","        plt.style.use(['dark_background', 'fast'])\n","        plt.figure(figsize=(24, 8))\n","        gs = gridspec.GridSpec(nrows=2,  # row 몇 개\n","                               ncols=3,  # col 몇 개\n","                               height_ratios=[10, 1]\n","                               # height_ratios=[10, 10, 1]\n","                               )\n","    gs_idx = 0\n","    # plt.suptitle(key)\n","\n","    p_ranges, p_qty_ratio = literal_eval(config.tp_set.p_ranges), literal_eval(config.tp_set.p_qty_ratio)\n","    assert np.sum(p_qty_ratio) == 1.0\n","    assert len(p_ranges) == len(p_qty_ratio)\n","\n","    if sample_ratio is not None:\n","        sample_len = int(len_df * sample_ratio)\n","    else:\n","        sample_len = len_df\n","\n","    # ------ short & long data preparation ------ #\n","    # start_0 = time.time()\n","\n","    net_p1_idx_arr, p1_idx_arr, p2_idx_arr, pair_idx_arr, pair_price_arr, lvrg_arr, fee_arr, tpout_arr, tr_arr = paired_res\n","    assert len(p1_idx_arr) != 0, \"assert len(p1_idx_arr) != 0\"\n","\n","    short_net_p1_idx_arr = net_p1_idx_arr[np.where(open_info_df1.side.loc[net_p1_idx_arr] == OrderSide.SELL)[0]]\n","    long_net_p1_idx_arr = net_p1_idx_arr[np.where(open_info_df1.side.loc[net_p1_idx_arr] == OrderSide.BUY)[0]]\n","\n","    short_net_p1_frq = len(short_net_p1_idx_arr)\n","    long_net_p1_frq = len(long_net_p1_idx_arr)\n","    # print(\"len(short_net_p1_true_bias_bool) :\", len(short_net_p1_idx_arr))\n","    # print(\"len(long_net_p1_true_bias_bool) :\", len(long_net_p1_idx_arr))\n","\n","    short_p1_openi_idx = np.where(open_info_df1.side.loc[p1_idx_arr] == OrderSide.SELL)[0]  # p1_idx_arr 에 대한 idx, # side_arr,\n","    long_p1_openi_idx = np.where(open_info_df1.side.loc[p1_idx_arr] == OrderSide.BUY)[0]\n","\n","    # p1_idx = open_idx[p1_openi_arr].reshape(-1, 1)   # != p1_idx_arr, p1_openi_arr 은 exit_done 기준임\n","\n","    np_obj = np.hstack((pair_price_arr, pair_idx_arr, p1_idx_arr.reshape(-1, 1)))  # p1_idx_arr is 1d, need to be changed to 2d (for stacking)\n","    short_obj = np_obj[short_p1_openi_idx]\n","    long_obj = np_obj[long_p1_openi_idx]\n","    both_obj = np.vstack((short_obj, long_obj))\n","    print(\"short_obj.shape :\", short_obj.shape)\n","    print(\"long_obj.shape :\", long_obj.shape)\n","\n","    short_obj, long_obj, both_obj = [np.split(obj_, 5, axis=1) for obj_ in [short_obj, long_obj, both_obj]]\n","\n","    short_p2_idx_arr, long_p2_idx_arr = [p2_idx_arr[openi_idx_].reshape(-1, 1) for openi_idx_ in [short_p1_openi_idx, long_p1_openi_idx]]\n","    short_lvrg_arr, long_lvrg_arr = [lvrg_arr[openi_idx_].reshape(-1, 1) for openi_idx_ in [short_p1_openi_idx, long_p1_openi_idx]]\n","    short_fee_arr, long_fee_arr = [fee_arr[openi_idx_].reshape(-1, 1) for openi_idx_ in [short_p1_openi_idx, long_p1_openi_idx]]\n","    short_tpout_arr, long_tpout_arr = [tpout_arr[openi_idx_] for openi_idx_ in [short_p1_openi_idx, long_p1_openi_idx]]\n","    # short_bias_arr, long_bias_arr = [bias_arr[openi_idx_] for openi_idx_ in [short_p1_openi_idx, long_p1_openi_idx]]\n","    short_tr_arr, long_tr_arr = [tr_arr[openi_idx_] for openi_idx_ in [short_p1_openi_idx, long_p1_openi_idx]]\n","    # print(\"long_bias_arr.shape :\", long_bias_arr.shape)\n","    # print(\"short / long arr setting elapsed time :\", time.time() - start_0)\n","\n","    # start_0 = time.time()\n","\n","    short_tpbox_hhm, long_tpbox_hhm, short_tpbox_p2exec_hhm, long_tpbox_p2exec_hhm, short_outbox_hhm, long_outbox_hhm, short_p2_true_bias_bool, long_p2_true_bias_bool, \\\n","          short_tp_1, short_tp_0, long_tp_1, long_tp_0, short_out_1, short_out_0, long_out_1, long_out_0, short_ep2_0, long_ep2_0 = \\\n","      get_wave_bias_v5(res_df, config, high, low, len_df, short_net_p1_idx_arr, long_net_p1_idx_arr, short_p2_idx_arr, long_p2_idx_arr, short_obj, long_obj)\n","\n","    # print(\"get_wave_bias elapsed time :\", time.time() - start_0)\n","\n","    len_short, len_long = len(short_p1_openi_idx), len(long_p1_openi_idx)\n","\n","    # ------ plot_data ------ #\n","    try:\n","        # start_0 = time.time()\n","        if len_short == 0:\n","            short_pr = []\n","            gs_idx += 1\n","        else:\n","            short_tr = short_tr_arr.mean()\n","            short_pr, short_liqd = get_pr_v4(OrderSide.SELL, high, low, short_obj, short_tpout_arr, short_lvrg_arr, short_fee_arr, p_ranges,\n","                                             p_qty_ratio, inversion)\n","            short_total_pr = to_total_pr(len_df, short_pr, short_obj[-2])\n","            short_cum_pr = np.cumprod(short_total_pr)\n","            short_hlm = hlm(short_pr, short_p2_true_bias_bool)\n","            short_trade_ticks = np.mean(short_obj[-2] - short_obj[-1])\n","            if signi:\n","                short_idep_res_obj = (short_tpbox_p2exec_hhm, short_hlm) + get_res_info_nb_v2(sample_len, short_pr, short_total_pr, short_cum_pr, short_liqd)\n","            else:\n","                gs_idx = plot_info_v8(gs, gs_idx, len_df, sample_len, short_tr, short_tpbox_hhm, short_tpbox_p2exec_hhm, short_outbox_hhm, short_hlm, short_trade_ticks, short_net_p1_frq, short_pr, short_total_pr,\n","                                      short_cum_pr, short_liqd, short_lvrg_arr.mean(), title_position, fontsize)\n","        # print(\"short plot_data elapsed time :\", time.time() - start_0)\n","\n","    except Exception as e:\n","        gs_idx += 1\n","        print(\"error in short plot_data :\", e)\n","\n","    try:\n","        # start_0 = time.time()\n","        if len_long == 0:\n","            long_pr = []\n","            gs_idx += 1\n","        else:\n","            long_tr = long_tr_arr.mean()\n","            long_pr, long_liqd = get_pr_v4(OrderSide.BUY, high, low, long_obj, long_tpout_arr, long_lvrg_arr, long_fee_arr, p_ranges, p_qty_ratio,\n","                                           inversion)\n","            long_total_pr = to_total_pr(len_df, long_pr, long_obj[-2])\n","            long_cum_pr = np.cumprod(long_total_pr)\n","            # long_hhm = long_net_p1_hhm\n","            long_hlm = hlm(long_pr, long_p2_true_bias_bool)\n","            long_trade_ticks = np.mean(long_obj[-2] - long_obj[-1])\n","            if signi:\n","                long_idep_res_obj = (long_tpbox_p2exec_hhm, long_hlm) + get_res_info_nb_v2(sample_len, long_pr, long_total_pr, long_cum_pr, long_liqd)\n","            else:\n","                gs_idx = plot_info_v8(gs, gs_idx, len_df, sample_len, long_tr, long_tpbox_hhm, long_tpbox_p2exec_hhm, long_outbox_hhm, long_hlm, long_trade_ticks, long_net_p1_frq, long_pr, long_total_pr,\n","                                      long_cum_pr, long_liqd, long_lvrg_arr.mean(), title_position, fontsize)\n","        # print(\"long plot_data elapsed time :\", time.time() - start_0)\n","    except Exception as e:\n","        gs_idx += 1\n","        print(\"error in long plot_data :\", e)\n","\n","    try:\n","        # start_0 = time.time()\n","        if len_short * len_long == 0:\n","            both_pr = []\n","            gs_idx += 1\n","        else:\n","            both_tr = (short_tr + long_tr) / 2\n","            both_pr = np.vstack((short_pr, long_pr))  # for 2d arr, obj 를 1d 로 만들지 않는 이상, pr 은 2d 유지될 것\n","            both_total_pr = to_total_pr(len_df, both_pr, both_obj[-2])\n","            both_cum_pr = np.cumprod(both_total_pr)\n","            both_liqd = min(short_liqd, long_liqd)\n","            both_p2_true_bias_bool = np.hstack((short_p2_true_bias_bool, long_p2_true_bias_bool))  # hstack for 1d arr, vstack for 2d arr\n","            both_tpbox_hhm = (short_tpbox_hhm + long_tpbox_hhm) / 2\n","            both_tpbox_p2exec_hhm, both_hlm = (short_tpbox_p2exec_hhm + long_tpbox_p2exec_hhm) / 2, (short_hlm + long_hlm) / 2\n","            both_outbox_hhm = (short_outbox_hhm + long_outbox_hhm) / 2\n","            both_trade_ticks = np.mean(both_obj[-2] - both_obj[-1])\n","            both_net_p1_frq = short_net_p1_frq + long_net_p1_frq\n","            if signi:\n","                both_idep_res_obj = (both_tpbox_p2exec_hhm, both_hlm) + get_res_info_nb_v2(sample_len, both_pr, both_total_pr, both_cum_pr, both_liqd)\n","            else:\n","                gs_idx = plot_info_v8(gs, gs_idx, len_df, sample_len, both_tr, both_tpbox_hhm, both_tpbox_p2exec_hhm, both_outbox_hhm, both_hlm, both_trade_ticks, both_net_p1_frq, both_pr, both_total_pr,\n","                                      both_cum_pr, both_liqd, lvrg_arr.mean(), title_position, fontsize)\n","        # print(\"both plot_data elapsed time :\", time.time() - start_0)\n","    except Exception as e:\n","        gs_idx += 1\n","        print(\"error in both plot_data :\", e)\n","\n","    if not signi:\n","        if len_short * len_long > 0:\n","            for obj, bias_arr, cum_pr in zip([short_obj, long_obj, both_obj], [short_p2_true_bias_bool, long_p2_true_bias_bool, both_p2_true_bias_bool],\n","                                             [short_cum_pr, long_cum_pr, both_cum_pr]):\n","                try:\n","                    # start_0 = time.time()\n","                    gs_idx = frq_dev_plot_v4(gs, gs_idx, len_df, sample_len, obj[-2], bias_arr, cum_pr[-1], fontsize)\n","                    # print(\"frq_dev_plot elapsed time :\", time.time() - start_0)\n","                except Exception as e:\n","                    gs_idx += 1\n","                    print(\"error in frq_dev_plot :\", e)\n","            plt.show()\n","            plt.close()\n","\n","        return short_pr, short_obj, short_lvrg_arr, short_fee_arr, short_tpout_arr, short_tr_arr, short_p2_true_bias_bool, short_p2_idx_arr, short_tp_1, short_tp_0, short_out_1, short_out_0, short_ep2_0, \\\n","               long_pr, long_obj, long_lvrg_arr, long_fee_arr, long_tpout_arr, long_tr_arr, long_p2_true_bias_bool, long_p2_idx_arr, long_tp_1, long_tp_0, long_out_1, long_out_0, long_ep2_0  # long_net_p1_idx_arr long_p2_idx_arr\n","\n","    else:\n","        return [short_idep_res_obj[:-1], long_idep_res_obj[:-1], both_idep_res_obj[:-1]]"],"metadata":{"id":"6G92q_bExTVn"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"oE5zkT75Beiy"},"outputs":[],"source":["\n","# ------------ plot survey_res ------------ #\n","title_list = [\"short\", \"long\", \"both\"]\n","sub_title_list = ['prcn', 'wb', 'len_pr', 'dpf', 'wr', 'sr', 'acc_pr', 'sum_pr', 'min_pr', 'liqd', 'acc_mdd', 'sum_mdd']\n","space_ = \" \" * 120\n","\n","fig = plt.figure(figsize=(24, 8))\n","plt.style.use('dark_background')\n","gs = gridspec.GridSpec(nrows=1,\n","                        ncols=3,\n","                        # height_ratios=[1, 1, 1]\n","                      )\n","# nrows, ncols, h_r = 3, 3, [1, 1, 1]\n","nrows, ncols, h_r = 3, 4, [1, 1, 1]\n","# nrows, ncols, h_r = 4, 3, [1, 1, 1, 1]\n","# if d_idx == 0:\n","# else:\n","  # nrows, ncols, h_r = 2, 2, [1, 1]\n","\n","for d_idx, (title_name, survey_res) in enumerate(zip(title_list, survey_res_list)):  \n","  inner_gs = gs[d_idx].subgridspec(nrows=nrows,\n","                        ncols=ncols,\n","                        height_ratios=h_r\n","                      )\n","  for in_idx, (data_, sub_title) in enumerate(zip(survey_res.T, sub_title_list)):\n","    plt.subplot(inner_gs[in_idx])\n","    data = data_.ravel()\n","    valid_idx = ~np.isnan(data)\n","    if np.sum(valid_idx) > 0:\n","      if type(val_list[0]) == str:\n","        x, y = np.arange(len(val_list))[valid_idx], data[valid_idx]\n","      else:\n","        x, y = val_list[valid_idx], data[valid_idx]\n","      plt.plot(x, y)  # 앞에서부터 len(result) 만큼만    \n","      plt.title(sub_title + '_{:.2f}'.format(x[np.argmax(y)]))\n","    else:\n","      plt.title(sub_title)\n","\n","plt.suptitle(space_.join(title_list))\n","plt.show()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"pbYUlJl34ImU"},"outputs":[],"source":["# ------ open validation ------ #\n","pos_side = \"SELL\" # SELL BUY\n","\n","if pos_side == \"SELL\":\n","  open_ = res_df['short_open1_{}'.format(config.selection_id)].to_numpy()\n","  open_ts = list(map(lambda x : str(x), res_df.index[open_ == 1]))  \n","else:\n","  open_ = res_df['long_open1_{}'.format(config.selection_id)].to_numpy()\n","  open_ts = list(map(lambda x : str(x), res_df.index[open_ == 1]))  "]},{"cell_type":"code","execution_count":null,"metadata":{"id":"wyYMYcxx4ImV"},"outputs":[],"source":["pos_index = open_info_df1.side == pos_side\n","for ts in res_df.index[open_info_df1.index[pos_index]]:\n","  print(ts)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"6YcqQQzsl6Ys"},"outputs":[],"source":["\n","def hlm(pr_list, true_bool):   # true_pr in true_bias / true_bias\n","  true_bias_pr = pr_list[true_bool].ravel()\n","  print(\"len(pr_list) :\", len(pr_list))\n","  print(\"len(true_bias_pr) :\", len(true_bias_pr))\n","  print(\"np.sum(pr_list > 1) :\", np.sum(pr_list > 1))\n","  print(\"np.sum(true_bias_pr > 1) :\", np.sum(true_bias_pr > 1))\n","  return np.sum(true_bias_pr > 1) / len(true_bias_pr)  # 차원을 고려한 계산"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"t7a5Hyyyd5Lk"},"outputs":[],"source":["\n","def get_wave_bias_v5_1(res_df, config, high, low, len_df, short_net_p1_idx_arr, long_net_p1_idx_arr, short_p2_idx_arr, long_p2_idx_arr, short_obj, long_obj):\n","\n","    short_net_p1_idx = short_net_p1_idx_arr.astype(int) #.reshape(-1, 1)\n","    short_p1_idx = short_obj[-1].astype(int).ravel()\n","    short_p2_idx = short_p2_idx_arr.astype(int).ravel() #.reshape(-1, 1)\n","    short_en_idx = short_obj[2].astype(int)\n","\n","    short_prime_net_p1_bool = short_net_p1_idx - pd.Series(short_net_p1_idx).shift(1).to_numpy() > 1\n","    short_prime_net_p1_bool[0] = True\n","    short_prime_net_p1_idx = short_net_p1_idx[short_prime_net_p1_bool]\n","    \n","    short_prime_p2_bool = short_p2_idx - pd.Series(short_p2_idx).shift(1).to_numpy() > 1\n","    short_prime_p2_bool[0] = True\n","    short_prime_p2_idx = short_p2_idx[short_prime_p2_bool]\n","    \n","    short_tp_1 = ffill_line(res_df['short_tp_1_{}'.format(config.selection_id)].to_numpy(), short_prime_net_p1_idx)  # net_p1_idx ~ net_p1_idx' 사이에 대한 momentum 조사 (net 이유는 logic's validation)\n","    short_tp_0 = ffill_line(res_df['short_tp_0_{}'.format(config.selection_id)].to_numpy(), short_prime_net_p1_idx)\n","    short_out_1 = ffill_line(res_df['short_out_1_{}'.format(config.selection_id)].to_numpy(), short_prime_p2_idx)  # 체결된, p2_idx ~ p2_idx' 사이에 대한 momentum 조사\n","    short_out_0 = ffill_line(res_df['short_out_0_{}'.format(config.selection_id)].to_numpy(), short_prime_p2_idx)\n","    short_ep2_0 = ffill_line(res_df['short_ep2_0_{}'.format(config.selection_id)].to_numpy(), short_prime_p2_idx)\n","    # short_net_wave_1 = ffill_line(res_df['short_wave_1_{}'.format(config.selection_id)].to_numpy(), short_op_idx)  # en_idx 에 sync 된 open_idx 를 사용해야함\n","    # short_net_wave_0 = ffill_line(res_df['short_wave_0_{}'.format(config.selection_id)].to_numpy(), short_op_idx)\n","\n","    long_net_p1_idx = long_net_p1_idx_arr.astype(int) #.reshape(-1, 1)\n","    long_p1_idx = long_obj[-1].astype(int).ravel()\n","    long_p2_idx = long_p2_idx_arr.astype(int).ravel() #.reshape(-1, 1)\n","    long_en_idx = long_obj[2].astype(int)\n","\n","    long_prime_net_p1_bool = long_net_p1_idx - pd.Series(long_net_p1_idx).shift(1).to_numpy() > 1\n","    long_prime_net_p1_bool[0] = True\n","    long_prime_net_p1_idx = long_net_p1_idx[long_prime_net_p1_bool]\n","    \n","    long_prime_p2_bool = long_p2_idx - pd.Series(long_p2_idx).shift(1).to_numpy() > 1\n","    long_prime_p2_bool[0] = True\n","    long_prime_p2_idx = long_p2_idx[long_prime_p2_bool]\n","    \n","    long_tp_1 = ffill_line(res_df['long_tp_1_{}'.format(config.selection_id)].to_numpy(), long_prime_net_p1_idx)\n","    long_tp_0 = ffill_line(res_df['long_tp_0_{}'.format(config.selection_id)].to_numpy(), long_prime_net_p1_idx)\n","    long_out_1 = ffill_line(res_df['long_out_1_{}'.format(config.selection_id)].to_numpy(), long_prime_p2_idx)  # 체결된, p2_idx ~ p2_idx' 사이에 대한 momentum 조사\n","    long_out_0 = ffill_line(res_df['long_out_0_{}'.format(config.selection_id)].to_numpy(), long_prime_p2_idx)\n","    long_ep2_0 = ffill_line(res_df['long_ep2_0_{}'.format(config.selection_id)].to_numpy(), long_prime_p2_idx)\n","\n","    short_unq_p1_idx = np.unique(short_p1_idx)  #.reshape(-1, 1)   # 통일성을 위해 2d 로 설정\n","    long_unq_p1_idx = np.unique(long_p1_idx)  #.reshape(-1, 1)\n","\n","    bias_info_tick = config.tr_set.bias_info_tick\n","\n","    # print(\"long_net_p1_idx.shape :\", long_net_p1_idx.shape)\n","    # print(\"long_en_idx.shape :\", long_en_idx.shape)\n","\n","    # ================== touch idx ================== #\n","    # 1. min 에 초점을 맞추는 거니까, touch 없을시 len_df 로 설정\n","    # 2. future_data 사용이니까, shift(-bias_info_tick) 설정\n","    # 3. entry 다음 idx 부터 -> tp & out 체결 logic 이 현재 entry_idx 부터 되어있어서 취소\n","    # Todo, high 와 low 중 어디에 먼저닿느냐가 중요함을 key 로 잡고만든 logic 임\n","    len_df_range = np.arange(len_df)\n","    last_idx = len_df - 1  # nan 발생하면 대소 비교로 hhm 확인이 불가능해짐\n","    shift_range = bias_info_tick - 1  # entry_idx 까지 포함해서 wave_bias check\n","\n","    # ------------ pair & idxs ------------ #\n","    short_net_p1_pair = list(zip(short_net_p1_idx, np.append(short_net_p1_idx[1:], last_idx)))\n","    long_net_p1_pair = list(zip(long_net_p1_idx, np.append(long_net_p1_idx[1:], last_idx)))\n","\n","    short_p2_pair = list(zip(short_p2_idx, np.append(short_p2_idx[1:], last_idx)))\n","    long_p2_pair = list(zip(long_p2_idx, np.append(long_p2_idx[1:], last_idx)))\n","\n","    short_tp_1_touch_idxs = np.where(low <= short_tp_1, len_df_range, last_idx)   #.rolling(bias_info_tick, min_periods=1).min().shift(-shift_range).to_numpy()\n","    short_tp_0_touch_idxs = np.where(high >= short_tp_0, len_df_range, last_idx)   #.rolling(bias_info_tick, min_periods=1).min().shift(-shift_range).to_numpy()\n","    long_tp_1_touch_idxs = np.where(high >= long_tp_1, len_df_range, last_idx)   #.rolling(bias_info_tick, min_periods=1).min().shift(-shift_range).to_numpy()\n","    long_tp_0_touch_idxs = np.where(low <= long_tp_0, len_df_range, last_idx)   #.rolling(bias_info_tick, min_periods=1).min().shift(-shift_range).to_numpy()\n","\n","    short_out_1_touch_idxs = np.where(low <= short_out_1, len_df_range, last_idx)   #.rolling(bias_info_tick, min_periods=1).min().shift(-shift_range).to_numpy()\n","    short_out_0_touch_idxs = np.where(high >= short_out_0, len_df_range, last_idx)   #.rolling(bias_info_tick, min_periods=1).min().shift(-shift_range).to_numpy()\n","    long_out_1_touch_idxs = np.where(high >= long_out_1, len_df_range, last_idx)   #.rolling(bias_info_tick, min_periods=1).min().shift(-shift_range).to_numpy()\n","    long_out_0_touch_idxs = np.where(low <= long_out_0, len_df_range, last_idx)   #.rolling(bias_info_tick, min_periods=1).min().shift(-shift_range).to_numpy()\n","\n","    # ------------ min touch_idx ------------ #\n","    short_tp_1_touch_idx = get_touch_idx_fill(short_tp_1_touch_idxs, short_net_p1_pair, short_net_p1_idx, len_df)  # pair means 구간\n","    short_tp_0_touch_idx = get_touch_idx_fill(short_tp_0_touch_idxs, short_net_p1_pair, short_net_p1_idx, len_df)\n","    long_tp_1_touch_idx = get_touch_idx_fill(long_tp_1_touch_idxs, long_net_p1_pair, long_net_p1_idx, len_df)\n","    long_tp_0_touch_idx = get_touch_idx_fill(long_tp_0_touch_idxs, long_net_p1_pair, long_net_p1_idx, len_df)\n","\n","    short_out_1_touch_idx = get_touch_idx_fill(short_out_1_touch_idxs, short_p2_pair, short_p2_idx, len_df)  # pair means 구간\n","    short_out_0_touch_idx = get_touch_idx_fill(short_out_0_touch_idxs, short_p2_pair, short_p2_idx, len_df)\n","    long_out_1_touch_idx = get_touch_idx_fill(long_out_1_touch_idxs, long_p2_pair, long_p2_idx, len_df)\n","    long_out_0_touch_idx = get_touch_idx_fill(long_out_0_touch_idxs, long_p2_pair, long_p2_idx, len_df)\n","\n","    # ------------ point's touch_idx ------------ #\n","    short_tp_1_net_p1_touch_idx = short_tp_1_touch_idx[short_net_p1_idx]   # for tp_box's net_hhm\n","    short_tp_0_net_p1_touch_idx = short_tp_0_touch_idx[short_net_p1_idx]\n","    long_tp_1_net_p1_touch_idx = long_tp_1_touch_idx[long_net_p1_idx]\n","    long_tp_0_net_p1_touch_idx = long_tp_0_touch_idx[long_net_p1_idx]\n","    # print(\"long_tp_1_net_p1_touch_idx :\", long_tp_1_net_p1_touch_idx)\n","\n","    short_tp_1_unq_p1_touch_idx = short_tp_1_touch_idx[short_unq_p1_idx]    # p2 까지 체결된 p1's hhm\n","    short_tp_0_unq_p1_touch_idx = short_tp_0_touch_idx[short_unq_p1_idx]\n","    long_tp_1_unq_p1_touch_idx = long_tp_1_touch_idx[long_unq_p1_idx]\n","    long_tp_0_unq_p1_touch_idx = long_tp_0_touch_idx[long_unq_p1_idx]\n","\n","    short_tp_1_p2_touch_idx = short_tp_1_touch_idx[short_p2_idx]    # hlm 을 위한 hhm (on p2)\n","    short_tp_0_p2_touch_idx = short_tp_0_touch_idx[short_p2_idx]\n","    long_tp_1_p2_touch_idx = long_tp_1_touch_idx[long_p2_idx]\n","    long_tp_0_p2_touch_idx = long_tp_0_touch_idx[long_p2_idx]\n","\n","    short_out_1_p2_touch_idx = short_out_1_touch_idx[short_p2_idx]   # for out_box's executed_hhm\n","    short_out_0_p2_touch_idx = short_out_0_touch_idx[short_p2_idx]\n","    long_out_1_p2_touch_idx = long_out_1_touch_idx[long_p2_idx]\n","    long_out_0_p2_touch_idx = long_out_0_touch_idx[long_p2_idx]\n","\n","    # ------------------ bias_bool & hhm ------------------ #\n","    short_net_p1_true_bias_bool = short_tp_1_net_p1_touch_idx < short_tp_0_net_p1_touch_idx  # true_bias 의 조건\n","    short_net_p1_false_bias_bool = short_tp_1_net_p1_touch_idx >= short_tp_0_net_p1_touch_idx  # false_bias 의 조건, ~true_bias_bool 와 같지 않음, why ..? = en_idx\n","    long_net_p1_true_bias_bool = long_tp_1_net_p1_touch_idx < long_tp_0_net_p1_touch_idx\n","    long_net_p1_false_bias_bool = long_tp_1_net_p1_touch_idx >= long_tp_0_net_p1_touch_idx\n","\n","    short_unq_p1_true_bias_bool = short_tp_1_unq_p1_touch_idx < short_tp_0_unq_p1_touch_idx  # true_bias 의 조건\n","    short_unq_p1_false_bias_bool = short_tp_1_unq_p1_touch_idx >= short_tp_0_unq_p1_touch_idx  # false_bias 의 조건, ~true_bias_bool 와 같지 않음, why ..? = en_idx    \n","    long_unq_p1_true_bias_bool = long_tp_1_unq_p1_touch_idx < long_tp_0_unq_p1_touch_idx\n","    long_unq_p1_false_bias_bool = long_tp_1_unq_p1_touch_idx >= long_tp_0_unq_p1_touch_idx\n","\n","    short_p2_true_bias_bool = short_tp_1_p2_touch_idx < short_tp_0_p2_touch_idx\n","    short_p2_false_bias_bool = short_tp_1_p2_touch_idx >= short_tp_0_p2_touch_idx\n","    long_p2_true_bias_bool = long_tp_1_p2_touch_idx < long_tp_0_p2_touch_idx\n","    long_p2_false_bias_bool = long_tp_1_p2_touch_idx >= long_tp_0_p2_touch_idx\n","\n","    short_p2_out_true_bias_bool = short_out_1_p2_touch_idx < short_out_0_p2_touch_idx\n","    short_p2_out_false_bias_bool = short_out_1_p2_touch_idx >= short_out_0_p2_touch_idx\n","    long_p2_out_true_bias_bool = long_out_1_p2_touch_idx < long_out_0_p2_touch_idx\n","    long_p2_out_false_bias_bool = long_out_1_p2_touch_idx >= long_out_0_p2_touch_idx\n","\n","    short_net_p1_hhm = hhm(short_net_p1_true_bias_bool, short_net_p1_false_bias_bool)\n","    long_net_p1_hhm = hhm(long_net_p1_true_bias_bool, long_net_p1_false_bias_bool)\n","\n","    short_p1_hhm = hhm(short_unq_p1_true_bias_bool, short_unq_p1_false_bias_bool)\n","    long_p1_hhm = hhm(long_unq_p1_true_bias_bool, long_unq_p1_false_bias_bool)\n","\n","    # short_p2_hhm = hhm(short_p2_true_bias_bool, short_p2_false_bias_bool)\n","    # long_p2_hhm = hhm(long_p2_true_bias_bool, long_p2_false_bias_bool)\n","\n","    short_out_hhm = hhm(short_p2_out_true_bias_bool, short_p2_out_false_bias_bool)\n","    long_out_hhm = hhm(long_p2_out_true_bias_bool, long_p2_out_false_bias_bool)\n","\n","    # print(\"short_net_p1_hhm, short_p2_hhm, short_out_hhm :\", short_net_p1_hhm, short_p2_hhm, short_out_hhm)\n","\n","    return short_net_p1_hhm, long_net_p1_hhm, short_p1_hhm, long_p1_hhm, short_out_hhm, long_out_hhm, short_p2_true_bias_bool, long_p2_true_bias_bool, \\\n","          short_tp_1[short_en_idx], short_tp_0[short_en_idx], long_tp_1[long_en_idx], long_tp_0[long_en_idx], \\\n","          short_out_1[short_en_idx], short_out_0[short_en_idx], long_out_1[long_en_idx], long_out_0[long_en_idx], short_ep2_0[short_en_idx], long_ep2_0[long_en_idx]   # plot_check 을 위해 en_idx 넣음\n","          "]},{"cell_type":"code","execution_count":null,"metadata":{"id":"dsI-R8Zz7ls1"},"outputs":[],"source":["\n","        # tr_arr = res_df['{}_tr_{}'.format(side_pos, selection_id)].to_numpy()\n","\n","        # ------ point1 & 2's tp_j ------ #\n","        # point_idxgap = point_idxgap_arr[op_idx]\n","        # if np.isnan(point_idxgap):\n","        #     continue\n","        # else:\n","        #     # ------ allow point2 only next to point1 ------ #\n","        #     open_arr = res_df['{}_open_{}'.format(side_pos, selection_id)].to_numpy()\n","        #     tp_j = int(op_idx - point_idxgap)\n","        #     if np.sum(open_arr[tp_j:op_idx]) != 0:\n","        #         continue"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":157},"executionInfo":{"elapsed":350,"status":"ok","timestamp":1652751452213,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"gMur2u8WeQ2K","outputId":"7b506c38-7a8f-4bd1-a021-8a065d009882"},"outputs":[{"data":{"image/png":"\n","text/plain":["<Figure size 1152x144 with 2 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["# ------ bias frquency ------ #\n","len_df = len(res_df)\n","\n","plt.figure(figsize=(16, 2))\n","\n","ax1 = plt.subplot(121)\n","plt.fill_between(short_obj[-2].ravel(), 0, 1, where=short_bias_arr.ravel() > 0,\n","                facecolor='#00ff00', alpha=1, transform=ax1.get_xaxis_transform())   # 00ff00\n","# plt.fill_between(short_obj[-2].ravel(), 0, 1, where=short_bias_arr.ravel() < 1,\n","#                 facecolor='#ff00ff', alpha=1, transform=ax1.get_xaxis_transform())\n","\n","ax2 = plt.subplot(122)\n","plt.fill_between(long_obj[-2].ravel(), 0, 1, where=long_bias_arr.ravel() > 0,\n","                facecolor='#00ff00', alpha=1, transform=ax2.get_xaxis_transform())\n","plt.fill_between(long_obj[-2].ravel(), 0, 1, where=long_bias_arr.ravel() < 1,\n","                facecolor='#ff00ff', alpha=1, transform=ax2.get_xaxis_transform())\n","plt.show()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":157},"executionInfo":{"elapsed":872,"status":"ok","timestamp":1652756329304,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"eoXMxRm3qdz2","outputId":"98c90b55-4c14-402c-e2d4-d7b88f9e2e62"},"outputs":[{"data":{"image/png":"\n","text/plain":["<Figure size 1152x144 with 2 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["# ------ bias frquency ------ #\n","len_df = len(res_df)\n","\n","plt.figure(figsize=(16, 2))\n","\n","ax1 = plt.subplot(121)\n","plt.fill_between(short_obj[-2].ravel(), 0, 1, where=short_bias_arr.ravel() > 0,\n","                facecolor='#00ff00', alpha=1, transform=ax1.get_xaxis_transform())   # 00ff00\n","# plt.fill_between(short_obj[-2].ravel(), 0, 1, where=short_bias_arr.ravel() < 1,\n","#                 facecolor='#ff00ff', alpha=1, transform=ax1.get_xaxis_transform())\n","\n","ax2 = plt.subplot(122)\n","plt.vlines(long_obj[-2][long_bias_arr], ymin=0, ymax=1, color='#00ff00')\n","plt.vlines(long_obj[-2][~long_bias_arr], ymin=0, ymax=1, color='#ff00ff')\n","# [plt.axvline(x_, color='#ff00ff') for x_, bias_ in zip(long_obj[-2], long_bias_arr) if not bias_]\n","plt.show()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"dm7ZqzS9vqhm"},"outputs":[],"source":["%timeit -n1 -r10 plt.vlines(long_obj[-2][long_bias_arr], ymin=0, ymax=1, color='#00ff00')  # 528 ms per loop --> 8.71 ms per loop\n","%timeit -n1 -r10 [plt.axvline(x_, color='#00ff00') for x_, bias_ in zip(long_obj[-2], long_bias_arr) if bias_]\n","\n","# np.sum(long_bias_arr == ~long_bias_arr)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"qOE2YSzntx8v"},"outputs":[],"source":["# %timeit -n1 -r10 [plt.axvline(x_) for x_, bias_ in zip(long_obj[-2].ravel(), long_bias_arr.ravel()) if bias_]\n","%timeit -n1 -r10 plt.fill_between(long_obj[-2].ravel(), 0, 1, where=long_bias_arr.ravel() > 0, facecolor='#00ff00', alpha=1, transform=ax2.get_xaxis_transform())"]},{"cell_type":"markdown","metadata":{"id":"dHFkv6Ar1ojU"},"source":["## plot_check_v2"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"FCpPCl931ojV"},"outputs":[],"source":["# res_df = wave_range_v4(res_df, 20, ltf_df=None, touch_lbperiod=50)\n","# res_df = h_candle_v4(res_df, 20, ltf_df=None, touch_lbperiod=50)\n","del np_plot_params"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"rMIwv1Nr1ojX"},"outputs":[],"source":["# ------------------ plot_config ------------------ #\n","save_mode = 0\n","\n","front_plot = 0    # 0 : p1_tick, 1 : p2_tick\n","back_plot = 0     # 0 : post_plot_size, 1 : open, 2 : p2_tick, 3 : ep_tick, 4 : tp_tick, 5 : bias_tick (사용 금지)  \n","x_max = 500       # back_plot : 0 사용시, custom x_max 반영됨\n","\n","bias_plot = 1     # 1 : true_bias only, -1 : false_bias only, 0 : both\n","\n","pr_descend = 1   # 1 : 큰 pr 부터, -1 : 작은 pr 부터, 0 : 순서대로\n","\n","position = 1      # -1 : short, 0 & 1 : long\n","\n","x_margin_mult = 1/30\n","y_margin_mult = 1/30  # 0 \n","\n","prev_plotsize = 100 #  150 100 20 500 1000\n","post_plotsize = 100 # config.tr_set.bias_info_tick -> excessive bit 는 감당 못함\n","\n","inversion = 0\n","hedge = 0\n","\n","# ------ show or save ------ #\n","if save_mode:\n","  plot_check_dir = current_path + \"plot_check/\" +  key.replace(\".ftr\", \"\")\n","  shutil.rmtree(plot_check_dir, ignore_errors=True)  # remove existing dir\n","  os.makedirs(plot_check_dir)\n","  print(plot_check_dir)\n","else:\n","  plot_check_dir = None\n","\n","# ------------ 한 방향에 대해 plot_check 함 (by position var.) ------------ #\n","#   obj by position  \n","if position == -1:\n","  pos_str = \"SELL\"\n","  pr_, obj_ = short_pr, short_obj\n","  arr_list = [short_p2_idx_arr, short_lvrg_arr, short_fee_arr, short_tpout_arr, short_bias_arr, short_tp_1, short_tp_0, short_out_1, short_out_0, short_ep2_0]\n","else:   # both option currently not supported\n","  pos_str = \"BUY\"\n","  pr_, obj_ = long_pr, long_obj\n","  arr_list = [long_p2_idx_arr, long_lvrg_arr, long_fee_arr, long_tpout_arr, long_bias_arr, long_tp_1, long_tp_0, long_out_1, long_out_0, long_ep2_0]\n","\n","if pr_descend:\n","    if pr_descend == -1:\n","      pr_descend = 0\n","    pr, obj, [p2_idx_arr, lvrg_arr, fee_arr, tpout_arr, bias_arr, tp_1, tp_0, out_1, out_0, ep2_0] = sort_bypr_v4(pr_, obj_, arr_list, descending=pr_descend)  # --> pr_descend 의 의미가 사라짐.. (false -> true plot 으로 이동한 것뿐)\n","else:\n","  pr, obj, [p2_idx_arr, lvrg_arr, fee_arr, tpout_arr, bias_arr, tp_1, tp_0, out_1, out_0, ep2_0] = pr_, obj_, arr_list\n","\n","pr_msg = \"%s\\n {} ~ {} -> {:.5f}\\n lvrg : {}\\n fee : {:.4f}\" % (pos_str)  # = data_window, pos_str 으로 이곳에서 정의함\n","\n","try:   # wave_range 단독 실행의 경우 tr_arr 이 존재하지 않기 때문에 try 처리함\n","  res_df['short_tr_{}'.format(selection_id)].iloc[short_obj[-1].astype(int).ravel()] = short_tr_arr\n","  res_df['long_tr_{}'.format(selection_id)].iloc[long_obj[-1].astype(int).ravel()] = long_tr_arr\n","except:\n","  pass\n","\n","if front_plot == 0:\n","  front_idx = obj[4]      # left_margin 기준 - open_idx\n","else:\n","  front_idx = p2_idx_arr  # left_margin 기준 - p2_idx\n","\n","left_end_idx = front_idx - prev_plotsize  \n","right_end_idx = obj[3] + post_plotsize\n","invalid_left_end = np.sum(left_end_idx < 0)\n","\n","np_plot_params = np.hstack((left_end_idx, right_end_idx, pr, *obj, p2_idx_arr, lvrg_arr, fee_arr, tpout_arr, tp_1, tp_0, out_1, out_0, ep2_0))[invalid_left_end:]  # all arr should have same dimension\n","\n","if bias_plot:\n","  if bias_plot == 1:\n","    bias_idx = bias_arr[invalid_left_end:].ravel()  # true_bias 만 plot\n","  else:\n","    bias_idx = ~bias_arr[invalid_left_end:].ravel()  # false_bias 만 plot\n","\n","  np_plot_params = np_plot_params[bias_idx]"]},{"cell_type":"markdown","metadata":{"id":"-4CXGqEN1ojY"},"source":["### session_plot"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":798,"status":"ok","timestamp":1658797807231,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"2bjxKCIh1ojZ","outputId":"a72b4daf-02c9-433f-f32b-f0943b23cb2d"},"outputs":[{"output_type":"stream","name":"stderr","text":["/content/drive/My Drive/Colab Notebooks/JnQ/funcs/funcs_plot_check.py:10: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.\n","  step_col_arr = np.array(col_list)\n"]}],"source":["selection_id = config.selection_id\n","\n","# ============ make col_idx_dict config ============ #\n","nonstep_col_list = []\n","step_col_list = []\n","step_col_list2 = []\n","stepmark_col_list = []\n","data_window_p1_col_list = []\n","data_window_p2_col_list = []\n","\n","# ============ nonstep_col_list - add info(col, alpha, color, linewidth) ============ #\n","# nonstep_col_list.append([['close'], 1, '#ffffff', 2])\n","\n","# ============ step_col_list - add info(col, alpha, color, linewidth) ============ #\n","# ------ htf_candle ------ #\n","# hc_tf1 = '5T'\n","# hc_tf2 = '15T'\n","\n","# step_col_list.append([['open_{}'.format(hc_tf1), 'close_{}'.format(hc_tf1)], 1, '#ffffff', 2])\n","# step_col_list.append([['open_{}'.format(hc_tf2), 'close_{}'.format(hc_tf2)], 1, '#ffffff', 4])\n","\n","# ------ resi_sup ------ #\n","# rs_tf = 'T'\n","# step_col_list.append([['resi_{}'.format(rs_tf), 'sup_{}'.format(rs_tf)], 1, '#ffeb3b', 1])\n","# step_col_list.append([['resi_out_{}'.format(rs_tf), 'sup_out_{}'.format(rs_tf)], 1, 'dodgerblue', 2])\n","\n","# ------ wave_base ------ #\n","wave_itv1 = config.tr_set.wave_itv1\n","wave_itv2 = config.tr_set.wave_itv2\n","wave_period1 = config.tr_set.wave_period1\n","wave_period2 = config.tr_set.wave_period2\n","\n","# step_col_list.append([['dc_base_{}{}'.format(wave_itv1, wave_period1)], 1, '#5b9cf6', 1])\n","# step_col_list.append([['dc_base_{}{}'.format(wave_itv2, wave_period2)], 1, '#5b9cf6', 5])\n","\n","# step_col_list.append([['wave_low_fill_{}{}'.format(wave_tf, wave_period)], 1, '#ffeb3b', 1])\n","# step_col_list.append([['wave_high_fill_{}{}'.format(wave_tf, wave_period)], 1, '#ffeb3b', 1])\n","# step_col_list.append([['dc_upper_{}{}'.format(wave_tf, wave_period), 'dc_lower_{}{}'.format(wave_tf, wave_period)], 1, '#ffeb3b', 1])\n","\n","# ------ dc ------ #\n","dc_tf1 = 'T'\n","dc_period1 = wave_period2  # 20\n","dc_tf2 = 'T'\n","dc_period2 = config.loc_set.point2.csd_period if config.loc_set.point2.csd_period != \"None\" else wave_period2 \n","\n","# step_col_list.append([['dc_upper_{}{}'.format(dc_tf1, dc_period1), 'dc_lower_{}{}'.format(dc_tf1, dc_period1)], 1, '#ff00ff', 1]),  # inner #ffeb3b\n","# step_col_list.append([['dc_base_{}{}'.format(dc_tf1, dc_period1)], 1, '#ffee58', 3]) # ffee58 5b9cf6\n","# step_col_list.append([['dc_upper_{}{}'.format(dc_tf2, dc_period2), 'dc_lower_{}{}'.format(dc_tf2, dc_period2)], 1, '#ffee58', 2]),  # inner #ffeb3b\n","# step_col_list.append([['dc_base_{}{}'.format(dc_tf2, dc_period2)], 1, '#ffee58', 3]) # ffee58 5b9cf6\n","\n","# ------ bb ------ #\n","bb_tf1 = 'T'\n","bb_period1 = 60\n","\n","# step_col_list.append([['bb_upper_{}{}'.format(bb_tf1, bb_period1), 'bb_lower_{}{}'.format(bb_tf1, bb_period1)], 1, '#ffffff', 1])\n","# step_col_list.append([['bb_upper2_{}{}'.format(bb_tf1, bb_period1), 'bb_lower2_{}{}'.format(bb_tf1, bb_period1)], 1, '#ffffff', 1])\n","# step_col_list.append([['bb_upper3_{}{}'.format(bb_tf1, bb_period1), 'bb_lower3_{}{}'.format(bb_tf1, bb_period1)], 1, '#ffffff', 1])\n","# step_col_list.append([['bb_base_{}{}'.format(bb_tf1, bb_period1)], 1, '#00ff00', 1])\n","\n","\n","# ------ ma / ema ------ #\n","# step_col_list.append([['ema_5T'], 1, '#03ed30', 2])\n","\n","ma_period = 60\n","step_col_list.append([['ma_T{}'.format(ma_period)], 1, '#03ed30', 2])\n","# step_col_list.append([['long_ma_T{}_-1'.format(ma_period)], 1, '#03ed30', 2])\n","\n","# ============ step_col_list2 - add info(col, alpha, color, linewidth) ============ #\n","# ------ cci ------ #\n","step_col_list2.append([['cci_{}{}'.format(wave_itv1, wave_period1)], 1, '#00ff00', 3])\n","step_col_list2.append([['cci_{}{}'.format(wave_itv2, wave_period2)], 1, '#00ff00', 1])\n","\n","# ------ stoch ------ #\n","# step_col_list2.append([['stoch_{}{}33'.format(wave_itv1, wave_period1)], 1, '#00ff00', 3])\n","\n","# ------ macd ------ #\n","# step_col_list2.append([['macd_T535'], 1, '#00ff00', 1])\n","\n","\n","# ============ stepmark_col_list - add info(col, alpha, color, linewidth, marker_style) ============ #\n","# stepmark_col_list.append([['sar_T'], 1, 'dodgerblue', 7])\n","\n","# ------ wave_range ------ #\n","stepmark_col_list.append([['wave_low_fill_{}{}'.format(wave_itv1, wave_period1)], 1, '#e91e63', 10, '*'])\n","stepmark_col_list.append([['wave_high_fill_{}{}'.format(wave_itv1, wave_period1)], 1, '#2962ff', 10, '*'])\n","\n","# stepmark_col_list.append([['wave_low_fill_{}{}'.format(wave_itv2, wave_period2)], 1, '#ff00ff', 7, '*'])\n","# stepmark_col_list.append([['wave_high_fill_{}{}'.format(wave_itv2, wave_period2)], 1, '#00ff00', 7, '*'])\n","  \n","# stepmark_col_list.append([['wave_co_marker_{}{}'.format(wave_itv1, wave_period1)], 1, '#00ff00', 3, 'o'])\n","# stepmark_col_list.append([['wave_cu_marker_{}{}'.format(wave_itv1, wave_period1)], 1, '#ff00ff', 3, 'o'])\n","\n","# ============ data_window_col_list ============ #\n","# ------ wrr ------ #\n","# data_window_col_list.append([['cu_wrr_21_{}{}'.format(wave_itv1, wave_period1)], 'cu_wrr_21_{}{}'.format(wave_itv1, wave_period1)])\n","# data_window_col_list.append([['co_wrr_21_{}{}'.format(wave_itv1, wave_period1)], 'co_wrr_21_{}{}'.format(wave_itv1, wave_period1)])\n","data_window_p1_col_list.append([['cu_wrr_32_{}{}'.format(wave_itv1, wave_period1)], 'cu_wrr_32_{}{}'.format(wave_itv1, wave_period1)])\n","data_window_p1_col_list.append([['co_wrr_32_{}{}'.format(wave_itv1, wave_period1)], 'co_wrr_32_{}{}'.format(wave_itv1, wave_period1)])\n","# data_window_p2_col_list.append([['cu_wrr_32_{}{}'.format(wave_itv2, wave_period2)], 'cu_wrr_32_{}{}'.format(wave_itv2, wave_period2)])\n","# data_window_p2_col_list.append([['co_wrr_32_{}{}'.format(wave_itv2, wave_period2)], 'co_wrr_32_{}{}'.format(wave_itv2, wave_period2)])\n","\n","data_window_p1_col_list.append([['short_tr_{}'.format(selection_id)], 'short_tr_{}'.format(selection_id)])\n","data_window_p1_col_list.append([['long_tr_{}'.format(selection_id)], 'long_tr_{}'.format(selection_id)])\n","\n","\n","# ====== str to numbcol ====== #\n","nonstep_col_arr = strcol_tonumb(res_df, nonstep_col_list)\n","step_col_arr = strcol_tonumb(res_df, step_col_list)\n","step_col_arr2 = strcol_tonumb(res_df, step_col_list2)\n","stepmark_col_arr = strcol_tonumb(res_df, stepmark_col_list)\n","data_window_p1_col_arr = strcol_tonumb(res_df, data_window_p1_col_list)\n","data_window_p2_col_arr = strcol_tonumb(res_df, data_window_p2_col_list)\n","\n","col_idx_dict = \\\n","{\n","  \"ohlc_col_idxs\": get_col_idxs(res_df, ['open', 'high', 'low', 'close']),\n","  # \"vp_col_idxs\": get_col_idxs(res_df, ['close', 'volume']),\n","  # \"ohlc_col_idxs\": get_col_idxs(res_df, ['haopen', 'hahigh', 'halow', 'haclose']),  # heikin-ashi ver.\n","  \"nonstep_col_info\": nonstep_col_arr,\n","  \"step_col_info\": step_col_arr,\n","  \"step_col_info2\": step_col_arr2,\n","  \"stepmark_col_info\": stepmark_col_arr,\n","  \"data_window_p1_col_info\": data_window_p1_col_arr,\n","  \"data_window_p2_col_info\": data_window_p2_col_arr,\n","  \"ylim_col_idxs\": get_col_idxs(res_df, ['open', 'high', 'low', 'close', 'short_tp_1_{}'.format(selection_id), 'long_tp_1_{}'.format(selection_id), 'short_tp_0_{}'.format(selection_id), 'long_tp_0_{}'.format(selection_id)])  \n","}   \n","#   'wave_low_fill_{}{}'.format(wave_itv2, wave_period2), 'wave_high_fill_{}{}'.format(wave_itv2, wave_period2)\n","#   'dc_upper_H', 'dc_lower_H', 'dc_upper_15T', 'dc_lower_15T', 'short_out_{}'.format(selection_id), 'long_out_{}'.format(selection_id)\n","#   'wave_1_{}'.format(wave_itv2), 'wave_0_{}'.format(wave_itv2), 'dc_upper_15T', 'dc_lower_15T'"]},{"cell_type":"markdown","metadata":{"id":"XfvH5ngyieS9"},"source":["#### session_plot main"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"OCLMABZT1ojb","colab":{"base_uri":"https://localhost:8080/","height":1000,"output_embedded_package_id":"1_V1FftyWa9hu2r9IEGOI6B2x0loEsqAE"},"executionInfo":{"status":"ok","timestamp":1658805854597,"user_tz":-540,"elapsed":424482,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"cc40844a-fd86-4c0f-ab15-224f4381d167"},"outputs":[{"output_type":"display_data","data":{"text/plain":"Output hidden; open in https://colab.research.google.com to view."},"metadata":{}}],"source":["# p2_hlm 의 경우, tr 확인을 우해 session_plot 우선 실행 필요함\n","_ = [plot_check_v8(res_df, config, param_zip, pr_msg, x_max, x_margin_mult, y_margin_mult, back_plot, plot_check_dir, **col_idx_dict) for param_zip in zip(np_plot_params, np_plot_params[::-1])]"]},{"cell_type":"markdown","metadata":{"id":"sZAYhcdoXnm4"},"source":["### whole_plot"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"jjFziVVIhgSr"},"outputs":[],"source":["s_id = config.selection_id\n","\n","# ------------ make col_idx_dict config ------------ #\n","nonstep_col_list = []\n","step_col_list = []\n","stepmark_col_list = []\n","\n","# ============ nonstep_col_list - add info(col, alpha, color, linewidth) ============ #\n","# nonstep_col_list.append([['close'], 1, '#ffffff', 2])\n","\n","# ============ step_col_list - add info(col, alpha, color, linewidth) ============ #\n","# ------ htf_candle ------ #\n","hc_tf1 = '15T'\n","hc_tf2 = 'H'\n","hc_tf3 = '4H'\n","\n","step_col_list.append([['open_{}'.format(hc_tf1), 'close_{}'.format(hc_tf1)], 1, '#ffffff', 1])\n","step_col_list.append([['open_{}'.format(hc_tf2), 'close_{}'.format(hc_tf2)], 1, '#ffffff', 2])\n","# step_col_list.append([['open_{}'.format(hc_tf3), 'close_{}'.format(hc_tf3)], 1, '#ffffff', 4])\n","\n","# ------ resi_sup ------ #\n","# rs_tf = 'T'\n","# step_col_list.append([['resi_{}'.format(rs_tf), 'sup_{}'.format(rs_tf)], 1, '#ffeb3b', 1])\n","# step_col_list.append([['resi_out_{}'.format(rs_tf), 'sup_out_{}'.format(rs_tf)], 1, 'dodgerblue', 2])\n","\n","# ------ wave_range ------ #\n","wave_tf1 = config_list[0].tr_set.p1_itv1\n","wave_period1, wave_period2 = config_list[0].tr_set.p1_period1, config_list[0].tr_set.p1_period2\n","\n","# step_col_list.append([['dc_upper_{}{}'.format(wave_tf1, wave_period1), 'dc_lower_{}{}'.format(wave_tf1, wave_period1)], 1, '#ffeb3b', 1])\n","# step_col_list.append([['dc_upper_{}{}'.format(wave_tf1, wave_period2), 'dc_lower_{}{}'.format(wave_tf1, wave_period2)], 1, '#ffeb3b', 1])\n","\n","# step_col_list.append([['dc_upper_{}{}'.format(wave_tf2, wave_period2), 'dc_lower_{}{}'.format(wave_tf2, wave_period2)], 1, '#e65100', 2])\n","\n","# ------ dc ------ #\n","dc_tf1 = '5T'\n","dc_period1 = 20\n","dc_tf2 = 'H'\n","dc_period2 = 20\n","# step_col_list.append([['dc_upper_{}{}'.format(dc_tf1, dc_period1), 'dc_lower_{}{}'.format(dc_tf1, dc_period1)], 1, '#ffeb3b', 1]),  # inner\n","# step_col_list.append([['dc_base_{}{}'.format(dc_tf1, dc_period1)], 1, '#5b9cf6', 1])\n","step_col_list.append([['dc_upper_{}{}'.format(dc_tf2, dc_period2), 'dc_lower_{}{}'.format(dc_tf2, dc_period2)], 1, '#ff00ff', 4]),  # inner\n","step_col_list.append([['dc_base_{}{}'.format(dc_tf2, dc_period2)], 1, '#5b9cf6', 4])\n","\n","# ------ bb ------ #\n","bb_tf1 = 'T'\n","bb_period1 = 20\n","\n","# step_col_list.append([['bb_upper_{}{}'.format(bb_tf1, bb_period1), 'bb_lower_{}{}'.format(bb_tf1, bb_period1)], 1, '#ffffff', 1])\n","# step_col_list.append([['bb_base_{}{}'.format(bb_tf1, bb_period1)], 1, '#00ff00', 1])\n","\n","# step_col_list.append([['bb_upper_{}'.format(tf2), 'bb_lower_{}'.format(tf2)], 1, '#e91e63', 4])\n","\n","# ------ ema ------ #\n","# step_col_list.append([['ema_5T'], 1, '#03ed30', 2])\n","\n","# ============ stepmark_col_list - add info(col, alpha, color, linewidth) ============ #\n","# stepmark_col_list.append([['sar_T'], 1, 'dodgerblue', 7])\n","\n","\n","# ============ str to numbcol ============ #\n","nonstep_col_arr = strcol_tonumb(res_df, nonstep_col_list)\n","step_col_arr = strcol_tonumb(res_df, step_col_list)\n","stepmark_col_arr = strcol_tonumb(res_df, stepmark_col_list)\n","\n","col_idx_dict = \\\n","{\n","  \"ohlc_col_idxs\": get_col_idxs(res_df, ['open', 'high', 'low', 'close']),\n","  \"vp_col_idxs\": get_col_idxs(res_df, ['close', 'volume']),\n","  # \"ohlc_col_idxs\": get_col_idxs(res_df, ['haopen', 'hahigh', 'halow', 'haclose']),  # heikin-ashi ver.\n","  \"nonstep_col_info\": nonstep_col_arr,\n","  \"step_col_info\": step_col_arr,\n","  \"stepmark_col_info\": stepmark_col_arr,\n","  \"ylim_col_idxs\": get_col_idxs(res_df, ['open', 'high', 'low', 'close', 'dc_upper_15T4', 'dc_lower_15T4'])  # , 'dc_upper_H', 'dc_lower_H', 'dc_upper_15T', 'dc_lower_15T', 'short_out_{}'.format(selection_id), 'long_out_{}'.format(selection_id)\n","}   # , 'wave_1_{}'.format(wave_tf2), 'wave_0_{}'.format(wave_tf2), 'dc_upper_15T', 'dc_lower_15T'"]},{"cell_type":"markdown","metadata":{"id":"50HXDIdJij28"},"source":["#### whole_plot main"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"-tbLsXN9eN2p"},"outputs":[],"source":["plot_op_idx_nums = 10\n","\n","win_idxs = (pr_ > 1).ravel()  # [-plot_op_idx_nums:]\n","selected_op_idxs = obj_[4].ravel().astype(int)  # [-plot_op_idx_nums:]\n","selected_ex_idxs = obj_[3].ravel().astype(int)  # [-plot_op_idx_nums:]\n","\n","len_idxs = len(win_idxs)\n","print(\"len_idxs :\", len_idxs)\n","\n","split_range = np.arange(plot_op_idx_nums, len_idxs, plot_op_idx_nums)\n","win_idxs_list = np.split(win_idxs, split_range, axis=0)\n","selected_op_idxs_list = np.split(selected_op_idxs, split_range, axis=0)\n","selected_ex_idxs_list = np.split(selected_ex_idxs, split_range, axis=0)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"FtILHO-4kVlO"},"outputs":[],"source":["_ = [whole_plot_check(np_df, a, b, c, plot_check_dir=None, **col_idx_dict) for a, b, c in zip(win_idxs_list, selected_op_idxs_list, selected_ex_idxs_list)]"]},{"cell_type":"markdown","metadata":{"id":"iTW2ZuX61ojg"},"source":["### plot_funcs"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"0l6joTK_1ojh"},"outputs":[],"source":["def whole_plot_check(data, win_idxs, selected_op_idxs, selected_ex_idxs, plot_check_dir=None, **col_idx_dict):\n","  # start_0 = time.time()\n","  plt.style.use(['dark_background', 'fast'])\n","  fig = plt.figure(figsize=(30, 12))\n","  nrows, ncols = 1, 1\n","  gs = gridspec.GridSpec(nrows=nrows,  # row 부터 index 채우고 col 채우는 순서임 (gs_idx)\n","                          ncols=ncols,\n","                          #height_ratios=[31, 1]\n","                          )\n","\n","  ax = fig.add_subplot(gs[0])\n","\n","  # ------------ add_col section ------------ #\n","  a_data = data[selected_op_idxs[0]:selected_op_idxs[-1] + 1]\n","\n","  plot_op_idxs = selected_op_idxs - selected_op_idxs[0]  \n","  plot_win_op_idxs = plot_op_idxs[win_idxs]\n","  plot_loss_op_idxs = plot_op_idxs[~win_idxs]\n","\n","  plot_ex_idxs = selected_ex_idxs - selected_op_idxs[0]\n","  plot_win_ex_idxs = plot_ex_idxs[win_idxs]\n","  plot_loss_ex_idxs = plot_ex_idxs[~win_idxs]\n","\n","\n","  # ------ add cols ------ #\n","  [nonstep_col_plot(a_data[:, params[0]], *params[1:]) for params in col_idx_dict['nonstep_col_info']]\n","  [step_col_plot(a_data[:, params[0]], *params[1:]) for params in col_idx_dict['step_col_info']]\n","  [stepmark_col_plot(a_data[:, params[0]], *params[1:]) for params in col_idx_dict['stepmark_col_info']]\n","\n","  # [plt.axvline(op_idx, color='#00ff00') for op_idx in plot_win_op_idxs]\n","  # [plt.axvline(op_idx, color='#ff0000') for op_idx in plot_loss_op_idxs]\n","  [plt.axvspan(op_idx, ex_idx, alpha=0.5, color='#00ff00') for op_idx, ex_idx in zip(plot_win_op_idxs, plot_win_ex_idxs)]\n","  [plt.axvspan(op_idx, ex_idx, alpha=0.5, color='#ff0000') for op_idx, ex_idx in zip(plot_loss_op_idxs, plot_loss_ex_idxs)]\n","  \n","  plt.show()\n","\n","  if plot_check_dir is None:\n","    plt.show()\n","    print()\n","  else:\n","    fig_name = plot_check_dir + \"/whole_plot_{}.png\".format(selected_op_idxs[0])\n","    plt.savefig(fig_name)\n","    print(fig_name, \"saved !\")\n","  plt.close()\n","  # print(\"elapsed time :\", time.time() - start_0)\n","\n","  return\n","\n","def plot_check_v8(res_df, config, param_zip, pr_msg, x_max, x_margin_mult, y_margin_mult, back_plot, plot_check_dir=None, **col_idx_dict):\n","  # start_0 = time.time()\n","  plt.style.use(['dark_background', 'fast'])\n","  fig = plt.figure(figsize=(30, 18))\n","  nrows, ncols = 2, 2\n","  gs = gridspec.GridSpec(nrows=nrows,  # row 부터 index 채우고 col 채우는 순서임 (gs_idx)\n","                         ncols=ncols,\n","                         height_ratios=[3, 1]\n","                         )\n","  for gs_idx, params in enumerate(param_zip):\n","\n","    iin, iout, pr, en_p, ex_p, entry_idx, exit_idx, p1_idx, p2_idx, lvrg, fee, tp_line, out_line, tp_1, tp_0, out_1, out_0, ep2_0 = params\n","\n","    # print(\"en_p, ex_p :\", en_p, ex_p)\n","    # print(\"tp_line, out_line, ep2_0 :\", tp_line, out_line, ep2_0)\n","\n","    # temporary\n","    # if exit_idx - p1_idx < 50:\n","    # if exit_idx != entry_idx:\n","    # print(\"p1_idx :\", p1_idx)\n","    # if p1_idx != 370259:\n","    #   break\n","\n","    # ============ define ax1 & ax2 ============ #\n","    ax1 = fig.add_subplot(gs[gs_idx])\n","    ax2 = fig.add_subplot(gs[gs_idx + 2])\n","\n","    # ------ date range ------ #\n","    if back_plot == 0:\n","      iout = iin + x_max\n","      # print(\"iin, iout :\", iin, iout)\n","\n","    a_data = res_df.iloc[int(iin):int(iout + 1)].to_numpy()\n","    # a_data = data[iin:iout]\n","\n","    # ------------ add_col section ------------ #\n","    # ------ candles ------ #\n","    candle_plot_v2(ax1, a_data[:, col_idx_dict['ohlc_col_idxs']], alpha=1.0, wickwidth=1.0)\n","\n","    # ------ add cols ------ #\n","    [nonstep_col_plot_v2(ax1, a_data[:, params_[0]], *params_[1:]) for params_ in col_idx_dict['nonstep_col_info']]\n","    [step_col_plot_v2(ax1, a_data[:, params_[0]], *params_[1:]) for params_ in col_idx_dict['step_col_info']]\n","    [stepmark_col_plot_v2(ax1, a_data[:, params_[0]], *params_[1:]) for params_ in col_idx_dict['stepmark_col_info']]\n","\n","    [step_col_plot_v2(ax2, a_data[:, params_[0]], *params_[1:]) for params_ in col_idx_dict['step_col_info2']]\n","\n","    # ------ ep, tp + xlim ------ #\n","    try:\n","      eptp_hvline_v8(ax1, ax2, config, *params, back_plot, x_max, x_margin_mult, y_margin_mult, a_data, **col_idx_dict)\n","    except Exception as e:\n","      print(\"error in eptp_hvline :\", e)\n","\n","    #     Todo    #\n","    #     3. outer_price plot 일 경우, gs_idx + nrows 하면 됨\n","\n","    # ------ trade_info ------ #\n","    data_msg_list = [\"\\n {} : {:.3f}\".format(*params_[1:], *res_df.iloc[int(p1_idx), params_[0]]) for params_ in col_idx_dict['data_window_p1_col_info']]  # * for unsupported format for arr\n","    data_msg_list += [\"\\n {} : {:.3f}\".format(*params_[1:], *res_df.iloc[int(p2_idx), params_[0]]) for params_ in col_idx_dict['data_window_p2_col_info']]\n","    ps_msg_expand = pr_msg.format(p1_idx, exit_idx, pr, lvrg, fee) + ''.join(data_msg_list)\n","    \n","    ax1.set_title(ps_msg_expand)   # set_title on ax1\n","\n","  if plot_check_dir is None:\n","    plt.show()\n","    print()\n","  else:\n","    fig_name = plot_check_dir + \"/{}.png\".format(int(entry_idx))\n","    plt.savefig(fig_name)\n","    print(fig_name, \"saved !\")\n","  plt.close()\n","  # print(\"elapsed time :\", time.time() - start_0)\n","\n","  return\n","\n","def eptp_hvline_v8(ax1, ax2, config, iin, iout, pr, en_p, ex_p, entry_idx, exit_idx, p1_idx, p2_idx, lvrg, fee, tp_line, out_line, tp_1, tp_0, out_1, out_0, ep2_0,\n","                   back_plot, x_max, x_margin_mult, y_margin_mult, a_data, **col_idx_dict):\n","  # ------ get vertical ticks ------ #\n","  entry_tick = int(entry_idx - iin)\n","  exit_tick = entry_tick + int(exit_idx - entry_idx)\n","  p1_tick = entry_tick - int(entry_idx - p1_idx)\n","  p2_tick = p1_tick + int(p2_idx - p1_idx)\n","  bias_info_tick = entry_tick + config.tr_set.bias_info_tick\n","\n","  if back_plot == 1:\n","    x_max = p1_tick + 20\n","  elif back_plot == 2:\n","    x_max = p2_tick + 20 \n","  elif back_plot == 3:\n","    x_max = entry_tick + 20 \n","  elif back_plot == 4:\n","    x_max = exit_tick + 20\n","  elif back_plot == 5:\n","    x_max = bias_info_tick + 20\n","\n","  # ============ xlim ============ #\n","  if (iout - iin) > x_max:\n","    x_margin = x_max * x_margin_mult\n","    ax1.set_xlim(0 - x_margin, x_max + x_margin)\n","    ax2.set_xlim(0 - x_margin, x_max + x_margin)\n","  x0, x1 = ax1.get_xlim()\n","\n","  # ============ hlines ============ #\n","  # ------------ ax1 ------------ #\n","  # ------ entry & exit ------ #\n","  en_xmin = entry_tick / x1\n","  ex_xmin = exit_tick / x1\n","  ax1.axhline(en_p, x0, en_xmin, linewidth=2, linestyle='--', alpha=1, color='lime')  # en_p line axhline\n","  if config.tr_set.check_hlm in [0, 1]:\n","    ax1.text(x0, en_p, 'en_p :\\n {:.3f} \\n epg1 {}'.format(en_p, config.tr_set.ep_gap1), ha='right', va='center', fontweight='bold', fontsize=15)  # en_p line label\n","  else:\n","    ax1.text(x0, en_p, 'en_p :\\n {:.3f} \\n epg2 {}'.format(en_p, config.tr_set.ep_gap2), ha='right', va='center', fontweight='bold', fontsize=15)  # en_p line label\n","  ax1.axhline(ex_p, ex_xmin, 1, linewidth=2, linestyle='--', alpha=1, color='lime')  # ex_p line axhline (signal 도 포괄함, 존재 의미)\n","  ax1.text(x1, ex_p, 'ex_p :\\n {}'.format(ex_p), ha='left', va='center', fontweight='bold', fontsize=15)  # ex_p line label\n","\n","  # ------ tpout_line ------ #\n","  ax1.axhline(tp_line, 0.05, 1, linewidth=2, linestyle='-', alpha=1, color='#00ff00')  # ep 와 gap 비교 용이하기 위해 ex_xmin -> 0.1 사용\n","  ax1.text(x0, tp_line, 'tpg {}'.format(config.tr_set.tp_gap), ha='right', va='center', fontweight='bold', fontsize=15, color='#00ff00')\n","  ax1.axhline(out_line, 0.05, 1, linewidth=2, linestyle='-', alpha=1, color='#ff0000')\n","  ax1.text(x0, out_line, 'outg {}'.format(config.tr_set.out_gap), ha='right', va='center', fontweight='bold', fontsize=15, color='#ff0000')\n","\n","  # ------ tp_box ------ #\n","  text_x_pos = (x0 + x1) * 0.1\n","  ax1.axhline(tp_1, 0.2, 1, linewidth=4, linestyle='-', alpha=1, color='#ffffff')\n","  ax1.text(text_x_pos, tp_1, ' tp_1', ha='right', va='bottom', fontweight='bold', fontsize=15)\n","  ax1.axhline(tp_0, 0.2, 1, linewidth=4, linestyle='-', alpha=1, color='#ffffff')\n","  ax1.text(text_x_pos, tp_0, ' tp_0', ha='right', va='bottom', fontweight='bold', fontsize=15)  \n","\n","  # ------ out_box ------ #\n","  # text_x_pos = (x0 + x1) * 0.1\n","  ax1.axhline(out_1, 0.2, 1, linewidth=2, linestyle='-', alpha=1, color='#ffffff')\n","  ax1.text(text_x_pos, out_1, ' out_1', ha='right', va='bottom', fontweight='bold', fontsize=15)\n","  ax1.axhline(out_0, 0.2, 1, linewidth=2, linestyle='-', alpha=1, color='#ffffff')\n","  ax1.text(text_x_pos, out_0, ' out_0', ha='right', va='bottom', fontweight='bold', fontsize=15)  \n","  # ------ ep_box ------ #\n","  # text_x_pos = (x0 + x1) * 0.1\n","  ax1.axhline(ep2_0, 0.2, 1, linewidth=1, linestyle='-', alpha=1, color='#ffffff')\n","  ax1.text(text_x_pos, ep2_0, ' ep2_0', ha='right', va='bottom', fontweight='bold', fontsize=15)\n","\n","  # ------------ ax2 ------------ #\n","  # ------ cci_band ------ #\n","  ax2.axhline(100, color=\"#ffffff\")\n","  ax2.axhline(-100, color=\"#ffffff\")\n","\n","  # ------ stoch_band ------ #\n","  # ax2.axhline(67, color=\"#ffffff\")\n","  # ax2.axhline(33, color=\"#ffffff\")\n","  \n","  # ax2.axhline(0, color=\"#ffffff\")\n","\n","  # ============ ylim ============ # - ax1 only\n","  if back_plot:\n","    y_lim_data = a_data[:x_max + 1, col_idx_dict['ylim_col_idxs']]  # +1 for including p1_tick\n","  else:\n","    y_lim_data = a_data[:, col_idx_dict['ylim_col_idxs']]\n","  \n","  y_min = y_lim_data.min()\n","  y_max = y_lim_data.max()\n","  y_margin = (y_max - y_min) * y_margin_mult\n","  ax1.set_ylim(y_min - y_margin, y_max + y_margin)\n","\n","  # ============ vline (p1_tick, entry_tick, exit_tick) ============ # - add p1_tick on ax2\n","  y0, y1 = ax1.get_ylim()\n","  low_data = a_data[:exit_tick + 1, col_idx_dict['ohlc_col_idxs'][2]]  # +1 for including exit_tick\n","  p2_ymax, en_ymax, ex_ymax = [(low_data[tick_] - y0) / (y1 - y0) - .01 for tick_ in [p2_tick, entry_tick, exit_tick]]  # -.05 for margin\n","  if p1_tick > 0:\n","    p1_ymax = (low_data[p1_tick] - y0) / (y1 - y0) - .01\n","    ax1.axvline(p1_tick, 0, p1_ymax, alpha=1, linewidth=2, linestyle='--', color='#ff0000')  # 추후, tick 별 세부 정의가 달라질 수 있음을 고려해 multi_line 작성 유지\n","    ax2.axvline(p1_tick, 0, 1, alpha=1, linewidth=2, linestyle='--', color='#ff0000')\n","  ax1.axvline(p2_tick, 0, p2_ymax, alpha=1, linewidth=2, linestyle='--', color='#2196f3')\n","  ax1.axvline(entry_tick, 0, en_ymax, alpha=1, linewidth=2, linestyle='--', color='#ffeb3b')\n","  ax1.axvline(exit_tick, 0, ex_ymax, alpha=1, linewidth=2, linestyle='--', color='#ffeb3b')\n","  ax2.axvline(p2_tick, 0, 1, alpha=1, linewidth=2, linestyle='--', color='#2196f3')\n","  ax2.axvline(entry_tick, 0, 1, alpha=1, linewidth=2, linestyle='--', color='#ffeb3b')\n","  ax2.axvline(exit_tick, 0, 1, alpha=1, linewidth=2, linestyle='--', color='#ffeb3b')\n","  if back_plot == 5:\n","    ax1.axvline(bias_info_tick, alpha=1, linewidth=2, linestyle='-', color='#ffeb3b')\n","\n","  return"]},{"cell_type":"markdown","metadata":{"id":"8soVNGFt1ojj"},"source":["#### legacy"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"narSQRCz1ojj"},"outputs":[],"source":["_ = [plot_check_v4(np_df, config, param_zip, pr_msg, x_max, x_margin_mult, y_margin_mult, front_plot, plot_check_dir, 500, 0.07, 100, **col_idx_dict) for param_zip in zip(np_plot_params, np_plot_params[::-1])]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"kLiEIiMW1ojk"},"outputs":[],"source":["def plot_check_v4(data, config, param_zip, pr_msg, x_max, x_margin_mult, y_margin_mult, front_plot, plot_check_dir=None, vp_range=500, kde_factor=0.05, num_samples=100, **col_idx_dict):\n","  # start_0 = time.time()\n","  plt.style.use(['dark_background', 'fast'])\n","  fig = plt.figure(figsize=(30, 18))\n","  nrows, ncols = 2, 2\n","  gs = gridspec.GridSpec(nrows=nrows,  # row 부터 index 채우고 col 채우는 순서임 (gs_idx)\n","                         ncols=ncols,\n","                         height_ratios=[3, 1]\n","                         )\n","  for gs_idx, params in enumerate(param_zip):\n","    ax = fig.add_subplot(gs[gs_idx])\n","    iin, iout, pr, ep, tp, entry_idx, exit_idx, open_idx, lvrg, fee, tp_line, out_line, bias_info, bias_thresh = params\n","\n","    # ------------ add_col section ------------ #\n","    iin, iout = int(iin), int(iout)\n","    a_data = data[iin:iout]\n","    # ------ candles ------ #\n","    candle_plot(a_data[:, col_idx_dict['ohlc_col_idxs']], ax, alpha=1.0, wickwidth=1.0)\n","    \n","    # ------ add cols ------ #\n","    [nonstep_col_plot(a_data[:, params[0]], *params[1:]) for params in col_idx_dict['nonstep_col_info']]\n","    [step_col_plot(a_data[:, params[0]], *params[1:]) for params in col_idx_dict['step_col_info']]\n","    [stepmark_col_plot(a_data[:, params[0]], *params[1:]) for params in col_idx_dict['stepmark_col_info']]\n","\n","    # vp_data = data[iin - vp_range:iin, col_idx_dict['vp_col_idxs']]\n","    # vp_info = [vp_range, vp_data[:, 0], vp_data[:, 1], kde_factor, num_samples]\n","    vp_data = data[iin - vp_range:iin, col_idx_dict['vp_col_idxs']].T\n","    vp_info = [vp_range, *vp_data, kde_factor, num_samples]\n","\n","    # ------ ep, tp + xlim ------ #\n","    eptp_hvline_v4(config, ep, tp, entry_idx, exit_idx, open_idx, tp_line, out_line, bias_info, bias_thresh, \n","                   front_plot, iin, iout, x_max, x_margin_mult, y_margin_mult, a_data, vp_info, **col_idx_dict)        \n","\n","    #     Todo    #\n","    #     3. outer_price plot 일 경우, gs_idx + nrows 하면 됨\n","\n","    # ------ trade_info ------ #\n","    plt.title(pr_msg.format(entry_idx, exit_idx, pr, lvrg, fee))\n","\n","  if plot_check_dir is None:\n","    plt.show()\n","    print()\n","  else:\n","    fig_name = plot_check_dir +  \"/%s.png\" % int(entry_idx)\n","    plt.savefig(fig_name)\n","    print(fig_name, \"saved !\")\n","  plt.close()\n","  # print(\"elapsed time :\", time.time() - start_0)  \n","\n","  return\n","\n","def eptp_hvline_v4(config, en_p, ex_p, entry_idx, exit_idx, open_idx, tp_line, out_line, bias_info, bias_thresh, \n","                   front_plot, iin, iout, x_max, x_margin_mult, y_margin_mult, a_data, vp_info, **col_idx_dict):\n","  # ------ get vertical ticks ------ #\n","  entry_tick = int(entry_idx - iin)\n","  open_tick = entry_tick - int(entry_idx - open_idx)\n","  exit_tick = entry_tick + int(exit_idx - entry_idx)\n","\n","  if front_plot == 1:\n","    x_max = open_tick\n","  elif front_plot == 2:\n","    x_max = entry_tick\n","  if (iout - iin) > x_max:\n","    x_margin = x_max * x_margin_mult\n","    plt.xlim(0 - x_margin, x_max + x_margin)\n","  x0, x1 = plt.gca().get_xlim()\n","  # ------------ hlines ------------ #\n","  # ------ entry & exit ------ #\n","  en_xmin = entry_tick / x1\n","  ex_xmin = exit_tick / x1\n","  plt.axhline(en_p, x0, en_xmin, linewidth=2, linestyle='--', alpha=1, color='lime')  # en_p line axhline\n","  plt.text(x0, en_p, ' en_p :\\n {}'.format(en_p), ha='right', va='center', fontweight='bold')  # en_p line label\n","  plt.axhline(ex_p, ex_xmin, 1, linewidth=2, linestyle='--', alpha=1, color='lime')  # ex_p line axhline (signal 도 포괄함, 존재 의미)\n","  plt.text(x1, ex_p, ' ex_p :\\n {}'.format(ex_p), ha='left', va='center', fontweight='bold')  # ex_p line label\n","\n","  # ------ tpout_line ------ #\n","  plt.axhline(tp_line, 0.1, 1, linewidth=4, linestyle='-', alpha=1, color='#00ff00')  # ep 와 gap 비교 용이하기 위해 ex_xmin -> 0.1 사용\n","  plt.text(x0, tp_line, ' %s' % config.tr_set.tp_gap, ha='left', va='center', fontweight='bold')\n","  plt.axhline(out_line, 0.1, 1, linewidth=4, linestyle='-', alpha=1, color='#ff0000')\n","  plt.text(x0, out_line, ' %s' % config.tr_set.out_gap, ha='left', va='center', fontweight='bold')\n","\n","  # ------ bias_line ------ #\n","  plt.axhline(bias_info, 0.1, 1, linewidth=4, linestyle='-', alpha=1, color='dodgerblue')\n","  plt.text(x0, bias_info, ' bias_info', ha='left', va='center', fontweight='bold')\n","  plt.axhline(bias_thresh, 0.1, 1, linewidth=4, linestyle='-', alpha=1, color='#ff8400')\n","  plt.text(x0, bias_thresh, ' bias_thresh', ha='left', va='center', fontweight='bold')\n","\n","  # ------ volume profile ------ #\n","  vp_range, close, volume, kde_factor, num_samples = vp_info\n","  if iin >= vp_range:\n","    start_0 = time.time()\n","    kde = stats.gaussian_kde(close, weights=volume, bw_method=kde_factor)\n","    kdx = np.linspace(close.min(), close.max(), num_samples)\n","    kdy = kde(kdx)\n","    print(\"kde elapsed_time :\", time.time() - start_0)\n","\n","    kdy_max = kdy.max()\n","    # peaks,_ = signal.find_peaks(kdy)\n","    peaks,_ = signal.find_peaks(kdy, prominence=kdy_max * 0.3)\n","    peak_list = kdx[peaks]   # peak_list\n","    [plt.axhline(peak, linewidth=6, linestyle='-', alpha=1, color='white') for peak in peak_list]\n","    \n","    kdy_ratio = entry_tick / kdy_max # 30 / 0.0001\n","    plt.plot(kdy * kdy_ratio, kdx, color='white')\n","    # plt.plot(pky, pkx, 'bo', color='yellow')\n","\n","  # ------ ylim ------ #\n","  if front_plot:\n","    y_lim_data = a_data[:x_max + 1, col_idx_dict['ylim_col_idxs']]  # +1 for including open_tick\n","  else:\n","    y_lim_data = a_data[:, col_idx_dict['ylim_col_idxs']]\n","  y_min = y_lim_data.min()\n","  y_max = y_lim_data.max()\n","  y_margin = (y_max - y_min) * y_margin_mult\n","  # plt.ylim(y_min - y_margin, y_max + y_margin)\n","\n","  # ------------ vline (open_tick, entry_tick, exit_tick) ------------ #\n","  y0, y1 = plt.gca().get_ylim()\n","  l_data = a_data[:exit_tick + 1, col_idx_dict['ohlc_col_idxs'][2]]  # +1 for including exit_tick\n","  open_ymax, en_ymax, ex_ymax = [(l_data[tick_] - y0) / (y1 - y0) - .01 for tick_ in [open_tick, entry_tick, exit_tick]]  # -.05 for margin\n","  plt.axvline(open_tick, 0, open_ymax, alpha=1, linewidth=2, linestyle='--', color='#ffeb3b')  # 추후, tick 별 세부 정의가 달라질 수 있음을 고려해 multi_line 작성 유지\n","  plt.axvline(entry_tick, 0, en_ymax, alpha=1, linewidth=2, linestyle='--', color='#ffeb3b')\n","  plt.axvline(exit_tick, 0, ex_ymax, alpha=1, linewidth=2, linestyle='--', color='#ffeb3b')\n","\n","  return"]},{"cell_type":"markdown","metadata":{"id":"ddL_BC24buq0"},"source":["### dump"]},{"cell_type":"markdown","metadata":{"id":"zgTrEWWqbwsT"},"source":["#### whole_plot thing"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"M4zn8wxibzAR"},"outputs":[],"source":["fig = go.Figure(data=[go.Candlestick(x=t_df.index,\n","                open=t_df.open,\n","                high=t_df.high,\n","                low=t_df.low,\n","                close=t_df.close)])\n","\n","fig.show()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"4IhBjPMobzAS"},"outputs":[],"source":["cf.go_offline()\n","init_notebook_mode()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"n9WZkE9wbzAS"},"outputs":[],"source":["qf = cf.QuantFig(t_df, title=\"Apple's stock price in 2021\", name='AAPL')\n","qf.iplot()"]},{"cell_type":"markdown","metadata":{"id":"zmYbP-Gc1ojs"},"source":["#### brief np_pr survey"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"82a8Km8z1ojs"},"outputs":[],"source":["# plot_pr_list[:100]\n","plt.plot(np_pr)\n","plt.axhline(1)\n","plt.show()"]},{"cell_type":"markdown","metadata":{"id":"5rdQZm_71ojv"},"source":["#### plot indi. legacy"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"u11r-dU91ojw"},"outputs":[],"source":["\n","  # ---------------------- ma ---------------------- #\n","   # --------- ema --------- #\n","  # alpha = 1\n","  # for sm_i, item in enumerate(ema_list):\n","  #   if sm_i > 0:\n","  #     lw = 5\n","  #   else:\n","  #     lw = 2\n","  #   plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#03ed30', linewidth=lw)\n","  #   alpha -= 0.2\n","\n","  #   # --------- sma --------- #\n","  # alpha = 1\n","  # for sm_i, sma in enumerate(sma_list):\n","  #   if sm_i > 0:\n","  #     lw = 5\n","  #   else:\n","  #     lw = 4\n","  #   plt.step(np.arange(len(plot_df)), plot_df[sma].values, alpha=alpha, color='#e91e63', linewidth=lw)\n","  #   alpha -= 0.2\n","\n","  \n","  # ---------------------- cb ---------------------- #\n","  # alpha = 1\n","  # for sm_i, item in enumerate(cb_list):\n","  #   if sm_i > 0:\n","  #     lw = 5\n","  #   else:\n","  #     lw = 2\n","  #   plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#5b9cf6', linewidth=lw)\n","  #   alpha -= 0.2\n","\n","\n","  \n","  # ---------------------- sar ---------------------- #\n","  # alpha = 1\n","  # markersize = 5\n","  # for sar in sar_list:\n","  #   plt.step(plot_df[sar].values, 'c*', alpha=alpha, markersize=markersize, color='dodgerblue')  # sar mic\n","  #   markersize += 1\n","  #   alpha -= 0.1\n","\n","  # plt.step(plot_df.values[:, [12]], 'co', alpha=1, markersize=7)  # sar mac\n","\n","  #               cloud               #\n","  # alpha = 0.7\n","  # for senkoua, senkoub in zip(senkoua_list, senkoub_list):\n","  #   plt.fill_between(np.arange(len(plot_df)), plot_df[senkoua].values, plot_df[senkoub].values, # ichimoku\n","  #                     where=plot_df[senkoua].values >= plot_df[senkoub].values, facecolor='g', alpha=alpha) # ichimoku\n","  #   plt.fill_between(np.arange(len(plot_df)), plot_df[senkoua].values, plot_df[senkoub].values,\n","  #                     where=plot_df[senkoua].values <= plot_df[senkoub].values, facecolor='r', alpha=alpha)  \n","  #   alpha -= 0.05\n","  \n","\n","\n","  # ---------------------- outer price indi. ---------------------- #\n","  #           macd          #\n","  # plt.subplot(312)\n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for macd in macd_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[macd].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","\n","  # plt.axhline(0, linestyle='--')\n","\n","  \n","  # #           trix          #  \n","  # # plt.subplot(313)\n","  # plt.subplot(gs[2])\n","  # alpha = 1\n","  # for trix in trix_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[trix].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","  # plt.axhline(0, linestyle='--')\n","\n","  \n","  #           fisher          #  \n","  # plt.subplot(313)\n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for fisher in fisher_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[fisher].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","    \n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","\n","  # plt.axhline(0, linestyle='--')\n","  # plt.axhline(fisher_upper, linestyle='--')\n","  # plt.axhline(fisher_lower, linestyle='--')\n","\n","  #           stoch          #  \n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for stoch_ in stoch_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[stoch_].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axhline(50, linestyle='--')\n","  # plt.axhline(stoch_upper, linestyle='--')\n","  # plt.axhline(stoch_lower, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","\n","  # ---------- cctbbo ---------- #  \n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for cctbbo in cctbbo_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[cctbbo].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axhline(50, linestyle='--')\n","  # plt.axhline(cctbbo_upper, linestyle='--')\n","  # plt.axhline(cctbbo_lower, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","\n","  # ---------- ema_roc ---------- #  \n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for emaroc in emaroc_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[emaroc].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","  # plt.axhline(0, linestyle='--')\n","  \n","  # ---------- bbw ---------- #  \n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for bbwp_ in bbwp_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[bbwp_].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","  # plt.axhline(bbwp_thresh, linestyle='--')\n","\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","\n"]},{"cell_type":"markdown","metadata":{"id":"tApzvz_gK9lR"},"source":["## legacy"]},{"cell_type":"markdown","metadata":{"id":"OJqkmkpsLCYC"},"source":["### tr_tresh calc"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"gcpo4MGd9Wm4"},"outputs":[],"source":["res_wr = 0.6\n","# tr_thresh = 1\n","# tr_thresh = ((1 - res_wr) / res_wr) ** 0.5\n","tr_thresh = ((1 - res_wr) / res_wr) + 0.01\n","# tr_thresh = 2.6\n","print(\"res_wr :\", res_wr)\n","print(\"tr_thresh :\", tr_thresh)\n","\n","\n","#   단리    #\n","trade_num = 1000\n","asset = 1 # thousand USDT\n","test_loss_gap = 0.95  # fee adjusted\n","test_pr_gap = 1 + (1 - test_loss_gap) * tr_thresh\n","\n","test_loss_cnt = trade_num * (1 - res_wr)\n","test_pr_cnt = trade_num * res_wr\n","\n","test_trade_list = [test_pr_gap] * int(test_pr_cnt) + [test_loss_gap] * int(test_loss_cnt)\n","random.shuffle(test_trade_list)\n","# print(\"len(test_trade_list) :\", len(test_trade_list))\n","print(test_trade_list[:10])\n","print()\n","\n","# print(\"%.5f\" % np.cumprod(test_trade_list)[-1])\n","for tr_thresh_ in np.arange(1, 3, 0.2):\n","  if (1 + (1 - test_loss_gap) * tr_thresh_) ** test_pr_cnt * test_loss_gap ** test_loss_cnt > 1:\n","    break\n","print(\"복리를 위한 tr_thresh_ :\", tr_thresh_)\n","# print(\"tr_thresh :\", tr_thresh)\n","print(\"np.cumprod(test_trade_list)[-1] :\", np.cumprod(test_trade_list)[-1])\n","print(\"total_pr : \", np.cumprod(test_trade_list)[-1])\n","print()\n","#   복리 tr_thresh  #\n","#   1. trade_num 에 영향 받지 않음\n","#   2. loss_gap 에 비례함\n","\n","for tr_thresh_ in np.arange(1, 3, 0.01):\n","  if ((1 - test_loss_gap) * tr_thresh_) * test_pr_cnt + (test_loss_gap - 1) * test_loss_cnt > 0:\n","    break\n","np_test_trade = np.array(test_trade_list) - 1\n","print(np_test_trade[:10])\n","# print(\"%.3f\" % )\n","print(\"단리를 위한 tr_thresh_ :\", tr_thresh_)\n","# print(\"tr_thresh :\", tr_thresh)\n","print(\"np.cumsum(np_test_trade)[-1] :\", np.cumsum(np_test_trade)[-1])\n","print(\"total_pr : \", 1 + np.cumsum(np_test_trade)[-1])\n"]}],"metadata":{"accelerator":"GPU","colab":{"collapsed_sections":["Ic1mfmwWCIBu","x2yj2SwAXDLp","14chOHeXh6JD","EOXQbXixiQcK","RZJ6uIA_VcJs","xpyP5t8Ht_pE","MuD_2vY7TI_8","tOFkzUX2imQu","983aUwM76s6X","_blyFhQJUd5X"],"name":"stem5_48_vec_backi2(0721).ipynb","provenance":[],"toc_visible":true,"authorship_tag":"ABX9TyM7gTF1hh7qBCR1t3UpkTsM"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}