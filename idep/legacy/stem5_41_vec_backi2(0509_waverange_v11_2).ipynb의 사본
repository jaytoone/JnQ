{"cells":[{"cell_type":"code","execution_count":1,"metadata":{"id":"6rmQpzEGXfCw","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1652257469303,"user_tz":-540,"elapsed":21075,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"c7d725cd-85dd-4fe9-d638-a0095fda919b"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')\n","\n","import os, sys\n","\n","current_path = '/content/drive/My Drive/Colab Notebooks/JnQ/'\n","\n","os.chdir(current_path)\n","\n","strat_pkg = 'IDE'\n","\n","mpl_finance_path = '/content/drive/My Drive/Colab Notebooks/JnQ/mpl_finance'\n","ta_lib_path = '/content/drive/My Drive/Colab Notebooks/JnQ/ta_lib'\n","\n","if mpl_finance_path not in sys.path:\n","\n","  try:\n","    sys.path.insert(0, '/content/drive/My Drive/Colab Notebooks/JnQ')\n","    sys.path.insert(0, '/content/drive/My Drive/Colab Notebooks/JnQ/{}'.format(strat_pkg))\n","    sys.path.insert(0, '/content/drive/My Drive/Colab Notebooks/JnQ/funcs')\n","    sys.path.insert(0, mpl_finance_path)\n","    sys.path.insert(0, ta_lib_path)\n","    \n","  except Exception as e:\n","    print(e)"]},{"cell_type":"markdown","metadata":{"id":"8uqYv5StTazo"},"source":["# requirements"]},{"cell_type":"code","execution_count":2,"metadata":{"id":"9qGt60DKTZmf","executionInfo":{"status":"ok","timestamp":1652257496920,"user_tz":-540,"elapsed":8720,"user":{"displayName":"7th June","userId":"08178289703395036410"}}},"outputs":[],"source":["# !pip install zigzag --target=$'/content/drive/My Drive/Colab Notebooks/JnQ/zigzag'\n","# !pip install talib-binary --target=$'/content/drive/My Drive/Colab Notebooks/JnQ/ta_lib'\n","# !pip install findiff\n","\n","# import nvstrings, nvcategory, cudf\n","# import cuml\n","# import cudf\n","\n","import os\n","import talib\n","from funcs.funcs_idep import *\n","from funcs.funcs_duration_v2 import *\n","from funcs.funcs_plot_check import *\n","from funcs.funcs_pairing import *\n","# from funcs.funcs_ide import *\n","# from funcs.funcs_indicator_candlescore import *\n","from funcs.funcs_indicator import *\n","from funcs.funcs_trader import *\n","from ast import literal_eval\n","import logging\n","import importlib\n","\n","import mpl_finance as mf\n","import matplotlib.pyplot as plt\n","from matplotlib import gridspec\n","# from zigzag import *\n","# from tqdm.notebook import tqdm\n","\n","import IPython\n","import IPython.display\n","\n","import numpy as np\n","# import jax.numpy as np\n","import pandas as pd\n","# import seaborn as sns\n","# import tensorflow as tf\n","from scipy import stats, signal\n","\n","import pickle\n","import shutil\n","import json\n","from easydict import EasyDict\n","import copy\n","\n","import datetime\n","from datetime import datetime\n","import random\n","import time\n","# import warnings\n","\n","# warnings.simplefilter(\"ignore\", category=RuntimeWarning)\n","\n","np.seterr(invalid=\"ignore\")\n","np.set_printoptions(suppress=True)\n","np.set_printoptions(linewidth=2000) \n","\n","pd.set_option('mode.chained_assignment',  None)\n","\n","pd.set_option('display.max_rows', 500)\n","pd.set_option('display.max_columns', 500)\n","pd.set_option('display.width', 1000)"]},{"cell_type":"markdown","metadata":{"id":"Ic1mfmwWCIBu"},"source":["# makeset - with to_htf dataframes"]},{"cell_type":"markdown","metadata":{"id":"AUSBU7T8Suzi"},"source":["## sync_check_make"]},{"cell_type":"code","source":["\n","def bb_level_v2(res_df, itv, period):\n","\n","    bb_base = res_df['bb_base_{}{}'.format(itv, period)].to_numpy()\n","\n","    bb_upper2 = 'bb_upper2_{}{}'.format(itv, period)\n","    bb_lower2 = 'bb_lower2_{}{}'.format(itv, period)\n","    bb_upper3 = 'bb_upper3_{}{}'.format(itv, period)\n","    bb_lower3 = 'bb_lower3_{}{}'.format(itv, period)\n","\n","    level_gap = res_df['bb_upper_{}{}'.format(itv, period)].to_numpy() - bb_base\n","\n","    res_df[bb_upper2] = bb_base + level_gap * 2\n","    res_df[bb_lower2] = bb_base - level_gap * 2\n","\n","    res_df[bb_upper3] = bb_base + level_gap * 3\n","    res_df[bb_lower3] = bb_base - level_gap * 3\n","\n","    return res_df"],"metadata":{"id":"kuf6ZhccgRj9"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"QmhLikYlSuzi"},"outputs":[],"source":["def sync_check_make(df):\n","\n","    make_itv_list = ['3T', '5T', '15T', '30T', 'H', '4H', 'D']\n","    offset_list = ['1h', '1h', '1h', '1h', '1h', '1h', '9h']\n","\n","    assert len(make_itv_list) == len(offset_list), \"length of itv & offset_list should be equal\"\n","        \n","    htf_df_list = [to_htf(df, itv_=itv_, offset=offset_) for itv_, offset_ in zip(make_itv_list, offset_list)]\n","\n","    df_3T, df_5T, df_15T, df_30T, df_H, df_4H, df_D = htf_df_list\n","\n","    for htf_df in htf_df_list:\n","      print(\"{} -> \".format(pd.infer_freq(htf_df.index)), htf_df.tail(1))\n","\n","    # heikinashi_v2(res_df_)\n","    # h_candle_v3(df, df_5T, '5T')\n","    # df = h_candle_v4(df, df_5T)\n","    # df = h_candle_v4(df, df_15T)\n","    # df = h_candle_v4(df, df_30T)\n","    # df = h_candle_v4(df, 'D')\n","\n","    # df = candle_pattern_pkg(df, df_5T)\n","    # df = candle_pattern_pkg(df, df_30T)\n","    # df = candle_pattern_pkg(df, df_H)\n","    # df = candle_pattern_pkg(df, df_4H)\n","\n","    \n","    # df = enough_space(df, '15T', 1)\n","    \n","    # --------------- dc --------------- #  \n","    dc_period = 1\n","    # df = donchian_channel_v4(df, dc_period)\n","    # df = dc_line(df, df_5T, '5T')  # join 사용시에만 return df 허용함\n","    # df = dc_line(df, df_15T, '15T')\n","    # df = dc_line_v2(df, df_H, 'H', dc_period=5)\n","\n","    # df = dc_line_v4(df, df_15T, dc_period=dc_period)\n","    # print(\"dc phase done\")\n","\n","    # --------------- bb --------------- #  \n","    bb_period = 20\n","\n","    # upper, base, lower = talib.BBANDS(res_df_.close, timeperiod=20, nbdevup=1, nbdevdn=1, matype=0)\n","    \n","    # df = bb_width_v3(df, period=60, multiple=1)\n","    # df = bb_line(df, df_5T, '5T')\n","    # df = bb_line_v3(df, df_15T, 60)\n","\n","    # df = bb_level_v2(df, 'T', 60)\n","    # print(\"bb phase done\")\n","\n","    c_itv = '5T'\n","\n","    # df =  wick_ratio(df, c_itv)\n","    df =  wick_ratio(df, c_itv)\n","\n","    bb_itv= 'T'\n","\n","    # df = candle_range_ratio(df, c_itv, bb_itv, bb_period)\n","    # # candle_pumping_ratio(df, c_itv, bb_itv, bb_period)\n","\n","    dc_itv= '15T'\n","    dc_period = 4\n","    # df = candle_pumping_ratio_v2(df, c_itv, dc_itv, dc_period)\n","    # print(\"candle_pumping_ratio_v2 phase done\")\n","\n","    # df = dc_over_body_ratio(df, c_itv, dc_itv, dc_period)\n","    # print(\"dc_over_body_ratio phase done\")\n","\n","    # df = body_rel_ratio(df, c_itv)\n","    # print(\"body_rel_ratio phase done\")\n","\n","    # --------------- cbline --------------- #    \n","    # cloud_bline(df_3T, 20)\n","    # df = df.join(to_lower_tf_v2(df, df_3T, [-1]), how='inner')\n","    # # cloud_bline(df_5T, 20)\n","    # # df = df.join(to_lower_tf_v2(df, df_5T, [-1]), how='inner')\n","    # cloud_bline(df_15T, 20)\n","    # df = df.join(to_lower_tf_v2(df, df_15T, [-1]), how='inner')\n","    # cloud_bline(df_30T, 20)\n","    # df = df.join(to_lower_tf_v2(df, df_30T, [-1]), how='inner')\n","    # cloud_bline(df_H, 20)\n","    # df = df.join(to_lower_tf_v2(df, df_H, [-1]), how='inner')\n","    # cloud_bline(df_4H, 20)\n","    # df = df.join(to_lower_tf_v2(df, df_4H, [-1]), how='inner')\n","\n","    # print(\"cbline phase done\")\n","\n","\n","\n","    # --------------- sd_dc --------------- #\n","    # df = sd_dc(df, 20, 40)\n","    # df = sd_dc(df, 20, 20)\n","    # df = sd_dc(df_5T, 20, 40, df)\n","    # df = sd_dc(df_H, 20, 40, df)\n","\n","    # print(\"sd_dc phase done\")\n","\n","    # --------------- imb_ratio --------------- #\n","    # imb_ratio(df, '5T')\n","    # imb_ratio_v3(df, \"5T\")\n","    # imb_ratio_v4(df, \"5T\")\n","\n","    # imb_ratio(df, 'H')\n","    # imb_ratio_v2(df, '5T')\n","    \n","    # print(\"imb_ratio phase done\")\n","\n","    # --------------- rel_abs_ratio --------------- #\n","    # rel_abs_ratio(df, '5T', norm_period=120)\n","\n","    # --------------- normalize data --------------- #\n","    # itv = 'T'\n","    # lb_period = 15\n","    # target_col = 'close_{}{}'.format(itv, lb_period)\n","    # target_data = df['close'].diff(lb_period).to_numpy()\n","    # norm_data(df, target_data, target_col)    \n","    # print(\"normalize data phase done !\")\n","\n","    # --------------- lucid sar --------------- #\n","    # lucid_sar_v2(df)\n","    # lucid_sar_v2(df_3T)\n","    # df = df.join(to_lower_tf_v2(df, df_3T, [-2, -1]), how='inner')\n","    # lucid_sar_v2(df_5T)\n","    # df = df.join(to_lower_tf_v2(df, df_5T, [-2, -1]), how='inner')\n","    # lucid_sar_v2(df_15T)\n","    # df = df.join(to_lower_tf_v2(df, df_15T, [-2, -1]), how='inner')\n","    # lucid_sar_v2(df_30T)\n","    # df = df.join(to_lower_tf_v2(df, df_30T, [-2, -1]), how='inner')       \n","\n","    # print(\"sar phase done\")\n","\n","    # --------------- supertrend --------------- #\n","    # df = st_price_line(df, df_3T, '3m')\n","    # df = st_price_line(df, df_5T, '5m')\n","    # df = st_price_line(df, df_15T, '15m')\n","    # df = st_price_line(df, df_30T, '30m')\n","    # df = st_price_line(df, df_H, '1h')\n","    # df = st_price_line(df, df_4H, '4h')\n","\n","    # print(\"supertrend phase done\")\n","\n","    # --------------- rsi --------------- #  \n","    # df['rsi_1m'] = rsi(df, 14)    \n","    # df_5T['rsi_5m'] = rsi(df_5T, 14)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf_v2(df, df_5T, [-1]), columns=['rsi_5m']))\n","    \n","    # print(\"rsi phase done\")\n","\n","\n","    # --------------- cci --------------- #  \n","    # df['cci_1m'] = cci(df, 20)\n","\n","    # print(\"cci phase done\")\n","\n","    # --------------- ema --------------- #      \n","    # df_5T['ema_5m'] = ema(df_5T['close'], 195)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf_v2(df, df_5T, [-1]), columns=['ema_5m']))\n","    \n","    # print(\"ema phase done\")\n","        \n","    # --------------- stochastic --------------- #\n","    # df['stoch_1m'] = stoch(df, 13, 3, 3)\n","\n","    # df_5T['stoch'] = stoch(df_5T, 13, 3, 3)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf_v2(df, df_5T, [-1], backing_i=-1), columns=['stoch_5m']))\n","\n","    # print(\"stoch phase done\")\n","\n","\n","    return df\n"]},{"cell_type":"markdown","metadata":{"id":"mEKyVbHWSuzi"},"source":["## make & save res_df (concat 생각하면, timeindex sync 맞춰야함)"]},{"cell_type":"markdown","metadata":{"id":"VdukVo5-Suzj"},"source":["### old (xlsx)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"khKb9nhlSuzj"},"outputs":[],"source":["pd.set_option('display.max_rows', 500)\n","pd.set_option('display.max_columns', 500)\n","pd.set_option('display.width', 1000)\n","\n","\n","save_path = './candlestick_concated/res_df/'\n","\n","exist_list = os.listdir(save_path)\n","\n","\n","a_day = 3600 * 24\n","\n","for i in tqdm(range(len(file_list))):\n","\n","  keys = [file_list[i]]\n","\n","  # if 'neo'.upper() not in file_list[i]:\n","    # continue\n","\n","  # if '2021-04-30'.upper() not in file_list[i]:\n","  if '2021-07-01'.upper() not in file_list[i]:\n","  # if '2021-10-10'.upper() not in file_list[i]:\n","    continue\n","\n","\n","  for key in keys:      \n","\n","    # if 'eth'.upper() not in key:\n","    #   continue\n","\n","    excel_name = key.replace(\".xlsx\", \"_st1h_backi2.xlsx\")\n","    excel_path = save_path + excel_name\n","\n","    if excel_name in exist_list:\n","      print(excel_name, \"already exist !\")\n","      continue\n","    \n","    open_indexes = []\n","    \n","    df = pd.read_excel(date_path + key, index_col=0)\n","    second_df = pd.read_excel(date_path2 + key, index_col=0)\n","    third_df = pd.read_excel(date_path3 + key, index_col=0)\n","    fourth_df = pd.read_excel(date_path4 + key, index_col=0)\n","    fifth_df = pd.read_excel(date_path5 + key, index_col=0)\n","    \n","    print(df.index[[0, -1]])\n","    print(second_df.index[[0, -1]])\n","    print(third_df.index[[0, -1]])\n","    print(fourth_df.index[[0, -1]])\n","    print(fifth_df.index[[0, -1]])\n","\n","    open_indexes.append(df.index[0])\n","    open_indexes.append(second_df.index[0])\n","    open_indexes.append(third_df.index[0])\n","    open_indexes.append(fourth_df.index[0])\n","    open_indexes.append(fifth_df.index[0])\n","    \n","    try:\n","      #     Todo    #\n","      #      1. 1m 마지막 timeindex 의 date 기준, 08:59:59.999000 를 last timestamp 로 설정\n","      #      2. 시작 timestamp 는 모든 tf 의 가장 최근 시작 index,\n","      #       a. 1m 의 시작 timeindex 는 최소, htf 의 시작 timeindex 보다 interval 만큼 앞서야함\n","      #         i. 따라서 1m open_index, latest_open_index + 1d 를 하면 댐\n","      #           1. timestamp 으로 변환후 1day 를 더하고 datetime 으로 변환\n","      sixth_df = pd.read_excel(date_path6 + key, index_col=0)\n","      seventh_df = pd.read_excel(date_path7 + key, index_col=0)\n","\n","      print(sixth_df.index[[0, -1]])\n","      print(seventh_df.index[[0, -1]])\n","      print()\n","\n","      open_indexes.append(sixth_df.index[0])\n","      open_indexes.append(seventh_df.index[0])\n","\n","    except Exception as e:\n","      print(e)\n","\n","    latest_open_index = sorted(open_indexes)[-1]\n","    \n","    open_ts = datetime.timestamp(latest_open_index)\n","    latest_open_index_1m = datetime.fromtimestamp(open_ts + a_day)\n","\n","    #   str 로 만들어 접근하면 불가함  #\n","    end_index = pd.to_datetime(str(df.index[-1]).split(\" \")[0] + \" 08:59:59.999000\")\n","    # break\n","\n","    sliced_df = df.loc[latest_open_index_1m:end_index] # to_lower_tf 의 기준 ltf\n","    sliced_second_df = second_df.loc[latest_open_index:end_index]\n","    sliced_third_df = third_df.loc[latest_open_index:end_index]\n","    sliced_fourth_df = fourth_df.loc[latest_open_index:end_index]\n","    sliced_fifth_df = fifth_df.loc[latest_open_index:end_index]\n","\n","    print(\"sliced index\")\n","    print(sliced_df.index[[0, -1]])\n","    print(sliced_second_df.index[[0, -1]])\n","    print(sliced_third_df.index[[0, -1]])\n","    print(sliced_fourth_df.index[[0, -1]])\n","    print(sliced_fifth_df.index[[0, -1]])\n","\n","    try:\n","      sliced_sixth_df = sixth_df.loc[latest_open_index:end_index]\n","      sliced_seventh_df = seventh_df.loc[latest_open_index:end_index]\n","\n","      print(sliced_sixth_df.index[[0, -1]])\n","      print(sliced_seventh_df.index[[0, -1]])\n","\n","      res_df = sync_check(sliced_df, sliced_second_df, sliced_third_df, sliced_fourth_df, sliced_fifth_df, sliced_sixth_df, sliced_seventh_df)\n","    \n","    except:\n","      res_df = sync_check(sliced_df, sliced_second_df, sliced_third_df, sliced_fourth_df, sliced_fifth_df)\n","\n","\n","\n","    res_df.to_excel(excel_path)\n","    print(excel_name, \"saved succesfully !\")"]},{"cell_type":"markdown","metadata":{"id":"Bw5JibDKSuzj"},"source":["### xlsx to feather"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"VA-_gcA7Suzj"},"outputs":[],"source":["pd.set_option('display.max_rows', 500)\n","pd.set_option('display.max_columns', 500)\n","pd.set_option('display.width', 1000)\n","\n","\n","save_path = './candlestick_concated/res_df/'\n","\n","exist_list = os.listdir(save_path)\n","\n","\n","a_day = 3600 * 24\n","\n","for i in tqdm(range(len(file_list))):\n","\n","  keys = [file_list[i]]\n","\n","  # if 'neo'.upper() not in file_list[i]:\n","    # continue\n","\n","  # if '2021-04-30'.upper() not in file_list[i]:\n","  # if '2021-07-01'.upper() not in file_list[i]:\n","  if '2021-10-10'.upper() not in file_list[i]:\n","    continue\n","\n","\n","  for key in keys:      \n","\n","    # if 'eth'.upper() not in key:\n","    #   continue\n","\n","    feather_name = key.replace(\".xlsx\", \".ftr\")\n","    # feather_path = save_path + feather_name\n","\n","    if feather_name in exist_list:\n","      print(feather_name, \"already exist !\")\n","      continue\n","    \n","    open_indexes = []\n","    \n","    df = pd.read_excel(date_path + key, index_col=0)\n","    second_df = pd.read_excel(date_path2 + key, index_col=0)\n","    third_df = pd.read_excel(date_path3 + key, index_col=0)\n","    fourth_df = pd.read_excel(date_path4 + key, index_col=0)\n","    fifth_df = pd.read_excel(date_path5 + key, index_col=0)\n","    \n","    print(df.index[[0, -1]])\n","    print(second_df.index[[0, -1]])\n","    print(third_df.index[[0, -1]])\n","    print(fourth_df.index[[0, -1]])\n","    print(fifth_df.index[[0, -1]])\n","\n","    open_indexes.append(df.index[0])\n","    open_indexes.append(second_df.index[0])\n","    open_indexes.append(third_df.index[0])\n","    open_indexes.append(fourth_df.index[0])\n","    open_indexes.append(fifth_df.index[0])\n","    \n","    try:\n","      #     Todo    #\n","      #      1. 1m 마지막 timeindex 의 date 기준, 08:59:59.999000 를 last timestamp 로 설정\n","      #      2. 시작 timestamp 는 모든 tf 의 가장 최근 시작 index,\n","      #       a. 1m 의 시작 timeindex 는 최소, htf 의 시작 timeindex 보다 interval 만큼 앞서야함\n","      #         i. 따라서 1m open_index, latest_open_index + 1d 를 하면 댐\n","      #           1. timestamp 으로 변환후 1day 를 더하고 datetime 으로 변환\n","      sixth_df = pd.read_excel(date_path6 + key, index_col=0)\n","      seventh_df = pd.read_excel(date_path7 + key, index_col=0)\n","\n","      print(sixth_df.index[[0, -1]])\n","      print(seventh_df.index[[0, -1]])\n","      print()\n","\n","      open_indexes.append(sixth_df.index[0])\n","      open_indexes.append(seventh_df.index[0])\n","\n","    except Exception as e:\n","      print(e)\n","\n","\n","    df.reset_index().to_feather(date_path + feather_name, compression='lz4')\n","    second_df.reset_index().to_feather(date_path2 + feather_name, compression='lz4')\n","    third_df.reset_index().to_feather(date_path3 + feather_name, compression='lz4')\n","    fourth_df.reset_index().to_feather(date_path4 + feather_name, compression='lz4')\n","    fifth_df.reset_index().to_feather(date_path5 + feather_name, compression='lz4')\n","    sixth_df.reset_index().to_feather(date_path6 + feather_name, compression='lz4')\n","    seventh_df.reset_index().to_feather(date_path7 + feather_name, compression='lz4')\n","\n","    print(\"xlsx converted to feather !\")\n","    "]},{"cell_type":"markdown","metadata":{"id":"Pe0QpnORSuzk"},"source":["### add itv_name to ftr"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"M-gl30KxSuzk"},"outputs":[],"source":["save_path = './candlestick_concated/res_df/'\n","\n","# dir_path = \"bbdc3m_backi2\"\n","# date = '2021-10-10'\n","date = '2021-07-01'\n","\n","db_path = './candlestick_concated/database_bn/non_cum/%s/' % date\n","os.makedirs(os.path.join(db_path), exist_ok=True)\n","\n","# exist_list = os.listdir(os.path.join(save_path, dir_path))\n","# break\n","\n","\n","a_day = 3600 * 24\n","\n","for i in tqdm(range(len(file_list))):\n","\n","  keys = [file_list[i]]\n","\n","  # if 'neo'.upper() not in file_list[i]:\n","    # continue\n","\n","  if date not in file_list[i]:\n","    continue\n","\n","\n","  for key in keys:      \n","\n","    # if 'eth'.upper() not in key:\n","    #   continue\n","    # print(key)\n","    \n","    if \".ftr\" not in key:\n","      continue\n","        \n","    df = shutil.copy(date_path + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval))\n","    second_df = shutil.copy(date_path2 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval2))\n","    third_df = shutil.copy(date_path3 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval3))\n","    fourth_df = shutil.copy(date_path4 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval4))\n","    fifth_df = shutil.copy(date_path5 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval5))\n","    sixth_df = shutil.copy(date_path6 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval6))\n","    seventh_df = shutil.copy(date_path7 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval7))\n","\n","    print(\"copied to\" + db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval))\n"]},{"cell_type":"markdown","metadata":{"id":"4oZ1ohTtSuzk"},"source":["### feather ver. (database to res_df)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"vgVHpnUsSuzk"},"outputs":[],"source":["# db_path = './candlestick_concated/database_ub/' # upbit\n","db_path = './candlestick_concated/database_bn/'   # binance\n","\n","save_path = './candlestick_concated/res_df/'\n","\n","save_dir_path = \"bb1d_backi2\"\n","date = '2022-02-17'\n","\n","# concat_path = 'noncat' # 새로운 cols 를 기존 cum/concat 에 붙이려는 경우\n","concat_path = 'concat'\n","cum_path = \"cum\"\n","# cum_path = \"non_cum\"  # non_cum 으로 진행하는 경우, row concat 용도이기 때문에 noncat -> concat 으로 변경 (base cols 를 모두 담고 있음)\n","\n","load_path = os.path.join(db_path, cum_path, date)\n","save_path = os.path.join(save_path, save_dir_path, concat_path, cum_path, date)\n","\n","os.makedirs(save_path, exist_ok=True)\n","\n","file_list = os.listdir(load_path)\n","exist_list = os.listdir(save_path)\n","# break\n","\n","a_day = 3600 * 24\n","\n","for i in tqdm(range(len(file_list))):\n","\n","  keys = [file_list[i]]\n","\n","  # if 'neo'.upper() not in file_list[i]:\n","    # continue\n","\n","  if date not in file_list[i]:\n","    continue\n","\n","\n","  for key in keys:      \n","\n","    # if 'eth'.upper() not in key:\n","    #   continue\n","    # print(key)\n","    \n","    if \".ftr\" not in key:\n","      continue\n","\n","    if \"_1m\" not in key:\n","      continue\n","\n","    # feather_name = key.replace(\".ftr\", \"_%.ftr\" % save_dir_path)\n","    feather_name = key.replace(\"_1m\", \"\")\n","    feather_path = os.path.join(save_path, feather_name)\n","\n","    if feather_name in exist_list:\n","      print(feather_name, \"already exist !\")\n","      continue\n","    \n","    df = pd.read_feather(os.path.join(load_path, key), columns=None, use_threads=True).set_index(\"index\")\n","\n","    res_df = sync_check_make(df)\n","\n","    res_df.reset_index().to_feather(feather_path, compression='lz4')\n","    print(feather_path, \"saved succesfully !\")"]},{"cell_type":"markdown","metadata":{"id":"YxCPUzoyidwH"},"source":["#### just add col to loaded df"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"odqVwQHpYo1M","colab":{"base_uri":"https://localhost:8080/","height":602},"executionInfo":{"status":"ok","timestamp":1652066331412,"user_tz":-540,"elapsed":2108,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"90cf9151-9050-4f0c-fa54-9f9a9a9e38bb"},"outputs":[{"output_type":"stream","name":"stdout","text":["3T ->                          open     high      low    close\n","index                                                  \n","2022-04-27 08:45:00  2803.55  2803.97  2799.26  2800.43\n","5T ->                          open     high      low    close\n","index                                                  \n","2022-04-27 08:45:00  2803.55  2803.97  2799.26  2800.43\n","15T ->                          open     high      low    close\n","index                                                  \n","2022-04-27 08:45:00  2803.55  2803.97  2799.26  2800.43\n","30T ->                          open     high      low    close\n","index                                                  \n","2022-04-27 08:30:00  2783.61  2806.93  2780.79  2800.43\n","H ->                          open     high      low    close\n","index                                                  \n","2022-04-27 08:00:00  2819.33  2822.77  2761.27  2800.43\n","4H ->                          open    high      low    close\n","index                                                 \n","2022-04-27 05:00:00  2837.34  2855.0  2761.27  2800.43\n","D ->                          open    high      low    close\n","index                                                 \n","2022-04-26 09:00:00  3006.12  3043.0  2761.27  2800.43\n"]},{"output_type":"execute_result","data":{"text/plain":["                         bb_upper_T60  bb_lower_T60  bb_base_T60  bb_upper2_T60  bb_lower2_T60  bb_upper3_T60  bb_lower3_T60  upper_wick_ratio_5T  lower_wick_ratio_5T  candle_updown_5T\n","index                                                                                                                                                                                   \n","2022-04-27 08:41:59.999   2823.126867   2790.340133  2806.733500    2839.520235    2773.946765    2855.913602    2757.553398             0.354545             0.640260                 0\n","2022-04-27 08:42:59.999   2822.498326   2790.088008  2806.293167    2838.703485    2773.882848    2854.908644    2757.677689             0.354545             0.640260                 0\n","2022-04-27 08:43:59.999   2821.914551   2789.914116  2805.914333    2837.914768    2773.913898    2853.914986    2757.913681             0.354545             0.640260                 0\n","2022-04-27 08:44:59.999   2821.473171   2789.742162  2805.607667    2837.338676    2773.876657    2853.204181    2758.011153             0.354545             0.640260                 0\n","2022-04-27 08:45:59.999   2820.842501   2789.526499  2805.184500    2836.500502    2773.868498    2852.158503    2758.210497             0.089172             0.248408                 0"],"text/html":["\n","  <div id=\"df-882399d2-6441-4f90-a90e-e91ecbb1b52a\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>bb_upper_T60</th>\n","      <th>bb_lower_T60</th>\n","      <th>bb_base_T60</th>\n","      <th>bb_upper2_T60</th>\n","      <th>bb_lower2_T60</th>\n","      <th>bb_upper3_T60</th>\n","      <th>bb_lower3_T60</th>\n","      <th>upper_wick_ratio_5T</th>\n","      <th>lower_wick_ratio_5T</th>\n","      <th>candle_updown_5T</th>\n","    </tr>\n","    <tr>\n","      <th>index</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2022-04-27 08:41:59.999</th>\n","      <td>2823.126867</td>\n","      <td>2790.340133</td>\n","      <td>2806.733500</td>\n","      <td>2839.520235</td>\n","      <td>2773.946765</td>\n","      <td>2855.913602</td>\n","      <td>2757.553398</td>\n","      <td>0.354545</td>\n","      <td>0.640260</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2022-04-27 08:42:59.999</th>\n","      <td>2822.498326</td>\n","      <td>2790.088008</td>\n","      <td>2806.293167</td>\n","      <td>2838.703485</td>\n","      <td>2773.882848</td>\n","      <td>2854.908644</td>\n","      <td>2757.677689</td>\n","      <td>0.354545</td>\n","      <td>0.640260</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2022-04-27 08:43:59.999</th>\n","      <td>2821.914551</td>\n","      <td>2789.914116</td>\n","      <td>2805.914333</td>\n","      <td>2837.914768</td>\n","      <td>2773.913898</td>\n","      <td>2853.914986</td>\n","      <td>2757.913681</td>\n","      <td>0.354545</td>\n","      <td>0.640260</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2022-04-27 08:44:59.999</th>\n","      <td>2821.473171</td>\n","      <td>2789.742162</td>\n","      <td>2805.607667</td>\n","      <td>2837.338676</td>\n","      <td>2773.876657</td>\n","      <td>2853.204181</td>\n","      <td>2758.011153</td>\n","      <td>0.354545</td>\n","      <td>0.640260</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2022-04-27 08:45:59.999</th>\n","      <td>2820.842501</td>\n","      <td>2789.526499</td>\n","      <td>2805.184500</td>\n","      <td>2836.500502</td>\n","      <td>2773.868498</td>\n","      <td>2852.158503</td>\n","      <td>2758.210497</td>\n","      <td>0.089172</td>\n","      <td>0.248408</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-882399d2-6441-4f90-a90e-e91ecbb1b52a')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-882399d2-6441-4f90-a90e-e91ecbb1b52a button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-882399d2-6441-4f90-a90e-e91ecbb1b52a');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":94}],"source":["res_df_ = sync_check_make(res_df_)  # suffix duplication 유의\n","res_df_.tail().iloc[:, -10:]\n","# res_df_.dtypes"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"3SKglsQCj5_x"},"outputs":[],"source":["test_df_ = sync_check_make(res_df_.iloc[-4000:])  # suffix duplication 유의\n","test_df_.tail().iloc[:, -10:]"]},{"cell_type":"code","source":["# ------ validation ------ #\n","# res_df_.cppr_15T.describe()\n","print((res_df_.open_15T.to_numpy() - res_df_.close_15T.to_numpy())[-10:])\n","print((res_df_.dc_upper_15T4.to_numpy() - res_df_.dc_lower_15T4.to_numpy())[-10:])"],"metadata":{"id":"gOQxwYqK0jCS"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# np.where(res_df_.CDL3LINESTRIKE_15T) #.iloc[-1000:,]\n","\n","# CDL3LINESTRIKE = talib.CDL3LINESTRIKE(df_15T.open, df_15T.high, df_15T.low, df_15T.close)\n","for col in talib.get_function_groups()['Pattern Recognition']:  \n","  print(np.unique(res_df_[col + '_15T'].to_numpy(), return_counts=True))\n","\n","# CDLCLOSINGMARUBOZU = talib.CDLCLOSINGMARUBOZU(df_15T.open, df_15T.high, df_15T.low, df_15T.close)\n","# print(np.unique(CDLCLOSINGMARUBOZU.to_numpy(), return_counts=True))\n","# print(CDLCLOSINGMARUBOZU.tail(50))"],"metadata":{"id":"RmiB5VU5DN6B"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":1071,"status":"ok","timestamp":1652066337627,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"XrgJPQRuisCa","outputId":"c3a01224-f5a8-442f-8300-805b0988100d"},"outputs":[{"output_type":"stream","name":"stdout","text":["./candlestick_concated/database_bn/cum/2022-04-27/2022-04-27 ETHUSDT_1m.ftr saved !\n"]}],"source":["# ------------ save current res_df ------------ #\n","ftr_path = os.path.join(save_path.replace(\"res_df\", \"database_bn\"), \"cum\", date)\n","ftr_full_path = os.path.join(ftr_path, key)\n","\n","res_df_.reset_index().to_feather(ftr_full_path, compression='lz4')  # key 잘 확인하고 저장\n","print(ftr_full_path, 'saved !')"]},{"cell_type":"markdown","metadata":{"id":"E0n53hflJbnp"},"source":["### htf candle check"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"6xW0yugCWvGz"},"outputs":[],"source":["itv_list = ['3T', '5T', '15T', '30T', '1H', '4H']\n","comp_df_list = [second_df, third_df, fourth_df, fifth_df, sixth_df, seventh_df]\n","offset_list = ['1h', '2min', '2min', '2min', '2min', '2min']\n","# itv_list = ['4H']\n","# comp_df_list = [seventh_df]\n","\n","slice_len = 100\n","for itv_, comp_df_, offset in zip(itv_list, comp_df_list, offset_list):\n","\n","  print(\"itv_ :\", itv_)\n","\n","  # df = h_candle_v2(df, '3T')\n","  # end_ts = \n","  h_res_df = df.resample(itv_, offset=offset).agg({\n","          'open': 'first',\n","          'high': 'max',\n","          'low': 'min',\n","          'close': 'last'\n","      })\n","\n","  #   앞은 길이가 다르고, 뒤에서부터 잘라서 비교    #\n","  #   last_row 빼고는 동일, 4h 제외\n","  # print(df.tail())\n","  print(h_res_df.tail())\n","  print(comp_df_.tail())\n","  # # print(h_res_df.head())\n","  # # print(second_df.head())\n","\n","  # print(len(h_res_df))\n","  # print(len(second_df))\n","\n","  # print(h_res_df.values[-slice_len:])\n","  # print(second_df.iloc[:, :4].values[-slice_len:])\n","  # print(np.argwhere(h_res_df.values[-slice_len:] != comp_df_.iloc[:, :4].values[-slice_len:]))\n","  # print()\n","  break"]},{"cell_type":"markdown","metadata":{"id":"jTN3M842Suzl"},"source":["## concat & save new res_df"]},{"cell_type":"markdown","metadata":{"id":"MlFkpO1MSuzl"},"source":["### old (xlsx)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"U-3QkfbFSuzl"},"outputs":[],"source":["save_path = './candlestick_concated/res_df/'\n","\n","dict_name = \"2021-07-01 ETHUSDT_bb15m_backi2_res_dfs.pkl\"\n","\n","#     load with pickle    #\n","with open(save_path + dict_name, 'rb') as f:\n","  saved_res_df_dict = pickle.load(f)\n","\n","print(dict_name, \"loaded !\")\n","res_df_files = os.listdir(save_path)\n","res_df_files.reverse()\n","\n","print(res_df_files)\n","\n","res_df_dict = {}\n","\n","base_postfix = '_bb15m_backi2.xlsx'\n","new_postfix = '_st1h_backi2.xlsx'\n","\n","max_cnt = 10\n","sample_cnt = max_cnt\n","\n","for k_i, key in enumerate(res_df_files):\n","\n","  if '2021-07-01'.upper() not in key:\n","  # if '2021-10-10'.upper() not in key:\n","    continue\n","\n","  # if \"link\".upper() not in key:\n","  # if \"btc\".upper() not in key:\n","  #   continue\n","\n","  if new_postfix not in key:\n","    continue\n","\n","  # if key in \n","\n","  if sample_cnt == max_cnt:\n","    dict_name = \"%s_res_dfs.pkl\" % key.split(\".\")[0]\n","    print(\"dict_name :\", dict_name)\n","\n","  base_df = saved_res_df_dict[key.replace(new_postfix, base_postfix)]\n","  # base_df = pd.read_excel(save_path + key.replace(new_postfix, base_postfix), index_col=0)  \n","  res_df = pd.read_excel(save_path + key, index_col=0)  \n","\n","  # print(base_df.head())\n","  # print(res_df.head())\n","  # break\n","\n","  new_res_df = pd.concat([base_df, res_df], axis=1) # df_tot.drop_duplicates()\n","  # new_res_df.head()\n","\n","  droped_new_res_df = new_res_df.loc[:,~new_res_df.columns.duplicated(keep='last')]\n","  droped_new_res_df.head()\n","  # break\n","\n","  # res_df_dict[key] = res_df\n","  res_df_dict[key] = droped_new_res_df\n","  print(key, \"saved to dict !\")\n","\n","  #     save with pickle    #\n","  with open(save_path + dict_name, 'wb') as f:\n","    pickle.dump(res_df_dict, f)\n","\n","  sample_cnt -= 1\n","\n","  if sample_cnt <= 0:\n","    break\n"]},{"cell_type":"markdown","metadata":{"id":"t1E_eAyPSuzm"},"source":["### new col to latest feather (1m_indi. only)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"xyI5NrM7Suzm"},"outputs":[],"source":["save_path = './candlestick_concated/res_df/'\n","\n","cum_dir = \"cum\"\n","\n","new_dir_path = \"rsi_backi2\"\n","base_dir_path = \"bbdc3m_backi2\"\n","\n","new_date = '2021-11-17'\n","\n","\n","\n","#     load ftr list    #\n","base_save_path = os.path.join(save_path, base_dir_path, \"concat/cum\", new_date)\n","new_save_path = base_save_path.replace(base_dir_path, new_dir_path)\n","\n","#     save to (new) cum dir    #\n","#      1. if dir. not exists, makedir\n","os.makedirs(new_save_path, exist_ok=True)\n","\n","ftr_list = [s for s in os.listdir(base_save_path) if \"ftr\" in s]\n","print(ftr_list)\n","# break\n","\n","\n","max_cnt = 10\n","sample_cnt = max_cnt\n","\n","for key in ftr_list:\n","\n","  if new_date not in key:\n","    continue\n","\n","\n","  #       read from base postfix's directory    #\n","  base_df = pd.read_feather(os.path.join(base_save_path, key), columns=None, use_threads=True).set_index(\"index\")\n","  # print(base_df.head())\n","  # print(res_df.head())\n","  # break\n","\n","  droped_new_res_df = sync_check(base_df)\n","\n","  # new_res_df = pd.concat([base_df, res_df], axis=0) # df_tot.drop_duplicates()\n","  # # new_res_df.head()\n","\n","  # intersection_cols = res_df.columns.intersection(base_df.columns)\n","\n","  # droped_new_res_df = new_res_df.loc[~new_res_df.index.duplicated(keep='last'),intersection_cols]\n","  # droped_new_res_df = new_res_df.loc[:,~new_res_df.columns.duplicated(keep='last')]\n","  # droped_new_res_df = new_res_df.loc[:,~new_res_df.index.duplicated(keep='last')]\n","  # droped_new_res_df.head()\n","  # break\n","\n","  droped_new_res_df.reset_index().to_feather(os.path.join(new_save_path, key), compression='lz4')\n","\n","  print(os.path.join(new_save_path, key), \"saved !\")\n","\n","  # sample_cnt -= 1\n","\n","  # if sample_cnt <= 0:\n","  #   break\n"]},{"cell_type":"markdown","metadata":{"id":"nUs4fjVHSuzl"},"source":["### feather ver. (col concat)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"6cu-Y82iSuzl"},"outputs":[],"source":["new_dir_path = \"st3m_backi2\"\n","base_dir_path = \"bb1d_backi2\"\n","\n","# new_date = \"2021-11-17\"\n","new_date = \"2022-01-10\"\n","\n","#     save to (new) concat dir    #\n","#      1. if dir. not exists, makedir\n","save_path = './candlestick_concated/res_df/'\n","save_path = os.path.join(save_path, new_dir_path, \"concat/cum\", new_date)   \n","# save_path = os.path.join(save_path, new_dir_path, \"concat/non_cum\", new_date)   # row col 하려면 concat 맞음, noncum 사용\n","os.makedirs(save_path, exist_ok=True)\n","\n","\n","#     load ftr list    #\n","# ftr_list = [s for s in os.listdir(os.path.join(save_path, new_dir_path)) if \"ftr\" in s]\n","\n","noncat_path = save_path.replace(\"concat/\", \"noncat/\")\n","ftr_list = [s for s in os.listdir(noncat_path) if \"ftr\" in s]\n","print(ftr_list)\n","# break\n","\n","\n","for key in ftr_list:\n","\n","  if new_date not in key:\n","    continue\n","\n","  try:\n","\n","    #       read from base postfix's directory    #\n","    base_df = pd.read_feather(os.path.join(save_path.replace(new_dir_path, base_dir_path), key), columns=None, use_threads=True).set_index(\"index\")\n","    res_df = pd.read_feather(os.path.join(noncat_path, key), columns=None, use_threads=True).set_index(\"index\")\n","\n","    # print(base_df.head())\n","    # print(res_df.head())\n","    # break\n","\n","    new_res_df = pd.concat([base_df, res_df], axis=1) # df_tot.drop_duplicates()\n","    # new_res_df.head()\n","\n","    droped_new_res_df = new_res_df.loc[:,~new_res_df.columns.duplicated(keep='last')]\n","    # droped_new_res_df.head()\n","    # break\n","\n","    droped_new_res_df.reset_index().to_feather(os.path.join(save_path, key), compression='lz4')\n","\n","    # res_df_dict[key] = res_df\n","    # res_df_dict[key] = droped_new_res_df\n","    print(os.path.join(save_path, key), \"saved !\")\n","  \n","  except Exception as e:\n","    print(\"error occured ! :\", e)\n","  \n","\n","  # sample_cnt -= 1\n","\n","  # if sample_cnt <= 0:\n","  #   break\n"]},{"cell_type":"markdown","metadata":{"id":"WVAKq3i8Suzm"},"source":["### feather ver. (row concat) , database cum 도 호환가능"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"XG2p9OhhSuzm"},"outputs":[],"source":["# save_path = './candlestick_concated/res_df/'        # cols 추가된 cum db 에 new_row's cols 기준으로 합치는 경우\n","save_path = './candlestick_concated/database_bn/'   # ohlcv cum db 만들 경우\n","\n","base_date = '2022-04-25'\n","# new_date = '2022-02-17'\n","new_date = '2022-04-27'\n","\n","# ------ load ftr list ------ #\n","if \"database\" in save_path:\n","  base_dir_path = \"\"\n","  new_dir_path = \"\"\n","  concat_dir = \"\"\n","else:\n","  base_dir_path = \"sar_backi2\"\n","  new_dir_path = \"bb4h_backi2\"  # dir_path 가 base / new 서로 달라질 수 있어서 분할함\n","  concat_dir = \"concat\"\n","\n","base_date_path = os.path.join(save_path, base_dir_path, concat_dir, \"cum\", base_date)      # 기존 cum db 와 new_date db 를 cum 진행\n","# base_date_path = os.path.join(save_path, base_dir_path, concat_dir, \"non_cum\", base_date)    # non_cum db 와 new_date db 를 cum 진행\n","\n","# new_date_path = os.path.join(save_path, new_dir_path, concat_dir, \"cum\", new_date)      # 상황별로 직접 선택해야할 듯\n","new_date_path = os.path.join(save_path, new_dir_path, concat_dir, \"non_cum\", new_date)\n","\n","\n","\n","# ------ save to (new) concat dir ------ #\n","#      1. if dir. not exists, makedir\n","save_path = new_date_path.replace(\"non_cum\", \"cum\")   # non_cum 아니여도 무관\n","os.makedirs(save_path, exist_ok=True)   # noncat / concat 두가지 경우 존재가능할 것\n","# os.makedirs(os.path.join(save_path, dir_path, \"noncat/cum\", new_date), exist_ok=True)\n","\n","\n","ftr_list = [s for s in os.listdir(new_date_path) if \"ftr\" in s]\n","exist_list = os.listdir(save_path)\n","print(ftr_list)\n","# break\n","\n","\n","for key in ftr_list:\n","\n","  if new_date not in key:   # date rejection\n","    continue\n","  if '1m' not in key:  # itv rejection\n","    continue\n","\n","  # if key in exist_list:\n","  #   print(key, \"already exist !\")\n","  #   continue\n","\n","  #       read from base postfix's directory    #\n","  base_df = pd.read_feather(os.path.join(base_date_path, key.replace(new_date, base_date)), columns=None, use_threads=True).set_index(\"index\")   # key 에 new_date 담겨있음\n","  res_df = pd.read_feather(os.path.join(new_date_path, key), columns=None, use_threads=True).set_index(\"index\")\n","\n","  # print(base_df.head())\n","  # print(res_df.head())\n","  # break\n","\n","  new_res_df = pd.concat([base_df, res_df], axis=0) # df_tot.drop_duplicates()\n","  # new_res_df.head()\n","\n","  intersection_cols = res_df.columns.intersection(base_df.columns)\n","\n","  droped_new_res_df = new_res_df.loc[~new_res_df.index.duplicated(keep='last'),intersection_cols]\n","  # droped_new_res_df = new_res_df.loc[:,~new_res_df.columns.duplicated(keep='last')]\n","  # droped_new_res_df = new_res_df.loc[:,~new_res_df.index.duplicated(keep='last')]\n","  # droped_new_res_df.head()\n","  # break  \n","  \n","  print(droped_new_res_df.iloc[[0, -1]])  \n","\n","  # ------------- verify df continuity directly itv by itv ------------- #\n","  true_continue = True\n","  if \"_\" in key:\n","\n","    # interval = key.split(\".\")[0].split(\"_\")[-1] \n","    # itv_num = to_itvnum(interval)\n","\n","    # verified_df = consecutive_df(droped_new_res_df, to_itvnum(interval))\n","    # verified_df.reset_index().to_feather(os.path.join(save_path, key), compression='lz4')\n","\n","    # res_df_dict[key] = res_df\n","    # res_df_dict[key] = droped_new_res_df  \n","\n","    np_idx_ts = np.array(list(map(lambda x: datetime.timestamp(x), droped_new_res_df.index)))\n","    ideal_ts_gap = 60 # * itv_num\n","\n","    for ts_i in range(len(np_idx_ts)):\n","      \n","      if ts_i != 0:\n","        ts_gap = np_idx_ts[ts_i] - np_idx_ts[ts_i - 1]\n","        if ts_gap > ideal_ts_gap or ts_gap < ideal_ts_gap:\n","        # if ts_gap == ideal_ts_gap:\n","          print(droped_new_res_df.index[ts_i - 1])\n","          print(droped_new_res_df.index[ts_i])\n","          # print(ts_gap)\n","          print(\"------------------ unideal ts_gap ------------------\")\n","          true_continue = False\n","\n","    print(\"continuity checked !\")\n","\n","  if true_continue:\n","    droped_new_res_df.reset_index().to_feather(os.path.join(save_path, key), compression='lz4')\n","\n","  print(os.path.join(save_path, key), \"saved !\")\n","  \n"]},{"cell_type":"markdown","metadata":{"id":"L7l5CTJfSuzn"},"source":["### check continuity"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"w-5jn9opBl73"},"outputs":[],"source":["droped_new_res_df = res_df_"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"nGzMGyC3Suzn"},"outputs":[],"source":["# print(droped_new_res_df.columns)\n","\n","print(droped_new_res_df.iloc[[0, -1]])\n","\n","np_idx_ts = np.array(list(map(lambda x: datetime.timestamp(x), droped_new_res_df.index)))\n","\n","print(np_idx_ts[:10])\n","for ts_i in range(len(np_idx_ts)):\n","  \n","  if ts_i != 0:\n","    ts_gap = np_idx_ts[ts_i] - np_idx_ts[ts_i - 1]\n","\n","    if ts_gap > 60 or ts_gap < 60:\n","\n","      print(\"invalid ts_gap found !\")\n","    # if ts_gap == 60:\n","      print(droped_new_res_df.index[ts_i - 1])\n","      print(droped_new_res_df.index[ts_i])\n","      # print(ts_gap)\n","      print()\n"]},{"cell_type":"markdown","metadata":{"id":"x_XGJqBi8Jex"},"source":["### check length of front missing value + middle_data non_missing validity"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"yRNwqVeAu8X8"},"outputs":[],"source":["#       1. new_date 의 시작 timeidx 와 base_date end timeidx 의 최소 days' gap     #\n","#       2. new_date 의 시작 부분 indi. value 는 np.nan 으로 채워질 거기 때문에 계산해야함    #\n","\n","df_count = droped_new_res_df.count()\n","len_missing = df_count.max() - df_count.min()\n","print(len_missing / 1440)\n","\n","#       3. \n","missing_sliced_df = droped_new_res_df.iloc[len_missing:]\n","df_count2 = missing_sliced_df.count()\n","# print(df_count2)\n","print((df_count2.max() - df_count2.min()))    # this value should be zero !\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"AY7E2_hTBsyM"},"outputs":[],"source":["# df_count2.index[df_count2.argmin()]\n","# missing_sliced_df.head(5)\n","\n","stay_missed = np.sum(pd.isnull(missing_sliced_df), axis=0)\n","print(stay_missed)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"p9yqewOw9g33"},"outputs":[],"source":["stay_missed_cols = stay_missed[stay_missed != 0].index\n","\n","for sm_col in stay_missed_cols:\n","  \n","  row_idx = np.argwhere(pd.isnull(missing_sliced_df[sm_col].values))\n","\n","  plt.figure(figsize=(3,3))\n","  plt.plot(row_idx)\n","  plt.ylim(0, len(missing_sliced_df))\n","  plt.title(sm_col)\n","\n","  plt.show()\n"]},{"cell_type":"markdown","metadata":{"id":"MSUY4nnku3s9"},"source":["## legacy"]},{"cell_type":"markdown","metadata":{"id":"epgS5Dksu-HX"},"source":["### mv files"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"aJcVpEdrslA5"},"outputs":[],"source":["df_path = './candlestick_concated/survey_df_v2'\n","files_ = os.listdir(df_path)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"cEKyEYkotFDy"},"outputs":[],"source":["dirs = [file_ for file_ in files_ if not file_.endswith('.ftr')]\n","files = [file_ for file_ in files_ if file_.endswith('.ftr')]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"IgM79tcxtPVZ"},"outputs":[],"source":["dirs"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"M767iRtwtRQP"},"outputs":[],"source":["def move_fn(dir_, file_):\n","  src_path = os.path.join(df_path, file_)\n","  dst_path = os.path.join(df_path, dir_, file_)\n","  shutil.move(src_path, dst_path)\n","  print(\"moved to {}\".format(dst_path))\n","\n","_ = [move_fn('2022-01-10 ETHUSDT_all', file_) for file_ in files if 'eth'.upper() in file_]\n","# sols\n"]},{"cell_type":"markdown","metadata":{"id":"Iy76iO7gztne"},"source":["### move legacy files"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"hMRht32Czwry"},"outputs":[],"source":["# print()\n","cur_dir_list = os.listdir('.')\n","for f in cur_dir_list:\n","  if 'legacy' in f :\n","    # print(f)\n","    if os.path.isdir(current_path + f,):\n","      continue\n","\n","    shutil.move(current_path + f, current_path + 'legacy/' + f)\n","    print(\"moved to\" + current_path + 'legacy/' +  f)"]},{"cell_type":"markdown","metadata":{"id":"5duWn8t4BRyv"},"source":["# IDE platform\n"]},{"cell_type":"markdown","metadata":{"id":"6HOjnZjSgzk1"},"source":["## load ftr_list"]},{"cell_type":"code","execution_count":3,"metadata":{"id":"7FPBG5Qqg2jB","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1652257500758,"user_tz":-540,"elapsed":3852,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"5d7e5959-7f63-4e10-bac7-f2d2861d404e"},"outputs":[{"output_type":"stream","name":"stdout","text":["['2022-04-27 ETHUSDT_1m.ftr']\n","2022-04-27 ETHUSDT_1m.ftr loaded !\n","load res_df_ elapsed time : 2.807299852371216\n"]}],"source":["save_path = './candlestick_concated/database_bn/'\n","\n","# dir_path = \"bb1d_backi2\"\n","# date = \"2022-02-17\"\n","# ftr_path = os.path.join(save_path, dir_path, \"concat/cum\", date)\n","\n","# ------ 1T_database ------ #\n","# date = \"2022-04-27\"\n","# ftr_path = os.path.join(save_path, \"non_cum\", date)\n","\n","date = \"2022-04-27\"\n","# date = \"2022-02-17\"\n","ftr_path = os.path.join(save_path, \"cum\", date)\n","\n","# ------ load ftr list ------ #\n","ftr_list = [s for s in os.listdir(ftr_path) if \"ftr\" in s if date in s]\n","print(ftr_list)\n","\n","start_0 = time.time()\n","key = ftr_list[0]  # tempoaray use single key\n","res_df_ = pd.read_feather(os.path.join(ftr_path, key), columns=None, use_threads=True).set_index(\"index\")\n","# print(res_df_.head())\n","print(key, \"loaded !\")\n","print(\"load res_df_ elapsed time :\", time.time() - start_0)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"RQH_l4opEh_O"},"outputs":[],"source":["res_df_.dtypes"]},{"cell_type":"markdown","metadata":{"id":"x2yj2SwAXDLp"},"source":["### edit cols"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"x9wkWw15XCAm"},"outputs":[],"source":["col_list = list(res_df_.columns)\n","# # [col_ for col_ in col_list if 'score' in col_]\n","\n","# ------ drop ------ #\n","# res_df_.drop([col_ for col_ in col_list if 'open_15T' in col_], inplace=True, axis=1)\n","res_df_.drop([col_ for col_ in col_list if 'es' in col_], inplace=True, axis=1)\n","# res_df_.drop([col_ for col_ in col_list if '_T40' in col_], inplace=True, axis=1)\n","# res_df_.drop([col_ for col_ in col_list if 'long_base' in col_], inplace=True, axis=1)\n","# res_df_.drop([col_ for col_ in col_list[5:]], inplace=True, axis=1)\n","\n","# ------ replace ------ #\n","# for c_i, col_ in enumerate(col_list):\n","#   if 'basis' in col_:\n","# #   # if col_[-1] in ['m', 'h', 'd', 'H'] and '_' in col_:eTa_5T\n","# #   # if col_[0] in ['h'] and '_' in col_:\n","# #   if 'bir_' in col_:\n","\n","#     col_list[c_i] = col_.replace('basis', 'base')\n","# #     # col_list[c_i] = col_.replace('m', 'T').replace('h', 'H').replace('1T', 'T')\n","# #     # col_list[c_i] = col_.replace('1d', 'D')\n","# #     # col_list[c_i] = col_.replace('eTa_5T', 'ema_5T')\n","# #     # col_list[c_i] = col_list[c_i][1:]\n","# #     # print(col_list[c_i][0])\n","# res_df_.columns = col_list\n","# col_list[-2:] = ['resi_T', 'sup_T']"]},{"cell_type":"markdown","metadata":{"id":"14chOHeXh6JD"},"source":["### lab"]},{"cell_type":"markdown","metadata":{"id":"O87s8_EUakqS"},"source":["#### instant indi."]},{"cell_type":"code","source":["\n","def get_terms_info_v4(cu_idx, co_idx, len_df, len_df_range):\n","\n","    cu_fill_idx = fill_arr(cu_idx)\n","    co_fill_idx = fill_arr(co_idx)\n","\n","    notnan_cu_bool = ~np.isnan(cu_idx)\n","    notnan_co_bool = ~np.isnan(co_idx)\n","\n","    valid_cu_bool = notnan_cu_bool * ~np.isnan(co_fill_idx)\n","    valid_co_bool = notnan_co_bool * ~np.isnan(cu_fill_idx)\n","\n","    # ------ 생략된 idx 에 대한 prime_idx 탐색 ------ #\n","    high_bool = cu_fill_idx < co_fill_idx  # 이렇게 해야 high_terms[:, 1] 이 cu_idx 가 나옴\n","    low_bool = co_fill_idx < cu_fill_idx\n","\n","    high_terms_vec = get_index_bybool(high_bool, len_df_range)\n","    low_terms_vec = get_index_bybool(low_bool, len_df_range)  # -> low_terms\n","\n","    high_terms_list = using_clump(high_terms_vec)\n","    low_terms_list = using_clump(low_terms_vec)\n","\n","    valid_cu_prime_idx = np.array([terms.min() for terms in low_terms_list])\n","    valid_co_prime_idx = np.array([terms.min() for terms in high_terms_list])\n","\n","    cu_prime_idx = np.full(len_df, np.nan)\n","    co_prime_idx = np.full(len_df, np.nan)\n","\n","    cu_prime_idx[valid_cu_prime_idx] = valid_cu_prime_idx\n","    co_prime_idx[valid_co_prime_idx] = valid_co_prime_idx\n","\n","    cu_prime_fill_idx = fill_arr(cu_prime_idx)\n","    co_prime_fill_idx = fill_arr(co_prime_idx)\n","\n","    valid_cu_bool *= ~np.isnan(co_prime_fill_idx)\n","    valid_co_bool *= ~np.isnan(cu_prime_fill_idx)\n","\n","    # ------ get post_terms ------ #\n","    high_post_terms = np.vstack((co_fill_idx[valid_cu_bool], cu_idx[valid_cu_bool])).T.astype(int)\n","    low_post_terms = np.vstack((cu_fill_idx[valid_co_bool], co_idx[valid_co_bool])).T.astype(int)\n","\n","    high_post_terms_cnt = high_post_terms[:, 1] - high_post_terms[:, 0]\n","    low_post_terms_cnt = low_post_terms[:, 1] - low_post_terms[:, 0]\n","\n","    # ------ get prime_terms ------ # # 기본은 아래 logic 으로 수행하고, update_hl 도 해당 term 구간의 hl 이 더 작거나 클경우 적용 가능할 것\n","    high_prime_terms = np.vstack((co_prime_fill_idx[valid_cu_bool], cu_idx[valid_cu_bool])).T.astype(int)\n","    low_prime_terms = np.vstack((cu_prime_fill_idx[valid_co_bool], co_idx[valid_co_bool])).T.astype(int)\n","    \n","    high_prime_terms_cnt = high_prime_terms[:, 1] - high_prime_terms[:, 0]\n","    low_prime_terms_cnt = low_prime_terms[:, 1] - low_prime_terms[:, 0]\n","\n","    return high_post_terms, low_post_terms, high_post_terms_cnt, low_post_terms_cnt, high_prime_terms, low_prime_terms, high_prime_terms_cnt, low_prime_terms_cnt\n","\n","\n","def wave_range_v11_3(res_df, config, itv='T', over_period=3):  # v2 for period1 only\n","\n","    if itv != 'T':\n","      offset = '1h' if itv != 'D' else '9h'\n","      t_df = to_htf(res_df, itv, offset=offset)\n","    else:\n","      t_df = res_df\n","\n","    period1 = config.tr_set.wave_period\n","    itv_num = to_itvnum(itv)\n","    # print(itv_num)\n","\n","    t_df = donchian_channel_v4(t_df, period1)\n","\n","    dc_base_ = t_df['dc_base_{}{}'.format(itv, period1)].to_numpy()\n","    # b1_dc_base_ = t_df['dc_base_{}{}'.format(itv, period1)].shift(itv_num).to_numpy()\n","\n","    len_df = len(t_df)\n","    len_df_range = np.arange(len_df).astype(int)\n","    # short_open_res = np.ones(len_df)\n","    # long_open_res = np.ones(len_df)\n","\n","    data_cols = ['open', 'high', 'low', 'close']\n","    open, high, low, close = [t_df[col_].to_numpy() for col_ in data_cols]\n","    # b1_close = t_df.close.shift(itv_num).to_numpy()\n","\n","    over_base = close > dc_base_\n","    prev_over_base = pd.Series(over_base).rolling(over_period).min().shift(1).to_numpy() == 1   # min = 1 => period's all-over, max = 0\n","    prev_under_base = pd.Series(over_base).rolling(over_period).max().shift(1).to_numpy() == 0  # max = 0 => period's all-under, \n","\n","    # ============ modules ============ #\n","    # ------ define co, cu ------ # <- point missing 과 관련해 정교해아함    \n","    cu_bool = prev_over_base & ~over_base\n","    co_bool = prev_under_base & over_base\n","\n","    cu_idx = get_index_bybool(cu_bool, len_df_range)\n","    co_idx = get_index_bybool(co_bool, len_df_range)\n","    \n","    high_post_terms, low_post_terms, high_post_terms_cnt, low_post_terms_cnt, \\\n","    high_prime_terms, low_prime_terms, high_prime_terms_cnt, low_prime_terms_cnt = get_terms_info_v4(cu_idx, co_idx, len_df, len_df_range)\n","\n","    paired_post_cu_idx = high_post_terms[:, 1]\n","    paired_post_co_idx = low_post_terms[:, 1]\n","\n","    paired_prime_cu_idx = high_prime_terms[:, 1]\n","    paired_prime_co_idx = low_prime_terms[:, 1]\n","\n","    # ====== get wave_hl & terms ====== #\n","    wave_high_ = np.full(len_df, np.nan)\n","    wave_low_ = np.full(len_df, np.nan)\n","\n","    wave_highs = np.array([high[iin:iout + 1].max() for iin, iout in high_post_terms])\n","    wave_lows = np.array([low[iin:iout + 1].min() for iin, iout in low_post_terms])\n","\n","    wave_high_[paired_post_cu_idx] = wave_highs\n","    wave_low_[paired_post_co_idx] = wave_lows\n","\n","    wave_high_fill_ = fill_arr(wave_high_)\n","    wave_low_fill_ = fill_arr(wave_low_)\n","\n","    # # ------ Todo, update_hl 에 대해서, post_terms_hl 적용 ------ #\n","    wave_high_terms_low_ = np.full(len_df, np.nan)\n","    wave_low_terms_high_ = np.full(len_df, np.nan)\n","\n","    wave_high_terms_lows = np.array([low[iin:iout + 1].min() for iin, iout in high_post_terms])  # for point rejection, Todo, min_max 설정 항상 주의\n","    wave_low_terms_highs = np.array([high[iin:iout + 1].max() for iin, iout in low_post_terms])\n","\n","    wave_high_terms_low_[paired_post_cu_idx] = wave_high_terms_lows\n","    wave_low_terms_high_[paired_post_co_idx] = wave_low_terms_highs\n","\n","    update_low_cu_bool = wave_high_terms_low_ < wave_low_fill_\n","    update_high_co_bool = wave_low_terms_high_ > wave_high_fill_\n","\n","    wave_high_fill_ = fill_arr(wave_high_)\n","    wave_low_fill_ = fill_arr(wave_low_)\n","\n","    wave_high_terms_cnt_ = np.full(len_df, np.nan)\n","    wave_low_terms_cnt_ = np.full(len_df, np.nan)\n","\n","    wave_high_terms_cnt_[paired_post_cu_idx] = high_post_terms_cnt\n","    wave_low_terms_cnt_[paired_post_co_idx] = low_post_terms_cnt\n","\n","    wave_high_terms_cnt_fill_ = fill_arr(wave_high_terms_cnt_)\n","    wave_low_terms_cnt_fill_ = fill_arr(wave_low_terms_cnt_)\n","\n","    # ------ hl_fill 의 prime_idx 를 찾아야함 ------ #\n","    b1_wave_high_fill_ = pd.Series(wave_high_fill_).shift(1).to_numpy()\n","    b1_wave_low_fill_ = pd.Series(wave_low_fill_).shift(1).to_numpy()\n","    wave_high_prime_idx = np.where((wave_high_fill_ != b1_wave_high_fill_) & ~np.isnan(wave_high_fill_), len_df_range, np.nan)\n","    wave_low_prime_idx = np.where((wave_low_fill_ != b1_wave_low_fill_) & ~np.isnan(wave_low_fill_), len_df_range, np.nan)\n","\n","    high_prime_idx_fill_ = fill_arr(wave_high_prime_idx)\n","    low_prime_idx_fill_ = fill_arr(wave_low_prime_idx)\n","\n","    # ============ enlist to df_cols ============ #\n","    t_df['wave_high_fill_{}{}'.format(itv, period1)] = wave_high_fill_\n","    t_df['wave_low_fill_{}{}'.format(itv, period1)] = wave_low_fill_\n","    t_df['wave_high_terms_cnt_fill_{}{}'.format(itv, period1)] = wave_high_terms_cnt_fill_\n","    t_df['wave_low_terms_cnt_fill_{}{}'.format(itv, period1)] = wave_low_terms_cnt_fill_\n","    t_df['wave_cu_{}{}'.format(itv, period1)] = cu_bool * ~update_low_cu_bool\n","    t_df['wave_co_{}{}'.format(itv, period1)] = co_bool * ~update_high_co_bool\n","    t_df['wave_cu_bool_{}{}'.format(itv, period1)] = cu_bool  # temporary, for plot_check\n","    t_df['wave_co_bool_{}{}'.format(itv, period1)] = co_bool\n","    t_df['wave_cu_marker_{}{}'.format(itv, period1)] = get_line(cu_idx, dc_base_)\n","    t_df['wave_co_marker_{}{}'.format(itv, period1)] = get_line(co_idx, dc_base_)\n","\n","    # ------ for roll prev_hl ------ #\n","    t_df['wave_high_prime_idx_{}{}'.format(itv, period1)] = wave_high_prime_idx  # cu\n","    t_df['wave_low_prime_idx_{}{}'.format(itv, period1)] = wave_low_prime_idx\n","\n","    # ------ for first_high ------ #\n","    t_df['wave_high_prime_idx_fill_{}{}'.format(itv, period1)] = high_prime_idx_fill_\n","    t_df['wave_low_prime_idx_fill_{}{}'.format(itv, period1)] = low_prime_idx_fill_\n","    \n","    if itv != 'T':\n","        join_cols = np.arange(-17, 0, 1).astype(int)  # points & donchian_channels\n","        res_df.drop(t_df.columns[join_cols], inplace=True, axis=1, errors='ignore')\n","        try:\n","            res_df = res_df.join(to_lower_tf_v3(res_df, t_df, join_cols), how='inner')\n","        except Exception as e:\n","            print(\"error in wave_range()'s join() :\", e)\n","            \n","        return res_df\n","\n","    else:\n","        return t_df\n","\n","def wave_range_v11_2(res_df, config, itv='T'):  # v2 for period1 only\n","\n","    if itv != 'T':\n","      offset = '1h' if itv != 'D' else '9h'\n","      t_df = to_htf(res_df, itv, offset=offset)\n","    else:\n","      t_df = res_df\n","\n","    period1 = config.tr_set.wave_period\n","    itv_num = to_itvnum(itv)\n","    # print(itv_num)\n","\n","    t_df = donchian_channel_v4(t_df, period1)\n","\n","    dc_base_ = t_df['dc_base_{}{}'.format(itv, period1)].to_numpy()\n","    b1_dc_base_ = t_df['dc_base_{}{}'.format(itv, period1)].shift(itv_num).to_numpy()\n","\n","    len_df = len(t_df)\n","    len_df_range = np.arange(len_df).astype(int)\n","    # short_open_res = np.ones(len_df)\n","    # long_open_res = np.ones(len_df)\n","\n","    data_cols = ['open', 'high', 'low', 'close']\n","    open, high, low, close = [t_df[col_].to_numpy() for col_ in data_cols]\n","    b1_close = t_df.close.shift(itv_num).to_numpy()\n","\n","    # ============ modules ============ #\n","    # ------ define co, cu ------ # <- point missing 과 관련해 정교해아함\n","    cu_bool = ((b1_close > b1_dc_base_) & (dc_base_ > close)) | ((b1_close > dc_base_) & (dc_base_ > close))\n","    co_bool = (b1_close < b1_dc_base_) & (dc_base_ < close) | ((b1_close < dc_base_) & (dc_base_ < close))\n","    cu_idx = get_index_bybool(cu_bool, len_df_range)\n","    co_idx = get_index_bybool(co_bool, len_df_range)\n","\n","    cu_fill_idx = fill_arr(cu_idx)\n","    co_fill_idx = fill_arr(co_idx)\n","\n","    # ------ get co, cu terms ------ #\n","    high_bool = cu_fill_idx < co_fill_idx\n","    low_bool = co_fill_idx < cu_fill_idx\n","\n","    high_terms_vec = get_index_bybool(high_bool, len_df_range)\n","    low_terms_vec = get_index_bybool(low_bool, len_df_range)  # -> low_terms\n","\n","    high_terms_list = using_clump(high_terms_vec)\n","    low_terms_list = using_clump(low_terms_vec)\n","\n","    high_terms = np.array([[terms.min(), terms.max() + 1] for terms in high_terms_list])\n","    low_terms = np.array([[terms.min(), terms.max() + 1] for terms in low_terms_list])\n","\n","    high_terms_cnt = high_terms[:, 1] - high_terms[:, 0]\n","    low_terms_cnt = low_terms[:, 1] - low_terms[:, 0]\n","\n","    wave_highs = np.array([high[iin:iout + 1].max() for iin, iout in high_terms])\n","    wave_lows = np.array([low[iin:iout + 1].min() for iin, iout in low_terms])\n","\n","    # ------ get valid_idx range (inner len_df) ------ #\n","    paired_cu_idx = high_terms[:, 1]\n","    paired_co_idx = low_terms[:, 1]\n","\n","    valid_cu_bool = paired_cu_idx < len_df\n","    valid_co_bool = paired_co_idx < len_df\n","\n","    paired_cu_valid_idx = paired_cu_idx[valid_cu_bool]\n","    paired_co_valid_idx = paired_co_idx[valid_co_bool]\n","\n","    # ------ get wave_hl & terms ------ #\n","    wave_high_ = np.full(len_df, np.nan)\n","    wave_low_ = np.full(len_df, np.nan)\n","\n","    wave_high_[paired_cu_valid_idx] = wave_highs[valid_cu_bool]\n","    wave_low_[paired_co_valid_idx] = wave_lows[valid_co_bool]\n","\n","    wave_high_fill_ = fill_arr(wave_high_)\n","    wave_low_fill_ = fill_arr(wave_low_)\n","\n","    wave_high_terms_cnt_ = np.full(len_df, np.nan)\n","    wave_low_terms_cnt_ = np.full(len_df, np.nan)\n","\n","    wave_high_terms_cnt_[paired_cu_valid_idx] = high_terms_cnt[valid_cu_bool]\n","    wave_low_terms_cnt_[paired_co_valid_idx] = low_terms_cnt[valid_co_bool]\n","\n","    wave_high_terms_cnt_fill_ = fill_arr(wave_high_terms_cnt_)\n","    wave_low_terms_cnt_fill_ = fill_arr(wave_low_terms_cnt_)\n","\n","    # ------ check update high & low (occurs by point missing) ------ #\n","    co_prime_idx = np.full(len_df, np.nan)\n","    co_prime_idx[paired_co_valid_idx] = paired_co_valid_idx\n","    co_prime_idx_fill_ = fill_arr(co_prime_idx)\n","    # valid_idx = co_idx > co_prime_idx_fill_\n","    valid_idx = cu_idx > co_prime_idx_fill_\n","\n","    update_low = np.full(len_df, np.nan)\n","    # update_low[valid_idx] = [low[iin:iout + 1].min() for iin, iout in zip(cu_prime_idx_fill_[valid_idx].astype(int), cu_idx[valid_idx].astype(int))]  # include open low\n","    # 1. 잘 생각해보면, cu_idx 에는 co_prime_idx_fill_ 을 사용하는게 맞음\n","    #   a. cu_idx 에 달려있는 low 가 co_prime_idx_fill_ 기준이니까\n","    update_low[valid_idx] = [low[iin:iout + 1].min() for iin, iout in zip(co_prime_idx_fill_[valid_idx].astype(int), cu_idx[valid_idx].astype(int))]  # high_terms' update_low\n","\n","    cu_prime_idx = np.full(len_df, np.nan)\n","    cu_prime_idx[paired_cu_valid_idx] = paired_cu_valid_idx\n","    cu_prime_idx_fill_ = fill_arr(cu_prime_idx)\n","    valid_idx = co_idx > cu_prime_idx_fill_\n","\n","    update_high = np.full(len_df, np.nan)\n","    update_high[valid_idx] = [high[iin:iout + 1].max() for iin, iout in zip(cu_prime_idx_fill_[valid_idx].astype(int), co_idx[valid_idx].astype(int))]\n","\n","    # ============ enlist to df_cols ============ #\n","    t_df['wave_high_fill_{}{}'.format(itv, period1)] = wave_high_fill_\n","    t_df['wave_low_fill_{}{}'.format(itv, period1)] = wave_low_fill_\n","    t_df['wave_high_terms_cnt_fill_{}{}'.format(itv, period1)] = wave_high_terms_cnt_fill_\n","    t_df['wave_low_terms_cnt_fill_{}{}'.format(itv, period1)] = wave_low_terms_cnt_fill_\n","    t_df['wave_cu_{}{}'.format(itv, period1)] = cu_bool * ~(update_low < wave_low_fill_)  # point_missing 으로 인한 low 갱신 회피\n","    t_df['wave_co_{}{}'.format(itv, period1)] = co_bool * ~(update_high > wave_high_fill_)\n","    t_df['wave_cu_bool_{}{}'.format(itv, period1)] = cu_bool  # temporary, for plot_check\n","    t_df['wave_co_bool_{}{}'.format(itv, period1)] = co_bool\n","    t_df['wave_cu_marker_{}{}'.format(itv, period1)] = get_line(cu_idx, dc_base_)\n","    t_df['wave_co_marker_{}{}'.format(itv, period1)] = get_line(co_idx, dc_base_)\n","\n","    # ------ for roll prev_hl ------ #\n","    t_df['wave_high_prime_idx_{}{}'.format(itv, period1)] = cu_prime_idx\n","    t_df['wave_low_prime_idx_{}{}'.format(itv, period1)] = co_prime_idx\n","\n","    # ------ for first_high ------ #\n","    t_df['wave_high_prime_idx_fill_{}{}'.format(itv, period1)] = cu_prime_idx_fill_\n","    t_df['wave_low_prime_idx_fill_{}{}'.format(itv, period1)] = co_prime_idx_fill_\n","    \n","    if itv != 'T':\n","        join_cols = np.arange(-17, 0, 1).astype(int)  # points & donchian_channels\n","        res_df.drop(t_df.columns[join_cols], inplace=True, axis=1, errors='ignore')\n","        try:\n","            res_df = res_df.join(to_lower_tf_v3(res_df, t_df, join_cols), how='inner')\n","        except Exception as e:\n","            print(\"error in wave_range()'s join() :\", e)\n","            \n","        return res_df\n","\n","    else:\n","        return t_df\n","\n"],"metadata":{"id":"RVFfP9VcDG2_","executionInfo":{"status":"ok","timestamp":1652258043894,"user_tz":-540,"elapsed":2538,"user":{"displayName":"7th June","userId":"08178289703395036410"}}},"execution_count":22,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"LyGnAMvLYvOZ"},"source":["#### wave_range"]},{"cell_type":"markdown","source":["##### plot_check"],"metadata":{"id":"O1uu9vQnY5dn"}},{"cell_type":"code","execution_count":20,"metadata":{"id":"YqBXjVPzdccC","executionInfo":{"status":"ok","timestamp":1652257628500,"user_tz":-540,"elapsed":484,"user":{"displayName":"7th June","userId":"08178289703395036410"}}},"outputs":[],"source":["i = random.randint(0, len(res_df))\n","# i = 235290, 512385\n","# i = 74470\n","# i = 82533\n","i = 387103\n","\n","plot_size = 60\n","t_df = res_df.iloc[i - plot_size:i + plot_size]\n","# t_df = res_df.iloc[i - plot_size:i - 22]\n","a_data = t_df.to_numpy()"]},{"cell_type":"code","execution_count":23,"metadata":{"id":"-Dr_tTk9csFm","colab":{"base_uri":"https://localhost:8080/","height":862},"executionInfo":{"status":"ok","timestamp":1652258054413,"user_tz":-540,"elapsed":1556,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"fc8189bc-0185-47c4-f380-17fb91fd1e08"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1080x1080 with 2 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["plt.style.use(['dark_background', 'fast'])\n","fig = plt.figure(figsize=(15, 15))\n","nrows, ncols = 2, 1\n","gs = gridspec.GridSpec(nrows=nrows,  # row 부터 index 채우고 col 채우는 순서임 (gs_idx)\n","                        ncols=ncols,\n","                        height_ratios=[3, 1]\n","                        )\n","\n","ax = fig.add_subplot(gs[0])\n","\n","# ------ candles ------ #\n","candle_plot(a_data[:, col_idx_dict['ohlc_col_idxs']], ax, alpha=1.0, wickwidth=1.0)\n","# _ = [step_col_plot(a_data[:, params[0]], *params[1:]) for params in col_idx_dict['step_col_info']]\n","\n","config.tr_set.wave_period = 5\n","wave_itv, wave_period = 'T', config.tr_set.wave_period\n","# t_df = wave_range_v11(t_df, config)\n","# t_df = wave_range_v11_2(t_df, config)\n","t_df = wave_range_v11_3(t_df, config, over_period=2)\n","# t_df = wave_range_v12(t_df, config, ltf_df=None)\n","# t_df = wave_range_v13(t_df, config, ltf_df=None, term_thresh=1)\n","# t_df = wave_range_v14(t_df, config, ltf_df=None, term_thresh1=1, term_thresh2=3)\n","# t_df = wave_range_v15(t_df, config, term_thresh1=2, term_thresh2=3)\n","\n","len_df = len(t_df)   \n","len_df_range = np.arange(len_df).astype(int)\n","\n","# ============ ============ ============ #\n","# ============ ============ ============ #\n","\n","wave_high_fill_ = t_df['wave_high_fill_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","wave_low_fill_ = t_df['wave_low_fill_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","# wave_high_fill2_ = t_df['wave_high_fill2_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","# wave_low_fill2_ = t_df['wave_low_fill2_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","\n","wave_high_terms_cnt_fill_ = t_df['wave_high_terms_cnt_fill_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","wave_low_terms_cnt_fill_ = t_df['wave_low_terms_cnt_fill_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","wave_cu_idx_ = get_index_bybool(t_df['wave_cu_{}{}'.format(wave_itv, wave_period)].to_numpy(), len_df_range)\n","wave_co_idx_ = get_index_bybool(t_df['wave_co_{}{}'.format(wave_itv, wave_period)].to_numpy(), len_df_range)\n","wave_cu_bool_idx_ = get_index_bybool(t_df['wave_cu_bool_{}{}'.format(wave_itv, wave_period)].to_numpy(), len_df_range)\n","wave_co_bool_idx_ = get_index_bybool(t_df['wave_co_bool_{}{}'.format(wave_itv, wave_period)].to_numpy(), len_df_range)\n","wave_cu_marker_ = t_df['wave_cu_marker_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","wave_co_marker_ = t_df['wave_co_marker_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","high_prime_idx = t_df['wave_high_prime_idx_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","low_prime_idx = t_df['wave_low_prime_idx_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","high_prime_idx_fill = t_df['wave_high_prime_idx_fill_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","low_prime_idx_fill = t_df['wave_low_prime_idx_fill_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","\n","# ============ plot_check ============ #\n","dc_base_ = t_df['dc_base_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","plt.step(len_df_range, dc_base_, alpha=1.0, color='cyan', linewidth=1)\n","\n","plt.step(len_df_range, wave_cu_marker_, \"o\", alpha=1.0, color='#ff00ff', markersize=6)\n","plt.step(len_df_range, wave_co_marker_, \"o\", alpha=1.0, color='#00ff00', markersize=6)\n","\n","[plt.axvline(int(idx_), color=\"#ff0000\") for idx_ in wave_cu_bool_idx_ if not np.isnan(idx_)]\n","[plt.axvline(int(idx_), color=\"#0000ff\") for idx_ in wave_co_bool_idx_ if not np.isnan(idx_)]\n","\n","[plt.axvline(int(idx_), color=\"#ff00ff\") for idx_ in wave_cu_idx_ if not np.isnan(idx_)]\n","[plt.axvline(int(idx_), color=\"#00ff00\") for idx_ in wave_co_idx_ if not np.isnan(idx_)]\n","\n","# [plt.axvline(int(idx_), color=\"#00ff00\") for idx_ in wave_high_prime_idx if not np.isnan(idx_)]\n","# [plt.axvline(int(idx_), color=\"#ff00ff\") for idx_ in wave_low_prime_idx if not np.isnan(idx_)]\n","\n","# [plt.axvline(int(idx_), color=\"#00ff00\") for idx_ in paired_cu_idx if not np.isnan(idx_)]\n","\n","# plt.step(len_df_range, wave_high_fill_, alpha=1.0, color='yellow', linewidth=2)\n","# plt.step(len_df_range, wave_low_fill_, alpha=1.0, color='yellow', linewidth=2)\n","\n","plt.step(len_df_range, wave_high_fill_, \"*\", alpha=1.0, color='#00ff00', markersize=6)\n","plt.step(len_df_range, wave_low_fill_, \"*\", alpha=1.0, color='#ff00ff', markersize=6)\n","# plt.step(len_df_range, wave_high_fill2_, \"*\", alpha=1.0, color='#0000ff', markersize=6)\n","# plt.step(len_df_range, wave_low_fill2_, \"*\", alpha=1.0, color='#ff0000', markersize=6)\n","\n","plt.xlim(0, len_df)\n","\n","plt.subplot(gs[1])\n","plt.step(len_df_range, wave_high_terms_cnt_fill_, alpha=1.0, color='yellow', linewidth=2)\n","plt.step(len_df_range, wave_low_terms_cnt_fill_, alpha=1.0, color='yellow', linewidth=2)\n","plt.step(len_df_range, wave_high_terms_cnt_fill_, \"*\", alpha=1.0, color='#00ff00', markersize=6)\n","plt.step(len_df_range, wave_low_terms_cnt_fill_, \"*\", alpha=1.0, color='#ff00ff', markersize=6)\n","plt.xlim(0, len_df)\n","\n","plt.show()"]},{"cell_type":"markdown","source":["###### data_window"],"metadata":{"id":"c2yVTn1tnxMn"}},{"cell_type":"code","source":["# valid_high_prime_idx\n","high_terms_vec[~np.isnan(high_terms_vec)]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-Wva5F-oqSs0","executionInfo":{"status":"ok","timestamp":1652238778900,"user_tz":-540,"elapsed":317,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"3dc36254-8b70-4876-f173-bcb2af31c9bc"},"execution_count":54,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([31., 32., 33., 34., 35., 36., 37., 38., 39., 40., 41., 42., 43., 44., 45., 46., 47., 48., 49., 50., 51., 52., 53., 61., 62., 63., 64., 65., 75., 76., 77., 78., 79., 80., 81., 82., 86., 87., 88., 89., 90., 91.])"]},"metadata":{},"execution_count":54}]},{"cell_type":"code","source":["# roll_high_idx_arr\n","# wave_high_fill_[valid_high_prime_idx]\n","# roll_high_.ffill().to_numpy()[60]\n","roll_low_.ffill().to_numpy()[60]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"NAbJGwUZqmGJ","executionInfo":{"status":"ok","timestamp":1651996623696,"user_tz":-540,"elapsed":4,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"502a5ffa-ec8b-424e-eb5f-47ca611f452e"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([405.08, 405.  , 405.5 , 404.54])"]},"metadata":{},"execution_count":61}]},{"cell_type":"code","source":["# roll_list[1][60]\n","roll_list[3]"],"metadata":{"id":"73pEGYBJrMEa"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["%timeit -n1 -r1 wave_range_v10(res_df[-100000:], period1, ltf_df=None) # 23.7 s per loop\n","%timeit -n1 -r1 wave_range_v11(res_df[-100000:], period1, ltf_df=None) # 574 ms per loop"],"metadata":{"id":"Z-EokTzIqb-T"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# roll_wave_hl_v2(t_df, config, roll_hl_cnt=4)[0][-1]\n","# roll_wave_hl_v2(t_df, config, roll_hl_cnt=4)[1][50]\n","roll_list = roll_wave_hl_v3(t_df, config, roll_hl_cnt=4) # [0][60]\n","# roll_wave_hl(t_df, itv, period1)[0][150]"],"metadata":{"id":"G5jpriueRpxH"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["term_thresh1=1\n","term_thresh2=1\n","\n","itv = 'T'  # '15T'\n","\n","over_period = 3\n","\n","period1 = config.tr_set.wave_period\n","itv_num = to_itvnum(itv)\n","# print(itv_num)\n","\n","t_df = donchian_channel_v4(t_df, period1)\n","\n","dc_base_ = t_df['dc_base_{}{}'.format(itv, period1)].to_numpy()\n","# b1_dc_base_ = t_df['dc_base_{}{}'.format(itv, period1)].shift(itv_num).to_numpy()\n","\n","len_df = len(t_df)\n","len_df_range = np.arange(len_df).astype(int)\n","# short_open_res = np.ones(len_df)\n","# long_open_res = np.ones(len_df)\n","\n","data_cols = ['open', 'high', 'low', 'close']\n","open, high, low, close = [t_df[col_].to_numpy() for col_ in data_cols]\n","# b1_close = t_df.close.shift(itv_num).to_numpy()\n","\n","over_base = close > dc_base_\n","prev_over_base = pd.Series(over_base).rolling(over_period).min().shift(1).to_numpy() == 1   # min = 1 => period's all-over, max = 0\n","prev_under_base = pd.Series(over_base).rolling(over_period).max().shift(1).to_numpy() == 0  # max = 0 => period's all-under, \n","\n","# ============ modules ============ #\n","# ------ define co, cu ------ # <- point missing 과 관련해 정교해아함\n","cu_bool = prev_over_base & ~over_base\n","co_bool = prev_under_base & over_base\n","\n","cu_idx = get_index_bybool(cu_bool, len_df_range)\n","co_idx = get_index_bybool(co_bool, len_df_range)\n","\n","high_post_terms, low_post_terms, high_prime_terms_cnt, low_prime_terms_cnt, high_prime_terms, low_prime_terms, _, _ = get_terms_info_v3(cu_bool, co_bool, len_df, len_df_range, True)\n","\n","paired_cu_idx2 = high_prime_terms[:, 1]\n","paired_co_idx2 = low_prime_terms[:, 1]\n","\n","# ====== get wave_hl & terms ====== #\n","wave_high_ = np.full(len_df, np.nan)\n","wave_low_ = np.full(len_df, np.nan)\n","\n","wave_prime_highs = np.array([high[iin:iout + 1].max() for iin, iout in high_prime_terms])\n","wave_prime_lows = np.array([low[iin:iout + 1].min() for iin, iout in low_prime_terms])\n","\n","wave_high_[paired_cu_idx2] = wave_prime_highs\n","wave_low_[paired_co_idx2] = wave_prime_lows\n","\n","wave_high_fill_ = fill_arr(wave_high_)\n","wave_low_fill_ = fill_arr(wave_low_)\n","\n","# ====== get wave_hl & terms ====== #\n","wave_high_ = np.full(len_df, np.nan)\n","wave_low_ = np.full(len_df, np.nan)\n","\n","wave_prime_highs = np.array([high[iin:iout + 1].max() for iin, iout in high_prime_terms])\n","wave_prime_lows = np.array([low[iin:iout + 1].min() for iin, iout in low_prime_terms])\n","\n","wave_high_[paired_cu_idx2] = wave_prime_highs\n","wave_low_[paired_co_idx2] = wave_prime_lows\n","\n","wave_high_fill_ = fill_arr(wave_high_)\n","wave_low_fill_ = fill_arr(wave_low_)\n","\n","# # ------ Todo, update_hl 에 대해서, post_terms_hl 적용 ------ #\n","# wave_post_highs = np.array([high[iin:iout + 1].max() for iin, iout in high_terms])  # 생략전 post_terms_hl 사용\n","# wave_post_lows = np.array([low[iin:iout + 1].min() for iin, iout in low_terms])\n","\n","# update_low_cu_bool = wave_high_terms_low_ < wave_low_fill_\n","# update_high_co_bool = wave_low_terms_high_ > wave_high_fill_\n","\n","# update_paired_cu_bool = (cu_bool * update_low_cu_bool)[paired_cu_idx1]\n","# update_paired_cu_idx = paired_cu_idx1[update_paired_cu_bool]\n","# wave_high_[update_paired_cu_idx] = wave_post_highs[update_paired_cu_bool]\n","\n","# update_paired_co_bool = (co_bool * update_high_co_bool)[paired_co_idx1]\n","# update_paired_co_idx = paired_co_idx1[update_paired_co_bool]\n","# wave_low_[update_paired_co_idx] = wave_post_lows[update_paired_co_bool]\n","\n","wave_high_fill_ = fill_arr(wave_high_)\n","wave_low_fill_ = fill_arr(wave_low_)\n","\n","# wave_high_terms_low_ = np.full(len_df, np.nan)\n","# wave_low_terms_high_ = np.full(len_df, np.nan)\n","\n","# wave_high_terms_lows = np.array([low[iin:iout + 1].min() for iin, iout in high_terms])  # for point rejection, Todo, min_max 설정 항상 주의\n","# wave_low_terms_highs = np.array([high[iin:iout + 1].max() for iin, iout in low_terms])\n","\n","# wave_high_terms_low_[paired_cu_idx] = wave_high_terms_lows\n","# wave_low_terms_high_[paired_co_idx] = wave_low_terms_highs\n","\n","wave_high_terms_cnt_ = np.full(len_df, np.nan)\n","wave_low_terms_cnt_ = np.full(len_df, np.nan)\n","\n","wave_high_terms_cnt_[paired_cu_idx2] = high_prime_terms_cnt\n","wave_low_terms_cnt_[paired_co_idx2] = low_prime_terms_cnt\n","\n","wave_high_terms_cnt_fill_ = fill_arr(wave_high_terms_cnt_)\n","wave_low_terms_cnt_fill_ = fill_arr(wave_low_terms_cnt_)\n","\n","# # ------ hl_fill 의 prime_idx 를 찾아야함 ------ #\n","# b1_wave_high_fill_ = pd.Series(wave_high_fill_).shift(1).to_numpy()\n","# b1_wave_low_fill_ = pd.Series(wave_low_fill_).shift(1).to_numpy()\n","# wave_high_prime_idx = np.where((wave_high_fill_ != b1_wave_high_fill_) & ~np.isnan(wave_high_fill_), len_df_range, np.nan)\n","# wave_low_prime_idx = np.where((wave_low_fill_ != b1_wave_low_fill_) & ~np.isnan(wave_low_fill_), len_df_range, np.nan)\n","\n","# high_prime_idx_fill_ = fill_arr(wave_high_prime_idx)\n","# low_prime_idx_fill_ = fill_arr(wave_low_prime_idx)"],"metadata":{"id":"TqMmmSAGuChM","executionInfo":{"status":"ok","timestamp":1652239958704,"user_tz":-540,"elapsed":295,"user":{"displayName":"7th June","userId":"08178289703395036410"}}},"execution_count":65,"outputs":[]},{"cell_type":"code","source":["high_prime_terms"],"metadata":{"id":"50ucQUF-Jixd"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["##### legacy"],"metadata":{"id":"Q_1wJTcRYpm8"}},{"cell_type":"code","source":["  def get_roll_wave_data(valid_prime_idx, roll_idx_arr, len_df, data, roll_hl_cnt):\n","\n","    roll_data = pd.DataFrame(np.full((len_df, roll_hl_cnt), np.nan))\n","    roll_data.iloc[valid_prime_idx[roll_hl_cnt - 1:], :] = data[roll_idx_arr]  # 제한된 idx 를 제외한 row 에 roll_hl 입력\n","\n","    return roll_data.ffill().to_numpy()\n","\n","def roll_wave_hl_v4(t_df, config, roll_hl_cnt=4):\n","  \n","    wave_itv = pd.infer_freq(t_df.index)\n","    wave_period = config.tr_set.wave_period\n","\n","    len_df = len(t_df)\n","\n","    wave_high_fill_ = t_df['wave_high_fill_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","    wave_low_fill_ = t_df['wave_low_fill_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","    high_prime_idx = t_df['wave_high_prime_idx_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","    low_prime_idx = t_df['wave_low_prime_idx_{}{}'.format(wave_itv, wave_period)].to_numpy()    \n","\n","    valid_high_prime_idx = high_prime_idx[~np.isnan(high_prime_idx)].astype(int)  # roll_high 를 위한 prime_idx\n","    valid_low_prime_idx = low_prime_idx[~np.isnan(low_prime_idx)].astype(int)  # roll_low 를 위한 prime_idx\n","\n","    roll_high_idx_arr = np.array([valid_high_prime_idx[idx_ + 1 - roll_hl_cnt:idx_ + 1] for idx_ in range(len(valid_high_prime_idx)) if idx_ + 1 >= roll_hl_cnt])  # cnt 수를 만족시키기 위해 idx 제한\n","    roll_low_idx_arr = np.array([valid_low_prime_idx[idx_ + 1 - roll_hl_cnt:idx_ + 1] for idx_ in range(len(valid_low_prime_idx)) if idx_ + 1 >= roll_hl_cnt])\n","\n","    return valid_high_prime_idx, valid_low_prime_idx, roll_high_idx_arr, roll_low_idx_arr\n","\n","def roll_wave_hl_v3(t_df, config, roll_hl_cnt=4):\n","  \n","    wave_itv = pd.infer_freq(t_df.index)\n","    wave_period = config.tr_set.wave_period\n","\n","    len_df = len(t_df)\n","\n","    wave_high_fill_ = t_df['wave_high_fill_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","    wave_low_fill_ = t_df['wave_low_fill_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","    high_prime_idx = t_df['wave_high_prime_idx_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","    low_prime_idx = t_df['wave_low_prime_idx_{}{}'.format(wave_itv, wave_period)].to_numpy()    \n","    high_prime_idx_fill_ = t_df['wave_high_prime_idx_fill_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","    low_prime_idx_fill_ = t_df['wave_low_prime_idx_fill_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","\n","    valid_high_prime_idx = high_prime_idx[~np.isnan(high_prime_idx)].astype(int)  # roll_high 를 위한 prime_idx\n","    valid_low_prime_idx = low_prime_idx[~np.isnan(low_prime_idx)].astype(int)  # roll_low 를 위한 prime_idx\n","\n","    roll_high_idx_arr = np.array([valid_high_prime_idx[idx_ + 1 - roll_hl_cnt:idx_ + 1] for idx_ in range(len(valid_high_prime_idx)) if idx_ + 1 >= roll_hl_cnt])  # cnt 수를 만족시키기 위해 idx 제한\n","    roll_low_idx_arr = np.array([valid_low_prime_idx[idx_ + 1 - roll_hl_cnt:idx_ + 1] for idx_ in range(len(valid_low_prime_idx)) if idx_ + 1 >= roll_hl_cnt])\n","\n","    roll_high_ = pd.DataFrame(np.full((len_df, roll_hl_cnt), np.nan))\n","    roll_low_ = pd.DataFrame(np.full((len_df, roll_hl_cnt), np.nan))    \n","    roll_high_prime_idx_ = pd.DataFrame(np.full((len_df, roll_hl_cnt), np.nan))\n","    roll_low_prime_idx_ = pd.DataFrame(np.full((len_df, roll_hl_cnt), np.nan))\n","\n","    roll_high_.iloc[valid_high_prime_idx[roll_hl_cnt - 1:], :] = wave_high_fill_[roll_high_idx_arr]  # 제한된 idx 를 제외한 row 에 roll_hl 입력\n","    roll_low_.iloc[valid_low_prime_idx[roll_hl_cnt - 1:], :] = wave_low_fill_[roll_low_idx_arr]\n","    roll_high_prime_idx_.iloc[valid_high_prime_idx[roll_hl_cnt - 1:], :] = high_prime_idx_fill_[roll_high_idx_arr]  # 제한된 idx 를 제외한 row 에 roll_hl 입력\n","    roll_low_prime_idx_.iloc[valid_low_prime_idx[roll_hl_cnt - 1:], :] = low_prime_idx_fill_[roll_low_idx_arr]\n","\n","    return roll_high_.ffill().to_numpy(), roll_low_.ffill().to_numpy(), roll_high_prime_idx_.ffill().to_numpy(), roll_low_prime_idx_.ffill().to_numpy()  # t_df 에 hl_cnt 만큼 col 만들어야해서 numpy 로 뽑음\n","\n","\n","def wave_range_v15(res_df, config, itv='T', term_thresh1=1, term_thresh2=3):  # v2 for period1 only\n","  \n","    # itv = pd.infer_freq(t_df.index)\n","    if itv != 'T':\n","      offset = '1h' if itv != 'D' else '9h'\n","      t_df = to_htf(res_df, itv, offset=offset)\n","    else:\n","      t_df = res_df\n","\n","    period1 = config.tr_set.wave_period\n","    # print(period1)\n","\n","    itv_num = to_itvnum(itv)\n","    # print(itv_num)\n","\n","    t_df = donchian_channel_v4(t_df, period1)\n","\n","    dc_base_ = t_df['dc_base_{}{}'.format(itv, period1)].to_numpy()\n","    b1_dc_base_ = t_df['dc_base_{}{}'.format(itv, period1)].shift(itv_num).to_numpy()\n","\n","    len_df = len(t_df)\n","    len_df_range = np.arange(len_df).astype(int)\n","    # short_open_res = np.ones(len_df)\n","    # long_open_res = np.ones(len_df)\n","\n","    data_cols = ['open', 'high', 'low', 'close']\n","    open, high, low, close = [t_df[col_].to_numpy() for col_ in data_cols]\n","    b1_close = t_df.close.shift(itv_num).to_numpy()\n","\n","    # ============ modules ============ #\n","    # ------ define co, cu ------ # <- point missing 과 관련해 정교해아함\n","    cu_bool = ((b1_close > b1_dc_base_) & (dc_base_ > close)) | ((b1_close > dc_base_) & (dc_base_ > close))\n","    co_bool = (b1_close < b1_dc_base_) & (dc_base_ < close) | ((b1_close < dc_base_) & (dc_base_ < close))\n","\n","    cu_idx = get_index_bybool(cu_bool, len_df_range)  # for marking\n","    co_idx = get_index_bybool(co_bool, len_df_range)\n","\n","    # high_terms, low_terms, high_terms_cnt, low_terms_cnt = get_terms_info(cu_bool, co_bool, len_df_range)\n","    # high_terms, low_terms, high_terms_cnt, low_terms_cnt, cu_idx_term, co_idx_term = get_terms_info_v2(cu_bool, co_bool, len_df_range)\n","    high_terms, low_terms, high_terms_cnt, low_terms_cnt, cu_idx_term, co_idx_term = get_terms_info_v3(cu_bool, co_bool, len_df, len_df_range)\n","\n","    paired_cu_idx1 = high_terms[:, 1]\n","    paired_co_idx1 = low_terms[:, 1]\n","\n","    # ------ 생략 이전 terms' hl ------ #\n","    wave_high_terms_low_ = np.full(len_df, np.nan)\n","    wave_low_terms_high_ = np.full(len_df, np.nan)\n","\n","    wave_high_terms_lows = np.array([low[iin:iout + 1].min() for iin, iout in high_terms])\n","    wave_low_terms_highs = np.array([high[iin:iout + 1].max() for iin, iout in low_terms])\n","\n","    wave_high_terms_low_[paired_cu_idx1] = wave_high_terms_lows\n","    wave_low_terms_high_[paired_co_idx1] = wave_low_terms_highs\n","\n","    # ------ 생략된 cu, co 에 대한 2nd pairing 진행 ------ #\n","    # cu_bool[high_terms[:, 1][high_terms_cnt <= term_thresh]] = False\n","    # co_bool[low_terms[:, 1][low_terms_cnt <= term_thresh]] = False\n","    cu_bool[high_terms[:, 1][(high_terms_cnt <= term_thresh1) & (cu_idx_term <= term_thresh2)]] = False\n","    co_bool[low_terms[:, 1][(low_terms_cnt <= term_thresh1) & (co_idx_term <= term_thresh2)]] = False\n","\n","    # high_terms, low_terms, high_terms_cnt, low_terms_cnt = get_terms_info(cu_bool, co_bool, len_df_range)\n","    # high_terms, low_terms, high_terms_cnt, low_terms_cnt, _, _ = get_terms_info_v2(cu_bool, co_bool, len_df_range)\n","    high_post_terms, low_post_terms, high_prime_terms_cnt, low_prime_terms_cnt, high_prime_terms, low_prime_terms, _, _ = get_terms_info_v3(cu_bool,\n","                                                                                                                                          co_bool,\n","                                                                                                                                          len_df,\n","                                                                                                                                          len_df_range,\n","                                                                                                                                          True)\n","\n","    paired_cu_idx2 = high_prime_terms[:, 1]\n","    paired_co_idx2 = low_prime_terms[:, 1]\n","\n","    # ====== get wave_hl & terms ====== #\n","    wave_high_ = np.full(len_df, np.nan)\n","    wave_low_ = np.full(len_df, np.nan)\n","\n","    wave_prime_highs = np.array([high[iin:iout + 1].max() for iin, iout in high_prime_terms])\n","    wave_prime_lows = np.array([low[iin:iout + 1].min() for iin, iout in low_prime_terms])\n","\n","    wave_high_[paired_cu_idx2] = wave_prime_highs\n","    wave_low_[paired_co_idx2] = wave_prime_lows\n","\n","    wave_high_fill_ = fill_arr(wave_high_)\n","    wave_low_fill_ = fill_arr(wave_low_)\n","\n","    # ------ Todo, update_hl 에 대해서, post_terms_hl 적용 ------ #\n","    wave_post_highs = np.array([high[iin:iout + 1].max() for iin, iout in high_terms])  # 생략전 post_terms_hl 사용\n","    wave_post_lows = np.array([low[iin:iout + 1].min() for iin, iout in low_terms])\n","\n","    update_low_cu_bool = wave_high_terms_low_ < wave_low_fill_\n","    update_high_co_bool = wave_low_terms_high_ > wave_high_fill_\n","\n","    update_paired_cu_bool = (cu_bool * update_low_cu_bool)[paired_cu_idx1]\n","    update_paired_cu_idx = paired_cu_idx1[update_paired_cu_bool]\n","    wave_high_[update_paired_cu_idx] = wave_post_highs[update_paired_cu_bool]\n","\n","    update_paired_co_bool = (co_bool * update_high_co_bool)[paired_co_idx1]\n","    update_paired_co_idx = paired_co_idx1[update_paired_co_bool]\n","    wave_low_[update_paired_co_idx] = wave_post_lows[update_paired_co_bool]\n","\n","    # wave_high_fill2_ = fill_arr(wave_high_)\n","    # wave_low_fill2_ = fill_arr(wave_low_)\n","    wave_high_fill_ = fill_arr(wave_high_)\n","    wave_low_fill_ = fill_arr(wave_low_)\n","\n","    # wave_high_terms_low_ = np.full(len_df, np.nan)\n","    # wave_low_terms_high_ = np.full(len_df, np.nan)\n","\n","    # wave_high_terms_lows = np.array([low[iin:iout + 1].min() for iin, iout in high_terms])  # for point rejection, Todo, min_max 설정 항상 주의\n","    # wave_low_terms_highs = np.array([high[iin:iout + 1].max() for iin, iout in low_terms])\n","\n","    # wave_high_terms_low_[paired_cu_idx] = wave_high_terms_lows\n","    # wave_low_terms_high_[paired_co_idx] = wave_low_terms_highs\n","\n","    wave_high_terms_cnt_ = np.full(len_df, np.nan)\n","    wave_low_terms_cnt_ = np.full(len_df, np.nan)\n","\n","    wave_high_terms_cnt_[paired_cu_idx2] = high_prime_terms_cnt\n","    wave_low_terms_cnt_[paired_co_idx2] = low_prime_terms_cnt\n","\n","    wave_high_terms_cnt_fill_ = fill_arr(wave_high_terms_cnt_)\n","    wave_low_terms_cnt_fill_ = fill_arr(wave_low_terms_cnt_)\n","\n","    # ------ hl_fill 의 prime_idx 를 찾아야함 ------ #\n","    b1_wave_high_fill_ = pd.Series(wave_high_fill_).shift(1).to_numpy()\n","    b1_wave_low_fill_ = pd.Series(wave_low_fill_).shift(1).to_numpy()\n","    wave_high_prime_idx = np.where((wave_high_fill_ != b1_wave_high_fill_) & ~np.isnan(wave_high_fill_), len_df_range, np.nan)\n","    wave_low_prime_idx = np.where((wave_low_fill_ != b1_wave_low_fill_) & ~np.isnan(wave_low_fill_), len_df_range, np.nan)\n","\n","    high_prime_idx_fill_ = fill_arr(wave_high_prime_idx)\n","    low_prime_idx_fill_ = fill_arr(wave_low_prime_idx)\n","\n","    # ============ enlist to df_cols ============ #\n","    t_df['wave_high_fill_{}{}'.format(itv, period1)] = wave_high_fill_\n","    t_df['wave_low_fill_{}{}'.format(itv, period1)] = wave_low_fill_\n","    # t_df['wave_high_fill2_{}{}'.format(itv, period1)] = wave_high_fill2_\n","    # t_df['wave_low_fill2_{}{}'.format(itv, period1)] = wave_low_fill2_\n","\n","    t_df['wave_high_terms_cnt_fill_{}{}'.format(itv, period1)] = wave_high_terms_cnt_fill_\n","    t_df['wave_low_terms_cnt_fill_{}{}'.format(itv, period1)] = wave_low_terms_cnt_fill_\n","    t_df['wave_cu_{}{}'.format(itv, period1)] = cu_bool * ~update_low_cu_bool\n","    t_df['wave_co_{}{}'.format(itv, period1)] = co_bool * ~update_high_co_bool\n","    t_df['wave_cu_bool_{}{}'.format(itv, period1)] = cu_bool  # temporary, for plot_check\n","    t_df['wave_co_bool_{}{}'.format(itv, period1)] = co_bool\n","    t_df['wave_cu_marker_{}{}'.format(itv, period1)] = get_line(cu_idx, dc_base_)\n","    t_df['wave_co_marker_{}{}'.format(itv, period1)] = get_line(co_idx, dc_base_)\n","\n","    # ------ for roll prev_hl ------ #\n","    t_df['wave_high_prime_idx_{}{}'.format(itv, period1)] = wave_high_prime_idx  # cu\n","    t_df['wave_low_prime_idx_{}{}'.format(itv, period1)] = wave_low_prime_idx\n","\n","    # ------ for first_high ------ #\n","    t_df['wave_high_prime_idx_fill_{}{}'.format(itv, period1)] = high_prime_idx_fill_\n","    t_df['wave_low_prime_idx_fill_{}{}'.format(itv, period1)] = low_prime_idx_fill_\n","    \n","    if itv != 'T':\n","        join_cols = np.arange(-17, 0, 1).astype(int)  # points & donchian_channels\n","        res_df.drop(t_df.columns[join_cols], inplace=True, axis=1, errors='ignore')\n","        try:\n","            res_df = res_df.join(to_lower_tf_v3(res_df, t_df, join_cols), how='inner')\n","        except Exception as e:\n","            print(\"error in wave_range()'s join() :\", e)\n","            \n","        return res_df\n","\n","    else:\n","        return t_df\n","\n","\n","def wave_range_ratio_v3(res_df, config):\n","    wave_itv = pd.infer_freq(res_df.index)\n","    wave_period = config.tr_set.wave_period\n","\n","    roll_high_, roll_low_, _, _ = roll_wave_hl_v3(res_df, config, roll_hl_cnt=4)\n","\n","    wave1_range = roll_high_[:, -2] - roll_low_[:, -2]\n","    cu_wave2_range = roll_high_[:, -2] - roll_low_[:, -1]  # for short, cu\n","    co_wave2_range = roll_high_[:, -1] - roll_low_[:, -2]  # for long, co\n","    wave3_range = roll_high_[:, -1] - roll_low_[:, -1]\n","\n","    res_df['cu_wrr_21_{}{}'.format(wave_itv, wave_period)] = cu_wave2_range / wave1_range\n","    res_df['cu_wrr_32_{}{}'.format(wave_itv, wave_period)] = wave3_range / cu_wave2_range\n","\n","    res_df['co_wrr_21_{}{}'.format(wave_itv, wave_period)] = co_wave2_range / wave1_range\n","    res_df['co_wrr_32_{}{}'.format(wave_itv, wave_period)] = wave3_range / co_wave2_range\n","\n","    return res_df\n","\n","def get_terms_info_v3(cu_bool, co_bool, len_df, len_df_range, prime_terms=False):\n","    cu_idx = get_index_bybool(cu_bool, len_df_range)\n","    co_idx = get_index_bybool(co_bool, len_df_range)\n","\n","    cu_fill_idx = fill_arr(cu_idx)\n","    co_fill_idx = fill_arr(co_idx)\n","\n","    notnan_cu_bool = ~np.isnan(cu_idx)\n","    notnan_co_bool = ~np.isnan(co_idx)\n","\n","    valid_cu_bool = notnan_cu_bool * ~np.isnan(co_fill_idx)\n","    valid_co_bool = notnan_co_bool * ~np.isnan(cu_fill_idx)\n","\n","    if prime_terms:\n","        # ------ 생략된 idx 에 대한 prime_idx 탐색 ------ #\n","        high_bool = cu_fill_idx < co_fill_idx  # 이렇게 해야 high_terms[:, 1] 이 cu_idx 가 나옴\n","        low_bool = co_fill_idx < cu_fill_idx\n","\n","        high_terms_vec = get_index_bybool(high_bool, len_df_range)\n","        low_terms_vec = get_index_bybool(low_bool, len_df_range)  # -> low_terms\n","\n","        high_terms_list = using_clump(high_terms_vec)\n","        low_terms_list = using_clump(low_terms_vec)\n","\n","        valid_cu_prime_idx = np.array([terms.min() for terms in low_terms_list])\n","        valid_co_prime_idx = np.array([terms.min() for terms in high_terms_list])\n","\n","        cu_prime_idx = np.full(len_df, np.nan)\n","        co_prime_idx = np.full(len_df, np.nan)\n","\n","        cu_prime_idx[valid_cu_prime_idx] = valid_cu_prime_idx\n","        co_prime_idx[valid_co_prime_idx] = valid_co_prime_idx\n","\n","        cu_prime_fill_idx = fill_arr(cu_prime_idx)\n","        co_prime_fill_idx = fill_arr(co_prime_idx)\n","\n","        valid_cu_bool *= ~np.isnan(co_prime_fill_idx)\n","        valid_co_bool *= ~np.isnan(cu_prime_fill_idx)\n","\n","    high_post_terms = np.vstack((co_fill_idx[valid_cu_bool], cu_idx[valid_cu_bool])).T.astype(int)\n","    low_post_terms = np.vstack((cu_fill_idx[valid_co_bool], co_idx[valid_co_bool])).T.astype(int)\n","\n","    high_post_terms_cnt = high_post_terms[:, 1] - high_post_terms[:, 0]\n","    low_post_terms_cnt = low_post_terms[:, 1] - low_post_terms[:, 0]\n","\n","    # ------ co, cu idx's terms ------ #\n","    valid_cu_idx = cu_idx[valid_cu_bool]\n","    valid_co_idx = co_idx[valid_co_bool]\n","    valid_shift_cu_idx = pd.Series(valid_cu_idx).shift(1).to_numpy()\n","    valid_shift_co_idx = pd.Series(valid_co_idx).shift(1).to_numpy()\n","\n","    cu_idx_term = valid_cu_idx - valid_shift_cu_idx\n","    co_idx_term = valid_co_idx - valid_shift_co_idx\n","\n","    # ------ get co, cu terms_v2 ------ # # 기본은 아래 logic 으로 수행하고, update_hl 도 해당 term 구간의 hl 이 더 작거나 클경우 적용 가능할 것\n","    if prime_terms:\n","        high_prime_terms = np.vstack((co_prime_fill_idx[valid_cu_bool], cu_idx[valid_cu_bool])).T.astype(int)\n","        low_prime_terms = np.vstack((cu_prime_fill_idx[valid_co_bool], co_idx[valid_co_bool])).T.astype(int)\n","        \n","        high_prime_terms_cnt = high_prime_terms[:, 1] - high_prime_terms[:, 0]\n","        low_prime_terms_cnt = low_prime_terms[:, 1] - low_prime_terms[:, 0]\n","\n","        return high_post_terms, low_post_terms, high_prime_terms_cnt, low_prime_terms_cnt, high_prime_terms, low_prime_terms, cu_idx_term, co_idx_term\n","\n","    return high_post_terms, low_post_terms, high_post_terms_cnt, low_post_terms_cnt, cu_idx_term, co_idx_term\n","  \n","def wave_range_ratio_v2(res_df, config):\n","\n","    wave_itv = pd.infer_freq(res_df.index)\n","    wave_period = config.tr_set.wave_period\n","\n","    roll_high_, roll_low_ = roll_wave_hl_v2(res_df, config, roll_hl_cnt=4)\n","    \n","    wave1_range = roll_high_[:, -2] - roll_low_[:, -2]\n","    cu_wave2_range = roll_high_[:, -2] - roll_low_[:, -1]  # for short, cu\n","    co_wave2_range = roll_high_[:, -1] - roll_low_[:, -2]  # for long, co\n","    wave3_range = roll_high_[:, -1] - roll_low_[:, -1]\n","\n","    res_df['cu_wrr_21_{}{}'.format(wave_itv, wave_period)] = cu_wave2_range / wave1_range\n","    res_df['cu_wrr_32_{}{}'.format(wave_itv, wave_period)] = wave3_range / cu_wave2_range\n","\n","    res_df['co_wrr_21_{}{}'.format(wave_itv, wave_period)] = co_wave2_range / wave1_range\n","    res_df['co_wrr_32_{}{}'.format(wave_itv, wave_period)] = wave3_range / co_wave2_range\n","\n","    return res_df\n","    \n","def roll_wave_hl(t_df, config, roll_hl_cnt=4):\n","  \n","    wave_itv = pd.infer_freq(t_df.index)\n","    wave_period = config.tr_set.wave_period\n","\n","    len_df = len(t_df)\n","\n","    wave_high_fill_ = t_df['wave_high_fill_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","    wave_low_fill_ = t_df['wave_low_fill_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","    cu_prime_idx = t_df['wave_cu_prime_idx_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","    co_prime_idx = t_df['wave_co_prime_idx_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","\n","    valid_cu_prime_idx = cu_prime_idx[~np.isnan(cu_prime_idx)].astype(int)  # -> 필요한 prev_hl 갯수만큼 각 index 기준으로 자르기\n","    valid_co_prime_idx = co_prime_idx[~np.isnan(co_prime_idx)].astype(int)  # -> 필요한 prev_hl 갯수만큼 각 index 기준으로 자르기\n","\n","    cu_roll_hl_idx_arr = np.array(\n","        [valid_cu_prime_idx[idx_ + 1 - roll_hl_cnt:idx_ + 1] for idx_ in range(len(valid_cu_prime_idx)) if idx_ + 1 >= roll_hl_cnt])\n","    co_roll_hl_idx_arr = np.array(\n","        [valid_co_prime_idx[idx_ + 1 - roll_hl_cnt:idx_ + 1] for idx_ in range(len(valid_co_prime_idx)) if idx_ + 1 >= roll_hl_cnt])\n","\n","    cu_roll_high_ = pd.DataFrame(np.full((len_df, roll_hl_cnt), np.nan))\n","    cu_roll_low_ = pd.DataFrame(np.full((len_df, roll_hl_cnt), np.nan))\n","    co_roll_high_ = pd.DataFrame(np.full((len_df, roll_hl_cnt), np.nan))\n","    co_roll_low_ = pd.DataFrame(np.full((len_df, roll_hl_cnt), np.nan))\n","\n","    cu_roll_high_.iloc[valid_cu_prime_idx[roll_hl_cnt - 1:], :] = wave_high_fill_[cu_roll_hl_idx_arr]\n","    cu_roll_low_.iloc[valid_cu_prime_idx[roll_hl_cnt - 1:], :] = wave_low_fill_[cu_roll_hl_idx_arr]\n","    co_roll_high_.iloc[valid_co_prime_idx[roll_hl_cnt - 1:], :] = wave_high_fill_[co_roll_hl_idx_arr]\n","    co_roll_low_.iloc[valid_co_prime_idx[roll_hl_cnt - 1:], :] = wave_low_fill_[co_roll_hl_idx_arr]\n","\n","    return cu_roll_high_.ffill().to_numpy(), cu_roll_low_.ffill().to_numpy(), co_roll_high_.ffill().to_numpy(), co_roll_low_.ffill().to_numpy()  # t_df 에 hl_cnt 만큼 col 만들어야해서 numpy 로 뽑음\n","\n","def backing_future_data(res_df, future_cols, itv_list): # itv 자동 조사 가능 ? (future_work)\n","  \n","    for col_, itv_ in zip(future_cols, itv_list):\n","        back_col_ = 'b1_' + col_\n","        res_df[back_col_] = res_df[col_].shift(to_itvnum(itv_))\n","\n","    return res_df\n","\n","\n","\n","def wave_loc_pct_v2(res_df, config, itv, period):\n","\n","    wave_itv = pd.infer_freq(res_df.index)\n","    wave_period = config.tr_set.wave_period\n","\n","    wave_high_fill_ = res_df['wave_high_fill_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","    wave_low_fill_ = res_df['wave_low_fill_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","\n","    bb_upper_ = res_df['bb_upper_{}{}'.format(itv, period)].to_numpy()\n","    bb_lower_ = res_df['bb_lower_{}{}'.format(itv, period)].to_numpy()\n","\n","    bb_gap = bb_upper_ - bb_lower_\n","    \n","    cu_prime_idx_fill_ = res_df['wave_cu_prime_idx_fill_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","    co_prime_idx_fill_ = res_df['wave_co_prime_idx_fill_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","    cu_prime_bb_gap = get_line(cu_prime_idx_fill_, bb_gap)\n","    co_prime_bb_gap = get_line(co_prime_idx_fill_, bb_gap)\n","\n","    res_df['wave_high_loc_pct_{}{}'.format(wave_itv, wave_period)] = (bb_upper_ - wave_high_fill_) / cu_prime_bb_gap\n","    res_df['wave_low_loc_pct_{}{}'.format(wave_itv, wave_period)] = (wave_low_fill_ - bb_lower_) / co_prime_bb_gap\n","\n","    return res_df\n","\n","def wave_loc_pct(res_df, config, itv, period):\n","\n","    wave_itv = pd.infer_freq(res_df.index)\n","    wave_period = config.tr_set.wave_period\n","\n","    wave_high_fill_ = res_df['wave_high_fill_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","    wave_low_fill_ = res_df['wave_low_fill_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","\n","    bb_upper_ = res_df['bb_upper_{}{}'.format(itv, period)].to_numpy()\n","    bb_lower_ = res_df['bb_lower_{}{}'.format(itv, period)].to_numpy()\n","\n","    bb_gap = bb_upper_ - bb_lower_\n","\n","    res_df['wave_high_loc_pct_{}{}'.format(wave_itv, wave_period)] = (bb_upper_ - wave_high_fill_) / bb_gap\n","    res_df['wave_low_loc_pct_{}{}'.format(wave_itv, wave_period)] = (wave_low_fill_ - bb_lower_) / bb_gap\n","\n","    return res_df\n","\n","\n","def get_terms_info_v2(cu_bool, co_bool, len_df_range):\n","\n","    cu_idx = get_index_bybool(cu_bool, len_df_range)\n","    co_idx = get_index_bybool(co_bool, len_df_range)\n","\n","    cu_fill_idx = fill_arr(cu_idx)\n","    co_fill_idx = fill_arr(co_idx)\n","\n","    notnan_cu_bool = ~np.isnan(cu_idx)\n","    notnan_co_bool = ~np.isnan(co_idx)\n","  \n","    # ------ get co, cu terms_v2 ------ # # 기본은 아래 logic 으로 수행하고, update_hl 도 해당 term 구간의 hl 이 더 작거나 클경우 적용 가능할 것    \n","    valid_cu_bool = notnan_cu_bool * ~np.isnan(co_fill_idx)  # co 와 pair 가 가능한 cu_idx\n","    valid_co_bool = notnan_co_bool * ~np.isnan(cu_fill_idx)\n","\n","    high_terms = np.vstack((co_fill_idx[valid_cu_bool], cu_idx[valid_cu_bool])).T.astype(int)\n","    low_terms = np.vstack((cu_fill_idx[valid_co_bool], co_idx[valid_co_bool])).T.astype(int)\n","\n","    high_terms_cnt = high_terms[:, 1] - high_terms[:, 0] \n","    low_terms_cnt = low_terms[:, 1] - low_terms[:, 0] \n","\n","    # valid_cu_idx = cu_idx[notnan_cu_bool]\n","    # valid_co_idx = co_idx[notnan_co_bool]\n","    valid_cu_idx = cu_idx[valid_cu_bool]\n","    valid_co_idx = co_idx[valid_co_bool]\n","    valid_shift_cu_idx = pd.Series(valid_cu_idx).shift(1).to_numpy()\n","    valid_shift_co_idx = pd.Series(valid_co_idx).shift(1).to_numpy()\n","\n","    cu_idx_term = valid_cu_idx - valid_shift_cu_idx\n","    co_idx_term = valid_co_idx - valid_shift_co_idx\n","\n","    return high_terms, low_terms, high_terms_cnt, low_terms_cnt, cu_idx_term, co_idx_term\n","\n","def get_terms_info(cu_bool, co_bool, len_df_range):\n","\n","    cu_idx = get_index_bybool(cu_bool, len_df_range)\n","    co_idx = get_index_bybool(co_bool, len_df_range)\n","\n","    cu_fill_idx = fill_arr(cu_idx)\n","    co_fill_idx = fill_arr(co_idx)\n","  \n","    # ------ get co, cu terms_v2 ------ # # 기본은 아래 logic 으로 수행하고, update_hl 도 해당 term 구간의 hl 이 더 작거나 클경우 적용 가능할 것\n","    valid_cu_idx = ~np.isnan(cu_idx) * ~np.isnan(co_fill_idx)\n","    valid_co_idx = ~np.isnan(co_idx) * ~np.isnan(cu_fill_idx)\n","\n","    high_terms = np.vstack((co_fill_idx[valid_cu_idx], cu_idx[valid_cu_idx])).T.astype(int)\n","    low_terms = np.vstack((cu_fill_idx[valid_co_idx], co_idx[valid_co_idx])).T.astype(int)\n","\n","    high_terms_cnt = high_terms[:, 1] - high_terms[:, 0] \n","    low_terms_cnt = low_terms[:, 1] - low_terms[:, 0] \n","\n","    return high_terms, low_terms, high_terms_cnt, low_terms_cnt\n","\n","\n","\n","def wave_range_v13(t_df, config, ltf_df=None, term_thresh=2):  # v2 for period1 only\n","\n","    itv = pd.infer_freq(t_df.index)\n","    period1 = config.tr_set.wave_period\n","    # print(period1)\n","\n","    itv_num = to_itvnum(itv)\n","    # print(itv_num)\n","\n","    t_df = donchian_channel_v4(t_df, period1) \n","\n","    dc_base_ = t_df['dc_base_{}{}'.format(itv, period1)].to_numpy()\n","    b1_dc_base_ = t_df['dc_base_{}{}'.format(itv, period1)].shift(itv_num).to_numpy()\n","\n","    len_df = len(t_df)   \n","    len_df_range = np.arange(len_df).astype(int)\n","    # short_open_res = np.ones(len_df)\n","    # long_open_res = np.ones(len_df)\n","\n","    data_cols = ['open', 'high', 'low', 'close']\n","    open, high, low, close = [t_df[col_].to_numpy() for col_ in data_cols]\n","    b1_close = t_df.close.shift(itv_num).to_numpy()\n","    \n","    # ============ modules ============ #  \n","    # ------ define co, cu ------ # <- point missing 과 관련해 정교해아함\n","    cu_bool = ((b1_close > b1_dc_base_) & (dc_base_ > close)) | ((b1_close > dc_base_) & (dc_base_ > close))\n","    co_bool = (b1_close < b1_dc_base_) & (dc_base_ < close) | ((b1_close < dc_base_) & (dc_base_ < close))\n","\n","    cu_idx = get_index_bybool(cu_bool, len_df_range)   # for marking\n","    co_idx = get_index_bybool(co_bool, len_df_range)\n","\n","    high_terms, low_terms, high_terms_cnt, low_terms_cnt = get_terms_info(cu_bool, co_bool, len_df_range)\n","\n","    paired_cu_idx = high_terms[:, 1]\n","    paired_co_idx = low_terms[:, 1]\n","\n","    # ------ 생략 이전 terms' hl ------ #\n","    wave_high_terms_low_ = np.full(len_df, np.nan)\n","    wave_low_terms_high_ = np.full(len_df, np.nan)\n","\n","    wave_high_terms_lows = np.array([low[iin:iout + 1].min() for iin, iout in high_terms])\n","    wave_low_terms_highs = np.array([high[iin:iout + 1].max() for iin, iout in low_terms])  \n","\n","    wave_high_terms_low_[paired_cu_idx] = wave_high_terms_lows\n","    wave_low_terms_high_[paired_co_idx] = wave_low_terms_highs\n","\n","    # ------ 생략된 cu, co 에 대한 2nd pairing 진행 ------ #\n","    cu_bool[high_terms[:, 1][high_terms_cnt <= term_thresh]] = False\n","    co_bool[low_terms[:, 1][low_terms_cnt <= term_thresh]] = False  \n","    high_terms, low_terms, high_terms_cnt, low_terms_cnt = get_terms_info(cu_bool, co_bool, len_df_range)\n","    \n","    paired_cu_idx = high_terms[:, 1]\n","    paired_co_idx = low_terms[:, 1]\n","\n","    # ====== get wave_hl & terms ====== #\n","    wave_high_ = np.full(len_df, np.nan)\n","    wave_low_ = np.full(len_df, np.nan)\n","\n","    wave_highs = np.array([high[iin:iout + 1].max() for iin, iout in high_terms])\n","    wave_lows = np.array([low[iin:iout + 1].min() for iin, iout in low_terms])\n","\n","    wave_high_[paired_cu_idx] = wave_highs\n","    wave_low_[paired_co_idx] = wave_lows\n","\n","    wave_high_fill_ = fill_arr(wave_high_)\n","    wave_low_fill_ = fill_arr(wave_low_)\n","\n","    # wave_high_terms_low_ = np.full(len_df, np.nan)\n","    # wave_low_terms_high_ = np.full(len_df, np.nan)\n","\n","    # wave_high_terms_lows = np.array([low[iin:iout + 1].min() for iin, iout in high_terms])  # for point rejection, Todo, min_max 설정 항상 주의\n","    # wave_low_terms_highs = np.array([high[iin:iout + 1].max() for iin, iout in low_terms])\n","\n","    # wave_high_terms_low_[paired_cu_idx] = wave_high_terms_lows\n","    # wave_low_terms_high_[paired_co_idx] = wave_low_terms_highs\n","\n","    wave_high_terms_cnt_ = np.full(len_df, np.nan)\n","    wave_low_terms_cnt_ = np.full(len_df, np.nan)\n","\n","    wave_high_terms_cnt_[paired_cu_idx] = high_terms_cnt\n","    wave_low_terms_cnt_[paired_co_idx] = low_terms_cnt\n","\n","    wave_high_terms_cnt_fill_ = fill_arr(wave_high_terms_cnt_)\n","    wave_low_terms_cnt_fill_ = fill_arr(wave_low_terms_cnt_)\n","    \n","    # ------ hl_fill 의 prime_idx 를 찾아야함 ------ # \n","    b1_wave_high_fill_ = pd.Series(wave_high_fill_).shift(1).to_numpy()\n","    b1_wave_low_fill_ = pd.Series(wave_low_fill_).shift(1).to_numpy()\n","    wave_high_prime_idx = np.where((wave_high_fill_ != b1_wave_high_fill_) & ~np.isnan(wave_high_fill_), len_df_range, np.nan)\n","    wave_low_prime_idx = np.where((wave_low_fill_ != b1_wave_low_fill_) & ~np.isnan(wave_low_fill_), len_df_range, np.nan)\n","\n","    cu_prime_idx = wave_high_prime_idx\n","    cu_prime_idx_fill_ = fill_arr(cu_prime_idx)\n","\n","    co_prime_idx = wave_low_prime_idx\n","    co_prime_idx_fill_ = fill_arr(wave_low_prime_idx)  \n","\n","    # ============ enlist to df_cols ============ #       \n","    t_df['wave_high_fill_{}{}'.format(itv, period1)] = wave_high_fill_\n","    t_df['wave_low_fill_{}{}'.format(itv, period1)] = wave_low_fill_\n","\n","    t_df['wave_high_terms_cnt_fill_{}{}'.format(itv, period1)] = wave_high_terms_cnt_fill_\n","    t_df['wave_low_terms_cnt_fill_{}{}'.format(itv, period1)] = wave_low_terms_cnt_fill_\n","    t_df['wave_cu_{}{}'.format(itv, period1)] = cu_bool * (wave_high_terms_low_ >= wave_low_fill_)   # co ~ cu’s low 가 wave_low 갱신할 경우 point 에서 제외\n","    t_df['wave_co_{}{}'.format(itv, period1)] = co_bool * (wave_low_terms_high_ <= wave_high_fill_)\n","    t_df['wave_cu_bool_{}{}'.format(itv, period1)] = cu_bool   # temporary, for plot_check\n","    t_df['wave_co_bool_{}{}'.format(itv, period1)] = co_bool\n","    t_df['wave_cu_marker_{}{}'.format(itv, period1)] = get_line(cu_idx, dc_base_)\n","    t_df['wave_co_marker_{}{}'.format(itv, period1)] = get_line(co_idx, dc_base_)\n","\n","    # ------ for roll prev_hl ------ # \n","    t_df['wave_cu_prime_idx_{}{}'.format(itv, period1)] = cu_prime_idx\n","    t_df['wave_co_prime_idx_{}{}'.format(itv, period1)] = co_prime_idx\n","    \n","    # ------ for first_high ------ # \n","    t_df['wave_cu_prime_idx_fill_{}{}'.format(itv, period1)] = cu_prime_idx_fill_\n","    t_df['wave_co_prime_idx_fill_{}{}'.format(itv, period1)] = co_prime_idx_fill_\n","      \n","    if itv != 'T':\n","      assert ltf_df is not None, \"assert ltf_df is not None\"\n","      join_cols = np.arange(-15, 0 ,1).astype(int)  # points & donchian_channels\n","      ltf_df.drop(t_df.columns[join_cols], inplace=True, axis=1, errors='ignore')\n","      try:\n","        ltf_df = ltf_df.join(to_lower_tf_v2(ltf_df, t_df, join_cols), how='inner')\n","      except Exception as e:\n","        print(\"error in wave_range()'s join() :\", e)\n","    else:\n","      ltf_df = t_df    \n","\n","    return ltf_df\n"],"metadata":{"id":"841i4oo2abh-"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["##### dump"],"metadata":{"id":"02DcTVB2cYuR"}},{"cell_type":"code","source":["# t_df\n","to_lower_tf_v2(res_df, t_df, join_cols)"],"metadata":{"id":"3vHLGont-BFe"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["wave_post_highs = np.array([high[iin:iout + 1].max() for iin, iout in high_post_terms])\n","wave_post_lows = np.array([low[iin:iout + 1].min() for iin, iout in low_post_terms])\n","\n","# print(len(paired_cu_idx))\n","# print(len(wave_post_highs))\n","# print(len(cu_bool))\n","\n","update_paired_cu_bool = (cu_bool * (wave_high_terms_low_ < wave_low_fill_))[paired_cu_idx]\n","update_paired_cu_idx = paired_cu_idx[update_paired_cu_bool]\n","wave_high_[update_paired_cu_idx] = wave_post_highs[update_paired_cu_bool]\n","\n","update_paired_co_bool = (co_bool * (wave_low_terms_high_ > wave_high_fill_))[paired_co_idx]\n","update_paired_co_idx = paired_co_idx[update_paired_co_bool]\n","wave_low_[update_paired_co_idx] = wave_post_lows[update_paired_co_bool]\n","\n","wave_high_fill2_ = fill_arr(wave_high_)\n","wave_low_fill2_ = fill_arr(wave_low_)"],"metadata":{"id":"Mh3w2s-j34Zs"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# wave_post_highs\n","# update_cu_bool = (cu_bool * (wave_high_terms_low_ < wave_low_fill_))[paired_cu_idx]\n","# print(paired_cu_idx[update_cu_bool])\n","# print(paired_cu_idx)\n","print(len(update_paired_cu_idx))\n","print(len(wave_post_highs[update_paired_cu_bool]))\n","# print(high_prime_terms[:, 1])\n","# print(high_post_terms[:, 1])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"eQ06-kWq4m6F","executionInfo":{"status":"ok","timestamp":1651799326382,"user_tz":-540,"elapsed":3,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"5c5df956-4fbd-4aa4-e1d6-dc5d0c23ac19"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["11\n","11\n"]}]},{"cell_type":"code","source":["cu_idx = get_index_bybool(cu_bool, len_df_range)\n","co_idx = get_index_bybool(co_bool, len_df_range)\n","\n","cu_fill_idx = fill_arr(cu_idx)\n","co_fill_idx = fill_arr(co_idx)\n","\n","notnan_cu_bool = ~np.isnan(cu_idx)\n","notnan_co_bool = ~np.isnan(co_idx)\n","\n","# ------ 생략된 idx 에 대한 prime_idx 탐색 ------ #\n","high_bool = cu_fill_idx < co_fill_idx  # 이렇게 해야 high_terms[:, 1] 이 cu_idx 가 나옴\n","low_bool = co_fill_idx < cu_fill_idx\n","\n","high_terms_vec = get_index_bybool(high_bool, len_df_range)\n","low_terms_vec = get_index_bybool(low_bool, len_df_range) # -> low_terms\n","\n","high_terms_list = using_clump(high_terms_vec)\n","low_terms_list = using_clump(low_terms_vec)\n","\n","valid_cu_prime_idx = np.array([terms.min() for terms in low_terms_list])\n","valid_co_prime_idx = np.array([terms.min() for terms in high_terms_list])\n","\n","cu_prime_idx = np.full(len_df, np.nan)\n","co_prime_idx = np.full(len_df, np.nan)\n","\n","cu_prime_idx[valid_cu_prime_idx] = valid_cu_prime_idx\n","co_prime_idx[valid_co_prime_idx] = valid_co_prime_idx\n","\n","cu_prime_fill_idx = fill_arr(cu_prime_idx)\n","co_prime_fill_idx = fill_arr(co_prime_idx)\n","\n","# ------ get co, cu terms_v2 ------ # # 기본은 아래 logic 으로 수행하고, update_hl 도 해당 term 구간의 hl 이 더 작거나 클경우 적용 가능할 것\n","valid_cu_bool = notnan_cu_bool * ~np.isnan(co_fill_idx) * ~np.isnan(co_prime_fill_idx)\n","valid_co_bool = notnan_co_bool * ~np.isnan(cu_fill_idx) * ~np.isnan(cu_prime_fill_idx)\n","\n","high_post_terms = np.vstack((co_fill_idx[valid_cu_bool], cu_idx[valid_cu_bool])).T.astype(int)\n","low_post_terms = np.vstack((cu_fill_idx[valid_co_bool], co_idx[valid_co_bool])).T.astype(int)\n","\n","high_terms_cnt = high_post_terms[:, 1] - high_post_terms[:, 0] \n","low_terms_cnt = low_post_terms[:, 1] - low_post_terms[:, 0] \n","\n","high_prime_terms = np.vstack((co_prime_fill_idx[valid_cu_bool], cu_idx[valid_cu_bool])).T.astype(int)\n","low_prime_terms = np.vstack((cu_prime_fill_idx[valid_co_bool], co_idx[valid_co_bool])).T.astype(int)"],"metadata":{"id":"SUFmr9Z_kcCN"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# co_prime_idx\n","# co_prime_fill_idx\n","high_prime_terms"],"metadata":{"id":"_3pOQtt2ttfk"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#  get_index_bybool(notnan_cu_bool, len_df_range)\n","valid_cu_idx = cu_idx[notnan_cu_bool]\n","valid_shift_cu_idx = pd.Series(valid_cu_idx).shift(1).to_numpy()\n","valid_co_idx = co_idx[notnan_co_bool]\n","valid_shift_co_idx = pd.Series(valid_co_idx).shift(1).to_numpy()\n","\n","valid_cu_idx - valid_shift_cu_idx\n","valid_co_idx - valid_shift_co_idx"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"kKaD1fK3WPRP","executionInfo":{"status":"ok","timestamp":1651756811396,"user_tz":-540,"elapsed":6,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"bbe470f3-17d0-4029-97e9-2fb383a0c752"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([nan,  2.,  7.,  2.,  4.,  2.,  7.,  5.,  4.,  6.,  9.,  2.,  5., 11., 14.])"]},"metadata":{},"execution_count":79}]},{"cell_type":"code","source":["def wave_range_v14(t_df, config, ltf_df=None, term_thresh1=1, term_thresh2=3):  # v2 for period1 only\n","\n","  itv = pd.infer_freq(t_df.index)\n","  period1 = config.tr_set.wave_period\n","  # print(period1)\n","\n","  itv_num = to_itvnum(itv)\n","  # print(itv_num)\n","\n","  t_df = donchian_channel_v4(t_df, period1) \n","\n","  dc_base_ = t_df['dc_base_{}{}'.format(itv, period1)].to_numpy()\n","  b1_dc_base_ = t_df['dc_base_{}{}'.format(itv, period1)].shift(itv_num).to_numpy()\n","\n","  len_df = len(t_df)   \n","  len_df_range = np.arange(len_df).astype(int)\n","  # short_open_res = np.ones(len_df)\n","  # long_open_res = np.ones(len_df)\n","\n","  data_cols = ['open', 'high', 'low', 'close']\n","  open, high, low, close = [t_df[col_].to_numpy() for col_ in data_cols]\n","  b1_close = t_df.close.shift(itv_num).to_numpy()\n","  \n","  # ============ modules ============ #  \n","  # ------ define co, cu ------ # <- point missing 과 관련해 정교해아함\n","  cu_bool = ((b1_close > b1_dc_base_) & (dc_base_ > close)) | ((b1_close > dc_base_) & (dc_base_ > close))\n","  co_bool = (b1_close < b1_dc_base_) & (dc_base_ < close) | ((b1_close < dc_base_) & (dc_base_ < close))\n","\n","  cu_idx = get_index_bybool(cu_bool, len_df_range)   # for marking\n","  co_idx = get_index_bybool(co_bool, len_df_range)\n","\n","  # high_terms, low_terms, high_terms_cnt, low_terms_cnt = get_terms_info(cu_bool, co_bool, len_df_range)\n","  # high_terms, low_terms, high_terms_cnt, low_terms_cnt, cu_idx_term, co_idx_term = get_terms_info_v2(cu_bool, co_bool, len_df_range)\n","  high_terms, low_terms, high_terms_cnt, low_terms_cnt, cu_idx_term, co_idx_term = get_terms_info_v3(cu_bool, co_bool, len_df_range)\n","\n","  paired_cu_idx = high_terms[:, 1]\n","  paired_co_idx = low_terms[:, 1]\n","\n","  # ------ 생략 이전 terms' hl ------ #\n","  wave_high_terms_low_ = np.full(len_df, np.nan)\n","  wave_low_terms_high_ = np.full(len_df, np.nan)\n","\n","  wave_high_terms_lows = np.array([low[iin:iout + 1].min() for iin, iout in high_terms])\n","  wave_low_terms_highs = np.array([high[iin:iout + 1].max() for iin, iout in low_terms])  \n","\n","  wave_high_terms_low_[paired_cu_idx] = wave_high_terms_lows\n","  wave_low_terms_high_[paired_co_idx] = wave_low_terms_highs\n","\n","  # ------ 생략된 cu, co 에 대한 2nd pairing 진행 ------ #\n","  # cu_bool[high_terms[:, 1][high_terms_cnt <= term_thresh]] = False\n","  # co_bool[low_terms[:, 1][low_terms_cnt <= term_thresh]] = False  \n","  cu_bool[high_terms[:, 1][(high_terms_cnt <= term_thresh1) & (cu_idx_term <= term_thresh2)]] = False\n","  co_bool[low_terms[:, 1][(low_terms_cnt <= term_thresh1) & (co_idx_term <= term_thresh2)]] = False  \n","\n","  # high_terms, low_terms, high_terms_cnt, low_terms_cnt = get_terms_info(cu_bool, co_bool, len_df_range)\n","  # high_terms, low_terms, high_terms_cnt, low_terms_cnt, _, _ = get_terms_info_v2(cu_bool, co_bool, len_df_range)\n","  high_post_terms, low_post_terms, high_terms_cnt, low_terms_cnt, high_prime_terms, low_prime_terms, cu_idx_term, co_idx_term = get_terms_info_v3(cu_bool, co_bool, len_df_range)\n","  \n","  paired_cu_idx = high_prime_terms[:, 1]\n","  paired_co_idx = low_prime_terms[:, 1]\n","\n","  # ====== get wave_hl & terms ====== #\n","  wave_high_ = np.full(len_df, np.nan)\n","  wave_low_ = np.full(len_df, np.nan)\n","\n","  wave_highs = np.array([high[iin:iout + 1].max() for iin, iout in high_terms])\n","  wave_lows = np.array([low[iin:iout + 1].min() for iin, iout in low_terms])\n","\n","  wave_high_[paired_cu_idx] = wave_highs\n","  wave_low_[paired_co_idx] = wave_lows\n","\n","  wave_high_fill_ = fill_arr(wave_high_)\n","  wave_low_fill_ = fill_arr(wave_low_)\n","\n","  # wave_high_terms_low_ = np.full(len_df, np.nan)\n","  # wave_low_terms_high_ = np.full(len_df, np.nan)\n","\n","  # wave_high_terms_lows = np.array([low[iin:iout + 1].min() for iin, iout in high_terms])  # for point rejection, Todo, min_max 설정 항상 주의\n","  # wave_low_terms_highs = np.array([high[iin:iout + 1].max() for iin, iout in low_terms])\n","\n","  # wave_high_terms_low_[paired_cu_idx] = wave_high_terms_lows\n","  # wave_low_terms_high_[paired_co_idx] = wave_low_terms_highs\n","\n","  wave_high_terms_cnt_ = np.full(len_df, np.nan)\n","  wave_low_terms_cnt_ = np.full(len_df, np.nan)\n","\n","  wave_high_terms_cnt_[paired_cu_idx] = high_terms_cnt\n","  wave_low_terms_cnt_[paired_co_idx] = low_terms_cnt\n","\n","  wave_high_terms_cnt_fill_ = fill_arr(wave_high_terms_cnt_)\n","  wave_low_terms_cnt_fill_ = fill_arr(wave_low_terms_cnt_)\n","  \n","  # ------ hl_fill 의 prime_idx 를 찾아야함 ------ # \n","  b1_wave_high_fill_ = pd.Series(wave_high_fill_).shift(1).to_numpy()\n","  b1_wave_low_fill_ = pd.Series(wave_low_fill_).shift(1).to_numpy()\n","  wave_high_prime_idx = np.where((wave_high_fill_ != b1_wave_high_fill_) & ~np.isnan(wave_high_fill_), len_df_range, np.nan)\n","  wave_low_prime_idx = np.where((wave_low_fill_ != b1_wave_low_fill_) & ~np.isnan(wave_low_fill_), len_df_range, np.nan)\n","\n","  cu_prime_idx = wave_high_prime_idx\n","  cu_prime_idx_fill_ = fill_arr(cu_prime_idx)\n","\n","  co_prime_idx = wave_low_prime_idx\n","  co_prime_idx_fill_ = fill_arr(wave_low_prime_idx)  \n","\n","  # ============ enlist to df_cols ============ #       \n","  t_df['wave_high_fill_{}{}'.format(itv, period1)] = wave_high_fill_\n","  t_df['wave_low_fill_{}{}'.format(itv, period1)] = wave_low_fill_\n","\n","  t_df['wave_high_terms_cnt_fill_{}{}'.format(itv, period1)] = wave_high_terms_cnt_fill_\n","  t_df['wave_low_terms_cnt_fill_{}{}'.format(itv, period1)] = wave_low_terms_cnt_fill_\n","  t_df['wave_cu_{}{}'.format(itv, period1)] = cu_bool * (wave_high_terms_low_ >= wave_low_fill_)   # co ~ cu’s low 가 wave_low 갱신할 경우 point 에서 제외\n","  t_df['wave_co_{}{}'.format(itv, period1)] = co_bool * (wave_low_terms_high_ <= wave_high_fill_)\n","  t_df['wave_cu_bool_{}{}'.format(itv, period1)] = cu_bool   # temporary, for plot_check\n","  t_df['wave_co_bool_{}{}'.format(itv, period1)] = co_bool\n","  t_df['wave_cu_marker_{}{}'.format(itv, period1)] = get_line(cu_idx, dc_base_)\n","  t_df['wave_co_marker_{}{}'.format(itv, period1)] = get_line(co_idx, dc_base_)\n","\n","  # ------ for roll prev_hl ------ # \n","  t_df['wave_cu_prime_idx_{}{}'.format(itv, period1)] = cu_prime_idx\n","  t_df['wave_co_prime_idx_{}{}'.format(itv, period1)] = co_prime_idx\n","  \n","  # ------ for first_high ------ # \n","  t_df['wave_cu_prime_idx_fill_{}{}'.format(itv, period1)] = cu_prime_idx_fill_\n","  t_df['wave_co_prime_idx_fill_{}{}'.format(itv, period1)] = co_prime_idx_fill_\n","    \n","  if itv != 'T':\n","    assert ltf_df is not None, \"assert ltf_df is not None\"\n","    join_cols = np.arange(-15, 0 ,1).astype(int)  # points & donchian_channels\n","    ltf_df.drop(t_df.columns[join_cols], inplace=True, axis=1, errors='ignore')\n","    try:\n","      ltf_df = ltf_df.join(to_lower_tf_v2(ltf_df, t_df, join_cols), how='inner')\n","    except Exception as e:\n","      print(\"error in wave_range()'s join() :\", e)\n","  else:\n","    ltf_df = t_df    \n","\n","  return ltf_df\n","  \n","def wave_range_v13(t_df, config, ltf_df=None, term_thresh=2):  # v2 for period1 only\n","\n","  itv = pd.infer_freq(t_df.index)\n","  period1 = config.tr_set.wave_period\n","  # print(period1)\n","\n","  itv_num = to_itvnum(itv)\n","  # print(itv_num)\n","\n","  t_df = donchian_channel_v4(t_df, period1) \n","\n","  dc_base_ = t_df['dc_base_{}{}'.format(itv, period1)].to_numpy()\n","  b1_dc_base_ = t_df['dc_base_{}{}'.format(itv, period1)].shift(itv_num).to_numpy()\n","\n","  len_df = len(t_df)   \n","  len_df_range = np.arange(len_df).astype(int)\n","  # short_open_res = np.ones(len_df)\n","  # long_open_res = np.ones(len_df)\n","\n","  data_cols = ['open', 'high', 'low', 'close']\n","  open, high, low, close = [t_df[col_].to_numpy() for col_ in data_cols]\n","  b1_close = t_df.close.shift(itv_num).to_numpy()\n","  \n","  # ============ modules ============ #  \n","  # ------ define co, cu ------ # <- point missing 과 관련해 정교해아함\n","  cu_bool = ((b1_close > b1_dc_base_) & (dc_base_ > close)) | ((b1_close > dc_base_) & (dc_base_ > close))\n","  co_bool = (b1_close < b1_dc_base_) & (dc_base_ < close) | ((b1_close < dc_base_) & (dc_base_ < close))\n","\n","  cu_idx = get_index_bybool(cu_bool, len_df_range)   # for marking\n","  co_idx = get_index_bybool(co_bool, len_df_range)\n","\n","  high_terms, low_terms, high_terms_cnt, low_terms_cnt = get_terms_info(cu_bool, co_bool, len_df_range)\n","\n","  wave_high_terms_low_ = np.full(len_df, np.nan)\n","  wave_low_terms_high_ = np.full(len_df, np.nan)\n","\n","  wave_high_terms_lows = np.array([low[iin:iout + 1].min() for iin, iout in high_terms])  # 생략 이전 terms' hl\n","  wave_low_terms_highs = np.array([high[iin:iout + 1].max() for iin, iout in low_terms])  \n","\n","  paired_cu_idx = high_terms[:, 1]\n","  paired_co_idx = low_terms[:, 1]\n","\n","  wave_high_terms_low_[paired_cu_idx] = wave_high_terms_lows\n","  wave_low_terms_high_[paired_co_idx] = wave_low_terms_highs\n","\n","  # ------ add update_hl ------ #\n","  wave_high_ = np.full(len_df, np.nan)\n","  wave_low_ = np.full(len_df, np.nan)\n","\n","  wave_low_[paired_cu_idx] = wave_high_terms_lows  \n","  wave_high_[paired_co_idx] = wave_low_terms_highs\n","\n","  # ------ 생략된 cu, co 에 대한 2nd pairing 진행 ------ #\n","  cu_bool[high_terms[:, 1][high_terms_cnt <= term_thresh]] = False\n","  co_bool[low_terms[:, 1][low_terms_cnt <= term_thresh]] = False  \n","  high_terms, low_terms, high_terms_cnt, low_terms_cnt = get_terms_info(cu_bool, co_bool, len_df_range)\n","  \n","  paired_cu_idx = high_terms[:, 1]\n","  paired_co_idx = low_terms[:, 1]\n","\n","  # ====== get wave_hl & terms ====== #\n","  wave_highs = np.array([high[iin:iout + 1].max() for iin, iout in high_terms])\n","  wave_lows = np.array([low[iin:iout + 1].min() for iin, iout in low_terms])\n","\n","  wave_high_[paired_cu_idx] = wave_highs\n","  wave_low_[paired_co_idx] = wave_lows\n","\n","  wave_high_fill_ = fill_arr(wave_high_)\n","  wave_low_fill_ = fill_arr(wave_low_)\n","\n","  # wave_high_terms_low_ = np.full(len_df, np.nan)\n","  # wave_low_terms_high_ = np.full(len_df, np.nan)\n","\n","  # wave_high_terms_lows = np.array([low[iin:iout + 1].min() for iin, iout in high_terms])  # for point rejection, Todo, min_max 설정 항상 주의\n","  # wave_low_terms_highs = np.array([high[iin:iout + 1].max() for iin, iout in low_terms])\n","\n","  # wave_high_terms_low_[paired_cu_idx] = wave_high_terms_lows\n","  # wave_low_terms_high_[paired_co_idx] = wave_low_terms_highs\n","\n","  wave_high_terms_cnt_ = np.full(len_df, np.nan)\n","  wave_low_terms_cnt_ = np.full(len_df, np.nan)\n","\n","  wave_high_terms_cnt_[paired_cu_idx] = high_terms_cnt\n","  wave_low_terms_cnt_[paired_co_idx] = low_terms_cnt\n","\n","  wave_high_terms_cnt_fill_ = fill_arr(wave_high_terms_cnt_)\n","  wave_low_terms_cnt_fill_ = fill_arr(wave_low_terms_cnt_)\n","  \n","  # ------ hl_fill 의 prime_idx 를 찾아야함 ------ # \n","  b1_wave_high_fill_ = pd.Series(wave_high_fill_).shift(1).to_numpy()\n","  b1_wave_low_fill_ = pd.Series(wave_low_fill_).shift(1).to_numpy()\n","  wave_high_prime_idx = np.where((wave_high_fill_ != b1_wave_high_fill_) & ~np.isnan(wave_high_fill_), len_df_range, np.nan)\n","  wave_low_prime_idx = np.where((wave_low_fill_ != b1_wave_low_fill_) & ~np.isnan(wave_low_fill_), len_df_range, np.nan)\n","\n","  cu_prime_idx = wave_high_prime_idx\n","  cu_prime_idx_fill_ = fill_arr(cu_prime_idx)\n","\n","  co_prime_idx = wave_low_prime_idx\n","  co_prime_idx_fill_ = fill_arr(wave_low_prime_idx)  \n","\n","  # ============ enlist to df_cols ============ #       \n","  t_df['wave_high_fill_{}{}'.format(itv, period1)] = wave_high_fill_\n","  t_df['wave_low_fill_{}{}'.format(itv, period1)] = wave_low_fill_\n","\n","  t_df['wave_high_terms_cnt_fill_{}{}'.format(itv, period1)] = wave_high_terms_cnt_fill_\n","  t_df['wave_low_terms_cnt_fill_{}{}'.format(itv, period1)] = wave_low_terms_cnt_fill_\n","  t_df['wave_cu_{}{}'.format(itv, period1)] = cu_bool * (wave_high_terms_low_ >= wave_low_fill_)   # co ~ cu’s low 가 wave_low 갱신할 경우 point 에서 제외\n","  t_df['wave_co_{}{}'.format(itv, period1)] = co_bool * (wave_low_terms_high_ <= wave_high_fill_)\n","  t_df['wave_cu_bool_{}{}'.format(itv, period1)] = cu_bool   # temporary, for plot_check\n","  t_df['wave_co_bool_{}{}'.format(itv, period1)] = co_bool\n","  t_df['wave_cu_marker_{}{}'.format(itv, period1)] = get_line(cu_idx, dc_base_)\n","  t_df['wave_co_marker_{}{}'.format(itv, period1)] = get_line(co_idx, dc_base_)\n","\n","  # ------ for roll prev_hl ------ # \n","  t_df['wave_cu_prime_idx_{}{}'.format(itv, period1)] = cu_prime_idx\n","  t_df['wave_co_prime_idx_{}{}'.format(itv, period1)] = co_prime_idx\n","  \n","  # ------ for first_high ------ # \n","  t_df['wave_cu_prime_idx_fill_{}{}'.format(itv, period1)] = cu_prime_idx_fill_\n","  t_df['wave_co_prime_idx_fill_{}{}'.format(itv, period1)] = co_prime_idx_fill_\n","    \n","  if itv != 'T':\n","    assert ltf_df is not None, \"assert ltf_df is not None\"\n","    join_cols = np.arange(-15, 0 ,1).astype(int)  # points & donchian_channels\n","    ltf_df.drop(t_df.columns[join_cols], inplace=True, axis=1, errors='ignore')\n","    try:\n","      ltf_df = ltf_df.join(to_lower_tf_v2(ltf_df, t_df, join_cols), how='inner')\n","    except Exception as e:\n","      print(\"error in wave_range()'s join() :\", e)\n","  else:\n","    ltf_df = t_df    \n","\n","  return ltf_df\n","\n","\n","def wave_range_v12(t_df, config, ltf_df=None):  # v2 for period1 only\n","\n","  itv = pd.infer_freq(t_df.index)\n","  period1 = config.tr_set.wave_period\n","  # print(period1)\n","\n","  itv_num = to_itvnum(itv)\n","  # print(itv_num)\n","\n","  t_df = donchian_channel_v4(t_df, period1) \n","\n","  dc_base_ = t_df['dc_base_{}{}'.format(itv, period1)].to_numpy()\n","  b1_dc_base_ = t_df['dc_base_{}{}'.format(itv, period1)].shift(itv_num).to_numpy()\n","\n","  len_df = len(t_df)   \n","  len_df_range = np.arange(len_df).astype(int)\n","  # short_open_res = np.ones(len_df)\n","  # long_open_res = np.ones(len_df)\n","\n","  data_cols = ['open', 'high', 'low', 'close']\n","  open, high, low, close = [t_df[col_].to_numpy() for col_ in data_cols]\n","  b1_close = t_df.close.shift(itv_num).to_numpy()\n","  \n","  # ============ modules ============ #  \n","  # ------ define co, cu ------ # <- point missing 과 관련해 정교해아함\n","  cu_bool = ((b1_close > b1_dc_base_) & (dc_base_ > close)) | ((b1_close > dc_base_) & (dc_base_ > close))\n","  co_bool = (b1_close < b1_dc_base_) & (dc_base_ < close) | ((b1_close < dc_base_) & (dc_base_ < close))\n","\n","  # Todo, term 조정은 이 line 에서 해야할 것\n","  b1_cu_bool = pd.Series(cu_bool).shift(1).to_numpy()\n","  b1_co_bool = pd.Series(co_bool).shift(1).to_numpy()\n","\n","  cu_bool *= ~b1_co_bool.astype(bool)  # short_term point 생략\n","  co_bool *= ~b1_cu_bool.astype(bool)\n","\n","  cu_idx = get_index_bybool(cu_bool, len_df_range)\n","  co_idx = get_index_bybool(co_bool, len_df_range)\n","\n","  cu_fill_idx = fill_arr(cu_idx)\n","  co_fill_idx = fill_arr(co_idx)\n","\n","  # ------ get co, cu terms ------ #\n","  high_bool = cu_fill_idx < co_fill_idx  # 이렇게 해야 high_terms[:, 1] 이 cu_idx 가 나옴\n","  low_bool = co_fill_idx < cu_fill_idx\n","\n","  high_terms_vec = get_index_bybool(high_bool, len_df_range)\n","  low_terms_vec = get_index_bybool(low_bool, len_df_range) # -> low_terms\n","\n","  high_terms_list = using_clump(high_terms_vec)\n","  low_terms_list = using_clump(low_terms_vec)\n","\n","  high_terms = np.array([[terms.min(), terms.max() + 1] for terms in high_terms_list])\n","  low_terms = np.array([[terms.min(), terms.max() + 1] for terms in low_terms_list])\n","\n","  high_terms_cnt = high_terms[:, 1] - high_terms[:, 0] \n","  low_terms_cnt = low_terms[:, 1] - low_terms[:, 0] \n","\n","  wave_highs = np.array([high[iin:iout + 1].max() for iin, iout in high_terms])\n","  wave_lows = np.array([low[iin:iout + 1].min() for iin, iout in low_terms])\n","\n","  # ------ get valid_idx range (inner len_df) ------ #\n","  paired_cu_idx = high_terms[:, 1]\n","  paired_co_idx = low_terms[:, 1]\n","\n","  valid_cu_bool = paired_cu_idx < len_df\n","  valid_co_bool = paired_co_idx < len_df\n","\n","  paired_cu_valid_idx = paired_cu_idx[valid_cu_bool]\n","  paired_co_valid_idx = paired_co_idx[valid_co_bool]\n","\n","  # ------ get wave_hl & terms ------ #\n","  wave_high_ = np.full(len_df, np.nan)\n","  wave_low_ = np.full(len_df, np.nan)\n","\n","  wave_high_[paired_cu_valid_idx] = wave_highs[valid_cu_bool]\n","  wave_low_[paired_co_valid_idx] = wave_lows[valid_co_bool]\n","\n","  wave_high_fill_ = fill_arr(wave_high_)\n","  wave_low_fill_ = fill_arr(wave_low_)\n","\n","  wave_high_terms_cnt_ = np.full(len_df, np.nan)\n","  wave_low_terms_cnt_ = np.full(len_df, np.nan)\n","\n","  wave_high_terms_cnt_[paired_cu_valid_idx] = high_terms_cnt[valid_cu_bool]\n","  wave_low_terms_cnt_[paired_co_valid_idx] = low_terms_cnt[valid_co_bool]\n","\n","  wave_high_terms_cnt_fill_ = fill_arr(wave_high_terms_cnt_)\n","  wave_low_terms_cnt_fill_ = fill_arr(wave_low_terms_cnt_)\n","\n","  # ------ check update high & low (occurs by point missing) ------ # \n","  co_prime_idx = np.full(len_df, np.nan)\n","  co_prime_idx[paired_co_valid_idx] = paired_co_valid_idx\n","  co_prime_idx_fill_ = fill_arr(co_prime_idx)\n","  # valid_idx = co_idx > co_prime_idx_fill_\n","  valid_idx = cu_idx > co_prime_idx_fill_\n","\n","  # update_low[valid_idx] = [low[iin:iout + 1].min() for iin, iout in zip(cu_prime_idx_fill_[valid_idx].astype(int), cu_idx[valid_idx].astype(int))]  # include open low\n","  # 1. 잘 생각해보면, cu_idx 에는 co_prime_idx_fill_ 을 사용하는게 맞음\n","  #   a. cu_idx 에 달려있는 low 가 co_prime_idx_fill_ 기준이니까\n","  # update_low = np.full(len_df, np.nan)\n","  # update_low[valid_idx] = [low[iin:iout + 1].min() for iin, iout in zip(co_prime_idx_fill_[valid_idx].astype(int), cu_idx[valid_idx].astype(int))]   # high 아닌가\n","  \n","  update_high = np.full(len_df, np.nan)\n","  update_high[valid_idx] = [high[iin:iout + 1].max() for iin, iout in zip(co_prime_idx_fill_[valid_idx].astype(int), cu_idx[valid_idx].astype(int))]   # high 아닌가 => 아님 update_low 이기 때문\n","  \n","  cu_prime_idx = np.full(len_df, np.nan)\n","  cu_prime_idx[paired_cu_valid_idx] = paired_cu_valid_idx\n","  cu_prime_idx_fill_ = fill_arr(cu_prime_idx)\n","  valid_idx = co_idx > cu_prime_idx_fill_\n","\n","  # update_high = np.full(len_df, np.nan)\n","  # update_high[valid_idx] = [high[iin:iout + 1].max() for iin, iout in zip(cu_prime_idx_fill_[valid_idx].astype(int), co_idx[valid_idx].astype(int))]\n","\n","  update_low = np.full(len_df, np.nan)\n","  update_low[valid_idx] = [low[iin:iout + 1].min() for iin, iout in zip(cu_prime_idx_fill_[valid_idx].astype(int), co_idx[valid_idx].astype(int))]\n","\n","  # ============ enlist to df_cols ============ #       \n","  t_df['wave_high_fill_{}{}'.format(itv, period1)] = wave_high_fill_\n","  t_df['wave_low_fill_{}{}'.format(itv, period1)] = wave_low_fill_\n","\n","  t_df['wave_update_high_fill_{}{}'.format(itv, period1)] = update_high\n","  t_df['wave_update_low_fill_{}{}'.format(itv, period1)] = update_low\n","\n","  t_df['wave_high_terms_cnt_fill_{}{}'.format(itv, period1)] = wave_high_terms_cnt_fill_\n","  t_df['wave_low_terms_cnt_fill_{}{}'.format(itv, period1)] = wave_low_terms_cnt_fill_\n","  t_df['wave_cu_{}{}'.format(itv, period1)] = cu_bool * ~(update_low < wave_low_fill_)   # Todo, 이곳 다시 한번 확인 (old, point_missing 으로 인한 low 갱신 회피)\n","  t_df['wave_co_{}{}'.format(itv, period1)] = co_bool * ~(update_high > wave_high_fill_)\n","  t_df['wave_cu_marker_{}{}'.format(itv, period1)] = get_line(cu_idx, dc_base_)\n","  t_df['wave_co_marker_{}{}'.format(itv, period1)] = get_line(co_idx, dc_base_)\n","\n","  # ------ for roll prev_hl ------ # \n","  t_df['wave_cu_prime_idx_{}{}'.format(itv, period1)] = cu_prime_idx\n","  t_df['wave_co_prime_idx_{}{}'.format(itv, period1)] = co_prime_idx\n","  \n","  # ------ for first_high ------ # \n","  t_df['wave_cu_prime_idx_fill_{}{}'.format(itv, period1)] = cu_prime_idx_fill_\n","  t_df['wave_co_prime_idx_fill_{}{}'.format(itv, period1)] = co_prime_idx_fill_\n","    \n","  if itv != 'T':\n","    assert ltf_df is not None, \"assert ltf_df is not None\"\n","    join_cols = np.arange(-17, 0 ,1).astype(int)  # points & donchian_channels\n","    ltf_df.drop(t_df.columns[join_cols], inplace=True, axis=1, errors='ignore')\n","    try:\n","      ltf_df = ltf_df.join(to_lower_tf_v2(ltf_df, t_df, join_cols), how='inner')\n","    except Exception as e:\n","      print(\"error in wave_range()'s join() :\", e)\n","  else:\n","    ltf_df = t_df    \n","\n","  return ltf_df\n","\n","\n"],"metadata":{"id":"YoZpr7lDn7z-"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"1MNVIExLULhJ"},"source":["#### legacy"]},{"cell_type":"code","source":[""],"metadata":{"id":"1eZov-szzNuB"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"EOXQbXixiQcK"},"source":["##### volume_profile"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"7pFuazxpgx9B"},"outputs":[],"source":["session_df = res_df_.iloc[-1440:] # 0.159 -> 0.024 (14400 -> 1440)\n","volume = session_df['volume'].to_numpy()\n","close = session_df['close'].to_numpy()\n","# px.histogram(session_df, x='volume', y='close', nbins=150, orientation='h').show()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"SoPJkiyKiXLM"},"outputs":[],"source":["kde_factor = 0.05\n","num_samples = 100\n","\n","start_0 = time.time()\n","kde = stats.gaussian_kde(close,weights=volume,bw_method=kde_factor)\n","kdx = np.linspace(close.min(),close.max(),num_samples)\n","kdy = kde(kdx)\n","ticks_per_sample = (kdx.max() - kdx.min()) / num_samples\n","print(\"ticks_per_sample :\", ticks_per_sample)  # sample 당 가격\n","print(\"kdy elapsed_time :\", time.time() - start_0)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"mK2jBddAxJ14"},"outputs":[],"source":["peaks,_ = signal.find_peaks(kdy)\n","pkx = kdx[peaks]\n","pky = kdy[peaks]\n","\n","plt.figure(figsize=(10,5))\n","# plt.hist(close, bins=num_samples, weights=volume, alpha=.8, color='#1592e6')\n","# plt.plot(kdx, kdy, color='white')\n","# plt.plot(pkx, pky, 'bo', color='yellow')\n","plt.plot(kdy, kdx, color='white')\n","plt.plot(pky, pkx, 'bo', color='yellow')\n","plt.show()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"a8tpQZCy0SO1"},"outputs":[],"source":["pkx"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"gfA946s8UgS0"},"outputs":[],"source":["# ------ vp 의 indi. 화가 필요함 -> point 설정 ------ #\n","# 1. 4 level 은 미리 만들어놓는게 맞는걸로 보임 -> 추종하는 function 이 많음 (utils_tr, ep_out ...)\n","#   a. 4 level 에 국한하는게 아니라, 모든 peaks 에 대해 levels 설정\n","#   b. 각 session 별로 peak_list 가 주어질 것\n","#     i. prev_data 사용해야하는점 주의 (session vp 는 future_data)"]},{"cell_type":"markdown","metadata":{"id":"3T-9FwWFXR4f"},"source":["###### prominence_info"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"RmBt2agljClE"},"outputs":[],"source":["start_0 = time.time()\n","min_prom = kdy.max() * 0.0\n","pipsize = 0.01\n","max_width_pips = 20\n","# width_range=(1, max_width_pips * pipsize / ticks_per_sample)\n","width_range= max_width_pips * pipsize / ticks_per_sample\n","peaks, peak_props = signal.find_peaks(kdy, prominence=min_prom, width=width_range)\n","\n","peak_x = kdx[peaks]\n","peak_y = kdy[peaks]\n","# ------ prominence lines ------ #\n","left_base = peak_props['left_bases']\n","right_base = peak_props['right_bases']\n","line_x = peak_x\n","line_y0 = peak_y\n","line_y1 = peak_y # - peak_props['prominences']\n","print(\"prom_line elapsed_time :\", time.time() - start_0)\n","\n","\n","for x, y0, y1 in zip(line_x, line_y0, line_y1):\n","    fig.add_shape(type='line',\n","        xref='x', yref='y',\n","        # x0=x, y0=y0, x1=x, y1=y1,\n","        x0=x, y0=0, x1=x, y1=y1,\n","        line=dict(\n","            color='red',\n","            width=2,\n","        )\n","    )\n","\n","# ------ width ------ #\n","left_ips = peak_props['left_ips']\n","right_ips = peak_props['right_ips']\n","# width_x0 = kdx.min() + (left_ips * ticks_per_sample)\n","# width_x1 = kdx.min() + (right_ips * ticks_per_sample)\n","width_x0 = kdx.min() + (left_base * ticks_per_sample)\n","width_x1 = kdx.min() + (right_base * ticks_per_sample)\n","\n","# int_from = kdx.min() + (left_base * ticks_per_sample)\n","# int_to = kdx.min() + (right_base * ticks_per_sample)\n","# [kde.integrate_box_1d(x0, x1) for x0, x1 in zip(int_from, int_to)]\n","\n","width_y = peak_props['width_heights']\n","\n","for x0, x1, y in zip(width_x0, width_x1, width_y):\n","    fig.add_shape(type='line',\n","        xref='x', yref='y',\n","        x0=x0, y0=y, x1=x1, y1=y,\n","        line=dict(\n","            color='red',\n","            width=2,\n","        )\n","    )\n","fig.show()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"zqj944n-WzyZ"},"outputs":[],"source":["# peaks  # ndarray\n","# kdx  # ndarray\n","# kdy  # ndarray\n","# kdx.min()\n","left_base * ticks_per_sample\n","# volume"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Rvqv0RGojo9h"},"outputs":[],"source":["print(peak_y)\n","print(peak_props['prominences'])\n","peak_props"]},{"cell_type":"markdown","metadata":{"id":"c2729DJ6h720"},"source":["##### imb."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Rucj-iepiR_-"},"outputs":[],"source":["t_df = res_df_.iloc[-120:-100]\n","a_data = t_df.to_numpy()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ktm1aB-Bh7GH"},"outputs":[],"source":["plt.style.use(['dark_background', 'fast'])\n","fig = plt.figure(figsize=(15, 9))\n","nrows, ncols = 1, 1\n","gs = gridspec.GridSpec(nrows=nrows,  # row 부터 index 채우고 col 채우는 순서임 (gs_idx)\n","                        ncols=ncols\n","                        # height_ratios=[3, 1]\n","                        )\n","\n","ax = fig.add_subplot(gs[0])\n","\n","# ------ candles ------ #\n","candle_plot(a_data[:, col_idx_dict['ohlc_col_idxs']], ax, alpha=1.0, wickwidth=1.0)\n","_ = [step_col_plot(a_data[:, params[0]], *params[1:]) for params in col_idx_dict['step_col_info']]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"jMQBhQ1Ljt5Y"},"outputs":[],"source":["def imb_ratio_v4(df, itv):\n","\n","  itv_num = to_itvnum(itv)\n","\n","  close = df['close_{}'.format(itv)].to_numpy()\n","  open = df['open_{}'.format(itv)].to_numpy()\n","\n","  b1_close = df['close_{}'.format(itv)].shift(itv_num).to_numpy()\n","  b1_open = df['open_{}'.format(itv)].shift(itv_num).to_numpy()\n","  b1_high = df['high_{}'.format(itv)].shift(itv_num).to_numpy()\n","  b1_low = df['low_{}'.format(itv)].shift(itv_num).to_numpy()\n","\n","  body_range = abs(close - open)\n","  b1_body_range = abs(b1_close - b1_open)\n","\n","  df['body_rel_ratio_{}'.format(itv)] = body_range / b1_body_range\n","\n","  short_body_range = np.where(close <= b1_low, body_range, b1_body_range)\n","  long_body_range = np.where(close >= b1_high, body_range, b1_body_range)\n","\n","  # 추후에 통계 측정해야함 -> bir 에 따른 개별 trader 의 epout / tpep 이라던가 => short 에 양봉은 취급안함 (why use np.nan)\n","  df['short_ir_{}'.format(itv)] = np.where(close < open, (b1_low - close) / short_body_range, np.nan) # close < open & close < b1_low\n","  df['long_ir_{}'.format(itv)] = np.where(close > open, (close - b1_high) / long_body_range, np.nan) # close > open & close > b1_high\n","\n","  return"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"I1Vq_BiKpY3P"},"outputs":[],"source":["def imb_ratio_v3(df, itv):\n","\n","  itv_num = to_itvnum(itv)\n","\n","  # high = df['high_{}'.format(itv)].to_numpy()\n","  # low = df['low_{}'.format(itv)].to_numpy()\n","  # candle_range = high - low\n","\n","  close = df['close_{}'.format(itv)].to_numpy()\n","  open = df['open_{}'.format(itv)].to_numpy()\n","\n","  b1_close = df['close_{}'.format(itv)].shift(itv_num).to_numpy()\n","  b1_open = df['open_{}'.format(itv)].shift(itv_num).to_numpy()\n","  b1_high = df['high_{}'.format(itv)].shift(itv_num).to_numpy()\n","  b1_low = df['low_{}'.format(itv)].shift(itv_num).to_numpy()\n","\n","  body_range = abs(close - open)\n","  b1_body_range = abs(b1_close - b1_open)\n","\n","  df['body_rel_ratio_{}'.format(itv)] = body_range / b1_body_range\n","\n","  short_body_ratio = np.where(close <= b1_low, body_range, b1_body_range)\n","  long_body_range = np.where(close >= b1_high, body_range, b1_body_range)\n","\n","  # 추후에 통계 측정해야함 -> bir 에 따른 개별 trader 의 epout / tpep 이라던가 => short 에 양봉은 취급안함 (why use np.nan)\n","  df['short_ir_{}'.format(itv)] = np.where(close < open, (b1_low - close) / body_range, np.nan) # close < open & close < b1_low\n","  df['long_ir_{}'.format(itv)] = np.where(close > open, (close - b1_high) / body_range, np.nan) # close > open & close > b1_high\n","\n","  return"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"mtnMUkhwkdrE"},"outputs":[],"source":["imb_ratio(t_df, \"5T\")\n","# imb_ratio_v3(t_df, \"5T\")\n","# imb_ratio_v4(t_df, \"5T\")\n","\n","t_df.tail(100).short_ir_5T  # .461871\n","# t_df.iloc[:, -10:]\n","# t_df.dtypes"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"RVUs1YE_pgBI"},"outputs":[],"source":["# imb_ratio(t_df, \"5T\")\n","# imb_ratio_v3(t_df, \"5T\")\n","imb_ratio_v4(t_df, \"5T\")\n","\n","t_df.tail(100).short_ir_5T  # .461871\n","# t_df.iloc[:, -10:]\n","# t_df.dtypes"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"bieHiKjBkuFL"},"outputs":[],"source":["# ------ rtc 1, 0 개념 ------ #\n","# short_rtc_1 = close\n","# short_rtc_0 = b1_low\n","\n","# long_rtc_1 = close\n","# long_rtc_0 = b1_high\n","\n","# rtc 로 활용하려면, col 로 추가해야할 것 -> 추가할만한 col_name 은 아님\n","# 1. h_candle 인 경우 -> ?\n","#   a. h_candle_v3 먹이고, open_{}.shift(num_itv).to_numpy() 진행 -> ex. res_df['close_{}'.format(hc_itv)].shift(itv_num).to_numpy() "]},{"cell_type":"code","execution_count":null,"metadata":{"id":"3X6bMXJIjPYy"},"outputs":[],"source":["# 1. 현재 종가 - 이전 고가 = imb_range (long)\n","long_imb_range = t_df.close - t_df.high.shift(1)\n","# 2. 이전 저가 - 현재 종가 - imb_range (short)\n","short_imb_range = t_df.low.shift(1) - t_df.close"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"q1nEA19v7Qpj"},"outputs":[],"source":["from math import floor\n","\n","\n","def _calc_dev(base_price, price):\n","    return 100 * (price - base_price) / base_price\n","\n","\n","def zigzag(highs, lows, depth=10, dev_threshold=5):\n","    def pivots(src_raw, length, isHigh):\n","        src = list(reversed(src_raw))\n","        bar_index = list(range(len(src)))\n","        for start in range(0, len(src)):\n","            if start + 2 * length + 1 > len(src) - 1:\n","                return\n","            p = 0\n","            if length < len(src) - start:\n","                p = src[start + length]\n","            if length == 0:\n","                yield 0, p\n","            else:\n","                isFound = True\n","                for i in range(start, start + length):\n","                    if isHigh and src[i] > p:\n","                        isFound = False\n","                    if not isHigh and src[i] < p:\n","                        isFound = False\n","                for i in range(start + length + 1, start + 2 * length + 1):\n","                    if isHigh and src[i] >= p:\n","                        isFound = False\n","                    c = not isHigh and src[i] <= p\n","                    if c:\n","                        isFound = False\n","                if isFound:\n","                    yield (bar_index[start + length], p)\n","                else:\n","                    yield None, None\n","\n","    data_highs = [x for x in pivots(highs, floor(depth / 2), True) if x[0]]\n","    data_lows = [x for x in pivots(lows, floor(depth / 2), False) if x[0]]\n","\n","    raw_pairs = []\n","\n","    for i, (ind, p) in enumerate(data_highs):\n","        lows_d = sorted([(ind_l, p_l) for ind_l, p_l in data_lows if ind > ind_l], key=lambda x: x[0])\n","        if lows_d:\n","            lows = lows_d[-1]\n","\n","            if abs(_calc_dev(lows[1], p)) >= dev_threshold:\n","                raw_pairs.append(\n","                    ((ind, p),\n","                     (lows[0], lows[1]))\n","                )\n","\n","    result = []\n","\n","    for (i_h, p_h),(i_l, p_l) in raw_pairs:\n","        if not result:\n","            result.append(((i_h, p_h),(i_l, p_l)))\n","            continue\n","\n","        if i_l == result[-1][1][0]:\n","            if p_h > result[-1][0][1]:\n","                result = result[:-1]\n","            else:\n","                continue\n","\n","        result.append(((i_h, p_h),(i_l, p_l)))\n","\n","    return result\n","\n","# highs, lows = t_df.high.to_numpy(), t_df.low.to_numpy()\n","# zigzag(highs, lows, depth=5, dev_threshold=5)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"fGlmdyb97j4Q"},"outputs":[],"source":["t_df = res_df_.iloc[-120:]\n","a_data = t_df.to_numpy()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ropzIp0wUPAA"},"outputs":[],"source":["# import plotly.express as px\n","# import plotly.graph_objects as go\n","\n","def get_dist_plot(c, v, kx, ky):\n","    fig = go.Figure()\n","    fig.add_trace(go.Histogram(name='Vol Profile', x=c, y=v, nbinsx=150, \n","                               histfunc='sum', histnorm='probability density',\n","                               marker_color='#B0C4DE'))\n","    fig.add_trace(go.Scatter(name='KDE', x=kx, y=ky, mode='lines', marker_color='#D2691E'))    \n","\n","    peaks,_ = signal.find_peaks(kdy)\n","    pkx = kdx[peaks]\n","    pky = kdy[peaks]\n","    pk_marker_args=dict(size=10, color='black')\n","    fig.add_trace(go.Scatter(name=\"Peaks\", x=pkx, y=pky, mode='markers', marker=pk_marker_args))\n","    fig.show()\n","\n","    return fig"]},{"cell_type":"markdown","source":["##### instant."],"metadata":{"id":"RZJ6uIA_VcJs"}},{"cell_type":"code","source":["def wave_range_ratio(res_df, config, bb_itv, bb_period):\n","\n","  wave_itv = pd.infer_freq(res_df.index)\n","  wave_period = config.tr_set.wave_period\n","\n","  bb_upper_ = res_df['bb_upper_{}{}'.format(bb_itv, bb_period)].to_numpy()\n","  bb_lower_ = res_df['bb_lower_{}{}'.format(bb_itv, bb_period)].to_numpy()\n","  \n","  cu_prime_idx_fill_ = res_df['wave_cu_prime_idx_fill_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","  co_prime_idx_fill_ = res_df['wave_co_prime_idx_fill_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","\n","  cu_bb_range = get_line(co_prime_idx_fill_, bb_upper_) - get_line(co_prime_idx_fill_, bb_lower_)  # cu 에서 co_prime 의 bb_range 사용\n","  co_bb_range = get_line(cu_prime_idx_fill_, bb_upper_) - get_line(cu_prime_idx_fill_, bb_lower_)\n","\n","  wave_range = res_df['wave_high_fill_{}{}'.format(wave_itv, wave_period)].to_numpy() - res_df['wave_low_fill_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","  \n","  res_df['cu_wrr_{}{}'.format(wave_itv, wave_period)] = wave_range / cu_bb_range   # for cu (currently, long)\n","  res_df['co_wrr_{}{}'.format(wave_itv, wave_period)] = wave_range / co_bb_range\n","\n","  return res_df"],"metadata":{"id":"nLWAP1Cl2Hvu"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Todo, future_data\n","def enough_space(res_df, itv, period):\n","\n","  dc_upper_ = res_df['dc_upper_{}{}'.format(itv, period)].to_numpy()\n","  dc_base_ = res_df['dc_base_{}{}'.format(itv, period)].to_numpy()\n","  dc_lower_ = res_df['dc_lower_{}{}'.format(itv, period)].to_numpy()  \n","  high_ = res_df['high_{}'.format(config.loc_set.point.tf_entry)].to_numpy()\n","  low_ = res_df['low_{}'.format(config.loc_set.point.tf_entry)].to_numpy()\n","\n","  half_dc_gap = dc_upper_ - dc_base_\n","\n","  res_df['cu_es_{}{}'.format(itv, period)] = (low_ - dc_lower_) / half_dc_gap\n","  res_df['co_es_{}{}'.format(itv, period)] = (dc_upper_ - high_) / half_dc_gap\n","\n","  return res_df"],"metadata":{"id":"H_zPYIshbZgP"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Todo, future_data\n","def candle_range_ratio(res_df, c_itv, bb_itv, bb_period):\n","\n","  itv_num = to_itvnum(c_itv)\n","\n","  b1_bb_upper_ = res_df['bb_upper_{}{}'.format(bb_itv, bb_period)].shift(itv_num).to_numpy()\n","  b1_bb_lower_ = res_df['bb_lower_{}{}'.format(bb_itv, bb_period)].shift(itv_num).to_numpy()\n","  bb_range = b1_bb_upper_ - b1_bb_lower_   # <-- h_candle's open_idx 의 bb_gap 사용\n","\n","  high_ = res_df['high_{}'.format(c_itv)].to_numpy()\n","  low_ = res_df['low_{}'.format(c_itv)].to_numpy()\n","  candle_range = high_ - low_  # 부호로 양 / 음봉 구분 (양봉 > 0)\n","  \n","  res_df['crr_{}'.format(c_itv)] = candle_range / bb_range\n","\n","  return res_df"],"metadata":{"id":"o3IUBc59VR5D"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def body_rel_ratio(res_df, c_itv):\n","\n","  itv_num = to_itvnum(c_itv)\n","  \n","  b1_close_ = res_df['close_{}'.format(c_itv)].shift(itv_num).to_numpy()\n","  b1_open_ = res_df['open_{}'.format(c_itv)].shift(itv_num).to_numpy()\n","  b1_body_range = abs(b1_close_ - b1_open_)\n","\n","  close_ = res_df['close_{}'.format(c_itv)].to_numpy()\n","  open_ = res_df['open_{}'.format(c_itv)].to_numpy()\n","  body_range = abs(close_ - open_)\n","  \n","  res_df['body_rel_ratio_{}'.format(c_itv)] = body_range / b1_body_range\n","\n","  return res_df\n","\n","def dc_over_body_ratio(res_df, c_itv, dc_itv, dc_period):\n","  close_ = res_df['close_{}'.format(c_itv)].to_numpy()\n","  open_ = res_df['open_{}'.format(c_itv)].to_numpy()\n","  body_range = abs(close_ - open_)\n","  \n","  dc_upper_ = res_df['dc_upper_{}{}'.format(dc_itv, dc_period)].to_numpy()\n","  dc_lower_ = res_df['dc_lower_{}{}'.format(dc_itv, dc_period)].to_numpy() \n","\n","  res_df['dc_upper_{}{}_br'.format(dc_itv, dc_period)] = (close_ - dc_upper_) / body_range\n","  res_df['dc_lower_{}{}_br'.format(dc_itv, dc_period)] = (dc_lower_ - close_) / body_range\n","\n","  return res_df"],"metadata":{"id":"u3yFd8Dcok5m"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def candle_pumping_ratio_v2(res_df, c_itv, dc_itv, period):\n","\n","  res_df = dc_line_v3(res_df, dc_itv, dc_period=period)\n","\n","  dc_upper_ = res_df['dc_upper_{}{}'.format(dc_itv, period)].to_numpy()\n","  dc_lower_ = res_df['dc_lower_{}{}'.format(dc_itv, period)].to_numpy()\n","  dc_range = dc_upper_ - dc_lower_\n"," \n","  open_ = res_df['open_{}'.format(c_itv)].to_numpy()\n","  close_ = res_df['close_{}'.format(c_itv)].to_numpy()\n","  body = close_ - open_  # 부호로 양 / 음봉 구분 (양봉 > 0)\n","  \n","  res_df['cppr_{}'.format(c_itv)] = body / dc_range\n","\n","  return res_df\n","\n","\n","# Todo, future_data\n","def candle_pumping_ratio(res_df, c_itv, bb_itv, period):\n","\n","  itv_num = to_itvnum(c_itv)\n","\n","  # 여기에도 v2 처럼 bb_indi. 추가 (자동화)\n","\n","  b1_bb_upper_ = res_df['bb_upper_{}{}'.format(bb_itv, period)].shift(itv_num).to_numpy()\n","  b1_bb_lower_ = res_df['bb_lower_{}{}'.format(bb_itv, period)].shift(itv_num).to_numpy()\n","  bb_range = b1_bb_upper_ - b1_bb_lower_\n","\n","  open_ = res_df['open_{}'.format(c_itv)].to_numpy()\n","  close_ = res_df['close_{}'.format(c_itv)].to_numpy()\n","  body = close_ - open_  # 부호로 양 / 음봉 구분 (양봉 > 0)\n","  \n","  res_df['cppr_{}'.format(c_itv)] = body / bb_range\n","\n","  return res_df\n","\n","\n","def pumping_ratio(res_df, config, itv, period1, period2):\n","\n","  bb_lower_5T = res_df['bb_lower_5T'].to_numpy()\n","  bb_upper_5T = res_df['bb_upper_5T'].to_numpy()\n","  bb_range = bb_upper_5T - bb_lower_5T\n","\n","  selection_id = config.selection_id\n","  \n","  res_df['short_ppr_{}'.format(selection_id)] = res_df['short_tp_gap_{}'.format(selection_id)].to_numpy() / get_line(res_df['short_wave_high_idx_{}{}{}'.format(itv, period1, period2)].to_numpy(), bb_range)\n","  res_df['long_ppr_{}'.format(selection_id)] = res_df['long_tp_gap_{}'.format(selection_id)].to_numpy() / get_line(res_df['long_wave_low_idx_{}{}{}'.format(itv, period1, period2)].to_numpy(), bb_range)\n"],"metadata":{"id":"JWj02LLGbnji"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"OpkclLSzazZ-"},"outputs":[],"source":["def wave_body_ratio(res_df_, itv, period):\n","  dc_upper_ = res_df_['dc_upper_{}{}'.format(itv, period)].to_numpy()\n","  dc_lower_ = res_df_['dc_lower_{}{}'.format(itv, period)].to_numpy()\n","  close_ = res_df_['close_{}'.format(itv)].to_numpy()\n","  open_ = res_df_['open_{}'.format(itv)].to_numpy()\n","\n","  dc_range = dc_upper_ - dc_lower_\n","  body_range = abs(close_ - open_)\n","\n","  res_df_['wave_body_ratio'] = body_range / dc_range\n","  res_df_['dc_upper_body_ratio'] = (np.maximum(close_, open_) - dc_upper_) / body_range\n","  res_df_['dc_lower_body_ratio'] = (dc_lower_) - np.minimum(close_, open_) / body_range\n","\n","  return"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"0-zzitQRbnz8"},"outputs":[],"source":["# res_df_['wave_body_ratio'].tail(200)\n","\n","itv = 'H'\n","period = 5\n","wave_body_ratio(res_df_, itv, period)"]},{"cell_type":"markdown","metadata":{"id":"qsyPhNR8yP1c"},"source":["##### dump"]},{"cell_type":"markdown","metadata":{"id":"xpyP5t8Ht_pE"},"source":["### calc recursive indi's min_period"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"N1Hbm4OA4Tkk"},"outputs":[],"source":["ticker_prcn = get_precision_by_price(res_df.close.iloc[-1]) + 2\n","\n","target_len = 300000\n","slice_len_list = list(range(50, 10000, 100))\n","slice_len_list.insert(0, target_len)\n","\n","start_0 = time.time()\n","# prev_int_, prev_pnts_ = None, None\n","offset = 1\n","\n","for sl_idx, sample_len in enumerate(slice_len_list):\n","\n","  sample_df = res_df.iloc[-sample_len -offset:-offset]\n","  sample_len2 = sample_len\n","\n","  # --------- input using indi.s --------- #\n","  # res = ema_v0(sample_df['close'], 190)\n","  res = rsi(sample_df, 14)\n","\n","    #    to_htf()    #\n","  # df_5T = to_htf(sample_df, itv_='5T', offset='1h')\n","  # sample_len2 = len(df_5T)\n","\n","  # # --------- input using htf_indi. --------- #\n","  # res = ema(df_5T['close'], 195)\n","  # -------------------------------------- #\n","\n","  res_last_row = res.iloc[-1]\n","  if pd.isnull(res_last_row):\n","    continue\n","\n","  # print(res_last_row)\n","  # break\n","\n","  # sample_df = sample_df.join(to_lower_tf_v2(sample_df, df_5T, [-1]), how='inner')\n","\n","\n","  #   자리수 분할 계산    #\n","  int_, points_ = str(res_last_row).split('.')\n","  pnts_ = points_[:ticker_prcn]\n","\n","  if sl_idx == 0:\n","    target_int_ = int_\n","    target_pnts_ = pnts_\n","    print(\"target {} ({}) -> {} {}\".format(sample_len, sample_len2, int_, points_))\n","\n","  else:\n","    if target_int_ == int_ and target_pnts_ == pnts_:\n","      # print(sample_len, \"({})\".format(sample_len2), '->', int_, pnts_, end='\\n\\n')\n","      print(\"{} ({}) -> {} {}\\n\".format(sample_len, sample_len2, int_, points_))\n","      break\n","\n","print(time.time() - start_0)  # (1301)(1361)(1301)"]},{"cell_type":"markdown","metadata":{"id":"rrIGjmUzqU-D"},"source":["## import utils & config"]},{"cell_type":"code","execution_count":5,"metadata":{"id":"SeJan_0t95yL","executionInfo":{"status":"ok","timestamp":1652257516952,"user_tz":-540,"elapsed":2942,"user":{"displayName":"7th June","userId":"08178289703395036410"}}},"outputs":[],"source":["frame_ver = \"0114_htf\"\n","ID_arr = np.array(['v3', 'v5_2'])\n","\n","utils_public_name = \"{}.utils.{}_utils_public\".format(strat_pkg, frame_ver)\n","utils_public_lib = importlib.import_module(utils_public_name)\n","utils_public = utils_public_lib   # temporary\n","\n","u_name_list = [\"{}.utils.{}_utils_{}\".format(strat_pkg, frame_ver, id_) for id_ in ID_arr]\n","utils_arr = np.array([importlib.import_module(u_name) for u_name in u_name_list])\n","\n","config_name_list = [\"{}_config_{}.json\".format(frame_ver, id_) for id_ in ID_arr]\n","cfg_path_list = [os.path.join(current_path, strat_pkg, \"config\", name_) for name_ in config_name_list]\n","cfg_file_list = [open(cfg_path) for cfg_path in cfg_path_list]\n","config_arr = np.array([EasyDict(json.load(cfg_)) for cfg_ in cfg_file_list])\n","\n","# ------ opened files should be closed --> 닫지 않으면 reopen 시 error occurs ------ #\n","_ = [cfg_.close() for cfg_ in cfg_file_list]\n","show_plot = 1   # idep's var - do not touch"]},{"cell_type":"markdown","metadata":{"id":"leSQlImg4_9L"},"source":["### utils_"]},{"cell_type":"code","execution_count":50,"metadata":{"id":"CB2yZdQ95Cdg","executionInfo":{"status":"ok","timestamp":1652259021116,"user_tz":-540,"elapsed":3015,"user":{"displayName":"7th June","userId":"08178289703395036410"}}},"outputs":[],"source":["# import pandas as pd\n","# import numpy as np\n","# import logging\n","\n","# def get_line(touch_idx, rtc_):\n","#     touch_idx_copy = touch_idx.copy()\n","\n","#     nan_idx = np.isnan(touch_idx_copy)\n","#     touch_idx_copy[nan_idx] = 0  # for indexing array\n","#     touch_line = rtc_[touch_idx_copy.astype(int)].copy()\n","#     touch_line[nan_idx] = np.nan  # for true comp.\n","\n","#     return touch_line\n","\n","def enlist_tr(res_df, config, np_timeidx, mode='OPEN', show_detail=True):\n","\n","    # ================== enlist wave_unit ================== #\n","    selection_id = config.selection_id\n","    \n","    short_tp_1_, long_tp_1_ = 'short_tp_1_{}'.format(selection_id), 'long_tp_1_{}'.format(selection_id)\n","    short_tp_0_, long_tp_0_ = 'short_tp_0_{}'.format(selection_id), 'long_tp_0_{}'.format(selection_id)\n","    short_tp_gap_, long_tp_gap_ = 'short_tp_gap_{}'.format(selection_id), 'long_tp_gap_{}'.format(selection_id)\n","\n","    short_epout_1_, long_epout_1_ = 'short_epout_1_{}'.format(selection_id), 'long_epout_1_{}'.format(selection_id)\n","    short_epout_0_, long_epout_0_ = 'short_epout_0_{}'.format(selection_id), 'long_epout_0_{}'.format(selection_id)\n","    short_epout_gap_, long_epout_gap_ = 'short_epout_gap_{}'.format(selection_id), 'long_epout_gap_{}'.format(selection_id)\n","\n","    p1_itv1 = config.tr_set.p1_itv1\n","    p1_period1 = config.tr_set.p1_period1\n","    p1_period2 = config.tr_set.p1_period2\n","    p2_itv1 = config.tr_set.p2_itv1\n","    p2_period1 = config.tr_set.p2_period1\n","    p2_period2 = config.tr_set.p2_period2\n","    \n","    len_df = len(res_df)\n","    len_df_range = np.arange(len_df)\n","      \n","    # ------ get candle_lastidx ------ #        \n","    tf_entry = to_itvnum(config.loc_set.point.tf_entry)\n","    b1_shift = np_timeidx % tf_entry + 1  # dynamic\n","    b1_candle_lastidx = (len_df_range - b1_shift).astype(float)\n","    b2_candle_lastidx = (len_df_range - (b1_shift + tf_entry)).astype(float)\n","    b3_candle_lastidx = (len_df_range - (b1_shift + 2 * tf_entry)).astype(float)\n","    b1_candle_lastidx[b1_candle_lastidx < 0] = np.nan\n","    b2_candle_lastidx[b2_candle_lastidx < 0] = np.nan\n","    b3_candle_lastidx[b3_candle_lastidx < 0] = np.nan\n","\n","    high_5T = res_df['high_5T'].to_numpy()\n","    low_5T = res_df['low_5T'].to_numpy()\n","\n","    b2_high_5T = get_line(b2_candle_lastidx, high_5T)\n","    b2_low_5T = get_line(b2_candle_lastidx, low_5T)\n","\n","    wave_itv = 'T'\n","    wave_period = config.tr_set.wave_period\n","    roll_hl_cnt = 4\n","\n","    valid_high_prime_idx, valid_low_prime_idx, roll_high_idx_arr, roll_low_idx_arr = roll_wave_hl_v4(res_df, config, roll_hl_cnt=roll_hl_cnt)   # Todo, df 저장할 방법 고민\n","\n","    wave_high_fill_ = res_df['wave_high_fill_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","    wave_low_fill_ = res_df['wave_low_fill_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","    roll_high_ = get_roll_wave_data(valid_high_prime_idx, roll_high_idx_arr, len_df, wave_high_fill_, roll_hl_cnt)\n","    roll_low_ = get_roll_wave_data(valid_low_prime_idx, roll_low_idx_arr, len_df, wave_low_fill_, roll_hl_cnt)\n","\n","    res_df[short_tp_1_] = wave_low_fill_           # wave_low_fill_ b2_low_5T\n","    res_df[short_tp_0_] = roll_high_[:, -2]   # wave_high_fill_\n","    res_df[long_tp_1_] = wave_high_fill_           # wave_high_fill_ b2_high_5T\n","    res_df[long_tp_0_] = roll_low_[:, -2]     # wave_low_fill_\n","\n","    if config.tr_set.p2_itv1 != \"None\":\n","        p2_period1 = config.tr_set.p2_period1\n","        p2_period2 = config.tr_set.p2_period2\n","        res_df[short_epout_1_] = res_df['dc_lower_{}{}'.format(config.tr_set.p2_itv1, p2_period1)]\n","        res_df[short_epout_0_] = res_df['dc_upper_{}{}'.format(config.tr_set.p2_itv0, p2_period2)]\n","        res_df[long_epout_1_] = res_df['dc_upper_{}{}'.format(config.tr_set.p2_itv1, p2_period1)]\n","        res_df[long_epout_0_] = res_df['dc_lower_{}{}'.format(config.tr_set.p2_itv0, p2_period2)]\n","    else:\n","        res_df[short_epout_1_] = wave_low_fill_   # b2_low_5T\n","        res_df[short_epout_0_] = wave_high_fill_  # roll_high_[:, -2]\n","        res_df[long_epout_1_] = wave_high_fill_   # b2_high_5T\n","        res_df[long_epout_0_] = wave_low_fill_    # roll_low_[:, -2]\n","\n","    # ------ inversion ------ #\n","    if config.pos_set.short_inversion or config.pos_set.long_inversion:\n","        res_df.rename({short_tp_1_: long_tp_1_, long_tp_1_: short_tp_1_}, axis=1, inplace=True)\n","        res_df.rename({short_tp_0_: long_tp_0_, long_tp_0_: short_tp_0_}, axis=1, inplace=True)\n","        res_df.rename({short_epout_1_: long_epout_1_, long_epout_1_: short_epout_1_}, axis=1, inplace=True)\n","        res_df.rename({short_epout_0_: long_epout_0_, long_epout_0_: short_epout_0_}, axis=1, inplace=True)\n","\n","    res_df[short_tp_gap_] = abs(res_df[short_tp_1_] - res_df[short_tp_0_])\n","    res_df[long_tp_gap_] = abs(res_df[long_tp_1_] - res_df[long_tp_0_])\n","    res_df[short_epout_gap_] = abs(res_df[short_epout_1_] - res_df[short_epout_0_])\n","    res_df[long_epout_gap_] = abs(res_df[long_epout_1_] - res_df[long_epout_0_])\n","\n","    # ================== enlist tr_set ================== #    \n","    short_open_res = np.ones(len_df)\n","    long_open_res = np.ones(len_df)\n","\n","    tp_cols = [short_tp_1_, short_tp_0_, short_tp_gap_, long_tp_1_, long_tp_0_, long_tp_gap_]\n","    epout_cols = [short_epout_1_, short_epout_0_, short_epout_gap_, long_epout_1_, long_epout_0_, long_epout_gap_]\n","    data_cols = ['open', 'high', 'low', 'close']  # Todo - public_indi 이전에 해야할지도 모름 # 'close', 'haopen', 'hahigh', 'halow', 'haclose'\n","\n","    short_tp_1, short_tp_0, short_tp_gap, long_tp_1, long_tp_0, long_tp_gap = [res_df[col_].to_numpy() for col_ in tp_cols]\n","    short_epout_1, short_epout_0, short_epout_gap, long_epout_1, long_epout_0, long_epout_gap = [res_df[col_].to_numpy() for col_ in epout_cols]\n","    open, high, low, close = [res_df[col_].to_numpy() for col_ in data_cols]\n","\n","    # ---------------- point ---------------- #\n","    if p2_itv1 != \"None\":\n","        short_point1_on2_idx = pd.Series(\n","            np.where(res_df['short_wave_point_{}{}{}'.format(p1_itv1, p1_period1, p1_period2)], len_df_range, np.nan)).rolling(point1_to2_period,\n","                                                                                                                                    min_periods=1).max().to_numpy()  # period 내의 max_point1_idx\n","        long_point1_on2_idx = pd.Series(\n","            np.where(res_df['long_wave_point_{}{}{}'.format(p1_itv1, p1_period1, p1_period2)], len_df_range, np.nan)).rolling(point1_to2_period,\n","                                                                                                                                   min_periods=1).max().to_numpy()\n","\n","        short_point2_idx = pd.Series(\n","            np.where(res_df['short_wave_point_{}{}{}'.format(p2_itv1, p2_period1, p2_period2)], len_df_range, np.nan)).to_numpy()\n","        long_point2_idx = pd.Series(\n","            np.where(res_df['long_wave_point_{}{}{}'.format(p2_itv1, p2_period1, p2_period2)], len_df_range, np.nan)).to_numpy()\n","\n","        res_df['short_point_idxgap_{}'.format(selection_id)] = short_point2_idx - short_point1_on2_idx\n","        res_df['long_point_idxgap_{}'.format(selection_id)] = long_point2_idx - long_point1_on2_idx\n","\n","        # ------ p1 & p2 ------ #\n","        short_open_res *= ~np.isnan(res_df['short_point_idxgap_{}'.format(selection_id)].to_numpy())\n","        long_open_res *= ~np.isnan(res_df['long_point_idxgap_{}'.format(selection_id)].to_numpy())\n","\n","        if show_detail:\n","          sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","          sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))\n","\n","        # ------ p2 amax > p1_idx (long) ------ #\n","        short_open_res *= res_df['short_upper_touch_idx_{}{}{}'.format(p2_itv1, p2_period1, p2_period2)].to_numpy() > short_point1_on2_idx\n","        long_open_res *= res_df['long_lower_touch_idx_{}{}{}'.format(p2_itv1, p2_period1, p2_period2)].to_numpy() > long_point1_on2_idx\n","\n","        if show_detail:\n","          sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","          sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))\n","\n","        # ------ higher low (long) ------ #\n","        # short_a_line1_on2_ = get_line(short_point1_on2_idx, res_df['short_a_line_{}{}{}'.format(p1_itv1, p1_period1, p1_period2)].to_numpy())\n","        # long_a_line1_on2_ = get_line(long_point1_on2_idx, res_df['long_a_line_{}{}{}'.format(p1_itv1, p1_period1, p1_period2)].to_numpy())\n","\n","        # short_a_line2_ = res_df['short_a_line_{}{}{}'.format(p2_itv1, p2_period1, p2_period2)].to_numpy()\n","        # long_a_line2_ = res_df['long_a_line_{}{}{}'.format(p2_itv1, p2_period1, p2_period2)].to_numpy()\n","\n","        # short_open_res *= short_a_line1_on2_ >= short_a_line2_\n","        # long_open_res *= long_a_line1_on2_ <= long_a_line2_\n","\n","        # print(np.sum(long_open_res == 1))\n","\n","    else:  \n","        # ------ p1 only ------ #\n","        res_df['short_point_idxgap_{}'.format(selection_id)] = 0  # default\n","        res_df['long_point_idxgap_{}'.format(selection_id)] = 0 \n","        \n","        # ============ wave_point ============ #\n","        short_open_res *= res_df['wave_cu_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","        long_open_res *= res_df['wave_co_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","\n","        if show_detail:\n","          sys_log.warning(\"wave_point\")\n","          sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","          sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))\n","\n","        # ------ wave_mm ------ #\n","        wave_high_terms_cnt_fill_ = res_df['wave_high_terms_cnt_fill_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","        wave_low_terms_cnt_fill_ = res_df['wave_low_terms_cnt_fill_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","\n","        short_open_res *= (wave_high_terms_cnt_fill_ > config.tr_set.wave_greater2) & (wave_low_terms_cnt_fill_ > config.tr_set.wave_greater1)\n","        long_open_res *= (wave_low_terms_cnt_fill_ > config.tr_set.wave_greater2) & (wave_high_terms_cnt_fill_ > config.tr_set.wave_greater1)\n","\n","        if show_detail:\n","          sys_log.warning(\"wave_mm\")\n","          sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","          sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))\n","\n","        # ================== pattern depiction ================== #  \n","        bb_upper_ = res_df['bb_upper_{}{}'.format('T', 60)].to_numpy()\n","        bb_lower_ = res_df['bb_lower_{}{}'.format('T', 60)].to_numpy()\n","        bb_upper2_ = res_df['bb_upper2_{}{}'.format('T', 60)].to_numpy()\n","        bb_lower2_ = res_df['bb_lower2_{}{}'.format('T', 60)].to_numpy()\n","        bb_upper3_ = res_df['bb_upper3_{}{}'.format('T', 60)].to_numpy()\n","        bb_lower3_ = res_df['bb_lower3_{}{}'.format('T', 60)].to_numpy()\n","\n","        # ------ compare by back_idx  ------ #   \n","        b3_bb_upper_ = get_line(b3_candle_lastidx, bb_upper_)\n","        b3_bb_lower_ = get_line(b3_candle_lastidx, bb_lower_)\n","        b3_bb_upper2_ = get_line(b3_candle_lastidx, bb_upper2_)\n","        b3_bb_lower2_ = get_line(b3_candle_lastidx, bb_lower2_)\n","        b3_close = get_line(b3_candle_lastidx, close)\n","\n","        b2_bb_upper2_ = get_line(b2_candle_lastidx, bb_upper2_)\n","        b2_bb_lower2_ = get_line(b2_candle_lastidx, bb_lower2_)\n","        b2_bb_upper3_ = get_line(b2_candle_lastidx, bb_upper3_)\n","        b2_bb_lower3_ = get_line(b2_candle_lastidx, bb_lower3_)\n","        b2_close = get_line(b2_candle_lastidx, close)\n","\n","        b1_bb_upper_ = get_line(b1_candle_lastidx, bb_upper_)\n","        b1_bb_lower_ = get_line(b1_candle_lastidx, bb_lower_)\n","        b1_bb_upper2_ = get_line(b1_candle_lastidx, bb_upper2_)\n","        b1_bb_lower2_ = get_line(b1_candle_lastidx, bb_lower2_)\n","        b1_close = get_line(b1_candle_lastidx, close)\n","        b1_high_5T = get_line(b1_candle_lastidx, high_5T)\n","        b1_low_5T = get_line(b1_candle_lastidx, low_5T)\n","\n","        short_open_res *= (b3_bb_lower_ > b3_close) & (b3_close > b3_bb_lower2_)\n","        short_open_res *= (b2_bb_lower2_ > b2_close) & (b2_close > b2_bb_lower3_)\n","        short_open_res *= (b1_bb_lower_ > b1_close) & (b1_close > b1_bb_lower2_)\n","\n","        long_open_res *= (b3_bb_upper_ < b3_close) & (b3_close < b3_bb_upper2_)\n","        long_open_res *= (b2_bb_upper2_ < b2_close) & (b2_close < b2_bb_upper3_)\n","        long_open_res *= (b1_bb_upper_ < b1_close) & (b1_close < b1_bb_upper2_)\n","\n","        # short_open_res *= (b2_low_5T < b1_low_5T) & (b2_close < b1_close)\n","        # long_open_res *= (b2_high_5T > b1_high_5T) & (b2_close > b1_close)\n","\n","        if show_detail:\n","          sys_log.warning(\"compare by back_idx\")\n","          sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","          sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1))) \n","\n","        # # ------ bb_stream ------ #        \n","        # roll_high_bb_upper_ = get_roll_wave_data(valid_high_prime_idx, roll_high_idx_arr, len_df, bb_upper_, roll_hl_cnt)\n","        # roll_low_bb_upper_ = get_roll_wave_data(valid_low_prime_idx, roll_low_idx_arr, len_df, bb_upper_, roll_hl_cnt)\n","        # roll_high_bb_upper2_ = get_roll_wave_data(valid_high_prime_idx, roll_high_idx_arr, len_df, bb_upper2_, roll_hl_cnt)\n","        # roll_low_bb_upper2_ = get_roll_wave_data(valid_low_prime_idx, roll_low_idx_arr, len_df, bb_upper2_, roll_hl_cnt)\n","\n","        # roll_high_bb_lower_ = get_roll_wave_data(valid_high_prime_idx, roll_high_idx_arr, len_df, bb_lower_, roll_hl_cnt)\n","        # roll_low_bb_lower_ = get_roll_wave_data(valid_low_prime_idx, roll_low_idx_arr, len_df, bb_lower_, roll_hl_cnt)\n","        # roll_high_bb_lower2_ = get_roll_wave_data(valid_high_prime_idx, roll_high_idx_arr, len_df, bb_lower2_, roll_hl_cnt)\n","        # roll_low_bb_lower2_ = get_roll_wave_data(valid_low_prime_idx, roll_low_idx_arr, len_df, bb_lower2_, roll_hl_cnt)\n","\n","        # wave_base_ = res_df['dc_base_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","\n","        # roll_high_wave_base_ = get_roll_wave_data(valid_high_prime_idx, roll_high_idx_arr, len_df, wave_base_, roll_hl_cnt)\n","        # roll_low_wave_base_ = get_roll_wave_data(valid_low_prime_idx, roll_low_idx_arr, len_df, wave_base_, roll_hl_cnt)\n","\n","        # short_open_res *= (roll_high_bb_lower_[:, -2] > roll_high_wave_base_[:, -2]) & (roll_high_wave_base_[:, -2] > roll_high_bb_lower2_[:, -2])\n","        # short_open_res *= (roll_low_bb_lower_[:, -1] > roll_low_wave_base_[:, -1]) & (roll_low_wave_base_[:, -1] > roll_low_bb_lower2_[:, -1])\n","        # short_open_res *= (roll_high_bb_lower_[:, -1] > roll_high_wave_base_[:, -1]) & (roll_high_wave_base_[:, -1] > roll_high_bb_lower2_[:, -1])\n","\n","        # long_open_res *= (roll_low_bb_upper_[:, -2] < roll_low_wave_base_[:, -2]) & (roll_low_wave_base_[:, -2] < roll_low_bb_upper2_[:, -2])\n","        # long_open_res *= (roll_high_bb_upper_[:, -1] < roll_high_wave_base_[:, -1]) & (roll_high_wave_base_[:, -1] < roll_high_bb_upper2_[:, -1])\n","        # long_open_res *= (roll_low_bb_upper_[:, -1] < roll_low_wave_base_[:, -1]) & (roll_low_wave_base_[:, -1] < roll_low_bb_upper2_[:, -1])\n","\n","        # if show_detail:\n","        #   sys_log.warning(\"bb_stream\")\n","        #   sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","        #   sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))  \n","        \n","        # # ------ hhhl (long) ------ #\n","        # short_open_res *= (roll_high_[:, -2] > roll_high_[:, -1]) # & (roll_low_[:, -2] > roll_low_[:, -1])\n","        # long_open_res *= (roll_low_[:, -2] < roll_low_[:, -1]) # & (roll_high_[:, -2] < roll_high_[:, -1])\n","\n","        # if show_detail:\n","        #   sys_log.warning(\"hhhl\")\n","        #   sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","        #   sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))\n","\n","        # # ------ roll_high < bb_upper2 (long) ------ #\n","        # short_open_res *= (roll_low_[:, -4] > roll_low_bb_lower2_[:, -4])\n","        # short_open_res *= (roll_low_[:, -3] > roll_low_bb_lower2_[:, -3])\n","        # short_open_res *= (roll_low_[:, -2] > roll_low_bb_lower2_[:, -2])\n","        # short_open_res *= (roll_low_[:, -1] > roll_low_bb_lower2_[:, -1])\n","\n","        # long_open_res *= (roll_high_[:, -4] < roll_high_bb_upper2_[:, -4])\n","        # long_open_res *= (roll_high_[:, -3] < roll_high_bb_upper2_[:, -3])\n","        # long_open_res *= (roll_high_[:, -2] < roll_high_bb_upper2_[:, -2])\n","        # long_open_res *= (roll_high_[:, -1] < roll_high_bb_upper2_[:, -1])\n","        \n","        # if show_detail:\n","        #   sys_log.warning(\"roll_high < bb_upper2\")\n","        #   sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","        #   sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))\n","\n","        # ------ base_15T < wave_base ------ #\n","        # dc_base_ = res_df['dc_base_{}{}'.format(p1_itv1, p1_period1)].to_numpy()\n","        # wave_base_ = res_df['dc_base_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","\n","        # short_open_res *= (dc_base_ > wave_base_) & (dc_base_ > close)\n","        # long_open_res *= (dc_base_ < wave_base_) & (dc_base_ < close)\n","\n","        # if show_detail:\n","        #   sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","        #   sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))     \n","        \n","\n","    res_df['short_open_{}'.format(selection_id)] = short_open_res\n","    res_df['long_open_{}'.format(selection_id)] = long_open_res\n","\n","    # ================== tr_set ================== #\n","    # ------------ tp ------------ #\n","    tpg = config.tr_set.tp_gap\n","    res_df['short_tp_{}'.format(selection_id)] = short_tp_1 - short_tp_gap * tpg\n","    res_df['long_tp_{}'.format(selection_id)] = long_tp_1 + long_tp_gap * tpg\n","    # res_df['short_tp_{}'.format(selection_id)] = short_tp_1 - short_epout_gap * tpg\n","    # res_df['long_tp_{}'.format(selection_id)] = long_tp_1 + long_epout_gap * tpg\n","\n","    # ------ limit_ep ------ #\n","    if config.ep_set.entry_type == \"LIMIT\":\n","        epg = config.tr_set.ep_gap\n","        res_df['short_ep_{}'.format(selection_id)] = short_epout_0 + short_epout_gap * epg\n","        res_df['long_ep_{}'.format(selection_id)] = long_epout_0 - long_epout_gap * epg\n","        \n","        # res_df['short_ep_{}'.format(selection_id)] = short_tp_0 + short_tp_gap * epg\n","        # res_df['long_ep_{}'.format(selection_id)] = long_tp_0 - long_tp_gap * epg\n","        \n","        # wave_cu_marker_ = res_df['wave_cu_marker_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","        # wave_co_marker_ = res_df['wave_co_marker_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","        # res_df['short_ep_{}'.format(selection_id)] = wave_cu_marker_ + short_epout_gap * epg\n","        # res_df['long_ep_{}'.format(selection_id)] = wave_co_marker_ - long_epout_gap * epg\n","\n","    # ------ market_ep ------ #\n","    else:\n","        res_df['short_ep_{}'.format(selection_id)] = close\n","        res_df['long_ep_{}'.format(selection_id)] = close\n","\n","    # ------------ out ------------ #\n","    outg = config.tr_set.out_gap\n","    # res_df['short_out_{}'.format(selection_id)] = short_epout_0 + short_epout_gap * outg\n","    # res_df['long_out_{}'.format(selection_id)] = long_epout_0 - long_epout_gap * outg\n","    res_df['short_out_{}'.format(selection_id)] = short_tp_0 + short_tp_gap * outg\n","    res_df['long_out_{}'.format(selection_id)] = long_tp_0 - long_tp_gap * outg\n","\n","    # ------------ point validation ------------ #\n","    short_tp_ = res_df['short_tp_{}'.format(selection_id)].to_numpy()\n","    short_ep_ = res_df['short_ep_{}'.format(selection_id)].to_numpy()\n","    short_out_ = res_df['short_out_{}'.format(selection_id)].to_numpy()\n","    short_open_res *= (short_tp_ < short_ep_) & (short_ep_ < short_out_)\n","    # short_open_res *= close < short_ep_   # reject open_execution\n","    short_open_res *= close < short_out_    # reject open_execution\n","    res_df['short_open_{}'.format(selection_id)] = short_open_res * (not config.pos_set.short_ban)\n","\n","    long_tp_ = res_df['long_tp_{}'.format(selection_id)].to_numpy()\n","    long_ep_ = res_df['long_ep_{}'.format(selection_id)].to_numpy()\n","    long_out_ = res_df['long_out_{}'.format(selection_id)].to_numpy()\n","    long_open_res *= (long_tp_ > long_ep_) & (long_ep_ > long_out_)\n","    # long_open_res *= close > long_ep_   # reject open_execution\n","    long_open_res *= close > long_out_    # reject open_execution\n","    res_df['long_open_{}'.format(selection_id)] = long_open_res * (not config.pos_set.long_ban)\n","\n","    if show_detail:\n","      sys_log.warning(\"point validation\")\n","      sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","      sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))\n","    \n","    # ------------ wave_bias ------------ #\n","    wb_tpg = config.tr_set.wb_tp_gap\n","    wb_outg = config.tr_set.wb_out_gap\n","    res_df['short_wave_1_{}'.format(selection_id)] = short_tp_1 - short_tp_gap * wb_tpg\n","    res_df['long_wave_1_{}'.format(selection_id)] = long_tp_1 + long_tp_gap * wb_tpg\n","    \n","    res_df['short_wave_0_{}'.format(selection_id)] = short_tp_0 + short_tp_gap * wb_outg   # hhc\n","    res_df['long_wave_0_{}'.format(selection_id)] = long_tp_0 - long_tp_gap * wb_outg\n","    # res_df['short_wave_0_{}'.format(selection_id)] = short_epout_0 + short_epout_gap * wb_outg    # hlc\n","    # res_df['long_wave_0_{}'.format(selection_id)] = long_epout_0 - long_epout_gap * wb_outg\n","\n","    # ------ tr ------ #\n","    res_df['short_tr_{}'.format(selection_id)] = abs(\n","        (short_ep_ / short_tp_ - config.trader_set.limit_fee - 1) / (short_ep_ / short_out_ - config.trader_set.market_fee - 1))\n","    res_df['long_tr_{}'.format(selection_id)] = abs(\n","        (long_tp_ / long_ep_ - config.trader_set.limit_fee - 1) / (long_out_ / long_ep_ - config.trader_set.market_fee - 1))\n","\n","    # ------ zoned_ep ------ #\n","    if config.tr_set.c_ep_gap != \"None\":\n","        # res_df['short_ep_org_{}'.format(selection_id)] = res_df['short_ep_{}'.format(selection_id)].copy()\n","        # res_df['long_ep_org_{}'.format(selection_id)] = res_df['long_ep_{}'.format(selection_id)].copy()\n","        res_df['short_ep2_{}'.format(selection_id)] = short_epout_1 + short_epout_gap * config.tr_set.c_ep_gap\n","        res_df['long_ep2_{}'.format(selection_id)] = long_epout_1 - long_epout_gap * config.tr_set.c_ep_gap\n","\n","    # ------ zoned_out ------ #\n","    if config.tr_set.t_out_gap != \"None\":\n","        # res_df['short_out_org_{}'.format(selection_id)] = res_df['short_out_{}'.format(selection_id)].copy()\n","        # res_df['long_out_org_{}'.format(selection_id)] = res_df['long_out_{}'.format(selection_id)].copy()\n","        res_df['short_out2_{}'.format(selection_id)] = short_epout_0 + short_epout_gap * config.tr_set.t_out_gap\n","        res_df['long_out2_{}'.format(selection_id)] = long_epout_0 - long_epout_gap * config.tr_set.t_out_gap\n","\n","    return res_df\n"]},{"cell_type":"markdown","source":["#### legacy"],"metadata":{"id":"HuCb0phoPN83"}},{"cell_type":"code","source":["# # ------ compare by back_idx  ------ #   \n","        # b3_bb_upper_ = get_line(b3_candle_lastidx, bb_upper_)\n","        # b3_bb_lower_ = get_line(b3_candle_lastidx, bb_lower_)\n","        # b3_bb_upper2_ = get_line(b3_candle_lastidx, bb_upper2_)\n","        # b3_bb_lower2_ = get_line(b3_candle_lastidx, bb_lower2_)\n","        # b3_close = get_line(b3_candle_lastidx, close)\n","\n","        # b2_bb_upper2_ = get_line(b2_candle_lastidx, bb_upper2_)\n","        # b2_bb_lower2_ = get_line(b2_candle_lastidx, bb_lower2_)\n","        # b2_bb_upper3_ = get_line(b2_candle_lastidx, bb_upper3_)\n","        # b2_bb_lower3_ = get_line(b2_candle_lastidx, bb_lower3_)\n","        # b2_close = get_line(b2_candle_lastidx, close)\n","\n","        # b1_bb_upper_ = get_line(b1_candle_lastidx, bb_upper_)\n","        # b1_bb_lower_ = get_line(b1_candle_lastidx, bb_lower_)\n","        # b1_bb_upper2_ = get_line(b1_candle_lastidx, bb_upper2_)\n","        # b1_bb_lower2_ = get_line(b1_candle_lastidx, bb_lower2_)\n","        # b1_close = get_line(b1_candle_lastidx, close)\n","        # b1_high_5T = get_line(b1_candle_lastidx, high_5T)\n","        # b1_low_5T = get_line(b1_candle_lastidx, low_5T)\n","\n","        # short_open_res *= (b3_bb_lower_ > b3_close) & (b3_close > b3_bb_lower2_)\n","        # short_open_res *= (b2_bb_lower2_ > b2_close) & (b2_close > b2_bb_lower3_)\n","        # short_open_res *= (b1_bb_lower_ > b1_close) & (b1_close > b1_bb_lower2_)\n","\n","        # long_open_res *= (b3_bb_upper_ < b3_close) & (b3_close < b3_bb_upper2_)\n","        # long_open_res *= (b2_bb_upper2_ < b2_close) & (b2_close < b2_bb_upper3_)\n","        # long_open_res *= (b1_bb_upper_ < b1_close) & (b1_close < b1_bb_upper2_)\n","\n","        # # short_open_res *= (b2_low_5T < b1_low_5T) & (b2_close < b1_close)\n","        # # long_open_res *= (b2_high_5T > b1_high_5T) & (b2_close > b1_close)\n","\n","        # if show_detail:\n","        #   sys_log.warning(\"compare by back_idx\")\n","        #   sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","        #   sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1))) \n","\n","        # ------ low_confirm ------ #\n","        # short_open_res *= b1_high_5T > wave_high_fill_\n","        # long_open_res *= b1_low_5T < wave_low_fill_\n","\n","        # if show_detail:\n","        #   sys_log.warning(\"low_confirm\")\n","        #   sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","        #   sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1))) \n","        \n","        # ------ candle_ratio ------ #\n","        # b2_candle_range_5T = b2_high_5T - b2_low_5T\n","        # b1_candle_range_5T = b1_high_5T - b1_low_5T\n","        \n","        # short_open_res *= b1_candle_range_5T / b2_candle_range_5T < config.loc_set.point.crr\n","        # long_open_res *= b1_candle_range_5T / b2_candle_range_5T < config.loc_set.point.crr\n","\n","        # if show_detail:\n","        #   sys_log.warning(\"candle_ratio\")\n","        #   sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","        #   sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1))) \n","\n","        # ------ wick_ratio ------ #\n","        # upper_wick_ratio_ = res_df['upper_wick_ratio_{}'.format(config.loc_set.point.wick_itv)].to_numpy()\n","        # lower_wick_ratio_ = res_df['lower_wick_ratio_{}'.format(config.loc_set.point.wick_itv)].to_numpy()\n","        # b2_upper_wick_ratio_ = get_line(b2_candle_lastidx, upper_wick_ratio_)\n","        # b2_lower_wick_ratio_ = get_line(b2_candle_lastidx, lower_wick_ratio_)\n","\n","        # short_open_res *= b2_upper_wick_ratio_ < config.loc_set.point.short_wick_ratio\n","        # long_open_res *= b2_upper_wick_ratio_ < config.loc_set.point.long_wick_ratio\n","\n","        # if show_detail:\n","        #   sys_log.warning(\"wick_ratio\")\n","        #   sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","        #   sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1))) \n","\n","        # ------ large wave1_range ------ #          \n","        # roll_bb_upper_ = get_roll_wave_data(valid_high_prime_idx, roll_high_idx_arr, len_df, bb_upper_, roll_hl_cnt)\n","        # roll_bb_lower_ = get_roll_wave_data(valid_low_prime_idx, roll_low_idx_arr, len_df, bb_lower_, roll_hl_cnt)\n","        # roll_bb_upper3_ = get_roll_wave_data(valid_high_prime_idx, roll_high_idx_arr, len_df, bb_upper3_, roll_hl_cnt)\n","        # roll_bb_lower3_ = get_roll_wave_data(valid_low_prime_idx, roll_low_idx_arr, len_df, bb_lower3_, roll_hl_cnt)\n","\n","        # short_open_res *= (roll_bb_upper_[:, -2] < roll_high_[:, -2]) & (roll_low_[:, -1] < roll_bb_lower_[:, -1]) & (roll_low_[:, -1] > roll_bb_lower3_[:, -1])\n","        # long_open_res *= (roll_bb_upper_[:, -1] < roll_high_[:, -1]) & (roll_low_[:, -2] < roll_bb_lower_[:, -2]) & (roll_high_[:, -1] < roll_bb_upper3_[:, -1])\n","\n","        # if show_detail:\n","        #   sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","        #   sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))\n","        \n","        # ------ low in bb_level3 ------ #  Todo, idx sync 맞춰야할 것\n","        # short_open_res *= (bb_upper2_ < wave_high_fill_) & (wave_high_fill_ < bb_upper3_)\n","        # long_open_res *= (bb_lower3_ < wave_low_fill_) & (wave_low_fill_ < bb_lower2_)\n","\n","        # if show_detail:\n","        #   sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","        #   sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))\n","\n","        # ------ first_high ------ #        \n","        # wave_high_prime_idx_fill_= res_df['wave_high_prime_idx_fill_{}{}'.format(itv, period1)].to_numpy()\n","        # wave_low_prime_idx_fill_= res_df['wave_low_prime_idx_fill_{}{}'.format(itv, period1)].to_numpy()\n","        # cu_prime_wave_base = get_line(cu_prime_idx_fill_, wave_base_)\n","        # co_prime_wave_base = get_line(co_prime_idx_fill_, wave_base_)\n","\n","        # # short_open_res *= (co_roll_high_[:, -1] > dc_base_) & (dc_base_ > co_roll_low_[:, -1])\n","        # # long_open_res *= (cu_roll_low_[:, -1] < dc_base_) & (dc_base_ < cu_roll_high_[:, -1])\n","\n","        # short_open_res *= (cu_prime_wave_base > dc_base_) & (dc_base_ > co_prime_wave_base)\n","        # long_open_res *= (co_prime_wave_base < dc_base_) & (dc_base_ < cu_prime_wave_base)\n","\n","        # if show_detail:\n","        #   sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","        #   sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))\n","\n","        # cu_prime_dc_base = get_line(cu_prime_idx_fill_, dc_base_)        \n","        # co_prime_dc_base = get_line(co_prime_idx_fill_, dc_base_)\n","        \n","        # shift_size = to_itvnum(p1_itv1)\n","        # b1_dc_base_ = res_df['dc_base_{}{}'.format(p1_itv1, p1_period1)].shift(shift_size).to_numpy()\n","\n","        # short_open_res *= (b1_dc_base_ < dc_base_)\n","        # long_open_res *= (b1_dc_base_ > dc_base_)\n","\n","        # if show_detail:\n","        #   sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","        #   sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))\n","\n","        # ------ b1_base_15T < wave_high ------ #\n","        # short_open_res *= (b1_dc_base_ > co_roll_low_[:, -1])\n","        # long_open_res *= (b1_dc_base_ < cu_roll_high_[:, -1])\n","\n","        # if show_detail:\n","        #   sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","        #   sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))   \n","        \n","        # ------ higher high (long) ------ #\n","        # short_open_res *= co_roll_low_[:, -2] > co_roll_low_[:, -1]\n","        # long_open_res *= cu_roll_high_[:, -2] < cu_roll_high_[:, -1]\n","\n","        # short_open_res *= co_roll_low_[:, -3] > co_roll_low_[:, -2]\n","        # long_open_res *= cu_roll_high_[:, -3] < cu_roll_high_[:, -2]\n","\n","        # if show_detail:\n","        #   sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","        #   sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))\n","\n","        # ------ higher low (long) ------ # \n","        # short_open_res *= co_roll_high_[:, -2] > co_roll_high_[:, -1]\n","        # long_open_res *= cu_roll_low_[:, -2] < cu_roll_low_[:, -1]\n","\n","        # if show_detail:\n","        #   sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","        #   sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))  \n","\n","        # ------ tf2_base < wave_low ------ #\n","        # short_open_res *= (dc_base_ > co_roll_high_[:, -1])\n","        # long_open_res *= (dc_base_ < cu_roll_low_[:, -1])\n","\n","        # if show_detail:\n","        #   sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","        #   sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))  \n","\n","        # short_open_res *= (cu_prime_wave_base > cu_prime_dc_base) & (dc_base_ > co_prime_wave_base)\n","        # long_open_res *= (co_prime_wave_base < co_prime_dc_base) & (dc_base_ < cu_prime_wave_base)\n","\n","        short_open_res *= (co_prime_dc_base < co_roll_low_[:, -2])\n","        long_open_res *= (cu_prime_dc_base > cu_roll_high_[:, -2])  #  b1_cu_prime_idx’s tf2_base > b1_high -> b1 이 아님 (error)\n","\n","\n","        res_df[short_epout_1_] = res_df['short_wave_low_{}{}{}'.format(itv, period1, period2)]\n","        res_df[short_epout_0_] = res_df['short_new_wave_high_{}{}{}'.format(itv, period1, period2)]\n","        res_df[long_epout_1_] = res_df['long_wave_high_{}{}{}'.format(itv, period1, period2)]\n","        res_df[long_epout_0_] = res_df['long_new_wave_low_{}{}{}'.format(itv, period1, period2)]\n","        \n","    # b1_itv_num = to_itvnum(config.tr_set.p2_itv0)\n","    # b2_itv_num = to_itvnum(config.tr_set.p2_itv0) * 2  # multi 2 for imb_v2\n","\n","    # res_df[short_tp_1_] = res_df['dc_lower_{}{}'.format(itv, period1)]\n","    # res_df[short_tp_0_] = res_df['dc_upper_{}{}'.format(itv, period2)]\n","    # # res_df[short_tp_0_] = res_df['dc_upper_15T4']\n","    # res_df[long_tp_1_] = res_df['dc_upper_{}{}'.format(itv, period1)]\n","    # res_df[long_tp_0_] = res_df['dc_lower_{}{}'.format(itv, period2)]\n","    # # res_df[long_tp_0_] = res_df['dc_lower_15T4']\n","    \n","        # ------ base_cc ------ #\n","        dc_base_ = res_df['dc_base_{}{}'.format(p1_itv1, p1_period1)].to_numpy()\n","\n","        # close_ = res_df['close_{}'.format(config.loc_set.point.tf_entry)].to_numpy()\n","        # b1_dc_base_ = res_df['dc_base_{}{}'.format(p1_itv1, p1_period1)].shift(tf_entry).to_numpy()\n","        # b1_close_ = res_df['close_{}'.format(config.loc_set.point.tf_entry)].shift(tf_entry).to_numpy()\n","\n","        # short_open_res *= ((b1_close_ > dc_base_) & (dc_base_ > close_)) | ((b1_close_ > b1_dc_base_) & (dc_base_ > close_))\n","        # long_open_res *= ((b1_close_ < dc_base_) & (dc_base_ < close_)) | ((b1_close_ < b1_dc_base_) & (dc_base_ < close_))\n","\n","        # if show_detail:\n","        #   sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","        #   sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))\n","        \n","        # ------ tf_entry ------ #\n","        # tf_entry = to_itvnum(config.loc_set.point.tf_entry)\n","        \n","        # short_open_res *= np_timeidx % tf_entry == (tf_entry - 1)\n","        # long_open_res *= np_timeidx % tf_entry == (tf_entry - 1) \n","\n","        # if show_detail:\n","        #   sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","        #   sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))\n","\n","    \n","        # ------ cppr 로 양음봉 check ------ # \n","        # tf_entry = to_itvnum(config.loc_set.point.tf_entry)\n","\n","        # res_df['b1_cppr_{}'.format(config.loc_set.point.tf_entry)] = res_df['cppr_{}'.format(config.loc_set.point.tf_entry)].shift(tf_entry)\n","        # b1_cppr_ = res_df['b1_cppr_{}'.format(config.loc_set.point.tf_entry)].to_numpy()  # check b1's cppr in ep_loc\n","        # cppr_ = res_df['cppr_{}'.format(config.loc_set.point.tf_entry)].to_numpy()\n","        # short_open_res *= (b1_cppr_ > 0) & (cppr_ < 0)\n","        # long_open_res *= (b1_cppr_ < 0) & (cppr_ > 0)\n","\n","        # res_df['b1_updbr'] = res_df['dc_upper_15T4_br'].shift(tf_entry).to_numpy()\n","        # res_df['b1_lwdbr'] = res_df['dc_lower_15T4_br'].shift(tf_entry).to_numpy()\n","        \n","        # res_df['b1_updbr_cppr'] = b1_cppr_ * res_df['b1_updbr'].to_numpy()\n","        # res_df['b1_lwdbr_cppr'] = b1_cppr_ * res_df['b1_lwdbr'].to_numpy()\n","\n","        # if show_detail:\n","        #   sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","        #   sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))\n","\n","        # ------ dc_cross ------ #\n","        # b1_dc_upper_15T4 = res_df['dc_upper_15T4'].shift(tf_entry).to_numpy()\n","        # b1_dc_lower_15T4 = res_df['dc_lower_15T4'].shift(tf_entry).to_numpy()\n","        # b1_high_ = res_df['high_{}'.format(config.loc_set.point.tf_entry)].shift(tf_entry).to_numpy()\n","        # b1_low_ = res_df['low_{}'.format(config.loc_set.point.tf_entry)].shift(tf_entry).to_numpy()\n","        # short_open_res *= b1_high_ > b1_dc_upper_15T4\n","        # long_open_res *= b1_low_ < b1_dc_lower_15T4\n","        \n","        # ------ dc_cc ------ #\n","        # b1_close_ = res_df['close_{}'.format(config.loc_set.point.tf_entry)].shift(tf_entry).to_numpy()\n","        # short_open_res *= b1_close_ > b1_dc_upper_15T4\n","        # long_open_res *= b1_close_ < b1_dc_lower_15T4\n","\n","        # if show_detail:\n","        #   sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","        #   sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))\n","\n","        # ------ empty_space ------ #       \n","        # dc_upper_15T4 = res_df['dc_upper_15T4'].to_numpy()\n","        # dc_lower_15T4 = res_df['dc_lower_15T4'].to_numpy() \n","        # high_ = res_df['high_{}'.format(config.loc_set.point.tf_entry)].to_numpy()\n","        # low_ = res_df['low_{}'.format(config.loc_set.point.tf_entry)].to_numpy()\n","        # short_open_res *= high_ < dc_upper_15T4\n","        # long_open_res *= low_ > dc_lower_15T4\n","        \n","        # ------ candle_pattern ------ #  \n","        # pattern_column = \"{}_{}\".format(config.loc_set.point.candle_pattern, config.loc_set.point.tf_entry)\n","        # short_open_res *= res_df[pattern_column].to_numpy() < 0\n","        # long_open_res *= res_df[pattern_column].to_numpy() > 0\n","\n","        # if show_detail:\n","        #   sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","        #   sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))\n","\n","\n","        # ------ lower_touch > upper_touch (long) ------ #\n","        # short_open_res *= res_df['short_upper_touch_idx_{}{}{}'.format(p1_itv1, p1_period1, p1_period2)].to_numpy() > res_df['short_lower_touch_idx_{}{}{}'.format(p1_itv1, p1_period1, p1_period2)].to_numpy()\n","        # long_open_res *= res_df['long_lower_touch_idx_{}{}{}'.format(p1_itv1, p1_period1, p1_period2)].to_numpy() > res_df['long_upper_touch_idx_{}{}{}'.format(p1_itv1, p1_period1, p1_period2)].to_numpy()\n","\n","        # ------ base_3T cross ------ #\n","        # dc_base_3T = res_df['dc_base_3T'].to_numpy()\n","        # b1_close = res_df['close'].shift(1).to_numpy()\n","        # short_open_res *= (b1_close > dc_base_3T) & (dc_base_3T > close)\n","        # long_open_res *= (b1_close < dc_base_3T) & (dc_base_3T < close)\n","\n","        # ------ wave_low < base_5T (long) ------ #\n","        # dc_base_5T = res_df['dc_base_5T'].to_numpy()        \n","        # short_open_res *= res_df['short_upper_touch_line_{}{}{}'.format(p1_itv1, p1_period1, p1_period2)].to_numpy() > dc_base_5T\n","        # long_open_res *= res_df['long_lower_touch_line_{}{}{}'.format(p1_itv1, p1_period1, p1_period2)].to_numpy() < dc_base_5T      \n","\n","        # ------ ppr ------ #\n","        # pumping_ratio(res_df, config, p1_itv1, p1_period1, p1_period2)  "],"metadata":{"id":"-DNPumVZi0xs"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["#### dump"],"metadata":{"id":"aTV4h3LjTZBp"}},{"cell_type":"code","source":["# ------ get candle_lastidx ------ #        \n","        tf_entry = to_itvnum(config.loc_set.point.tf_entry)\n","        b1_candle_shift = np_timeidx % tf_entry + 1\n","        b2_candle_shift = b1_candle_shift + tf_entry\n","        b3_candle_shift = b1_candle_shift + 2 * tf_entry\n","\n","        print(b3_candle_shift)\n","\n","        # bb_upper_ = res_df['bb_upper_{}{}'.format('T', 60)].to_numpy()\n","        # bb_lower_ = res_df['bb_lower_{}{}'.format('T', 60)].to_numpy()\n","        # bb_upper2_ = res_df['bb_upper2_{}{}'.format('T', 60)].to_numpy()\n","        # bb_lower2_ = res_df['bb_lower2_{}{}'.format('T', 60)].to_numpy()\n","        # bb_upper3_ = res_df['bb_upper3_{}{}'.format('T', 60)].to_numpy()\n","        # bb_lower3_ = res_df['bb_lower3_{}{}'.format('T', 60)].to_numpy()\n","\n","        # ------ compare by back_idx  ------ #   \n","        b3_bb_upper_ = res_df['bb_upper_{}{}'.format('T', 60)].shift(b3_candle_shift).to_numpy()\n","        b3_bb_lower_ = res_df['bb_lower_{}{}'.format('T', 60)].shift(b3_candle_shift).to_numpy()\n","        b3_bb_upper2_ = res_df['bb_upper2_{}{}'.format('T', 60)].shift(b3_candle_shift).to_numpy()\n","        b3_bb_lower2_ = res_df['bb_lower2_{}{}'.format('T', 60)].shift(b3_candle_shift).to_numpy()\n","        b3_close = res_df['close'].shift(b3_candle_shift).to_numpy()\n","\n","        b2_bb_upper2_ = res_df['bb_upper2_{}{}'.format('T', 60)].shift(b2_candle_shift).to_numpy()\n","        b2_bb_lower2_ = res_df['bb_lower2_{}{}'.format('T', 60)].shift(b2_candle_shift).to_numpy()\n","        b2_bb_upper3_ = res_df['bb_upper3_{}{}'.format('T', 60)].shift(b2_candle_shift).to_numpy()\n","        b2_bb_lower3_ = res_df['bb_lower3_{}{}'.format('T', 60)].shift(b2_candle_shift).to_numpy()\n","        b2_close = res_df['close'].shift(b2_candle_shift).to_numpy()\n","\n","        b1_bb_upper_ = res_df['bb_upper_{}{}'.format('T', 60)].shift(b1_candle_shift).to_numpy()\n","        b1_bb_lower_ = res_df['bb_lower_{}{}'.format('T', 60)].shift(b1_candle_shift).to_numpy()\n","        b1_bb_upper2_ = res_df['bb_upper2_{}{}'.format('T', 60)].shift(b1_candle_shift).to_numpy()\n","        b1_bb_lower2_ = res_df['bb_lower2_{}{}'.format('T', 60)].shift(b1_candle_shift).to_numpy()\n","        b1_close = res_df['close'].shift(b1_candle_shift).to_numpy()\n"],"metadata":{"id":"dc49JPmoTaPQ"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"HKdUKKl-483N"},"source":["### utils_public"]},{"cell_type":"code","execution_count":7,"metadata":{"id":"nzOYWA2kqZ0d","executionInfo":{"status":"ok","timestamp":1652257524895,"user_tz":-540,"elapsed":2850,"user":{"displayName":"7th June","userId":"08178289703395036410"}}},"outputs":[],"source":["from funcs.funcs_indicator import *\n","from funcs.funcs_trader import *\n","import logging\n","from ast import literal_eval\n","\n","pd.set_option('mode.chained_assignment',  None)\n","sys_log = logging.getLogger()\n","\n","\n","class OrderSide:\n","    BUY = \"BUY\"\n","    SELL = \"SELL\"\n","    INVALID = None\n","\n","\n","def lvrg_set(res_df, config, open_side, ep_, out_, fee, limit_leverage=50):\n","    selection_id = config.selection_id\n","    if not pd.isnull(out_) and not config.lvrg_set.static_lvrg:\n","        if selection_id in ['v3']:\n","            if open_side == OrderSide.SELL:\n","                loss = out_ / ep_\n","            else:\n","                loss = ep_ / out_\n","        else:  # 이 phase 가 정석, 윗 phase 는 결과가 수익 극대화라 사용함\n","            if open_side == OrderSide.SELL:\n","                loss = ep_ / out_\n","            else:\n","                loss = out_ / ep_\n","\n","        config.lvrg_set.leverage = config.lvrg_set.target_pct / abs(loss - 1 - (fee + config.trader_set.market_fee))\n","\n","    # ------------ leverage rejection ------------ #\n","    # 감당하기 힘든 fluc. 의 경우 진입하지 않음 - dynamic_lvrg 사용 경우\n","    if config.lvrg_set.leverage < 1 and config.lvrg_set.lvrg_rejection:\n","        # if config.lvrg_set.leverage >= 1 and config.lvrg_set.lvrg_rejection:\n","        return None\n","\n","    if not config.lvrg_set.allow_float:\n","        config.lvrg_set.leverage = int(config.lvrg_set.leverage)\n","\n","    config.lvrg_set.leverage = min(limit_leverage, max(config.lvrg_set.leverage, 1))\n","\n","    return config.lvrg_set.leverage\n","\n","\n","def sync_check(df_, config, order_side=\"OPEN\", row_slice=True):\n","    try:\n","        make_itv_list = [m_itv.replace('m', 'T') for m_itv in literal_eval(config.trader_set.itv_list)]\n","        row_list = literal_eval(config.trader_set.row_list)\n","        rec_row_list = literal_eval(config.trader_set.rec_row_list)\n","        offset_list = literal_eval(config.trader_set.offset_list)\n","\n","        assert len(make_itv_list) == len(offset_list), \"length of itv & offset_list should be equal\"\n","        htf_df_list = [to_htf(df_, itv_=itv_, offset=offset_) for itv_idx, (itv_, offset_)\n","                       in enumerate(zip(make_itv_list, offset_list)) if itv_idx != 0]  #\n","        htf_df_list.insert(0, df_)\n","\n","        # for htf_df_ in htf_df_list:\n","        #     print(htf_df_.tail())\n","\n","        #       Todo        #\n","        #        1. row_list calc.\n","        #           a. indi. 를 만들기 위한 최소 period 가 존재하고, 그 indi. 를 사용한 lb_period 가 존재함\n","        #           b. => default_period + lb_period\n","        #               i. from sync_check, public_indi, ep_point2, ep_dur 의 tf 별 max lb_period check\n","        #                   1. default_period + max lb_period check\n","        #                       a. 현재까지 lb_period_list\n","        #                           h_prev_idx (open / close) 60\n","        #                           dc_period 135\n","        #                           zone_dc_period 135\n","\n","        # --------- slicing (in trader phase only) --------- #\n","        #               --> latency 영향도가 높은 곳은 이곳\n","        if row_slice:  # recursive 가 아닌 indi. 의 latency 를 고려한 slicing\n","            df, df_3T, df_5T, df_15T, df_30T, df_H, df_4H = [df_s.iloc[-row_list[row_idx]:].copy() for row_idx, df_s in enumerate(htf_df_list)]\n","            rec_df, rec_df_3T, rec_df_5T, rec_df_15T, rec_df_30T, rec_df_H, rec_df_4H = [df_s.iloc[-rec_row_list[row_idx]:].copy() for row_idx, df_s\n","                                                                                         in\n","                                                                                         enumerate(htf_df_list)]\n","        else:\n","            df, df_3T, df_5T, df_15T, df_30T, df_H, df_4H = htf_df_list\n","            rec_df, rec_df_3T, rec_df_5T, rec_df_15T, rec_df_30T, rec_df_H, rec_df_4H = htf_df_list\n","\n","        # --------- add indi. --------- #\n","\n","        #        1. 필요한 indi. 는 enlist_epouttp & mr_check 보면서 삽입\n","        #        2. min use_rows 계산을 위해서, tf 별로 gathering 함        #\n","        # start_0 = time.time()\n","\n","        # ------ T ------ #\n","        # df = dc_line(df, None, 'T', dc_period=20)\n","        # df = bb_line(df, None, 'T')\n","        #\n","        # ------ 3T ------ #\n","        # df = dc_line(df, df_3T, '3T')\n","\n","        # ------ 5T ------ #\n","        h_candle_v3(res_df, '5T')\n","        df = dc_line(df, df_5T, '5T')\n","        df = bb_line(df, df_5T, '5T')\n","        #\n","        # ------ 15T ------ #\n","        h_candle_v3(res_df, '15T')\n","        df = dc_line(df, df_15T, '15T')\n","        df = bb_line(df, df_15T, '15T')\n","        #\n","        # ------ 30T ------ #\n","        # df = bb_line(df, df_30T, '30T')\n","        #\n","        # ------ H ------ #\n","        h_candle_v3(res_df, 'H')\n","        # df = dc_line(df, df_H, 'H')\n","\n","        # ------ 4H ------ #\n","        # df = bb_line(df, df_4H, '4H')\n","\n","        # rec_df['rsi_1m'] = rsi(rec_df, 14)  # Todo - recursive, 250 period\n","        # df = df.join(to_lower_tf_v2(df, rec_df.iloc[:, [-1]], [-1], backing_i=0), how='inner')  # <-- join same_tf manual\n","        #\n","        # if order_side in [\"OPEN\"]:\n","        #     rec_df_5T['ema_5T'] = ema(rec_df_5T['close'], 195)  # Todo - recursive, 1100 period (5T)\n","        #     df = df.join(to_lower_tf_v2(df, rec_df_5T, [-1]), how='inner')\n","\n","    except Exception as e:\n","        sys_log.error(\"error in sync_check :\", e)\n","    else:\n","        return df\n","\n","\n","def public_indi(res_df, config, np_timeidx, order_side=\"OPEN\"):\n","\n","    selection_id = config.selection_id\n","\n","    # ====== public ====== #\n","    res_df = wave_range_v11_3(res_df, config, over_period=2) \n","    # res_df = wave_range_v15(res_df, config, term_thresh1=2, term_thresh2=3)\n","    # res_df = wave_range_v15(res_df, config, itv='15T', term_thresh1=2, term_thresh2=3)\n","\n","    # ------ wrr ------ #\n","    # res_df = wave_range_ratio(res_df, config, 'T', 60)\n","    # res_df = wave_range_ratio_v2(res_df, config)\n","    res_df = wave_range_ratio_v3(res_df, config)\n","\n","    # ------ wave_loc_pct (bb) ------ #\n","    # res_df = wave_loc_pct_v2(res_df, config, 'T', 60)\n","    # res_df = wave_loc_pct(res_df, config, 'T', 60)\n","\n","    future_cols = ['cu_es_15T1', 'co_es_15T1', 'upper_wick_ratio_15T', 'lower_wick_ratio_15T']\n","    itv_list = ['15T', '15T', '15T', '15T']\n","    res_df = backing_future_data(res_df, future_cols, itv_list)\n","\n","    # ====== intervaly ====== #    \n","    # ------ 5T ------ #\n","    # res_df = dc_level(res_df, '5T', 1)\n","    # res_df = bb_level(res_df, '5T', 1)\n","\n","    # res_df = st_level(res_df, '5T', 1)\n","\n","    # ------ 15T ------ #\n","    # res_df = dc_level(res_df, '15T', 1)\n","    # res_df = bb_level(res_df, '15T', 1)\n","    # res_df = dtk_plot(res_df, dtk_itv2='15T', hhtf_entry=15, use_dtk_line=config.loc_set.zone.use_dtk_line, np_timeidx=np_timeidx)\n","\n","    # res_df = st_level(res_df, '15T', 1)\n","\n","    # ------ 30T ------ #\n","    # res_df = dc_level(res_df, '30T', 1)\n","    # res_df = bb_level(res_df, '30T', 1)\n","    # res_df = st_level(res_df, '30T', 1)\n","\n","    # ------ H ------ #\n","    # res_df = bb_level(res_df, 'H', 1)\n","\n","    # ------ 4H ------ #\n","    # res_df = bb_level(res_df, '4H', 1)\n","\n","    # res_df['dc_upper_v2'.format(selection_id)] = res_df['high'].rolling(config.loc_set.zone.dc_period).max()   # Todo, consider dc_period\n","    # res_df['dc_lower_v2'.format(selection_id)] = res_df['low'].rolling(config.loc_set.zone.dc_period).min()\n","\n","    # res_df['zone_dc_upper_v2'.format(selection_id)] = res_df['high'].rolling(config.loc_set.zone.zone_dc_period).max()   # Todo, consider zone_dc_period\n","    # res_df['zone_dc_lower_v2'.format(selection_id)] = res_df['low'].rolling(config.loc_set.zone.zone_dc_period).min()\n","\n","    # if order_side in [\"OPEN\"]:\n","        # candle_score_v3(res_df, 'T', unsigned=False)\n","        # candle_score_v3(res_df, config.loc_set.point.exp_itv, unsigned=False)\n","\n","    #     temp indi.    #\n","    # res_df[\"ma30_1m\"] = res_df['close'].rolling(30).mean()\n","    # res_df[\"ma60_1m\"] = res_df['close'].rolling(60).mean()\n","    # res_df = dtk_plot(res_df, dtk_itv2='15T', hhtf_entry=15, use_dtk_line=config.loc_set.zone.use_dtk_line, np_timeidx=np_timeidx)\n","\n","    return res_df\n","\n","\n","def expire_v0(res_df, config, op_idx, e_j, tp_j, np_datas, open_side):\n","    h, l = np_datas\n","    selection_id = config.selection_id\n","    expire = 0\n","\n","    if config.tr_set.expire_tick != \"None\":\n","        if e_j - op_idx >= config.tr_set.expire_tick:\n","            expire = 1\n","\n","    if config.tr_set.ei_k != \"None\":\n","        if open_side == OrderSide.SELL:\n","            short_tp_1_ = res_df['short_tp_1_{}'.format(selection_id)].to_numpy()  # id 에 따라 dynamic 변수라 이곳에서 numpy 화 진행\n","            short_tp_gap_ = res_df['short_tp_gap_{}'.format(selection_id)].to_numpy()\n","            if l[e_j] <= short_tp_1_[tp_j] - short_tp_gap_[tp_j] * config.tr_set.ei_k:\n","                expire = 1\n","        else:\n","            long_tp_1_ = res_df['long_tp_1_{}'.format(selection_id)].to_numpy()  # iloc 이 빠를까, to_numpy() 가 빠를까  # 3.94 ms --> 5.34 ms (iloc)\n","            long_tp_gap_ = res_df['long_tp_gap_{}'.format(selection_id)].to_numpy()\n","            if h[e_j] >= long_tp_1_[tp_j] + long_tp_gap_[tp_j] * config.tr_set.ei_k:\n","                expire = 1\n","\n","    return expire\n","\n","\n","def expire(res_df, config, op_idx, e_j, tp_j, np_datas, open_side):\n","    h, l = np_datas\n","    selection_id = config.selection_id\n","    expire = 0\n","\n","    if config.tr_set.expire_tick != \"None\":\n","        if e_j - op_idx >= config.tr_set.expire_tick:\n","            expire = 1\n","\n","    if config.tr_set.ei_k != \"None\":\n","        if open_side == OrderSide.SELL:\n","            short_tp_ = res_df['short_tp_{}'.format(selection_id)].to_numpy()  # id 에 따라 dynamic 변수라 이곳에서 numpy 화 진행\n","            short_tp_gap_ = res_df['short_tp_gap_{}'.format(selection_id)].to_numpy()\n","            if l[e_j] <= short_tp_[tp_j] + short_tp_gap_[tp_j] * config.tr_set.ei_k:\n","                expire = 1\n","        else:\n","            long_tp_ = res_df['long_tp_{}'.format(selection_id)].to_numpy()  # iloc 이 빠를까, to_numpy() 가 빠를까  # 3.94 ms --> 5.34 ms (iloc)\n","            long_tp_gap_ = res_df['long_tp_gap_{}'.format(selection_id)].to_numpy()\n","            if h[e_j] >= long_tp_[tp_j] - long_tp_gap_[tp_j] * config.tr_set.ei_k:\n","                expire = 1\n","\n","    return expire\n","\n","\n","def expire_v2(res_df, config, op_idx, e_j, tp_j, np_datas, open_side):\n","    h, l = np_datas\n","    selection_id = config.selection_id\n","    expire = 0\n","\n","    if config.tr_set.expire_tick != \"None\":\n","        if e_j - op_idx >= config.tr_set.expire_tick:\n","            expire = 1\n","\n","    if config.tr_set.ei_k != \"None\":\n","        if open_side == OrderSide.SELL:\n","            short_tp_1_ = res_df['short_tp_1_{}'.format(selection_id)].to_numpy()  # id 에 따라 dynamic 변수라 이곳에서 numpy 화 진행\n","            short_tp_0_ = res_df['short_tp_0_{}'.format(selection_id)].to_numpy()\n","            short_tp_gap_ = res_df['short_tp_gap_{}'.format(selection_id)].to_numpy()\n","            if l[e_j] <= short_tp_1_[tp_j] + short_tp_gap_[tp_j] * config.tr_set.ei_k or h[e_j] >= short_tp_0_[tp_j] - short_tp_gap_[\n","                tp_j] * config.tr_set.ei_k:\n","                expire = 1\n","        else:\n","            long_tp_1_ = res_df['long_tp_1_{}'.format(selection_id)].to_numpy()\n","            long_tp_0_ = res_df['long_tp_0_{}'.format(selection_id)].to_numpy()\n","            long_tp_gap_ = res_df['long_tp_gap_{}'.format(selection_id)].to_numpy()\n","            if h[e_j] >= long_tp_1_[tp_j] - long_tp_gap_[tp_j] * config.tr_set.ei_k or l[e_j] <= long_tp_0_[tp_j] + long_tp_gap_[\n","                tp_j] * config.tr_set.ei_k:\n","                expire = 1\n","\n","    return expire\n","\n","\n","def ep_loc_point2_v2(res_df, config, i, out_j, side=OrderSide.SELL):\n","    allow_ep_in = 1\n","    if config.selection_id in ['v5_2']:\n","        if side == OrderSide.SELL:\n","            dc_upper_T = res_df['dc_upper_T'].to_numpy()\n","            dc_upper_15T = res_df['dc_upper_15T'].to_numpy()\n","            allow_ep_in *= (dc_upper_T[i - 1] <= dc_upper_15T[i]) & \\\n","                           (dc_upper_15T[i - 1] != dc_upper_15T[i])\n","        else:\n","            dc_lower_T = res_df['dc_lower_T'].to_numpy()\n","            dc_lower_15T = res_df['dc_lower_15T'].to_numpy()\n","            allow_ep_in *= (dc_lower_T[i - 1] >= dc_lower_15T[i]) & \\\n","                           (dc_lower_15T[i - 1] != dc_lower_15T[i])\n","\n","    if config.selection_id in ['v3_4']:\n","        wick_score_list = literal_eval(config.ep_set.point2.wick_score_list)\n","        wick_scores = [res_df['wick_score_{}'.format(s_itv)].to_numpy() for s_itv in literal_eval(config.ep_set.point2.score_itv_list)]\n","        close = res_df['close'].to_numpy()\n","        if side == OrderSide.SELL:\n","            sup_T = res_df['sup_T'].to_numpy()\n","            allow_ep_in *= close[i] < sup_T[i - 1]\n","            if len(wick_score_list) != 0:\n","                allow_ep_in *= wick_scores[0][i] < -wick_score_list[0]\n","        else:\n","            resi_T = res_df['resi_T'].to_numpy()\n","            allow_ep_in *= close[i] > resi_T[i - 1]\n","            if len(wick_score_list) != 0:\n","                allow_ep_in *= wick_scores[0][i] > wick_score_list[0]\n","\n","    if allow_ep_in:\n","        out_j = i\n","    return allow_ep_in, out_j\n","\n","\n","# vectorized calc.\n","# multi-stem 에 따라 dynamic vars.가 입력되기 때문에 class 내부 vars. 로 종속시키지 않음\n","def ep_loc_v3(res_df, config, np_timeidx, show_detail=True, ep_loc_side=OrderSide.SELL):\n","    # ------- param init ------- #\n","    selection_id = config.selection_id\n","    c_i = config.trader_set.complete_index\n","    len_df = len(res_df)\n","    mr_res = np.ones(len_df)\n","    zone_arr = np.full(len_df, 'n')\n","\n","    # ------ process 한번에 처리해서 param_check 만 ver. 별로 하면 될 것 ------ #\n","    #     => public_indi() 가 될 것\n","    #     1. 사용한 param 정보와 matching 된 data 병렬로 나열 logging 될 것\n","    tp_fee, out_fee = calc_tp_out_fee_v2(config)\n","\n","    # ============ tr_thresh ============ #\n","    if config.loc_set.point.short_tr_thresh != \"None\":\n","        if ep_loc_side == OrderSide.SELL:\n","            short_tr_ = res_df['short_tr_{}'.format(selection_id)].to_numpy()\n","            mr_res *= short_tr_ >= config.loc_set.point.short_tr_thresh\n","            # mr_res *= short_tr_ <= config.loc_set.point.short_tr_thresh + 0.1\n","            if show_detail:\n","                sys_log.warning(\n","                    \"short_tr_ >= short_tr_thresh : {:.5f} {:.5f} ({})\".format(short_tr_[c_i], config.loc_set.point.short_tr_thresh, mr_res[c_i]))\n","        else:\n","            long_tr_ = res_df['long_tr_{}'.format(selection_id)].to_numpy()\n","            mr_res *= long_tr_ >= config.loc_set.point.long_tr_thresh\n","            # mr_res *= long_tr_ <= config.loc_set.point.long_tr_thresh + 0.1\n","            if show_detail:\n","                sys_log.warning(\n","                    \"long_tr_ >= long_tr_thresh : {:.5f} {:.5f} ({})\".format(long_tr_[c_i], config.loc_set.point.long_tr_thresh, mr_res[c_i]))\n","\n","    # ============ spread - independent to tr_set ============ #  --> Todo, 사용 안하고 싶은 wave_point\n","    if config.loc_set.point.short_spread != \"None\":\n","        if selection_id in ['v3']:\n","            if ep_loc_side == OrderSide.SELL:\n","                bb_base_5T = res_df['bb_base_5T'].to_numpy()  # to_numpy() 는 ep_loc 에서 진행됨\n","                bb_lower_5T = res_df['bb_lower_5T'].to_numpy()\n","                short_spread = (bb_base_5T - bb_lower_5T - tp_fee * bb_base_5T) / (bb_base_5T - bb_lower_5T + out_fee * bb_base_5T)\n","                mr_res *= short_spread >= config.loc_set.point.short_spread\n","                if show_detail:\n","                    sys_log.warning(\n","                        \"short_spread >= config.loc_set.point.short_spread : {:.5f} {:.5f} ({})\".format(short_spread[c_i], config.loc_set.point.short_spread, mr_res[c_i]))\n","            else:\n","                bb_upper_5T = res_df['bb_upper_5T'].to_numpy()\n","                dc_lower_5T = res_df['dc_lower_5T'].to_numpy()\n","                # mr_res *= (bb_base_5T - dc_lower_5T - tp_fee * bb_upper_5T) / (bb_base_5T - dc_lower_5T + out_fee * bb_base_5T) >= config.loc_set.point.long_spread\n","                long_spread = (bb_upper_5T - dc_lower_5T - tp_fee * bb_upper_5T) / (bb_upper_5T - dc_lower_5T + out_fee * bb_upper_5T)\n","                mr_res *= long_spread >= config.loc_set.point.long_spread\n","                if show_detail:\n","                    sys_log.warning(\n","                        \"long_spread >= config.loc_set.point.long_spread : {:.5f} {:.5f} ({})\".format(long_spread[c_i], config.loc_set.point.long_spread, mr_res[c_i]))                  \n","\n","    # ============ point ratios ============ #\n","    # ------ wave_range_ratio ------ #\n","    if config.loc_set.point.cu_wrr_21 != \"None\":   # for excessive range rejection         \n","      wave_itv = 'T'\n","      wave_period = config.tr_set.wave_period\n","      co_wrr_21_ = res_df['co_wrr_21_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","      cu_wrr_21_ = res_df['cu_wrr_21_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","      if ep_loc_side == OrderSide.SELL:\n","        mr_res *= cu_wrr_21_ <= config.loc_set.point.cu_wrr_21\n","        mr_res *= cu_wrr_21_ >= config.loc_set.point.cu_wrr_21 - 0.2\n","        if show_detail:\n","            sys_log.warning(\"cu_wrr_21_ <= config.loc_set.point.cu_wrr_21 : {:.5f} {:.5f} ({})\".format(cu_wrr_21_[c_i], config.loc_set.point.cu_wrr_21, mr_res[c_i]))\n","      else:\n","        mr_res *= co_wrr_21_ <= config.loc_set.point.co_wrr_21\n","        mr_res *= co_wrr_21_ >= config.loc_set.point.co_wrr_21 - 0.2\n","        if show_detail:\n","            sys_log.warning(\"co_wrr_21_ <= config.loc_set.point.co_wrr_21 : {:.5f} {:.5f} ({})\".format(co_wrr_21_[c_i], config.loc_set.point.co_wrr_21, mr_res[c_i]))\n","\n","    if config.loc_set.point.wrr_32 != \"None\":            \n","      wave_itv = 'T'\n","      wave_period = config.tr_set.wave_period\n","      co_wrr_32_ = res_df['co_wrr_32_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","      cu_wrr_32_ = res_df['cu_wrr_32_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","      if ep_loc_side == OrderSide.SELL:\n","        mr_res *= cu_wrr_32_ <= config.loc_set.point.wrr_32 + 0.1\n","        mr_res *= cu_wrr_32_ >= config.loc_set.point.wrr_32\n","        if show_detail:\n","            sys_log.warning(\"cu_wrr_32_ <= config.loc_set.point.wrr_32 : {:.5f} {:.5f} ({})\".format(cu_wrr_32_[c_i], config.loc_set.point.wrr_32, mr_res[c_i]))\n","      else:\n","        mr_res *= co_wrr_32_ <= config.loc_set.point.wrr_32 + 0.1\n","        mr_res *= co_wrr_32_ >= config.loc_set.point.wrr_32\n","        if show_detail:\n","            sys_log.warning(\"co_wrr_32_ <= config.loc_set.point.wrr_32 : {:.5f} {:.5f} ({})\".format(co_wrr_32_[c_i], config.loc_set.point.wrr_32, mr_res[c_i]))\n","\n","    # ------ enough_space - Todo, future_data ------ #\n","    if config.loc_set.point.co_es != \"None\":      \n","      itv, period1 = config.tr_set.p1_itv1, config.tr_set.p1_period1 \n","      b1_cu_es_ = res_df['b1_cu_es_{}{}'.format(itv, period1)].to_numpy()\n","      b1_co_es_ = res_df['b1_co_es_{}{}'.format(itv, period1)].to_numpy()\n","      if ep_loc_side == OrderSide.SELL:\n","        mr_res *= b1_co_es_ >= config.loc_set.point.co_es\n","        mr_res *= b1_co_es_ <= config.loc_set.point.co_es + 2\n","        if show_detail:\n","            sys_log.warning(\"b1_co_es_ >= config.loc_set.point.co_es : {:.5f} {:.5f} ({})\".format(b1_co_es_[c_i], config.loc_set.point.co_es, mr_res[c_i]))\n","      else:\n","        mr_res *= b1_cu_es_ >= config.loc_set.point.cu_es\n","        mr_res *= b1_cu_es_ <= config.loc_set.point.cu_es + 1\n","        if show_detail:\n","            sys_log.warning(\"b1_cu_es_ >= config.loc_set.point.cu_es : {:.5f} {:.5f} ({})\".format(b1_cu_es_[c_i], config.loc_set.point.cu_es, mr_res[c_i]))\n","\n","    # ------------ wick_ratio - Todo, future_data ------------ #\n","    # if config.loc_set.point.short_wick_ratio != \"None\":\n","    #   b1_upper_wick_ratio_ = res_df['b1_upper_wick_ratio_{}'.format(config.loc_set.point.wick_itv)].to_numpy()\n","    #   b1_lower_wick_ratio_ = res_df['b1_lower_wick_ratio_{}'.format(config.loc_set.point.wick_itv)].to_numpy()      \n","    #   if ep_loc_side == OrderSide.SELL:\n","    #       # mr_res *= b1_upper_wick_ratio_ >= config.loc_set.point.short_wick_ratio\n","    #       mr_res *= b1_lower_wick_ratio_ >= config.loc_set.point.short_wick_ratio\n","    #       if show_detail:\n","    #           sys_log.warning(\"b1_lower_wick_ratio_ >= config.loc_set.point.short_wick_ratio : {:.5f} {:.5f} ({})\".format(b1_lower_wick_ratio_[c_i], config.loc_set.point.short_wick_ratio, mr_res[c_i]))\n","    #   else:\n","    #       # mr_res *= b1_lower_wick_ratio_ >= config.loc_set.point.long_wick_ratio\n","    #       mr_res *= b1_upper_wick_ratio_ >= config.loc_set.point.long_wick_ratio\n","    #       if show_detail:\n","    #           sys_log.warning(\"b1_upper_wick_ratio_ >= config.loc_set.point.long_wick_ratio : {:.5f} {:.5f} ({})\".format(b1_upper_wick_ratio_[c_i], config.loc_set.point.long_wick_ratio, mr_res[c_i]))\n","\n","    # ------ candle_range_ratio - Todo, future_data ------ #\n","    # if config.loc_set.point.crr != \"None\":   \n","    #   tf_entry = to_itvnum(config.loc_set.point.tf_entry)\n","    #   b1_crr_ = res_df['crr_{}'.format(config.loc_set.point.tf_entry)].shift(tf_entry).to_numpy()\n","    #   mr_res *= b1_crr_ >= config.loc_set.point.crr\n","    #   if show_detail:\n","    #       sys_log.warning(\"b1_crr_ >= config.loc_set.point.crr : {:.5f} {:.5f} ({})\".format(b1_crr_[c_i], config.loc_set.point.crr, mr_res[c_i]))\n","    \n","    # ------ dc_over_body_ratio ------ #\n","    if config.loc_set.point.dbr != \"None\":\n","      b1_lwdbr = res_df['b1_lwdbr'].to_numpy()\n","      b1_updbr = res_df['b1_updbr'].to_numpy()\n","      if ep_loc_side == OrderSide.SELL:        \n","        mr_res *= b1_lwdbr >= config.loc_set.point.dbr\n","        if show_detail:\n","            sys_log.warning(\n","                \"b1_lwdbr >= config.loc_set.point.dbr : {:.5f} {:.5f} ({})\".format(b1_lwdbr[c_i], config.loc_set.point.dbr, mr_res[c_i]))\n","      else:\n","        mr_res *= b1_updbr >= config.loc_set.point.dbr\n","        if show_detail:\n","            sys_log.warning(\n","                \"b1_updbr >= config.loc_set.point.dbr : {:.5f} {:.5f} ({})\".format(b1_updbr[c_i], config.loc_set.point.dbr, mr_res[c_i]))\n","            \n","    if config.loc_set.point.dbr2 != \"None\":\n","      b1_lwdbr = res_df['b1_lwdbr'].to_numpy()\n","      b1_updbr = res_df['b1_updbr'].to_numpy()\n","      if ep_loc_side == OrderSide.SELL:    \n","        mr_res *= b1_updbr >= config.loc_set.point.dbr2\n","        if show_detail:\n","            sys_log.warning(\n","                \"b1_updbr >= config.loc_set.point.dbr2 : {:.5f} {:.5f} ({})\".format(b1_updbr[c_i], config.loc_set.point.dbr2, mr_res[c_i]))\n","      else:\n","        mr_res *= b1_lwdbr >= config.loc_set.point.dbr2\n","        if show_detail:\n","            sys_log.warning(\n","                \"b1_lwdbr >= config.loc_set.point.dbr2 : {:.5f} {:.5f} ({})\".format(b1_lwdbr[c_i], config.loc_set.point.dbr2, mr_res[c_i]))\n","\n","    # ------ wick_body_ratio ------ #\n","    if config.loc_set.point.wbr != \"None\":\n","        wave_body_ratio = res_df['wave_body_ratio'].to_numpy()\n","        mr_res *= wave_body_ratio >= config.loc_set.point.wbr\n","        if show_detail:\n","            sys_log.warning(\n","                \"wave_body_ratio >= config.loc_set.point.wbr : {:.5f} {:.5f} ({})\".format(wave_body_ratio[c_i], config.loc_set.point.wbr, mr_res[c_i]))\n","            \n","    # ------ body_rel_ratio ------ #\n","    if config.loc_set.point.brr != \"None\":\n","        body_rel_ratio_ = res_df['body_rel_ratio_{}'.format(config.loc_set.point.tf_entry)].to_numpy()\n","        mr_res *= body_rel_ratio_ <= config.loc_set.point.brr\n","        if show_detail:\n","            sys_log.warning(\n","                \"body_rel_ratio_ <= config.loc_set.point.brr : {:.5f} {:.5f} ({})\".format(body_rel_ratio_[c_i], config.loc_set.point.brr, mr_res[c_i]))\n","\n","    # ------ pumping_ratio ------ #\n","    if config.loc_set.point.ppr != \"None\":\n","      if ep_loc_side == OrderSide.SELL:\n","        short_ppr_ = res_df['short_ppr_{}'.format(selection_id)].to_numpy()\n","        mr_res *= short_ppr_ >= config.loc_set.point.ppr\n","        if show_detail:\n","            sys_log.warning(\"short_ppr_ >= config.loc_set.point.ppr : {:.5f} {:.5f} ({})\".format(short_ppr_[c_i], config.loc_set.point.ppr, mr_res[c_i]))\n","      else:\n","        long_ppr_ = res_df['long_ppr_{}'.format(selection_id)].to_numpy()\n","        mr_res *= long_ppr_ >= config.loc_set.point.ppr\n","        if show_detail:\n","            sys_log.warning(\"long_ppr_ >= config.loc_set.point.ppr : {:.5f} {:.5f} ({})\".format(long_ppr_[c_i], config.loc_set.point.ppr, mr_res[c_i]))\n"," \n","    # ============ rtc_zone  ============ #  --> Todo, 사용 안하고 싶은 wave_dur., 추후 zone 으로 옮길 것\n","    # ------ dtk ------ #\n","    if config.loc_set.zone.dt_k != \"None\":\n","        # ------ dc_v2 ------ #\n","        dc_lower_v2 = res_df['dc_lower_v2'.format(selection_id)].to_numpy()\n","        short_dtk_1_ = res_df['short_dtk_1_{}'.format(selection_id)].to_numpy() - \\\n","                       res_df['short_dtk_gap_{}'.format(selection_id)].to_numpy() * config.loc_set.zone.dt_k\n","        dc_upper_v2 = res_df['dc_upper_v2'.format(selection_id)].to_numpy()\n","        long_dtk_1_ = res_df['long_dtk_1_{}'.format(selection_id)].to_numpy() + \\\n","                      res_df['long_dtk_gap_{}'.format(selection_id)].to_numpy() * config.loc_set.zone.dt_k\n","        if ep_loc_side == OrderSide.SELL:\n","            mr_res *= dc_lower_v2 >= short_dtk_1_\n","            if show_detail:\n","                sys_log.warning(\n","                    \"dc_lower_v2 >= short_dtk_1_ : {:.5f} {:.5f} ({})\".format(dc_lower_v2[c_i], short_dtk_1_[c_i], mr_res[c_i]))\n","        else:\n","            mr_res *= dc_upper_v2 <= long_dtk_1_\n","            if show_detail:\n","                sys_log.warning(\n","                    \"dc_upper_v2 <= long_dtk_1_ : {:.5f} {:.5f} ({})\".format(dc_upper_v2[c_i], long_dtk_1_[c_i], mr_res[c_i]))\n","                \n","    # ============ zone ============ #\n","    # ------ hl_loc_pct ------ #\n","    if config.loc_set.zone.hl_loc_pct != \"None\":      \n","      wave_high_loc_pct_ = res_df['wave_high_loc_pct_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","      wave_low_loc_pct_ = res_df['wave_low_loc_pct_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","\n","      if ep_loc_side == OrderSide.SELL:\n","        mr_res *= wave_high_loc_pct_ >= config.loc_set.zone.hl_loc_pct\n","        mr_res *= wave_high_loc_pct_ <= config.loc_set.zone.hl_loc_pct + 0.5\n","        if show_detail:\n","            sys_log.warning(\"wave_high_loc_pct_ >= config.loc_set.zone.hl_loc_pct : {:.5f} {:.5f} ({})\".format(wave_high_loc_pct_[c_i], config.loc_set.zone.hl_loc_pct, mr_res[c_i]))\n","      else:\n","        mr_res *= wave_low_loc_pct_ >= config.loc_set.zone.hl_loc_pct\n","        mr_res *= wave_low_loc_pct_ <= config.loc_set.zone.hl_loc_pct + 0.5\n","        if show_detail:\n","            sys_log.warning(\"wave_low_loc_pct_ >= config.loc_set.zone.hl_loc_pct : {:.5f} {:.5f} ({})\".format(wave_low_loc_pct_[c_i], config.loc_set.zone.hl_loc_pct, mr_res[c_i]))\n","\n","\n","    # ------ config var. 이 등록되지 않은 dur. 은 selection_id 으로 조건문을 나눔 (lvrg_set 과 동일) ------ #\n","    if config.loc_set.zone.use_zone:\n","\n","        # ------------------ wave_biaser (sr_confirmer) ------------------ #\n","        if selection_id in ['3_9']:     \n","          itv, period1, period2 = config.tr_set.p1_itv1, config.tr_set.p1_period1, config.tr_set.p1_period2          \n","\n","          if ep_loc_side == OrderSide.SELL:\n","            short_wave_high_ = res_df['short_wave_high_{}{}{}'.format(itv, period1, period2)]\n","            bb_lower_5T_amax = get_line(res_df['short_wave_high_idx_{}{}{}'.format(itv, period1, period2)].to_numpy(), res_df['bb_lower_5T'].to_numpy())\n","            mr_res *= short_wave_high_ <= bb_lower_5T_amax\n","            if show_detail:\n","                sys_log.warning(\"short_wave_high_ <= bb_lower_5T_amax : {:.5f} {:.5f} ({})\".format(short_wave_high_[c_i], bb_lower_5T_amax[c_i], mr_res[c_i]))\n","          else:\n","            long_wave_low_ = res_df['long_wave_low_{}{}{}'.format(itv, period1, period2)]\n","            bb_upper_5T_amax = get_line(res_df['long_wave_low_idx_{}{}{}'.format(itv, period1, period2)].to_numpy(), res_df['bb_upper_5T'].to_numpy())\n","            mr_res *= long_wave_low_ >= bb_upper_5T_amax\n","            if show_detail:\n","                sys_log.warning(\"long_wave_low_ >= bb_upper_5T_amax : {:.5f} {:.5f} ({})\".format(long_wave_low_[c_i], bb_upper_5T_amax[c_i], mr_res[c_i]))\n","\n","\n","        if selection_id in ['4_3', '3_5', '3_51']:\n","            dc_base_T20 = res_df['dc_base_T20'].to_numpy()\n","            dc_base_3T20 = res_df['dc_base_3T20'].to_numpy()\n","            # b1_dc_base_3T20 = res_df['dc_base_3T20'].shift(3).to_numpy()\n","            # dc_base_5T = res_df['dc_base_5T'].to_numpy()\n","            # dc_base_15T = res_df['dc_base_15T'].to_numpy()\n","            # dc_base_30T = res_df['dc_base_30T'].to_numpy()\n","            dc_base_H20 = res_df['dc_base_H20'].to_numpy()\n","            # dc_base_4H = res_df['dc_base_4H'].to_numpy()\n","            # dc_base_D = res_df['dc_base_D'].to_numpy()\n","\n","            itv, period1, period2 = config.tr_set.p1_itv1, config.tr_set.p1_period1, config.tr_set.p1_period2\n","            if ep_loc_side == OrderSide.SELL:\n","                # ------ short_base_ <= dc_base_3T20 ------ #\n","                short_base_ = res_df['short_base_{}{}{}'.format(itv, period1, period2)].to_numpy()\n","                mr_res *= short_base_ <= dc_base_3T20\n","                if show_detail:\n","                    sys_log.warning(\"short_base_ <= dc_base_3T20 : {:.5f} {:.5f} ({})\".format(short_base_[c_i], dc_base_3T20[c_i], mr_res[c_i]))\n","\n","                # mr_res *= short_base_ <= dc_base_T20\n","                # if show_detail:\n","                #     sys_log.warning(\"short_base_ <= dc_base_T20 : {:.5f} {:.5f} ({})\".format(short_base_[c_i], dc_base_T20[c_i], mr_res[c_i]))\n","\n","                # ------ reject csd ------ #\n","                # dc_upper_ = res_df['dc_upper_{}{}'.format(itv, period1)].to_numpy()\n","                # mr_res *= dc_upper_ <= dc_base_3T\n","                # if show_detail:\n","                #     sys_log.warning(\"dc_upper_ <= dc_base_3T20 : {:.5f} {:.5f} ({})\".format(dc_upper_[c_i], dc_base_3T[c_i], mr_res[c_i]))\n","\n","                # Todo, 부호 조심\n","                # dc_upper2_ = res_df['dc_upper_{}{}'.format(itv, period2)].to_numpy()\n","                # mr_res *= dc_upper2_ >= dc_base_H\n","                # if show_detail:\n","                #     sys_log.warning(\"dc_upper2_ >= dc_base_H20 : {:.5f} {:.5f} ({})\".format(dc_upper2_[c_i], dc_base_H[c_i], mr_res[c_i]))  \n","\n","                # long 과 동일한 dur.\n","                dc_lower2_ = res_df['dc_lower_{}{}'.format(itv, period2)].to_numpy()\n","                mr_res *= dc_lower2_ >= dc_base_H20\n","                if show_detail:\n","                    sys_log.warning(\"dc_lower2_ >= dc_base_H20 : {:.5f} {:.5f} ({})\".format(dc_lower2_[c_i], dc_base_H20[c_i], mr_res[c_i]))  \n","\n","                # ------ consecutive base ascender ------ #\n","                # ------ 1. roll_min ------ #\n","                dc_base_3T20_rollmin = res_df['dc_base_3T20'].rolling(config.loc_set.zone.base_roll_period).min().to_numpy()\n","                mr_res *= dc_base_3T20_rollmin == dc_base_3T20\n","                if show_detail:\n","                    sys_log.warning(\n","                        \"dc_base_3T20_rollmin == dc_base_3T2020 : {:.5f} {:.5f} ({})\".format(dc_base_3T20_rollmin[c_i], dc_base_3T20[c_i], mr_res[c_i]))\n","            else:\n","                # ------ long_base >= dc_base_3T20 ------ #\n","                long_base_ = res_df['long_base_{}{}{}'.format(itv, period1, period2)].to_numpy()\n","                mr_res *= long_base_ >= dc_base_3T20\n","                if show_detail:\n","                    sys_log.warning(\"long_base_ >= dc_base_3T20 : {:.5f} {:.5f} ({})\".format(long_base_[c_i], dc_base_3T20[c_i], mr_res[c_i]))\n","\n","                # mr_res *= long_base_ >= dc_base_T20\n","                # if show_detail:\n","                #     sys_log.warning(\"long_base_ >= dc_base_T20 : {:.5f} {:.5f} ({})\".format(long_base_[c_i], dc_base_T20[c_i], mr_res[c_i]))\n","\n","                # ------ reject csd ------ #\n","                # dc_lower_ = res_df['dc_lower_{}{}'.format(itv, period1)].to_numpy()\n","                # mr_res *= dc_lower_ >= dc_base_3T\n","                # if show_detail:\n","                #     sys_log.warning(\"dc_lower_ >= dc_base_3T20 : {:.5f} {:.5f} ({})\".format(dc_lower_[c_i], dc_base_3T[c_i], mr_res[c_i]))\n","\n","                dc_lower2_ = res_df['dc_lower_{}{}'.format(itv, period2)].to_numpy()\n","                mr_res *= dc_lower2_ >= dc_base_H20\n","                if show_detail:\n","                    sys_log.warning(\"dc_lower2_ >= dc_base_H20 : {:.5f} {:.5f} ({})\".format(dc_lower2_[c_i], dc_base_H20[c_i], mr_res[c_i]))\n","\n","                # bb_lower_5T = res_df['bb_lower_5T'].to_numpy()\n","                # mr_res *= dc_lower2_ >= bb_lower_5T\n","                # if show_detail:\n","                #     sys_log.warning(\"dc_lower2_ >= bb_lower_5T : {:.5f} {:.5f} ({})\".format(dc_lower2_[c_i], bb_lower_5T[c_i], mr_res[c_i]))\n","\n","                # ------ alignment ------ #\n","                # mr_res *= (dc_base_3T20 > dc_base_5T) & (dc_base_5T > dc_base_15T) & (dc_base_15T > dc_base_30T)\n","\n","                # ------ consecutive base ascender ------ #\n","                # ------ 1. roll_max ------ #\n","                dc_base_3T20_rollmax = res_df['dc_base_3T20'].rolling(config.loc_set.zone.base_roll_period).max().to_numpy()\n","                mr_res *= dc_base_3T20_rollmax == dc_base_3T20\n","                if show_detail:\n","                    sys_log.warning(\n","                        \"dc_base_3T20_rollmax == dc_base_3T2020 : {:.5f} {:.5f} ({})\".format(dc_base_3T20_rollmax[c_i], dc_base_3T20[c_i], mr_res[c_i]))\n","\n","                # ------ 2. roll_max_v2 - ascender  ------ #\n","                # dc_base_3T_ascend = (res_df['dc_base_3T'] >= res_df['dc_base_3T'].shift(3)).rolling(config.loc_set.zone.base_roll_period).sum().to_numpy()\n","                # # mr_res *= dc_base_3T_ascend == config.loc_set.zone.base_roll_period\n","                # mr_res *= dc_base_3T_ascend != config.loc_set.zone.base_roll_period\n","                # if show_detail:\n","                #     sys_log.warning(\"dc_base_3T_ascend == config.loc_set.zone.base_roll_period : {:.5f} {:.5f} ({})\".format(dc_base_3T_ascend[c_i], config.loc_set.zone.base_roll_period, mr_res[c_i]))\n","\n","\n","\n","    # -------------- zoned tr_set - post_work -------------- #\n","    if config.tr_set.c_ep_gap != \"None\" or config.tr_set.t_out_gap != \"None\":\n","        #       by zone_dtk       #\n","        #         c_zone        #\n","        zone_dc_upper_v2_ = res_df['zone_dc_upper_v2'.format(selection_id)].to_numpy()\n","        long_dtk_plot_1 = res_df['long_dtk_plot_1'].to_numpy() + res_df['long_dtk_plot_gap'].to_numpy() * config.loc_set.zone.zone_dt_k\n","        zone_dc_lower_v2_ = res_df['zone_dc_lower_v2'.format(selection_id)].to_numpy()\n","        short_dtk_plot_1 = res_df['short_dtk_plot_1'].to_numpy() - res_df['short_dtk_plot_gap'].to_numpy() * config.loc_set.zone.zone_dt_k\n","        if ep_loc_side == OrderSide.SELL:\n","            zone_res = zone_dc_upper_v2_ > long_dtk_plot_1  # mr_res 와는 별개임\n","            pos = 'short'\n","        else:\n","            zone_res = zone_dc_lower_v2_ < short_dtk_plot_1\n","            pos = 'long'\n","\n","        # static 여부에 따른 vectorized adj. - dynamic 은 vectorize 불가\n","        if config.ep_set.static_ep and config.tr_set.c_ep_gap != \"None\":\n","            res_df['{}_ep_{}'.format(pos, selection_id)][zone_res] = res_df['{}_ep2_{}'.format(pos, selection_id)][zone_res]\n","        if config.out_set.static_out and config.tr_set.t_out_gap != \"None\":\n","            res_df['{}_out_{}'.format(pos, selection_id)][~zone_res] = res_df['{}_out2_{}'.format(pos, selection_id)][\n","                ~zone_res]  # t_zone 에 대한 out2 setting\n","        zone_arr = np.where(zone_res == 1, 'c', 't')\n","\n","    return mr_res, zone_arr  # mr_res 의 True idx 가 open signal"]},{"cell_type":"markdown","source":["#### legacy"],"metadata":{"id":"EQ63Jwpvr7qA"}},{"cell_type":"code","source":["      \n","    if config.loc_set.point.wrr != \"None\":            \n","      wave_itv = 'T'\n","      wave_period = config.tr_set.wave_period\n","      co_wrr_ = res_df['co_wrr_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","      cu_wrr_ = res_df['cu_wrr_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","      if ep_loc_side == OrderSide.SELL:\n","        mr_res *= co_wrr_ <= config.loc_set.point.wrr\n","        if show_detail:\n","            sys_log.warning(\"co_wrr_ <= config.loc_set.point.wrr : {:.5f} {:.5f} ({})\".format(co_wrr_[c_i], config.loc_set.point.wrr, mr_res[c_i]))\n","      else:\n","        mr_res *= cu_wrr_ <= config.loc_set.point.wrr\n","        if show_detail:\n","            sys_log.warning(\"cu_wrr_ <= config.loc_set.point.wrr : {:.5f} {:.5f} ({})\".format(cu_wrr_[c_i], config.loc_set.point.wrr, mr_res[c_i]))\n","            \n","      # if ep_loc_side == OrderSide.SELL:\n","      #   mr_res *= cu_es_ >= config.loc_set.point.cu_es\n","      #   mr_res *= cu_es_ <= config.loc_set.point.cu_es + 2\n","      #   if show_detail:\n","      #       sys_log.warning(\"cu_es_ >= config.loc_set.point.cu_es : {:.5f} {:.5f} ({})\".format(cu_es_[c_i], config.loc_set.point.cu_es, mr_res[c_i]))\n","      # else:\n","      #   mr_res *= co_es_ >= config.loc_set.point.co_es\n","      #   mr_res *= co_es_ <= config.loc_set.point.co_es + 1\n","      #   if show_detail:\n","      #       sys_log.warning(\"co_es_ >= config.loc_set.point.co_es : {:.5f} {:.5f} ({})\".format(co_es_[c_i], config.loc_set.point.co_es, mr_res[c_i]))\n","\n","\n","      if ep_loc_side == OrderSide.SELL:\n","          mr_res *= lower_wick_ratio_ >= config.loc_set.point.wick_ratio\n","          # mr_res *= upper_wick_ratio_ >= config.loc_set.point.wick_ratio\n","          if show_detail:\n","              sys_log.warning(\"upper_wick_ratio_ >= config.loc_set.point.wick_ratio : {:.5f} {:.5f} ({})\".format(upper_wick_ratio_[c_i], config.loc_set.point.wick_ratio, mr_res[c_i]))\n","      else:\n","          mr_res *= upper_wick_ratio_ >= config.loc_set.point.wick_ratio\n","          mr_res *= upper_wick_ratio_ <= config.loc_set.point.wick_ratio + 0.1\n","          # mr_res *= lower_wick_ratio_ >= config.loc_set.point.wick_ratio\n","          if show_detail:\n","              sys_log.warning(\"lower_wick_ratio_ >= config.loc_set.point.wick_ratio : {:.5f} {:.5f} ({})\".format(lower_wick_ratio_[c_i], config.loc_set.point.wick_ratio, mr_res[c_i]))\n","              \n","      crr_ = res_df['crr_{}'.format(config.loc_set.point.tf_entry)].to_numpy()\n","      mr_res *= crr_ >= config.loc_set.point.crr\n","     \n","      if show_detail:\n","          sys_log.warning(\"crr_ >= config.loc_set.point.crr : {:.5f} {:.5f} ({})\".format(crr_[c_i], config.loc_set.point.crr, mr_res[c_i]))\n","\n","      b1_upper_wick_ratio_ = res_df['upper_wick_ratio_{}'.format(config.loc_set.point.wick_itv)].shift(itv_num).to_numpy()\n","      b1_lower_wick_ratio_ = res_df['lower_wick_ratio_{}'.format(config.loc_set.point.wick_itv)].shift(itv_num).to_numpy()\n","\n","      if ep_loc_side == OrderSide.SELL:\n","          upper_wick_ratio_ = res_df['upper_wick_ratio_{}'.format(config.loc_set.point.wick_itv)].to_numpy()\n","          mr_res *= upper_wick_ratio_ >= config.loc_set.point.wick_ratio\n","          if show_detail:\n","              sys_log.warning(\"upper_wick_ratio_ >= config.loc_set.point.wick_ratio : {:.5f} {:.5f} ({})\".format(upper_wick_ratio_[c_i], config.loc_set.point.wick_ratio, mr_res[c_i]))\n","      else:\n","          lower_wick_ratio_ = res_df['lower_wick_ratio_{}'.format(config.loc_set.point.wick_itv)].to_numpy()\n","          mr_res *= lower_wick_ratio_ >= config.loc_set.point.wick_ratio\n","          if show_detail:\n","              sys_log.warning(\"lower_wick_ratio_ >= config.loc_set.point.wick_ratio : {:.5f} {:.5f} ({})\".format(lower_wick_ratio_[c_i], config.loc_set.point.wick_ratio, mr_res[c_i]))\n","\n","    if config.loc_set.point.cppr != \"None\":   \n","      tf_entry = to_itvnum(config.loc_set.point.tf_entry)\n","      b1_cppr_ = res_df['b1_cppr_{}'.format(config.loc_set.point.tf_entry)].to_numpy()  # check b1's cppr in ep_loc\n","      if ep_loc_side == OrderSide.SELL:\n","        mr_res *= b1_cppr_ >= config.loc_set.point.cppr\n","        if show_detail:\n","            sys_log.warning(\"b1_cppr_ >= config.loc_set.point.cppr : {:.5f} {:.5f} ({})\".format(b1_cppr_[c_i], config.loc_set.point.cppr, mr_res[c_i]))\n","      else:\n","        mr_res *= b1_cppr_ <= -config.loc_set.point.cppr\n","        if show_detail:\n","            sys_log.warning(\"b1_cppr_ <= -config.loc_set.point.cppr : {:.5f} {:.5f} ({})\".format(b1_cppr_[c_i], config.loc_set.point.cppr, mr_res[c_i]))\n","            \n","    # ------------ candle_score ------------ #\n","    wick_score_list = literal_eval(config.loc_set.point.wick_score_list)\n","    if len(wick_score_list) != 0:\n","        score_itv_list = literal_eval(config.loc_set.point.score_itv_list)\n","        # ------ candle_score_v0 (1m initial tick 기준임) ------ #  Todo - higher timeframe 경우 back_data 사용해야함\n","        for wick_score_, score_itv_ in zip(wick_score_list, score_itv_list):\n","            wick_score = res_df['wick_score_{}'.format(score_itv_)].to_numpy()\n","            if ep_loc_side == OrderSide.SELL:\n","                mr_res *= wick_score <= -wick_score_\n","                if show_detail:\n","                    sys_log.warning(\"wick_score <= -wick_score_ : {:.5f} {:.5f} ({})\".format(wick_score[c_i], -wick_score_, mr_res[c_i]))\n","            else:\n","                mr_res *= wick_score >= wick_score_\n","                if show_detail:\n","                    sys_log.warning(\"wick_score >= wick_score_ : {:.5f} {:.5f} ({})\".format(wick_score[c_i], wick_score_, mr_res[c_i]))\n","            \n","\n","        # ------------------ swing_middle ------------------ #\n","        # ------------ 1. envelope ------------ #\n","\n","        # ------ a. dc ------ #\n","        # ep_loc check 기준 idx 가 entry 기준이라는 걸 명심\n","        if selection_id in ['v3_2']:\n","            hc_itv = '15T'\n","            dc_itv = '15T'\n","            shift_num = [0, to_itvnum(hc_itv)]\n","            div_res = [1, 0]\n","            for itv_num, res in zip(shift_num, div_res):\n","                close_ = res_df['close_{}'.format(hc_itv)].shift(itv_num).to_numpy()  # close_bar timein 사용하는 경우, 특수로 shift(0) 사용가능\n","                if ep_loc_side == OrderSide.SELL:\n","                    dc_lower_ = res_df['dc_lower_%s' % dc_itv].shift(itv_num).to_numpy()\n","                    mr_res *= (close_ < dc_lower_) == res\n","                else:\n","                    dc_upper_ = res_df['dc_upper_%s' % dc_itv].shift(itv_num).to_numpy()\n","                    mr_res *= (close_ > dc_upper_) == res\n","\n","        # ------------ 2. degree ------------ #\n","        # ------ a. norm_body_ratio ------ #\n","        if config.loc_set.zone.abs_ratio != \"None\":\n","            itv = config.loc_set.point.tf_entry\n","            abs_ratio_ = res_df['abs_ratio_{}'.format(itv)].to_numpy()\n","            mr_res *= abs_ratio_ >= config.loc_set.zone.abs_ratio\n","            # mr_res *= abs_ratio_ <= config.loc_set.zone.abs_ratio\n","\n","    # ------------ 2. imbalance_ratio ------------ #\n","    if config.loc_set.zone.ir != \"None\":\n","        itv = config.loc_set.point.tf_entry\n","        itv_num = to_itvnum(itv)\n","        if ep_loc_side == OrderSide.SELL:\n","            short_ir_ = res_df['short_ir_{}'.format(itv)].to_numpy()\n","            # short_ir_ = res_df['short_ir_{}'.format(itv)].shift(itv_num).to_numpy()\n","\n","            # mr_res *= short_ir_ >= config.loc_set.zone.ir     # greater\n","            mr_res *= short_ir_ <= config.loc_set.zone.ir  # lesser\n","            if show_detail:\n","                sys_log.warning(\n","                    \"short_ir_ <= config.loc_set.zone.ir : {:.5f} {:.5f} ({})\".format(short_ir_[c_i], config.loc_set.zone.ir, mr_res[c_i]))\n","        else:\n","            long_ir_ = res_df['long_ir_{}'.format(itv)].to_numpy()\n","            # long_ir_ = res_df['long_ir_{}'.format(itv)].shift(itv_num).to_numpy()\n","\n","            # mr_res *= long_ir_ >= config.loc_set.zone.ir\n","            mr_res *= long_ir_ <= config.loc_set.zone.ir\n","            if show_detail:\n","                sys_log.warning(\n","                    \"long_ir_ <= config.loc_set.zone.ir : {:.5f} {:.5f} ({})\".format(long_ir_[c_i], config.loc_set.zone.ir, mr_res[c_i]))\n","                \n","        # if selection_id in ['3_6']:\n","        #   itv, period1, period2 = config.loc_set.point.p1_itv0, config.loc_set.point.p1_period1, config.loc_set.point.p1_period2          \n","\n","        #   if ep_loc_side == OrderSide.SELL:\n","        #     high_5T = res_df['high_5T'].to_numpy()  # Todo, tf_entry - 1 open 기준이라 future_data 사용 가능\n","        #     short_base_ = res_df['short_base_{}{}{}'.format(itv, period1, period2)]\n","        #     mr_res *= high_5T < short_base_\n","        #     if show_detail:\n","        #         sys_log.warning(\n","        #             \"high_5T < short_base_ : {:.5f} {:.5f} ({})\".format(high_5T[c_i], short_base_[c_i], mr_res[c_i]))\n","        #   else:\n","        #     low_5T = res_df['low_5T'].to_numpy()  # Todo, tf_entry - 1 open 기준이라 future_data 사용 가능\n","        #     long_base_ = res_df['long_base_{}{}{}'.format(itv, period1, period2)]\n","        #     mr_res *= low_5T > long_base_\n","        #     if show_detail:\n","        #         sys_log.warning(\n","        #             \"low_5T > long_base_ : {:.5f} {:.5f} ({})\".format(low_5T[c_i], long_base_[c_i], mr_res[c_i]))'\n","        \n","        # ------ dc_base ------ #\n","        # if selection_id in ['4']:  # 'v3_3', 'v3_4',\n","        #   hc_itv = '5T'\n","        #   dc_itv = '5T'\n","        #   itv_num = to_itvnum(hc_itv)\n","        #   close_ = res_df['close_{}'.format(hc_itv)].shift(itv_num).to_numpy()   # 따라서 future_data 사용시, shifting 필요함\n","        #   if ep_loc_side == OrderSide.SELL:\n","        #     dc_lower_ = res_df['dc_lower_%s' % dc_itv].shift(itv_num).to_numpy()\n","        #     mr_res *= close_ < dc_lower_\n","        #   else:\n","        #     dc_upper_ = res_df['dc_upper_%s' % dc_itv].shift(itv_num).to_numpy()\n","        #     mr_res *= close_ > dc_upper_\n","\n","        # ------ ema ------ #\n","        # if selection_id in ['v5_2']: # 'v3'\n","        #   ema_5T = res_df['ema_5T'].to_numpy()\n","        #   if ep_loc_side == OrderSide.SELL:\n","        #     mr_res *= close < ema_5T\n","        #   else:\n","        #     mr_res *= close > ema_5T\n","        \n","        # ------ b. bb ------ #\n","        # close = res_df['close'].to_numpy()\n","\n","        # if selection_id in ['v3_3']:\n","        #   open = res_df['open'].to_numpy()\n","        #   if ep_loc_side == OrderSide.SELL:\n","        #     bb_lower_1m = res_df['bb_lower_1m'].to_numpy()\n","        #     # mr_res *= close <= bb_lower_1m\n","        #     mr_res *= open <= bb_lower_1m\n","        #   else:\n","        #     bb_upper_1m = res_df['bb_upper_1m'].to_numpy()\n","        #     # mr_res *= close >= bb_upper_1m\n","        #     mr_res *= open >= bb_upper_1m\n","\n","        if selection_id in ['4_1']:\n","            if ep_loc_side == OrderSide.SELL:\n","                bb_lower_15T = res_df['bb_lower_15T'].to_numpy()\n","                short_ep_ = res_df['short_ep_{}'.format(selection_id)].to_numpy()\n","                mr_res *= bb_lower_15T >= short_ep_\n","            else:\n","                bb_upper_15T = res_df['bb_upper_15T'].to_numpy()\n","                long_ep_ = res_df['long_ep_{}'.format(selection_id)].to_numpy()\n","                mr_res *= bb_upper_15T <= long_ep_\n","\n","        # if selection_id in ['v5_2']:\n","        #   bb_upper2_ = res_df['bb_upper2_%s' % config.loc_set.zone.bbz_itv].to_numpy()\n","        #   bb_lower2_ = res_df['bb_lower2_%s' % config.loc_set.zone.bbz_itv].to_numpy()\n","        #   if ep_loc_side == OrderSide.SELL:\n","        #     mr_res *= bb_upper2_ < close\n","        #   else:\n","        #     mr_res *= bb_lower2_ > close\n","\n","        # degree_list = literal_eval(config.loc_set.zone.degree_list)\n","        # if len(degree_list) != 0:\n","        # # if selection_id in ['v3_3', 'v3_4']:\n","        #   norm_close_15 = res_df['norm_close_15'].to_numpy()   # -> 이거 뭘로 만들었는지 불분명함,,\n","        #   b1_norm_close_15 = res_df['norm_close_15'].shift(15).to_numpy()\n","\n","        #   if ep_loc_side == OrderSide.SELL:\n","        #     mr_res *= norm_close_15 <= -degree_list[0]\n","        #     # mr_res *= b1_norm_close_15 <= -degree_list[1]\n","        #   else:\n","        #     mr_res *= norm_close_15 >= degree_list[0]\n","        #     # mr_res *= b1_norm_close_15 >= degree_list[1]\n","\n","        # ------ b. dc ------ #\n","        # if selection_id in ['v3_3']:\n","        #   if ep_loc_side == OrderSide.SELL:\n","        #     dc_lower_ = res_df['dc_lower_1m'].to_numpy()\n","        #     b1_dc_lower_ = res_df['dc_lower_1m'].shift(1).to_numpy()\n","        #     mr_res *= dc_lower_ < b1_dc_lower_\n","        #   else:\n","        #     dc_upper_ = res_df['dc_upper_1m'].to_numpy()\n","        #     b1_dc_upper_ = res_df['dc_upper_1m'].shift(1).to_numpy()\n","        #     mr_res *= dc_upper_ > b1_dc_upper_\n","\n","        # ------ c. sar ------ #\n","        # if selection_id in ['v3_3']:\n","        # sar_uptrend_3T = res_df['sar_uptrend_3T'].to_numpy()\n","        # if ep_loc_side == OrderSide.SELL:\n","        #   mr_res *= sar_uptrend_3T == 0\n","        # else:\n","        #   mr_res *= sar_uptrend_3T == 1"],"metadata":{"id":"csZwxsP5r_Pz"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"JjKHyqftzhD7"},"source":["### set config (override available)"]},{"cell_type":"code","execution_count":8,"metadata":{"id":"q_4E-zH02WJy","executionInfo":{"status":"ok","timestamp":1652257524895,"user_tz":-540,"elapsed":4,"user":{"displayName":"7th June","userId":"08178289703395036410"}}},"outputs":[],"source":["#     caution : MARKET / LIMIT spelling   #\n","#      json doesn't support single quotes     #\n","\n","param_dict = {\n","  \"selection_id\": \"5_42\",\n","  \"trader_set\": {\n","    \"backtrade\": 0,\n","    \"back_data_path\": \"C:\\\\Users\\\\Lenovo\\\\PycharmProjects\\\\System_Trading\\\\JnQ\\\\candlestick_concated\\\\database_bn\\\\2022-04-08\\\\2022-04-08 ETHUSDT_1m.ftr\",\n","    \"start_datetime\": \"2020-09-05 00:00:59.999\",\n","    \"run\": 1,\n","    \"df_log\": 0,\n","    \"latest_index\": -1,\n","    \"complete_index\": -2,\n","    \"limit_fee\": 0.0002,\n","    \"market_fee\": 0.0004,\n","    \"initial_asset\": 10,\n","    \"asset_changed\": 0,\n","    \"symbol\": \"ETHUSDT\",\n","    \"symbol_changed\": 0,\n","    \"itv_list\": \"['T', '3T', '5T', '15T', '30T', '4H']\",\n","    \"row_list\": \"[100, 50, 1, 1, 1, 1]\",\n","    \"rec_row_list\": \"[1, 1, 1, 1, 1, 1]\",\n","    \"offset_list\": \"['1h', '1h', '1h', '1h', '1h', '1h']\",\n","    \"bar_close_second\": 59,\n","    \"realtime_term\": 0.01,\n","    \"api_retry_term\": 3,\n","    \"check_entry_sec\": 10,\n","    \"entry_execution_wait\": 60,\n","    \"breakout_qty_ratio\": 0.97,\n","    \"qty_check_term\": 30,\n","    \"exit_execution_wait\": 60,\n","    \"close_complete_term\": 5,\n","    \"save_stacked_df\": 0,\n","    \"stacked_df_exist\": 1\n","  },\n","  \"pos_set\": {\n","    \"short_inversion\": 0,\n","    \"long_inversion\": 0,\n","    \"short_ban\": 0,\n","    \"long_ban\": 0\n","  },\n","  \"loc_set\": {      \n","    \"point\": {\n","      \"exp_itv\": \"5T\",\n","      \"tf_entry\": \"5T\",\n","      \"candle_pattern\": \"CDLMARUBOZU\",\n","      \"short_spread\": \"None\",\n","      \"long_spread\": \"None\",\n","      \"short_tr_thresh\": \"None\",\n","      \"long_tr_thresh\": \"None\",\n","      \"short_wick_ratio\": \"None\",\n","      \"long_wick_ratio\": \"None\",\n","      \"wick_itv\": \"5T\",\n","      \"co_es\": \"None\",\n","      \"cu_es\": \"None\",\n","      \"crr\": \"None\",\n","      \"cppr\": \"None\",\n","      \"ppr\": \"None\",\n","      \"wbr\": \"None\",\n","      \"dbr\": \"None\",\n","      \"dbr2\": \"None\",\n","      \"brr\": \"None\",\n","      \"ir\": \"None\",\n","      \"abs_ratio\": \"None\"\n","    },\n","    \"zone\": {\n","      \"use_zone\": 0,\n","      \"base_roll_period\": 50,\n","      \"degree_list\": \"[]\",\n","      \"dtk_itv\": \"5T\",\n","      \"dt_k\": \"None\",\n","      \"dc_period\": 135,\n","      \"use_dtk_line\": 0,\n","      \"zone_dt_k\": 0.4,\n","      \"zone_dc_period\": 135\n","    }\n","  },\n","  \"tr_set\": {\n","    \"wave_period\": 5,\n","    \"wave_greater1\": 2,\n","    \"wave_greater2\": 2,\n","    \"wave_lesser1\": 2,\n","    \"wave_lesser2\": 2,\n","    \"p1_itv1\": \"15T\",\n","    \"p1_itv0\": \"T\",\n","    \"p1_period1\": 1,\n","    \"p1_period2\": 5,\n","    \"p2_itv1\": \"None\",\n","    \"p2_itv0\": \"T\",\n","    \"p2_period1\": 20,\n","    \"p2_period2\": 40,\n","    \"ei_k\": 0.0,\n","    \"expire_tick\": 10,\n","    \"tp_gap\": 0.0,\n","    \"ep_gap\": -0.618,\n","    \"out_gap\": 0,\n","    \"decay_gap\": \"None\",\n","    \"c_ep_gap\": \"None\",\n","    \"t_out_gap\": \"None\",\n","    \"wb_tp_gap\": 0,\n","    \"wb_out_gap\": 0,\n","    \"bias_info_tick\": 240\n","  },\n","  \"ep_set\": {\n","    \"entry_type\": \"LIMIT\",\n","    \"static_ep\": 1,\n","    \"point2\": {\n","      \"use_point2\": 0,\n","      \"entry_type\": \"MARKET\"\n","    }\n","  },\n","  \"tp_set\": {\n","    \"non_tp\": 0,\n","    \"static_tp\": 1,\n","    \"tp_onexec\": 0,\n","    \"decay_term\": 60,\n","    \"p_ranges\": \"[1]\",\n","    \"p_qty_ratio\": \"[1]\"\n","  },\n","  \"out_set\": {\n","    \"hl_out\": 1,\n","    \"static_out\": 1,\n","    \"out_onexec\": 0,\n","    \"tf_exit\": \"None\",\n","    \"rsi_exit\": 0\n","  },\n","  \"lvrg_set\": {\n","    \"leverage\": 2,\n","    \"static_lvrg\": 0,\n","    \"allow_float\": 0,\n","    \"target_pct\": 0.03,\n","    \"lvrg_rejection\": 0\n","  }\n","}\n","\n","config = EasyDict(param_dict)"]},{"cell_type":"markdown","source":["#### legacy"],"metadata":{"id":"MuD_2vY7TI_8"}},{"cell_type":"code","source":[",\n","      \"hc_itv\": 60,\n","      \"osc_band\": 20\n","      \n","      \"wick_score_list\": \"[]\",\n","      \"body_score_list\": \"[]\",\n","      \"score_itv_list\": \"[]\",,\n","\n","      \"wick_score_list\": \"[]\",\n","      \"body_score_list\": \"[]\",\n","      \"score_itv_list\": \"['T']\""],"metadata":{"id":"EKag94Y2TMCO"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"rLI8unIyroiC"},"source":["## run"]},{"cell_type":"code","execution_count":9,"metadata":{"id":"qBJfPsmJzVIr","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1652257529455,"user_tz":-540,"elapsed":2,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"615e6605-2bf2-4c5d-a0b8-2795e551d934"},"outputs":[{"output_type":"stream","name":"stdout","text":["\"5_42\" {\n"," \"point\": {\n","  \"exp_itv\": \"5T\",\n","  \"tf_entry\": \"5T\",\n","  \"candle_pattern\": \"CDLMARUBOZU\",\n","  \"short_spread\": \"None\",\n","  \"long_spread\": \"None\",\n","  \"short_tr_thresh\": \"None\",\n","  \"long_tr_thresh\": \"None\",\n","  \"short_wick_ratio\": \"None\",\n","  \"long_wick_ratio\": \"None\",\n","  \"wick_itv\": \"5T\",\n","  \"co_es\": \"None\",\n","  \"cu_es\": \"None\",\n","  \"crr\": \"None\",\n","  \"cppr\": \"None\",\n","  \"ppr\": \"None\",\n","  \"wbr\": \"None\",\n","  \"dbr\": \"None\",\n","  \"dbr2\": \"None\",\n","  \"brr\": \"None\",\n","  \"ir\": \"None\",\n","  \"abs_ratio\": \"None\"\n"," },\n"," \"zone\": {\n","  \"use_zone\": 0,\n","  \"base_roll_period\": 50,\n","  \"degree_list\": \"[]\",\n","  \"dtk_itv\": \"5T\",\n","  \"dt_k\": \"None\",\n","  \"dc_period\": 135,\n","  \"use_dtk_line\": 0,\n","  \"zone_dt_k\": 0.4,\n","  \"zone_dc_period\": 135\n"," }\n","} {\n"," \"wave_period\": 5,\n"," \"wave_greater1\": 2,\n"," \"wave_greater2\": 2,\n"," \"wave_lesser1\": 2,\n"," \"wave_lesser2\": 2,\n"," \"p1_itv1\": \"15T\",\n"," \"p1_itv0\": \"T\",\n"," \"p1_period1\": 1,\n"," \"p1_period2\": 5,\n"," \"p2_itv1\": \"None\",\n"," \"p2_itv0\": \"T\",\n"," \"p2_period1\": 20,\n"," \"p2_period2\": 40,\n"," \"ei_k\": 0.0,\n"," \"expire_tick\": 10,\n"," \"tp_gap\": 0.0,\n"," \"ep_gap\": -0.618,\n"," \"out_gap\": 0,\n"," \"decay_gap\": \"None\",\n"," \"c_ep_gap\": \"None\",\n"," \"t_out_gap\": \"None\",\n"," \"wb_tp_gap\": 0,\n"," \"wb_out_gap\": 0,\n"," \"bias_info_tick\": 240\n","} {\n"," \"entry_type\": \"LIMIT\",\n"," \"static_ep\": 1,\n"," \"point2\": {\n","  \"use_point2\": 0,\n","  \"entry_type\": \"MARKET\"\n"," }\n","} {\n"," \"non_tp\": 0,\n"," \"static_tp\": 1,\n"," \"tp_onexec\": 0,\n"," \"decay_term\": 60,\n"," \"p_ranges\": \"[1]\",\n"," \"p_qty_ratio\": \"[1]\"\n","} {\n"," \"hl_out\": 1,\n"," \"static_out\": 1,\n"," \"out_onexec\": 0,\n"," \"tf_exit\": \"None\",\n"," \"rsi_exit\": 0\n","} {\n"," \"leverage\": 2,\n"," \"static_lvrg\": 0,\n"," \"allow_float\": 0,\n"," \"target_pct\": 0.03,\n"," \"lvrg_rejection\": 0\n","} "]}],"source":["# funcs = [expire_v2, ep_loc_point2_v2, lvrg_set]  # expire for p1 & p2\n","funcs = [expire, ep_loc_point2_v2, lvrg_set]     # expire for p1-only\n","# funcs = [expire_v0, ep_loc_point2_v2, lvrg_set]  # expire for v3\n","\n","id_idx_list = [0]  # ID_arr 에서 import 할 id_idx 선택\n","public_override = 1\n","utils_override = 1\n","config_override = 1\n","\n","# ------ config_list 와 같은 org_var 에 override 하는거 다시 생각하기 ------ #\n","ID_list = ID_arr[id_idx_list]\n","utils_list = utils_arr[id_idx_list]\n","config_list = config_arr[id_idx_list]\n","\n","if config_override or utils_override:\n","  assert len(config_list) == 1\n","  if config_override:    \n","    config_list[0] = config\n","    ID_list[0] = config.selection_id\n","  \n","config = config_list[0]  # base config = config_list[0]\n","tp_fee, out_fee = calc_tp_out_fee_v2(config)   # -> rev_pr 때문에 일단 이곳에도 선언함\n","\n","# ------- inversion set ------- #\n","inversion = 0\n","fdist_thresh = 1\n","# ------- plot param ------- #\n","show_detail = 0\n","# ------- temp param ------- #\n","allow_osc_touch = 0\n","rsi_gap = 5\n","\n","# ------- just printing config ------- #\n","_ = [print(json.dumps(config[key_], indent=1), end=' ') for key_ in ['selection_id', 'loc_set', 'tr_set', 'ep_set', 'tp_set', 'out_set', 'lvrg_set']] #  'trader_set',"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"afUV2b1jaggN"},"outputs":[],"source":["# config.trader_set.start_datetime = \"2020-09-05 00:00:59.999\" #  \"2020-09-05 00:00:59.999\" # 2022-02-01 16:34:59.999000 2022-01-14 16:34:59.999000  \"2020-09-05 00:00:59.999\" \"2022-01-10 00:00:59.999\" \"2021-10-04 02:39:59.999000\"\n","# config_list[0].tr_set.wave_period = 5"]},{"cell_type":"code","execution_count":25,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":3936,"status":"ok","timestamp":1652258190383,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"WstWVNihCNH8","outputId":"dbb66625-e76b-4d4a-d7f0-8b16c9df828f"},"outputs":[{"output_type":"stream","name":"stdout","text":["public_indi elapsed time : 1.926077127456665\n","make data_list elapsed time : 0.0001685619354248047\n"]}],"source":["# ------ slicing res_df ------ #\n","res_df = res_df_.loc[pd.to_datetime(config.trader_set.start_datetime):]\n","\n","np_timeidx = np.array([intmin_np(date_) for date_ in res_df.index.to_numpy()])\n","\n","# ------------ public_indi ------------ # - 딱히 반복될 이유가 없는 phase - annot. 달때, why 까지 적어주면 좋음\n","start_0 = time.time()\n","if public_override:\n","    res_df = public_indi(res_df, config_list[0], np_timeidx)  # 현재 대부분의 시간은 h_candle 에서 소비되고 있음\n","else:\n","    res_df = utils_public.public_indi(res_df, config_list[0], np_timeidx)\n","print(\"public_indi elapsed time :\", time.time() - start_0)\n","\n","# ------------ make data_list ------------ # - 반복될 이유가 없는 phase - public_indo 에 종속\n","start_0 = time.time()\n","ohlc_cols = ['open', 'high', 'low', 'close']\n","ohlc_list = [res_df[col_].to_numpy() for col_ in ohlc_cols]\n","print(\"make data_list elapsed time :\", time.time() - start_0)"]},{"cell_type":"markdown","metadata":{"id":"RqRF1eyZ0xBL"},"source":["### idep_plot"]},{"cell_type":"code","execution_count":55,"metadata":{"id":"_iYcJk8nK8Yq","executionInfo":{"status":"ok","timestamp":1652259205681,"user_tz":-540,"elapsed":402,"user":{"displayName":"7th June","userId":"08178289703395036410"}}},"outputs":[],"source":["# ------ edit utils config ------ #\n","# config_list[0].loc_set.point.candle_pattern = talib.get_function_groups()['Pattern Recognition'][51]   # \"None\" # 0.5 0.7\n","# config_list[0].pos_set.short_ban = 0\n","# config_list[0].tr_set.wave_lesser = 3\n","config_list[0].tr_set.wave_greater1 = 0\n","config_list[0].tr_set.wave_greater2 = 0\n","# config_list[0].tr_set.p1_period1 = 5\n","# config_list[0].tr_set.p1_period2 = 5\n","# # config_list[0].tr_set.p2_period1 = 20\n","# # config_list[0].tr_set.p2_period2 = 20\n","# config_list[0].ep_set.entry_type = \"LIMIT\" # \"LIMIT\" # \"MARKET\"\n","# config_list[0].tr_set.tp_gap = 0.5\n","config_list[0].tr_set.ep_gap = 0.19 # -0.618 -0.23 -0.382\n","# config_list[0].tr_set.out_gap = 0\n","# config_list[0].tr_set.wb_tp_gap = 0.5\n","# config_list[0].tr_set.wb_out_gap = -0.5\n","# config_list[0].tr_set.bias_info_tick = 500\n","# config_list[0].trader_set.limit_fee = 1e-10 # 1e-10  0.0002\n","# config_list[0].trader_set.market_fee = 1e-10 # 1e-10  0.0004\n","\n","# config_list[0].loc_set.point.short_wick_ratio = 0.2 # \"None\" # 2.5\n","# config_list[0].loc_set.point.long_wick_ratio = 0.2 # \"None\" # 2.5\n","# config_list[0].loc_set.point.crr = 0.5"]},{"cell_type":"code","execution_count":56,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":1926,"status":"ok","timestamp":1652259207929,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"iI39YI_5GguK","outputId":"578d282a-e0cc-4aa5-d3f2-51284a3e46f0"},"outputs":[{"output_type":"stream","name":"stderr","text":["wave_point\n","np.sum(short_open_res == 1) : 68606\n","np.sum(long_open_res == 1) : 68441\n","wave_mm\n","np.sum(short_open_res == 1) : 68605\n","np.sum(long_open_res == 1) : 68438\n","compare by back_idx\n","np.sum(short_open_res == 1) : 1078\n","np.sum(long_open_res == 1) : 1090\n","point validation\n","np.sum(short_open_res == 1) : 882\n","np.sum(long_open_res == 1) : 910\n"]},{"output_type":"stream","name":"stdout","text":["enlist_tr elapsed time : 0.7890136241912842\n"]}],"source":["if utils_override:   # 현재, utils_override 하는 경우 1개의 ID 만 허용함 \n","  # start_0 = time.time()\n","  # res_df = enlist_rtc(res_df, config_list[0], np_timeidx)\n","  # print(\"enlist_rtc elapsed time :\", time.time() - start_0)\n","  start_0 = time.time()\n","  res_df = enlist_tr(res_df, config_list[0], np_timeidx)    # 36995.0 -> 152766.0 # 4044 np.sum(long_open_res == 1) : 4325\n","  print(\"enlist_tr elapsed time :\", time.time() - start_0)\n","else:\n","    start_0 = time.time()\n","    for utils_, config_ in zip(utils_list, config_list):\n","        # res_df = utils_.enlist_rtc(res_df, config_, np_timeidx)\n","        res_df = utils_.enlist_tr(res_df, config_, np_timeidx)\n","    print(\"elapsed time :\", time.time() - start_0)"]},{"cell_type":"code","execution_count":43,"metadata":{"id":"gfDSOGMd91rE","executionInfo":{"status":"ok","timestamp":1652258837697,"user_tz":-540,"elapsed":591,"user":{"displayName":"7th June","userId":"08178289703395036410"}}},"outputs":[],"source":["# ------ edit loc_set config ------ #\n","config_list[0].loc_set.point.cu_wrr_21 = \"None\" # \"None\" 5 2.5\n","config_list[0].loc_set.point.co_wrr_21 = \"None\" # \"None\" 5 2.5\n","config_list[0].loc_set.point.wrr_32 = 0.302 # \"None\" 1 0.5 0.382 0.302\n","config_list[0].loc_set.zone.hl_loc_pct = \"None\" # \"None\" 1 0.5\n","config_list[0].loc_set.point.cu_es = \"None\" # \"None\" # -2\n","config_list[0].loc_set.point.co_es = \"None\" # \"None\" # -3\n","# config_list[0].loc_set.point.cppr = 0.5   # \"None\" # 0.5 0.7\n","# config_list[0].loc_set.point.wbr = \"None\" # 0.7\n","# config_list[0].loc_set.point.dbr = \"None\"   # 0.7\n","# config_list[0].loc_set.point.dbr2 = \"None\"  # 0.7\n","# config_list[0].loc_set.point.brr = \"None\"   # 0.8\n","# config_list[0].loc_set.point.ir = \"None\" # \"None\" 0.8\n","# config_list[0].loc_set.point.wick_score_list = \"[]\"\n","# config_list[0].loc_set.point.score_itv_list = \"['H']\"\n","# # config_list[0].loc_set.point.abs_ratio = \"None\"  # 0.7\n","config_list[0].loc_set.point.short_tr_thresh = \"None\"  #  \"None\" 2 0.8 # # 0.7 # tr_thresh 엄청 민감함\n","config_list[0].loc_set.point.long_tr_thresh = 1  #  \"None\" 2 0.8 ## 0.7\n","# config_list[0].loc_set.zone.use_zone = 0\n","# # config_list[0].loc_set.zone.base_roll_period = 60"]},{"cell_type":"code","execution_count":57,"metadata":{"executionInfo":{"elapsed":1418,"status":"ok","timestamp":1652259209658,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"9DPgykxQ92mU","colab":{"base_uri":"https://localhost:8080/"},"outputId":"e9174400-201f-4c1a-a12e-f692cc03983b"},"outputs":[{"output_type":"stream","name":"stderr","text":["cu_wrr_32_ <= config.loc_set.point.wrr_32 : 1.05318 0.30200 (0.0)\n","co_wrr_32_ <= config.loc_set.point.wrr_32 : 0.57249 0.30200 (0.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 1.3297228813171387\n"]}],"source":["open_info_df = get_open_info_df(ep_loc_v3, res_df, np_timeidx, ID_list, config_list, id_idx_list)  # --> point * dur. 관련 (loc_set) param 에 종속 (open_info 가 변경되는게 아니라면, 재실행할 필요없음)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"KqVkg236t_f2"},"outputs":[],"source":["# ------ edit entry & exit (ep, tp, out, ..) config ------ #\n","# config_list[0].tr_set.ei_k = -0.5\n","# config_list[0].tr_set.expire_tick = 10\n","# # # config_list[0].ep_set.point2.use_point2 = 1\n","# # # config_list[0].ep_set.point2.entry_type = \"LIMIT\"\n","# # # config_list[0].ep_set.point2.wick_score_list = str([])\n","# # # config_list[0].tp_set.static_tp = 1\n","# # # config_list[0].tp_set.non_tp = 0 # 0 1\n","config_list[0].tp_set.p_ranges = \"[1]\"\n","config_list[0].tp_set.p_qty_ratio = \"[1]\"\n","# config_list[0].tp_set.p_ranges = \"[0.2, 0.66, 1]\"\n","# config_list[0].tp_set.p_qty_ratio = \"[0.25, 0.25, 0.5]\"\n","# config_list[0].tp_set.p_ranges = \"[0.66, 1]\"\n","# config_list[0].tp_set.p_qty_ratio = \"[0.3, 0.7]\"\n","# # # config_list[0].out_set.hl_out = 1\n","# # # config_list[0].out_set.tf_exit = \"None\" # 15 \"None\"\n","config_list[0].lvrg_set.leverage = 1\n","config_list[0].lvrg_set.static_lvrg = 1\n","config_list[0].lvrg_set.target_pct = 0.03\n","# # config_list[0].lvrg_set.allow_float = 0\n","# config_list[0].lvrg_set.lvrg_rejection = 0"]},{"cell_type":"code","execution_count":58,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":644},"executionInfo":{"elapsed":1899,"status":"ok","timestamp":1652259211553,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"HHq6cr9GPBot","outputId":"e2a57614-68ba-4d45-a5f7-70f6e2089a7f"},"outputs":[{"output_type":"stream","name":"stdout","text":["en_ex_pairing elapsed time : 0.05010199546813965\n","short_obj.shape : (29, 5)\n","long_obj.shape : (52, 5)\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1728x576 with 6 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["idep_plot elapsed time : 1.5699920654296875\n"]}],"source":["test_ratio = 0.0\n","short_pr, short_obj, short_lvrg_arr, short_fee_arr, short_tpout_arr, short_bias_arr, short_false_bias_arr, short_point1_arr, short_en_tp1, short_en_out0, \\\n","      long_pr, long_obj, long_lvrg_arr, long_fee_arr, long_tpout_arr, long_bias_arr, long_false_bias_arr, long_point1_arr, long_en_tp1, long_en_out0 = \\\n","get_res_v5(res_df, open_info_df, ohlc_list, config_list, np_timeidx, funcs, test_ratio=test_ratio, plot_is=1, signi=False)   # open 이 많을 수록 en_ex_pairing elapsed time : 11.58370590209961"]},{"cell_type":"code","source":["# ------ inversion ------ #\n","_ = get_res_v5(res_df, open_info_df, ohlc_list, config_list, np_timeidx, funcs, inversion=True, test_ratio=test_ratio, plot_is=1, signi=False)"],"metadata":{"id":"8lYgsqH-rfAM"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"n6gc7lERC4VE"},"source":["### statistics (stem 별로 진행)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"HHjIdn2MC4VE"},"outputs":[],"source":["selection_id = config.selection_id\n","\n","short_open_i = short_obj[-1].astype(int)\n","long_open_i = long_obj[-1].astype(int)\n","\n","short_open_tp_1 = res_df['short_tp_1_{}'.format(selection_id)].to_numpy()[short_open_i]\n","long_open_tp_1 = res_df['long_tp_1_{}'.format(selection_id)].to_numpy()[long_open_i]\n","\n","short_open_tp_gap = res_df['short_tp_gap_{}'.format(selection_id)].to_numpy()[short_open_i]  # use open_i\n","long_open_tp_gap = res_df['long_tp_gap_{}'.format(selection_id)].to_numpy()[long_open_i]\n","\n","short_open_epout_0 = res_df['short_epout_0_{}'.format(selection_id)].to_numpy()[short_open_i]\n","long_open_epout_0 = res_df['long_epout_0_{}'.format(selection_id)].to_numpy()[long_open_i]\n","\n","short_open_epout_gap = res_df['short_epout_gap_{}'.format(selection_id)].to_numpy()[short_open_i]  # use open_i\n","long_open_epout_gap = res_df['long_epout_gap_{}'.format(selection_id)].to_numpy()[long_open_i]\n","\n","# ------ pairing 된 en, ex_idx 기준으로 survey 진행 ------ #\n","# 0. high, low (exit_done 까지의) -> partial (tpg) 과 outg survey 목표\n","#   a. short -> tpg - low, outg - high\n","#   b. long -> tpg - high, outg - low\n","short_max_tpg = get_max_tpg_v2(\"SELL\", ohlc_list, short_pr, short_obj[:4], short_open_tp_1, short_open_tp_gap)\n","long_max_tpg = get_max_tpg_v2(\"BUY\", ohlc_list, long_pr, long_obj[:4], long_open_tp_1, long_open_tp_gap)\n","# short_max_tpg = get_max_tpg_v2(\"SELL\", ohlc_list, short_pr, short_obj[:4], short_open_tp_1, short_open_epout_gap)\n","# long_max_tpg = get_max_tpg_v2(\"BUY\", ohlc_list, long_pr, long_obj[:4], long_open_tp_1, long_open_epout_gap)\n","\n","# ------ 0. tp 까지 도달하는 최소 idx 도출, en_idx 부터 ------ #\n","#   a. bias_info_tick 의 limit 을 정해주지 않으면 굉장히 길어질 수 있다고 봄\n","# short_max_outg, short_outg_open_idx = get_max_outg_v2(\"SELL\", config, ohlc_list, short_obj, short_tpout_arr, short_open_epout_0, short_open_epout_gap)\n","# long_max_outg, long_outg_open_idx = get_max_outg_v2(\"BUY\", config, ohlc_list, long_obj, long_tpout_arr, long_open_epout_0, long_open_epout_gap)\n","short_max_outg, short_open_idx, short_true_open_idxth = get_max_outg_v3(\"SELL\", config, ohlc_list, short_obj, short_tpout_arr, short_open_epout_0, short_open_epout_gap)\n","long_max_outg, long_open_idx, long_true_open_idxth = get_max_outg_v3(\"BUY\", config, ohlc_list, long_obj, long_tpout_arr, long_open_epout_0, long_open_epout_gap)\n","\n","current_tpg= config.tr_set.tp_gap\n","current_outg = config.tr_set.out_gap"]},{"cell_type":"markdown","source":["#### consecutive dur. value survey on bias"],"metadata":{"id":"tOFkzUX2imQu"}},{"cell_type":"code","source":["res_df.dtypes"],"metadata":{"id":"CgvSrXaZEkMZ"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"gnSvYKIzC4VF"},"outputs":[],"source":["# ------------ dependent vars. ------------ #\n","# res_df 에 존재하는 col 는 모두 사용가능함\n","\n","# ------ 1. 도출한 outg 와 vars. pairing 진행 (by valid_idx) ------ #\n","devided_cols, public_cols = [], []\n","\n","devided_cols.append('tr_{}'.format(selection_id))\n","\n","wave_tf = 'T'\n","wave_period = config.tr_set.wave_period\n","\n","# public_cols.append('cu_wrr_21_{}{}'.format(wave_tf, wave_period))\n","public_cols.append('cu_wrr_32_{}{}'.format(wave_tf, wave_period))\n","# public_cols.append('co_wrr_21_{}{}'.format(wave_tf, wave_period))\n","public_cols.append('co_wrr_32_{}{}'.format(wave_tf, wave_period))\n","\n","# public_cols.append('wave_high_terms_cnt_fill_T5')\n","# public_cols.append('wave_low_terms_cnt_fill_T5')\n","# public_cols.append('wave_high_loc_pct_T5')\n","# public_cols.append('wave_low_loc_pct_T5')\n","\n","# public_cols.append('b1_co_es_15T1')\n","# public_cols.append('b1_cu_es_15T1')\n","# public_cols.append('b1_upper_wick_ratio_15T')\n","# public_cols.append('b1_lower_wick_ratio_15T')\n","\n","#  'co_wrr_T5', 'cu_wrr_T5', 'b1_cppr_15T', 'b1_updbr', 'b1_lwdbr', 'b1_updbr_cppr', 'b1_lwdbr_cppr' 'abs_ratio_5T', 'rel_ratio_5T', 'body_rel_ratio_5T'\n","\n","# devided_cols = ['tr_{}'.format(selection_id)]  # , 'ir_5T'\n","# public_cols = ['wave_high_terms_cnt_fill_T5', 'wave_low_terms_cnt_fill_T5', 'wave_high_loc_pct_T5', 'wave_low_loc_pct_T5', \n","#                'b1_co_es_15T1', 'b1_cu_es_15T1', 'b1_upper_wick_ratio_15T', 'b1_lower_wick_ratio_15T']\n","\n","short_datas = [res_df['short_' + col].to_numpy() for col in devided_cols] + [res_df[col].to_numpy() for col in public_cols]\n","long_datas = [res_df['long_' + col].to_numpy() for col in devided_cols] + [res_df[col].to_numpy() for col in public_cols]\n","\n","titles = devided_cols + public_cols"]},{"cell_type":"code","source":["plt.style.use(['dark_background', 'fast'])\n","fig = plt.figure(figsize=(14, len(titles) * 5))\n","nrows, ncols = len(short_datas), 1\n","gs = gridspec.GridSpec(nrows=nrows,  # row 부터 index 채우고 col 채우는 순서임 (gs_idx)\n","                        ncols=ncols\n","                        )\n","\n","num_samples = 30\n","alpha = 0.8\n","xmin = 0\n","xmax = 10\n","\n","for ings_idx, (title, short_data, long_data) in enumerate(zip(titles, short_datas, long_datas)):\n","  inner_gs = gs[ings_idx].subgridspec(nrows=2, ncols=2)\n","\n","  short_open_data = short_data[short_open_idx]\n","  long_open_data = long_data[long_open_idx]\n","\n","  short_true_data = short_open_data[short_bias_arr.ravel()]\n","  short_false_data = short_open_data[short_false_bias_arr.ravel()]\n","  long_true_data = long_open_data[long_bias_arr.ravel()]\n","  long_false_data = long_open_data[long_false_bias_arr.ravel()]\n","  \n","  short_true_valid_idx = np.ones_like(short_true_data).astype(bool)\n","  short_false_valid_idx = np.ones_like(short_false_data).astype(bool)\n","  long_true_valid_idx = np.ones_like(long_true_data).astype(bool)\n","  long_false_valid_idx = np.ones_like(long_false_data).astype(bool)\n","\n","  short_true_valid_idx *= ~np.isinf(short_true_data)\n","  short_false_valid_idx *= ~np.isinf(short_false_data)\n","  long_true_valid_idx *= ~np.isinf(long_true_data)\n","  long_false_valid_idx *= ~np.isinf(long_false_data)\n","\n","  try:\n","    short_true_valid_idx *= short_true_data > xmin\n","    short_false_valid_idx *= short_false_data > xmin\n","    long_true_valid_idx *= long_true_data > xmin\n","    long_false_valid_idx *= long_false_data > xmin\n","\n","  except:\n","    pass\n","\n","  try:\n","    short_true_valid_idx *= short_true_data < xmax\n","    short_false_valid_idx *= short_false_data < xmax\n","    long_true_valid_idx *= long_true_data < xmax\n","    long_false_valid_idx *= long_false_data < xmax\n","    \n","  except:\n","    pass\n","    \n","  plt.subplot(inner_gs[0])\n","  ns, bins, patches = plt.hist([short_true_data[short_true_valid_idx], short_false_data[short_false_valid_idx]], \n","           bins=num_samples, alpha=alpha, color=['#00ff00', '#ff0000'], edgecolor='black')  \n","  plt.title('short_' + title)  \n","\n","  plt.subplot(inner_gs[2])\n","  total_ns = np.sum(ns, axis=0)\n","  hist_ratio = ns[0] / total_ns\n","  # valid_idx = total_ns > 1\n","  valid_idx = np.full(len(hist_ratio), True)\n","  valid_hist_ratio = hist_ratio[valid_idx]\n","  plt.hist(bins[:-1][valid_idx], weights=valid_hist_ratio, bins=num_samples, color='#00ff00', edgecolor='black')\n","  plt.ylim(0, 1)\n","  \n","\n","  plt.subplot(inner_gs[1])\n","  ns, bins, patches = plt.hist([long_true_data[long_true_valid_idx], long_false_data[long_false_valid_idx]], \n","           bins=num_samples, alpha=alpha, color=['#00ff00', '#ff0000'], edgecolor='black')\n","  plt.title('long_' + title)\n","  \n","  plt.subplot(inner_gs[3])\n","  total_ns = np.sum(ns, axis=0)\n","  hist_ratio = ns[0] / total_ns\n","  # valid_idx = total_ns > 1\n","  valid_idx = np.full(len(hist_ratio), True)\n","  valid_hist_ratio = hist_ratio[valid_idx]\n","  plt.hist(bins[:-1][valid_idx], weights=valid_hist_ratio, bins=num_samples, color='#00ff00', edgecolor='black')\n","  plt.ylim(0, 1)\n","\n","  \n","# plt.suptitle(title)\n","plt.show()"],"metadata":{"id":"Sahvc-R0jD1A","colab":{"base_uri":"https://localhost:8080/","height":968},"executionInfo":{"status":"ok","timestamp":1652096374378,"user_tz":-540,"elapsed":2193,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"bbe0abff-666f-4dd9-de76-ad8e28c9a3ae"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/numpy/core/fromnumeric.py:3208: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.\n","  return asarray(a).size\n","/usr/local/lib/python3.7/dist-packages/matplotlib/cbook/__init__.py:1376: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.\n","  X = np.atleast_1d(X.T if isinstance(X, np.ndarray) else np.asarray(X))\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1008x1080 with 12 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","metadata":{"id":"Arnb-kXlC4VF"},"source":["#### tpg survey for partial"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"jHh0uFkXC4VF","colab":{"base_uri":"https://localhost:8080/","height":741},"executionInfo":{"status":"ok","timestamp":1651810855851,"user_tz":-540,"elapsed":1684,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"804a766a-6321-41bc-dcb6-85eaab111963"},"outputs":[{"output_type":"stream","name":"stdout","text":["52\n","52\n","52\n","52\n","pkx : [0.03997647 2.0167238  2.73054922]\n","pkx : [-0.03767855  0.18363707  0.58602909  0.7268663   0.88782311  1.39081314]\n","\n","74\n","74\n","65\n","65\n","pkx : [-5.71029994 -5.09579043 -3.40588927 -1.25510598]\n","pkx : [-3.72574064 -3.42625567 -2.45292953 -1.18011842]\n","\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 864x576 with 4 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["# 1. outg 는 partial 을 위한 histogram 작성 진행\n","# 현재, outg 내부에는 tp 한것과 out 한것이 공존하는 상태\n","titles = ['outg', 'tpg']\n","short_max_datas = [short_max_outg[short_true_open_idxth], short_max_tpg]\n","long_max_datas = [long_max_outg[long_true_open_idxth], long_max_tpg]\n","\n","# titles = ['tpg']\n","# short_max_datas = [short_max_tpg]\n","# long_max_datas = [long_max_tpg]\n","\n","plt.style.use(['dark_background', 'fast'])\n","fig = plt.figure(figsize=(12, 8))\n","nrows, ncols = 2, 1\n","gs = gridspec.GridSpec(nrows=nrows,  # row 부터 index 채우고 col 채우는 순서임 (gs_idx)\n","                        ncols=ncols\n","                        )\n","  \n","for ings_idx, (title, short_max_data, long_max_data) in enumerate(zip(titles, short_max_datas, long_max_datas)):\n","\n","  inner_gs = gs[ings_idx].subgridspec(nrows=1, ncols=2)\n","  if ings_idx == 0:\n","    axvline = current_outg\n","    title_add = 'true_' + title\n","  else:\n","    axvline = current_tpg\n","    title_add = 'false_' + title\n","\n","  print(len(long_max_data))\n","\n","  short_plot_idx = np.ones_like(short_max_data).astype(bool)\n","  long_plot_idx = np.ones_like(long_max_data).astype(bool)\n","  # short_plot_idx = short_max_data <= axvline\n","  # long_plot_idx = long_max_data <= axvline\n","\n","  print(np.sum(long_plot_idx))    \n","\n","  short_plot_idx *= ~np.isnan(short_max_data)\n","  long_plot_idx *= ~np.isnan(long_max_data)  # nan 과 inf 때문에 이 방식 채택\n","\n","  print(np.sum(long_plot_idx))\n","\n","  short_plot_idx *= ~np.isinf(short_max_data)\n","  long_plot_idx *= ~np.isinf(long_max_data)  # nan 과 inf 때문에 이 방식 채택\n","  \n","  print(np.sum(long_plot_idx))\n","    \n","  plt.subplot(inner_gs[0])\n","  kde_plot_v2(*np.unique(short_max_data[short_plot_idx], return_counts=True))\n","  plt.title('short_' + title_add)  \n","  plt.axvline(axvline, color='red', linewidth=3)\n","\n","  plt.subplot(inner_gs[1])\n","  kde_plot_v2(*np.unique(long_max_data[long_plot_idx], return_counts=True))\n","  plt.title('long_' + title_add)\n","  plt.axvline(axvline, color='red', linewidth=3)\n","\n","  print()\n","\n","# plt.suptitle(title)\n","plt.show()"]},{"cell_type":"markdown","source":["#### legacy"],"metadata":{"id":"mScdfR9hmjVu"}},{"cell_type":"markdown","metadata":{"id":"xivLUsSGC4VF"},"source":["##### outg survey for precision (eploc vars. dependency)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"LB28R3QIjCDc"},"outputs":[],"source":["# ------------ dependent vars. ------------ #\n","# res_df 에 존재하는 col 는 모두 사용가능함\n","# ------ 1. 도출한 outg 와 vars. pairing 진행 (by valid_idx) ------ #\n","devided_cols = ['tr_{}'.format(strat_version)]  # , 'ir_5T'\n","public_cols = ['wave_body_ratio']  # 'abs_ratio_5T', 'rel_ratio_5T', 'body_rel_ratio_5T'\n","\n","short_datas = [res_df['short_' + col].to_numpy() for col in devided_cols] + [res_df[col].to_numpy() for col in public_cols]\n","long_datas = [res_df['long_' + col].to_numpy() for col in devided_cols] + [res_df[col].to_numpy() for col in public_cols]\n","\n","titles = devided_cols + public_cols"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"nX9TpLcvFu7T"},"outputs":[],"source":["plot_outg_range = (-1, 10)\n","plot_data_range = (-10, 100)\n","\n","plt.style.use(['dark_background', 'fast'])\n","fig = plt.figure(figsize=(12, 18))\n","nrows, ncols = len(short_datas), 1\n","gs = gridspec.GridSpec(nrows=nrows,  # row 부터 index 채우고 col 채우는 순서임 (gs_idx)\n","                        ncols=ncols\n","                        )\n","\n","for ings_idx, (title, short_data, long_data) in enumerate(zip(titles, short_datas, long_datas)):\n","  inner_gs = gs[ings_idx].subgridspec(nrows=1, ncols=2)\n","\n","  print(len(long_max_outg))\n","\n","  short_plot_idx = (plot_outg_range[0] <= short_max_outg) & (short_max_outg <= plot_outg_range[1])\n","  long_plot_idx = (plot_outg_range[0] <= long_max_outg) & (long_max_outg <= plot_outg_range[1])  # nan 과 inf 때문에 이 방식 채택\n","\n","  print(np.sum(long_plot_idx))\n","\n","  short_open_data = short_data[short_open_idx]\n","  long_open_data = long_data[long_open_idx]\n","  \n","  short_plot_idx *= (plot_data_range[0] <= short_open_data) * (short_open_data <= plot_data_range[1])\n","  long_plot_idx *= (plot_data_range[0] <= long_open_data) * (long_open_data <= plot_data_range[1]) # nan 과 inf 때문에 이 방식 채택\n","\n","  short_plot_idx *= ~np.isnan(short_open_data)\n","  long_plot_idx *= ~np.isnan(long_open_data)  # nan 과 inf 때문에 이 방식 채택\n","\n","  print(np.sum(long_plot_idx))\n","\n","  short_plot_idx *= ~np.isinf(short_open_data)\n","  long_plot_idx *= ~np.isinf(long_open_data)  # nan 과 inf 때문에 이 방식 채택\n","\n","  print(np.sum(long_plot_idx))\n","\n","  short_true_idx = short_plot_idx * short_true_open_idxth\n","  long_true_idx = long_plot_idx * long_true_open_idxth\n","  \n","  short_false_idx = short_plot_idx * ~short_true_open_idxth\n","  long_false_idx = long_plot_idx * ~long_true_open_idxth\n","\n","  plt.subplot(inner_gs[0])\n","  # ------ true_bias ------ #\n","  x, y = short_max_outg[short_true_idx].ravel(), short_open_data[short_true_idx].ravel()  \n","  plt.scatter(x, y, color='white', alpha=0.5)\n","  # ------ false_bias ------ #\n","  x, y = short_max_outg[short_false_idx].ravel(), short_open_data[short_false_idx].ravel()\n","  plt.scatter(x, y, color='fuchsia', alpha=0.3)\n","  plt.axvline(current_outg, color='red', linewidth=3)\n","  plt.title(\"{} coef : {:0.3f}\".format(title, np.corrcoef(-x, y)[0, 1]))\n","\n","  plt.subplot(inner_gs[1])    \n","  # ------ true_bias ------ #\n","  x, y = long_max_outg[long_true_idx].ravel(), long_open_data[long_true_idx].ravel()  \n","  plt.scatter(x, y, color='white', alpha=0.5)\n","  # ------ false_bias ------ #\n","  x, y = long_max_outg[long_false_idx].ravel(), long_open_data[long_false_idx].ravel()\n","  plt.scatter(x, y, color='fuchsia', alpha=0.3)\n","  plt.axvline(current_outg, color='red', linewidth=3)\n","  plt.title(\"{} coef : {:0.3f}\".format(title, np.corrcoef(-x, y)[0, 1]))\n","\n","  print()  \n","\n","# plt.suptitle(title)\n","plt.show()\n","# print()"]},{"cell_type":"markdown","metadata":{"id":"EtjwB7Qk-Grj"},"source":["### significance_v3"]},{"cell_type":"code","execution_count":54,"metadata":{"id":"oVifICO4-Grk","colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"status":"ok","timestamp":1652259145074,"user_tz":-540,"elapsed":51599,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"15c11efd-8476-48f7-81af-ac91eaf15968"},"outputs":[{"output_type":"stream","name":"stderr","text":["wave_point\n","np.sum(short_open_res == 1) : 68606\n","np.sum(long_open_res == 1) : 68441\n","wave_mm\n","np.sum(short_open_res == 1) : 68605\n","np.sum(long_open_res == 1) : 68438\n","compare by back_idx\n","np.sum(short_open_res == 1) : 1078\n","np.sum(long_open_res == 1) : 1090\n","point validation\n","np.sum(short_open_res == 1) : 1070\n","np.sum(long_open_res == 1) : 1076\n","cu_wrr_32_ <= config.loc_set.point.wrr_32 : 1.05318 0.30200 (0.0)\n","co_wrr_32_ <= config.loc_set.point.wrr_32 : 0.57249 0.30200 (0.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.98561692237854\n","en_ex_pairing elapsed time : 0.05893969535827637\n","short_obj.shape : (79, 5)\n","long_obj.shape : (123, 5)\n","idep_plot elapsed time : 0.1969587802886963\n"]},{"output_type":"stream","name":"stderr","text":["wave_point\n","np.sum(short_open_res == 1) : 68606\n","np.sum(long_open_res == 1) : 68441\n","wave_mm\n","np.sum(short_open_res == 1) : 68605\n","np.sum(long_open_res == 1) : 68438\n","compare by back_idx\n","np.sum(short_open_res == 1) : 1078\n","np.sum(long_open_res == 1) : 1090\n","point validation\n","np.sum(short_open_res == 1) : 1066\n","np.sum(long_open_res == 1) : 1074\n","cu_wrr_32_ <= config.loc_set.point.wrr_32 : 1.05318 0.30200 (0.0)\n","co_wrr_32_ <= config.loc_set.point.wrr_32 : 0.57249 0.30200 (0.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9760744571685791\n","en_ex_pairing elapsed time : 0.05620408058166504\n","short_obj.shape : (75, 5)\n","long_obj.shape : (122, 5)\n","idep_plot elapsed time : 0.20552992820739746\n"]},{"output_type":"stream","name":"stderr","text":["wave_point\n","np.sum(short_open_res == 1) : 68606\n","np.sum(long_open_res == 1) : 68441\n","wave_mm\n","np.sum(short_open_res == 1) : 68605\n","np.sum(long_open_res == 1) : 68438\n","compare by back_idx\n","np.sum(short_open_res == 1) : 1078\n","np.sum(long_open_res == 1) : 1090\n","point validation\n","np.sum(short_open_res == 1) : 1061\n","np.sum(long_open_res == 1) : 1067\n","cu_wrr_32_ <= config.loc_set.point.wrr_32 : 1.05318 0.30200 (0.0)\n","co_wrr_32_ <= config.loc_set.point.wrr_32 : 0.57249 0.30200 (0.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9734976291656494\n","en_ex_pairing elapsed time : 0.05585336685180664\n","short_obj.shape : (70, 5)\n","long_obj.shape : (118, 5)\n","idep_plot elapsed time : 0.19785642623901367\n"]},{"output_type":"stream","name":"stderr","text":["wave_point\n","np.sum(short_open_res == 1) : 68606\n","np.sum(long_open_res == 1) : 68441\n","wave_mm\n","np.sum(short_open_res == 1) : 68605\n","np.sum(long_open_res == 1) : 68438\n","compare by back_idx\n","np.sum(short_open_res == 1) : 1078\n","np.sum(long_open_res == 1) : 1090\n","point validation\n","np.sum(short_open_res == 1) : 1055\n","np.sum(long_open_res == 1) : 1061\n","cu_wrr_32_ <= config.loc_set.point.wrr_32 : 1.05318 0.30200 (0.0)\n","co_wrr_32_ <= config.loc_set.point.wrr_32 : 0.57249 0.30200 (0.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9835896492004395\n","en_ex_pairing elapsed time : 0.055999040603637695\n","short_obj.shape : (69, 5)\n","long_obj.shape : (109, 5)\n","idep_plot elapsed time : 0.19546866416931152\n"]},{"output_type":"stream","name":"stderr","text":["wave_point\n","np.sum(short_open_res == 1) : 68606\n","np.sum(long_open_res == 1) : 68441\n","wave_mm\n","np.sum(short_open_res == 1) : 68605\n","np.sum(long_open_res == 1) : 68438\n","compare by back_idx\n","np.sum(short_open_res == 1) : 1078\n","np.sum(long_open_res == 1) : 1090\n","point validation\n","np.sum(short_open_res == 1) : 1052\n","np.sum(long_open_res == 1) : 1057\n","cu_wrr_32_ <= config.loc_set.point.wrr_32 : 1.05318 0.30200 (0.0)\n","co_wrr_32_ <= config.loc_set.point.wrr_32 : 0.57249 0.30200 (0.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9867618083953857\n","en_ex_pairing elapsed time : 0.0564119815826416\n","short_obj.shape : (66, 5)\n","long_obj.shape : (104, 5)\n","idep_plot elapsed time : 0.20241785049438477\n"]},{"output_type":"stream","name":"stderr","text":["wave_point\n","np.sum(short_open_res == 1) : 68606\n","np.sum(long_open_res == 1) : 68441\n","wave_mm\n","np.sum(short_open_res == 1) : 68605\n","np.sum(long_open_res == 1) : 68438\n","compare by back_idx\n","np.sum(short_open_res == 1) : 1078\n","np.sum(long_open_res == 1) : 1090\n","point validation\n","np.sum(short_open_res == 1) : 1045\n","np.sum(long_open_res == 1) : 1047\n","cu_wrr_32_ <= config.loc_set.point.wrr_32 : 1.05318 0.30200 (0.0)\n","co_wrr_32_ <= config.loc_set.point.wrr_32 : 0.57249 0.30200 (0.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9958846569061279\n","en_ex_pairing elapsed time : 0.05605316162109375\n","short_obj.shape : (62, 5)\n","long_obj.shape : (99, 5)\n","idep_plot elapsed time : 0.1954793930053711\n"]},{"output_type":"stream","name":"stderr","text":["wave_point\n","np.sum(short_open_res == 1) : 68606\n","np.sum(long_open_res == 1) : 68441\n","wave_mm\n","np.sum(short_open_res == 1) : 68605\n","np.sum(long_open_res == 1) : 68438\n","compare by back_idx\n","np.sum(short_open_res == 1) : 1078\n","np.sum(long_open_res == 1) : 1090\n","point validation\n","np.sum(short_open_res == 1) : 1039\n","np.sum(long_open_res == 1) : 1042\n","cu_wrr_32_ <= config.loc_set.point.wrr_32 : 1.05318 0.30200 (0.0)\n","co_wrr_32_ <= config.loc_set.point.wrr_32 : 0.57249 0.30200 (0.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.976466178894043\n","en_ex_pairing elapsed time : 0.05942726135253906\n","short_obj.shape : (58, 5)\n","long_obj.shape : (91, 5)\n","idep_plot elapsed time : 0.20114374160766602\n"]},{"output_type":"stream","name":"stderr","text":["wave_point\n","np.sum(short_open_res == 1) : 68606\n","np.sum(long_open_res == 1) : 68441\n","wave_mm\n","np.sum(short_open_res == 1) : 68605\n","np.sum(long_open_res == 1) : 68438\n","compare by back_idx\n","np.sum(short_open_res == 1) : 1078\n","np.sum(long_open_res == 1) : 1090\n","point validation\n","np.sum(short_open_res == 1) : 1029\n","np.sum(long_open_res == 1) : 1038\n","cu_wrr_32_ <= config.loc_set.point.wrr_32 : 1.05318 0.30200 (0.0)\n","co_wrr_32_ <= config.loc_set.point.wrr_32 : 0.57249 0.30200 (0.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9998548030853271\n","en_ex_pairing elapsed time : 0.05476188659667969\n","short_obj.shape : (53, 5)\n","long_obj.shape : (90, 5)\n","idep_plot elapsed time : 0.19998598098754883\n"]},{"output_type":"stream","name":"stderr","text":["wave_point\n","np.sum(short_open_res == 1) : 68606\n","np.sum(long_open_res == 1) : 68441\n","wave_mm\n","np.sum(short_open_res == 1) : 68605\n","np.sum(long_open_res == 1) : 68438\n","compare by back_idx\n","np.sum(short_open_res == 1) : 1078\n","np.sum(long_open_res == 1) : 1090\n","point validation\n","np.sum(short_open_res == 1) : 1021\n","np.sum(long_open_res == 1) : 1030\n","cu_wrr_32_ <= config.loc_set.point.wrr_32 : 1.05318 0.30200 (0.0)\n","co_wrr_32_ <= config.loc_set.point.wrr_32 : 0.57249 0.30200 (0.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9690916538238525\n","en_ex_pairing elapsed time : 0.055519819259643555\n","short_obj.shape : (49, 5)\n","long_obj.shape : (86, 5)\n","idep_plot elapsed time : 0.19730353355407715\n"]},{"output_type":"stream","name":"stderr","text":["wave_point\n","np.sum(short_open_res == 1) : 68606\n","np.sum(long_open_res == 1) : 68441\n","wave_mm\n","np.sum(short_open_res == 1) : 68605\n","np.sum(long_open_res == 1) : 68438\n","compare by back_idx\n","np.sum(short_open_res == 1) : 1078\n","np.sum(long_open_res == 1) : 1090\n","point validation\n","np.sum(short_open_res == 1) : 1014\n","np.sum(long_open_res == 1) : 1017\n","cu_wrr_32_ <= config.loc_set.point.wrr_32 : 1.05318 0.30200 (0.0)\n","co_wrr_32_ <= config.loc_set.point.wrr_32 : 0.57249 0.30200 (0.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9809539318084717\n","en_ex_pairing elapsed time : 0.054154396057128906\n","short_obj.shape : (48, 5)\n","long_obj.shape : (83, 5)\n","idep_plot elapsed time : 0.20033836364746094\n"]},{"output_type":"stream","name":"stderr","text":["wave_point\n","np.sum(short_open_res == 1) : 68606\n","np.sum(long_open_res == 1) : 68441\n","wave_mm\n","np.sum(short_open_res == 1) : 68605\n","np.sum(long_open_res == 1) : 68438\n","compare by back_idx\n","np.sum(short_open_res == 1) : 1078\n","np.sum(long_open_res == 1) : 1090\n","point validation\n","np.sum(short_open_res == 1) : 998\n","np.sum(long_open_res == 1) : 1012\n","cu_wrr_32_ <= config.loc_set.point.wrr_32 : 1.05318 0.30200 (0.0)\n","co_wrr_32_ <= config.loc_set.point.wrr_32 : 0.57249 0.30200 (0.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9777100086212158\n","en_ex_pairing elapsed time : 0.056030988693237305\n","short_obj.shape : (44, 5)\n","long_obj.shape : (81, 5)\n","idep_plot elapsed time : 0.19577407836914062\n"]},{"output_type":"stream","name":"stderr","text":["wave_point\n","np.sum(short_open_res == 1) : 68606\n","np.sum(long_open_res == 1) : 68441\n","wave_mm\n","np.sum(short_open_res == 1) : 68605\n","np.sum(long_open_res == 1) : 68438\n","compare by back_idx\n","np.sum(short_open_res == 1) : 1078\n","np.sum(long_open_res == 1) : 1090\n","point validation\n","np.sum(short_open_res == 1) : 981\n","np.sum(long_open_res == 1) : 1000\n","cu_wrr_32_ <= config.loc_set.point.wrr_32 : 1.05318 0.30200 (0.0)\n","co_wrr_32_ <= config.loc_set.point.wrr_32 : 0.57249 0.30200 (0.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9774794578552246\n","en_ex_pairing elapsed time : 0.05725836753845215\n","short_obj.shape : (42, 5)\n","long_obj.shape : (77, 5)\n","idep_plot elapsed time : 0.2030024528503418\n"]},{"output_type":"stream","name":"stderr","text":["wave_point\n","np.sum(short_open_res == 1) : 68606\n","np.sum(long_open_res == 1) : 68441\n","wave_mm\n","np.sum(short_open_res == 1) : 68605\n","np.sum(long_open_res == 1) : 68438\n","compare by back_idx\n","np.sum(short_open_res == 1) : 1078\n","np.sum(long_open_res == 1) : 1090\n","point validation\n","np.sum(short_open_res == 1) : 965\n","np.sum(long_open_res == 1) : 983\n","cu_wrr_32_ <= config.loc_set.point.wrr_32 : 1.05318 0.30200 (0.0)\n","co_wrr_32_ <= config.loc_set.point.wrr_32 : 0.57249 0.30200 (0.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9710261821746826\n","en_ex_pairing elapsed time : 0.05236315727233887\n","short_obj.shape : (41, 5)\n","long_obj.shape : (69, 5)\n","idep_plot elapsed time : 0.19158506393432617\n"]},{"output_type":"stream","name":"stderr","text":["wave_point\n","np.sum(short_open_res == 1) : 68606\n","np.sum(long_open_res == 1) : 68441\n","wave_mm\n","np.sum(short_open_res == 1) : 68605\n","np.sum(long_open_res == 1) : 68438\n","compare by back_idx\n","np.sum(short_open_res == 1) : 1078\n","np.sum(long_open_res == 1) : 1090\n","point validation\n","np.sum(short_open_res == 1) : 959\n","np.sum(long_open_res == 1) : 971\n","cu_wrr_32_ <= config.loc_set.point.wrr_32 : 1.05318 0.30200 (0.0)\n","co_wrr_32_ <= config.loc_set.point.wrr_32 : 0.57249 0.30200 (0.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9748063087463379\n","en_ex_pairing elapsed time : 0.06032609939575195\n","short_obj.shape : (40, 5)\n","long_obj.shape : (65, 5)\n","idep_plot elapsed time : 0.19276690483093262\n"]},{"output_type":"stream","name":"stderr","text":["wave_point\n","np.sum(short_open_res == 1) : 68606\n","np.sum(long_open_res == 1) : 68441\n","wave_mm\n","np.sum(short_open_res == 1) : 68605\n","np.sum(long_open_res == 1) : 68438\n","compare by back_idx\n","np.sum(short_open_res == 1) : 1078\n","np.sum(long_open_res == 1) : 1090\n","point validation\n","np.sum(short_open_res == 1) : 942\n","np.sum(long_open_res == 1) : 964\n","cu_wrr_32_ <= config.loc_set.point.wrr_32 : 1.05318 0.30200 (0.0)\n","co_wrr_32_ <= config.loc_set.point.wrr_32 : 0.57249 0.30200 (0.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9906868934631348\n","en_ex_pairing elapsed time : 0.05193161964416504\n","short_obj.shape : (40, 5)\n","long_obj.shape : (63, 5)\n","idep_plot elapsed time : 0.19574499130249023\n"]},{"output_type":"stream","name":"stderr","text":["wave_point\n","np.sum(short_open_res == 1) : 68606\n","np.sum(long_open_res == 1) : 68441\n","wave_mm\n","np.sum(short_open_res == 1) : 68605\n","np.sum(long_open_res == 1) : 68438\n","compare by back_idx\n","np.sum(short_open_res == 1) : 1078\n","np.sum(long_open_res == 1) : 1090\n","point validation\n","np.sum(short_open_res == 1) : 932\n","np.sum(long_open_res == 1) : 953\n","cu_wrr_32_ <= config.loc_set.point.wrr_32 : 1.05318 0.30200 (0.0)\n","co_wrr_32_ <= config.loc_set.point.wrr_32 : 0.57249 0.30200 (0.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9787445068359375\n","en_ex_pairing elapsed time : 0.05242204666137695\n","short_obj.shape : (35, 5)\n","long_obj.shape : (60, 5)\n","idep_plot elapsed time : 0.19339871406555176\n"]},{"output_type":"stream","name":"stderr","text":["wave_point\n","np.sum(short_open_res == 1) : 68606\n","np.sum(long_open_res == 1) : 68441\n","wave_mm\n","np.sum(short_open_res == 1) : 68605\n","np.sum(long_open_res == 1) : 68438\n","compare by back_idx\n","np.sum(short_open_res == 1) : 1078\n","np.sum(long_open_res == 1) : 1090\n","point validation\n","np.sum(short_open_res == 1) : 916\n","np.sum(long_open_res == 1) : 946\n","cu_wrr_32_ <= config.loc_set.point.wrr_32 : 1.05318 0.30200 (0.0)\n","co_wrr_32_ <= config.loc_set.point.wrr_32 : 0.57249 0.30200 (0.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9695684909820557\n","en_ex_pairing elapsed time : 0.049555301666259766\n","short_obj.shape : (32, 5)\n","long_obj.shape : (58, 5)\n","idep_plot elapsed time : 0.19559359550476074\n"]},{"output_type":"stream","name":"stderr","text":["wave_point\n","np.sum(short_open_res == 1) : 68606\n","np.sum(long_open_res == 1) : 68441\n","wave_mm\n","np.sum(short_open_res == 1) : 68605\n","np.sum(long_open_res == 1) : 68438\n","compare by back_idx\n","np.sum(short_open_res == 1) : 1078\n","np.sum(long_open_res == 1) : 1090\n","point validation\n","np.sum(short_open_res == 1) : 906\n","np.sum(long_open_res == 1) : 935\n","cu_wrr_32_ <= config.loc_set.point.wrr_32 : 1.05318 0.30200 (0.0)\n","co_wrr_32_ <= config.loc_set.point.wrr_32 : 0.57249 0.30200 (0.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9871079921722412\n","en_ex_pairing elapsed time : 0.04972243309020996\n","short_obj.shape : (32, 5)\n","long_obj.shape : (54, 5)\n","idep_plot elapsed time : 0.19104456901550293\n"]},{"output_type":"stream","name":"stderr","text":["wave_point\n","np.sum(short_open_res == 1) : 68606\n","np.sum(long_open_res == 1) : 68441\n","wave_mm\n","np.sum(short_open_res == 1) : 68605\n","np.sum(long_open_res == 1) : 68438\n","compare by back_idx\n","np.sum(short_open_res == 1) : 1078\n","np.sum(long_open_res == 1) : 1090\n","point validation\n","np.sum(short_open_res == 1) : 896\n","np.sum(long_open_res == 1) : 923\n","cu_wrr_32_ <= config.loc_set.point.wrr_32 : 1.05318 0.30200 (0.0)\n","co_wrr_32_ <= config.loc_set.point.wrr_32 : 0.57249 0.30200 (0.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9768602848052979\n","en_ex_pairing elapsed time : 0.047910451889038086\n","short_obj.shape : (32, 5)\n","long_obj.shape : (53, 5)\n","idep_plot elapsed time : 0.20460772514343262\n"]},{"output_type":"stream","name":"stderr","text":["wave_point\n","np.sum(short_open_res == 1) : 68606\n","np.sum(long_open_res == 1) : 68441\n","wave_mm\n","np.sum(short_open_res == 1) : 68605\n","np.sum(long_open_res == 1) : 68438\n","compare by back_idx\n","np.sum(short_open_res == 1) : 1078\n","np.sum(long_open_res == 1) : 1090\n","point validation\n","np.sum(short_open_res == 1) : 884\n","np.sum(long_open_res == 1) : 911\n","cu_wrr_32_ <= config.loc_set.point.wrr_32 : 1.05318 0.30200 (0.0)\n","co_wrr_32_ <= config.loc_set.point.wrr_32 : 0.57249 0.30200 (0.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9901659488677979\n","en_ex_pairing elapsed time : 0.04886054992675781\n","short_obj.shape : (29, 5)\n","long_obj.shape : (52, 5)\n","idep_plot elapsed time : 0.19721603393554688\n"]},{"output_type":"stream","name":"stderr","text":["wave_point\n","np.sum(short_open_res == 1) : 68606\n","np.sum(long_open_res == 1) : 68441\n","wave_mm\n","np.sum(short_open_res == 1) : 68605\n","np.sum(long_open_res == 1) : 68438\n","compare by back_idx\n","np.sum(short_open_res == 1) : 1078\n","np.sum(long_open_res == 1) : 1090\n","point validation\n","np.sum(short_open_res == 1) : 871\n","np.sum(long_open_res == 1) : 899\n","cu_wrr_32_ <= config.loc_set.point.wrr_32 : 1.05318 0.30200 (0.0)\n","co_wrr_32_ <= config.loc_set.point.wrr_32 : 0.57249 0.30200 (0.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9765374660491943\n","en_ex_pairing elapsed time : 0.045633792877197266\n","short_obj.shape : (27, 5)\n","long_obj.shape : (47, 5)\n","idep_plot elapsed time : 0.19062566757202148\n"]},{"output_type":"stream","name":"stderr","text":["wave_point\n","np.sum(short_open_res == 1) : 68606\n","np.sum(long_open_res == 1) : 68441\n","wave_mm\n","np.sum(short_open_res == 1) : 68605\n","np.sum(long_open_res == 1) : 68438\n","compare by back_idx\n","np.sum(short_open_res == 1) : 1078\n","np.sum(long_open_res == 1) : 1090\n","point validation\n","np.sum(short_open_res == 1) : 848\n","np.sum(long_open_res == 1) : 886\n","cu_wrr_32_ <= config.loc_set.point.wrr_32 : 1.05318 0.30200 (0.0)\n","co_wrr_32_ <= config.loc_set.point.wrr_32 : 0.57249 0.30200 (0.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9899089336395264\n","en_ex_pairing elapsed time : 0.044362783432006836\n","short_obj.shape : (22, 5)\n","long_obj.shape : (46, 5)\n","idep_plot elapsed time : 0.19950461387634277\n"]},{"output_type":"stream","name":"stderr","text":["wave_point\n","np.sum(short_open_res == 1) : 68606\n","np.sum(long_open_res == 1) : 68441\n","wave_mm\n","np.sum(short_open_res == 1) : 68605\n","np.sum(long_open_res == 1) : 68438\n","compare by back_idx\n","np.sum(short_open_res == 1) : 1078\n","np.sum(long_open_res == 1) : 1090\n","point validation\n","np.sum(short_open_res == 1) : 821\n","np.sum(long_open_res == 1) : 866\n","cu_wrr_32_ <= config.loc_set.point.wrr_32 : 1.05318 0.30200 (0.0)\n","co_wrr_32_ <= config.loc_set.point.wrr_32 : 0.57249 0.30200 (0.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9726293087005615\n","en_ex_pairing elapsed time : 0.04307842254638672\n","short_obj.shape : (20, 5)\n","long_obj.shape : (43, 5)\n","idep_plot elapsed time : 0.19322705268859863\n"]},{"output_type":"stream","name":"stderr","text":["wave_point\n","np.sum(short_open_res == 1) : 68606\n","np.sum(long_open_res == 1) : 68441\n","wave_mm\n","np.sum(short_open_res == 1) : 68605\n","np.sum(long_open_res == 1) : 68438\n","compare by back_idx\n","np.sum(short_open_res == 1) : 1078\n","np.sum(long_open_res == 1) : 1090\n","point validation\n","np.sum(short_open_res == 1) : 798\n","np.sum(long_open_res == 1) : 851\n","cu_wrr_32_ <= config.loc_set.point.wrr_32 : 1.05318 0.30200 (0.0)\n","co_wrr_32_ <= config.loc_set.point.wrr_32 : 0.57249 0.30200 (0.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9705297946929932\n","en_ex_pairing elapsed time : 0.04326605796813965\n","short_obj.shape : (19, 5)\n","long_obj.shape : (42, 5)\n","idep_plot elapsed time : 0.19417881965637207\n"]},{"output_type":"stream","name":"stderr","text":["wave_point\n","np.sum(short_open_res == 1) : 68606\n","np.sum(long_open_res == 1) : 68441\n","wave_mm\n","np.sum(short_open_res == 1) : 68605\n","np.sum(long_open_res == 1) : 68438\n","compare by back_idx\n","np.sum(short_open_res == 1) : 1078\n","np.sum(long_open_res == 1) : 1090\n","point validation\n","np.sum(short_open_res == 1) : 778\n","np.sum(long_open_res == 1) : 839\n","cu_wrr_32_ <= config.loc_set.point.wrr_32 : 1.05318 0.30200 (0.0)\n","co_wrr_32_ <= config.loc_set.point.wrr_32 : 0.57249 0.30200 (0.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.988872766494751\n","en_ex_pairing elapsed time : 0.04237842559814453\n","short_obj.shape : (18, 5)\n","long_obj.shape : (39, 5)\n","idep_plot elapsed time : 0.19797563552856445\n"]},{"output_type":"stream","name":"stderr","text":["wave_point\n","np.sum(short_open_res == 1) : 68606\n","np.sum(long_open_res == 1) : 68441\n","wave_mm\n","np.sum(short_open_res == 1) : 68605\n","np.sum(long_open_res == 1) : 68438\n","compare by back_idx\n","np.sum(short_open_res == 1) : 1078\n","np.sum(long_open_res == 1) : 1090\n","point validation\n","np.sum(short_open_res == 1) : 756\n","np.sum(long_open_res == 1) : 828\n","cu_wrr_32_ <= config.loc_set.point.wrr_32 : 1.05318 0.30200 (0.0)\n","co_wrr_32_ <= config.loc_set.point.wrr_32 : 0.57249 0.30200 (0.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9861412048339844\n","en_ex_pairing elapsed time : 0.040114641189575195\n","short_obj.shape : (17, 5)\n","long_obj.shape : (36, 5)\n","idep_plot elapsed time : 0.19478249549865723\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1728x576 with 36 Axes>"],"image/png":"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REZG4vr16zhy5Ag2b94MANiyZQt27NiB8+fPIy0tDY8fP8bcuXMBPBs24auvvsKlS5dQVFQEd3d3KR8CUZOihmeD5RIRERERNXurV6+GmZkZpk6dKnUqRERERET1wjNyiYiIiKjZcnBwQPfu3QEAffr0wbRp03jlDBERERE1SRpSJ0BEREREpCx6enoIDAyEubk58vLysHbtWhw6dEjqtIiIiIiI6o1DKxARERERERERERGpOA6tQERERERERERERKTi2JFLREREREREREREpOLYkUtERERERERERESk4tiRS0RERERERERERKTi2JFLREREREREREREpOLYkUtERERERERERESk4tiRS0RERERERERERKTi2JFLREREREREREREpOLYkUtERERERERERESk4tiRS0RERERERERERKTi2JFLREREREREREREpOLYkUtERERERERERESk4tiRS0RERERERERERKTi2JFLREREREREREREpOLYkUtERERERERERESk4tiRS0RERERERERERKTi2JFLREREREREREREpOLYkUtERERERERERESk4tiRS0RERERERERERKTi2JFLREREREREREREpOLYkUtERERERERERESk4tiRS0RERERERERERKTi2JFLREREREREREREpOLYkUtERERERERERESk4tiRS0RERERERERERKTi2JFLREREREREREREpOLYkUtERERERERERESk4tiRS0RERERERERERKTi2JFL1EKlpaXBy8tL6jRICbZu3YpVq1a9dD0dHR0EBwfj/v372Lt3byNkRkTUMrDGNk+sr0RE0mONbZ5YY+uOHbmNyNraGiEhIXj48CESEhL+9M1nzZo1yMjIQHFxMW7fvo0lS5ZUWz506FBERkaiuLgYqampmD59urLTVwlCCHTu3FnqNEhi8+bNw507d1BcXIzNmzdDS0urxvWcnJwQERGBwsJCFBYW4uTJk3BycpIv19LSwsaNG5Gbm4t79+4hODgY5ubmjfUwJPfWW2/B1NQUxsbGmDBhwp+uO3HiRNy+fRsPHjzAwYMHYWRkVON6xsbGuHjxIu7evYuioiJcvnwZAwYMkC/fuHEjSktL5fH48WOUlJQo9HFRy8Qa2zCsr/Q71tiGY32l5oT1teFYY+l3rLENxxr7jGjpoa6u3ij7uXz5sli7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\n"},"metadata":{}}],"source":["# from google.colab import output\n","# ------------ survey param ------------ #\n","# itv_num_list = [1, 3, 5, 15]\n","# itv_list = ['15m', '30m', '1h', '4h']\n","# itv_list = ['3m', '5m', '15m', '30m', '1h', '4h']\n","# val_list = np.arange(-0.5, -0.9, -0.1)     # prcn 1\n","val_list = np.arange(-0.382, 0.382, 0.03)  # prcn 2\n","# val_list = np.arange(-0.5, -0.6, -0.005)    # prcn 3\n","# val_list = np.arange(0.944, 0.945, 0.0001)    # prcn 4\n","# val_list = np.arange(70, 80, 1)   # prcn -1\n","# val_list = np.arange(200, 180, -5)   # prcn -2\n","# val_list = talib.get_function_groups()['Pattern Recognition']\n","\n","# ------------ get survey_res ------------ #\n","result = []\n","res_shape = (3, 12)  # short, long, both x data\n","config_list_copy = copy.deepcopy(config_list)\n","for set_val in val_list:\n","  # ------------ open 결정 이전의 인자값 ------------ #\n","  # ------ point * dur. ------ #\n","  # config_list_copy[0].loc_set.point.candle_pattern = set_val\n","  # config_list_copy[0].loc_set.zone.degree_list = set_val\n","  # config_list_copy[0].loc_set.point2.wick_score_list = str([set_val])\n","  # config_list_copy[0].loc_set.zone.ir = set_val  \n","  # config_list_copy[0].loc_set.zone.abs_ratio = set_val  \n","\n","  # ------------ open 결정 이후의 인자값 ------------ #\n","  # ------ utils ------ #\n","  # config_list_copy[0].tr_set.tp_gap = set_val  \n","  config_list_copy[0].tr_set.ep_gap = set_val \n","  # config_list_copy[0].tr_set.out_gap = set_val  \n","\n","  # config_list_copy[0].tr_set.tp_gap = abs(set_val) - 0.5\n","  # config_list_copy[0].tr_set.out_gap = set_val + 0.5\n","  # config_list_copy[0].tr_set.wb_tp_gap = config_list_copy[0].tr_set.tp_gap\n","  # config_list_copy[0].tr_set.wb_out_gap = config_list_copy[0].tr_set.out_gap\n","\n","  # ------ entry, exit (ep, tp, out vars.) ------ #\n","  # config_list_copy[0].tr_set.ei_k = set_val\n","  # config_list_copy[0].ep_set.expire_tick = set_val  \n"," \n","  for utils_, config_ in zip(utils_list, config_list_copy):\n","    # enlist_rtc(res_df, config_, np_timeidx)\n","    enlist_tr(res_df, config_, np_timeidx)\n","  open_info_df = get_open_info_df(ep_loc_v3, res_df, np_timeidx, ID_list, config_list_copy, id_idx_list)   # point * mr_res 이기 때문에 utils_tr & rtc 의 영향을 충분히 받음\n","\n","  try:\n","    result.append(get_res_v5(res_df, open_info_df, ohlc_list, config_list_copy, np_timeidx, funcs, test_ratio=test_ratio, plot_is=1, signi=True))    \n","  except:\n","    result.append(np.full(res_shape, np.nan))\n","    # pass\n","\n","survey_res_list = [np.array(result)[:, s_i::3] for s_i in range(3)]   # 3 for s, l, b\n","# short_res, long_res, both_res = survey_res_list\n","\n","# ------------ plot survey_res ------------ #\n","title_list = [\"short\", \"long\", \"both\"]\n","sub_title_list = ['prcn', 'wb', 'len_pr', 'dpf', 'wr', 'sr', 'acc_pr', 'sum_pr', 'min_pr', 'liqd', 'acc_mdd', 'sum_mdd']\n","space_ = \" \" * 120\n","\n","fig = plt.figure(figsize=(24, 8))\n","plt.style.use('dark_background')\n","gs = gridspec.GridSpec(nrows=1,\n","                        ncols=3,\n","                        # height_ratios=[1, 1, 1]\n","                      )\n","# nrows, ncols, h_r = 3, 3, [1, 1, 1]\n","nrows, ncols, h_r = 3, 4, [1, 1, 1]\n","# nrows, ncols, h_r = 4, 3, [1, 1, 1, 1]\n","# if d_idx == 0:\n","# else:\n","  # nrows, ncols, h_r = 2, 2, [1, 1]\n","\n","for d_idx, (title_name, survey_res) in enumerate(zip(title_list, survey_res_list)):  \n","  inner_gs = gs[d_idx].subgridspec(nrows=nrows,\n","                        ncols=ncols,\n","                        height_ratios=h_r\n","                      )\n","  for in_idx, (data_, sub_title) in enumerate(zip(survey_res.T, sub_title_list)):\n","    plt.subplot(inner_gs[in_idx])\n","    data = data_.ravel()\n","    valid_idx = ~np.isnan(data)\n","    if np.sum(valid_idx) > 0:\n","      if type(val_list[0]) == str:\n","        x, y = np.arange(len(val_list))[valid_idx], data[valid_idx]\n","      else:\n","        x, y = val_list[valid_idx], data[valid_idx]\n","      plt.plot(x, y)  # 앞에서부터 len(result) 만큼만    \n","      plt.title(sub_title + '_{:.2f}'.format(x[np.argmax(y)]))\n","    else:\n","      plt.title(sub_title)\n","\n","plt.suptitle(space_.join(title_list))\n","plt.show()\n","# print(\"\\n\")"]},{"cell_type":"code","source":["\n","# ------------ plot survey_res ------------ #\n","title_list = [\"short\", \"long\", \"both\"]\n","sub_title_list = ['prcn', 'wb', 'len_pr', 'dpf', 'wr', 'sr', 'acc_pr', 'sum_pr', 'min_pr', 'liqd', 'acc_mdd', 'sum_mdd']\n","space_ = \" \" * 120\n","\n","fig = plt.figure(figsize=(24, 8))\n","plt.style.use('dark_background')\n","gs = gridspec.GridSpec(nrows=1,\n","                        ncols=3,\n","                        # height_ratios=[1, 1, 1]\n","                      )\n","# nrows, ncols, h_r = 3, 3, [1, 1, 1]\n","nrows, ncols, h_r = 3, 4, [1, 1, 1]\n","# nrows, ncols, h_r = 4, 3, [1, 1, 1, 1]\n","# if d_idx == 0:\n","# else:\n","  # nrows, ncols, h_r = 2, 2, [1, 1]\n","\n","for d_idx, (title_name, survey_res) in enumerate(zip(title_list, survey_res_list)):  \n","  inner_gs = gs[d_idx].subgridspec(nrows=nrows,\n","                        ncols=ncols,\n","                        height_ratios=h_r\n","                      )\n","  for in_idx, (data_, sub_title) in enumerate(zip(survey_res.T, sub_title_list)):\n","    plt.subplot(inner_gs[in_idx])\n","    data = data_.ravel()\n","    valid_idx = ~np.isnan(data)\n","    if np.sum(valid_idx) > 0:\n","      if type(val_list[0]) == str:\n","        x, y = np.arange(len(val_list))[valid_idx], data[valid_idx]\n","      else:\n","        x, y = val_list[valid_idx], data[valid_idx]\n","      plt.plot(x, y)  # 앞에서부터 len(result) 만큼만    \n","      plt.title(sub_title + '_{:.2f}'.format(x[np.argmax(y)]))\n","    else:\n","      plt.title(sub_title)\n","\n","plt.suptitle(space_.join(title_list))\n","plt.show()"],"metadata":{"id":"oE5zkT75Beiy"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"EJ4f-3Zf4ImT"},"source":["### backtrader validation"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"pbYUlJl34ImU"},"outputs":[],"source":["# ------ open validation ------ #\n","long_open_ = res_df['long_open_{}'.format(config.selection_id)].to_numpy()\n","long_open_ts = list(map(lambda x : str(x), res_df.index[long_open_ == 1]))  "]},{"cell_type":"code","execution_count":null,"metadata":{"id":"wyYMYcxx4ImV"},"outputs":[],"source":["long_index = open_info_df.side == 'BUY'\n","\n","for ts in res_df.index[open_info_df.index[long_index]]:\n","  print(ts)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"BPI-9QX74ImW"},"outputs":[],"source":["trade_log_name = \"ETHUSDT_1650120909.pkl\"\n","trade_log_dir_path = \"./trade_log/0405_wave_trader_realterm\"\n","\n","with open(os.path.join(trade_log_dir_path, trade_log_name), 'rb') as f:\n","  trade_log = pickle.load(f)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"FMXhzaTK4ImX"},"outputs":[],"source":["trade_log"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"DiTKuq9T4ImY"},"outputs":[],"source":["# 1. ts 에 pair 된 en_p, ex_p 만 비교하면 될 것\n","#   -> open_idx, en_idx, ex_idx 조회하면 될 것\n","\n","pos_side = \"BUY\" # SELL BUY\n","val_obj = short_obj if pos_side == \"SELL\" else long_obj\n","\n","# ------ get idep trade_info ------ #\n","en_ts = list(map(lambda x : str(x), res_df.index[val_obj[2].astype(int).ravel()])) \n","ex_ts = list(map(lambda x : str(x), res_df.index[val_obj[3].astype(int).ravel()])) \n","en_p = val_obj[0].ravel()\n","ex_p = val_obj[1].ravel()\n","\n","# ------ execute ts comparison ------ #\n","logged_en_ts = [k for k, v in trade_log.items() if 'entry' in v if pos_side in v]\n","\n","lacked_ts = [ts for ts in en_ts if not ts in logged_en_ts]   # trade_log 에 없는 거래\n","added_ts = [ts for ts in logged_en_ts if not ts in en_ts]    # trade_log 에만 있는 거래\n","\n","print(lacked_ts)\n","print(added_ts)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"VnTmGTJI4ImZ"},"outputs":[],"source":["# ------ check added_ts ------ #\n","keys = list(trade_log.keys())\n","\n","for k_i in range(len(keys)):\n","  if keys[k_i] in added_ts:\n","    # print(trade_log[keys[k_i]])\n","    # print(trade_log[keys[k_i + 1]])\n","    print(keys[k_i], trade_log[keys[k_i]])\n","    print(keys[k_i + 1], trade_log[keys[k_i + 1]])"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Vn5x7mcP4ImZ"},"outputs":[],"source":["# ------ price sync_check ------ #\n","accept_price_gap = 0.1\n","for i in range(len(en_ts)):\n","  try:\n","    print(en_ts[i], trade_log[en_ts[i]][0] - en_p[i])\n","    # print(trade_log[str(ex_ts[i])])\n","    # print(ex_ts[i], trade_log[ex_ts[i]][0] - ex_p[i])\n","    print(ex_ts[i])\n","    print()\n","\n","  except Exception as e:\n","    print(e)\n"]},{"cell_type":"markdown","metadata":{"id":"1GVZ03zDyU2N"},"source":["### legacy"]},{"cell_type":"markdown","metadata":{"id":"IWO7KkqltMFt"},"source":["#### main_functions"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"MY1csdNRLGsk"},"outputs":[],"source":["def get_open_info_df(ep_loc_v2, res_df, np_timeidx, ID_list, config_list, id_idx_list):\n","  start_0 = time.time()\n","  # ------ get mr_res, zone_arr ------ #\n","  short_mr_res_obj = np.array([ep_loc_v2(res_df, config_, np_timeidx, show_detail=True, ep_loc_side=OrderSide.SELL) for config_ in config_list])\n","  long_mr_res_obj = np.array([ep_loc_v2(res_df, config_, np_timeidx, show_detail=True, ep_loc_side=OrderSide.BUY) for config_ in config_list])\n","  short_open_idx_list = [np.where(res_df['short_open_{}'.format(id)].to_numpy() * mr_res)[0] for id, mr_res in zip(ID_list, short_mr_res_obj[:, 0].astype(np.float64))]   # \"point * mr_Res\"\n","  long_open_idx_list = [np.where(res_df['long_open_{}'.format(id)].to_numpy() * mr_res)[0] for id, mr_res in zip(ID_list, long_mr_res_obj[:, 0].astype(np.float64))]  # zip 으로 zone (str) 과 묶어서 dtype 변경됨\n","\n","  # ------ open_info_arr ------ #\n","  short_side_list = [np.full(len(list_), OrderSide.SELL) for list_ in short_open_idx_list]\n","  long_side_list = [np.full(len(list_), OrderSide.BUY) for list_ in long_open_idx_list]\n","\n","  short_zone_list = [zone_res[short_open_idx] for zone_res, short_open_idx in zip(short_mr_res_obj[:, 1], short_open_idx_list)]\n","  long_zone_list = [zone_res[long_open_idx] for zone_res, long_open_idx in zip(long_mr_res_obj[:, 1], long_open_idx_list)]\n","\n","  short_id_list = [np.full(len(list_), id) for id, list_ in zip(ID_list, short_open_idx_list)]\n","  long_id_list = [np.full(len(list_), id) for id, list_ in zip(ID_list, long_open_idx_list)]\n","\n","  selected_id_idx = np.arange(len(id_idx_list))\n","  short_id_idx_list = [np.full(len(list_), id) for id, list_ in zip(selected_id_idx, short_open_idx_list)]\n","  long_id_idx_list = [np.full(len(list_), id) for id, list_ in zip(selected_id_idx, long_open_idx_list)]\n","\n","  # ------ get open_info_df ------ #\n","  #   series 만들어서 short / long 끼리 합치고 둘이 합치고, 중복은 우선 순위 정해서 제거\n","  short_open_df_list = [pd.DataFrame(index=index_, data=np.vstack((data_)).T, columns=['side', 'zone', 'id', 'id_idx']) for index_, data_ in zip(short_open_idx_list, zip(short_side_list, short_zone_list, short_id_list, short_id_idx_list))]\n","  long_open_df_list = [pd.DataFrame(index=index_, data=np.vstack((data_)).T, columns=['side', 'zone', 'id', 'id_idx']) for index_, data_ in zip(long_open_idx_list, zip(long_side_list, long_zone_list, long_id_list, long_id_idx_list))]\n","\n","  open_info_df = pd.concat(short_open_df_list + long_open_df_list)\n","  # ------ sorting + unique ------ #\n","  open_info_df.sort_index(inplace=True)\n","  # print(len(open_info_df))\n","  # print(len(open_info_df))\n","  # open_info_df.head()\n","  print(\"get_open_info_df elapsed time :\", time.time() - start_0)\n","  return open_info_df[~open_info_df.index.duplicated(keep='first')]  # 먼저 순서를 우선으로 지정  "]},{"cell_type":"code","execution_count":null,"metadata":{"id":"eiQ36_SLLE3w"},"outputs":[],"source":["def get_res_v5(res_df, open_info_df, ohlc_list, config_list, np_timeidx, funcs, inversion=False, test_ratio=0.3, plot_is=True, signi=False):\n","  # ------------ make open_info_list ------------ #\n","  open_idx = open_info_df.index.to_numpy()\n","  len_df = len(res_df)\n","  s_idx = (open_idx < int(len_df * (1 - test_ratio))) == plot_is\n","  s_open_info_df = open_info_df[s_idx]\n","  s_open_idx = open_idx[s_idx]\n","\n","  open_info_list = [s_open_info_df[col_].to_numpy() for col_ in s_open_info_df.columns]\n","  side_arr, zone_arr, id_arr, id_idx_arr = open_info_list\n","\n","  # ------------ get paired_res ------------ #\n","  start_0 = time.time()\n","  paired_res = en_ex_pairing_v5(res_df, s_open_idx, open_info_list, ohlc_list, config_list, np_timeidx, funcs)\n","  # valid_openi_arr, pair_idx_arr, pair_price_arr, lvrg_arr, fee_arr, tpout_arr = paired_res\n","  print(\"en_ex_pairing elapsed time :\", time.time() - start_0)  #  0.37 --> 0.3660471439361572 --> 0.21(lesser if)\n","\n","  # ------------ idep_plot ------------ #\n","  start_0 = time.time()\n","  high, low = ohlc_list[1:3]\n","  res = idep_plot_v13(res_df, len_df, config_list[0], high, low, s_open_idx, side_arr, paired_res, inversion=inversion, sample_ratio=1 - test_ratio, signi=signi)\n","  print(\"idep_plot elapsed time :\", time.time() - start_0)   # 1.40452 (v6) 1.4311 (v5)\n","\n","  return res"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"8LiKwfiJ4bvM"},"outputs":[],"source":["def plot_info_v6(gs, gs_idx, sample_len, tr, prcn, rc, bars_in, pr, total_pr, cum_pr, liqd, leverage, title_position, fontsize):\n","  try:\n","    plt.subplot(gs[gs_idx])\n","    idep_res_obj = get_res_info_nb_v2(sample_len, pr, total_pr, cum_pr, liqd)\n","    plt.plot(cum_pr)\n","    plt.plot(idep_res_obj[-1], color='gold')\n","    if sample_len is not None:\n","      plt.axvline(sample_len, alpha=1., linestyle='--', color='#ffeb3b')\n","    # title_str = \"prcn : {:.3f} rc : {:.3f}\\n len_pr : {} dpf : {:.3f}\\n wr : {:.3f} sr : {:.3f}\\n acc_pr : {:.3f} sum_pr : {:.3f}\\n\" +\\\n","    #           \"min_pr : {:.3f} liqd : {:.3f}\\n acc_mdd : -{:.3f} sum_mdd : -{:.3f}\\n leverage {}\"\n","    # title_str = \"tr : {:.3f}\\n prcn : {:.3f}\\n rc : {:.3f}\\n len_pr : {}\\n dpf : {:.3f}\\n wr : {:.3f}\\n sr : {:.3f}\\n acc_pr : {:.3f}\\n sum_pr : {:.3f}\\n\" +\\\n","    #           \"min_pr : {:.3f}\\n liqd : {:.3f}\\n acc_mdd : -{:.3f}\\n sum_mdd : -{:.3f}\\n leverage {}\"\n","    title_str = \"tr : {:.3f}\\n prcn : {:.3f}\\n wave_bias : {:.3f}\\n bars_in : {:.3f}\\n len_pr : {}\\n dpf : {:.3f}\\n wr : {:.3f}\\n sr : {:.3f}\\n acc_pr : {:.3f}\\n sum_pr : {:.3f}\\n\" +\\\n","              \"min_pr : {:.3f}\\n liqd : {:.3f}\\n acc_mdd : -{:.3f}\\n sum_mdd : -{:.3f}\\n leverage {}\"\n","    plt.title(title_str.format(tr, prcn, rc, bars_in, *idep_res_obj[:-1], leverage), position=title_position, fontsize=fontsize)\n","  except Exception as e:\n","    print(\"error in plot_info :\", e)\n","\n","  return gs_idx + 1"]},{"cell_type":"code","source":["def ffill_line(line_, idx_):\n","  len_line = len(line_)\n","  total_en_idx = np.zeros(len_line)\n","  total_en_idx[idx_] = 1\n","  idx_line_ = np.where(total_en_idx, line_, np.nan)\n","  idx_line = pd.Series(idx_line_).ffill().to_numpy()\n","\n","  return idx_line\n","\n","def get_wave_bias_v2(res_df, config, high, low, len_df, short_obj, long_obj):\n","  \n","  short_op_idx = short_obj[-1].astype(int)\n","  short_en_idx = short_obj[2].astype(int)\n","  short_en_tp1 = ffill_line(res_df['short_wave_1_{}'.format(config.selection_id)].to_numpy(), short_op_idx)   # en_idx 에 sync 된 open_idx 를 사용해야함\n","  short_en_out0 = ffill_line(res_df['short_wave_0_{}'.format(config.selection_id)].to_numpy(), short_op_idx)\n","\n","  long_op_idx = long_obj[-1].astype(int)\n","  long_en_idx = long_obj[2].astype(int)\n","  long_en_tp1 = ffill_line(res_df['long_wave_1_{}'.format(config.selection_id)].to_numpy(), long_op_idx)\n","  long_en_out0 = ffill_line(res_df['long_wave_0_{}'.format(config.selection_id)].to_numpy(), long_op_idx)\n","\n","  bias_info_tick = config.tr_set.bias_info_tick\n","\n","  # 1. min 에 초점을 맞추는 거니까, touch 없을시 len_df 로 설정\n","  # 2. future_data 사용이니까, shift(-bias_info_tick) 설정\n","  # 3. entry 다음 idx 부터 -> tp & out 체결 logic 이 현재 entry_idx 부터 되어있어서 취소\n","  len_df_range = np.arange(len_df)\n","  last_idx = len_df - 1\n","  shift_range = bias_info_tick - 1  # entry_idx 까지 포함해서 wave_bias check\n","  short_en_tp1_touch_idx = pd.Series(np.where(low <= short_en_tp1, len_df_range, last_idx)).rolling(bias_info_tick, min_periods=1).min().shift(-shift_range).to_numpy()[short_en_idx]  \n","  short_en_out0_touch_idx = pd.Series(np.where(high >= short_en_out0, len_df_range, last_idx)).rolling(bias_info_tick, min_periods=1).min().shift(-shift_range).to_numpy()[short_en_idx]\n","\n","  long_en_tp1_touch_idx = pd.Series(np.where(high >= long_en_tp1, len_df_range, last_idx)).rolling(bias_info_tick, min_periods=1).min().shift(-shift_range).to_numpy()[long_en_idx]\n","  long_en_out0_touch_idx = pd.Series(np.where(low <= long_en_out0, len_df_range, last_idx)).rolling(bias_info_tick, min_periods=1).min().shift(-shift_range).to_numpy()[long_en_idx]\n","\n","  short_true_bias_idx = short_en_tp1_touch_idx < short_en_out0_touch_idx  # true_bias 의 조건\n","  long_true_bias_idx = long_en_tp1_touch_idx < long_en_out0_touch_idx\n","\n","  short_false_bias_idx = short_en_tp1_touch_idx >= short_en_out0_touch_idx  # false_bias 의 조건\n","  long_false_bias_idx = long_en_tp1_touch_idx >= long_en_out0_touch_idx\n","\n","  # return short_true_bias_idx.ravel(), short_false_bias_idx.ravel(), long_true_bias_idx.ravel(), long_false_bias_idx.ravel()\n","  return short_true_bias_idx, short_false_bias_idx, long_true_bias_idx, long_false_bias_idx, short_en_tp1[short_en_idx], short_en_out0[short_en_idx], long_en_tp1[long_en_idx], long_en_out0[long_en_idx]\n","\n","  \n","def wave_bias(true_idx, false_idx):  # 정확하게 하려고, true & false 로 기준함\n","    true_sum = np.sum(true_idx)\n","    false_sum = np.sum(false_idx)\n","    return true_sum / (true_sum + false_sum)"],"metadata":{"id":"aFpEbTaECnGW"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def get_pr_v4(open_side, h, l, obj, tpout, lvrg, fee, p_ranges, p_qty_ratio, inversion=False):  # --> 여기서 사용하는 ex_p = ex_p\n","\n","    en_p = obj[0]\n","    # ex_p = obj[1]\n","    tp, out = np.split(tpout, 2, axis=1)\n","    len_p = len(p_ranges)\n","    en_ps, tps, outs, lvrgs, fees = [np.tile(arr_, (1, len_p)) for arr_ in [en_p, tp, out, lvrg, fee]]\n","\n","    np_obj = np.array(obj).T[0]\n","    assert len(np_obj.shape) == 2\n","\n","    # iin == iout 인 경우 분리\n","    en_idx = np_obj[:, 2]\n","    ex_idx = np_obj[:, 3]\n","    equal_idx = en_idx == ex_idx\n","\n","    min_low = np.full_like(en_p, np.nan)\n","    min_low[~equal_idx] = np.array([np.min(l[int(iin + 1):int(iout + 1)]) for _, _, iin, iout in np_obj[~equal_idx, :4]]).reshape(-1, 1)  # start from iin + 1 (tp 체결을 entry_idx 부터 보지 않음)\n","    max_high = np.full_like(en_p, np.nan)\n","    max_high[~equal_idx] = np.array([np.max(h[int(iin + 1):int(iout + 1)]) for _, _, iin, iout in np_obj[~equal_idx, :4]]).reshape(-1, 1)\n","\n","    if open_side == \"SELL\":\n","        p_tps = en_ps - (en_ps - tps) * p_ranges\n","        # min_low = np.full_like(en_p, np.nan)\n","        # min_low[~equal_idx] = np.array([np.min(l[int(iin + 1):int(iout + 1)]) for _, _, iin, iout in np_obj[~equal_idx, :4]]).reshape(-1, 1)  # start from iin + 1 (tp 체결을 entry_idx 부터 보지 않음)\n","        tp_idx = (np.tile(min_low, (1, len_p)) <= p_tps) * (np.tile(max_high, (1, len_p)) <= outs)  # entry_idx 포함해서 out touch 금지 (보수적 검증)\n","    else:\n","        p_tps = en_ps + (tps - en_ps) * p_ranges\n","        # max_high = np.full_like(en_p, np.nan)\n","        # max_high[~equal_idx] = np.array([np.max(h[int(iin + 1):int(iout + 1)]) for _, _, iin, iout in np_obj[~equal_idx, :4]]).reshape(-1, 1)\n","        tp_idx = (np.tile(max_high, (1, len_p)) >= p_tps) * (np.tile(min_low, (1, len_p)) >= outs)\n","\n","    ex_ps = outs.copy()\n","    ex_ps[tp_idx] = p_tps[tp_idx]\n","\n","    if open_side == \"SELL\":\n","        if not inversion:\n","            pr = ((en_ps / ex_ps - fees - 1) * lvrgs * p_qty_ratio).sum(axis=1) + 1\n","            # ------ liquidation ------ #\n","            max_high = np.full_like(en_p, np.nan)\n","            max_high[~equal_idx] = np.array([np.max(h[int(iin):int(iout)]) for _, _, iin, iout in np_obj[~equal_idx, :4]]).reshape(-1, 1)\n","            liqd = np.nanmin((en_p / max_high - fee - 1) * lvrg + 1)\n","        else:\n","            pr = ((ex_ps / en_ps - fees - 1) * lvrgs * p_qty_ratio).sum(axis=1) + 1\n","            # ------ liquidation ------ #\n","            min_low = np.full_like(en_p, np.nan)\n","            min_low[~equal_idx] = np.array([np.min(l[int(iin):int(iout)]) for _, _, iin, iout in np_obj[~equal_idx, :4]]).reshape(-1, 1)\n","            liqd = np.nanmin((min_low / en_p - fee - 1) * lvrg + 1)\n","    else:\n","        if not inversion:\n","            pr = ((ex_ps / en_ps - fees - 1) * lvrgs * p_qty_ratio).sum(axis=1) + 1\n","            # ------ liquidation ------ #\n","            min_low = np.full_like(en_p, np.nan)\n","            min_low[~equal_idx] = np.array([np.min(l[int(iin):int(iout)]) for _, _, iin, iout in np_obj[~equal_idx, :4]]).reshape(-1, 1)\n","            liqd = np.nanmin((min_low / en_p - fee - 1) * lvrg + 1)\n","        else:\n","            pr = ((en_ps / ex_ps - fees - 1) * lvrgs * p_qty_ratio).sum(axis=1) + 1\n","            # ------ liquidation ------ #\n","            max_high = np.full_like(en_p, np.nan)\n","            max_high[~equal_idx] = np.array([np.max(h[int(iin):int(iout)]) for _, _, iin, iout in np_obj[~equal_idx, :4]]).reshape(-1, 1)\n","            liqd = np.nanmin((en_p / max_high - fee - 1) * lvrg + 1)\n","\n","    return pr.reshape(-1, 1), liqd"],"metadata":{"id":"642Dt6urKfvF"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"xafHpMLwESKf"},"outputs":[],"source":["def idep_plot_v13(res_df, len_df, config, high, low, open_idx, side_arr, paired_res, inversion=False, sample_ratio=0.7, title_position=(0.5, 0.5), fontsize=15, signi=False):\n","    if not signi:\n","        plt.style.use(['dark_background', 'fast'])\n","        fig = plt.figure(figsize=(24, 8))\n","        gs = gridspec.GridSpec(nrows=2,  # row 몇 개\n","                               ncols=3,  # col 몇 개\n","                               height_ratios=[10, 1]\n","                               # height_ratios=[10, 10, 1]\n","                               )\n","    gs_idx = 0\n","    # plt.suptitle(key)\n","    \n","    p_ranges, p_qty_ratio = literal_eval(config.tp_set.p_ranges), literal_eval(config.tp_set.p_qty_ratio)\n","    assert np.sum(p_qty_ratio) == 1.0\n","    assert len(p_ranges) == len(p_qty_ratio)\n","\n","    if sample_ratio is not None:\n","      sample_len = int(len_df * sample_ratio)\n","    else:\n","      sample_len = len_df\n","\n","    # ------ short & long data preparation ------ #\n","    # start_0 = time.time()\n","    point1_arr, valid_openi_arr, pair_idx_arr, pair_price_arr, lvrg_arr, fee_arr, tpout_arr, tr_arr = paired_res    \n","    assert len(valid_openi_arr) != 0, \"assert len(valid_openi_arr) != 0\"    \n","    short_valid_openi_idx = np.where(side_arr[valid_openi_arr] == OrderSide.SELL)[0]  # valid_openi_arr 에 대한 idx, # side_arr,\n","    long_valid_openi_idx = np.where(side_arr[valid_openi_arr] == OrderSide.BUY)[0]\n","\n","    valid_open_idx = open_idx[valid_openi_arr].reshape(-1, 1)\n","\n","    short_obj = np.hstack((pair_price_arr, pair_idx_arr, valid_open_idx))[short_valid_openi_idx]\n","    long_obj = np.hstack((pair_price_arr, pair_idx_arr, valid_open_idx))[long_valid_openi_idx]\n","    both_obj = np.vstack((short_obj, long_obj))\n","    print(\"short_obj.shape :\", short_obj.shape)\n","    print(\"long_obj.shape :\", long_obj.shape)\n","\n","    short_obj, long_obj, both_obj = [np.split(obj_, 5, axis=1) for obj_ in [short_obj, long_obj, both_obj]]\n","\n","    short_point1_arr, long_point1_arr = [point1_arr[openi_idx_].reshape(-1, 1) for openi_idx_ in [short_valid_openi_idx, long_valid_openi_idx]]\n","    short_lvrg_arr, long_lvrg_arr = [lvrg_arr[openi_idx_].reshape(-1, 1) for openi_idx_ in [short_valid_openi_idx, long_valid_openi_idx]]\n","    short_fee_arr, long_fee_arr = [fee_arr[openi_idx_].reshape(-1, 1) for openi_idx_ in [short_valid_openi_idx, long_valid_openi_idx]]\n","    short_tpout_arr, long_tpout_arr = [tpout_arr[openi_idx_] for openi_idx_ in [short_valid_openi_idx, long_valid_openi_idx]]\n","    # short_bias_arr, long_bias_arr = [bias_arr[openi_idx_] for openi_idx_ in [short_valid_openi_idx, long_valid_openi_idx]]\n","    short_tr_arr, long_tr_arr = [tr_arr[openi_idx_] for openi_idx_ in [short_valid_openi_idx, long_valid_openi_idx]]\n","    # print(\"long_bias_arr.shape :\", long_bias_arr.shape)    \n","    # print(\"elapsed time :\", time.time() - start_0)\n","\n","    short_true_bias_idx, short_false_bias_idx, long_true_bias_idx, long_false_bias_idx, short_en_tp1, short_en_out0, long_en_tp1, long_en_out0 = \\\n","    get_wave_bias_v2(res_df, config, high, low, len_df, short_obj, long_obj)\n","\n","    len_short, len_long = len(short_valid_openi_idx), len(long_valid_openi_idx)\n","\n","    # ------ plot_data ------ #\n","    try:\n","      # start_0 = time.time()      \n","      if len_short == 0:\n","        short_pr = []\n","        gs_idx += 1\n","      else:\n","        short_tr = short_tr_arr.mean()\n","        short_pr, short_liqd = get_pr_v4(OrderSide.SELL, high, low, short_obj, short_tpout_arr, short_lvrg_arr, short_fee_arr, p_ranges, p_qty_ratio, inversion)\n","        short_total_pr = to_total_pr(len_df, short_pr, short_obj[-2])\n","        short_cum_pr = np.cumprod(short_total_pr)\n","        # short_liqd = liquidation_v2(OrderSide.SELL, h, short_obj[:4], short_lvrg_arr, short_fee_arr)\n","        short_prcn, short_rc = precision(short_pr, short_true_bias_idx), wave_bias(short_true_bias_idx, short_false_bias_idx)\n","        short_trade_ticks = np.mean(short_obj[-2] - short_obj[-1])\n","        if signi:\n","          short_idep_res_obj = (short_prcn, short_rc) + get_res_info_nb_v2(sample_len, short_pr, short_total_pr, short_cum_pr, short_liqd)\n","        else:\n","          gs_idx = plot_info_v6(gs, gs_idx, sample_len, short_tr, short_prcn, short_rc, short_trade_ticks, short_pr, short_total_pr, short_cum_pr, short_liqd, short_lvrg_arr[-1], title_position, fontsize)\n","      # print(\"elapsed time :\", time.time() - start_0)\n","\n","    except Exception as e:\n","      gs_idx += 1\n","      print(\"error in short plot_data :\", e)\n","\n","    try:\n","      # start_0 = time.time()   \n","      if len_long == 0:\n","        long_pr = []\n","        gs_idx += 1\n","      else:\n","        long_tr = long_tr_arr.mean()\n","        long_pr, long_liqd = get_pr_v4(OrderSide.BUY, high, low, long_obj, long_tpout_arr, long_lvrg_arr, long_fee_arr, p_ranges, p_qty_ratio, inversion)\n","        long_total_pr = to_total_pr(len_df, long_pr, long_obj[-2])\n","        long_cum_pr = np.cumprod(long_total_pr)\n","        # long_liqd = liquidation_v2(OrderSide.BUY, l, long_obj[:4], long_lvrg_arr, long_fee_arr)\n","        long_prcn, long_rc = precision(long_pr, long_true_bias_idx), wave_bias(long_true_bias_idx, long_false_bias_idx)\n","        long_trade_ticks = np.mean(long_obj[-2] - long_obj[-1])\n","        if signi:\n","          long_idep_res_obj = (long_prcn, long_rc) + get_res_info_nb_v2(sample_len, long_pr, long_total_pr, long_cum_pr, long_liqd)\n","        else:\n","          gs_idx = plot_info_v6(gs, gs_idx, sample_len, long_tr, long_prcn, long_rc, long_trade_ticks, long_pr, long_total_pr, long_cum_pr, long_liqd, long_lvrg_arr[-1], title_position, fontsize)\n","      # print(\"elapsed time :\", time.time() - start_0)\n","    except Exception as e:\n","      gs_idx += 1\n","      print(\"error in long plot_data :\", e)\n","\n","    \n","    try:\n","      # start_0 = time.time()\n","      if len_short * len_long == 0:\n","        both_pr = []\n","        gs_idx += 1\n","      else:\n","        both_tr = (short_tr + long_tr) / 2\n","        both_pr = np.vstack((short_pr, long_pr))  # for 2d arr, obj 를 1d 로 만들지 않는 이상, pr 은 2d 유지될 것\n","        both_total_pr = to_total_pr(len_df, both_pr, both_obj[-2])\n","        both_cum_pr = np.cumprod(both_total_pr)\n","        both_liqd = min(short_liqd, long_liqd)\n","        both_true_bias_idx = np.vstack((short_true_bias_idx, long_true_bias_idx))  # vstack for 2d arr\n","        both_false_bias_idx = np.vstack((short_false_bias_idx, long_false_bias_idx))\n","        both_prcn, both_rc = precision(both_pr, both_true_bias_idx), wave_bias(both_true_bias_idx, both_false_bias_idx)\n","        both_trade_ticks = np.mean(both_obj[-2] - both_obj[-1])\n","        if signi:\n","          both_idep_res_obj = (both_prcn, both_rc) + get_res_info_nb_v2(sample_len, both_pr, both_total_pr, both_cum_pr, both_liqd)\n","        else:\n","          gs_idx = plot_info_v6(gs, gs_idx, sample_len, both_tr, both_prcn, both_rc, both_trade_ticks, both_pr, both_total_pr, both_cum_pr, both_liqd, lvrg_arr[-1], title_position, fontsize)\n","      # print(\"elapsed time :\", time.time() - start_0)\n","    except Exception as e:\n","      gs_idx += 1\n","      print(\"error in both plot_data :\", e)\n","\n","    if not signi:\n","      if len_short * len_long > 0:\n","        for obj, cum_pr in zip([short_obj, long_obj, both_obj], [short_cum_pr, long_cum_pr, both_cum_pr]):\n","          try:\n","            # start_0 = time.time()\n","            gs_idx = frq_dev_plot_v3(gs, gs_idx, len_df, sample_len, obj[-2], cum_pr[-1], fontsize)\n","            # print(\"elapsed time :\", time.time() - start_0)          \n","          except Exception as e:\n","            gs_idx += 1\n","            print(\"error in frq_dev_plot_v3 :\", e)\n","        plt.show()\n","        plt.close()\n","\n","      return short_pr, short_obj, short_lvrg_arr, short_fee_arr, short_tpout_arr, short_true_bias_idx, short_false_bias_idx, short_point1_arr, short_en_tp1, short_en_out0, \\\n","      long_pr, long_obj, long_lvrg_arr, long_fee_arr, long_tpout_arr, long_true_bias_idx, long_false_bias_idx, long_point1_arr, long_en_tp1, long_en_out0\n","        \n","    else:\n","        return [short_idep_res_obj[:-1], long_idep_res_obj[:-1], both_idep_res_obj[:-1]]"]},{"cell_type":"markdown","metadata":{"id":"EFyWTuscH8VH"},"source":["#### get paired_res function"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"qfbtFVMR01UJ"},"outputs":[],"source":["def en_ex_pairing_v5(res_df, open_idx, open_info_list, ohlc_list, config_list, np_timeidx, funcs):  # 이미 충분히 줄여놓은 idx 임\n","    side_arr, zone_arr, id_arr, id_idx_arr = open_info_list\n","    id_idx_arr = id_idx_arr.astype(int)\n","\n","    ep_out, ep_loc_point2, lvrg_set = funcs\n","\n","    point1_list, valid_openi_list, pair_idx_list, pair_price_list, lvrg_list, fee_list, tpout_list, tr_list = [[] for li in range(8)]\n","    len_df = len(res_df)\n","    len_open_idx = len(open_idx)\n","    i, open_i = 0, -1  # i for total_res_df indexing\n","\n","    while 1:\n","        # ------------ entry phase ------------ #\n","        open_i += 1  # 확인 끝났으면 조기 이탈(+1), 다음 open_idx 조사 진행\n","        if open_i >= len_open_idx:\n","            break\n","\n","        # ------ ep_loc ------ #\n","        op_idx = open_idx[open_i]  # open_i 는 i 와 별개로 운영\n","        if op_idx < i:  # i = 이전 거래 끝난후의 res_df index - \"거래 종료후 거래 시작\", '<' : 거래 종료시점 진입 가능하다는 의미\n","            continue\n","\n","        # ------ dynamic data by ID ------ #\n","        #     1. 해당 id 로 config 재할당해야함\n","        id_idx = id_idx_arr[open_i]\n","        config = config_list[id_idx]\n","        selection_id = config.selection_id\n","        open_side = side_arr[open_i]\n","\n","        side_pos = 'short' if open_side == OrderSide.SELL else 'long'\n","        tp_arr = res_df['{}_tp_{}'.format(side_pos, selection_id)].to_numpy()  # => eptpout arr_list 만들어서 꺼내 사용하면 될 것\n","        point_idxgap_arr = res_df['{}_point_idxgap_{}'.format(side_pos, selection_id)].to_numpy()\n","\n","        ep_arr = res_df['{}_ep_{}'.format(side_pos, selection_id)].to_numpy()  # Todo - while loop 내에서 to_numpy() 반복하느니, pd_indexing 이 낫지 않을까\n","        out_arr = res_df['{}_out_{}'.format(side_pos, selection_id)].to_numpy()\n","        # bias_info_arr = res_df['{}_bias_info_{}'.format(side_pos, selection_id)].to_numpy()  # ex. rolling(entry ~ end)'s high\n","        # bias_thresh_arr = res_df['{}_bias_thresh_{}'.format(side_pos, selection_id)].to_numpy()  # ex. close + dc_T20 * 0.5\n","        tr_arr = res_df['{}_tr_{}'.format(side_pos, selection_id)].to_numpy()\n","\n","        # ------ ei_k & point2 ------ #\n","        i = op_idx + 1  # open_signal 이 close_bar.shift(1) 이라고 가정하고 다음 bar 부터 체결확인한다는 의미\n","        if i >= len_df:  # res_df 의 last_index 까지 돌아야함\n","            break\n","\n","        # ------ point1 & 2's tp_j ------ #\n","        point_idxgap = point_idxgap_arr[op_idx]\n","        if np.isnan(point_idxgap):\n","            continue\n","        else:\n","            # ------ allow point2 only next to point1 ------ #\n","            open_arr = res_df['{}_open_{}'.format(side_pos, selection_id)].to_numpy()\n","            tp_j = int(op_idx - point_idxgap)\n","            if np.sum(open_arr[tp_j:op_idx]) != 0:\n","                continue\n","\n","        exec_j, ep_j, tp_j, out_j, entry_done, en_p, fee = check_eik_point2_exec_v3(res_df, config, op_idx, tp_j, len_df, open_side,\n","                                                                                 [*ohlc_list, ep_arr], ep_out, ep_loc_point2)\n","        i = exec_j\n","\n","        if not entry_done:\n","            continue\n","\n","        # ------ leverage ------ #\n","        out = out_arr[out_j]  # lvrg_set use out on out_j\n","        leverage = lvrg_set(res_df, config, open_side, en_p, out, fee)  # res_df 변수 사용됨 - 주석 처리 된 상태일뿐\n","        if leverage is None:\n","            continue\n","\n","        exit_done, cross_on = 0, 0\n","        # ------ check tpout_onexec ------ #\n","        # if not config.ep_set.static_ep and config.ep_set.entry_type == \"LIMIT\" and config.ep_set.tpout_onexec:\n","        if config.ep_set.entry_type == \"LIMIT\":\n","            if config.tp_set.tp_onexec:  # dynamic 은 tp_onexec 사용하는 의미가 없음\n","                tp_j = exec_j\n","            if config.out_set.out_onexec:  # dynamic 은 out_onexec 사용하는 의미가 없음\n","                out_j = exec_j\n","\n","        while 1:\n","            # ------------ exit phase ------------ #\n","            if not config.tp_set.static_tp:  # 앞으로 왠만하면 static 만 사용할 예정\n","                tp_j = i\n","            if not config.out_set.static_out:\n","                out_j = i\n","\n","            # ------------ out ------------ #  # out 우선 (보수적 검증)\n","            # ------ signal_out ------ #\n","            if not exit_done:\n","                exit_done, cross_on, ex_p, fee = check_market_out_exec_v2(config, res_df, np_timeidx, open_i, i, len_df, fee, open_side, cross_on, exit_done)\n","            # ------ hl_out ------ #\n","            if config.out_set.hl_out != \"None\":\n","                if not exit_done:  # and i != len_df - 1:\n","                    exit_done, ex_p, fee = check_out(config, open_i, i, out_j, len_df, fee, open_side, exit_done, [*ohlc_list, out_arr])\n","\n","            # ------------ tp ------------ #\n","            if not config.tp_set.non_tp and i != exec_j:\n","              if not exit_done:\n","                exit_done, ex_p, fee = check_limit_tp_exec(res_df, config, open_i, i, tp_j, len_df, fee, open_side, exit_done,\n","                                                           [*ohlc_list, [tp_arr]])  # 여기서는 j -> i 로 변경해야함\n","                # if config.tp_set.tp_type in ['LIMIT']:  # 'BOTH' -> 앞으로는, LIMIT 밖에 없을거라 주석처리함\n","                # if not exit_done and config.tp_set.tp_type in ['MARKET', 'BOTH']:\n","\n","            if exit_done:  # 이 phase 는 exit_phase 뒤에도 있어야할 것 - entry_done var. 사용은 안하겠지만\n","                # ------ append dynamic vars. ------ #\n","                point1_list.append(tp_j)\n","                valid_openi_list.append(open_i)  # side, zone, start_ver arr 모두 openi_list 로 접근하기 위해 open_i 를 담음\n","                pair_idx_list.append([exec_j, i])  # entry & exit (체결 기준임)\n","                pair_price_list.append([en_p, ex_p])\n","                lvrg_list.append(leverage)\n","                fee_list.append(fee)\n","                tpout_list.append([tp_arr[tp_j], out_arr[out_j]])  # for tpout_line plot_check\n","                # bias_list.append([bias_info_arr[exec_j], bias_thresh_arr[exec_j]])  # backtest 에서만 가능한 future_data 사용\n","                # bias_list.append([bias_info_arr[exec_j], tp_arr[tp_j]])  # bias_info 는 entry_idx 부터 & tp = bias_thresh\n","                tr_list.append(tr_arr[op_idx])\n","\n","                # open_i += 1  # 다음 open_idx 조사 진행\n","                break\n","\n","            # 1. 아래있으면, 체결 기준부터 tp, out 허용 -> tp 가 entry_idx 에 체결되는게 다소 염려되기는 함, 일단 진행 (그런 case 가 많지 않았으므로)\n","            # 2. 위에있으면, entry 다음 tick 부터 exit 허용\n","            i += 1\n","            if i >= len_df:  # res_df 의 last_index 까지 돌아야함\n","                break\n","\n","        if i >= len_df:  # or open_i >= len_open_idx:  # res_df 의 last_index 까지 돌아야함\n","            break\n","        else:\n","            continue\n","\n","    return np.array(point1_list), np.array(valid_openi_list), np.array(pair_idx_list), np.array(pair_price_list), np.array(lvrg_list), np.array(\n","        fee_list), np.array(tpout_list), np.array(tr_list)\n","\n","\n","def check_eik_point2_exec_v3(res_df, config, op_idx, tp_j, len_df, open_side, np_datas, ep_out, ep_loc_point2):\n","    o, h, l, c, ep_arr = np_datas\n","    ep_j = op_idx\n","    # tp_j = op_idx\n","    out_j = op_idx\n","\n","    selection_id = config.selection_id    \n","    allow_ep_in = 0 if config.ep_set.point2.use_point2 else 1\n","    entry_done = 0\n","    ep = None\n","\n","    if config.ep_set.entry_type == \"LIMIT\":\n","        fee = config.trader_set.limit_fee\n","\n","        for e_j in range(op_idx + 1, len_df):\n","            # ------ index setting for dynamic options ------ #\n","            if not config.ep_set.static_ep:\n","                ep_j = e_j  # dynamic_ep 를 위한 ep_index var.\n","                out_j = e_j  # dynamic_out 를 위한 out_index var. - 조건식이 static_ep 와 같이 있는 이유 모름 => dynamic_lvrg 로 사료됨\n","\n","            if not config.tp_set.static_tp:\n","                tp_j = e_j\n","\n","            # ------ ei_k ------ # - limit 사용하면 default 로 ei_k 가 존재해야함\n","            if ep_out(res_df, config, op_idx, e_j, tp_j, [h, l], open_side):\n","              break\n","\n","            # ------ point2 ------ #\n","            if not allow_ep_in:\n","                allow_ep_in, out_j = ep_loc_point2(res_df, config, e_j, out_j, side=OrderSide.SELL)\n","                if allow_ep_in:\n","                  if config.ep_set.point2.entry_type == \"LIMIT\":\n","                    ep_j = e_j\n","                    # print(\"e_j in point2 :\", e_j)\n","                    continue\n","\n","            # ------ check ep_exec ------ #\n","            if allow_ep_in:\n","              if config.ep_set.point2.use_point2 and config.ep_set.point2.entry_type == 'MARKET':\n","                entry_done = 1\n","                ep = c[e_j]\n","                break\n","              else:\n","                if open_side == OrderSide.SELL:\n","                    if h[e_j] >= ep_arr[ep_j]:\n","                        entry_done = 1\n","                        ep = ep_arr[ep_j]\n","                        if o[e_j] >= ep_arr[ep_j]:  # open comp 는 결국, 수익률에 얹어주는 logic (반보수) -> 사용 보류\n","                            ep = o[e_j]\n","                        break\n","                else:\n","                    if l[e_j] <= ep_arr[ep_j]:\n","                        entry_done = 1\n","                        ep = ep_arr[ep_j]\n","                        if o[e_j] <= ep_arr[ep_j]:\n","                            ep = o[e_j]\n","                        break\n","\n","    else:  # market entry\n","        e_j = op_idx + 1\n","        entry_done = 1\n","        ep = c[op_idx]\n","        fee = config.trader_set.market_fee\n","\n","    return e_j, ep_j, tp_j, out_j, entry_done, ep, fee  # 다음 start_i <-- e_j 로 변경\n","    #   e_j => 다음 phase 의 시작 index <-> ep_j : ep 의 기준 index\n","    #   ep_j, tp_j, out_j 가 return 되어야함 - exit phase 에서 이어가기 위함\n","\n","\n","def check_limit_tp_exec(res_df, config, open_i, j, tp_j, len_df, fee, open_side, exit_done, np_datas):\n","    o, h, l, c, tps = np_datas\n","    tp = None\n","    selection_id = config.selection_id\n","    len_tps = len(tps)\n","\n","    for tp_i, tp_arr in enumerate(tps):\n","        #     decay adjustment    #\n","        #     tp_j includes dynamic_j - functionalize  #\n","        try:\n","            if config.tr_set.decay_gap != \"None\":\n","                decay_share = (j - open_i) // config.tp_set.decay_term\n","                decay_remain = (j - open_i) % config.tp_set.decay_term\n","                if j != open_i and decay_remain == 0:\n","                    if open_side == OrderSide.SELL:\n","                        tp_arr[tp_j] += res_df['short_tp_gap_{}'.format(selection_id)].iloc[open_i] * config.tr_set.decay_gap * decay_share\n","                    else:\n","                        tp_arr[tp_j] -= res_df['long_tp_gap_{}'.format(selection_id)].iloc[open_i] * config.tr_set.decay_gap * decay_share\n","        except:\n","            pass\n","\n","        if open_side == OrderSide.SELL:\n","            if l[j] <= tp_arr[tp_j]:  # and partial_tp_cnt == tp_i:  # we use static tp now\n","                # if l[j] <= tp_arr[j] <= h[j]: --> 이건 잘못되었음\n","                # partial_tp_cnt += 1 --> partial_tp 보류\n","\n","                # ------ dynamic tp ------ #\n","                if tp_arr[j] != tp_arr[j - 1] and not config.tp_set.static_tp:\n","                    # tp limit 이 불가한 경우 - open 이 이미, tp 를 넘은 경우\n","                    if o[j] < tp_arr[j]:\n","                        tp = o[j]\n","                    # tp limit 이 가능한 경우 - open 이 아직, tp 를 넘지 않은 경우\n","                    else:\n","                        tp = tp_arr[j]\n","                # ------ static tp ------ #\n","                else:\n","                    #   tp limit 이 불가한 경우 - open 이 이미, tp 를 넘은 경우\n","                    if o[j] < tp_arr[tp_j]:  # static 해놓고 decay 사용하면 dynamic 이니까\n","                        if config.tr_set.decay_gap != \"None\" and decay_remain == 0:\n","                            tp = o[j]  # tp_j -> open_i 를 가리키기 때문에 decay 는 한번만 진행되는게 맞음\n","                        else:\n","                            tp = tp_arr[tp_j]\n","                    else:\n","                        tp = tp_arr[tp_j]\n","\n","                if tp_i == len_tps - 1:\n","                    exit_done = 1  # partial 을 고려해 exit_done = 1 상태는 tp_i 가 last_index 로 체결된 경우만 해당\n","\n","        else:\n","            if h[j] >= tp_arr[tp_j]:\n","                # ------ dynamic tp ------ #\n","                if tp_arr[j] != tp_arr[j - 1] and not config.tp_set.static_tp:\n","                    if o[j] > tp_arr[j]:\n","                        tp = o[j]\n","                    else:\n","                        tp = tp_arr[j]\n","\n","                # ------ static tp ------ #\n","                else:\n","                    if o[j] > tp_arr[tp_j]:\n","                        if config.tr_set.decay_gap != \"None\" and decay_remain == 0:\n","                            tp = o[j]\n","                        else:\n","                            tp = tp_arr[tp_j]\n","                    else:\n","                        tp = tp_arr[tp_j]\n","\n","                if tp_i == len_tps - 1:\n","                    exit_done = 1  # partial 을 고려해 exit_done = 1 상태는 tp_i 가 last_index 로 체결된 경우만 해당\n","\n","    if exit_done:\n","        fee += config.trader_set.limit_fee\n","\n","    return exit_done, tp, fee\n","\n","\n","def check_market_out_exec_v2(config, res_df, np_timeidx, open_i, j, len_df, fee, open_side, cross_on, exit_done):    \n","    close = res_df['close'].to_numpy()\n","    ex_p = None\n","    selection_id = config.selection_id\n","\n","    # ------ timestamp ------ #\n","    if config.out_set.tf_exit != \"None\":\n","        if np_timeidx[j] % config.out_set.tf_exit == config.out_set.tf_exit - 1 and j != open_i:\n","            exit_done = 1\n","\n","    # ------ rsi ------ # -> vectorize 가능함 => 추후 적용\n","    if config.out_set.rsi_exit:\n","        rsi_T = res_df['rsi_T'].to_numpy()\n","\n","        if open_side == OrderSide.SELL:\n","            if (rsi_T[j - 1] >= 50 - config.loc_set.point.osc_band) & (rsi_T[j] < 50 - config.loc_set.point.osc_band):\n","                exit_done = 1\n","        else:\n","            if (rsi_T[j - 1] <= 50 + config.loc_set.point.osc_band) & (rsi_T[j] > 50 + config.loc_set.point.osc_band):\n","                exit_done = 1\n","\n","    # ------ heikin_ashi ------ #\n","    # if selection_id in ['v3_3']:\n","    #     if open_side == OrderSide.SELL:\n","    #       if (ha_o[j] < ha_c[j]):# & (ha_o[j] == ha_l[j]):   # 양봉 출현\n","    #           exit_done = 1\n","    #     else:\n","    #       if (ha_o[j] > ha_c[j]):# & (ha_o[j] == ha_h[j]):  # 음봉 출현\n","    #           exit_done = 1\n","\n","    # ------------ early out ------------ #\n","    # ------ bb ------ # --> cross_on 기능은 ide latency 개선 여부에 해당되지 않음\n","    if selection_id in ['v5_2']:\n","        bb_upper_5T = res_df['bb_upper_5T'].to_numpy()\n","        bb_lower_5T = res_df['bb_lower_5T'].to_numpy()\n","\n","        if open_side == OrderSide.SELL:\n","            if close[j] < bb_lower_5T[j] < close[j - 1]:\n","                cross_on = 1\n","            if cross_on == 1 and close[j] > bb_upper_5T[j] > close[j - 1]:\n","                exit_done = 1\n","        else:\n","            if close[j] > bb_upper_5T[j] > close[j - 1]:\n","                cross_on = 1\n","            if cross_on == 1 and close[j] < bb_lower_5T[j] < close[j - 1]:\n","                exit_done = 1\n","\n","    if exit_done:\n","        ex_p = close[j]\n","        fee += config.trader_set.market_fee\n","\n","    return exit_done, cross_on, ex_p, fee\n","\n","\n","def check_out(config, open_i, j, out_j, len_df, fee, open_side, exit_done, np_datas):\n","    o, h, l, c, out_arr = np_datas\n","    ex_p = None\n","\n","    if config.out_set.hl_out:\n","        if open_side == OrderSide.SELL:\n","            if h[j] >= out_arr[out_j]:  # check out only once\n","                exit_done = 1\n","        else:\n","            if l[j] <= out_arr[out_j]:  # check out only once\n","                exit_done = 1\n","    else:  # close_out\n","        if open_side == OrderSide.SELL:\n","            if c[j] >= out_arr[out_j]:  # check out only once\n","                exit_done = 1\n","        else:\n","            if c[j] <= out_arr[out_j]:  # check out only once\n","                ex_p = c[j]\n","                exit_done = 1\n","\n","    if exit_done:\n","        if config.out_set.hl_out:\n","            ex_p = out_arr[out_j]\n","        else:\n","            ex_p = c[j]\n","\n","        if open_side == OrderSide.SELL:\n","            if o[j] >= out_arr[out_j]:\n","                ex_p = o[j]\n","        else:\n","            if o[j] <= out_arr[out_j]:\n","                ex_p = o[j]\n","\n","        fee += config.trader_set.market_fee\n","\n","    return exit_done, ex_p, fee"]},{"cell_type":"markdown","metadata":{"id":"zQ-roiifspcX"},"source":["#### ep_loc.point & zone legacy"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Js5eL87VspcX"},"outputs":[],"source":["\n","    # res_df['entry_{}'.format(selection_id)] = np.where((res_df['open'] >= res_df['cloud_bline_%s' % cb_itv]) &\n","    #                 # (res_df['close'].shift(config.loc_set.point.tf_entry * 1) <= res_df['cloud_bline_%s' % cb_itv]) &\n","    #                 (res_df['close'] < res_df['cloud_bline_%s' % cb_itv])\n","    #                 , res_df['entry_{}'.format(selection_id)] - 1, res_df['entry_{}'.format(selection_id)])\n","\n","    # res_df['entry_{}'.format(selection_id)] = np.where((res_df['open'] >= res_df['bb_lower_1m']) &\n","    #                 # (res_df['close'].shift(config.loc_set.point.tf_entry * 1) <= res_df['bb_lower_1m']) &\n","    #                 (res_df['close'] < res_df['bb_lower_1m'])\n","    #                 , res_df['entry_{}'.format(selection_id)] - 1, res_df['entry_{}'.format(selection_id)])\n","\n","    # res_df['entry_{}'.format(selection_id)] = np.where((res_df['open'] <= res_df['cloud_bline_%s' % cb_itv]) &\n","    #                   # (res_df['close'].shift(config.loc_set.point.tf_entry * 1) >= res_df['cloud_bline_%s' % cb_itv]) &\n","    #                   (res_df['close'] > res_df['cloud_bline_%s' % cb_itv])\n","    #                 , res_df['entry_{}'.format(selection_id)] + 1, res_df['entry_{}'.format(selection_id)])\n","\n","    # res_df['entry_{}'.format(selection_id)] = np.where((res_df['open'] <= res_df['bb_upper_1m']) &\n","    #                   # (res_df['close'].shift(config.loc_set.point.tf_entry * 1) >= res_df['bb_upper_1m']) &\n","    #                   (res_df['close'] > res_df['bb_upper_1m'])\n","    #                 , res_df['entry_{}'.format(selection_id)] + 1, res_df['entry_{}'.format(selection_id)])\n","\n","\n","    \n","   # --------------- ema --------------- #   \n","  # res_df['ema5_1m'] = ema(res_df['close'], 5).shift(1)\n","\n","  #   # --------------- cloud bline --------------- #   \n","  # res_df['cloud_bline_1m'] = cloud_bline(res_df, 26).shift(1)\n","  \n","    #       stochastic      #\n","  # res_df['stoch'] = stoch(res_df, 5, 3, 3)\n","\n","    #       fisher      #\n","  # res_df['fisher30'] = fisher(res_df, 30)\n","  # res_df['fisher60'] = fisher(res_df, 60)\n","  # res_df['fisher120'] = fisher(res_df, 120)\n","\n","    #       cctbbo      #\n","  # res_df['cctbbo'], _ = cct_bbo(res_df, 21, 13)\n","\n","    #       ema_roc      #\n","  # res_df['ema_roc'] = ema_roc(res_df['close'], 13, 9)\n","\n","\n","   # ------------------------------ htf data ------------------------------ #    \n","\n","  #             Todo              #\n","  # htf_df = pd.read_excel(date_path2 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","  # htf_df = pd.read_excel(date_path3 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","  # # htf_df = pd.read_excel(date_path4 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","  # # # htf_df = pd.read_excel(date_path5 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","  # # # # # # htf_df = pd.read_excel(date_path6 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","\n","  # # ---- htf index slicing ---- #\n","  # htf_df = htf_df.loc[:res_df.index[-1]]\n","  \n","  # print(\"res_df.index[-1] :\", res_df.index[-1])\n","  # print(\"htf_df.index[-1] :\", htf_df.index[-1])\n","\n","  # res_df = dc_line(res_df, htf_df, '5m')\n","  # res_df = dc_level(res_df, '5m', 1)\n","\n","\n","  # # # if \"sma4\" in res_df.columns:\n","  # # #   res_df.drop(\"sma4\", axis=1, inplace=1)\n","\n","  # # htf_df['sma'] = htf_df['close'].rolling(60).mean()\n","  # # res_df = res_df.join(pd.DataFrame(index=res_df.index, data=to_lower_tf_v2(res_df, htf_df, [-1]), columns=['sma_30m']))\n","  \n","  # htf_df['stoch'] = stoch(htf_df, 13, 3, 3)\n","  # res_df = res_df.join(pd.DataFrame(index=res_df.index, data=to_lower_tf_v2(res_df, htf_df, [-1], backing_i=-1), columns=['stoch_5m']))\n","\n","   \n","  # fifth_df['ema'] = ema(fifth_df['close'], 5)\n","  # res_df = res_df.join(pd.DataFrame(index=res_df.index, data=to_lower_tf_v2(res_df, fifth_df, [-1]), columns=['ema5']))\n","\n","        # ------------------------------------ short ------------------------------------ # \n","\n","        # --------- by sar --------- # \n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_3m'].iloc[i] == 0:\n","        #   mr_score += 1\n","\n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_5m'].iloc[i] == 0:\n","        #   mr_score += 1          \n","\n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_15m'].iloc[i] == 0:\n","        #   mr_score += 1\n","\n","          #      dc & sar      # \n","        # mr_const_cnt += 1\n","        # # if res_df['dc_upper_1m'].iloc[i] <= res_df['sar_15m'].iloc[i]:\n","        # if res_df['dc_upper_3m'].iloc[i] <= res_df['sar_5m'].iloc[i]:\n","        # # if res_df['dc_upper_5m'].iloc[i] <= res_df['sar_15m'].iloc[i]:\n","        #   mr_score += 1\n","\n","        # -------------- dr scheduling -------------- #\n","        # if config.ep_set.entry_type == 'MARKET':\n","        #   mr_const_cnt += 1\n","        #   if (res_df['close'].iloc[i] - res_df['short_tp'].iloc[i]) / (res_df['short_out'].iloc[i] - res_df['close'].iloc[i]) <= config.ep_set.tr_thresh * (1 + config.ep_set.dr_error):  \n","        #     mr_score += 1\n","\n","           \n","        # ------- entry once ------- #   \n","        # prev_entry_cnt = 0\n","        # for back_i in range(i - 1, 0, -1):\n","        #   if res_df['entry'][back_i] == 1:\n","        #     break\n","\n","        #   elif res_df['entry'][back_i] == -1:\n","        #     prev_entry_cnt += 1          \n","        # # # print(\"prev_entry_cnt :\", prev_entry_cnt)\n","\n","        # mr_const_cnt += 1\n","        # # if prev_entry_cnt <= config.ep_set.entry_incycle:\n","        # # if prev_entry_cnt == config.ep_set.entry_incycle:\n","        # if prev_entry_cnt >= config.ep_set.entry_incycle:\n","        #   mr_score += 1\n","\n","        # ------- htf zoning ------- #   \n","        # mr_const_cnt += 1\n","        #   #       bb zone     #\n","        # if res_df['close'].iloc[i] < res_df['bb_lower_%s' % bbz_interval].iloc[i]:\n","        # # if res_df['close'].iloc[i] < res_df['bb_lower2_1h'].iloc[i]:\n","        # # if res_df['close'].iloc[i] < res_df['bb_base_1h'].iloc[i]:\n","\n","        #   #       cbline zone     #\n","        # # if res_df['close'].iloc[i] < res_df['cloud_bline_%s' % cb_interval].iloc[i]:\n","\n","        #   mr_score += 1\n","\n","  \n","        # ------- ben ep_in's tp done ------- #   \n","        # mr_const_cnt += 1\n","        # if res_df['low'].iloc[i] > res_df['short_tp'].iloc[i]:\n","        #   mr_score += 1\n","\n","\n","        # -------------- feature dist const. -------------- #\n","        # if initial_i < input_size:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","        # entry_input_x = min_max_scale(res_df[selected_price_colname].iloc[initial_i - input_size:initial_i].values)\n","       \n","        # re_entry_input_x = expand_dims(entry_input_x)\n","\n","        # entry_vector = model.predict(re_entry_input_x, verbose=0)\n","        # # print(test_result.shape)\n","\n","        # f_dist = vector_dist(entry_vector, selected_vector)\n","        # print(\"f_dist :\", f_dist)\n","\n","        # if f_dist < fdist_thresh:\n","          # mr_score += 1\n","\n","\n","\n","        # ------------------------------------ long ------------------------------------ # \n","          \n","\n","        # --------- by sar --------- # \n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_3m'].iloc[i] == 1:\n","        #   mr_score += 1   \n","\n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_5m'].iloc[i] == 1:\n","        #   mr_score += 1     \n","\n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_15m'].iloc[i] == 1:\n","          # mr_score += 1\n","\n","          #      dc & sar      # \n","        # mr_const_cnt += 1\n","        # # if res_df['dc_lower_1m'].iloc[i] >= res_df['sar_15m'].iloc[i]:\n","        # if res_df['dc_lower_3m'].iloc[i] >= res_df['sar_5m'].iloc[i]:\n","        # # if res_df['dc_lower_5m'].iloc[i] >= res_df['sar_15m'].iloc[i]:\n","        #   mr_score += 1\n","\n","        # -------------- dr scheduling -------------- #\n","        # if config.ep_set.entry_type == \"MARKET\":\n","          # mr_const_cnt += 1        \n","          # if (res_df['long_tp'].iloc[i] - res_df['close'].iloc[i]) / (res_df['close'].iloc[i] - res_df['long_out'].iloc[i]) <= config.ep_set.tr_thresh * (1 + config.ep_set.dr_error): # 일반적으로 dr 상에서 tp 비율이 더 커짐 (tr 보다)\n","          #   mr_score += 1\n","\n","        # -------------- ep limit -------------- #    \n","        # mr_const_cnt += 1\n","        # # if (res_df['open'].iloc[i] - res_df['long_ep'].iloc[i]) / res_df['open'].iloc[i] < config.ep_set.max_eplim_pct:\n","        # if config.ep_set.min_eplim_pct < (res_df['open'].iloc[i] - res_df['long_ep'].iloc[i]) / res_df['open'].iloc[i] < config.ep_set.max_eplim_pct:\n","        # # if 0 < (res_df['open'].iloc[i] - res_df['long_ep'].iloc[i]) / res_df['open'].iloc[i] < config.ep_set.max_eplim_pct:\n","        #   # if res_df['st_gap_15m'].iloc[i] / res_df['open'].iloc[i] < 0:\n","        #   #   print(\"i, res_df['st_gap_15m'].iloc[i] :\", i, res_df['st_gap_15m'].iloc[i])\n","        #   mr_score += 1\n","\n","\n","        # -------------- entry once -------------- #    \n","        # prev_entry_cnt = 0\n","        # for back_i in range(i - 1, 0, -1):\n","        #   if res_df['entry'][back_i] == -1:\n","        #     break\n","\n","        #   elif res_df['entry'][back_i] == 1:\n","        #     prev_entry_cnt += 1\n","          \n","        # mr_const_cnt += 1\n","        # # if prev_entry_cnt <= config.ep_set.entry_incycle:\n","        # # if prev_entry_cnt == config.ep_set.entry_incycle:\n","        # if prev_entry_cnt >= config.ep_set.entry_incycle:\n","        #   mr_score += 1\n","\n","\n","        # ------- htf zoning ------- #   \n","        # mr_const_cnt += 1\n","          \n","        #   #       bb zone     #\n","        # if res_df['close'].iloc[i] > res_df['bb_upper_%s' % bbz_interval].iloc[i]:\n","        # # if res_df['close'].iloc[i] > res_df['bb_upper2_1h'].iloc[i]:\n","        # # if res_df['close'].iloc[i] > res_df['bb_base_1h'].iloc[i]:\n","        \n","        #   #       cbline zone     #\n","        # # if res_df['close'].iloc[i] > res_df['cloud_bline_%s' % cb_interval].iloc[i]:\n","\n","        #   mr_score += 1\n","\n","\n","        # ------- ben ep_in's tp done ------- #   \n","        # mr_const_cnt += 1\n","        # if res_df['high'].iloc[i] < res_df['long_tp'].iloc[i]:\n","        #   mr_score += 1\n","\n","\n","        # -------------- feature dist const. -------------- #\n","        # if initial_i < input_size:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","          \n","        # entry_input_x = min_max_scale(res_df[selected_price_colname].iloc[initial_i - input_size:initial_i].values)\n","       \n","        # re_entry_input_x = expand_dims(entry_input_x)\n","\n","        # entry_vector = model.predict(re_entry_input_x, verbose=0)\n","        # # print(test_result.shape)\n","\n","        # f_dist = vector_dist(entry_vector, selected_vector)\n","        # print(\"f_dist :\", f_dist)\n","\n","        # if f_dist < fdist_thresh:\n","          # mr_score += 1"]},{"cell_type":"markdown","metadata":{"id":"_blyFhQJUd5X"},"source":["#### dump"]},{"cell_type":"markdown","metadata":{"id":"dHFkv6Ar1ojU"},"source":["## plot_check_v2"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"FCpPCl931ojV"},"outputs":[],"source":["# res_df = wave_range_v4(res_df, 20, ltf_df=None, touch_lbperiod=50)\n","# res_df = h_candle_v4(res_df, 20, ltf_df=None, touch_lbperiod=50)\n","del np_df\n","del np_plot_params"]},{"cell_type":"code","execution_count":37,"metadata":{"id":"rMIwv1Nr1ojX","executionInfo":{"status":"ok","timestamp":1652258670601,"user_tz":-540,"elapsed":2848,"user":{"displayName":"7th June","userId":"08178289703395036410"}}},"outputs":[],"source":["# ------------------ plot_config ------------------ #\n","save_mode = 0\n","front_plot = 3    # 0 : whole, 1 : open, 2 : ep_tick, 3 : tp_tick, 4 : bias_tick\n","bias_plot = 1     # 1 : true_bias only, -1 : false_bias only, 0 : both\n","pr_descend = 1    # 1 : 큰 pr 부터, 0 : 작은 pr 부터\n","position = 1      # -1 : short 1 : long\n","\n","x_max = 500\n","x_margin_mult = 1/30\n","y_margin_mult = 1/30  # 0 \n","\n","prev_plotsize = 50 #  150 100 20\n","# post_plotsize = 60\n","post_plotsize = config.tr_set.bias_info_tick\n","\n","inversion = 0\n","hedge = 0\n","\n","# ------ show or save ------ #\n","if save_mode:\n","  plot_check_dir = current_path + \"plot_check/\" +  key.replace(\".ftr\", \"\")\n","  shutil.rmtree(plot_check_dir, ignore_errors=True)  # remove existing dir\n","  os.makedirs(plot_check_dir)\n","  print(plot_check_dir)\n","else:\n","  plot_check_dir = None\n","\n","# ------------ 한 방향에 대해 plot_check 함 (by position var.) ------------ #\n","#   obj by position  \n","if position == -1:\n","  pos_str = \"SELL\"\n","  pr_, obj_ = short_pr, short_obj\n","  arr_list = [short_point1_arr, short_lvrg_arr, short_fee_arr, short_tpout_arr, short_bias_arr, short_false_bias_arr, short_en_tp1, short_en_out0]\n","else:   # both option currently not supported\n","  pos_str = \"BUY\"\n","  pr_, obj_ = long_pr, long_obj\n","  arr_list = [long_point1_arr, long_lvrg_arr, long_fee_arr, long_tpout_arr, long_bias_arr, long_false_bias_arr, long_en_tp1, long_en_out0]\n","pr, obj, [point1_arr, lvrg_arr, fee_arr, tpout_arr, bias_arr, false_bias_arr, en_tp1, en_out0] = sort_bypr_v4(pr_, obj_, arr_list, descending=pr_descend)  # --> pr_descend 의 의미가 사라짐.. (false -> true plot 으로 이동한 것뿐)\n","\n","pr_msg = \"%s\\n {} ~ {} -> {:.5f}\\n lvrg : {}\\n fee : {:.4f}\" % (pos_str)  # = data_window, pos_str 으로 이곳에서 정의함\n","\n","# ------------------ data chunknize ------------------ #\n","np_df = res_df.to_numpy()\n","\n","# left_end_idx = obj[2] - prev_plotsize  # left_margin 기준 - entry_idx\n","left_end_idx = obj[4] - prev_plotsize  # left_margin 기준 - open_idx\n","right_end_idx = obj[3] + post_plotsize\n","invalid_left_end = np.sum(left_end_idx < 0)\n","\n","np_plot_params = np.hstack((left_end_idx, right_end_idx, pr, *obj, point1_arr, lvrg_arr, fee_arr, tpout_arr, en_tp1, en_out0))[invalid_left_end:]  # all arr should have same dimension\n","if bias_plot:\n","  if bias_plot == 1:\n","    bias_idx = bias_arr[invalid_left_end:].ravel()  # true_bias 만 plot\n","  else:\n","    bias_idx = false_bias_arr[invalid_left_end:].ravel()  # false_bias 만 plot\n","  np_plot_params = np_plot_params[bias_idx]"]},{"cell_type":"markdown","metadata":{"id":"-4CXGqEN1ojY"},"source":["### session_plot"]},{"cell_type":"code","execution_count":19,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":1443,"status":"ok","timestamp":1652257620429,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"outputId":"4aa29ff6-8116-4f0c-bd93-bb5ce5d214c6","id":"2bjxKCIh1ojZ"},"outputs":[{"output_type":"stream","name":"stderr","text":["/content/drive/My Drive/Colab Notebooks/JnQ/funcs/funcs_plot_check.py:10: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.\n","  step_col_arr = np.array(col_list)\n"]}],"source":["selection_id = config.selection_id\n","\n","# ============ make col_idx_dict config ============ #\n","nonstep_col_list = []\n","step_col_list = []\n","stepmark_col_list = []\n","data_window_col_list = []\n","\n","# ============ nonstep_col_list - add info(col, alpha, color, linewidth) ============ #\n","# nonstep_col_list.append([['close'], 1, '#ffffff', 2])\n","\n","# ============ step_col_list - add info(col, alpha, color, linewidth) ============ #\n","# ------ htf_candle ------ #\n","hc_tf1 = '5T'\n","hc_tf2 = '15T'\n","\n","step_col_list.append([['open_{}'.format(hc_tf1), 'close_{}'.format(hc_tf1)], 1, '#ffffff', 2])\n","# step_col_list.append([['open_{}'.format(hc_tf2), 'close_{}'.format(hc_tf2)], 1, '#ffffff', 4])\n","\n","# ------ resi_sup ------ #\n","# rs_tf = 'T'\n","# step_col_list.append([['resi_{}'.format(rs_tf), 'sup_{}'.format(rs_tf)], 1, '#ffeb3b', 1])\n","# step_col_list.append([['resi_out_{}'.format(rs_tf), 'sup_out_{}'.format(rs_tf)], 1, 'dodgerblue', 2])\n","\n","# ------ wave_base ------ #\n","wave_tf1 = 'T'\n","wave_period1 = 5\n","wave_tf2 = '15T'\n","wave_period2 = 5\n","\n","step_col_list.append([['dc_base_{}{}'.format(wave_tf1, wave_period1)], 1, '#5b9cf6', 1])\n","# step_col_list.append([['dc_base_{}{}'.format(wave_tf2, wave_period2)], 1, '#5b9cf6', 5])\n","\n","# step_col_list.append([['wave_low_fill_{}{}'.format(wave_tf, wave_period)], 1, '#ffeb3b', 1])\n","# step_col_list.append([['wave_high_fill_{}{}'.format(wave_tf, wave_period)], 1, '#ffeb3b', 1])\n","# step_col_list.append([['dc_upper_{}{}'.format(wave_tf, wave_period), 'dc_lower_{}{}'.format(wave_tf, wave_period)], 1, '#ffeb3b', 1])\n","\n","# ------ dc ------ #\n","dc_tf1 = '5T'\n","dc_period1 = 1\n","dc_tf2 = '15T'\n","dc_period2 = 1\n","\n","# step_col_list.append([['dc_upper_{}{}'.format(dc_tf2, dc_period2), 'dc_lower_{}{}'.format(dc_tf2, dc_period2)], 1, '#ff00ff', 4]),  # inner #ffeb3b\n","# step_col_list.append([['dc_base_{}{}'.format(dc_tf2, dc_period2)], 1, '#ffee58', 3]) # ffee58 5b9cf6\n","\n","# ------ bb ------ #\n","bb_tf1 = 'T'\n","bb_period1 = 60\n","\n","step_col_list.append([['bb_upper_{}{}'.format(bb_tf1, bb_period1), 'bb_lower_{}{}'.format(bb_tf1, bb_period1)], 1, '#ffffff', 1])\n","step_col_list.append([['bb_upper2_{}{}'.format(bb_tf1, bb_period1), 'bb_lower2_{}{}'.format(bb_tf1, bb_period1)], 1, '#ffffff', 1])\n","step_col_list.append([['bb_upper3_{}{}'.format(bb_tf1, bb_period1), 'bb_lower3_{}{}'.format(bb_tf1, bb_period1)], 1, '#ffffff', 1])\n","step_col_list.append([['bb_base_{}{}'.format(bb_tf1, bb_period1)], 1, '#00ff00', 1])\n","\n","\n","# ------ ema ------ #\n","# step_col_list.append([['ema_5T'], 1, '#03ed30', 2])\n","\n","# ============ stepmark_col_list - add info(col, alpha, color, linewidth, marker_style) ============ #\n","# stepmark_col_list.append([['sar_T'], 1, 'dodgerblue', 7])\n","\n","# ------ wave_range ------ #\n","stepmark_col_list.append([['wave_low_fill_{}{}'.format(wave_tf1, wave_period1)], 1, '#ff00ff', 7, '*'])\n","stepmark_col_list.append([['wave_high_fill_{}{}'.format(wave_tf1, wave_period1)], 1, '#00ff00', 7, '*'])\n","\n","# stepmark_col_list.append([['wave_low_fill_{}{}'.format(wave_tf2, wave_period2)], 1, '#e91e63', 10, '*'])\n","# stepmark_col_list.append([['wave_high_fill_{}{}'.format(wave_tf2, wave_period2)], 1, '#2962ff', 10, '*'])\n","  \n","stepmark_col_list.append([['wave_co_marker_{}{}'.format(wave_tf1, wave_period1)], 1, '#00ff00', 5, 'o'])\n","stepmark_col_list.append([['wave_cu_marker_{}{}'.format(wave_tf1, wave_period1)], 1, '#ff00ff', 5, 'o'])\n","\n","# ============ data_window_col_list ============ #\n","# ------ wrr ------ #\n","# data_window_col_list.append([['cu_wrr_{}{}'.format(wave_tf1, wave_period1)], 'cu_wrr_{}{}'.format(wave_tf1, wave_period1)])\n","# data_window_col_list.append([['co_wrr_{}{}'.format(wave_tf1, wave_period1)], 'co_wrr_{}{}'.format(wave_tf1, wave_period1)])\n","data_window_col_list.append([['cu_wrr_21_{}{}'.format(wave_tf1, wave_period1)], 'cu_wrr_21_{}{}'.format(wave_tf1, wave_period1)])\n","data_window_col_list.append([['cu_wrr_32_{}{}'.format(wave_tf1, wave_period1)], 'cu_wrr_32_{}{}'.format(wave_tf1, wave_period1)])\n","data_window_col_list.append([['co_wrr_21_{}{}'.format(wave_tf1, wave_period1)], 'co_wrr_21_{}{}'.format(wave_tf1, wave_period1)])\n","data_window_col_list.append([['co_wrr_32_{}{}'.format(wave_tf1, wave_period1)], 'co_wrr_32_{}{}'.format(wave_tf1, wave_period1)])\n","data_window_col_list.append([['short_tr_{}'.format(selection_id)], 'short_tr_{}'.format(selection_id)])\n","data_window_col_list.append([['long_tr_{}'.format(selection_id)], 'long_tr_{}'.format(selection_id)])\n","\n","\n","# ====== str to numbcol ====== #\n","nonstep_col_arr = strcol_tonumb(res_df, nonstep_col_list)\n","step_col_arr = strcol_tonumb(res_df, step_col_list)\n","stepmark_col_arr = strcol_tonumb(res_df, stepmark_col_list)\n","data_window_col_arr = strcol_tonumb(res_df, data_window_col_list)\n","\n","col_idx_dict = \\\n","{\n","  \"ohlc_col_idxs\": get_col_idxs(res_df, ['open', 'high', 'low', 'close']),\n","  \"vp_col_idxs\": get_col_idxs(res_df, ['close', 'volume']),\n","  # \"ohlc_col_idxs\": get_col_idxs(res_df, ['haopen', 'hahigh', 'halow', 'haclose']),  # heikin-ashi ver.\n","  \"nonstep_col_info\": nonstep_col_arr,\n","  \"step_col_info\": step_col_arr,\n","  \"stepmark_col_info\": stepmark_col_arr,\n","  \"data_window_col_info\": data_window_col_arr,\n","  \"ylim_col_idxs\": get_col_idxs(res_df, ['open', 'high', 'low', 'close'])  \n","}   \n","#   'wave_low_fill_{}{}'.format(wave_tf2, wave_period2), 'wave_high_fill_{}{}'.format(wave_tf2, wave_period2)\n","#   'dc_upper_H', 'dc_lower_H', 'dc_upper_15T', 'dc_lower_15T', 'short_out_{}'.format(selection_id), 'long_out_{}'.format(selection_id)\n","#   'wave_1_{}'.format(wave_tf2), 'wave_0_{}'.format(wave_tf2), 'dc_upper_15T', 'dc_lower_15T'"]},{"cell_type":"markdown","source":["#### session_plot main"],"metadata":{"id":"XfvH5ngyieS9"}},{"cell_type":"code","execution_count":38,"metadata":{"id":"OCLMABZT1ojb","colab":{"base_uri":"https://localhost:8080/","height":1000,"output_embedded_package_id":"1zlzhJegT5GxsrS4Ao0oeagZXs1TaV-y3"},"outputId":"a721ad34-68a6-48b8-941f-0060c86a9276","executionInfo":{"status":"error","timestamp":1652258755343,"user_tz":-540,"elapsed":84744,"user":{"displayName":"7th June","userId":"08178289703395036410"}}},"outputs":[{"output_type":"display_data","data":{"text/plain":"Output hidden; open in https://colab.research.google.com to view."},"metadata":{}}],"source":["_ = [plot_check_v6(np_df, config, param_zip, pr_msg, x_max, x_margin_mult, y_margin_mult, front_plot, plot_check_dir, **col_idx_dict) for param_zip in zip(np_plot_params, np_plot_params[::-1])]"]},{"cell_type":"markdown","source":["### whole_plot"],"metadata":{"id":"sZAYhcdoXnm4"}},{"cell_type":"code","source":["s_id = config.selection_id\n","\n","# ------------ make col_idx_dict config ------------ #\n","nonstep_col_list = []\n","step_col_list = []\n","stepmark_col_list = []\n","\n","# ============ nonstep_col_list - add info(col, alpha, color, linewidth) ============ #\n","# nonstep_col_list.append([['close'], 1, '#ffffff', 2])\n","\n","# ============ step_col_list - add info(col, alpha, color, linewidth) ============ #\n","# ------ htf_candle ------ #\n","hc_tf1 = '15T'\n","hc_tf2 = 'H'\n","hc_tf3 = '4H'\n","\n","step_col_list.append([['open_{}'.format(hc_tf1), 'close_{}'.format(hc_tf1)], 1, '#ffffff', 1])\n","step_col_list.append([['open_{}'.format(hc_tf2), 'close_{}'.format(hc_tf2)], 1, '#ffffff', 2])\n","# step_col_list.append([['open_{}'.format(hc_tf3), 'close_{}'.format(hc_tf3)], 1, '#ffffff', 4])\n","\n","# ------ resi_sup ------ #\n","# rs_tf = 'T'\n","# step_col_list.append([['resi_{}'.format(rs_tf), 'sup_{}'.format(rs_tf)], 1, '#ffeb3b', 1])\n","# step_col_list.append([['resi_out_{}'.format(rs_tf), 'sup_out_{}'.format(rs_tf)], 1, 'dodgerblue', 2])\n","\n","# ------ wave_range ------ #\n","wave_tf1 = config_list[0].tr_set.p1_itv1\n","wave_period1, wave_period2 = config_list[0].tr_set.p1_period1, config_list[0].tr_set.p1_period2\n","\n","# step_col_list.append([['dc_upper_{}{}'.format(wave_tf1, wave_period1), 'dc_lower_{}{}'.format(wave_tf1, wave_period1)], 1, '#ffeb3b', 1])\n","# step_col_list.append([['dc_upper_{}{}'.format(wave_tf1, wave_period2), 'dc_lower_{}{}'.format(wave_tf1, wave_period2)], 1, '#ffeb3b', 1])\n","\n","# step_col_list.append([['dc_upper_{}{}'.format(wave_tf2, wave_period2), 'dc_lower_{}{}'.format(wave_tf2, wave_period2)], 1, '#e65100', 2])\n","\n","# ------ dc ------ #\n","dc_tf1 = '5T'\n","dc_period1 = 20\n","dc_tf2 = 'H'\n","dc_period2 = 20\n","# step_col_list.append([['dc_upper_{}{}'.format(dc_tf1, dc_period1), 'dc_lower_{}{}'.format(dc_tf1, dc_period1)], 1, '#ffeb3b', 1]),  # inner\n","# step_col_list.append([['dc_base_{}{}'.format(dc_tf1, dc_period1)], 1, '#5b9cf6', 1])\n","step_col_list.append([['dc_upper_{}{}'.format(dc_tf2, dc_period2), 'dc_lower_{}{}'.format(dc_tf2, dc_period2)], 1, '#ff00ff', 4]),  # inner\n","step_col_list.append([['dc_base_{}{}'.format(dc_tf2, dc_period2)], 1, '#5b9cf6', 4])\n","\n","# ------ bb ------ #\n","bb_tf1 = 'T'\n","bb_period1 = 20\n","\n","# step_col_list.append([['bb_upper_{}{}'.format(bb_tf1, bb_period1), 'bb_lower_{}{}'.format(bb_tf1, bb_period1)], 1, '#ffffff', 1])\n","# step_col_list.append([['bb_base_{}{}'.format(bb_tf1, bb_period1)], 1, '#00ff00', 1])\n","\n","# step_col_list.append([['bb_upper_{}'.format(tf2), 'bb_lower_{}'.format(tf2)], 1, '#e91e63', 4])\n","\n","# ------ ema ------ #\n","# step_col_list.append([['ema_5T'], 1, '#03ed30', 2])\n","\n","# ============ stepmark_col_list - add info(col, alpha, color, linewidth) ============ #\n","# stepmark_col_list.append([['sar_T'], 1, 'dodgerblue', 7])\n","\n","\n","# ============ str to numbcol ============ #\n","nonstep_col_arr = strcol_tonumb(res_df, nonstep_col_list)\n","step_col_arr = strcol_tonumb(res_df, step_col_list)\n","stepmark_col_arr = strcol_tonumb(res_df, stepmark_col_list)\n","\n","col_idx_dict = \\\n","{\n","  \"ohlc_col_idxs\": get_col_idxs(res_df, ['open', 'high', 'low', 'close']),\n","  \"vp_col_idxs\": get_col_idxs(res_df, ['close', 'volume']),\n","  # \"ohlc_col_idxs\": get_col_idxs(res_df, ['haopen', 'hahigh', 'halow', 'haclose']),  # heikin-ashi ver.\n","  \"nonstep_col_info\": nonstep_col_arr,\n","  \"step_col_info\": step_col_arr,\n","  \"stepmark_col_info\": stepmark_col_arr,\n","  \"ylim_col_idxs\": get_col_idxs(res_df, ['open', 'high', 'low', 'close', 'dc_upper_15T4', 'dc_lower_15T4'])  # , 'dc_upper_H', 'dc_lower_H', 'dc_upper_15T', 'dc_lower_15T', 'short_out_{}'.format(selection_id), 'long_out_{}'.format(selection_id)\n","}   # , 'wave_1_{}'.format(wave_tf2), 'wave_0_{}'.format(wave_tf2), 'dc_upper_15T', 'dc_lower_15T'"],"metadata":{"id":"jjFziVVIhgSr"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["#### whole_plot main"],"metadata":{"id":"50HXDIdJij28"}},{"cell_type":"code","source":["plot_op_idx_nums = 10\n","\n","win_idxs = (pr_ > 1).ravel()  # [-plot_op_idx_nums:]\n","selected_op_idxs = obj_[4].ravel().astype(int)  # [-plot_op_idx_nums:]\n","selected_ex_idxs = obj_[3].ravel().astype(int)  # [-plot_op_idx_nums:]\n","\n","len_idxs = len(win_idxs)\n","print(\"len_idxs :\", len_idxs)\n","\n","split_range = np.arange(plot_op_idx_nums, len_idxs, plot_op_idx_nums)\n","win_idxs_list = np.split(win_idxs, split_range, axis=0)\n","selected_op_idxs_list = np.split(selected_op_idxs, split_range, axis=0)\n","selected_ex_idxs_list = np.split(selected_ex_idxs, split_range, axis=0)"],"metadata":{"id":"-tbLsXN9eN2p"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["_ = [whole_plot_check(np_df, a, b, c, plot_check_dir=None, **col_idx_dict) for a, b, c in zip(win_idxs_list, selected_op_idxs_list, selected_ex_idxs_list)]"],"metadata":{"id":"FtILHO-4kVlO"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"iTW2ZuX61ojg"},"source":["### plot_funcs"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"0l6joTK_1ojh"},"outputs":[],"source":["def whole_plot_check(data, win_idxs, selected_op_idxs, selected_ex_idxs, plot_check_dir=None, **col_idx_dict):\n","  # start_0 = time.time()\n","  plt.style.use(['dark_background', 'fast'])\n","  fig = plt.figure(figsize=(30, 12))\n","  nrows, ncols = 1, 1\n","  gs = gridspec.GridSpec(nrows=nrows,  # row 부터 index 채우고 col 채우는 순서임 (gs_idx)\n","                          ncols=ncols,\n","                          #height_ratios=[31, 1]\n","                          )\n","\n","  ax = fig.add_subplot(gs[0])\n","\n","  # ------------ add_col section ------------ #\n","  a_data = data[selected_op_idxs[0]:selected_op_idxs[-1] + 1]\n","\n","  plot_op_idxs = selected_op_idxs - selected_op_idxs[0]  \n","  plot_win_op_idxs = plot_op_idxs[win_idxs]\n","  plot_loss_op_idxs = plot_op_idxs[~win_idxs]\n","\n","  plot_ex_idxs = selected_ex_idxs - selected_op_idxs[0]\n","  plot_win_ex_idxs = plot_ex_idxs[win_idxs]\n","  plot_loss_ex_idxs = plot_ex_idxs[~win_idxs]\n","\n","\n","  # ------ add cols ------ #\n","  [nonstep_col_plot(a_data[:, params[0]], *params[1:]) for params in col_idx_dict['nonstep_col_info']]\n","  [step_col_plot(a_data[:, params[0]], *params[1:]) for params in col_idx_dict['step_col_info']]\n","  [stepmark_col_plot(a_data[:, params[0]], *params[1:]) for params in col_idx_dict['stepmark_col_info']]\n","\n","  # [plt.axvline(op_idx, color='#00ff00') for op_idx in plot_win_op_idxs]\n","  # [plt.axvline(op_idx, color='#ff0000') for op_idx in plot_loss_op_idxs]\n","  [plt.axvspan(op_idx, ex_idx, alpha=0.5, color='#00ff00') for op_idx, ex_idx in zip(plot_win_op_idxs, plot_win_ex_idxs)]\n","  [plt.axvspan(op_idx, ex_idx, alpha=0.5, color='#ff0000') for op_idx, ex_idx in zip(plot_loss_op_idxs, plot_loss_ex_idxs)]\n","  \n","  plt.show()\n","\n","  if plot_check_dir is None:\n","    plt.show()\n","    print()\n","  else:\n","    fig_name = plot_check_dir + \"/whole_plot_{}.png\".format(selected_op_idxs[0])\n","    plt.savefig(fig_name)\n","    print(fig_name, \"saved !\")\n","  plt.close()\n","  # print(\"elapsed time :\", time.time() - start_0)\n","\n","  return\n","\n","def plot_check_v6(data, config, param_zip, pr_msg, x_max, x_margin_mult, y_margin_mult, front_plot, plot_check_dir=None, **col_idx_dict):\n","  # start_0 = time.time()\n","  plt.style.use(['dark_background', 'fast'])\n","  fig = plt.figure(figsize=(30, 18))\n","  nrows, ncols = 2, 2\n","  gs = gridspec.GridSpec(nrows=nrows,  # row 부터 index 채우고 col 채우는 순서임 (gs_idx)\n","                         ncols=ncols,\n","                         height_ratios=[3, 1]\n","                         )\n","  for gs_idx, params in enumerate(param_zip):\n","\n","    iin, iout, pr, ep, tp, entry_idx, exit_idx, open_idx, point1_idx, lvrg, fee, tp_line, out_line, en_tp1, en_out0 = params\n","\n","    # if exit_idx - open_idx < 50:  # temporary\n","    #   break\n","\n","    ax = fig.add_subplot(gs[gs_idx])\n","\n","    # ------------ add_col section ------------ #\n","    a_data = data[int(iin):int(iout + 1)]\n","    # a_data = data[iin:iout]\n","    # ------ candles ------ #\n","    candle_plot(a_data[:, col_idx_dict['ohlc_col_idxs']], ax, alpha=1.0, wickwidth=1.0)\n","\n","    # ------ add cols ------ #\n","    [nonstep_col_plot(a_data[:, params_[0]], *params_[1:]) for params_ in col_idx_dict['nonstep_col_info']]\n","    [step_col_plot(a_data[:, params_[0]], *params_[1:]) for params_ in col_idx_dict['step_col_info']]\n","    [stepmark_col_plot(a_data[:, params_[0]], *params_[1:]) for params_ in col_idx_dict['stepmark_col_info']]\n","\n","    # ------ ep, tp + xlim ------ #\n","    try:\n","      eptp_hvline_v5(config, ep, tp, entry_idx, exit_idx, open_idx, point1_idx, tp_line, out_line, en_tp1, en_out0,\n","                    front_plot, iin, iout, x_max, x_margin_mult, y_margin_mult, a_data, **col_idx_dict)\n","    except Exception as e:\n","      print(\"error in eptp_hvline_v3 :\", e)\n","\n","    #     Todo    #\n","    #     3. outer_price plot 일 경우, gs_idx + nrows 하면 됨\n","\n","    # ------ trade_info ------ #\n","    data_msg_list = [\"\\n {} : {:.3f}\".format(*params_[1:], *data[int(open_idx), params_[0]]) for params_ in col_idx_dict['data_window_col_info']]  # * for unsupported format for arr\n","    ps_msg_expand = pr_msg.format(entry_idx, exit_idx, pr, lvrg, fee) + ''.join(data_msg_list)\n","    \n","    plt.title(ps_msg_expand)\n","\n","  if plot_check_dir is None:\n","    plt.show()\n","    print()\n","  else:\n","    fig_name = plot_check_dir + \"/{}.png\".format(int(entry_idx))\n","    plt.savefig(fig_name)\n","    print(fig_name, \"saved !\")\n","  plt.close()\n","  # print(\"elapsed time :\", time.time() - start_0)\n","\n","  return\n","\n","def eptp_hvline_v5(config, en_p, ex_p, entry_idx, exit_idx, open_idx, point1_idx, tp_line, out_line, en_tp1, en_out0,\n","                   front_plot, iin, iout, x_max, x_margin_mult, y_margin_mult, a_data, **col_idx_dict):\n","  # ------ get vertical ticks ------ #\n","  entry_tick = int(entry_idx - iin)\n","  exit_tick = entry_tick + int(exit_idx - entry_idx)\n","  open_tick = entry_tick - int(entry_idx - open_idx)\n","  point1_tick = open_tick - int(open_idx - point1_idx)\n","  bias_info_tick = entry_tick + config.tr_set.bias_info_tick\n","\n","  if front_plot == 1:\n","    x_max = open_tick + 20\n","  elif front_plot == 2:\n","    x_max = entry_tick + 20 \n","  elif front_plot == 3:\n","    x_max = exit_tick + 20\n","  elif front_plot == 4:\n","    x_max = bias_info_tick + 20\n","\n","  if (iout - iin) > x_max:\n","    x_margin = x_max * x_margin_mult\n","    plt.xlim(0 - x_margin, x_max + x_margin)\n","  x0, x1 = plt.gca().get_xlim()\n","\n","  # ------------ hlines ------------ #\n","  # ------ entry & exit ------ #\n","  en_xmin = entry_tick / x1\n","  ex_xmin = exit_tick / x1\n","  plt.axhline(en_p, x0, en_xmin, linewidth=2, linestyle='--', alpha=1, color='lime')  # en_p line axhline\n","  plt.text(x0, en_p, 'en_p :\\n {:.3f} \\n epg {}'.format(en_p, config.tr_set.ep_gap), ha='right', va='center', fontweight='bold', fontsize=15)  # en_p line label\n","  plt.axhline(ex_p, ex_xmin, 1, linewidth=2, linestyle='--', alpha=1, color='lime')  # ex_p line axhline (signal 도 포괄함, 존재 의미)\n","  plt.text(x1, ex_p, 'ex_p :\\n {}'.format(ex_p), ha='left', va='center', fontweight='bold', fontsize=15)  # ex_p line label\n","\n","  # ------ tpout_line ------ #\n","  plt.axhline(tp_line, 0.05, 1, linewidth=2, linestyle='-', alpha=1, color='#00ff00')  # ep 와 gap 비교 용이하기 위해 ex_xmin -> 0.1 사용\n","  plt.text(x0, tp_line, 'tpg {}'.format(config.tr_set.tp_gap), ha='right', va='center', fontweight='bold', fontsize=15, color='#00ff00')\n","  plt.axhline(out_line, 0.05, 1, linewidth=2, linestyle='-', alpha=1, color='#ff0000')\n","  plt.text(x0, out_line, 'outg {}'.format(config.tr_set.out_gap), ha='right', va='center', fontweight='bold', fontsize=15, color='#ff0000')\n","\n","  # ------ wave_line ------ #\n","  text_x_pos = (x0 + x1) * 0.1\n","  plt.axhline(en_tp1, 0.2, 1, linewidth=2, linestyle='-', alpha=1, color='#ffffff')\n","  plt.text(text_x_pos, en_tp1, ' wave_1', ha='right', va='bottom', fontweight='bold', fontsize=15)\n","  plt.axhline(en_out0, 0.2, 1, linewidth=2, linestyle='-', alpha=1, color='#ffffff')\n","  plt.text(text_x_pos, en_out0, ' wave_0', ha='right', va='bottom', fontweight='bold', fontsize=15)\n","\n","  # ------ ylim ------ #\n","  if front_plot:\n","    y_lim_data = a_data[:x_max + 1, col_idx_dict['ylim_col_idxs']]  # +1 for including open_tick\n","  else:\n","    y_lim_data = a_data[:, col_idx_dict['ylim_col_idxs']]\n","  \n","  y_min = y_lim_data.min()\n","  y_max = y_lim_data.max()\n","  y_margin = (y_max - y_min) * y_margin_mult\n","  plt.ylim(y_min - y_margin, y_max + y_margin)\n","\n","  # ------------ vline (open_tick, entry_tick, exit_tick) ------------ #\n","  y0, y1 = plt.gca().get_ylim()\n","  l_data = a_data[:exit_tick + 1, col_idx_dict['ohlc_col_idxs'][2]]  # +1 for including exit_tick\n","  point1_ymax, open_ymax, en_ymax, ex_ymax = [(l_data[tick_] - y0) / (y1 - y0) - .01 for tick_ in [point1_tick, open_tick, entry_tick, exit_tick]]  # -.05 for margin\n","  plt.axvline(point1_tick, 0, point1_ymax, alpha=1, linewidth=2, linestyle='--', color='#ff7722')\n","  plt.axvline(open_tick, 0, open_ymax, alpha=1, linewidth=2, linestyle='--', color='#ffeb3b')  # 추후, tick 별 세부 정의가 달라질 수 있음을 고려해 multi_line 작성 유지\n","  plt.axvline(entry_tick, 0, en_ymax, alpha=1, linewidth=2, linestyle='--', color='#ffeb3b')\n","  plt.axvline(exit_tick, 0, ex_ymax, alpha=1, linewidth=2, linestyle='--', color='#ffeb3b')\n","  plt.axvline(bias_info_tick, alpha=1, linewidth=2, linestyle='-', color='#ffeb3b')\n","\n","  return"]},{"cell_type":"markdown","metadata":{"id":"8soVNGFt1ojj"},"source":["#### legacy"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"narSQRCz1ojj"},"outputs":[],"source":["_ = [plot_check_v4(np_df, config, param_zip, pr_msg, x_max, x_margin_mult, y_margin_mult, front_plot, plot_check_dir, 500, 0.07, 100, **col_idx_dict) for param_zip in zip(np_plot_params, np_plot_params[::-1])]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"kLiEIiMW1ojk"},"outputs":[],"source":["def plot_check_v4(data, config, param_zip, pr_msg, x_max, x_margin_mult, y_margin_mult, front_plot, plot_check_dir=None, vp_range=500, kde_factor=0.05, num_samples=100, **col_idx_dict):\n","  # start_0 = time.time()\n","  plt.style.use(['dark_background', 'fast'])\n","  fig = plt.figure(figsize=(30, 18))\n","  nrows, ncols = 2, 2\n","  gs = gridspec.GridSpec(nrows=nrows,  # row 부터 index 채우고 col 채우는 순서임 (gs_idx)\n","                         ncols=ncols,\n","                         height_ratios=[3, 1]\n","                         )\n","  for gs_idx, params in enumerate(param_zip):\n","    ax = fig.add_subplot(gs[gs_idx])\n","    iin, iout, pr, ep, tp, entry_idx, exit_idx, open_idx, lvrg, fee, tp_line, out_line, bias_info, bias_thresh = params\n","\n","    # ------------ add_col section ------------ #\n","    iin, iout = int(iin), int(iout)\n","    a_data = data[iin:iout]\n","    # ------ candles ------ #\n","    candle_plot(a_data[:, col_idx_dict['ohlc_col_idxs']], ax, alpha=1.0, wickwidth=1.0)\n","    \n","    # ------ add cols ------ #\n","    [nonstep_col_plot(a_data[:, params[0]], *params[1:]) for params in col_idx_dict['nonstep_col_info']]\n","    [step_col_plot(a_data[:, params[0]], *params[1:]) for params in col_idx_dict['step_col_info']]\n","    [stepmark_col_plot(a_data[:, params[0]], *params[1:]) for params in col_idx_dict['stepmark_col_info']]\n","\n","    # vp_data = data[iin - vp_range:iin, col_idx_dict['vp_col_idxs']]\n","    # vp_info = [vp_range, vp_data[:, 0], vp_data[:, 1], kde_factor, num_samples]\n","    vp_data = data[iin - vp_range:iin, col_idx_dict['vp_col_idxs']].T\n","    vp_info = [vp_range, *vp_data, kde_factor, num_samples]\n","\n","    # ------ ep, tp + xlim ------ #\n","    eptp_hvline_v4(config, ep, tp, entry_idx, exit_idx, open_idx, tp_line, out_line, bias_info, bias_thresh, \n","                   front_plot, iin, iout, x_max, x_margin_mult, y_margin_mult, a_data, vp_info, **col_idx_dict)        \n","\n","    #     Todo    #\n","    #     3. outer_price plot 일 경우, gs_idx + nrows 하면 됨\n","\n","    # ------ trade_info ------ #\n","    plt.title(pr_msg.format(entry_idx, exit_idx, pr, lvrg, fee))\n","\n","  if plot_check_dir is None:\n","    plt.show()\n","    print()\n","  else:\n","    fig_name = plot_check_dir +  \"/%s.png\" % int(entry_idx)\n","    plt.savefig(fig_name)\n","    print(fig_name, \"saved !\")\n","  plt.close()\n","  # print(\"elapsed time :\", time.time() - start_0)  \n","\n","  return\n","\n","def eptp_hvline_v4(config, en_p, ex_p, entry_idx, exit_idx, open_idx, tp_line, out_line, bias_info, bias_thresh, \n","                   front_plot, iin, iout, x_max, x_margin_mult, y_margin_mult, a_data, vp_info, **col_idx_dict):\n","  # ------ get vertical ticks ------ #\n","  entry_tick = int(entry_idx - iin)\n","  open_tick = entry_tick - int(entry_idx - open_idx)\n","  exit_tick = entry_tick + int(exit_idx - entry_idx)\n","\n","  if front_plot == 1:\n","    x_max = open_tick\n","  elif front_plot == 2:\n","    x_max = entry_tick\n","  if (iout - iin) > x_max:\n","    x_margin = x_max * x_margin_mult\n","    plt.xlim(0 - x_margin, x_max + x_margin)\n","  x0, x1 = plt.gca().get_xlim()\n","  # ------------ hlines ------------ #\n","  # ------ entry & exit ------ #\n","  en_xmin = entry_tick / x1\n","  ex_xmin = exit_tick / x1\n","  plt.axhline(en_p, x0, en_xmin, linewidth=2, linestyle='--', alpha=1, color='lime')  # en_p line axhline\n","  plt.text(x0, en_p, ' en_p :\\n {}'.format(en_p), ha='right', va='center', fontweight='bold')  # en_p line label\n","  plt.axhline(ex_p, ex_xmin, 1, linewidth=2, linestyle='--', alpha=1, color='lime')  # ex_p line axhline (signal 도 포괄함, 존재 의미)\n","  plt.text(x1, ex_p, ' ex_p :\\n {}'.format(ex_p), ha='left', va='center', fontweight='bold')  # ex_p line label\n","\n","  # ------ tpout_line ------ #\n","  plt.axhline(tp_line, 0.1, 1, linewidth=4, linestyle='-', alpha=1, color='#00ff00')  # ep 와 gap 비교 용이하기 위해 ex_xmin -> 0.1 사용\n","  plt.text(x0, tp_line, ' %s' % config.tr_set.tp_gap, ha='left', va='center', fontweight='bold')\n","  plt.axhline(out_line, 0.1, 1, linewidth=4, linestyle='-', alpha=1, color='#ff0000')\n","  plt.text(x0, out_line, ' %s' % config.tr_set.out_gap, ha='left', va='center', fontweight='bold')\n","\n","  # ------ bias_line ------ #\n","  plt.axhline(bias_info, 0.1, 1, linewidth=4, linestyle='-', alpha=1, color='dodgerblue')\n","  plt.text(x0, bias_info, ' bias_info', ha='left', va='center', fontweight='bold')\n","  plt.axhline(bias_thresh, 0.1, 1, linewidth=4, linestyle='-', alpha=1, color='#ff8400')\n","  plt.text(x0, bias_thresh, ' bias_thresh', ha='left', va='center', fontweight='bold')\n","\n","  # ------ volume profile ------ #\n","  vp_range, close, volume, kde_factor, num_samples = vp_info\n","  if iin >= vp_range:\n","    start_0 = time.time()\n","    kde = stats.gaussian_kde(close, weights=volume, bw_method=kde_factor)\n","    kdx = np.linspace(close.min(), close.max(), num_samples)\n","    kdy = kde(kdx)\n","    print(\"kde elapsed_time :\", time.time() - start_0)\n","\n","    kdy_max = kdy.max()\n","    # peaks,_ = signal.find_peaks(kdy)\n","    peaks,_ = signal.find_peaks(kdy, prominence=kdy_max * 0.3)\n","    peak_list = kdx[peaks]   # peak_list\n","    [plt.axhline(peak, linewidth=6, linestyle='-', alpha=1, color='white') for peak in peak_list]\n","    \n","    kdy_ratio = entry_tick / kdy_max # 30 / 0.0001\n","    plt.plot(kdy * kdy_ratio, kdx, color='white')\n","    # plt.plot(pky, pkx, 'bo', color='yellow')\n","\n","  # ------ ylim ------ #\n","  if front_plot:\n","    y_lim_data = a_data[:x_max + 1, col_idx_dict['ylim_col_idxs']]  # +1 for including open_tick\n","  else:\n","    y_lim_data = a_data[:, col_idx_dict['ylim_col_idxs']]\n","  y_min = y_lim_data.min()\n","  y_max = y_lim_data.max()\n","  y_margin = (y_max - y_min) * y_margin_mult\n","  # plt.ylim(y_min - y_margin, y_max + y_margin)\n","\n","  # ------------ vline (open_tick, entry_tick, exit_tick) ------------ #\n","  y0, y1 = plt.gca().get_ylim()\n","  l_data = a_data[:exit_tick + 1, col_idx_dict['ohlc_col_idxs'][2]]  # +1 for including exit_tick\n","  open_ymax, en_ymax, ex_ymax = [(l_data[tick_] - y0) / (y1 - y0) - .01 for tick_ in [open_tick, entry_tick, exit_tick]]  # -.05 for margin\n","  plt.axvline(open_tick, 0, open_ymax, alpha=1, linewidth=2, linestyle='--', color='#ffeb3b')  # 추후, tick 별 세부 정의가 달라질 수 있음을 고려해 multi_line 작성 유지\n","  plt.axvline(entry_tick, 0, en_ymax, alpha=1, linewidth=2, linestyle='--', color='#ffeb3b')\n","  plt.axvline(exit_tick, 0, ex_ymax, alpha=1, linewidth=2, linestyle='--', color='#ffeb3b')\n","\n","  return"]},{"cell_type":"markdown","source":["### dump"],"metadata":{"id":"ddL_BC24buq0"}},{"cell_type":"markdown","source":["#### whole_plot thing"],"metadata":{"id":"zgTrEWWqbwsT"}},{"cell_type":"code","source":["fig = go.Figure(data=[go.Candlestick(x=t_df.index,\n","                open=t_df.open,\n","                high=t_df.high,\n","                low=t_df.low,\n","                close=t_df.close)])\n","\n","fig.show()"],"metadata":{"id":"M4zn8wxibzAR"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["cf.go_offline()\n","init_notebook_mode()"],"metadata":{"id":"4IhBjPMobzAS"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["qf = cf.QuantFig(t_df, title=\"Apple's stock price in 2021\", name='AAPL')\n","qf.iplot()"],"metadata":{"id":"n9WZkE9wbzAS"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"zmYbP-Gc1ojs"},"source":["#### brief np_pr survey"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"82a8Km8z1ojs"},"outputs":[],"source":["# plot_pr_list[:100]\n","plt.plot(np_pr)\n","plt.axhline(1)\n","plt.show()"]},{"cell_type":"markdown","metadata":{"id":"5rdQZm_71ojv"},"source":["#### plot indi. legacy"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"u11r-dU91ojw"},"outputs":[],"source":["\n","  # ---------------------- ma ---------------------- #\n","   # --------- ema --------- #\n","  # alpha = 1\n","  # for sm_i, item in enumerate(ema_list):\n","  #   if sm_i > 0:\n","  #     lw = 5\n","  #   else:\n","  #     lw = 2\n","  #   plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#03ed30', linewidth=lw)\n","  #   alpha -= 0.2\n","\n","  #   # --------- sma --------- #\n","  # alpha = 1\n","  # for sm_i, sma in enumerate(sma_list):\n","  #   if sm_i > 0:\n","  #     lw = 5\n","  #   else:\n","  #     lw = 4\n","  #   plt.step(np.arange(len(plot_df)), plot_df[sma].values, alpha=alpha, color='#e91e63', linewidth=lw)\n","  #   alpha -= 0.2\n","\n","  \n","  # ---------------------- cb ---------------------- #\n","  # alpha = 1\n","  # for sm_i, item in enumerate(cb_list):\n","  #   if sm_i > 0:\n","  #     lw = 5\n","  #   else:\n","  #     lw = 2\n","  #   plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#5b9cf6', linewidth=lw)\n","  #   alpha -= 0.2\n","\n","\n","  \n","  # ---------------------- sar ---------------------- #\n","  # alpha = 1\n","  # markersize = 5\n","  # for sar in sar_list:\n","  #   plt.step(plot_df[sar].values, 'c*', alpha=alpha, markersize=markersize, color='dodgerblue')  # sar mic\n","  #   markersize += 1\n","  #   alpha -= 0.1\n","\n","  # plt.step(plot_df.values[:, [12]], 'co', alpha=1, markersize=7)  # sar mac\n","\n","  #               cloud               #\n","  # alpha = 0.7\n","  # for senkoua, senkoub in zip(senkoua_list, senkoub_list):\n","  #   plt.fill_between(np.arange(len(plot_df)), plot_df[senkoua].values, plot_df[senkoub].values, # ichimoku\n","  #                     where=plot_df[senkoua].values >= plot_df[senkoub].values, facecolor='g', alpha=alpha) # ichimoku\n","  #   plt.fill_between(np.arange(len(plot_df)), plot_df[senkoua].values, plot_df[senkoub].values,\n","  #                     where=plot_df[senkoua].values <= plot_df[senkoub].values, facecolor='r', alpha=alpha)  \n","  #   alpha -= 0.05\n","  \n","\n","\n","  # ---------------------- outer price indi. ---------------------- #\n","  #           macd          #\n","  # plt.subplot(312)\n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for macd in macd_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[macd].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","\n","  # plt.axhline(0, linestyle='--')\n","\n","  \n","  # #           trix          #  \n","  # # plt.subplot(313)\n","  # plt.subplot(gs[2])\n","  # alpha = 1\n","  # for trix in trix_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[trix].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","  # plt.axhline(0, linestyle='--')\n","\n","  \n","  #           fisher          #  \n","  # plt.subplot(313)\n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for fisher in fisher_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[fisher].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","    \n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","\n","  # plt.axhline(0, linestyle='--')\n","  # plt.axhline(fisher_upper, linestyle='--')\n","  # plt.axhline(fisher_lower, linestyle='--')\n","\n","  #           stoch          #  \n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for stoch_ in stoch_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[stoch_].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axhline(50, linestyle='--')\n","  # plt.axhline(stoch_upper, linestyle='--')\n","  # plt.axhline(stoch_lower, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","\n","  # ---------- cctbbo ---------- #  \n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for cctbbo in cctbbo_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[cctbbo].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axhline(50, linestyle='--')\n","  # plt.axhline(cctbbo_upper, linestyle='--')\n","  # plt.axhline(cctbbo_lower, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","\n","  # ---------- ema_roc ---------- #  \n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for emaroc in emaroc_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[emaroc].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","  # plt.axhline(0, linestyle='--')\n","  \n","  # ---------- bbw ---------- #  \n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for bbwp_ in bbwp_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[bbwp_].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","  # plt.axhline(bbwp_thresh, linestyle='--')\n","\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","\n"]},{"cell_type":"markdown","metadata":{"id":"tApzvz_gK9lR"},"source":["## legacy"]},{"cell_type":"markdown","metadata":{"id":"OJqkmkpsLCYC"},"source":["### tr_tresh calc"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"gcpo4MGd9Wm4"},"outputs":[],"source":["res_wr = 0.6\n","# tr_thresh = 1\n","# tr_thresh = ((1 - res_wr) / res_wr) ** 0.5\n","tr_thresh = ((1 - res_wr) / res_wr) + 0.01\n","# tr_thresh = 2.6\n","print(\"res_wr :\", res_wr)\n","print(\"tr_thresh :\", tr_thresh)\n","\n","\n","#   단리    #\n","trade_num = 1000\n","asset = 1 # thousand USDT\n","test_loss_gap = 0.95  # fee adjusted\n","test_pr_gap = 1 + (1 - test_loss_gap) * tr_thresh\n","\n","test_loss_cnt = trade_num * (1 - res_wr)\n","test_pr_cnt = trade_num * res_wr\n","\n","test_trade_list = [test_pr_gap] * int(test_pr_cnt) + [test_loss_gap] * int(test_loss_cnt)\n","random.shuffle(test_trade_list)\n","# print(\"len(test_trade_list) :\", len(test_trade_list))\n","print(test_trade_list[:10])\n","print()\n","\n","# print(\"%.5f\" % np.cumprod(test_trade_list)[-1])\n","for tr_thresh_ in np.arange(1, 3, 0.2):\n","  if (1 + (1 - test_loss_gap) * tr_thresh_) ** test_pr_cnt * test_loss_gap ** test_loss_cnt > 1:\n","    break\n","print(\"복리를 위한 tr_thresh_ :\", tr_thresh_)\n","# print(\"tr_thresh :\", tr_thresh)\n","print(\"np.cumprod(test_trade_list)[-1] :\", np.cumprod(test_trade_list)[-1])\n","print(\"total_pr : \", np.cumprod(test_trade_list)[-1])\n","print()\n","#   복리 tr_thresh  #\n","#   1. trade_num 에 영향 받지 않음\n","#   2. loss_gap 에 비례함\n","\n","for tr_thresh_ in np.arange(1, 3, 0.01):\n","  if ((1 - test_loss_gap) * tr_thresh_) * test_pr_cnt + (test_loss_gap - 1) * test_loss_cnt > 0:\n","    break\n","np_test_trade = np.array(test_trade_list) - 1\n","print(np_test_trade[:10])\n","# print(\"%.3f\" % )\n","print(\"단리를 위한 tr_thresh_ :\", tr_thresh_)\n","# print(\"tr_thresh :\", tr_thresh)\n","print(\"np.cumsum(np_test_trade)[-1] :\", np.cumsum(np_test_trade)[-1])\n","print(\"total_pr : \", 1 + np.cumsum(np_test_trade)[-1])\n"]}],"metadata":{"accelerator":"GPU","colab":{"collapsed_sections":["Ic1mfmwWCIBu","VdukVo5-Suzj","Bw5JibDKSuzj","Pe0QpnORSuzk","E0n53hflJbnp","MlFkpO1MSuzl","t1E_eAyPSuzm","nUs4fjVHSuzl","L7l5CTJfSuzn","x_XGJqBi8Jex","MSUY4nnku3s9","epgS5Dksu-HX","Iy76iO7gztne","x2yj2SwAXDLp","EOXQbXixiQcK","xpyP5t8Ht_pE","MuD_2vY7TI_8","mScdfR9hmjVu","xivLUsSGC4VF","sZAYhcdoXnm4","zmYbP-Gc1ojs","5rdQZm_71ojv","tApzvz_gK9lR","OJqkmkpsLCYC"],"name":"stem5_41_vec_backi2(0509_waverange_v11_2).ipynb","toc_visible":true,"provenance":[],"authorship_tag":"ABX9TyP3dLdCtVMK/JUhAHtwOur9"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}