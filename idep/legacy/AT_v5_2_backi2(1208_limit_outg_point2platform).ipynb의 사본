{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"AT_v5_2_backi2(1208_limit_outg_point2platform).ipynb","provenance":[],"collapsed_sections":["M8-EChy0VsDr","Iy76iO7gztne","Ic1mfmwWCIBu","Ci_jUnNTZbm9","t1E_eAyPSuzm"],"toc_visible":true,"authorship_tag":"ABX9TyMpCX8iABtjHaV9IiZkUe4p"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"6rmQpzEGXfCw","executionInfo":{"status":"ok","timestamp":1638944311873,"user_tz":-540,"elapsed":24645,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"5ad818fc-248c-4abe-d939-b2c429b654c2"},"source":["from google.colab import drive\n","drive.mount('/content/drive')\n","\n","import os, sys\n","\n","current_path = '/content/drive/My Drive/Colab Notebooks/JnQ/'\n","\n","os.chdir(current_path)\n","\n","nb_path = '/content/notebooks'\n","try:\n","  os.symlink('/content/drive/My Drive/Colab Notebooks/JnQ/mpl_finance', nb_path)\n","  sys.path.insert(0, nb_path)\n","except:\n","  pass"],"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"markdown","metadata":{"id":"8uqYv5StTazo"},"source":["# requirements"]},{"cell_type":"code","metadata":{"id":"9qGt60DKTZmf","executionInfo":{"status":"ok","timestamp":1638944336929,"user_tz":-540,"elapsed":6432,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}}},"source":["import mpl_finance\n","# !pip install findiff\n","\n","# import nvstrings, nvcategory, cudf\n","# import cuml\n","# import cudf\n","\n","import matplotlib.pyplot as plt\n","from matplotlib import gridspec\n","from tqdm.notebook import tqdm\n","from funcs_indicator import *\n","from funcs_for_trade import *\n","\n","import mpl_finance as mf\n","import os\n","import datetime\n","\n","import IPython\n","import IPython.display\n","import matplotlib as mpl\n","\n","import numpy as np\n","# import jax.numpy as np\n","import pandas as pd\n","import seaborn as sns\n","# import tensorflow as tf\n","\n","import pickle\n","import shutil\n","# import json\n","from easydict import EasyDict\n","\n","# from trendln import trendln\n","\n","from datetime import datetime\n","import random\n","import time\n","\n","# mpl.rcParams['figure.figsize'] = (8, 6)\n","# mpl.rcParams['axes.grid'] = False\n","\n","pd.set_option('display.max_rows', 500)\n","pd.set_option('display.max_columns', 500)\n","pd.set_option('display.width', 1000)"],"execution_count":2,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"M8-EChy0VsDr"},"source":["## cudf"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"b09qAb1sVtRP","executionInfo":{"status":"ok","timestamp":1638754008241,"user_tz":-540,"elapsed":414,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"3a824202-064a-4544-b791-ffc777bb3f9c"},"source":["# !conda install -c rapidsai-nightly -c nvidia -c numba -c conda-forge \\\n","#     cudf python=3.7 cudatoolkit=11.1 -t=$nb_path"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["usage: conda [-h] [-V] command ...\n","conda: error: unrecognized arguments: -t=/content/notebooks\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Jnz6i7ZqRnb0","executionInfo":{"status":"ok","timestamp":1638754715310,"user_tz":-540,"elapsed":413,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"207bc57b-a17a-4f67-fb26-24e46e2c6e26"},"source":["# !git clone https://github.com/rapidsai/rapidsai-csp-utils.git\n","!python rapidsai-csp-utils/colab/env-check.py"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["***********************************************************************\n","Woo! Your instance has the right kind of GPU, a Tesla P100-PCIE-16GB!\n","***********************************************************************\n","\n"]}]},{"cell_type":"code","metadata":{"id":"4sKA_9Dbg4s2"},"source":["# This will update the Colab environment and restart the kernel.  Don't run the next cell until you see the session crash.\n","!bash rapidsai-csp-utils/colab/update_gcc.sh\n","import os\n","os._exit(00)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"d1C4pNiBhYHX"},"source":["# This will install CondaColab.  This will restart your kernel one last time.  Run this cell by itself and only run the next cell once you see the session crash.\n","import condacolab\n","condacolab.install()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"iGx3ACTvZqck","executionInfo":{"status":"ok","timestamp":1638754863073,"user_tz":-540,"elapsed":414,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"e8379cc4-c325-4fe0-ac46-5fbbd7d38829"},"source":["# you can now run the rest of the cells as normal\n","import condacolab\n","condacolab.check()"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["‚ú®üç∞‚ú® Everything looks OK!\n"]}]},{"cell_type":"code","metadata":{"id":"oR8s7U8c7C28","colab":{"base_uri":"https://localhost:8080/"},"outputId":"22be2731-fae1-45fc-f310-e48f60774bb2"},"source":["# Installing RAPIDS is now 'python rapidsai-csp-utils/colab/install_rapids.py <release> <packages>'\n","# The <release> options are 'stable' and 'nightly'.  Leaving it blank or adding any other words will default to stable.\n","# The <packages> option are default blank or 'core'.  By default, we install RAPIDSAI and BlazingSQL.  The 'core' option will install only RAPIDSAI and not include BlazingSQL, \n","!python rapidsai-csp-utils/colab/install_rapids.py stable\n","import os\n","os.environ['NUMBAPRO_NVVM'] = '/usr/local/cuda/nvvm/lib64/libnvvm.so'\n","os.environ['NUMBAPRO_LIBDEVICE'] = '/usr/local/cuda/nvvm/libdevice/'\n","os.environ['CONDA_PREFIX'] = '/usr/local'"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Installing RAPIDS Stable 21.10\n","Starting the RAPIDS install on Colab.  This will take about 15 minutes.\n","Collecting package metadata (current_repodata.json): ...working... done\n","Solving environment: ...working... WARNING conda.core.solve:_add_specs(611): pinned spec cudatoolkit=11.1 conflicts with explicit specs.  Overriding pinned spec.\n","failed with initial frozen solve. Retrying with flexible solve.\n","Solving environment: ...working... WARNING conda.core.solve:_add_specs(611): pinned spec cudatoolkit=11.1 conflicts with explicit specs.  Overriding pinned spec.\n","failed with repodata from current_repodata.json, will retry with next repodata source.\n","Collecting package metadata (repodata.json): ...working... done\n"]}]},{"cell_type":"code","metadata":{"id":"kWsxi4ZpKtGt"},"source":["import shutil\n","import sys\n","\n","colab_env = \"/usr/lib\"\n","\n","rapids_path = os.path.join(current_path, \"rapidsai-csp-utils/lib\")\n","rapids_libs = os.listdir(rapids_path)\n","print(rapids_libs)\n","# break\n","\n","for lib_ in rapids_libs:\n","  try:\n","    shutil.copy(os.path.join(rapids_path, lib_), os.path.join(colab_env, lib_))\n","    sys.path.append(os.path.join(colab_env, lib_))\n","    print(\"copied to\" + os.path.join(colab_env, lib_))\n","  except Exception as e:\n","    print(e)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Iy76iO7gztne"},"source":["## move legacy files"]},{"cell_type":"code","metadata":{"id":"hMRht32Czwry"},"source":["# print()\n","cur_dir_list = os.listdir('.')\n","for f in cur_dir_list:\n","  if 'legacy' in f :\n","    # print(f)\n","    if os.path.isdir(current_path + f,):\n","      continue\n","\n","    shutil.move(current_path + f, current_path + 'legacy/' + f)\n","    print(\"moved to\" + current_path + 'legacy/' +  f)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Ic1mfmwWCIBu"},"source":["# makeset"]},{"cell_type":"markdown","metadata":{"id":"Ci_jUnNTZbm9"},"source":["## load data"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_bXyS2yrZYC6","executionInfo":{"status":"ok","timestamp":1638246127510,"user_tz":-540,"elapsed":22503,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"b24a8a66-48b1-42b5-aa79-63f5a8542bac"},"source":["interval = '1m'\n","date_path = './candlestick_concated/%s/quant_v2/' % interval\n","file_list = os.listdir(date_path)\n","print((file_list))\n","\n","interval2 = '3m'\n","date_path2 = './candlestick_concated/%s/quant_v2/' % interval2\n","file_list2 = os.listdir(date_path2)\n","print((file_list2))\n","\n","interval3 = '5m'\n","date_path3 = './candlestick_concated/%s/quant_v2/' % interval3\n","file_list3 = os.listdir(date_path3)\n","print((file_list3))\n","\n","interval4 = '15m'\n","date_path4 = './candlestick_concated/%s/quant_v2/' % interval4\n","file_list4 = os.listdir(date_path4)\n","print((file_list4))\n","\n","interval5 = '30m'\n","date_path5 = './candlestick_concated/%s/quant_v2/' % interval5\n","file_list5 = os.listdir(date_path5)\n","print((file_list5))\n","\n","interval6 = '1h'\n","date_path6 = './candlestick_concated/%s/quant_v2/' % interval6\n","file_list6 = os.listdir(date_path6)\n","print((file_list6))\n","\n","interval7 = '4h'\n","date_path7 = './candlestick_concated/%s/quant_v2/' % interval7\n","file_list7 = os.listdir(date_path7)\n","print((file_list7))\n","\n","interval8 = '1d'\n","date_path8 = './candlestick_concated/%s/quant_v2/' % interval8\n","file_list8 = os.listdir(date_path8)\n","print((file_list8))"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["['2021-05-30 ETHUSDT.xlsx', '2021-04-30 ETHUSDT.xlsx', '2021-07-03 ETHUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-10-10 ETCUSDT.xlsx', '2021-10-10 BTCUSDT.xlsx', '2021-10-10 ETHUSDT.xlsx', '2021-10-10 ADAUSDT.xlsx', '2021-10-10 XLMUSDT.xlsx', '2021-10-10 LINKUSDT.xlsx', '2021-10-10 LTCUSDT.xlsx', '2021-10-10 EOSUSDT.xlsx', '2021-10-10 XRPUSDT.xlsx', '2021-10-10 BCHUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr', '2021-10-10 ETCUSDT.ftr', '2021-10-10 BTCUSDT.ftr', '2021-10-10 ETHUSDT.ftr', '2021-10-10 ADAUSDT.ftr', '2021-10-10 XLMUSDT.ftr', '2021-10-10 LINKUSDT.ftr', '2021-10-10 LTCUSDT.ftr', '2021-10-10 EOSUSDT.ftr', '2021-10-10 XRPUSDT.ftr', '2021-10-10 BCHUSDT.ftr', '2021-11-16 EOSUSDT.ftr', '2021-11-16 LTCUSDT.ftr', '2021-11-16 LINKUSDT.ftr', '2021-11-16 XLMUSDT.ftr', '2021-11-16 ADAUSDT.ftr', '2021-11-16 ETCUSDT.ftr', '2021-11-16 BTCUSDT.ftr', '2021-11-16 ETHUSDT.ftr', '2021-11-16 BCHUSDT.ftr', '2021-11-16 XRPUSDT.ftr']\n","['2021-05-30 ETHUSDT.xlsx', '2021-04-30 ETHUSDT.xlsx', '2021-07-03 ETHUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-10-10 ETCUSDT.xlsx', '2021-10-10 BTCUSDT.xlsx', '2021-10-10 ETHUSDT.xlsx', '2021-10-10 ADAUSDT.xlsx', '2021-10-10 XLMUSDT.xlsx', '2021-10-10 LINKUSDT.xlsx', '2021-10-10 LTCUSDT.xlsx', '2021-10-10 EOSUSDT.xlsx', '2021-10-10 XRPUSDT.xlsx', '2021-10-10 BCHUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr', '2021-10-10 ETCUSDT.ftr', '2021-10-10 BTCUSDT.ftr', '2021-10-10 ETHUSDT.ftr', '2021-10-10 ADAUSDT.ftr', '2021-10-10 XLMUSDT.ftr', '2021-10-10 LINKUSDT.ftr', '2021-10-10 LTCUSDT.ftr', '2021-10-10 EOSUSDT.ftr', '2021-10-10 XRPUSDT.ftr', '2021-10-10 BCHUSDT.ftr', '2021-11-16 LINKUSDT.ftr', '2021-11-16 ADAUSDT.ftr', '2021-11-16 ETCUSDT.ftr', '2021-11-16 XLMUSDT.ftr', '2021-11-16 XRPUSDT.ftr', '2021-11-16 EOSUSDT.ftr', '2021-11-16 BTCUSDT.ftr', '2021-11-16 BCHUSDT.ftr', '2021-11-16 ETHUSDT.ftr', '2021-11-16 LTCUSDT.ftr']\n","['2021-05-30 ETHUSDT.xlsx', '2021-04-30 ETHUSDT.xlsx', '2021-07-03 ETHUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-10-10 ETCUSDT.xlsx', '2021-10-10 BTCUSDT.xlsx', '2021-10-10 ETHUSDT.xlsx', '2021-10-10 ADAUSDT.xlsx', '2021-10-10 XLMUSDT.xlsx', '2021-10-10 LINKUSDT.xlsx', '2021-10-10 LTCUSDT.xlsx', '2021-10-10 EOSUSDT.xlsx', '2021-10-10 XRPUSDT.xlsx', '2021-10-10 BCHUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr', '2021-10-10 ETCUSDT.ftr', '2021-10-10 BTCUSDT.ftr', '2021-10-10 ETHUSDT.ftr', '2021-10-10 ADAUSDT.ftr', '2021-10-10 XLMUSDT.ftr', '2021-10-10 LINKUSDT.ftr', '2021-10-10 LTCUSDT.ftr', '2021-10-10 EOSUSDT.ftr', '2021-10-10 XRPUSDT.ftr', '2021-10-10 BCHUSDT.ftr', '2021-11-16 LINKUSDT.ftr', '2021-11-16 XLMUSDT.ftr', '2021-11-16 ADAUSDT.ftr', '2021-11-16 ETCUSDT.ftr', '2021-11-16 BTCUSDT.ftr', '2021-11-16 BCHUSDT.ftr', '2021-11-16 XRPUSDT.ftr', '2021-11-16 LTCUSDT.ftr', '2021-11-16 EOSUSDT.ftr', '2021-11-16 ETHUSDT.ftr']\n","['2021-07-03 ETHUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-10-10 ETCUSDT.xlsx', '2021-10-10 BTCUSDT.xlsx', '2021-10-10 ETHUSDT.xlsx', '2021-10-10 ADAUSDT.xlsx', '2021-10-10 XLMUSDT.xlsx', '2021-10-10 LINKUSDT.xlsx', '2021-10-10 LTCUSDT.xlsx', '2021-10-10 EOSUSDT.xlsx', '2021-10-10 XRPUSDT.xlsx', '2021-10-10 BCHUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr', '2021-10-10 ETCUSDT.ftr', '2021-10-10 BTCUSDT.ftr', '2021-10-10 ETHUSDT.ftr', '2021-10-10 ADAUSDT.ftr', '2021-10-10 XLMUSDT.ftr', '2021-10-10 LINKUSDT.ftr', '2021-10-10 LTCUSDT.ftr', '2021-10-10 EOSUSDT.ftr', '2021-10-10 XRPUSDT.ftr', '2021-10-10 BCHUSDT.ftr', '2021-11-16 XLMUSDT.ftr', '2021-11-16 ADAUSDT.ftr', '2021-11-16 ETCUSDT.ftr', '2021-11-16 BTCUSDT.ftr', '2021-11-16 ETHUSDT.ftr', '2021-11-16 BCHUSDT.ftr', '2021-11-16 XRPUSDT.ftr', '2021-11-16 EOSUSDT.ftr', '2021-11-16 LTCUSDT.ftr', '2021-11-16 LINKUSDT.ftr']\n","['2021-07-03 ETHUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-08-31 SUSHIUSDT.xlsx', '2021-08-31 CVCUSDT.xlsx', '2021-08-31 BTSUSDT.xlsx', '2021-08-31 HOTUSDT.xlsx', '2021-08-31 ZRXUSDT.xlsx', '2021-08-31 QTUMUSDT.xlsx', '2021-08-31 IOTAUSDT.xlsx', '2021-08-31 BTCBUSD.xlsx', '2021-08-31 WAVESUSDT.xlsx', '2021-08-31 ADAUSDT.xlsx', '2021-08-31 LITUSDT.xlsx', '2021-08-31 XTZUSDT.xlsx', '2021-08-31 BNBUSDT.xlsx', '2021-08-31 AKROUSDT.xlsx', '2021-08-31 HNTUSDT.xlsx', '2021-08-31 ETCUSDT.xlsx', '2021-08-31 XMRUSDT.xlsx', '2021-08-31 YFIUSDT.xlsx', '2021-08-31 ETHUSDT.xlsx', '2021-08-31 ALICEUSDT.xlsx', '2021-08-31 ALPHAUSDT.xlsx', '2021-08-31 SFPUSDT.xlsx', '2021-08-31 REEFUSDT.xlsx', '2021-08-31 BATUSDT.xlsx', '2021-08-31 DOGEUSDT.xlsx', '2021-08-31 TRXUSDT.xlsx', '2021-08-31 RLCUSDT.xlsx', '2021-08-31 BTCSTUSDT.xlsx', '2021-08-31 STORJUSDT.xlsx', '2021-08-31 SNXUSDT.xlsx', '2021-08-31 XLMUSDT.xlsx', '2021-08-31 NEOUSDT.xlsx', '2021-08-31 UNFIUSDT.xlsx', '2021-08-31 SANDUSDT.xlsx', '2021-08-31 DASHUSDT.xlsx', '2021-08-31 KAVAUSDT.xlsx', '2021-08-31 RUNEUSDT.xlsx', '2021-08-31 CTKUSDT.xlsx', '2021-08-31 LINKUSDT.xlsx', '2021-08-31 CELRUSDT.xlsx', '2021-08-31 RSRUSDT.xlsx', '2021-08-31 DGBUSDT.xlsx', '2021-08-31 SKLUSDT.xlsx', '2021-08-31 RENUSDT.xlsx', '2021-08-31 TOMOUSDT.xlsx', '2021-08-31 MTLUSDT.xlsx', '2021-08-31 LTCUSDT.xlsx', '2021-08-31 DODOUSDT.xlsx', '2021-08-31 EGLDUSDT.xlsx', '2021-08-31 KSMUSDT.xlsx', '2021-08-31 ONTUSDT.xlsx', '2021-08-31 VETUSDT.xlsx', '2021-08-31 TRBUSDT.xlsx', '2021-08-31 MANAUSDT.xlsx', '2021-08-31 COTIUSDT.xlsx', '2021-08-31 CHRUSDT.xlsx', '2021-08-31 ETHUSDT_210924.xlsx', '2021-08-31 BAKEUSDT.xlsx', '2021-08-31 GRTUSDT.xlsx', '2021-08-31 FLMUSDT.xlsx', '2021-08-31 EOSUSDT.xlsx', '2021-08-31 OGNUSDT.xlsx', '2021-08-31 SCUSDT.xlsx', '2021-08-31 BALUSDT.xlsx', '2021-08-31 STMXUSDT.xlsx', '2021-08-31 BTTUSDT.xlsx', '2021-08-31 LUNAUSDT.xlsx', '2021-08-31 DENTUSDT.xlsx', '2021-08-31 KNCUSDT.xlsx', '2021-08-31 SRMUSDT.xlsx', '2021-08-31 ENJUSDT.xlsx', '2021-08-31 ZENUSDT.xlsx', '2021-08-31 ATOMUSDT.xlsx', '2021-08-31 NEARUSDT.xlsx', '2021-08-31 BCHUSDT.xlsx', '2021-08-31 IOSTUSDT.xlsx', '2021-08-31 HBARUSDT.xlsx', '2021-08-31 ZECUSDT.xlsx', '2021-08-31 1000SHIBUSDT.xlsx', '2021-08-31 TLMUSDT.xlsx', '2021-08-31 BZRXUSDT.xlsx', '2021-08-31 ETHBUSD.xlsx', '2021-08-31 AAVEUSDT.xlsx', '2021-08-31 GTCUSDT.xlsx', '2021-08-31 ALGOUSDT.xlsx', '2021-08-31 ICPUSDT.xlsx', '2021-08-31 BTCUSDT_210924.xlsx', '2021-08-31 LRCUSDT.xlsx', '2021-08-31 AVAXUSDT.xlsx', '2021-08-31 MATICUSDT.xlsx', '2021-08-31 1INCHUSDT.xlsx', '2021-08-31 MKRUSDT.xlsx', '2021-08-31 THETAUSDT.xlsx', '2021-08-31 UNIUSDT.xlsx', '2021-08-31 LINAUSDT.xlsx', '2021-08-31 RVNUSDT.xlsx', '2021-08-31 FILUSDT.xlsx', '2021-08-31 NKNUSDT.xlsx', '2021-08-31 DEFIUSDT.xlsx', '2021-08-31 COMPUSDT.xlsx', '2021-08-31 BTCDOMUSDT.xlsx', '2021-08-31 SOLUSDT.xlsx', '2021-08-31 BTCUSDT.xlsx', '2021-08-31 OMGUSDT.xlsx', '2021-08-31 ICXUSDT.xlsx', '2021-08-31 BLZUSDT.xlsx', '2021-08-31 FTMUSDT.xlsx', '2021-08-31 YFIIUSDT.xlsx', '2021-08-31 KEEPUSDT.xlsx', '2021-08-31 BANDUSDT.xlsx', '2021-08-31 XRPUSDT.xlsx', '2021-08-31 SXPUSDT.xlsx', '2021-08-31 CRVUSDT.xlsx', '2021-08-31 BELUSDT.xlsx', '2021-08-31 DOTUSDT.xlsx', '2021-08-31 XEMUSDT.xlsx', '2021-08-31 ONEUSDT.xlsx', '2021-08-31 ZILUSDT.xlsx', '2021-08-31 AXSUSDT.xlsx', '2021-08-31 OCEANUSDT.xlsx', '2021-08-31 CHZUSDT.xlsx', '2021-08-31 ANKRUSDT.xlsx', '2021-08-31 SUSHIUSDT_res_dfs.pkl', '2021-07-01 ADAUSDT.xlsx', '2021-10-10 ETCUSDT.xlsx', '2021-10-10 BTCUSDT.xlsx', '2021-10-10 ETHUSDT.xlsx', '2021-10-10 ADAUSDT.xlsx', '2021-10-10 XLMUSDT.xlsx', '2021-10-10 LINKUSDT.xlsx', '2021-10-10 LTCUSDT.xlsx', '2021-10-10 EOSUSDT.xlsx', '2021-10-10 XRPUSDT.xlsx', '2021-10-10 BCHUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr', '2021-10-10 ETCUSDT.ftr', '2021-10-10 BTCUSDT.ftr', '2021-10-10 ETHUSDT.ftr', '2021-10-10 ADAUSDT.ftr', '2021-10-10 XLMUSDT.ftr', '2021-10-10 LINKUSDT.ftr', '2021-10-10 LTCUSDT.ftr', '2021-10-10 EOSUSDT.ftr', '2021-10-10 XRPUSDT.ftr', '2021-10-10 BCHUSDT.ftr', '2021-11-16 EOSUSDT.ftr', '2021-11-16 LTCUSDT.ftr', '2021-11-16 LINKUSDT.ftr', '2021-11-16 XLMUSDT.ftr', '2021-11-16 ADAUSDT.ftr', '2021-11-16 ETCUSDT.ftr', '2021-11-16 BTCUSDT.ftr', '2021-11-16 ETHUSDT.ftr', '2021-11-16 BCHUSDT.ftr', '2021-11-16 XRPUSDT.ftr']\n","['2021-07-01 BTCUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr', '2021-10-10 LTCUSDT.xlsx', '2021-10-10 LINKUSDT.xlsx', '2021-10-10 XLMUSDT.xlsx', '2021-10-10 ADAUSDT.xlsx', '2021-10-10 ETCUSDT.xlsx', '2021-10-10 BTCUSDT.xlsx', '2021-10-10 ETHUSDT.xlsx', '2021-10-10 BCHUSDT.xlsx', '2021-10-10 XRPUSDT.xlsx', '2021-10-10 EOSUSDT.xlsx', '2021-10-10 ETCUSDT.ftr', '2021-10-10 BTCUSDT.ftr', '2021-10-10 ETHUSDT.ftr', '2021-10-10 ADAUSDT.ftr', '2021-10-10 XLMUSDT.ftr', '2021-10-10 LINKUSDT.ftr', '2021-10-10 LTCUSDT.ftr', '2021-10-10 EOSUSDT.ftr', '2021-10-10 XRPUSDT.ftr', '2021-10-10 BCHUSDT.ftr', '2021-11-16 XLMUSDT.ftr', '2021-11-16 ADAUSDT.ftr', '2021-11-16 ETCUSDT.ftr', '2021-11-16 BTCUSDT.ftr', '2021-11-16 ETHUSDT.ftr', '2021-11-16 BCHUSDT.ftr', '2021-11-16 XRPUSDT.ftr', '2021-11-16 EOSUSDT.ftr', '2021-11-16 LTCUSDT.ftr', '2021-11-16 LINKUSDT.ftr']\n","['2021-02-07 BTC.xlsx', '2021-02-07 ETH.xlsx', '2021-02-11 BCHUSDT.xlsx', '2021-02-11 XRPUSDT.xlsx', '2021-02-11 EOSUSDT.xlsx', '2021-02-11 LTCUSDT.xlsx', '2021-02-11 ETCUSDT.xlsx', '2021-02-11 LINKUSDT.xlsx', '2021-02-11 XLMUSDT.xlsx', '2021-02-11 ADAUSDT.xlsx', '2021-02-11 XMRUSDT.xlsx', '2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr', '2021-10-10 ETCUSDT.xlsx', '2021-10-10 XLMUSDT.xlsx', '2021-10-10 BCHUSDT.xlsx', '2021-10-10 ADAUSDT.xlsx', '2021-10-10 XRPUSDT.xlsx', '2021-10-10 BTCUSDT.xlsx', '2021-10-10 EOSUSDT.xlsx', '2021-10-10 ETHUSDT.xlsx', '2021-10-10 LTCUSDT.xlsx', '2021-10-10 LINKUSDT.xlsx', '2021-10-10 ETCUSDT.ftr', '2021-10-10 BTCUSDT.ftr', '2021-10-10 ETHUSDT.ftr', '2021-10-10 ADAUSDT.ftr', '2021-10-10 XLMUSDT.ftr', '2021-10-10 LINKUSDT.ftr', '2021-10-10 LTCUSDT.ftr', '2021-10-10 EOSUSDT.ftr', '2021-10-10 XRPUSDT.ftr', '2021-10-10 BCHUSDT.ftr', '2021-11-16 LTCUSDT.ftr', '2021-11-16 LINKUSDT.ftr', '2021-11-16 XLMUSDT.ftr', '2021-11-16 ADAUSDT.ftr', '2021-11-16 ETCUSDT.ftr', '2021-11-16 BTCUSDT.ftr', '2021-11-16 ETHUSDT.ftr', '2021-11-16 XRPUSDT.ftr', '2021-11-16 BCHUSDT.ftr', '2021-11-16 EOSUSDT.ftr']\n","['2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx']\n"]}]},{"cell_type":"markdown","metadata":{"id":"AUSBU7T8Suzi"},"source":["## basic_func"]},{"cell_type":"code","metadata":{"id":"QmhLikYlSuzi"},"source":["def sync_check(df, second_df=None, third_df=None, fourth_df=None, fifth_df=None,\n","               sixth_df=None, seventh_df=None, eighth_df=None):\n","\n","    #           supertrend          #\n","    # df = st_price_line(df, second_df, '3m')\n","    # # print(df.head(100))\n","    # # return\n","\n","    # df = st_price_line(df, third_df, '5m')\n","    # df = st_price_line(df, fourth_df, '15m')\n","    # df = st_price_line(df, fifth_df, '30m')\n","    # df = st_price_line(df, sixth_df, '1h')\n","    # df = st_price_line(df, seventh_df, '4h')\n","\n","    # print(\"supertrend phase done\")\n","\n","    # --------------- rsi --------------- #  \n","    df['rsi_1m'] = rsi(df, 14)    \n","    third_df['rsi_5m'] = rsi(third_df, 14)\n","    df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, third_df, [-1]), columns=['rsi_5m']))\n","    \n","    print(\"rsi phase done\")\n","\n","    # --------------- ema --------------- #  \n","    \n","    third_df['ema_5m'] = ema(third_df['close'], 200)\n","    df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, third_df, [-1]), columns=['ema_5m']))\n","    \n","    print(\"ema phase done\")\n","\n","\n","    # # --------------- dc --------------- #  \n","    # df = dc_line(df, None, '1m', dc_period=20)\n","    # df = dc_line(df, second_df, '3m', dc_period=20)\n","    # df = dc_line(df, third_df, '5m', dc_period=20)\n","    # df = dc_line(df, fourth_df, '15m', dc_period=20)\n","    # df = dc_line(df, fifth_df, '30m', dc_period=20)\n","    # df = dc_line(df, sixth_df, '1h', dc_period=20)\n","    # df = dc_line(df, seventh_df, '4h', dc_period=20)\n","\n","    # print(\"dc phase done\")\n","    \n","    # # --------------- bband --------------- #  \n","    # df = bb_line(df, None, '1m')\n","    # df = bb_line(df, second_df, '3m')\n","    # df = bb_line(df, third_df, '5m')\n","    # df = bb_line(df, fourth_df, '15m')\n","    # df = bb_line(df, fifth_df, '30m')\n","    # df = bb_line(df, sixth_df, '1h')\n","    # df = bb_line(df, seventh_df, '4h')\n","\n","    # print(\"bband phase done\")\n","\n","    # --------------- cbline --------------- #    \n","    # second_df['cloud_bline_3m'] = cloud_bline(second_df, 26)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, second_df, [-1]), columns=['cloud_bline_3m']))\n","    # third_df['cloud_bline_5m'] = cloud_bline(third_df, 26)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, third_df, [-1]), columns=['cloud_bline_5m']))\n","    # fourth_df['cloud_bline_15m'] = cloud_bline(fourth_df, 26)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, fourth_df, [-1]), columns=['cloud_bline_15m']))\n","    # fifth_df['cloud_bline_30m'] = cloud_bline(fifth_df, 26)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, fifth_df, [-1]), columns=['cloud_bline_30m']))\n","    # sixth_df['cloud_bline_1h'] = cloud_bline(sixth_df, 26)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, sixth_df, [-1]), columns=['cloud_bline_1h']))\n","    # seventh_df['cloud_bline_4h'] = cloud_bline(seventh_df, 26)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, seventh_df, [-1]), columns=['cloud_bline_4h']))\n","\n","    # print(\"cbline phase done\")\n","    \n","\n","    #           lucid sar              #\n","    # df['sar_1m'], df['sar_uptrend_1m'] = lucid_sar(df, return_uptrend=True)\n","\n","    # third_df['sar_5m'], third_df['sar_uptrend_5m'] = lucid_sar(third_df, return_uptrend=True)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, third_df, [-2, -1], backing_i=-1), columns=['sar_5m', 'sar_uptrend_5m']))\n","\n","    # fourth_df['sar_15m'], fourth_df['sar_uptrend_15m'] = lucid_sar(fourth_df, return_uptrend=True)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, fourth_df, [-2, -1], backing_i=-1), columns=['sar_15m', 'sar_uptrend_15m']))\n","\n","    # seventh_df['sar_4h'], seventh_df['sar_uptrend_4h'] = lucid_sar(seventh_df, return_uptrend=True)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, seventh_df, [-2, -1], backing_i=-1), columns=['sar_4h', 'sar_uptrend_4h']))\n","    \n","    # print(\"sar phase done\")\n","\n","    \n","    #           stochastic              #\n","    # df['stoch_1m'] = stoch(df, 13, 3, 3)\n","\n","    # third_df['stoch'] = stoch(third_df, 13, 3, 3)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, third_df, [-1], backing_i=-1), columns=['stoch_5m']))\n","\n","    # print(\"stoch phase done\")\n","\n","\n","    return df\n"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"mEKyVbHWSuzi"},"source":["## make & save res_df (concat ÏÉùÍ∞ÅÌïòÎ©¥, timeindex sync ÎßûÏ∂∞ÏïºÌï®)"]},{"cell_type":"markdown","metadata":{"id":"VdukVo5-Suzj"},"source":["### old (xlsx)"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"khKb9nhlSuzj","executionInfo":{"elapsed":11,"status":"error","timestamp":1636201718856,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"outputId":"02bf2c60-f298-4fe9-e6bb-78230ac1348c"},"source":["pd.set_option('display.max_rows', 500)\n","pd.set_option('display.max_columns', 500)\n","pd.set_option('display.width', 1000)\n","\n","\n","save_path = './candlestick_concated/res_df/'\n","\n","exist_list = os.listdir(save_path)\n","\n","\n","a_day = 3600 * 24\n","\n","for i in tqdm(range(len(file_list))):\n","\n","  keys = [file_list[i]]\n","\n","  # if 'neo'.upper() not in file_list[i]:\n","    # continue\n","\n","  # if '2021-04-30'.upper() not in file_list[i]:\n","  if '2021-07-01'.upper() not in file_list[i]:\n","  # if '2021-10-10'.upper() not in file_list[i]:\n","    continue\n","\n","\n","  for key in keys:      \n","\n","    # if 'eth'.upper() not in key:\n","    #   continue\n","\n","    excel_name = key.replace(\".xlsx\", \"_st1h_backi2.xlsx\")\n","    excel_path = save_path + excel_name\n","\n","    if excel_name in exist_list:\n","      print(excel_name, \"already exist !\")\n","      continue\n","    \n","    open_indexes = []\n","    \n","    df = pd.read_excel(date_path + key, index_col=0)\n","    second_df = pd.read_excel(date_path2 + key, index_col=0)\n","    third_df = pd.read_excel(date_path3 + key, index_col=0)\n","    fourth_df = pd.read_excel(date_path4 + key, index_col=0)\n","    fifth_df = pd.read_excel(date_path5 + key, index_col=0)\n","    \n","    print(df.index[[0, -1]])\n","    print(second_df.index[[0, -1]])\n","    print(third_df.index[[0, -1]])\n","    print(fourth_df.index[[0, -1]])\n","    print(fifth_df.index[[0, -1]])\n","\n","    open_indexes.append(df.index[0])\n","    open_indexes.append(second_df.index[0])\n","    open_indexes.append(third_df.index[0])\n","    open_indexes.append(fourth_df.index[0])\n","    open_indexes.append(fifth_df.index[0])\n","    \n","    try:\n","      #     Todo    #\n","      #      1. 1m ÎßàÏßÄÎßâ timeindex Ïùò date Í∏∞Ï§Ä, 08:59:59.999000 Î•º last timestamp Î°ú ÏÑ§Ï†ï\n","      #      2. ÏãúÏûë timestamp Îäî Î™®Îì† tf Ïùò Í∞ÄÏû• ÏµúÍ∑º ÏãúÏûë index,\n","      #       a. 1m Ïùò ÏãúÏûë timeindex Îäî ÏµúÏÜå, htf Ïùò ÏãúÏûë timeindex Î≥¥Îã§ interval ÎßåÌÅº ÏïûÏÑúÏïºÌï®\n","      #         i. Îî∞ÎùºÏÑú 1m open_index, latest_open_index + 1d Î•º ÌïòÎ©¥ Îåê\n","      #           1. timestamp ÏúºÎ°ú Î≥ÄÌôòÌõÑ 1day Î•º ÎçîÌïòÍ≥† datetime ÏúºÎ°ú Î≥ÄÌôò\n","      sixth_df = pd.read_excel(date_path6 + key, index_col=0)\n","      seventh_df = pd.read_excel(date_path7 + key, index_col=0)\n","\n","      print(sixth_df.index[[0, -1]])\n","      print(seventh_df.index[[0, -1]])\n","      print()\n","\n","      open_indexes.append(sixth_df.index[0])\n","      open_indexes.append(seventh_df.index[0])\n","\n","    except Exception as e:\n","      print(e)\n","\n","    latest_open_index = sorted(open_indexes)[-1]\n","    \n","    open_ts = datetime.timestamp(latest_open_index)\n","    latest_open_index_1m = datetime.fromtimestamp(open_ts + a_day)\n","\n","    #   str Î°ú ÎßåÎì§Ïñ¥ Ï†ëÍ∑ºÌïòÎ©¥ Î∂àÍ∞ÄÌï®  #\n","    end_index = pd.to_datetime(str(df.index[-1]).split(\" \")[0] + \" 08:59:59.999000\")\n","    # break\n","\n","    sliced_df = df.loc[latest_open_index_1m:end_index] # to_lower_tf Ïùò Í∏∞Ï§Ä ltf\n","    sliced_second_df = second_df.loc[latest_open_index:end_index]\n","    sliced_third_df = third_df.loc[latest_open_index:end_index]\n","    sliced_fourth_df = fourth_df.loc[latest_open_index:end_index]\n","    sliced_fifth_df = fifth_df.loc[latest_open_index:end_index]\n","\n","    print(\"sliced index\")\n","    print(sliced_df.index[[0, -1]])\n","    print(sliced_second_df.index[[0, -1]])\n","    print(sliced_third_df.index[[0, -1]])\n","    print(sliced_fourth_df.index[[0, -1]])\n","    print(sliced_fifth_df.index[[0, -1]])\n","\n","    try:\n","      sliced_sixth_df = sixth_df.loc[latest_open_index:end_index]\n","      sliced_seventh_df = seventh_df.loc[latest_open_index:end_index]\n","\n","      print(sliced_sixth_df.index[[0, -1]])\n","      print(sliced_seventh_df.index[[0, -1]])\n","\n","      res_df = sync_check(sliced_df, sliced_second_df, sliced_third_df, sliced_fourth_df, sliced_fifth_df, sliced_sixth_df, sliced_seventh_df)\n","    \n","    except:\n","      res_df = sync_check(sliced_df, sliced_second_df, sliced_third_df, sliced_fourth_df, sliced_fifth_df)\n","\n","\n","\n","    res_df.to_excel(excel_path)\n","    print(excel_name, \"saved succesfully !\")"],"execution_count":null,"outputs":[{"ename":"NameError","evalue":"ignored","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-5-ee034491b257>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     11\u001b[0m \u001b[0ma_day\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m3600\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0;36m24\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     12\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 13\u001b[0;31m \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mtqdm\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfile_list\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     14\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     15\u001b[0m   \u001b[0mkeys\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mfile_list\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'file_list' is not defined"]}]},{"cell_type":"markdown","metadata":{"id":"Bw5JibDKSuzj"},"source":["### xlsx to feather"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":355,"referenced_widgets":["be2b848dbcb14a079a2b7bd605af6435","2c7696db44fa402eafb2540c7a72d68c","502ec9042bab443e9407803d9ada1031","75511cdf82714fb7be5b8688e396f69b","b54d2eb7584d43e2916f69174d6e391d","7abd42b3c95c48ac910b581b74ba9b57","a742f61210f24d949aeb1b9f5cd1f6a5","2ff55a21df7742519b138ca795ec3f6d","9e7f44d996a341a19bf22f806da4756d","5552df18053d4d1294ea6a4185afee6e","196b72f68ba948ef96093981fbcd195f"]},"id":"VA-_gcA7Suzj","outputId":"f6f3b55d-ec2c-4b2c-d62e-3de7c0384dc4"},"source":["pd.set_option('display.max_rows', 500)\n","pd.set_option('display.max_columns', 500)\n","pd.set_option('display.width', 1000)\n","\n","\n","save_path = './candlestick_concated/res_df/'\n","\n","exist_list = os.listdir(save_path)\n","\n","\n","a_day = 3600 * 24\n","\n","for i in tqdm(range(len(file_list))):\n","\n","  keys = [file_list[i]]\n","\n","  # if 'neo'.upper() not in file_list[i]:\n","    # continue\n","\n","  # if '2021-04-30'.upper() not in file_list[i]:\n","  # if '2021-07-01'.upper() not in file_list[i]:\n","  if '2021-10-10'.upper() not in file_list[i]:\n","    continue\n","\n","\n","  for key in keys:      \n","\n","    # if 'eth'.upper() not in key:\n","    #   continue\n","\n","    feather_name = key.replace(\".xlsx\", \".ftr\")\n","    # feather_path = save_path + feather_name\n","\n","    if feather_name in exist_list:\n","      print(feather_name, \"already exist !\")\n","      continue\n","    \n","    open_indexes = []\n","    \n","    df = pd.read_excel(date_path + key, index_col=0)\n","    second_df = pd.read_excel(date_path2 + key, index_col=0)\n","    third_df = pd.read_excel(date_path3 + key, index_col=0)\n","    fourth_df = pd.read_excel(date_path4 + key, index_col=0)\n","    fifth_df = pd.read_excel(date_path5 + key, index_col=0)\n","    \n","    print(df.index[[0, -1]])\n","    print(second_df.index[[0, -1]])\n","    print(third_df.index[[0, -1]])\n","    print(fourth_df.index[[0, -1]])\n","    print(fifth_df.index[[0, -1]])\n","\n","    open_indexes.append(df.index[0])\n","    open_indexes.append(second_df.index[0])\n","    open_indexes.append(third_df.index[0])\n","    open_indexes.append(fourth_df.index[0])\n","    open_indexes.append(fifth_df.index[0])\n","    \n","    try:\n","      #     Todo    #\n","      #      1. 1m ÎßàÏßÄÎßâ timeindex Ïùò date Í∏∞Ï§Ä, 08:59:59.999000 Î•º last timestamp Î°ú ÏÑ§Ï†ï\n","      #      2. ÏãúÏûë timestamp Îäî Î™®Îì† tf Ïùò Í∞ÄÏû• ÏµúÍ∑º ÏãúÏûë index,\n","      #       a. 1m Ïùò ÏãúÏûë timeindex Îäî ÏµúÏÜå, htf Ïùò ÏãúÏûë timeindex Î≥¥Îã§ interval ÎßåÌÅº ÏïûÏÑúÏïºÌï®\n","      #         i. Îî∞ÎùºÏÑú 1m open_index, latest_open_index + 1d Î•º ÌïòÎ©¥ Îåê\n","      #           1. timestamp ÏúºÎ°ú Î≥ÄÌôòÌõÑ 1day Î•º ÎçîÌïòÍ≥† datetime ÏúºÎ°ú Î≥ÄÌôò\n","      sixth_df = pd.read_excel(date_path6 + key, index_col=0)\n","      seventh_df = pd.read_excel(date_path7 + key, index_col=0)\n","\n","      print(sixth_df.index[[0, -1]])\n","      print(seventh_df.index[[0, -1]])\n","      print()\n","\n","      open_indexes.append(sixth_df.index[0])\n","      open_indexes.append(seventh_df.index[0])\n","\n","    except Exception as e:\n","      print(e)\n","\n","\n","    df.reset_index().to_feather(date_path + feather_name, compression='lz4')\n","    second_df.reset_index().to_feather(date_path2 + feather_name, compression='lz4')\n","    third_df.reset_index().to_feather(date_path3 + feather_name, compression='lz4')\n","    fourth_df.reset_index().to_feather(date_path4 + feather_name, compression='lz4')\n","    fifth_df.reset_index().to_feather(date_path5 + feather_name, compression='lz4')\n","    sixth_df.reset_index().to_feather(date_path6 + feather_name, compression='lz4')\n","    seventh_df.reset_index().to_feather(date_path7 + feather_name, compression='lz4')\n","\n","    print(\"xlsx converted to feather !\")\n","    "],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"application/vnd.jupyter.widget-view+json":{"model_id":"be2b848dbcb14a079a2b7bd605af6435","version_minor":0,"version_major":2},"text/plain":["  0%|          | 0/156 [00:00<?, ?it/s]"]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["DatetimeIndex(['2021-06-28 00:00:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:02:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:04:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:14:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:29:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-09-14 03:59:59.999000', '2021-11-15 14:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-03-10 20:59:59.999000', '2021-11-15 16:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","\n","xlsx converted to feather !\n","DatetimeIndex(['2021-06-28 00:00:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:02:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:04:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:14:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:29:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-09-14 03:59:59.999000', '2021-11-15 14:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-03-10 20:59:59.999000', '2021-11-15 16:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","\n","xlsx converted to feather !\n"]}]},{"cell_type":"markdown","metadata":{"id":"Pe0QpnORSuzk"},"source":["### add itv_name to ftr"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":223,"referenced_widgets":["e3225655da874b8d89cc8b2a381b3fb6","217018421aa4406ea11f3c655977fc8c","25c09f6fad2b4f55aa5fcef70e109d7b","d6c715e951a04deb9b24cae42cd617cd","39059d3e2a784c5bacd763cde041fe84","8a7f1067082340aab3089c189ef2f110","00d5dc71b69045c887d09ff7cef9db2a","6fdae6e1b4e34e7bbc3aae8dcb3824ba","066f75e5dacf44b7b63d5b2a94c9e5a0","ea978679ff5b45d6a979d154bb51fbb1","03e244d79cae4b8b92bb09cc38a6f495"]},"id":"M-gl30KxSuzk","executionInfo":{"status":"ok","timestamp":1638246331122,"user_tz":-540,"elapsed":43664,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"1cfcb580-8d25-4bd0-fdd0-213640779ce2"},"source":["save_path = './candlestick_concated/res_df/'\n","\n","# dir_path = \"bbdc3m_backi2\"\n","# date = '2021-10-10'\n","date = '2021-07-01'\n","\n","db_path = './candlestick_concated/database_bn/non_cum/%s/' % date\n","os.makedirs(os.path.join(db_path), exist_ok=True)\n","\n","# exist_list = os.listdir(os.path.join(save_path, dir_path))\n","# break\n","\n","\n","a_day = 3600 * 24\n","\n","for i in tqdm(range(len(file_list))):\n","\n","  keys = [file_list[i]]\n","\n","  # if 'neo'.upper() not in file_list[i]:\n","    # continue\n","\n","  if date not in file_list[i]:\n","    continue\n","\n","\n","  for key in keys:      \n","\n","    # if 'eth'.upper() not in key:\n","    #   continue\n","    # print(key)\n","    \n","    if \".ftr\" not in key:\n","      continue\n","        \n","    df = shutil.copy(date_path + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval))\n","    second_df = shutil.copy(date_path2 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval2))\n","    third_df = shutil.copy(date_path3 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval3))\n","    fourth_df = shutil.copy(date_path4 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval4))\n","    fifth_df = shutil.copy(date_path5 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval5))\n","    sixth_df = shutil.copy(date_path6 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval6))\n","    seventh_df = shutil.copy(date_path7 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval7))\n","\n","    print(\"copied to\" + db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval))\n"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"application/vnd.jupyter.widget-view+json":{"model_id":"e3225655da874b8d89cc8b2a381b3fb6","version_minor":0,"version_major":2},"text/plain":["  0%|          | 0/175 [00:00<?, ?it/s]"]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 BTCUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 BCHUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 XRPUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 EOSUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 LTCUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 ETCUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 LINKUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 XLMUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 ADAUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 ETHUSDT_1m.ftr\n"]}]},{"cell_type":"markdown","metadata":{"id":"4oZ1ohTtSuzk"},"source":["### feather ver."]},{"cell_type":"code","metadata":{"id":"vgVHpnUsSuzk"},"source":["# db_path = './candlestick_concated/database_ub/'\n","db_path = './candlestick_concated/database_bn/'\n","\n","\n","save_path = './candlestick_concated/res_df/'\n","save_dir_path = \"rsi5m_backi2\"\n","\n","date = '2021-11-17'\n","\n","data_path = os.path.join(db_path, \"cum\", date) \n","save_path = os.path.join(save_path, save_dir_path, 'noncat/cum', date)\n","os.makedirs(save_path, exist_ok=True)\n","\n","file_list = os.listdir(data_path)\n","exist_list = os.listdir(save_path)\n","# break\n","\n","interval = '1m'\n","interval2 = '3m'\n","interval3 = '5m'\n","interval4 = '15m'\n","interval5 = '30m'\n","interval6 = '1h'\n","interval7 = '4h'\n","interval8 = '1d'\n","\n","a_day = 3600 * 24\n","\n","for i in tqdm(range(len(file_list))):\n","\n","  keys = [file_list[i]]\n","\n","  # if 'neo'.upper() not in file_list[i]:\n","    # continue\n","\n","  if date not in file_list[i]:\n","    continue\n","\n","\n","  for key in keys:      \n","\n","    # if 'eth'.upper() not in key:\n","    #   continue\n","    # print(key)\n","    \n","    if \".ftr\" not in key:\n","      continue\n","\n","    if \"_1m\" not in key:\n","      continue\n","\n","    # feather_name = key.replace(\".ftr\", \"_%.ftr\" % save_dir_path)\n","    feather_name = key.replace(\"_1m\", \"\")\n","    feather_path = os.path.join(save_path, feather_name)\n","\n","    if feather_name in exist_list:\n","      print(feather_name, \"already exist !\")\n","      continue\n","    \n","    open_indexes = []\n","    end_indexes = []\n","    \n","    df = pd.read_feather(os.path.join(data_path, key), columns=None, use_threads=True).set_index(\"index\")\n","    second_df = pd.read_feather(os.path.join(data_path, key.replace(interval, interval2)), columns=None, use_threads=True).set_index(\"index\")\n","    third_df = pd.read_feather(os.path.join(data_path, key.replace(interval, interval3)), columns=None, use_threads=True).set_index(\"index\")\n","    fourth_df = pd.read_feather(os.path.join(data_path, key.replace(interval, interval4)), columns=None, use_threads=True).set_index(\"index\")\n","    fifth_df = pd.read_feather(os.path.join(data_path, key.replace(interval, interval5)), columns=None, use_threads=True).set_index(\"index\")\n","        \n","    print(df.index[[0, -1]])\n","    print(second_df.index[[0, -1]])\n","    print(third_df.index[[0, -1]])\n","    print(fourth_df.index[[0, -1]])\n","    print(fifth_df.index[[0, -1]])\n","\n","    open_indexes.append(df.index[0])\n","    open_indexes.append(second_df.index[0])\n","    open_indexes.append(third_df.index[0])\n","    open_indexes.append(fourth_df.index[0])\n","    open_indexes.append(fifth_df.index[0])\n","    end_indexes.append(df.index[-1])\n","    end_indexes.append(second_df.index[-1])\n","    end_indexes.append(third_df.index[-1])\n","    end_indexes.append(fourth_df.index[-1])\n","    end_indexes.append(fifth_df.index[-1])\n","    \n","    try:\n","      #     Todo    #\n","      #      1. 1m ÎßàÏßÄÎßâ timeindex Ïùò date Í∏∞Ï§Ä, 08:59:59.999000 Î•º last timestamp Î°ú ÏÑ§Ï†ï\n","      #      2. ÏãúÏûë timestamp Îäî Î™®Îì† tf Ïùò Í∞ÄÏû• ÏµúÍ∑º ÏãúÏûë index,\n","      #       a. 1m Ïùò ÏãúÏûë timeindex Îäî ÏµúÏÜå, htf Ïùò ÏãúÏûë timeindex Î≥¥Îã§ interval ÎßåÌÅº ÏïûÏÑúÏïºÌï®\n","      #         i. Îî∞ÎùºÏÑú 1m open_index, latest_open_index + 1d Î•º ÌïòÎ©¥ Îåê\n","      #           1. timestamp ÏúºÎ°ú Î≥ÄÌôòÌõÑ 1day Î•º ÎçîÌïòÍ≥† datetime ÏúºÎ°ú Î≥ÄÌôò\n","      sixth_df = pd.read_feather(os.path.join(data_path, key.replace(interval, interval6)), columns=None, use_threads=True).set_index(\"index\")\n","      seventh_df = pd.read_feather(os.path.join(data_path, key.replace(interval, interval7)), columns=None, use_threads=True).set_index(\"index\")\n","\n","      print(sixth_df.index[[0, -1]])\n","      print(seventh_df.index[[0, -1]])\n","      print()\n","\n","      open_indexes.append(sixth_df.index[0])\n","      open_indexes.append(seventh_df.index[0])\n","      end_indexes.append(sixth_df.index[-1])\n","      end_indexes.append(seventh_df.index[-1])\n","\n","    except Exception as e:\n","      print(e)\n","\n","    latest_open_index = sorted(open_indexes)[-1]\n","    recent_end_index = sorted(end_indexes)[0]\n","    \n","    open_ts = datetime.timestamp(latest_open_index)\n","    latest_open_index_1m = datetime.fromtimestamp(open_ts + a_day)\n","\n","    end_ts = datetime.timestamp(recent_end_index)\n","    recent_end_index_1m = datetime.fromtimestamp(end_ts - a_day)\n","\n","    #   str Î°ú ÎßåÎì§Ïñ¥ Ï†ëÍ∑ºÌïòÎ©¥ Î∂àÍ∞ÄÌï®  #\n","    #   latest_open_index_1m ÏùÄ latest_open_index Î≥¥Îã§ ÌÅ¨Í∏∞Îßå ÌïòÎ©¥ Îê®   # (9:00:00 ÍµêÏ≤¥ ÌïÑÏöîÏóÜÏù¥)\n","    if \"999000\" in str(df.index[-1]):\n","      # end_index = pd.to_datetime(str(df.index[-1]).split(\" \")[0] + \" 08:59:59.999000\")\n","      end_index = pd.to_datetime(str(recent_end_index_1m).split(\" \")[0] + \" 08:59:59.999000\")\n","    else:\n","      # end_index = pd.to_datetime(str(df.index[-1]).split(\" \")[0] + \" 09:00:00\")\n","      end_index = pd.to_datetime(str(recent_end_index_1m).split(\" \")[0] + \" 09:00:00\")\n","      # end_index = pd.to_datetime(\"2021-11-15\" + \" 09:00:00\")\n","\n","    #   ***** 1m open_idx Îäî htf Î≥¥Îã§ Ïª§ÏïºÌï® --> to_lower_tf Î•º ÏÇ¨Ïö©ÌïòÍ∏∞ ÏúÑÌï®ÏûÑ   #\n","    sliced_df = df.loc[latest_open_index_1m:end_index] # to_lower_tf Ïùò Í∏∞Ï§Ä ltf\n","\n","    sliced_second_df = second_df.loc[latest_open_index:end_index]\n","    sliced_third_df = third_df.loc[latest_open_index:end_index]\n","    sliced_fourth_df = fourth_df.loc[latest_open_index:end_index]\n","    sliced_fifth_df = fifth_df.loc[latest_open_index:end_index]\n","\n","    print(\"sliced index\")\n","    print(sliced_df.index[[0, -1]])\n","    print(sliced_second_df.index[[0, -1]])\n","    print(sliced_third_df.index[[0, -1]])\n","    print(sliced_fourth_df.index[[0, -1]])\n","    print(sliced_fifth_df.index[[0, -1]])\n","\n","    try:\n","      sliced_sixth_df = sixth_df.loc[latest_open_index:end_index]\n","      sliced_seventh_df = seventh_df.loc[latest_open_index:end_index]\n","\n","      print(sliced_sixth_df.index[[0, -1]])\n","      print(sliced_seventh_df.index[[0, -1]])\n","\n","      res_df = sync_check(sliced_df, sliced_second_df, sliced_third_df, sliced_fourth_df, sliced_fifth_df, sliced_sixth_df, sliced_seventh_df)\n","    \n","    except:\n","      res_df = sync_check(sliced_df, sliced_second_df, sliced_third_df, sliced_fourth_df, sliced_fifth_df)\n","\n","\n","\n","    # res_df.to_feather(feather_path)\n","    res_df.reset_index().to_feather(feather_path, compression='lz4')\n","    print(feather_path, \"saved succesfully !\")"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"jTN3M842Suzl"},"source":["## concat & save new res_df"]},{"cell_type":"markdown","metadata":{"id":"MlFkpO1MSuzl"},"source":["### old (xlsx)"]},{"cell_type":"code","metadata":{"id":"U-3QkfbFSuzl"},"source":["save_path = './candlestick_concated/res_df/'\n","\n","dict_name = \"2021-07-01 ETHUSDT_bb15m_backi2_res_dfs.pkl\"\n","\n","#     load with pickle    #\n","with open(save_path + dict_name, 'rb') as f:\n","  saved_res_df_dict = pickle.load(f)\n","\n","print(dict_name, \"loaded !\")\n","res_df_files = os.listdir(save_path)\n","res_df_files.reverse()\n","\n","print(res_df_files)\n","\n","res_df_dict = {}\n","\n","base_postfix = '_bb15m_backi2.xlsx'\n","new_postfix = '_st1h_backi2.xlsx'\n","\n","max_cnt = 10\n","sample_cnt = max_cnt\n","\n","for k_i, key in enumerate(res_df_files):\n","\n","  if '2021-07-01'.upper() not in key:\n","  # if '2021-10-10'.upper() not in key:\n","    continue\n","\n","  # if \"link\".upper() not in key:\n","  # if \"btc\".upper() not in key:\n","  #   continue\n","\n","  if new_postfix not in key:\n","    continue\n","\n","  # if key in \n","\n","  if sample_cnt == max_cnt:\n","    dict_name = \"%s_res_dfs.pkl\" % key.split(\".\")[0]\n","    print(\"dict_name :\", dict_name)\n","\n","  base_df = saved_res_df_dict[key.replace(new_postfix, base_postfix)]\n","  # base_df = pd.read_excel(save_path + key.replace(new_postfix, base_postfix), index_col=0)  \n","  res_df = pd.read_excel(save_path + key, index_col=0)  \n","\n","  # print(base_df.head())\n","  # print(res_df.head())\n","  # break\n","\n","  new_res_df = pd.concat([base_df, res_df], axis=1) # df_tot.drop_duplicates()\n","  # new_res_df.head()\n","\n","  droped_new_res_df = new_res_df.loc[:,~new_res_df.columns.duplicated(keep='last')]\n","  droped_new_res_df.head()\n","  # break\n","\n","  # res_df_dict[key] = res_df\n","  res_df_dict[key] = droped_new_res_df\n","  print(key, \"saved to dict !\")\n","\n","  #     save with pickle    #\n","  with open(save_path + dict_name, 'wb') as f:\n","    pickle.dump(res_df_dict, f)\n","\n","  sample_cnt -= 1\n","\n","  if sample_cnt <= 0:\n","    break\n"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"t1E_eAyPSuzm"},"source":["### new col to latest feather (1m_indi. only)"]},{"cell_type":"code","metadata":{"id":"xyI5NrM7Suzm"},"source":["save_path = './candlestick_concated/res_df/'\n","\n","cum_dir = \"cum\"\n","\n","new_dir_path = \"rsi_backi2\"\n","base_dir_path = \"bbdc3m_backi2\"\n","\n","new_date = '2021-11-17'\n","\n","\n","\n","#     load ftr list    #\n","base_save_path = os.path.join(save_path, base_dir_path, \"concat/cum\", new_date)\n","new_save_path = base_save_path.replace(base_dir_path, new_dir_path)\n","\n","#     save to (new) cum dir    #\n","#      1. if dir. not exists, makedir\n","os.makedirs(new_save_path, exist_ok=True)\n","\n","ftr_list = [s for s in os.listdir(base_save_path) if \"ftr\" in s]\n","print(ftr_list)\n","# break\n","\n","\n","max_cnt = 10\n","sample_cnt = max_cnt\n","\n","for key in ftr_list:\n","\n","  if new_date not in key:\n","    continue\n","\n","\n","  #       read from base postfix's directory    #\n","  base_df = pd.read_feather(os.path.join(base_save_path, key), columns=None, use_threads=True).set_index(\"index\")\n","  # print(base_df.head())\n","  # print(res_df.head())\n","  # break\n","\n","  droped_new_res_df = sync_check(base_df)\n","\n","  # new_res_df = pd.concat([base_df, res_df], axis=0) # df_tot.drop_duplicates()\n","  # # new_res_df.head()\n","\n","  # intersection_cols = res_df.columns.intersection(base_df.columns)\n","\n","  # droped_new_res_df = new_res_df.loc[~new_res_df.index.duplicated(keep='last'),intersection_cols]\n","  # droped_new_res_df = new_res_df.loc[:,~new_res_df.columns.duplicated(keep='last')]\n","  # droped_new_res_df = new_res_df.loc[:,~new_res_df.index.duplicated(keep='last')]\n","  # droped_new_res_df.head()\n","  # break\n","\n","  droped_new_res_df.reset_index().to_feather(os.path.join(new_save_path, key), compression='lz4')\n","\n","  print(os.path.join(new_save_path, key), \"saved !\")\n","\n","  # sample_cnt -= 1\n","\n","  # if sample_cnt <= 0:\n","  #   break\n"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"nUs4fjVHSuzl"},"source":["### feather ver. (col concat)"]},{"cell_type":"code","metadata":{"id":"6cu-Y82iSuzl"},"source":["new_dir_path = \"ema5m_backi2\"\n","base_dir_path = \"rsi5m_backi2\"\n","\n","# new_date = \"2021-07-01\"\n","new_date = \"2021-11-17\"\n","\n","#     save to (new) concat dir    #\n","#      1. if dir. not exists, makedir\n","save_path = './candlestick_concated/res_df/'\n","save_path = os.path.join(save_path, new_dir_path, \"concat/cum\", new_date)\n","os.makedirs(save_path, exist_ok=True)\n","\n","\n","#     load ftr list    #\n","# ftr_list = [s for s in os.listdir(os.path.join(save_path, new_dir_path)) if \"ftr\" in s]\n","\n","noncat_path = save_path.replace(\"concat/\", \"noncat/\")\n","ftr_list = [s for s in os.listdir(noncat_path) if \"ftr\" in s]\n","print(ftr_list)\n","# break\n","\n","\n","for key in ftr_list:\n","\n","  if new_date not in key:\n","    continue\n","\n","  #       read from base postfix's directory    #\n","  base_df = pd.read_feather(os.path.join(save_path.replace(new_dir_path, base_dir_path), key), columns=None, use_threads=True).set_index(\"index\")\n","  res_df = pd.read_feather(os.path.join(noncat_path, key), columns=None, use_threads=True).set_index(\"index\")\n","\n","  # print(base_df.head())\n","  # print(res_df.head())\n","  # break\n","\n","  new_res_df = pd.concat([base_df, res_df], axis=1) # df_tot.drop_duplicates()\n","  # new_res_df.head()\n","\n","  droped_new_res_df = new_res_df.loc[:,~new_res_df.columns.duplicated(keep='last')]\n","  # droped_new_res_df.head()\n","  # break\n","\n","  droped_new_res_df.reset_index().to_feather(os.path.join(save_path, key), compression='lz4')\n","\n","  # res_df_dict[key] = res_df\n","  # res_df_dict[key] = droped_new_res_df\n","  print(os.path.join(save_path, key), \"saved !\")\n","  \n","\n","  # sample_cnt -= 1\n","\n","  # if sample_cnt <= 0:\n","  #   break\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"4GiF2NJPSuzm","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1638601523467,"user_tz":-540,"elapsed":3,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"10697ea8-e9a4-4ebe-c556-52feb582e081"},"source":["droped_new_res_df.columns"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Index(['dc_upper_1m', 'dc_lower_1m', 'dc_base_1m', 'dc_upper_3m', 'dc_lower_3m', 'dc_base_3m', 'dc_upper_5m', 'dc_lower_5m', 'dc_base_5m', 'dc_upper_15m', 'dc_lower_15m', 'dc_base_15m', 'dc_upper_30m', 'dc_lower_30m', 'dc_base_30m', 'dc_upper_1h', 'dc_lower_1h', 'dc_base_1h', 'dc_upper_4h', 'dc_lower_4h', 'dc_base_4h', 'bb_upper_1m', 'bb_lower_1m', 'bb_upper_3m', 'bb_lower_3m', 'bb_upper_5m', 'bb_lower_5m', 'bb_upper_15m', 'bb_lower_15m', 'bb_upper_30m', 'bb_lower_30m', 'bb_upper_1h', 'bb_lower_1h', 'bb_upper_4h', 'bb_lower_4h', 'rsi_1m', 'open', 'high', 'low', 'close', 'volume', 'rsi_5m'], dtype='object')"]},"metadata":{},"execution_count":111}]},{"cell_type":"markdown","metadata":{"id":"WVAKq3i8Suzm"},"source":["### feather ver. (row concat) , database cum ÎèÑ Ìò∏ÌôòÍ∞ÄÎä•"]},{"cell_type":"code","metadata":{"id":"XG2p9OhhSuzm"},"source":["save_path = './candlestick_concated/res_df/'\n","save_path = './candlestick_concated/database_bn/'\n","\n","new_date = '2021-11-17'\n","# base_date = '2021-10-10'\n","base_date = '2021-07-01'\n","\n","#     load ftr list    #\n","if \"database\" in save_path:\n","  dir_path = \"\"\n","  concat_dir = \"\"\n","else:\n","  dir_path = \"bbdc3m_backi2\"\n","  concat_dir = \"concat\"\n","\n","# base_date_path = os.path.join(save_path, dir_path, concat_dir, \"cum\", base_date)    # --> base ÎèÑ non_cum Í∞ÄÎä•Ìï®\n","base_date_path = os.path.join(save_path, dir_path, concat_dir, \"non_cum\", base_date)    # --> base ÎèÑ non_cum Í∞ÄÎä•Ìï®\n","# new_date_path = os.path.join(save_path, dir_path, concat_dir, \"non_cum\", new_date)\n","new_date_path = os.path.join(save_path, dir_path, concat_dir, \"cum\", new_date)    # --> cum Í∞ÄÎä•Ìï®\n","  \n","\n","\n","#     save to (new) concat dir    #\n","#      1. if dir. not exists, makedir\n","save_path = new_date_path.replace(\"non_cum\", \"cum\")\n","os.makedirs(save_path, exist_ok=True)   # noncat / concat ÎëêÍ∞ÄÏßÄ Í≤ΩÏö∞ Ï°¥Ïû¨Í∞ÄÎä•Ìï† Í≤É\n","# os.makedirs(os.path.join(save_path, dir_path, \"noncat/cum\", new_date), exist_ok=True)\n","\n","\n","ftr_list = [s for s in os.listdir(new_date_path) if \"ftr\" in s]\n","exist_list = os.listdir(save_path)\n","print(ftr_list)\n","# break\n","\n","\n","max_cnt = 10\n","sample_cnt = max_cnt\n","\n","for key in ftr_list:\n","\n","  if new_date not in key:\n","    continue\n","\n","  # if key in exist_list:\n","  #   print(key, \"already exist !\")\n","  #   continue\n","\n","  #       read from base postfix's directory    #\n","  base_df = pd.read_feather(os.path.join(base_date_path, key.replace(new_date, base_date)), columns=None, use_threads=True).set_index(\"index\")\n","  res_df = pd.read_feather(os.path.join(new_date_path, key), columns=None, use_threads=True).set_index(\"index\")\n","\n","  # print(base_df.head())\n","  # print(res_df.head())\n","  # break\n","\n","  new_res_df = pd.concat([base_df, res_df], axis=0) # df_tot.drop_duplicates()\n","  # new_res_df.head()\n","\n","  intersection_cols = res_df.columns.intersection(base_df.columns)\n","\n","  droped_new_res_df = new_res_df.loc[~new_res_df.index.duplicated(keep='last'),intersection_cols]\n","  # droped_new_res_df = new_res_df.loc[:,~new_res_df.columns.duplicated(keep='last')]\n","  # droped_new_res_df = new_res_df.loc[:,~new_res_df.index.duplicated(keep='last')]\n","  # droped_new_res_df.head()\n","  # break\n","  \n","  interval = key.split(\".\")[0].split(\"_\")[-1] \n","  itv_num = to_itvnum(interval)\n","\n","  # verified_df = consecutive_df(droped_new_res_df, to_itvnum(interval))\n","\n","  # verified_df.reset_index().to_feather(os.path.join(save_path, key), compression='lz4')\n","\n","  # res_df_dict[key] = res_df\n","  # res_df_dict[key] = droped_new_res_df\n","  \n","  print(droped_new_res_df.iloc[[0, -1]])\n","\n","  np_idx_ts = np.array(list(map(lambda x: datetime.timestamp(x), droped_new_res_df.index)))\n","  ideal_ts_gap = 60 * itv_num\n","\n","  for ts_i in range(len(np_idx_ts)):\n","    \n","    if ts_i != 0:\n","      ts_gap = np_idx_ts[ts_i] - np_idx_ts[ts_i - 1]\n","\n","      if ts_gap > ideal_ts_gap or ts_gap < ideal_ts_gap:\n","      # if ts_gap == ideal_ts_gap:\n","        print(droped_new_res_df.index[ts_i - 1])\n","        print(droped_new_res_df.index[ts_i])\n","        # print(ts_gap)\n","        print(\"-------------------- unideal ts_gap --------------------\")\n","\n","  droped_new_res_df.reset_index().to_feather(os.path.join(save_path, key), compression='lz4')\n","\n","  print(os.path.join(save_path, key), \"saved !\")\n","  \n","\n","  # sample_cnt -= 1\n","\n","  # if sample_cnt <= 0:\n","  #   break\n"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"L7l5CTJfSuzn"},"source":["#### check continuity"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"nGzMGyC3Suzn","executionInfo":{"status":"ok","timestamp":1638591157349,"user_tz":-540,"elapsed":3087,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"0605ab52-c76b-46c6-e4e4-1207604977f1"},"source":["# print(droped_new_res_df.columns)\n","\n","print(droped_new_res_df.iloc[[0, -1]])\n","\n","np_idx_ts = np.array(list(map(lambda x: datetime.timestamp(x), droped_new_res_df.index)))\n","\n","print(np_idx_ts[:10])\n","for ts_i in range(len(np_idx_ts)):\n","  \n","  if ts_i != 0:\n","    ts_gap = np_idx_ts[ts_i] - np_idx_ts[ts_i - 1]\n","\n","    if ts_gap > 60 or ts_gap < 60:\n","    # if ts_gap == 60:\n","      print(droped_new_res_df.index[ts_i - 1])\n","      print(droped_new_res_df.index[ts_i])\n","      # print(ts_gap)\n","      print()\n"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["                           open    high     low   close    volume\n","index                                                            \n","2020-09-05 00:00:59.999  228.12  228.48  223.93  223.97  2661.913\n","2021-11-17 00:51:59.999  606.61  606.80  606.54  606.75    63.332\n","[1.59926406e+09 1.59926412e+09 1.59926418e+09 1.59926424e+09\n"," 1.59926430e+09 1.59926436e+09 1.59926442e+09 1.59926448e+09\n"," 1.59926454e+09 1.59926460e+09]\n"]}]},{"cell_type":"markdown","metadata":{"id":"qNGeuYuGDXfv"},"source":["# pr check with strategy"]},{"cell_type":"markdown","metadata":{"id":"6HOjnZjSgzk1"},"source":["## load ftr_list"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7FPBG5Qqg2jB","executionInfo":{"status":"ok","timestamp":1638944338787,"user_tz":-540,"elapsed":1860,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"7ddab83c-9fec-49ff-b9ec-742c52ca7c59"},"source":["save_path = './candlestick_concated/res_df/'\n","\n","dir_path = \"ema5m_backi2\"\n","\n","date = \"2021-11-17\"\n","\n","ftr_path = os.path.join(save_path, dir_path, \"concat/cum\", date)\n","\n","#     load ftr list    #\n","ftr_list = [s for s in os.listdir(ftr_path) if \"ftr\" in s if date in s]\n","# ftr_list = [s for s in os.listdir(os.path.join(save_path, dir_path)) if \"ftr\" in s if date in s]\n","print(ftr_list)"],"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["['2021-11-17 ETHUSDT.ftr', '2021-11-17 BTCUSDT.ftr', '2021-11-17 ETCUSDT.ftr', '2021-11-17 ADAUSDT.ftr', '2021-11-17 XLMUSDT.ftr', '2021-11-17 LINKUSDT.ftr', '2021-11-17 LTCUSDT.ftr', '2021-11-17 EOSUSDT.ftr', '2021-11-17 XRPUSDT.ftr', '2021-11-17 BCHUSDT.ftr']\n"]}]},{"cell_type":"markdown","metadata":{"id":"5duWn8t4BRyv"},"source":["## hvp platform"]},{"cell_type":"markdown","metadata":{"id":"wmnyUTS-yjF1"},"source":["##### config"]},{"cell_type":"code","metadata":{"id":"q_4E-zH02WJy","executionInfo":{"status":"ok","timestamp":1638946676155,"user_tz":-540,"elapsed":488,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}}},"source":["#     caution : MARKET / LIMIT spelling   #\n","#      json doesn't support single quotes     #\n","\n","param_dict = \\\n","{\n","  \"trader_set\": {\n","    \"run\": 1,\n","    \"df_log\": 0,\n","    \"last_index\": -2,\n","    \"limit_fee\": 0.0002,\n","    \"market_fee\": 0.0004,\n","    \"initial_asset\": 1000,\n","    \"asset_changed\" : 1,\n","    \"symbol\": \"ETHUSDT\",\n","    \"symbol_changed\": 0,\n","    \"interval_list\": [\n","      \"1m\",\n","      \"5m\",\n","      \"15m\"\n","    ],\n","    \"row_list\": [\n","      200,\n","      100,\n","      100\n","    ],\n","    \"short_inversion\": 0,\n","    \"long_inversion\": 0,\n","    \"bar_close_second\": 59,\n","    \"realtime_term\": 0.01,\n","    \"api_retry_term\": 3,\n","    \"check_entry_sec\": 10,\n","    \"entry_execution_wait\": 60,\n","    \"breakout_qty_ratio\": 0.97,\n","    \"qty_check_term\": 30,\n","    \"exit_execution_wait\": 60,\n","    \"close_complete_term\": 5,\n","    \"save_stacked_df\": 0,\n","    \"stacked_df_exist\": 1\n","  },\n","  \"loc_set\": {\n","    \"zone\":{\n","      \"dtk_itv\": \"5m\",\n","      \"short_spread\": \"None\",    \n","      \"long_spread\": \"None\",    \n","      \"dtk_dc_itv\": \"None\",\n","      \"dt_k\": \"None\",\n","      \"dc_period\": 135,\n","      \"ei_k\": 0.095,\n","      \"use_dtk_line\": 0,\n","      \"zone_rejection\": 1,\n","      \"bbz_itv\": \"15m\",\n","      \"zone_dt_k\": 0.4,\n","      \"zone_dc_period\": 135,\n","      \"dr_error\": 0.1,\n","      \"bbwp_thresh\": 0.5,\n","      \"entry_incycle\": 5,\n","      \"max_eplim_pct\": 0.05,\n","      \"min_eplim_pct\": 0.013        \n","    },\n","    \"point\":{\n","    \"exp_itv\": \"1m\",\n","    \"tpg_itv\": \"5m\",\n","    \"outg_itv\": \"15m\",\n","    \"outg_dc_period\": \"None\",\n","    \"tf_entry\": 1,\n","    \"htf_entry\": 15\n","    }\n","  },\n","  \"tr_set\": {\n","    \"ep_gap\": 0.0,\n","    \"tp_gap\": 0.,\n","    \"out_gap\": 1.3,\n","    \"c_ep_gap\": \"None\",\n","    \"t_out_gap\": -0.\n","  },\n","  \"ep_set\": {\n","    \"short_entry_score\": -2,\n","    \"entry_type\": \"LIMIT\",\n","    \"static_ep\": 1,\n","    \"tpout_onexec\": 0\n","  },\n","  \"out_set\": {\n","    \"out_type\": \"MARKET\",\n","    \"use_out\": 1,\n","    \"static_out\": 1,\n","    \"hl_out\": 1,\n","    \"price_restoration\": 0,\n","    \"retouch\": 0,\n","    \"retouch_out_period\": 500,\n","    \"second_out\": 0,\n","    \"approval_st_gap\": 1.5,\n","    \"second_out_gap\": 0.5\n","  },\n","  \"tp_set\": {\n","    \"non_tp\": 0,\n","    \"tp_type\": \"LIMIT\",\n","    \"static_tp\": 0,\n","    \"partial_num\": 1,\n","    \"partial_qty_divider\": 1.5\n","  },\n","  \"lvrg_set\": {\n","    \"leverage\": 2,\n","    \"static_lvrg\": 0,\n","    \"allow_float\": 0,\n","    \"target_pct\": 0.1,\n","    \"lvrg_rejection\": 0\n","  }\n","}\n","\n","config = EasyDict(param_dict)\n","# param_json = json.dumps(param_dict, indent=2)"],"execution_count":11,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"rrIGjmUzqU-D"},"source":["##### sync_funcs"]},{"cell_type":"code","metadata":{"id":"nzOYWA2kqZ0d","executionInfo":{"status":"ok","timestamp":1638944341141,"user_tz":-540,"elapsed":2357,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}}},"source":["class OrderSide:\n","    BUY = \"BUY\"\n","    SELL = \"SELL\"\n","    INVALID = None\n","\n","\n","def enlist_rtc(res_df, config):\n","\n","    # res_df[\"ema_1m\"] = ema(res_df[\"close\"], 200)\n","\n","    res_df = bb_level(res_df, '5m', 1)\n","    res_df = dc_level(res_df, '5m', 1)\n","    res_df = bb_level(res_df, '15m', 1)\n","    res_df = dc_level(res_df, '15m', 1)\n","    # res_df = bb_level(res_df, '30m', 1)\n","    # res_df = dc_level(res_df, '30m', 1)\n","\n","    res_df['short_rtc_1'] = res_df['bb_lower_%s' % config.loc_set.point.tpg_itv]\n","    res_df['short_rtc_0'] = res_df['dc_upper_%s' % config.loc_set.point.outg_itv]\n","\n","    res_df['long_rtc_1'] = res_df['bb_upper_%s' % config.loc_set.point.tpg_itv]\n","    res_df['long_rtc_0'] = res_df['dc_lower_%s' % config.loc_set.point.outg_itv]\n","    \n","    #      entry reversion    #\n","    if config.ep_set.short_entry_score > 0:      \n","      short_rtc_1_copy = res_df['short_rtc_1'].copy()\n","      res_df['short_rtc_1'] = res_df['long_rtc_1']\n","      res_df['long_rtc_1'] = short_rtc_1_copy\n","\n","      short_rtc_0_copy = res_df['short_rtc_0'].copy()\n","      res_df['short_rtc_0'] = res_df['long_rtc_0']\n","      res_df['long_rtc_0'] = short_rtc_0_copy\n","\n","    res_df['short_rtc_gap'] = abs(res_df['short_rtc_0'] - res_df['short_rtc_1'])\n","    res_df['long_rtc_gap'] = abs(res_df['long_rtc_1'] - res_df['long_rtc_0'])\n","\n","    res_df['h_short_rtc_1'] = res_df['bb_lower_%s' % config.loc_set.point.tpg_itv]\n","    # res_df['h_short_rtc_1'] = res_df['dc_lower_%s' % config.loc_set.point.tpg_itv]\n","    res_df['h_short_rtc_0'] = res_df['dc_upper_%s' % config.loc_set.point.tpg_itv]\n","\n","    res_df['h_long_rtc_1'] = res_df['bb_upper_%s' % config.loc_set.point.tpg_itv]\n","    # res_df['h_long_rtc_1'] = res_df['dc_upper_%s' % config.loc_set.point.tpg_itv]\n","    res_df['h_long_rtc_0'] = res_df['dc_lower_%s' % config.loc_set.point.tpg_itv]\n","\n","    #      entry reversion    #\n","    if config.ep_set.short_entry_score > 0:      \n","      h_short_rtc_1_copy = res_df['h_short_rtc_1'].copy()\n","      res_df['h_short_rtc_1'] = res_df['h_long_rtc_1']\n","      res_df['h_long_rtc_1'] = h_short_rtc_1_copy\n","\n","      h_short_rtc_0_copy = res_df['h_short_rtc_0'].copy()\n","      res_df['h_short_rtc_0'] = res_df['h_long_rtc_0']\n","      res_df['h_long_rtc_0'] = h_short_rtc_0_copy\n","\n","    res_df['h_short_rtc_gap'] = abs(res_df['h_short_rtc_0'] - res_df['h_short_rtc_1'])\n","    res_df['h_long_rtc_gap'] = abs(res_df['h_long_rtc_1'] - res_df['h_long_rtc_0'])   \n","\n","    res_df['short_dtk_1'] = res_df['bb_lower_%s' % config.loc_set.zone.dtk_itv]\n","    res_df['short_dtk_0'] = res_df['dc_upper_%s' % config.loc_set.zone.dtk_itv]\n","    res_df['short_dtk_gap'] = res_df['short_dtk_0'] - res_df['short_dtk_1']\n","\n","    res_df['long_dtk_1'] = res_df['bb_upper_%s' % config.loc_set.zone.dtk_itv]\n","    res_df['long_dtk_0'] = res_df['dc_lower_%s' % config.loc_set.zone.dtk_itv]\n","    res_df['long_dtk_gap'] = res_df['long_dtk_1'] - res_df['long_dtk_0']\n","\n","    res_df = dtk_plot(res_df, dtk_itv2='15m', hhtf_entry=15, use_dtk_line=config.loc_set.zone.use_dtk_line)\n","\n","    return res_df\n","\n","\n","\n","def enlist_tr(res_df, config, np_timeidx):\n","\n","\n","    res_df['entry'] = np.zeros(len(res_df))\n","    res_df['h_entry'] = np.zeros(len(res_df))\n","\n","    # -------- set ep level -------- #\n","\n","    #       limit ver.     #\n","    #        bb ep         #\n","    res_df['short_ep'] = res_df['h_short_rtc_1'] + res_df['h_short_rtc_gap'] * config.tr_set.ep_gap\n","    res_df['long_ep'] = res_df['h_long_rtc_1'] - res_df['h_long_rtc_gap'] * config.tr_set.ep_gap\n","\n","\n","    if config.tr_set.c_ep_gap != \"None\":\n","        res_df['short_ep_org'] = res_df['short_ep'].copy()\n","        res_df['long_ep_org'] = res_df['long_ep'].copy()\n","\n","        res_df['short_ep2'] = res_df['h_short_rtc_1'] + res_df['h_short_rtc_gap'] * config.tr_set.c_ep_gap\n","        res_df['long_ep2'] = res_df['h_long_rtc_1'] - res_df['h_long_rtc_gap'] * config.tr_set.c_ep_gap\n","\n","    res_df['short_spread_ep'] = res_df['bb_lower_5m'] #+ res_df['h_short_rtc_gap'] * config.loc_set.zone.spread_ep_gap\n","    res_df['long_spread_ep'] = res_df['bb_upper_5m']  #- res_df['h_long_rtc_gap'] * config.loc_set.zone.spread_ep_gap\n","\n","    #       market ver.     #\n","    if config.ep_set.entry_type == \"MARKET\":\n","        res_df['short_ep'] = res_df['close']\n","        res_df['long_ep'] = res_df['close']\n","\n","    # ---------------------------------------- short = -1 ---------------------------------------- #\n","    # ---------------- ep_time  ---------------- #\n","\n","    res_df['rsi_%s_shift' % config.loc_set.point.exp_itv] = res_df['rsi_%s' % config.loc_set.point.exp_itv].shift(config.loc_set.point.tf_entry)\n","\n","    res_df['entry'] = np.where((res_df['rsi_%s_shift' % config.loc_set.point.exp_itv] >= rsi_upper) &\n","                               (res_df['rsi_%s' % config.loc_set.point.exp_itv] < rsi_upper)\n","                               , res_df['entry'] - 1, res_df['entry'])\n","\n","    res_df['entry'] = np.where((res_df['entry'] < 0) &\n","                               (np_timeidx % config.loc_set.point.tf_entry == (config.loc_set.point.tf_entry - 1))\n","                               , res_df['entry'] - 1, res_df['entry'])\n","\n","    # res_df['entry'] = np.where((res_df['open'] >= res_df['cloud_bline_%s' % cb_itv]) &\n","    #                 # (res_df['close'].shift(config.loc_set.point.tf_entry * 1) <= res_df['cloud_bline_%s' % cb_itv]) &\n","    #                 (res_df['close'] < res_df['cloud_bline_%s' % cb_itv])\n","    #                 , res_df['entry'] - 1, res_df['entry'])\n","\n","    # res_df['entry'] = np.where((res_df['open'] >= res_df['bb_lower_1m']) &\n","    #                 # (res_df['close'].shift(config.loc_set.point.tf_entry * 1) <= res_df['bb_lower_1m']) &\n","    #                 (res_df['close'] < res_df['bb_lower_1m'])\n","    #                 , res_df['entry'] - 1, res_df['entry'])\n","\n","    res_df['h_entry'] = np.where(  # (res_df['open'] >= res_df['bb_lower_%s' % config.loc_set.zone.dtk_itv]) &\n","        (res_df['close'].shift(config.loc_set.point.htf_entry * 1) >= res_df['bb_lower_%s' % config.loc_set.zone.dtk_itv]) &\n","        (res_df['close'] < res_df['bb_lower_%s' % config.loc_set.zone.dtk_itv]) &\n","        (np_timeidx % config.loc_set.point.htf_entry == (config.loc_set.point.htf_entry - 1))\n","        , res_df['h_entry'] - 1, res_df['h_entry'])\n","\n","    # ---------------------------------------- long = 1 ---------------------------------------- #\n","    # ---------------------- ep_time ---------------------- #\n","\n","    res_df['entry'] = np.where((res_df['rsi_%s_shift' % config.loc_set.point.exp_itv] <= rsi_lower) &\n","                               (res_df['rsi_%s' % config.loc_set.point.exp_itv] > rsi_lower)\n","                               , res_df['entry'] + 1, res_df['entry'])\n","\n","    res_df['entry'] = np.where((res_df['entry'] > 0) &\n","                               (np_timeidx % config.loc_set.point.tf_entry == (config.loc_set.point.tf_entry - 1))\n","                               , res_df['entry'] + 1, res_df['entry'])\n","\n","    # res_df['entry'] = np.where((res_df['open'] <= res_df['cloud_bline_%s' % cb_itv]) &\n","    #                   # (res_df['close'].shift(config.loc_set.point.tf_entry * 1) >= res_df['cloud_bline_%s' % cb_itv]) &\n","    #                   (res_df['close'] > res_df['cloud_bline_%s' % cb_itv])\n","    #                 , res_df['entry'] + 1, res_df['entry'])\n","\n","    # res_df['entry'] = np.where((res_df['open'] <= res_df['bb_upper_1m']) &\n","    #                   # (res_df['close'].shift(config.loc_set.point.tf_entry * 1) >= res_df['bb_upper_1m']) &\n","    #                   (res_df['close'] > res_df['bb_upper_1m'])\n","    #                 , res_df['entry'] + 1, res_df['entry'])\n","\n","    res_df['h_entry'] = np.where(  # (res_df['open'] <= res_df['bb_upper_%s' % config.loc_set.zone.dtk_itv]) &\n","        (res_df['close'].shift(config.loc_set.point.htf_entry * 1) <= res_df['bb_upper_%s' % config.loc_set.zone.dtk_itv]) &\n","        (res_df['close'] > res_df['bb_upper_%s' % config.loc_set.zone.dtk_itv]) &\n","        (np_timeidx % config.loc_set.point.htf_entry == (config.loc_set.point.htf_entry - 1))\n","        , res_df['h_entry'] + 1, res_df['h_entry'])\n","\n","    # ------------------------------ rtc tp & out ------------------------------ #\n","    # --------------- bb rtc out --------------- #\n","\n","    if config.loc_set.point.outg_dc_period != \"None\":\n","        res_df['short_rtc_0'] = res_df['high'].rolling(config.loc_set.point.outg_dc_period).max()\n","        res_df['long_rtc_0'] = res_df['low'].rolling(config.loc_set.point.outg_dc_period).min()\n","\n","    res_df['short_out'] = res_df['short_rtc_0'] + res_df['short_rtc_gap'] * config.tr_set.out_gap\n","    res_df['long_out'] = res_df['long_rtc_0'] - res_df['long_rtc_gap'] * config.tr_set.out_gap\n","\n","    if config.tr_set.t_out_gap != \"None\":\n","        res_df['short_out_org'] = res_df['short_out'].copy()\n","        res_df['long_out_org'] = res_df['long_out'].copy()\n","\n","        res_df['short_out2'] = res_df['short_rtc_0'] + res_df['short_rtc_gap'] * config.tr_set.t_out_gap\n","        res_df['long_out2'] = res_df['long_rtc_0'] - res_df['long_rtc_gap'] * config.tr_set.t_out_gap\n","\n","    # ------------------------------ tp ------------------------------ #\n","    # --------------- bb rtc tp --------------- #\n","    res_df['short_tp'] = res_df['h_short_rtc_1'] - res_df['h_short_rtc_gap'] * config.tr_set.tp_gap\n","    res_df['long_tp'] = res_df['h_long_rtc_1'] + res_df['h_long_rtc_gap'] * config.tr_set.tp_gap\n","\n","    # --------------- set tp_line / dtk_line --------------- #\n","    # res_df['short_tp_1'] = np.where(res_df['h_entry'] == -1, res_df['short_rtc_1'], np.nan)\n","    # res_df['short_tp_1'] = ffill(res_df['short_tp_1'].values.reshape(1, -1)).reshape(-1, 1)\n","    # res_df['short_tp_gap'] = np.where(res_df['h_entry'] == -1, res_df['h_short_rtc_gap'], np.nan)  # ltf_gap ÏùÄ out ÏùÑ ÏúÑÌïú gap ÏûÑ\n","    # res_df['short_tp_gap'] = ffill(res_df['short_tp_gap'].values.reshape(1, -1)).reshape(-1, 1)\n","\n","    # res_df['long_tp_1'] = np.where(res_df['h_entry'] == 1, res_df['long_rtc_1'], np.nan)\n","    # res_df['long_tp_1'] = ffill(res_df['long_tp_1'].values.reshape(1, -1)).reshape(-1, 1)\n","    # res_df['long_tp_gap'] = np.where(res_df['h_entry'] == 1, res_df['h_long_rtc_gap'], np.nan)\n","    # res_df['long_tp_gap'] = ffill(res_df['long_tp_gap'].values.reshape(1, -1)).reshape(-1, 1)\n","\n","    # res_df['h_short_tp_1'] = np.where(res_df['h_entry'] == -1, res_df['h_short_rtc_1'], np.nan)\n","    # res_df['h_short_tp_1'] = ffill(res_df['h_short_tp_1'].values.reshape(1, -1)).reshape(-1, 1)\n","    # res_df['h_short_tp_gap'] = np.where(res_df['h_entry'] == -1, res_df['h_short_rtc_gap'], np.nan)\n","    # res_df['h_short_tp_gap'] = ffill(res_df['h_short_tp_gap'].values.reshape(1, -1)).reshape(-1, 1)\n","\n","    # res_df['h_long_tp_1'] = np.where(res_df['h_entry'] == 1, res_df['h_long_rtc_1'], np.nan)\n","    # res_df['h_long_tp_1'] = ffill(res_df['h_long_tp_1'].values.reshape(1, -1)).reshape(-1, 1)\n","    # res_df['h_long_tp_gap'] = np.where(res_df['h_entry'] == 1, res_df['h_long_rtc_gap'], np.nan)\n","    # res_df['h_long_tp_gap'] = ffill(res_df['h_long_tp_gap'].values.reshape(1, -1)).reshape(-1, 1)\n","   \n","\n","    if config.loc_set.zone.use_dtk_line:\n","      res_df['short_dtk_1'] = np.where(res_df['h_entry'] == -1, res_df['short_dtk_1'], np.nan)\n","      res_df['short_dtk_1'] = ffill(res_df['short_dtk_1'].values.reshape(1, -1)).reshape(-1, 1)\n","      res_df['short_dtk_gap'] = np.where(res_df['h_entry'] == -1, res_df['short_dtk_gap'], np.nan)\n","      res_df['short_dtk_gap'] = ffill(res_df['short_dtk_gap'].values.reshape(1, -1)).reshape(-1, 1)\n","\n","      res_df['long_dtk_1'] = np.where(res_df['h_entry'] == 1, res_df['long_dtk_1'], np.nan)\n","      res_df['long_dtk_1'] = ffill(res_df['long_dtk_1'].values.reshape(1, -1)).reshape(-1, 1)\n","      res_df['long_dtk_gap'] = np.where(res_df['h_entry'] == 1, res_df['long_dtk_gap'], np.nan)\n","      res_df['long_dtk_gap'] = ffill(res_df['long_dtk_gap'].values.reshape(1, -1)).reshape(-1, 1)\n","\n","    res_df['dc_upper_v2'] = res_df['high'].rolling(config.loc_set.zone.dc_period).max()\n","    res_df['dc_lower_v2'] = res_df['low'].rolling(config.loc_set.zone.dc_period).min()\n","    \n","    res_df['zone_dc_upper_v2'] = res_df['high'].rolling(config.loc_set.zone.zone_dc_period).max()\n","    res_df['zone_dc_lower_v2'] = res_df['low'].rolling(config.loc_set.zone.zone_dc_period).min()\n","\n","    return res_df\n","\n","\n","\n","\n","def short_ep_loc(res_df, config, i, show_detail=True):\n","\n","    # ------- param init ------- #\n","    open_side = None\n","\n","    mr_const_cnt = 0\n","    mr_score = 0\n","    zone = 'n'\n","\n","\n","    if config.ep_set.entry_type == 'MARKET':\n","        if config.tp_set.tp_type != 'MARKET':\n","            tp_fee = config.trader_set.market_fee + config.trader_set.limit_fee\n","        else:\n","            tp_fee = config.trader_set.market_fee + config.trader_set.market_fee\n","        out_fee = config.trader_set.market_fee + config.trader_set.market_fee\n","    else:\n","        if config.tp_set.tp_type != 'MARKET':\n","            tp_fee = config.trader_set.limit_fee + config.trader_set.limit_fee\n","        else:\n","            tp_fee = config.trader_set.limit_fee + config.trader_set.market_fee\n","        out_fee = config.trader_set.limit_fee + config.trader_set.market_fee\n","\n","\n","    # -------------- tr scheduling -------------- #\n","    if config.loc_set.zone.short_spread != \"None\":\n","\n","      mr_const_cnt += 1\n","\n","      tr = (res_df['bb_base_5m'].iloc[i] - res_df['bb_lower_5m'].iloc[i] - tp_fee * res_df['bb_base_5m'].iloc[\n","      # tr = (res_df['bb_base_5m'].iloc[i] - res_df['bb_lower_5m'].iloc[i] - out_fee * res_df['bb_base_5m'].iloc[\n","          # i]) / (res_df['bb_base_5m'].iloc[i] - res_df['bb_lower_5m'].iloc[i] + tp_fee *\n","          i]) / (res_df['bb_base_5m'].iloc[i] - res_df['bb_lower_5m'].iloc[i] + out_fee *\n","                  res_df['bb_base_5m'].iloc[i])\n","      # tr = (res_df['bb_base_15m'].iloc[i] - res_df['bb_lower_5m'].iloc[i] - tp_fee * res_df['bb_base_15m'].iloc[\n","      #     i]) / (res_df['bb_base_15m'].iloc[i] - res_df['bb_lower_5m'].iloc[i] + out_fee *\n","      #             res_df['bb_base_15m'].iloc[i])\n","          \n","      # tr = (res_df['dc_upper_5m'].iloc[i] - res_df['bb_lower_5m'].iloc[i] - tp_fee * res_df['bb_lower_5m'].iloc[\n","      #     i]) / (res_df['dc_upper_5m'].iloc[i] - res_df['bb_lower_5m'].iloc[i] + out_fee *\n","      #             res_df['bb_lower_5m'].iloc[i])\n","      # tr = (res_df['short_rtc_gap'].iloc[i] * (0.443) - tp_fee * res_df['short_ep'].iloc[\n","      #     i]) / (res_df['short_rtc_gap'].iloc[i] * (0.417) + out_fee * res_df['short_ep'].iloc[i])\n","\n","      # tr = (res_df['dc_upper_15m'].iloc[i] - res_df['dc_lower_5m'].iloc[i] - tp_fee * res_df['dc_lower_5m'].iloc[\n","      #     i]) / (res_df['dc_upper_15m'].iloc[i] - res_df['dc_lower_5m'].iloc[i] + out_fee *\n","      #             res_df['dc_lower_5m'].iloc[i])\n","      # tr = ((res_df['dc_upper_15m'].iloc[i] - res_df['dc_lower_5m'].iloc[i])/2 - tp_fee * res_df['dc_lower_5m'].iloc[\n","      #     i]) / ((res_df['dc_upper_15m'].iloc[i] - res_df['dc_lower_5m'].iloc[i])/2 + out_fee *\n","      #             res_df['dc_lower_5m'].iloc[i])\n","      \n","      if tr >= config.loc_set.zone.short_spread:\n","          mr_score += 1\n","\n","      if show_detail:\n","          print(\"tr :\", tr)\n","\n","    # -------------- dtk -------------- #\n","    if config.loc_set.zone.dt_k != \"None\":\n","\n","      mr_const_cnt += 1\n","      # if res_df['dc_lower_%s' % config.loc_set.zone.dtk_dc_itv].iloc[i] >= res_df['short_rtc_1'].iloc[i] - res_df['h_short_rtc_gap'].iloc[i] * config.loc_set.zone.dt_k:\n","      #     dtk_v1 & v2 platform     #\n","      if config.loc_set.zone.dtk_dc_itv != \"None\":\n","          dc = res_df['dc_lower_%s' % config.loc_set.zone.dtk_dc_itv].iloc[i]\n","          dt_k = res_df['short_dtk_1'].iloc[i] - res_df['short_dtk_gap'].iloc[i] * config.loc_set.zone.dt_k\n","          if dc >= dt_k:\n","              mr_score += 1\n","\n","              #     dc_v2   #\n","      else:\n","          dc = res_df['dc_lower_v2'].iloc[i]\n","          dt_k = res_df['short_dtk_1'].iloc[i] - res_df['short_dtk_gap'].iloc[i] * config.loc_set.zone.dt_k\n","          if dc >= dt_k:\n","              # if res_df['dc_lower_v2'].iloc[i] >= res_df['short_dtk_1'].iloc[i] - res_df['short_dtk_gap'].iloc[i] * config.loc_set.zone.dt_k and \\\n","              # res_df['dc_upper_v2'].iloc[i] <= res_df['long_dtk_1'].iloc[i] + res_df['long_dtk_gap'].iloc[i] * config.loc_set.zone.dt_k:\n","\n","              mr_score += 1\n","\n","      if show_detail:\n","          print(\"dc :\", dc)\n","          print(\"dt_k :\", dt_k)\n","\n","\n","    # -------------- zone rejection  -------------- #\n","    if config.loc_set.zone.zone_rejection:\n","    \n","      #       by bb and dc - rsi      # \n","      # mr_const_cnt += 1\n","      # if res_df['bb_base_%s' % config.loc_set.zone.bbz_itv].iloc[i] <= res_df['dc_upper_1m'].iloc[i] <= res_df['bb_upper_%s' % config.loc_set.zone.bbz_itv].iloc[i]:\n","      #   mr_score += 1\n","        \n","        #       by bb       # \n","      mr_const_cnt += 1      \n","      # if res_df['bb_upper_5m'].iloc[i] < res_df['bb_base_%s' % config.loc_set.zone.bbz_itv].iloc[i]:      \n","\n","      # if res_df['close'].iloc[i] < res_df['bb_lower_%s' % config.loc_set.zone.bbz_itv].iloc[i]:   # org\n","      # if res_df['close'].iloc[i] > res_df['bb_lower_%s' % config.loc_set.zone.bbz_itv].iloc[i]:  # inv\n","      # if res_df['close'].iloc[i] > res_df['bb_upper_%s' % config.loc_set.zone.bbz_itv].iloc[i]:    \n","      if res_df['close'].iloc[i] > res_df['bb_upper2_%s' % config.loc_set.zone.bbz_itv].iloc[i]:\n","\n","        mr_score += 1\n","\n","        #       by ema       # \n","      mr_const_cnt += 1      \n","      # if res_df['short_ep'].iloc[i] < res_df['ema_5m'].iloc[i]:\n","      if res_df['close'].iloc[i] < res_df['ema_5m'].iloc[i]:\n","        mr_score += 1\n","\n","        #       by zone_dtk       #\n","      # mr_const_cnt += 1\n","      # if res_df['zone_dc_upper_v2'].iloc[i] < res_df['long_dtk_plot_1'].iloc[i] + res_df['long_dtk_plot_gap'].iloc[\n","      #     i] * config.loc_set.zone.zone_dt_k:\n","      #   mr_score += 1\n","\n","\n","    # -------------- zoning -------------- #\n","    if config.tr_set.c_ep_gap != \"None\":\n","\n","        #       by bb       # \n","        # if res_df['close'].iloc[i] > res_df['bb_lower_%s' % config.loc_set.zone.bbz_itv].iloc[i]:\n","\n","        #       by zone_dtk       #\n","\n","          #         c_zone        #\n","        if res_df['zone_dc_upper_v2'].iloc[i] > res_df['long_dtk_plot_1'].iloc[i] + res_df['long_dtk_plot_gap'].iloc[\n","            i] * config.loc_set.zone.zone_dt_k:\n","\n","            if config.ep_set.static_ep:\n","              res_df['short_ep'].iloc[i] = res_df['short_ep2'].iloc[i]\n","            else:\n","              res_df['short_ep'] = res_df['short_ep2']\n","              \n","            if config.out_set.static_out:\n","              res_df['short_out'].iloc[i] = res_df['short_out_org'].iloc[i]\n","            else:\n","              res_df['short_out'] = res_df['short_out_org']\n","\n","            zone = 'c'\n","\n","          #         t_zone        #\n","        else:\n","\n","          # mr_const_cnt += 1   # zone_rejection - temporary\n","\n","          if config.ep_set.static_ep:\n","            res_df['short_ep'].iloc[i] = res_df['short_ep_org'].iloc[i]\n","          else:\n","            res_df['short_ep'] = res_df['short_ep_org']\n","\n","          if config.out_set.static_out:\n","            res_df['short_out'].iloc[i] = res_df['short_out2'].iloc[i]\n","          else:\n","            res_df['short_out'] = res_df['short_out2']\n","\n","          zone = 't'\n","\n","    if mr_const_cnt == mr_score:\n","        open_side = OrderSide.SELL\n","\n","    return res_df, open_side, zone\n","\n","\n","\n","def long_ep_loc(res_df, config, i, show_detail=True):\n","\n","    # ------- param init ------- #\n","    open_side = None\n","\n","    mr_const_cnt = 0\n","    mr_score = 0\n","    zone = 'n'\n","\n","\n","    if config.ep_set.entry_type == 'MARKET':\n","        if config.tp_set.tp_type != 'MARKET':\n","            tp_fee = config.trader_set.market_fee + config.trader_set.limit_fee\n","        else:\n","            tp_fee = config.trader_set.market_fee + config.trader_set.market_fee\n","        out_fee = config.trader_set.market_fee + config.trader_set.market_fee\n","    else:\n","        if config.tp_set.tp_type != 'MARKET':\n","            tp_fee = config.trader_set.limit_fee + config.trader_set.limit_fee\n","        else:\n","            tp_fee = config.trader_set.limit_fee + config.trader_set.market_fee\n","        out_fee = config.trader_set.limit_fee + config.trader_set.market_fee\n","\n","\n","    # -------------- tr scheduling -------------- #       \n","    if config.loc_set.zone.long_spread != \"None\":\n","\n","      mr_const_cnt += 1\n","      \n","      # tr = (res_df['bb_upper_5m'].iloc[i] - res_df['bb_base_5m'].iloc[i] - tp_fee * res_df['bb_base_5m'].iloc[\n","      #     i]) / (res_df['bb_base_5m'].iloc[i] - res_df['bb_lower_5m'].iloc[i] + out_fee *\n","      #             res_df['bb_base_5m'].iloc[i])\n","      # tr = (res_df['bb_upper_5m'].iloc[i] - res_df['bb_base_15m'].iloc[i] - tp_fee * res_df['bb_base_15m'].iloc[\n","      #     i]) / (res_df['bb_upper_5m'].iloc[i] - res_df['bb_base_15m'].iloc[i] + out_fee *\n","      #             res_df['bb_base_15m'].iloc[i])\n","          \n","      tr = (res_df['bb_upper_5m'].iloc[i] - res_df['dc_lower_5m'].iloc[i] - tp_fee * res_df['bb_upper_5m'].iloc[\n","      # tr = (res_df['bb_upper_5m'].iloc[i] - res_df['dc_lower_5m'].iloc[i] - out_fee * res_df['bb_upper_5m'].iloc[\n","          # i]) / (res_df['bb_upper_5m'].iloc[i] - res_df['dc_lower_5m'].iloc[i] + tp_fee *\n","          i]) / (res_df['bb_upper_5m'].iloc[i] - res_df['dc_lower_5m'].iloc[i] + out_fee *\n","                  res_df['bb_upper_5m'].iloc[i])          \n","      # tr = (res_df['long_rtc_gap'].iloc[i] * (0.443) - tp_fee * res_df['long_ep'].iloc[\n","      #     i]) / (res_df['long_rtc_gap'].iloc[i] * (0.417) + out_fee * res_df['long_ep'].iloc[i])\n","\n","      # tr = (res_df['dc_upper_5m'].iloc[i] - res_df['dc_lower_15m'].iloc[i] - tp_fee * res_df['dc_upper_5m'].iloc[\n","      #     i]) / (res_df['dc_upper_5m'].iloc[i] - res_df['dc_lower_15m'].iloc[i] + out_fee *\n","      #             res_df['dc_upper_5m'].iloc[i])\n","      # tr = ((res_df['dc_upper_5m'].iloc[i] - res_df['dc_lower_15m'].iloc[i])/2 - tp_fee * res_df['dc_upper_5m'].iloc[\n","      #     i]) / ((res_df['dc_upper_5m'].iloc[i] - res_df['dc_lower_15m'].iloc[i])/2 + out_fee *\n","      #             res_df['dc_upper_5m'].iloc[i])\n","          \n","      if tr >= config.loc_set.zone.long_spread:\n","          mr_score += 1\n","\n","      if show_detail:\n","          print(\"tr :\", tr)\n","    \n","\n","    # -------------- dtk -------------- #\n","    if config.loc_set.zone.dt_k != \"None\":  \n","\n","      mr_const_cnt += 1\n","      # if res_df['dc_upper_%s' % config.loc_set.zone.dtk_dc_itv].iloc[i] <= res_df['long_rtc_1'].iloc[i] + res_df['long_rtc_gap'].iloc[i] * config.loc_set.zone.dt_k:          \n","          #     dtk_v1 & v2 platform    #\n","      if config.loc_set.zone.dtk_dc_itv != \"None\":\n","        dc = res_df['dc_upper_%s' % config.loc_set.zone.dtk_dc_itv].iloc[i]\n","        dt_k = res_df['long_dtk_1'].iloc[i] + res_df['long_dtk_gap'].iloc[i] * config.loc_set.zone.dt_k\n","        if dc <= dt_k:  \n","          mr_score += 1  \n","\n","      else:\n","          #     dc_v2     #\n","        dc = res_df['dc_upper_v2'].iloc[i]\n","        dt_k = res_df['long_dtk_1'].iloc[i] + res_df['long_dtk_gap'].iloc[i] * config.loc_set.zone.dt_k\n","        if dc <= dt_k:  \n","        # if res_df['dc_upper_v2'].iloc[i] >= res_df['long_dtk_1'].iloc[i] + res_df['long_dtk_gap'].iloc[i] * config.loc_set.zone.dt_k:\n","\n","        # if res_df['dc_upper_v2'].iloc[i] <= res_df['long_dtk_1'].iloc[i] + res_df['long_dtk_gap'].iloc[i] * config.loc_set.zone.dt_k and \\\n","        #   res_df['dc_lower_v2'].iloc[i] >= res_df['short_dtk_1'].iloc[i] - res_df['short_dtk_gap'].iloc[i] * config.loc_set.zone.dt_k:\n","\n","          mr_score += 1  \n","      \n","      if show_detail:\n","          print(\"dc :\", dc)\n","          print(\"dt_k :\", dt_k)\n","\n","    \n","    # -------------- zone rejection  -------------- #\n","    if config.loc_set.zone.zone_rejection:\n","      \n","      # #       by bb and dc - rsi      # \n","      # mr_const_cnt += 1\n","      # if res_df['bb_base_%s' % config.loc_set.zone.bbz_itv].iloc[i] >= res_df['dc_lower_1m'].iloc[i] >= res_df['bb_lower_%s' % config.loc_set.zone.bbz_itv].iloc[i]:        \n","      #   mr_score += 1                   \n","      \n","        #       by bb       #       \n","      mr_const_cnt += 1\n","      # if  res_df['bb_lower_5m'].iloc[i] > res_df['bb_base_%s' % config.loc_set.zone.bbz_itv].iloc[i]:\n","\n","      # if res_df['close'].iloc[i] > res_df['bb_upper_%s' % config.loc_set.zone.bbz_itv].iloc[i]:    # org\n","      # if res_df['close'].iloc[i] < res_df['bb_upper_%s' % config.loc_set.zone.bbz_itv].iloc[i]:  # inv\n","      # if res_df['close'].iloc[i] < res_df['bb_lower_%s' % config.loc_set.zone.bbz_itv].iloc[i]:\n","      if res_df['close'].iloc[i] < res_df['bb_lower2_%s' % config.loc_set.zone.bbz_itv].iloc[i]:\n","        mr_score += 1      \n","\n","        #       by ema       #       \n","      mr_const_cnt += 1\n","      # if  res_df['long_ep'].iloc[i] > res_df['ema_5m'].iloc[i]:\n","      if  res_df['close'].iloc[i] > res_df['ema_5m'].iloc[i]:\n","        mr_score += 1                \n","\n","\n","        #       by zone_dtk       #\n","      # mr_const_cnt += 1\n","      # if res_df['zone_dc_lower_v2'].iloc[i] > res_df['short_dtk_plot_1'].iloc[i] - res_df['short_dtk_plot_gap'].iloc[i] * config.loc_set.zone.zone_dt_k:      \n","      #   mr_score += 1                   \n","\n","\n","    # -------------- zoning -------------- #\n","    if config.tr_set.c_ep_gap != \"None\":\n","        #       by bb       # \n","      # if res_df['close'].iloc[i] < res_df['bb_upper_%s' % config.loc_set.zone.bbz_itv].iloc[i]:\n","\n","        #       by zone_dtk       #\n","\n","          #         c_zone        #\n","      if res_df['zone_dc_lower_v2'].iloc[i] < res_df['short_dtk_plot_1'].iloc[i] - res_df['short_dtk_plot_gap'].iloc[i] * config.loc_set.zone.zone_dt_k:\n","        \n","        if config.ep_set.static_ep:\n","          res_df['long_ep'].iloc[i] = res_df['long_ep2'].iloc[i]\n","        else:\n","          res_df['long_ep'] = res_df['long_ep2']\n","          \n","        if config.out_set.static_out:\n","          res_df['long_out'].iloc[i] = res_df['long_out_org'].iloc[i]\n","        else:\n","          res_df['long_out'] = res_df['long_out_org']\n","\n","        zone = 'c'\n","\n","        # mr_const_cnt += 1\n","        # dc_lb_period = 100\n","        # if np.sum((res_df['dc_upper_15m'] > res_df['dc_upper_15m'].shift(15)).iloc[i - dc_lb_period:i]) == 0:\n","        #   mr_score += 1\n","        \n","\n","          #         t_zone        #\n","      else:\n","        \n","        # mr_const_cnt += 1   # zone_rejection - temporary\n","\n","        if config.ep_set.static_ep:\n","          res_df['long_ep'].iloc[i] = res_df['long_ep_org'].iloc[i]\n","        else:\n","          res_df['long_ep'] = res_df['long_ep_org']\n","\n","        if config.out_set.static_out:\n","          res_df['long_out'].iloc[i] = res_df['long_out2'].iloc[i]\n","        else:\n","          res_df['long_out'] = res_df['long_out2']\n","\n","        zone = 't'\n","\n","\n","    if mr_const_cnt == mr_score:\n","        open_side = OrderSide.BUY\n","\n","    return res_df, open_side, zone"],"execution_count":5,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"rLI8unIyroiC"},"source":["##### run"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"TdAn2bHHBWMF","executionInfo":{"status":"ok","timestamp":1638946722915,"user_tz":-540,"elapsed":35734,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"4ca1495a-229c-4b2e-dad9-881eccbc6d6a"},"source":["# ------- tp / out fee calc ------- #\n","if config.ep_set.entry_type == 'MARKET':\n","  if config.tp_set.tp_type != 'MARKET':   # Todo : Ïã§Ï†úÎ°ú, tp_fee Í∞Ä ÏïÑÎãå spread const. Î•º ÏúÑÌïú spread_fee1 ÏûÑ (Ï∂îÌõÑ ÏàòÏ†ï Í∂åÍ≥†)\n","    tp_fee = config.trader_set.market_fee + config.trader_set.limit_fee\n","  else:\n","    tp_fee = config.trader_set.market_fee + config.trader_set.market_fee\n","  out_fee = config.trader_set.market_fee + config.trader_set.market_fee\n","else:\n","  if config.tp_set.tp_type != 'MARKET':\n","    tp_fee = config.trader_set.limit_fee + config.trader_set.limit_fee\n","  else:\n","    tp_fee = config.trader_set.limit_fee + config.trader_set.market_fee\n","  out_fee = config.trader_set.limit_fee + config.trader_set.market_fee\n","  \n","\n","# ------- inversion set ------- #\n","inversion = 0\n","fdist_thresh = 1\n","\n","title_position = (0.30, 1)\n","show_plot = 1\n","show_detail = 0\n","\n","for key in ftr_list:\n","\n","  if config.trader_set.symbol in key:\n","    pass\n","  else:\n","    continue\n","\n","  # break\n","\n","  res_df = pd.read_feather(os.path.join(ftr_path, key), columns=None, use_threads=True).set_index(\"index\")#.loc[pd.to_datetime(\"2021-07-10 04:59:59.999000\"):]\n","  print(key, \"loaded !\")\n","  \n","  # print(\"res_df.columns :\", res_df.columns)  \n","  # print(res_df.tail(100))\n","  # print(\"res_df.index[0] :\", res_df.index[0])\n","  # # print(\"intmin(res_df.index[0]) :\", intmin(res_df.index[0]))\n","  # break\n","\n","  # -------------------- additional indi. -------------------- #    \n","  np_timeidx = np.array(list(map(lambda x : intmin(x), res_df.index)))\n","  \n","  res_df = enlist_rtc(res_df, config)\n","\n","  #   temp param    #\n","  allow_rsi_touch = 1\n","  rsi_gap = 5\n","\n","  rsi_upper = 70\n","  rsi_lower = 30\n","\n","  early_out_tpg = 0.36\n","\n","  itv_num_list = [1, 3, 5, 15]\n","\n","  itv_list = ['15m', '30m', '1h', '4h']\n","  # itv_list = ['3m', '5m', '15m', '30m', '1h', '4h']\n","\n","  # x_val_list = np.arange(0.5, 0., -0.05)     # prcn 2\n","  # x_val_list = np.arange(0.95, 0.943, -0.001)    # prcn 3\n","  # x_val_list = np.arange(0.944, 0.945, 0.0001)    # prcn 4\n","  x_val_list = np.arange(1.1, 3, 0.3)\n","\n","  y_val_cols = [\"wr\", \"frq\", \"dpf\", \"min_pr\", \"acc_pr\", \"sum_pr\", \"liqd\", \"tr\", \"dr\", \"sr\"]\n","  # y_rev_val_cols = [\"wr\", \"min_pr\", \"acc_pr\", \"sum_pr\"]\n","  y_rev_val_cols = [\"wr\", \"min_pr\", \"acc_pr\", \"sum_pr\", \"sr\"]\n","\n","  survey_df = pd.DataFrame(index=x_val_list, columns=y_val_cols)\n","  short_survey_df = pd.DataFrame(index=x_val_list, columns=y_val_cols)\n","  long_survey_df = pd.DataFrame(index=x_val_list, columns=y_val_cols)\n","  rev_survey_df = pd.DataFrame(index=x_val_list, columns=y_rev_val_cols)\n","  rev_short_survey_df = pd.DataFrame(index=x_val_list, columns=y_rev_val_cols)\n","  rev_long_survey_df = pd.DataFrame(index=x_val_list, columns=y_rev_val_cols)\n","\n","  for survey_i, just_loop in enumerate(range(1)):\n","  # for survey_i, config.loc_set.zone.short_spread in enumerate(x_val_list): \n","  # for survey_i, config.loc_set.zone.long_spread in enumerate(x_val_list): \n","  # for survey_i, config.loc_set.zone.dt_k in enumerate(x_val_list):\n","  # for survey_i, config.loc_set.zone.dc_period in enumerate(x_val_list):\n","  # for survey_i, config.loc_set.zone.ei_k in enumerate(x_val_list):   \n","  # for survey_i, config.loc_set.zone.dr_error in enumerate(x_val_list): \n","  # for survey_i, config.loc_set.point.tf_entry in enumerate(x_val_list):\n","  # for survey_i, config.loc_set.zone.bbz_itv in enumerate(itv_list):\n","  # for survey_i, config.tr_set.ep_gap in enumerate(x_val_list): \n","  # for survey_i, config.tr_set.out_gap in enumerate(x_val_list): \n","  # for survey_i, config.tr_set.tp_gap in enumerate(x_val_list): \n","  # for survey_i, config.lvrg_set.leverage in enumerate(x_val_list):\n","  # for survey_i, config.lvrg_set.target_pct in enumerate(x_val_list):   \n","  # for survey_i, outg_dc_itv_num in enumerate(x_val_list): \n","  # for survey_i, exp_itv in enumerate(itv_list): \n","  # for survey_i, zone_dt_k in enumerate(x_val_list): \n","  # for survey_i, t_out_gap in enumerate(x_val_list): \n","  # for survey_i, zone_dc_period in enumerate(x_val_list): \n","  # for survey_i, early_out_tpg in enumerate(x_val_list): \n","  \n","    start_0 = time.time()\n","\n","    print(\"config.loc_set.point.exp_itv :\", config.loc_set.point.exp_itv)\n","    print(\"config.loc_set.point.tpg_itv :\", config.loc_set.point.tpg_itv)\n","    print(\"config.loc_set.point.outg_itv :\", config.loc_set.point.outg_itv)\n","    print(\"config.loc_set.point.outg_dc_period :\", config.loc_set.point.outg_dc_period)\n","    print(\"config.loc_set.zone.dtk_itv :\", config.loc_set.zone.dtk_itv)\n","    print(\"-----------------------------------\")    \n","    # print(\"dtk_dc_itv :\", dtk_dc_itv)    \n","    # print(\"config.loc_set.dtk_dc_itv_num :\", config.loc_set.dtk_dc_itv_num :\",)\n","    print(\"config.loc_set.zone.short_spread :\", config.loc_set.zone.short_spread)\n","    print(\"config.loc_set.zone.long_spread :\", config.loc_set.zone.long_spread)\n","    print(\"config.loc_set.zone.dt_k :\", config.loc_set.zone.dt_k)\n","    print(\"config.loc_set.zone.ei_k :\", config.loc_set.zone.ei_k)\n","    print(\"config.loc_set.zone.dc_period :\", config.loc_set.zone.dc_period)\n","    print(\"config.loc_set.zone.use_dtk_line :\", config.loc_set.zone.use_dtk_line)\n","\n","    print(\"config.loc_set.zone.zone_rejection :\", config.loc_set.zone.zone_rejection)\n","    print(\"config.loc_set.zone.bbz_itv :\", config.loc_set.zone.bbz_itv)\n","    print(\"config.loc_set.zone.zone_dt_k :\", config.loc_set.zone.zone_dt_k)\n","    print(\"config.loc_set.zone.zone_dc_period :\", config.loc_set.zone.zone_dc_period)\n","    # print(\"config.loc_set.open_shift :\", config.loc_set.open_shift)\n","    print(\"-----------------------------------\")\n","    # print(\"config.ep_set.dr_error :\", config.ep_set.dr_error)\n","    print(\"config.loc_set.point.tf_entry :\", config.loc_set.point.tf_entry)\n","    print(\"config.loc_set.point.htf_entry :\", config.loc_set.point.htf_entry)\n","    print(\"config.tr_set.ep_gap :\", config.tr_set.ep_gap)\n","    print(\"config.tr_set.out_gap :\", config.tr_set.out_gap)\n","    print(\"config.tr_set.tp_gap :\", config.tr_set.tp_gap)  \n","    print(\"config.tr_set.c_ep_gap :\", config.tr_set.c_ep_gap)\n","    print(\"config.tr_set.t_out_gap :\", config.tr_set.t_out_gap)\n","    print(\"-----------------------------------\")\n","    print(\"config.lvrg_set.leverage :\", config.lvrg_set.leverage)\n","    print(\"config.lvrg_set.target_pct :\", config.lvrg_set.target_pct)\n","    \n","    # print(\"early_out_tpg :\", early_out_tpg)\n","\n","    # res_df['sma_1m'] = res_df['close'].rolling(sma_period).mean()  \n","    # res_df = bb_level(res_df, '5m', bbg)\n","    \n","    res_df = enlist_tr(res_df, config, np_timeidx)\n","\n","    # --------------- set partial tp --------------- #\n","    short_tps = [res_df['short_tp']]\n","    long_tps = [res_df['long_tp']]\n","\n","    # short_tps = [short_tp2]\n","    # long_tps = [long_tp2]\n","\n","    # short_tps = [short_tp2, short_tp] # org\n","    # long_tps = [long_tp2, long_tp]\n","    \n","    # short_tps = [short_tp, short_tp2]\n","    # long_tps = [long_tp, long_tp2]\n","\n","\n","\n","    #       trading : Ïó¨Í∏∞ÎèÑ Ï≤¥Í≤∞ Í≤∞Í≥ºÏóê ÎåÄÌï¥ Î¨òÏÇ¨Ìï®       #\n","    trade_list = []\n","    h_trade_list = []\n","    leverage_list = []\n","    fee_list = []\n","    short_fee_list = []\n","    long_fee_list = []\n","    open_list = []\n","    zone_list = []\n","    side_list = []\n","\n","    tp_ratio_list = []\n","    short_tp_ratio_list = []\n","    long_tp_ratio_list = []\n","\n","    dr_list = []\n","    short_dr_list = []\n","    long_dr_list = []\n","\n","    liqd_list = []\n","    short_liqd_list = []\n","    long_liqd_list = []\n","\n","    nontp_liqd_list = []\n","    nontp_short_liqd_list = []\n","    nontp_long_liqd_list = []\n","\n","    nontp_pr_list = []\n","    nontp_short_pr_list = []\n","    nontp_long_pr_list = []\n","\n","    nontp_short_indexs = []\n","    nontp_long_indexs = []\n","\n","    nontp_short_ep_list = []\n","    nontp_long_ep_list = []\n","\n","    pr_list = []\n","    long_list = []\n","    short_list = []\n","\n","    h_pr_list = []\n","    h_long_list = []\n","    h_short_list = []\n","\n","    ep_tp_list = []\n","    h_ep_tp_list = []\n","    tp_state_list = []\n","\n","    i = 0\n","    while 1:\n","    # for i in range(len(res_df)):  \n","    \n","      # ------- fee init ------- #\n","      if config.ep_set.entry_type == 'LIMIT':\n","        fee = config.trader_set.limit_fee\n","      else:\n","        fee = config.trader_set.market_fee\n","\n","\n","      if res_df['entry'][i] == config.ep_set.short_entry_score: \n","\n","        # print(\"i in short :\", i)\n","\n","        initial_i = i\n","\n","        if config.out_set.static_out:\n","          p_i = initial_i\n","        else:\n","          p_i = i\n","\n","\n","        res_df, open_side_str, zone = short_ep_loc(res_df, config, i, show_detail)\n","\n","\n","        # -------------- mr_score summation -------------- #\n","        if open_side_str is not None:          \n","          pass\n","\n","        else:\n","          i += 1\n","          if i >= len(res_df):\n","            break\n","          continue\n","\n","\n","        ep_j = initial_i\n","        out_j = initial_i\n","\n","        # -------------- limit waiting : limit_out -------------- #\n","\n","        if config.ep_set.entry_type == \"LIMIT\":\n","\n","          allow_ep_in = 0\n","          entry_done = 0\n","          entry_open = 0\n","          prev_sar = None\n","\n","          # for e_j in range(i, len(res_df)): # entry_signal Ïù¥ open Í∏∞Ï§Ä (Ìï¥Îãπ bar ÏóêÏÑú Ï≤¥Í≤∞ Í∞ÄÎä•Ìï®)\n","          if i + 1 >= len(res_df):  # i should be checked if e_j starts from i+1\n","            break\n","          for e_j in range(i + 1, len(res_df)): # entry signalÏù¥ close Í∏∞Ï§Ä Ïùº Í≤ΩÏö∞\n","        \n","            if not config.ep_set.static_ep:\n","              ep_j = e_j\n","              out_j = e_j\n","\n","            if config.tp_set.static_tp:\n","              # if config.ep_set.tpout_onexec:\n","              #   tp_j = e_j\n","              # else:\n","                tp_j = initial_i\n","            else:\n","              tp_j = e_j  \n","\n","            #             1. ep ÏÑ§Ï†ï \n","            # -------------- np.inf ep -------------- #\n","            # if short_ep.iloc[initial_i] == np.inf:\n","            #   break\n","\n","\n","            #     1. check ep_out     #\n","            if config.loc_set.zone.ei_k != \"None\":\n","\n","              # if res_df['low'].iloc[e_j] <= res_df['h_short_rtc_1'].iloc[tp_j] - res_df['h_short_rtc_gap'].iloc[tp_j] * config.loc_set.zone.ei_k:\n","              if res_df['low'].iloc[e_j] <= res_df['short_tp'].iloc[tp_j]: # ep_out : tp_done\n","              # if np_timeidx[e_j] % config.loc_set.point.tf_entry == config.loc_set.point.tf_entry - 1:\n","                break\n","\n","              # elif (res_df['rsi_%s' % config.loc_set.point.exp_itv].iloc[e_j - 1] >= rsi_lower) & \\\n","              #                  (res_df['rsi_%s' % config.loc_set.point.exp_itv].iloc[e_j] < rsi_lower):\n","              #   break\n","\n","            #     2. second ep_loc.point\n","            if (res_df['dc_upper_1m'].iloc[e_j - 1] <= res_df['dc_upper_15m'].iloc[e_j]) & \\\n","                (res_df['dc_upper_15m'].iloc[e_j - 1] != res_df['dc_upper_15m'].iloc[e_j]):\n","              allow_ep_in = 1\n","              out_j = e_j\n","              # continue  # limit entry Ïùò Í≤ΩÏö∞ ep_loc.point2 ÏôÑÎ£å ÏãúÏ†ê Ïù¥ÌõÑÎ°ú ÏßÑÏûÖÏù¥ Í∞ÄÎä•Ìïú Ï†ê\n","\n","            #     3. check ep_in       #\n","            if allow_ep_in and res_df['high'].iloc[e_j] >= res_df['short_ep'].iloc[ep_j]:\n","              entry_done = 1\n","              # print(\"res_df['high'].iloc[e_j] :\", res_df['high'].iloc[e_j])\n","              # print(\"e_j :\", e_j)\n","\n","              #     Ïù¥ÎØ∏, e_j open Ïù¥ ep Î≥¥Îã§ ÎÜíÏùÄ Í≤ΩÏö∞, entry[ep_j] => -2 Î°ú Î≥ÄÍ≤Ω   #\n","              if res_df['open'].iloc[e_j] >= res_df['short_ep'].iloc[ep_j]:\n","                entry_open = 1\n","\n","              break\n","\n","\n","          i = e_j\n","          # print(\"i = e_j :\", i)\n","\n","          if entry_done:      \n","            pass\n","\n","          else:\n","            i += 1\n","            if i >= len(res_df):\n","              break\n","            continue\n","\n","        # ----------------- end wait ----------------- #\n","\n","        # if e_j - initial_i >= 200:\n","        #   print(\"e_j, initial_i :\", e_j, initial_i)\n","        # print(\"e_j - initial_i :\", e_j - initial_i)\n","        # print()\n","\n","        open_list.append(initial_i)\n","        zone_list.append(zone)\n","        side_list.append('s')\n","        \n","        #     e_j ÎùºÎäî Î≥ÄÏàòÎäî MARKET Ïóê ÏûàÏñ¥ÏÑú Ï†ïÏùòÎêòÏÑúÎäî ÏïàÎêòÎäî Î≥ÄÏàòÏûÑ   #\n","        if config.ep_set.entry_type == 'MARKET':\n","          # try:\n","          #   ep_list = [res_df['close'].iloc[e_j]]\n","          # except Exception as e:\n","          #   # print('error in ep_list (initial) :', e)\n","          ep_list = [res_df['close'].iloc[ep_j]]\n","\n","        else:          \n","          if not entry_open:\n","            ep_list = [res_df['short_ep'].iloc[ep_j]]\n","          \n","          else:\n","            #   ep_j Îäî Ìï≠ÏÉÅ ÏûàÏùå, LIMIT Ïù∏ Í≤ΩÏö∞ e_j ÎèÑ Ìï≠ÏÉÅ Ï°¥Ïû¨Ìï® --> dynamic_ep Ïó¨Î∂ÄÏóê Îî∞Îùº ep_j = e_j Í∞Ä ÎêòÎäî Í≤ΩÏö∞Îßå Ï°¥Ïû¨Ìï† ÎøêÏûÑ \n","            #   Îî∞ÎùºÏÑú, ep_j Î°ú ÌÜµÏùº Í∞ÄÎä•Ìï® (dynamic_ep Ïù∏ Í≤ΩÏö∞, ep_j = e_j ÎêòÏñ¥ÏûàÏùå)\n","            ep_list = [res_df['open'].iloc[e_j]]  # --> Ï≤¥Í≤∞Ïù¥ ÎêòÎäî e_j idx Í∏∞Ï§ÄÏúºÎ°ú ÌïòÎäîÍ≤å ÎßûÏùå\n","\n","        if not config.lvrg_set.static_lvrg:\n","          config.lvrg_set.leverage = config.lvrg_set.target_pct / (res_df['short_out'].iloc[out_j] / res_df['short_ep'].iloc[ep_j] - 1 - (fee + config.trader_set.market_fee))\n","          # config.lvrg_set.leverage = config.lvrg_set.target_pct / (res_df['short_out'].iloc[ep_j] / res_df['short_ep_org'].iloc[ep_j] - 1 - (fee + config.trader_set.market_fee))\n","\n","          # config.lvrg_set.leverage = config.lvrg_set.target_pct / abs(res_df['short_ep'].iloc[ep_j] / res_df['short_out'].iloc[ep_j] - 1 - (fee + config.trader_set.market_fee))\n","          # config.lvrg_set.leverage = config.lvrg_set.target_pct / abs(res_df['short_ep_org'].iloc[ep_j] / res_df['short_out'].iloc[ep_j] - 1 - (fee + config.trader_set.market_fee))\n","          \n","          if not config.lvrg_set.allow_float:\n","            config.lvrg_set.leverage = int(config.lvrg_set.leverage)\n","\n","          # -------------- leverage rejection -------------- #\n","          if config.lvrg_set.leverage < 1 and config.lvrg_set.lvrg_rejection:\n","            open_list.pop()\n","            zone_list.pop()\n","            side_list.pop()\n","            i += 1\n","            if i >= len(res_df):\n","              break\n","            continue\n","\n","          config.lvrg_set.leverage = max(config.lvrg_set.leverage, 1)\n","        \n","        config.lvrg_set.leverage = min(50, config.lvrg_set.leverage)\n","        leverage_list.append(config.lvrg_set.leverage)\n","\n","        # try:\n","        if config.ep_set.entry_type == \"MARKET\":\n","          ep_idx_list = [ep_j]  # ep_j Îäî ep_type Ïú†Í¥ÄÌïòÍ≤å Ï°¥Ïû¨ÌïòÎäî Î≥ÄÏàòÎãàÍπå try Ïóê Í±∏Ïñ¥ÎëêÎäîÍ≤å ÎßûÏùå <-- # market Ïù∏Îç∞, e_j Î≥ÄÏàòÍ∞Ä Ìï†ÎãπÎêú Í≤ΩÏö∞ Í≥†Î†§Ìï¥ÏïºÌï®\n","        else:\n","          ep_idx_list = [e_j]\n","\n","        # except Exception as e:\n","        #   # print('error in ep_idx_list :', e)        \n","        #   ep_idx_list = [e_j]\n","\n","        tp_list = []\n","        tp_idx_list = []\n","\n","        partial_tp_cnt = 0\n","        hedge_cnt = 1\n","\n","        h_ep, h_tp = None, None\n","        h_i, h_j = None, None\n","        \n","        trade_done = 0\n","        out = 0\n","        # config.out_set.retouch\n","\n","        #     Todo    #\n","        #      1. future_work : ÏÉÅÎã®Ïùò retouch ÏôÄ Í≤πÏπ® \n","        config.out_set.retouch = 0\n","        \n","\n","        if i == len(res_df) - 1: # if j start from i + 1 \n","          open_list.pop()       \n","          zone_list.pop()       \n","          side_list.pop()       \n","        for j in range(i + 1, len(res_df)):\n","\n","        # for j in range(i, len(res_df)):\n","\n","          if config.tp_set.static_tp:\n","            if not config.ep_set.static_ep and config.ep_set.entry_type == \"LIMIT\" and config.ep_set.tpout_onexec:\n","              tp_j = ep_j  # tpout_onexec = using dynamic_ep --> using ep_j Ïóê ÎåÄÌïú Ïù¥Ïú†\n","            else:\n","              tp_j = initial_i\n","          else:\n","            tp_j = j\n","\n","          if config.out_set.static_out:\n","            if not config.ep_set.static_ep and config.ep_set.entry_type == \"LIMIT\" and config.ep_set.tpout_onexec:\n","              out_j = ep_j\n","            # else:           \n","            #   out_j = initial_i   # --> referenced upper phase (start of limit wait)\n","          else:\n","            out_j = j\n","\n","\n","          # -------------- sub ep -------------- #\n","          # if res_df['high'].iloc[j - 1] <= res_df['sar2'].iloc[j - 1] and res_df['high'].iloc[j] > res_df['sar2'].iloc[j]:\n","            \n","          #   sub_ep = res_df['sar2'].iloc[j - 1]\n","\n","          #   if sub_ep < ep_list[-1]:\n","          #     ep_list.append(sub_ep)\n","          #     ep_idx_list.append(j)\n","\n","          \n","          # -------------- hedge only once -------------- #\n","          #             ÏùºÎã®, h_quantity Îäî Ï¥àÍ∏∞ ÏßÑÏûÖÍ≥º ÎèôÏùºÌïòÍ≤å ÏÑ§Ï†ï         #\n","          # if res_df['high'].iloc[j] >= res_df['minor_ST2_Up'].iloc[j] and hedge_cnt == 1:\n","          # if res_df['close'].iloc[j] >= res_df['minor_ST2_Up'].iloc[j] and hedge_cnt == 1:\n","          # if res_df['close'].iloc[j] >= res_df['minor_ST3_Up'].iloc[j] and hedge_cnt == 1:\n","\n","          #   h_ep = res_df['close'].iloc[j]\n","          #   hedge_cnt -= 1\n","          #   h_i = j\n","\n","\n","          # -------------- ultimate limit tp -------------- #\n","          if not config.tp_set.non_tp:\n","\n","            #               1. by price line             #\n","            if config.tp_set.tp_type == 'LIMIT' or config.tp_set.tp_type == \"BOTH\":\n","\n","              for s_i, short_tp_ in enumerate(short_tps):\n","\n","                if res_df['low'].iloc[j] <= short_tp_.iloc[tp_j] and partial_tp_cnt == s_i: # we use static tp now\n","                # if res_df['low'].iloc[j] <= short_tp_.iloc[j]:\n","                # if res_df['low'].iloc[j] <= short_tp_.iloc[j] <= res_df['high'].iloc[j]: --> Ïù¥Í±¥ ÏûòÎ™ªÎêòÏóàÏùå\n","\n","                  if s_i == len(short_tps) - 1:\n","                    trade_done = 1\n","                  \n","                  partial_tp_cnt += 1\n","\n","                  #         dynamic tp        #\n","                  # if 0:\n","                  if short_tp_.iloc[j] != short_tp_.iloc[j - 1] and not config.tp_set.static_tp:\n","\n","                    #   tp limit Ïù¥ Î∂àÍ∞ÄÌïú Í≤ΩÏö∞ = open Ïù¥ Ïù¥ÎØ∏, tp Î•º ÎÑòÏùÄ Í≤ΩÏö∞ # \n","                    # if res_df['open'].iloc[j] < short_tp_.iloc[initial_i]:\n","                    if res_df['open'].iloc[j] < short_tp_.iloc[j]:\n","\n","                      # tp = short_tp_.iloc[initial_i]\n","                      tp = res_df['open'].iloc[j]\n","\n","                      if trade_done:\n","                        tp_state_list.append(\"d-short_open\")\n","\n","                    #   tp limit Ïù¥ Í∞ÄÎä•Ìïú Í≤ΩÏö∞ = open Ïù¥ ÏïÑÏßÅ, tp Î•º ÎÑòÏßÄ ÏïäÏùÄ Í≤ΩÏö∞ # \n","                    else:\n","\n","                      # tp = short_tp_.iloc[initial_i]\n","                      tp = short_tp_.iloc[j]\n","                      # tp = res_df['open'].iloc[j]\n","\n","                      if trade_done:\n","                        tp_state_list.append(\"d-short_tp\")\n","\n","                  #         static tp         #\n","                  else:\n","                    \n","                    #   tp limit Ïù¥ Î∂àÍ∞ÄÌïú Í≤ΩÏö∞ = open Ïù¥ Ïù¥ÎØ∏, tp Î•º ÎÑòÏùÄ Í≤ΩÏö∞ # \n","                    #   non_inversion Ïùò Í≤ΩÏö∞, short_tp Í∞Ä Í∞ÄÎä•Ìï®   #              \n","\n","                    # if res_df['open'].iloc[j] < short_tp_.iloc[initial_i]:\n","                    if res_df['open'].iloc[j] < short_tp_.iloc[tp_j]:\n","\n","                      # tp = short_tp_.iloc[initial_i]\n","                      tp = short_tp_.iloc[tp_j]\n","\n","                      # tp = res_df['open'].iloc[j]\n","\n","                      if trade_done:\n","                        tp_state_list.append(\"s-short_tp\")\n","\n","                    #   tp limit Ïù¥ Í∞ÄÎä•Ìïú Í≤ΩÏö∞ = open Ïù¥ ÏïÑÏßÅ, tp Î•º ÎÑòÏßÄ ÏïäÏùÄ Í≤ΩÏö∞ # \n","                    else:\n","\n","                      # tp = short_tp_.iloc[initial_i]\n","                      tp = short_tp_.iloc[tp_j]\n","\n","                      # tp = res_df['open'].iloc[j]\n","\n","                      if trade_done:\n","                        tp_state_list.append(\"s-short_tp\")   \n","\n","                  tp_list.append(tp)     \n","                  tp_idx_list.append(j)\n","                  fee += config.trader_set.limit_fee\n","\n","\n","            #           2. by signal        #\n","            if config.tp_set.tp_type == 'MARKET' or (config.tp_set.tp_type == \"BOTH\" and not trade_done):\n","\n","              market_tp = 0\n","\n","              # -------------- sar tp -------------- #\n","              # if (res_df['high'].iloc[j] >= res_df['sar2'].iloc[j]) & \\\n","              #   (res_df['high'].iloc[j - 1] < res_df['sar2'].iloc[j - 1]) & \\\n","              #   (res_df['high'].iloc[j - 2] < res_df['sar2'].iloc[j - 2]):\n","\n","              #       inversion     #\n","              # if (res_df['low'].iloc[j] <= res_df['sar2'].iloc[j]) & \\\n","              #   (res_df['low'].iloc[j - 1] > res_df['sar2'].iloc[j - 1]) & \\\n","              #   (res_df['low'].iloc[j - 2] > res_df['sar2'].iloc[j - 2]):\n","              \n","              # ----------- st short ----------- #\n","              # if res_df['close'].iloc[j] <= res_df['short_tp'].iloc[tp_j]:\n","              \n","              # -------------- sar pb tp -------------- #\n","              # if res_df['low'].iloc[j] <= res_df['short_tp'].iloc[initial_i]:\n","\n","              # -------------- st tp -------------- #\n","              # if res_df['close'].iloc[j] > res_df['middle_line'].iloc[j]:       \n","\n","              # -------------- fisher tp -------------- #            \n","              # if entry[j] == 1:\n","              \n","              # -------------- timestamp -------------- #\n","              # if np_timeidx[j] % config.loc_set.point.tf_entry == config.loc_set.point.tf_entry - 1:       \n","\n","              # -------------- rsi -------------- #\n","              # if (res_df['rsi_%s' % config.loc_set.point.exp_itv].iloc[j - 1] >= rsi_lower) & \\\n","              #                  (res_df['rsi_%s' % config.loc_set.point.exp_itv].iloc[j] < rsi_lower):                            \n","              #   market_tp = 1\n","\n","              # # -------------- rsi slight touch -------------- #\n","              # elif allow_rsi_touch:\n","              #   if (np.min(res_df['rsi_%s' % config.loc_set.point.exp_itv].iloc[initial_i:j]) < rsi_lower + rsi_gap) & \\\n","              #     (res_df['rsi_%s' % config.loc_set.point.exp_itv].iloc[j] >= 50):\n","              #     market_tp = 1              \n","                           \n","              # # if (np.min(res_df['low'].iloc[e_j:j]) < res_df['short_tp'].iloc[tp_j]) & \\\n","              # if (np.min(res_df['low'].iloc[e_j:j]) < res_df['h_short_rtc_1'].iloc[tp_j] - res_df['h_short_rtc_gap'].iloc[tp_j] * early_out_tpg) & \\\n","              #   (res_df['close'].iloc[j] >= res_df['short_ep'].iloc[ep_j]):\n","              #   market_tp = 1 \n","\n","              if market_tp:\n","                \n","                tp = res_df['close'].iloc[j]\n","                # tp = res_df['open'].iloc[j]\n","                trade_done = 1\n","\n","                if trade_done:\n","                  tp_state_list.append(\"short close tp\")\n","\n","                tp_list.append(tp) \n","                tp_idx_list.append(j)\n","                fee += config.trader_set.market_fee\n","\n","\n","                  \n","          # -------------- out -------------- #\n","          if not trade_done and config.out_set.use_out and j != len(res_df) - 1:\n","\n","            # -------------- macd -------------- #\n","            # if res_df['macd_hist3'].iloc[j] > 0:  #  macd out\n","            # if res_df['macd_hist3'].iloc[i] < 0 and res_df['macd_hist3'].iloc[j] > 0:\n","\n","            # -------------- st config.out_set.retouch -------------- #\n","            # out = 1 ÏÉÅÌÉúÎ©¥ ÎèôÏùº tick ÏóêÏÑú config.out_set.retouch Î•º Ï°∞ÏÇ¨Ìï† Í±∞Í∏∞ ÎïåÎ¨∏Ïóê, Î®ºÏ†Ä Í≤ÄÏÇ¨Ìï®\n","            # Í∑∏Î¶¨Í≥†, out Í∏∞Ï§ÄÏù¥ close Îùº Ïù¥Í≤å ÎßûÏùå \n","            # close Í∞Ä short_out Î≥¥Îã§ Ïò¨ÎùºÍ∞ÄÏûàÎäî ÏÉÅÌÉúÏùºÌÖåÎãà low Î•º Ï°∞ÏÇ¨ÌïòÎäîÍ≤å ÎßûÏùå           \n","            # if out and res_df['low'].iloc[j] <= short_out.iloc[out_j]:\n","            #   config.out_set.retouch = 1\n","\n","            \n","             # ------- ÏùºÏ†ïÏãúÍ∞Ñ Ïù¥ÏÉÅ, dynamic_out Ï†ÅÏö© ------ #\n","            try:\n","              if j - out_idx >= config.out_set.retouch_out_period:\n","                static_short_out = res_df['short_out'].iloc[j]\n","            \n","            except Exception as e:\n","              pass\n","\n","              # ------- static out ------ #\n","            try:\n","              if out and res_df['low'].iloc[j] <= static_short_out:\n","                config.out_set.retouch = 1\n","            except Exception as e:\n","              pass\n","\n","            \n","              # ------- config.out_set.retouch out ------ #\n","            # if out and res_df['low'].iloc[j] <= short_out2.iloc[out_j]:\n","            #   config.out_set.retouch = 1\n","\n","\n","            # -------------- st -------------- #\n","            # if res_df['close'].iloc[j] > res_df['middle_line'].iloc[j]:    \n","            # if res_df['close'].iloc[j] > res_df['minor_ST3_Up'].iloc[j]:\n","            # if res_df['close'].iloc[j] > upper_middle.iloc[j]:\n","            # if res_df['close'].iloc[j] > res_df['minor_ST1_Up'].iloc[j]:\n","            if out == 0:              \n","              if config.out_set.hl_out:\n","                if res_df['high'].iloc[j] >= res_df['short_out'].iloc[out_j]: # check out only once\n","                  out = 1\n","\n","              else:\n","                if res_df['close'].iloc[j] >= res_df['short_out'].iloc[out_j]: # check out only once\n","                  out = 1\n","\n","              # out_idx = j\n","              # static_short_out = short_out.iloc[out_j]\n","              # if config.out_set.second_out:              \n","                # static_short_out = short_out.iloc[out_j] + res_df['st_gap'].iloc[out_j] * config.out_set.second_out_gap\n","            \n","            # if out == 0 and res_df['high'].iloc[j] >= short_out.iloc[out_j]: # check out only once\n","            #   out = 1\n","             \n","\n","            # -------------- sma -------------- #\n","            # if res_df['close'].iloc[j] > res_df[sma].iloc[j]:\n","\n","            # -------------- sar -------------- #\n","            # if res_df['close'].iloc[j] > res_df['minor_ST3_Up'].iloc[j] \\\n","            #   or res_df['sar2'].iloc[j] <= res_df['high'].iloc[j]:\n","            # if res_df['close'].iloc[j] > short_out.iloc[initial_i]: # or \\\n","            #   out = 1\n","              # res_df['sar2_uptrend'].iloc[j] == 1: # or \\\n","\n","            # if res_df['sar2_uptrend'].iloc[j] == 1:\n","\n","            #   if prev_sar is None:\n","            #     prev_sar = res_df['sar2'].iloc[j - 1]\n","              \n","            #   if res_df['close'].iloc[j] > prev_sar:\n","            #     out = 1\n","\n","            # else:\n","            #   if res_df['close'].iloc[j] > res_df['sar2'].iloc[j]:\n","            #     out = 1\n","              \n","            # -------------- hl -------------- #\n","            # if res_df['close'].iloc[j] > short_out.iloc[tp_j]:\n","            \n","            # -------------- stoch -------------- #\n","            # if res_df['stoch'].iloc[j - 2] >= res_df['stoch'].iloc[j - 1] and \\\n","            #   res_df['stoch'].iloc[j - 1] < res_df['stoch'].iloc[j] and \\\n","            #   res_df['stoch'].iloc[j - 1] <= stoch_lower:\n","            #   out = 1\n","\n","            # config.out_set.retouch 1 Í≤ΩÏö∞, config.out_set.retouch Ï°∞Í±¥ÎèÑ ÏûàÏñ¥ÏïºÌï®\n","            if out:\n","              if config.out_set.retouch:\n","                if config.out_set.retouch:\n","                  pass\n","                else:\n","                    continue\n","\n","              else:\n","                pass\n","\n","              if config.out_set.price_restoration:\n","                tp = res_df['short_out'].iloc[out_j]\n","                if config.out_set.second_out:\n","                  tp = res_df['short_out2'].iloc[out_j]\n","                \n","                # if res_df['close'].iloc[j] > tp: # Ïù¥ Í≤ΩÏö∞Î•º protect ÌïòÎäîÍ±¥ insane ÏûÑ\n","                #   tp = res_df['close'].iloc[j]\n","\n","              else:\n","                \n","                if res_df['open'].iloc[j] >= res_df['short_out'].iloc[out_j]:\n","                  tp = res_df['open'].iloc[j]\n","                else:\n","                  if config.out_set.hl_out:\n","                    tp = res_df['short_out'].iloc[out_j]\n","                  else:\n","                    tp = res_df['close'].iloc[j]\n","                \n","                # if not config.out_set.static_out:\n","                #   if res_df['open'].iloc[j] >= res_df['short_out'].iloc[out_j]: # close Í∏∞Ï§ÄÏù¥Îùº Ïù¥Îü∞ Ï°∞Í±¥ÏùÑ Î™ªÏîÄ, Ï∞®ÎùºÎ¶¨ j Î•º i Î∂ÄÌÑ∞ ÏãúÏûë\n","                #     tp = res_df['open'].iloc[j]\n","                #   else:\n","                #     tp = res_df['close'].iloc[j]\n","\n","                # else:\n","                #   tp = res_df['close'].iloc[j]\n","\n","              \n","              if config.out_set.retouch: # out Í≥º open ÎπÑÍµê\n","                if config.out_set.second_out:\n","                  if res_df['open'].iloc[j] <= res_df['short_out2'].iloc[out_j]:\n","                    tp = res_df['open'].iloc[j]\n","                else:\n","                  if res_df['open'].iloc[j] <= res_df['short_out'].iloc[out_j]:\n","                    tp = res_df['open'].iloc[j]\n","\n","                try: # static_short_out Ïù∏ Í≤ΩÏö∞, open ÎèÑ Í≥†Î†§Ìïú tp set\n","                  if res_df['open'].iloc[j] <= static_short_out:\n","                    tp = res_df['open'].iloc[j]\n","                  else:\n","                    tp = static_short_out\n","                except Exception as e:\n","                  pass\n","\n","              trade_done = 1\n","              tp_state_list.append(\"short close_out\")\n","            \n","\n","              tp_list.append(tp) \n","              tp_idx_list.append(j)\n","              fee += config.trader_set.market_fee\n","\n","\n","          # -------------- non tp -------------- #\n","          if j == len(res_df) - 1:\n","            trade_done = 1\n","            tp = res_df['close'].iloc[j]\n","            tp_list.append(tp) \n","            tp_idx_list.append(j)\n","            fee += config.trader_set.market_fee\n","          \n","\n","\n","          # -------------- append trade data -------------- #\n","          if trade_done:\n","\n","            # --------------- tp_ratio info --------------- #\n","            #         Todo        #\n","            #          short_out Ïóê ÎåÄÌïú Ï†ïÎ≥¥Îäî Ï°¥Ïû¨Ìï®,\n","            #          short_tp Ïóê ÎåÄÌïú Ï†ïÎ≥¥Îäî Ï°¥Ïû¨Ìï®,\n","            #       => initial_i Í∏∞Ï§ÄÏúºÎ°ú ,dynamic | static set ÏùÑ tp ÏôÄ out Ïóê Í∞ÅÍ∞Å Ï†ÅÏö©\n","            #          config.lvrg_set.leverage Îäî initial_i Í∏∞Ï§ÄÏúºÎ°ú Ï†ÅÏö©ÎêòÎãàÍπå\n","            #          Ï†ÅÏö©Îêú tp & out ÏúºÎ°ú abs((tp - ep) / (ep - out)) Í≥ÑÏÇ∞\n","            try:\n","              if config.out_set.use_out:\n","                done_tp = res_df['short_tp'].iloc[ep_j]\n","                done_out = res_df['short_out'].iloc[ep_j]\n","\n","                if done_out <= ep_list[0]: # loss > 1\n","                  dr = np.nan\n","                  tp_ratio = np.nan\n","                else:                \n","                  dr = ((ep_list[0] - done_tp) / (done_out - ep_list[0]))\n","                  tp_ratio = ((ep_list[0] - done_tp - tp_fee * ep_list[0]) / (done_out - ep_list[0] + out_fee * ep_list[0]))\n","                \n","              else:\n","                dr = np.nan\n","                tp_ratio = np.nan  \n","\n","\n","            except Exception as e:\n","              dr = np.nan \n","              tp_ratio = np.nan  \n","            \n","            tp_ratio_list.append(tp_ratio)\n","            short_tp_ratio_list.append(tp_ratio)     \n","            dr_list.append(dr)\n","            short_dr_list.append(dr)   \n","\n","\n","            # -------------------- partial tp -------------------- #\n","            #        1. len(tp_list) Ïóê ÎåÄÏùëÌïòÎäî qty_list Î•º ÎßåÎì§Ïñ¥ÏïºÌï®    #\n","            #        2. temp_pr_list Î•º ÎßåÎì§Ïñ¥ Ï¥ùÌï© + 1 ÏùÑ pr_list Ïóê Ï†ÄÏû•      #\n","            #        2-1. temp_pr = sum((ep / tp_list[i] - fee - 1) * qty_list[i])   #\n","            #        3. temp_pr_list Ïùò Ï≤´ tp ÏóêÎäî r_qty Î•º Ìï†ÎãπÌï®        #\n","            qty_list = []\n","            temp_pr_list = []\n","            r_qty = 1\n","            for q_i in range(len(tp_list) - 1, -1, -1):\n","\n","              if len(tp_list) == 1:\n","                temp_qty = r_qty\n","              else:\n","                if q_i !=0:\n","                  temp_qty = r_qty / config.tp_set.partial_qty_divider\n","                else:\n","                  temp_qty = r_qty\n","\n","              temp_pr = (ep_list[0] / tp_list[q_i] - fee - 1) * temp_qty * config.lvrg_set.leverage\n","              # temp_pr = (ep_list[0] / tp_list[q_i] - fee - 1) * temp_qty\n","              r_qty -= temp_qty\n","\n","              temp_pr_list.append(temp_pr)\n","              qty_list.append(temp_qty)\n","\n","            # if len(temp_pr_list) == 1:\n","            #   print(\"qty_list :\", qty_list)\n","            #   print(\"temp_pr_list :\", temp_pr_list)\n","\n","            temp_pr = sum(temp_pr_list) + 1\n","\n","            # -------------------- sub ep -> pr calc -------------------- #\n","            if len(ep_list) > 1:\n","            \n","              p_ep_pr = []\n","              for sub_ep_ in ep_list:\n","                sub_pr = (sub_ep_ / tp - fee - 1) * config.lvrg_set.leverage\n","                p_ep_pr.append(sub_pr)\n","\n","              temp_pr = sum(p_ep_pr) + 1\n","\n","              print(\"temp_pr :\", temp_pr)\n","\n","            # ------------ hedge + non_hedge pr summation ------------ #\n","            #         hedge pr direction is opposite to the origin       #\n","            hedge_pr = 1\n","            if hedge_cnt == 0:\n","\n","              #       hedge tp      #\n","              h_tp = res_df['close'].iloc[j]\n","              hedge_pr = (h_tp / h_ep - fee - 1) * config.lvrg_set.leverage  # hedge long\n","              temp_pr += hedge_pr\n","              h_j = j\n","\n","            \n","            # hh = max(res_df['high'].iloc[i:j + 1])\n","            hh = max(res_df['high'].iloc[i:j])    # pos. Ï†ïÎ¶¨ÌïòÍ∏∞ Î∞îÎ°ú ÏßÅÏ†ÑÍπåÏßÄ\n","            short_liq = (ep_list[0] / hh - fee - 1) * config.lvrg_set.leverage + 1\n","\n","            if j != len(res_df) - 1:\n","\n","              # ep_tp_list.append((ep, tp_list))  \n","              ep_tp_list.append((ep_list, tp_list))  \n","              # trade_list.append([initial_i, i, j])\n","              trade_list.append((ep_idx_list, tp_idx_list))\n","\n","              liqd_list.append(short_liq)\n","              short_liqd_list.append(short_liq)\n","\n","              h_ep_tp_list.append((h_ep, h_tp))      # hedge ÎèÑ ep_tp_list Ï≤òÎüº Î≥ÄÍ≤ΩÌï¥Ï£ºÏñ¥ÏïºÌïòÎäîÎç∞ ÏïÑÏßÅ ÏïàÍ±¥ÎìúÎ¶º, Îî±Ìûà ÏÇ¨Ïö©Ìï† ÏùºÏù¥ ÏóÜÏñ¥Î≥¥Ïó¨   \n","              h_trade_list.append([initial_i, h_i, h_j])                \n","\n","              pr_list.append(temp_pr)\n","              fee_list.append(fee)\n","              short_list.append(temp_pr)\n","              short_fee_list.append(fee)\n","\n","              h_pr_list.append(hedge_pr)\n","              h_short_list.append(hedge_pr)\n","\n","              i = j\n","              break\n","\n","            else:\n","\n","              # ep_tp_list.append((ep_list, tp_list))\n","              # trade_list.append((ep_idx_list, tp_idx_list))\n","              # plot_check ÎïåÎ¨∏Ïóê, pr_list ÍπåÏßÄ ÌïòÍ≤åÎêòÎ©¥ acc_pr eval Ïù¥ Íº¨Ïù¥Í≤åÎåê\n","          \n","              # pr_list Î•º ÎÑ£ÏßÄ ÏïäÏùÑÍ±∞ÎãàÍπå, open_list ÏóêÏÑú Ìï¥Îãπ idx Îäî pop\n","              open_list.pop()\n","              zone_list.pop()\n","              side_list.pop()\n","              \n","              #         tp ÎØ∏Ï≤¥Í≤∞ survey        #\n","              nontp_liqd_list.append(short_liq)\n","              nontp_short_liqd_list.append(short_liq)\n","              nontp_short_indexs.append(i)\n","              nontp_short_ep_list.append(ep_list[0])\n","\n","              nontp_short_pr = (ep_list[0] / tp - fee - 1) * config.lvrg_set.leverage + 1\n","              nontp_pr_list.append(nontp_short_pr)\n","              nontp_short_pr_list.append(nontp_short_pr)\n","\n","\n","      #                  long  phase                #\n","      elif res_df['entry'][i] == -config.ep_set.short_entry_score: \n","      \n","\n","        initial_i = i\n","\n","        if config.out_set.static_out:\n","          p_i = initial_i\n","        else:\n","          p_i = i\n","\n","        \n","        res_df, open_side_str, zone = long_ep_loc(res_df, config, i, show_detail)\n","\n","        # -------------- mr_score summation -------------- #\n","        if open_side_str is not None:        \n","          pass\n","        \n","        else:\n","          i += 1\n","          if i >= len(res_df):\n","            break\n","          continue\n","\n","        # print(\"i after long_ep_loc :\", i)\n","\n","\n","        ep_j = initial_i\n","        out_j = initial_i\n","      \n","        # -------------- limit waiting const. -------------- #      \n","        if config.ep_set.entry_type == \"LIMIT\":\n","\n","          allow_ep_in = 0\n","          entry_done = 0\n","          entry_open = 0\n","          prev_sar = None\n","\n","          # for e_j in range(i, len(res_df)):   \n","\n","          if i + 1 >= len(res_df):  # i should be checked if e_j starts from i+1\n","            break\n","          for e_j in range(i + 1, len(res_df)):  # entry Í∞Ä close Í∏∞Ï§ÄÏùº Í≤ΩÏö∞ ÏÇ¨Ïö© (open Í∏∞Ï§ÄÏùº Í≤ΩÏö∞ i Î∂ÄÌÑ∞ ÏãúÏûëÌï¥ÎèÑ Î¨¥Î∞©Ìï®)\n","            \n","            if not config.ep_set.static_ep:\n","              ep_j = e_j  \n","              out_j = e_j\n","            \n","            if config.tp_set.static_tp:\n","              # if config.ep_set.tpout_onexec:\n","              #   tp_j = e_j\n","              # else:\n","                tp_j = initial_i\n","            else:\n","              tp_j = e_j  \n","\n","            \n","            #          np.inf ep         #\n","            # if long_ep.iloc[initial_i] == np.inf:\n","            #   break\n","            \n","            #     1. check ep_out     #\n","            if config.loc_set.zone.ei_k != \"None\":\n","              # if res_df['high'].iloc[e_j] >= res_df['h_long_rtc_1'].iloc[tp_j] + res_df['h_long_rtc_gap'].iloc[tp_j] * config.loc_set.zone.ei_k:\n","              if res_df['high'].iloc[e_j] >= res_df['long_tp'].iloc[tp_j]:                \n","              # if np_timeidx[e_j] % config.loc_set.point.tf_entry == config.loc_set.point.tf_entry - 1:\n","                break\n","\n","              # elif (res_df['rsi_%s' % config.loc_set.point.exp_itv].iloc[e_j - 1] <= rsi_upper) & \\\n","              #                  (res_df['rsi_%s' % config.loc_set.point.exp_itv].iloc[e_j] > rsi_upper):\n","              #   break\n","            \n","            #     2. ep_loc.point2\n","            if (res_df['dc_lower_1m'].iloc[e_j - 1] >= res_df['dc_lower_15m'].iloc[e_j]) & \\\n","                (res_df['dc_lower_15m'].iloc[e_j - 1] != res_df['dc_lower_15m'].iloc[e_j]):\n","              allow_ep_in = 1\n","              out_j = e_j\n","              # continue  # limit entry Ïùò Í≤ΩÏö∞ ep_loc.point2 ÏôÑÎ£å ÏãúÏ†ê Ïù¥ÌõÑÎ°ú ÏßÑÏûÖÏù¥ Í∞ÄÎä•Ìïú Ï†ê\n","\n","            #     3. check ep_in      #\n","            if allow_ep_in and res_df['low'].iloc[e_j] <= res_df['long_ep'].iloc[ep_j]:\n","              entry_done = 1\n","              # print(\"e_j :\", e_j)\n","              \n","              #     Ïù¥ÎØ∏, e_j open Ïù¥ ep Î≥¥Îã§ ÎÇÆÏùÄ Í≤ΩÏö∞, entry[initial_i] => -2 Î°ú Î≥ÄÍ≤Ω   #\n","              if res_df['open'].iloc[e_j] <= res_df['long_ep'].iloc[ep_j]:\n","                entry_open = 1\n","\n","              break\n","\n","\n","          i = e_j\n","          # print(\"i = e_j :\", i)\n","\n","          if entry_done:      \n","            pass\n","            # print(\"i, entry_done :\", i, entry_done)\n","\n","          else:\n","            i += 1\n","            if i >= len(res_df):\n","              # print(\"i :\", i)\n","              break\n","\n","            # print(\"i in continue :\", i)          \n","            continue\n","\n","\n","        # ---------------- end wait ---------------- #\n","        # if e_j - initial_i >= 200:\n","        #   print(\"e_j, initial_i :\", e_j, initial_i)\n","        \n","        # print(i)\n","\n","        open_list.append(initial_i)\n","        zone_list.append(zone)\n","        side_list.append('l')\n","\n","        if config.ep_set.entry_type == 'MARKET':\n","          ep_list = [res_df['close'].iloc[ep_j]]\n","        else:\n","          if not entry_open:\n","            ep_list = [res_df['long_ep'].iloc[ep_j]]\n","          else:\n","            # try:\n","            #   ep_list = [res_df['open'].iloc[e_j]]\n","            # except Exception as e:\n","            ep_list = [res_df['open'].iloc[e_j]]  # --> Ï≤¥Í≤∞Ïù¥ ÎêòÎäî e_j idx Í∏∞Ï§ÄÏúºÎ°ú ÌïòÎäîÍ≤å ÎßûÏùå\n","\n","        if not config.lvrg_set.static_lvrg:\n","          config.lvrg_set.leverage = config.lvrg_set.target_pct / (res_df['long_ep'].iloc[ep_j] / res_df['long_out'].iloc[out_j] - 1 - (fee + config.trader_set.market_fee))\n","          # config.lvrg_set.leverage = config.lvrg_set.target_pct / (res_df['long_ep_org'].iloc[ep_j] / res_df['long_out'].iloc[ep_j] - 1 - (fee + config.trader_set.market_fee))\n","\n","          # config.lvrg_set.leverage = config.lvrg_set.target_pct / abs(res_df['long_out'].iloc[ep_j] / res_df['long_ep'].iloc[ep_j] - 1 - (fee + config.trader_set.market_fee))\n","          # config.lvrg_set.leverage = config.lvrg_set.target_pct / abs(res_df['long_out'].iloc[ep_j] / res_df['long_ep_org'].iloc[ep_j] - 1 - (fee + config.trader_set.market_fee))\n","          \n","          if not config.lvrg_set.allow_float:\n","            config.lvrg_set.leverage = int(config.lvrg_set.leverage)\n","\n","          # -------------- leverage rejection -------------- #\n","          if config.lvrg_set.leverage < 1 and config.lvrg_set.lvrg_rejection:\n","            open_list.pop()\n","            zone_list.pop()\n","            side_list.pop()\n","            i += 1\n","            if i >= len(res_df):\n","              break\n","            continue\n","\n","          config.lvrg_set.leverage = max(config.lvrg_set.leverage, 1)\n","\n","        config.lvrg_set.leverage = min(50, config.lvrg_set.leverage)        \n","        leverage_list.append(config.lvrg_set.leverage)\n","          \n","        if config.ep_set.entry_type == \"MARKET\":\n","          ep_idx_list = [ep_j]\n","        else:\n","          ep_idx_list = [e_j]\n","\n","        tp_list = []\n","        tp_idx_list = []\n","\n","        partial_tp_cnt = 0\n","        hedge_cnt = 1\n","\n","        h_ep, h_tp = None, None        \n","        h_i, h_j = None, None      \n","\n","        trade_done = 0\n","        out = 0          \n","        config.out_set.retouch = 0\n","\n","\n","        if i == len(res_df) - 1: # if j start from i + 1 \n","          open_list.pop()\n","          zone_list.pop()\n","          side_list.pop()\n","\n","        for j in range(i + 1, len(res_df)):\n","\n","        # for j in range(i, len(res_df)):  \n","          \n","          if config.tp_set.static_tp:\n","            if not config.ep_set.static_ep and config.ep_set.entry_type == \"LIMIT\" and config.ep_set.tpout_onexec:\n","              tp_j = ep_j\n","            else:\n","              tp_j = initial_i\n","          else:\n","            tp_j = j\n","\n","          if config.out_set.static_out:\n","            if not config.ep_set.static_ep and config.ep_set.entry_type == \"LIMIT\" and config.ep_set.tpout_onexec:\n","              out_j = ep_j\n","            # else:           \n","            #   out_j = initial_i\n","          else:\n","            out_j = j   \n","\n","          # -------------- hedge only once -------------- #\n","          #             ÏùºÎã®, h_quantity Îäî Ï¥àÍ∏∞ ÏßÑÏûÖÍ≥º ÎèôÏùºÌïòÍ≤å ÏÑ§Ï†ï         #\n","          # if res_df['low'].iloc[j] <= res_df['minor_ST2_Down'].iloc[j] and hedge_cnt == 1:\n","          # if res_df['close'].iloc[j] <= res_df['minor_ST2_Down'].iloc[j] and hedge_cnt == 1:\n","          # if res_df['close'].iloc[j] <= res_df['minor_ST3_Down'].iloc[j] and hedge_cnt == 1:\n","\n","          #   h_ep = res_df['close'].iloc[j]\n","          #   hedge_cnt -= 1\n","          #   h_i = j\n","\n","          # -------------- sub ep -------------- #\n","          # if res_df['low'].iloc[j - 1] >= res_df['sar2'].iloc[j - 1] and res_df['low'].iloc[j] < res_df['sar2'].iloc[j]:\n","            \n","          #   sub_ep = res_df['sar2'].iloc[j - 1]\n","\n","          #   if sub_ep > ep_list[-1]:\n","          #     ep_list.append(sub_ep)\n","          #     ep_idx_list.append(j)\n","\n","\n","          # -------------- ultimate tp -------------- #\n","          if not config.tp_set.non_tp:\n","            #            1. by level          #\n","            if config.tp_set.tp_type == \"LIMIT\" or config.tp_set.tp_type == \"BOTH\":\n","              \n","\n","              for l_i, long_tp_ in enumerate(long_tps):\n","\n","                if res_df['high'].iloc[j] >= long_tp_.iloc[tp_j] and partial_tp_cnt == l_i:\n","                # if res_df['high'].iloc[j] >= long_tp.iloc[j]:\n","\n","                  if l_i == len(long_tps) - 1:\n","                    trade_done = 1\n","\n","                  partial_tp_cnt += 1\n","\n","                  #         dynamic tp        #\n","                  # if 0:\n","                  if long_tp_.iloc[j] != long_tp_.iloc[j - 1] and not config.tp_set.static_tp:\n","\n","                    #   tp limit Ïù¥ Î∂àÍ∞ÄÌïú Í≤ΩÏö∞ = open Ïù¥ Ïù¥ÎØ∏, tp Î•º ÎÑòÏùÄ Í≤ΩÏö∞ # \n","                    # if res_df['open'].iloc[j] >= long_tp_.iloc[initial_i]:\n","                    if res_df['open'].iloc[j] >= long_tp_.iloc[j]:\n","\n","                      # tp = long_tp_.iloc[initial_i]\n","                      tp = res_df['open'].iloc[j]\n","\n","                      if trade_done:\n","                        tp_state_list.append(\"d-long_open\")\n","\n","                    \n","                    #   tp limit Ïù¥ Í∞ÄÎä•Ìïú Í≤ΩÏö∞ = open Ïù¥ ÏïÑÏßÅ, tp Î•º ÎÑòÏßÄ ÏïäÏùÄ Í≤ΩÏö∞ # \n","                    else:\n","                      \n","                      # tp = long_tp_.iloc[initial_i]\n","                      tp = long_tp_.iloc[j]\n","                      # tp = res_df['open'].iloc[j]\n","                      \n","                      if trade_done:\n","                        tp_state_list.append(\"d-long_tp\")\n","\n","                  #         static tp         #\n","                  else:\n","\n","                    #   tp limit Ïù¥ Î∂àÍ∞ÄÌïú Í≤ΩÏö∞ = open Ïù¥ Ïù¥ÎØ∏, tp Î•º ÎÑòÏùÄ Í≤ΩÏö∞ # \n","                    #   non_inversion Ïùò Í≤ΩÏö∞, short_tp Í∞Ä Í∞ÄÎä•Ìï®   #\n","\n","                    if res_df['open'].iloc[j] >= long_tp_.iloc[tp_j]:\n","                    # if res_df['open'].iloc[j] >= long_tp_.iloc[initial_i]:\n","\n","                      # tp = long_tp_.iloc[initial_i]\n","                      tp = long_tp_.iloc[tp_j]\n","\n","                      # tp = res_df['open'].iloc[j]\n","\n","                      if trade_done:\n","                        tp_state_list.append(\"s-long_tp\")\n","\n","                    \n","                    #   tp limit Ïù¥ Í∞ÄÎä•Ìïú Í≤ΩÏö∞ = open Ïù¥ ÏïÑÏßÅ, tp Î•º ÎÑòÏßÄ ÏïäÏùÄ Í≤ΩÏö∞ # \n","                    else:\n","                      \n","                      # tp = long_tp_.iloc[initial_i]\n","                      tp = long_tp_.iloc[tp_j]\n","\n","                      # tp = res_df['open'].iloc[j]\n","\n","                      if trade_done:\n","                        tp_state_list.append(\"s-long_tp\")         \n","                  \n","                  tp_list.append(tp)\n","                  tp_idx_list.append(j)\n","                  fee += config.trader_set.limit_fee\n","\n","            #           2. by time        #\n","            if config.tp_set.tp_type == 'MARKET' or (config.tp_set.tp_type == \"BOTH\" and not trade_done):\n","\n","              market_tp = 0\n","\n","              # -------------- sar tp -------------- #\n","              # if (res_df['low'].iloc[j] <= res_df['sar2'].iloc[j]) & \\\n","              #   (res_df['low'].iloc[j - 1] > res_df['sar2'].iloc[j - 1]) & \\\n","              #   (res_df['low'].iloc[j - 2] > res_df['sar2'].iloc[j - 2]):\n","              \n","              #       inversion     #\n","              # if (res_df['high'].iloc[j] >= res_df['sar2'].iloc[j]) & \\\n","              #   (res_df['high'].iloc[j - 1] < res_df['sar2'].iloc[j - 1]) & \\\n","              #   (res_df['high'].iloc[j - 2] < res_df['sar2'].iloc[j - 2]):\n","\n","\n","              # ----------- st long ----------- #\n","              # if res_df['close'].iloc[j] >= res_df['long_tp'].iloc[tp_j]:\n","\n","              # -------------- sar pb tp -------------- #\n","              # if res_df['high'].iloc[j] >= res_df['long_tp'].iloc[initial_i]:\n","\n","              # -------------- st tp -------------- #\n","              # if res_df['close'].iloc[j] < res_df['middle_line'].iloc[j]:\n","\n","              # -------------- fisher tp -------------- #\n","              # if entry[j] == -1:\n","              \n","              # -------------- timestamp -------------- #\n","              # if np_timeidx[j] % config.loc_set.point.tf_entry == config.loc_set.point.tf_entry - 1:\n","\n","              # -------------- rsi -------------- #\n","              # if (res_df['rsi_%s' % config.loc_set.point.exp_itv].iloc[j - 1] <= rsi_upper) & \\\n","              #                  (res_df['rsi_%s' % config.loc_set.point.exp_itv].iloc[j] > rsi_upper):\n","              #   market_tp = 1\n","              \n","              # # -------------- rsi slight touch -------------- #\n","              # elif allow_rsi_touch:\n","              #   if (np.max(res_df['rsi_%s' % config.loc_set.point.exp_itv].iloc[initial_i:j]) > rsi_upper - rsi_gap) & \\\n","              #     (res_df['rsi_%s' % config.loc_set.point.exp_itv].iloc[j] <= 50):\n","              #     market_tp = 1\n","\n","              # # if (np.max(res_df['high'].iloc[e_j:j]) > res_df['long_tp'].iloc[tp_j]) & \\\n","              # if (np.max(res_df['high'].iloc[e_j:j]) > res_df['h_long_rtc_1'].iloc[tp_j] + res_df['h_long_rtc_gap'].iloc[tp_j] * early_out_tpg) & \\\n","              #   (res_df['close'].iloc[j] <= res_df['long_ep'].iloc[ep_j]):\n","              #   market_tp = 1 \n","                              \n","              if market_tp:\n","\n","                tp = res_df['close'].iloc[j]\n","                # tp = res_df['open'].iloc[j]\n","                trade_done = 1\n","\n","                if trade_done:\n","                  tp_state_list.append(\"long close tp\")\n","                  # print(\"early_out passed !\")\n","\n","                tp_list.append(tp) \n","                tp_idx_list.append(j)\n","                fee += config.trader_set.market_fee\n","\n","\n","\n","          # -------------- out -------------- #\n","          if not trade_done and config.out_set.use_out and j != len(res_df) - 1:              \n","\n","            # -------------- macd -------------- #\n","            # if res_df['macd_hist3'].iloc[j] < 0:\n","            # # if res_df['macd_hist3'].iloc[i] > 0 and res_df['macd_hist3'].iloc[j] < 0:\n","\n","            # -------------- st config.out_set.retouch -------------- #\n","            # out = 1 ÏÉÅÌÉúÎ©¥ ÎèôÏùº tick ÏóêÏÑú config.out_set.retouch Î•º Ï°∞ÏÇ¨Ìï† Í±∞Í∏∞ ÎïåÎ¨∏Ïóê, Î®ºÏ†Ä Í≤ÄÏÇ¨Ìï®\n","            # Í∑∏Î¶¨Í≥†, out Í∏∞Ï§ÄÏù¥ close Îùº Ïù¥Í≤å ÎßûÏùå \n","            # close Í∞Ä long_out Î≥¥Îã§ ÎÇ¥Î†§Í∞ÄÏûàÎäî ÏÉÅÌÉúÏùºÌÖåÎãà high Î•º Ï°∞ÏÇ¨ÌïòÎäîÍ≤å ÎßûÏùå           \n","            # if out and res_df['high'].iloc[j] >= long_out.iloc[out_j]:\n","            #   config.out_set.retouch = 1\n","\n","            \n","            # ------- ÏùºÏ†ïÏãúÍ∞Ñ Ïù¥ÏÉÅ, dynamic_out Ï†ÅÏö© ------ #\n","            try:\n","              if j - out_idx >= config.out_set.retouch_out_period:\n","                static_long_out = res_df['long_out'].iloc[j]\n","            \n","            except Exception as e:\n","              pass\n","\n","              # ------- static out ------ #\n","            try:\n","              if out and res_df['high'].iloc[j] >= static_long_out:\n","                config.out_set.retouch = 1\n","            except Exception as e:\n","              pass\n","\n","              # ------- config.out_set.retouch out ------ #\n","            # if out and res_df['high'].iloc[j] >= long_out2.iloc[out_j]:\n","            #   config.out_set.retouch = 1\n","\n","\n","\n","            # -------------- st -------------- #\n","            # if res_df['close'].iloc[j] < res_df['middle_line'].iloc[j]:\n","            # if res_df['close'].iloc[j] < res_df['minor_ST3_Down'].iloc[j]:\n","            # if res_df['close'].iloc[j] < lower_middle.iloc[j]:\n","            # if res_df['close'].iloc[j] < res_df['minor_ST1_Down'].iloc[j]:\n","            if out == 0:\n","              if config.out_set.hl_out:\n","                if res_df['low'].iloc[j] <= res_df['long_out'].iloc[out_j]: # check out only once\n","                  out = 1\n","\n","              else:\n","                if res_df['close'].iloc[j] <= res_df['long_out'].iloc[out_j]: # check out only once\n","                  out = 1\n","\n","              # out_idx = j\n","              # static_long_out = long_out.iloc[out_j]\n","              # if config.out_set.second_out:\n","              # static_long_out = long_out.iloc[out_j] - res_df['st_gap'].iloc[out_j] * config.out_set.second_out_gap\n","\n","            # if out == 0 and res_df['low'].iloc[j] <= long_out.iloc[out_j]: # check out only once\n","            #   out = 1            \n","            \n","\n","\n","            # -------------- sma -------------- #\n","            # if res_df['close'].iloc[j] < res_df[sma].iloc[j]:\n","\n","            # -------------- sar -------------- #\n","            # if res_df['close'].iloc[j] < res_df['minor_ST3_Down'].iloc[j] \\\n","            #   or res_df['sar2'].iloc[j] >= res_df['low'].iloc[j]:\n","            # if res_df['close'].iloc[j] < long_out.iloc[initial_i]: # or \\\n","            #   #  res_df['close'].iloc[j] < res_df['sar2'].iloc[j]:\n","            #   #  res_df['sar2_uptrend'].iloc[j] == 0 or \\\n","            #   out = 1\n","            \n","            # if res_df['sar2_uptrend'].iloc[j] == 0:\n","\n","            #     if prev_sar is None:\n","            #       prev_sar = res_df['sar2'].iloc[j - 1]\n","                \n","            #     if res_df['close'].iloc[j] < prev_sar:\n","            #       out = 1\n","\n","            # else:\n","            #   if res_df['close'].iloc[j] < res_df['sar2'].iloc[j]:\n","            #     out = 1\n","\n","            # -------------- hl -------------- #\n","            # if res_df['close'].iloc[j] < long_out.iloc[tp_j]:\n","\n","            # -------------- stoch -------------- #\n","            # if res_df['stoch'].iloc[j - 2] <= res_df['stoch'].iloc[j - 1] and \\\n","            #   res_df['stoch'].iloc[j - 1] > res_df['stoch'].iloc[j] and \\\n","            #   res_df['stoch'].iloc[j - 1] >= stoch_upper:\n","            #   out = 1\n","\n","            # config.out_set.retouch 1 Í≤ΩÏö∞, config.out_set.retouch Ï°∞Í±¥ÎèÑ ÏûàÏñ¥ÏïºÌï®\n","            if out:\n","              if config.out_set.retouch:\n","                if config.out_set.retouch:\n","                  pass\n","                else:\n","                    continue\n","\n","              else:\n","                pass\n","\n","              if config.out_set.price_restoration:\n","                tp = res_df['long_out'].iloc[out_j]\n","                if config.out_set.second_out:\n","                  tp = res_df['long_out2'].iloc[out_j]\n","\n","                # if res_df['close'].iloc[j] < tp: # Ïù¥ Í≤ΩÏö∞Î•º protect ÌïòÎäîÍ±¥ insane ÏûÑ\n","                # # if res_df['high'].iloc[j] < tp: # --> config.out_set.hl_out ÏÇ¨Ïö©Ïãú Ïù¥ Ï°∞Í±¥ÏùÄ valid Ìï®\n","                #   tp = res_df['close'].iloc[j]\n","\n","              else:\n","\n","                if res_df['open'].iloc[j] <= res_df['long_out'].iloc[out_j]:\n","                  tp = res_df['open'].iloc[j]\n","                else:\n","                  if config.out_set.hl_out:\n","                    tp = res_df['long_out'].iloc[out_j]\n","                  else:\n","                    tp = res_df['close'].iloc[j]\n","\n","                # if not config.out_set.static_out:\n","                #   if res_df['open'].iloc[j] <= res_df['long_out'].iloc[out_j]: # dynamic close out Ïùò open Í≥†Î†§\n","                #     tp = res_df['open'].iloc[j]\n","                #   else:\n","                #     tp = res_df['close'].iloc[j]\n","\n","                # else:\n","                #   tp = res_df['close'].iloc[j]\n","\n","              if config.out_set.retouch: # out Í≥º open ÎπÑÍµê\n","                if config.out_set.second_out:  # long_out = sell\n","                # config.out_set.second_out ÏùÄ Í∏∞Î≥∏Ï†ÅÏúºÎ°ú limit Ïù¥Îùº Ïù¥ Íµ¨Ï°∞Í∞Ä Í∞ÄÎä•Ìï®\n","                  if res_df['open'].iloc[j] >= res_df['long_out2'].iloc[out_j]: # dynamic_out Ïùº Í≤ΩÏö∞ Í≥†Î†§Ìï¥ÏïºÌï®\n","                    tp = res_df['open'].iloc[j]\n","                else:\n","                  if res_df['open'].iloc[j] >= res_df['long_out'].iloc[out_j]: # dynamic_out Ïùº Í≤ΩÏö∞ Í≥†Î†§Ìï¥ÏïºÌï®\n","                    tp = res_df['open'].iloc[j]\n","\n","                try:\n","                  if res_df['open'].iloc[j] >= static_long_out:\n","                    tp = res_df['open'].iloc[j]\n","                  else:\n","                    tp = static_long_out\n","                except Exception as e:\n","                  pass\n","\n","              # tp = res_df['open'].iloc[j]\n","              tp_state_list.append(\"long close_out\")\n","              trade_done = 1\n","\n","              tp_list.append(tp)\n","              tp_idx_list.append(j)\n","              fee += config.trader_set.market_fee\n","\n","          \n","          # -------------- non tp -------------- #\n","          if j == len(res_df) - 1:\n","            trade_done = 1\n","            tp = res_df['close'].iloc[j]\n","            tp_list.append(tp) \n","            tp_idx_list.append(j)\n","            fee += config.trader_set.market_fee\n","\n","\n","          if trade_done:\n","\n","            # --------------- tp_ratio info --------------- #\n","            try:\n","              if config.out_set.use_out:\n","                done_tp = res_df['long_tp'].iloc[ep_j]\n","                done_out = res_df['long_out'].iloc[ep_j]\n","\n","                if done_out >= ep_list[0]: # loss >= 1\n","                  tp_ratio = np.nan\n","                  dr = np.nan\n","                  # print(\"loss >= 1\")\n","                else:\n","                  tp_ratio = ((done_tp - ep_list[0] - tp_fee * ep_list[0]) / (ep_list[0] - done_out + out_fee * ep_list[0]))                \n","                  dr = ((done_tp - ep_list[0]) / (ep_list[0] - done_out))          \n","\n","              else:      \n","                dr = np.nan\n","                tp_ratio = np.nan\n","\n","            except Exception as e:\n","              print(\"error in tr phase :\", e)\n","              dr = np.nan              \n","              tp_ratio = np.nan\n","            \n","            tp_ratio_list.append(tp_ratio)\n","            long_tp_ratio_list.append(tp_ratio)\n","            dr_list.append(dr)\n","            long_dr_list.append(dr)\n","\n","\n","            qty_list = []\n","            temp_pr_list = []\n","            r_qty = 1\n","            for q_i in range(len(tp_list) - 1, -1, -1):\n","\n","              if len(tp_list) == 1:\n","                temp_qty = r_qty\n","              else:\n","                if q_i !=0:\n","                  temp_qty = r_qty / config.tp_set.partial_qty_divider\n","                else:\n","                  temp_qty = r_qty\n","\n","              # temp_pr = (tp_list[q_i] / ep_list[0] - fee - 1) * temp_qty\n","              temp_pr = (tp_list[q_i] / ep_list[0] - fee - 1) * temp_qty * config.lvrg_set.leverage\n","              r_qty -= temp_qty\n","\n","              temp_pr_list.append(temp_pr)\n","\n","            temp_pr = sum(temp_pr_list) + 1\n","\n","            # -------------------- sub ep -> pr calc -------------------- #\n","            if len(ep_list) > 1:\n","            \n","              p_ep_pr = []\n","              for sub_ep_ in ep_list:\n","                sub_pr = (tp / sub_ep_ - fee - 1) * config.lvrg_set.leverage\n","                p_ep_pr.append(sub_pr)\n","\n","              temp_pr = sum(p_ep_pr) + 1\n","\n","              print(\"temp_pr :\", temp_pr)\n","\n","            # ------------ hedge + non_hedge pr summation ------------ #\n","            #         hedge pr direction is opposite to the origin       #\n","            hedge_pr = 1\n","            if hedge_cnt == 0:\n","\n","              #       hedge tp      #\n","              h_tp = res_df['close'].iloc[j]\n","              hedge_pr = (h_ep / h_tp - fee - 1) * config.lvrg_set.leverage  # hedge short\n","              temp_pr += hedge_pr\n","              h_j = j\n","\n","\n","            # ll = min(res_df['low'].iloc[i:j + 1])\n","            ll = min(res_df['low'].iloc[i:j])   # pos. Ï†ïÎ¶¨ÌïòÍ∏∞ Î∞îÎ°ú ÏßÅÏ†ÑÍπåÏßÄ\n","            long_liq = (ll / ep_list[0] - fee - 1) * config.lvrg_set.leverage + 1\n","\n","            if j != len(res_df) - 1:\n","\n","              ep_tp_list.append((ep_list, tp_list))\n","              trade_list.append((ep_idx_list, tp_idx_list))\n","\n","              liqd_list.append(long_liq)\n","              long_liqd_list.append(long_liq)\n","\n","              h_ep_tp_list.append((h_ep, h_tp))        \n","              h_trade_list.append([initial_i, h_i, h_j])                \n","\n","              pr_list.append(temp_pr)\n","              fee_list.append(fee)\n","              long_list.append(temp_pr)\n","              long_fee_list.append(fee)\n","\n","              h_pr_list.append(hedge_pr)\n","              h_long_list.append(hedge_pr)                    \n","\n","              i = j\n","              break\n","            \n","            else:\n","\n","              # ep_tp_list.append((ep_list, tp_list))\n","              # trade_list.append((ep_idx_list, tp_idx_list))\n","              \n","              # pr_list Î•º ÎÑ£ÏßÄ ÏïäÏùÑÍ±∞ÎãàÍπå, open_list ÏóêÏÑú Ìï¥Îãπ idx Îäî pop\n","              open_list.pop()\n","              zone_list.pop()\n","              side_list.pop()\n","          \n","              #         tp ÎØ∏Ï≤¥Í≤∞ survey        #\n","              nontp_liqd_list.append(long_liq)\n","              nontp_long_liqd_list.append(long_liq)\n","              nontp_long_indexs.append(i)\n","              nontp_long_ep_list.append(ep_list[0])\n","              \n","              nontp_long_pr = (tp / ep_list[0] - fee - 1) * config.lvrg_set.leverage + 1\n","              nontp_pr_list.append(nontp_long_pr)\n","              nontp_long_pr_list.append(nontp_long_pr)\n","\n","            if len(open_list) > len(trade_list):\n","              print('debug from index :', i)\n","              print(len(open_list), len(trade_list))\n","              print(\"len(res_df) :\", len(res_df))\n","              assert len(open_list) == len(trade_list), 'stopped'\n","      \n","      i += 1  # if entry starts with prev trade's close, do not use it ! \n","      # print(\"i in end :\", i)\n","      if i >= len(res_df):\n","        break\n","\n","\n","\n","    # -------------------- result analysis -------------------- #\n","    # try:\n","    print(\"elapsed_time :\", time.time() - start_0)\n","\n","    plt.style.use('default')\n","    # mpl.rcParams.update(mpl.rcParamsDefault)\n","\n","    plt.figure(figsize=(16, 12))\n","    # plt.figure(figsize=(12, 8))\n","    # plt.figure(figsize=(10, 6))\n","    plt.suptitle(key)\n","\n","    try:\n","      np_pr = np.array(pr_list)\n","\n","      sr = sharpe_ratio(np_pr)\n","\n","      dpf = (len(res_df) / 1440) / len(np_pr)\n","\n","      np_zone_list = np.array(zone_list)\n","      # np_pr_list = np.array(pr_list)\n","      np_side_list = np.array(side_list)\n","\n","      t_w = np.sum(np.where((np_zone_list == 't') & (np_pr > 1), 1, 0))\n","      c_w = np.sum(np.where((np_zone_list == 'c') & (np_pr > 1), 1, 0))\n","      t_ls = np.sum(np.where((np_zone_list == 't') & (np_pr < 1), 1, 0))\n","      c_ls = np.sum(np.where((np_zone_list == 'c') & (np_pr < 1), 1, 0))\n","\n","      # np_pr = (np.array(pr_list) - 1) * config.lvrg_set.leverage + 1\n","\n","      # ----- fake_pr ----- #\n","      # np_pr = np.where(np_pr > 1, 1 + (np_pr - 1) * 3, np_pr)\n","\n","      total_pr = np.cumprod(np_pr)\n","\n","      for_sum_pr = np_pr - 1\n","      for_sum_pr[0] = 1\n","      sum_pr = np.cumsum(for_sum_pr)\n","      sum_pr = np.where(sum_pr < 0, 0, sum_pr)\n","\n","      wr = len(np_pr[np_pr > 1]) / len(np_pr[np_pr != 1])\n","\n","      np_tp_ratio_list = np.array(tp_ratio_list) # Ï¥àÍ∏∞Ïóê tr ÏùÑ Ï†ïÌïòÎäîÍ±∞Îùº mean ÏÇ¨Ïö©ÌïòÎäîÍ≤å ÎßûÏùå\n","      mean_tr = np.mean(np_tp_ratio_list[np.isnan(np_tp_ratio_list) == 0])\n","\n","      np_dr_list = np.array(dr_list) # Ï¥àÍ∏∞Ïóê tr ÏùÑ Ï†ïÌïòÎäîÍ±∞Îùº mean ÏÇ¨Ïö©ÌïòÎäîÍ≤å ÎßûÏùå\n","      mean_dr = np.mean(np_dr_list[np.isnan(np_dr_list) == 0])\n","\n","      # pr_gap = (np_pr - 1) / config.lvrg_set.leverage + fee\n","      # tp_gap_ = pr_gap[pr_gap > 0]\n","      # # mean_config.tr_set.tp_gap = np.mean(pr_gap[pr_gap > 0])\n","      # mean_ls_gap = np.mean(pr_gap[pr_gap < 0])\n","\n","      # ---- profit fee ratio ---- #\n","      # mean_pgfr = np.mean((tp_gap_ - fee) / abs(tp_gap_ + fee))\n","\n","      # plt.subplot(121)\n","      plt.subplot(231)\n","      plt.plot(total_pr)\n","      plt.plot(sum_pr, color='gold')\n","      if len(nontp_liqd_list) != 0:\n","        plt.title(\"wr : %.3f\\n len(td) : %s\\n dpf : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n sum_pr : %.3f\\n sr : %.3f\"\n","                  % (wr, len(np_pr[np_pr != 1]), dpf, np.min(np_pr), total_pr[-1], sum_pr[-1], sr) + \\\n","                  \"\\n leverage %s\\nliqd : %.3f\\nmean_tr : %.3f\\n mean_dr : %.3f\\n nontp_liqd_cnt : %s\\nnontp_liqd : %.3f\\nontp_liqd_pr : %.3f\\n tw cw tls cls : %s %s %s %s\" \n","                  % (config.lvrg_set.leverage, min(liqd_list), mean_tr, mean_dr, len(nontp_liqd_list), \n","                     min(nontp_liqd_list), min(nontp_pr_list), t_w, c_w, t_ls, c_ls),\n","                  position=title_position)\n","      else:\n","        plt.title(\"wr : %.3f\\n len(td) : %s\\n dpf : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n sum_pr : %.3f\\n sr : %.3f\" \n","                  % (wr, len(np_pr[np_pr != 1]), dpf, np.min(np_pr), total_pr[-1], sum_pr[-1], sr) + \\\n","                  \"\\n leverage %s\\nliqd : %.3f\\nmean_tr : %.3f\\n mean_dr : %.3f\\n nontp_liqd_cnt : %s\\n tw cw tls cls : %s %s %s %s\"\n","                  % (config.lvrg_set.leverage, min(liqd_list), mean_tr, mean_dr, len(nontp_liqd_list), t_w, c_w, t_ls, c_ls), \n","                  position=title_position)\n","      # plt.show()\n","\n","      survey_df.iloc[survey_i] = wr, len(np_pr[np_pr != 1]), dpf, np.min(np_pr), \\\n","        total_pr[-1], sum_pr[-1], min(liqd_list), mean_tr, mean_dr, sr \n","\n","      print('supblot231 passed')\n","\n","    except Exception as e:\n","      print(\"error in 231 :\", e)\n","\n","\n","    try:\n","      #         short only      #\n","      short_np_pr = np.array(short_list)\n","\n","      short_sr = sharpe_ratio(short_np_pr)\n","\n","      short_dpf = (len(res_df) / 1440) / len(short_np_pr)\n","\n","      total_short_pr = np.cumprod(short_np_pr)\n","      \n","      short_for_sum_pr = short_np_pr - 1\n","      short_for_sum_pr[0] = 1\n","      short_sum_pr = np.cumsum(short_for_sum_pr)\n","      short_sum_pr = np.where(short_sum_pr < 0, 0, short_sum_pr)\n","\n","      short_wr = len(short_np_pr[short_np_pr > 1]) / len(short_np_pr[short_np_pr != 1])\n","      \n","      t_w_s = np.sum(np.where((np_zone_list == 't') & (np_pr > 1) & (np_side_list == 's'), 1, 0))\n","      c_w_s = np.sum(np.where((np_zone_list == 'c') & (np_pr > 1) & (np_side_list == 's'), 1, 0))\n","      t_ls_s = np.sum(np.where((np_zone_list == 't') & (np_pr < 1) & (np_side_list == 's'), 1, 0))\n","      c_ls_s = np.sum(np.where((np_zone_list == 'c') & (np_pr < 1) & (np_side_list == 's'), 1, 0))\n","      # short_cumprod_profit = np.cumprod(short_np_pr[short_np_pr > 1])[-1]\n","      # short_cumprod_loss = np.cumprod(short_np_pr[short_np_pr < 1])[-1]\n","      # short_pr_tr = short_cumprod_profit * short_cumprod_loss\n","\n","      np_short_tp_ratio_list = np.array(short_tp_ratio_list)\n","      mean_short_tr = np.mean(np_short_tp_ratio_list[np.isnan(np_short_tp_ratio_list) == 0])\n","      \n","      np_short_dr_list = np.array(short_dr_list)\n","      mean_short_dr = np.mean(np_short_dr_list[np.isnan(np_short_dr_list) == 0])\n","      \n","      # short_pr_gap = (short_np_pr - 1) / config.lvrg_set.leverage + fee\n","      # short_tp_gap = short_pr_gap[short_pr_gap > 0]\n","      # # mean_short_tp_gap = np.mean(short_pr_gap[short_pr_gap > 0])\n","      # # mean_short_ls_gap = np.mean(short_pr_gap[short_pr_gap < 0])\n","\n","      # mean_short_pgfr = np.mean((short_tp_gap - fee) / abs(short_tp_gap + fee))\n","      \n","      plt.subplot(232)\n","      plt.plot(total_short_pr)\n","      plt.plot(short_sum_pr, color='gold')\n","      if len(nontp_short_liqd_list) != 0:   \n","\n","        max_nontp_short_term = len(res_df) - nontp_short_indexs[0]\n","        \n","        plt.title(\"wr : %.3f\\nlen(short_td) : %s\\n dpf : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n sum_pr : %.3f\\n sr : %.3f\"\n","                  % (short_wr, len(short_np_pr[short_np_pr != 1]), short_dpf, np.min(short_np_pr), total_short_pr[-1], short_sum_pr[-1], short_sr) + \\\n","                  \"\\n leverage %s\\nliqd : %.3f\\nmean_tr : %.3f\\n mean_dr : %.3f\\n nontp_short_liqd_cnt : %s\\nnontp_short_liqd : %.3f\\nontp_short_liqd_pr : %.3f\\nmax_nontp_short_term : %s\\n tw cw tls cls : %s %s %s %s\"\n","                  % (config.lvrg_set.leverage, min(short_liqd_list), mean_short_tr, mean_short_dr, \n","                     len(nontp_short_liqd_list), min(nontp_short_liqd_list), min(nontp_short_pr_list), max_nontp_short_term, t_w_s, c_w_s, t_ls_s, c_ls_s),\n","                  position=title_position)\n","      else:\n","        plt.title(\"wr : %.3f\\nlen(short_td) : %s\\n dpf : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n sum_pr : %.3f\\n sr : %.3f\"\n","                  % (short_wr, len(short_np_pr[short_np_pr != 1]), short_dpf, np.min(short_np_pr), total_short_pr[-1], short_sum_pr[-1], short_sr) + \\\n","                  \"\\n leverage %s\\nliqd : %.3f\\nmean_tr : %.3f\\n mean_dr : %.3f\\n nontp_short_liqd_cnt : %s\\n tw cw tls cls : %s %s %s %s\" \n","                  % (config.lvrg_set.leverage, min(short_liqd_list), mean_short_tr, mean_short_dr, len(nontp_short_liqd_list), t_w_s, c_w_s, t_ls_s, c_ls_s),\n","                  position=title_position)\n","\n","      short_survey_df.iloc[survey_i] = short_wr, len(short_np_pr[short_np_pr != 1]), short_dpf, np.min(short_np_pr), \\\n","          total_short_pr[-1], short_sum_pr[-1], min(short_liqd_list), mean_short_tr, mean_short_dr, short_sr     \n","\n","      print('supblot232 passed')\n","    \n","    except Exception as e:\n","      print(\"error in 232 :\", e)\n","\n","    try:\n","      #         long only      #\n","      long_np_pr = np.array(long_list)\n","      # long_np_pr = (np.array(long_list) - 1) * config.lvrg_set.leverage + 1\n","\n","      long_sr = sharpe_ratio(long_np_pr)\n","\n","      long_dpf = (len(res_df) / 1440) / len(long_np_pr)\n","\n","      total_long_pr = np.cumprod(long_np_pr)\n","      \n","      long_for_sum_pr = long_np_pr - 1\n","      long_for_sum_pr[0] = 1\n","      long_sum_pr = np.cumsum(long_for_sum_pr)\n","      long_sum_pr = np.where(long_sum_pr < 0, 0, long_sum_pr)\n","\n","      long_wr = len(long_np_pr[long_np_pr > 1]) / len(long_np_pr[long_np_pr != 1])\n","\n","      t_w_l = np.sum(np.where((np_zone_list == 't') & (np_pr > 1) & (np_side_list == 'l'), 1, 0))\n","      c_w_l = np.sum(np.where((np_zone_list == 'c') & (np_pr > 1) & (np_side_list == 'l'), 1, 0))\n","      t_ls_l = np.sum(np.where((np_zone_list == 't') & (np_pr < 1) & (np_side_list == 'l'), 1, 0))\n","      c_ls_l = np.sum(np.where((np_zone_list == 'c') & (np_pr < 1) & (np_side_list == 'l'), 1, 0))\n","      # long_cumprod_profit = np.cumprod(long_np_pr[long_np_pr > 1])[-1]\n","      # long_cumprod_loss = np.cumprod(long_np_pr[long_np_pr < 1])[-1]\n","      # long_pr_tr = long_cumprod_profit * long_cumprod_loss\n","\n","      np_long_tp_ratio_list = np.array(long_tp_ratio_list)\n","      mean_long_tr = np.mean(np_long_tp_ratio_list[np.isnan(np_long_tp_ratio_list) == 0])\n","      \n","      np_long_dr_list = np.array(long_dr_list)\n","      mean_long_dr = np.mean(np_long_dr_list[np.isnan(np_long_dr_list) == 0])\n","\n","      # long_pr_gap = (long_np_pr - 1) / config.lvrg_set.leverage + fee\n","      # long_tp_gap = long_pr_gap[long_pr_gap > 0]\n","      # # mean_long_tp_gap = np.mean(long_pr_gap[long_pr_gap > 0])\n","      # # mean_long_ls_gap = np.mean(long_pr_gap[long_pr_gap < 0])\n","\n","      # mean_long_pgfr = np.mean((long_tp_gap - fee) / abs(long_tp_gap + fee))\n","\n","      plt.subplot(233)\n","      plt.plot(total_long_pr)\n","      plt.plot(long_sum_pr, color='gold')\n","      if len(nontp_long_liqd_list) != 0:\n","\n","        max_nontp_long_term = len(res_df) - nontp_long_indexs[0]\n","\n","        plt.title(\"wr : %.3f\\nlen(long_td) : %s\\n dpf : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n sum_pr : %.3f\\n sr : %.3f\"\n","                  % (long_wr, len(long_np_pr[long_np_pr != 1]), long_dpf, np.min(long_np_pr), total_long_pr[-1], long_sum_pr[-1], long_sr) + \\\n","                  \"\\n leverage %s\\nliqd : %.3f\\nmean_tr : %.3f\\n mean_dr : %.3f\\n nontp_long_liqd_cnt : %s\\nnontp_long_liqd : %.3f\\nontp_long_liqd_pr : %.3f\\nmax_nontp_long_term : %s\\n tw cw tls cls : %s %s %s %s\"\n","                  % (config.lvrg_set.leverage, min(long_liqd_list), mean_long_tr, mean_long_dr, \n","                     len(nontp_long_liqd_list), min(nontp_long_liqd_list), min(nontp_long_pr_list), max_nontp_long_term, t_w_l, c_w_l, t_ls_l, c_ls_l),\n","                  position=title_position)\n","      else:\n","        plt.title(\"wr : %.3f\\nlen(long_td) : %s\\n dpf : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n sum_pr : %.3f\\n sr : %.3f\"\n","                  % (long_wr, len(long_np_pr[long_np_pr != 1]), long_dpf, np.min(long_np_pr), total_long_pr[-1], long_sum_pr[-1], long_sr) + \\\n","                  \"\\n leverage %s\\nliqd : %.3f\\nmean_tr : %.3f\\n mean_dr : %.3f\\n nontp_long_liqd_cnt : %s\\n tw cw tls cls : %s %s %s %s\" \n","                  % (config.lvrg_set.leverage, min(long_liqd_list), mean_long_tr, mean_long_dr, len(nontp_long_liqd_list), t_w_l, c_w_l, t_ls_l, c_ls_l),\n","                  position=title_position)\n","\n","      long_survey_df.iloc[survey_i] = long_wr, len(long_np_pr[long_np_pr != 1]), long_dpf, np.min(long_np_pr), \\\n","        total_long_pr[-1], long_sum_pr[-1], min(long_liqd_list), mean_long_tr, mean_long_dr, long_sr     \n","\n","      print('supblot233 passed')\n","\n","    except Exception as e:\n","      print(\"error in 233 :\", e)\n","\n","\n","    try:\n","      #     reversion adjustment      #\n","      # rev_np_pr = 1 / (np.array(pr_list) + fee) - fee\n","      rev_fee = tp_fee + out_fee - np.array(fee_list)\n","      rev_np_pr = (1 / ((np.array(pr_list) - 1) / config.lvrg_set.leverage + np.array(fee_list) + 1) - rev_fee - 1) * config.lvrg_set.leverage + 1\n","      # rev_np_pr = (1 / (np.array(pr_list) + fee) - fee - 1) * config.lvrg_set.leverage + 1\n","          \n","      rev_sr = sharpe_ratio(rev_np_pr)\n","\n","      rev_total_pr = np.cumprod(rev_np_pr)\n","      rev_wr = len(rev_np_pr[rev_np_pr > 1]) / len(rev_np_pr[rev_np_pr != 1])\n","\n","      rev_total_for_sum_pr = rev_np_pr - 1\n","      rev_total_for_sum_pr[0] = 1\n","      rev_total_sum_pr = np.cumsum(rev_total_for_sum_pr)\n","      rev_total_sum_pr = np.where(rev_total_sum_pr < 0, 0, rev_total_sum_pr)\n","\n","      # plt.subplot(122)\n","      plt.subplot(234)\n","      plt.plot(rev_total_pr)\n","      plt.plot(rev_total_sum_pr, color='gold')\n","\n","      plt.title(\"wr : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n sum_pr : %.3f\\n sr : %.3f\" \n","                % (rev_wr, np.min(rev_np_pr), rev_total_pr[-1], rev_total_sum_pr[-1], rev_sr))\n","      \n","      rev_survey_df.iloc[survey_i] = rev_wr, np.min(rev_np_pr), rev_total_pr[-1], rev_total_sum_pr[-1], rev_sr\n","\n","    except Exception as e:\n","      print(\"error in 234 :\", e)\n","\n","    try:\n","      #         short       #\n","      # rev_short_np_pr = 1 / (np.array(short_list) + fee) - fee\n","      rev_short_fee = tp_fee + out_fee - np.array(short_fee_list)\n","      rev_short_np_pr = (1 / ((np.array(short_list) - 1) / config.lvrg_set.leverage + np.array(short_fee_list) + 1) - rev_short_fee - 1) * config.lvrg_set.leverage + 1\n","      # rev_short_np_pr = (1 / (np.array(short_list) + fee) - fee - 1) * config.lvrg_set.leverage + 1\n","      \n","      rev_short_sr = sharpe_ratio(rev_short_np_pr)\n","          \n","      rev_total_short_pr = np.cumprod(rev_short_np_pr)\n","      rev_short_wr = len(rev_short_np_pr[rev_short_np_pr > 1]) / len(rev_short_np_pr[rev_short_np_pr != 1])\n","\n","      rev_short_for_sum_pr = rev_short_np_pr - 1\n","      rev_short_for_sum_pr[0] = 1\n","      rev_short_sum_pr = np.cumsum(rev_short_for_sum_pr)\n","      rev_short_sum_pr = np.where(rev_short_sum_pr < 0, 0, rev_short_sum_pr)\n","\n","      # plt.subplot(122)\n","      plt.subplot(235)\n","      plt.plot(rev_total_short_pr)\n","      plt.plot(rev_short_sum_pr, color='gold')\n","\n","      plt.title(\"wr : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n sum_pr : %.3f\\n sr : %.3f\" \n","                % (rev_short_wr, np.min(rev_short_np_pr), rev_total_short_pr[-1], rev_short_sum_pr[-1], rev_short_sr))\n","\n","      rev_short_survey_df.iloc[survey_i] = rev_short_wr, np.min(rev_short_np_pr), rev_total_short_pr[-1], rev_short_sum_pr[-1], rev_short_sr\n","\n","    except Exception as e:\n","      print(\"error in 235 :\", e)\n","\n","    try:\n","      #         long       #\n","      # rev_long_np_pr = 1 / (np.array(long_list) + fee) - fee\n","      rev_long_fee = tp_fee + out_fee - np.array(long_fee_list)\n","      rev_long_np_pr = (1 / ((np.array(long_list) - 1) / config.lvrg_set.leverage + np.array(long_fee_list) + 1) - rev_long_fee - 1) * config.lvrg_set.leverage + 1\n","          \n","      rev_long_sr = sharpe_ratio(rev_long_np_pr)\n","\n","      rev_total_long_pr = np.cumprod(rev_long_np_pr)\n","      rev_long_wr = len(rev_long_np_pr[rev_long_np_pr > 1]) / len(rev_long_np_pr[rev_long_np_pr != 1])\n","\n","      rev_long_for_sum_pr = rev_long_np_pr - 1\n","      rev_long_for_sum_pr[0] = 1\n","      rev_long_sum_pr = np.cumsum(rev_long_for_sum_pr)\n","      rev_long_sum_pr = np.where(rev_long_sum_pr < 0, 0, rev_long_sum_pr)\n","\n","      # plt.subplot(122)\n","      plt.subplot(236)\n","      plt.plot(rev_total_long_pr)\n","      plt.plot(rev_long_sum_pr, color='gold')\n","\n","      plt.title(\"wr : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n sum_pr : %.3f\\n sr : %.3f\" \n","                % (rev_long_wr, np.min(rev_long_np_pr), rev_total_long_pr[-1], rev_long_sum_pr[-1], rev_long_sr))\n","      \n","      rev_long_survey_df.iloc[survey_i] = rev_long_wr, np.min(rev_long_np_pr), rev_total_long_pr[-1], rev_long_sum_pr[-1], rev_long_sr\n","      \n","    except Exception as e:\n","      print(\"error in 236 :\", e)\n","\n","    if show_plot:\n","      plt.show()\n","    \n","\n","    try:\n","\n","      h_np_pr = np.array(h_pr_list)\n","      # h_rev_np_pr = 1 / (np.array(h_pr_list) + fee) - fee    # define, for plot_check below cell\n","      h_rev_np_pr = (1 / ((np.array(h_pr_list) - 1) / config.lvrg_set.leverage + np.array(fee_list) + 1) - np.array(fee_list) - 1) * config.lvrg_set.leverage + 1\n","\n","      # --------------------- h pr plot --------------------- #\n","      if len(h_np_pr[h_np_pr != 1]) != 0:\n","\n","        plt.figure(figsize=(16, 12))\n","        plt.suptitle(key + \" hedge\")\n","\n","        h_total_pr = np.cumprod(h_np_pr)\n","        h_wr = len(h_np_pr[h_np_pr > 1]) / len(h_np_pr[h_np_pr != 1])\n","\n","        # plt.subplot(121)\n","        plt.subplot(231)\n","        plt.plot(h_total_pr)\n","        plt.title(\"wr : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n leverage %s\" % (h_wr, np.min(h_np_pr), h_total_pr[-1], config.lvrg_set.leverage))\n","        # plt.show()\n","\n","        #         short only      #\n","        h_short_np_pr = np.array(h_short_list)\n","\n","        h_total_short_pr = np.cumprod(h_short_np_pr)\n","        h_short_wr = len(h_short_np_pr[h_short_np_pr > 1]) / len(h_short_np_pr[h_short_np_pr != 1])\n","        \n","        plt.subplot(232)\n","        plt.plot(h_total_short_pr)\n","        plt.title(\"wr : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n leverage %s\" % (h_short_wr, np.min(h_short_np_pr), h_total_short_pr[-1], config.lvrg_set.leverage))\n","\n","        #         long only      #\n","        h_long_np_pr = np.array(h_long_list)\n","\n","        h_total_long_pr = np.cumprod(h_long_np_pr)\n","        h_long_wr = len(h_long_np_pr[h_long_np_pr > 1]) / len(h_long_np_pr[h_long_np_pr != 1])\n","        \n","        plt.subplot(233)\n","        plt.plot(h_total_long_pr)\n","        plt.title(\"wr : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n leverage %s\" % (h_long_wr, np.min(h_long_np_pr), h_total_long_pr[-1], config.lvrg_set.leverage))\n","\n","\n","        #     reversion adjustment      #\n","            \n","        h_rev_total_pr = np.cumprod(h_rev_np_pr)\n","        h_rev_wr = len(h_rev_np_pr[h_rev_np_pr > 1]) / len(h_rev_np_pr[h_rev_np_pr != 1])\n","\n","        # plt.subplot(122)\n","        plt.subplot(234)\n","        plt.plot(h_rev_total_pr)\n","        plt.title(\"wr : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n leverage %s\" % (h_rev_wr, np.min(h_rev_np_pr), h_rev_total_pr[-1], config.lvrg_set.leverage))\n","\n","        #         short       #\n","        # h_rev_short_np_pr = 1 / (np.array(h_short_list) + fee) - fee\n","        h_rev_short_np_pr =  (1 / ((np.array(h_short_list) - 1) / config.lvrg_set.leverage + np.array(short_fee_list) + 1) - np.array(short_fee_list) - 1) * config.lvrg_set.leverage + 1\n","           \n","        h_rev_total_short_pr = np.cumprod(h_rev_short_np_pr)\n","        h_rev_short_wr = len(h_rev_short_np_pr[h_rev_short_np_pr > 1]) / len(h_rev_short_np_pr[h_rev_short_np_pr != 1])\n","\n","        # plt.subplot(122)\n","        plt.subplot(235)\n","        plt.plot(h_rev_total_short_pr)\n","        plt.title(\"wr : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n leverage %s\" % (h_rev_short_wr, np.min(h_rev_short_np_pr), h_rev_total_short_pr[-1], config.lvrg_set.leverage))\n","\n","        #         long       #\n","        # h_rev_long_np_pr = 1 / (np.array(h_long_list) + fee) - fee\n","        h_rev_long_np_pr =  (1 / ((np.array(h_long_list) - 1) / config.lvrg_set.leverage + np.array(long_fee_list) + 1) - np.array(long_fee_list) - 1) * config.lvrg_set.leverage + 1\n","            \n","        h_rev_total_long_pr = np.cumprod(h_rev_long_np_pr)\n","        h_rev_long_wr = len(h_rev_long_np_pr[h_rev_long_np_pr > 1]) / len(h_rev_long_np_pr[h_rev_long_np_pr != 1])\n","\n","        # plt.subplot(122)\n","        plt.subplot(236)\n","        plt.plot(h_rev_total_long_pr)\n","        plt.title(\"wr : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n leverage %s\" % (h_rev_long_wr, np.min(h_rev_long_np_pr), h_rev_total_long_pr[-1], config.lvrg_set.leverage))\n","        \n","        if show_plot:\n","          plt.show()\n","          \n","    except Exception as e:\n","      print('error in h_pr plot :', e)   \n","    \n","    print()\n","\n","\n","  # break # pair loop"],"execution_count":12,"outputs":[{"output_type":"stream","name":"stdout","text":["2021-11-17 ETHUSDT.ftr loaded !\n","config.loc_set.point.exp_itv : 1m\n","config.loc_set.point.tpg_itv : 5m\n","config.loc_set.point.outg_itv : 15m\n","config.loc_set.point.outg_dc_period : None\n","config.loc_set.zone.dtk_itv : 5m\n","-----------------------------------\n","config.loc_set.zone.short_spread : None\n","config.loc_set.zone.long_spread : None\n","config.loc_set.zone.dt_k : None\n","config.loc_set.zone.ei_k : 0.095\n","config.loc_set.zone.dc_period : 135\n","config.loc_set.zone.use_dtk_line : 0\n","config.loc_set.zone.zone_rejection : 1\n","config.loc_set.zone.bbz_itv : 15m\n","config.loc_set.zone.zone_dt_k : 0.4\n","config.loc_set.zone.zone_dc_period : 135\n","-----------------------------------\n","config.loc_set.point.tf_entry : 1\n","config.loc_set.point.htf_entry : 15\n","config.tr_set.ep_gap : 0.0\n","config.tr_set.out_gap : 1.3\n","config.tr_set.tp_gap : 0.0\n","config.tr_set.c_ep_gap : None\n","config.tr_set.t_out_gap : -0.0\n","-----------------------------------\n","config.lvrg_set.leverage : 2\n","config.lvrg_set.target_pct : 0.1\n","elapsed_time : 11.817559719085693\n","supblot231 passed\n","supblot232 passed\n","supblot233 passed\n"]},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1600x1200 with 6 Axes>"]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\n"]}]},{"cell_type":"markdown","metadata":{"id":"MteLY9PS2ZeK"},"source":["##### check statistical significance"]},{"cell_type":"code","metadata":{"id":"NzbWuwSw2jaj","colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"status":"ok","timestamp":1638946652294,"user_tz":-540,"elapsed":7717,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"8282fda3-243c-49c6-fd11-4dcf52f47337"},"source":["# print(survey_df)\n","\n","plt.style.use('dark_background')\n","\n","title_name_list = [[\"total\", \"short\", \"long\"], [\"rev_total\", \"rev_short\", \"rev_long\"]]\n","survey_dfs_list = [[survey_df, short_survey_df, long_survey_df], [rev_survey_df, rev_short_survey_df, rev_long_survey_df]]\n","# title_name = \n","# survey_df_list = \n","\n","space_ = \" \" * 140\n","\n","for d_idx, (title_name, survey_dfs) in enumerate(zip(title_name_list, survey_dfs_list)):\n","\n","  fig = plt.figure(figsize=(30, 10))\n","\n","  gs = gridspec.GridSpec(nrows=1, # row Î™á Í∞ú \n","                          ncols=3, # col Î™á Í∞ú \n","                          # height_ratios=[1, 1, 1]\n","                        )\n","\n","  # gs = fig.add_gridspec(1, 3, wspace=0, hspace=0)\n","\n","  # nrows, ncols, h_r = 3, 3, [1, 1, 1]\n","  nrows, ncols, h_r = 3, 4, [1, 1, 1]\n","  # nrows, ncols, h_r = 4, 3, [1, 1, 1, 1]\n","\n","  # if d_idx == 0:\n","  # else:\n","    # nrows, ncols, h_r = 2, 2, [1, 1]\n","\n","  for gs_idx, (title, s_df) in enumerate(zip(title_name, survey_dfs)):  \n","\n","\n","    inner_gs = gs[gs_idx].subgridspec(nrows=nrows, # row Î™á Í∞ú \n","                          ncols=ncols, # col Î™á Í∞ú \n","                          height_ratios=h_r\n","                        )\n","\n","    for col_idx, s_cols in enumerate(s_df.columns):\n","      plt.subplot(inner_gs[col_idx])\n","      plt.plot(s_df[s_cols])\n","      plt.title(s_cols)\n","\n","  # plt.suptitle(\"total\" + \" \" * 140 + \"short\" + \" \" * 140 + \"long\")\n","  plt.suptitle(space_.join(title_name))\n","  plt.show()\n","  print(\"\\n\")"],"execution_count":10,"outputs":[{"output_type":"display_data","data":{"image/png":"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40lJSUpNTVVgYOAl92GxWPTkk0/qt99+U1ZWlk6fPq1Tp07ppptukq+v75VKHQAAAEAxZWdna8KECbrzzjuVlJSkjRs36l//+pf8/f0LzD1y5EiBsdTUVPn5+dkeBwYGat++fQXm5d+O7691RHx8/N89BAAAAABlIDAwUPv377d9cTpfUef6f60f8huq8uuH/Pl//QyiqDEAAMoaTVQAgAL+WhCVxPPPP6///Oc/2rRpkx588EH16NFD3bp10y+//CI3N/7ZAQAAAMqDN998U02aNNHEiRN1/vx5TZ06VXv27FGrVq3s5uXl5RX6fIvFctmvbbVaL/u5AAAAAMqvK1E/AABQlvg0GwBcUFFNUocPH1alSpXUuHFju/GaNWvKz89Phw8fvuQ++vfvr2+//VYjRozQJ598ovXr1+ubb7655G1CAAAAAJStgwcPavbs2QoJCVGLFi3k6empp59+usT7OXz4sJo2bVpgvFmzZrbtl/J3vsgBAAAA4Mo4fPiwGjduXKAJqiTn+n/dnyQ1atSowLbCxgAAKGs0UQGAC8q/1/hfG5tWr14tSXryySftxsePHy9JWrVqld0+CmuMysvLK1BQ9e/fX3Xr1v37iQMAAAD42/7xj3/Iy8vLbuzAgQPKyMgoMF4cq1evVrt27XTrrbfaxqpUqaJHH31U8fHx2r179yX3UVSNAgAAAMBxVq9erVq1amngwIG2sUqVKunxxx9XRkaGNm7cWKL9nThxQrGxsRoyZIi8vb1t43fccYdatmxZankDAHC53B2dAACg7MXExEiSpk+fro8//lg5OTlauXKldu3apffee0+jRo1StWrVtHHjRrVt21bDhg3T8uXL9d1339ntY8yYMXrhhRcUFxenkydPKjIyUl9//bVCQ0P13//+V5s3b9aNN96owYMH68CBAw46WgAAAAB/1qRJE33zzTdatmyZdu/erdzcXPXt21cBAQH6+OOPS7y/V155RQ888IDWrFmjOXPmKCUlRUOHDlWDBg107733FusqUzt27FBubq4mTJggX19fZWVl6dtvv1VycvLlHCIAAACAUrBgwQKNGjVK7733nlq3bq1Dhw6pf//+6tChg8aNG6ezZ8+WeJ/PP/+8vvzyS/3www8KDw+Xn5+fHnvsMcXGxuqqq666AkcBAEDJGIIgCML14oUXXjBHjx41ubm5xhhj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PvD/TzIWHJuTMeA1mYxBQ/LYBIBgmHD064UXXpDU4M3W1hYZGRlwcXFhXPWQYkyAKq7MzEyDvy5zuX5SjAmQdlyGzmXmccNIMS4pxgTwmgxI+71hXA0jVh5T0yGlaw4g3d8jqcUESDsufg6U7nsjtbikGFNYWBj+9Kc/oXXr1sjJycHZs2excuVKpKWlAQAiIyORnp6OOXPmAADc3NyQnp5e7TinT5/G0KFDG/XazOX6STEmQJpxcTyjIsX3BpBmXFKMCeCYhuonpeuOlH+PGFfD8P9PFam+N1KLCZB2XBybS/e9kVpcUowJ4DVZTYrvjxRjAqQZV0PzuNErUUmVVAdvhYWFkkmKJ0kxLqnFJFYszOWGk2JMgPTiEiMW5nHjSDEuqcXEa/JjUntv1BhX/aQSB0mXFK85gLR+j9SkGBMgvbj4OfAxqb03alKMS0oxTZ06tc7nq06MunnzJkxMTHTy2szlhpNiTIC04uJ4RpuU3psnSTEuqcUkpVhImqR43ZHa75Ea46of///UJqX3Rk2KMQHSi4tj88ek9t6oSTEuqcXEa7I2qb0/gDRjAqQVV0PjMNVzHERERERERERERERERERERERERJLGSVRERERERERERERERERERERERNSsmQFYI3YQxqqiogKnT59GRUWF2KFokWJcUoyJHpPi+yPFmADpxkXSfW+kGJcUYyIVqb43jIvIeEnx90iKMQHSjYuk+95IMS4pxkSPSfH9kWJMgHTjIum+N1KMS4oxETU1Uv09YlzUWFJ8b6QYEyDduEi6740U45JiTPSYFN8fKcYESDeu+pgAEMQOgoiIiIiIiIiIiIiIiIiIiIiISCws50dERERERERERERERERERERERM0aJ1EREREREREREREREREREREREVGzxklURERERERERERERERERERERETUrHESFRERERERERERERERERERERERNWucRPWUBg8ejB9++AEZGRkQBAETJ06ss/+QIUMgCEK15ujoqLOYPvzwQ1y8eBEFBQWQy+U4dOgQvL29691v6tSpuHbtGkpKShAfH48xY8aIGtPs2bOr/ZxKSkp0FhM9xjzWb1zMZcNhLusvJuax4TCP9RsXc5lIG685+o2L1xzDYS7rLybmseEwj/UbF3PZcJjL+ouJeUxUHa85+o2L1x3DYB7rNy7mseEwl/UXE/PY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ICIiOVJYExUREREREREREREREREpl6+vL3bs2IErV67g8uXLmDhxIvT19bFt2zYAwI4dO5CUlITZs2cjLy8PkZGRJY7PyMgAgFe2ExERERGpOzZRERERERERERERERERqYnAwECYmJjAx8cHZmZmCA0NhYeHB9LS0gAAVlZWKOSyU0REREREr2ATFRERERERERERERERkRrx8/ODn5/fa19zc3N747HDhg1TRCQiIiIiIpUnETsAERERERERERERERERERERERGRmNhERUREREREREREREREREREREREVRqbqIiIiIiIiIiIiIiIiIiIiIiIqErTEjuAPBkaGoodgdSE2GNJ7OuT+uBYIiIiqlz4s5vkRcyxxHFM8sKxREREVPnw5zfJg9jjSOzrk/rgWCIiqnzUoonq5Q+gpKQkkZOQujE0NERWVpZSrwdwLJP8KXssExERUfnwPpAURZn3gRzHpCj8PENERKT6eC9IisBnNKQu+JmGiKjy0AAgiB1CHiwsLFTqh4+hoSGSkpJgaWnJXG+hipmAolzJyclKvy7H8tupYiZAtXOJMZaJiIiofHgf+HaqmAlQ7VzKvg/kOC4bVcylipkAfp4hIiKqTFTpXlCV722Yq2z4jKaIqv7ZqFomQLVz8TMNEVHloRYzUQFQ2R8+WVlZKvWD+iVVzKVqmcTKwrFcdqqYCVC9XKqUhYiIiErH+8CyU8VMgOrlEiMLx3H5qGIuVcukSlmIiIjozVTxXlDV7m1eYq634zOaklTpz+YlVcwEqF4uVcpCRERvJxE7ABERERERERERERERERERERERkZjYREVERERERERERERERERERERERFWaJoDvxA6hrgoKCnD27FkUFBSIHaUEVcylipnoH6r456OKmQDVzUVERERUEap4b6OKmQDVzUWq+2ejirlUMRMRERFRRanqvQ1zUXmp4p+NKmYCVDcXERFVHhoABLFDEBERERERERERERERERERERERiYXL+RERERERERERERERERERERERUZXGJioiIiIiIiIiIiIiIiIiIiIiIqrS2ERFRERERERERERERERERERERERVGpuoiIiIiIiIiIiIiIiIiIiIiIioSmMTFRERERERERERERERERERERERVWlsoqqgDh064OjRo0hKSoIgCOjRo8cb9+/UqRMEQXilTE1N5ZZp5syZ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\n","text/plain":["<Figure size 3000x1000 with 30 Axes>"]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\n","\n"]},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 3000x1000 with 15 Axes>"]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\n","\n"]}]},{"cell_type":"markdown","metadata":{"id":"GZ0y_x9ugOUD"},"source":["##### check dent_detph"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":676},"id":"ETgm1avml0fE","executionInfo":{"status":"ok","timestamp":1637297839515,"user_tz":-540,"elapsed":593,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"9df7a819-691a-4fdc-93bb-d6489812419b"},"source":["target_pr = total_long_pr\n","\n","plt.figure(figsize=(4, 8))\n","gs = gridspec.GridSpec(nrows=2,\n","                        ncols=1,\n","                        height_ratios=[1, 1]\n","                      )\n","\n","plt.subplot(gs[0])\n","plt.plot(target_pr)\n","h_roll = pd.Series(target_pr).rolling(10).max()\n","plt.plot(h_roll)\n","# plt.show()\n","# print()\n","\n","plt.subplot(gs[1])\n","dent_depth = target_pr / h_roll\n","plt.plot(dent_depth)\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 400x800 with 2 Axes>"]},"metadata":{}}]},{"cell_type":"markdown","metadata":{"id":"v2Gjv019AEz8"},"source":["##### check frequency "]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":464},"id":"atdBjod9-e21","executionInfo":{"status":"ok","timestamp":1636862363013,"user_tz":-540,"elapsed":720,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"5925d52a-da23-40cd-a9b3-6c0323024bc0"},"source":["total_len = np.zeros(len(res_df))\n","print(total_len)\n","np_trade_list = np.array(trade_list)\n","# print(np_trade_list.shape)\n","print(np_trade_list[:, [0], [0]].shape)\n","total_len[np_trade_list[:, [0], [0]]] = 1\n","\n","plt.plot(total_len)\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[0. 0. 0. ... 0. 0. 0.]\n","(70, 1)\n"]},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 640x480 with 1 Axes>"]},"metadata":{}}]},{"cell_type":"markdown","metadata":{"id":"o-XjNS1L31YB"},"source":["##### ep const. legacy"]},{"cell_type":"code","metadata":{"id":"taB2j7kT33iN"},"source":["\n","   # --------------- ema --------------- #   \n","  # res_df['ema5_1m'] = ema(res_df['close'], 5).shift(1)\n","\n","  #   # --------------- cloud bline --------------- #   \n","  # res_df['cloud_bline_1m'] = cloud_bline(res_df, 26).shift(1)\n","  \n","    #       stochastic      #\n","  # res_df['stoch'] = stoch(res_df, 5, 3, 3)\n","\n","    #       fisher      #\n","  # res_df['fisher30'] = fisher(res_df, 30)\n","  # res_df['fisher60'] = fisher(res_df, 60)\n","  # res_df['fisher120'] = fisher(res_df, 120)\n","\n","    #       cctbbo      #\n","  # res_df['cctbbo'], _ = cct_bbo(res_df, 21, 13)\n","\n","    #       ema_roc      #\n","  # res_df['ema_roc'] = ema_roc(res_df['close'], 13, 9)\n","\n","\n","   # ------------------------------ htf data ------------------------------ #    \n","\n","  #             Todo              #\n","  # htf_df = pd.read_excel(date_path2 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","  # htf_df = pd.read_excel(date_path3 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","  # # htf_df = pd.read_excel(date_path4 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","  # # # htf_df = pd.read_excel(date_path5 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","  # # # # # # htf_df = pd.read_excel(date_path6 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","\n","  # # ---- htf index slicing ---- #\n","  # htf_df = htf_df.loc[:res_df.index[-1]]\n","  \n","  # print(\"res_df.index[-1] :\", res_df.index[-1])\n","  # print(\"htf_df.index[-1] :\", htf_df.index[-1])\n","\n","  # res_df = dc_line(res_df, htf_df, '5m')\n","  # res_df = dc_level(res_df, '5m', 1)\n","\n","\n","  # # # if \"sma4\" in res_df.columns:\n","  # # #   res_df.drop(\"sma4\", axis=1, inplace=1)\n","\n","  # # htf_df['sma'] = htf_df['close'].rolling(60).mean()\n","  # # res_df = res_df.join(pd.DataFrame(index=res_df.index, data=to_lower_tf(res_df, htf_df, [-1]), columns=['sma_30m']))\n","  \n","  # htf_df['stoch'] = stoch(htf_df, 13, 3, 3)\n","  # res_df = res_df.join(pd.DataFrame(index=res_df.index, data=to_lower_tf(res_df, htf_df, [-1], backing_i=-1), columns=['stoch_5m']))\n","\n","   \n","  # fifth_df['ema'] = ema(fifth_df['close'], 5)\n","  # res_df = res_df.join(pd.DataFrame(index=res_df.index, data=to_lower_tf(res_df, fifth_df, [-1]), columns=['ema5']))\n","\n","        # -------------- dr scheduling -------------- #\n","        # if config.ep_set.entry_type == 'MARKET':\n","        #   mr_const_cnt += 1\n","        #   if (res_df['close'].iloc[i] - res_df['short_tp'].iloc[i]) / (res_df['short_out'].iloc[i] - res_df['close'].iloc[i]) <= config.ep_set.tr_thresh * (1 + config.ep_set.dr_error):  \n","        #     mr_score += 1\n","\n","           \n","        # ------- entry once ------- #   \n","        # prev_entry_cnt = 0\n","        # for back_i in range(i - 1, 0, -1):\n","        #   if res_df['entry'][back_i] == 1:\n","        #     break\n","\n","        #   elif res_df['entry'][back_i] == -1:\n","        #     prev_entry_cnt += 1          \n","        # # # print(\"prev_entry_cnt :\", prev_entry_cnt)\n","\n","        # mr_const_cnt += 1\n","        # # if prev_entry_cnt <= config.ep_set.entry_incycle:\n","        # # if prev_entry_cnt == config.ep_set.entry_incycle:\n","        # if prev_entry_cnt >= config.ep_set.entry_incycle:\n","        #   mr_score += 1\n","\n","        # ------- htf zoning ------- #   \n","        # mr_const_cnt += 1\n","        #   #       bb zone     #\n","        # if res_df['close'].iloc[i] < res_df['bb_lower_%s' % bbz_interval].iloc[i]:\n","        # # if res_df['close'].iloc[i] < res_df['bb_lower2_1h'].iloc[i]:\n","        # # if res_df['close'].iloc[i] < res_df['bb_base_1h'].iloc[i]:\n","\n","        #   #       cbline zone     #\n","        # # if res_df['close'].iloc[i] < res_df['cloud_bline_%s' % cb_interval].iloc[i]:\n","\n","        #   mr_score += 1\n","\n","  \n","        # ------- ben ep_in's tp done ------- #   \n","        # mr_const_cnt += 1\n","        # if res_df['low'].iloc[i] > res_df['short_tp'].iloc[i]:\n","        #   mr_score += 1\n","\n","\n","        # -------------- feature dist const. -------------- #\n","        # if initial_i < input_size:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","        # entry_input_x = min_max_scale(res_df[selected_price_colname].iloc[initial_i - input_size:initial_i].values)\n","       \n","        # re_entry_input_x = expand_dims(entry_input_x)\n","\n","        # entry_vector = model.predict(re_entry_input_x, verbose=0)\n","        # # print(test_result.shape)\n","\n","        # f_dist = vector_dist(entry_vector, selected_vector)\n","        # print(\"f_dist :\", f_dist)\n","\n","        # if f_dist < fdist_thresh:\n","          # mr_score += 1\n","\n","\n","\n","          \n","\n","        # -------------- dr scheduling -------------- #\n","        # if config.ep_set.entry_type == \"MARKET\":\n","          # mr_const_cnt += 1        \n","          # if (res_df['long_tp'].iloc[i] - res_df['close'].iloc[i]) / (res_df['close'].iloc[i] - res_df['long_out'].iloc[i]) <= config.ep_set.tr_thresh * (1 + config.ep_set.dr_error): # ÏùºÎ∞òÏ†ÅÏúºÎ°ú dr ÏÉÅÏóêÏÑú tp ÎπÑÏú®Ïù¥ Îçî Ïª§Ïßê (tr Î≥¥Îã§)\n","          #   mr_score += 1\n","\n","        # -------------- ep limit -------------- #    \n","        # mr_const_cnt += 1\n","        # # if (res_df['open'].iloc[i] - res_df['long_ep'].iloc[i]) / res_df['open'].iloc[i] < config.ep_set.max_eplim_pct:\n","        # if config.ep_set.min_eplim_pct < (res_df['open'].iloc[i] - res_df['long_ep'].iloc[i]) / res_df['open'].iloc[i] < config.ep_set.max_eplim_pct:\n","        # # if 0 < (res_df['open'].iloc[i] - res_df['long_ep'].iloc[i]) / res_df['open'].iloc[i] < config.ep_set.max_eplim_pct:\n","        #   # if res_df['st_gap_15m'].iloc[i] / res_df['open'].iloc[i] < 0:\n","        #   #   print(\"i, res_df['st_gap_15m'].iloc[i] :\", i, res_df['st_gap_15m'].iloc[i])\n","        #   mr_score += 1\n","\n","\n","        # -------------- entry once -------------- #    \n","        # prev_entry_cnt = 0\n","        # for back_i in range(i - 1, 0, -1):\n","        #   if res_df['entry'][back_i] == -1:\n","        #     break\n","\n","        #   elif res_df['entry'][back_i] == 1:\n","        #     prev_entry_cnt += 1\n","          \n","        # mr_const_cnt += 1\n","        # # if prev_entry_cnt <= config.ep_set.entry_incycle:\n","        # # if prev_entry_cnt == config.ep_set.entry_incycle:\n","        # if prev_entry_cnt >= config.ep_set.entry_incycle:\n","        #   mr_score += 1\n","\n","\n","        # ------- htf zoning ------- #   \n","        # mr_const_cnt += 1\n","          \n","        #   #       bb zone     #\n","        # if res_df['close'].iloc[i] > res_df['bb_upper_%s' % bbz_interval].iloc[i]:\n","        # # if res_df['close'].iloc[i] > res_df['bb_upper2_1h'].iloc[i]:\n","        # # if res_df['close'].iloc[i] > res_df['bb_base_1h'].iloc[i]:\n","        \n","        #   #       cbline zone     #\n","        # # if res_df['close'].iloc[i] > res_df['cloud_bline_%s' % cb_interval].iloc[i]:\n","\n","        #   mr_score += 1\n","\n","\n","        # ------- ben ep_in's tp done ------- #   \n","        # mr_const_cnt += 1\n","        # if res_df['high'].iloc[i] < res_df['long_tp'].iloc[i]:\n","        #   mr_score += 1\n","\n","\n","        # -------------- feature dist const. -------------- #\n","        # if initial_i < input_size:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","          \n","        # entry_input_x = min_max_scale(res_df[selected_price_colname].iloc[initial_i - input_size:initial_i].values)\n","       \n","        # re_entry_input_x = expand_dims(entry_input_x)\n","\n","        # entry_vector = model.predict(re_entry_input_x, verbose=0)\n","        # # print(test_result.shape)\n","\n","        # f_dist = vector_dist(entry_vector, selected_vector)\n","        # print(\"f_dist :\", f_dist)\n","\n","        # if f_dist < fdist_thresh:\n","          # mr_score += 1"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"-IbP_Z3Dlwk4"},"source":["### nontp survey"]},{"cell_type":"markdown","metadata":{"id":"FxJ1y8v2fkCR"},"source":["##### term & liqd"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":614},"id":"-qIWa48pl1GO","executionInfo":{"elapsed":8,"status":"ok","timestamp":1628300788555,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"},"user_tz":-540},"outputId":"b2687c93-e070-4d45-8a67-4cc783fd78f1"},"source":["# print(nontp_long_indexs)\n","\n","plot_size = 100\n","\n","for s_i in range(plot_size, len(trade_list), plot_size):\n","\n","  slice_trade_list = trade_list[s_i - plot_size:s_i]\n","  slice_liqd_list = liqd_list[s_i - plot_size:s_i]\n","\n","  # print(len(slice_trade_list))\n","  np_trade = np.array(slice_trade_list)\n","  trade_term = np_trade[:, [2]] - np_trade[:, [1]]\n","\n","  plt.figure(figsize=(5, 10))\n","  plt.subplot(211)\n","  plt.bar(np.arange(len(trade_term)), trade_term.reshape(-1,), width=1, color='b')\n","\n","  # plt.plot(trade_term.reshape(-1,))\n","  plt.ylim(0, 1000)\n","  # plt.show()\n","  # print()\n","\n","  plt.subplot(212)\n","  # print(len(liqd_list))\n","  # plt.bar(np.arange(len(liqd_list)), liqd_list)\n","  plt.bar(np.arange(len(slice_liqd_list)), np.array(slice_liqd_list), width=1, color='r')\n","  # plt.plot(slice_liqd_list)\n","  plt.show()\n","\n","print()"],"execution_count":null,"outputs":[{"data":{"image/png":"\n","text/plain":["<Figure size 360x720 with 2 Axes>"]},"metadata":{"tags":[]},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["\n"]}]},{"cell_type":"markdown","metadata":{"id":"VBwVaUkvfnOd"},"source":["##### check nontp index"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"mRCMBOU4frNY","executionInfo":{"elapsed":454,"status":"ok","timestamp":1628220543161,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"},"user_tz":-540},"outputId":"ce4a9c9b-3589-40b3-8a19-4be03d5b9a1e"},"source":["# np_nontp_short_indexs = np.array(nontp_short_indexs)\n","# np_nontp_long_indexs = np.array(nontp_long_indexs)\n","\n","# short_til_term = len(res_df) - np_nontp_short_indexs\n","# long_til_term = len(res_df) - np_nontp_long_indexs\n","\n","max_nontp_short_term = len(res_df) - nontp_short_indexs[0]\n","max_nontp_long_term = len(res_df) - nontp_long_indexs[0]\n","\n","print(max_nontp_long_term)"],"execution_count":null,"outputs":[{"name":"stdout","output_type":"stream","text":["32747\n"]}]},{"cell_type":"markdown","metadata":{"id":"tApzvz_gK9lR"},"source":["## basic strategy"]},{"cell_type":"markdown","metadata":{"id":"FaRGwR4NEop2"},"source":["### shifting"]},{"cell_type":"code","metadata":{"id":"a8aYsjEgQnGF"},"source":["org_res_df = res_df.copy()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"RF3RM2G2RCb1","executionInfo":{"elapsed":291,"status":"ok","timestamp":1626515312874,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"},"user_tz":-540},"outputId":"ba8f6a75-d4df-4f85-cd0f-190935341f7a"},"source":["#         refresh res_df      #\n","res_df = org_res_df.copy()\n","print(org_res_df.tail(5))\n","\n","# break\n","\n","\n","shift_size = -4\n","# shift_size = -1\n","# shift_size = -7\n","# shift_size = +3\n","\n","res_df['min_upper'] = res_df['min_upper'].shift(shift_size)\n","res_df['max_lower'] = res_df['max_lower'].shift(shift_size)\n","res_df['minor_ST1_Trend'] = res_df['minor_ST1_Trend'].shift(shift_size)\n","res_df['minor_ST2_Trend'] = res_df['minor_ST2_Trend'].shift(shift_size)\n","res_df['minor_ST3_Trend'] = res_df['minor_ST3_Trend'].shift(shift_size)\n","res_df['middle_line'] = res_df['middle_line'].shift(shift_size)\n","\n","print(res_df.tail(5))"],"execution_count":null,"outputs":[{"name":"stdout","output_type":"stream","text":["                            open     high  ...  min_upper  max_lower\n","2021-06-30 23:55:59.999  0.27223  0.27281  ...   0.272145    0.27005\n","2021-06-30 23:56:59.999  0.27274  0.27290  ...   0.272145    0.27005\n","2021-06-30 23:57:59.999  0.27246  0.27257  ...   0.272523    0.27021\n","2021-06-30 23:58:59.999  0.27166  0.27183  ...   0.272523    0.27021\n","2021-06-30 23:59:59.999  0.27144  0.27211  ...   0.272523    0.27021\n","\n","[5 rows x 37 columns]\n","                            open     high  ...  min_upper  max_lower\n","2021-06-30 23:55:59.999  0.27223  0.27281  ...   0.272523    0.27021\n","2021-06-30 23:56:59.999  0.27274  0.27290  ...        NaN        NaN\n","2021-06-30 23:57:59.999  0.27246  0.27257  ...        NaN        NaN\n","2021-06-30 23:58:59.999  0.27166  0.27183  ...        NaN        NaN\n","2021-06-30 23:59:59.999  0.27144  0.27211  ...        NaN        NaN\n","\n","[5 rows x 37 columns]\n"]}]},{"cell_type":"markdown","metadata":{"id":"2gxvme1PC6ha"},"source":["### load model"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"dtYdAuSsC72_","executionInfo":{"elapsed":5831,"status":"ok","timestamp":1628862368878,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"},"user_tz":-540},"outputId":"e8dccc53-aaa7-4bab-ed8d-753f634c08d6"},"source":["# model_name = 'inner_tick_cnnreg_lscalemm_prefee_gpu_%s_%s_%s_%s_%s.h5'\n","\n","# model = tf.keras.models.load_model(ckpt_path + model_name)\n","\n","from tensorflow.keras.applications.resnet50 import ResNet50\n","\n","model = ResNet50(weights='imagenet', include_top=False)\n","# model.summary()\n"],"execution_count":null,"outputs":[{"name":"stdout","output_type":"stream","text":["Downloading data from https://storage.googleapis.com/tensorflow/keras-applications/resnet/resnet50_weights_tf_dim_ordering_tf_kernels_notop.h5\n","94773248/94765736 [==============================] - 1s 0us/step\n"]}]},{"cell_type":"markdown","metadata":{"id":"5la6usMOFzkX"},"source":["#### gen selected vector"]},{"cell_type":"code","metadata":{"id":"oQk3-jbKF8FB"},"source":["def min_max_scale(npy_x):\n","\n","  return (npy_x - np.min(npy_x)) / (np.max(npy_x) - np.min(npy_x))\n","\n","def expand_dims(npy_x):\n","\n","  row, col = npy_x.shape\n","  npy_x2 = np.array(npy_x).reshape(-1, row, col, 1).astype(np.float32)\n","  # input_x = np.array(data_x).reshape(-1, row, col).astype(np.float32)\n","\n","  #     1c to 3c    #\n","  npy_x3 = npy_x2 * np.ones(3, dtype=np.float32)[None, None, None, :]\n","\n","  return npy_x3\n","\n","\n","def vector_dist(f1, f2):\n","  return np.linalg.norm(f1-f2)\n","\n","\n","\n","# ------------------------ params ------------------------  #\n","selected_i = 500\n","input_size = 100\n","\n","\n","\n","#   1. ÏÑ†ÌÉùÎêú Ïù∏Îç±Ïä§Î•º ÏûÖÎ†•Î∞õÏïòÏùÑ Îïå, input generating ÌòïÌÉúÎßå ÎßåÎì§Ïñ¥ÎÜìÍ≥†,     #\n","#   1-1. input cols ÌïÑÏöîÌï®    #\n","\n","basic_list = ['open', 'high', 'low', 'close', 'minor_ST1_Up', 'minor_ST1_Down',\n","       'minor_ST2_Up', 'minor_ST2_Down', 'minor_ST3_Up', 'minor_ST3_Down',\n","       'middle_line', 'min_upper', 'max_lower']\n","# senkoua_list = ['senkou_a1', 'senkou_a2', 'senkou_a3', 'senkou_a4', 'senkou_a5']\n","# senkoub_list = ['senkou_b1', 'senkou_b2', 'senkou_b3', 'senkou_b4', 'senkou_b5']\n","senkoua_list = ['senkou_a1', 'senkou_a2', 'senkou_a3']\n","senkoub_list = ['senkou_b1', 'senkou_b2', 'senkou_b3']\n","# sar_list = ['sar1', 'sar2', 'sar3', 'sar4', 'sar5']\n","# sar_list = ['sar1', 'sar2', 'sar3', 'sar4', 'sar5']\n","sar_list = ['sar1', 'sar2', 'sar3']\n","sar_list = ['sar1', 'sar2', 'sar3']\n","\n","sma_list = ['sma']\n","\n","#     -------------- outer price phase --------------    #\n","macd_list = ['macd_hist1', 'macd_hist2', 'macd_hist3', 'macd_hist4', 'macd_hist5']\n","trix_list = ['trix1', 'trix2', 'trix3', 'trix4', 'trix5']\n","stoch_list = ['stoch']\n","fisher_list = ['fisher30', 'fisher60', 'fisher120']\n","cctbbo_list = ['cctbbo']\n","\n","selected_price_colname = basic_list + senkoua_list + senkoub_list + sar_list\n","selected_outprice_colname = [macd_list]\n","\n","\n","#         global scaling for outer price data       #\n","#         1. nan Ï≤òÎ¶¨       #\n","\n","# # print((np.isnan(df.values)))\n","# print(\"np.sum(np.isnan(df.values), axis=0) :\", np.sum(np.isnan(df.values), axis=0))\n","\n","# max_nan = np.max(np.sum(np.isnan(df.values), axis=0))\n","# # print(max_nan)\n","\n","# df = df.iloc[max_nan:-max_nan]\n","\n","# total_gdata = []\n","# for g_col in selected_outprice_colname:\n","\n","#   temp_data = min_max_scale(res_df[g_col])\n","#   total_gdata.append(temp_data)\n","\n","\n","\n","#   1-2. cols Ïóê Îî∞Î•∏, scaling method Íµ¨Î∂ÑÌï®    #\n","onprice_input_x = min_max_scale(res_df[selected_price_colname].iloc[selected_i - input_size:selected_i].values)\n","print(onprice_input_x.shape)\n","\n","\n","#   2. plot_check ÏóêÏÑú Î≥∏Ïù∏Ïù¥ ÏõêÌïòÎäî shape Ïùò Ïù∏Îç±Ïä§Î•º ÏÑ†ÌÉù   #\n","#   3. vertorize, \n","#   3-1. input generator Î•º Ïù¥Ïö©Ìï¥ entry signal Î∞úÏÉùÌï† ÎïåÎßàÎã§ dist ÎπÑÍµê ÏßÑÌñâ    #\n","re_onprice_input_x = expand_dims(onprice_input_x)\n","print(re_onprice_input_x.shape)\n","      \n","# break\n","\n","selected_vector = model.predict(re_onprice_input_x, verbose=1)\n","print(selected_vector.shape)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"OJqkmkpsLCYC"},"source":["### tr_tresh calc"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gcpo4MGd9Wm4","executionInfo":{"elapsed":446,"status":"ok","timestamp":1636015063790,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"outputId":"434b56b3-3a3c-45c1-f559-42681fea5f05"},"source":["res_wr = 0.6\n","# tr_thresh = 1\n","# tr_thresh = ((1 - res_wr) / res_wr) ** 0.5\n","tr_thresh = ((1 - res_wr) / res_wr) + 0.01\n","# tr_thresh = 2.6\n","print(\"res_wr :\", res_wr)\n","print(\"tr_thresh :\", tr_thresh)\n","\n","\n","#   Îã®Î¶¨    #\n","trade_num = 1000\n","asset = 1 # thousand USDT\n","test_loss_gap = 0.95  # fee adjusted\n","test_pr_gap = 1 + (1 - test_loss_gap) * tr_thresh\n","\n","test_loss_cnt = trade_num * (1 - res_wr)\n","test_pr_cnt = trade_num * res_wr\n","\n","test_trade_list = [test_pr_gap] * int(test_pr_cnt) + [test_loss_gap] * int(test_loss_cnt)\n","random.shuffle(test_trade_list)\n","# print(\"len(test_trade_list) :\", len(test_trade_list))\n","print(test_trade_list[:10])\n","print()\n","\n","# print(\"%.5f\" % np.cumprod(test_trade_list)[-1])\n","for tr_thresh_ in np.arange(1, 3, 0.2):\n","  if (1 + (1 - test_loss_gap) * tr_thresh_) ** test_pr_cnt * test_loss_gap ** test_loss_cnt > 1:\n","    break\n","print(\"Î≥µÎ¶¨Î•º ÏúÑÌïú tr_thresh_ :\", tr_thresh_)\n","# print(\"tr_thresh :\", tr_thresh)\n","print(\"np.cumprod(test_trade_list)[-1] :\", np.cumprod(test_trade_list)[-1])\n","print(\"total_pr : \", np.cumprod(test_trade_list)[-1])\n","print()\n","#   Î≥µÎ¶¨ tr_thresh  #\n","#   1. trade_num Ïóê ÏòÅÌñ• Î∞õÏßÄ ÏïäÏùå\n","#   2. loss_gap Ïóê ÎπÑÎ°ÄÌï®\n","\n","for tr_thresh_ in np.arange(1, 3, 0.01):\n","  if ((1 - test_loss_gap) * tr_thresh_) * test_pr_cnt + (test_loss_gap - 1) * test_loss_cnt > 0:\n","    break\n","np_test_trade = np.array(test_trade_list) - 1\n","print(np_test_trade[:10])\n","# print(\"%.3f\" % )\n","print(\"Îã®Î¶¨Î•º ÏúÑÌïú tr_thresh_ :\", tr_thresh_)\n","# print(\"tr_thresh :\", tr_thresh)\n","print(\"np.cumsum(np_test_trade)[-1] :\", np.cumsum(np_test_trade)[-1])\n","print(\"total_pr : \", 1 + np.cumsum(np_test_trade)[-1])\n"],"execution_count":null,"outputs":[{"name":"stdout","output_type":"stream","text":["res_wr : 0.6\n","tr_thresh : 0.6766666666666667\n","[0.95, 1.0338333333333334, 0.95, 0.95, 1.0338333333333334, 0.95, 0.95, 1.0338333333333334, 0.95, 1.0338333333333334]\n","\n","Î≥µÎ¶¨Î•º ÏúÑÌïú tr_thresh_ : 1.0\n","np.cumprod(test_trade_list)[-1] : 0.5751227991397774\n","total_pr :  0.5751227991397774\n","\n","[-0.05        0.03383333 -0.05       -0.05        0.03383333 -0.05\n"," -0.05        0.03383333 -0.05        0.03383333]\n","Îã®Î¶¨Î•º ÏúÑÌïú tr_thresh_ : 1.0\n","np.cumsum(np_test_trade)[-1] : 0.30000000000001137\n","total_pr :  1.3000000000000114\n"]}]},{"cell_type":"markdown","metadata":{"id":"JNQxkb06ZdTe"},"source":["# traded section plot"]},{"cell_type":"markdown","metadata":{"id":"UmH_Pb5BZUtm"},"source":["## plot with off-color st with dash"]},{"cell_type":"markdown","metadata":{"id":"5z4L3MMYmUI0"},"source":["### sorted plot_check"]},{"cell_type":"code","metadata":{"id":"Qv1MM2MemZnF","colab":{"base_uri":"https://localhost:8080/","height":1000,"output_embedded_package_id":"1TS2S0xb0xZHPIZfrEVeypNjOi2wxYEDz"},"executionInfo":{"status":"error","timestamp":1638946864704,"user_tz":-540,"elapsed":93923,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"132a3d57-a481-4237-af2c-a10fe8fc0517"},"source":["assert len(open_list) == len(trade_list), \"len(open_list) != len(trade_list)\"\n","assert len(tp_state_list) == len(fee_list), \"len(tp_state_list) != len(fee_list)\"\n","\n","save_plot = 0\n","pr_sort = 1     # Ïù¥ÏÉÅÌïú Ï≤¥Í≤∞ ÌôïÏù∏ÌïòÍ∏∞ Ï¢ãÏùå\n","pr_descend = 0\n","wl_case = 0     # 1 / -1 / 0 (win loss study)\n","position = 1    # -1 / 1 / 0 (short / long / both)\n","\n","inversion = 0\n","hedge = 0\n","\n","\n","if save_plot:\n","  plot_check_dir = current_path + \"plot_check/\" +  key.replace(\".ftr\", \"\")\n","  try:\n","    os.mkdir(plot_check_dir)\n","  except:\n","\n","    #     remove existing dir   #\n","    shutil.rmtree(plot_check_dir)\n","    print(plot_check_dir, 'removed !')\n","    os.mkdir(plot_check_dir)\n","    # pass\n","    \n","\n","prev_plotsize = 30\n","post_plotsize = 20\n","\n","\n","if position == -1:\n","  position = config.ep_set.short_entry_score\n","elif position == 1:\n","  position = -config.ep_set.short_entry_score\n","\n","\n","if inversion:  \n","\n","    plot_pr_list = rev_np_pr\n","    h_plot_pr_list = h_rev_np_pr  # hedge\n","\n","else:\n","\n","    plot_pr_list = np_pr\n","    try:\n","      h_plot_pr_list = h_np_pr\n","    except Exception as e:\n","      print(\"error in h_plot_pr :\", e)\n","      h_plot_pr_list = np_pr\n","\n","\n","h_candle_intv1 = 5\n","h_candle_intv2 = 15\n","res_df = h_candle(res_df, h_candle_intv1)\n","res_df = h_candle(res_df, h_candle_intv2)\n","\n","\n","res_df = dtk_plot(res_df, dtk_itv2='15m', hhtf_entry=15, use_dtk_line=config.loc_set.zone.use_dtk_line)\n","# res_df = dtk_plot(res_df, dtk_itv2='15m', hhtf_entry=1, use_dtk_line=1)\n","# break\n","\n","rtc_list = [\"short_tp_1\", \"short_tp_gap\", \"long_tp_1\", \"long_tp_gap\"]\n","# h_rtc_list = [\"h_short_tp_1\", \"h_short_tp_gap\", \"h_long_tp_1\", \"h_long_tp_gap\"]\n","dtk_list = [\"short_dtk_1\", \"short_dtk_gap\", \"long_dtk_1\", \"long_dtk_gap\",\n","            # \"short_dtk_1_line\", \"short_dtk_gap_line\", \"long_dtk_1_line\", \"long_dtk_gap_line\",\n","            \"short_dtk_plot_1\", \"short_dtk_plot_gap\", \"long_dtk_plot_1\", \"long_dtk_plot_gap\"]\n","dc_v2_list = ['dc_upper_v2', 'dc_lower_v2']\n","\n","\n","ohlc_list = ['open', 'high', 'low', 'close'] # + basic_st_list\n","hcandle_list = ['hopen_%s' % h_candle_intv1, 'hclose_%s' % h_candle_intv1, 'hopen_%s' % h_candle_intv2, 'hclose_%s' % h_candle_intv2]\n","\n","# --------------------- dc & bb level --------------------- #\n","dc_interval = '1m'\n","hdc_interval = '5m'\n","hhdc_interval = '15m'\n","\n","dc_list = ['dc_upper_%s' % dc_interval, 'dc_lower_%s' % dc_interval]\n","hdc_list = ['dc_upper_%s' % hdc_interval, 'dc_lower_%s' % hdc_interval]\n","hhdc_list = ['dc_upper_%s' % hhdc_interval, 'dc_lower_%s' % hhdc_interval]\n","\n","bb_interval = dc_interval\n","hbb_interval = hdc_interval\n","hhbb_interval = hhdc_interval\n","\n","bb_list = ['bb_upper_%s' % bb_interval, 'bb_lower_%s' % bb_interval]\n","hbb_list = ['bb_upper_%s' % hbb_interval, 'bb_lower_%s' % hbb_interval]\n","hhbb_list = ['bb_upper_%s' % hhbb_interval, 'bb_lower_%s' % hhbb_interval]\n","\n","bbwp_list = ['bbwp', 'bbwp_ma']\n","\n","\n","senkoua_list = ['senkou_a1', 'senkou_a2', 'senkou_a3', 'senkou_a4', 'senkou_a5']\n","senkoub_list = ['senkou_b1', 'senkou_b2', 'senkou_b3', 'senkou_b4', 'senkou_b5']\n","senkoua_list = ['senkou_a1']\n","senkoub_list = ['senkou_b1']\n","\n","sar_list = ['sar_15m']\n","\n","# ma_list = ['sma1', 'sma4']\n","sma_list = ['sma_1m']\n","\n","ema_list = ['ema_5m']\n","# cb_list = ['cloud_bline_1m']\n","cb_list = ['cloud_bline_30m']\n","# cb_list = ['cloud_bline_5m']\n","\n","\n","\n","# -------------- under price phase -------------- #\n","# macd_list = ['macd_hist1', 'macd_hist2', 'macd_hist3']\n","# trix_list = ['trix1', 'trix2', 'trix3']\n","# stoch_list = ['stoch_5m']\n","# fisher_list = ['fisher30', 'fisher60', 'fisher120']\n","# cctbbo_list = ['cctbbo']\n","# emaroc_list = ['ema_roc']\n","rsi_list = ['rsi_%s' % config.loc_set.point.exp_itv] \n","\n","\n","# -------------- summation -------------- #\n","# input_colname = ohlc_list + basic_st_list + pline_list + bb_list + hbb_list + sma_list + cb_list + stoch_list + sar_list + dc_list\n","input_colname = ohlc_list + hcandle_list + bb_list + hbb_list + hhbb_list + dc_list + hdc_list + hhdc_list + dtk_list + dc_v2_list + rsi_list + ema_list\n","\n","# yrange_colname = ohlc_list + basic_st_list + pline_list # currently just used for ymin, ymax\n","yrange_colname = ohlc_list + hcandle_list + bb_list + hbb_list + hhbb_list + dc_list + hdc_list + hhdc_list + dc_v2_list + ema_list # currently just used for ymin, ymax\n","\n","\n","# aggr_obj = dict(zip(plot_pr_list, open_list, enumerate(trade_list)))\n","aggr_obj = dict(zip(plot_pr_list, zip(open_list, enumerate(trade_list))))\n","\n","sorted_obj = sorted(aggr_obj.items(), key=(lambda x: x[0]), reverse=pr_descend)\n","# print(aggr_obj)\n","# print(sorted_obj)\n","\n","if pr_sort:\n","  iter_obj = sorted_obj\n","else:\n","  iter_obj = aggr_obj.items()\n","\n","for temp_pr, (open_idx, (t_i, (ep_idx_list_, tp_idx_list_))) in iter_obj:  # 0.699700153073042, (291402, (3014, ([370012], [370014])))\n","\n","\n","  if not(i >= prev_plotsize):\n","    continue\n","\n","  if wl_case == 1:\n","    if plot_pr_list[t_i] < 1.0:\n","      continue  \n","  \n","  elif wl_case == -1:\n","    if plot_pr_list[t_i] > 1.0:\n","      continue  \n","  \n","  #   open size indexing by open_idx    #\n","  open_side = res_df['entry'].iloc[open_idx]\n","\n","  # ---------- const. zone ---------- #\n","\n","  if position != 0:\n","    if open_side == -position:\n","      continue\n","\n","  # if open_idx == 63901:\n","  #   pass\n","  # else:\n","  #   continue\n","\n","  # if tp_state_list[t_i] != 'long close tp':\n","  # # if tp_state_list[t_i] != 's-long_tp':\n","  #   continue\n","\n","  # if tp_ratio_list[t_i] > 0.4:\n","  #   continue\n","\n"," \n","  # print(\"open_idx :\", open_idx)\n","  print(\"open_side :\", open_side)\n","  print(\"np_timeidx[open_idx] :\", np_timeidx[open_idx])\n","  print(\"open_idx, ep_idx_list_[0], tp_idx_list_[-1] :\", open_idx, ep_idx_list_[0], tp_idx_list_[-1])\n","  # break\n","\n","\n","  plot_df = res_df.iloc[open_idx - prev_plotsize:tp_idx_list_[-1] + post_plotsize][input_colname]\n","\n","\n","  #       keep off-color st with another variable         #\n","  # st_trend_plot_df = res_df[['ST1_Trend%s' % basic_st_interval, 'ST2_Trend%s' % basic_st_interval, 'ST3_Trend%s' % basic_st_interval]].iloc[ep_idx_list_[0] - prev_plotsize:tp_idx_list_[-1] + post_plotsize]\n","\n","  # fig = trendln.plot_support_resistance(plot_df['close'], accuracy=8, fromwindows=0, numbest=1,  window=30) # requires matplotlib - pip install matplotlib\n","  \n","  plt.style.use('dark_background')\n","\n","  fig = plt.figure(figsize=(14, 18))\n","  \n","  gs = gridspec.GridSpec(nrows=3, # row Î™á Í∞ú \n","                       ncols=1, # col Î™á Í∞ú \n","                       height_ratios=[3, 1, 1]\n","                      )\n","  \n","  ax = fig.add_subplot(gs[0])\n","\n","  # fig.show()\n","  # fig.canvas.draw()\n","\n","  temp_ohlc = plot_df.values[:, :4]\n","  index = np.arange(len(temp_ohlc))\n","  candle = np.hstack((np.reshape(index, (-1, 1)), temp_ohlc))\n","  mf.candlestick_ohlc(ax, candle, width=0.5, colorup='#26a69a', colordown='#ef5350', alpha=0.5)\n","\n","  # ---------- h_candle ---------- #\n","  alpha = 1\n","  lw = 1\n","  for cd_i, candle in enumerate(hcandle_list):\n","\n","    if cd_i == 2:\n","      lw = 2      \n","    plt.step(np.arange(len(plot_df)), plot_df[candle].values, alpha=alpha, color='#ffffff', linewidth=lw)\n","\n","  # alpha = 0.1\n","  # plt.fill_between(np.arange(len(plot_df)), plot_df['hclose_60'].values, plot_df['hopen_60'].values, \n","  #                     where=1, facecolor='#ffffff', alpha=alpha)  \n","  \n","\n","   # --------- ema --------- #\n","  alpha = 1\n","  lw = 4\n","  for sm_i, item in enumerate(ema_list):\n","    plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#03ed30', linewidth=lw)\n","\n","  # ---------------------- dc_v2 ---------------------- #\n","  # alpha = 1\n","  # lw = 2\n","  # for sm_i, item in enumerate(dc_v2_list):\n","  #     plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#ffeb3b', linewidth=lw)\n","\n","  # ---------------------- dc ---------------------- #\n","  alpha = 1\n","  lw = 2\n","  for sm_i, item in enumerate(dc_list):\n","      plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#ffeb3b', linewidth=lw)\n","\n","  # ---------------------- hdc ---------------------- #\n","  alpha = 1\n","  lw = 2\n","  for sm_i, item in enumerate(hdc_list):\n","      plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#e65100', linewidth=lw)\n","\n","  # ---------------------- hhdc ---------------------- #\n","  alpha = 1\n","  lw = 4\n","  for sm_i, item in enumerate(hhdc_list):\n","      plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#c2185b', linewidth=lw)\n","\n","\n","  # ---------------------- bb ---------------------- #\n","  alpha = 1\n","  lw = 1\n","  for sm_i, item in enumerate(bb_list):\n","    plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#ffffff', linewidth=lw)\n","\n","  alpha = 0.2\n","  plt.fill_between(np.arange(len(plot_df)), plot_df['bb_upper_%s' % bb_interval].values, plot_df['bb_lower_%s' % bb_interval].values, \n","                      where=plot_df['bb_upper_%s' % bb_interval].values >= plot_df['bb_lower_%s' % bb_interval].values, facecolor='#ffffff', alpha=alpha)   \n","\n","  # ---------------------- hbb ---------------------- #\n","  alpha = 1\n","  lw = 2\n","  for sm_i, item in enumerate(hbb_list):\n","    plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#ff00ff', linewidth=lw)\n","  \n","  alpha = 0.2\n","  plt.fill_between(np.arange(len(plot_df)), plot_df['bb_upper_%s' % hbb_interval].values, plot_df['bb_lower_%s' % hbb_interval].values, \n","                      where=plot_df['bb_upper_%s' % hbb_interval].values >= plot_df['bb_lower_%s' % hbb_interval].values, facecolor='#ff00ff', alpha=alpha) \n","  \n","  # ---------------------- hhbb ---------------------- #\n","\n","  alpha = 1\n","  lw = 4\n","  for sm_i, item in enumerate(hhbb_list):\n","    plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#3179f5', linewidth=lw)\n","  \n","  alpha = 0.2\n","  plt.fill_between(np.arange(len(plot_df)), plot_df['bb_upper_%s' % hhbb_interval].values, plot_df['bb_lower_%s' % hhbb_interval].values, \n","                      where=plot_df['bb_upper_%s' % hhbb_interval].values >= plot_df['bb_lower_%s' % hhbb_interval].values, facecolor='#3179f5', alpha=alpha) \n","  \n","  # ------------------- dtk_line (old, tp_line) ------------------- #\n","  \n","  # alpha = 1\n","  # lw = 2\n","  # rtc_ratio_list = [config.loc_set.zone.dt_k]\n","  \n","  # for rtc_k in rtc_ratio_list:    \n","  #   # plt.step(np.arange(len(plot_df)), plot_df['short_dtk_1_line'].values - plot_df['short_dtk_gap_line'].values * rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","  #   # plt.step(np.arange(len(plot_df)), plot_df['long_dtk_1_line'].values + plot_df['long_dtk_gap_line'].values * rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","  #   plt.step(np.arange(len(plot_df)), plot_df['short_dtk_1'].values - plot_df['short_dtk_gap'].values * rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","  #   plt.step(np.arange(len(plot_df)), plot_df['long_dtk_1'].values + plot_df['long_dtk_gap'].values * rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","\n","  # hy_min = np.min(plot_df['short_dtk_1'].values - plot_df['short_dtk_gap'].values * rtc_k)\n","  # hy_max = np.max(plot_df['long_dtk_1'].values + plot_df['long_dtk_gap'].values * rtc_k)  \n","\n","  # alpha = 1\n","  # lw = 4\n","  # # h_rtc_ratio_list = [config.loc_set.zone.dt_k]\n","  # h_rtc_ratio_list = [config.loc_set.zone.zone_dt_k]\n","  # # h_rtc_ratio_list = [0.272, 0.36, 0.4, 0.5]\n","  \n","  # for h_rtc_k in h_rtc_ratio_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df['short_dtk_plot_1'].values - plot_df['short_dtk_plot_gap'].values * h_rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","  #   plt.step(np.arange(len(plot_df)), plot_df['long_dtk_plot_1'].values + plot_df['long_dtk_plot_gap'].values * h_rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","  #   # plt.step(np.arange(len(plot_df)), plot_df['h_short_tp_1'].values - plot_df['h_short_tp_gap'].values * h_rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","  #   # plt.step(np.arange(len(plot_df)), plot_df['h_long_tp_1'].values + plot_df['h_long_tp_gap'].values * h_rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","\n","  # # hy_min = np.min(plot_df['short_dtk_plot_1'].values - plot_df['short_dtk_plot_gap'].values * h_rtc_k)\n","  # # hy_max = np.max(plot_df['long_dtk_plot_1'].values + plot_df['long_dtk_plot_gap'].values * h_rtc_k)  \n","\n","  # ------------------------------------------------------------- #\n","\n","\n","  # ------------- ep ------------- #\n","  # if i != initial_i:\n","  # if len(ep_idx_list_) > 1:\n","  \n","    #        initial order         #\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='#ffeb3b')\n","  plt.axvline(prev_plotsize, alpha=0.5, linestyle='--', color='#ffeb3b')\n","\n","  for ep_i in range(len(ep_idx_list_)):\n","    # plt.axvline(prev_plotsize + (ep_idx_list_[ep_i] - ep_idx_list_[0]), alpha=0.7, linestyle='--', color='#ffeb3b')\n","    plt.axvline(prev_plotsize + (ep_idx_list_[ep_i] - open_idx), alpha=0.7, linestyle='--', color='#ffeb3b')\n","\n","  # plt.axvline(prev_plotsize, alpha=0.5, linestyle='--')\n","\n","  x0,x1 = plt.gca().get_xlim()\n","\n","  # ep_xmin = (prev_plotsize + (ep_idx_list_[ep_i] - ep_idx_list_[0])) / x1\n","  ep_xmin = (prev_plotsize + (ep_idx_list_[ep_i] - open_idx)) / x1\n","  plt.axhline(ep_tp_list[t_i][0], linestyle='--', xmin=ep_xmin, xmax=1, alpha=1, color='lime')  # ep line axhline  \n","  plt.text(x1, ep_tp_list[t_i][0][0], ' ep :\\n %s' % ep_tp_list[t_i][0][0], ha='left', va='center', fontweight='bold') # ep line label\n","\n","  \n","  # ------------- tp ------------- #\n","  for sub_i in range(len(ep_tp_list[t_i][1])):\n","\n","    # tp_xmin = (prev_plotsize + (tp_idx_list_[sub_i] - ep_idx_list_[0])) / x1\n","    tp_xmin = (prev_plotsize + (tp_idx_list_[sub_i] - open_idx)) / x1\n","    plt.axhline(ep_tp_list[t_i][1][sub_i], linestyle='--', xmin=tp_xmin , xmax=1, alpha=1, color='lime')  # tp line axhline\n","    plt.text(x1, ep_tp_list[t_i][1][sub_i], ' tp :\\n %s' % ep_tp_list[t_i][1][sub_i], ha='left', va='center', fontweight='bold') # tp line label\n","     \n","    # plt.axvline(prev_plotsize + (tp_idx_list_[sub_i] - ep_idx_list_[0]), alpha=1., linestyle='--', color='#ffeb3b', zorder=2)\n","    plt.axvline(prev_plotsize + (tp_idx_list_[sub_i] - open_idx), alpha=1., linestyle='--', color='#ffeb3b', zorder=2)\n","\n","\n","  # ------------- rtc horizontal range ------------- #\n","  # rtc_ratio_list = [-0.5, 0.272, 0.36, 0.4, 0.5]\n","  # rtc_ratio_list = [0.272, 0.36, 0.4, 0.5]\n","  rtc_ratio_list = [0.]\n","  if open_side == config.ep_set.short_entry_score:\n","    # plt.axhline(res_df['short_rtc_1'].iloc[open_idx], linewidth=.5, linestyle='-', alpha=1, color='#ffffff')\n","    # plt.axhline(res_df['short_rtc_0'].iloc[open_idx], linewidth=.5, linestyle='-', alpha=1, color='#ffffff')\n","    plt.axhline(res_df['short_out'].iloc[open_idx], linewidth=.5, linestyle='-', alpha=1, color='#ffffff')\n","    plt.text(x0, res_df['short_out'].iloc[open_idx], ' %s' % config.tr_set.out_gap, ha='left', va='center', fontweight='bold')\n","\n","    for rtc_k in rtc_ratio_list:\n","      plt.axhline(res_df['h_short_rtc_1'].iloc[open_idx] - res_df['h_short_rtc_gap'].iloc[open_idx] * rtc_k, linewidth=.5, linestyle='-', alpha=1, color='#ffffff')\n","      plt.text(x0, res_df['h_short_rtc_1'].iloc[open_idx] - res_df['h_short_rtc_gap'].iloc[open_idx] * rtc_k, ' %s' % rtc_k, ha='left', va='center', fontweight='bold')\n","      \n","    y_max = res_df['h_short_rtc_0'].iloc[open_idx]\n","    y_min = res_df['h_short_rtc_1'].iloc[open_idx] - res_df['h_short_rtc_gap'].iloc[open_idx] * rtc_k\n","\n","    print(\"short_tp :\", res_df['short_tp'].iloc[open_idx])\n","    print(\"short_out :\", res_df['short_out'].iloc[open_idx])\n","\n","  else:\n","    # plt.axhline(res_df['long_rtc_1'].iloc[open_idx], linewidth=.5, linestyle='-', alpha=1, color='#ffffff')\n","    # plt.axhline(res_df['long_rtc_0'].iloc[open_idx], linewidth=.5, linestyle='-', alpha=1, color='#ffffff') \n","    plt.axhline(res_df['long_out'].iloc[open_idx], linewidth=.5, linestyle='-', alpha=1, color='#ffffff')\n","    plt.text(x0, res_df['long_out'].iloc[open_idx], ' %s' % config.tr_set.out_gap, ha='left', va='center', fontweight='bold')\n","\n","    for rtc_k in rtc_ratio_list:\n","      plt.axhline(res_df['h_long_rtc_1'].iloc[open_idx] + res_df['h_long_rtc_gap'].iloc[open_idx] * rtc_k, linewidth=.5, linestyle='-', alpha=1, color='#ffffff')\n","      plt.text(x0, res_df['h_long_rtc_1'].iloc[open_idx] + res_df['h_long_rtc_gap'].iloc[open_idx] * rtc_k, ' %s' % rtc_k, ha='left', va='center', fontweight='bold')\n","\n","    y_max = res_df['h_long_rtc_1'].iloc[open_idx] + res_df['h_long_rtc_gap'].iloc[open_idx] * rtc_k\n","    y_min = res_df['h_long_rtc_0'].iloc[open_idx]\n","\n","    print(\"long_tp :\", res_df['long_tp'].iloc[open_idx])\n","    print(\"long_out :\", res_df['long_out'].iloc[open_idx])\n","  \n","    # t_tr = ((res_df['long_tp'].iloc[open_idx] - res_df['close'].iloc[open_idx] - tp_fee * res_df['close'].iloc[open_idx]) / (res_df['close'].iloc[open_idx] - res_df['long_out'].iloc[open_idx] + out_fee * res_df['close'].iloc[open_idx]))\n","    # t_dr = ((res_df['long_tp'].iloc[open_idx] - res_df['close'].iloc[open_idx]) / (res_df['close'].iloc[open_idx] - res_df['long_out'].iloc[open_idx]))     \n","    # print(\"t_tr :\", t_tr)\n","    # print(\"t_dr :\", t_dr)\n","\n","  #         hedge ep & tp         #\n","  h_i = h_trade_list[t_i][1]\n","  if h_i is not None:\n","    # plt.axvline(prev_plotsize + (h_i - ep_idx_list_[0]), linestyle='--')\n","    plt.axvline(prev_plotsize + (h_i - open_idx), linestyle='--')\n","    plt.axhline(h_ep_tp_list[t_i][0], linestyle='-', xmin=0.75, xmax=1, linewidth=3, color='magenta')  # ep line axhline\n","    plt.axhline(h_ep_tp_list[t_i][1], linestyle='-', xmin=0.85, xmax=1, linewidth=3, color='magenta')  # tp line axhline\n","\n","  \n","  temp_pr = plot_pr_list[t_i]\n","  # if temp_pr > 1:\n","  #   temp_pr_gap = (temp_pr - 1) / lvrg + fee\n","  #   pgfr = (temp_pr_gap - fee) / abs(temp_pr_gap + fee)\n","  # else:\n","  #   pgfr = np.nan\n","\n","  #         check pr        #\n","  if not config.lvrg_set.static_lvrg:\n","    \n","    #   list length Îßå sync ÎßûÏúºÎ©¥ t_i Í±±Ï†ï ÏïàÌï¥ÎèÑÎê®, zip Ìï¥ÏÑú ÏàúÏÑúÍ∞Ä Î∞îÎÄåÏóàÏùÑ Îøê, original serialized order ÏóêÏÑú t_i Î°ú indexing ÌïòÎäî Í≤ÉÎøêÏûÑ   #\n","    plt.title(\"%s ~ %s -> %.5f\\n %s\\n h_pr : %.5f\\n lvrg : %s\\ntp_ratio : %.3f\\n dr : %.3f\\n fee : %.4f\" % (ep_idx_list_[0], tp_idx_list_[-1], plot_pr_list[t_i], tp_state_list[t_i], \n","                                                                                                h_plot_pr_list[t_i], leverage_list[t_i], tp_ratio_list[t_i], dr_list[t_i], fee_list[t_i]))\n","\n","    print(\"short real pr :\", (ep_tp_list[t_i][0] / ep_tp_list[t_i][1][sub_i] - fee_list[t_i] - 1) * leverage_list[t_i] + 1)\n","    print(\"long real pr :\", (ep_tp_list[t_i][1][sub_i] / ep_tp_list[t_i][0] - fee_list[t_i] - 1) * leverage_list[t_i] + 1)    \n","\n","  else:\n","    plt.title(\"%s ~ %s -> %.5f\\n %s\\n h_pr : %.5f\\n tp_ratio : %.3f\\n dr : %.3f\\n fee : %.4f\" % (ep_idx_list_[0], tp_idx_list_[-1], plot_pr_list[t_i], tp_state_list[t_i], \n","                                                                                     h_plot_pr_list[t_i], tp_ratio_list[t_i], dr_list[t_i], fee_list[t_i]))\n","\n","    print(\"short real pr :\", (ep_tp_list[t_i][0] / ep_tp_list[t_i][1][sub_i] - fee_list[t_i] - 1) * config.lvrg_set.leverage + 1)\n","    print(\"long real pr :\", (ep_tp_list[t_i][1][sub_i] / ep_tp_list[t_i][0] - fee_list[t_i] - 1) * config.lvrg_set.leverage + 1)\n","  \n","  #           y lim           #  \n","  y_max_ = max(np.max(plot_df[yrange_colname]))\n","  y_min_ = min(np.min(plot_df[yrange_colname]))\n","  y_max = max(y_max, y_max_)\n","  y_min = min(y_min, y_min_)\n","  \n","  # hy_min = np.min(plot_df['short_dtk_1'].values - plot_df['short_dtk_gap'].values * 0.36)\n","  # hy_max = np.max(plot_df['long_dtk_1'].values + plot_df['long_dtk_gap'].values * 0.36)  \n","  # y_max = max(y_max, y_max_, hy_max)\n","  # y_min = min(y_min, y_min_, hy_min)\n","\n","  if np.isnan(y_max) or np.isnan(y_min):\n","    print('continued in yminmax')\n","    continue\n","  # print(\"y_max, y_min :\", y_max, y_min)\n","  # break\n","  \n","\n","  plt.ylim(y_min, y_max)\n","\n","  # ---------------------- plot ---------------------- #\n","\n","  #           rsi          #    \n","  plt.subplot(gs[1])\n","  alpha = 1\n","  for rsi_ in rsi_list:\n","    plt.step(np.arange(len(plot_df)), plot_df[rsi_].values, 'g', alpha=alpha)\n","    # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","    alpha -= 0.2\n","  plt.axhline(50, linestyle='--')\n","  plt.axhline(rsi_upper, linestyle='--')\n","  plt.axhline(rsi_lower, linestyle='--')\n","  \n","  plt.axvline(prev_plotsize, linestyle='--')\n","  \n","  #     vline open     #\n","  for ep_i in range(len(ep_idx_list_)):\n","    plt.axvline(prev_plotsize + (ep_idx_list_[ep_i] - open_idx), alpha=0.7, linestyle='--', color='#ffeb3b')\n","  \n","  #     vline close     #\n","  for sub_i in range(len(ep_tp_list[t_i][1])):\n","    plt.axvline(prev_plotsize + (tp_idx_list_[sub_i] - open_idx), alpha=1., linestyle='--', color='#ffeb3b', zorder=2)\n","\n","\n","  if not save_plot:\n","    plt.show()\n","  \n","  else:\n","    # ---------- save mode ---------- #\n","    fig_name = plot_check_dir +  \"/%s.png\" % t_i\n","    plt.savefig(fig_name)\n","    print(fig_name, \"saved !\")\n","\n","  \n","  plt.close()\n","  print()\n","\n","  # break\n"],"execution_count":13,"outputs":[{"output_type":"display_data","data":{"text/plain":"Output hidden; open in https://colab.research.google.com to view."},"metadata":{}}]},{"cell_type":"markdown","metadata":{"id":"13a-U32Uy50I"},"source":["### brief np_pr survey"]},{"cell_type":"code","metadata":{"id":"L9LdjV2uUWnp","colab":{"base_uri":"https://localhost:8080/","height":430},"executionInfo":{"status":"ok","timestamp":1638795602221,"user_tz":-540,"elapsed":695,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"3df1ac43-f016-4ffb-eb57-5c3212ef4716"},"source":["# plot_pr_list[:100]\n","\n","plt.plot(np_pr)\n","plt.axhline(1)\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 640x480 with 1 Axes>"]},"metadata":{}}]},{"cell_type":"markdown","metadata":{"id":"TBE0l6dHRYrE"},"source":["### whole pr & chart sync"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":877},"id":"-txULkhXRbz5","executionInfo":{"elapsed":1436,"status":"ok","timestamp":1636355589887,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"outputId":"7cda9fc7-4a4e-4c52-ffa3-a974b5f7c66f"},"source":["#     chunky survey ÌïÑÏöîÌï®    #\n","chunk_size = 50000\n","\n","sync_pr = np.ones(len(res_df))\n","sync_tr = np.zeros(len(res_df))\n","# sync_tr = np.empty(len(res_df))\n","# sync_tr[:] = np.nan\n","\n","max_tr = np.max(tp_ratio_list)\n","min_tr = np.min(tp_ratio_list)\n","\n","for ck_i in range(0, len(res_df), chunk_size):\n","\n","  chunked_df = res_df.iloc[ck_i:ck_i + chunk_size]\n","  # break\n","\n","  for pr_, eptp_idx, tr_ in zip(pr_list[ck_i:ck_i + chunk_size], trade_list[ck_i:ck_i + chunk_size], tp_ratio_list[ck_i:ck_i + chunk_size]):\n","    # print(pr_, eptp_idx)\n","    sync_pr[eptp_idx[-1][0]] = pr_\n","    sync_tr[eptp_idx[-1][0]] = tr_\n","    # break\n","\n","  chunked_pr = sync_pr[ck_i:ck_i + chunk_size]\n","  chunked_tr = sync_tr[ck_i:ck_i + chunk_size]\n","  chunked_tr = np.where(np.isnan(chunked_tr), pd.Series(chunked_tr).shift(1), chunked_tr)\n","\n","  # plt.figure(figsize=(8, 6))\n","\n","  plt.subplot(311)\n","  plt.plot(np.arange(len(chunked_df)), chunked_df['close'])\n","  # plt.show()\n","\n","  plt.subplot(312)\n","  plt.plot(np.cumprod(chunked_pr))\n","  \n","  plt.subplot(313)\n","  plt.plot(chunked_tr)\n","  plt.ylim(min_tr + 0.5 * (max_tr - min_tr), max_tr)\n","  \n","  plt.show()\n","  print()\n"],"execution_count":null,"outputs":[{"data":{"image/png":"\n","text/plain":["<Figure size 640x480 with 3 Axes>"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["\n"]},{"data":{"image/png":"\n","text/plain":["<Figure size 640x480 with 3 Axes>"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["\n"]}]},{"cell_type":"markdown","metadata":{"id":"Qys2Bw5Ou3u9"},"source":["### plot indi. legacy"]},{"cell_type":"code","metadata":{"id":"pi5ntOOVu6JT"},"source":["\n","  # ---------------------- ma ---------------------- #\n","   # --------- ema --------- #\n","  # alpha = 1\n","  # for sm_i, item in enumerate(ema_list):\n","  #   if sm_i > 0:\n","  #     lw = 5\n","  #   else:\n","  #     lw = 2\n","  #   plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#03ed30', linewidth=lw)\n","  #   alpha -= 0.2\n","\n","  #   # --------- sma --------- #\n","  # alpha = 1\n","  # for sm_i, sma in enumerate(sma_list):\n","  #   if sm_i > 0:\n","  #     lw = 5\n","  #   else:\n","  #     lw = 4\n","  #   plt.step(np.arange(len(plot_df)), plot_df[sma].values, alpha=alpha, color='#e91e63', linewidth=lw)\n","  #   alpha -= 0.2\n","\n","  \n","  # ---------------------- cb ---------------------- #\n","  # alpha = 1\n","  # for sm_i, item in enumerate(cb_list):\n","  #   if sm_i > 0:\n","  #     lw = 5\n","  #   else:\n","  #     lw = 2\n","  #   plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#5b9cf6', linewidth=lw)\n","  #   alpha -= 0.2\n","\n","\n","  \n","  #               sar               #\n","  # alpha = 1\n","  # markersize = 5\n","  # for sar in sar_list:\n","  #   plt.step(plot_df[sar].values, 'c*', alpha=alpha, markersize=markersize, color='dodgerblue')  # sar mic\n","  #   markersize += 1\n","  #   alpha -= 0.1\n","\n","  # plt.step(plot_df.values[:, [12]], 'co', alpha=1, markersize=7)  # sar mac\n","\n","  #               cloud               #\n","  # alpha = 0.7\n","  # for senkoua, senkoub in zip(senkoua_list, senkoub_list):\n","  #   plt.fill_between(np.arange(len(plot_df)), plot_df[senkoua].values, plot_df[senkoub].values, # ichimoku\n","  #                     where=plot_df[senkoua].values >= plot_df[senkoub].values, facecolor='g', alpha=alpha) # ichimoku\n","  #   plt.fill_between(np.arange(len(plot_df)), plot_df[senkoua].values, plot_df[senkoub].values,\n","  #                     where=plot_df[senkoua].values <= plot_df[senkoub].values, facecolor='r', alpha=alpha)  \n","  #   alpha -= 0.05\n","  \n","\n","\n","  # ---------------------- outer price indi. ---------------------- #\n","  #           macd          #\n","  # plt.subplot(312)\n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for macd in macd_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[macd].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","\n","  # plt.axhline(0, linestyle='--')\n","\n","  \n","  # #           trix          #  \n","  # # plt.subplot(313)\n","  # plt.subplot(gs[2])\n","  # alpha = 1\n","  # for trix in trix_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[trix].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","  # plt.axhline(0, linestyle='--')\n","\n","  \n","  #           fisher          #  \n","  # plt.subplot(313)\n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for fisher in fisher_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[fisher].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","    \n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","\n","  # plt.axhline(0, linestyle='--')\n","  # plt.axhline(fisher_upper, linestyle='--')\n","  # plt.axhline(fisher_lower, linestyle='--')\n","\n","  #           stoch          #  \n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for stoch_ in stoch_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[stoch_].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axhline(50, linestyle='--')\n","  # plt.axhline(stoch_upper, linestyle='--')\n","  # plt.axhline(stoch_lower, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","\n","  # ---------- cctbbo ---------- #  \n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for cctbbo in cctbbo_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[cctbbo].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axhline(50, linestyle='--')\n","  # plt.axhline(cctbbo_upper, linestyle='--')\n","  # plt.axhline(cctbbo_lower, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","\n","  # ---------- ema_roc ---------- #  \n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for emaroc in emaroc_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[emaroc].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","  # plt.axhline(0, linestyle='--')\n","  \n","  # ---------- bbw ---------- #  \n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for bbwp_ in bbwp_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[bbwp_].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","  # plt.axhline(bbwp_thresh, linestyle='--')\n","\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","\n"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"59nW2aKYzkN8"},"source":["### plot all indicator (stepline ver.)"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":828},"id":"JDH4rXgNzno6","executionInfo":{"elapsed":3326,"status":"ok","timestamp":1631665238032,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"outputId":"3ee8589d-27d7-4433-ed78-7bb1233cf175"},"source":["save_plot = False\n","\n","\n","if save_plot:\n","  plot_check_dir = current_path + \"plot_check/\" +  key.replace(\".xlsx\", \"\")\n","  try:\n","    os.mkdir(plot_check_dir)\n","  except:\n","\n","    #     remove existing dir   #\n","    shutil.rmtree(plot_check_dir)\n","    print(plot_check_dir, 'removed !')\n","    os.mkdir(plot_check_dir)\n","    # pass\n","    \n","# prev_plotsize = 120\n","prev_plotsize = 150\n","post_plotsize = 20\n","\n","# inversion = True\n","inversion = False\n","\n","# hedge = True\n","# hedge = False\n","\n","\n","if inversion:  \n","\n","    plot_pr_list = rev_np_pr\n","    h_plot_pr_list = h_rev_np_pr  # hedge\n","\n","else:\n","\n","    plot_pr_list = np_pr\n","    try:\n","      h_plot_pr_list = h_np_pr\n","    except Exception as e:\n","      print(\"error in h_plot_pr :\", e)\n","      h_plot_pr_list = np_pr\n","\n","\n","#         select plot columns       #\n","major_st_list = ['major_ST1_Up', 'major_ST1_Down', 'major_ST2_Up', 'major_ST2_Down', 'major_ST3_Up', 'major_ST3_Down',\n","                 'major_middle_line', 'major_upper_middle', 'major_lower_middle']\n","\n","basic_list = ['open', 'high', 'low', 'close', 'minor_ST1_Up', 'minor_ST1_Down',\n","       'minor_ST2_Up', 'minor_ST2_Down', 'minor_ST3_Up', 'minor_ST3_Down',\n","       'middle_line', 'min_upper', 'max_lower'] # + major_st_list\n","\n","\n","senkoua_list = ['senkou_a1', 'senkou_a2', 'senkou_a3', 'senkou_a4', 'senkou_a5']\n","senkoub_list = ['senkou_b1', 'senkou_b2', 'senkou_b3', 'senkou_b4', 'senkou_b5']\n","senkoua_list = ['senkou_a1',  'senkou_a2']\n","senkoub_list = ['senkou_b1',  'senkou_b2']\n","\n","# sar_list = ['sar1', 'sar2', 'sar3', 'sar4', 'sar5']\n","sar_list = ['sar1']\n","\n","# ma_list = ['sma1', 'sma4']\n","ma_list = ['ema5']\n","\n","\n","#     -------------- under price phase --------------    #\n","macd_list = ['macd_hist1', 'macd_hist2', 'macd_hist3', 'macd_hist4', 'macd_hist5']\n","# macd_list = ['macd_hist1', 'macd_hist2', 'macd_hist3']\n","# trix_list = ['trix1', 'trix2', 'trix3', 'trix4', 'trix5']\n","trix_list = ['trix1', 'trix2', 'trix3']\n","stoch_list = ['stoch']\n","fisher_list = ['fisher30', 'fisher60', 'fisher120']\n","cctbbo_list = ['cctbbo']\n","emaroc_list = ['ema_roc']\n","\n","\n","#       \n","# input_cols = basic_cols + sar_cols + ichimoku_cols + macd_cols + ichimoku_cols2\n","# input_colname = basic_list + senkoua_list + senkoub_list + sar_list + macd_list + trix_list\n","# input_colname = basic_list + senkoua_list + senkoub_list + sar_list + macd_list\n","# input_colname = basic_list + senkoua_list + senkoub_list + sar_list + macd_list + ma_list\n","# input_colname = basic_list + senkoua_list + senkoub_list + sar_list + ma_list + macd_list + stoch_list + fisher_list + cctbbo_list\n","input_colname = basic_list + major_st_list + senkoua_list + senkoub_list + sar_list + stoch_list + fisher_list + emaroc_list\n","price_colname = basic_list + senkoua_list + senkoub_list + sar_list # currently just used for ymin, ymax\n","# input_cols = basic_cols + sar_cols + ichimoku_cols + macd_cols\n","\n","\n","\n","\n","# for t_i, (initial_i, i, j) in enumerate(trade_list):\n","for t_i, (ep_idx_list_, tp_idx_list_) in enumerate(trade_list):\n","  # print(i, j)\n","\n","  if not(i >= prev_plotsize):\n","    continue\n","\n","  # if i <= 4860:\n","  # if i == 1536:\n","  # if 100 < i < 1860:\n","  if ep_idx_list_[0] == 370530:\n","    pass\n","  else:\n","    continue\n","\n","  # if tp_state_list[t_i] != 'd-open':\n","  #   continue\n","\n","  # if (entry[i] == -1) and res_df['close'].iloc[i - 1] > short_ep.iloc[i]:\n","  #   pass\n","  # else:\n","  #   continue\n","\n","  # if plot_pr_list[t_i] > 0.5:\n","  # if plot_pr_list[t_i] > 1.0:\n","  # # if plot_pr_list[t_i] < 1.0:\n","  #   continue\n","\n","  # plot_df = res_df.iloc[i - prev_plotsize:j + post_plotsize, input_cols]\n","  plot_df = res_df.iloc[ep_idx_list_[0] - prev_plotsize:tp_idx_list_[-1] + post_plotsize][input_colname]\n","\n","\n","  #       keep off-color st with another variable         #\n","  # st_trend_plot_df = res_df.iloc[ep_idx_list_[0] - prev_plotsize:tp_idx_list_[-1] + post_plotsize, [7, 10, 13]]\n","  # st_trend_plot_df = res_df[['minor_ST1_Trend', 'minor_ST2_Trend', 'minor_ST3_Trend']].iloc[ep_idx_list_[0] - prev_plotsize:tp_idx_list_[-1] + post_plotsize]\n","  st_trend_plot_df = res_df[['minor_ST1_Trend', 'minor_ST2_Trend', 'minor_ST3_Trend', 'major_ST1_Trend', 'major_ST2_Trend', 'major_ST3_Trend']].iloc[ep_idx_list_[0] - prev_plotsize:tp_idx_list_[-1] + post_plotsize]\n","  # htf_st_trend_plot_df = res_df[['major_ST1_Trend', 'major_ST2_Trend', 'major_ST3_Trend']].iloc[ep_idx_list_[0] - prev_plotsize:tp_idx_list_[-1] + post_plotsize]\n","\n","  # y_max = np.max(plot_df.iloc[:, [4, 6, 8]])\n","  # y_min = np.min(plot_df.iloc[:, [5, 7, 9]])\n","  # print(\"y_max, y_min :\", y_max, y_min)\n","  \n","  # y_max = max(np.max(plot_df.iloc[:, [4, 6, 8]]))\n","  # y_min = min(np.min(plot_df.iloc[:, [5, 7, 9]]))\n","  \n","  y_max = max(np.max(plot_df[price_colname]))\n","  y_min = min(np.min(plot_df[price_colname]))\n","\n","  if np.isnan(y_max) or np.isnan(y_min):\n","    continue\n","  # print(\"y_max, y_min :\", y_max, y_min)\n","  # break\n","  \n","  plot_df[\"off_color_upper_st1\"] = np.where(st_trend_plot_df['minor_ST1_Trend'] == 1, plot_df['minor_ST1_Up'], np.nan)\n","  plot_df[\"off_color_upper_st2\"] = np.where(st_trend_plot_df['minor_ST2_Trend'] == 1, plot_df['minor_ST2_Up'], np.nan)\n","  plot_df[\"off_color_upper_st3\"] = np.where(st_trend_plot_df['minor_ST3_Trend'] == 1, plot_df['minor_ST3_Up'], np.nan)\n","  plot_df[\"off_color_lower_st1\"] = np.where(st_trend_plot_df['minor_ST1_Trend'] == -1, plot_df['minor_ST1_Down'], np.nan)\n","  plot_df[\"off_color_lower_st2\"] = np.where(st_trend_plot_df['minor_ST2_Trend'] == -1, plot_df['minor_ST2_Down'], np.nan)\n","  plot_df[\"off_color_lower_st3\"] = np.where(st_trend_plot_df['minor_ST3_Trend'] == -1, plot_df['minor_ST3_Down'], np.nan)\n","\n","  plot_df[\"off_color_upper_hst1\"] = np.where(st_trend_plot_df['major_ST1_Trend'] == 1, plot_df['major_ST1_Up'], np.nan)\n","  plot_df[\"off_color_upper_hst2\"] = np.where(st_trend_plot_df['major_ST2_Trend'] == 1, plot_df['major_ST2_Up'], np.nan)\n","  plot_df[\"off_color_upper_hst3\"] = np.where(st_trend_plot_df['major_ST3_Trend'] == 1, plot_df['major_ST3_Up'], np.nan)\n","  plot_df[\"off_color_lower_hst1\"] = np.where(st_trend_plot_df['major_ST1_Trend'] == -1, plot_df['major_ST1_Down'], np.nan)\n","  plot_df[\"off_color_lower_hst2\"] = np.where(st_trend_plot_df['major_ST2_Trend'] == -1, plot_df['major_ST2_Down'], np.nan)\n","  plot_df[\"off_color_lower_hst3\"] = np.where(st_trend_plot_df['major_ST3_Trend'] == -1, plot_df['major_ST3_Down'], np.nan)\n","\n","\n","  #       replace st values with np.nan, using st trend     #\n","  plot_df['minor_ST1_Up'] = np.where(st_trend_plot_df['minor_ST1_Trend'] == 1, np.nan, plot_df['minor_ST1_Up'])\n","  plot_df['minor_ST2_Up'] = np.where(st_trend_plot_df['minor_ST2_Trend'] == 1, np.nan, plot_df['minor_ST2_Up'])\n","  plot_df['minor_ST3_Up'] = np.where(st_trend_plot_df['minor_ST3_Trend'] == 1, np.nan, plot_df['minor_ST3_Up'])\n","  plot_df['minor_ST1_Down'] = np.where(st_trend_plot_df['minor_ST1_Trend'] == -1, np.nan, plot_df['minor_ST1_Down'])\n","  plot_df['minor_ST2_Down'] = np.where(st_trend_plot_df['minor_ST2_Trend'] == -1, np.nan, plot_df['minor_ST2_Down'])\n","  plot_df['minor_ST3_Down'] = np.where(st_trend_plot_df['minor_ST3_Trend'] == -1, np.nan, plot_df['minor_ST3_Down'])\n","\n","  plot_df['major_ST1_Up'] = np.where(st_trend_plot_df['major_ST1_Trend'] == 1, np.nan, plot_df['major_ST1_Up'])\n","  plot_df['major_ST2_Up'] = np.where(st_trend_plot_df['major_ST2_Trend'] == 1, np.nan, plot_df['major_ST2_Up'])\n","  plot_df['major_ST3_Up'] = np.where(st_trend_plot_df['major_ST3_Trend'] == 1, np.nan, plot_df['major_ST3_Up'])\n","  plot_df['major_ST1_Down'] = np.where(st_trend_plot_df['major_ST1_Trend'] == -1, np.nan, plot_df['major_ST1_Down'])\n","  plot_df['major_ST2_Down'] = np.where(st_trend_plot_df['major_ST2_Trend'] == -1, np.nan, plot_df['major_ST2_Down'])\n","  plot_df['major_ST3_Down'] = np.where(st_trend_plot_df['major_ST3_Trend'] == -1, np.nan, plot_df['major_ST3_Down'])\n","\n","\n","  plot_short_ep = short_ep.iloc[ep_idx_list_[0] - prev_plotsize:tp_idx_list_[-1] + post_plotsize]\n","  plot_long_ep = long_ep.iloc[ep_idx_list_[0] - prev_plotsize:tp_idx_list_[-1] + post_plotsize]\n","\n","  plot_upper_middle = (plot_df['middle_line'] + plot_df['min_upper']) / 2\n","  plot_lower_middle = (plot_df['middle_line'] + plot_df['max_lower']) / 2\n","\n","  plot_short_tp = short_tp.iloc[ep_idx_list_[0] - prev_plotsize:tp_idx_list_[-1] + post_plotsize]\n","  plot_long_tp = long_tp.iloc[ep_idx_list_[0] - prev_plotsize:tp_idx_list_[-1] + post_plotsize]  \n","\n","\n","  # fig = trendln.plot_support_resistance(plot_df['close'], accuracy=8, fromwindows=False, numbest=1,  window=30) # requires matplotlib - pip install matplotlib\n","\n","  fig = plt.figure(figsize=(12, 16))\n","  \n","  gs = gridspec.GridSpec(nrows=3, # row Î™á Í∞ú \n","                       ncols=1, # col Î™á Í∞ú \n","                       height_ratios=[3, 1, 1]\n","                      )\n","  \n","  # fig = plt.figure(figsize=(8, 12))\n","  # ax = fig.add_subplot(111)\n","  # ax = fig.add_subplot(311)\n","  ax = fig.add_subplot(gs[0])\n","\n","  # fig.show()\n","  # fig.canvas.draw()\n","\n","  temp_ohlc = plot_df.values[:, :4]\n","  index = np.arange(len(temp_ohlc))\n","  candle = np.hstack((np.reshape(index, (-1, 1)), temp_ohlc))\n","  mf.candlestick_ohlc(ax, candle, width=0.5, colorup='r', colordown='b')\n","\n","  plt.step(plot_df[['minor_ST1_Up', 'minor_ST2_Up', 'minor_ST3_Up']].values, 'r', alpha=1)  # upper on color\n","  plt.step(plot_df[['minor_ST1_Down', 'minor_ST2_Down', 'minor_ST3_Down']].values, 'b', alpha=1)  # lower on color\n","  \n","  plt.step(plot_df[['major_ST1_Up', 'major_ST2_Up', 'major_ST3_Up']].values, 'r', alpha=1, linewidth=3)  # major upper on color\n","  plt.step(plot_df[['major_ST1_Down', 'major_ST2_Down', 'major_ST3_Down']].values, 'b', alpha=1, linewidth=3)  # major lower on color\n","\n","  plt.step(plot_df[['middle_line']].values, 'fuchsia', alpha=1)  # middle \n","  plt.step(plot_df[['major_middle_line']].values, 'fuchsia', alpha=1, linewidth=3)  # major_middle \n","  \n","  plt.step(plot_df[['off_color_upper_st1', 'off_color_upper_st2', 'off_color_upper_st3']].values, 'r', alpha=1, linestyle=':')  # upper off color\n","  plt.step(plot_df[['off_color_lower_st1', 'off_color_lower_st2', 'off_color_lower_st3']].values, 'b', alpha=1, linestyle=':')  # lower off color\n","  \n","  plt.step(plot_df[['off_color_upper_hst1', 'off_color_upper_hst2', 'off_color_upper_hst3']].values, 'r', alpha=1, linestyle=':', linewidth=3)  # major upper off color\n","  plt.step(plot_df[['off_color_lower_hst1', 'off_color_lower_hst2', 'off_color_lower_hst3']].values, 'b', alpha=1, linestyle=':', linewidth=3)  # major lower off color\n","\n","\n","  # plt.step(np.arange(len(plot_df)), plot_short_ep.values, alpha=1, linestyle='--', color='y')  # ep\n","  # plt.step(np.arange(len(plot_df)),plot_long_ep.values, alpha=1, linestyle='--', color='y')  # ep\n","\n","  plt.step(np.arange(len(plot_df)), plot_upper_middle.values, alpha=1, linestyle='--', color='g')  # 2nd middle\n","  plt.step(np.arange(len(plot_df)), plot_lower_middle.values, alpha=1, linestyle='--', color='g')  # 2nd middle\n","\n","  plt.step(plot_df[['major_upper_middle']].values, 'g', linestyle='--', alpha=1, linewidth=3)  # major_middle \n","  plt.step(plot_df[['major_lower_middle']].values, 'g', linestyle='--', alpha=1, linewidth=3)  # major_middle \n","  \n","\n","  # plt.step(np.arange(len(plot_df)), plot_short_tp.values, alpha=1, linestyle=':', color='y')  # tp\n","  # plt.step(np.arange(len(plot_df)), plot_long_tp.values, alpha=1, linestyle=':', color='y')  # tp\n","\n","\n","\n","  # ---------------------- on price indicator part ---------------------- #\n","\n","  # ---------------------- sma ---------------------- #\n","  # alpha = 1\n","  # for sm_i, sma in enumerate(ma_list):\n","  #   if sm_i > 0:\n","  #     lw = 5\n","  #   else:\n","  #     lw = 2\n","  #   plt.step(np.arange(len(plot_df)), plot_df[sma].values, alpha=alpha, color='black', linewidth=lw)\n","  #   alpha -= 0.2\n","  \n","  #               sar               #\n","  alpha = 1\n","  markersize = 5\n","  for sar in sar_list:\n","    plt.step(plot_df[sar].values, 'c*', alpha=alpha, markersize=markersize, color='dodgerblue')  # sar mic\n","    markersize += 1\n","    alpha -= 0.1\n","\n","  # plt.step(plot_df.values[:, [12]], 'co', alpha=1, markersize=7)  # sar mac\n","\n","  #               cloud               #\n","  alpha = 0.7\n","  for senkoua, senkoub in zip(senkoua_list, senkoub_list):\n","    plt.fill_between(np.arange(len(plot_df)), plot_df[senkoua].values, plot_df[senkoub].values, # ichimoku\n","                      where=plot_df[senkoua].values >= plot_df[senkoub].values, facecolor='g', alpha=alpha) # ichimoku\n","    plt.fill_between(np.arange(len(plot_df)), plot_df[senkoua].values, plot_df[senkoub].values,\n","                      where=plot_df[senkoua].values <= plot_df[senkoub].values, facecolor='r', alpha=alpha)  \n","    alpha -= 0.05\n","  \n","  # ------------------------------------------------------------- #\n","\n","\n","  #       ep & tp     #\n","  # if i != initial_i:\n","  # if len(ep_idx_list_) > 1:\n","  \n","  # ------------- initial order ------------- #\n","  plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_list[t_i]), alpha=0.5, linestyle='--', color='lime')\n","\n","  for ep_i in range(len(ep_idx_list_)):\n","    plt.axvline(prev_plotsize + (ep_idx_list_[ep_i] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","\n","  # plt.axvline(prev_plotsize, alpha=0.5, linestyle='--')\n","  plt.axhline(ep_tp_list[t_i][0], linestyle='-', xmin=0.75, xmax=1, linewidth=3, color='lime')  # ep line axhline\n","\n","  for sub_i in range(len(ep_tp_list[t_i][1])):\n","    plt.axhline(ep_tp_list[t_i][1][sub_i], linestyle='-', xmin=0.75 + 0.05 * (sub_i + 1) , xmax=1, linewidth=3, color='lime')  # tp line axhline\n","    # plt.axhline(ep_tp_list[t_i][1], linestyle='-', xmin=0.9, xmax=1, linewidth=3)  # tp line axhline  \n","    plt.axvline(prev_plotsize + (tp_idx_list_[sub_i] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","\n","\n","  #         hedge ep & tp         #\n","  h_i = h_trade_list[t_i][1]\n","  if h_i is not None:\n","    plt.axvline(prev_plotsize + (h_i - ep_idx_list_[0]), linestyle='--')\n","    plt.axhline(h_ep_tp_list[t_i][0], linestyle='-', xmin=0.75, xmax=1, linewidth=3, color='magenta')  # ep line axhline\n","    plt.axhline(h_ep_tp_list[t_i][1], linestyle='-', xmin=0.85, xmax=1, linewidth=3, color='magenta')  # tp line axhline\n","\n","  \n","  #         check pr        #\n","  if not static_lvrg:\n","    plt.title(\"%s ~ %s -> %.5f\\n %s\\n h_pr : %.5f\\nlvrg : %s\\ntp_ratio : %.2f\" % (ep_idx_list_[0], tp_idx_list_[-1], plot_pr_list[t_i], tp_state_list[t_i], h_plot_pr_list[t_i], lvrg_list[t_i], tp_ratio_list[t_i]))\n","  else:\n","    plt.title(\"%s ~ %s -> %.5f\\n %s\\n h_pr : %.5f\\ntp_ratio : %.2f\" % (ep_idx_list_[0], tp_idx_list_[-1], plot_pr_list[t_i], tp_state_list[t_i], h_plot_pr_list[t_i], tp_ratio_list[t_i]))\n","\n","  print(\"short real pr :\", (ep_tp_list[t_i][0] / ep_tp_list[t_i][1][sub_i] - fee - 1) * lvrg + 1)\n","  print(\"long real pr :\", (ep_tp_list[t_i][1][sub_i] / ep_tp_list[t_i][0] - fee - 1) * lvrg + 1)\n","\n","  #           y lim         #\n","  plt.ylim(y_min, y_max)\n","\n","\n","  # ---------------------- outer price indi. ---------------------- #\n","  #           macd          #\n","  # plt.subplot(312)\n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for macd in macd_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[macd].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_list[t_i]), alpha=0.5, linestyle='--', color='lime')\n","\n","  # plt.axhline(0, linestyle='--')\n","\n","  \n","  # #           trix          #  \n","  # # plt.subplot(313)\n","  # plt.subplot(gs[2])\n","  # alpha = 1\n","  # for trix in trix_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[trix].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_list[t_i]), alpha=0.5, linestyle='--', color='lime')\n","  # plt.axhline(0, linestyle='--')\n","\n","  \n","  #           fisher          #  \n","  # plt.subplot(313)\n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for fisher in fisher_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[fisher].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","    \n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_list[t_i]), alpha=0.5, linestyle='--', color='lime')\n","\n","  # plt.axhline(0, linestyle='--')\n","  # plt.axhline(fisher_upper, linestyle='--')\n","  # plt.axhline(fisher_lower, linestyle='--')\n","\n","  #           stoch          #  \n","  # # plt.subplot(313)\n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for stoch in stoch_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[stoch].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axhline(50, linestyle='--')\n","  # plt.axhline(stoch_upper, linestyle='--')\n","  # plt.axhline(stoch_lower, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_list[t_i]), alpha=0.5, linestyle='--', color='lime')\n","\n","  # ---------- cctbbo ---------- #  \n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for cctbbo in cctbbo_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[cctbbo].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axhline(50, linestyle='--')\n","  # plt.axhline(cctbbo_upper, linestyle='--')\n","  # plt.axhline(cctbbo_lower, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_list[t_i]), alpha=0.5, linestyle='--', color='lime')\n","\n","  # ---------- ema_roc ---------- #  \n","  plt.subplot(gs[1])\n","  alpha = 1\n","  for emaroc in emaroc_list:\n","    plt.step(np.arange(len(plot_df)), plot_df[emaroc].values, 'g', alpha=alpha)\n","    # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","    alpha -= 0.2\n","  plt.axvline(prev_plotsize, linestyle='--')\n","  plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_list[t_i]), alpha=0.5, linestyle='--', color='lime')\n","  plt.axhline(0, linestyle='--')\n","\n","\n","\n","\n","\n","  # ---------------------- plot ---------------------- #\n","\n","  if not save_plot:\n","    plt.show()\n","  \n","  else:\n","    # ---------- save mode ---------- #\n","    fig_name = plot_check_dir +  \"/%s.png\" % t_i\n","    plt.savefig(fig_name)\n","    print(fig_name, \"saved !\")\n","\n","  \n","  plt.close()\n","  print()\n","\n","  # break\n"],"execution_count":null,"outputs":[{"name":"stdout","output_type":"stream","text":["short real pr : [0.95849245]\n","long real pr : [1.0378222]\n"]},{"data":{"image/png":"\n","text/plain":["<Figure size 864x1152 with 2 Axes>"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["\n"]}]},{"cell_type":"code","metadata":{"id":"KGuJu2j4Aby9"},"source":["# print()\n","for item in os.listdir(current_path + \"plot_check/\"):\n","  if item.endswith('png'):\n","    os.remove(current_path + \"plot_check/\" + item)\n","    print(current_path + \"plot_check/\" + item, \"removed !\")"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"cj9X6S1jJjER"},"source":["### plot nontp case"]},{"cell_type":"code","metadata":{"id":"Gb1jGrS4Jl8A"},"source":["prev_plotsize = 50\n","\n","# inversion = True\n","inversion = False\n","\n","# hedge = True\n","# hedge = False\n","\n","short_ver = False\n","\n","\n","if inversion:  \n","\n","    plot_pr_list = rev_np_pr\n","    h_plot_pr_list = h_rev_np_pr  # hedge\n","\n","else:\n","\n","    plot_pr_list = np_pr\n","    h_plot_pr_list = h_np_pr\n","\n","\n","\n","#         select plot columns       #\n","# basic_cols = [0, 1, 2, 3, 5, 6, 8, 9, 11, 12, 14] # you don't need to touch\n","\n","# sar_cols = [15, 18] # 15 ~ 19\n","# ichimoku_cols = [20, 21]  # 20 ~ 29\n","# # ichimoku_cols = [22, 23]  # 20 ~ 29\n","# ichimoku_cols2 = [22, 23]  # 20 ~ 29\n","# macd_cols = [30]  # 30 ~ 34\n","\n","# print(res_df.columns[basic_cols])\n","# break\n","\n","basic_list = ['open', 'high', 'low', 'close', 'minor_ST1_Up', 'minor_ST1_Down',\n","       'minor_ST2_Up', 'minor_ST2_Down', 'minor_ST3_Up', 'minor_ST3_Down',\n","       'middle_line', 'min_upper', 'max_lower']\n","# senkoua_list = ['senkou_a1', 'senkou_a2', 'senkou_a3', 'senkou_a4', 'senkou_a5']\n","# senkoub_list = ['senkou_b1', 'senkou_b2', 'senkou_b3', 'senkou_b4', 'senkou_b5']\n","senkoua_list = ['senkou_a1', 'senkou_a2', 'senkou_a3']\n","senkoub_list = ['senkou_b1', 'senkou_b2', 'senkou_b3']\n","# sar_list = ['sar1', 'sar2', 'sar3', 'sar4', 'sar5']\n","# sar_list = ['sar1', 'sar2', 'sar3', 'sar4', 'sar5']\n","sar_list = ['sar1', 'sar2', 'sar3']\n","sar_list = ['sar1', 'sar2', 'sar3']\n","\n","#     -------------- under price phase --------------    #\n","macd_list = ['macd_hist1', 'macd_hist2', 'macd_hist3', 'macd_hist4', 'macd_hist5']\n","trix_list = ['trix1', 'trix2', 'trix3', 'trix4', 'trix5']\n","stoch_list = ['stoch']\n","fisher_list = ['fisher']\n","cctbbo_list = ['cctbbo']\n","\n","\n","#       \n","# input_cols = basic_cols + sar_cols + ichimoku_cols + macd_cols + ichimoku_cols2\n","# input_colname = basic_list + senkoua_list + senkoub_list + sar_list + macd_list + trix_list\n","input_colname = basic_list + senkoua_list + senkoub_list + sar_list + macd_list + stoch_list + fisher_list + cctbbo_list\n","price_colname = basic_list + senkoua_list + senkoub_list + sar_list \n","# input_cols = basic_cols + sar_cols + ichimoku_cols + macd_cols\n","\n","\n","if short_ver:\n","  nontp_indexs = nontp_short_indexs\n","  nontp_liqd_list = nontp_short_liqd_list\n","  nontp_pr_list = nontp_short_pr_list\n","  nontp_ep = nontp_short_ep_list\n","else:\n","  nontp_indexs = nontp_long_indexs\n","  nontp_liqd_list = nontp_long_liqd_list\n","  nontp_pr_list = nontp_long_pr_list\n","  nontp_ep = nontp_long_ep_list\n","\n","\n","for t_i, i in enumerate(nontp_indexs):\n","\n","  j = len(res_df) - 1\n","\n","  # print(i, j)\n","\n","  if not(i >= prev_plotsize):\n","    continue\n","\n","  # if i <= 4860:\n","  # if i == 1536:\n","  # # if 1800 < i < 1860:\n","  #   pass\n","  # else:\n","  #   continue\n","\n","  # if tp_state_list[t_i] != 'd-open':\n","  #   continue\n","\n","  # if (entry[i] == -1) and res_df['close'].iloc[i - 1] > upper_ep.iloc[i]:\n","  #   pass\n","  # else:\n","  #   continue\n","\n","  # if plot_pr_list[t_i] > 0.5:\n","  # if plot_pr_list[t_i] > 1.0:\n","  # # if plot_pr_list[t_i] < 1.0:\n","  #   continue\n","\n","  # plot_df = res_df.iloc[i - prev_plotsize:j + 1, input_cols]\n","  plot_df = res_df.iloc[i - prev_plotsize:j + 1][input_colname]\n","\n","\n","  #       keep off-color st with another variable         #\n","  st_trend_plot_df = res_df.iloc[i - prev_plotsize:j + 1, [7, 10, 13]]\n","\n","  # y_max = np.max(plot_df.iloc[:, [4, 6, 8]])\n","  # y_min = np.min(plot_df.iloc[:, [5, 7, 9]])\n","  # print(\"y_max, y_min :\", y_max, y_min)\n","  \n","  # y_max = max(np.max(plot_df.iloc[:, [4, 6, 8]]))\n","  # y_min = min(np.min(plot_df.iloc[:, [5, 7, 9]]))\n","  \n","  y_max = max(np.max(plot_df[price_colname]))\n","  y_min = min(np.min(plot_df[price_colname]))\n","  # print(\"y_max, y_min :\", y_max, y_min)\n","  # break\n","\n","  plot_df[\"off_color_upper_st1\"] = np.where(st_trend_plot_df.iloc[:, [0]] == 1, plot_df.iloc[:, [4]], np.nan)\n","  plot_df[\"off_color_upper_st2\"] = np.where(st_trend_plot_df.iloc[:, [1]] == 1, plot_df.iloc[:, [6]], np.nan)\n","  plot_df[\"off_color_upper_st3\"] = np.where(st_trend_plot_df.iloc[:, [2]] == 1, plot_df.iloc[:, [8]], np.nan)\n","  plot_df[\"off_color_lower_st1\"] = np.where(st_trend_plot_df.iloc[:, [0]] == -1, plot_df.iloc[:, [5]], np.nan)\n","  plot_df[\"off_color_lower_st2\"] = np.where(st_trend_plot_df.iloc[:, [1]] == -1, plot_df.iloc[:, [7]], np.nan)\n","  plot_df[\"off_color_lower_st3\"] = np.where(st_trend_plot_df.iloc[:, [2]] == -1, plot_df.iloc[:, [9]], np.nan)\n","\n","\n","  #       replace st values with np.nan, using st trend     #\n","  plot_df.iloc[:, [4]] = np.where(st_trend_plot_df.iloc[:, [0]] == 1, np.nan, plot_df.iloc[:, [4]])\n","  plot_df.iloc[:, [6]] = np.where(st_trend_plot_df.iloc[:, [1]] == 1, np.nan, plot_df.iloc[:, [6]])\n","  plot_df.iloc[:, [8]] = np.where(st_trend_plot_df.iloc[:, [2]] == 1, np.nan, plot_df.iloc[:, [8]])\n","  plot_df.iloc[:, [5]] = np.where(st_trend_plot_df.iloc[:, [0]] == -1, np.nan, plot_df.iloc[:, [5]])\n","  plot_df.iloc[:, [7]] = np.where(st_trend_plot_df.iloc[:, [1]] == -1, np.nan, plot_df.iloc[:, [7]])\n","  plot_df.iloc[:, [9]] = np.where(st_trend_plot_df.iloc[:, [2]] == -1, np.nan, plot_df.iloc[:, [9]])\n","\n","\n","  plot_upper_ep = upper_ep.iloc[i - prev_plotsize:j + 1]\n","  plot_lower_ep = lower_ep.iloc[i - prev_plotsize:j + 1]\n","\n","  plot_upper_middle = (plot_df['middle_line'] + plot_df['min_upper']) / 2\n","  plot_lower_middle = (plot_df['middle_line'] + plot_df['max_lower']) / 2\n","\n","  plot_short_tp = short_tp.iloc[i - prev_plotsize:j + 1]\n","  plot_long_tp = long_tp.iloc[i - prev_plotsize:j + 1]  \n","\n","\n","\n","  # fig = plt.figure(figsize=(12, 16))\n","  fig = plt.figure(figsize=(12, 16))\n","  \n","  gs = gridspec.GridSpec(nrows=3, # row Î™á Í∞ú \n","                       ncols=1, # col Î™á Í∞ú \n","                       height_ratios=[3, 1, 1]\n","                      )\n","  \n","  # fig = plt.figure(figsize=(8, 12))\n","  # ax = fig.add_subplot(111)\n","  # ax = fig.add_subplot(311)\n","  ax = fig.add_subplot(gs[0])\n","\n","  # fig.show()\n","  # fig.canvas.draw()\n","\n","  temp_ohlc = plot_df.values[:, :4]\n","  index = np.arange(len(temp_ohlc))\n","  candle = np.hstack((np.reshape(index, (-1, 1)), temp_ohlc))\n","  mf.candlestick_ohlc(ax, candle, width=0.5, colorup='r', colordown='b')\n","\n","  # print(plot_df.values[:, 4:])\n","  plt.step(plot_df.values[:, [4, 6, 8]], 'r', alpha=1)  # upper on color\n","  # plt.plot(plot_df.values[:, [4, 6, 8]], 'r', alpha=1)  # upper on color\n","  plt.step(plot_df.values[:, [5, 7, 9]], 'b', alpha=1)  # lower on color\n","  plt.step(plot_df.values[:, [10]], 'fuchsia', alpha=1)  # middle\n","  \n","  plt.step(plot_df.values[:, -6:-3], 'r', alpha=1, linestyle=':')  # upper off color\n","  plt.step(plot_df.values[:, -3:], 'b', alpha=1, linestyle=':')  # lower off color\n","\n","\n","\n","  # plt.step(np.arange(len(plot_df)), plot_upper_ep.values, alpha=1, linestyle='--', color='y')  # ep\n","  # plt.step(np.arange(len(plot_df)),plot_lower_ep.values, alpha=1, linestyle='--', color='y')  # ep\n","\n","  plt.step(np.arange(len(plot_df)), plot_upper_middle.values, alpha=1, linestyle='--', color='g')  # 2nd middle\n","  plt.step(np.arange(len(plot_df)), plot_lower_middle.values, alpha=1, linestyle='--', color='g')  # 2nd middle\n","\n","  # plt.step(np.arange(len(plot_df)), plot_short_tp.values, alpha=1, linestyle=':', color='y')  # tp\n","  # plt.step(np.arange(len(plot_df)), plot_long_tp.values, alpha=1, linestyle=':', color='y')  # tp\n","\n","\n","\n","  # ---------------------- indicator part ---------------------- #\n","  \n","  #               sar               #\n","  alpha = 1\n","  markersize = 5\n","  for sar in sar_list:\n","    plt.step(plot_df[sar].values, 'c*', alpha=alpha, markersize=markersize, color='dodgerblue')  # sar mic\n","    markersize += 1\n","    alpha -= 0.1\n","\n","  # plt.step(plot_df.values[:, [12]], 'co', alpha=1, markersize=7)  # sar mac\n","\n","  #               cloud               #\n","  alpha = 0.7\n","  for senkoua, senkoub in zip(senkoua_list, senkoub_list):\n","    plt.fill_between(np.arange(len(plot_df)), plot_df[senkoua].values, plot_df[senkoub].values, # ichimoku\n","                      where=plot_df[senkoua].values >= plot_df[senkoub].values, facecolor='g', alpha=alpha) # ichimoku\n","    plt.fill_between(np.arange(len(plot_df)), plot_df[senkoua].values, plot_df[senkoub].values,\n","                      where=plot_df[senkoua].values <= plot_df[senkoub].values, facecolor='r', alpha=alpha)  \n","    alpha -= 0.05\n","  \n","  # ------------------------------------------------------------- #\n","\n","\n","  #       ep & tp     #\n","  if i != initial_i:\n","    plt.axvline(prev_plotsize - (i - initial_i), alpha=0.5, linestyle='--')\n","  plt.axvline(prev_plotsize, alpha=0.5, linestyle='--')\n","  plt.axhline(nontp_ep[t_i], linestyle='-', xmin=0.75, xmax=1, linewidth=3, color='lime')  # ep line axhline\n","\n","  # for sub_i in range(len(ep_tp_list[t_i][1])):\n","  #   plt.axhline(ep_tp_list[t_i][1][sub_i], linestyle='-', xmin=0.75 + 0.05 * (sub_i + 1) , xmax=1, linewidth=3, color='lime')  # tp line axhline\n","    # plt.axhline(ep_tp_list[t_i][1], linestyle='-', xmin=0.9, xmax=1, linewidth=3)  # tp line axhline    \n","\n","  #         hedge ep & tp         #\n","  # h_i = h_trade_list[t_i][1]\n","  # if h_i is not None:\n","  #   plt.axvline(prev_plotsize + (h_i - i), linestyle='--')\n","  #   plt.axhline(h_ep_tp_list[t_i][0], linestyle='-', xmin=0.75, xmax=1, linewidth=3, color='magenta')  # ep line axhline\n","  #   plt.axhline(h_ep_tp_list[t_i][1], linestyle='-', xmin=0.85, xmax=1, linewidth=3, color='magenta')  # tp line axhline\n","\n","  \n","  #         check pr        #\n","  plt.title(\"%s ~ %s -> liqd : %.2f\\npr : %.2f\" % (i, j, nontp_liqd_list[t_i], nontp_pr_list[t_i]))\n","\n","  #           y lim         #\n","  plt.ylim(y_min, y_max)\n","\n","\n","  # #           macd          #\n","  # # plt.subplot(312)\n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for macd in macd_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[macd].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axhline(0, linestyle='--')\n","\n","  \n","  # #           trix          #  \n","  # # plt.subplot(313)\n","  # plt.subplot(gs[2])\n","  # alpha = 1\n","  # for trix in trix_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[trix].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axhline(0, linestyle='--')\n","\n","  \n","  #           fisher          #  \n","  # # plt.subplot(313)\n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for fisher in fisher_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[fisher].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axhline(0, linestyle='--')\n","  # plt.axhline(fisher_upper, linestyle='--')\n","  # plt.axhline(fisher_lower, linestyle='--')\n","\n","  #           stoch          #  \n","  # plt.subplot(313)\n","  plt.subplot(gs[1])\n","  alpha = 1\n","  for stoch in stoch_list:\n","    plt.step(np.arange(len(plot_df)), plot_df[stoch].values, 'g', alpha=alpha)\n","    # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","    alpha -= 0.2\n","  plt.axvline(prev_plotsize, linestyle='--')\n","  plt.axhline(50, linestyle='--')\n","  plt.axhline(stoch_upper, linestyle='--')\n","  plt.axhline(stoch_lower, linestyle='--')\n","\n","\n","\n","  # ---------------------- plot ---------------------- #\n","\n","  plt.show()\n","  # plt.draw()\n","  plt.close()\n","  print()\n","\n","  # break\n"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"-g7YY5BvMcLS"},"source":["### show detail values"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5TxQ3rDnKMa7","executionInfo":{"elapsed":255,"status":"ok","timestamp":1625228960601,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"},"user_tz":-540},"outputId":"422ac214-8c88-4f39-ec3a-7c823574f6da"},"source":["i, j = 27267, 27268\n","print(\"upper_ep.iloc[i] :\", upper_ep.iloc[i])\n","print(\"short_tp.iloc[j] :\", short_tp.iloc[j])"],"execution_count":null,"outputs":[{"name":"stdout","output_type":"stream","text":["upper_ep.iloc[i] : 2348.266954813089\n","short_tp.iloc[j] : 2205.609333246829\n"]}]},{"cell_type":"markdown","metadata":{"id":"7AIl6EBuZNOL"},"source":["## none plot off-color st"]},{"cell_type":"code","metadata":{"id":"yaVxrNGzZgrF"},"source":["prev_plotsize = 50\n","\n","for t_i, (i, j) in enumerate(trade_list):\n","  # print(i, j)\n","\n","  if not(i >= prev_plotsize):\n","    continue\n","\n","  # if pr_list[t_i] >= 1:\n","  #   continue\n","\n","  plot_df = res_df.iloc[i - prev_plotsize:j + 1, [0, 1, 2, 3, 5, 6, 8, 9, 11, 12, 14, 15, 16]]\n","\n","  #       replace st values with np.nan, using st trend     #\n","  st_trend_plot_df = res_df.iloc[i - prev_plotsize:j + 1, [7, 10, 13]]\n","  plot_df.iloc[:, [4]] = np.where(st_trend_plot_df.iloc[:, [0]] == 1, np.nan, plot_df.iloc[:, [4]])\n","  plot_df.iloc[:, [6]] = np.where(st_trend_plot_df.iloc[:, [1]] == 1, np.nan, plot_df.iloc[:, [6]])\n","  plot_df.iloc[:, [8]] = np.where(st_trend_plot_df.iloc[:, [2]] == 1, np.nan, plot_df.iloc[:, [8]])\n","  plot_df.iloc[:, [5]] = np.where(st_trend_plot_df.iloc[:, [0]] == -1, np.nan, plot_df.iloc[:, [5]])\n","  plot_df.iloc[:, [7]] = np.where(st_trend_plot_df.iloc[:, [1]] == -1, np.nan, plot_df.iloc[:, [7]])\n","  plot_df.iloc[:, [9]] = np.where(st_trend_plot_df.iloc[:, [2]] == -1, np.nan, plot_df.iloc[:, [9]])\n","\n","\n","  plot_upper_ep = upper_ep.iloc[i - prev_plotsize:j + 1]\n","  plot_lower_ep = lower_ep.iloc[i - prev_plotsize:j + 1]\n","\n","  fig = plt.figure(figsize=(8, 6))\n","  ax = fig.add_subplot(111)\n","\n","  # fig.show()\n","  # fig.canvas.draw()\n","\n","  temp_ohlc = plot_df.values[:, :4]\n","  index = np.arange(len(temp_ohlc))\n","  candle = np.hstack((np.reshape(index, (-1, 1)), temp_ohlc))\n","  mf.candlestick_ohlc(ax, candle, width=0.5, colorup='r', colordown='b')\n","\n","  # print(plot_df.values[:, 4:])\n","  plt.plot(plot_df.values[:, [4, 6, 8]], 'r', alpha=1)  # upper\n","  plt.plot(plot_df.values[:, [5, 7, 9]], 'b', alpha=1)  # lower\n","  plt.plot(plot_df.values[:, [10]], 'g', alpha=1)  # middle\n","\n","  plt.plot(plot_df.values[:, [11]], 'c*', alpha=1, markersize=5)  # sar mic\n","  plt.plot(plot_df.values[:, [12]], 'co', alpha=1, markersize=7)  # sar mac\n","\n","  plt.plot(plot_upper_ep.values, alpha=1, linestyle='--')  # ep\n","  plt.plot(plot_lower_ep.values, alpha=1, linestyle='--')  # ep\n","\n","  plt.axvline(prev_plotsize, linestyle='--')\n","\n","  plt.title(\"%s ~ %s -> %.5f\" % (i, j, pr_list[t_i]))\n","  plt.show()\n","  # plt.draw()\n","  plt.close()"],"execution_count":null,"outputs":[]}]}