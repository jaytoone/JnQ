{"cells":[{"cell_type":"code","execution_count":1,"metadata":{"id":"6rmQpzEGXfCw","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1646442424574,"user_tz":-540,"elapsed":4122,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"35001602-a070-4ec8-8ab2-5fc41a7b5863"},"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')\n","\n","import os, sys\n","\n","current_path = '/content/drive/My Drive/Colab Notebooks/JnQ/'\n","\n","os.chdir(current_path)\n","\n","strat_pkg = 'IDE'\n","\n","mpl_finance_path = '/content/drive/My Drive/Colab Notebooks/JnQ/mpl_finance'\n","\n","if mpl_finance_path not in sys.path:\n","\n","  try:\n","    sys.path.insert(0, '/content/drive/My Drive/Colab Notebooks/JnQ')\n","    sys.path.insert(0, '/content/drive/My Drive/Colab Notebooks/JnQ/{}'.format(strat_pkg))\n","    sys.path.insert(0, '/content/drive/My Drive/Colab Notebooks/JnQ/funcs')\n","    sys.path.insert(0, mpl_finance_path)\n","    \n","  except Exception as e:\n","    print(e)"]},{"cell_type":"markdown","metadata":{"id":"8uqYv5StTazo"},"source":["# requirements"]},{"cell_type":"code","execution_count":2,"metadata":{"id":"9qGt60DKTZmf","executionInfo":{"status":"ok","timestamp":1646442425308,"user_tz":-540,"elapsed":738,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}}},"outputs":[],"source":["# !pip install findiff\n","# import nvstrings, nvcategory, cudf\n","# import cuml\n","# import cudf\n","\n","import os\n","from funcs.funcs_idep import *\n","from funcs.funcs_duration_v2 import *\n","from funcs.funcs_plot_check import *\n","from funcs.funcs_pairing import *\n","# from funcs.funcs_ide import *\n","# from funcs.funcs_indicator_candlescore import *\n","from funcs.funcs_indicator import *\n","from funcs.funcs_trader import *\n","import logging\n","import importlib\n","\n","import mpl_finance as mf\n","import matplotlib.pyplot as plt\n","from matplotlib import gridspec\n","# from tqdm.notebook import tqdm\n","\n","import IPython\n","import IPython.display\n","\n","import numpy as np\n","# import jax.numpy as np\n","import pandas as pd\n","# import seaborn as sns\n","# import tensorflow as tf\n","\n","import pickle\n","import shutil\n","import json\n","from easydict import EasyDict\n","import copy\n","\n","import datetime\n","from datetime import datetime\n","import random\n","import time\n","# import warnings\n","\n","# warnings.simplefilter(\"ignore\", category=RuntimeWarning)\n","\n","np.seterr(invalid=\"ignore\")\n","np.set_printoptions(suppress=True)\n","np.set_printoptions(linewidth=2000) \n","\n","pd.set_option('mode.chained_assignment',  None)\n","\n","pd.set_option('display.max_rows', 500)\n","pd.set_option('display.max_columns', 500)\n","pd.set_option('display.width', 1000)"]},{"cell_type":"markdown","metadata":{"id":"Ic1mfmwWCIBu"},"source":["# makeset - with to_htf dataframes"]},{"cell_type":"markdown","metadata":{"id":"AUSBU7T8Suzi"},"source":["## sync_check_make"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"QmhLikYlSuzi"},"outputs":[],"source":["def sync_check_make(df):\n","\n","    make_itv_list = ['3T', '5T', '15T', '30T', 'H', '4H', 'D']\n","    offset_list = ['1h', '1h', '1h', '1h', '1h', '1h', '9h']\n","\n","    assert len(make_itv_list) == len(offset_list), \"length of itv & offset_list should be equal\"\n","        \n","    htf_df_list = [to_htf(df, itv_=itv_, offset=offset_) for itv_, offset_ in zip(make_itv_list, offset_list)]\n","\n","    df_3T, df_5T, df_15T, df_30T, df_H, df_4H, df_D = htf_df_list\n","\n","    for htf_df in htf_df_list:\n","      print(\"{} -> \".format(pd.infer_freq(htf_df.index)), htf_df.tail(1))\n","\n","    # --------------- normalize data --------------- #\n","    target_col = 'close'\n","    target_data = df[target_col].diff(15).to_numpy()\n","    norm_data(df, target_data, target_col)    \n","    print(\"normalize data phase done !\")\n","\n","    # --------------- lucid sar --------------- #\n","    # lucid_sar_v2(df)\n","    # lucid_sar_v2(df_3T)\n","    # df = df.join(to_lower_tf_v2(df, df_3T, [-2, -1]), how='inner')\n","    # lucid_sar_v2(df_5T)\n","    # df = df.join(to_lower_tf_v2(df, df_5T, [-2, -1]), how='inner')\n","    # lucid_sar_v2(df_15T)\n","    # df = df.join(to_lower_tf_v2(df, df_15T, [-2, -1]), how='inner')\n","    # lucid_sar_v2(df_30T)\n","    # df = df.join(to_lower_tf_v2(df, df_30T, [-2, -1]), how='inner')       \n","\n","    # print(\"sar phase done\")\n","\n","    # --------------- supertrend --------------- #\n","    # df = st_price_line(df, df_3T, '3m')\n","    # df = st_price_line(df, df_5T, '5m')\n","    # df = st_price_line(df, df_15T, '15m')\n","    # df = st_price_line(df, df_30T, '30m')\n","    # df = st_price_line(df, df_H, '1h')\n","    # df = st_price_line(df, df_4H, '4h')\n","\n","    # print(\"supertrend phase done\")\n","\n","    # --------------- rsi --------------- #  \n","    # df['rsi_1m'] = rsi(df, 14)    \n","    # df_5T['rsi_5m'] = rsi(df_5T, 14)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf_v2(df, df_5T, [-1]), columns=['rsi_5m']))\n","    \n","    # print(\"rsi phase done\")\n","\n","\n","    # --------------- cci --------------- #  \n","    # df['cci_1m'] = cci(df, 20)\n","\n","    # print(\"cci phase done\")\n","\n","\n","    # --------------- ema --------------- #      \n","    # df_5T['ema_5m'] = ema(df_5T['close'], 195)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf_v2(df, df_5T, [-1]), columns=['ema_5m']))\n","    \n","    # print(\"ema phase done\")\n","\n","\n","    # # --------------- dc --------------- #  \n","    # df = dc_line(df, None, '1m', dc_period=20)\n","    # df = dc_line(df, df_3T, '3m', dc_period=20)\n","    # df = dc_line(df, df_5T, '5m', dc_period=20)\n","    # df = dc_line(df, df_15T, '15m', dc_period=20)\n","    # df = dc_line(df, df_30T, '30m', dc_period=20)\n","    # df = dc_line(df, df_H, '1h', dc_period=20)\n","    # df = dc_line(df, df_4H, '4h', dc_period=20)\n","    # df = dc_line(df, df_D, '1d', dc_period=20)\n","\n","    # print(\"dc phase done\")\n","    \n","    # # --------------- bband --------------- #  \n","    # df = bb_width_v2(df, period, multiple)\n","\n","    # print(\"bband phase done\")\n","\n","    # --------------- cbline --------------- #    \n","    # df_3T['cloud_bline_3m'] = cloud_bline(df_3T, 26)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf_v2(df, df_3T, [-1]), columns=['cloud_bline_3m']))\n","    # df_5T['cloud_bline_5m'] = cloud_bline(df_5T, 26)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf_v2(df, df_5T, [-1]), columns=['cloud_bline_5m']))\n","    # df_15T['cloud_bline_15m'] = cloud_bline(df_15T, 26)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf_v2(df, df_15T, [-1]), columns=['cloud_bline_15m']))\n","    # df_30T['cloud_bline_30m'] = cloud_bline(df_30T, 26)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf_v2(df, df_30T, [-1]), columns=['cloud_bline_30m']))\n","    # df_H['cloud_bline_1h'] = cloud_bline(df_H, 26)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf_v2(df, df_H, [-1]), columns=['cloud_bline_1h']))\n","    # df_4H['cloud_bline_4h'] = cloud_bline(df_4H, 26)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf_v2(df, df_4H, [-1]), columns=['cloud_bline_4h']))\n","\n","    # print(\"cbline phase done\")\n","    \n","    \n","    # --------------- stochastic --------------- #\n","    # df['stoch_1m'] = stoch(df, 13, 3, 3)\n","\n","    # df_5T['stoch'] = stoch(df_5T, 13, 3, 3)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf_v2(df, df_5T, [-1], backing_i=-1), columns=['stoch_5m']))\n","\n","    # print(\"stoch phase done\")\n","\n","\n","    return df\n"]},{"cell_type":"markdown","metadata":{"id":"mEKyVbHWSuzi"},"source":["## make & save res_df (concat 생각하면, timeindex sync 맞춰야함)"]},{"cell_type":"markdown","metadata":{"id":"VdukVo5-Suzj"},"source":["### old (xlsx)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":11,"status":"error","timestamp":1636201718856,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"khKb9nhlSuzj","outputId":"02bf2c60-f298-4fe9-e6bb-78230ac1348c"},"outputs":[{"ename":"NameError","evalue":"ignored","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-5-ee034491b257>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     11\u001b[0m \u001b[0ma_day\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m3600\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0;36m24\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     12\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 13\u001b[0;31m \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mtqdm\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfile_list\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     14\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     15\u001b[0m   \u001b[0mkeys\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mfile_list\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'file_list' is not defined"]}],"source":["pd.set_option('display.max_rows', 500)\n","pd.set_option('display.max_columns', 500)\n","pd.set_option('display.width', 1000)\n","\n","\n","save_path = './candlestick_concated/res_df/'\n","\n","exist_list = os.listdir(save_path)\n","\n","\n","a_day = 3600 * 24\n","\n","for i in tqdm(range(len(file_list))):\n","\n","  keys = [file_list[i]]\n","\n","  # if 'neo'.upper() not in file_list[i]:\n","    # continue\n","\n","  # if '2021-04-30'.upper() not in file_list[i]:\n","  if '2021-07-01'.upper() not in file_list[i]:\n","  # if '2021-10-10'.upper() not in file_list[i]:\n","    continue\n","\n","\n","  for key in keys:      \n","\n","    # if 'eth'.upper() not in key:\n","    #   continue\n","\n","    excel_name = key.replace(\".xlsx\", \"_st1h_backi2.xlsx\")\n","    excel_path = save_path + excel_name\n","\n","    if excel_name in exist_list:\n","      print(excel_name, \"already exist !\")\n","      continue\n","    \n","    open_indexes = []\n","    \n","    df = pd.read_excel(date_path + key, index_col=0)\n","    second_df = pd.read_excel(date_path2 + key, index_col=0)\n","    third_df = pd.read_excel(date_path3 + key, index_col=0)\n","    fourth_df = pd.read_excel(date_path4 + key, index_col=0)\n","    fifth_df = pd.read_excel(date_path5 + key, index_col=0)\n","    \n","    print(df.index[[0, -1]])\n","    print(second_df.index[[0, -1]])\n","    print(third_df.index[[0, -1]])\n","    print(fourth_df.index[[0, -1]])\n","    print(fifth_df.index[[0, -1]])\n","\n","    open_indexes.append(df.index[0])\n","    open_indexes.append(second_df.index[0])\n","    open_indexes.append(third_df.index[0])\n","    open_indexes.append(fourth_df.index[0])\n","    open_indexes.append(fifth_df.index[0])\n","    \n","    try:\n","      #     Todo    #\n","      #      1. 1m 마지막 timeindex 의 date 기준, 08:59:59.999000 를 last timestamp 로 설정\n","      #      2. 시작 timestamp 는 모든 tf 의 가장 최근 시작 index,\n","      #       a. 1m 의 시작 timeindex 는 최소, htf 의 시작 timeindex 보다 interval 만큼 앞서야함\n","      #         i. 따라서 1m open_index, latest_open_index + 1d 를 하면 댐\n","      #           1. timestamp 으로 변환후 1day 를 더하고 datetime 으로 변환\n","      sixth_df = pd.read_excel(date_path6 + key, index_col=0)\n","      seventh_df = pd.read_excel(date_path7 + key, index_col=0)\n","\n","      print(sixth_df.index[[0, -1]])\n","      print(seventh_df.index[[0, -1]])\n","      print()\n","\n","      open_indexes.append(sixth_df.index[0])\n","      open_indexes.append(seventh_df.index[0])\n","\n","    except Exception as e:\n","      print(e)\n","\n","    latest_open_index = sorted(open_indexes)[-1]\n","    \n","    open_ts = datetime.timestamp(latest_open_index)\n","    latest_open_index_1m = datetime.fromtimestamp(open_ts + a_day)\n","\n","    #   str 로 만들어 접근하면 불가함  #\n","    end_index = pd.to_datetime(str(df.index[-1]).split(\" \")[0] + \" 08:59:59.999000\")\n","    # break\n","\n","    sliced_df = df.loc[latest_open_index_1m:end_index] # to_lower_tf 의 기준 ltf\n","    sliced_second_df = second_df.loc[latest_open_index:end_index]\n","    sliced_third_df = third_df.loc[latest_open_index:end_index]\n","    sliced_fourth_df = fourth_df.loc[latest_open_index:end_index]\n","    sliced_fifth_df = fifth_df.loc[latest_open_index:end_index]\n","\n","    print(\"sliced index\")\n","    print(sliced_df.index[[0, -1]])\n","    print(sliced_second_df.index[[0, -1]])\n","    print(sliced_third_df.index[[0, -1]])\n","    print(sliced_fourth_df.index[[0, -1]])\n","    print(sliced_fifth_df.index[[0, -1]])\n","\n","    try:\n","      sliced_sixth_df = sixth_df.loc[latest_open_index:end_index]\n","      sliced_seventh_df = seventh_df.loc[latest_open_index:end_index]\n","\n","      print(sliced_sixth_df.index[[0, -1]])\n","      print(sliced_seventh_df.index[[0, -1]])\n","\n","      res_df = sync_check(sliced_df, sliced_second_df, sliced_third_df, sliced_fourth_df, sliced_fifth_df, sliced_sixth_df, sliced_seventh_df)\n","    \n","    except:\n","      res_df = sync_check(sliced_df, sliced_second_df, sliced_third_df, sliced_fourth_df, sliced_fifth_df)\n","\n","\n","\n","    res_df.to_excel(excel_path)\n","    print(excel_name, \"saved succesfully !\")"]},{"cell_type":"markdown","metadata":{"id":"Bw5JibDKSuzj"},"source":["### xlsx to feather"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":355,"referenced_widgets":["be2b848dbcb14a079a2b7bd605af6435"]},"id":"VA-_gcA7Suzj","outputId":"f6f3b55d-ec2c-4b2c-d62e-3de7c0384dc4"},"outputs":[{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"be2b848dbcb14a079a2b7bd605af6435","version_major":2,"version_minor":0},"text/plain":["  0%|          | 0/156 [00:00<?, ?it/s]"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["DatetimeIndex(['2021-06-28 00:00:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:02:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:04:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:14:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:29:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-09-14 03:59:59.999000', '2021-11-15 14:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-03-10 20:59:59.999000', '2021-11-15 16:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","\n","xlsx converted to feather !\n","DatetimeIndex(['2021-06-28 00:00:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:02:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:04:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:14:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:29:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-09-14 03:59:59.999000', '2021-11-15 14:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-03-10 20:59:59.999000', '2021-11-15 16:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","\n","xlsx converted to feather !\n"]}],"source":["pd.set_option('display.max_rows', 500)\n","pd.set_option('display.max_columns', 500)\n","pd.set_option('display.width', 1000)\n","\n","\n","save_path = './candlestick_concated/res_df/'\n","\n","exist_list = os.listdir(save_path)\n","\n","\n","a_day = 3600 * 24\n","\n","for i in tqdm(range(len(file_list))):\n","\n","  keys = [file_list[i]]\n","\n","  # if 'neo'.upper() not in file_list[i]:\n","    # continue\n","\n","  # if '2021-04-30'.upper() not in file_list[i]:\n","  # if '2021-07-01'.upper() not in file_list[i]:\n","  if '2021-10-10'.upper() not in file_list[i]:\n","    continue\n","\n","\n","  for key in keys:      \n","\n","    # if 'eth'.upper() not in key:\n","    #   continue\n","\n","    feather_name = key.replace(\".xlsx\", \".ftr\")\n","    # feather_path = save_path + feather_name\n","\n","    if feather_name in exist_list:\n","      print(feather_name, \"already exist !\")\n","      continue\n","    \n","    open_indexes = []\n","    \n","    df = pd.read_excel(date_path + key, index_col=0)\n","    second_df = pd.read_excel(date_path2 + key, index_col=0)\n","    third_df = pd.read_excel(date_path3 + key, index_col=0)\n","    fourth_df = pd.read_excel(date_path4 + key, index_col=0)\n","    fifth_df = pd.read_excel(date_path5 + key, index_col=0)\n","    \n","    print(df.index[[0, -1]])\n","    print(second_df.index[[0, -1]])\n","    print(third_df.index[[0, -1]])\n","    print(fourth_df.index[[0, -1]])\n","    print(fifth_df.index[[0, -1]])\n","\n","    open_indexes.append(df.index[0])\n","    open_indexes.append(second_df.index[0])\n","    open_indexes.append(third_df.index[0])\n","    open_indexes.append(fourth_df.index[0])\n","    open_indexes.append(fifth_df.index[0])\n","    \n","    try:\n","      #     Todo    #\n","      #      1. 1m 마지막 timeindex 의 date 기준, 08:59:59.999000 를 last timestamp 로 설정\n","      #      2. 시작 timestamp 는 모든 tf 의 가장 최근 시작 index,\n","      #       a. 1m 의 시작 timeindex 는 최소, htf 의 시작 timeindex 보다 interval 만큼 앞서야함\n","      #         i. 따라서 1m open_index, latest_open_index + 1d 를 하면 댐\n","      #           1. timestamp 으로 변환후 1day 를 더하고 datetime 으로 변환\n","      sixth_df = pd.read_excel(date_path6 + key, index_col=0)\n","      seventh_df = pd.read_excel(date_path7 + key, index_col=0)\n","\n","      print(sixth_df.index[[0, -1]])\n","      print(seventh_df.index[[0, -1]])\n","      print()\n","\n","      open_indexes.append(sixth_df.index[0])\n","      open_indexes.append(seventh_df.index[0])\n","\n","    except Exception as e:\n","      print(e)\n","\n","\n","    df.reset_index().to_feather(date_path + feather_name, compression='lz4')\n","    second_df.reset_index().to_feather(date_path2 + feather_name, compression='lz4')\n","    third_df.reset_index().to_feather(date_path3 + feather_name, compression='lz4')\n","    fourth_df.reset_index().to_feather(date_path4 + feather_name, compression='lz4')\n","    fifth_df.reset_index().to_feather(date_path5 + feather_name, compression='lz4')\n","    sixth_df.reset_index().to_feather(date_path6 + feather_name, compression='lz4')\n","    seventh_df.reset_index().to_feather(date_path7 + feather_name, compression='lz4')\n","\n","    print(\"xlsx converted to feather !\")\n","    "]},{"cell_type":"markdown","metadata":{"id":"Pe0QpnORSuzk"},"source":["### add itv_name to ftr"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":223,"referenced_widgets":["e3225655da874b8d89cc8b2a381b3fb6"]},"executionInfo":{"elapsed":43664,"status":"ok","timestamp":1638246331122,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"M-gl30KxSuzk","outputId":"1cfcb580-8d25-4bd0-fdd0-213640779ce2"},"outputs":[{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"e3225655da874b8d89cc8b2a381b3fb6","version_major":2,"version_minor":0},"text/plain":["  0%|          | 0/175 [00:00<?, ?it/s]"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 BTCUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 BCHUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 XRPUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 EOSUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 LTCUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 ETCUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 LINKUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 XLMUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 ADAUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 ETHUSDT_1m.ftr\n"]}],"source":["save_path = './candlestick_concated/res_df/'\n","\n","# dir_path = \"bbdc3m_backi2\"\n","# date = '2021-10-10'\n","date = '2021-07-01'\n","\n","db_path = './candlestick_concated/database_bn/non_cum/%s/' % date\n","os.makedirs(os.path.join(db_path), exist_ok=True)\n","\n","# exist_list = os.listdir(os.path.join(save_path, dir_path))\n","# break\n","\n","\n","a_day = 3600 * 24\n","\n","for i in tqdm(range(len(file_list))):\n","\n","  keys = [file_list[i]]\n","\n","  # if 'neo'.upper() not in file_list[i]:\n","    # continue\n","\n","  if date not in file_list[i]:\n","    continue\n","\n","\n","  for key in keys:      \n","\n","    # if 'eth'.upper() not in key:\n","    #   continue\n","    # print(key)\n","    \n","    if \".ftr\" not in key:\n","      continue\n","        \n","    df = shutil.copy(date_path + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval))\n","    second_df = shutil.copy(date_path2 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval2))\n","    third_df = shutil.copy(date_path3 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval3))\n","    fourth_df = shutil.copy(date_path4 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval4))\n","    fifth_df = shutil.copy(date_path5 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval5))\n","    sixth_df = shutil.copy(date_path6 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval6))\n","    seventh_df = shutil.copy(date_path7 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval7))\n","\n","    print(\"copied to\" + db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval))\n"]},{"cell_type":"markdown","metadata":{"id":"4oZ1ohTtSuzk"},"source":["### feather ver. (database to res_df)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":448,"referenced_widgets":["15a8f265417c47d88bf5b1907353afa8","4f4c5fba8f1d4543a46d6dd7e658b7b3","2d4fae08e5364faf83b0bcdc8e6ece4c","0f94b5763ea344adbb20cf3517a25d2f","e5594180fccb4d2787579ee6034cd6ab","af7a8b3e0365404ea9de8bea08d1a4a6","4f9b787786494e79959bc49b6da4ff4d","06f4ecc65be347ac80deee1965545f27","f8462155d04e4c8da2e4c26f02213bb4","18817cdc20574020976bc2f2c6acc6b2","fefe35e08d734a20aa38986f42f27b13"]},"executionInfo":{"elapsed":239284,"status":"ok","timestamp":1642739615683,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"vgVHpnUsSuzk","outputId":"6224eedf-c127-4d18-f095-3a543cd3f1f8"},"outputs":[{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"15a8f265417c47d88bf5b1907353afa8","version_major":2,"version_minor":0},"text/plain":["  0%|          | 0/7 [00:00<?, ?it/s]"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["3T ->                          open     high      low    close\n","index                                                  \n","2022-01-10 15:18:00  3163.02  3164.29  3162.41  3164.28\n","5T ->                          open     high      low    close\n","index                                                  \n","2022-01-10 15:15:00  3160.51  3164.29  3159.01  3164.28\n","15T ->                          open     high      low    close\n","index                                                  \n","2022-01-10 15:15:00  3160.51  3164.29  3159.01  3164.28\n","30T ->                         open     high      low    close\n","index                                                 \n","2022-01-10 15:00:00  3171.7  3173.11  3156.02  3164.28\n","H ->                         open     high      low    close\n","index                                                 \n","2022-01-10 15:00:00  3171.7  3173.11  3156.02  3164.28\n","4H ->                         open     high      low    close\n","index                                                 \n","2022-01-10 13:00:00  3153.0  3179.16  3149.95  3164.28\n","D ->                          open     high      low    close\n","index                                                  \n","2022-01-10 09:00:00  3149.99  3179.16  3125.88  3164.28\n","supertrend phase done\n","./candlestick_concated/res_df/st3m_backi2/noncat/cum/2022-01-10/2022-01-10 ETHUSDT.ftr saved succesfully !\n"]}],"source":["# db_path = './candlestick_concated/database_ub/' # upbit\n","db_path = './candlestick_concated/database_bn/'   # binance\n","\n","save_path = './candlestick_concated/res_df/'\n","\n","save_dir_path = \"bb1d_backi2\"\n","date = '2022-02-17'\n","\n","# concat_path = 'noncat' # 새로운 cols 를 기존 cum/concat 에 붙이려는 경우\n","concat_path = 'concat'\n","cum_path = \"cum\"\n","# cum_path = \"non_cum\"  # non_cum 으로 진행하는 경우, row concat 용도이기 때문에 noncat -> concat 으로 변경 (base cols 를 모두 담고 있음)\n","\n","load_path = os.path.join(db_path, cum_path, date)\n","save_path = os.path.join(save_path, save_dir_path, concat_path, cum_path, date)\n","\n","os.makedirs(save_path, exist_ok=True)\n","\n","file_list = os.listdir(load_path)\n","exist_list = os.listdir(save_path)\n","# break\n","\n","a_day = 3600 * 24\n","\n","for i in tqdm(range(len(file_list))):\n","\n","  keys = [file_list[i]]\n","\n","  # if 'neo'.upper() not in file_list[i]:\n","    # continue\n","\n","  if date not in file_list[i]:\n","    continue\n","\n","\n","  for key in keys:      \n","\n","    # if 'eth'.upper() not in key:\n","    #   continue\n","    # print(key)\n","    \n","    if \".ftr\" not in key:\n","      continue\n","\n","    if \"_1m\" not in key:\n","      continue\n","\n","    # feather_name = key.replace(\".ftr\", \"_%.ftr\" % save_dir_path)\n","    feather_name = key.replace(\"_1m\", \"\")\n","    feather_path = os.path.join(save_path, feather_name)\n","\n","    if feather_name in exist_list:\n","      print(feather_name, \"already exist !\")\n","      continue\n","    \n","    df = pd.read_feather(os.path.join(load_path, key), columns=None, use_threads=True).set_index(\"index\")\n","\n","    res_df = sync_check_make(df)\n","\n","    res_df.reset_index().to_feather(feather_path, compression='lz4')\n","    print(feather_path, \"saved succesfully !\")"]},{"cell_type":"markdown","source":["#### just add col to loaded df"],"metadata":{"id":"YxCPUzoyidwH"}},{"cell_type":"code","source":["# heikinashi_v2(res_df_)\n","res_df_ = sync_check_make(res_df_)"],"metadata":{"id":"odqVwQHpYo1M","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1646391422965,"user_tz":-540,"elapsed":976,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"31c0e1c0-61b3-4234-d82d-1b82012568bd"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["3T ->                          open     high      low    close\n","index                                                  \n","2022-02-17 10:27:00  3148.85  3150.08  3146.38  3146.76\n","5T ->                          open     high      low    close\n","index                                                  \n","2022-02-17 10:25:00  3146.85  3150.08  3145.44  3146.76\n","15T ->                          open    high      low    close\n","index                                                 \n","2022-02-17 10:15:00  3143.99  3151.0  3139.14  3146.76\n","30T ->                         open     high      low    close\n","index                                                 \n","2022-02-17 10:00:00  3148.8  3158.68  3139.14  3146.76\n","H ->                         open     high      low    close\n","index                                                 \n","2022-02-17 10:00:00  3148.8  3158.68  3139.14  3146.76\n","4H ->                         open     high     low    close\n","index                                                \n","2022-02-17 09:00:00  3121.8  3158.68  3120.0  3146.76\n","D ->                         open     high     low    close\n","index                                                \n","2022-02-17 09:00:00  3121.8  3158.68  3120.0  3146.76\n","normalize data phase done !\n"]}]},{"cell_type":"code","source":["res_df_.tail().iloc[:, -4:]"],"metadata":{"id":"3SKglsQCj5_x"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# ------------ save current res_df ------------ #\n","ftr_full_path = os.path.join(ftr_path, key)\n","res_df_.reset_index().to_feather(ftr_full_path, compression='lz4')  # key 잘 확인하고 저장\n","print(ftr_full_path, 'saved !')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"XrgJPQRuisCa","executionInfo":{"status":"ok","timestamp":1646391537773,"user_tz":-540,"elapsed":2993,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"738d9a55-3960-47b2-8e37-13c96d008bda"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["./candlestick_concated/res_df/bb1d_backi2/concat/cum/2022-02-17/2022-02-17 ETHUSDT.ftr saved !\n"]}]},{"cell_type":"markdown","metadata":{"id":"E0n53hflJbnp"},"source":["### htf candle check"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":489,"status":"ok","timestamp":1642148504926,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"6xW0yugCWvGz","outputId":"58106ff9-9709-4a62-bca2-1f6795d13322"},"outputs":[{"name":"stdout","output_type":"stream","text":["itv_ : 3T\n","                        open     high      low    close\n","index                                                  \n","2022-01-10 15:06:00  3169.97  3170.22  3159.51  3161.22\n","2022-01-10 15:09:00  3161.22  3163.98  3161.22  3163.82\n","2022-01-10 15:12:00  3163.82  3163.83  3156.02  3160.49\n","2022-01-10 15:15:00  3160.51  3164.29  3159.01  3162.93\n","2022-01-10 15:18:00  3163.02  3164.29  3162.41  3164.28\n","                            open     high      low    close    volume\n","index                                                                \n","2022-01-10 15:08:59.999  3169.97  3170.22  3159.51  3161.22  4241.449\n","2022-01-10 15:11:59.999  3161.22  3163.98  3161.22  3163.82  1143.874\n","2022-01-10 15:14:59.999  3163.82  3163.83  3156.02  3160.49  2135.292\n","2022-01-10 15:17:59.999  3160.51  3164.29  3159.01  3162.93  1011.598\n","2022-01-10 15:20:59.999  3163.02  3164.29  3162.41  3163.82   466.868\n"]}],"source":["itv_list = ['3T', '5T', '15T', '30T', '1H', '4H']\n","comp_df_list = [second_df, third_df, fourth_df, fifth_df, sixth_df, seventh_df]\n","offset_list = ['1h', '2min', '2min', '2min', '2min', '2min']\n","# itv_list = ['4H']\n","# comp_df_list = [seventh_df]\n","\n","slice_len = 100\n","for itv_, comp_df_, offset in zip(itv_list, comp_df_list, offset_list):\n","\n","  print(\"itv_ :\", itv_)\n","\n","  # df = h_candle_v2(df, '3T')\n","  # end_ts = \n","  h_res_df = df.resample(itv_, offset=offset).agg({\n","          'open': 'first',\n","          'high': 'max',\n","          'low': 'min',\n","          'close': 'last'\n","      })\n","\n","  #   앞은 길이가 다르고, 뒤에서부터 잘라서 비교    #\n","  #   last_row 빼고는 동일, 4h 제외\n","  # print(df.tail())\n","  print(h_res_df.tail())\n","  print(comp_df_.tail())\n","  # # print(h_res_df.head())\n","  # # print(second_df.head())\n","\n","  # print(len(h_res_df))\n","  # print(len(second_df))\n","\n","  # print(h_res_df.values[-slice_len:])\n","  # print(second_df.iloc[:, :4].values[-slice_len:])\n","  # print(np.argwhere(h_res_df.values[-slice_len:] != comp_df_.iloc[:, :4].values[-slice_len:]))\n","  # print()\n","  break"]},{"cell_type":"markdown","metadata":{"id":"jTN3M842Suzl"},"source":["## concat & save new res_df"]},{"cell_type":"markdown","metadata":{"id":"MlFkpO1MSuzl"},"source":["### old (xlsx)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"U-3QkfbFSuzl"},"outputs":[],"source":["save_path = './candlestick_concated/res_df/'\n","\n","dict_name = \"2021-07-01 ETHUSDT_bb15m_backi2_res_dfs.pkl\"\n","\n","#     load with pickle    #\n","with open(save_path + dict_name, 'rb') as f:\n","  saved_res_df_dict = pickle.load(f)\n","\n","print(dict_name, \"loaded !\")\n","res_df_files = os.listdir(save_path)\n","res_df_files.reverse()\n","\n","print(res_df_files)\n","\n","res_df_dict = {}\n","\n","base_postfix = '_bb15m_backi2.xlsx'\n","new_postfix = '_st1h_backi2.xlsx'\n","\n","max_cnt = 10\n","sample_cnt = max_cnt\n","\n","for k_i, key in enumerate(res_df_files):\n","\n","  if '2021-07-01'.upper() not in key:\n","  # if '2021-10-10'.upper() not in key:\n","    continue\n","\n","  # if \"link\".upper() not in key:\n","  # if \"btc\".upper() not in key:\n","  #   continue\n","\n","  if new_postfix not in key:\n","    continue\n","\n","  # if key in \n","\n","  if sample_cnt == max_cnt:\n","    dict_name = \"%s_res_dfs.pkl\" % key.split(\".\")[0]\n","    print(\"dict_name :\", dict_name)\n","\n","  base_df = saved_res_df_dict[key.replace(new_postfix, base_postfix)]\n","  # base_df = pd.read_excel(save_path + key.replace(new_postfix, base_postfix), index_col=0)  \n","  res_df = pd.read_excel(save_path + key, index_col=0)  \n","\n","  # print(base_df.head())\n","  # print(res_df.head())\n","  # break\n","\n","  new_res_df = pd.concat([base_df, res_df], axis=1) # df_tot.drop_duplicates()\n","  # new_res_df.head()\n","\n","  droped_new_res_df = new_res_df.loc[:,~new_res_df.columns.duplicated(keep='last')]\n","  droped_new_res_df.head()\n","  # break\n","\n","  # res_df_dict[key] = res_df\n","  res_df_dict[key] = droped_new_res_df\n","  print(key, \"saved to dict !\")\n","\n","  #     save with pickle    #\n","  with open(save_path + dict_name, 'wb') as f:\n","    pickle.dump(res_df_dict, f)\n","\n","  sample_cnt -= 1\n","\n","  if sample_cnt <= 0:\n","    break\n"]},{"cell_type":"markdown","metadata":{"id":"t1E_eAyPSuzm"},"source":["### new col to latest feather (1m_indi. only)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"xyI5NrM7Suzm"},"outputs":[],"source":["save_path = './candlestick_concated/res_df/'\n","\n","cum_dir = \"cum\"\n","\n","new_dir_path = \"rsi_backi2\"\n","base_dir_path = \"bbdc3m_backi2\"\n","\n","new_date = '2021-11-17'\n","\n","\n","\n","#     load ftr list    #\n","base_save_path = os.path.join(save_path, base_dir_path, \"concat/cum\", new_date)\n","new_save_path = base_save_path.replace(base_dir_path, new_dir_path)\n","\n","#     save to (new) cum dir    #\n","#      1. if dir. not exists, makedir\n","os.makedirs(new_save_path, exist_ok=True)\n","\n","ftr_list = [s for s in os.listdir(base_save_path) if \"ftr\" in s]\n","print(ftr_list)\n","# break\n","\n","\n","max_cnt = 10\n","sample_cnt = max_cnt\n","\n","for key in ftr_list:\n","\n","  if new_date not in key:\n","    continue\n","\n","\n","  #       read from base postfix's directory    #\n","  base_df = pd.read_feather(os.path.join(base_save_path, key), columns=None, use_threads=True).set_index(\"index\")\n","  # print(base_df.head())\n","  # print(res_df.head())\n","  # break\n","\n","  droped_new_res_df = sync_check(base_df)\n","\n","  # new_res_df = pd.concat([base_df, res_df], axis=0) # df_tot.drop_duplicates()\n","  # # new_res_df.head()\n","\n","  # intersection_cols = res_df.columns.intersection(base_df.columns)\n","\n","  # droped_new_res_df = new_res_df.loc[~new_res_df.index.duplicated(keep='last'),intersection_cols]\n","  # droped_new_res_df = new_res_df.loc[:,~new_res_df.columns.duplicated(keep='last')]\n","  # droped_new_res_df = new_res_df.loc[:,~new_res_df.index.duplicated(keep='last')]\n","  # droped_new_res_df.head()\n","  # break\n","\n","  droped_new_res_df.reset_index().to_feather(os.path.join(new_save_path, key), compression='lz4')\n","\n","  print(os.path.join(new_save_path, key), \"saved !\")\n","\n","  # sample_cnt -= 1\n","\n","  # if sample_cnt <= 0:\n","  #   break\n"]},{"cell_type":"markdown","metadata":{"id":"nUs4fjVHSuzl"},"source":["### feather ver. (col concat)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":2001,"status":"ok","timestamp":1642739652513,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"6cu-Y82iSuzl","outputId":"273507b8-0d33-48b5-d9c5-00547688ef73"},"outputs":[{"name":"stdout","output_type":"stream","text":["['2022-01-10 ETHUSDT.ftr']\n","./candlestick_concated/res_df/st3m_backi2/concat/cum/2022-01-10/2022-01-10 ETHUSDT.ftr saved !\n"]}],"source":["new_dir_path = \"st3m_backi2\"\n","base_dir_path = \"bb1d_backi2\"\n","\n","# new_date = \"2021-11-17\"\n","new_date = \"2022-01-10\"\n","\n","#     save to (new) concat dir    #\n","#      1. if dir. not exists, makedir\n","save_path = './candlestick_concated/res_df/'\n","save_path = os.path.join(save_path, new_dir_path, \"concat/cum\", new_date)   \n","# save_path = os.path.join(save_path, new_dir_path, \"concat/non_cum\", new_date)   # row col 하려면 concat 맞음, noncum 사용\n","os.makedirs(save_path, exist_ok=True)\n","\n","\n","#     load ftr list    #\n","# ftr_list = [s for s in os.listdir(os.path.join(save_path, new_dir_path)) if \"ftr\" in s]\n","\n","noncat_path = save_path.replace(\"concat/\", \"noncat/\")\n","ftr_list = [s for s in os.listdir(noncat_path) if \"ftr\" in s]\n","print(ftr_list)\n","# break\n","\n","\n","for key in ftr_list:\n","\n","  if new_date not in key:\n","    continue\n","\n","  try:\n","\n","    #       read from base postfix's directory    #\n","    base_df = pd.read_feather(os.path.join(save_path.replace(new_dir_path, base_dir_path), key), columns=None, use_threads=True).set_index(\"index\")\n","    res_df = pd.read_feather(os.path.join(noncat_path, key), columns=None, use_threads=True).set_index(\"index\")\n","\n","    # print(base_df.head())\n","    # print(res_df.head())\n","    # break\n","\n","    new_res_df = pd.concat([base_df, res_df], axis=1) # df_tot.drop_duplicates()\n","    # new_res_df.head()\n","\n","    droped_new_res_df = new_res_df.loc[:,~new_res_df.columns.duplicated(keep='last')]\n","    # droped_new_res_df.head()\n","    # break\n","\n","    droped_new_res_df.reset_index().to_feather(os.path.join(save_path, key), compression='lz4')\n","\n","    # res_df_dict[key] = res_df\n","    # res_df_dict[key] = droped_new_res_df\n","    print(os.path.join(save_path, key), \"saved !\")\n","  \n","  except Exception as e:\n","    print(\"error occured ! :\", e)\n","  \n","\n","  # sample_cnt -= 1\n","\n","  # if sample_cnt <= 0:\n","  #   break\n"]},{"cell_type":"markdown","metadata":{"id":"WVAKq3i8Suzm"},"source":["### feather ver. (row concat) , database cum 도 호환가능"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":7893,"status":"ok","timestamp":1645188189702,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"XG2p9OhhSuzm","outputId":"e67874ba-0710-4f38-966f-5ea7d42403cb"},"outputs":[{"output_type":"stream","name":"stdout","text":["['2022-02-17 ETHUSDT_1m.ftr']\n","                            open     high     low    close  volume\n","index                                                             \n","2019-11-27 16:45:59.999   146.00   146.00   146.0   146.00   0.010\n","2022-02-17 10:29:59.999  3146.86  3147.22  3146.4  3146.76  26.727\n","continuity checked !\n","./candlestick_concated/database_bn/cum/2022-02-17/2022-02-17 ETHUSDT_1m.ftr saved !\n"]}],"source":["save_path = './candlestick_concated/res_df/'        # cols 추가된 cum db 에 new_row's cols 기준으로 합치는 경우\n","save_path = './candlestick_concated/database_bn/'   # ohlcv cum db 만들 경우\n","\n","base_date = '2022-01-10'\n","new_date = '2022-02-17'\n","\n","#     load ftr list    #\n","if \"database\" in save_path:\n","  base_dir_path = \"\"\n","  new_dir_path = \"\"\n","  concat_dir = \"\"\n","else:\n","  base_dir_path = \"sar_backi2\"\n","  new_dir_path = \"bb4h_backi2\"  # dir_path 가 base / new 서로 달라질 수 있어서 분할함\n","  concat_dir = \"concat\"\n","\n","base_date_path = os.path.join(save_path, base_dir_path, concat_dir, \"cum\", base_date)      # 기존 cum db 와 new_date db 를 cum 진행\n","# base_date_path = os.path.join(save_path, base_dir_path, concat_dir, \"non_cum\", base_date)    # non_cum db 와 new_date db 를 cum 진행\n","\n","# new_date_path = os.path.join(save_path, new_dir_path, concat_dir, \"cum\", new_date)      # 상황별로 직접 선택해야할 듯\n","new_date_path = os.path.join(save_path, new_dir_path, concat_dir, \"non_cum\", new_date)\n","\n","\n","\n","#     save to (new) concat dir    #\n","#      1. if dir. not exists, makedir\n","save_path = new_date_path.replace(\"non_cum\", \"cum\")   # non_cum 아니여도 무관\n","os.makedirs(save_path, exist_ok=True)   # noncat / concat 두가지 경우 존재가능할 것\n","# os.makedirs(os.path.join(save_path, dir_path, \"noncat/cum\", new_date), exist_ok=True)\n","\n","\n","ftr_list = [s for s in os.listdir(new_date_path) if \"ftr\" in s]\n","exist_list = os.listdir(save_path)\n","print(ftr_list)\n","# break\n","\n","\n","for key in ftr_list:\n","\n","  if new_date not in key:   # date rejection\n","    continue\n","  if '1m' not in key:  # itv rejection\n","    continue\n","\n","  # if key in exist_list:\n","  #   print(key, \"already exist !\")\n","  #   continue\n","\n","  #       read from base postfix's directory    #\n","  base_df = pd.read_feather(os.path.join(base_date_path, key.replace(new_date, base_date)), columns=None, use_threads=True).set_index(\"index\")   # key 에 new_date 담겨있음\n","  res_df = pd.read_feather(os.path.join(new_date_path, key), columns=None, use_threads=True).set_index(\"index\")\n","\n","  # print(base_df.head())\n","  # print(res_df.head())\n","  # break\n","\n","  new_res_df = pd.concat([base_df, res_df], axis=0) # df_tot.drop_duplicates()\n","  # new_res_df.head()\n","\n","  intersection_cols = res_df.columns.intersection(base_df.columns)\n","\n","  droped_new_res_df = new_res_df.loc[~new_res_df.index.duplicated(keep='last'),intersection_cols]\n","  # droped_new_res_df = new_res_df.loc[:,~new_res_df.columns.duplicated(keep='last')]\n","  # droped_new_res_df = new_res_df.loc[:,~new_res_df.index.duplicated(keep='last')]\n","  # droped_new_res_df.head()\n","  # break  \n","  \n","  print(droped_new_res_df.iloc[[0, -1]])  \n","\n","  # ------------- verify df continuity directly itv by itv ------------- #\n","  true_continue = True\n","  if \"_\" in key:\n","\n","    interval = key.split(\".\")[0].split(\"_\")[-1] \n","    itv_num = to_itvnum(interval)\n","\n","    # verified_df = consecutive_df(droped_new_res_df, to_itvnum(interval))\n","    # verified_df.reset_index().to_feather(os.path.join(save_path, key), compression='lz4')\n","\n","    # res_df_dict[key] = res_df\n","    # res_df_dict[key] = droped_new_res_df  \n","\n","    np_idx_ts = np.array(list(map(lambda x: datetime.timestamp(x), droped_new_res_df.index)))\n","    ideal_ts_gap = 60 * itv_num\n","\n","    for ts_i in range(len(np_idx_ts)):\n","      \n","      if ts_i != 0:\n","        ts_gap = np_idx_ts[ts_i] - np_idx_ts[ts_i - 1]\n","\n","        if ts_gap > ideal_ts_gap or ts_gap < ideal_ts_gap:\n","        # if ts_gap == ideal_ts_gap:\n","          print(droped_new_res_df.index[ts_i - 1])\n","          print(droped_new_res_df.index[ts_i])\n","          # print(ts_gap)\n","          print(\"------------------ unideal ts_gap ------------------\")\n","          true_continue = False\n","\n","    print(\"continuity checked !\")\n","\n","  if true_continue:\n","    droped_new_res_df.reset_index().to_feather(os.path.join(save_path, key), compression='lz4')\n","\n","  print(os.path.join(save_path, key), \"saved !\")\n","  \n"]},{"cell_type":"markdown","metadata":{"id":"L7l5CTJfSuzn"},"source":["### check continuity"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"nGzMGyC3Suzn","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1643987442996,"user_tz":-540,"elapsed":5408,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"4fface63-62d9-4e2a-e22d-bdd26f428e0e"},"outputs":[{"output_type":"stream","name":"stdout","text":["                             open    high       low     close   volume\n","index                                                                 \n","2020-09-14 16:00:59.999    3.2002    4.91    3.2002    3.2745  11567.0\n","2022-02-04 23:57:59.999  103.7500  103.75  103.6000  103.6000   6427.0\n","[1.60009926e+09 1.60009932e+09 1.60009938e+09 1.60009944e+09\n"," 1.60009950e+09 1.60009956e+09 1.60009962e+09 1.60009968e+09\n"," 1.60009974e+09 1.60009980e+09]\n"]}],"source":["# print(droped_new_res_df.columns)\n","\n","print(droped_new_res_df.iloc[[0, -1]])\n","\n","np_idx_ts = np.array(list(map(lambda x: datetime.timestamp(x), droped_new_res_df.index)))\n","\n","print(np_idx_ts[:10])\n","for ts_i in range(len(np_idx_ts)):\n","  \n","  if ts_i != 0:\n","    ts_gap = np_idx_ts[ts_i] - np_idx_ts[ts_i - 1]\n","\n","    if ts_gap > 60 or ts_gap < 60:\n","\n","      print(\"invalid ts_gap found !\")\n","    # if ts_gap == 60:\n","      print(droped_new_res_df.index[ts_i - 1])\n","      print(droped_new_res_df.index[ts_i])\n","      # print(ts_gap)\n","      print()\n"]},{"cell_type":"markdown","metadata":{"id":"x_XGJqBi8Jex"},"source":["### check length of front missing value + middle_data non_missing validity"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":311,"status":"ok","timestamp":1641887318959,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"yRNwqVeAu8X8","outputId":"fb236bde-4527-4bc7-eac4-4bee42532c5a"},"outputs":[{"name":"stdout","output_type":"stream","text":["2.167361111111111\n","38\n"]}],"source":["#       1. new_date 의 시작 timeidx 와 base_date end timeidx 의 최소 days' gap     #\n","#       2. new_date 의 시작 부분 indi. value 는 np.nan 으로 채워질 거기 때문에 계산해야함    #\n","\n","df_count = droped_new_res_df.count()\n","len_missing = df_count.max() - df_count.min()\n","print(len_missing / 1440)\n","\n","#       3. \n","missing_sliced_df = droped_new_res_df.iloc[len_missing:]\n","df_count2 = missing_sliced_df.count()\n","# print(df_count2)\n","print((df_count2.max() - df_count2.min()))    # this value should be zero !\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"AY7E2_hTBsyM"},"outputs":[],"source":["# df_count2.index[df_count2.argmin()]\n","# missing_sliced_df.head(5)\n","\n","stay_missed = np.sum(pd.isnull(missing_sliced_df), axis=0)\n","print(stay_missed)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"p9yqewOw9g33"},"outputs":[],"source":["stay_missed_cols = stay_missed[stay_missed != 0].index\n","\n","for sm_col in stay_missed_cols:\n","  \n","  row_idx = np.argwhere(pd.isnull(missing_sliced_df[sm_col].values))\n","\n","  plt.figure(figsize=(3,3))\n","  plt.plot(row_idx)\n","  plt.ylim(0, len(missing_sliced_df))\n","  plt.title(sm_col)\n","\n","  plt.show()\n"]},{"cell_type":"markdown","source":["## legacy"],"metadata":{"id":"MSUY4nnku3s9"}},{"cell_type":"markdown","source":["### mv files"],"metadata":{"id":"epgS5Dksu-HX"}},{"cell_type":"code","source":["df_path = './candlestick_concated/survey_df_v2'\n","files_ = os.listdir(df_path)"],"metadata":{"id":"aJcVpEdrslA5"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["dirs = [file_ for file_ in files_ if not file_.endswith('.ftr')]\n","files = [file_ for file_ in files_ if file_.endswith('.ftr')]"],"metadata":{"id":"cEKyEYkotFDy"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["dirs"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"IgM79tcxtPVZ","executionInfo":{"status":"ok","timestamp":1644111921194,"user_tz":-540,"elapsed":4,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"84305b35-eb52-49fc-d5fd-fdbc64cc8679"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['2022-01-10 ETHUSDT', '2022-01-10 ETHUSDT_all', '2022-02-04 SOLUSDT']"]},"metadata":{},"execution_count":6}]},{"cell_type":"code","source":["def move_fn(dir_, file_):\n","  src_path = os.path.join(df_path, file_)\n","  dst_path = os.path.join(df_path, dir_, file_)\n","  shutil.move(src_path, dst_path)\n","  print(\"moved to {}\".format(dst_path))\n","\n","_ = [move_fn('2022-01-10 ETHUSDT_all', file_) for file_ in files if 'eth'.upper() in file_]\n","# sols\n"],"metadata":{"id":"M767iRtwtRQP"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Ci_jUnNTZbm9"},"source":["### load data (old)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":22503,"status":"ok","timestamp":1638246127510,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"_bXyS2yrZYC6","outputId":"b24a8a66-48b1-42b5-aa79-63f5a8542bac"},"outputs":[{"name":"stdout","output_type":"stream","text":["['2021-05-30 ETHUSDT.xlsx', '2021-04-30 ETHUSDT.xlsx', '2021-07-03 ETHUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-10-10 ETCUSDT.xlsx', '2021-10-10 BTCUSDT.xlsx', '2021-10-10 ETHUSDT.xlsx', '2021-10-10 ADAUSDT.xlsx', '2021-10-10 XLMUSDT.xlsx', '2021-10-10 LINKUSDT.xlsx', '2021-10-10 LTCUSDT.xlsx', '2021-10-10 EOSUSDT.xlsx', '2021-10-10 XRPUSDT.xlsx', '2021-10-10 BCHUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr', '2021-10-10 ETCUSDT.ftr', '2021-10-10 BTCUSDT.ftr', '2021-10-10 ETHUSDT.ftr', '2021-10-10 ADAUSDT.ftr', '2021-10-10 XLMUSDT.ftr', '2021-10-10 LINKUSDT.ftr', '2021-10-10 LTCUSDT.ftr', '2021-10-10 EOSUSDT.ftr', '2021-10-10 XRPUSDT.ftr', '2021-10-10 BCHUSDT.ftr', '2021-11-16 EOSUSDT.ftr', '2021-11-16 LTCUSDT.ftr', '2021-11-16 LINKUSDT.ftr', '2021-11-16 XLMUSDT.ftr', '2021-11-16 ADAUSDT.ftr', '2021-11-16 ETCUSDT.ftr', '2021-11-16 BTCUSDT.ftr', '2021-11-16 ETHUSDT.ftr', '2021-11-16 BCHUSDT.ftr', '2021-11-16 XRPUSDT.ftr']\n","['2021-05-30 ETHUSDT.xlsx', '2021-04-30 ETHUSDT.xlsx', '2021-07-03 ETHUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-10-10 ETCUSDT.xlsx', '2021-10-10 BTCUSDT.xlsx', '2021-10-10 ETHUSDT.xlsx', '2021-10-10 ADAUSDT.xlsx', '2021-10-10 XLMUSDT.xlsx', '2021-10-10 LINKUSDT.xlsx', '2021-10-10 LTCUSDT.xlsx', '2021-10-10 EOSUSDT.xlsx', '2021-10-10 XRPUSDT.xlsx', '2021-10-10 BCHUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr', '2021-10-10 ETCUSDT.ftr', '2021-10-10 BTCUSDT.ftr', '2021-10-10 ETHUSDT.ftr', '2021-10-10 ADAUSDT.ftr', '2021-10-10 XLMUSDT.ftr', '2021-10-10 LINKUSDT.ftr', '2021-10-10 LTCUSDT.ftr', '2021-10-10 EOSUSDT.ftr', '2021-10-10 XRPUSDT.ftr', '2021-10-10 BCHUSDT.ftr', '2021-11-16 LINKUSDT.ftr', '2021-11-16 ADAUSDT.ftr', '2021-11-16 ETCUSDT.ftr', '2021-11-16 XLMUSDT.ftr', '2021-11-16 XRPUSDT.ftr', '2021-11-16 EOSUSDT.ftr', '2021-11-16 BTCUSDT.ftr', '2021-11-16 BCHUSDT.ftr', '2021-11-16 ETHUSDT.ftr', '2021-11-16 LTCUSDT.ftr']\n","['2021-05-30 ETHUSDT.xlsx', '2021-04-30 ETHUSDT.xlsx', '2021-07-03 ETHUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-10-10 ETCUSDT.xlsx', '2021-10-10 BTCUSDT.xlsx', '2021-10-10 ETHUSDT.xlsx', '2021-10-10 ADAUSDT.xlsx', '2021-10-10 XLMUSDT.xlsx', '2021-10-10 LINKUSDT.xlsx', '2021-10-10 LTCUSDT.xlsx', '2021-10-10 EOSUSDT.xlsx', '2021-10-10 XRPUSDT.xlsx', '2021-10-10 BCHUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr', '2021-10-10 ETCUSDT.ftr', '2021-10-10 BTCUSDT.ftr', '2021-10-10 ETHUSDT.ftr', '2021-10-10 ADAUSDT.ftr', '2021-10-10 XLMUSDT.ftr', '2021-10-10 LINKUSDT.ftr', '2021-10-10 LTCUSDT.ftr', '2021-10-10 EOSUSDT.ftr', '2021-10-10 XRPUSDT.ftr', '2021-10-10 BCHUSDT.ftr', '2021-11-16 LINKUSDT.ftr', '2021-11-16 XLMUSDT.ftr', '2021-11-16 ADAUSDT.ftr', '2021-11-16 ETCUSDT.ftr', '2021-11-16 BTCUSDT.ftr', '2021-11-16 BCHUSDT.ftr', '2021-11-16 XRPUSDT.ftr', '2021-11-16 LTCUSDT.ftr', '2021-11-16 EOSUSDT.ftr', '2021-11-16 ETHUSDT.ftr']\n","['2021-07-03 ETHUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-10-10 ETCUSDT.xlsx', '2021-10-10 BTCUSDT.xlsx', '2021-10-10 ETHUSDT.xlsx', '2021-10-10 ADAUSDT.xlsx', '2021-10-10 XLMUSDT.xlsx', '2021-10-10 LINKUSDT.xlsx', '2021-10-10 LTCUSDT.xlsx', '2021-10-10 EOSUSDT.xlsx', '2021-10-10 XRPUSDT.xlsx', '2021-10-10 BCHUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr', '2021-10-10 ETCUSDT.ftr', '2021-10-10 BTCUSDT.ftr', '2021-10-10 ETHUSDT.ftr', '2021-10-10 ADAUSDT.ftr', '2021-10-10 XLMUSDT.ftr', '2021-10-10 LINKUSDT.ftr', '2021-10-10 LTCUSDT.ftr', '2021-10-10 EOSUSDT.ftr', '2021-10-10 XRPUSDT.ftr', '2021-10-10 BCHUSDT.ftr', '2021-11-16 XLMUSDT.ftr', '2021-11-16 ADAUSDT.ftr', '2021-11-16 ETCUSDT.ftr', '2021-11-16 BTCUSDT.ftr', '2021-11-16 ETHUSDT.ftr', '2021-11-16 BCHUSDT.ftr', '2021-11-16 XRPUSDT.ftr', '2021-11-16 EOSUSDT.ftr', '2021-11-16 LTCUSDT.ftr', '2021-11-16 LINKUSDT.ftr']\n","['2021-07-03 ETHUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-08-31 SUSHIUSDT.xlsx', '2021-08-31 CVCUSDT.xlsx', '2021-08-31 BTSUSDT.xlsx', '2021-08-31 HOTUSDT.xlsx', '2021-08-31 ZRXUSDT.xlsx', '2021-08-31 QTUMUSDT.xlsx', '2021-08-31 IOTAUSDT.xlsx', '2021-08-31 BTCBUSD.xlsx', '2021-08-31 WAVESUSDT.xlsx', '2021-08-31 ADAUSDT.xlsx', '2021-08-31 LITUSDT.xlsx', '2021-08-31 XTZUSDT.xlsx', '2021-08-31 BNBUSDT.xlsx', '2021-08-31 AKROUSDT.xlsx', '2021-08-31 HNTUSDT.xlsx', '2021-08-31 ETCUSDT.xlsx', '2021-08-31 XMRUSDT.xlsx', '2021-08-31 YFIUSDT.xlsx', '2021-08-31 ETHUSDT.xlsx', '2021-08-31 ALICEUSDT.xlsx', '2021-08-31 ALPHAUSDT.xlsx', '2021-08-31 SFPUSDT.xlsx', '2021-08-31 REEFUSDT.xlsx', '2021-08-31 BATUSDT.xlsx', '2021-08-31 DOGEUSDT.xlsx', '2021-08-31 TRXUSDT.xlsx', '2021-08-31 RLCUSDT.xlsx', '2021-08-31 BTCSTUSDT.xlsx', '2021-08-31 STORJUSDT.xlsx', '2021-08-31 SNXUSDT.xlsx', '2021-08-31 XLMUSDT.xlsx', '2021-08-31 NEOUSDT.xlsx', '2021-08-31 UNFIUSDT.xlsx', '2021-08-31 SANDUSDT.xlsx', '2021-08-31 DASHUSDT.xlsx', '2021-08-31 KAVAUSDT.xlsx', '2021-08-31 RUNEUSDT.xlsx', '2021-08-31 CTKUSDT.xlsx', '2021-08-31 LINKUSDT.xlsx', '2021-08-31 CELRUSDT.xlsx', '2021-08-31 RSRUSDT.xlsx', '2021-08-31 DGBUSDT.xlsx', '2021-08-31 SKLUSDT.xlsx', '2021-08-31 RENUSDT.xlsx', '2021-08-31 TOMOUSDT.xlsx', '2021-08-31 MTLUSDT.xlsx', '2021-08-31 LTCUSDT.xlsx', '2021-08-31 DODOUSDT.xlsx', '2021-08-31 EGLDUSDT.xlsx', '2021-08-31 KSMUSDT.xlsx', '2021-08-31 ONTUSDT.xlsx', '2021-08-31 VETUSDT.xlsx', '2021-08-31 TRBUSDT.xlsx', '2021-08-31 MANAUSDT.xlsx', '2021-08-31 COTIUSDT.xlsx', '2021-08-31 CHRUSDT.xlsx', '2021-08-31 ETHUSDT_210924.xlsx', '2021-08-31 BAKEUSDT.xlsx', '2021-08-31 GRTUSDT.xlsx', '2021-08-31 FLMUSDT.xlsx', '2021-08-31 EOSUSDT.xlsx', '2021-08-31 OGNUSDT.xlsx', '2021-08-31 SCUSDT.xlsx', '2021-08-31 BALUSDT.xlsx', '2021-08-31 STMXUSDT.xlsx', '2021-08-31 BTTUSDT.xlsx', '2021-08-31 LUNAUSDT.xlsx', '2021-08-31 DENTUSDT.xlsx', '2021-08-31 KNCUSDT.xlsx', '2021-08-31 SRMUSDT.xlsx', '2021-08-31 ENJUSDT.xlsx', '2021-08-31 ZENUSDT.xlsx', '2021-08-31 ATOMUSDT.xlsx', '2021-08-31 NEARUSDT.xlsx', '2021-08-31 BCHUSDT.xlsx', '2021-08-31 IOSTUSDT.xlsx', '2021-08-31 HBARUSDT.xlsx', '2021-08-31 ZECUSDT.xlsx', '2021-08-31 1000SHIBUSDT.xlsx', '2021-08-31 TLMUSDT.xlsx', '2021-08-31 BZRXUSDT.xlsx', '2021-08-31 ETHBUSD.xlsx', '2021-08-31 AAVEUSDT.xlsx', '2021-08-31 GTCUSDT.xlsx', '2021-08-31 ALGOUSDT.xlsx', '2021-08-31 ICPUSDT.xlsx', '2021-08-31 BTCUSDT_210924.xlsx', '2021-08-31 LRCUSDT.xlsx', '2021-08-31 AVAXUSDT.xlsx', '2021-08-31 MATICUSDT.xlsx', '2021-08-31 1INCHUSDT.xlsx', '2021-08-31 MKRUSDT.xlsx', '2021-08-31 THETAUSDT.xlsx', '2021-08-31 UNIUSDT.xlsx', '2021-08-31 LINAUSDT.xlsx', '2021-08-31 RVNUSDT.xlsx', '2021-08-31 FILUSDT.xlsx', '2021-08-31 NKNUSDT.xlsx', '2021-08-31 DEFIUSDT.xlsx', '2021-08-31 COMPUSDT.xlsx', '2021-08-31 BTCDOMUSDT.xlsx', '2021-08-31 SOLUSDT.xlsx', '2021-08-31 BTCUSDT.xlsx', '2021-08-31 OMGUSDT.xlsx', '2021-08-31 ICXUSDT.xlsx', '2021-08-31 BLZUSDT.xlsx', '2021-08-31 FTMUSDT.xlsx', '2021-08-31 YFIIUSDT.xlsx', '2021-08-31 KEEPUSDT.xlsx', '2021-08-31 BANDUSDT.xlsx', '2021-08-31 XRPUSDT.xlsx', '2021-08-31 SXPUSDT.xlsx', '2021-08-31 CRVUSDT.xlsx', '2021-08-31 BELUSDT.xlsx', '2021-08-31 DOTUSDT.xlsx', '2021-08-31 XEMUSDT.xlsx', '2021-08-31 ONEUSDT.xlsx', '2021-08-31 ZILUSDT.xlsx', '2021-08-31 AXSUSDT.xlsx', '2021-08-31 OCEANUSDT.xlsx', '2021-08-31 CHZUSDT.xlsx', '2021-08-31 ANKRUSDT.xlsx', '2021-08-31 SUSHIUSDT_res_dfs.pkl', '2021-07-01 ADAUSDT.xlsx', '2021-10-10 ETCUSDT.xlsx', '2021-10-10 BTCUSDT.xlsx', '2021-10-10 ETHUSDT.xlsx', '2021-10-10 ADAUSDT.xlsx', '2021-10-10 XLMUSDT.xlsx', '2021-10-10 LINKUSDT.xlsx', '2021-10-10 LTCUSDT.xlsx', '2021-10-10 EOSUSDT.xlsx', '2021-10-10 XRPUSDT.xlsx', '2021-10-10 BCHUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr', '2021-10-10 ETCUSDT.ftr', '2021-10-10 BTCUSDT.ftr', '2021-10-10 ETHUSDT.ftr', '2021-10-10 ADAUSDT.ftr', '2021-10-10 XLMUSDT.ftr', '2021-10-10 LINKUSDT.ftr', '2021-10-10 LTCUSDT.ftr', '2021-10-10 EOSUSDT.ftr', '2021-10-10 XRPUSDT.ftr', '2021-10-10 BCHUSDT.ftr', '2021-11-16 EOSUSDT.ftr', '2021-11-16 LTCUSDT.ftr', '2021-11-16 LINKUSDT.ftr', '2021-11-16 XLMUSDT.ftr', '2021-11-16 ADAUSDT.ftr', '2021-11-16 ETCUSDT.ftr', '2021-11-16 BTCUSDT.ftr', '2021-11-16 ETHUSDT.ftr', '2021-11-16 BCHUSDT.ftr', '2021-11-16 XRPUSDT.ftr']\n","['2021-07-01 BTCUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr', '2021-10-10 LTCUSDT.xlsx', '2021-10-10 LINKUSDT.xlsx', '2021-10-10 XLMUSDT.xlsx', '2021-10-10 ADAUSDT.xlsx', '2021-10-10 ETCUSDT.xlsx', '2021-10-10 BTCUSDT.xlsx', '2021-10-10 ETHUSDT.xlsx', '2021-10-10 BCHUSDT.xlsx', '2021-10-10 XRPUSDT.xlsx', '2021-10-10 EOSUSDT.xlsx', '2021-10-10 ETCUSDT.ftr', '2021-10-10 BTCUSDT.ftr', '2021-10-10 ETHUSDT.ftr', '2021-10-10 ADAUSDT.ftr', '2021-10-10 XLMUSDT.ftr', '2021-10-10 LINKUSDT.ftr', '2021-10-10 LTCUSDT.ftr', '2021-10-10 EOSUSDT.ftr', '2021-10-10 XRPUSDT.ftr', '2021-10-10 BCHUSDT.ftr', '2021-11-16 XLMUSDT.ftr', '2021-11-16 ADAUSDT.ftr', '2021-11-16 ETCUSDT.ftr', '2021-11-16 BTCUSDT.ftr', '2021-11-16 ETHUSDT.ftr', '2021-11-16 BCHUSDT.ftr', '2021-11-16 XRPUSDT.ftr', '2021-11-16 EOSUSDT.ftr', '2021-11-16 LTCUSDT.ftr', '2021-11-16 LINKUSDT.ftr']\n","['2021-02-07 BTC.xlsx', '2021-02-07 ETH.xlsx', '2021-02-11 BCHUSDT.xlsx', '2021-02-11 XRPUSDT.xlsx', '2021-02-11 EOSUSDT.xlsx', '2021-02-11 LTCUSDT.xlsx', '2021-02-11 ETCUSDT.xlsx', '2021-02-11 LINKUSDT.xlsx', '2021-02-11 XLMUSDT.xlsx', '2021-02-11 ADAUSDT.xlsx', '2021-02-11 XMRUSDT.xlsx', '2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr', '2021-10-10 ETCUSDT.xlsx', '2021-10-10 XLMUSDT.xlsx', '2021-10-10 BCHUSDT.xlsx', '2021-10-10 ADAUSDT.xlsx', '2021-10-10 XRPUSDT.xlsx', '2021-10-10 BTCUSDT.xlsx', '2021-10-10 EOSUSDT.xlsx', '2021-10-10 ETHUSDT.xlsx', '2021-10-10 LTCUSDT.xlsx', '2021-10-10 LINKUSDT.xlsx', '2021-10-10 ETCUSDT.ftr', '2021-10-10 BTCUSDT.ftr', '2021-10-10 ETHUSDT.ftr', '2021-10-10 ADAUSDT.ftr', '2021-10-10 XLMUSDT.ftr', '2021-10-10 LINKUSDT.ftr', '2021-10-10 LTCUSDT.ftr', '2021-10-10 EOSUSDT.ftr', '2021-10-10 XRPUSDT.ftr', '2021-10-10 BCHUSDT.ftr', '2021-11-16 LTCUSDT.ftr', '2021-11-16 LINKUSDT.ftr', '2021-11-16 XLMUSDT.ftr', '2021-11-16 ADAUSDT.ftr', '2021-11-16 ETCUSDT.ftr', '2021-11-16 BTCUSDT.ftr', '2021-11-16 ETHUSDT.ftr', '2021-11-16 XRPUSDT.ftr', '2021-11-16 BCHUSDT.ftr', '2021-11-16 EOSUSDT.ftr']\n","['2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx']\n"]}],"source":["interval = '1m'\n","date_path = './candlestick_concated/%s/quant_v2/' % interval\n","file_list = os.listdir(date_path)\n","print((file_list))\n","\n","interval2 = '3m'\n","date_path2 = './candlestick_concated/%s/quant_v2/' % interval2\n","file_list2 = os.listdir(date_path2)\n","print((file_list2))\n","\n","interval3 = '5m'\n","date_path3 = './candlestick_concated/%s/quant_v2/' % interval3\n","file_list3 = os.listdir(date_path3)\n","print((file_list3))\n","\n","interval4 = '15m'\n","date_path4 = './candlestick_concated/%s/quant_v2/' % interval4\n","file_list4 = os.listdir(date_path4)\n","print((file_list4))\n","\n","interval5 = '30m'\n","date_path5 = './candlestick_concated/%s/quant_v2/' % interval5\n","file_list5 = os.listdir(date_path5)\n","print((file_list5))\n","\n","interval6 = '1h'\n","date_path6 = './candlestick_concated/%s/quant_v2/' % interval6\n","file_list6 = os.listdir(date_path6)\n","print((file_list6))\n","\n","interval7 = '4h'\n","date_path7 = './candlestick_concated/%s/quant_v2/' % interval7\n","file_list7 = os.listdir(date_path7)\n","print((file_list7))\n","\n","interval8 = '1d'\n","date_path8 = './candlestick_concated/%s/quant_v2/' % interval8\n","file_list8 = os.listdir(date_path8)\n","print((file_list8))"]},{"cell_type":"markdown","metadata":{"id":"M8-EChy0VsDr"},"source":["## cudf"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":414,"status":"ok","timestamp":1638754008241,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"b09qAb1sVtRP","outputId":"3a824202-064a-4544-b791-ffc777bb3f9c"},"outputs":[{"name":"stdout","output_type":"stream","text":["usage: conda [-h] [-V] command ...\n","conda: error: unrecognized arguments: -t=/content/notebooks\n"]}],"source":["# !conda install -c rapidsai-nightly -c nvidia -c numba -c conda-forge \\\n","#     cudf python=3.7 cudatoolkit=11.1 -t=$nb_path"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":413,"status":"ok","timestamp":1638754715310,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"Jnz6i7ZqRnb0","outputId":"207bc57b-a17a-4f67-fb26-24e46e2c6e26"},"outputs":[{"name":"stdout","output_type":"stream","text":["***********************************************************************\n","Woo! Your instance has the right kind of GPU, a Tesla P100-PCIE-16GB!\n","***********************************************************************\n","\n"]}],"source":["# !git clone https://github.com/rapidsai/rapidsai-csp-utils.git\n","!python rapidsai-csp-utils/colab/env-check.py"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"4sKA_9Dbg4s2"},"outputs":[],"source":["# This will update the Colab environment and restart the kernel.  Don't run the next cell until you see the session crash.\n","!bash rapidsai-csp-utils/colab/update_gcc.sh\n","import os\n","os._exit(00)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"d1C4pNiBhYHX"},"outputs":[],"source":["# This will install CondaColab.  This will restart your kernel one last time.  Run this cell by itself and only run the next cell once you see the session crash.\n","import condacolab\n","condacolab.install()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":414,"status":"ok","timestamp":1638754863073,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"iGx3ACTvZqck","outputId":"e8379cc4-c325-4fe0-ac46-5fbbd7d38829"},"outputs":[{"name":"stdout","output_type":"stream","text":["✨🍰✨ Everything looks OK!\n"]}],"source":["# you can now run the rest of the cells as normal\n","import condacolab\n","condacolab.check()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"oR8s7U8c7C28","outputId":"22be2731-fae1-45fc-f310-e48f60774bb2"},"outputs":[{"name":"stdout","output_type":"stream","text":["Installing RAPIDS Stable 21.10\n","Starting the RAPIDS install on Colab.  This will take about 15 minutes.\n","Collecting package metadata (current_repodata.json): ...working... done\n","Solving environment: ...working... WARNING conda.core.solve:_add_specs(611): pinned spec cudatoolkit=11.1 conflicts with explicit specs.  Overriding pinned spec.\n","failed with initial frozen solve. Retrying with flexible solve.\n","Solving environment: ...working... WARNING conda.core.solve:_add_specs(611): pinned spec cudatoolkit=11.1 conflicts with explicit specs.  Overriding pinned spec.\n","failed with repodata from current_repodata.json, will retry with next repodata source.\n","Collecting package metadata (repodata.json): ...working... done\n"]}],"source":["# Installing RAPIDS is now 'python rapidsai-csp-utils/colab/install_rapids.py <release> <packages>'\n","# The <release> options are 'stable' and 'nightly'.  Leaving it blank or adding any other words will default to stable.\n","# The <packages> option are default blank or 'core'.  By default, we install RAPIDSAI and BlazingSQL.  The 'core' option will install only RAPIDSAI and not include BlazingSQL, \n","!python rapidsai-csp-utils/colab/install_rapids.py stable\n","import os\n","os.environ['NUMBAPRO_NVVM'] = '/usr/local/cuda/nvvm/lib64/libnvvm.so'\n","os.environ['NUMBAPRO_LIBDEVICE'] = '/usr/local/cuda/nvvm/libdevice/'\n","os.environ['CONDA_PREFIX'] = '/usr/local'"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"kWsxi4ZpKtGt"},"outputs":[],"source":["import shutil\n","import sys\n","\n","colab_env = \"/usr/lib\"\n","\n","rapids_path = os.path.join(current_path, \"rapidsai-csp-utils/lib\")\n","rapids_libs = os.listdir(rapids_path)\n","print(rapids_libs)\n","# break\n","\n","for lib_ in rapids_libs:\n","  try:\n","    shutil.copy(os.path.join(rapids_path, lib_), os.path.join(colab_env, lib_))\n","    sys.path.append(os.path.join(colab_env, lib_))\n","    print(\"copied to\" + os.path.join(colab_env, lib_))\n","  except Exception as e:\n","    print(e)"]},{"cell_type":"markdown","metadata":{"id":"Iy76iO7gztne"},"source":["## move legacy files"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"hMRht32Czwry"},"outputs":[],"source":["# print()\n","cur_dir_list = os.listdir('.')\n","for f in cur_dir_list:\n","  if 'legacy' in f :\n","    # print(f)\n","    if os.path.isdir(current_path + f,):\n","      continue\n","\n","    shutil.move(current_path + f, current_path + 'legacy/' + f)\n","    print(\"moved to\" + current_path + 'legacy/' +  f)"]},{"cell_type":"markdown","metadata":{"id":"5duWn8t4BRyv"},"source":["# IDE platform\n"]},{"cell_type":"markdown","metadata":{"id":"6HOjnZjSgzk1"},"source":["## load ftr_list"]},{"cell_type":"code","execution_count":3,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":1198,"status":"ok","timestamp":1646442426501,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"7FPBG5Qqg2jB","outputId":"0713afc0-4cc1-4fb2-bb0d-36b885b94614"},"outputs":[{"output_type":"stream","name":"stdout","text":["['2022-02-17 ETHUSDT.ftr']\n","2022-02-17 ETHUSDT.ftr loaded !\n","load res_df_ elapsed time : 1.669597864151001\n"]}],"source":["save_path = './candlestick_concated/res_df/'\n","\n","dir_path = \"bb4h_backi2\"\n","dir_path = \"bb1d_backi2\"\n","date = \"2022-01-10\"\n","date = \"2022-02-17\"\n","\n","ftr_path = os.path.join(save_path, dir_path, \"concat/cum\", date)\n","\n","# ------ load ftr list ------ #\n","ftr_list = [s for s in os.listdir(ftr_path) if \"ftr\" in s if date in s]\n","# ftr_list = [s for s in os.listdir(os.path.join(save_path, dir_path)) if \"ftr\" in s if date in s]\n","print(ftr_list)\n","\n","start_0 = time.time()\n","key = ftr_list[0]  # tempoaray use single key\n","res_df_ = pd.read_feather(os.path.join(ftr_path, key), columns=None, use_threads=True).set_index(\"index\")\n","# print(res_df_.head())\n","print(key, \"loaded !\")\n","print(\"load res_df_ elapsed time :\", time.time() - start_0)"]},{"cell_type":"code","source":["res_df_.dtypes"],"metadata":{"id":"RQH_l4opEh_O"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"xpyP5t8Ht_pE","jp-MarkdownHeadingCollapsed":true,"tags":[]},"source":["### calc recursive indi's min_period"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":235},"executionInfo":{"elapsed":15,"status":"error","timestamp":1645810346810,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"N1Hbm4OA4Tkk","outputId":"e6a3fc2f-316c-4a0d-9c91-df759c816b88"},"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-4-c602b9e1b7e6>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mticker_prcn\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mget_precision_by_price\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mres_df\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mclose\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0miloc\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;36m2\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mtarget_len\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m300000\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mslice_len_list\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m50\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m10000\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m100\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mslice_len_list\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0minsert\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtarget_len\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'res_df' is not defined"]}],"source":["ticker_prcn = get_precision_by_price(res_df.close.iloc[-1]) + 2\n","\n","target_len = 300000\n","slice_len_list = list(range(50, 10000, 100))\n","slice_len_list.insert(0, target_len)\n","\n","start_0 = time.time()\n","# prev_int_, prev_pnts_ = None, None\n","offset = 1\n","\n","for sl_idx, sample_len in enumerate(slice_len_list):\n","\n","  sample_df = res_df.iloc[-sample_len -offset:-offset]\n","  sample_len2 = sample_len\n","\n","  # --------- input using indi.s --------- #\n","  # res = ema_v0(sample_df['close'], 190)\n","  res = rsi(sample_df, 14)\n","\n","    #    to_htf()    #\n","  # df_5T = to_htf(sample_df, itv_='5T', offset='1h')\n","  # sample_len2 = len(df_5T)\n","\n","  # # --------- input using htf_indi. --------- #\n","  # res = ema(df_5T['close'], 195)\n","  # -------------------------------------- #\n","\n","  res_last_row = res.iloc[-1]\n","  if pd.isnull(res_last_row):\n","    continue\n","\n","  # print(res_last_row)\n","  # break\n","\n","  # sample_df = sample_df.join(to_lower_tf_v2(sample_df, df_5T, [-1]), how='inner')\n","\n","\n","  #   자리수 분할 계산    #\n","  int_, points_ = str(res_last_row).split('.')\n","  pnts_ = points_[:ticker_prcn]\n","\n","  if sl_idx == 0:\n","    target_int_ = int_\n","    target_pnts_ = pnts_\n","    print(\"target {} ({}) -> {} {}\".format(sample_len, sample_len2, int_, points_))\n","\n","  else:\n","    if target_int_ == int_ and target_pnts_ == pnts_:\n","      # print(sample_len, \"({})\".format(sample_len2), '->', int_, pnts_, end='\\n\\n')\n","      print(\"{} ({}) -> {} {}\\n\".format(sample_len, sample_len2, int_, points_))\n","      break\n","\n","print(time.time() - start_0)  # (1301)(1361)(1301)"]},{"cell_type":"markdown","metadata":{"id":"rrIGjmUzqU-D","tags":[]},"source":["## import utils & config"]},{"cell_type":"code","execution_count":4,"metadata":{"id":"SeJan_0t95yL","executionInfo":{"status":"ok","timestamp":1646442426503,"user_tz":-540,"elapsed":6,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}}},"outputs":[],"source":["frame_ver = \"0114_htf\"\n","ID_arr = np.array(['v3', 'v5_2'])\n","\n","utils_public_name = \"{}.utils.{}_utils_public\".format(strat_pkg, frame_ver)\n","utils_public_lib = importlib.import_module(utils_public_name)\n","utils_public = utils_public_lib   # temporary\n","\n","u_name_list = [\"{}.utils.{}_utils_{}\".format(strat_pkg, frame_ver, id_) for id_ in ID_arr]\n","utils_arr = np.array([importlib.import_module(u_name) for u_name in u_name_list])\n","\n","config_name_list = [\"{}_config_{}.json\".format(frame_ver, id_) for id_ in ID_arr]\n","cfg_path_list = [os.path.join(current_path, strat_pkg, \"config\", name_) for name_ in config_name_list]\n","cfg_file_list = [open(cfg_path) for cfg_path in cfg_path_list]\n","config_arr = np.array([EasyDict(json.load(cfg_)) for cfg_ in cfg_file_list])\n","\n","# ------ opened files should be closed --> 닫지 않으면 reopen 시 error occurs ------ #\n","_ = [cfg_.close() for cfg_ in cfg_file_list]\n","show_plot = 1   # idep's var - do not touch"]},{"cell_type":"markdown","metadata":{"id":"leSQlImg4_9L","jp-MarkdownHeadingCollapsed":true,"tags":[]},"source":["### utils_"]},{"cell_type":"code","execution_count":5,"metadata":{"id":"CB2yZdQ95Cdg","executionInfo":{"status":"ok","timestamp":1646442427422,"user_tz":-540,"elapsed":925,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}}},"outputs":[],"source":["# from funcs.funcs_indicator_candlescore import *\n","# import numpy as np\n","\n","\n","def enlist_rtc(res_df, config, np_timeidx):\n","    strat_version = config.strat_version\n","    \n","    res_df['short_rtc_1_{}'.format(strat_version)] = res_df['bb_lower_%s' % config.loc_set.point.outg_itv1]\n","    res_df['short_rtc_0_{}'.format(strat_version)] = res_df['dc_upper_%s' % config.loc_set.point.outg_itv0]\n","\n","    res_df['long_rtc_1_{}'.format(strat_version)] = res_df['bb_upper_%s' % config.loc_set.point.outg_itv1]\n","    res_df['long_rtc_0_{}'.format(strat_version)] = res_df['dc_lower_%s' % config.loc_set.point.outg_itv0]\n","\n","    # ------ inversion ------ #\n","    if config.pos_set.short_inversion or config.pos_set.long_inversion:  # Todo - 추후 다른 변수로 변경해야함 (entry_score deprecated)\n","        short_rtc_1_copy = res_df['short_rtc_1_{}'.format(strat_version)].copy()\n","        res_df['short_rtc_1_{}'.format(strat_version)] = res_df['long_rtc_1_{}'.format(strat_version)]\n","        res_df['long_rtc_1_{}'.format(strat_version)] = short_rtc_1_copy\n","\n","        short_rtc_0_copy = res_df['short_rtc_0_{}'.format(strat_version)].copy()\n","        res_df['short_rtc_0_{}'.format(strat_version)] = res_df['long_rtc_0_{}'.format(strat_version)]\n","        res_df['long_rtc_0_{}'.format(strat_version)] = short_rtc_0_copy\n","\n","    res_df['short_rtc_gap_{}'.format(strat_version)] = abs(\n","        res_df['short_rtc_0_{}'.format(strat_version)] - res_df['short_rtc_1_{}'.format(strat_version)])\n","    res_df['long_rtc_gap_{}'.format(strat_version)] = abs(\n","        res_df['long_rtc_1_{}'.format(strat_version)] - res_df['long_rtc_0_{}'.format(strat_version)])\n","\n","    res_df['h_short_rtc_1_{}'.format(strat_version)] = res_df['bb_lower_%s' % config.loc_set.point.tpg_itv1]\n","    # res_df['h_short_rtc_1_{}'.format(strat_version)] = res_df['dc_lower_%s' % config.loc_set.point.tpg_itv]\n","    res_df['h_short_rtc_0_{}'.format(strat_version)] = res_df['dc_upper_%s' % config.loc_set.point.tpg_itv0]\n","\n","    res_df['h_long_rtc_1_{}'.format(strat_version)] = res_df['bb_upper_%s' % config.loc_set.point.tpg_itv1]\n","    # res_df['h_long_rtc_1_{}'.format(strat_version)] = res_df['dc_upper_%s' % config.loc_set.point.tpg_itv]\n","    res_df['h_long_rtc_0_{}'.format(strat_version)] = res_df['dc_lower_%s' % config.loc_set.point.tpg_itv0]\n","\n","    # ------ inversion ------ #\n","    if config.pos_set.short_inversion or config.pos_set.long_inversion:\n","        h_short_rtc_1_copy = res_df['h_short_rtc_1_{}'.format(strat_version)].copy()\n","        res_df['h_short_rtc_1_{}'.format(strat_version)] = res_df['h_long_rtc_1_{}'.format(strat_version)]\n","        res_df['h_long_rtc_1_{}'.format(strat_version)] = h_short_rtc_1_copy\n","\n","        h_short_rtc_0_copy = res_df['h_short_rtc_0_{}'.format(strat_version)].copy()\n","        res_df['h_short_rtc_0_{}'.format(strat_version)] = res_df['h_long_rtc_0_{}'.format(strat_version)]\n","        res_df['h_long_rtc_0_{}'.format(strat_version)] = h_short_rtc_0_copy\n","\n","    res_df['h_short_rtc_gap_{}'.format(strat_version)] = abs(\n","        res_df['h_short_rtc_0_{}'.format(strat_version)] - res_df['h_short_rtc_1_{}'.format(strat_version)])\n","    res_df['h_long_rtc_gap_{}'.format(strat_version)] = abs(\n","        res_df['h_long_rtc_1_{}'.format(strat_version)] - res_df['h_long_rtc_0_{}'.format(strat_version)])\n","\n","    res_df['short_dtk_1_{}'.format(strat_version)] = res_df['bb_lower_%s' % config.loc_set.zone.dtk_itv]\n","    res_df['short_dtk_0_{}'.format(strat_version)] = res_df['dc_upper_%s' % config.loc_set.zone.dtk_itv]\n","\n","    res_df['long_dtk_1_{}'.format(strat_version)] = res_df['bb_upper_%s' % config.loc_set.zone.dtk_itv]\n","    res_df['long_dtk_0_{}'.format(strat_version)] = res_df['dc_lower_%s' % config.loc_set.zone.dtk_itv]\n","\n","    res_df['short_dtk_gap_{}'.format(strat_version)] = abs(\n","        res_df['short_dtk_0_{}'.format(strat_version)] - res_df['short_dtk_1_{}'.format(strat_version)])\n","    res_df['long_dtk_gap_{}'.format(strat_version)] = abs(\n","        res_df['long_dtk_1_{}'.format(strat_version)] - res_df['long_dtk_0_{}'.format(strat_version)])\n","\n","    return res_df\n","\n","\n","def enlist_tr(res_df, config, np_timeidx, mode='OPEN'):\n","    strat_version = config.strat_version\n","    # ---------------- get open_res ---------------- #    \n","    len_df = len(res_df)\n","    short_open_res = np.ones(len_df)\n","    long_open_res = np.ones(len_df)\n","    \n","    data_cols = ['open', 'close', 'haopen', 'hahigh', 'halow', 'haclose']   # Todo - public_indi 이전에 해야할지도 모름\n","    o, c, ha_o, ha_h, ha_l, ha_c = [res_df[col_].to_numpy() for col_ in data_cols]\n","    back_ha_o = res_df['haopen'].shift(1).to_numpy()\n","    back_ha_c = res_df['haclose'].shift(1).to_numpy()\n","\n","    short_open_res *= (back_ha_c >= back_ha_o) & (ha_o > ha_c)\n","    # short_open_res *= ha_o == ha_h\n","    res_df['short_open_{}'.format(strat_version)] = short_open_res\n","\n","    long_open_res *= (back_ha_c <= back_ha_o) & (ha_o < ha_c)          \n","    # long_open_res *= ha_o == ha_l      \n","    res_df['long_open_{}'.format(strat_version)] = long_open_res\n","\n","    # ---------------- set ep level ---------------- #\n","    # -------- limit ver. -------- #\n","    if config.ep_set.entry_type == \"LIMIT\":\n","      res_df['short_ep_{}'.format(strat_version)] = res_df['h_short_rtc_1_{}'.format(strat_version)] + res_df['h_short_rtc_gap_{}'.format(strat_version)] * config.tr_set.ep_gap\n","      res_df['long_ep_{}'.format(strat_version)] = res_df['h_long_rtc_1_{}'.format(strat_version)] - res_df['h_long_rtc_gap_{}'.format(strat_version)] * config.tr_set.ep_gap\n","\n","      # res_df['short_ep_{}'.format(strat_version)] = res_df['close'] + res_df['h_short_rtc_gap_{}'.format(strat_version)] * config.tr_set.ep_gap\n","      # res_df['long_ep_{}'.format(strat_version)] = res_df['close'] - res_df['h_long_rtc_gap_{}'.format(strat_version)] * config.tr_set.ep_gap       \n","\n","    # -------- market ver. -------- #\n","    else:\n","        res_df['short_ep_{}'.format(strat_version)] = res_df['close']\n","        res_df['long_ep_{}'.format(strat_version)] = res_df['close']\n","\n","    # -------- zoned_ep -------- #\n","    if config.tr_set.c_ep_gap != \"None\":\n","        # res_df['short_ep_org_{}'.format(strat_version)] = res_df['short_ep_{}'.format(strat_version)].copy()\n","        # res_df['long_ep_org_{}'.format(strat_version)] = res_df['long_ep_{}'.format(strat_version)].copy()\n","        res_df['short_ep2_{}'.format(strat_version)] = res_df['h_short_rtc_1_{}'.format(strat_version)] + res_df[\n","            'h_short_rtc_gap_{}'.format(strat_version)] * config.tr_set.c_ep_gap\n","        res_df['long_ep2_{}'.format(strat_version)] = res_df['h_long_rtc_1_{}'.format(strat_version)] - res_df[\n","            'h_long_rtc_gap_{}'.format(strat_version)] * config.tr_set.c_ep_gap\n","\n","    # --------------- tp --------------- #\n","    res_df['short_tp_{}'.format(strat_version)] = res_df['h_short_rtc_1_{}'.format(strat_version)] - res_df[\n","        'h_short_rtc_gap_{}'.format(strat_version)] * config.tr_set.tp_gap\n","    res_df['long_tp_{}'.format(strat_version)] = res_df['h_long_rtc_1_{}'.format(strat_version)] + res_df[\n","        'h_long_rtc_gap_{}'.format(strat_version)] * config.tr_set.tp_gap\n","\n","    # --------------- out --------------- #\n","    if config.loc_set.point.outg_dc_period != \"None\":  # out 만 영향 줄려고 tp 까지 해놓고, rtc_0 변경 \n","        res_df['short_rtc_0_{}'.format(strat_version)] = res_df['high'].rolling(config.loc_set.point.outg_dc_period).max()\n","        res_df['long_rtc_0_{}'.format(strat_version)] = res_df['low'].rolling(config.loc_set.point.outg_dc_period).min()\n","\n","    res_df['short_out_{}'.format(strat_version)] = res_df['short_rtc_0_{}'.format(strat_version)] + res_df[\n","        'short_rtc_gap_{}'.format(strat_version)] * config.tr_set.out_gap\n","    res_df['long_out_{}'.format(strat_version)] = res_df['long_rtc_0_{}'.format(strat_version)] - res_df[\n","        'long_rtc_gap_{}'.format(strat_version)] * config.tr_set.out_gap\n","\n","    # -------- zoned_out -------- #\n","    if config.tr_set.t_out_gap != \"None\":\n","        # res_df['short_out_org_{}'.format(strat_version)] = res_df['short_out_{}'.format(strat_version)].copy()\n","        # res_df['long_out_org_{}'.format(strat_version)] = res_df['long_out_{}'.format(strat_version)].copy()\n","        res_df['short_out2_{}'.format(strat_version)] = res_df['short_rtc_0_{}'.format(strat_version)] + res_df[\n","            'short_rtc_gap_{}'.format(strat_version)] * config.tr_set.t_out_gap\n","        res_df['long_out2_{}'.format(strat_version)] = res_df['long_rtc_0_{}'.format(strat_version)] - res_df[\n","            'long_rtc_gap_{}'.format(strat_version)] * config.tr_set.t_out_gap\n","\n","        \n","    return res_df\n"]},{"cell_type":"markdown","metadata":{"id":"HKdUKKl-483N","jp-MarkdownHeadingCollapsed":true,"tags":[]},"source":["### utils_public"]},{"cell_type":"code","execution_count":6,"metadata":{"id":"nzOYWA2kqZ0d","executionInfo":{"status":"ok","timestamp":1646442429646,"user_tz":-540,"elapsed":2226,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}}},"outputs":[],"source":["# from funcs.funcs_indicator import *\n","# from funcs.funcs_trader import *\n","# import logging\n","# from ast import literal_eval\n","\n","sys_log = logging.getLogger()\n","\n","\n","class OrderSide:\n","    BUY = \"BUY\"\n","    SELL = \"SELL\"\n","    INVALID = None\n","\n","\n","def lvrg_set(res_df, config, open_side, ep_, out_, fee, limit_leverage=50):\n","    strat_version = config.strat_version\n","    if not pd.isnull(out_) and not config.lvrg_set.static_lvrg:\n","        if open_side == OrderSide.SELL:\n","            if strat_version in ['v3']:\n","                # config.lvrg_set.leverage = config.lvrg_set.target_pct / (out_ / ep_ - 1 - (fee + config.trader_set.market_fee))\n","                config.lvrg_set.leverage = config.lvrg_set.target_pct / (\n","                        out_ / ep_ - 1 - (fee + config.trader_set.market_fee))\n","                #     zone 에 따른 c_ep_gap 를 고려 (loss 완화 방향) / 윗 줄은 수익 극대화 방향\n","                # config.lvrg_set.leverage = config.lvrg_set.target_pct / (out_ / res_df['short_ep_org'].iloc[ep_j] - 1 - (fee + config.trader_set.market_fee))\n","            elif strat_version in ['v5_2', 'v7_3']:\n","                # config.lvrg_set.leverage = config.lvrg_set.target_pct / abs(ep_ / out_ - 1 - (fee + config.trader_set.market_fee))\n","                config.lvrg_set.leverage = config.lvrg_set.target_pct / abs(\n","                    ep_ / out_ - 1 - (fee + config.trader_set.market_fee))\n","                # config.lvrg_set.leverage = config.lvrg_set.target_pct / abs(res_df['short_ep_org'].iloc[ep_j] / out_ - 1 - (fee + config.trader_set.market_fee))\n","        else:\n","            #   윗 phase 는 min_pr 의 오차가 커짐\n","            if strat_version in ['v3']:\n","                # config.lvrg_set.leverage = config.lvrg_set.target_pct / (ep_ / out_ - 1 - (fee + config.trader_set.market_fee))\n","                config.lvrg_set.leverage = config.lvrg_set.target_pct / (\n","                        ep_ / out_ - 1 - (fee + config.trader_set.market_fee))\n","                # config.lvrg_set.leverage = config.lvrg_set.target_pct / (res_df['long_ep_org'].iloc[ep_j] / out_ - 1 - (fee + config.trader_set.market_fee))\n","            elif strat_version in ['v5_2', 'v7_3']:\n","                # config.lvrg_set.leverage = config.lvrg_set.target_pct / abs(out_ / ep_ - 1 - (fee + config.trader_set.market_fee))\n","                config.lvrg_set.leverage = config.lvrg_set.target_pct / abs(\n","                    out_ / ep_ - 1 - (fee + config.trader_set.market_fee))\n","                # config.lvrg_set.leverage = config.lvrg_set.target_pct / abs(out_ / res_df['long_ep_org'].iloc[ep_j] - 1 - (fee + config.trader_set.market_fee))\n","\n","    if not config.lvrg_set.allow_float:\n","        config.lvrg_set.leverage = int(config.lvrg_set.leverage)\n","\n","    # ------------ leverage rejection ------------ #\n","    #       Todo - return None ? -> 1 (일단 임시로 수정함)\n","    if config.lvrg_set.leverage < 1 and config.lvrg_set.lvrg_rejection:\n","        return 1\n","    config.lvrg_set.leverage = min(limit_leverage, max(config.lvrg_set.leverage, 1))\n","\n","    return config.lvrg_set.leverage\n","\n","\n","def sync_check(df_, config, order_side=\"OPEN\", row_slice=True):\n","    try:\n","        make_itv_list = [m_itv.replace('m', 'T') for m_itv in literal_eval(config.trader_set.itv_list)]\n","        row_list = literal_eval(config.trader_set.row_list)\n","        rec_row_list = literal_eval(config.trader_set.rec_row_list)\n","        offset_list = literal_eval(config.trader_set.offset_list)\n","\n","        assert len(make_itv_list) == len(offset_list), \"length of itv & offset_list should be equal\"\n","        htf_df_list = [to_htf(df_, itv_=itv_, offset=offset_) for itv_idx, (itv_, offset_)\n","                       in enumerate(zip(make_itv_list, offset_list)) if itv_idx != 0]  #\n","        htf_df_list.insert(0, df_)\n","\n","        # for htf_df_ in htf_df_list:\n","        #     print(htf_df_.tail())\n","\n","        #       Todo        #\n","        #        1. row_list calc.\n","        #           a. indi. 를 만들기 위한 최소 period 가 존재하고, 그 indi. 를 사용한 lb_period 가 존재함\n","        #           b. => default_period + lb_period\n","        #               i. from sync_check, public_indi, ep_point2, ep_dur 의 tf 별 max lb_period check\n","        #                   1. default_period + max lb_period check\n","        #                       a. 현재까지 lb_period_list\n","        #                           h_prev_idx (open / close) 60\n","        #                           dc_period 135\n","        #                           zone_dc_period 135\n","\n","        # --------- slicing (in trader phase only) --------- #\n","        #               --> latency 영향도가 높은 곳은 이곳\n","        if row_slice:   # recursive 가 아닌 indi. 의 latency 를 고려한 slicing\n","            df, df_5T, df_15T, df_30T, df_4H = [df_s.iloc[-row_list[row_idx]:].copy() for row_idx, df_s in enumerate(htf_df_list)]\n","            rec_df, rec_df_5T, rec_df_15T, rec_df_30T, rec_df_4H = [df_s.iloc[-rec_row_list[row_idx]:].copy() for row_idx, df_s in enumerate(htf_df_list)]\n","        else:\n","            df, df_5T, df_15T, df_30T, df_4H = htf_df_list\n","            rec_df, rec_df_5T, rec_df_15T, rec_df_30T, rec_df_4H = htf_df_list\n","\n","        # --------- add indi. --------- #\n","\n","        #        1. 필요한 indi. 는 enlist_epouttp & mr_check 보면서 삽입\n","        #        2. min use_rows 계산을 위해서, tf 별로 gathering 함        #\n","        start_0 = time.time()\n","\n","        df = dc_line(df, None, '1m', dc_period=20)\n","        df = bb_line(df, None, '1m')\n","        # print(df.tail())\n","\n","        df = dc_line(df, df_5T, '5m')\n","        df = bb_line(df, df_5T, '5m')\n","\n","        df = dc_line(df, df_15T, '15m')\n","        df = bb_line(df, df_15T, '15m')\n","\n","        df = bb_line(df, df_30T, '30m')\n","\n","        # print(time.time() - start_0)\n","\n","        # start_0 = time.time()\n","        df = bb_line(df, df_4H, '4h')\n","        # print(time.time() - start_0)\n","\n","        rec_df['rsi_1m'] = rsi(rec_df, 14)  # Todo - recursive, 250 period\n","        df = df.join(to_lower_tf_v2(df, rec_df.iloc[:, [-1]], [-1], backing_i=0), how='inner')  # <-- join same_tf manual\n","        # print(df.rsi_1m.tail())\n","\n","        if order_side in [\"OPEN\"]:\n","            rec_df_5T['ema_5m'] = ema(rec_df_5T['close'], 195)  # Todo - recursive, 1100 period (5T)\n","            df = df.join(to_lower_tf_v2(df, rec_df_5T, [-1]), how='inner')\n","\n","    except Exception as e:\n","        sys_log.error(\"error in sync_check :\", e)\n","    else:\n","        return df\n","\n","\n","def public_indi(res_df, config, np_timeidx, order_side=\"OPEN\"):\n","\n","    strat_version = config.strat_version\n","    res_df = dc_level(res_df, '5m', 1)\n","    res_df = bb_level(res_df, '5m', 1)\n","    # res_df = st_level(res_df, '5m', 1)\n","\n","    res_df = dc_level(res_df, '15m', 1)\n","    res_df = bb_level(res_df, '15m', 1)\n","    res_df = dtk_plot(res_df, dtk_itv2='15m', hhtf_entry=15, use_dtk_line=config.loc_set.zone.use_dtk_line, np_timeidx=np_timeidx)\n","\n","    # res_df = st_level(res_df, '15m', 1)\n","\n","    # res_df = dc_level(res_df, '30m', 1)\n","    # res_df = bb_level(res_df, '30m', 1)\n","    # res_df = st_level(res_df, '30m', 1)\n","\n","    # res_df = bb_level(res_df, '1h', 1)\n","\n","    res_df = bb_level(res_df, '4h', 1)\n","\n","    res_df['dc_upper_v2'.format(strat_version)] = res_df['high'].rolling(config.loc_set.zone.dc_period).max()\n","    res_df['dc_lower_v2'.format(strat_version)] = res_df['low'].rolling(config.loc_set.zone.dc_period).min()\n","\n","    res_df['zone_dc_upper_v2'.format(strat_version)] = res_df['high'].rolling(config.loc_set.zone.zone_dc_period).max()\n","    res_df['zone_dc_lower_v2'.format(strat_version)] = res_df['low'].rolling(config.loc_set.zone.zone_dc_period).min()\n","\n","    if order_side in [\"OPEN\"]:\n","        start_0 = time.time()\n","\n","        res_df[\"wick_score\"], res_df['body_score'] = candle_score(res_df, unsigned=False)\n","\n","        # print(\"~ wick_score() elapsed time : {}\".format(time.time() - start_0))\n","\n","        start_0 = time.time()\n","\n","        res_df = h_candle_v2(res_df, '15T')\n","        res_df = h_candle_v2(res_df, 'H')\n","\n","        # sys_log.warning(\"~ h_wick_score elapsed time : {}\".format(time.time() - start_0))\n","        # print(\"wick_score() ~ h_candle() elapsed time : {}\".format(time.time() - start_0))\n","\n","        hc_itv = 'H'\n","        h_candle_col = ['hopen_{}'.format(hc_itv), 'hhigh_{}'.format(hc_itv), 'hlow_{}'.format(hc_itv),\n","                        'hclose_{}'.format(hc_itv)]\n","\n","        res_df['h_wick_score'], res_df['h_body_score'] = candle_score(res_df, ohlc_col=h_candle_col, unsigned=False)\n","\n","    #     temp indi.    #\n","    # res_df[\"ma30_1m\"] = res_df['close'].rolling(30).mean()\n","    # res_df[\"ma60_1m\"] = res_df['close'].rolling(60).mean()\n","    # res_df = dtk_plot(res_df, dtk_itv2='15m', hhtf_entry=15, use_dtk_line=config.loc_set.zone.use_dtk_line, np_timeidx=np_timeidx)\n","\n","    return res_df\n","\n","\n","def ep_loc_point2(res_df, config, i, out_j, side=OrderSide.SELL):\n","  allow_ep_in = 0\n","  if config.strat_version in ['v5_2']:\n","    if side == OrderSide.SELL:            \n","      if (res_df['dc_upper_1m'].iloc[i - 1] <= res_df['dc_upper_15m'].iloc[i]) & \\\n","              (res_df['dc_upper_15m'].iloc[i - 1] != res_df['dc_upper_15m'].iloc[i]):\n","        allow_ep_in = 1\n","    else:\n","      if (res_df['dc_lower_1m'].iloc[i - 1] >= res_df['dc_lower_15m'].iloc[i]) & \\\n","              (res_df['dc_lower_15m'].iloc[i - 1] != res_df['dc_lower_15m'].iloc[i]):\n","        allow_ep_in = 1\n","\n","  if allow_ep_in:\n","    out_j = i\n","  return allow_ep_in, out_j\n","\n","\n","# vectorized calc.\n","def ep_loc_v2(res_df, config, np_timeidx, show_detail=True, ep_loc_side=OrderSide.SELL):\n","    strat_version = config.strat_version\n","\n","    # ------- param init ------- #\n","    open_side = None\n","    len_df = len(res_df)\n","    mr_res = np.ones(len_df)\n","    zone_arr = np.full(len_df, 'n')\n","\n","    # ------ process 한번에 처리해서 param_check 만 ver. 별로 하면 될 것 ------ #\n","    #     => public_indi() 가 될 것\n","    #     1. 사용한 param 정보와 matching 된 data 병렬로 나열 logging 될 것\n","    #     2. binarize 할 것 => short 와 long 은 같은 조건식 사용할 수 있게됨 - 보류 (생각보다 상반된 조건식이 많음)\n","    #       a. 조건식이 다른 경우는 ?\n","    tp_fee, out_fee = calc_tp_out_fee(config)\n","\n","    # -------------- candle_score -------------- #\n","    if config.loc_set.point.wick_score != \"None\":\n","      # -------------- candle_score_v0 (1m initial tick 기준임)  -------------- #\n","      if strat_version in ['v5_2', '1_1']:\n","        wick_score = res_df['wick_score'].to_numpy()\n","        if ep_loc_side == OrderSide.SELL:\n","          mr_res *= wick_score <= -config.loc_set.point.wick_score\n","        else:\n","          mr_res *= wick_score >= config.loc_set.point.wick_score\n","\n","    # -------------- spread scheduling -------------- #\n","    if config.loc_set.zone.short_spread != \"None\":\n","      bb_base_5m = res_df['bb_base_5m'].to_numpy()  # to_numpy() 는 ep_loc 에서 진행됨\n","      bb_lower_5m = res_df['bb_lower_5m'].to_numpy()\n","      bb_upper_5m = res_df['bb_upper_5m'].to_numpy()\n","      dc_lower_5m = res_df['dc_lower_5m'].to_numpy()\n","      if ep_loc_side == OrderSide.SELL:\n","        mr_res *= (bb_base_5m - bb_lower_5m - tp_fee * bb_base_5m) / (bb_base_5m - bb_lower_5m + out_fee * bb_base_5m) >= config.loc_set.zone.short_spread\n","      else:\n","        # mr_res *= (bb_base_5m - dc_lower_5m - tp_fee * bb_upper_5m) / (bb_base_5m - dc_lower_5m + out_fee * bb_base_5m) >= config.loc_set.zone.long_spread\n","        mr_res *= (bb_upper_5m - dc_lower_5m - tp_fee * bb_upper_5m) / (bb_upper_5m - dc_lower_5m + out_fee * bb_upper_5m) >= config.loc_set.zone.long_spread\n","\n","    # -------------- dtk -------------- #\n","    if config.loc_set.zone.dt_k != \"None\":\n","      # ------ dc_v2 ------ #\n","      dc_lower_v2 = res_df['dc_lower_v2'.format(strat_version)].to_numpy()\n","      short_dtk_1_ = res_df['short_dtk_1_{}'.format(strat_version)].to_numpy() - \\\n","              res_df['short_dtk_gap_{}'.format(strat_version)].to_numpy() * config.loc_set.zone.dt_k\n","      dc_upper_v2 = res_df['dc_upper_v2'.format(strat_version)].to_numpy()\n","      long_dtk_1_ = res_df['long_dtk_1_{}'.format(strat_version)].to_numpy() + \\\n","              res_df['long_dtk_gap_{}'.format(strat_version)].to_numpy() * config.loc_set.zone.dt_k\n","      if ep_loc_side == OrderSide.SELL:\n","        mr_res *= dc_lower_v2 >= short_dtk_1_\n","      else:\n","        mr_res *= dc_upper_v2 <= long_dtk_1_\n","\n","    # ------------ zone rejection  ------------ #\n","    # config 로 통제할 수 없는 rejection 은 strat_version 으로 조건문을 나눔 (lvrg_set 과 동일)\n","    if config.loc_set.zone.zone_rejection:        \n","        # ------ envel. ------ #\n","        # ep_loc check 기준 idx 가 entry 기준이라는 걸 명심\n","        if strat_version in ['v3_2']:\n","          hc_itv = '15T'\n","          dc_itv = '15m'\n","          shift_num = [0, to_itvnum(hc_itv)]\n","          div_res = [1, 0]\n","          for itv_num, res in zip(shift_num, div_res):\n","            hclose_H = res_df['hclose_{}'.format(hc_itv)].shift(itv_num).to_numpy()  # close_bar timein 사용하는 경우, 특수로 shift(0) 사용가능\n","            if ep_loc_side == OrderSide.SELL:\n","              dc_lower_ = res_df['dc_lower_%s' % dc_itv].shift(itv_num).to_numpy()\n","              mr_res *= (hclose_H < dc_lower_) == res\n","            else:\n","              dc_upper_ = res_df['dc_upper_%s' % dc_itv].shift(itv_num).to_numpy()\n","              mr_res *= (hclose_H > dc_upper_) == res\n","\n","        if strat_version in ['v3_3']:\n","          hc_itv = '15T'\n","          dc_itv = '15m'\n","          itv_num = to_itvnum(hc_itv)\n","          hclose_H = res_df['hclose_{}'.format(hc_itv)].shift(itv_num).to_numpy()   # 따라서 future_data 사용시, shifting 필요함\n","          if ep_loc_side == OrderSide.SELL:\n","            dc_lower_ = res_df['dc_lower_%s' % dc_itv].shift(itv_num).to_numpy()\n","            mr_res *= hclose_H < dc_lower_\n","          else:\n","            dc_upper_ = res_df['dc_upper_%s' % dc_itv].shift(itv_num).to_numpy()\n","            mr_res *= hclose_H > dc_upper_\n","\n","        # ------ degree ------ #\n","        if strat_version in ['v3_3']:\n","          norm_close = res_df['norm_close'].to_numpy()\n","          if ep_loc_side == OrderSide.SELL:\n","            mr_res *= norm_close <= -config.loc_set.zone.degree\n","          else:\n","            mr_res *= norm_close >= config.loc_set.zone.degree\n","\n","        # ------ bb ------ #\n","        close = res_df['close'].to_numpy()\n","\n","        # if strat_version in ['v3_3']:\n","        #   if ep_loc_side == OrderSide.SELL:\n","        #     bb_lower_1m = res_df['bb_lower_1m'].to_numpy()\n","        #     mr_res *= close <= bb_lower_1m\n","        #   else:\n","        #     bb_upper_1m = res_df['bb_upper_1m'].to_numpy()\n","        #     mr_res *= close >= bb_upper_1m\n","\n","        if strat_version in ['v5_2']:\n","          bb_upper2_ = res_df['bb_upper2_%s' % config.loc_set.zone.bbz_itv].to_numpy()\n","          bb_lower2_ = res_df['bb_lower2_%s' % config.loc_set.zone.bbz_itv].to_numpy()\n","          if ep_loc_side == OrderSide.SELL:\n","            mr_res *= bb_upper2_ < close\n","          else:\n","            mr_res *= bb_lower2_ > close\n","        \n","        # ------ sar ------ #\n","        # if strat_version in ['v3_3']:\n","          # sar_uptrend_3T = res_df['sar_uptrend_3T'].to_numpy()\n","          # if ep_loc_side == OrderSide.SELL:\n","          #   mr_res *= sar_uptrend_3T == 0\n","          # else:\n","          #   mr_res *= sar_uptrend_3T == 1\n","\n","        # ------ ema ------ #\n","        if strat_version in ['v5_2']: # 'v3'\n","          ema_5m = res_df['ema_5m'].to_numpy()\n","          if ep_loc_side == OrderSide.SELL:\n","            mr_res *= close < ema_5m\n","          else:\n","            mr_res *= close > ema_5m\n","\n","    # -------------- zoned tr_set - post_work -------------- #\n","    if config.tr_set.c_ep_gap != \"None\" or config.tr_set.t_out_gap != \"None\":\n","        #       by zone_dtk       #\n","        #         c_zone        #\n","        zone_dc_upper_v2_ = res_df['zone_dc_upper_v2'.format(strat_version)].to_numpy()\n","        long_dtk_plot_1 = res_df['long_dtk_plot_1'].to_numpy() + res_df['long_dtk_plot_gap'].to_numpy() * config.loc_set.zone.zone_dt_k\n","        zone_dc_lower_v2_ = res_df['zone_dc_lower_v2'.format(strat_version)].to_numpy()\n","        short_dtk_plot_1 = res_df['short_dtk_plot_1'].to_numpy() - res_df['short_dtk_plot_gap'].to_numpy() * config.loc_set.zone.zone_dt_k\n","        if ep_loc_side == OrderSide.SELL:\n","          zone_res = zone_dc_upper_v2_ > long_dtk_plot_1  # mr_res 와는 별개임\n","          pos = 'short'\n","        else:\n","          zone_res = zone_dc_lower_v2_ < short_dtk_plot_1\n","          pos = 'long'\n","\n","        # static 여부에 따른 vectorized adj. - dynamic 은 vectorize 불가\n","        if config.ep_set.static_ep and config.tr_set.c_ep_gap != \"None\":\n","          res_df['{}_ep_{}'.format(pos, strat_version)][zone_res] = res_df['{}_ep2_{}'.format(pos, strat_version)][zone_res]\n","        if config.out_set.static_out and config.tr_set.t_out_gap != \"None\":\n","          res_df['{}_out_{}'.format(pos, strat_version)][~zone_res] = res_df['{}_out2_{}'.format(pos, strat_version)][~zone_res]  # t_zone 에 대한 out2 setting \n","        zone_arr = np.where(zone_res == 1, 'c', 't')\n","\n","    return mr_res, zone_arr  # mr_res 의 True idx 가 open signal"]},{"cell_type":"markdown","metadata":{"id":"JjKHyqftzhD7","tags":[]},"source":["### set config (override available)"]},{"cell_type":"code","execution_count":7,"metadata":{"id":"q_4E-zH02WJy","executionInfo":{"status":"ok","timestamp":1646442429647,"user_tz":-540,"elapsed":4,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}}},"outputs":[],"source":["#     caution : MARKET / LIMIT spelling   #\n","#      json doesn't support single quotes     #\n","\n","param_dict = \\\n","{\n","  \"strat_version\": \"v3_3\",\n","  \"trader_set\": {\n","    \"run\": 1,\n","    \"df_log\": 0,\n","    \"open_index\": -1,\n","    \"complete_index\": -2,\n","    \"limit_fee\": 0.0002,\n","    \"market_fee\": 0.0004,\n","    \"initial_asset\": 3500,\n","    \"asset_changed\": 0,\n","    \"symbol\": \"ETHUSDT\",\n","    \"symbol_changed\": 0,\n","    \"itv_list\": \"['1m', '5m', '15m', '30m', '4h']\",\n","    \"row_list\": \"[200, 160, 30, 25, 25]\",\n","    \"rec_row_list\": \"[250, 1100, 1, 1, 1]\",\n","    \"offset_list\": \"['1h', '1h', '1h', '1h', '1h']\",\n","    \"rsi_out_stratver\": [\n","      \"v7_3\",\n","      \"1_1\"\n","    ],\n","    \"bar_close_second\": 59,\n","    \"realtime_term\": 0.01,\n","    \"api_retry_term\": 3,\n","    \"check_entry_sec\": 10,\n","    \"entry_execution_wait\": 60,\n","    \"breakout_qty_ratio\": 0.97,\n","    \"qty_check_term\": 30,\n","    \"exit_execution_wait\": 60,\n","    \"close_complete_term\": 5,\n","    \"save_stacked_df\": 0,\n","    \"stacked_df_exist\": 1\n","  },\n","  \"pos_set\": {\n","    \"short_inversion\": 0,\n","    \"long_inversion\": 0,\n","    \"short_ban\": 1,\n","    \"long_ban\": 0\n","  },\n","  \"loc_set\": {\n","    \"zone\": {\n","      \"short_spread\": \"None\",\n","      \"long_spread\": \"None\",\n","      \"tr_thresh\": \"None\",\n","      \"dtk_itv\": \"5m\",\n","      \"dt_k\": \"None\",\n","      \"dc_period\": 135,\n","      \"ei_k\": 0.36,\n","      \"use_dtk_line\": 0,\n","      \"zone_rejection\": 1,\n","      \"degree\": 50,\n","      \"gap_mply\": 1,\n","      \"hc_itv\": 60,\n","      \"bbz_itv\": \"None\",\n","      \"zone_dt_k\": 0.4,\n","      \"zone_dc_period\": 135\n","    },\n","    \"point\": {\n","      \"exp_itv\": \"5m\",\n","      \"tpg_itv1\": \"5m\",\n","      \"tpg_itv0\": \"5m\",\n","      \"outg_itv1\": \"5m\",\n","      \"outg_itv0\": \"1m\",\n","      \"outg_dc_period\": \"None\",\n","      \"tf_entry\": 15,\n","      \"wick_score\": \"None\",\n","      \"body_score\": \"None\",\n","      \"wick_score2\": \"None\",\n","      \"body_score2\": \"None\",\n","      \"osc_band\": 20\n","    },\n","    \"point2\": {\n","      \"ce_gap\": 0.5\n","    }\n","  },\n","  \"tr_set\": {\n","    \"ep_gap\": 0.083,\n","    \"tp_gap\": 0.36,\n","    \"decay_gap\": \"None\",\n","    \"out_gap\": -0.5,\n","    \"c_ep_gap\": 0.232,\n","    \"t_out_gap\": \"None\"\n","  },\n","  \"ep_set\": {\n","    \"entry_type\": \"MARKET\",\n","    \"static_ep\": 1,\n","    \"tpout_onexec\": 0\n","  },\n","  \"tp_set\": {\n","    \"non_tp\": 0,\n","    \"tp_type\": \"MARKET\",\n","    \"static_tp\": 1,\n","    \"decay_term\": 60,\n","    \"time_tp\": 0,\n","    \"partial_num\": 1,\n","    \"partial_qty_divider\": 1.5\n","  },\n","  \"out_set\": {\n","    \"out_type\": \"MARKET\",\n","    \"use_out\": 0,\n","    \"static_out\": 1,\n","    \"hl_out\": 1,\n","    \"price_restoration\": 0,\n","    \"retouch\": 0,\n","    \"retouch_out_period\": 500,\n","    \"second_out\": 0,\n","    \"approval_st_gap\": 1.5,\n","    \"second_out_gap\": 0.5\n","  },\n","  \"lvrg_set\": {\n","    \"leverage\": 2,\n","    \"static_lvrg\": 1,\n","    \"allow_float\": 0,\n","    \"target_pct\": 0.12,\n","    \"lvrg_rejection\": 0\n","  }\n","}\n","\n","config = EasyDict(param_dict)\n","# param_json = json.dumps(param_dict, indent=2)"]},{"cell_type":"markdown","metadata":{"id":"dzla8i9_ysmP","jp-MarkdownHeadingCollapsed":true,"tags":[]},"source":["#### save config"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":544,"status":"ok","timestamp":1639994748940,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"FlNGKvW_w2za","outputId":"c575ce69-def0-4e6c-c949-a63707467b2e"},"outputs":[{"name":"stdout","output_type":"stream","text":["/content/drive/My Drive/Colab Notebooks/JnQ/config/config_v5_2.1220_candlejson dumped !\n"]}],"source":["config_name = \"config_v5_2.1220_candlejson\"\n","# config_name = \"config_v3.json\"\n","cfg_full_path = os.path.join(current_path, \"config\", config_name)\n","\n","\n","with open(cfg_full_path, 'w') as cfg:\n","    json.dump(config1, cfg, indent=2)\n","    print(\"{} dumped !\".format(cfg_full_path))"]},{"cell_type":"markdown","metadata":{"id":"rLI8unIyroiC","tags":[]},"source":["## run"]},{"cell_type":"code","source":["id_idx_list = [0]  # ID_arr 에서 import 할 id_idx 선택\n","public_override = 1\n","utils_override = 1\n","config_override = 1\n","\n","# ------ config_list 와 같은 org_var 에 override 하는거 다시 생각하기 ------ #\n","ID_list = ID_arr[id_idx_list]\n","utils_list = utils_arr[id_idx_list]\n","config_list = config_arr[id_idx_list]\n","\n","if config_override or utils_override:\n","  assert len(config_list) == 1\n","  if config_override:\n","    config_list[0] = config\n","    ID_list[0] = config.strat_version\n","  \n","config = config_list[0]  # base config = config_list[0]\n","tp_fee, out_fee = calc_tp_out_fee(config)   # -> rev_pr 때문에 일단 이곳에도 선언함\n","\n","# ------- inversion set ------- #\n","inversion = 0\n","fdist_thresh = 1\n","# ------- plot param ------- #\n","show_detail = 0\n","# ------- temp param ------- #\n","allow_osc_touch = 0\n","rsi_gap = 5\n","early_out_tpg = 0.36\n","\n","# ['strat_version', 'pos_set', 'loc_set', 'tr_set', 'ep_set', 'tp_set', 'out_set', 'lvrg_set']\n","_ = [print(json.dumps(config[key_], indent=1), end=' ') for key_ in ['strat_version', 'loc_set', 'tr_set', 'ep_set', 'tp_set', 'out_set', 'lvrg_set']]"],"metadata":{"id":"qBJfPsmJzVIr","executionInfo":{"status":"ok","timestamp":1646442430287,"user_tz":-540,"elapsed":3,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"d3988074-ac5b-4251-b63c-cf19854e63a8"},"execution_count":8,"outputs":[{"output_type":"stream","name":"stdout","text":["\"v3_3\" {\n"," \"zone\": {\n","  \"short_spread\": \"None\",\n","  \"long_spread\": \"None\",\n","  \"tr_thresh\": \"None\",\n","  \"dtk_itv\": \"5m\",\n","  \"dt_k\": \"None\",\n","  \"dc_period\": 135,\n","  \"ei_k\": 0.36,\n","  \"use_dtk_line\": 0,\n","  \"zone_rejection\": 1,\n","  \"degree\": 50,\n","  \"gap_mply\": 1,\n","  \"hc_itv\": 60,\n","  \"bbz_itv\": \"None\",\n","  \"zone_dt_k\": 0.4,\n","  \"zone_dc_period\": 135\n"," },\n"," \"point\": {\n","  \"exp_itv\": \"5m\",\n","  \"tpg_itv1\": \"5m\",\n","  \"tpg_itv0\": \"5m\",\n","  \"outg_itv1\": \"5m\",\n","  \"outg_itv0\": \"1m\",\n","  \"outg_dc_period\": \"None\",\n","  \"tf_entry\": 15,\n","  \"wick_score\": \"None\",\n","  \"body_score\": \"None\",\n","  \"wick_score2\": \"None\",\n","  \"body_score2\": \"None\",\n","  \"osc_band\": 20\n"," },\n"," \"point2\": {\n","  \"ce_gap\": 0.5\n"," }\n","} {\n"," \"ep_gap\": 0.083,\n"," \"tp_gap\": 0.36,\n"," \"decay_gap\": \"None\",\n"," \"out_gap\": -0.5,\n"," \"c_ep_gap\": 0.232,\n"," \"t_out_gap\": \"None\"\n","} {\n"," \"entry_type\": \"MARKET\",\n"," \"static_ep\": 1,\n"," \"tpout_onexec\": 0\n","} {\n"," \"non_tp\": 0,\n"," \"tp_type\": \"MARKET\",\n"," \"static_tp\": 1,\n"," \"decay_term\": 60,\n"," \"time_tp\": 0,\n"," \"partial_num\": 1,\n"," \"partial_qty_divider\": 1.5\n","} {\n"," \"out_type\": \"MARKET\",\n"," \"use_out\": 0,\n"," \"static_out\": 1,\n"," \"hl_out\": 1,\n"," \"price_restoration\": 0,\n"," \"retouch\": 0,\n"," \"retouch_out_period\": 500,\n"," \"second_out\": 0,\n"," \"approval_st_gap\": 1.5,\n"," \"second_out_gap\": 0.5\n","} {\n"," \"leverage\": 2,\n"," \"static_lvrg\": 1,\n"," \"allow_float\": 0,\n"," \"target_pct\": 0.12,\n"," \"lvrg_rejection\": 0\n","} "]}]},{"cell_type":"code","source":["# ------ slicing res_df ------ #\n","res_df = res_df_.loc[pd.to_datetime(\"2020-09-05 00:00:59.999\"):] # pd.to_datetime(\"2022-01-10 00:00:59.999\"), pd.to_datetime(\"2021-10-04 02:39:59.999000\")\n","\n","np_timeidx = np.array([intmin_np(date_) for date_ in res_df.index.to_numpy()])\n","\n","funcs = [ep_loc_point2, lvrg_set]\n","# ------------ make data_list ------------ # - 반복될 이유가 없는 phase\n","ohlc_cols = ['open', 'high', 'low', 'close']\n","ohlc_list = [res_df[col_].to_numpy() for col_ in ohlc_cols]\n","market_data_cols = ['close', 'bb_lower_5m', 'bb_upper_5m', 'rsi_1m', 'haopen', 'hahigh', 'halow', 'haclose']   # Todo - public_indi 이전에 해야할지도 모름\n","market_data_list = [res_df[col_].to_numpy() for col_ in market_data_cols]\n","\n","# ------------ public_indi ------------ # - 반복될 이유가 없는 phase\n","start_0 = time.time()\n","if public_override:\n","    res_df = public_indi(res_df, config, np_timeidx)  # 현재 대부분의 시간은 h_candle 에서 소비되고 있음\n","else:\n","    res_df = utils_public.public_indi(res_df, config, np_timeidx)\n","print(\"public_indi elapsed time :\", time.time() - start_0)\n","\n","# ------------ entlist rtc & tr 은 중복되는 여부에 따라 user 가 flexible coding 해야할 것 ------------ #\n","if utils_override:   # 현재, utils_override 하는 경우 1개의 ID 만 허용함 \n","  start_0 = time.time()\n","  res_df = enlist_rtc(res_df, config, np_timeidx)\n","  print(\"enlist_rtc elapsed time :\", time.time() - start_0)\n","  start_0 = time.time()\n","  res_df = enlist_tr(res_df, config, np_timeidx)    \n","  print(\"enlist_tr elapsed time :\", time.time() - start_0)\n","else:\n","    start_0 = time.time()\n","    for utils_, config_ in zip(utils_list, config_list):\n","        res_df = utils_.enlist_rtc(res_df, config_, np_timeidx)\n","        res_df = utils_.enlist_tr(res_df, config_, np_timeidx)\n","    print(\"elapsed time :\", time.time() - start_0)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"WstWVNihCNH8","executionInfo":{"status":"ok","timestamp":1646442439356,"user_tz":-540,"elapsed":6526,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"ba1cbeb7-3129-4ff3-e89e-e12378d8d969"},"execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["public_indi elapsed time : 3.205105781555176\n","enlist_rtc elapsed time : 0.09136557579040527\n","enlist_tr elapsed time : 0.08109879493713379\n"]}]},{"cell_type":"markdown","source":["### idep_plot"],"metadata":{"id":"RqRF1eyZ0xBL"}},{"cell_type":"code","source":["len(market_data_list)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8H3lGDv8mjx1","executionInfo":{"status":"ok","timestamp":1646442346565,"user_tz":-540,"elapsed":4,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"2e299dc5-62a4-42e5-d0db-1262e712fced"},"execution_count":34,"outputs":[{"output_type":"execute_result","data":{"text/plain":["8"]},"metadata":{},"execution_count":34}]},{"cell_type":"code","source":["open_info_df = get_open_info_df(ep_loc_v2, res_df, np_timeidx, ID_list, config_list, id_idx_list)\n","short_pr, short_obj, short_lvrg_arr, short_fee_arr, short_tpout_arr, long_pr, long_obj, long_lvrg_arr, long_fee_arr, long_tpout_arr = \\\n","get_res(res_df, open_info_df, ohlc_list, market_data_list, config_list, np_timeidx, funcs, signi=False)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":571},"id":"HHq6cr9GPBot","executionInfo":{"status":"ok","timestamp":1646442452411,"user_tz":-540,"elapsed":13060,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"7770eb4b-bc2c-4feb-d35b-a2f633233206"},"execution_count":10,"outputs":[{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 4.468376159667969\n","en_ex_pairing elapsed time : 0.05275702476501465\n","short_obj.shape : (96, 5)\n","long_obj.shape : (116, 5)\n"]},{"output_type":"display_data","data":{"image/png":"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//vf/3jggQe4du0aKpWKCRMmcODAgbu8Y4lEIika6Tn7UPkrLtBFNYl2A/tyeOMWMlLzcQRac/Daengv31TToEoMwWENiL9yDRe1iQyDGo3agDI7y9FIZUJZzmGNej23Ll0BIF3virdLNtsWgLcHzP4FTAX0h/tXX6HgOWx+HD58mKFDh6JSqTCZTISGhnLq1CmMRqO1jcFg4NSpU4SEhBT2FiWSYiMjeCUVBo1GA2AjLG3atLFJTq/T6fj777958cUX8x1nx44ddOvWzU6A7gad1vyG09mpYAdvZGQkAL169bLWubu706VLF7t2Xbp0sd4vQO/evYttq4WTJ09y6NAha7G8pdy8eTO9e/dGqcx9LPTv358rV65w8uTJO4753Xff0b17d55++mmrszYver2eXbt28dxzz9nU9+/fn7/++ovU1FSrDdWrV6ddu3bWNs2bNyckJITNmzff9T1LJJJ7S1yyM0JADY/CfVGubFgUoxz5d62as8f4KnPWuPPlXPh8YRtwfoD4JHigllljkxJPoPK23RQnU6vFxd28icqOHTvo0K4tbio1OuFHcs58XanMLQFV4KmOJWv//aqxmzdvpmXLlgQHB1vrnn76aVxcXPj9998BuHz5MgDNmjWz6du8eXPS09Otzl0LWq2WkydPotMms3TeSJITLtGs9nbcC94HRyKRSIpNus72+NmP/o+BE8bm296y6sVoshXNcxeNeBHDG4tnM373RpzQczoljH2H4P2vS9zsu6a8zGFvJjtjxIl2TaH5wzD9w8L1u1/1FQqew+ZHu3btuHr1KiaT2UV++fJlwsLCUKtzN/1zdnYmLCyMS5cuFeEuJZLiU+aJhvMWmZxelvxK1apVRWpqqti2bZvo0qWLePnll8Xly5fF1atXxYoVK6zt2rdvL7KyssTmzZtF7969RdeuXcW4ceNERESEAIS/v7+4evWq+Pfff8WLL74oOnXqJF5//XUxevToQtmxcOFC6++pxtWcyH/P3s+EEEK4u+cm/69du7YQQlivC4i1a9eKhIQEMXz4cBERESF2794trl69apOgvkaNGkKr1YodO3aIiIgI8corr4gLFy4IrVZbagnqwbzhWVpamli6dKno2LGjGD16tNDr9WLYsGE27QwGg82GAP/973+FEEJ88cUXolWrVjbF09PT2q5du3bCYDCI6dOniw4d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np/fgw8+yPbt28nNzWXw4ME89NBDLFmyxHveMSO0ydakgxQi9FXYtWBmRKSJ4sL2ncnrzeANcoA3WH1sld2OCbBGRVJZpd0yafLjFanL5eKpp57imWeeITc3t830sVlZWSxcuJDnn38enU5HTk4OjzzyCPv27ePtt9/27vfqq69y5513YrPZvDV4Z8+ezQ8//HBs/cPIC7FYwvnt8FbCY6LZngHjT4U9a+CRf0exc5/0saL1Ou+883jhhRcwGAy8/vrrzJ071+f5rl27smjRIpKSksjPz+fqq6/2Xqtee+213ommHnvsMe//iyJwrrsPHnoRunWGolIoLNbK3637b7Bb1nihPoatcrgDvKbGfejeVvvXho5hX331Vf7xj3/w6aef8vjjjxMVFcXcuXNZs2YN69evB7Q6+BMmTPD+7D01eDt16sSzzz4LyBhWBJYKpSUtLS3obZAldJbRo0erFStWqKysLFVeXq727NmjnnzySWU2m73bdOjQQX300UeqqKhI7d27V02bNk0tXrzY53dp1qxZKicnx+fY48aNU0opNXDgQJ/1Sil16623Nqh91113nVJKqYiICO+6bt26KaWUeu3ZC5RKR50+ApWchNq/L0O9/NLTakg/1PiLh6oXt3yhXvj3K+rIkSOquLhYvf322+rKK69USinVrVs37/FSU1PVypUrlc1mU3v37lU33XSTWrZsmVq7dm2D2nb0sRqzpKSkqOXLl6uSkhKVm5ur5s+fr8LCwny2Wbt2rU87Zs2apY5n1qxZx7xHtTm6vc8995zKzMxUFRUVaufOneqee+5RBoOh+vwfDVJrPxoU9N9TWVp2kX6idb53zz03TKl0VOcuUUF/H4K9LHh5qFLpqNj4sKC2I1h97KPPzVPztvygUgcNUJedj1LpqP49j21fXX3sBRdc4LNtRkaGevrpp33WzZkzJyh9rErXlrr2b0ofCyiz2azmzZunjhw5okpLS9Vnn32munfvfsw2999/v0pPT1dlZWVq79696t///rdKSkry2e6qq3spVbxcZWbuUg+t+UhdMecB1bcHavHjWvvT10kf2x6XttLH6vV6tWvXLtWjRw9lMpnUpk2bVP/+/X22Wbp0qbr22msVoM4880z15ptvKkDFxcWp3bt3q7i4OBUbG6t2796tYmNj2817F2rLZ/9G7V4d/HY0Zgn1Mew/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AoFQZ7CmugEEAoFAIBAIBAKBQCAQCAQCgUCoDJTgJRAIBAKBQCAQCAQCgUAgEAiEOsUVmeB93/veh3379qGvrw/333//Zb3217/+dZw+fRq7du3i73V2duKZZ57B/v378cwzz6Cjo4N/9tWvfhV9fX3YuXMn1qxZw9//1Kc+hf3792P//v341Kc+xd9fu3YtXnvtNfT19eGrX/1qomskwfz58/Hcc8/h9ddfx+7du/Enf/InddP2XC6HLVu2YMeOHdi9ezceeughAMDixYvx0ksvoa+vD5s3b4bjOAAA13WxefNm9PX14aWXXsKiRYv4uR544AH09fVh3759uPvuu/n7ujGlu0ZaWJaFbdu24cknn6yrth8+fBivvfYatm/fjq1btwKojzEDAO3t7fje976HvXv3Ys+ePdiwYUNdtH358uXYvn07f/X39+NP//RP66LtX/jCF7B7927s2rULjz76KHK5XN2MdUKAqfKx9epfAfKxDFPx2yX/Sv41KerZvwLkY68EUAxLMSxQP34KIB9LPjY5yMf6uBzj3buSXpZleQcOHPB6e3s9x3G8HTt2eKtWrbps17/tttu8NWvWeLt27eLvffnLX/buv/9+D4B3//33e1/60pc8AN7GjRu9n/70px4Ab/369d5LL73kAfA6Ozu9gwcPep2dnV5HR4d38OBBr6OjwwPgbdmyxVu/fr0HwPvpT3/q3XPPPcZrJH319PR4a9as8QB4LS0t3htvvOGtWrWqLtoOwGtubvYAeNls1nvppZe89evXe9/97ne9j33sYx4A7+GHH/b+4A/+wAPg/eEf/qH38MMPewC8j33sY97mzZs9AN6qVau8HTt2eK7reosXL/YOHDjgWZZlHFO6a6R9ffGLX/S+/e1ve08++aTxvNOt7YcPH/a6u7tD79XLmPnmN7/pffazn/UAeI7jeO3t7XXTdvayLMs7efKkt3Dhwmnf9rlz53qHDh3yGhoa+Pi7995762as0ysYc1PlY+vVvwLkY4Gp++2SfyX/WsmrnvwrQD72SnhRDEsxbL35V4B8LPnYyu0d+diajffL4zQu12vDhg3eU089xf//wAMPeA888MBlbcOiRYtCznHfvn1eT0+PB/hOaN++fR4A72tf+5q3adOmyHGbNm3yvva1r/H32XE9PT3e3r17+fvicbprVPr64Q9/6N155511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\n","text/plain":["<Figure size 1728x576 with 6 Axes>"]},"metadata":{}}]},{"cell_type":"markdown","metadata":{"jp-MarkdownHeadingCollapsed":true,"tags":[],"id":"Ksth13T0spcQ"},"source":["### significance_v2"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"pZlZCr2lspcR","colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"status":"ok","timestamp":1646403826141,"user_tz":-540,"elapsed":13877,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"176fe69a-d121-453e-fee3-d0c8e49a48d4"},"outputs":[{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9030976295471191\n","en_ex_pairing elapsed time : 0.09671401977539062\n","short_obj.shape : (1276, 5)\n","long_obj.shape : (1723, 5)\n","get_open_info_df elapsed time : 0.9119112491607666\n","en_ex_pairing elapsed time : 0.08403468132019043\n","short_obj.shape : (1048, 5)\n","long_obj.shape : (1382, 5)\n","get_open_info_df elapsed time : 0.9051220417022705\n","en_ex_pairing elapsed time : 0.06450653076171875\n","short_obj.shape : (839, 5)\n","long_obj.shape : (1067, 5)\n","get_open_info_df elapsed time : 0.9076461791992188\n","en_ex_pairing elapsed time : 0.047382354736328125\n","short_obj.shape : (654, 5)\n","long_obj.shape : (815, 5)\n","get_open_info_df elapsed time : 0.9283490180969238\n","en_ex_pairing elapsed time : 0.03868675231933594\n","short_obj.shape : (504, 5)\n","long_obj.shape : (601, 5)\n","get_open_info_df elapsed time : 0.9096674919128418\n","en_ex_pairing elapsed time : 0.02606034278869629\n","short_obj.shape : (349, 5)\n","long_obj.shape : (430, 5)\n","get_open_info_df elapsed time : 0.9208331108093262\n","en_ex_pairing elapsed time : 0.01675558090209961\n","short_obj.shape : (244, 5)\n","long_obj.shape : (287, 5)\n","get_open_info_df elapsed time : 0.9046146869659424\n","en_ex_pairing elapsed time : 0.011451482772827148\n","short_obj.shape : (166, 5)\n","long_obj.shape : (183, 5)\n","get_open_info_df elapsed time : 0.9113998413085938\n","en_ex_pairing elapsed time : 0.0077266693115234375\n","short_obj.shape : (96, 5)\n","long_obj.shape : (116, 5)\n","get_open_info_df elapsed time : 0.9193143844604492\n","en_ex_pairing elapsed time : 0.004385232925415039\n","short_obj.shape : (53, 5)\n","long_obj.shape : (75, 5)\n"]},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1728x576 with 30 Axes>"]},"metadata":{}}],"source":["# from google.colab import output\n","# ------------ survey param ------------ #\n","itv_num_list = [1, 3, 5, 15]\n","itv_list = ['15m', '30m', '1h', '4h']\n","# itv_list = ['3m', '5m', '15m', '30m', '1h', '4h']\n","# val_list = np.arange(, 2.0, 0.1)     # prcn 1\n","# val_list = np.arange(-0.69, -0.8, -0.01)  # prcn 2\n","# val_list = np.arange(-0.695, -0.75, -0.005)    # prcn 3\n","# val_list = np.arange(0.944, 0.945, 0.0001)    # prcn 4\n","val_list = np.arange(10, 60, 5)   # prcn -1\n","# val_list = np.arange(200, 180, -5)   # prcn -2\n","\n","# ------------ get survey_res ------------ #\n","result = []\n","config_list_copy = copy.deepcopy(config_list)\n","for set_val in val_list:\n","  config_list_copy[0].loc_set.zone.degree = set_val\n","  open_info_df = get_open_info_df(ep_loc_v2, res_df, np_timeidx, ID_list, config_list_copy, id_idx_list)\n","  result.append(get_res(res_df, open_info_df, ohlc_list, market_data_list, config_list_copy, np_timeidx, funcs, signi=True))  \n","survey_res_list = [np.array(result)[:, s_i::3] for s_i in range(3)]   # 3 for s, l, b\n","# short_res, long_res, both_res = survey_res_list\n","\n","# ------------ plot survey_res ------------ #\n","title_list = [\"short\", \"long\", \"both\"]\n","sub_title_list = ['len_pr', 'dpf', 'wr', 'sr', 'acc_pr', 'sum_pr', 'min_pr', 'liqd', 'acc_mdd', 'sum_mdd']\n","space_ = \" \" * 120\n","\n","fig = plt.figure(figsize=(24, 8))\n","plt.style.use('dark_background')\n","gs = gridspec.GridSpec(nrows=1,\n","                        ncols=3,\n","                        # height_ratios=[1, 1, 1]\n","                      )\n","# nrows, ncols, h_r = 3, 3, [1, 1, 1]\n","nrows, ncols, h_r = 3, 4, [1, 1, 1]\n","# nrows, ncols, h_r = 4, 3, [1, 1, 1, 1]\n","# if d_idx == 0:\n","# else:\n","  # nrows, ncols, h_r = 2, 2, [1, 1]\n","\n","for d_idx, (title_name, survey_res) in enumerate(zip(title_list, survey_res_list)):  \n","  inner_gs = gs[d_idx].subgridspec(nrows=nrows,\n","                        ncols=ncols,\n","                        height_ratios=h_r\n","                      )\n","  for in_idx, (data_, sub_title) in enumerate(zip(survey_res.T, sub_title_list)):\n","    plt.subplot(inner_gs[in_idx])\n","    plt.plot(val_list, data_.ravel())\n","    plt.title(sub_title)\n","\n","plt.suptitle(space_.join(title_list))\n","plt.show()\n","# print(\"\\n\")"]},{"cell_type":"markdown","source":["### legacy"],"metadata":{"id":"1GVZ03zDyU2N"}},{"cell_type":"markdown","source":["#### main_functions"],"metadata":{"id":"IWO7KkqltMFt"}},{"cell_type":"code","source":["def get_open_info_df(ep_loc_v2, res_df, np_timeidx, ID_list, config_list, id_idx_list):\n","  start_0 = time.time()\n","  # ------ get mr_res, zone_arr ------ #\n","  short_mr_res_obj = np.array([ep_loc_v2(res_df, config_, np_timeidx, show_detail=True, ep_loc_side=OrderSide.SELL) for config_ in config_list])\n","  long_mr_res_obj = np.array([ep_loc_v2(res_df, config_, np_timeidx, show_detail=True, ep_loc_side=OrderSide.BUY) for config_ in config_list])\n","  short_open_idx_list = [np.where(res_df['short_open_{}'.format(id)].to_numpy() * mr_res)[0] for id, mr_res in zip(ID_list, short_mr_res_obj[:, 0].astype(np.float64))]  # zip 으로 zone (str) 과 묶어서 dtype 변경됨\n","  long_open_idx_list = [np.where(res_df['long_open_{}'.format(id)].to_numpy() * mr_res)[0] for id, mr_res in zip(ID_list, long_mr_res_obj[:, 0].astype(np.float64))]\n","\n","  # ------ open_info_arr ------ #\n","  short_side_list = [np.full(len(list_), OrderSide.SELL) for list_ in short_open_idx_list]\n","  long_side_list = [np.full(len(list_), OrderSide.BUY) for list_ in long_open_idx_list]\n","\n","  short_zone_list = [zone_res[short_open_idx] for zone_res, short_open_idx in zip(short_mr_res_obj[:, 1], short_open_idx_list)]\n","  long_zone_list = [zone_res[long_open_idx] for zone_res, long_open_idx in zip(long_mr_res_obj[:, 1], long_open_idx_list)]\n","\n","  short_id_list = [np.full(len(list_), id) for id, list_ in zip(ID_list, short_open_idx_list)]\n","  long_id_list = [np.full(len(list_), id) for id, list_ in zip(ID_list, long_open_idx_list)]\n","\n","  selected_id_idx = np.arange(len(id_idx_list))\n","  short_id_idx_list = [np.full(len(list_), id) for id, list_ in zip(selected_id_idx, short_open_idx_list)]\n","  long_id_idx_list = [np.full(len(list_), id) for id, list_ in zip(selected_id_idx, long_open_idx_list)]\n","\n","  # ------ get open_info_df ------ #\n","  #   series 만들어서 short / long 끼리 합치고 둘이 합치고, 중복은 우선 순위 정해서 제거\n","  short_open_df_list = [pd.DataFrame(index=index_, data=np.vstack((data_)).T, columns=['side', 'zone', 'id', 'id_idx']) for index_, data_ in zip(short_open_idx_list, zip(short_side_list, short_zone_list, short_id_list, short_id_idx_list))]\n","  long_open_df_list = [pd.DataFrame(index=index_, data=np.vstack((data_)).T, columns=['side', 'zone', 'id', 'id_idx']) for index_, data_ in zip(long_open_idx_list, zip(long_side_list, long_zone_list, long_id_list, long_id_idx_list))]\n","\n","  open_info_df = pd.concat(short_open_df_list + long_open_df_list)\n","  # ------ sorting + unique ------ #\n","  open_info_df.sort_index(inplace=True)\n","  # print(len(open_info_df))\n","  # print(len(open_info_df))\n","  # open_info_df.head()\n","  print(\"get_open_info_df elapsed time :\", time.time() - start_0)\n","  return open_info_df[~open_info_df.index.duplicated(keep='first')]  # 먼저 순서를 우선으로 지정  "],"metadata":{"id":"MY1csdNRLGsk"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def get_res(res_df, open_info_df, ohlc_list, market_data_list, config_list, np_timeidx, funcs, signi=False):\n","  # ------------ make open_info_list ------------ #\n","  open_idx = open_info_df.index.to_numpy()\n","  len_df = len(res_df)\n","  test_ratio, plot_is = 0.3, 1\n","  s_idx = (open_idx < int(len_df * (1 - test_ratio))) == plot_is\n","  s_open_info_df = open_info_df[s_idx]\n","  s_open_idx = open_idx[s_idx]\n","\n","  open_info_list = [s_open_info_df[col_].to_numpy() for col_ in s_open_info_df.columns]\n","  side_arr, zone_arr, id_arr, id_idx_arr = open_info_list\n","\n","  # ------------ get paired_res ------------ #\n","  start_0 = time.time()\n","  paired_res = en_ex_pairing(res_df, s_open_idx, open_info_list, ohlc_list, market_data_list, config_list, np_timeidx, funcs)\n","  # valid_openi_arr, pair_idx_arr, pair_price_arr, lvrg_arr, fee_arr, tpout_arr = paired_res\n","  print(\"en_ex_pairing elapsed time :\", time.time() - start_0)  #  0.37 --> 0.3660471439361572 --> 0.21(lesser if)\n","\n","  # ------------ idep_plot ------------ #\n","  start_0 = time.time()\n","  h, l = ohlc_list[1:3]\n","  return idep_plot_v5(len_df, h, l, s_open_idx, side_arr, paired_res, inversion=False, sample_ratio=1 - test_ratio, signi=signi)"],"metadata":{"id":"eiQ36_SLLE3w"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def idep_plot_v5(len_df, h, l, open_idx, side_arr, paired_res, inversion=False, sample_ratio=0.7, title_position=(0.5, 0.5), fontsize=15, signi=False):\n","    if not signi:\n","        plt.style.use(['dark_background', 'fast'])\n","        fig = plt.figure(figsize=(24, 8))\n","        gs = gridspec.GridSpec(nrows=2,  # row 몇 개\n","                               ncols=3,  # col 몇 개\n","                               height_ratios=[10, 1]\n","                               # height_ratios=[10, 10, 1]\n","                               )\n","    gs_idx = 0\n","    # plt.suptitle(key)\n","\n","    if sample_ratio is not None:\n","      sample_len = int(len_df * sample_ratio)\n","    else:\n","      sample_len = len_df\n","\n","    # ------ short & long data preparation ------ #\n","    # start_0 = time.time()\n","    valid_openi_arr, pair_idx_arr, pair_price_arr, lvrg_arr, fee_arr, tpout_arr = paired_res\n","    short_valid_openi_idx = np.where(side_arr[valid_openi_arr] == OrderSide.SELL)[0]  # valid_openi_arr 에 대한 idx, # side_arr,\n","    long_valid_openi_idx = np.where(side_arr[valid_openi_arr] == OrderSide.BUY)[0]\n","\n","    valid_open_idx = open_idx[valid_openi_arr].reshape(-1, 1)\n","\n","    short_obj = np.hstack((pair_price_arr, pair_idx_arr, valid_open_idx))[short_valid_openi_idx]\n","    long_obj = np.hstack((pair_price_arr, pair_idx_arr, valid_open_idx))[long_valid_openi_idx]\n","    both_obj = np.vstack((short_obj, long_obj))\n","    print(\"short_obj.shape :\", short_obj.shape)\n","    print(\"long_obj.shape :\", long_obj.shape)\n","\n","    short_obj, long_obj, both_obj = [np.split(obj_, 5, axis=1) for obj_ in [short_obj, long_obj, both_obj]]\n","\n","    short_lvrg_arr, long_lvrg_arr = [lvrg_arr[openi_idx_].reshape(-1, 1) for openi_idx_ in [short_valid_openi_idx, long_valid_openi_idx]]\n","    short_fee_arr, long_fee_arr = [fee_arr[openi_idx_].reshape(-1, 1) for openi_idx_ in [short_valid_openi_idx, long_valid_openi_idx]]\n","    short_tpout_arr, long_tpout_arr = [tpout_arr[openi_idx_] for openi_idx_ in [short_valid_openi_idx, long_valid_openi_idx]]\n","    # print(\"elapsed time :\", time.time() - start_0)\n","\n","    # ------ plot_data ------ #\n","    try:\n","      # start_0 = time.time()\n","      short_pr = get_pr(OrderSide.SELL, *short_obj[:2], short_lvrg_arr, short_fee_arr, inversion)\n","      short_total_pr = to_total_pr(len_df, short_pr, short_obj[-2])\n","      short_cum_pr = np.cumprod(short_total_pr)\n","      s_liqd = liquidation(OrderSide.SELL, h, short_obj[:4], short_lvrg_arr, short_fee_arr)\n","      if signi:\n","        short_idep_res_obj = get_res_info_nb_v2(sample_len, short_pr, short_total_pr, short_cum_pr, s_liqd)\n","      else:\n","        gs_idx = plot_info_v3(gs, gs_idx, sample_len, short_pr, short_total_pr, short_cum_pr, s_liqd, short_lvrg_arr[-1], title_position, fontsize)\n","      # print(\"elapsed time :\", time.time() - start_0)\n","    except:\n","      gs_idx += 1\n","\n","    try:\n","      # start_0 = time.time()\n","      long_pr = get_pr(OrderSide.BUY, *long_obj[:2], long_lvrg_arr, long_fee_arr, inversion)\n","      long_total_pr = to_total_pr(len_df, long_pr, long_obj[-2])\n","      long_cum_pr = np.cumprod(long_total_pr)\n","      l_liqd = liquidation(OrderSide.BUY, l, long_obj[:4], long_lvrg_arr, long_fee_arr)\n","      if signi:\n","        long_idep_res_obj = get_res_info_nb_v2(sample_len, long_pr, long_total_pr, long_cum_pr, l_liqd)\n","      else:\n","        gs_idx = plot_info_v3(gs, gs_idx, sample_len, long_pr, long_total_pr, long_cum_pr, l_liqd, long_lvrg_arr[-1], title_position, fontsize)\n","      # print(\"elapsed time :\", time.time() - start_0)\n","    except:\n","      gs_idx += 1\n","\n","    try:\n","      # start_0 = time.time()\n","      both_pr = np.vstack((short_pr, long_pr))\n","      both_total_pr = to_total_pr(len_df, both_pr, both_obj[-2])\n","      both_cum_pr = np.cumprod(both_total_pr)\n","      b_liqd = min(s_liqd, l_liqd)\n","      if signi:\n","        both_idep_res_obj = get_res_info_nb_v2(sample_len, both_pr, both_total_pr, both_cum_pr, b_liqd)\n","      else:\n","        gs_idx = plot_info_v3(gs, gs_idx, sample_len, both_pr, both_total_pr, both_cum_pr, b_liqd, lvrg_arr[-1], title_position, fontsize)\n","      # print(\"elapsed time :\", time.time() - start_0)\n","    except:\n","      gs_idx += 1\n","\n","    if not signi:\n","        for obj, cum_pr in zip([short_obj, long_obj, both_obj], [short_cum_pr, long_cum_pr, both_cum_pr]):\n","          try:\n","            # start_0 = time.time()\n","            gs_idx = frq_dev_plot_v3(gs, gs_idx, len_df, sample_len, obj[-2], cum_pr[-1], fontsize)\n","            # print(\"elapsed time :\", time.time() - start_0)\n","          except:\n","            gs_idx += 1\n","\n","        plt.show()\n","        plt.close()\n","        return short_pr, short_obj, short_lvrg_arr, short_fee_arr, short_tpout_arr, long_pr, long_obj, long_lvrg_arr, long_fee_arr, long_tpout_arr\n","    else:\n","        return [short_idep_res_obj[:-1], long_idep_res_obj[:-1], both_idep_res_obj[:-1]]"],"metadata":{"id":"xafHpMLwESKf"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["#### get paired_res function"],"metadata":{"id":"EFyWTuscH8VH"}},{"cell_type":"code","source":["def en_ex_pairing(res_df, open_idx, open_info_list, ohlc_list, market_data_list, config_list, np_timeidx, funcs):  # 이미 충분히 줄여놓은 idx 임\n","    side_arr, zone_arr, id_arr, id_idx_arr = open_info_list\n","    id_idx_arr = id_idx_arr.astype(int)\n","\n","    ep_loc_point2, lvrg_set = funcs\n","\n","    valid_openi_list, pair_idx_list, pair_price_list, lvrg_list, fee_list, tpout_list = [[] for li in range(6)]\n","    len_df = len(res_df)\n","    len_open_idx = len(open_idx)\n","    i, open_i = 0, 0  # i for total_res_df indexing\n","\n","    while 1:\n","        # ------------ entry phase ------------ #\n","        # ------ ep_loc ------ #\n","        op_idx = open_idx[open_i]  # open_i 는 i 와 별개로 운영\n","        if op_idx < i:  # i = 이전 거래 끝난후의 res_df index, '<' : 거래 종료시점 진입 가능하다는 의미\n","            open_i += 1\n","            if open_i >= len_open_idx:\n","                break\n","            continue\n","\n","        #     1. 해당 id 로 config 재할당해야함 - 적정 config 를 뽑아내기 위한 id_idx_arr 도 필요할 것으로 보임\n","        id_idx = id_idx_arr[open_i]\n","        config = config_list[id_idx]\n","        strat_version = config.strat_version\n","        open_side = side_arr[open_i]\n","\n","        side_pos = 'short' if open_side == OrderSide.SELL else 'long'\n","        ep_arr = res_df['{}_ep_{}'.format(side_pos, strat_version)].to_numpy()  # Todo - while loop 내에서 to_numpy() 반복하느니, pd_indexing 이 낫지 않을까\n","        tp_arr = res_df['{}_tp_{}'.format(side_pos, strat_version)].to_numpy()  # => eptpout arr_list 만들어서 꺼내 사용하면 될 것\n","        out_arr = res_df['{}_out_{}'.format(side_pos, strat_version)].to_numpy()\n","\n","        # ------ ei_k & point2 ------ #\n","        i = op_idx + 1  # open_signal 이 close_bar.shift(1) 이라고 가정하고 다음 bar 부터 체결확인한다는 의미\n","        if i >= len_df:  # res_df 의 last_index 까지 돌아야함\n","            break\n","        exec_j, ep_j, tp_j, out_j, entry_done, ep, fee = check_eik_point2_exec(res_df, config, op_idx, len_df, open_side, [*ohlc_list, ep_arr], ep_loc_point2)\n","        i = exec_j\n","\n","        if not entry_done:  # 이 phase 는 exit_phase 뒤에도 있어야할 것 - entry_done var. 사용은 안하겠지만\n","            open_i += 1  # 확인 끝났으면 조기 이탈(+1), 다음 open_idx 조사 진행\n","            if open_i >= len_open_idx:\n","                break\n","            continue\n","\n","        # ------ leverage ------ #\n","        out = out_arr[out_j]\n","        leverage = lvrg_set(res_df, config, open_side, ep, out, fee)  # res_df 변수 사용됨 - 주석 처리 된 상태일뿐\n","\n","        exit_done, cross_on = 0, 0\n","        # ------ cehck tpout_onexec ------ #\n","        if not config.ep_set.static_ep and config.ep_set.entry_type == \"LIMIT\" and config.ep_set.tpout_onexec:\n","            if config.tp_set.static_tp:\n","                tp_j = ep_j  # tpout_onexec = using dynamic_ep --> using ep_j 에 대한 이유\n","            if config.out_set.static_out:\n","                out_j = ep_j\n","        while 1:\n","            # ------------ exit phase ------------ #\n","            i += 1  # entry 다음 tick 부터 exit 허용\n","            if i >= len_df:  # res_df 의 last_index 까지 돌아야함\n","                break\n","\n","            if not config.tp_set.static_tp:\n","                tp_j = i\n","            if not config.out_set.static_out:\n","                out_j = i\n","\n","            # ------------ tp ------------ #\n","            if not config.tp_set.non_tp:\n","                # ------ limit_tp ------ #\n","                if config.tp_set.tp_type in ['LIMIT', 'BOTH']:\n","                    exit_done, tp, fee = check_limit_tp_exec(res_df, config, open_i, i, tp_j, len_df, fee, open_side, exit_done, [*ohlc_list, [tp_arr]])  # 여기서는 j -> i 로 변경해야함\n","                # ------ market_tp ------ #\n","                if not exit_done and config.tp_set.tp_type in ['MARKET', 'BOTH']:\n","                    exit_done, cross_on, tp, fee = check_market_tp_exec(config, open_i, i, len_df, fee, open_side, cross_on, exit_done,\n","                                                                        [np_timeidx, *market_data_list])\n","            # ------ out ------ #\n","            if not exit_done and config.out_set.use_out and i != len_df - 1:\n","                exit_done, tp, fee = check_out(config, open_i, i, out_j, len_df, fee, open_side, exit_done, [*ohlc_list, out_arr])\n","\n","            if exit_done:  # 이 phase 는 exit_phase 뒤에도 있어야할 것 - entry_done var. 사용은 안하겠지만\n","                # ------ append dynamic vars. ------ #\n","                valid_openi_list.append(open_i)  # side, zone, start_ver arr 모두 openi_list 로 접근하기 위해 open_i 를 담음\n","                pair_idx_list.append([exec_j, i])  # entry & exit (체결 기준임)\n","                pair_price_list.append([ep, tp])\n","                lvrg_list.append(leverage)\n","                fee_list.append(fee)\n","                tpout_list.append([tp_arr[tp_j], out_arr[out_j]])  # for tpout_line plot_check\n","\n","                open_i += 1  # 다음 open_idx 조사 진행\n","                break\n","\n","        if i >= len_df or open_i >= len_open_idx:  # res_df 의 last_index 까지 돌아야함\n","            break\n","        else:\n","            continue\n","\n","    return np.array(valid_openi_list), np.array(pair_idx_list), np.array(pair_price_list), np.array(lvrg_list), np.array(fee_list), np.array(tpout_list)\n","\n","\n","def check_eik_point2_exec(res_df, config, op_idx, len_df, open_side, np_datas, ep_loc_point2):\n","    o, h, l, c, ep_arr = np_datas\n","    ep_j = op_idx\n","    tp_j = op_idx\n","    out_j = op_idx\n","\n","    strat_version = config.strat_version\n","    allow_ep_in = 0 if strat_version in ['v5_2'] else 1\n","    # allow_ep_in = 0\n","    entry_done = 0\n","    entry_open = 0\n","    ep = None\n","\n","    if config.ep_set.entry_type == \"LIMIT\":\n","        fee = config.trader_set.limit_fee\n","\n","        for e_j in range(op_idx + 1, len_df):\n","            # ------ index setting for dynamic options ------ #\n","            if not config.ep_set.static_ep:\n","                ep_j = e_j  # dynamic_ep 를 위한 ep_index var.\n","                out_j = e_j  # dynamic_out 를 위한 out_index var. - 조건식이 static_ep 와 같이 있는 이유 모름 => dynamic_lvrg 로 사료됨\n","\n","            if not config.tp_set.static_tp:\n","                tp_j = e_j\n","\n","            # if short_ep.iloc[initial_i] == np.inf:  #  np.inf caution\n","            #   break\n","            # ------ ei_k ------ # - limit 사용하면 default 로 ei_k 가 존재해야함\n","            #   Todo\n","            #    1. rtc_1 & gap => numpy 화 안해도 되나\n","            if open_side == OrderSide.SELL:\n","                if l[e_j] <= res_df['h_short_rtc_1_{}'.format(strat_version)].iloc[tp_j] - \\\n","                        res_df['h_short_rtc_gap_{}'.format(strat_version)].iloc[tp_j] * config.loc_set.zone.ei_k:\n","                    break\n","            else:\n","                if h[e_j] >= res_df['h_long_rtc_1_{}'.format(strat_version)].iloc[tp_j] + \\\n","                        res_df['h_long_rtc_gap_{}'.format(strat_version)].iloc[tp_j] * config.loc_set.zone.ei_k:\n","                    break\n","\n","            # ------ point2 ------ #\n","            if not allow_ep_in:\n","                allow_ep_in, out_j = ep_loc_point2(res_df, config, e_j, out_j, side=open_side)\n","\n","            # ------ check ep_exec ------ #\n","            if allow_ep_in:\n","                if open_side == OrderSide.SELL:\n","                    if h[e_j] >= ep_arr[ep_j]:\n","                        entry_done = 1\n","                        if o[e_j] >= ep_arr[ep_j]:\n","                            ep = o[e_j]\n","                        else:\n","                            ep = ep_arr[ep_j]\n","                        break\n","                else:\n","                    if l[e_j] <= ep_arr[ep_j]:\n","                        entry_done = 1\n","                        if o[e_j] <= ep_arr[ep_j]:\n","                            ep = o[e_j]\n","                        else:\n","                            ep = ep_arr[ep_j]\n","                        break\n","\n","    else:  # market entry\n","        e_j = op_idx + 1\n","        entry_done = True\n","        ep = c[op_idx]\n","        fee = config.trader_set.market_fee\n","\n","    return e_j, ep_j, tp_j, out_j, entry_done, ep, fee  # 다음 start_i <-- e_j 로 변경\n","    #   e_j => 다음 phase 의 시작 index <-> ep_j : ep 의 기준 index\n","    #   ep_j, tp_j, out_j 가 return 되어야함 - exit phase 에서 이어가기 위함\n","\n","\n","def check_limit_tp_exec(res_df, config, open_i, j, tp_j, len_df, fee, open_side, exit_done, np_datas):\n","    o, h, l, c, tps = np_datas\n","    tp = None\n","    strat_version = config.strat_version\n","    len_tps = len(tps)\n","\n","    for tp_i, tp_arr in enumerate(tps):\n","        #     decay adjustment    #\n","        #     tp_j includes dynamic_j - functionalize  #\n","        try:\n","            if config.tr_set.decay_gap != \"None\":\n","                decay_share = (j - open_i) // config.tp_set.decay_term\n","                decay_remain = (j - open_i) % config.tp_set.decay_term\n","                if j != open_i and decay_remain == 0:\n","                    if open_side == OrderSide.SELL:\n","                        tp_arr[tp_j] += res_df['h_short_rtc_gap_{}'.format(strat_version)].iloc[open_i] * config.tr_set.decay_gap * decay_share\n","                    else:\n","                        tp_arr[tp_j] -= res_df['h_long_rtc_gap_{}'.format(strat_version)].iloc[open_i] * config.tr_set.decay_gap * decay_share\n","        except:\n","            pass\n","\n","        if open_side == OrderSide.SELL:\n","            if l[j] <= tp_arr[tp_j]:  # and partial_tp_cnt == tp_i:  # we use static tp now\n","                # if l[j] <= tp_arr[j] <= h[j]: --> 이건 잘못되었음\n","                # partial_tp_cnt += 1 --> partial_tp 보류\n","\n","                # ------ dynamic tp ------ #\n","                if tp_arr[j] != tp_arr[j - 1] and not config.tp_set.static_tp:\n","                    # tp limit 이 불가한 경우 - open 이 이미, tp 를 넘은 경우\n","                    if o[j] < tp_arr[j]:\n","                        tp = o[j]\n","                    # tp limit 이 가능한 경우 - open 이 아직, tp 를 넘지 않은 경우\n","                    else:\n","                        tp = tp_arr[j]\n","                # ------ static tp ------ #\n","                else:\n","                    #   tp limit 이 불가한 경우 - open 이 이미, tp 를 넘은 경우\n","                    if o[j] < tp_arr[tp_j]:  # static 해놓고 decay 사용하면 dynamic 이니까\n","                        if config.tr_set.decay_gap != \"None\" and decay_remain == 0:\n","                            tp = o[j]  # tp_j -> open_i 를 가리키기 때문에 decay 는 한번만 진행되는게 맞음\n","                        else:\n","                            tp = tp_arr[tp_j]\n","                    else:\n","                        tp = tp_arr[tp_j]\n","\n","                if tp_i == len_tps - 1:\n","                    exit_done = 1  # partial 을 고려해 exit_done = 1 상태는 tp_i 가 last_index 로 체결된 경우만 해당\n","\n","        else:\n","            if h[j] >= tp_arr[tp_j]:\n","                # ------ dynamic tp ------ #\n","                if tp_arr[j] != tp_arr[j - 1] and not config.tp_set.static_tp:\n","                    if o[j] > tp_arr[j]:\n","                        tp = o[j]\n","                    else:\n","                        tp = tp_arr[j]\n","\n","                # ------ static tp ------ #\n","                else:\n","                    if o[j] > tp_arr[tp_j]:\n","                        if config.tr_set.decay_gap != \"None\" and decay_remain == 0:\n","                            tp = o[j]\n","                        else:\n","                            tp = tp_arr[tp_j]\n","                    else:\n","                        tp = tp_arr[tp_j]\n","\n","                if tp_i == len_tps - 1:\n","                    exit_done = 1  # partial 을 고려해 exit_done = 1 상태는 tp_i 가 last_index 로 체결된 경우만 해당\n","\n","    if exit_done:\n","        fee += config.trader_set.limit_fee\n","\n","    return exit_done, tp, fee\n","\n","\n","def check_market_tp_exec(config, open_i, j, len_df, fee, open_side, cross_on, exit_done, np_datas):\n","    np_timeidx, c, bb_lower_5m, bb_upper_5m, rsi_exit, ha_o, ha_h, ha_l, ha_c = np_datas\n","    tp = None\n","    strat_version = config.strat_version\n","\n","    # ------ timestamp ------ #\n","    if config.tp_set.time_tp:\n","        if np_timeidx[j] % config.loc_set.point.tf_entry == config.loc_set.point.tf_entry - 1 and j != open_i:\n","            exit_done = 1\n","\n","    # ------ rsi ------ # -> vectorize 가능함 => 추후 적용\n","    if strat_version in config.trader_set.rsi_out_stratver:\n","        if open_side == OrderSide.SELL:\n","            if (rsi_exit[j - 1] >= 50 - config.loc_set.point.osc_band) & (rsi_exit[j] < 50 - config.loc_set.point.osc_band):\n","                exit_done = 1\n","        else:\n","            if (rsi_exit[j - 1] <= 50 + config.loc_set.point.osc_band) & (rsi_exit[j] > 50 + config.loc_set.point.osc_band):\n","                exit_done = 1\n","\n","    # ------ rsi ------ # -> vectorize 가능함 => 추후 적용\n","    if strat_version in ['v3_3']:\n","        if open_side == OrderSide.SELL:\n","          if (ha_o[j] < ha_c[j]) & (ha_o[j] == ha_l[j]):   # 양봉 출현\n","              exit_done = 1\n","        else:\n","          if (ha_o[j] > ha_c[j]) & (ha_o[j] == ha_h[j]):  # 음봉 출현\n","              exit_done = 1\n","\n","    # ------------ early out ------------ #\n","    # ------ bb ------ # --> cross_on 기능은 ide latency 개선 여부에 해당되지 않음\n","    if strat_version in ['v5_2']:\n","        if open_side == OrderSide.SELL:\n","            if c[j] < bb_lower_5m[j] < c[j - 1]:\n","                cross_on = 1\n","            if cross_on == 1 and c[j] > bb_upper_5m[j] > c[j - 1]:\n","                exit_done = 1\n","        else:\n","            if c[j] > bb_upper_5m[j] > c[j - 1]:\n","                cross_on = 1\n","            if cross_on == 1 and c[j] < bb_lower_5m[j] < c[j - 1]:\n","                exit_done = 1\n","\n","    if exit_done:\n","        tp = c[j]\n","        fee += config.trader_set.market_fee\n","\n","    return exit_done, cross_on, tp, fee\n","\n","\n","def check_out(config, open_i, j, out_j, len_df, fee, open_side, exit_done, np_datas):\n","    o, h, l, c, out_arr = np_datas\n","    tp = None\n","\n","    if config.out_set.hl_out:\n","        if open_side == OrderSide.SELL:\n","            if h[j] >= out_arr[out_j]:  # check out only once\n","                exit_done = 1\n","        else:\n","            if l[j] <= out_arr[out_j]:  # check out only once\n","                exit_done = 1\n","    else:  # close_out\n","        if open_side == OrderSide.SELL:\n","            if c[j] >= out_arr[out_j]:  # check out only once\n","                exit_done = 1\n","        else:\n","            if c[j] <= out_arr[out_j]:  # check out only once\n","                tp = c[j]\n","                exit_done = 1\n","\n","    if exit_done:\n","        if config.out_set.hl_out:\n","            tp = out_arr[out_j]\n","        else:\n","            tp = c[j]\n","\n","        if open_side == OrderSide.SELL:\n","            if o[j] >= out_arr[out_j]:\n","                tp = o[j]\n","        else:\n","            if o[j] <= out_arr[out_j]:\n","                tp = o[j]\n","\n","        fee += config.trader_set.market_fee\n","\n","    return exit_done, tp, fee\n"],"metadata":{"id":"qfbtFVMR01UJ","executionInfo":{"status":"ok","timestamp":1646442090885,"user_tz":-540,"elapsed":2625,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}}},"execution_count":28,"outputs":[]},{"cell_type":"markdown","source":["#### idep_plot function"],"metadata":{"id":"zhZuT7pbCj4h"}},{"cell_type":"code","source":["def idep_plot_v4(len_df, h, l, open_idx, side_arr, paired_res, inversion=False, sample_ratio=0.7, title_position=(0.5, 0.5), fontsize=15):\n","    plt.style.use(['dark_background', 'fast'])\n","    fig = plt.figure(figsize=(24, 8))\n","    gs = gridspec.GridSpec(nrows=2,  # row 몇 개\n","                           ncols=3,  # col 몇 개\n","                           height_ratios=[10, 1]\n","                           # height_ratios=[10, 10, 1]\n","                           )\n","    gs_idx = 0\n","    # plt.suptitle(key)\n","\n","    if sample_ratio is not None:\n","      sample_len = int(len_df * sample_ratio)\n","    else:\n","      sample_len = len_df\n","\n","    # ------ short & long data preparation ------ #\n","    # start_0 = time.time()\n","    valid_openi_arr, pair_idx_arr, pair_price_arr, lvrg_arr, fee_arr, tpout_arr = paired_res\n","    short_valid_openi_idx = np.where(side_arr[valid_openi_arr] == OrderSide.SELL)[0]  # valid_openi_arr 에 대한 idx, # side_arr,\n","    long_valid_openi_idx = np.where(side_arr[valid_openi_arr] == OrderSide.BUY)[0]\n","\n","    valid_open_idx = open_idx[valid_openi_arr].reshape(-1, 1)\n","\n","    short_obj = np.hstack((pair_price_arr, pair_idx_arr, valid_open_idx))[short_valid_openi_idx]\n","    long_obj = np.hstack((pair_price_arr, pair_idx_arr, valid_open_idx))[long_valid_openi_idx]\n","    both_obj = np.vstack((short_obj, long_obj))\n","    print(\"short_obj.shape :\", short_obj.shape)\n","    print(\"long_obj.shape :\", long_obj.shape)\n","\n","    short_obj, long_obj, both_obj = [np.split(obj_, 5, axis=1) for obj_ in [short_obj, long_obj, both_obj]]\n","\n","    short_lvrg_arr, long_lvrg_arr = [lvrg_arr[openi_idx_].reshape(-1, 1) for openi_idx_ in [short_valid_openi_idx, long_valid_openi_idx]]\n","    short_fee_arr, long_fee_arr = [fee_arr[openi_idx_].reshape(-1, 1) for openi_idx_ in [short_valid_openi_idx, long_valid_openi_idx]]\n","    short_tpout_arr, long_tpout_arr = [tpout_arr[openi_idx_] for openi_idx_ in [short_valid_openi_idx, long_valid_openi_idx]]\n","    # print(\"elapsed time :\", time.time() - start_0)\n","\n","    # ------ plot_data ------ #\n","    try:\n","      # start_0 = time.time()\n","      short_pr = get_pr(OrderSide.SELL, *short_obj[:2], short_lvrg_arr, short_fee_arr, inversion)\n","      short_total_pr = to_total_pr(len_df, short_pr, short_obj[-2])\n","      short_cum_pr = np.cumprod(short_total_pr)\n","      s_liqd = liquidation(OrderSide.SELL, h, short_obj[:4], short_lvrg_arr, short_fee_arr)\n","      gs_idx = plot_info_v3(gs, gs_idx, sample_len, short_pr, short_total_pr, short_cum_pr, s_liqd, short_lvrg_arr[-1], title_position, fontsize)\n","      # print(\"elapsed time :\", time.time() - start_0)\n","    except Exception as e:\n","      print(e)\n","      gs_idx += 1\n","\n","    try:\n","      # start_0 = time.time()\n","      long_pr = get_pr(OrderSide.BUY, *long_obj[:2], long_lvrg_arr, long_fee_arr, inversion)\n","      long_total_pr = to_total_pr(len_df, long_pr, long_obj[-2])\n","      long_cum_pr = np.cumprod(long_total_pr)\n","      l_liqd = liquidation(OrderSide.BUY, l, long_obj[:4], long_lvrg_arr, long_fee_arr)\n","      gs_idx = plot_info_v3(gs, gs_idx, sample_len, long_pr, long_total_pr, long_cum_pr, l_liqd, long_lvrg_arr[-1], title_position, fontsize)\n","      # print(\"elapsed time :\", time.time() - start_0)\n","    except:\n","      gs_idx += 1\n","\n","    try:\n","      # start_0 = time.time()\n","      both_pr = np.vstack((short_pr, long_pr))\n","      both_total_pr = to_total_pr(len_df, both_pr, both_obj[-2])\n","      both_cum_pr = np.cumprod(both_total_pr)\n","      b_liqd = min(s_liqd, l_liqd)\n","      gs_idx = plot_info_v3(gs, gs_idx, sample_len, both_pr, both_total_pr, both_cum_pr, b_liqd, lvrg_arr[-1], title_position, fontsize)\n","      # print(\"elapsed time :\", time.time() - start_0)\n","    except:\n","      gs_idx += 1\n","\n","    for obj, cum_pr in zip([short_obj, long_obj, both_obj], [short_cum_pr, long_cum_pr, both_cum_pr]):\n","      try:\n","        # start_0 = time.time()\n","        gs_idx = frq_dev_plot_v3(gs, gs_idx, len_df, sample_len, obj[-2], cum_pr[-1], fontsize)\n","        # print(\"elapsed time :\", time.time() - start_0)\n","      except:\n","        gs_idx += 1\n","\n","    plt.show()\n","    plt.close()\n","\n","    return short_pr, short_obj, short_lvrg_arr, short_fee_arr, short_tpout_arr, long_pr, long_obj, long_lvrg_arr, long_fee_arr, long_tpout_arr"],"metadata":{"id":"F5E9llWOTZi6"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Up1TNNxbfKbk","jp-MarkdownHeadingCollapsed":true,"tags":[]},"source":["#### fucntional res_plot()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"YEruNXz_jYo4"},"outputs":[],"source":["# t_w_s = np.sum(np.where((np_zone_list == 't') & (np_pr > 1) & (np_side_list == 's'), 1, 0))\n","# t_w_s2 = np.sum(np.where((np_zone_list == 't') & (np_pr > 1) & (np_side_list in ['s']), 1, 0))\n","# t_w_s == t_w_s2\n","\n","# tc_zone_wl(np_zone_list, np_pr, np_side_list, zone=['l', 's'])\n","res_info(np_pr, tp_ratio_list, dr_list)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"WQ0ISsnIdwH7"},"outputs":[],"source":["def tc_zone_wl(np_zone_list, np_pr, np_side_list, zone=['l', 's']):  \n","\n","  t_w_s = np.sum(np.where((np_zone_list == 't') & (np_pr > 1) & (np_side_list in zone), 1, 0))\n","  c_w_s = np.sum(np.where((np_zone_list == 'c') & (np_pr > 1) & (np_side_list in zone), 1, 0))\n","  t_ls_s = np.sum(np.where((np_zone_list == 't') & (np_pr < 1) & (np_side_list in zone), 1, 0))\n","  c_ls_s = np.sum(np.where((np_zone_list == 'c') & (np_pr < 1) & (np_side_list in zone), 1, 0))\n","\n","  return t_w, c_w, t_ls, c_ls\n","\n","\n","def res_info(np_pr, tp_ratio_list, dr_list):\n","\n","  total_pr = np.cumprod(np_pr)\n","\n","  for_sum_pr = np_pr - 1\n","  for_sum_pr[0] = 1\n","  sum_pr = np.cumsum(for_sum_pr)\n","  sum_pr = np.where(sum_pr < 0, 0, sum_pr)\n","\n","  wr = len(np_pr[np_pr > 1]) / len(np_pr[np_pr != 1])\n","  \n","  total_rollmax_pr = np.maximum.accumulate(total_pr)\n","  total_acc_mdd = np.max((total_rollmax_pr - total_pr) / total_rollmax_pr)\n","  total_rollmax_sumpr = np.maximum.accumulate(sum_pr)\n","  total_sum_mdd = np.max((total_rollmax_sumpr - sum_pr) / total_rollmax_sumpr)\n","\n","  np_tp_ratio_list = np.array(tp_ratio_list) # 초기에 tr 을 정하는거라 mean 사용하는게 맞음\n","  mean_tr = np.mean(np_tp_ratio_list[np.isnan(np_tp_ratio_list) == 0])\n","\n","  np_dr_list = np.array(dr_list) # 초기에 tr 을 정하는거라 mean 사용하는게 맞음\n","  mean_dr = np.mean(np_dr_list[np.isnan(np_dr_list) == 0])\n","\n","  return total_pr, sum_pr, wr, total_acc_mdd, total_sum_mdd, mean_tr, mean_dr\n","\n","\n","# def res_plot(res_df, pr_list, zone_list, side_list, tp_ratio_list, dr_list, nontp_liqd_list, nontp_pr_list, config, liqd_list):\n","def res_plot():\n","\n","    fontsize = 10\n","    plt.style.use('default')\n","    # mpl.rcParams.update(mpl.rcParamsDefault)\n","\n","    fig = plt.figure(figsize=(14, 10))\n","\n","    gs = gridspec.GridSpec(nrows=3, # row 몇 개 \n","                            ncols=3, # col 몇 개 \n","                            height_ratios=[10, 10, 1]\n","                          )\n","    # plt.figure(figsize=(16, 12))\n","    # plt.figure(figsize=(12, 8))\n","    # plt.figure(figsize=(10, 6))\n","    plt.suptitle(key)\n","\n","    try:\n","      np_pr = np.array(pr_list)\n","\n","      sr = sharpe_ratio(np_pr)\n","\n","      dpf = (len(res_df) / 1440) / len(np_pr)\n","\n","      np_zone_list = np.array(zone_list)\n","      # np_pr_list = np.array(pr_list)\n","      np_side_list = np.array(side_list)\n","\n","      t_w = np.sum(np.where((np_zone_list == 't') & (np_pr > 1), 1, 0))\n","      c_w = np.sum(np.where((np_zone_list == 'c') & (np_pr > 1), 1, 0))\n","      t_ls = np.sum(np.where((np_zone_list == 't') & (np_pr < 1), 1, 0))\n","      c_ls = np.sum(np.where((np_zone_list == 'c') & (np_pr < 1), 1, 0))\n","\n","      # np_pr = (np.array(pr_list) - 1) * config.lvrg_set.leverage + 1\n","\n","      # ----- fake_pr ----- #\n","      # np_pr = np.where(np_pr > 1, 1 + (np_pr - 1) * 3, np_pr)\n","\n","      total_pr = np.cumprod(np_pr)\n","\n","      for_sum_pr = np_pr - 1\n","      for_sum_pr[0] = 1\n","      sum_pr = np.cumsum(for_sum_pr)\n","      sum_pr = np.where(sum_pr < 0, 0, sum_pr)\n","\n","      wr = len(np_pr[np_pr > 1]) / len(np_pr[np_pr != 1])\n","      \n","      total_rollmax_pr = np.maximum.accumulate(total_pr)\n","      total_acc_mdd = np.max((total_rollmax_pr - total_pr) / total_rollmax_pr)\n","      total_rollmax_sumpr = np.maximum.accumulate(sum_pr)\n","      total_sum_mdd = np.max((total_rollmax_sumpr - sum_pr) / total_rollmax_sumpr)\n","\n","      np_tp_ratio_list = np.array(tp_ratio_list) # 초기에 tr 을 정하는거라 mean 사용하는게 맞음\n","      mean_tr = np.mean(np_tp_ratio_list[np.isnan(np_tp_ratio_list) == 0])\n","\n","      np_dr_list = np.array(dr_list) # 초기에 tr 을 정하는거라 mean 사용하는게 맞음\n","      mean_dr = np.mean(np_dr_list[np.isnan(np_dr_list) == 0])\n","\n","      # pr_gap = (np_pr - 1) / config.lvrg_set.leverage + fee\n","      # tp_gap_ = pr_gap[pr_gap > 0]\n","      # # mean_config.tr_set.tp_gap = np.mean(pr_gap[pr_gap > 0])\n","      # mean_ls_gap = np.mean(pr_gap[pr_gap < 0])\n","\n","      # ---- profit fee ratio ---- #\n","      # mean_pgfr = np.mean((tp_gap_ - fee) / abs(tp_gap_ + fee))\n","\n","      plt.subplot(gs[0])\n","      plt.plot(total_pr)\n","      plt.plot(sum_pr, color='gold')\n","      if len(nontp_liqd_list) != 0:\n","        plt.title(\"wr : %.3f\\n len(td) : %s\\n dpf : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n sum_pr : %.3f\\n sr : %.3f\"\n","                  % (wr, len(np_pr[np_pr != 1]), dpf, np.min(np_pr), total_pr[-1], sum_pr[-1], sr) + \\\n","                  \"\\n acc_mdd : -%.3f\\n sum_mdd : -%.3f\\n leverage %s\\n liqd : %.3f\\n mean_tr : %.3f\\n mean_dr : %.3f\"\n","                  % (total_acc_mdd, total_sum_mdd, config.lvrg_set.leverage, min(liqd_list), mean_tr, mean_dr)  + \\\n","                  \"\\n nontp_liqd_cnt : %s\\nnontp_liqd : %.3f\\nontp_liqd_pr : %.3f\\n tw cw tls cls : %s %s %s %s\"\n","                  % (len(nontp_liqd_list), min(nontp_liqd_list), min(nontp_pr_list), t_w, c_w, t_ls, c_ls) ,\n","                  position=title_position, fontsize=fontsize)\n","      else:\n","        plt.title(\"wr : %.3f\\n len(td) : %s\\n dpf : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n sum_pr : %.3f\\n sr : %.3f\" \n","                  % (wr, len(np_pr[np_pr != 1]), dpf, np.min(np_pr), total_pr[-1], sum_pr[-1], sr) + \\\n","                  \"\\n acc_mdd : -%.3f\\n sum_mdd : -%.3f\\n leverage %s\\n liqd : %.3f\\n mean_tr : %.3f\\n mean_dr : %.3f\"\n","                  % (total_acc_mdd, total_sum_mdd, config.lvrg_set.leverage, min(liqd_list), mean_tr, mean_dr)  + \\\n","                  \"\\n nontp_liqd_cnt : %s\\n tw cw tls cls : %s %s %s %s\"\n","                  % (len(nontp_liqd_list), t_w, c_w, t_ls, c_ls) ,\n","                  position=title_position, fontsize=fontsize)\n","      # plt.show()\n","\n","      survey_df.iloc[survey_i] = wr, sr, len(np_pr[np_pr != 1]), dpf, \\\n","        total_pr[-1], sum_pr[-1], total_acc_mdd, total_sum_mdd, min(liqd_list), np.min(np_pr), mean_tr, mean_dr\n","\n","      print('supblot231 passed')\n","\n","    except Exception as e:\n","      print(\"error in 231 :\", e)\n","\n","\n","    try:\n","      #         short only      #\n","      short_np_pr = np.array(short_list)\n","\n","      short_sr = sharpe_ratio(short_np_pr)\n","\n","      short_dpf = (len(res_df) / 1440) / len(short_np_pr)\n","\n","      short_total_pr = np.cumprod(short_np_pr)\n","      \n","      short_for_sum_pr = short_np_pr - 1\n","      short_for_sum_pr[0] = 1\n","      short_sum_pr = np.cumsum(short_for_sum_pr)\n","      short_sum_pr = np.where(short_sum_pr < 0, 0, short_sum_pr)\n","\n","      short_wr = len(short_np_pr[short_np_pr > 1]) / len(short_np_pr[short_np_pr != 1])\n","      \n","      t_w_s = np.sum(np.where((np_zone_list == 't') & (np_pr > 1) & (np_side_list == 's'), 1, 0))\n","      c_w_s = np.sum(np.where((np_zone_list == 'c') & (np_pr > 1) & (np_side_list == 's'), 1, 0))\n","      t_ls_s = np.sum(np.where((np_zone_list == 't') & (np_pr < 1) & (np_side_list == 's'), 1, 0))\n","      c_ls_s = np.sum(np.where((np_zone_list == 'c') & (np_pr < 1) & (np_side_list == 's'), 1, 0))\n","\n","      short_rollmax_pr = np.maximum.accumulate(short_total_pr)\n","      short_acc_mdd = np.max((short_rollmax_pr - short_total_pr) / short_rollmax_pr)\n","      short_rollmax_sumpr = np.maximum.accumulate(short_sum_pr)\n","      short_sum_mdd = np.max((short_rollmax_sumpr - short_sum_pr) / short_rollmax_sumpr)\n","\n","      np_short_tp_ratio_list = np.array(short_tp_ratio_list)\n","      mean_short_tr = np.mean(np_short_tp_ratio_list[np.isnan(np_short_tp_ratio_list) == 0])\n","      \n","      np_short_dr_list = np.array(short_dr_list)\n","      mean_short_dr = np.mean(np_short_dr_list[np.isnan(np_short_dr_list) == 0])\n","      \n","      # short_pr_gap = (short_np_pr - 1) / config.lvrg_set.leverage + fee\n","      # short_tp_gap = short_pr_gap[short_pr_gap > 0]\n","      # # mean_short_tp_gap = np.mean(short_pr_gap[short_pr_gap > 0])\n","      # # mean_short_ls_gap = np.mean(short_pr_gap[short_pr_gap < 0])\n","\n","      # mean_short_pgfr = np.mean((short_tp_gap - fee) / abs(short_tp_gap + fee))\n","      \n","      # plt.subplot(232)\n","      plt.subplot(gs[1])\n","      plt.plot(short_total_pr)\n","      plt.plot(short_sum_pr, color='gold')\n","      if len(nontp_short_liqd_list) != 0:   \n","\n","        max_nontp_short_term = len(res_df) - nontp_short_indexs[0]\n","        \n","        plt.title(\"wr : %.3f\\nlen(short_td) : %s\\n dpf : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n sum_pr : %.3f\\n sr : %.3f\"\n","                  % (short_wr, len(short_np_pr[short_np_pr != 1]), short_dpf, np.min(short_np_pr), short_total_pr[-1], short_sum_pr[-1], short_sr) + \\\n","                  \"\\n acc_mdd : -%.3f\\n sum_mdd : -%.3f\\n leverage %s\\n liqd : %.3f\\n mean_tr : %.3f\\n mean_dr : %.3f\"\n","                  % (short_acc_mdd, short_sum_mdd, config.lvrg_set.leverage, min(short_liqd_list), mean_short_tr, mean_short_dr) + \\\n","                  \"\\n nontp_liqd_cnt : %s\\n nontp_liqd : %.3f\\n nontp_liqd_pr : %.3f\\n max_nontp_term : %s\\n tw cw tls cls : %s %s %s %s\"\n","                  % (len(nontp_short_liqd_list), min(nontp_short_liqd_list), min(nontp_short_pr_list), max_nontp_short_term, t_w_s, c_w_s, t_ls_s, c_ls_s) ,\n","                  position=title_position, fontsize=fontsize)\n","      else:\n","        plt.title(\"wr : %.3f\\nlen(short_td) : %s\\n dpf : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n sum_pr : %.3f\\n sr : %.3f\"\n","                  % (short_wr, len(short_np_pr[short_np_pr != 1]), short_dpf, np.min(short_np_pr), short_total_pr[-1], short_sum_pr[-1], short_sr) + \\\n","                  \"\\n acc_mdd : -%.3f\\n sum_mdd : -%.3f\\n leverage %s\\n liqd : %.3f\\n mean_tr : %.3f\\n mean_dr : %.3f\"\n","                  % (short_acc_mdd, short_sum_mdd, config.lvrg_set.leverage, min(short_liqd_list), mean_short_tr, mean_short_dr) + \\\n","                  \"\\n nontp_liqd_cnt : %s\\n tw cw tls cls : %s %s %s %s\"\n","                  % (len(nontp_short_liqd_list), t_w_s, c_w_s, t_ls_s, c_ls_s),\n","                  position=title_position, fontsize=fontsize)\n","   \n","      short_survey_df.iloc[survey_i] = short_wr, short_sr, len(short_np_pr[short_np_pr != 1]), short_dpf, \\\n","        short_total_pr[-1], short_sum_pr[-1], short_acc_mdd, short_sum_mdd, min(short_liqd_list), np.min(short_np_pr), mean_short_tr, mean_short_dr\n","        \n","      print('supblot232 passed')\n","    \n","    except Exception as e:\n","      print(\"error in 232 :\", e)\n","\n","    try:\n","      #         long only      #\n","      long_np_pr = np.array(long_list)\n","      # long_np_pr = (np.array(long_list) - 1) * config.lvrg_set.leverage + 1\n","\n","      long_sr = sharpe_ratio(long_np_pr)\n","\n","      long_dpf = (len(res_df) / 1440) / len(long_np_pr)\n","\n","      long_total_pr = np.cumprod(long_np_pr)\n","      \n","      long_for_sum_pr = long_np_pr - 1\n","      long_for_sum_pr[0] = 1\n","      long_sum_pr = np.cumsum(long_for_sum_pr)\n","      long_sum_pr = np.where(long_sum_pr < 0, 0, long_sum_pr)\n","\n","      long_wr = len(long_np_pr[long_np_pr > 1]) / len(long_np_pr[long_np_pr != 1])\n","\n","      t_w_l = np.sum(np.where((np_zone_list == 't') & (np_pr > 1) & (np_side_list == 'l'), 1, 0))\n","      c_w_l = np.sum(np.where((np_zone_list == 'c') & (np_pr > 1) & (np_side_list == 'l'), 1, 0))\n","      t_ls_l = np.sum(np.where((np_zone_list == 't') & (np_pr < 1) & (np_side_list == 'l'), 1, 0))\n","      c_ls_l = np.sum(np.where((np_zone_list == 'c') & (np_pr < 1) & (np_side_list == 'l'), 1, 0))\n","\n","      long_rollmax_pr = np.maximum.accumulate(long_total_pr)\n","      long_acc_mdd = np.max((long_rollmax_pr - long_total_pr) / long_rollmax_pr)\n","      long_rollmax_sumpr = np.maximum.accumulate(long_sum_pr)\n","      long_sum_mdd = np.max((long_rollmax_sumpr - long_sum_pr) / long_rollmax_sumpr)\n","\n","      np_long_tp_ratio_list = np.array(long_tp_ratio_list)\n","      mean_long_tr = np.mean(np_long_tp_ratio_list[np.isnan(np_long_tp_ratio_list) == 0])\n","      \n","      np_long_dr_list = np.array(long_dr_list)\n","      mean_long_dr = np.mean(np_long_dr_list[np.isnan(np_long_dr_list) == 0])\n","\n","      # long_pr_gap = (long_np_pr - 1) / config.lvrg_set.leverage + fee\n","      # long_tp_gap = long_pr_gap[long_pr_gap > 0]\n","      # # mean_long_tp_gap = np.mean(long_pr_gap[long_pr_gap > 0])\n","      # # mean_long_ls_gap = np.mean(long_pr_gap[long_pr_gap < 0])\n","\n","      # mean_long_pgfr = np.mean((long_tp_gap - fee) / abs(long_tp_gap + fee))\n","\n","      plt.subplot(gs[2])\n","      plt.plot(long_total_pr)\n","      plt.plot(long_sum_pr, color='gold')\n","      if len(nontp_long_liqd_list) != 0:\n","\n","        max_nontp_long_term = len(res_df) - nontp_long_indexs[0]\n","\n","        plt.title(\"wr : %.3f\\nlen(long_td) : %s\\n dpf : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n sum_pr : %.3f\\n sr : %.3f\"\n","                  % (long_wr, len(long_np_pr[long_np_pr != 1]), long_dpf, np.min(long_np_pr), long_total_pr[-1], long_sum_pr[-1], long_sr) + \\\n","                  \"\\n acc_mdd : -%.3f\\n sum_mdd : -%.3f\\n leverage %s\\n liqd : %.3f\\n mean_tr : %.3f\\n mean_dr : %.3f\"\n","                  % (long_acc_mdd, long_sum_mdd, config.lvrg_set.leverage, min(long_liqd_list), mean_long_tr, mean_long_dr)  + \\\n","                  \"\\n nontp_liqd_cnt : %s\\n nontp_liqd : %.3f\\n nontp_liqd_pr : %.3f\\n max_nontp_term : %s\\n tw cw tls cls : %s %s %s %s\"\n","                  % (len(nontp_long_liqd_list), min(nontp_long_liqd_list), min(nontp_long_pr_list), max_nontp_long_term, t_w_l, c_w_l, t_ls_l, c_ls_l) ,\n","                  position=title_position, fontsize=fontsize)\n","      else:\n","        plt.title(\"wr : %.3f\\nlen(long_td) : %s\\n dpf : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n sum_pr : %.3f\\n sr : %.3f\"\n","                  % (long_wr, len(long_np_pr[long_np_pr != 1]), long_dpf, np.min(long_np_pr), long_total_pr[-1], long_sum_pr[-1], long_sr) + \\\n","                  \"\\n acc_mdd : -%.3f\\n sum_mdd : -%.3f\\n leverage %s\\n liqd : %.3f\\n mean_tr : %.3f\\n mean_dr : %.3f\"\n","                  % (long_acc_mdd, long_sum_mdd, config.lvrg_set.leverage, min(long_liqd_list), mean_long_tr, mean_long_dr) + \\\n","                  \"\\n nontp_liqd_cnt : %s\\n tw cw tls cls : %s %s %s %s\"\n","                  % (len(nontp_long_liqd_list), t_w_l, c_w_l, t_ls_l, c_ls_l),\n","                  position=title_position, fontsize=fontsize)\n","\n","      long_survey_df.iloc[survey_i] = long_wr, long_sr, len(long_np_pr[long_np_pr != 1]), long_dpf, \\\n","        long_total_pr[-1], long_sum_pr[-1], long_acc_mdd, long_sum_mdd, min(long_liqd_list), np.min(long_np_pr), mean_long_tr, mean_long_dr\n","\n","      print('supblot233 passed')\n","\n","    except Exception as e:\n","      print(\"error in 233 :\", e)\n","\n","\n","    try:\n","      #     reversion adjustment      #\n","      # rev_np_pr = 1 / (np.array(pr_list) + fee) - fee\n","      rev_fee = tp_fee + out_fee - np.array(fee_list)\n","      rev_np_pr = (1 / ((np.array(pr_list) - 1) / config.lvrg_set.leverage + np.array(fee_list) + 1) - rev_fee - 1) * config.lvrg_set.leverage + 1\n","      # rev_np_pr = (1 / (np.array(pr_list) + fee) - fee - 1) * config.lvrg_set.leverage + 1\n","          \n","      rev_sr = sharpe_ratio(rev_np_pr)\n","\n","      rev_total_pr = np.cumprod(rev_np_pr)\n","      rev_wr = len(rev_np_pr[rev_np_pr > 1]) / len(rev_np_pr[rev_np_pr != 1])\n","\n","      rev_total_for_sum_pr = rev_np_pr - 1\n","      rev_total_for_sum_pr[0] = 1\n","      rev_total_sum_pr = np.cumsum(rev_total_for_sum_pr)\n","      rev_total_sum_pr = np.where(rev_total_sum_pr < 0, 0, rev_total_sum_pr)\n","\n","      rev_rollmax_pr = np.maximum.accumulate(rev_total_pr)\n","      rev_acc_mdd = np.max((rev_rollmax_pr - rev_total_pr) / rev_rollmax_pr)\n","      rev_rollmax_sumpr = np.maximum.accumulate(rev_total_sum_pr)\n","      rev_sum_mdd = np.max((rev_rollmax_sumpr - rev_total_sum_pr) / rev_rollmax_sumpr)\n","\n","      plt.subplot(gs[3])\n","\n","      plt.plot(rev_total_pr)\n","      plt.plot(rev_total_sum_pr, color='gold')\n","\n","      plt.title(\"wr : %.3f\\n sr : %.3f\\n acc_pr : %.3f\\n sum_pr : %.3f\\n acc_mdd : -%.3f\\n sum_mdd : -%.3f\\n min_pr : %.3f\" \n","                % (rev_wr, rev_sr, rev_total_pr[-1], rev_total_sum_pr[-1], \n","                   rev_acc_mdd, rev_sum_mdd, np.min(rev_np_pr)), fontsize=fontsize)\n","      \n","      rev_survey_df.iloc[survey_i] = rev_wr, rev_sr, rev_total_pr[-1], rev_total_sum_pr[-1], rev_acc_mdd, rev_sum_mdd, np.min(rev_np_pr)\n","\n","    except Exception as e:\n","      print(\"error in 234 :\", e)\n","\n","    try:\n","      #         short       #\n","      # rev_short_np_pr = 1 / (np.array(short_list) + fee) - fee\n","      rev_short_fee = tp_fee + out_fee - np.array(short_fee_list)\n","      rev_short_np_pr = (1 / ((np.array(short_list) - 1) / config.lvrg_set.leverage + np.array(short_fee_list) + 1) - rev_short_fee - 1) * config.lvrg_set.leverage + 1\n","      # rev_short_np_pr = (1 / (np.array(short_list) + fee) - fee - 1) * config.lvrg_set.leverage + 1\n","      \n","      rev_short_sr = sharpe_ratio(rev_short_np_pr)\n","          \n","      short_rev_total_pr = np.cumprod(rev_short_np_pr)\n","      rev_short_wr = len(rev_short_np_pr[rev_short_np_pr > 1]) / len(rev_short_np_pr[rev_short_np_pr != 1])\n","\n","      rev_short_for_sum_pr = rev_short_np_pr - 1\n","      rev_short_for_sum_pr[0] = 1\n","      short_rev_sum_pr = np.cumsum(rev_short_for_sum_pr)\n","      short_rev_sum_pr = np.where(short_rev_sum_pr < 0, 0, short_rev_sum_pr)\n","\n","      short_rev_rollmax_pr = np.maximum.accumulate(short_rev_total_pr)\n","      short_rev_acc_mdd = np.max((short_rev_rollmax_pr - short_rev_total_pr) / short_rev_rollmax_pr)\n","      short_rev_rollmax_sumpr = np.maximum.accumulate(short_rev_sum_pr)\n","      short_rev_sum_mdd = np.max((short_rev_rollmax_sumpr - short_rev_sum_pr) / short_rev_rollmax_sumpr)\n","\n","      plt.subplot(gs[4])\n","\n","      plt.plot(short_rev_total_pr)\n","      plt.plot(short_rev_sum_pr, color='gold')\n","\n","      plt.title(\"wr : %.3f\\n sr : %.3f\\n acc_pr : %.3f\\n sum_pr : %.3f\\n acc_mdd : -%.3f\\n sum_mdd : -%.3f\\n min_pr : %.3f\" \n","                % (rev_short_wr, rev_short_sr, short_rev_total_pr[-1], short_rev_sum_pr[-1], \n","                   short_rev_acc_mdd, short_rev_sum_mdd, np.min(rev_short_np_pr)), fontsize=fontsize)\n","      \n","      rev_short_survey_df.iloc[survey_i] = rev_short_wr, rev_short_sr, short_rev_total_pr[-1], short_rev_sum_pr[-1], short_rev_acc_mdd, short_rev_sum_mdd, np.min(rev_short_np_pr)\n","\n","    except Exception as e:\n","      print(\"error in 235 :\", e)\n","\n","    try:\n","      #         long       #\n","      # rev_long_np_pr = 1 / (np.array(long_list) + fee) - fee\n","      rev_long_fee = tp_fee + out_fee - np.array(long_fee_list)\n","      rev_long_np_pr = (1 / ((np.array(long_list) - 1) / config.lvrg_set.leverage + np.array(long_fee_list) + 1) - rev_long_fee - 1) * config.lvrg_set.leverage + 1\n","          \n","      rev_long_sr = sharpe_ratio(rev_long_np_pr)\n","\n","      long_rev_total_pr = np.cumprod(rev_long_np_pr)\n","      rev_long_wr = len(rev_long_np_pr[rev_long_np_pr > 1]) / len(rev_long_np_pr[rev_long_np_pr != 1])\n","\n","      rev_long_for_sum_pr = rev_long_np_pr - 1\n","      rev_long_for_sum_pr[0] = 1\n","      long_rev_sum_pr = np.cumsum(rev_long_for_sum_pr)\n","      long_rev_sum_pr = np.where(long_rev_sum_pr < 0, 0, long_rev_sum_pr)\n","\n","      long_rev_rollmax_pr = np.maximum.accumulate(long_rev_total_pr)\n","      long_rev_acc_mdd = np.max((long_rev_rollmax_pr - long_rev_total_pr) / long_rev_rollmax_pr)\n","      long_rev_rollmax_sumpr = np.maximum.accumulate(long_rev_sum_pr)\n","      long_rev_sum_mdd = np.max((long_rev_rollmax_sumpr - long_rev_sum_pr) / long_rev_rollmax_sumpr)\n","\n","      plt.subplot(gs[5])\n","\n","      plt.plot(long_rev_total_pr)\n","      plt.plot(long_rev_sum_pr, color='gold')\n","\n","      plt.title(\"wr : %.3f\\n sr : %.3f\\n acc_pr : %.3f\\n sum_pr : %.3f\\n acc_mdd : -%.3f\\n sum_mdd : -%.3f\\n min_pr : %.3f\" \n","                % (rev_long_wr, rev_long_sr, long_rev_total_pr[-1], long_rev_sum_pr[-1], \n","                   long_rev_acc_mdd, long_rev_sum_mdd, np.min(rev_long_np_pr)), fontsize=fontsize)\n","      \n","      rev_long_survey_df.iloc[survey_i] = rev_long_wr, rev_long_sr, long_rev_total_pr[-1], long_rev_sum_pr[-1], long_rev_acc_mdd, long_rev_sum_mdd, np.min(rev_long_np_pr)\n","      \n","    except Exception as e:\n","      print(\"error in 236 :\", e)\n","\n","    if show_plot:\n","      \n","      frq_dev, s_frq_dev, l_frq_dev = frq_dev_plot(res_df, trade_list, side_list, plot=False)      \n","      plt.subplot(gs[6])\n","      plt.plot(frq_dev)\n","\n","      plt.subplot(gs[7])\n","      plt.plot(s_frq_dev)\n","\n","      plt.subplot(gs[8])\n","      plt.plot(l_frq_dev)\n","\n","      plt.show()\n","    \n","\n","    try:\n","\n","      h_np_pr = np.array(h_pr_list)\n","      # h_rev_np_pr = 1 / (np.array(h_pr_list) + fee) - fee    # define, for plot_check below cell\n","      h_rev_np_pr = (1 / ((np.array(h_pr_list) - 1) / config.lvrg_set.leverage + np.array(fee_list) + 1) - np.array(fee_list) - 1) * config.lvrg_set.leverage + 1\n","\n","      # --------------------- h pr plot --------------------- #\n","      if len(h_np_pr[h_np_pr != 1]) != 0:\n","\n","        plt.figure(figsize=(16, 12))\n","        plt.suptitle(key + \" hedge\")\n","\n","        h_total_pr = np.cumprod(h_np_pr)\n","        h_wr = len(h_np_pr[h_np_pr > 1]) / len(h_np_pr[h_np_pr != 1])\n","\n","        plt.subplot(gs[0])\n","\n","        plt.plot(h_total_pr)\n","        plt.title(\"wr : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n leverage %s\" % (h_wr, np.min(h_np_pr), h_total_pr[-1], config.lvrg_set.leverage))\n","        # plt.show()\n","\n","        #         short only      #\n","        h_short_np_pr = np.array(h_short_list)\n","\n","        short_h_total_pr = np.cumprod(h_short_np_pr)\n","        h_short_wr = len(h_short_np_pr[h_short_np_pr > 1]) / len(h_short_np_pr[h_short_np_pr != 1])\n","        \n","        plt.subplot(gs[1])\n","        plt.plot(short_h_total_pr)\n","        plt.title(\"wr : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n leverage %s\" % (h_short_wr, np.min(h_short_np_pr), short_h_total_pr[-1], config.lvrg_set.leverage))\n","\n","        #         long only      #\n","        h_long_np_pr = np.array(h_long_list)\n","\n","        long_h_total_pr = np.cumprod(h_long_np_pr)\n","        h_long_wr = len(h_long_np_pr[h_long_np_pr > 1]) / len(h_long_np_pr[h_long_np_pr != 1])\n","        \n","        plt.subplot(gs[2])\n","        plt.plot(long_h_total_pr)\n","        plt.title(\"wr : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n leverage %s\" % (h_long_wr, np.min(h_long_np_pr), long_h_total_pr[-1], config.lvrg_set.leverage))\n","\n","\n","        #     reversion adjustment      #\n","            \n","        h_rev_total_pr = np.cumprod(h_rev_np_pr)\n","        h_rev_wr = len(h_rev_np_pr[h_rev_np_pr > 1]) / len(h_rev_np_pr[h_rev_np_pr != 1])\n","\n","        plt.subplot(gs[3])\n","        plt.plot(h_rev_total_pr)\n","        plt.title(\"wr : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n leverage %s\" % (h_rev_wr, np.min(h_rev_np_pr), h_rev_total_pr[-1], config.lvrg_set.leverage))\n","\n","        #         short       #\n","        # h_rev_short_np_pr = 1 / (np.array(h_short_list) + fee) - fee\n","        h_rev_short_np_pr =  (1 / ((np.array(h_short_list) - 1) / config.lvrg_set.leverage + np.array(short_fee_list) + 1) - np.array(short_fee_list) - 1) * config.lvrg_set.leverage + 1\n","           \n","        short_h_rev_total_pr = np.cumprod(h_rev_short_np_pr)\n","        h_rev_short_wr = len(h_rev_short_np_pr[h_rev_short_np_pr > 1]) / len(h_rev_short_np_pr[h_rev_short_np_pr != 1])\n","\n","        plt.subplot(gs[4])\n","        plt.plot(short_h_rev_total_pr)\n","        plt.title(\"wr : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n leverage %s\" % (h_rev_short_wr, np.min(h_rev_short_np_pr), short_h_rev_total_pr[-1], config.lvrg_set.leverage))\n","\n","        #         long       #\n","        # h_rev_long_np_pr = 1 / (np.array(h_long_list) + fee) - fee\n","        h_rev_long_np_pr =  (1 / ((np.array(h_long_list) - 1) / config.lvrg_set.leverage + np.array(long_fee_list) + 1) - np.array(long_fee_list) - 1) * config.lvrg_set.leverage + 1\n","            \n","        long_h_rev_total_pr = np.cumprod(h_rev_long_np_pr)\n","        h_rev_long_wr = len(h_rev_long_np_pr[h_rev_long_np_pr > 1]) / len(h_rev_long_np_pr[h_rev_long_np_pr != 1])\n","\n","        plt.subplot(gs[5])\n","        plt.plot(long_h_rev_total_pr)\n","        plt.title(\"wr : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n leverage %s\" % (h_rev_long_wr, np.min(h_rev_long_np_pr), long_h_rev_total_pr[-1], config.lvrg_set.leverage))\n","        \n","        if show_plot:\n","          plt.show()\n","          \n","    except Exception as e:\n","      print('error in h_pr plot :', e)   "]},{"cell_type":"markdown","metadata":{"jp-MarkdownHeadingCollapsed":true,"tags":[],"id":"zQ-roiifspcX"},"source":["#### ep_loc.point & zone legacy"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Js5eL87VspcX"},"outputs":[],"source":["\n","\n","    # res_df['entry_{}'.format(strat_version)] = np.where((res_df['open'] >= res_df['cloud_bline_%s' % cb_itv]) &\n","    #                 # (res_df['close'].shift(config.loc_set.point.tf_entry * 1) <= res_df['cloud_bline_%s' % cb_itv]) &\n","    #                 (res_df['close'] < res_df['cloud_bline_%s' % cb_itv])\n","    #                 , res_df['entry_{}'.format(strat_version)] - 1, res_df['entry_{}'.format(strat_version)])\n","\n","    # res_df['entry_{}'.format(strat_version)] = np.where((res_df['open'] >= res_df['bb_lower_1m']) &\n","    #                 # (res_df['close'].shift(config.loc_set.point.tf_entry * 1) <= res_df['bb_lower_1m']) &\n","    #                 (res_df['close'] < res_df['bb_lower_1m'])\n","    #                 , res_df['entry_{}'.format(strat_version)] - 1, res_df['entry_{}'.format(strat_version)])\n","\n","    # res_df['entry_{}'.format(strat_version)] = np.where((res_df['open'] <= res_df['cloud_bline_%s' % cb_itv]) &\n","    #                   # (res_df['close'].shift(config.loc_set.point.tf_entry * 1) >= res_df['cloud_bline_%s' % cb_itv]) &\n","    #                   (res_df['close'] > res_df['cloud_bline_%s' % cb_itv])\n","    #                 , res_df['entry_{}'.format(strat_version)] + 1, res_df['entry_{}'.format(strat_version)])\n","\n","    # res_df['entry_{}'.format(strat_version)] = np.where((res_df['open'] <= res_df['bb_upper_1m']) &\n","    #                   # (res_df['close'].shift(config.loc_set.point.tf_entry * 1) >= res_df['bb_upper_1m']) &\n","    #                   (res_df['close'] > res_df['bb_upper_1m'])\n","    #                 , res_df['entry_{}'.format(strat_version)] + 1, res_df['entry_{}'.format(strat_version)])\n","\n","\n","    \n","   # --------------- ema --------------- #   \n","  # res_df['ema5_1m'] = ema(res_df['close'], 5).shift(1)\n","\n","  #   # --------------- cloud bline --------------- #   \n","  # res_df['cloud_bline_1m'] = cloud_bline(res_df, 26).shift(1)\n","  \n","    #       stochastic      #\n","  # res_df['stoch'] = stoch(res_df, 5, 3, 3)\n","\n","    #       fisher      #\n","  # res_df['fisher30'] = fisher(res_df, 30)\n","  # res_df['fisher60'] = fisher(res_df, 60)\n","  # res_df['fisher120'] = fisher(res_df, 120)\n","\n","    #       cctbbo      #\n","  # res_df['cctbbo'], _ = cct_bbo(res_df, 21, 13)\n","\n","    #       ema_roc      #\n","  # res_df['ema_roc'] = ema_roc(res_df['close'], 13, 9)\n","\n","\n","   # ------------------------------ htf data ------------------------------ #    \n","\n","  #             Todo              #\n","  # htf_df = pd.read_excel(date_path2 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","  # htf_df = pd.read_excel(date_path3 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","  # # htf_df = pd.read_excel(date_path4 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","  # # # htf_df = pd.read_excel(date_path5 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","  # # # # # # htf_df = pd.read_excel(date_path6 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","\n","  # # ---- htf index slicing ---- #\n","  # htf_df = htf_df.loc[:res_df.index[-1]]\n","  \n","  # print(\"res_df.index[-1] :\", res_df.index[-1])\n","  # print(\"htf_df.index[-1] :\", htf_df.index[-1])\n","\n","  # res_df = dc_line(res_df, htf_df, '5m')\n","  # res_df = dc_level(res_df, '5m', 1)\n","\n","\n","  # # # if \"sma4\" in res_df.columns:\n","  # # #   res_df.drop(\"sma4\", axis=1, inplace=1)\n","\n","  # # htf_df['sma'] = htf_df['close'].rolling(60).mean()\n","  # # res_df = res_df.join(pd.DataFrame(index=res_df.index, data=to_lower_tf_v2(res_df, htf_df, [-1]), columns=['sma_30m']))\n","  \n","  # htf_df['stoch'] = stoch(htf_df, 13, 3, 3)\n","  # res_df = res_df.join(pd.DataFrame(index=res_df.index, data=to_lower_tf_v2(res_df, htf_df, [-1], backing_i=-1), columns=['stoch_5m']))\n","\n","   \n","  # fifth_df['ema'] = ema(fifth_df['close'], 5)\n","  # res_df = res_df.join(pd.DataFrame(index=res_df.index, data=to_lower_tf_v2(res_df, fifth_df, [-1]), columns=['ema5']))\n","\n","        # ------------------------------------ short ------------------------------------ # \n","\n","        # --------- by sar --------- # \n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_3m'].iloc[i] == 0:\n","        #   mr_score += 1\n","\n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_5m'].iloc[i] == 0:\n","        #   mr_score += 1          \n","\n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_15m'].iloc[i] == 0:\n","        #   mr_score += 1\n","\n","          #      dc & sar      # \n","        # mr_const_cnt += 1\n","        # # if res_df['dc_upper_1m'].iloc[i] <= res_df['sar_15m'].iloc[i]:\n","        # if res_df['dc_upper_3m'].iloc[i] <= res_df['sar_5m'].iloc[i]:\n","        # # if res_df['dc_upper_5m'].iloc[i] <= res_df['sar_15m'].iloc[i]:\n","        #   mr_score += 1\n","\n","        # -------------- dr scheduling -------------- #\n","        # if config.ep_set.entry_type == 'MARKET':\n","        #   mr_const_cnt += 1\n","        #   if (res_df['close'].iloc[i] - res_df['short_tp'].iloc[i]) / (res_df['short_out'].iloc[i] - res_df['close'].iloc[i]) <= config.ep_set.tr_thresh * (1 + config.ep_set.dr_error):  \n","        #     mr_score += 1\n","\n","           \n","        # ------- entry once ------- #   \n","        # prev_entry_cnt = 0\n","        # for back_i in range(i - 1, 0, -1):\n","        #   if res_df['entry'][back_i] == 1:\n","        #     break\n","\n","        #   elif res_df['entry'][back_i] == -1:\n","        #     prev_entry_cnt += 1          \n","        # # # print(\"prev_entry_cnt :\", prev_entry_cnt)\n","\n","        # mr_const_cnt += 1\n","        # # if prev_entry_cnt <= config.ep_set.entry_incycle:\n","        # # if prev_entry_cnt == config.ep_set.entry_incycle:\n","        # if prev_entry_cnt >= config.ep_set.entry_incycle:\n","        #   mr_score += 1\n","\n","        # ------- htf zoning ------- #   \n","        # mr_const_cnt += 1\n","        #   #       bb zone     #\n","        # if res_df['close'].iloc[i] < res_df['bb_lower_%s' % bbz_interval].iloc[i]:\n","        # # if res_df['close'].iloc[i] < res_df['bb_lower2_1h'].iloc[i]:\n","        # # if res_df['close'].iloc[i] < res_df['bb_base_1h'].iloc[i]:\n","\n","        #   #       cbline zone     #\n","        # # if res_df['close'].iloc[i] < res_df['cloud_bline_%s' % cb_interval].iloc[i]:\n","\n","        #   mr_score += 1\n","\n","  \n","        # ------- ben ep_in's tp done ------- #   \n","        # mr_const_cnt += 1\n","        # if res_df['low'].iloc[i] > res_df['short_tp'].iloc[i]:\n","        #   mr_score += 1\n","\n","\n","        # -------------- feature dist const. -------------- #\n","        # if initial_i < input_size:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","        # entry_input_x = min_max_scale(res_df[selected_price_colname].iloc[initial_i - input_size:initial_i].values)\n","       \n","        # re_entry_input_x = expand_dims(entry_input_x)\n","\n","        # entry_vector = model.predict(re_entry_input_x, verbose=0)\n","        # # print(test_result.shape)\n","\n","        # f_dist = vector_dist(entry_vector, selected_vector)\n","        # print(\"f_dist :\", f_dist)\n","\n","        # if f_dist < fdist_thresh:\n","          # mr_score += 1\n","\n","\n","\n","        # ------------------------------------ long ------------------------------------ # \n","          \n","\n","        # --------- by sar --------- # \n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_3m'].iloc[i] == 1:\n","        #   mr_score += 1   \n","\n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_5m'].iloc[i] == 1:\n","        #   mr_score += 1     \n","\n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_15m'].iloc[i] == 1:\n","          # mr_score += 1\n","\n","          #      dc & sar      # \n","        # mr_const_cnt += 1\n","        # # if res_df['dc_lower_1m'].iloc[i] >= res_df['sar_15m'].iloc[i]:\n","        # if res_df['dc_lower_3m'].iloc[i] >= res_df['sar_5m'].iloc[i]:\n","        # # if res_df['dc_lower_5m'].iloc[i] >= res_df['sar_15m'].iloc[i]:\n","        #   mr_score += 1\n","\n","        # -------------- dr scheduling -------------- #\n","        # if config.ep_set.entry_type == \"MARKET\":\n","          # mr_const_cnt += 1        \n","          # if (res_df['long_tp'].iloc[i] - res_df['close'].iloc[i]) / (res_df['close'].iloc[i] - res_df['long_out'].iloc[i]) <= config.ep_set.tr_thresh * (1 + config.ep_set.dr_error): # 일반적으로 dr 상에서 tp 비율이 더 커짐 (tr 보다)\n","          #   mr_score += 1\n","\n","        # -------------- ep limit -------------- #    \n","        # mr_const_cnt += 1\n","        # # if (res_df['open'].iloc[i] - res_df['long_ep'].iloc[i]) / res_df['open'].iloc[i] < config.ep_set.max_eplim_pct:\n","        # if config.ep_set.min_eplim_pct < (res_df['open'].iloc[i] - res_df['long_ep'].iloc[i]) / res_df['open'].iloc[i] < config.ep_set.max_eplim_pct:\n","        # # if 0 < (res_df['open'].iloc[i] - res_df['long_ep'].iloc[i]) / res_df['open'].iloc[i] < config.ep_set.max_eplim_pct:\n","        #   # if res_df['st_gap_15m'].iloc[i] / res_df['open'].iloc[i] < 0:\n","        #   #   print(\"i, res_df['st_gap_15m'].iloc[i] :\", i, res_df['st_gap_15m'].iloc[i])\n","        #   mr_score += 1\n","\n","\n","        # -------------- entry once -------------- #    \n","        # prev_entry_cnt = 0\n","        # for back_i in range(i - 1, 0, -1):\n","        #   if res_df['entry'][back_i] == -1:\n","        #     break\n","\n","        #   elif res_df['entry'][back_i] == 1:\n","        #     prev_entry_cnt += 1\n","          \n","        # mr_const_cnt += 1\n","        # # if prev_entry_cnt <= config.ep_set.entry_incycle:\n","        # # if prev_entry_cnt == config.ep_set.entry_incycle:\n","        # if prev_entry_cnt >= config.ep_set.entry_incycle:\n","        #   mr_score += 1\n","\n","\n","        # ------- htf zoning ------- #   \n","        # mr_const_cnt += 1\n","          \n","        #   #       bb zone     #\n","        # if res_df['close'].iloc[i] > res_df['bb_upper_%s' % bbz_interval].iloc[i]:\n","        # # if res_df['close'].iloc[i] > res_df['bb_upper2_1h'].iloc[i]:\n","        # # if res_df['close'].iloc[i] > res_df['bb_base_1h'].iloc[i]:\n","        \n","        #   #       cbline zone     #\n","        # # if res_df['close'].iloc[i] > res_df['cloud_bline_%s' % cb_interval].iloc[i]:\n","\n","        #   mr_score += 1\n","\n","\n","        # ------- ben ep_in's tp done ------- #   \n","        # mr_const_cnt += 1\n","        # if res_df['high'].iloc[i] < res_df['long_tp'].iloc[i]:\n","        #   mr_score += 1\n","\n","\n","        # -------------- feature dist const. -------------- #\n","        # if initial_i < input_size:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","          \n","        # entry_input_x = min_max_scale(res_df[selected_price_colname].iloc[initial_i - input_size:initial_i].values)\n","       \n","        # re_entry_input_x = expand_dims(entry_input_x)\n","\n","        # entry_vector = model.predict(re_entry_input_x, verbose=0)\n","        # # print(test_result.shape)\n","\n","        # f_dist = vector_dist(entry_vector, selected_vector)\n","        # print(\"f_dist :\", f_dist)\n","\n","        # if f_dist < fdist_thresh:\n","          # mr_score += 1"]},{"cell_type":"markdown","metadata":{"id":"JNQxkb06ZdTe"},"source":["## plot_check_v2"]},{"cell_type":"code","source":["# ------------------ plot_config ------------------ #\n","save_plot = 0\n","tf_plot = 1       # true - false plot\n","pr_descend = 1    # 1 -> 내림차순\n","position = 1      # -1 / 1, 0 (short / long)\n","front_plot = 0    # ide -> 1 / logic 검수 -> 0  \"limit plot_range til loc_set idx = replacing x_max value\"\n","# pr_sort = 1     # -> default 1,  이상한 체결 확인하기 좋음\n","# wl_case = 1     # 1 / -1 / 0 (win loss study) --> oid\n","\n","x_max = 500\n","x_margin_mult = 1/30\n","y_margin_mult = 1/30  # 0\n","prev_plotsize = 100\n","post_plotsize = 20\n","\n","inversion = 0\n","hedge = 0\n","\n","# ------ show or save ------ #\n","if save_plot:\n","  plot_check_dir = current_path + \"plot_check/\" +  key.replace(\".ftr\", \"\")\n","  try:\n","    os.mkdir(plot_check_dir)\n","  except:\n","    # ------ remove existing dir ------ #\n","    shutil.rmtree(plot_check_dir)\n","    print(plot_check_dir, 'removed !')\n","    os.mkdir(plot_check_dir)\n","    # pass\n","\n","# ------------ 한 방향에 대해 plot_check 함 (by position var.) ------------ #\n","#   obj by position  \n","if position == -1:\n","  pos_str = \"SELL\"\n","  pr, obj, lvrg_arr, fee_arr, tpout_arr = sort_bypr_v2(short_pr, short_obj, short_lvrg_arr, short_fee_arr, short_tpout_arr, descending=pr_descend)\n","else:   # both option currently not supported\n","  pos_str = \"BUY\"\n","  pr, obj, lvrg_arr, fee_arr, tpout_arr = sort_bypr_v2(long_pr, long_obj, long_lvrg_arr, long_fee_arr, long_tpout_arr, descending=pr_descend)\n","\n","pr_msg = \"%s\\n {} ~ {} -> {:.5f}\\n lvrg : {}\\n fee : {:.4f}\" % (pos_str)  # pos_str 으로 이곳에서 정의함\n","\n","# ------------------ data chunknize ------------------ #\n","left_end_idx = obj[2] - prev_plotsize  # left_margin 기준 - entry_idx\n","right_end_idx = obj[3] + post_plotsize\n","\n","np_plot_params = np.hstack((left_end_idx, right_end_idx, pr, *obj, lvrg_arr, fee_arr, tpout_arr))[np.sum(left_end_idx < 0):]\n","np_df = res_df.to_numpy()"],"metadata":{"id":"A6QSF9COaHO5","executionInfo":{"status":"ok","timestamp":1646442514616,"user_tz":-540,"elapsed":1074,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}}},"execution_count":11,"outputs":[]},{"cell_type":"code","source":["# ------------ make col_idx_dict config ------------ #\n","step_col_list = []\n","stepmark_col_list = []\n","# ------ set period ------ #\n","# res_df = h_candle_v2(res_df, '5T')\n","hc_itv1 = '15T'\n","hc_itv2 = 'H'\n","\n","dc_itv = '1m'\n","hdc_itv = '5m'\n","hhdc_itv = '15m'\n","\n","bb_itv = dc_itv\n","hbb_itv = hdc_itv\n","hhbb_itv = hhdc_itv\n","\n","# ------ step_col_list - add info(col, alpha, color, linewidth) ------ #\n","step_col_list.append([['hopen_{}'.format(hc_itv1), 'hclose_{}'.format(hc_itv1)], 1, '#ffffff', 2])\n","# step_col_list.append([['hopen_{}'.format(hc_itv2), 'hclose_{}'.format(hc_itv2)], 1, '#ffffff', 4])\n","\n","# step_col_list.append([['dc_upper_%s' % dc_itv, 'dc_lower_%s' % dc_itv], 1, '#ffeb3b', 1])\n","# step_col_list.append([['dc_upper_%s' % hdc_itv, 'dc_lower_%s' % hdc_itv], 1, '#e65100', 2])\n","# step_col_list.append([['dc_upper_%s' % hhdc_itv, 'dc_lower_%s' % hhdc_itv], 1, '#c2185b', 4])\n","\n","# step_col_list.append([['bb_upper_%s' % bb_itv, 'bb_lower_%s' % bb_itv], 1, '#ffffff', 1])\n","# step_col_list.append([['bb_upper_%s' % hbb_itv, 'bb_lower_%s' % hbb_itv], 1, '#ff00ff', 2])\n","# step_col_list.append([['bb_upper_%s' % hhbb_itv, 'bb_lower_%s' % hhbb_itv], 1, '#3179f5', 4])\n","\n","step_col_list.append([['ema_5m'], 1, '#03ed30', 2])\n","\n","# ------ stepmark_col_list - add info(col, alpha, color, linewidth) ------ #\n","stepmark_col_list.append([['sar_3T'], 1, 'dodgerblue', 7])\n","\n","step_col_arr = strcol_tonumb(res_df, step_col_list)\n","stepmark_col_arr = strcol_tonumb(res_df, stepmark_col_list)\n","\n","col_idx_dict = \\\n","{\n","  \"ohlc_col_idxs\": get_col_idxs(res_df, ['open', 'high', 'low', 'close']),\n","  # \"ohlc_col_idxs\": get_col_idxs(res_df, ['haopen', 'hahigh', 'halow', 'haclose']),  # heikin-ashi ver.\n","  \"step_col_info\": step_col_arr,\n","  \"stepmark_col_info\": stepmark_col_arr,\n","  \"ylim_col_idxs\": get_col_idxs(res_df, ['open', 'high', 'low', 'close'])\n","}\n"],"metadata":{"id":"FnSydxFXn_f9","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1646442516338,"user_tz":-540,"elapsed":4,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"598e76c1-fdfb-4ed4-e03e-7a5ad8d34326"},"execution_count":12,"outputs":[{"output_type":"stream","name":"stderr","text":["/content/drive/My Drive/Colab Notebooks/JnQ/funcs/funcs_plot_check.py:10: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.\n","  step_col_arr = np.array(col_list)\n"]}]},{"cell_type":"code","source":["[plot_check_v2(np_df, config, param_zip, pr_msg, x_max, x_margin_mult, y_margin_mult, front_plot, **col_idx_dict) for param_zip in zip(np_plot_params, np_plot_params[::-1])]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"Roy40BmByyZc","executionInfo":{"status":"error","timestamp":1646442964669,"user_tz":-540,"elapsed":12648,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"03e9455f-9322-4a56-c8b5-aa8d0aa63421"},"execution_count":15,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 2160x1296 with 2 Axes>"]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\n"]},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 2160x1296 with 2 Axes>"]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\n"]},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 2160x1296 with 2 Axes>"]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\n"]},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 2160x1296 with 2 Axes>"]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\n"]},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 2160x1296 with 2 Axes>"]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\n"]},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 2160x1296 with 2 Axes>"]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\n"]},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 2160x1296 with 2 Axes>"]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\n"]},{"output_type":"error","ename":"KeyboardInterrupt","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-15-2ad57f762aae>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0;34m[\u001b[0m\u001b[0mplot_check_v2\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnp_df\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mconfig\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mparam_zip\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpr_msg\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mx_max\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mx_margin_mult\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_margin_mult\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfront_plot\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mcol_idx_dict\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mparam_zip\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mzip\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnp_plot_params\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnp_plot_params\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m<ipython-input-15-2ad57f762aae>\u001b[0m in \u001b[0;36m<listcomp>\u001b[0;34m(.0)\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0;34m[\u001b[0m\u001b[0mplot_check_v2\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnp_df\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mconfig\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mparam_zip\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpr_msg\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mx_max\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mx_margin_mult\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_margin_mult\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfront_plot\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mcol_idx_dict\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mparam_zip\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mzip\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnp_plot_params\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnp_plot_params\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m<ipython-input-14-146457c5270a>\u001b[0m in \u001b[0;36mplot_check_v2\u001b[0;34m(data, config, param_zip, pr_msg, x_max, x_margin_mult, y_margin_mult, front_plot, **col_idx_dict)\u001b[0m\n\u001b[1;32m     41\u001b[0m     \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtitle\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpr_msg\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mformat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mentry_idx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mexit_idx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlvrg\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfee\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     42\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 43\u001b[0;31m   \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshow\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     44\u001b[0m   \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mclose\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     45\u001b[0m   \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/matplotlib/pyplot.py\u001b[0m in \u001b[0;36mshow\u001b[0;34m(*args, **kw)\u001b[0m\n\u001b[1;32m    270\u001b[0m     \"\"\"\n\u001b[1;32m    271\u001b[0m     \u001b[0;32mglobal\u001b[0m \u001b[0m_show\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 272\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0m_show\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkw\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    273\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    274\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/ipykernel/pylab/backend_inline.py\u001b[0m in \u001b[0;36mshow\u001b[0;34m(close, block)\u001b[0m\n\u001b[1;32m     37\u001b[0m             display(\n\u001b[1;32m     38\u001b[0m                 \u001b[0mfigure_manager\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcanvas\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfigure\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 39\u001b[0;31m                 \u001b[0mmetadata\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0m_fetch_figure_metadata\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfigure_manager\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcanvas\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfigure\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     40\u001b[0m             )\n\u001b[1;32m     41\u001b[0m     \u001b[0;32mfinally\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/IPython/core/display.py\u001b[0m in \u001b[0;36mdisplay\u001b[0;34m(*objs, **kwargs)\u001b[0m\n\u001b[1;32m    304\u001b[0m             \u001b[0mpublish_display_data\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmetadata\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mmetadata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    305\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 306\u001b[0;31m             \u001b[0mformat_dict\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmd_dict\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mformat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minclude\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0minclude\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mexclude\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mexclude\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    307\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mformat_dict\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    308\u001b[0m                 \u001b[0;31m# nothing to display (e.g. _ipython_display_ took over)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/IPython/core/formatters.py\u001b[0m in \u001b[0;36mformat\u001b[0;34m(self, obj, include, exclude)\u001b[0m\n\u001b[1;32m    171\u001b[0m             \u001b[0mmd\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    172\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 173\u001b[0;31m                 \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mformatter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    174\u001b[0m             \u001b[0;32mexcept\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    175\u001b[0m                 \u001b[0;31m# FIXME: log the exception\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<decorator-gen-2>\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, obj)\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/IPython/core/formatters.py\u001b[0m in \u001b[0;36mcatch_format_error\u001b[0;34m(method, self, *args, **kwargs)\u001b[0m\n\u001b[1;32m    215\u001b[0m     \u001b[0;34m\"\"\"show traceback on failed format call\"\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    216\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 217\u001b[0;31m         \u001b[0mr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmethod\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    218\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0mNotImplementedError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    219\u001b[0m         \u001b[0;31m# don't warn on NotImplementedErrors\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/IPython/core/formatters.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, obj)\u001b[0m\n\u001b[1;32m    332\u001b[0m                 \u001b[0;32mpass\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    333\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 334\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mprinter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    335\u001b[0m             \u001b[0;31m# Finally look for special method names\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    336\u001b[0m             \u001b[0mmethod\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mget_real_method\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mprint_method\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/IPython/core/pylabtools.py\u001b[0m in \u001b[0;36m<lambda>\u001b[0;34m(fig)\u001b[0m\n\u001b[1;32m    239\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    240\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0;34m'png'\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mformats\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 241\u001b[0;31m         \u001b[0mpng_formatter\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfor_type\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mFigure\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mlambda\u001b[0m \u001b[0mfig\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mprint_figure\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfig\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'png'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    242\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0;34m'retina'\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mformats\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0;34m'png2x'\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mformats\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    243\u001b[0m         \u001b[0mpng_formatter\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfor_type\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mFigure\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mlambda\u001b[0m \u001b[0mfig\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mretina_figure\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfig\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/IPython/core/pylabtools.py\u001b[0m in \u001b[0;36mprint_figure\u001b[0;34m(fig, fmt, bbox_inches, **kwargs)\u001b[0m\n\u001b[1;32m    123\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    124\u001b[0m     \u001b[0mbytes_io\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mBytesIO\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 125\u001b[0;31m     \u001b[0mfig\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcanvas\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mprint_figure\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbytes_io\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkw\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    126\u001b[0m     \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mbytes_io\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgetvalue\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    127\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mfmt\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m'svg'\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/matplotlib/backend_bases.py\u001b[0m in \u001b[0;36mprint_figure\u001b[0;34m(self, filename, dpi, facecolor, edgecolor, orientation, format, bbox_inches, **kwargs)\u001b[0m\n\u001b[1;32m   2124\u001b[0m                     \u001b[0morientation\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0morientation\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2125\u001b[0m                     \u001b[0mbbox_inches_restore\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0m_bbox_inches_restore\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2126\u001b[0;31m                     **kwargs)\n\u001b[0m\u001b[1;32m   2127\u001b[0m             \u001b[0;32mfinally\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2128\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0mbbox_inches\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mrestore_bbox\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/matplotlib/backends/backend_agg.py\u001b[0m in \u001b[0;36mprint_png\u001b[0;34m(self, filename_or_obj, metadata, pil_kwargs, *args, **kwargs)\u001b[0m\n\u001b[1;32m    535\u001b[0m             \u001b[0;32mwith\u001b[0m \u001b[0mcbook\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mopen_file_cm\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilename_or_obj\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"wb\"\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mfh\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    536\u001b[0m                 _png.write_png(renderer._renderer, fh, self.figure.dpi,\n\u001b[0;32m--> 537\u001b[0;31m                                metadata={**default_metadata, **metadata})\n\u001b[0m\u001b[1;32m    538\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    539\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mprint_to_buffer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}]},{"cell_type":"markdown","source":["### plot_funcs - legacy"],"metadata":{"id":"MQ8w8nWVXlGj"}},{"cell_type":"code","source":["def plot_check_v2(data, config, param_zip, pr_msg, x_max, x_margin_mult, y_margin_mult, front_plot, **col_idx_dict):\n","  # start_0 = time.time()\n","  plt.style.use(['dark_background', 'fast'])\n","  fig = plt.figure(figsize=(30, 18))\n","  nrows, ncols = 2, 2\n","  gs = gridspec.GridSpec(nrows=nrows,  # row 부터 index 채우고 col 채우는 순서임 (gs_idx)\n","                         ncols=ncols,\n","                         height_ratios=[3, 1]\n","                         )\n","  for gs_idx, params in enumerate(param_zip):\n","    ax = fig.add_subplot(gs[gs_idx])\n","    iin, iout, pr, ep, tp, entry_idx, exit_idx, open_idx, lvrg, fee, tp_line, out_line = params\n","\n","    # ------------ add_col section ------------ #\n","    a_data = data[int(iin):int(iout)]\n","    # a_data = data[iin:iout]\n","    # ------ candles ------ #\n","    candle_plot(a_data[:, col_idx_dict['ohlc_col_idxs']], ax)\n","    \n","    # ------ add cols ------ #\n","    [step_col_plot(a_data[:, params[0]], *params[1:]) for params in col_idx_dict['step_col_info']]\n","    [stepmark_col_plot(a_data[:, params[0]], *params[1:]) for params in col_idx_dict['stepmark_col_info']]\n","\n","    # ------ ep, tp + xlim ------ #   \n","    ep_tick = int(entry_idx - iin)\n","    if front_plot:\n","      x_max = ep_tick\n","    eptp_hvline_v2(config, ep, tp, entry_idx, exit_idx, open_idx, tp_line, out_line, ep_tick, iin, iout, x_max, x_margin_mult)\n","    \n","    # ------ ylim ------ #       \n","    y_lim_data = a_data[:ep_tick, col_idx_dict['ylim_col_idxs']]\n","    y_min = y_lim_data.min()\n","    y_max = y_lim_data.max()\n","    y_margin = (y_max - y_min) * y_margin_mult\n","    plt.ylim(y_min - y_margin, y_max + y_margin)\n","\n","    #     Todo    #\n","    #     3. outer_price plot 일 경우, gs_idx + nrows 하면 됨\n","\n","    # ------ trade_info ------ #\n","    plt.title(pr_msg.format(entry_idx, exit_idx, pr, lvrg, fee))\n","\n","  plt.show()\n","  plt.close()\n","  print()\n","  # print(\"elapsed time :\", time.time() - start_0)  \n","\n","  return\n","\n","\n","def eptp_hvline_v2(config, ep, tp, entry_idx, exit_idx, open_idx, tp_line, out_line, ep_tick, iin, iout, x_max, x_margin_mult):\n","  # ------ vline entry & exit ------ #\n","  # ep_tick = entry_idx - iin\n","  open_tick = ep_tick - int(entry_idx - open_idx)\n","  # tp_tick = ep_tick + (exit_idx - entry_idx)\n","  tp_tick = ep_tick + int(exit_idx - entry_idx)\n","\n","  y0, y1 = plt.gca().get_ylim()\n","  ep_ymax = ep / y1\n","  tp_ymax = tp / y1\n","  plt.axvline(open_tick, 0, ep_ymax, alpha=1, linestyle='--', color='#ffeb3b')\n","  plt.axvline(ep_tick, 0, ep_ymax, alpha=1, linestyle='--', color='#ffeb3b')\n","  plt.axvline(tp_tick, 0, tp_ymax, alpha=1, linestyle='--', color='#ffeb3b')\n","\n","  if (iout - iin) > x_max:\n","    x_margin = x_max * x_margin_mult\n","    plt.xlim(0 - x_margin, x_max + x_margin)\n","  x0, x1 = plt.gca().get_xlim()\n","  # ------ hline entry & exit ------ #\n","  ep_xmin = ep_tick / x1\n","  tp_xmin = tp_tick / x1\n","  plt.axhline(ep, linestyle='--', xmin=ep_xmin, xmax=1, alpha=1, color='lime')  # ep line axhline\n","  plt.text(x1, ep, ' ep :\\n {}'.format(ep), ha='left', va='center', fontweight='bold')  # ep line label\n","  plt.axhline(tp, linestyle='--', xmin=tp_xmin, xmax=1, alpha=1, color='lime')  # tp line axhline\n","  plt.text(x1, tp, ' tp :\\n {}'.format(tp), ha='left', va='center', fontweight='bold')  # tp line label\n","\n","  # ------ tpout_line ------ #\n","  plt.axhline(tp_line, linewidth=1, linestyle='-', alpha=1, color='#ffffff')\n","  plt.text(x0, tp_line, ' %s' % config.tr_set.tp_gap, ha='left', va='center', fontweight='bold')\n","  plt.axhline(out_line, linewidth=1, linestyle='-', alpha=1, color='#ffffff')\n","  plt.text(x0, out_line, ' %s' % config.tr_set.out_gap, ha='left', va='center', fontweight='bold')\n","\n","  return"],"metadata":{"id":"ESReTMpP7SoO","executionInfo":{"status":"ok","timestamp":1646442948129,"user_tz":-540,"elapsed":391,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}}},"execution_count":14,"outputs":[]},{"cell_type":"markdown","source":["### sync_check"],"metadata":{"id":"X0FsT-8FZRti"}},{"cell_type":"code","source":["save_plot = 0\n","\n","open_idx_range = reversed(range(0, len(res_df), 1000))\n","plot_range = 100\n","\n","x_max = 400\n","\n","inversion = 0\n","hedge = 0\n","\n","\n","if save_plot:\n","  plot_check_dir = current_path + \"plot_check/\" +  key.replace(\".ftr\", \"\")\n","  try:\n","    os.mkdir(plot_check_dir)\n","  except:\n","\n","    #     remove existing dir   #\n","    shutil.rmtree(plot_check_dir)\n","    print(plot_check_dir, 'removed !')\n","    os.mkdir(plot_check_dir)\n","    # pass\n","    \n","\n","prev_plotsize = 30\n","post_plotsize = 20\n","\n","\n","\n","h_candle_intv1 = 15\n","h_candle_intv2 = 60\n","if 'hopen_{}'.format(h_candle_intv2) not in res_df.columns:\n","  res_df = h_candle(res_df, h_candle_intv1)\n","  res_df = h_candle(res_df, h_candle_intv2)\n","\n","res_df[\"ma30_1m\"] = res_df['close'].rolling(30).mean()\n","res_df[\"ma60_1m\"] = res_df['close'].rolling(60).mean()\n","\n","res_df = dtk_plot(res_df, dtk_itv2='15m', hhtf_entry=15, use_dtk_line=config.loc_set.zone.use_dtk_line)\n","# res_df = dtk_plot(res_df, dtk_itv2='15m', hhtf_entry=1, use_dtk_line=1)\n","# break\n","\n","rtc_list = [\"short_tp_1_{}\".format(strat_version), \"short_tp_gap_{}\".format(strat_version), \"long_tp_1_{}\".format(strat_version), \"long_tp_gap_{}\".format(strat_version)]\n","# h_rtc_list = [\"h_short_tp_1\", \"h_short_tp_gap\", \"h_long_tp_1\", \"h_long_tp_gap\"]\n","dtk_list = [\"short_dtk_1_{}\".format(strat_version), \"short_dtk_gap_{}\".format(strat_version), \"long_dtk_1_{}\".format(strat_version), \"long_dtk_gap_{}\".format(strat_version),\n","            # \"short_dtk_1_line\", \"short_dtk_gap_line\", \"long_dtk_1_line\", \"long_dtk_gap_line\",\n","            \"short_dtk_plot_1\", \"short_dtk_plot_gap\", \"long_dtk_plot_1\", \"long_dtk_plot_gap\"]\n","dc_v2_list = ['dc_upper_v2_{}'.format(strat_version), 'dc_lower_v2_{}'.format(strat_version)]\n","\n","\n","ohlc_list = ['open', 'high', 'low', 'close'] # + basic_st_list\n","hcandle_list = ['hopen_%s' % h_candle_intv1, 'hclose_%s' % h_candle_intv1, 'hopen_%s' % h_candle_intv2, 'hclose_%s' % h_candle_intv2]\n","# hcandle_list = ['hopen_%s' % h_candle_intv1, 'hclose_%s' % h_candle_intv1, 'hhigh_%s' % h_candle_intv2, 'hlow_%s' % h_candle_intv2]\n","\n","# --------------------- dc & bb level --------------------- #\n","dc_interval = '1m'\n","hdc_interval = '5m'\n","hhdc_interval = '15m'\n","\n","st_list = ['st_base_%s' % hhdc_interval, 'st_upper_%s' % hhdc_interval, 'st_lower_%s' % hhdc_interval]\n","\n","dc_list = ['dc_upper_%s' % dc_interval, 'dc_lower_%s' % dc_interval]\n","hdc_list = ['dc_upper_%s' % hdc_interval, 'dc_lower_%s' % hdc_interval]\n","hhdc_list = ['dc_upper_%s' % hhdc_interval, 'dc_lower_%s' % hhdc_interval]\n","\n","bb_interval = dc_interval\n","hbb_interval = hdc_interval\n","hhbb_interval = hhdc_interval\n","\n","bb_list = ['bb_upper_%s' % bb_interval, 'bb_lower_%s' % bb_interval]\n","hbb_list = ['bb_upper_%s' % hbb_interval, 'bb_lower_%s' % hbb_interval]\n","hhbb_list = ['bb_upper_%s' % hhbb_interval, 'bb_lower_%s' % hhbb_interval]\n","\n","bbwp_list = ['bbwp', 'bbwp_ma']\n","\n","\n","senkoua_list = ['senkou_a1', 'senkou_a2', 'senkou_a3', 'senkou_a4', 'senkou_a5']\n","senkoub_list = ['senkou_b1', 'senkou_b2', 'senkou_b3', 'senkou_b4', 'senkou_b5']\n","senkoua_list = ['senkou_a1']\n","senkoub_list = ['senkou_b1']\n","\n","sar_list = ['sar_3m', 'sar_5m', 'sar_15m']\n","\n","ma_list = ['ma30_1m', 'ma60_1m']\n","sma_list = ['sma_1m']\n","\n","ema_list = ['ema_5m']\n","# cb_list = ['cloud_bline_1m']\n","cb_list = ['cloud_bline_30m']\n","# cb_list = ['cloud_bline_5m']\n","\n","\n","\n","# -------------- under price phase -------------- #\n","# macd_list = ['macd_hist1', 'macd_hist2', 'macd_hist3']\n","# trix_list = ['trix1', 'trix2', 'trix3']\n","# stoch_list = ['stoch_5m']\n","# fisher_list = ['fisher30', 'fisher60', 'fisher120']\n","# cctbbo_list = ['cctbbo']\n","# emaroc_list = ['ema_roc']\n","rsi_list = ['rsi_%s' % config.loc_set.point.exp_itv] \n","cci_list = ['cci_%s' % config.loc_set.point.exp_itv] \n","\n","\n","# -------------- summation -------------- #\n","# input_colname = ohlc_list + basic_st_list + pline_list + bb_list + hbb_list + sma_list + cb_list + stoch_list + sar_list + dc_list\n","input_colname = ohlc_list + hcandle_list + bb_list + hbb_list + hhbb_list + dc_list + hdc_list + hhdc_list + dtk_list + dc_v2_list + rsi_list + ema_list + ma_list + st_list# + cci_list\n","\n","# yrange_colname = ohlc_list + basic_st_list + pline_list # currently just used for ymin, ymax\n","yrange_colname = ohlc_list + hcandle_list + bb_list + hbb_list + hhbb_list + dc_list + hdc_list + hhdc_list + dc_v2_list + ema_list # currently just used for ymin, ymax\n","yrange_colname = ohlc_list + hcandle_list + bb_list + hbb_list + hhbb_list + dc_list + hdc_list + dc_v2_list + ema_list # currently just used for ymin, ymax\n","\n","\n","\n","odd_cnt = 0\n","obj_i = -1\n","rev_obj_i = 0\n","\n","#   지금, continue 발생시 true / false idx 가 같이 상승하는 문제\n","\n","# while 1:\n","for open_idx in open_idx_range:\n","\n","  # if obj_i >= len_obj or rev_obj_i >= len_obj:\n","  #   break\n","\n","  # if odd_cnt % 2 == 1 and tf_plot: #  loss plot 을 채워야하는 상황\n","  #   rev_obj_i += 1\n","\n","  # else:\n","  #   obj_i += 1\n","\n","  if not(i >= prev_plotsize):\n","    continue\n","  \n","\n","  odd_cnt += 1\n","\n","  # break\n","\n","  print(\"open_idx :\", open_idx)\n","  \n","  plot_df = res_df.iloc[open_idx - prev_plotsize:open_idx + plot_range + post_plotsize][input_colname]\n","  \n","  odds = 1 if odd_cnt % 2 == 1 else 2\n","  if odds == 1:\n","\n","    plt.style.use('dark_background')\n","\n","    fig = plt.figure(figsize=(26, 18))\n","    \n","    gs = gridspec.GridSpec(nrows=2, # row 몇 개 \n","                        ncols=2, # col 몇 개 \n","                        height_ratios=[3, 1]\n","                        )\n","    \n","  ax = fig.add_subplot(gs[odds - 1])\n","\n","  # fig.show()\n","  # fig.canvas.draw()\n","\n","  temp_ohlc = plot_df.values[:, :4]\n","  index = np.arange(len(temp_ohlc))\n","  candle = np.hstack((np.reshape(index, (-1, 1)), temp_ohlc))\n","  mf.candlestick_ohlc(ax, candle, width=0.5, colorup='#26a69a', colordown='#ef5350', alpha=0.5)\n","\n","  # ---------- h_candle ---------- #\n","  alpha = 1\n","  lw = 1\n","  for cd_i, candle in enumerate(hcandle_list):\n","\n","    if cd_i == 2:\n","      lw = 2      \n","    plt.step(np.arange(len(plot_df)), plot_df[candle].values, alpha=alpha, color='#ffffff', linewidth=lw)\n","\n","  # alpha = 0.1\n","  # plt.fill_between(np.arange(len(plot_df)), plot_df['hclose_60'].values, plot_df['hopen_60'].values, \n","  #                     where=1, facecolor='#ffffff', alpha=alpha)  \n","  \n","\n","   # --------- ma --------- #\n","  alpha = 1\n","  lw = 2\n","  for ma_i, item in enumerate(ma_list):\n","    plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#ffeb3b', linewidth=lw)\n","\n","   # --------- ema --------- #\n","  alpha = 1\n","  lw = 4\n","  for sm_i, item in enumerate(ema_list):\n","    plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#03ed30', linewidth=lw)\n","    \n","   # --------- st --------- #\n","  alpha = 1\n","  lw = 2\n","  for sm_i, item in enumerate(st_list):\n","      plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#00ff00', linewidth=lw)\n","\n","  # ---------------------- dc_v2 ---------------------- #\n","  # alpha = 1\n","  # lw = 2\n","  # for sm_i, item in enumerate(dc_v2_list):\n","  #     plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#ffeb3b', linewidth=lw)\n","\n","  # # ---------------------- dc ---------------------- #\n","  # alpha = 1\n","  # lw = 2\n","  # for sm_i, item in enumerate(dc_list):\n","  #     plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#ffeb3b', linewidth=lw)\n","\n","  # # ---------------------- hdc ---------------------- #\n","  # alpha = 1\n","  # lw = 2\n","  # for sm_i, item in enumerate(hdc_list):\n","  #     plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#e65100', linewidth=lw)\n","\n","  # # ---------------------- hhdc ---------------------- #\n","  # alpha = 1\n","  # lw = 4\n","  # for sm_i, item in enumerate(hhdc_list):\n","  #     plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#c2185b', linewidth=lw)\n","\n","\n","  # # ---------------------- bb ---------------------- #\n","  # alpha = 1\n","  # lw = 1\n","  # for sm_i, item in enumerate(bb_list):\n","  #   plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#ffffff', linewidth=lw)\n","\n","  # alpha = 0.2\n","  # plt.fill_between(np.arange(len(plot_df)), plot_df['bb_upper_%s' % bb_interval].values, plot_df['bb_lower_%s' % bb_interval].values, \n","  #                     where=plot_df['bb_upper_%s' % bb_interval].values >= plot_df['bb_lower_%s' % bb_interval].values, facecolor='#ffffff', alpha=alpha)   \n","\n","  # # ---------------------- hbb ---------------------- #\n","  # alpha = 1\n","  # lw = 2\n","  # for sm_i, item in enumerate(hbb_list):\n","  #   plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#ff00ff', linewidth=lw)\n","  \n","  # alpha = 0.2\n","  # plt.fill_between(np.arange(len(plot_df)), plot_df['bb_upper_%s' % hbb_interval].values, plot_df['bb_lower_%s' % hbb_interval].values, \n","  #                     where=plot_df['bb_upper_%s' % hbb_interval].values >= plot_df['bb_lower_%s' % hbb_interval].values, facecolor='#ff00ff', alpha=alpha) \n","  \n","  # # ---------------------- hhbb ---------------------- #\n","\n","  # alpha = 1\n","  # lw = 4\n","  # for sm_i, item in enumerate(hhbb_list):\n","  #   plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#3179f5', linewidth=lw)\n","  \n","  # alpha = 0.2\n","  # plt.fill_between(np.arange(len(plot_df)), plot_df['bb_upper_%s' % hhbb_interval].values, plot_df['bb_lower_%s' % hhbb_interval].values, \n","  #                     where=plot_df['bb_upper_%s' % hhbb_interval].values >= plot_df['bb_lower_%s' % hhbb_interval].values, facecolor='#3179f5', alpha=alpha) \n","  \n","  # ------------------- dtk_line (old, tp_line) ------------------- #\n","  \n","  # alpha = 1\n","  # lw = 2\n","  # rtc_ratio_list = [config.loc_set.zone.dt_k]\n","  \n","  # for rtc_k in rtc_ratio_list:    \n","  #   # plt.step(np.arange(len(plot_df)), plot_df['short_dtk_1_line'].values - plot_df['short_dtk_gap_line'].values * rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","  #   # plt.step(np.arange(len(plot_df)), plot_df['long_dtk_1_line'].values + plot_df['long_dtk_gap_line'].values * rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","  #   plt.step(np.arange(len(plot_df)), plot_df['short_dtk_1'].values - plot_df['short_dtk_gap'].values * rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","  #   plt.step(np.arange(len(plot_df)), plot_df['long_dtk_1'].values + plot_df['long_dtk_gap'].values * rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","\n","  # hy_min = np.min(plot_df['short_dtk_1'].values - plot_df['short_dtk_gap'].values * rtc_k)\n","  # hy_max = np.max(plot_df['long_dtk_1'].values + plot_df['long_dtk_gap'].values * rtc_k)  \n","\n","  # alpha = 1\n","  # lw = 4\n","  # # h_rtc_ratio_list = [config.loc_set.zone.dt_k]\n","  # h_rtc_ratio_list = [config.loc_set.zone.zone_dt_k]\n","  # # h_rtc_ratio_list = [0.272, 0.36, 0.4, 0.5]\n","  \n","  # for h_rtc_k in h_rtc_ratio_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df['short_dtk_plot_1'].values - plot_df['short_dtk_plot_gap'].values * h_rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","  #   plt.step(np.arange(len(plot_df)), plot_df['long_dtk_plot_1'].values + plot_df['long_dtk_plot_gap'].values * h_rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","  #   # plt.step(np.arange(len(plot_df)), plot_df['h_short_tp_1'].values - plot_df['h_short_tp_gap'].values * h_rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","  #   # plt.step(np.arange(len(plot_df)), plot_df['h_long_tp_1'].values + plot_df['h_long_tp_gap'].values * h_rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","\n","  # # hy_min = np.min(plot_df['short_dtk_plot_1'].values - plot_df['short_dtk_plot_gap'].values * h_rtc_k)\n","  # # hy_max = np.max(plot_df['long_dtk_plot_1'].values + plot_df['long_dtk_plot_gap'].values * h_rtc_k)  \n","\n","  # ------------- y lim ------------- #  \n","  y_max = max(np.max(plot_df[yrange_colname]))\n","  y_min = min(np.min(plot_df[yrange_colname]))\n","  # y_max = max(y_max, y_max_)\n","  # y_min = min(y_min, y_min_)\n","  \n","  # hy_min = np.min(plot_df['short_dtk_1'].values - plot_df['short_dtk_gap'].values * 0.36)\n","  # hy_max = np.max(plot_df['long_dtk_1'].values + plot_df['long_dtk_gap'].values * 0.36)  \n","  # y_max = max(y_max, y_max_, hy_max)\n","  # y_min = min(y_min, y_min_, hy_min)\n","\n","  if np.isnan(y_max) or np.isnan(y_min):\n","    print('continued in yminmax')\n","    continue\n","  # print(\"y_max, y_min :\", y_max, y_min)\n","  # break\n","\n","  plt.ylim(y_min, y_max)\n","\n","\n","  # ---------------------- plot ---------------------- #\n","\n","  #           rsi          #    \n","  plt.subplot(gs[odds + 1])\n","  alpha = 1\n","  for rsi_ in rsi_list:\n","    plt.step(np.arange(len(plot_df)), plot_df[rsi_].values, 'g', alpha=alpha)\n","    # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","    alpha -= 0.2\n","  plt.axhline(50, linestyle='--')\n","  plt.axhline(50 + config.loc_set.point.osc_band, linestyle='--')\n","  plt.axhline(50 - config.loc_set.point.osc_band, linestyle='--')\n","  \n","  plt.axvline(prev_plotsize, linestyle='--')\n","  \n","  #           cci          #    \n","  # plt.subplot(gs[odds + 1])\n","  # alpha = 1\n","  # for cci_ in cci_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[cci_].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axhline(config.loc_set.point.osc_band, linestyle='--')\n","  # plt.axhline(-config.loc_set.point.osc_band, linestyle='--')\n","  \n","  # plt.axvline(prev_plotsize, linestyle='--')\n","\n","\n","  if len(plot_df) > x_max:\n","    x_margin = x_max / 20\n","    plt.xlim(0 - x_margin, x_max + x_margin)\n","\n","\n","  if not save_plot:\n","    if odds == 2:\n","      plt.show()\n","      plt.close()\n","  \n","  else:\n","    # ---------- save mode ---------- #\n","    fig_name = plot_check_dir +  \"/%s.png\" % t_i\n","    plt.savefig(fig_name)\n","    print(fig_name, \"saved !\")\n","\n","  # plt.close()  \n","  print()\n","\n","  # break\n"],"metadata":{"id":"inQ6f-CDZYkr"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"13a-U32Uy50I"},"source":["### brief np_pr survey"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"L9LdjV2uUWnp"},"outputs":[],"source":["# plot_pr_list[:100]\n","plt.plot(np_pr)\n","plt.axhline(1)\n","plt.show()"]},{"cell_type":"markdown","metadata":{"id":"TBE0l6dHRYrE"},"source":["### close & pr comp."]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":877},"executionInfo":{"elapsed":1436,"status":"ok","timestamp":1636355589887,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"-txULkhXRbz5","outputId":"7cda9fc7-4a4e-4c52-ffa3-a974b5f7c66f"},"outputs":[{"data":{"image/png":"\n","text/plain":["<Figure size 640x480 with 3 Axes>"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["\n"]},{"data":{"image/png":"\n","text/plain":["<Figure size 640x480 with 3 Axes>"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["\n"]}],"source":["#     chunky survey 필요함    #\n","chunk_size = 50000\n","\n","sync_pr = np.ones(len(res_df))\n","sync_tr = np.zeros(len(res_df))\n","# sync_tr = np.empty(len(res_df))\n","# sync_tr[:] = np.nan\n","\n","max_tr = np.max(tp_ratio_list)\n","min_tr = np.min(tp_ratio_list)\n","\n","for ck_i in range(0, len(res_df), chunk_size):\n","\n","  chunked_df = res_df.iloc[ck_i:ck_i + chunk_size]\n","  # break\n","\n","  for pr_, eptp_idx, tr_ in zip(pr_list[ck_i:ck_i + chunk_size], trade_list[ck_i:ck_i + chunk_size], tp_ratio_list[ck_i:ck_i + chunk_size]):\n","    # print(pr_, eptp_idx)\n","    sync_pr[eptp_idx[-1][0]] = pr_\n","    sync_tr[eptp_idx[-1][0]] = tr_\n","    # break\n","\n","  chunked_pr = sync_pr[ck_i:ck_i + chunk_size]\n","  chunked_tr = sync_tr[ck_i:ck_i + chunk_size]\n","  chunked_tr = np.where(np.isnan(chunked_tr), pd.Series(chunked_tr).shift(1), chunked_tr)\n","\n","  # plt.figure(figsize=(8, 6))\n","\n","  plt.subplot(311)\n","  plt.plot(np.arange(len(chunked_df)), chunked_df['close'])\n","  # plt.show()\n","\n","  plt.subplot(312)\n","  plt.plot(np.cumprod(chunked_pr))\n","  \n","  plt.subplot(313)\n","  plt.plot(chunked_tr)\n","  plt.ylim(min_tr + 0.5 * (max_tr - min_tr), max_tr)\n","  \n","  plt.show()\n","  print()\n"]},{"cell_type":"markdown","metadata":{"id":"Qys2Bw5Ou3u9"},"source":["### plot indi. legacy"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"pi5ntOOVu6JT"},"outputs":[],"source":["\n","  # ---------------------- ma ---------------------- #\n","   # --------- ema --------- #\n","  # alpha = 1\n","  # for sm_i, item in enumerate(ema_list):\n","  #   if sm_i > 0:\n","  #     lw = 5\n","  #   else:\n","  #     lw = 2\n","  #   plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#03ed30', linewidth=lw)\n","  #   alpha -= 0.2\n","\n","  #   # --------- sma --------- #\n","  # alpha = 1\n","  # for sm_i, sma in enumerate(sma_list):\n","  #   if sm_i > 0:\n","  #     lw = 5\n","  #   else:\n","  #     lw = 4\n","  #   plt.step(np.arange(len(plot_df)), plot_df[sma].values, alpha=alpha, color='#e91e63', linewidth=lw)\n","  #   alpha -= 0.2\n","\n","  \n","  # ---------------------- cb ---------------------- #\n","  # alpha = 1\n","  # for sm_i, item in enumerate(cb_list):\n","  #   if sm_i > 0:\n","  #     lw = 5\n","  #   else:\n","  #     lw = 2\n","  #   plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#5b9cf6', linewidth=lw)\n","  #   alpha -= 0.2\n","\n","\n","  \n","  # ---------------------- sar ---------------------- #\n","  # alpha = 1\n","  # markersize = 5\n","  # for sar in sar_list:\n","  #   plt.step(plot_df[sar].values, 'c*', alpha=alpha, markersize=markersize, color='dodgerblue')  # sar mic\n","  #   markersize += 1\n","  #   alpha -= 0.1\n","\n","  # plt.step(plot_df.values[:, [12]], 'co', alpha=1, markersize=7)  # sar mac\n","\n","  #               cloud               #\n","  # alpha = 0.7\n","  # for senkoua, senkoub in zip(senkoua_list, senkoub_list):\n","  #   plt.fill_between(np.arange(len(plot_df)), plot_df[senkoua].values, plot_df[senkoub].values, # ichimoku\n","  #                     where=plot_df[senkoua].values >= plot_df[senkoub].values, facecolor='g', alpha=alpha) # ichimoku\n","  #   plt.fill_between(np.arange(len(plot_df)), plot_df[senkoua].values, plot_df[senkoub].values,\n","  #                     where=plot_df[senkoua].values <= plot_df[senkoub].values, facecolor='r', alpha=alpha)  \n","  #   alpha -= 0.05\n","  \n","\n","\n","  # ---------------------- outer price indi. ---------------------- #\n","  #           macd          #\n","  # plt.subplot(312)\n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for macd in macd_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[macd].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","\n","  # plt.axhline(0, linestyle='--')\n","\n","  \n","  # #           trix          #  \n","  # # plt.subplot(313)\n","  # plt.subplot(gs[2])\n","  # alpha = 1\n","  # for trix in trix_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[trix].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","  # plt.axhline(0, linestyle='--')\n","\n","  \n","  #           fisher          #  \n","  # plt.subplot(313)\n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for fisher in fisher_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[fisher].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","    \n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","\n","  # plt.axhline(0, linestyle='--')\n","  # plt.axhline(fisher_upper, linestyle='--')\n","  # plt.axhline(fisher_lower, linestyle='--')\n","\n","  #           stoch          #  \n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for stoch_ in stoch_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[stoch_].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axhline(50, linestyle='--')\n","  # plt.axhline(stoch_upper, linestyle='--')\n","  # plt.axhline(stoch_lower, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","\n","  # ---------- cctbbo ---------- #  \n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for cctbbo in cctbbo_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[cctbbo].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axhline(50, linestyle='--')\n","  # plt.axhline(cctbbo_upper, linestyle='--')\n","  # plt.axhline(cctbbo_lower, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","\n","  # ---------- ema_roc ---------- #  \n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for emaroc in emaroc_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[emaroc].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","  # plt.axhline(0, linestyle='--')\n","  \n","  # ---------- bbw ---------- #  \n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for bbwp_ in bbwp_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[bbwp_].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","  # plt.axhline(bbwp_thresh, linestyle='--')\n","\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","\n"]},{"cell_type":"markdown","metadata":{"id":"cj9X6S1jJjER"},"source":["### plot nontp case"]},{"cell_type":"markdown","metadata":{"id":"tApzvz_gK9lR"},"source":["## legacy"]},{"cell_type":"markdown","metadata":{"id":"FaRGwR4NEop2"},"source":["### shifting"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"a8aYsjEgQnGF"},"outputs":[],"source":["org_res_df = res_df.copy()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":291,"status":"ok","timestamp":1626515312874,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"},"user_tz":-540},"id":"RF3RM2G2RCb1","outputId":"ba8f6a75-d4df-4f85-cd0f-190935341f7a"},"outputs":[{"name":"stdout","output_type":"stream","text":["                            open     high  ...  min_upper  max_lower\n","2021-06-30 23:55:59.999  0.27223  0.27281  ...   0.272145    0.27005\n","2021-06-30 23:56:59.999  0.27274  0.27290  ...   0.272145    0.27005\n","2021-06-30 23:57:59.999  0.27246  0.27257  ...   0.272523    0.27021\n","2021-06-30 23:58:59.999  0.27166  0.27183  ...   0.272523    0.27021\n","2021-06-30 23:59:59.999  0.27144  0.27211  ...   0.272523    0.27021\n","\n","[5 rows x 37 columns]\n","                            open     high  ...  min_upper  max_lower\n","2021-06-30 23:55:59.999  0.27223  0.27281  ...   0.272523    0.27021\n","2021-06-30 23:56:59.999  0.27274  0.27290  ...        NaN        NaN\n","2021-06-30 23:57:59.999  0.27246  0.27257  ...        NaN        NaN\n","2021-06-30 23:58:59.999  0.27166  0.27183  ...        NaN        NaN\n","2021-06-30 23:59:59.999  0.27144  0.27211  ...        NaN        NaN\n","\n","[5 rows x 37 columns]\n"]}],"source":["#         refresh res_df      #\n","res_df = org_res_df.copy()\n","print(org_res_df.tail(5))\n","\n","# break\n","\n","\n","shift_size = -4\n","# shift_size = -1\n","# shift_size = -7\n","# shift_size = +3\n","\n","res_df['min_upper'] = res_df['min_upper'].shift(shift_size)\n","res_df['max_lower'] = res_df['max_lower'].shift(shift_size)\n","res_df['minor_ST1_Trend'] = res_df['minor_ST1_Trend'].shift(shift_size)\n","res_df['minor_ST2_Trend'] = res_df['minor_ST2_Trend'].shift(shift_size)\n","res_df['minor_ST3_Trend'] = res_df['minor_ST3_Trend'].shift(shift_size)\n","res_df['middle_line'] = res_df['middle_line'].shift(shift_size)\n","\n","print(res_df.tail(5))"]},{"cell_type":"markdown","metadata":{"id":"2gxvme1PC6ha"},"source":["### load model"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":5831,"status":"ok","timestamp":1628862368878,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"},"user_tz":-540},"id":"dtYdAuSsC72_","outputId":"e8dccc53-aaa7-4bab-ed8d-753f634c08d6"},"outputs":[{"name":"stdout","output_type":"stream","text":["Downloading data from https://storage.googleapis.com/tensorflow/keras-applications/resnet/resnet50_weights_tf_dim_ordering_tf_kernels_notop.h5\n","94773248/94765736 [==============================] - 1s 0us/step\n"]}],"source":["# model_name = 'inner_tick_cnnreg_lscalemm_prefee_gpu_%s_%s_%s_%s_%s.h5'\n","\n","# model = tf.keras.models.load_model(ckpt_path + model_name)\n","\n","from tensorflow.keras.applications.resnet50 import ResNet50\n","\n","model = ResNet50(weights='imagenet', include_top=False)\n","# model.summary()\n"]},{"cell_type":"markdown","metadata":{"id":"5la6usMOFzkX"},"source":["#### gen selected vector"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"oQk3-jbKF8FB"},"outputs":[],"source":["def min_max_scale(npy_x):\n","\n","  return (npy_x - np.min(npy_x)) / (np.max(npy_x) - np.min(npy_x))\n","\n","def expand_dims(npy_x):\n","\n","  row, col = npy_x.shape\n","  npy_x2 = np.array(npy_x).reshape(-1, row, col, 1).astype(np.float32)\n","  # input_x = np.array(data_x).reshape(-1, row, col).astype(np.float32)\n","\n","  #     1c to 3c    #\n","  npy_x3 = npy_x2 * np.ones(3, dtype=np.float32)[None, None, None, :]\n","\n","  return npy_x3\n","\n","\n","def vector_dist(f1, f2):\n","  return np.linalg.norm(f1-f2)\n","\n","\n","\n","# ------------------------ params ------------------------  #\n","selected_i = 500\n","input_size = 100\n","\n","\n","\n","#   1. 선택된 인덱스를 입력받았을 때, input generating 형태만 만들어놓고,     #\n","#   1-1. input cols 필요함    #\n","\n","basic_list = ['open', 'high', 'low', 'close', 'minor_ST1_Up', 'minor_ST1_Down',\n","       'minor_ST2_Up', 'minor_ST2_Down', 'minor_ST3_Up', 'minor_ST3_Down',\n","       'middle_line', 'min_upper', 'max_lower']\n","# senkoua_list = ['senkou_a1', 'senkou_a2', 'senkou_a3', 'senkou_a4', 'senkou_a5']\n","# senkoub_list = ['senkou_b1', 'senkou_b2', 'senkou_b3', 'senkou_b4', 'senkou_b5']\n","senkoua_list = ['senkou_a1', 'senkou_a2', 'senkou_a3']\n","senkoub_list = ['senkou_b1', 'senkou_b2', 'senkou_b3']\n","# sar_list = ['sar1', 'sar2', 'sar3', 'sar4', 'sar5']\n","# sar_list = ['sar1', 'sar2', 'sar3', 'sar4', 'sar5']\n","sar_list = ['sar1', 'sar2', 'sar3']\n","sar_list = ['sar1', 'sar2', 'sar3']\n","\n","sma_list = ['sma']\n","\n","#     -------------- outer price phase --------------    #\n","macd_list = ['macd_hist1', 'macd_hist2', 'macd_hist3', 'macd_hist4', 'macd_hist5']\n","trix_list = ['trix1', 'trix2', 'trix3', 'trix4', 'trix5']\n","stoch_list = ['stoch']\n","fisher_list = ['fisher30', 'fisher60', 'fisher120']\n","cctbbo_list = ['cctbbo']\n","\n","selected_price_colname = basic_list + senkoua_list + senkoub_list + sar_list\n","selected_outprice_colname = [macd_list]\n","\n","\n","#         global scaling for outer price data       #\n","#         1. nan 처리       #\n","\n","# # print((np.isnan(df.values)))\n","# print(\"np.sum(np.isnan(df.values), axis=0) :\", np.sum(np.isnan(df.values), axis=0))\n","\n","# max_nan = np.max(np.sum(np.isnan(df.values), axis=0))\n","# # print(max_nan)\n","\n","# df = df.iloc[max_nan:-max_nan]\n","\n","# total_gdata = []\n","# for g_col in selected_outprice_colname:\n","\n","#   temp_data = min_max_scale(res_df[g_col])\n","#   total_gdata.append(temp_data)\n","\n","\n","\n","#   1-2. cols 에 따른, scaling method 구분함    #\n","onprice_input_x = min_max_scale(res_df[selected_price_colname].iloc[selected_i - input_size:selected_i].values)\n","print(onprice_input_x.shape)\n","\n","\n","#   2. plot_check 에서 본인이 원하는 shape 의 인덱스를 선택   #\n","#   3. vertorize, \n","#   3-1. input generator 를 이용해 entry signal 발생할 때마다 dist 비교 진행    #\n","re_onprice_input_x = expand_dims(onprice_input_x)\n","print(re_onprice_input_x.shape)\n","      \n","# break\n","\n","selected_vector = model.predict(re_onprice_input_x, verbose=1)\n","print(selected_vector.shape)"]},{"cell_type":"markdown","metadata":{"id":"OJqkmkpsLCYC"},"source":["### tr_tresh calc"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"gcpo4MGd9Wm4"},"outputs":[],"source":["res_wr = 0.6\n","# tr_thresh = 1\n","# tr_thresh = ((1 - res_wr) / res_wr) ** 0.5\n","tr_thresh = ((1 - res_wr) / res_wr) + 0.01\n","# tr_thresh = 2.6\n","print(\"res_wr :\", res_wr)\n","print(\"tr_thresh :\", tr_thresh)\n","\n","\n","#   단리    #\n","trade_num = 1000\n","asset = 1 # thousand USDT\n","test_loss_gap = 0.95  # fee adjusted\n","test_pr_gap = 1 + (1 - test_loss_gap) * tr_thresh\n","\n","test_loss_cnt = trade_num * (1 - res_wr)\n","test_pr_cnt = trade_num * res_wr\n","\n","test_trade_list = [test_pr_gap] * int(test_pr_cnt) + [test_loss_gap] * int(test_loss_cnt)\n","random.shuffle(test_trade_list)\n","# print(\"len(test_trade_list) :\", len(test_trade_list))\n","print(test_trade_list[:10])\n","print()\n","\n","# print(\"%.5f\" % np.cumprod(test_trade_list)[-1])\n","for tr_thresh_ in np.arange(1, 3, 0.2):\n","  if (1 + (1 - test_loss_gap) * tr_thresh_) ** test_pr_cnt * test_loss_gap ** test_loss_cnt > 1:\n","    break\n","print(\"복리를 위한 tr_thresh_ :\", tr_thresh_)\n","# print(\"tr_thresh :\", tr_thresh)\n","print(\"np.cumprod(test_trade_list)[-1] :\", np.cumprod(test_trade_list)[-1])\n","print(\"total_pr : \", np.cumprod(test_trade_list)[-1])\n","print()\n","#   복리 tr_thresh  #\n","#   1. trade_num 에 영향 받지 않음\n","#   2. loss_gap 에 비례함\n","\n","for tr_thresh_ in np.arange(1, 3, 0.01):\n","  if ((1 - test_loss_gap) * tr_thresh_) * test_pr_cnt + (test_loss_gap - 1) * test_loss_cnt > 0:\n","    break\n","np_test_trade = np.array(test_trade_list) - 1\n","print(np_test_trade[:10])\n","# print(\"%.3f\" % )\n","print(\"단리를 위한 tr_thresh_ :\", tr_thresh_)\n","# print(\"tr_thresh :\", tr_thresh)\n","print(\"np.cumsum(np_test_trade)[-1] :\", np.cumsum(np_test_trade)[-1])\n","print(\"total_pr : \", 1 + np.cumsum(np_test_trade)[-1])\n"]}],"metadata":{"accelerator":"GPU","colab":{"collapsed_sections":["Ic1mfmwWCIBu","mEKyVbHWSuzi","VdukVo5-Suzj","Bw5JibDKSuzj","Pe0QpnORSuzk","4oZ1ohTtSuzk","E0n53hflJbnp","MlFkpO1MSuzl","t1E_eAyPSuzm","WVAKq3i8Suzm","L7l5CTJfSuzn","x_XGJqBi8Jex","MSUY4nnku3s9","epgS5Dksu-HX","M8-EChy0VsDr","Iy76iO7gztne","xpyP5t8Ht_pE","dzla8i9_ysmP","Ksth13T0spcQ","IWO7KkqltMFt","EFyWTuscH8VH","Up1TNNxbfKbk","zQ-roiifspcX","X0FsT-8FZRti","13a-U32Uy50I","TBE0l6dHRYrE","tApzvz_gK9lR","FaRGwR4NEop2","2gxvme1PC6ha","5la6usMOFzkX","OJqkmkpsLCYC"],"name":"IDv3_3_vec_backi2(0304_functional).ipynb","toc_visible":true,"provenance":[],"authorship_tag":"ABX9TyM+JozzfQpJmtG7iX1soNrX"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}