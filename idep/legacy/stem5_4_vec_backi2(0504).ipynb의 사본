{"cells":[{"cell_type":"code","execution_count":1,"metadata":{"id":"6rmQpzEGXfCw","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1651813085289,"user_tz":-540,"elapsed":4498,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"18e837e8-c006-4c7b-bb70-e78ae516830e"},"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')\n","\n","import os, sys\n","\n","current_path = '/content/drive/My Drive/Colab Notebooks/JnQ/'\n","\n","os.chdir(current_path)\n","\n","strat_pkg = 'IDE'\n","\n","mpl_finance_path = '/content/drive/My Drive/Colab Notebooks/JnQ/mpl_finance'\n","ta_lib_path = '/content/drive/My Drive/Colab Notebooks/JnQ/ta_lib'\n","\n","if mpl_finance_path not in sys.path:\n","\n","  try:\n","    sys.path.insert(0, '/content/drive/My Drive/Colab Notebooks/JnQ')\n","    sys.path.insert(0, '/content/drive/My Drive/Colab Notebooks/JnQ/{}'.format(strat_pkg))\n","    sys.path.insert(0, '/content/drive/My Drive/Colab Notebooks/JnQ/funcs')\n","    sys.path.insert(0, mpl_finance_path)\n","    sys.path.insert(0, ta_lib_path)\n","    \n","  except Exception as e:\n","    print(e)"]},{"cell_type":"markdown","metadata":{"id":"8uqYv5StTazo"},"source":["# requirements"]},{"cell_type":"code","execution_count":2,"metadata":{"id":"9qGt60DKTZmf","executionInfo":{"status":"ok","timestamp":1651813085981,"user_tz":-540,"elapsed":696,"user":{"displayName":"7th June","userId":"08178289703395036410"}}},"outputs":[],"source":["# !pip install zigzag --target=$'/content/drive/My Drive/Colab Notebooks/JnQ/zigzag'\n","# !pip install talib-binary --target=$'/content/drive/My Drive/Colab Notebooks/JnQ/ta_lib'\n","# !pip install findiff\n","\n","# import nvstrings, nvcategory, cudf\n","# import cuml\n","# import cudf\n","\n","import os\n","import talib\n","from funcs.funcs_idep import *\n","from funcs.funcs_duration_v2 import *\n","from funcs.funcs_plot_check import *\n","from funcs.funcs_pairing import *\n","# from funcs.funcs_ide import *\n","# from funcs.funcs_indicator_candlescore import *\n","from funcs.funcs_indicator import *\n","from funcs.funcs_trader import *\n","from ast import literal_eval\n","import logging\n","import importlib\n","\n","import mpl_finance as mf\n","import matplotlib.pyplot as plt\n","from matplotlib import gridspec\n","# from zigzag import *\n","# from tqdm.notebook import tqdm\n","\n","import IPython\n","import IPython.display\n","\n","import numpy as np\n","# import jax.numpy as np\n","import pandas as pd\n","# import seaborn as sns\n","# import tensorflow as tf\n","from scipy import stats, signal\n","\n","import pickle\n","import shutil\n","import json\n","from easydict import EasyDict\n","import copy\n","\n","import datetime\n","from datetime import datetime\n","import random\n","import time\n","# import warnings\n","\n","# warnings.simplefilter(\"ignore\", category=RuntimeWarning)\n","\n","np.seterr(invalid=\"ignore\")\n","np.set_printoptions(suppress=True)\n","np.set_printoptions(linewidth=2000) \n","\n","pd.set_option('mode.chained_assignment',  None)\n","\n","pd.set_option('display.max_rows', 500)\n","pd.set_option('display.max_columns', 500)\n","pd.set_option('display.width', 1000)"]},{"cell_type":"markdown","metadata":{"id":"Ic1mfmwWCIBu"},"source":["# makeset - with to_htf dataframes"]},{"cell_type":"markdown","metadata":{"id":"AUSBU7T8Suzi"},"source":["## sync_check_make"]},{"cell_type":"code","source":["\n","def bb_level_v2(res_df, itv, period):\n","\n","    bb_base = res_df['bb_base_{}{}'.format(itv, period)].to_numpy()\n","\n","    bb_upper2 = 'bb_upper2_{}{}'.format(itv, period)\n","    bb_lower2 = 'bb_lower2_{}{}'.format(itv, period)\n","    bb_upper3 = 'bb_upper3_{}{}'.format(itv, period)\n","    bb_lower3 = 'bb_lower3_{}{}'.format(itv, period)\n","\n","    level_gap = res_df['bb_upper_{}{}'.format(itv, period)].to_numpy() - bb_base\n","\n","    res_df[bb_upper2] = bb_base + level_gap * 2\n","    res_df[bb_lower2] = bb_base - level_gap * 2\n","\n","    res_df[bb_upper3] = bb_base + level_gap * 3\n","    res_df[bb_lower3] = bb_base - level_gap * 3\n","\n","    return res_df"],"metadata":{"id":"kuf6ZhccgRj9"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"QmhLikYlSuzi"},"outputs":[],"source":["def sync_check_make(df):\n","\n","    make_itv_list = ['3T', '5T', '15T', '30T', 'H', '4H', 'D']\n","    offset_list = ['1h', '1h', '1h', '1h', '1h', '1h', '9h']\n","\n","    assert len(make_itv_list) == len(offset_list), \"length of itv & offset_list should be equal\"\n","        \n","    htf_df_list = [to_htf(df, itv_=itv_, offset=offset_) for itv_, offset_ in zip(make_itv_list, offset_list)]\n","\n","    df_3T, df_5T, df_15T, df_30T, df_H, df_4H, df_D = htf_df_list\n","\n","    for htf_df in htf_df_list:\n","      print(\"{} -> \".format(pd.infer_freq(htf_df.index)), htf_df.tail(1))\n","\n","    # heikinashi_v2(res_df_)\n","    # h_candle_v3(df, df_5T, '5T')\n","    # df = h_candle_v4(df, df_5T)\n","    # df = h_candle_v4(df, df_15T)\n","    # df = h_candle_v4(df, df_30T)\n","    # df = h_candle_v4(df, 'D')\n","\n","    # df = candle_pattern_pkg(df, df_5T)\n","    # df = candle_pattern_pkg(df, df_30T)\n","    # df = candle_pattern_pkg(df, df_H)\n","    # df = candle_pattern_pkg(df, df_4H)\n","\n","    \n","    # df = enough_space(df, '15T', 1)\n","    \n","    # --------------- dc --------------- #  \n","    dc_period = 1\n","    # df = donchian_channel_v4(df, dc_period)\n","    # df = dc_line(df, df_5T, '5T')  # join 사용시에만 return df 허용함\n","    # df = dc_line(df, df_15T, '15T')\n","    # df = dc_line_v2(df, df_H, 'H', dc_period=5)\n","\n","    # df = dc_line_v4(df, df_15T, dc_period=dc_period)\n","    # print(\"dc phase done\")\n","\n","    # --------------- bb --------------- #  \n","    bb_period = 20\n","\n","    # upper, base, lower = talib.BBANDS(res_df_.close, timeperiod=20, nbdevup=1, nbdevdn=1, matype=0)\n","    \n","    # df = bb_width_v3(df, period=60, multiple=1)\n","    # df = bb_line(df, df_5T, '5T')\n","    # df = bb_line_v3(df, df_15T, 60)\n","\n","    df = bb_level_v2(df, 'T', 60)\n","    print(\"bb phase done\")\n","\n","    c_itv = '15T'\n","\n","    # df =  wick_ratio(df, c_itv)\n","\n","    bb_itv= 'T'\n","\n","    # df = candle_range_ratio(df, c_itv, bb_itv, bb_period)\n","    # # candle_pumping_ratio(df, c_itv, bb_itv, bb_period)\n","\n","    dc_itv= '15T'\n","    dc_period = 4\n","    # df = candle_pumping_ratio_v2(df, c_itv, dc_itv, dc_period)\n","    # print(\"candle_pumping_ratio_v2 phase done\")\n","\n","    # df = dc_over_body_ratio(df, c_itv, dc_itv, dc_period)\n","    # print(\"dc_over_body_ratio phase done\")\n","\n","    # df = body_rel_ratio(df, c_itv)\n","    # print(\"body_rel_ratio phase done\")\n","\n","    # --------------- cbline --------------- #    \n","    # cloud_bline(df_3T, 20)\n","    # df = df.join(to_lower_tf_v2(df, df_3T, [-1]), how='inner')\n","    # # cloud_bline(df_5T, 20)\n","    # # df = df.join(to_lower_tf_v2(df, df_5T, [-1]), how='inner')\n","    # cloud_bline(df_15T, 20)\n","    # df = df.join(to_lower_tf_v2(df, df_15T, [-1]), how='inner')\n","    # cloud_bline(df_30T, 20)\n","    # df = df.join(to_lower_tf_v2(df, df_30T, [-1]), how='inner')\n","    # cloud_bline(df_H, 20)\n","    # df = df.join(to_lower_tf_v2(df, df_H, [-1]), how='inner')\n","    # cloud_bline(df_4H, 20)\n","    # df = df.join(to_lower_tf_v2(df, df_4H, [-1]), how='inner')\n","\n","    # print(\"cbline phase done\")\n","\n","\n","\n","    # --------------- sd_dc --------------- #\n","    # df = sd_dc(df, 20, 40)\n","    # df = sd_dc(df, 20, 20)\n","    # df = sd_dc(df_5T, 20, 40, df)\n","    # df = sd_dc(df_H, 20, 40, df)\n","\n","    # print(\"sd_dc phase done\")\n","\n","    # --------------- imb_ratio --------------- #\n","    # imb_ratio(df, '5T')\n","    # imb_ratio_v3(df, \"5T\")\n","    # imb_ratio_v4(df, \"5T\")\n","\n","    # imb_ratio(df, 'H')\n","    # imb_ratio_v2(df, '5T')\n","    \n","    # print(\"imb_ratio phase done\")\n","\n","    # --------------- rel_abs_ratio --------------- #\n","    # rel_abs_ratio(df, '5T', norm_period=120)\n","\n","    # --------------- normalize data --------------- #\n","    # itv = 'T'\n","    # lb_period = 15\n","    # target_col = 'close_{}{}'.format(itv, lb_period)\n","    # target_data = df['close'].diff(lb_period).to_numpy()\n","    # norm_data(df, target_data, target_col)    \n","    # print(\"normalize data phase done !\")\n","\n","    # --------------- lucid sar --------------- #\n","    # lucid_sar_v2(df)\n","    # lucid_sar_v2(df_3T)\n","    # df = df.join(to_lower_tf_v2(df, df_3T, [-2, -1]), how='inner')\n","    # lucid_sar_v2(df_5T)\n","    # df = df.join(to_lower_tf_v2(df, df_5T, [-2, -1]), how='inner')\n","    # lucid_sar_v2(df_15T)\n","    # df = df.join(to_lower_tf_v2(df, df_15T, [-2, -1]), how='inner')\n","    # lucid_sar_v2(df_30T)\n","    # df = df.join(to_lower_tf_v2(df, df_30T, [-2, -1]), how='inner')       \n","\n","    # print(\"sar phase done\")\n","\n","    # --------------- supertrend --------------- #\n","    # df = st_price_line(df, df_3T, '3m')\n","    # df = st_price_line(df, df_5T, '5m')\n","    # df = st_price_line(df, df_15T, '15m')\n","    # df = st_price_line(df, df_30T, '30m')\n","    # df = st_price_line(df, df_H, '1h')\n","    # df = st_price_line(df, df_4H, '4h')\n","\n","    # print(\"supertrend phase done\")\n","\n","    # --------------- rsi --------------- #  \n","    # df['rsi_1m'] = rsi(df, 14)    \n","    # df_5T['rsi_5m'] = rsi(df_5T, 14)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf_v2(df, df_5T, [-1]), columns=['rsi_5m']))\n","    \n","    # print(\"rsi phase done\")\n","\n","\n","    # --------------- cci --------------- #  \n","    # df['cci_1m'] = cci(df, 20)\n","\n","    # print(\"cci phase done\")\n","\n","    # --------------- ema --------------- #      \n","    # df_5T['ema_5m'] = ema(df_5T['close'], 195)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf_v2(df, df_5T, [-1]), columns=['ema_5m']))\n","    \n","    # print(\"ema phase done\")\n","        \n","    # --------------- stochastic --------------- #\n","    # df['stoch_1m'] = stoch(df, 13, 3, 3)\n","\n","    # df_5T['stoch'] = stoch(df_5T, 13, 3, 3)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf_v2(df, df_5T, [-1], backing_i=-1), columns=['stoch_5m']))\n","\n","    # print(\"stoch phase done\")\n","\n","\n","    return df\n"]},{"cell_type":"markdown","metadata":{"id":"mEKyVbHWSuzi"},"source":["## make & save res_df (concat 생각하면, timeindex sync 맞춰야함)"]},{"cell_type":"markdown","metadata":{"id":"VdukVo5-Suzj"},"source":["### old (xlsx)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"khKb9nhlSuzj"},"outputs":[],"source":["pd.set_option('display.max_rows', 500)\n","pd.set_option('display.max_columns', 500)\n","pd.set_option('display.width', 1000)\n","\n","\n","save_path = './candlestick_concated/res_df/'\n","\n","exist_list = os.listdir(save_path)\n","\n","\n","a_day = 3600 * 24\n","\n","for i in tqdm(range(len(file_list))):\n","\n","  keys = [file_list[i]]\n","\n","  # if 'neo'.upper() not in file_list[i]:\n","    # continue\n","\n","  # if '2021-04-30'.upper() not in file_list[i]:\n","  if '2021-07-01'.upper() not in file_list[i]:\n","  # if '2021-10-10'.upper() not in file_list[i]:\n","    continue\n","\n","\n","  for key in keys:      \n","\n","    # if 'eth'.upper() not in key:\n","    #   continue\n","\n","    excel_name = key.replace(\".xlsx\", \"_st1h_backi2.xlsx\")\n","    excel_path = save_path + excel_name\n","\n","    if excel_name in exist_list:\n","      print(excel_name, \"already exist !\")\n","      continue\n","    \n","    open_indexes = []\n","    \n","    df = pd.read_excel(date_path + key, index_col=0)\n","    second_df = pd.read_excel(date_path2 + key, index_col=0)\n","    third_df = pd.read_excel(date_path3 + key, index_col=0)\n","    fourth_df = pd.read_excel(date_path4 + key, index_col=0)\n","    fifth_df = pd.read_excel(date_path5 + key, index_col=0)\n","    \n","    print(df.index[[0, -1]])\n","    print(second_df.index[[0, -1]])\n","    print(third_df.index[[0, -1]])\n","    print(fourth_df.index[[0, -1]])\n","    print(fifth_df.index[[0, -1]])\n","\n","    open_indexes.append(df.index[0])\n","    open_indexes.append(second_df.index[0])\n","    open_indexes.append(third_df.index[0])\n","    open_indexes.append(fourth_df.index[0])\n","    open_indexes.append(fifth_df.index[0])\n","    \n","    try:\n","      #     Todo    #\n","      #      1. 1m 마지막 timeindex 의 date 기준, 08:59:59.999000 를 last timestamp 로 설정\n","      #      2. 시작 timestamp 는 모든 tf 의 가장 최근 시작 index,\n","      #       a. 1m 의 시작 timeindex 는 최소, htf 의 시작 timeindex 보다 interval 만큼 앞서야함\n","      #         i. 따라서 1m open_index, latest_open_index + 1d 를 하면 댐\n","      #           1. timestamp 으로 변환후 1day 를 더하고 datetime 으로 변환\n","      sixth_df = pd.read_excel(date_path6 + key, index_col=0)\n","      seventh_df = pd.read_excel(date_path7 + key, index_col=0)\n","\n","      print(sixth_df.index[[0, -1]])\n","      print(seventh_df.index[[0, -1]])\n","      print()\n","\n","      open_indexes.append(sixth_df.index[0])\n","      open_indexes.append(seventh_df.index[0])\n","\n","    except Exception as e:\n","      print(e)\n","\n","    latest_open_index = sorted(open_indexes)[-1]\n","    \n","    open_ts = datetime.timestamp(latest_open_index)\n","    latest_open_index_1m = datetime.fromtimestamp(open_ts + a_day)\n","\n","    #   str 로 만들어 접근하면 불가함  #\n","    end_index = pd.to_datetime(str(df.index[-1]).split(\" \")[0] + \" 08:59:59.999000\")\n","    # break\n","\n","    sliced_df = df.loc[latest_open_index_1m:end_index] # to_lower_tf 의 기준 ltf\n","    sliced_second_df = second_df.loc[latest_open_index:end_index]\n","    sliced_third_df = third_df.loc[latest_open_index:end_index]\n","    sliced_fourth_df = fourth_df.loc[latest_open_index:end_index]\n","    sliced_fifth_df = fifth_df.loc[latest_open_index:end_index]\n","\n","    print(\"sliced index\")\n","    print(sliced_df.index[[0, -1]])\n","    print(sliced_second_df.index[[0, -1]])\n","    print(sliced_third_df.index[[0, -1]])\n","    print(sliced_fourth_df.index[[0, -1]])\n","    print(sliced_fifth_df.index[[0, -1]])\n","\n","    try:\n","      sliced_sixth_df = sixth_df.loc[latest_open_index:end_index]\n","      sliced_seventh_df = seventh_df.loc[latest_open_index:end_index]\n","\n","      print(sliced_sixth_df.index[[0, -1]])\n","      print(sliced_seventh_df.index[[0, -1]])\n","\n","      res_df = sync_check(sliced_df, sliced_second_df, sliced_third_df, sliced_fourth_df, sliced_fifth_df, sliced_sixth_df, sliced_seventh_df)\n","    \n","    except:\n","      res_df = sync_check(sliced_df, sliced_second_df, sliced_third_df, sliced_fourth_df, sliced_fifth_df)\n","\n","\n","\n","    res_df.to_excel(excel_path)\n","    print(excel_name, \"saved succesfully !\")"]},{"cell_type":"markdown","metadata":{"id":"Bw5JibDKSuzj"},"source":["### xlsx to feather"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"VA-_gcA7Suzj"},"outputs":[],"source":["pd.set_option('display.max_rows', 500)\n","pd.set_option('display.max_columns', 500)\n","pd.set_option('display.width', 1000)\n","\n","\n","save_path = './candlestick_concated/res_df/'\n","\n","exist_list = os.listdir(save_path)\n","\n","\n","a_day = 3600 * 24\n","\n","for i in tqdm(range(len(file_list))):\n","\n","  keys = [file_list[i]]\n","\n","  # if 'neo'.upper() not in file_list[i]:\n","    # continue\n","\n","  # if '2021-04-30'.upper() not in file_list[i]:\n","  # if '2021-07-01'.upper() not in file_list[i]:\n","  if '2021-10-10'.upper() not in file_list[i]:\n","    continue\n","\n","\n","  for key in keys:      \n","\n","    # if 'eth'.upper() not in key:\n","    #   continue\n","\n","    feather_name = key.replace(\".xlsx\", \".ftr\")\n","    # feather_path = save_path + feather_name\n","\n","    if feather_name in exist_list:\n","      print(feather_name, \"already exist !\")\n","      continue\n","    \n","    open_indexes = []\n","    \n","    df = pd.read_excel(date_path + key, index_col=0)\n","    second_df = pd.read_excel(date_path2 + key, index_col=0)\n","    third_df = pd.read_excel(date_path3 + key, index_col=0)\n","    fourth_df = pd.read_excel(date_path4 + key, index_col=0)\n","    fifth_df = pd.read_excel(date_path5 + key, index_col=0)\n","    \n","    print(df.index[[0, -1]])\n","    print(second_df.index[[0, -1]])\n","    print(third_df.index[[0, -1]])\n","    print(fourth_df.index[[0, -1]])\n","    print(fifth_df.index[[0, -1]])\n","\n","    open_indexes.append(df.index[0])\n","    open_indexes.append(second_df.index[0])\n","    open_indexes.append(third_df.index[0])\n","    open_indexes.append(fourth_df.index[0])\n","    open_indexes.append(fifth_df.index[0])\n","    \n","    try:\n","      #     Todo    #\n","      #      1. 1m 마지막 timeindex 의 date 기준, 08:59:59.999000 를 last timestamp 로 설정\n","      #      2. 시작 timestamp 는 모든 tf 의 가장 최근 시작 index,\n","      #       a. 1m 의 시작 timeindex 는 최소, htf 의 시작 timeindex 보다 interval 만큼 앞서야함\n","      #         i. 따라서 1m open_index, latest_open_index + 1d 를 하면 댐\n","      #           1. timestamp 으로 변환후 1day 를 더하고 datetime 으로 변환\n","      sixth_df = pd.read_excel(date_path6 + key, index_col=0)\n","      seventh_df = pd.read_excel(date_path7 + key, index_col=0)\n","\n","      print(sixth_df.index[[0, -1]])\n","      print(seventh_df.index[[0, -1]])\n","      print()\n","\n","      open_indexes.append(sixth_df.index[0])\n","      open_indexes.append(seventh_df.index[0])\n","\n","    except Exception as e:\n","      print(e)\n","\n","\n","    df.reset_index().to_feather(date_path + feather_name, compression='lz4')\n","    second_df.reset_index().to_feather(date_path2 + feather_name, compression='lz4')\n","    third_df.reset_index().to_feather(date_path3 + feather_name, compression='lz4')\n","    fourth_df.reset_index().to_feather(date_path4 + feather_name, compression='lz4')\n","    fifth_df.reset_index().to_feather(date_path5 + feather_name, compression='lz4')\n","    sixth_df.reset_index().to_feather(date_path6 + feather_name, compression='lz4')\n","    seventh_df.reset_index().to_feather(date_path7 + feather_name, compression='lz4')\n","\n","    print(\"xlsx converted to feather !\")\n","    "]},{"cell_type":"markdown","metadata":{"id":"Pe0QpnORSuzk"},"source":["### add itv_name to ftr"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"M-gl30KxSuzk"},"outputs":[],"source":["save_path = './candlestick_concated/res_df/'\n","\n","# dir_path = \"bbdc3m_backi2\"\n","# date = '2021-10-10'\n","date = '2021-07-01'\n","\n","db_path = './candlestick_concated/database_bn/non_cum/%s/' % date\n","os.makedirs(os.path.join(db_path), exist_ok=True)\n","\n","# exist_list = os.listdir(os.path.join(save_path, dir_path))\n","# break\n","\n","\n","a_day = 3600 * 24\n","\n","for i in tqdm(range(len(file_list))):\n","\n","  keys = [file_list[i]]\n","\n","  # if 'neo'.upper() not in file_list[i]:\n","    # continue\n","\n","  if date not in file_list[i]:\n","    continue\n","\n","\n","  for key in keys:      \n","\n","    # if 'eth'.upper() not in key:\n","    #   continue\n","    # print(key)\n","    \n","    if \".ftr\" not in key:\n","      continue\n","        \n","    df = shutil.copy(date_path + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval))\n","    second_df = shutil.copy(date_path2 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval2))\n","    third_df = shutil.copy(date_path3 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval3))\n","    fourth_df = shutil.copy(date_path4 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval4))\n","    fifth_df = shutil.copy(date_path5 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval5))\n","    sixth_df = shutil.copy(date_path6 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval6))\n","    seventh_df = shutil.copy(date_path7 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval7))\n","\n","    print(\"copied to\" + db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval))\n"]},{"cell_type":"markdown","metadata":{"id":"4oZ1ohTtSuzk"},"source":["### feather ver. (database to res_df)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"vgVHpnUsSuzk"},"outputs":[],"source":["# db_path = './candlestick_concated/database_ub/' # upbit\n","db_path = './candlestick_concated/database_bn/'   # binance\n","\n","save_path = './candlestick_concated/res_df/'\n","\n","save_dir_path = \"bb1d_backi2\"\n","date = '2022-02-17'\n","\n","# concat_path = 'noncat' # 새로운 cols 를 기존 cum/concat 에 붙이려는 경우\n","concat_path = 'concat'\n","cum_path = \"cum\"\n","# cum_path = \"non_cum\"  # non_cum 으로 진행하는 경우, row concat 용도이기 때문에 noncat -> concat 으로 변경 (base cols 를 모두 담고 있음)\n","\n","load_path = os.path.join(db_path, cum_path, date)\n","save_path = os.path.join(save_path, save_dir_path, concat_path, cum_path, date)\n","\n","os.makedirs(save_path, exist_ok=True)\n","\n","file_list = os.listdir(load_path)\n","exist_list = os.listdir(save_path)\n","# break\n","\n","a_day = 3600 * 24\n","\n","for i in tqdm(range(len(file_list))):\n","\n","  keys = [file_list[i]]\n","\n","  # if 'neo'.upper() not in file_list[i]:\n","    # continue\n","\n","  if date not in file_list[i]:\n","    continue\n","\n","\n","  for key in keys:      \n","\n","    # if 'eth'.upper() not in key:\n","    #   continue\n","    # print(key)\n","    \n","    if \".ftr\" not in key:\n","      continue\n","\n","    if \"_1m\" not in key:\n","      continue\n","\n","    # feather_name = key.replace(\".ftr\", \"_%.ftr\" % save_dir_path)\n","    feather_name = key.replace(\"_1m\", \"\")\n","    feather_path = os.path.join(save_path, feather_name)\n","\n","    if feather_name in exist_list:\n","      print(feather_name, \"already exist !\")\n","      continue\n","    \n","    df = pd.read_feather(os.path.join(load_path, key), columns=None, use_threads=True).set_index(\"index\")\n","\n","    res_df = sync_check_make(df)\n","\n","    res_df.reset_index().to_feather(feather_path, compression='lz4')\n","    print(feather_path, \"saved succesfully !\")"]},{"cell_type":"markdown","metadata":{"id":"YxCPUzoyidwH"},"source":["#### just add col to loaded df"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"odqVwQHpYo1M","colab":{"base_uri":"https://localhost:8080/","height":620},"executionInfo":{"status":"ok","timestamp":1651545996678,"user_tz":-540,"elapsed":1771,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"b5353fd4-ce5b-465e-d2e1-295fe2bf48a0"},"outputs":[{"output_type":"stream","name":"stdout","text":["3T ->                          open     high      low    close\n","index                                                  \n","2022-04-27 08:45:00  2803.55  2803.97  2799.26  2800.43\n","5T ->                          open     high      low    close\n","index                                                  \n","2022-04-27 08:45:00  2803.55  2803.97  2799.26  2800.43\n","15T ->                          open     high      low    close\n","index                                                  \n","2022-04-27 08:45:00  2803.55  2803.97  2799.26  2800.43\n","30T ->                          open     high      low    close\n","index                                                  \n","2022-04-27 08:30:00  2783.61  2806.93  2780.79  2800.43\n","H ->                          open     high      low    close\n","index                                                  \n","2022-04-27 08:00:00  2819.33  2822.77  2761.27  2800.43\n","4H ->                          open    high      low    close\n","index                                                 \n","2022-04-27 05:00:00  2837.34  2855.0  2761.27  2800.43\n","D ->                          open    high      low    close\n","index                                                 \n","2022-04-26 09:00:00  3006.12  3043.0  2761.27  2800.43\n","bb phase done\n"]},{"output_type":"execute_result","data":{"text/plain":["                         upper_wick_ratio_15T  lower_wick_ratio_15T  candle_updown_15T  bb_upper_T60  bb_lower_T60  bb_base_T60  bb_upper2_T60  bb_lower2_T60  bb_upper3_T60  bb_lower3_T60\n","index                                                                                                                                                                                      \n","2022-04-27 08:41:59.999              0.128921              0.107881                  1   2823.126867   2790.340133  2806.733500    2839.520235    2773.946765    2855.913602    2757.553398\n","2022-04-27 08:42:59.999              0.128921              0.107881                  1   2822.498326   2790.088008  2806.293167    2838.703485    2773.882848    2854.908644    2757.677689\n","2022-04-27 08:43:59.999              0.128921              0.107881                  1   2821.914551   2789.914116  2805.914333    2837.914768    2773.913898    2853.914986    2757.913681\n","2022-04-27 08:44:59.999              0.128921              0.107881                  1   2821.473171   2789.742162  2805.607667    2837.338676    2773.876657    2853.204181    2758.011153\n","2022-04-27 08:45:59.999              0.089172              0.248408                  0   2820.842501   2789.526499  2805.184500    2836.500502    2773.868498    2852.158503    2758.210497"],"text/html":["\n","  <div id=\"df-4fad65f7-26d2-4307-b7f0-3be83cd9e560\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>upper_wick_ratio_15T</th>\n","      <th>lower_wick_ratio_15T</th>\n","      <th>candle_updown_15T</th>\n","      <th>bb_upper_T60</th>\n","      <th>bb_lower_T60</th>\n","      <th>bb_base_T60</th>\n","      <th>bb_upper2_T60</th>\n","      <th>bb_lower2_T60</th>\n","      <th>bb_upper3_T60</th>\n","      <th>bb_lower3_T60</th>\n","    </tr>\n","    <tr>\n","      <th>index</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2022-04-27 08:41:59.999</th>\n","      <td>0.128921</td>\n","      <td>0.107881</td>\n","      <td>1</td>\n","      <td>2823.126867</td>\n","      <td>2790.340133</td>\n","      <td>2806.733500</td>\n","      <td>2839.520235</td>\n","      <td>2773.946765</td>\n","      <td>2855.913602</td>\n","      <td>2757.553398</td>\n","    </tr>\n","    <tr>\n","      <th>2022-04-27 08:42:59.999</th>\n","      <td>0.128921</td>\n","      <td>0.107881</td>\n","      <td>1</td>\n","      <td>2822.498326</td>\n","      <td>2790.088008</td>\n","      <td>2806.293167</td>\n","      <td>2838.703485</td>\n","      <td>2773.882848</td>\n","      <td>2854.908644</td>\n","      <td>2757.677689</td>\n","    </tr>\n","    <tr>\n","      <th>2022-04-27 08:43:59.999</th>\n","      <td>0.128921</td>\n","      <td>0.107881</td>\n","      <td>1</td>\n","      <td>2821.914551</td>\n","      <td>2789.914116</td>\n","      <td>2805.914333</td>\n","      <td>2837.914768</td>\n","      <td>2773.913898</td>\n","      <td>2853.914986</td>\n","      <td>2757.913681</td>\n","    </tr>\n","    <tr>\n","      <th>2022-04-27 08:44:59.999</th>\n","      <td>0.128921</td>\n","      <td>0.107881</td>\n","      <td>1</td>\n","      <td>2821.473171</td>\n","      <td>2789.742162</td>\n","      <td>2805.607667</td>\n","      <td>2837.338676</td>\n","      <td>2773.876657</td>\n","      <td>2853.204181</td>\n","      <td>2758.011153</td>\n","    </tr>\n","    <tr>\n","      <th>2022-04-27 08:45:59.999</th>\n","      <td>0.089172</td>\n","      <td>0.248408</td>\n","      <td>0</td>\n","      <td>2820.842501</td>\n","      <td>2789.526499</td>\n","      <td>2805.184500</td>\n","      <td>2836.500502</td>\n","      <td>2773.868498</td>\n","      <td>2852.158503</td>\n","      <td>2758.210497</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4fad65f7-26d2-4307-b7f0-3be83cd9e560')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-4fad65f7-26d2-4307-b7f0-3be83cd9e560 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-4fad65f7-26d2-4307-b7f0-3be83cd9e560');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":86}],"source":["res_df_ = sync_check_make(res_df_)  # suffix duplication 유의\n","res_df_.tail().iloc[:, -10:]\n","# res_df_.dtypes"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"3SKglsQCj5_x"},"outputs":[],"source":["test_df_ = sync_check_make(res_df_.iloc[-4000:])  # suffix duplication 유의\n","test_df_.tail().iloc[:, -10:]"]},{"cell_type":"code","source":["# ------ validation ------ #\n","# res_df_.cppr_15T.describe()\n","print((res_df_.open_15T.to_numpy() - res_df_.close_15T.to_numpy())[-10:])\n","print((res_df_.dc_upper_15T4.to_numpy() - res_df_.dc_lower_15T4.to_numpy())[-10:])"],"metadata":{"id":"gOQxwYqK0jCS"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# np.where(res_df_.CDL3LINESTRIKE_15T) #.iloc[-1000:,]\n","\n","# CDL3LINESTRIKE = talib.CDL3LINESTRIKE(df_15T.open, df_15T.high, df_15T.low, df_15T.close)\n","for col in talib.get_function_groups()['Pattern Recognition']:  \n","  print(np.unique(res_df_[col + '_15T'].to_numpy(), return_counts=True))\n","\n","# CDLCLOSINGMARUBOZU = talib.CDLCLOSINGMARUBOZU(df_15T.open, df_15T.high, df_15T.low, df_15T.close)\n","# print(np.unique(CDLCLOSINGMARUBOZU.to_numpy(), return_counts=True))\n","# print(CDLCLOSINGMARUBOZU.tail(50))"],"metadata":{"id":"RmiB5VU5DN6B"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":846,"status":"ok","timestamp":1651546010001,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"XrgJPQRuisCa","outputId":"cf5e52a8-36e5-4fe3-d8ea-4d7e10f33b6a"},"outputs":[{"output_type":"stream","name":"stdout","text":["./candlestick_concated/database_bn/cum/2022-04-27/2022-04-27 ETHUSDT_1m.ftr saved !\n"]}],"source":["# ------------ save current res_df ------------ #\n","ftr_path = os.path.join(save_path.replace(\"res_df\", \"database_bn\"), \"cum\", date)\n","ftr_full_path = os.path.join(ftr_path, key)\n","\n","res_df_.reset_index().to_feather(ftr_full_path, compression='lz4')  # key 잘 확인하고 저장\n","print(ftr_full_path, 'saved !')"]},{"cell_type":"markdown","metadata":{"id":"E0n53hflJbnp"},"source":["### htf candle check"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"6xW0yugCWvGz"},"outputs":[],"source":["itv_list = ['3T', '5T', '15T', '30T', '1H', '4H']\n","comp_df_list = [second_df, third_df, fourth_df, fifth_df, sixth_df, seventh_df]\n","offset_list = ['1h', '2min', '2min', '2min', '2min', '2min']\n","# itv_list = ['4H']\n","# comp_df_list = [seventh_df]\n","\n","slice_len = 100\n","for itv_, comp_df_, offset in zip(itv_list, comp_df_list, offset_list):\n","\n","  print(\"itv_ :\", itv_)\n","\n","  # df = h_candle_v2(df, '3T')\n","  # end_ts = \n","  h_res_df = df.resample(itv_, offset=offset).agg({\n","          'open': 'first',\n","          'high': 'max',\n","          'low': 'min',\n","          'close': 'last'\n","      })\n","\n","  #   앞은 길이가 다르고, 뒤에서부터 잘라서 비교    #\n","  #   last_row 빼고는 동일, 4h 제외\n","  # print(df.tail())\n","  print(h_res_df.tail())\n","  print(comp_df_.tail())\n","  # # print(h_res_df.head())\n","  # # print(second_df.head())\n","\n","  # print(len(h_res_df))\n","  # print(len(second_df))\n","\n","  # print(h_res_df.values[-slice_len:])\n","  # print(second_df.iloc[:, :4].values[-slice_len:])\n","  # print(np.argwhere(h_res_df.values[-slice_len:] != comp_df_.iloc[:, :4].values[-slice_len:]))\n","  # print()\n","  break"]},{"cell_type":"markdown","metadata":{"id":"jTN3M842Suzl"},"source":["## concat & save new res_df"]},{"cell_type":"markdown","metadata":{"id":"MlFkpO1MSuzl"},"source":["### old (xlsx)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"U-3QkfbFSuzl"},"outputs":[],"source":["save_path = './candlestick_concated/res_df/'\n","\n","dict_name = \"2021-07-01 ETHUSDT_bb15m_backi2_res_dfs.pkl\"\n","\n","#     load with pickle    #\n","with open(save_path + dict_name, 'rb') as f:\n","  saved_res_df_dict = pickle.load(f)\n","\n","print(dict_name, \"loaded !\")\n","res_df_files = os.listdir(save_path)\n","res_df_files.reverse()\n","\n","print(res_df_files)\n","\n","res_df_dict = {}\n","\n","base_postfix = '_bb15m_backi2.xlsx'\n","new_postfix = '_st1h_backi2.xlsx'\n","\n","max_cnt = 10\n","sample_cnt = max_cnt\n","\n","for k_i, key in enumerate(res_df_files):\n","\n","  if '2021-07-01'.upper() not in key:\n","  # if '2021-10-10'.upper() not in key:\n","    continue\n","\n","  # if \"link\".upper() not in key:\n","  # if \"btc\".upper() not in key:\n","  #   continue\n","\n","  if new_postfix not in key:\n","    continue\n","\n","  # if key in \n","\n","  if sample_cnt == max_cnt:\n","    dict_name = \"%s_res_dfs.pkl\" % key.split(\".\")[0]\n","    print(\"dict_name :\", dict_name)\n","\n","  base_df = saved_res_df_dict[key.replace(new_postfix, base_postfix)]\n","  # base_df = pd.read_excel(save_path + key.replace(new_postfix, base_postfix), index_col=0)  \n","  res_df = pd.read_excel(save_path + key, index_col=0)  \n","\n","  # print(base_df.head())\n","  # print(res_df.head())\n","  # break\n","\n","  new_res_df = pd.concat([base_df, res_df], axis=1) # df_tot.drop_duplicates()\n","  # new_res_df.head()\n","\n","  droped_new_res_df = new_res_df.loc[:,~new_res_df.columns.duplicated(keep='last')]\n","  droped_new_res_df.head()\n","  # break\n","\n","  # res_df_dict[key] = res_df\n","  res_df_dict[key] = droped_new_res_df\n","  print(key, \"saved to dict !\")\n","\n","  #     save with pickle    #\n","  with open(save_path + dict_name, 'wb') as f:\n","    pickle.dump(res_df_dict, f)\n","\n","  sample_cnt -= 1\n","\n","  if sample_cnt <= 0:\n","    break\n"]},{"cell_type":"markdown","metadata":{"id":"t1E_eAyPSuzm"},"source":["### new col to latest feather (1m_indi. only)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"xyI5NrM7Suzm"},"outputs":[],"source":["save_path = './candlestick_concated/res_df/'\n","\n","cum_dir = \"cum\"\n","\n","new_dir_path = \"rsi_backi2\"\n","base_dir_path = \"bbdc3m_backi2\"\n","\n","new_date = '2021-11-17'\n","\n","\n","\n","#     load ftr list    #\n","base_save_path = os.path.join(save_path, base_dir_path, \"concat/cum\", new_date)\n","new_save_path = base_save_path.replace(base_dir_path, new_dir_path)\n","\n","#     save to (new) cum dir    #\n","#      1. if dir. not exists, makedir\n","os.makedirs(new_save_path, exist_ok=True)\n","\n","ftr_list = [s for s in os.listdir(base_save_path) if \"ftr\" in s]\n","print(ftr_list)\n","# break\n","\n","\n","max_cnt = 10\n","sample_cnt = max_cnt\n","\n","for key in ftr_list:\n","\n","  if new_date not in key:\n","    continue\n","\n","\n","  #       read from base postfix's directory    #\n","  base_df = pd.read_feather(os.path.join(base_save_path, key), columns=None, use_threads=True).set_index(\"index\")\n","  # print(base_df.head())\n","  # print(res_df.head())\n","  # break\n","\n","  droped_new_res_df = sync_check(base_df)\n","\n","  # new_res_df = pd.concat([base_df, res_df], axis=0) # df_tot.drop_duplicates()\n","  # # new_res_df.head()\n","\n","  # intersection_cols = res_df.columns.intersection(base_df.columns)\n","\n","  # droped_new_res_df = new_res_df.loc[~new_res_df.index.duplicated(keep='last'),intersection_cols]\n","  # droped_new_res_df = new_res_df.loc[:,~new_res_df.columns.duplicated(keep='last')]\n","  # droped_new_res_df = new_res_df.loc[:,~new_res_df.index.duplicated(keep='last')]\n","  # droped_new_res_df.head()\n","  # break\n","\n","  droped_new_res_df.reset_index().to_feather(os.path.join(new_save_path, key), compression='lz4')\n","\n","  print(os.path.join(new_save_path, key), \"saved !\")\n","\n","  # sample_cnt -= 1\n","\n","  # if sample_cnt <= 0:\n","  #   break\n"]},{"cell_type":"markdown","metadata":{"id":"nUs4fjVHSuzl"},"source":["### feather ver. (col concat)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"6cu-Y82iSuzl"},"outputs":[],"source":["new_dir_path = \"st3m_backi2\"\n","base_dir_path = \"bb1d_backi2\"\n","\n","# new_date = \"2021-11-17\"\n","new_date = \"2022-01-10\"\n","\n","#     save to (new) concat dir    #\n","#      1. if dir. not exists, makedir\n","save_path = './candlestick_concated/res_df/'\n","save_path = os.path.join(save_path, new_dir_path, \"concat/cum\", new_date)   \n","# save_path = os.path.join(save_path, new_dir_path, \"concat/non_cum\", new_date)   # row col 하려면 concat 맞음, noncum 사용\n","os.makedirs(save_path, exist_ok=True)\n","\n","\n","#     load ftr list    #\n","# ftr_list = [s for s in os.listdir(os.path.join(save_path, new_dir_path)) if \"ftr\" in s]\n","\n","noncat_path = save_path.replace(\"concat/\", \"noncat/\")\n","ftr_list = [s for s in os.listdir(noncat_path) if \"ftr\" in s]\n","print(ftr_list)\n","# break\n","\n","\n","for key in ftr_list:\n","\n","  if new_date not in key:\n","    continue\n","\n","  try:\n","\n","    #       read from base postfix's directory    #\n","    base_df = pd.read_feather(os.path.join(save_path.replace(new_dir_path, base_dir_path), key), columns=None, use_threads=True).set_index(\"index\")\n","    res_df = pd.read_feather(os.path.join(noncat_path, key), columns=None, use_threads=True).set_index(\"index\")\n","\n","    # print(base_df.head())\n","    # print(res_df.head())\n","    # break\n","\n","    new_res_df = pd.concat([base_df, res_df], axis=1) # df_tot.drop_duplicates()\n","    # new_res_df.head()\n","\n","    droped_new_res_df = new_res_df.loc[:,~new_res_df.columns.duplicated(keep='last')]\n","    # droped_new_res_df.head()\n","    # break\n","\n","    droped_new_res_df.reset_index().to_feather(os.path.join(save_path, key), compression='lz4')\n","\n","    # res_df_dict[key] = res_df\n","    # res_df_dict[key] = droped_new_res_df\n","    print(os.path.join(save_path, key), \"saved !\")\n","  \n","  except Exception as e:\n","    print(\"error occured ! :\", e)\n","  \n","\n","  # sample_cnt -= 1\n","\n","  # if sample_cnt <= 0:\n","  #   break\n"]},{"cell_type":"markdown","metadata":{"id":"WVAKq3i8Suzm"},"source":["### feather ver. (row concat) , database cum 도 호환가능"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"XG2p9OhhSuzm"},"outputs":[],"source":["# save_path = './candlestick_concated/res_df/'        # cols 추가된 cum db 에 new_row's cols 기준으로 합치는 경우\n","save_path = './candlestick_concated/database_bn/'   # ohlcv cum db 만들 경우\n","\n","base_date = '2022-04-25'\n","# new_date = '2022-02-17'\n","new_date = '2022-04-27'\n","\n","# ------ load ftr list ------ #\n","if \"database\" in save_path:\n","  base_dir_path = \"\"\n","  new_dir_path = \"\"\n","  concat_dir = \"\"\n","else:\n","  base_dir_path = \"sar_backi2\"\n","  new_dir_path = \"bb4h_backi2\"  # dir_path 가 base / new 서로 달라질 수 있어서 분할함\n","  concat_dir = \"concat\"\n","\n","base_date_path = os.path.join(save_path, base_dir_path, concat_dir, \"cum\", base_date)      # 기존 cum db 와 new_date db 를 cum 진행\n","# base_date_path = os.path.join(save_path, base_dir_path, concat_dir, \"non_cum\", base_date)    # non_cum db 와 new_date db 를 cum 진행\n","\n","# new_date_path = os.path.join(save_path, new_dir_path, concat_dir, \"cum\", new_date)      # 상황별로 직접 선택해야할 듯\n","new_date_path = os.path.join(save_path, new_dir_path, concat_dir, \"non_cum\", new_date)\n","\n","\n","\n","# ------ save to (new) concat dir ------ #\n","#      1. if dir. not exists, makedir\n","save_path = new_date_path.replace(\"non_cum\", \"cum\")   # non_cum 아니여도 무관\n","os.makedirs(save_path, exist_ok=True)   # noncat / concat 두가지 경우 존재가능할 것\n","# os.makedirs(os.path.join(save_path, dir_path, \"noncat/cum\", new_date), exist_ok=True)\n","\n","\n","ftr_list = [s for s in os.listdir(new_date_path) if \"ftr\" in s]\n","exist_list = os.listdir(save_path)\n","print(ftr_list)\n","# break\n","\n","\n","for key in ftr_list:\n","\n","  if new_date not in key:   # date rejection\n","    continue\n","  if '1m' not in key:  # itv rejection\n","    continue\n","\n","  # if key in exist_list:\n","  #   print(key, \"already exist !\")\n","  #   continue\n","\n","  #       read from base postfix's directory    #\n","  base_df = pd.read_feather(os.path.join(base_date_path, key.replace(new_date, base_date)), columns=None, use_threads=True).set_index(\"index\")   # key 에 new_date 담겨있음\n","  res_df = pd.read_feather(os.path.join(new_date_path, key), columns=None, use_threads=True).set_index(\"index\")\n","\n","  # print(base_df.head())\n","  # print(res_df.head())\n","  # break\n","\n","  new_res_df = pd.concat([base_df, res_df], axis=0) # df_tot.drop_duplicates()\n","  # new_res_df.head()\n","\n","  intersection_cols = res_df.columns.intersection(base_df.columns)\n","\n","  droped_new_res_df = new_res_df.loc[~new_res_df.index.duplicated(keep='last'),intersection_cols]\n","  # droped_new_res_df = new_res_df.loc[:,~new_res_df.columns.duplicated(keep='last')]\n","  # droped_new_res_df = new_res_df.loc[:,~new_res_df.index.duplicated(keep='last')]\n","  # droped_new_res_df.head()\n","  # break  \n","  \n","  print(droped_new_res_df.iloc[[0, -1]])  \n","\n","  # ------------- verify df continuity directly itv by itv ------------- #\n","  true_continue = True\n","  if \"_\" in key:\n","\n","    # interval = key.split(\".\")[0].split(\"_\")[-1] \n","    # itv_num = to_itvnum(interval)\n","\n","    # verified_df = consecutive_df(droped_new_res_df, to_itvnum(interval))\n","    # verified_df.reset_index().to_feather(os.path.join(save_path, key), compression='lz4')\n","\n","    # res_df_dict[key] = res_df\n","    # res_df_dict[key] = droped_new_res_df  \n","\n","    np_idx_ts = np.array(list(map(lambda x: datetime.timestamp(x), droped_new_res_df.index)))\n","    ideal_ts_gap = 60 # * itv_num\n","\n","    for ts_i in range(len(np_idx_ts)):\n","      \n","      if ts_i != 0:\n","        ts_gap = np_idx_ts[ts_i] - np_idx_ts[ts_i - 1]\n","        if ts_gap > ideal_ts_gap or ts_gap < ideal_ts_gap:\n","        # if ts_gap == ideal_ts_gap:\n","          print(droped_new_res_df.index[ts_i - 1])\n","          print(droped_new_res_df.index[ts_i])\n","          # print(ts_gap)\n","          print(\"------------------ unideal ts_gap ------------------\")\n","          true_continue = False\n","\n","    print(\"continuity checked !\")\n","\n","  if true_continue:\n","    droped_new_res_df.reset_index().to_feather(os.path.join(save_path, key), compression='lz4')\n","\n","  print(os.path.join(save_path, key), \"saved !\")\n","  \n"]},{"cell_type":"markdown","metadata":{"id":"L7l5CTJfSuzn"},"source":["### check continuity"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"w-5jn9opBl73"},"outputs":[],"source":["droped_new_res_df = res_df_"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"nGzMGyC3Suzn"},"outputs":[],"source":["# print(droped_new_res_df.columns)\n","\n","print(droped_new_res_df.iloc[[0, -1]])\n","\n","np_idx_ts = np.array(list(map(lambda x: datetime.timestamp(x), droped_new_res_df.index)))\n","\n","print(np_idx_ts[:10])\n","for ts_i in range(len(np_idx_ts)):\n","  \n","  if ts_i != 0:\n","    ts_gap = np_idx_ts[ts_i] - np_idx_ts[ts_i - 1]\n","\n","    if ts_gap > 60 or ts_gap < 60:\n","\n","      print(\"invalid ts_gap found !\")\n","    # if ts_gap == 60:\n","      print(droped_new_res_df.index[ts_i - 1])\n","      print(droped_new_res_df.index[ts_i])\n","      # print(ts_gap)\n","      print()\n"]},{"cell_type":"markdown","metadata":{"id":"x_XGJqBi8Jex"},"source":["### check length of front missing value + middle_data non_missing validity"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"yRNwqVeAu8X8"},"outputs":[],"source":["#       1. new_date 의 시작 timeidx 와 base_date end timeidx 의 최소 days' gap     #\n","#       2. new_date 의 시작 부분 indi. value 는 np.nan 으로 채워질 거기 때문에 계산해야함    #\n","\n","df_count = droped_new_res_df.count()\n","len_missing = df_count.max() - df_count.min()\n","print(len_missing / 1440)\n","\n","#       3. \n","missing_sliced_df = droped_new_res_df.iloc[len_missing:]\n","df_count2 = missing_sliced_df.count()\n","# print(df_count2)\n","print((df_count2.max() - df_count2.min()))    # this value should be zero !\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"AY7E2_hTBsyM"},"outputs":[],"source":["# df_count2.index[df_count2.argmin()]\n","# missing_sliced_df.head(5)\n","\n","stay_missed = np.sum(pd.isnull(missing_sliced_df), axis=0)\n","print(stay_missed)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"p9yqewOw9g33"},"outputs":[],"source":["stay_missed_cols = stay_missed[stay_missed != 0].index\n","\n","for sm_col in stay_missed_cols:\n","  \n","  row_idx = np.argwhere(pd.isnull(missing_sliced_df[sm_col].values))\n","\n","  plt.figure(figsize=(3,3))\n","  plt.plot(row_idx)\n","  plt.ylim(0, len(missing_sliced_df))\n","  plt.title(sm_col)\n","\n","  plt.show()\n"]},{"cell_type":"markdown","metadata":{"id":"MSUY4nnku3s9"},"source":["## legacy"]},{"cell_type":"markdown","metadata":{"id":"epgS5Dksu-HX"},"source":["### mv files"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"aJcVpEdrslA5"},"outputs":[],"source":["df_path = './candlestick_concated/survey_df_v2'\n","files_ = os.listdir(df_path)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"cEKyEYkotFDy"},"outputs":[],"source":["dirs = [file_ for file_ in files_ if not file_.endswith('.ftr')]\n","files = [file_ for file_ in files_ if file_.endswith('.ftr')]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"IgM79tcxtPVZ"},"outputs":[],"source":["dirs"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"M767iRtwtRQP"},"outputs":[],"source":["def move_fn(dir_, file_):\n","  src_path = os.path.join(df_path, file_)\n","  dst_path = os.path.join(df_path, dir_, file_)\n","  shutil.move(src_path, dst_path)\n","  print(\"moved to {}\".format(dst_path))\n","\n","_ = [move_fn('2022-01-10 ETHUSDT_all', file_) for file_ in files if 'eth'.upper() in file_]\n","# sols\n"]},{"cell_type":"markdown","metadata":{"id":"Iy76iO7gztne"},"source":["### move legacy files"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"hMRht32Czwry"},"outputs":[],"source":["# print()\n","cur_dir_list = os.listdir('.')\n","for f in cur_dir_list:\n","  if 'legacy' in f :\n","    # print(f)\n","    if os.path.isdir(current_path + f,):\n","      continue\n","\n","    shutil.move(current_path + f, current_path + 'legacy/' + f)\n","    print(\"moved to\" + current_path + 'legacy/' +  f)"]},{"cell_type":"markdown","metadata":{"id":"5duWn8t4BRyv"},"source":["# IDE platform\n"]},{"cell_type":"markdown","metadata":{"id":"6HOjnZjSgzk1"},"source":["## load ftr_list"]},{"cell_type":"code","execution_count":3,"metadata":{"id":"7FPBG5Qqg2jB","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1651813086479,"user_tz":-540,"elapsed":500,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"8e6d5811-214b-471b-ec1d-97141d2b13b8"},"outputs":[{"output_type":"stream","name":"stdout","text":["['2022-04-27 ETHUSDT_1m.ftr']\n","2022-04-27 ETHUSDT_1m.ftr loaded !\n","load res_df_ elapsed time : 0.4525907039642334\n"]}],"source":["save_path = './candlestick_concated/database_bn/'\n","\n","# dir_path = \"bb1d_backi2\"\n","# date = \"2022-02-17\"\n","# ftr_path = os.path.join(save_path, dir_path, \"concat/cum\", date)\n","\n","# ------ 1T_database ------ #\n","# date = \"2022-04-27\"\n","# ftr_path = os.path.join(save_path, \"non_cum\", date)\n","\n","date = \"2022-04-27\"\n","# date = \"2022-02-17\"\n","ftr_path = os.path.join(save_path, \"cum\", date)\n","\n","# ------ load ftr list ------ #\n","ftr_list = [s for s in os.listdir(ftr_path) if \"ftr\" in s if date in s]\n","print(ftr_list)\n","\n","start_0 = time.time()\n","key = ftr_list[0]  # tempoaray use single key\n","res_df_ = pd.read_feather(os.path.join(ftr_path, key), columns=None, use_threads=True).set_index(\"index\")\n","# print(res_df_.head())\n","print(key, \"loaded !\")\n","print(\"load res_df_ elapsed time :\", time.time() - start_0)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"RQH_l4opEh_O"},"outputs":[],"source":["res_df_.dtypes"]},{"cell_type":"markdown","metadata":{"id":"x2yj2SwAXDLp"},"source":["### edit cols"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"x9wkWw15XCAm"},"outputs":[],"source":["col_list = list(res_df_.columns)\n","# # [col_ for col_ in col_list if 'score' in col_]\n","\n","# ------ drop ------ #\n","# res_df_.drop([col_ for col_ in col_list if 'open_15T' in col_], inplace=True, axis=1)\n","res_df_.drop([col_ for col_ in col_list if 'es' in col_], inplace=True, axis=1)\n","# res_df_.drop([col_ for col_ in col_list if '_T40' in col_], inplace=True, axis=1)\n","# res_df_.drop([col_ for col_ in col_list if 'long_base' in col_], inplace=True, axis=1)\n","# res_df_.drop([col_ for col_ in col_list[5:]], inplace=True, axis=1)\n","\n","# ------ replace ------ #\n","# for c_i, col_ in enumerate(col_list):\n","#   if 'basis' in col_:\n","# #   # if col_[-1] in ['m', 'h', 'd', 'H'] and '_' in col_:eTa_5T\n","# #   # if col_[0] in ['h'] and '_' in col_:\n","# #   if 'bir_' in col_:\n","\n","#     col_list[c_i] = col_.replace('basis', 'base')\n","# #     # col_list[c_i] = col_.replace('m', 'T').replace('h', 'H').replace('1T', 'T')\n","# #     # col_list[c_i] = col_.replace('1d', 'D')\n","# #     # col_list[c_i] = col_.replace('eTa_5T', 'ema_5T')\n","# #     # col_list[c_i] = col_list[c_i][1:]\n","# #     # print(col_list[c_i][0])\n","# res_df_.columns = col_list\n","# col_list[-2:] = ['resi_T', 'sup_T']"]},{"cell_type":"markdown","metadata":{"id":"14chOHeXh6JD"},"source":["### lab"]},{"cell_type":"markdown","metadata":{"id":"O87s8_EUakqS"},"source":["#### instant indi."]},{"cell_type":"code","source":["def wave_range_ratio_v3(res_df, config):\n","    wave_itv = pd.infer_freq(res_df.index)\n","    wave_period = config.tr_set.wave_period\n","\n","    roll_high_, roll_low_ = roll_wave_hl_v3(res_df, config, roll_hl_cnt=4)\n","\n","    wave1_range = roll_high_[:, -2] - roll_low_[:, -2]\n","    cu_wave2_range = roll_high_[:, -2] - roll_low_[:, -1]  # for short, cu\n","    co_wave2_range = roll_high_[:, -1] - roll_low_[:, -2]  # for long, co\n","    wave3_range = roll_high_[:, -1] - roll_low_[:, -1]\n","\n","    res_df['cu_wrr_21_{}{}'.format(wave_itv, wave_period)] = cu_wave2_range / wave1_range\n","    res_df['cu_wrr_32_{}{}'.format(wave_itv, wave_period)] = wave3_range / cu_wave2_range\n","\n","    res_df['co_wrr_21_{}{}'.format(wave_itv, wave_period)] = co_wave2_range / wave1_range\n","    res_df['co_wrr_32_{}{}'.format(wave_itv, wave_period)] = wave3_range / co_wave2_range\n","\n","    return res_df\n","\n","def get_terms_info_v3(cu_bool, co_bool, len_df, len_df_range, prime_terms=False):\n","    cu_idx = get_index_bybool(cu_bool, len_df_range)\n","    co_idx = get_index_bybool(co_bool, len_df_range)\n","\n","    cu_fill_idx = fill_arr(cu_idx)\n","    co_fill_idx = fill_arr(co_idx)\n","\n","    notnan_cu_bool = ~np.isnan(cu_idx)\n","    notnan_co_bool = ~np.isnan(co_idx)\n","\n","    valid_cu_bool = notnan_cu_bool * ~np.isnan(co_fill_idx)\n","    valid_co_bool = notnan_co_bool * ~np.isnan(cu_fill_idx)\n","\n","    if prime_terms:\n","        # ------ 생략된 idx 에 대한 prime_idx 탐색 ------ #\n","        high_bool = cu_fill_idx < co_fill_idx  # 이렇게 해야 high_terms[:, 1] 이 cu_idx 가 나옴\n","        low_bool = co_fill_idx < cu_fill_idx\n","\n","        high_terms_vec = get_index_bybool(high_bool, len_df_range)\n","        low_terms_vec = get_index_bybool(low_bool, len_df_range)  # -> low_terms\n","\n","        high_terms_list = using_clump(high_terms_vec)\n","        low_terms_list = using_clump(low_terms_vec)\n","\n","        valid_cu_prime_idx = np.array([terms.min() for terms in low_terms_list])\n","        valid_co_prime_idx = np.array([terms.min() for terms in high_terms_list])\n","\n","        cu_prime_idx = np.full(len_df, np.nan)\n","        co_prime_idx = np.full(len_df, np.nan)\n","\n","        cu_prime_idx[valid_cu_prime_idx] = valid_cu_prime_idx\n","        co_prime_idx[valid_co_prime_idx] = valid_co_prime_idx\n","\n","        cu_prime_fill_idx = fill_arr(cu_prime_idx)\n","        co_prime_fill_idx = fill_arr(co_prime_idx)\n","\n","        valid_cu_bool *= ~np.isnan(co_prime_fill_idx)\n","        valid_co_bool *= ~np.isnan(cu_prime_fill_idx)\n","\n","    high_post_terms = np.vstack((co_fill_idx[valid_cu_bool], cu_idx[valid_cu_bool])).T.astype(int)\n","    low_post_terms = np.vstack((cu_fill_idx[valid_co_bool], co_idx[valid_co_bool])).T.astype(int)\n","\n","    high_post_terms_cnt = high_post_terms[:, 1] - high_post_terms[:, 0]\n","    low_post_terms_cnt = low_post_terms[:, 1] - low_post_terms[:, 0]\n","\n","    # ------ co, cu idx's terms ------ #\n","    valid_cu_idx = cu_idx[valid_cu_bool]\n","    valid_co_idx = co_idx[valid_co_bool]\n","    valid_shift_cu_idx = pd.Series(valid_cu_idx).shift(1).to_numpy()\n","    valid_shift_co_idx = pd.Series(valid_co_idx).shift(1).to_numpy()\n","\n","    cu_idx_term = valid_cu_idx - valid_shift_cu_idx\n","    co_idx_term = valid_co_idx - valid_shift_co_idx\n","\n","    # ------ get co, cu terms_v2 ------ # # 기본은 아래 logic 으로 수행하고, update_hl 도 해당 term 구간의 hl 이 더 작거나 클경우 적용 가능할 것\n","    if prime_terms:\n","        high_prime_terms = np.vstack((co_prime_fill_idx[valid_cu_bool], cu_idx[valid_cu_bool])).T.astype(int)\n","        low_prime_terms = np.vstack((cu_prime_fill_idx[valid_co_bool], co_idx[valid_co_bool])).T.astype(int)\n","        \n","        high_prime_terms_cnt = high_prime_terms[:, 1] - high_prime_terms[:, 0]\n","        low_prime_terms_cnt = low_prime_terms[:, 1] - low_prime_terms[:, 0]\n","\n","        return high_post_terms, low_post_terms, high_prime_terms_cnt, low_prime_terms_cnt, high_prime_terms, low_prime_terms, cu_idx_term, co_idx_term\n","\n","    return high_post_terms, low_post_terms, high_post_terms_cnt, low_post_terms_cnt, cu_idx_term, co_idx_term\n","  \n","def wave_range_v15(t_df, config, ltf_df=None, term_thresh1=1, term_thresh2=3):  # v2 for period1 only\n","\n","    itv = pd.infer_freq(t_df.index)\n","    period1 = config.tr_set.wave_period\n","    # print(period1)\n","\n","    itv_num = to_itvnum(itv)\n","    # print(itv_num)\n","\n","    t_df = donchian_channel_v4(t_df, period1)\n","\n","    dc_base_ = t_df['dc_base_{}{}'.format(itv, period1)].to_numpy()\n","    b1_dc_base_ = t_df['dc_base_{}{}'.format(itv, period1)].shift(itv_num).to_numpy()\n","\n","    len_df = len(t_df)\n","    len_df_range = np.arange(len_df).astype(int)\n","    # short_open_res = np.ones(len_df)\n","    # long_open_res = np.ones(len_df)\n","\n","    data_cols = ['open', 'high', 'low', 'close']\n","    open, high, low, close = [t_df[col_].to_numpy() for col_ in data_cols]\n","    b1_close = t_df.close.shift(itv_num).to_numpy()\n","\n","    # ============ modules ============ #\n","    # ------ define co, cu ------ # <- point missing 과 관련해 정교해아함\n","    cu_bool = ((b1_close > b1_dc_base_) & (dc_base_ > close)) | ((b1_close > dc_base_) & (dc_base_ > close))\n","    co_bool = (b1_close < b1_dc_base_) & (dc_base_ < close) | ((b1_close < dc_base_) & (dc_base_ < close))\n","\n","    cu_idx = get_index_bybool(cu_bool, len_df_range)  # for marking\n","    co_idx = get_index_bybool(co_bool, len_df_range)\n","\n","    # high_terms, low_terms, high_terms_cnt, low_terms_cnt = get_terms_info(cu_bool, co_bool, len_df_range)\n","    # high_terms, low_terms, high_terms_cnt, low_terms_cnt, cu_idx_term, co_idx_term = get_terms_info_v2(cu_bool, co_bool, len_df_range)\n","    high_terms, low_terms, high_terms_cnt, low_terms_cnt, cu_idx_term, co_idx_term = get_terms_info_v3(cu_bool, co_bool, len_df, len_df_range)\n","\n","    paired_cu_idx1 = high_terms[:, 1]\n","    paired_co_idx1 = low_terms[:, 1]\n","\n","    # ------ 생략 이전 terms' hl ------ #\n","    wave_high_terms_low_ = np.full(len_df, np.nan)\n","    wave_low_terms_high_ = np.full(len_df, np.nan)\n","\n","    wave_high_terms_lows = np.array([low[iin:iout + 1].min() for iin, iout in high_terms])\n","    wave_low_terms_highs = np.array([high[iin:iout + 1].max() for iin, iout in low_terms])\n","\n","    wave_high_terms_low_[paired_cu_idx1] = wave_high_terms_lows\n","    wave_low_terms_high_[paired_co_idx1] = wave_low_terms_highs\n","\n","    # ------ 생략된 cu, co 에 대한 2nd pairing 진행 ------ #\n","    # cu_bool[high_terms[:, 1][high_terms_cnt <= term_thresh]] = False\n","    # co_bool[low_terms[:, 1][low_terms_cnt <= term_thresh]] = False\n","    cu_bool[high_terms[:, 1][(high_terms_cnt <= term_thresh1) & (cu_idx_term <= term_thresh2)]] = False\n","    co_bool[low_terms[:, 1][(low_terms_cnt <= term_thresh1) & (co_idx_term <= term_thresh2)]] = False\n","\n","    # high_terms, low_terms, high_terms_cnt, low_terms_cnt = get_terms_info(cu_bool, co_bool, len_df_range)\n","    # high_terms, low_terms, high_terms_cnt, low_terms_cnt, _, _ = get_terms_info_v2(cu_bool, co_bool, len_df_range)\n","    high_post_terms, low_post_terms, high_prime_terms_cnt, low_prime_terms_cnt, high_prime_terms, low_prime_terms, _, _ = get_terms_info_v3(cu_bool,\n","                                                                                                                                          co_bool,\n","                                                                                                                                          len_df,\n","                                                                                                                                          len_df_range,\n","                                                                                                                                          True)\n","\n","    paired_cu_idx2 = high_prime_terms[:, 1]\n","    paired_co_idx2 = low_prime_terms[:, 1]\n","\n","    # ====== get wave_hl & terms ====== #\n","    wave_high_ = np.full(len_df, np.nan)\n","    wave_low_ = np.full(len_df, np.nan)\n","\n","    wave_prime_highs = np.array([high[iin:iout + 1].max() for iin, iout in high_prime_terms])\n","    wave_prime_lows = np.array([low[iin:iout + 1].min() for iin, iout in low_prime_terms])\n","\n","    wave_high_[paired_cu_idx2] = wave_prime_highs\n","    wave_low_[paired_co_idx2] = wave_prime_lows\n","\n","    wave_high_fill_ = fill_arr(wave_high_)\n","    wave_low_fill_ = fill_arr(wave_low_)\n","\n","    # ------ Todo, update_hl 에 대해서, post_terms_hl 적용 ------ #\n","    wave_post_highs = np.array([high[iin:iout + 1].max() for iin, iout in high_terms])  # 생략전 post_terms_hl 사용\n","    wave_post_lows = np.array([low[iin:iout + 1].min() for iin, iout in low_terms])\n","\n","    update_low_cu_bool = wave_high_terms_low_ < wave_low_fill_\n","    update_high_co_bool = wave_low_terms_high_ > wave_high_fill_\n","\n","    update_paired_cu_bool = (cu_bool * update_low_cu_bool)[paired_cu_idx1]\n","    update_paired_cu_idx = paired_cu_idx1[update_paired_cu_bool]\n","    wave_high_[update_paired_cu_idx] = wave_post_highs[update_paired_cu_bool]\n","\n","    update_paired_co_bool = (co_bool * update_high_co_bool)[paired_co_idx1]\n","    update_paired_co_idx = paired_co_idx1[update_paired_co_bool]\n","    wave_low_[update_paired_co_idx] = wave_post_lows[update_paired_co_bool]\n","\n","    # wave_high_fill2_ = fill_arr(wave_high_)\n","    # wave_low_fill2_ = fill_arr(wave_low_)\n","    wave_high_fill_ = fill_arr(wave_high_)\n","    wave_low_fill_ = fill_arr(wave_low_)\n","\n","    # wave_high_terms_low_ = np.full(len_df, np.nan)\n","    # wave_low_terms_high_ = np.full(len_df, np.nan)\n","\n","    # wave_high_terms_lows = np.array([low[iin:iout + 1].min() for iin, iout in high_terms])  # for point rejection, Todo, min_max 설정 항상 주의\n","    # wave_low_terms_highs = np.array([high[iin:iout + 1].max() for iin, iout in low_terms])\n","\n","    # wave_high_terms_low_[paired_cu_idx] = wave_high_terms_lows\n","    # wave_low_terms_high_[paired_co_idx] = wave_low_terms_highs\n","\n","    wave_high_terms_cnt_ = np.full(len_df, np.nan)\n","    wave_low_terms_cnt_ = np.full(len_df, np.nan)\n","\n","    wave_high_terms_cnt_[paired_cu_idx2] = high_prime_terms_cnt\n","    wave_low_terms_cnt_[paired_co_idx2] = low_prime_terms_cnt\n","\n","    wave_high_terms_cnt_fill_ = fill_arr(wave_high_terms_cnt_)\n","    wave_low_terms_cnt_fill_ = fill_arr(wave_low_terms_cnt_)\n","\n","    # ------ hl_fill 의 prime_idx 를 찾아야함 ------ #\n","    b1_wave_high_fill_ = pd.Series(wave_high_fill_).shift(1).to_numpy()\n","    b1_wave_low_fill_ = pd.Series(wave_low_fill_).shift(1).to_numpy()\n","    wave_high_prime_idx = np.where((wave_high_fill_ != b1_wave_high_fill_) & ~np.isnan(wave_high_fill_), len_df_range, np.nan)\n","    wave_low_prime_idx = np.where((wave_low_fill_ != b1_wave_low_fill_) & ~np.isnan(wave_low_fill_), len_df_range, np.nan)\n","\n","    high_prime_idx_fill_ = fill_arr(wave_high_prime_idx)\n","    low_prime_idx_fill_ = fill_arr(wave_low_prime_idx)\n","\n","    # ============ enlist to df_cols ============ #\n","    t_df['wave_high_fill_{}{}'.format(itv, period1)] = wave_high_fill_\n","    t_df['wave_low_fill_{}{}'.format(itv, period1)] = wave_low_fill_\n","    # t_df['wave_high_fill2_{}{}'.format(itv, period1)] = wave_high_fill2_\n","    # t_df['wave_low_fill2_{}{}'.format(itv, period1)] = wave_low_fill2_\n","\n","    t_df['wave_high_terms_cnt_fill_{}{}'.format(itv, period1)] = wave_high_terms_cnt_fill_\n","    t_df['wave_low_terms_cnt_fill_{}{}'.format(itv, period1)] = wave_low_terms_cnt_fill_\n","    t_df['wave_cu_{}{}'.format(itv, period1)] = cu_bool * ~update_low_cu_bool\n","    t_df['wave_co_{}{}'.format(itv, period1)] = co_bool * ~update_high_co_bool\n","    t_df['wave_cu_bool_{}{}'.format(itv, period1)] = cu_bool  # temporary, for plot_check\n","    t_df['wave_co_bool_{}{}'.format(itv, period1)] = co_bool\n","    t_df['wave_cu_marker_{}{}'.format(itv, period1)] = get_line(cu_idx, dc_base_)\n","    t_df['wave_co_marker_{}{}'.format(itv, period1)] = get_line(co_idx, dc_base_)\n","\n","    # ------ for roll prev_hl ------ #\n","    t_df['wave_high_prime_idx_{}{}'.format(itv, period1)] = wave_high_prime_idx  # cu\n","    t_df['wave_low_prime_idx_{}{}'.format(itv, period1)] = wave_low_prime_idx\n","\n","    # ------ for first_high ------ #\n","    t_df['wave_high_prime_idx_fill_{}{}'.format(itv, period1)] = high_prime_idx_fill_\n","    t_df['wave_low_prime_idx_fill_{}{}'.format(itv, period1)] = low_prime_idx_fill_\n","\n","    if itv != 'T':\n","        assert ltf_df is not None, \"assert ltf_df is not None\"\n","        join_cols = np.arange(-15, 0, 1).astype(int)  # points & donchian_channels\n","        ltf_df.drop(t_df.columns[join_cols], inplace=True, axis=1, errors='ignore')\n","        try:\n","            ltf_df = ltf_df.join(to_lower_tf_v2(ltf_df, t_df, join_cols), how='inner')\n","        except Exception as e:\n","            print(\"error in wave_range()'s join() :\", e)\n","    else:\n","        ltf_df = t_df\n","\n","    return ltf_df\n","\n","def roll_wave_hl_v3(t_df, config, roll_hl_cnt=4):\n","  \n","    wave_itv = pd.infer_freq(t_df.index)\n","    wave_period = config.tr_set.wave_period\n","\n","    len_df = len(t_df)\n","\n","    wave_high_fill_ = t_df['wave_high_fill_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","    wave_low_fill_ = t_df['wave_low_fill_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","    high_prime_idx = t_df['wave_high_prime_idx_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","    low_prime_idx = t_df['wave_low_prime_idx_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","\n","    valid_high_prime_idx = high_prime_idx[~np.isnan(high_prime_idx)].astype(int)  # roll_high 를 위한 prime_idx\n","    valid_low_prime_idx = low_prime_idx[~np.isnan(low_prime_idx)].astype(int)  # roll_low 를 위한 prime_idx\n","\n","    roll_high_idx_arr = np.array([valid_high_prime_idx[idx_ + 1 - roll_hl_cnt:idx_ + 1] for idx_ in range(len(valid_high_prime_idx)) if idx_ + 1 >= roll_hl_cnt])  # cnt 수를 만족시키기 위해 idx 제한\n","    roll_low_idx_arr = np.array([valid_low_prime_idx[idx_ + 1 - roll_hl_cnt:idx_ + 1] for idx_ in range(len(valid_low_prime_idx)) if idx_ + 1 >= roll_hl_cnt])\n","\n","    roll_high_ = pd.DataFrame(np.full((len_df, roll_hl_cnt), np.nan))\n","    roll_low_ = pd.DataFrame(np.full((len_df, roll_hl_cnt), np.nan))\n","\n","    roll_high_.iloc[valid_high_prime_idx[roll_hl_cnt - 1:], :] = wave_high_fill_[roll_high_idx_arr]  # 제한된 idx 를 제외한 row 에 roll_hl 입력\n","    roll_low_.iloc[valid_low_prime_idx[roll_hl_cnt - 1:], :] = wave_low_fill_[roll_low_idx_arr]\n","\n","    # roll_high_fill_ = roll_high_.ffill().to_numpy()\n","    # roll_low_fill_ = roll_low_.ffill().to_numpy()\n","\n","    return roll_high_.ffill().to_numpy(), roll_low_.ffill().to_numpy()  # t_df 에 hl_cnt 만큼 col 만들어야해서 numpy 로 뽑음\n"],"metadata":{"id":"RVFfP9VcDG2_","executionInfo":{"status":"ok","timestamp":1651813606815,"user_tz":-540,"elapsed":737,"user":{"displayName":"7th June","userId":"08178289703395036410"}}},"execution_count":40,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"LyGnAMvLYvOZ"},"source":["#### wave_range"]},{"cell_type":"markdown","source":["##### plot_check"],"metadata":{"id":"O1uu9vQnY5dn"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"YqBXjVPzdccC"},"outputs":[],"source":["i = random.randint(0, len(res_df))\n","# i = 235290, 512385\n","# i = 235290\n","\n","plot_size = 100\n","t_df = res_df.iloc[i - plot_size:i]\n","# t_df = res_df.iloc[i - plot_size:i - 22]\n","a_data = t_df.to_numpy()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"-Dr_tTk9csFm","colab":{"base_uri":"https://localhost:8080/","height":862},"executionInfo":{"status":"ok","timestamp":1651801515706,"user_tz":-540,"elapsed":1901,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"8f97483b-44e1-4f6e-a245-46b7f052b697"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1080x1080 with 2 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["plt.style.use(['dark_background', 'fast'])\n","fig = plt.figure(figsize=(15, 15))\n","nrows, ncols = 2, 1\n","gs = gridspec.GridSpec(nrows=nrows,  # row 부터 index 채우고 col 채우는 순서임 (gs_idx)\n","                        ncols=ncols,\n","                        height_ratios=[3, 1]\n","                        )\n","\n","ax = fig.add_subplot(gs[0])\n","\n","# ------ candles ------ #\n","candle_plot(a_data[:, col_idx_dict['ohlc_col_idxs']], ax, alpha=1.0, wickwidth=1.0)\n","# _ = [step_col_plot(a_data[:, params[0]], *params[1:]) for params in col_idx_dict['step_col_info']]\n","\n","config.tr_set.wave_period = 5\n","wave_itv, wave_period = 'T', config.tr_set.wave_period\n","# t_df = wave_range_v11(t_df, config, ltf_df=None)\n","# t_df = wave_range_v12(t_df, config, ltf_df=None)\n","# t_df = wave_range_v13(t_df, config, ltf_df=None, term_thresh=1)\n","# t_df = wave_range_v14(t_df, config, ltf_df=None, term_thresh1=1, term_thresh2=3)\n","t_df = wave_range_v15(t_df, config, ltf_df=None, term_thresh1=2, term_thresh2=3)\n","\n","len_df = len(t_df)   \n","len_df_range = np.arange(len_df).astype(int)\n","\n","# ============ ============ ============ #\n","# ============ ============ ============ #\n","\n","wave_high_fill_ = t_df['wave_high_fill_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","wave_low_fill_ = t_df['wave_low_fill_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","# wave_high_fill2_ = t_df['wave_high_fill2_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","# wave_low_fill2_ = t_df['wave_low_fill2_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","\n","wave_high_terms_cnt_fill_ = t_df['wave_high_terms_cnt_fill_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","wave_low_terms_cnt_fill_ = t_df['wave_low_terms_cnt_fill_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","wave_cu_idx_ = get_index_bybool(t_df['wave_cu_{}{}'.format(wave_itv, wave_period)].to_numpy(), len_df_range)\n","wave_co_idx_ = get_index_bybool(t_df['wave_co_{}{}'.format(wave_itv, wave_period)].to_numpy(), len_df_range)\n","wave_cu_bool_idx_ = get_index_bybool(t_df['wave_cu_bool_{}{}'.format(wave_itv, wave_period)].to_numpy(), len_df_range)\n","wave_co_bool_idx_ = get_index_bybool(t_df['wave_co_bool_{}{}'.format(wave_itv, wave_period)].to_numpy(), len_df_range)\n","wave_cu_marker_ = t_df['wave_cu_marker_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","wave_co_marker_ = t_df['wave_co_marker_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","cu_prime_idx = t_df['wave_cu_prime_idx_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","co_prime_idx = t_df['wave_co_prime_idx_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","cu_prime_idx_fill = t_df['wave_cu_prime_idx_fill_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","co_prime_idx_fill = t_df['wave_co_prime_idx_fill_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","\n","# ============ plot_check ============ #\n","dc_base_ = t_df['dc_base_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","plt.step(len_df_range, dc_base_, alpha=1.0, color='cyan', linewidth=1)\n","\n","plt.step(len_df_range, wave_cu_marker_, \"o\", alpha=1.0, color='#00ff00', markersize=6)\n","plt.step(len_df_range, wave_co_marker_, \"o\", alpha=1.0, color='#ff00ff', markersize=6)\n","\n","[plt.axvline(int(idx_), color=\"#0000ff\") for idx_ in wave_cu_bool_idx_ if not np.isnan(idx_)]\n","[plt.axvline(int(idx_), color=\"#ff0000\") for idx_ in wave_co_bool_idx_ if not np.isnan(idx_)]\n","\n","[plt.axvline(int(idx_), color=\"#00ff00\") for idx_ in wave_cu_idx_ if not np.isnan(idx_)]\n","[plt.axvline(int(idx_), color=\"#ff00ff\") for idx_ in wave_co_idx_ if not np.isnan(idx_)]\n","\n","# [plt.axvline(int(idx_), color=\"#00ff00\") for idx_ in wave_high_prime_idx if not np.isnan(idx_)]\n","# [plt.axvline(int(idx_), color=\"#ff00ff\") for idx_ in wave_low_prime_idx if not np.isnan(idx_)]\n","\n","# [plt.axvline(int(idx_), color=\"#00ff00\") for idx_ in paired_cu_idx if not np.isnan(idx_)]\n","\n","# plt.step(len_df_range, wave_high_fill_, alpha=1.0, color='yellow', linewidth=2)\n","# plt.step(len_df_range, wave_low_fill_, alpha=1.0, color='yellow', linewidth=2)\n","\n","plt.step(len_df_range, wave_high_fill_, \"*\", alpha=1.0, color='#00ff00', markersize=6)\n","plt.step(len_df_range, wave_low_fill_, \"*\", alpha=1.0, color='#ff00ff', markersize=6)\n","# plt.step(len_df_range, wave_high_fill2_, \"*\", alpha=1.0, color='#0000ff', markersize=6)\n","# plt.step(len_df_range, wave_low_fill2_, \"*\", alpha=1.0, color='#ff0000', markersize=6)\n","\n","plt.xlim(0, len_df)\n","\n","plt.subplot(gs[1])\n","plt.step(len_df_range, wave_high_terms_cnt_fill_, alpha=1.0, color='yellow', linewidth=2)\n","plt.step(len_df_range, wave_low_terms_cnt_fill_, alpha=1.0, color='yellow', linewidth=2)\n","plt.step(len_df_range, wave_high_terms_cnt_fill_, \"*\", alpha=1.0, color='#00ff00', markersize=6)\n","plt.step(len_df_range, wave_low_terms_cnt_fill_, \"*\", alpha=1.0, color='#ff00ff', markersize=6)\n","plt.xlim(0, len_df)\n","\n","plt.show()"]},{"cell_type":"markdown","source":["###### data_window"],"metadata":{"id":"c2yVTn1tnxMn"}},{"cell_type":"code","source":["high_prime_terms\n","#  get_index_bybool(notnan_cu_bool, len_df_range)\n","# cu_idx[notnan_cu_bool]\n","# co_idx[notnan_co_bool]"],"metadata":{"id":"_SloTr3bWvHV"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# print(paired_cu_idx)\n","# high_terms_list\n","# wave_high_prime_idx\n","i"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"RGFsCh-g7MmO","executionInfo":{"status":"ok","timestamp":1651756035688,"user_tz":-540,"elapsed":597,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"55013ee7-908f-41f4-f35e-c2dd95a3acf6"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["512385"]},"metadata":{},"execution_count":63}]},{"cell_type":"code","source":["%timeit -n1 -r1 wave_range_v10(res_df[-100000:], period1, ltf_df=None) # 23.7 s per loop\n","%timeit -n1 -r1 wave_range_v11(res_df[-100000:], period1, ltf_df=None) # 574 ms per loop"],"metadata":{"id":"Z-EokTzIqb-T"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# roll_wave_hl_v2(t_df, config, roll_hl_cnt=4)[0][-1]\n","# roll_wave_hl_v2(t_df, config, roll_hl_cnt=4)[1][50]\n","roll_wave_hl_v3(t_df, config, roll_hl_cnt=4)[0][60]\n","# roll_wave_hl(t_df, itv, period1)[0][150]"],"metadata":{"id":"G5jpriueRpxH","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1651800600577,"user_tz":-540,"elapsed":482,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"d79eeedb-2d48-42a1-9493-b30c71248f99"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([2758.15, 2745.82, 2753.26, 2737.96])"]},"metadata":{},"execution_count":91}]},{"cell_type":"code","source":["term_thresh1=1\n","term_thresh2=3\n","\n","itv = pd.infer_freq(t_df.index)\n","period1 = config.tr_set.wave_period\n","# print(period1)\n","\n","itv_num = to_itvnum(itv)\n","# print(itv_num)\n","\n","t_df = donchian_channel_v4(t_df, period1) \n","\n","dc_base_ = t_df['dc_base_{}{}'.format(itv, period1)].to_numpy()\n","b1_dc_base_ = t_df['dc_base_{}{}'.format(itv, period1)].shift(itv_num).to_numpy()\n","\n","len_df = len(t_df)   \n","len_df_range = np.arange(len_df).astype(int)\n","# short_open_res = np.ones(len_df)\n","# long_open_res = np.ones(len_df)\n","\n","data_cols = ['open', 'high', 'low', 'close']\n","open, high, low, close = [t_df[col_].to_numpy() for col_ in data_cols]\n","b1_close = t_df.close.shift(itv_num).to_numpy()\n","\n","# ============ modules ============ #  \n","# ------ define co, cu ------ # <- point missing 과 관련해 정교해아함\n","cu_bool = ((b1_close > b1_dc_base_) & (dc_base_ > close)) | ((b1_close > dc_base_) & (dc_base_ > close))\n","co_bool = (b1_close < b1_dc_base_) & (dc_base_ < close) | ((b1_close < dc_base_) & (dc_base_ < close))\n","\n","cu_idx = get_index_bybool(cu_bool, len_df_range)   # for marking\n","co_idx = get_index_bybool(co_bool, len_df_range)\n","\n","# high_terms, low_terms, high_terms_cnt, low_terms_cnt = get_terms_info(cu_bool, co_bool, len_df_range)\n","# high_terms, low_terms, high_terms_cnt, low_terms_cnt, cu_idx_term, co_idx_term = get_terms_info_v2(cu_bool, co_bool, len_df_range)\n","high_terms, low_terms, high_terms_cnt, low_terms_cnt, cu_idx_term, co_idx_term = get_terms_info_v3(cu_bool, co_bool, len_df_range)\n","\n","paired_cu_idx = high_terms[:, 1]\n","paired_co_idx = low_terms[:, 1]\n","\n","# ------ 생략 이전 terms' hl ------ #\n","wave_high_terms_low_ = np.full(len_df, np.nan)\n","wave_low_terms_high_ = np.full(len_df, np.nan)\n","\n","wave_high_terms_lows = np.array([low[iin:iout + 1].min() for iin, iout in high_terms])\n","wave_low_terms_highs = np.array([high[iin:iout + 1].max() for iin, iout in low_terms])  \n","\n","wave_high_terms_low_[paired_cu_idx] = wave_high_terms_lows\n","wave_low_terms_high_[paired_co_idx] = wave_low_terms_highs\n","\n","# ------ 생략된 cu, co 에 대한 2nd pairing 진행 ------ #\n","# cu_bool[high_terms[:, 1][high_terms_cnt <= term_thresh]] = False\n","# co_bool[low_terms[:, 1][low_terms_cnt <= term_thresh]] = False  \n","cu_bool[high_terms[:, 1][(high_terms_cnt <= term_thresh1) & (cu_idx_term <= term_thresh2)]] = False\n","co_bool[low_terms[:, 1][(low_terms_cnt <= term_thresh1) & (co_idx_term <= term_thresh2)]] = False  \n","\n","# high_terms, low_terms, high_terms_cnt, low_terms_cnt = get_terms_info(cu_bool, co_bool, len_df_range)\n","# high_terms, low_terms, high_terms_cnt, low_terms_cnt, _, _ = get_terms_info_v2(cu_bool, co_bool, len_df_range)\n","high_post_terms, low_post_terms, high_post_terms_cnt, low_post_terms_cnt, high_prime_terms, low_prime_terms, cu_idx_term, co_idx_term = get_terms_info_v3(cu_bool, co_bool, len_df_range, True)\n","\n","paired_cu_idx = high_prime_terms[:, 1]\n","paired_co_idx = low_prime_terms[:, 1]\n","\n","# ====== get wave_hl & terms ====== #\n","wave_high_ = np.full(len_df, np.nan)\n","wave_low_ = np.full(len_df, np.nan)\n","\n","wave_highs = np.array([high[iin:iout + 1].max() for iin, iout in high_prime_terms])\n","wave_lows = np.array([low[iin:iout + 1].min() for iin, iout in low_prime_terms])\n","\n","wave_high_[paired_cu_idx] = wave_highs\n","wave_low_[paired_co_idx] = wave_lows\n","\n","# ------ Todo, update_hl 에 대해서, post_terms_hl 적용 ------ #\n","wave_high_fill_ = fill_arr(wave_high_)\n","wave_low_fill_ = fill_arr(wave_low_)"],"metadata":{"id":"TqMmmSAGuChM"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["wave_post_highs = np.array([high[iin:iout + 1].max() for iin, iout in high_post_terms])\n","wave_post_lows = np.array([low[iin:iout + 1].min() for iin, iout in low_post_terms])\n","\n","# print(len(paired_cu_idx))\n","# print(len(wave_post_highs))\n","# print(len(cu_bool))\n","\n","update_paired_cu_bool = (cu_bool * (wave_high_terms_low_ < wave_low_fill_))[paired_cu_idx]\n","update_paired_cu_idx = paired_cu_idx[update_paired_cu_bool]\n","wave_high_[update_paired_cu_idx] = wave_post_highs[update_paired_cu_bool]\n","\n","update_paired_co_bool = (co_bool * (wave_low_terms_high_ > wave_high_fill_))[paired_co_idx]\n","update_paired_co_idx = paired_co_idx[update_paired_co_bool]\n","wave_low_[update_paired_co_idx] = wave_post_lows[update_paired_co_bool]\n","\n","wave_high_fill2_ = fill_arr(wave_high_)\n","wave_low_fill2_ = fill_arr(wave_low_)"],"metadata":{"id":"Mh3w2s-j34Zs"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# wave_post_highs\n","# update_cu_bool = (cu_bool * (wave_high_terms_low_ < wave_low_fill_))[paired_cu_idx]\n","# print(paired_cu_idx[update_cu_bool])\n","# print(paired_cu_idx)\n","print(len(update_paired_cu_idx))\n","print(len(wave_post_highs[update_paired_cu_bool]))\n","# print(high_prime_terms[:, 1])\n","# print(high_post_terms[:, 1])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"eQ06-kWq4m6F","executionInfo":{"status":"ok","timestamp":1651799326382,"user_tz":-540,"elapsed":3,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"5c5df956-4fbd-4aa4-e1d6-dc5d0c23ac19"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["11\n","11\n"]}]},{"cell_type":"code","source":["cu_idx = get_index_bybool(cu_bool, len_df_range)\n","co_idx = get_index_bybool(co_bool, len_df_range)\n","\n","cu_fill_idx = fill_arr(cu_idx)\n","co_fill_idx = fill_arr(co_idx)\n","\n","notnan_cu_bool = ~np.isnan(cu_idx)\n","notnan_co_bool = ~np.isnan(co_idx)\n","\n","# ------ 생략된 idx 에 대한 prime_idx 탐색 ------ #\n","high_bool = cu_fill_idx < co_fill_idx  # 이렇게 해야 high_terms[:, 1] 이 cu_idx 가 나옴\n","low_bool = co_fill_idx < cu_fill_idx\n","\n","high_terms_vec = get_index_bybool(high_bool, len_df_range)\n","low_terms_vec = get_index_bybool(low_bool, len_df_range) # -> low_terms\n","\n","high_terms_list = using_clump(high_terms_vec)\n","low_terms_list = using_clump(low_terms_vec)\n","\n","valid_cu_prime_idx = np.array([terms.min() for terms in low_terms_list])\n","valid_co_prime_idx = np.array([terms.min() for terms in high_terms_list])\n","\n","cu_prime_idx = np.full(len_df, np.nan)\n","co_prime_idx = np.full(len_df, np.nan)\n","\n","cu_prime_idx[valid_cu_prime_idx] = valid_cu_prime_idx\n","co_prime_idx[valid_co_prime_idx] = valid_co_prime_idx\n","\n","cu_prime_fill_idx = fill_arr(cu_prime_idx)\n","co_prime_fill_idx = fill_arr(co_prime_idx)\n","\n","# ------ get co, cu terms_v2 ------ # # 기본은 아래 logic 으로 수행하고, update_hl 도 해당 term 구간의 hl 이 더 작거나 클경우 적용 가능할 것\n","valid_cu_bool = notnan_cu_bool * ~np.isnan(co_fill_idx) * ~np.isnan(co_prime_fill_idx)\n","valid_co_bool = notnan_co_bool * ~np.isnan(cu_fill_idx) * ~np.isnan(cu_prime_fill_idx)\n","\n","high_post_terms = np.vstack((co_fill_idx[valid_cu_bool], cu_idx[valid_cu_bool])).T.astype(int)\n","low_post_terms = np.vstack((cu_fill_idx[valid_co_bool], co_idx[valid_co_bool])).T.astype(int)\n","\n","high_terms_cnt = high_post_terms[:, 1] - high_post_terms[:, 0] \n","low_terms_cnt = low_post_terms[:, 1] - low_post_terms[:, 0] \n","\n","high_prime_terms = np.vstack((co_prime_fill_idx[valid_cu_bool], cu_idx[valid_cu_bool])).T.astype(int)\n","low_prime_terms = np.vstack((cu_prime_fill_idx[valid_co_bool], co_idx[valid_co_bool])).T.astype(int)"],"metadata":{"id":"SUFmr9Z_kcCN"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# co_prime_idx\n","# co_prime_fill_idx\n","high_prime_terms"],"metadata":{"id":"_3pOQtt2ttfk"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#  get_index_bybool(notnan_cu_bool, len_df_range)\n","valid_cu_idx = cu_idx[notnan_cu_bool]\n","valid_shift_cu_idx = pd.Series(valid_cu_idx).shift(1).to_numpy()\n","valid_co_idx = co_idx[notnan_co_bool]\n","valid_shift_co_idx = pd.Series(valid_co_idx).shift(1).to_numpy()\n","\n","valid_cu_idx - valid_shift_cu_idx\n","valid_co_idx - valid_shift_co_idx"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"kKaD1fK3WPRP","executionInfo":{"status":"ok","timestamp":1651756811396,"user_tz":-540,"elapsed":6,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"bbe470f3-17d0-4029-97e9-2fb383a0c752"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([nan,  2.,  7.,  2.,  4.,  2.,  7.,  5.,  4.,  6.,  9.,  2.,  5., 11., 14.])"]},"metadata":{},"execution_count":79}]},{"cell_type":"markdown","source":["##### legacy"],"metadata":{"id":"Q_1wJTcRYpm8"}},{"cell_type":"code","source":["\n","def wave_range_ratio_v2(res_df, config):\n","\n","    wave_itv = pd.infer_freq(res_df.index)\n","    wave_period = config.tr_set.wave_period\n","\n","    roll_high_, roll_low_ = roll_wave_hl_v2(res_df, config, roll_hl_cnt=4)\n","    \n","    wave1_range = roll_high_[:, -2] - roll_low_[:, -2]\n","    cu_wave2_range = roll_high_[:, -2] - roll_low_[:, -1]  # for short, cu\n","    co_wave2_range = roll_high_[:, -1] - roll_low_[:, -2]  # for long, co\n","    wave3_range = roll_high_[:, -1] - roll_low_[:, -1]\n","\n","    res_df['cu_wrr_21_{}{}'.format(wave_itv, wave_period)] = cu_wave2_range / wave1_range\n","    res_df['cu_wrr_32_{}{}'.format(wave_itv, wave_period)] = wave3_range / cu_wave2_range\n","\n","    res_df['co_wrr_21_{}{}'.format(wave_itv, wave_period)] = co_wave2_range / wave1_range\n","    res_df['co_wrr_32_{}{}'.format(wave_itv, wave_period)] = wave3_range / co_wave2_range\n","\n","    return res_df\n","    \n","def roll_wave_hl(t_df, config, roll_hl_cnt=4):\n","  \n","    wave_itv = pd.infer_freq(t_df.index)\n","    wave_period = config.tr_set.wave_period\n","\n","    len_df = len(t_df)\n","\n","    wave_high_fill_ = t_df['wave_high_fill_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","    wave_low_fill_ = t_df['wave_low_fill_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","    cu_prime_idx = t_df['wave_cu_prime_idx_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","    co_prime_idx = t_df['wave_co_prime_idx_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","\n","    valid_cu_prime_idx = cu_prime_idx[~np.isnan(cu_prime_idx)].astype(int)  # -> 필요한 prev_hl 갯수만큼 각 index 기준으로 자르기\n","    valid_co_prime_idx = co_prime_idx[~np.isnan(co_prime_idx)].astype(int)  # -> 필요한 prev_hl 갯수만큼 각 index 기준으로 자르기\n","\n","    cu_roll_hl_idx_arr = np.array(\n","        [valid_cu_prime_idx[idx_ + 1 - roll_hl_cnt:idx_ + 1] for idx_ in range(len(valid_cu_prime_idx)) if idx_ + 1 >= roll_hl_cnt])\n","    co_roll_hl_idx_arr = np.array(\n","        [valid_co_prime_idx[idx_ + 1 - roll_hl_cnt:idx_ + 1] for idx_ in range(len(valid_co_prime_idx)) if idx_ + 1 >= roll_hl_cnt])\n","\n","    cu_roll_high_ = pd.DataFrame(np.full((len_df, roll_hl_cnt), np.nan))\n","    cu_roll_low_ = pd.DataFrame(np.full((len_df, roll_hl_cnt), np.nan))\n","    co_roll_high_ = pd.DataFrame(np.full((len_df, roll_hl_cnt), np.nan))\n","    co_roll_low_ = pd.DataFrame(np.full((len_df, roll_hl_cnt), np.nan))\n","\n","    cu_roll_high_.iloc[valid_cu_prime_idx[roll_hl_cnt - 1:], :] = wave_high_fill_[cu_roll_hl_idx_arr]\n","    cu_roll_low_.iloc[valid_cu_prime_idx[roll_hl_cnt - 1:], :] = wave_low_fill_[cu_roll_hl_idx_arr]\n","    co_roll_high_.iloc[valid_co_prime_idx[roll_hl_cnt - 1:], :] = wave_high_fill_[co_roll_hl_idx_arr]\n","    co_roll_low_.iloc[valid_co_prime_idx[roll_hl_cnt - 1:], :] = wave_low_fill_[co_roll_hl_idx_arr]\n","\n","    return cu_roll_high_.ffill().to_numpy(), cu_roll_low_.ffill().to_numpy(), co_roll_high_.ffill().to_numpy(), co_roll_low_.ffill().to_numpy()  # t_df 에 hl_cnt 만큼 col 만들어야해서 numpy 로 뽑음\n","\n","def backing_future_data(res_df, future_cols, itv_list): # itv 자동 조사 가능 ? (future_work)\n","  \n","  for col_, itv_ in zip(future_cols, itv_list):\n","    back_col_ = 'b1_' + col_\n","    res_df[back_col_] = res_df[col_].shift(to_itvnum(itv_))\n","\n","  return res_df\n","\n","\n","\n","def wave_loc_pct_v2(res_df, config, itv, period):\n","\n","    wave_itv = pd.infer_freq(res_df.index)\n","    wave_period = config.tr_set.wave_period\n","\n","    wave_high_fill_ = res_df['wave_high_fill_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","    wave_low_fill_ = res_df['wave_low_fill_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","\n","    bb_upper_ = res_df['bb_upper_{}{}'.format(itv, period)].to_numpy()\n","    bb_lower_ = res_df['bb_lower_{}{}'.format(itv, period)].to_numpy()\n","\n","    bb_gap = bb_upper_ - bb_lower_\n","    \n","    cu_prime_idx_fill_ = res_df['wave_cu_prime_idx_fill_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","    co_prime_idx_fill_ = res_df['wave_co_prime_idx_fill_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","    cu_prime_bb_gap = get_line(cu_prime_idx_fill_, bb_gap)\n","    co_prime_bb_gap = get_line(co_prime_idx_fill_, bb_gap)\n","\n","    res_df['wave_high_loc_pct_{}{}'.format(wave_itv, wave_period)] = (bb_upper_ - wave_high_fill_) / cu_prime_bb_gap\n","    res_df['wave_low_loc_pct_{}{}'.format(wave_itv, wave_period)] = (wave_low_fill_ - bb_lower_) / co_prime_bb_gap\n","\n","    return res_df\n","\n","def wave_loc_pct(res_df, config, itv, period):\n","\n","    wave_itv = pd.infer_freq(res_df.index)\n","    wave_period = config.tr_set.wave_period\n","\n","    wave_high_fill_ = res_df['wave_high_fill_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","    wave_low_fill_ = res_df['wave_low_fill_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","\n","    bb_upper_ = res_df['bb_upper_{}{}'.format(itv, period)].to_numpy()\n","    bb_lower_ = res_df['bb_lower_{}{}'.format(itv, period)].to_numpy()\n","\n","    bb_gap = bb_upper_ - bb_lower_\n","\n","    res_df['wave_high_loc_pct_{}{}'.format(wave_itv, wave_period)] = (bb_upper_ - wave_high_fill_) / bb_gap\n","    res_df['wave_low_loc_pct_{}{}'.format(wave_itv, wave_period)] = (wave_low_fill_ - bb_lower_) / bb_gap\n","\n","    return res_df\n","\n","\n","def get_terms_info_v2(cu_bool, co_bool, len_df_range):\n","\n","    cu_idx = get_index_bybool(cu_bool, len_df_range)\n","    co_idx = get_index_bybool(co_bool, len_df_range)\n","\n","    cu_fill_idx = fill_arr(cu_idx)\n","    co_fill_idx = fill_arr(co_idx)\n","\n","    notnan_cu_bool = ~np.isnan(cu_idx)\n","    notnan_co_bool = ~np.isnan(co_idx)\n","  \n","    # ------ get co, cu terms_v2 ------ # # 기본은 아래 logic 으로 수행하고, update_hl 도 해당 term 구간의 hl 이 더 작거나 클경우 적용 가능할 것    \n","    valid_cu_bool = notnan_cu_bool * ~np.isnan(co_fill_idx)  # co 와 pair 가 가능한 cu_idx\n","    valid_co_bool = notnan_co_bool * ~np.isnan(cu_fill_idx)\n","\n","    high_terms = np.vstack((co_fill_idx[valid_cu_bool], cu_idx[valid_cu_bool])).T.astype(int)\n","    low_terms = np.vstack((cu_fill_idx[valid_co_bool], co_idx[valid_co_bool])).T.astype(int)\n","\n","    high_terms_cnt = high_terms[:, 1] - high_terms[:, 0] \n","    low_terms_cnt = low_terms[:, 1] - low_terms[:, 0] \n","\n","    # valid_cu_idx = cu_idx[notnan_cu_bool]\n","    # valid_co_idx = co_idx[notnan_co_bool]\n","    valid_cu_idx = cu_idx[valid_cu_bool]\n","    valid_co_idx = co_idx[valid_co_bool]\n","    valid_shift_cu_idx = pd.Series(valid_cu_idx).shift(1).to_numpy()\n","    valid_shift_co_idx = pd.Series(valid_co_idx).shift(1).to_numpy()\n","\n","    cu_idx_term = valid_cu_idx - valid_shift_cu_idx\n","    co_idx_term = valid_co_idx - valid_shift_co_idx\n","\n","    return high_terms, low_terms, high_terms_cnt, low_terms_cnt, cu_idx_term, co_idx_term\n","\n","def get_terms_info(cu_bool, co_bool, len_df_range):\n","\n","    cu_idx = get_index_bybool(cu_bool, len_df_range)\n","    co_idx = get_index_bybool(co_bool, len_df_range)\n","\n","    cu_fill_idx = fill_arr(cu_idx)\n","    co_fill_idx = fill_arr(co_idx)\n","  \n","    # ------ get co, cu terms_v2 ------ # # 기본은 아래 logic 으로 수행하고, update_hl 도 해당 term 구간의 hl 이 더 작거나 클경우 적용 가능할 것\n","    valid_cu_idx = ~np.isnan(cu_idx) * ~np.isnan(co_fill_idx)\n","    valid_co_idx = ~np.isnan(co_idx) * ~np.isnan(cu_fill_idx)\n","\n","    high_terms = np.vstack((co_fill_idx[valid_cu_idx], cu_idx[valid_cu_idx])).T.astype(int)\n","    low_terms = np.vstack((cu_fill_idx[valid_co_idx], co_idx[valid_co_idx])).T.astype(int)\n","\n","    high_terms_cnt = high_terms[:, 1] - high_terms[:, 0] \n","    low_terms_cnt = low_terms[:, 1] - low_terms[:, 0] \n","\n","    return high_terms, low_terms, high_terms_cnt, low_terms_cnt\n","\n","\n","\n","def wave_range_v13(t_df, config, ltf_df=None, term_thresh=2):  # v2 for period1 only\n","\n","  itv = pd.infer_freq(t_df.index)\n","  period1 = config.tr_set.wave_period\n","  # print(period1)\n","\n","  itv_num = to_itvnum(itv)\n","  # print(itv_num)\n","\n","  t_df = donchian_channel_v4(t_df, period1) \n","\n","  dc_base_ = t_df['dc_base_{}{}'.format(itv, period1)].to_numpy()\n","  b1_dc_base_ = t_df['dc_base_{}{}'.format(itv, period1)].shift(itv_num).to_numpy()\n","\n","  len_df = len(t_df)   \n","  len_df_range = np.arange(len_df).astype(int)\n","  # short_open_res = np.ones(len_df)\n","  # long_open_res = np.ones(len_df)\n","\n","  data_cols = ['open', 'high', 'low', 'close']\n","  open, high, low, close = [t_df[col_].to_numpy() for col_ in data_cols]\n","  b1_close = t_df.close.shift(itv_num).to_numpy()\n","  \n","  # ============ modules ============ #  \n","  # ------ define co, cu ------ # <- point missing 과 관련해 정교해아함\n","  cu_bool = ((b1_close > b1_dc_base_) & (dc_base_ > close)) | ((b1_close > dc_base_) & (dc_base_ > close))\n","  co_bool = (b1_close < b1_dc_base_) & (dc_base_ < close) | ((b1_close < dc_base_) & (dc_base_ < close))\n","\n","  cu_idx = get_index_bybool(cu_bool, len_df_range)   # for marking\n","  co_idx = get_index_bybool(co_bool, len_df_range)\n","\n","  high_terms, low_terms, high_terms_cnt, low_terms_cnt = get_terms_info(cu_bool, co_bool, len_df_range)\n","\n","  paired_cu_idx = high_terms[:, 1]\n","  paired_co_idx = low_terms[:, 1]\n","\n","  # ------ 생략 이전 terms' hl ------ #\n","  wave_high_terms_low_ = np.full(len_df, np.nan)\n","  wave_low_terms_high_ = np.full(len_df, np.nan)\n","\n","  wave_high_terms_lows = np.array([low[iin:iout + 1].min() for iin, iout in high_terms])\n","  wave_low_terms_highs = np.array([high[iin:iout + 1].max() for iin, iout in low_terms])  \n","\n","  wave_high_terms_low_[paired_cu_idx] = wave_high_terms_lows\n","  wave_low_terms_high_[paired_co_idx] = wave_low_terms_highs\n","\n","  # ------ 생략된 cu, co 에 대한 2nd pairing 진행 ------ #\n","  cu_bool[high_terms[:, 1][high_terms_cnt <= term_thresh]] = False\n","  co_bool[low_terms[:, 1][low_terms_cnt <= term_thresh]] = False  \n","  high_terms, low_terms, high_terms_cnt, low_terms_cnt = get_terms_info(cu_bool, co_bool, len_df_range)\n","  \n","  paired_cu_idx = high_terms[:, 1]\n","  paired_co_idx = low_terms[:, 1]\n","\n","  # ====== get wave_hl & terms ====== #\n","  wave_high_ = np.full(len_df, np.nan)\n","  wave_low_ = np.full(len_df, np.nan)\n","\n","  wave_highs = np.array([high[iin:iout + 1].max() for iin, iout in high_terms])\n","  wave_lows = np.array([low[iin:iout + 1].min() for iin, iout in low_terms])\n","\n","  wave_high_[paired_cu_idx] = wave_highs\n","  wave_low_[paired_co_idx] = wave_lows\n","\n","  wave_high_fill_ = fill_arr(wave_high_)\n","  wave_low_fill_ = fill_arr(wave_low_)\n","\n","  # wave_high_terms_low_ = np.full(len_df, np.nan)\n","  # wave_low_terms_high_ = np.full(len_df, np.nan)\n","\n","  # wave_high_terms_lows = np.array([low[iin:iout + 1].min() for iin, iout in high_terms])  # for point rejection, Todo, min_max 설정 항상 주의\n","  # wave_low_terms_highs = np.array([high[iin:iout + 1].max() for iin, iout in low_terms])\n","\n","  # wave_high_terms_low_[paired_cu_idx] = wave_high_terms_lows\n","  # wave_low_terms_high_[paired_co_idx] = wave_low_terms_highs\n","\n","  wave_high_terms_cnt_ = np.full(len_df, np.nan)\n","  wave_low_terms_cnt_ = np.full(len_df, np.nan)\n","\n","  wave_high_terms_cnt_[paired_cu_idx] = high_terms_cnt\n","  wave_low_terms_cnt_[paired_co_idx] = low_terms_cnt\n","\n","  wave_high_terms_cnt_fill_ = fill_arr(wave_high_terms_cnt_)\n","  wave_low_terms_cnt_fill_ = fill_arr(wave_low_terms_cnt_)\n","  \n","  # ------ hl_fill 의 prime_idx 를 찾아야함 ------ # \n","  b1_wave_high_fill_ = pd.Series(wave_high_fill_).shift(1).to_numpy()\n","  b1_wave_low_fill_ = pd.Series(wave_low_fill_).shift(1).to_numpy()\n","  wave_high_prime_idx = np.where((wave_high_fill_ != b1_wave_high_fill_) & ~np.isnan(wave_high_fill_), len_df_range, np.nan)\n","  wave_low_prime_idx = np.where((wave_low_fill_ != b1_wave_low_fill_) & ~np.isnan(wave_low_fill_), len_df_range, np.nan)\n","\n","  cu_prime_idx = wave_high_prime_idx\n","  cu_prime_idx_fill_ = fill_arr(cu_prime_idx)\n","\n","  co_prime_idx = wave_low_prime_idx\n","  co_prime_idx_fill_ = fill_arr(wave_low_prime_idx)  \n","\n","  # ============ enlist to df_cols ============ #       \n","  t_df['wave_high_fill_{}{}'.format(itv, period1)] = wave_high_fill_\n","  t_df['wave_low_fill_{}{}'.format(itv, period1)] = wave_low_fill_\n","\n","  t_df['wave_high_terms_cnt_fill_{}{}'.format(itv, period1)] = wave_high_terms_cnt_fill_\n","  t_df['wave_low_terms_cnt_fill_{}{}'.format(itv, period1)] = wave_low_terms_cnt_fill_\n","  t_df['wave_cu_{}{}'.format(itv, period1)] = cu_bool * (wave_high_terms_low_ >= wave_low_fill_)   # co ~ cu’s low 가 wave_low 갱신할 경우 point 에서 제외\n","  t_df['wave_co_{}{}'.format(itv, period1)] = co_bool * (wave_low_terms_high_ <= wave_high_fill_)\n","  t_df['wave_cu_bool_{}{}'.format(itv, period1)] = cu_bool   # temporary, for plot_check\n","  t_df['wave_co_bool_{}{}'.format(itv, period1)] = co_bool\n","  t_df['wave_cu_marker_{}{}'.format(itv, period1)] = get_line(cu_idx, dc_base_)\n","  t_df['wave_co_marker_{}{}'.format(itv, period1)] = get_line(co_idx, dc_base_)\n","\n","  # ------ for roll prev_hl ------ # \n","  t_df['wave_cu_prime_idx_{}{}'.format(itv, period1)] = cu_prime_idx\n","  t_df['wave_co_prime_idx_{}{}'.format(itv, period1)] = co_prime_idx\n","  \n","  # ------ for first_high ------ # \n","  t_df['wave_cu_prime_idx_fill_{}{}'.format(itv, period1)] = cu_prime_idx_fill_\n","  t_df['wave_co_prime_idx_fill_{}{}'.format(itv, period1)] = co_prime_idx_fill_\n","    \n","  if itv != 'T':\n","    assert ltf_df is not None, \"assert ltf_df is not None\"\n","    join_cols = np.arange(-15, 0 ,1).astype(int)  # points & donchian_channels\n","    ltf_df.drop(t_df.columns[join_cols], inplace=True, axis=1, errors='ignore')\n","    try:\n","      ltf_df = ltf_df.join(to_lower_tf_v2(ltf_df, t_df, join_cols), how='inner')\n","    except Exception as e:\n","      print(\"error in wave_range()'s join() :\", e)\n","  else:\n","    ltf_df = t_df    \n","\n","  return ltf_df\n"],"metadata":{"id":"841i4oo2abh-"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["##### dump"],"metadata":{"id":"02DcTVB2cYuR"}},{"cell_type":"code","source":["def wave_range_v14(t_df, config, ltf_df=None, term_thresh1=1, term_thresh2=3):  # v2 for period1 only\n","\n","  itv = pd.infer_freq(t_df.index)\n","  period1 = config.tr_set.wave_period\n","  # print(period1)\n","\n","  itv_num = to_itvnum(itv)\n","  # print(itv_num)\n","\n","  t_df = donchian_channel_v4(t_df, period1) \n","\n","  dc_base_ = t_df['dc_base_{}{}'.format(itv, period1)].to_numpy()\n","  b1_dc_base_ = t_df['dc_base_{}{}'.format(itv, period1)].shift(itv_num).to_numpy()\n","\n","  len_df = len(t_df)   \n","  len_df_range = np.arange(len_df).astype(int)\n","  # short_open_res = np.ones(len_df)\n","  # long_open_res = np.ones(len_df)\n","\n","  data_cols = ['open', 'high', 'low', 'close']\n","  open, high, low, close = [t_df[col_].to_numpy() for col_ in data_cols]\n","  b1_close = t_df.close.shift(itv_num).to_numpy()\n","  \n","  # ============ modules ============ #  \n","  # ------ define co, cu ------ # <- point missing 과 관련해 정교해아함\n","  cu_bool = ((b1_close > b1_dc_base_) & (dc_base_ > close)) | ((b1_close > dc_base_) & (dc_base_ > close))\n","  co_bool = (b1_close < b1_dc_base_) & (dc_base_ < close) | ((b1_close < dc_base_) & (dc_base_ < close))\n","\n","  cu_idx = get_index_bybool(cu_bool, len_df_range)   # for marking\n","  co_idx = get_index_bybool(co_bool, len_df_range)\n","\n","  # high_terms, low_terms, high_terms_cnt, low_terms_cnt = get_terms_info(cu_bool, co_bool, len_df_range)\n","  # high_terms, low_terms, high_terms_cnt, low_terms_cnt, cu_idx_term, co_idx_term = get_terms_info_v2(cu_bool, co_bool, len_df_range)\n","  high_terms, low_terms, high_terms_cnt, low_terms_cnt, cu_idx_term, co_idx_term = get_terms_info_v3(cu_bool, co_bool, len_df_range)\n","\n","  paired_cu_idx = high_terms[:, 1]\n","  paired_co_idx = low_terms[:, 1]\n","\n","  # ------ 생략 이전 terms' hl ------ #\n","  wave_high_terms_low_ = np.full(len_df, np.nan)\n","  wave_low_terms_high_ = np.full(len_df, np.nan)\n","\n","  wave_high_terms_lows = np.array([low[iin:iout + 1].min() for iin, iout in high_terms])\n","  wave_low_terms_highs = np.array([high[iin:iout + 1].max() for iin, iout in low_terms])  \n","\n","  wave_high_terms_low_[paired_cu_idx] = wave_high_terms_lows\n","  wave_low_terms_high_[paired_co_idx] = wave_low_terms_highs\n","\n","  # ------ 생략된 cu, co 에 대한 2nd pairing 진행 ------ #\n","  # cu_bool[high_terms[:, 1][high_terms_cnt <= term_thresh]] = False\n","  # co_bool[low_terms[:, 1][low_terms_cnt <= term_thresh]] = False  \n","  cu_bool[high_terms[:, 1][(high_terms_cnt <= term_thresh1) & (cu_idx_term <= term_thresh2)]] = False\n","  co_bool[low_terms[:, 1][(low_terms_cnt <= term_thresh1) & (co_idx_term <= term_thresh2)]] = False  \n","\n","  # high_terms, low_terms, high_terms_cnt, low_terms_cnt = get_terms_info(cu_bool, co_bool, len_df_range)\n","  # high_terms, low_terms, high_terms_cnt, low_terms_cnt, _, _ = get_terms_info_v2(cu_bool, co_bool, len_df_range)\n","  high_post_terms, low_post_terms, high_terms_cnt, low_terms_cnt, high_prime_terms, low_prime_terms, cu_idx_term, co_idx_term = get_terms_info_v3(cu_bool, co_bool, len_df_range)\n","  \n","  paired_cu_idx = high_prime_terms[:, 1]\n","  paired_co_idx = low_prime_terms[:, 1]\n","\n","  # ====== get wave_hl & terms ====== #\n","  wave_high_ = np.full(len_df, np.nan)\n","  wave_low_ = np.full(len_df, np.nan)\n","\n","  wave_highs = np.array([high[iin:iout + 1].max() for iin, iout in high_terms])\n","  wave_lows = np.array([low[iin:iout + 1].min() for iin, iout in low_terms])\n","\n","  wave_high_[paired_cu_idx] = wave_highs\n","  wave_low_[paired_co_idx] = wave_lows\n","\n","  wave_high_fill_ = fill_arr(wave_high_)\n","  wave_low_fill_ = fill_arr(wave_low_)\n","\n","  # wave_high_terms_low_ = np.full(len_df, np.nan)\n","  # wave_low_terms_high_ = np.full(len_df, np.nan)\n","\n","  # wave_high_terms_lows = np.array([low[iin:iout + 1].min() for iin, iout in high_terms])  # for point rejection, Todo, min_max 설정 항상 주의\n","  # wave_low_terms_highs = np.array([high[iin:iout + 1].max() for iin, iout in low_terms])\n","\n","  # wave_high_terms_low_[paired_cu_idx] = wave_high_terms_lows\n","  # wave_low_terms_high_[paired_co_idx] = wave_low_terms_highs\n","\n","  wave_high_terms_cnt_ = np.full(len_df, np.nan)\n","  wave_low_terms_cnt_ = np.full(len_df, np.nan)\n","\n","  wave_high_terms_cnt_[paired_cu_idx] = high_terms_cnt\n","  wave_low_terms_cnt_[paired_co_idx] = low_terms_cnt\n","\n","  wave_high_terms_cnt_fill_ = fill_arr(wave_high_terms_cnt_)\n","  wave_low_terms_cnt_fill_ = fill_arr(wave_low_terms_cnt_)\n","  \n","  # ------ hl_fill 의 prime_idx 를 찾아야함 ------ # \n","  b1_wave_high_fill_ = pd.Series(wave_high_fill_).shift(1).to_numpy()\n","  b1_wave_low_fill_ = pd.Series(wave_low_fill_).shift(1).to_numpy()\n","  wave_high_prime_idx = np.where((wave_high_fill_ != b1_wave_high_fill_) & ~np.isnan(wave_high_fill_), len_df_range, np.nan)\n","  wave_low_prime_idx = np.where((wave_low_fill_ != b1_wave_low_fill_) & ~np.isnan(wave_low_fill_), len_df_range, np.nan)\n","\n","  cu_prime_idx = wave_high_prime_idx\n","  cu_prime_idx_fill_ = fill_arr(cu_prime_idx)\n","\n","  co_prime_idx = wave_low_prime_idx\n","  co_prime_idx_fill_ = fill_arr(wave_low_prime_idx)  \n","\n","  # ============ enlist to df_cols ============ #       \n","  t_df['wave_high_fill_{}{}'.format(itv, period1)] = wave_high_fill_\n","  t_df['wave_low_fill_{}{}'.format(itv, period1)] = wave_low_fill_\n","\n","  t_df['wave_high_terms_cnt_fill_{}{}'.format(itv, period1)] = wave_high_terms_cnt_fill_\n","  t_df['wave_low_terms_cnt_fill_{}{}'.format(itv, period1)] = wave_low_terms_cnt_fill_\n","  t_df['wave_cu_{}{}'.format(itv, period1)] = cu_bool * (wave_high_terms_low_ >= wave_low_fill_)   # co ~ cu’s low 가 wave_low 갱신할 경우 point 에서 제외\n","  t_df['wave_co_{}{}'.format(itv, period1)] = co_bool * (wave_low_terms_high_ <= wave_high_fill_)\n","  t_df['wave_cu_bool_{}{}'.format(itv, period1)] = cu_bool   # temporary, for plot_check\n","  t_df['wave_co_bool_{}{}'.format(itv, period1)] = co_bool\n","  t_df['wave_cu_marker_{}{}'.format(itv, period1)] = get_line(cu_idx, dc_base_)\n","  t_df['wave_co_marker_{}{}'.format(itv, period1)] = get_line(co_idx, dc_base_)\n","\n","  # ------ for roll prev_hl ------ # \n","  t_df['wave_cu_prime_idx_{}{}'.format(itv, period1)] = cu_prime_idx\n","  t_df['wave_co_prime_idx_{}{}'.format(itv, period1)] = co_prime_idx\n","  \n","  # ------ for first_high ------ # \n","  t_df['wave_cu_prime_idx_fill_{}{}'.format(itv, period1)] = cu_prime_idx_fill_\n","  t_df['wave_co_prime_idx_fill_{}{}'.format(itv, period1)] = co_prime_idx_fill_\n","    \n","  if itv != 'T':\n","    assert ltf_df is not None, \"assert ltf_df is not None\"\n","    join_cols = np.arange(-15, 0 ,1).astype(int)  # points & donchian_channels\n","    ltf_df.drop(t_df.columns[join_cols], inplace=True, axis=1, errors='ignore')\n","    try:\n","      ltf_df = ltf_df.join(to_lower_tf_v2(ltf_df, t_df, join_cols), how='inner')\n","    except Exception as e:\n","      print(\"error in wave_range()'s join() :\", e)\n","  else:\n","    ltf_df = t_df    \n","\n","  return ltf_df\n","  \n","def wave_range_v13(t_df, config, ltf_df=None, term_thresh=2):  # v2 for period1 only\n","\n","  itv = pd.infer_freq(t_df.index)\n","  period1 = config.tr_set.wave_period\n","  # print(period1)\n","\n","  itv_num = to_itvnum(itv)\n","  # print(itv_num)\n","\n","  t_df = donchian_channel_v4(t_df, period1) \n","\n","  dc_base_ = t_df['dc_base_{}{}'.format(itv, period1)].to_numpy()\n","  b1_dc_base_ = t_df['dc_base_{}{}'.format(itv, period1)].shift(itv_num).to_numpy()\n","\n","  len_df = len(t_df)   \n","  len_df_range = np.arange(len_df).astype(int)\n","  # short_open_res = np.ones(len_df)\n","  # long_open_res = np.ones(len_df)\n","\n","  data_cols = ['open', 'high', 'low', 'close']\n","  open, high, low, close = [t_df[col_].to_numpy() for col_ in data_cols]\n","  b1_close = t_df.close.shift(itv_num).to_numpy()\n","  \n","  # ============ modules ============ #  \n","  # ------ define co, cu ------ # <- point missing 과 관련해 정교해아함\n","  cu_bool = ((b1_close > b1_dc_base_) & (dc_base_ > close)) | ((b1_close > dc_base_) & (dc_base_ > close))\n","  co_bool = (b1_close < b1_dc_base_) & (dc_base_ < close) | ((b1_close < dc_base_) & (dc_base_ < close))\n","\n","  cu_idx = get_index_bybool(cu_bool, len_df_range)   # for marking\n","  co_idx = get_index_bybool(co_bool, len_df_range)\n","\n","  high_terms, low_terms, high_terms_cnt, low_terms_cnt = get_terms_info(cu_bool, co_bool, len_df_range)\n","\n","  wave_high_terms_low_ = np.full(len_df, np.nan)\n","  wave_low_terms_high_ = np.full(len_df, np.nan)\n","\n","  wave_high_terms_lows = np.array([low[iin:iout + 1].min() for iin, iout in high_terms])  # 생략 이전 terms' hl\n","  wave_low_terms_highs = np.array([high[iin:iout + 1].max() for iin, iout in low_terms])  \n","\n","  paired_cu_idx = high_terms[:, 1]\n","  paired_co_idx = low_terms[:, 1]\n","\n","  wave_high_terms_low_[paired_cu_idx] = wave_high_terms_lows\n","  wave_low_terms_high_[paired_co_idx] = wave_low_terms_highs\n","\n","  # ------ add update_hl ------ #\n","  wave_high_ = np.full(len_df, np.nan)\n","  wave_low_ = np.full(len_df, np.nan)\n","\n","  wave_low_[paired_cu_idx] = wave_high_terms_lows  \n","  wave_high_[paired_co_idx] = wave_low_terms_highs\n","\n","  # ------ 생략된 cu, co 에 대한 2nd pairing 진행 ------ #\n","  cu_bool[high_terms[:, 1][high_terms_cnt <= term_thresh]] = False\n","  co_bool[low_terms[:, 1][low_terms_cnt <= term_thresh]] = False  \n","  high_terms, low_terms, high_terms_cnt, low_terms_cnt = get_terms_info(cu_bool, co_bool, len_df_range)\n","  \n","  paired_cu_idx = high_terms[:, 1]\n","  paired_co_idx = low_terms[:, 1]\n","\n","  # ====== get wave_hl & terms ====== #\n","  wave_highs = np.array([high[iin:iout + 1].max() for iin, iout in high_terms])\n","  wave_lows = np.array([low[iin:iout + 1].min() for iin, iout in low_terms])\n","\n","  wave_high_[paired_cu_idx] = wave_highs\n","  wave_low_[paired_co_idx] = wave_lows\n","\n","  wave_high_fill_ = fill_arr(wave_high_)\n","  wave_low_fill_ = fill_arr(wave_low_)\n","\n","  # wave_high_terms_low_ = np.full(len_df, np.nan)\n","  # wave_low_terms_high_ = np.full(len_df, np.nan)\n","\n","  # wave_high_terms_lows = np.array([low[iin:iout + 1].min() for iin, iout in high_terms])  # for point rejection, Todo, min_max 설정 항상 주의\n","  # wave_low_terms_highs = np.array([high[iin:iout + 1].max() for iin, iout in low_terms])\n","\n","  # wave_high_terms_low_[paired_cu_idx] = wave_high_terms_lows\n","  # wave_low_terms_high_[paired_co_idx] = wave_low_terms_highs\n","\n","  wave_high_terms_cnt_ = np.full(len_df, np.nan)\n","  wave_low_terms_cnt_ = np.full(len_df, np.nan)\n","\n","  wave_high_terms_cnt_[paired_cu_idx] = high_terms_cnt\n","  wave_low_terms_cnt_[paired_co_idx] = low_terms_cnt\n","\n","  wave_high_terms_cnt_fill_ = fill_arr(wave_high_terms_cnt_)\n","  wave_low_terms_cnt_fill_ = fill_arr(wave_low_terms_cnt_)\n","  \n","  # ------ hl_fill 의 prime_idx 를 찾아야함 ------ # \n","  b1_wave_high_fill_ = pd.Series(wave_high_fill_).shift(1).to_numpy()\n","  b1_wave_low_fill_ = pd.Series(wave_low_fill_).shift(1).to_numpy()\n","  wave_high_prime_idx = np.where((wave_high_fill_ != b1_wave_high_fill_) & ~np.isnan(wave_high_fill_), len_df_range, np.nan)\n","  wave_low_prime_idx = np.where((wave_low_fill_ != b1_wave_low_fill_) & ~np.isnan(wave_low_fill_), len_df_range, np.nan)\n","\n","  cu_prime_idx = wave_high_prime_idx\n","  cu_prime_idx_fill_ = fill_arr(cu_prime_idx)\n","\n","  co_prime_idx = wave_low_prime_idx\n","  co_prime_idx_fill_ = fill_arr(wave_low_prime_idx)  \n","\n","  # ============ enlist to df_cols ============ #       \n","  t_df['wave_high_fill_{}{}'.format(itv, period1)] = wave_high_fill_\n","  t_df['wave_low_fill_{}{}'.format(itv, period1)] = wave_low_fill_\n","\n","  t_df['wave_high_terms_cnt_fill_{}{}'.format(itv, period1)] = wave_high_terms_cnt_fill_\n","  t_df['wave_low_terms_cnt_fill_{}{}'.format(itv, period1)] = wave_low_terms_cnt_fill_\n","  t_df['wave_cu_{}{}'.format(itv, period1)] = cu_bool * (wave_high_terms_low_ >= wave_low_fill_)   # co ~ cu’s low 가 wave_low 갱신할 경우 point 에서 제외\n","  t_df['wave_co_{}{}'.format(itv, period1)] = co_bool * (wave_low_terms_high_ <= wave_high_fill_)\n","  t_df['wave_cu_bool_{}{}'.format(itv, period1)] = cu_bool   # temporary, for plot_check\n","  t_df['wave_co_bool_{}{}'.format(itv, period1)] = co_bool\n","  t_df['wave_cu_marker_{}{}'.format(itv, period1)] = get_line(cu_idx, dc_base_)\n","  t_df['wave_co_marker_{}{}'.format(itv, period1)] = get_line(co_idx, dc_base_)\n","\n","  # ------ for roll prev_hl ------ # \n","  t_df['wave_cu_prime_idx_{}{}'.format(itv, period1)] = cu_prime_idx\n","  t_df['wave_co_prime_idx_{}{}'.format(itv, period1)] = co_prime_idx\n","  \n","  # ------ for first_high ------ # \n","  t_df['wave_cu_prime_idx_fill_{}{}'.format(itv, period1)] = cu_prime_idx_fill_\n","  t_df['wave_co_prime_idx_fill_{}{}'.format(itv, period1)] = co_prime_idx_fill_\n","    \n","  if itv != 'T':\n","    assert ltf_df is not None, \"assert ltf_df is not None\"\n","    join_cols = np.arange(-15, 0 ,1).astype(int)  # points & donchian_channels\n","    ltf_df.drop(t_df.columns[join_cols], inplace=True, axis=1, errors='ignore')\n","    try:\n","      ltf_df = ltf_df.join(to_lower_tf_v2(ltf_df, t_df, join_cols), how='inner')\n","    except Exception as e:\n","      print(\"error in wave_range()'s join() :\", e)\n","  else:\n","    ltf_df = t_df    \n","\n","  return ltf_df\n","\n","\n","def wave_range_v12(t_df, config, ltf_df=None):  # v2 for period1 only\n","\n","  itv = pd.infer_freq(t_df.index)\n","  period1 = config.tr_set.wave_period\n","  # print(period1)\n","\n","  itv_num = to_itvnum(itv)\n","  # print(itv_num)\n","\n","  t_df = donchian_channel_v4(t_df, period1) \n","\n","  dc_base_ = t_df['dc_base_{}{}'.format(itv, period1)].to_numpy()\n","  b1_dc_base_ = t_df['dc_base_{}{}'.format(itv, period1)].shift(itv_num).to_numpy()\n","\n","  len_df = len(t_df)   \n","  len_df_range = np.arange(len_df).astype(int)\n","  # short_open_res = np.ones(len_df)\n","  # long_open_res = np.ones(len_df)\n","\n","  data_cols = ['open', 'high', 'low', 'close']\n","  open, high, low, close = [t_df[col_].to_numpy() for col_ in data_cols]\n","  b1_close = t_df.close.shift(itv_num).to_numpy()\n","  \n","  # ============ modules ============ #  \n","  # ------ define co, cu ------ # <- point missing 과 관련해 정교해아함\n","  cu_bool = ((b1_close > b1_dc_base_) & (dc_base_ > close)) | ((b1_close > dc_base_) & (dc_base_ > close))\n","  co_bool = (b1_close < b1_dc_base_) & (dc_base_ < close) | ((b1_close < dc_base_) & (dc_base_ < close))\n","\n","  # Todo, term 조정은 이 line 에서 해야할 것\n","  b1_cu_bool = pd.Series(cu_bool).shift(1).to_numpy()\n","  b1_co_bool = pd.Series(co_bool).shift(1).to_numpy()\n","\n","  cu_bool *= ~b1_co_bool.astype(bool)  # short_term point 생략\n","  co_bool *= ~b1_cu_bool.astype(bool)\n","\n","  cu_idx = get_index_bybool(cu_bool, len_df_range)\n","  co_idx = get_index_bybool(co_bool, len_df_range)\n","\n","  cu_fill_idx = fill_arr(cu_idx)\n","  co_fill_idx = fill_arr(co_idx)\n","\n","  # ------ get co, cu terms ------ #\n","  high_bool = cu_fill_idx < co_fill_idx  # 이렇게 해야 high_terms[:, 1] 이 cu_idx 가 나옴\n","  low_bool = co_fill_idx < cu_fill_idx\n","\n","  high_terms_vec = get_index_bybool(high_bool, len_df_range)\n","  low_terms_vec = get_index_bybool(low_bool, len_df_range) # -> low_terms\n","\n","  high_terms_list = using_clump(high_terms_vec)\n","  low_terms_list = using_clump(low_terms_vec)\n","\n","  high_terms = np.array([[terms.min(), terms.max() + 1] for terms in high_terms_list])\n","  low_terms = np.array([[terms.min(), terms.max() + 1] for terms in low_terms_list])\n","\n","  high_terms_cnt = high_terms[:, 1] - high_terms[:, 0] \n","  low_terms_cnt = low_terms[:, 1] - low_terms[:, 0] \n","\n","  wave_highs = np.array([high[iin:iout + 1].max() for iin, iout in high_terms])\n","  wave_lows = np.array([low[iin:iout + 1].min() for iin, iout in low_terms])\n","\n","  # ------ get valid_idx range (inner len_df) ------ #\n","  paired_cu_idx = high_terms[:, 1]\n","  paired_co_idx = low_terms[:, 1]\n","\n","  valid_cu_bool = paired_cu_idx < len_df\n","  valid_co_bool = paired_co_idx < len_df\n","\n","  paired_cu_valid_idx = paired_cu_idx[valid_cu_bool]\n","  paired_co_valid_idx = paired_co_idx[valid_co_bool]\n","\n","  # ------ get wave_hl & terms ------ #\n","  wave_high_ = np.full(len_df, np.nan)\n","  wave_low_ = np.full(len_df, np.nan)\n","\n","  wave_high_[paired_cu_valid_idx] = wave_highs[valid_cu_bool]\n","  wave_low_[paired_co_valid_idx] = wave_lows[valid_co_bool]\n","\n","  wave_high_fill_ = fill_arr(wave_high_)\n","  wave_low_fill_ = fill_arr(wave_low_)\n","\n","  wave_high_terms_cnt_ = np.full(len_df, np.nan)\n","  wave_low_terms_cnt_ = np.full(len_df, np.nan)\n","\n","  wave_high_terms_cnt_[paired_cu_valid_idx] = high_terms_cnt[valid_cu_bool]\n","  wave_low_terms_cnt_[paired_co_valid_idx] = low_terms_cnt[valid_co_bool]\n","\n","  wave_high_terms_cnt_fill_ = fill_arr(wave_high_terms_cnt_)\n","  wave_low_terms_cnt_fill_ = fill_arr(wave_low_terms_cnt_)\n","\n","  # ------ check update high & low (occurs by point missing) ------ # \n","  co_prime_idx = np.full(len_df, np.nan)\n","  co_prime_idx[paired_co_valid_idx] = paired_co_valid_idx\n","  co_prime_idx_fill_ = fill_arr(co_prime_idx)\n","  # valid_idx = co_idx > co_prime_idx_fill_\n","  valid_idx = cu_idx > co_prime_idx_fill_\n","\n","  # update_low[valid_idx] = [low[iin:iout + 1].min() for iin, iout in zip(cu_prime_idx_fill_[valid_idx].astype(int), cu_idx[valid_idx].astype(int))]  # include open low\n","  # 1. 잘 생각해보면, cu_idx 에는 co_prime_idx_fill_ 을 사용하는게 맞음\n","  #   a. cu_idx 에 달려있는 low 가 co_prime_idx_fill_ 기준이니까\n","  # update_low = np.full(len_df, np.nan)\n","  # update_low[valid_idx] = [low[iin:iout + 1].min() for iin, iout in zip(co_prime_idx_fill_[valid_idx].astype(int), cu_idx[valid_idx].astype(int))]   # high 아닌가\n","  \n","  update_high = np.full(len_df, np.nan)\n","  update_high[valid_idx] = [high[iin:iout + 1].max() for iin, iout in zip(co_prime_idx_fill_[valid_idx].astype(int), cu_idx[valid_idx].astype(int))]   # high 아닌가\n","  \n","  cu_prime_idx = np.full(len_df, np.nan)\n","  cu_prime_idx[paired_cu_valid_idx] = paired_cu_valid_idx\n","  cu_prime_idx_fill_ = fill_arr(cu_prime_idx)\n","  valid_idx = co_idx > cu_prime_idx_fill_\n","\n","  # update_high = np.full(len_df, np.nan)\n","  # update_high[valid_idx] = [high[iin:iout + 1].max() for iin, iout in zip(cu_prime_idx_fill_[valid_idx].astype(int), co_idx[valid_idx].astype(int))]\n","\n","  update_low = np.full(len_df, np.nan)\n","  update_low[valid_idx] = [low[iin:iout + 1].min() for iin, iout in zip(cu_prime_idx_fill_[valid_idx].astype(int), co_idx[valid_idx].astype(int))]\n","\n","  # ============ enlist to df_cols ============ #       \n","  t_df['wave_high_fill_{}{}'.format(itv, period1)] = wave_high_fill_\n","  t_df['wave_low_fill_{}{}'.format(itv, period1)] = wave_low_fill_\n","\n","  t_df['wave_update_high_fill_{}{}'.format(itv, period1)] = update_high\n","  t_df['wave_update_low_fill_{}{}'.format(itv, period1)] = update_low\n","\n","  t_df['wave_high_terms_cnt_fill_{}{}'.format(itv, period1)] = wave_high_terms_cnt_fill_\n","  t_df['wave_low_terms_cnt_fill_{}{}'.format(itv, period1)] = wave_low_terms_cnt_fill_\n","  t_df['wave_cu_{}{}'.format(itv, period1)] = cu_bool * ~(update_low < wave_low_fill_)   # Todo, 이곳 다시 한번 확인 (old, point_missing 으로 인한 low 갱신 회피)\n","  t_df['wave_co_{}{}'.format(itv, period1)] = co_bool * ~(update_high > wave_high_fill_)\n","  t_df['wave_cu_marker_{}{}'.format(itv, period1)] = get_line(cu_idx, dc_base_)\n","  t_df['wave_co_marker_{}{}'.format(itv, period1)] = get_line(co_idx, dc_base_)\n","\n","  # ------ for roll prev_hl ------ # \n","  t_df['wave_cu_prime_idx_{}{}'.format(itv, period1)] = cu_prime_idx\n","  t_df['wave_co_prime_idx_{}{}'.format(itv, period1)] = co_prime_idx\n","  \n","  # ------ for first_high ------ # \n","  t_df['wave_cu_prime_idx_fill_{}{}'.format(itv, period1)] = cu_prime_idx_fill_\n","  t_df['wave_co_prime_idx_fill_{}{}'.format(itv, period1)] = co_prime_idx_fill_\n","    \n","  if itv != 'T':\n","    assert ltf_df is not None, \"assert ltf_df is not None\"\n","    join_cols = np.arange(-17, 0 ,1).astype(int)  # points & donchian_channels\n","    ltf_df.drop(t_df.columns[join_cols], inplace=True, axis=1, errors='ignore')\n","    try:\n","      ltf_df = ltf_df.join(to_lower_tf_v2(ltf_df, t_df, join_cols), how='inner')\n","    except Exception as e:\n","      print(\"error in wave_range()'s join() :\", e)\n","  else:\n","    ltf_df = t_df    \n","\n","  return ltf_df\n","\n","def wave_range_v11(t_df, config, ltf_df=None):  # v2 for period1 only\n","\n","  itv = pd.infer_freq(t_df.index)\n","  period1 = config.tr_set.wave_period\n","  # print(period1)\n","\n","  itv_num = to_itvnum(itv)\n","  # print(itv_num)\n","\n","  t_df = donchian_channel_v4(t_df, period1) \n","\n","  dc_base_ = t_df['dc_base_{}{}'.format(itv, period1)].to_numpy()\n","  b1_dc_base_ = t_df['dc_base_{}{}'.format(itv, period1)].shift(itv_num).to_numpy()\n","\n","  len_df = len(t_df)   \n","  len_df_range = np.arange(len_df).astype(int)\n","  # short_open_res = np.ones(len_df)\n","  # long_open_res = np.ones(len_df)\n","\n","  data_cols = ['open', 'high', 'low', 'close']\n","  open, high, low, close = [t_df[col_].to_numpy() for col_ in data_cols]\n","  b1_close = t_df.close.shift(itv_num).to_numpy()\n","  \n","  # ============ modules ============ #  \n","  # ------ define co, cu ------ # <- point missing 과 관련해 정교해아함\n","  cu_bool = ((b1_close > b1_dc_base_) & (dc_base_ > close)) #| ((b1_close > dc_base_) & (dc_base_ > close))\n","  co_bool = (b1_close < b1_dc_base_) & (dc_base_ < close) #| ((b1_close < dc_base_) & (dc_base_ < close))\n","  cu_idx = get_index_bybool(cu_bool, len_df_range)\n","  co_idx = get_index_bybool(co_bool, len_df_range)\n","\n","  cu_fill_idx = fill_arr(cu_idx)\n","  co_fill_idx = fill_arr(co_idx)\n","\n","  # ------ get co, cu terms ------ #\n","  high_bool = cu_fill_idx < co_fill_idx\n","  low_bool = co_fill_idx < cu_fill_idx\n","\n","  high_terms_vec = get_index_bybool(high_bool, len_df_range)\n","  low_terms_vec = get_index_bybool(low_bool, len_df_range) # -> low_terms\n","\n","  high_terms_list = using_clump(high_terms_vec)\n","  low_terms_list = using_clump(low_terms_vec)\n","\n","  high_terms = np.array([[terms.min(), terms.max() + 1] for terms in high_terms_list])\n","  low_terms = np.array([[terms.min(), terms.max() + 1] for terms in low_terms_list])\n","\n","  high_terms_cnt = high_terms[:, 1] - high_terms[:, 0] \n","  low_terms_cnt = low_terms[:, 1] - low_terms[:, 0] \n","\n","  wave_highs = np.array([high[iin:iout + 1].max() for iin, iout in high_terms])\n","  wave_lows = np.array([low[iin:iout + 1].min() for iin, iout in low_terms])\n","\n","  # ------ get valid_idx range (inner len_df) ------ #\n","  paired_cu_idx = high_terms[:, 1]\n","  paired_co_idx = low_terms[:, 1]\n","\n","  valid_cu_bool = paired_cu_idx < len_df\n","  valid_co_bool = paired_co_idx < len_df\n","\n","  paired_cu_valid_idx = paired_cu_idx[valid_cu_bool]\n","  paired_co_valid_idx = paired_co_idx[valid_co_bool]\n","\n","  # ------ get wave_hl & terms ------ #\n","  wave_high_ = np.full(len_df, np.nan)\n","  wave_low_ = np.full(len_df, np.nan)\n","\n","  wave_high_[paired_cu_valid_idx] = wave_highs[valid_cu_bool]\n","  wave_low_[paired_co_valid_idx] = wave_lows[valid_co_bool]\n","\n","  wave_high_fill_ = fill_arr(wave_high_)\n","  wave_low_fill_ = fill_arr(wave_low_)\n","\n","  wave_high_terms_cnt_ = np.full(len_df, np.nan)\n","  wave_low_terms_cnt_ = np.full(len_df, np.nan)\n","\n","  wave_high_terms_cnt_[paired_cu_valid_idx] = high_terms_cnt[valid_cu_bool]\n","  wave_low_terms_cnt_[paired_co_valid_idx] = low_terms_cnt[valid_co_bool]\n","\n","  wave_high_terms_cnt_fill_ = fill_arr(wave_high_terms_cnt_)\n","  wave_low_terms_cnt_fill_ = fill_arr(wave_low_terms_cnt_)\n","\n","  # ------ check update high & low (occurs by point missing) ------ # \n","  co_prime_idx = np.full(len_df, np.nan)\n","  co_prime_idx[paired_co_valid_idx] = paired_co_valid_idx\n","  co_prime_idx_fill_ = fill_arr(co_prime_idx)\n","  # valid_idx = co_idx > co_prime_idx_fill_\n","  valid_idx = cu_idx > co_prime_idx_fill_\n","\n","  update_low = np.full(len_df, np.nan)\n","  # update_low[valid_idx] = [low[iin:iout + 1].min() for iin, iout in zip(cu_prime_idx_fill_[valid_idx].astype(int), cu_idx[valid_idx].astype(int))]  # include open low\n","  # 1. 잘 생각해보면, cu_idx 에는 co_prime_idx_fill_ 을 사용하는게 맞음\n","  #   a. cu_idx 에 달려있는 low 가 co_prime_idx_fill_ 기준이니까\n","  update_low[valid_idx] = [low[iin:iout + 1].min() for iin, iout in zip(co_prime_idx_fill_[valid_idx].astype(int), cu_idx[valid_idx].astype(int))]\n","  \n","  cu_prime_idx = np.full(len_df, np.nan)\n","  cu_prime_idx[paired_cu_valid_idx] = paired_cu_valid_idx\n","  cu_prime_idx_fill_ = fill_arr(cu_prime_idx)\n","  valid_idx = co_idx > cu_prime_idx_fill_\n","\n","  update_high = np.full(len_df, np.nan)\n","  update_high[valid_idx] = [high[iin:iout + 1].max() for iin, iout in zip(cu_prime_idx_fill_[valid_idx].astype(int), co_idx[valid_idx].astype(int))]\n","\n","  # ============ enlist to df_cols ============ #       \n","  t_df['wave_high_fill_{}{}'.format(itv, period1)] = wave_high_fill_\n","  t_df['wave_low_fill_{}{}'.format(itv, period1)] = wave_low_fill_\n","  t_df['wave_high_terms_cnt_fill_{}{}'.format(itv, period1)] = wave_high_terms_cnt_fill_\n","  t_df['wave_low_terms_cnt_fill_{}{}'.format(itv, period1)] = wave_low_terms_cnt_fill_\n","  t_df['wave_cu_{}{}'.format(itv, period1)] = cu_bool * ~(update_low < wave_low_fill_)   # point_missing 으로 인한 low 갱신 회피\n","  t_df['wave_co_{}{}'.format(itv, period1)] = co_bool * ~(update_high > wave_high_fill_)\n","  t_df['wave_cu_marker_{}{}'.format(itv, period1)] = get_line(cu_idx, dc_base_)\n","  t_df['wave_co_marker_{}{}'.format(itv, period1)] = get_line(co_idx, dc_base_)\n","\n","  # ------ for roll prev_hl ------ # \n","  t_df['wave_cu_prime_idx_{}{}'.format(itv, period1)] = cu_prime_idx\n","  t_df['wave_co_prime_idx_{}{}'.format(itv, period1)] = co_prime_idx\n","  \n","  # ------ for first_high ------ # \n","  t_df['wave_cu_prime_idx_fill_{}{}'.format(itv, period1)] = cu_prime_idx_fill_\n","  t_df['wave_co_prime_idx_fill_{}{}'.format(itv, period1)] = co_prime_idx_fill_\n","    \n","  if itv != 'T':\n","    assert ltf_df is not None, \"assert ltf_df is not None\"\n","    join_cols = np.arange(-17, 0 ,1).astype(int)  # points & donchian_channels\n","    ltf_df.drop(t_df.columns[join_cols], inplace=True, axis=1, errors='ignore')\n","    try:\n","      ltf_df = ltf_df.join(to_lower_tf_v2(ltf_df, t_df, join_cols), how='inner')\n","    except Exception as e:\n","      print(\"error in wave_range()'s join() :\", e)\n","  else:\n","    ltf_df = t_df    \n","\n","  return ltf_df\n"],"metadata":{"id":"YoZpr7lDn7z-"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"1MNVIExLULhJ"},"source":["#### legacy"]},{"cell_type":"code","source":[""],"metadata":{"id":"1eZov-szzNuB"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"EOXQbXixiQcK"},"source":["##### volume_profile"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"7pFuazxpgx9B"},"outputs":[],"source":["session_df = res_df_.iloc[-1440:] # 0.159 -> 0.024 (14400 -> 1440)\n","volume = session_df['volume'].to_numpy()\n","close = session_df['close'].to_numpy()\n","# px.histogram(session_df, x='volume', y='close', nbins=150, orientation='h').show()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"SoPJkiyKiXLM"},"outputs":[],"source":["kde_factor = 0.05\n","num_samples = 100\n","\n","start_0 = time.time()\n","kde = stats.gaussian_kde(close,weights=volume,bw_method=kde_factor)\n","kdx = np.linspace(close.min(),close.max(),num_samples)\n","kdy = kde(kdx)\n","ticks_per_sample = (kdx.max() - kdx.min()) / num_samples\n","print(\"ticks_per_sample :\", ticks_per_sample)  # sample 당 가격\n","print(\"kdy elapsed_time :\", time.time() - start_0)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"mK2jBddAxJ14"},"outputs":[],"source":["peaks,_ = signal.find_peaks(kdy)\n","pkx = kdx[peaks]\n","pky = kdy[peaks]\n","\n","plt.figure(figsize=(10,5))\n","# plt.hist(close, bins=num_samples, weights=volume, alpha=.8, color='#1592e6')\n","# plt.plot(kdx, kdy, color='white')\n","# plt.plot(pkx, pky, 'bo', color='yellow')\n","plt.plot(kdy, kdx, color='white')\n","plt.plot(pky, pkx, 'bo', color='yellow')\n","plt.show()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"a8tpQZCy0SO1"},"outputs":[],"source":["pkx"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"gfA946s8UgS0"},"outputs":[],"source":["# ------ vp 의 indi. 화가 필요함 -> point 설정 ------ #\n","# 1. 4 level 은 미리 만들어놓는게 맞는걸로 보임 -> 추종하는 function 이 많음 (utils_tr, ep_out ...)\n","#   a. 4 level 에 국한하는게 아니라, 모든 peaks 에 대해 levels 설정\n","#   b. 각 session 별로 peak_list 가 주어질 것\n","#     i. prev_data 사용해야하는점 주의 (session vp 는 future_data)"]},{"cell_type":"markdown","metadata":{"id":"3T-9FwWFXR4f"},"source":["###### prominence_info"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"RmBt2agljClE"},"outputs":[],"source":["start_0 = time.time()\n","min_prom = kdy.max() * 0.0\n","pipsize = 0.01\n","max_width_pips = 20\n","# width_range=(1, max_width_pips * pipsize / ticks_per_sample)\n","width_range= max_width_pips * pipsize / ticks_per_sample\n","peaks, peak_props = signal.find_peaks(kdy, prominence=min_prom, width=width_range)\n","\n","peak_x = kdx[peaks]\n","peak_y = kdy[peaks]\n","# ------ prominence lines ------ #\n","left_base = peak_props['left_bases']\n","right_base = peak_props['right_bases']\n","line_x = peak_x\n","line_y0 = peak_y\n","line_y1 = peak_y # - peak_props['prominences']\n","print(\"prom_line elapsed_time :\", time.time() - start_0)\n","\n","\n","for x, y0, y1 in zip(line_x, line_y0, line_y1):\n","    fig.add_shape(type='line',\n","        xref='x', yref='y',\n","        # x0=x, y0=y0, x1=x, y1=y1,\n","        x0=x, y0=0, x1=x, y1=y1,\n","        line=dict(\n","            color='red',\n","            width=2,\n","        )\n","    )\n","\n","# ------ width ------ #\n","left_ips = peak_props['left_ips']\n","right_ips = peak_props['right_ips']\n","# width_x0 = kdx.min() + (left_ips * ticks_per_sample)\n","# width_x1 = kdx.min() + (right_ips * ticks_per_sample)\n","width_x0 = kdx.min() + (left_base * ticks_per_sample)\n","width_x1 = kdx.min() + (right_base * ticks_per_sample)\n","\n","# int_from = kdx.min() + (left_base * ticks_per_sample)\n","# int_to = kdx.min() + (right_base * ticks_per_sample)\n","# [kde.integrate_box_1d(x0, x1) for x0, x1 in zip(int_from, int_to)]\n","\n","width_y = peak_props['width_heights']\n","\n","for x0, x1, y in zip(width_x0, width_x1, width_y):\n","    fig.add_shape(type='line',\n","        xref='x', yref='y',\n","        x0=x0, y0=y, x1=x1, y1=y,\n","        line=dict(\n","            color='red',\n","            width=2,\n","        )\n","    )\n","fig.show()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"zqj944n-WzyZ"},"outputs":[],"source":["# peaks  # ndarray\n","# kdx  # ndarray\n","# kdy  # ndarray\n","# kdx.min()\n","left_base * ticks_per_sample\n","# volume"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Rvqv0RGojo9h"},"outputs":[],"source":["print(peak_y)\n","print(peak_props['prominences'])\n","peak_props"]},{"cell_type":"markdown","metadata":{"id":"c2729DJ6h720"},"source":["##### imb."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Rucj-iepiR_-"},"outputs":[],"source":["t_df = res_df_.iloc[-120:-100]\n","a_data = t_df.to_numpy()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ktm1aB-Bh7GH"},"outputs":[],"source":["plt.style.use(['dark_background', 'fast'])\n","fig = plt.figure(figsize=(15, 9))\n","nrows, ncols = 1, 1\n","gs = gridspec.GridSpec(nrows=nrows,  # row 부터 index 채우고 col 채우는 순서임 (gs_idx)\n","                        ncols=ncols\n","                        # height_ratios=[3, 1]\n","                        )\n","\n","ax = fig.add_subplot(gs[0])\n","\n","# ------ candles ------ #\n","candle_plot(a_data[:, col_idx_dict['ohlc_col_idxs']], ax, alpha=1.0, wickwidth=1.0)\n","_ = [step_col_plot(a_data[:, params[0]], *params[1:]) for params in col_idx_dict['step_col_info']]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"jMQBhQ1Ljt5Y"},"outputs":[],"source":["def imb_ratio_v4(df, itv):\n","\n","  itv_num = to_itvnum(itv)\n","\n","  close = df['close_{}'.format(itv)].to_numpy()\n","  open = df['open_{}'.format(itv)].to_numpy()\n","\n","  b1_close = df['close_{}'.format(itv)].shift(itv_num).to_numpy()\n","  b1_open = df['open_{}'.format(itv)].shift(itv_num).to_numpy()\n","  b1_high = df['high_{}'.format(itv)].shift(itv_num).to_numpy()\n","  b1_low = df['low_{}'.format(itv)].shift(itv_num).to_numpy()\n","\n","  body_range = abs(close - open)\n","  b1_body_range = abs(b1_close - b1_open)\n","\n","  df['body_rel_ratio_{}'.format(itv)] = body_range / b1_body_range\n","\n","  short_body_range = np.where(close <= b1_low, body_range, b1_body_range)\n","  long_body_range = np.where(close >= b1_high, body_range, b1_body_range)\n","\n","  # 추후에 통계 측정해야함 -> bir 에 따른 개별 trader 의 epout / tpep 이라던가 => short 에 양봉은 취급안함 (why use np.nan)\n","  df['short_ir_{}'.format(itv)] = np.where(close < open, (b1_low - close) / short_body_range, np.nan) # close < open & close < b1_low\n","  df['long_ir_{}'.format(itv)] = np.where(close > open, (close - b1_high) / long_body_range, np.nan) # close > open & close > b1_high\n","\n","  return"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"I1Vq_BiKpY3P"},"outputs":[],"source":["def imb_ratio_v3(df, itv):\n","\n","  itv_num = to_itvnum(itv)\n","\n","  # high = df['high_{}'.format(itv)].to_numpy()\n","  # low = df['low_{}'.format(itv)].to_numpy()\n","  # candle_range = high - low\n","\n","  close = df['close_{}'.format(itv)].to_numpy()\n","  open = df['open_{}'.format(itv)].to_numpy()\n","\n","  b1_close = df['close_{}'.format(itv)].shift(itv_num).to_numpy()\n","  b1_open = df['open_{}'.format(itv)].shift(itv_num).to_numpy()\n","  b1_high = df['high_{}'.format(itv)].shift(itv_num).to_numpy()\n","  b1_low = df['low_{}'.format(itv)].shift(itv_num).to_numpy()\n","\n","  body_range = abs(close - open)\n","  b1_body_range = abs(b1_close - b1_open)\n","\n","  df['body_rel_ratio_{}'.format(itv)] = body_range / b1_body_range\n","\n","  short_body_ratio = np.where(close <= b1_low, body_range, b1_body_range)\n","  long_body_range = np.where(close >= b1_high, body_range, b1_body_range)\n","\n","  # 추후에 통계 측정해야함 -> bir 에 따른 개별 trader 의 epout / tpep 이라던가 => short 에 양봉은 취급안함 (why use np.nan)\n","  df['short_ir_{}'.format(itv)] = np.where(close < open, (b1_low - close) / body_range, np.nan) # close < open & close < b1_low\n","  df['long_ir_{}'.format(itv)] = np.where(close > open, (close - b1_high) / body_range, np.nan) # close > open & close > b1_high\n","\n","  return"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"mtnMUkhwkdrE"},"outputs":[],"source":["imb_ratio(t_df, \"5T\")\n","# imb_ratio_v3(t_df, \"5T\")\n","# imb_ratio_v4(t_df, \"5T\")\n","\n","t_df.tail(100).short_ir_5T  # .461871\n","# t_df.iloc[:, -10:]\n","# t_df.dtypes"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"RVUs1YE_pgBI"},"outputs":[],"source":["# imb_ratio(t_df, \"5T\")\n","# imb_ratio_v3(t_df, \"5T\")\n","imb_ratio_v4(t_df, \"5T\")\n","\n","t_df.tail(100).short_ir_5T  # .461871\n","# t_df.iloc[:, -10:]\n","# t_df.dtypes"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"bieHiKjBkuFL"},"outputs":[],"source":["# ------ rtc 1, 0 개념 ------ #\n","# short_rtc_1 = close\n","# short_rtc_0 = b1_low\n","\n","# long_rtc_1 = close\n","# long_rtc_0 = b1_high\n","\n","# rtc 로 활용하려면, col 로 추가해야할 것 -> 추가할만한 col_name 은 아님\n","# 1. h_candle 인 경우 -> ?\n","#   a. h_candle_v3 먹이고, open_{}.shift(num_itv).to_numpy() 진행 -> ex. res_df['close_{}'.format(hc_itv)].shift(itv_num).to_numpy() "]},{"cell_type":"code","execution_count":null,"metadata":{"id":"3X6bMXJIjPYy"},"outputs":[],"source":["# 1. 현재 종가 - 이전 고가 = imb_range (long)\n","long_imb_range = t_df.close - t_df.high.shift(1)\n","# 2. 이전 저가 - 현재 종가 - imb_range (short)\n","short_imb_range = t_df.low.shift(1) - t_df.close"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"q1nEA19v7Qpj"},"outputs":[],"source":["from math import floor\n","\n","\n","def _calc_dev(base_price, price):\n","    return 100 * (price - base_price) / base_price\n","\n","\n","def zigzag(highs, lows, depth=10, dev_threshold=5):\n","    def pivots(src_raw, length, isHigh):\n","        src = list(reversed(src_raw))\n","        bar_index = list(range(len(src)))\n","        for start in range(0, len(src)):\n","            if start + 2 * length + 1 > len(src) - 1:\n","                return\n","            p = 0\n","            if length < len(src) - start:\n","                p = src[start + length]\n","            if length == 0:\n","                yield 0, p\n","            else:\n","                isFound = True\n","                for i in range(start, start + length):\n","                    if isHigh and src[i] > p:\n","                        isFound = False\n","                    if not isHigh and src[i] < p:\n","                        isFound = False\n","                for i in range(start + length + 1, start + 2 * length + 1):\n","                    if isHigh and src[i] >= p:\n","                        isFound = False\n","                    c = not isHigh and src[i] <= p\n","                    if c:\n","                        isFound = False\n","                if isFound:\n","                    yield (bar_index[start + length], p)\n","                else:\n","                    yield None, None\n","\n","    data_highs = [x for x in pivots(highs, floor(depth / 2), True) if x[0]]\n","    data_lows = [x for x in pivots(lows, floor(depth / 2), False) if x[0]]\n","\n","    raw_pairs = []\n","\n","    for i, (ind, p) in enumerate(data_highs):\n","        lows_d = sorted([(ind_l, p_l) for ind_l, p_l in data_lows if ind > ind_l], key=lambda x: x[0])\n","        if lows_d:\n","            lows = lows_d[-1]\n","\n","            if abs(_calc_dev(lows[1], p)) >= dev_threshold:\n","                raw_pairs.append(\n","                    ((ind, p),\n","                     (lows[0], lows[1]))\n","                )\n","\n","    result = []\n","\n","    for (i_h, p_h),(i_l, p_l) in raw_pairs:\n","        if not result:\n","            result.append(((i_h, p_h),(i_l, p_l)))\n","            continue\n","\n","        if i_l == result[-1][1][0]:\n","            if p_h > result[-1][0][1]:\n","                result = result[:-1]\n","            else:\n","                continue\n","\n","        result.append(((i_h, p_h),(i_l, p_l)))\n","\n","    return result\n","\n","# highs, lows = t_df.high.to_numpy(), t_df.low.to_numpy()\n","# zigzag(highs, lows, depth=5, dev_threshold=5)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"fGlmdyb97j4Q"},"outputs":[],"source":["t_df = res_df_.iloc[-120:]\n","a_data = t_df.to_numpy()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ropzIp0wUPAA"},"outputs":[],"source":["# import plotly.express as px\n","# import plotly.graph_objects as go\n","\n","def get_dist_plot(c, v, kx, ky):\n","    fig = go.Figure()\n","    fig.add_trace(go.Histogram(name='Vol Profile', x=c, y=v, nbinsx=150, \n","                               histfunc='sum', histnorm='probability density',\n","                               marker_color='#B0C4DE'))\n","    fig.add_trace(go.Scatter(name='KDE', x=kx, y=ky, mode='lines', marker_color='#D2691E'))    \n","\n","    peaks,_ = signal.find_peaks(kdy)\n","    pkx = kdx[peaks]\n","    pky = kdy[peaks]\n","    pk_marker_args=dict(size=10, color='black')\n","    fig.add_trace(go.Scatter(name=\"Peaks\", x=pkx, y=pky, mode='markers', marker=pk_marker_args))\n","    fig.show()\n","\n","    return fig"]},{"cell_type":"markdown","source":["##### instant."],"metadata":{"id":"RZJ6uIA_VcJs"}},{"cell_type":"code","source":["def wave_range_ratio(res_df, config, bb_itv, bb_period):\n","\n","  wave_itv = pd.infer_freq(res_df.index)\n","  wave_period = config.tr_set.wave_period\n","\n","  bb_upper_ = res_df['bb_upper_{}{}'.format(bb_itv, bb_period)].to_numpy()\n","  bb_lower_ = res_df['bb_lower_{}{}'.format(bb_itv, bb_period)].to_numpy()\n","  \n","  cu_prime_idx_fill_ = res_df['wave_cu_prime_idx_fill_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","  co_prime_idx_fill_ = res_df['wave_co_prime_idx_fill_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","\n","  cu_bb_range = get_line(co_prime_idx_fill_, bb_upper_) - get_line(co_prime_idx_fill_, bb_lower_)  # cu 에서 co_prime 의 bb_range 사용\n","  co_bb_range = get_line(cu_prime_idx_fill_, bb_upper_) - get_line(cu_prime_idx_fill_, bb_lower_)\n","\n","  wave_range = res_df['wave_high_fill_{}{}'.format(wave_itv, wave_period)].to_numpy() - res_df['wave_low_fill_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","  \n","  res_df['cu_wrr_{}{}'.format(wave_itv, wave_period)] = wave_range / cu_bb_range   # for cu (currently, long)\n","  res_df['co_wrr_{}{}'.format(wave_itv, wave_period)] = wave_range / co_bb_range\n","\n","  return res_df"],"metadata":{"id":"nLWAP1Cl2Hvu"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Todo, future_data\n","def enough_space(res_df, itv, period):\n","\n","  dc_upper_ = res_df['dc_upper_{}{}'.format(itv, period)].to_numpy()\n","  dc_base_ = res_df['dc_base_{}{}'.format(itv, period)].to_numpy()\n","  dc_lower_ = res_df['dc_lower_{}{}'.format(itv, period)].to_numpy()  \n","  high_ = res_df['high_{}'.format(config.loc_set.point.tf_entry)].to_numpy()\n","  low_ = res_df['low_{}'.format(config.loc_set.point.tf_entry)].to_numpy()\n","\n","  half_dc_gap = dc_upper_ - dc_base_\n","\n","  res_df['cu_es_{}{}'.format(itv, period)] = (low_ - dc_lower_) / half_dc_gap\n","  res_df['co_es_{}{}'.format(itv, period)] = (dc_upper_ - high_) / half_dc_gap\n","\n","  return res_df"],"metadata":{"id":"H_zPYIshbZgP"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Todo, future_data\n","def candle_range_ratio(res_df, c_itv, bb_itv, bb_period):\n","\n","  itv_num = to_itvnum(c_itv)\n","\n","  b1_bb_upper_ = res_df['bb_upper_{}{}'.format(bb_itv, bb_period)].shift(itv_num).to_numpy()\n","  b1_bb_lower_ = res_df['bb_lower_{}{}'.format(bb_itv, bb_period)].shift(itv_num).to_numpy()\n","  bb_range = b1_bb_upper_ - b1_bb_lower_   # <-- h_candle's open_idx 의 bb_gap 사용\n","\n","  high_ = res_df['high_{}'.format(c_itv)].to_numpy()\n","  low_ = res_df['low_{}'.format(c_itv)].to_numpy()\n","  candle_range = high_ - low_  # 부호로 양 / 음봉 구분 (양봉 > 0)\n","  \n","  res_df['crr_{}'.format(c_itv)] = candle_range / bb_range\n","\n","  return res_df"],"metadata":{"id":"o3IUBc59VR5D"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def body_rel_ratio(res_df, c_itv):\n","\n","  itv_num = to_itvnum(c_itv)\n","  \n","  b1_close_ = res_df['close_{}'.format(c_itv)].shift(itv_num).to_numpy()\n","  b1_open_ = res_df['open_{}'.format(c_itv)].shift(itv_num).to_numpy()\n","  b1_body_range = abs(b1_close_ - b1_open_)\n","\n","  close_ = res_df['close_{}'.format(c_itv)].to_numpy()\n","  open_ = res_df['open_{}'.format(c_itv)].to_numpy()\n","  body_range = abs(close_ - open_)\n","  \n","  res_df['body_rel_ratio_{}'.format(c_itv)] = body_range / b1_body_range\n","\n","  return res_df\n","\n","def dc_over_body_ratio(res_df, c_itv, dc_itv, dc_period):\n","  close_ = res_df['close_{}'.format(c_itv)].to_numpy()\n","  open_ = res_df['open_{}'.format(c_itv)].to_numpy()\n","  body_range = abs(close_ - open_)\n","  \n","  dc_upper_ = res_df['dc_upper_{}{}'.format(dc_itv, dc_period)].to_numpy()\n","  dc_lower_ = res_df['dc_lower_{}{}'.format(dc_itv, dc_period)].to_numpy() \n","\n","  res_df['dc_upper_{}{}_br'.format(dc_itv, dc_period)] = (close_ - dc_upper_) / body_range\n","  res_df['dc_lower_{}{}_br'.format(dc_itv, dc_period)] = (dc_lower_ - close_) / body_range\n","\n","  return res_df"],"metadata":{"id":"u3yFd8Dcok5m"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def candle_pumping_ratio_v2(res_df, c_itv, dc_itv, period):\n","\n","  res_df = dc_line_v3(res_df, dc_itv, dc_period=period)\n","\n","  dc_upper_ = res_df['dc_upper_{}{}'.format(dc_itv, period)].to_numpy()\n","  dc_lower_ = res_df['dc_lower_{}{}'.format(dc_itv, period)].to_numpy()\n","  dc_range = dc_upper_ - dc_lower_\n"," \n","  open_ = res_df['open_{}'.format(c_itv)].to_numpy()\n","  close_ = res_df['close_{}'.format(c_itv)].to_numpy()\n","  body = close_ - open_  # 부호로 양 / 음봉 구분 (양봉 > 0)\n","  \n","  res_df['cppr_{}'.format(c_itv)] = body / dc_range\n","\n","  return res_df\n","\n","\n","# Todo, future_data\n","def candle_pumping_ratio(res_df, c_itv, bb_itv, period):\n","\n","  itv_num = to_itvnum(c_itv)\n","\n","  # 여기에도 v2 처럼 bb_indi. 추가 (자동화)\n","\n","  b1_bb_upper_ = res_df['bb_upper_{}{}'.format(bb_itv, period)].shift(itv_num).to_numpy()\n","  b1_bb_lower_ = res_df['bb_lower_{}{}'.format(bb_itv, period)].shift(itv_num).to_numpy()\n","  bb_range = b1_bb_upper_ - b1_bb_lower_\n","\n","  open_ = res_df['open_{}'.format(c_itv)].to_numpy()\n","  close_ = res_df['close_{}'.format(c_itv)].to_numpy()\n","  body = close_ - open_  # 부호로 양 / 음봉 구분 (양봉 > 0)\n","  \n","  res_df['cppr_{}'.format(c_itv)] = body / bb_range\n","\n","  return res_df\n","\n","\n","def pumping_ratio(res_df, config, itv, period1, period2):\n","\n","  bb_lower_5T = res_df['bb_lower_5T'].to_numpy()\n","  bb_upper_5T = res_df['bb_upper_5T'].to_numpy()\n","  bb_range = bb_upper_5T - bb_lower_5T\n","\n","  selection_id = config.selection_id\n","  \n","  res_df['short_ppr_{}'.format(selection_id)] = res_df['short_tp_gap_{}'.format(selection_id)].to_numpy() / get_line(res_df['short_wave_high_idx_{}{}{}'.format(itv, period1, period2)].to_numpy(), bb_range)\n","  res_df['long_ppr_{}'.format(selection_id)] = res_df['long_tp_gap_{}'.format(selection_id)].to_numpy() / get_line(res_df['long_wave_low_idx_{}{}{}'.format(itv, period1, period2)].to_numpy(), bb_range)\n"],"metadata":{"id":"JWj02LLGbnji"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"OpkclLSzazZ-"},"outputs":[],"source":["def wave_body_ratio(res_df_, itv, period):\n","  dc_upper_ = res_df_['dc_upper_{}{}'.format(itv, period)].to_numpy()\n","  dc_lower_ = res_df_['dc_lower_{}{}'.format(itv, period)].to_numpy()\n","  close_ = res_df_['close_{}'.format(itv)].to_numpy()\n","  open_ = res_df_['open_{}'.format(itv)].to_numpy()\n","\n","  dc_range = dc_upper_ - dc_lower_\n","  body_range = abs(close_ - open_)\n","\n","  res_df_['wave_body_ratio'] = body_range / dc_range\n","  res_df_['dc_upper_body_ratio'] = (np.maximum(close_, open_) - dc_upper_) / body_range\n","  res_df_['dc_lower_body_ratio'] = (dc_lower_) - np.minimum(close_, open_) / body_range\n","\n","  return"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"0-zzitQRbnz8"},"outputs":[],"source":["# res_df_['wave_body_ratio'].tail(200)\n","\n","itv = 'H'\n","period = 5\n","wave_body_ratio(res_df_, itv, period)"]},{"cell_type":"markdown","metadata":{"id":"qsyPhNR8yP1c"},"source":["##### dump"]},{"cell_type":"markdown","metadata":{"id":"xpyP5t8Ht_pE"},"source":["### calc recursive indi's min_period"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"N1Hbm4OA4Tkk"},"outputs":[],"source":["ticker_prcn = get_precision_by_price(res_df.close.iloc[-1]) + 2\n","\n","target_len = 300000\n","slice_len_list = list(range(50, 10000, 100))\n","slice_len_list.insert(0, target_len)\n","\n","start_0 = time.time()\n","# prev_int_, prev_pnts_ = None, None\n","offset = 1\n","\n","for sl_idx, sample_len in enumerate(slice_len_list):\n","\n","  sample_df = res_df.iloc[-sample_len -offset:-offset]\n","  sample_len2 = sample_len\n","\n","  # --------- input using indi.s --------- #\n","  # res = ema_v0(sample_df['close'], 190)\n","  res = rsi(sample_df, 14)\n","\n","    #    to_htf()    #\n","  # df_5T = to_htf(sample_df, itv_='5T', offset='1h')\n","  # sample_len2 = len(df_5T)\n","\n","  # # --------- input using htf_indi. --------- #\n","  # res = ema(df_5T['close'], 195)\n","  # -------------------------------------- #\n","\n","  res_last_row = res.iloc[-1]\n","  if pd.isnull(res_last_row):\n","    continue\n","\n","  # print(res_last_row)\n","  # break\n","\n","  # sample_df = sample_df.join(to_lower_tf_v2(sample_df, df_5T, [-1]), how='inner')\n","\n","\n","  #   자리수 분할 계산    #\n","  int_, points_ = str(res_last_row).split('.')\n","  pnts_ = points_[:ticker_prcn]\n","\n","  if sl_idx == 0:\n","    target_int_ = int_\n","    target_pnts_ = pnts_\n","    print(\"target {} ({}) -> {} {}\".format(sample_len, sample_len2, int_, points_))\n","\n","  else:\n","    if target_int_ == int_ and target_pnts_ == pnts_:\n","      # print(sample_len, \"({})\".format(sample_len2), '->', int_, pnts_, end='\\n\\n')\n","      print(\"{} ({}) -> {} {}\\n\".format(sample_len, sample_len2, int_, points_))\n","      break\n","\n","print(time.time() - start_0)  # (1301)(1361)(1301)"]},{"cell_type":"markdown","metadata":{"id":"rrIGjmUzqU-D"},"source":["## import utils & config"]},{"cell_type":"code","execution_count":5,"metadata":{"id":"SeJan_0t95yL","executionInfo":{"status":"ok","timestamp":1651813097071,"user_tz":-540,"elapsed":673,"user":{"displayName":"7th June","userId":"08178289703395036410"}}},"outputs":[],"source":["frame_ver = \"0114_htf\"\n","ID_arr = np.array(['v3', 'v5_2'])\n","\n","utils_public_name = \"{}.utils.{}_utils_public\".format(strat_pkg, frame_ver)\n","utils_public_lib = importlib.import_module(utils_public_name)\n","utils_public = utils_public_lib   # temporary\n","\n","u_name_list = [\"{}.utils.{}_utils_{}\".format(strat_pkg, frame_ver, id_) for id_ in ID_arr]\n","utils_arr = np.array([importlib.import_module(u_name) for u_name in u_name_list])\n","\n","config_name_list = [\"{}_config_{}.json\".format(frame_ver, id_) for id_ in ID_arr]\n","cfg_path_list = [os.path.join(current_path, strat_pkg, \"config\", name_) for name_ in config_name_list]\n","cfg_file_list = [open(cfg_path) for cfg_path in cfg_path_list]\n","config_arr = np.array([EasyDict(json.load(cfg_)) for cfg_ in cfg_file_list])\n","\n","# ------ opened files should be closed --> 닫지 않으면 reopen 시 error occurs ------ #\n","_ = [cfg_.close() for cfg_ in cfg_file_list]\n","show_plot = 1   # idep's var - do not touch"]},{"cell_type":"markdown","metadata":{"id":"leSQlImg4_9L"},"source":["### utils_"]},{"cell_type":"code","execution_count":7,"metadata":{"id":"CB2yZdQ95Cdg","executionInfo":{"status":"ok","timestamp":1651813108871,"user_tz":-540,"elapsed":1239,"user":{"displayName":"7th June","userId":"08178289703395036410"}}},"outputs":[],"source":["# import pandas as pd\n","# import numpy as np\n","# import logging\n","\n","sys_log = logging.getLogger()\n","\n","def get_line(touch_idx, rtc_):\n","    touch_idx_copy = touch_idx.copy()\n","\n","    nan_idx = np.isnan(touch_idx_copy)\n","    touch_idx_copy[nan_idx] = 0  # for indexing array\n","    touch_line = rtc_[touch_idx_copy.astype(int)].copy()\n","    touch_line[nan_idx] = np.nan  # for true comp.\n","\n","    return touch_line\n","\n","\n","def enlist_rtc(res_df, config, np_timeidx):\n","    selection_id = config.selection_id\n","    # ------------ rtc_gap ------------ #\n","    short_epout_1_, long_epout_1_ = 'short_epout_1_{}'.format(selection_id), 'long_epout_1_{}'.format(selection_id)\n","    short_epout_0_, long_epout_0_ = 'short_epout_0_{}'.format(selection_id), 'long_epout_0_{}'.format(selection_id)\n","    short_tp_1_, long_tp_1_ = 'short_tp_1_{}'.format(selection_id), 'long_tp_1_{}'.format(selection_id)\n","    short_tp_0_, long_tp_0_ = 'short_tp_0_{}'.format(selection_id), 'long_tp_0_{}'.format(selection_id)\n","\n","    p1_itv1 = config.tr_set.p1_itv1\n","    p1_period1 = config.tr_set.p1_period1\n","    p1_period2 = config.tr_set.p1_period2\n","    p2_itv1 = config.tr_set.p2_itv1\n","    p2_period1 = config.tr_set.p2_period1\n","    p2_period2 = config.tr_set.p2_period2\n","\n","    wave_itv = 'T'\n","    wave_period = config.tr_set.wave_period\n","    \n","    roll_high_, roll_low_ = roll_wave_hl_v2(res_df, config, roll_hl_cnt=4)   # Todo, df 저장할 방법 고민\n","    # roll_high_, roll_low_ = roll_wave_hl_v3(res_df, config, roll_hl_cnt=4)   # Todo, df 저장할 방법 고민\n","\n","    res_df[short_tp_1_] = res_df['wave_low_fill_{}{}'.format(wave_itv, wave_period)]\n","    res_df[short_tp_0_] = roll_high_[:, -2]  # res_df['wave_high_fill_{}{}'.format(wave_itv, wave_period)]\n","    res_df[long_tp_1_] = res_df['wave_high_fill_{}{}'.format(wave_itv, wave_period)]\n","    res_df[long_tp_0_] = roll_low_[:, -2]   # res_df['wave_low_fill_{}{}'.format(wave_itv, wave_period)]\n","\n","    if config.tr_set.p2_itv1 != \"None\":\n","        p2_period1 = config.tr_set.p2_period1\n","        p2_period2 = config.tr_set.p2_period2\n","        res_df[short_epout_1_] = res_df['dc_lower_{}{}'.format(config.tr_set.p2_itv1, p2_period1)]\n","        res_df[short_epout_0_] = res_df['dc_upper_{}{}'.format(config.tr_set.p2_itv0, p2_period2)]\n","        res_df[long_epout_1_] = res_df['dc_upper_{}{}'.format(config.tr_set.p2_itv1, p2_period1)]\n","        res_df[long_epout_0_] = res_df['dc_lower_{}{}'.format(config.tr_set.p2_itv0, p2_period2)]\n","    else:\n","        res_df[short_epout_1_] = res_df['wave_low_fill_{}{}'.format(wave_itv, wave_period)]\n","        res_df[short_epout_0_] = res_df['wave_high_fill_{}{}'.format(wave_itv, wave_period)]  # roll_high_[:, -2]\n","        res_df[long_epout_1_] = res_df['wave_high_fill_{}{}'.format(wave_itv, wave_period)]\n","        res_df[long_epout_0_] = res_df['wave_low_fill_{}{}'.format(wave_itv, wave_period)]  # roll_low_[:, -2]\n","\n","    # ------ inversion ------ #\n","    if config.pos_set.short_inversion or config.pos_set.long_inversion:\n","        res_df.rename({short_tp_1_: long_tp_1_, long_tp_1_: short_tp_1_}, axis=1, inplace=True)\n","        res_df.rename({short_tp_0_: long_tp_0_, long_tp_0_: short_tp_0_}, axis=1, inplace=True)\n","        res_df.rename({short_epout_1_: long_epout_1_, long_epout_1_: short_epout_1_}, axis=1, inplace=True)\n","        res_df.rename({short_epout_0_: long_epout_0_, long_epout_0_: short_epout_0_}, axis=1, inplace=True)\n","\n","    res_df['short_tp_gap_{}'.format(selection_id)] = abs(res_df[short_tp_1_] - res_df[short_tp_0_])\n","    res_df['long_tp_gap_{}'.format(selection_id)] = abs(res_df[long_tp_1_] - res_df[long_tp_0_])\n","    res_df['short_epout_gap_{}'.format(selection_id)] = abs(res_df[short_epout_1_] - res_df[short_epout_0_])\n","    res_df['long_epout_gap_{}'.format(selection_id)] = abs(res_df[long_epout_1_] - res_df[long_epout_0_])\n","\n","    # ------------ dtk_gap ------------ #\n","    # res_df['short_dtk_1_{}'.format(selection_id)] = res_df['bb_lower_%s' % config.loc_set.zone.dtk_itv]\n","    # res_df['short_dtk_0_{}'.format(selection_id)] = res_df['dc_upper_%s' % config.loc_set.zone.dtk_itv]\n","    # res_df['long_dtk_1_{}'.format(selection_id)] = res_df['bb_upper_%s' % config.loc_set.zone.dtk_itv]\n","    # res_df['long_dtk_0_{}'.format(selection_id)] = res_df['dc_lower_%s' % config.loc_set.zone.dtk_itv]\n","\n","    # res_df['short_dtk_gap_{}'.format(selection_id)] = abs(\n","    #     res_df['short_dtk_0_{}'.format(selection_id)] - res_df['short_dtk_1_{}'.format(selection_id)])\n","    # res_df['long_dtk_gap_{}'.format(selection_id)] = abs(\n","    #     res_df['long_dtk_1_{}'.format(selection_id)] - res_df['long_dtk_0_{}'.format(selection_id)])\n","\n","    return res_df\n","\n","\n","def enlist_tr(res_df, config, np_timeidx, mode='OPEN', show_detail=True):\n","    selection_id = config.selection_id\n","    len_df = len(res_df)\n","    len_df_range = np.arange(len_df)\n","    short_open_res = np.ones(len_df)\n","    long_open_res = np.ones(len_df)\n","\n","    short_tp_1_col, short_tp_0_col, short_tp_gap_col = 'short_tp_1_{}'.format(selection_id), 'short_tp_0_{}'.format(\n","        selection_id), 'short_tp_gap_{}'.format(selection_id)\n","    long_tp_1_col, long_tp_0_col, long_tp_gap_col = 'long_tp_1_{}'.format(selection_id), 'long_tp_0_{}'.format(\n","        selection_id), 'long_tp_gap_{}'.format(selection_id)\n","    short_epout_1_col, short_epout_0_col, short_epout_gap_col = 'short_epout_1_{}'.format(selection_id), 'short_epout_0_{}'.format(\n","        selection_id), 'short_epout_gap_{}'.format(selection_id)\n","    long_epout_1_col, long_epout_0_col, long_epout_gap_col = 'long_epout_1_{}'.format(selection_id), 'long_epout_0_{}'.format(\n","        selection_id), 'long_epout_gap_{}'.format(selection_id)\n","\n","    tp_cols = [short_tp_1_col, short_tp_0_col, short_tp_gap_col, long_tp_1_col, long_tp_0_col, long_tp_gap_col]  # Todo - public_indi 이전에 해야할지도 모름\n","    epout_cols = [short_epout_1_col, short_epout_0_col, short_epout_gap_col, long_epout_1_col, long_epout_0_col,\n","                  long_epout_gap_col]  # Todo - public_indi 이전에 해야할지도 모름\n","    data_cols = ['open', 'high', 'low', 'close']  # Todo - public_indi 이전에 해야할지도 모름 # 'close', 'haopen', 'hahigh', 'halow', 'haclose'\n","\n","    short_tp_1_, short_tp_0_, short_tp_gap_, long_tp_1_, long_tp_0_, long_tp_gap_ = [res_df[col_].to_numpy() for col_ in tp_cols]\n","    short_epout_1_, short_epout_0_, short_epout_gap_, long_epout_1_, long_epout_0_, long_epout_gap_ = [res_df[col_].to_numpy() for col_ in epout_cols]\n","    open, high, low, close = [res_df[col_].to_numpy() for col_ in data_cols]\n","\n","    # ---------------- point - support_confirmer---------------- #\n","    p1_itv1 = config.tr_set.p1_itv1\n","    p1_period1 = config.tr_set.p1_period1\n","    p1_period2 = config.tr_set.p1_period2\n","    p2_itv1 = config.tr_set.p2_itv1\n","    p2_period1 = config.tr_set.p2_period1\n","    p2_period2 = config.tr_set.p2_period2\n","\n","    wave_itv = 'T'\n","    wave_period = config.tr_set.wave_period\n","\n","    if p2_itv1 != \"None\":\n","        short_point1_on2_idx = pd.Series(\n","            np.where(res_df['short_wave_point_{}{}{}'.format(p1_itv1, p1_period1, p1_period2)], len_df_range, np.nan)).rolling(point1_to2_period,\n","                                                                                                                                    min_periods=1).max().to_numpy()  # period 내의 max_point1_idx\n","        long_point1_on2_idx = pd.Series(\n","            np.where(res_df['long_wave_point_{}{}{}'.format(p1_itv1, p1_period1, p1_period2)], len_df_range, np.nan)).rolling(point1_to2_period,\n","                                                                                                                                   min_periods=1).max().to_numpy()\n","\n","        short_point2_idx = pd.Series(\n","            np.where(res_df['short_wave_point_{}{}{}'.format(p2_itv1, p2_period1, p2_period2)], len_df_range, np.nan)).to_numpy()\n","        long_point2_idx = pd.Series(\n","            np.where(res_df['long_wave_point_{}{}{}'.format(p2_itv1, p2_period1, p2_period2)], len_df_range, np.nan)).to_numpy()\n","\n","        res_df['short_point_idxgap_{}'.format(selection_id)] = short_point2_idx - short_point1_on2_idx\n","        res_df['long_point_idxgap_{}'.format(selection_id)] = long_point2_idx - long_point1_on2_idx\n","\n","        # ------ p1 & p2 ------ #\n","        short_open_res *= ~np.isnan(res_df['short_point_idxgap_{}'.format(selection_id)].to_numpy())\n","        long_open_res *= ~np.isnan(res_df['long_point_idxgap_{}'.format(selection_id)].to_numpy())\n","\n","        if show_detail:\n","          sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","          sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))\n","\n","        # ------ p2 amax > p1_idx (long) ------ #\n","        short_open_res *= res_df['short_upper_touch_idx_{}{}{}'.format(p2_itv1, p2_period1, p2_period2)].to_numpy() > short_point1_on2_idx\n","        long_open_res *= res_df['long_lower_touch_idx_{}{}{}'.format(p2_itv1, p2_period1, p2_period2)].to_numpy() > long_point1_on2_idx\n","\n","        if show_detail:\n","          sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","          sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))\n","\n","        # ------ higher low (long) ------ #\n","        # short_a_line1_on2_ = get_line(short_point1_on2_idx, res_df['short_a_line_{}{}{}'.format(p1_itv1, p1_period1, p1_period2)].to_numpy())\n","        # long_a_line1_on2_ = get_line(long_point1_on2_idx, res_df['long_a_line_{}{}{}'.format(p1_itv1, p1_period1, p1_period2)].to_numpy())\n","\n","        # short_a_line2_ = res_df['short_a_line_{}{}{}'.format(p2_itv1, p2_period1, p2_period2)].to_numpy()\n","        # long_a_line2_ = res_df['long_a_line_{}{}{}'.format(p2_itv1, p2_period1, p2_period2)].to_numpy()\n","\n","        # short_open_res *= short_a_line1_on2_ >= short_a_line2_\n","        # long_open_res *= long_a_line1_on2_ <= long_a_line2_\n","\n","        # print(np.sum(long_open_res == 1))\n","\n","    else:  \n","        # ------ p1 only ------ #\n","        res_df['short_point_idxgap_{}'.format(selection_id)] = 0  # default\n","        res_df['long_point_idxgap_{}'.format(selection_id)] = 0 \n","        \n","        # ====== wave_point ====== #\n","        short_open_res *= res_df['wave_cu_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","        long_open_res *= res_df['wave_co_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","\n","        if show_detail:\n","          sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","          sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))\n","\n","        # ------ wave_mm ------ #\n","        wave_high_terms_cnt_fill_ = res_df['wave_high_terms_cnt_fill_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","        wave_low_terms_cnt_fill_ = res_df['wave_low_terms_cnt_fill_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","\n","        short_open_res *= (wave_high_terms_cnt_fill_ > config.tr_set.wave_greater2) & (wave_low_terms_cnt_fill_ > config.tr_set.wave_greater1)\n","        long_open_res *= (wave_low_terms_cnt_fill_ > config.tr_set.wave_greater2) & (wave_high_terms_cnt_fill_ > config.tr_set.wave_greater1)\n","\n","        if show_detail:\n","          sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","          sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))\n","\n","        # ------ low in bb_level3 ------ #     \n","        wave_high_fill_ = res_df['wave_high_fill_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","        wave_low_fill_ = res_df['wave_low_fill_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","        bb_upper2_ = res_df['bb_upper2_{}{}'.format('T', 60)].to_numpy()\n","        bb_upper3_ = res_df['bb_upper3_{}{}'.format('T', 60)].to_numpy()\n","        bb_lower2_ = res_df['bb_lower2_{}{}'.format('T', 60)].to_numpy()\n","        bb_lower3_ = res_df['bb_lower3_{}{}'.format('T', 60)].to_numpy()\n","\n","        short_open_res *= (bb_upper2_ < wave_high_fill_) & (wave_high_fill_ < bb_upper3_)\n","        long_open_res *= (bb_lower3_ < wave_low_fill_) & (wave_low_fill_ < bb_lower2_)\n","\n","        if show_detail:\n","          sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","          sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))\n","\n","        # ------ tf2_base < wave_base ------ #\n","        # dc_base_ = res_df['dc_base_{}{}'.format(p1_itv1, p1_period1)].to_numpy()\n","        # wave_base_ = res_df['dc_base_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","\n","        # short_open_res *= (dc_base_ > wave_base_) & (dc_base_ > close)\n","        # long_open_res *= (dc_base_ < wave_base_) & (dc_base_ < close)\n","\n","        # if show_detail:\n","        #   sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","        #   sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))     \n","        \n","        # ------ first_high ------ #        \n","        # cu_prime_idx_fill_ = res_df['wave_cu_prime_idx_fill_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","        # co_prime_idx_fill_ = res_df['wave_co_prime_idx_fill_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","        # cu_prime_wave_base = get_line(cu_prime_idx_fill_, wave_base_)\n","        # co_prime_wave_base = get_line(co_prime_idx_fill_, wave_base_)\n","\n","        # # short_open_res *= (co_roll_high_[:, -1] > dc_base_) & (dc_base_ > co_roll_low_[:, -1])\n","        # # long_open_res *= (cu_roll_low_[:, -1] < dc_base_) & (dc_base_ < cu_roll_high_[:, -1])\n","\n","        # short_open_res *= (cu_prime_wave_base > dc_base_) & (dc_base_ > co_prime_wave_base)\n","        # long_open_res *= (co_prime_wave_base < dc_base_) & (dc_base_ < cu_prime_wave_base)\n","\n","        # if show_detail:\n","        #   sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","        #   sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))\n","\n","        # cu_prime_dc_base = get_line(cu_prime_idx_fill_, dc_base_)        \n","        # co_prime_dc_base = get_line(co_prime_idx_fill_, dc_base_)\n","        \n","        # shift_size = to_itvnum(p1_itv1)\n","        # b1_dc_base_ = res_df['dc_base_{}{}'.format(p1_itv1, p1_period1)].shift(shift_size).to_numpy()\n","\n","        # short_open_res *= (b1_dc_base_ < dc_base_)\n","        # long_open_res *= (b1_dc_base_ > dc_base_)\n","\n","        # if show_detail:\n","        #   sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","        #   sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))\n","\n","        # ------ b1_dc_base < wave_high ------ #\n","        # short_open_res *= (b1_dc_base_ > co_roll_low_[:, -1])\n","        # long_open_res *= (b1_dc_base_ < cu_roll_high_[:, -1])\n","\n","        # if show_detail:\n","        #   sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","        #   sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))   \n","\n","    res_df['short_open_{}'.format(selection_id)] = short_open_res\n","    res_df['long_open_{}'.format(selection_id)] = long_open_res\n","\n","    # ------------------ tr_set ------------------ #\n","    # ------------ tpep ------------ #\n","    tpg = config.tr_set.tp_gap\n","    res_df['short_tp_{}'.format(selection_id)] = short_tp_1_ - short_tp_gap_ * tpg\n","    res_df['long_tp_{}'.format(selection_id)] = long_tp_1_ + long_tp_gap_ * tpg\n","\n","    # ------ limit_ep ------ #\n","    if config.ep_set.entry_type == \"LIMIT\":\n","        epg = config.tr_set.ep_gap\n","        # res_df['short_ep_{}'.format(selection_id)] = short_epout_0_ + short_epout_gap_ * epg\n","        # res_df['long_ep_{}'.format(selection_id)] = long_epout_0_ - long_epout_gap_ * epg\n","        \n","        wave_cu_marker_ = res_df['wave_cu_marker_{}{}'.format(wave_itv, wave_period)]\n","        wave_co_marker_ = res_df['wave_co_marker_{}{}'.format(wave_itv, wave_period)]\n","        res_df['short_ep_{}'.format(selection_id)] = wave_cu_marker_ + short_epout_gap_ * epg\n","        res_df['long_ep_{}'.format(selection_id)] = wave_co_marker_ - long_epout_gap_ * epg\n","\n","    # ------ market_ep ------ #\n","    else:\n","        res_df['short_ep_{}'.format(selection_id)] = close\n","        res_df['long_ep_{}'.format(selection_id)] = close\n","\n","    # ------------ out ------------ #\n","    outg = config.tr_set.out_gap\n","    res_df['short_out_{}'.format(selection_id)] = short_epout_0_ + short_epout_gap_ * outg\n","    res_df['long_out_{}'.format(selection_id)] = long_epout_0_ - long_epout_gap_ * outg\n","\n","    # ------------ point validation ------------ #\n","    short_tp_ = res_df['short_tp_{}'.format(selection_id)].to_numpy()\n","    short_ep_ = res_df['short_ep_{}'.format(selection_id)].to_numpy()\n","    short_out_ = res_df['short_out_{}'.format(selection_id)].to_numpy()\n","    short_open_res *= (short_tp_ < short_ep_) & (short_ep_ < short_out_)\n","    # short_open_res *= close < short_ep_   # reject open_execution\n","    short_open_res *= close < short_out_    # reject open_execution\n","    res_df['short_open_{}'.format(selection_id)] = short_open_res * (not config.pos_set.short_ban)\n","\n","    long_tp_ = res_df['long_tp_{}'.format(selection_id)].to_numpy()\n","    long_ep_ = res_df['long_ep_{}'.format(selection_id)].to_numpy()\n","    long_out_ = res_df['long_out_{}'.format(selection_id)].to_numpy()\n","    long_open_res *= (long_tp_ > long_ep_) & (long_ep_ > long_out_)\n","    # long_open_res *= close > long_ep_   # reject open_execution\n","    long_open_res *= close > long_out_    # reject open_execution\n","    res_df['long_open_{}'.format(selection_id)] = long_open_res * (not config.pos_set.long_ban)\n","\n","    if show_detail:\n","      sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","      sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))\n","    \n","    # ------------ wave_bias ------------ #\n","    wb_tpg = config.tr_set.wb_tp_gap\n","    wb_outg = config.tr_set.wb_out_gap\n","    res_df['short_wave_1_{}'.format(selection_id)] = short_tp_1_ - short_tp_gap_ * wb_tpg\n","    res_df['long_wave_1_{}'.format(selection_id)] = long_tp_1_ + long_tp_gap_ * wb_tpg\n","    res_df['short_wave_0_{}'.format(selection_id)] = short_epout_0_ + short_epout_gap_ * wb_outg\n","    res_df['long_wave_0_{}'.format(selection_id)] = long_epout_0_ - long_epout_gap_ * wb_outg\n","\n","    # ------ tr ------ #\n","    res_df['short_tr_{}'.format(selection_id)] = abs(\n","        (short_ep_ / short_tp_ - config.trader_set.limit_fee - 1) / (short_ep_ / short_out_ - config.trader_set.market_fee - 1))\n","    res_df['long_tr_{}'.format(selection_id)] = abs(\n","        (long_tp_ / long_ep_ - config.trader_set.limit_fee - 1) / (long_out_ / long_ep_ - config.trader_set.market_fee - 1))\n","\n","    # ------ zoned_ep ------ #\n","    if config.tr_set.c_ep_gap != \"None\":\n","        # res_df['short_ep_org_{}'.format(selection_id)] = res_df['short_ep_{}'.format(selection_id)].copy()\n","        # res_df['long_ep_org_{}'.format(selection_id)] = res_df['long_ep_{}'.format(selection_id)].copy()\n","        res_df['short_ep2_{}'.format(selection_id)] = short_epout_1_ + short_epout_gap_ * config.tr_set.c_ep_gap\n","        res_df['long_ep2_{}'.format(selection_id)] = long_epout_1_ - long_epout_gap_ * config.tr_set.c_ep_gap\n","\n","    # ------ zoned_out ------ #\n","    if config.tr_set.t_out_gap != \"None\":\n","        # res_df['short_out_org_{}'.format(selection_id)] = res_df['short_out_{}'.format(selection_id)].copy()\n","        # res_df['long_out_org_{}'.format(selection_id)] = res_df['long_out_{}'.format(selection_id)].copy()\n","        res_df['short_out2_{}'.format(selection_id)] = res_df['short_epout_0_{}'.format(selection_id)] + res_df[\n","            'short_epout_gap_{}'.format(selection_id)] * config.tr_set.t_out_gap\n","        res_df['long_out2_{}'.format(selection_id)] = res_df['long_epout_0_{}'.format(selection_id)] - res_df[\n","            'long_epout_gap_{}'.format(selection_id)] * config.tr_set.t_out_gap\n","\n","    return res_df\n"]},{"cell_type":"markdown","source":["#### legacy"],"metadata":{"id":"HuCb0phoPN83"}},{"cell_type":"code","source":["\n","        # ------ higher high (long) ------ #\n","        # short_open_res *= co_roll_low_[:, -2] > co_roll_low_[:, -1]\n","        # long_open_res *= cu_roll_high_[:, -2] < cu_roll_high_[:, -1]\n","\n","        # short_open_res *= co_roll_low_[:, -3] > co_roll_low_[:, -2]\n","        # long_open_res *= cu_roll_high_[:, -3] < cu_roll_high_[:, -2]\n","\n","        # if show_detail:\n","        #   sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","        #   sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))\n","\n","        # ------ higher low (long) ------ # \n","        # short_open_res *= co_roll_high_[:, -2] > co_roll_high_[:, -1]\n","        # long_open_res *= cu_roll_low_[:, -2] < cu_roll_low_[:, -1]\n","\n","        # if show_detail:\n","        #   sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","        #   sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))  \n","\n","        # ------ tf2_base < wave_low ------ #\n","        # short_open_res *= (dc_base_ > co_roll_high_[:, -1])\n","        # long_open_res *= (dc_base_ < cu_roll_low_[:, -1])\n","\n","        # if show_detail:\n","        #   sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","        #   sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))  \n","\n","        # short_open_res *= (cu_prime_wave_base > cu_prime_dc_base) & (dc_base_ > co_prime_wave_base)\n","        # long_open_res *= (co_prime_wave_base < co_prime_dc_base) & (dc_base_ < cu_prime_wave_base)\n","\n","        short_open_res *= (co_prime_dc_base < co_roll_low_[:, -2])\n","        long_open_res *= (cu_prime_dc_base > cu_roll_high_[:, -2])  #  b1_cu_prime_idx’s tf2_base > b1_high -> b1 이 아님 (error)\n","\n","\n","        res_df[short_epout_1_] = res_df['short_wave_low_{}{}{}'.format(itv, period1, period2)]\n","        res_df[short_epout_0_] = res_df['short_new_wave_high_{}{}{}'.format(itv, period1, period2)]\n","        res_df[long_epout_1_] = res_df['long_wave_high_{}{}{}'.format(itv, period1, period2)]\n","        res_df[long_epout_0_] = res_df['long_new_wave_low_{}{}{}'.format(itv, period1, period2)]\n","        \n","    # b1_itv_num = to_itvnum(config.tr_set.p2_itv0)\n","    # b2_itv_num = to_itvnum(config.tr_set.p2_itv0) * 2  # multi 2 for imb_v2\n","\n","    # res_df[short_tp_1_] = res_df['dc_lower_{}{}'.format(itv, period1)]\n","    # res_df[short_tp_0_] = res_df['dc_upper_{}{}'.format(itv, period2)]\n","    # # res_df[short_tp_0_] = res_df['dc_upper_15T4']\n","    # res_df[long_tp_1_] = res_df['dc_upper_{}{}'.format(itv, period1)]\n","    # res_df[long_tp_0_] = res_df['dc_lower_{}{}'.format(itv, period2)]\n","    # # res_df[long_tp_0_] = res_df['dc_lower_15T4']\n","    \n","        # ------ base_cc ------ #\n","        dc_base_ = res_df['dc_base_{}{}'.format(p1_itv1, p1_period1)].to_numpy()\n","\n","        # close_ = res_df['close_{}'.format(config.loc_set.point.tf_entry)].to_numpy()\n","        # b1_dc_base_ = res_df['dc_base_{}{}'.format(p1_itv1, p1_period1)].shift(tf_entry).to_numpy()\n","        # b1_close_ = res_df['close_{}'.format(config.loc_set.point.tf_entry)].shift(tf_entry).to_numpy()\n","\n","        # short_open_res *= ((b1_close_ > dc_base_) & (dc_base_ > close_)) | ((b1_close_ > b1_dc_base_) & (dc_base_ > close_))\n","        # long_open_res *= ((b1_close_ < dc_base_) & (dc_base_ < close_)) | ((b1_close_ < b1_dc_base_) & (dc_base_ < close_))\n","\n","        # if show_detail:\n","        #   sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","        #   sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))\n","        \n","        # ------ tf_entry ------ #\n","        # tf_entry = to_itvnum(config.loc_set.point.tf_entry)\n","        \n","        # short_open_res *= np_timeidx % tf_entry == (tf_entry - 1)\n","        # long_open_res *= np_timeidx % tf_entry == (tf_entry - 1) \n","\n","        # if show_detail:\n","        #   sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","        #   sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))\n","\n","    \n","        # ------ cppr 로 양음봉 check ------ # \n","        # tf_entry = to_itvnum(config.loc_set.point.tf_entry)\n","\n","        # res_df['b1_cppr_{}'.format(config.loc_set.point.tf_entry)] = res_df['cppr_{}'.format(config.loc_set.point.tf_entry)].shift(tf_entry)\n","        # b1_cppr_ = res_df['b1_cppr_{}'.format(config.loc_set.point.tf_entry)].to_numpy()  # check b1's cppr in ep_loc\n","        # cppr_ = res_df['cppr_{}'.format(config.loc_set.point.tf_entry)].to_numpy()\n","        # short_open_res *= (b1_cppr_ > 0) & (cppr_ < 0)\n","        # long_open_res *= (b1_cppr_ < 0) & (cppr_ > 0)\n","\n","        # res_df['b1_updbr'] = res_df['dc_upper_15T4_br'].shift(tf_entry).to_numpy()\n","        # res_df['b1_lwdbr'] = res_df['dc_lower_15T4_br'].shift(tf_entry).to_numpy()\n","        \n","        # res_df['b1_updbr_cppr'] = b1_cppr_ * res_df['b1_updbr'].to_numpy()\n","        # res_df['b1_lwdbr_cppr'] = b1_cppr_ * res_df['b1_lwdbr'].to_numpy()\n","\n","        # if show_detail:\n","        #   sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","        #   sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))\n","\n","        # ------ dc_cross ------ #\n","        # b1_dc_upper_15T4 = res_df['dc_upper_15T4'].shift(tf_entry).to_numpy()\n","        # b1_dc_lower_15T4 = res_df['dc_lower_15T4'].shift(tf_entry).to_numpy()\n","        # b1_high_ = res_df['high_{}'.format(config.loc_set.point.tf_entry)].shift(tf_entry).to_numpy()\n","        # b1_low_ = res_df['low_{}'.format(config.loc_set.point.tf_entry)].shift(tf_entry).to_numpy()\n","        # short_open_res *= b1_high_ > b1_dc_upper_15T4\n","        # long_open_res *= b1_low_ < b1_dc_lower_15T4\n","        \n","        # ------ dc_cc ------ #\n","        # b1_close_ = res_df['close_{}'.format(config.loc_set.point.tf_entry)].shift(tf_entry).to_numpy()\n","        # short_open_res *= b1_close_ > b1_dc_upper_15T4\n","        # long_open_res *= b1_close_ < b1_dc_lower_15T4\n","\n","        # if show_detail:\n","        #   sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","        #   sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))\n","\n","        # ------ empty_space ------ #       \n","        # dc_upper_15T4 = res_df['dc_upper_15T4'].to_numpy()\n","        # dc_lower_15T4 = res_df['dc_lower_15T4'].to_numpy() \n","        # high_ = res_df['high_{}'.format(config.loc_set.point.tf_entry)].to_numpy()\n","        # low_ = res_df['low_{}'.format(config.loc_set.point.tf_entry)].to_numpy()\n","        # short_open_res *= high_ < dc_upper_15T4\n","        # long_open_res *= low_ > dc_lower_15T4\n","        \n","        # ------ candle_pattern ------ #  \n","        # pattern_column = \"{}_{}\".format(config.loc_set.point.candle_pattern, config.loc_set.point.tf_entry)\n","        # short_open_res *= res_df[pattern_column].to_numpy() < 0\n","        # long_open_res *= res_df[pattern_column].to_numpy() > 0\n","\n","        # if show_detail:\n","        #   sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","        #   sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))\n","\n","\n","        # ------ lower_touch > upper_touch (long) ------ #\n","        # short_open_res *= res_df['short_upper_touch_idx_{}{}{}'.format(p1_itv1, p1_period1, p1_period2)].to_numpy() > res_df['short_lower_touch_idx_{}{}{}'.format(p1_itv1, p1_period1, p1_period2)].to_numpy()\n","        # long_open_res *= res_df['long_lower_touch_idx_{}{}{}'.format(p1_itv1, p1_period1, p1_period2)].to_numpy() > res_df['long_upper_touch_idx_{}{}{}'.format(p1_itv1, p1_period1, p1_period2)].to_numpy()\n","\n","        # ------ base_3T cross ------ #\n","        # dc_base_3T = res_df['dc_base_3T'].to_numpy()\n","        # b1_close = res_df['close'].shift(1).to_numpy()\n","        # short_open_res *= (b1_close > dc_base_3T) & (dc_base_3T > close)\n","        # long_open_res *= (b1_close < dc_base_3T) & (dc_base_3T < close)\n","\n","        # ------ wave_low < base_5T (long) ------ #\n","        # dc_base_5T = res_df['dc_base_5T'].to_numpy()        \n","        # short_open_res *= res_df['short_upper_touch_line_{}{}{}'.format(p1_itv1, p1_period1, p1_period2)].to_numpy() > dc_base_5T\n","        # long_open_res *= res_df['long_lower_touch_line_{}{}{}'.format(p1_itv1, p1_period1, p1_period2)].to_numpy() < dc_base_5T      \n","\n","        # ------ ppr ------ #\n","        # pumping_ratio(res_df, config, p1_itv1, p1_period1, p1_period2)  "],"metadata":{"id":"-DNPumVZi0xs"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"HKdUKKl-483N"},"source":["### utils_public"]},{"cell_type":"code","execution_count":8,"metadata":{"id":"nzOYWA2kqZ0d","executionInfo":{"status":"ok","timestamp":1651813120127,"user_tz":-540,"elapsed":3438,"user":{"displayName":"7th June","userId":"08178289703395036410"}}},"outputs":[],"source":["from funcs.funcs_indicator import *\n","from funcs.funcs_trader import *\n","import logging\n","from ast import literal_eval\n","\n","pd.set_option('mode.chained_assignment',  None)\n","sys_log = logging.getLogger()\n","\n","\n","class OrderSide:\n","    BUY = \"BUY\"\n","    SELL = \"SELL\"\n","    INVALID = None\n","\n","\n","def lvrg_set(res_df, config, open_side, ep_, out_, fee, limit_leverage=50):\n","    selection_id = config.selection_id\n","    if not pd.isnull(out_) and not config.lvrg_set.static_lvrg:\n","        if selection_id in ['v3']:\n","            if open_side == OrderSide.SELL:\n","                loss = out_ / ep_\n","            else:\n","                loss = ep_ / out_\n","        else:  # 이 phase 가 정석, 윗 phase 는 결과가 수익 극대화라 사용함\n","            if open_side == OrderSide.SELL:\n","                loss = ep_ / out_\n","            else:\n","                loss = out_ / ep_\n","\n","        config.lvrg_set.leverage = config.lvrg_set.target_pct / abs(loss - 1 - (fee + config.trader_set.market_fee))\n","\n","    # ------------ leverage rejection ------------ #\n","    # 감당하기 힘든 fluc. 의 경우 진입하지 않음 - dynamic_lvrg 사용 경우\n","    if config.lvrg_set.leverage < 1 and config.lvrg_set.lvrg_rejection:\n","        # if config.lvrg_set.leverage >= 1 and config.lvrg_set.lvrg_rejection:\n","        return None\n","\n","    if not config.lvrg_set.allow_float:\n","        config.lvrg_set.leverage = int(config.lvrg_set.leverage)\n","\n","    config.lvrg_set.leverage = min(limit_leverage, max(config.lvrg_set.leverage, 1))\n","\n","    return config.lvrg_set.leverage\n","\n","\n","def sync_check(df_, config, order_side=\"OPEN\", row_slice=True):\n","    try:\n","        make_itv_list = [m_itv.replace('m', 'T') for m_itv in literal_eval(config.trader_set.itv_list)]\n","        row_list = literal_eval(config.trader_set.row_list)\n","        rec_row_list = literal_eval(config.trader_set.rec_row_list)\n","        offset_list = literal_eval(config.trader_set.offset_list)\n","\n","        assert len(make_itv_list) == len(offset_list), \"length of itv & offset_list should be equal\"\n","        htf_df_list = [to_htf(df_, itv_=itv_, offset=offset_) for itv_idx, (itv_, offset_)\n","                       in enumerate(zip(make_itv_list, offset_list)) if itv_idx != 0]  #\n","        htf_df_list.insert(0, df_)\n","\n","        # for htf_df_ in htf_df_list:\n","        #     print(htf_df_.tail())\n","\n","        #       Todo        #\n","        #        1. row_list calc.\n","        #           a. indi. 를 만들기 위한 최소 period 가 존재하고, 그 indi. 를 사용한 lb_period 가 존재함\n","        #           b. => default_period + lb_period\n","        #               i. from sync_check, public_indi, ep_point2, ep_dur 의 tf 별 max lb_period check\n","        #                   1. default_period + max lb_period check\n","        #                       a. 현재까지 lb_period_list\n","        #                           h_prev_idx (open / close) 60\n","        #                           dc_period 135\n","        #                           zone_dc_period 135\n","\n","        # --------- slicing (in trader phase only) --------- #\n","        #               --> latency 영향도가 높은 곳은 이곳\n","        if row_slice:  # recursive 가 아닌 indi. 의 latency 를 고려한 slicing\n","            df, df_3T, df_5T, df_15T, df_30T, df_H, df_4H = [df_s.iloc[-row_list[row_idx]:].copy() for row_idx, df_s in enumerate(htf_df_list)]\n","            rec_df, rec_df_3T, rec_df_5T, rec_df_15T, rec_df_30T, rec_df_H, rec_df_4H = [df_s.iloc[-rec_row_list[row_idx]:].copy() for row_idx, df_s\n","                                                                                         in\n","                                                                                         enumerate(htf_df_list)]\n","        else:\n","            df, df_3T, df_5T, df_15T, df_30T, df_H, df_4H = htf_df_list\n","            rec_df, rec_df_3T, rec_df_5T, rec_df_15T, rec_df_30T, rec_df_H, rec_df_4H = htf_df_list\n","\n","        # --------- add indi. --------- #\n","\n","        #        1. 필요한 indi. 는 enlist_epouttp & mr_check 보면서 삽입\n","        #        2. min use_rows 계산을 위해서, tf 별로 gathering 함        #\n","        # start_0 = time.time()\n","\n","        # ------ T ------ #\n","        # df = dc_line(df, None, 'T', dc_period=20)\n","        # df = bb_line(df, None, 'T')\n","        #\n","        # ------ 3T ------ #\n","        # df = dc_line(df, df_3T, '3T')\n","\n","        # ------ 5T ------ #\n","        h_candle_v3(res_df, '5T')\n","        df = dc_line(df, df_5T, '5T')\n","        df = bb_line(df, df_5T, '5T')\n","        #\n","        # ------ 15T ------ #\n","        h_candle_v3(res_df, '15T')\n","        df = dc_line(df, df_15T, '15T')\n","        df = bb_line(df, df_15T, '15T')\n","        #\n","        # ------ 30T ------ #\n","        # df = bb_line(df, df_30T, '30T')\n","        #\n","        # ------ H ------ #\n","        h_candle_v3(res_df, 'H')\n","        # df = dc_line(df, df_H, 'H')\n","\n","        # ------ 4H ------ #\n","        # df = bb_line(df, df_4H, '4H')\n","\n","        # rec_df['rsi_1m'] = rsi(rec_df, 14)  # Todo - recursive, 250 period\n","        # df = df.join(to_lower_tf_v2(df, rec_df.iloc[:, [-1]], [-1], backing_i=0), how='inner')  # <-- join same_tf manual\n","        #\n","        # if order_side in [\"OPEN\"]:\n","        #     rec_df_5T['ema_5T'] = ema(rec_df_5T['close'], 195)  # Todo - recursive, 1100 period (5T)\n","        #     df = df.join(to_lower_tf_v2(df, rec_df_5T, [-1]), how='inner')\n","\n","    except Exception as e:\n","        sys_log.error(\"error in sync_check :\", e)\n","    else:\n","        return df\n","\n","\n","def public_indi(res_df, config, np_timeidx, order_side=\"OPEN\"):\n","\n","    selection_id = config.selection_id\n","\n","    # ====== public ====== #\n","    res_df = wave_range_v11(res_df, config)  # Todo, currently only T itv allowed\n","    # res_df = wave_range_v15(res_df, config, term_thresh1=2, term_thresh2=3)  # Todo, currently only T itv allowed\n","\n","    # ------ wrr ------ #\n","    # res_df = wave_range_ratio(res_df, config, 'T', 60)\n","    res_df = wave_range_ratio_v2(res_df, config)\n","    # res_df = wave_range_ratio_v3(res_df, config)\n","\n","    # ------ wave_loc_pct (bb) ------ #\n","    # res_df = wave_loc_pct_v2(res_df, config, 'T', 60)\n","    # res_df = wave_loc_pct(res_df, config, 'T', 60)\n","\n","    future_cols = ['cu_es_15T1', 'co_es_15T1', 'upper_wick_ratio_15T', 'lower_wick_ratio_15T']\n","    itv_list = ['15T', '15T', '15T', '15T']\n","    res_df = backing_future_data(res_df, future_cols, itv_list)\n","\n","    # ====== intervaly ====== #    \n","    # ------ 5T ------ #\n","    # res_df = dc_level(res_df, '5T', 1)\n","    # res_df = bb_level(res_df, '5T', 1)\n","\n","    # res_df = st_level(res_df, '5T', 1)\n","\n","    # ------ 15T ------ #\n","    # res_df = dc_level(res_df, '15T', 1)\n","    # res_df = bb_level(res_df, '15T', 1)\n","    # res_df = dtk_plot(res_df, dtk_itv2='15T', hhtf_entry=15, use_dtk_line=config.loc_set.zone.use_dtk_line, np_timeidx=np_timeidx)\n","\n","    # res_df = st_level(res_df, '15T', 1)\n","\n","    # ------ 30T ------ #\n","    # res_df = dc_level(res_df, '30T', 1)\n","    # res_df = bb_level(res_df, '30T', 1)\n","    # res_df = st_level(res_df, '30T', 1)\n","\n","    # ------ H ------ #\n","    # res_df = bb_level(res_df, 'H', 1)\n","\n","    # ------ 4H ------ #\n","    # res_df = bb_level(res_df, '4H', 1)\n","\n","    # res_df['dc_upper_v2'.format(selection_id)] = res_df['high'].rolling(config.loc_set.zone.dc_period).max()   # Todo, consider dc_period\n","    # res_df['dc_lower_v2'.format(selection_id)] = res_df['low'].rolling(config.loc_set.zone.dc_period).min()\n","\n","    # res_df['zone_dc_upper_v2'.format(selection_id)] = res_df['high'].rolling(config.loc_set.zone.zone_dc_period).max()   # Todo, consider zone_dc_period\n","    # res_df['zone_dc_lower_v2'.format(selection_id)] = res_df['low'].rolling(config.loc_set.zone.zone_dc_period).min()\n","\n","    # if order_side in [\"OPEN\"]:\n","        # candle_score_v3(res_df, 'T', unsigned=False)\n","        # candle_score_v3(res_df, config.loc_set.point.exp_itv, unsigned=False)\n","\n","    #     temp indi.    #\n","    # res_df[\"ma30_1m\"] = res_df['close'].rolling(30).mean()\n","    # res_df[\"ma60_1m\"] = res_df['close'].rolling(60).mean()\n","    # res_df = dtk_plot(res_df, dtk_itv2='15T', hhtf_entry=15, use_dtk_line=config.loc_set.zone.use_dtk_line, np_timeidx=np_timeidx)\n","\n","    return res_df\n","\n","\n","def ep_out_v0(res_df, config, op_idx, e_j, tp_j, np_datas, open_side):\n","    h, l = np_datas\n","    selection_id = config.selection_id\n","    ep_out = 0\n","\n","    if config.tr_set.ep_out_tick != \"None\":\n","        if e_j - op_idx >= config.tr_set.ep_out_tick:\n","            ep_out = 1\n","\n","    if config.tr_set.ei_k != \"None\":\n","        if open_side == OrderSide.SELL:\n","            short_tp_1_ = res_df['short_tp_1_{}'.format(selection_id)].to_numpy()  # id 에 따라 dynamic 변수라 이곳에서 numpy 화 진행\n","            short_tp_gap_ = res_df['short_tp_gap_{}'.format(selection_id)].to_numpy()\n","            if l[e_j] <= short_tp_1_[tp_j] - short_tp_gap_[tp_j] * config.tr_set.ei_k:\n","                ep_out = 1\n","        else:\n","            long_tp_1_ = res_df['long_tp_1_{}'.format(selection_id)].to_numpy()  # iloc 이 빠를까, to_numpy() 가 빠를까  # 3.94 ms --> 5.34 ms (iloc)\n","            long_tp_gap_ = res_df['long_tp_gap_{}'.format(selection_id)].to_numpy()\n","            if h[e_j] >= long_tp_1_[tp_j] + long_tp_gap_[tp_j] * config.tr_set.ei_k:\n","                ep_out = 1\n","\n","    return ep_out\n","\n","\n","def ep_out(res_df, config, op_idx, e_j, tp_j, np_datas, open_side):\n","    h, l = np_datas\n","    selection_id = config.selection_id\n","    ep_out = 0\n","\n","    if config.tr_set.ep_out_tick != \"None\":\n","        if e_j - op_idx >= config.tr_set.ep_out_tick:\n","            ep_out = 1\n","\n","    if config.tr_set.ei_k != \"None\":\n","        if open_side == OrderSide.SELL:\n","            short_tp_ = res_df['short_tp_{}'.format(selection_id)].to_numpy()  # id 에 따라 dynamic 변수라 이곳에서 numpy 화 진행\n","            short_tp_gap_ = res_df['short_tp_gap_{}'.format(selection_id)].to_numpy()\n","            if l[e_j] <= short_tp_[tp_j] + short_tp_gap_[tp_j] * config.tr_set.ei_k:\n","                ep_out = 1\n","        else:\n","            long_tp_ = res_df['long_tp_{}'.format(selection_id)].to_numpy()  # iloc 이 빠를까, to_numpy() 가 빠를까  # 3.94 ms --> 5.34 ms (iloc)\n","            long_tp_gap_ = res_df['long_tp_gap_{}'.format(selection_id)].to_numpy()\n","            if h[e_j] >= long_tp_[tp_j] - long_tp_gap_[tp_j] * config.tr_set.ei_k:\n","                ep_out = 1\n","\n","    return ep_out\n","\n","\n","def ep_out_v2(res_df, config, op_idx, e_j, tp_j, np_datas, open_side):\n","    h, l = np_datas\n","    selection_id = config.selection_id\n","    ep_out = 0\n","\n","    if config.tr_set.ep_out_tick != \"None\":\n","        if e_j - op_idx >= config.tr_set.ep_out_tick:\n","            ep_out = 1\n","\n","    if config.tr_set.ei_k != \"None\":\n","        if open_side == OrderSide.SELL:\n","            short_tp_1_ = res_df['short_tp_1_{}'.format(selection_id)].to_numpy()  # id 에 따라 dynamic 변수라 이곳에서 numpy 화 진행\n","            short_tp_0_ = res_df['short_tp_0_{}'.format(selection_id)].to_numpy()\n","            short_tp_gap_ = res_df['short_tp_gap_{}'.format(selection_id)].to_numpy()\n","            if l[e_j] <= short_tp_1_[tp_j] + short_tp_gap_[tp_j] * config.tr_set.ei_k or h[e_j] >= short_tp_0_[tp_j] - short_tp_gap_[\n","                tp_j] * config.tr_set.ei_k:\n","                ep_out = 1\n","        else:\n","            long_tp_1_ = res_df['long_tp_1_{}'.format(selection_id)].to_numpy()\n","            long_tp_0_ = res_df['long_tp_0_{}'.format(selection_id)].to_numpy()\n","            long_tp_gap_ = res_df['long_tp_gap_{}'.format(selection_id)].to_numpy()\n","            if h[e_j] >= long_tp_1_[tp_j] - long_tp_gap_[tp_j] * config.tr_set.ei_k or l[e_j] <= long_tp_0_[tp_j] + long_tp_gap_[\n","                tp_j] * config.tr_set.ei_k:\n","                ep_out = 1\n","\n","    return ep_out\n","\n","\n","def ep_loc_point2_v2(res_df, config, i, out_j, side=OrderSide.SELL):\n","    allow_ep_in = 1\n","    if config.selection_id in ['v5_2']:\n","        if side == OrderSide.SELL:\n","            dc_upper_T = res_df['dc_upper_T'].to_numpy()\n","            dc_upper_15T = res_df['dc_upper_15T'].to_numpy()\n","            allow_ep_in *= (dc_upper_T[i - 1] <= dc_upper_15T[i]) & \\\n","                           (dc_upper_15T[i - 1] != dc_upper_15T[i])\n","        else:\n","            dc_lower_T = res_df['dc_lower_T'].to_numpy()\n","            dc_lower_15T = res_df['dc_lower_15T'].to_numpy()\n","            allow_ep_in *= (dc_lower_T[i - 1] >= dc_lower_15T[i]) & \\\n","                           (dc_lower_15T[i - 1] != dc_lower_15T[i])\n","\n","    if config.selection_id in ['v3_4']:\n","        wick_score_list = literal_eval(config.ep_set.point2.wick_score_list)\n","        wick_scores = [res_df['wick_score_{}'.format(s_itv)].to_numpy() for s_itv in literal_eval(config.ep_set.point2.score_itv_list)]\n","        close = res_df['close'].to_numpy()\n","        if side == OrderSide.SELL:\n","            sup_T = res_df['sup_T'].to_numpy()\n","            allow_ep_in *= close[i] < sup_T[i - 1]\n","            if len(wick_score_list) != 0:\n","                allow_ep_in *= wick_scores[0][i] < -wick_score_list[0]\n","        else:\n","            resi_T = res_df['resi_T'].to_numpy()\n","            allow_ep_in *= close[i] > resi_T[i - 1]\n","            if len(wick_score_list) != 0:\n","                allow_ep_in *= wick_scores[0][i] > wick_score_list[0]\n","\n","    if allow_ep_in:\n","        out_j = i\n","    return allow_ep_in, out_j\n","\n","\n","# vectorized calc.\n","# multi-stem 에 따라 dynamic vars.가 입력되기 때문에 class 내부 vars. 로 종속시키지 않음\n","def ep_loc_v3(res_df, config, np_timeidx, show_detail=True, ep_loc_side=OrderSide.SELL):\n","    # ------- param init ------- #\n","    selection_id = config.selection_id\n","    c_i = config.trader_set.complete_index\n","    len_df = len(res_df)\n","    mr_res = np.ones(len_df)\n","    zone_arr = np.full(len_df, 'n')\n","\n","    # ------ process 한번에 처리해서 param_check 만 ver. 별로 하면 될 것 ------ #\n","    #     => public_indi() 가 될 것\n","    #     1. 사용한 param 정보와 matching 된 data 병렬로 나열 logging 될 것\n","    tp_fee, out_fee = calc_tp_out_fee_v2(config)\n","\n","    # ============ tr_thresh ============ #\n","    if config.loc_set.point.short_tr_thresh != \"None\":\n","        if ep_loc_side == OrderSide.SELL:\n","            short_tr_ = res_df['short_tr_{}'.format(selection_id)].to_numpy()\n","            mr_res *= short_tr_ >= config.loc_set.point.short_tr_thresh\n","            # mr_res *= short_tr_ <= config.loc_set.point.short_tr_thresh + 0.1\n","            if show_detail:\n","                sys_log.warning(\n","                    \"short_tr_ >= short_tr_thresh : {:.5f} {:.5f} ({})\".format(short_tr_[c_i], config.loc_set.point.short_tr_thresh, mr_res[c_i]))\n","        else:\n","            long_tr_ = res_df['long_tr_{}'.format(selection_id)].to_numpy()\n","            mr_res *= long_tr_ >= config.loc_set.point.long_tr_thresh\n","            # mr_res *= long_tr_ <= config.loc_set.point.long_tr_thresh + 0.1\n","            if show_detail:\n","                sys_log.warning(\n","                    \"long_tr_ >= long_tr_thresh : {:.5f} {:.5f} ({})\".format(long_tr_[c_i], config.loc_set.point.long_tr_thresh, mr_res[c_i]))\n","\n","    # ============ spread - independent to tr_set ============ #  --> Todo, 사용 안하고 싶은 wave_point\n","    if config.loc_set.point.short_spread != \"None\":\n","        if selection_id in ['v3']:\n","            if ep_loc_side == OrderSide.SELL:\n","                bb_base_5T = res_df['bb_base_5T'].to_numpy()  # to_numpy() 는 ep_loc 에서 진행됨\n","                bb_lower_5T = res_df['bb_lower_5T'].to_numpy()\n","                short_spread = (bb_base_5T - bb_lower_5T - tp_fee * bb_base_5T) / (bb_base_5T - bb_lower_5T + out_fee * bb_base_5T)\n","                mr_res *= short_spread >= config.loc_set.point.short_spread\n","                if show_detail:\n","                    sys_log.warning(\n","                        \"short_spread >= config.loc_set.point.short_spread : {:.5f} {:.5f} ({})\".format(short_spread[c_i], config.loc_set.point.short_spread, mr_res[c_i]))\n","            else:\n","                bb_upper_5T = res_df['bb_upper_5T'].to_numpy()\n","                dc_lower_5T = res_df['dc_lower_5T'].to_numpy()\n","                # mr_res *= (bb_base_5T - dc_lower_5T - tp_fee * bb_upper_5T) / (bb_base_5T - dc_lower_5T + out_fee * bb_base_5T) >= config.loc_set.point.long_spread\n","                long_spread = (bb_upper_5T - dc_lower_5T - tp_fee * bb_upper_5T) / (bb_upper_5T - dc_lower_5T + out_fee * bb_upper_5T)\n","                mr_res *= long_spread >= config.loc_set.point.long_spread\n","                if show_detail:\n","                    sys_log.warning(\n","                        \"long_spread >= config.loc_set.point.long_spread : {:.5f} {:.5f} ({})\".format(long_spread[c_i], config.loc_set.point.long_spread, mr_res[c_i]))                  \n","\n","    # ============ point ratios ============ #\n","    # ------ wave_range_ratio ------ #\n","    if config.loc_set.point.cu_wrr_21 != \"None\":   # for excessive range rejection         \n","      wave_itv = 'T'\n","      wave_period = config.tr_set.wave_period\n","      co_wrr_21_ = res_df['co_wrr_21_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","      cu_wrr_21_ = res_df['cu_wrr_21_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","      if ep_loc_side == OrderSide.SELL:\n","        mr_res *= cu_wrr_21_ <= config.loc_set.point.cu_wrr_21\n","        mr_res *= cu_wrr_21_ >= config.loc_set.point.cu_wrr_21 - 0.2\n","        if show_detail:\n","            sys_log.warning(\"cu_wrr_21_ <= config.loc_set.point.cu_wrr_21 : {:.5f} {:.5f} ({})\".format(cu_wrr_21_[c_i], config.loc_set.point.cu_wrr_21, mr_res[c_i]))\n","      else:\n","        mr_res *= co_wrr_21_ <= config.loc_set.point.co_wrr_21\n","        mr_res *= co_wrr_21_ >= config.loc_set.point.co_wrr_21 - 0.2\n","        if show_detail:\n","            sys_log.warning(\"co_wrr_21_ <= config.loc_set.point.co_wrr_21 : {:.5f} {:.5f} ({})\".format(co_wrr_21_[c_i], config.loc_set.point.co_wrr_21, mr_res[c_i]))\n","\n","    if config.loc_set.point.wrr_32 != \"None\":            \n","      wave_itv = 'T'\n","      wave_period = config.tr_set.wave_period\n","      co_wrr_32_ = res_df['co_wrr_32_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","      cu_wrr_32_ = res_df['cu_wrr_32_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","      if ep_loc_side == OrderSide.SELL:\n","        mr_res *= cu_wrr_32_ <= config.loc_set.point.wrr_32\n","        mr_res *= cu_wrr_32_ >= config.loc_set.point.wrr_32 - 0.5\n","        if show_detail:\n","            sys_log.warning(\"cu_wrr_32_ <= config.loc_set.point.wrr_32 : {:.5f} {:.5f} ({})\".format(cu_wrr_32_[c_i], config.loc_set.point.wrr_32, mr_res[c_i]))\n","      else:\n","        mr_res *= co_wrr_32_ <= config.loc_set.point.wrr_32\n","        mr_res *= co_wrr_32_ >= config.loc_set.point.wrr_32 - 0.5\n","        if show_detail:\n","            sys_log.warning(\"co_wrr_32_ <= config.loc_set.point.wrr_32 : {:.5f} {:.5f} ({})\".format(co_wrr_32_[c_i], config.loc_set.point.wrr_32, mr_res[c_i]))\n","\n","    # ------ enough_space - Todo, future_data ------ #\n","    if config.loc_set.point.co_es != \"None\":      \n","      itv, period1 = config.tr_set.p1_itv1, config.tr_set.p1_period1 \n","      b1_cu_es_ = res_df['b1_cu_es_{}{}'.format(itv, period1)].to_numpy()\n","      b1_co_es_ = res_df['b1_co_es_{}{}'.format(itv, period1)].to_numpy()\n","      if ep_loc_side == OrderSide.SELL:\n","        mr_res *= b1_co_es_ >= config.loc_set.point.co_es\n","        mr_res *= b1_co_es_ <= config.loc_set.point.co_es + 2\n","        if show_detail:\n","            sys_log.warning(\"b1_co_es_ >= config.loc_set.point.co_es : {:.5f} {:.5f} ({})\".format(b1_co_es_[c_i], config.loc_set.point.co_es, mr_res[c_i]))\n","      else:\n","        mr_res *= b1_cu_es_ >= config.loc_set.point.cu_es\n","        mr_res *= b1_cu_es_ <= config.loc_set.point.cu_es + 1\n","        if show_detail:\n","            sys_log.warning(\"b1_cu_es_ >= config.loc_set.point.cu_es : {:.5f} {:.5f} ({})\".format(b1_cu_es_[c_i], config.loc_set.point.cu_es, mr_res[c_i]))\n","\n","    # ------------ wick_ratio - Todo, future_data ------------ #\n","    if config.loc_set.point.short_wick_ratio != \"None\":\n","      b1_upper_wick_ratio_ = res_df['b1_upper_wick_ratio_{}'.format(config.loc_set.point.wick_itv)].to_numpy()\n","      b1_lower_wick_ratio_ = res_df['b1_lower_wick_ratio_{}'.format(config.loc_set.point.wick_itv)].to_numpy()      \n","      if ep_loc_side == OrderSide.SELL:\n","          # mr_res *= b1_upper_wick_ratio_ >= config.loc_set.point.short_wick_ratio\n","          mr_res *= b1_lower_wick_ratio_ >= config.loc_set.point.short_wick_ratio\n","          if show_detail:\n","              sys_log.warning(\"b1_lower_wick_ratio_ >= config.loc_set.point.short_wick_ratio : {:.5f} {:.5f} ({})\".format(b1_lower_wick_ratio_[c_i], config.loc_set.point.short_wick_ratio, mr_res[c_i]))\n","      else:\n","          # mr_res *= b1_lower_wick_ratio_ >= config.loc_set.point.long_wick_ratio\n","          mr_res *= b1_upper_wick_ratio_ >= config.loc_set.point.long_wick_ratio\n","          if show_detail:\n","              sys_log.warning(\"b1_upper_wick_ratio_ >= config.loc_set.point.long_wick_ratio : {:.5f} {:.5f} ({})\".format(b1_upper_wick_ratio_[c_i], config.loc_set.point.long_wick_ratio, mr_res[c_i]))\n","\n","    # ------ candle_range_ratio - Todo, future_data ------ #\n","    if config.loc_set.point.crr != \"None\":   \n","      tf_entry = to_itvnum(config.loc_set.point.tf_entry)\n","      b1_crr_ = res_df['crr_{}'.format(config.loc_set.point.tf_entry)].shift(tf_entry).to_numpy()\n","      mr_res *= b1_crr_ >= config.loc_set.point.crr\n","      if show_detail:\n","          sys_log.warning(\"b1_crr_ >= config.loc_set.point.crr : {:.5f} {:.5f} ({})\".format(b1_crr_[c_i], config.loc_set.point.crr, mr_res[c_i]))\n","    \n","    # ------ dc_over_body_ratio ------ #\n","    if config.loc_set.point.dbr != \"None\":\n","      b1_lwdbr = res_df['b1_lwdbr'].to_numpy()\n","      b1_updbr = res_df['b1_updbr'].to_numpy()\n","      if ep_loc_side == OrderSide.SELL:        \n","        mr_res *= b1_lwdbr >= config.loc_set.point.dbr\n","        if show_detail:\n","            sys_log.warning(\n","                \"b1_lwdbr >= config.loc_set.point.dbr : {:.5f} {:.5f} ({})\".format(b1_lwdbr[c_i], config.loc_set.point.dbr, mr_res[c_i]))\n","      else:\n","        mr_res *= b1_updbr >= config.loc_set.point.dbr\n","        if show_detail:\n","            sys_log.warning(\n","                \"b1_updbr >= config.loc_set.point.dbr : {:.5f} {:.5f} ({})\".format(b1_updbr[c_i], config.loc_set.point.dbr, mr_res[c_i]))\n","            \n","    if config.loc_set.point.dbr2 != \"None\":\n","      b1_lwdbr = res_df['b1_lwdbr'].to_numpy()\n","      b1_updbr = res_df['b1_updbr'].to_numpy()\n","      if ep_loc_side == OrderSide.SELL:    \n","        mr_res *= b1_updbr >= config.loc_set.point.dbr2\n","        if show_detail:\n","            sys_log.warning(\n","                \"b1_updbr >= config.loc_set.point.dbr2 : {:.5f} {:.5f} ({})\".format(b1_updbr[c_i], config.loc_set.point.dbr2, mr_res[c_i]))\n","      else:\n","        mr_res *= b1_lwdbr >= config.loc_set.point.dbr2\n","        if show_detail:\n","            sys_log.warning(\n","                \"b1_lwdbr >= config.loc_set.point.dbr2 : {:.5f} {:.5f} ({})\".format(b1_lwdbr[c_i], config.loc_set.point.dbr2, mr_res[c_i]))\n","\n","    # ------ wick_body_ratio ------ #\n","    if config.loc_set.point.wbr != \"None\":\n","        wave_body_ratio = res_df['wave_body_ratio'].to_numpy()\n","        mr_res *= wave_body_ratio >= config.loc_set.point.wbr\n","        if show_detail:\n","            sys_log.warning(\n","                \"wave_body_ratio >= config.loc_set.point.wbr : {:.5f} {:.5f} ({})\".format(wave_body_ratio[c_i], config.loc_set.point.wbr, mr_res[c_i]))\n","            \n","    # ------ body_rel_ratio ------ #\n","    if config.loc_set.point.brr != \"None\":\n","        body_rel_ratio_ = res_df['body_rel_ratio_{}'.format(config.loc_set.point.tf_entry)].to_numpy()\n","        mr_res *= body_rel_ratio_ <= config.loc_set.point.brr\n","        if show_detail:\n","            sys_log.warning(\n","                \"body_rel_ratio_ <= config.loc_set.point.brr : {:.5f} {:.5f} ({})\".format(body_rel_ratio_[c_i], config.loc_set.point.brr, mr_res[c_i]))\n","\n","    # ------ pumping_ratio ------ #\n","    if config.loc_set.point.ppr != \"None\":\n","      if ep_loc_side == OrderSide.SELL:\n","        short_ppr_ = res_df['short_ppr_{}'.format(selection_id)].to_numpy()\n","        mr_res *= short_ppr_ >= config.loc_set.point.ppr\n","        if show_detail:\n","            sys_log.warning(\"short_ppr_ >= config.loc_set.point.ppr : {:.5f} {:.5f} ({})\".format(short_ppr_[c_i], config.loc_set.point.ppr, mr_res[c_i]))\n","      else:\n","        long_ppr_ = res_df['long_ppr_{}'.format(selection_id)].to_numpy()\n","        mr_res *= long_ppr_ >= config.loc_set.point.ppr\n","        if show_detail:\n","            sys_log.warning(\"long_ppr_ >= config.loc_set.point.ppr : {:.5f} {:.5f} ({})\".format(long_ppr_[c_i], config.loc_set.point.ppr, mr_res[c_i]))\n"," \n","    # ============ rtc_zone  ============ #  --> Todo, 사용 안하고 싶은 wave_dur., 추후 zone 으로 옮길 것\n","    # ------ dtk ------ #\n","    if config.loc_set.zone.dt_k != \"None\":\n","        # ------ dc_v2 ------ #\n","        dc_lower_v2 = res_df['dc_lower_v2'.format(selection_id)].to_numpy()\n","        short_dtk_1_ = res_df['short_dtk_1_{}'.format(selection_id)].to_numpy() - \\\n","                       res_df['short_dtk_gap_{}'.format(selection_id)].to_numpy() * config.loc_set.zone.dt_k\n","        dc_upper_v2 = res_df['dc_upper_v2'.format(selection_id)].to_numpy()\n","        long_dtk_1_ = res_df['long_dtk_1_{}'.format(selection_id)].to_numpy() + \\\n","                      res_df['long_dtk_gap_{}'.format(selection_id)].to_numpy() * config.loc_set.zone.dt_k\n","        if ep_loc_side == OrderSide.SELL:\n","            mr_res *= dc_lower_v2 >= short_dtk_1_\n","            if show_detail:\n","                sys_log.warning(\n","                    \"dc_lower_v2 >= short_dtk_1_ : {:.5f} {:.5f} ({})\".format(dc_lower_v2[c_i], short_dtk_1_[c_i], mr_res[c_i]))\n","        else:\n","            mr_res *= dc_upper_v2 <= long_dtk_1_\n","            if show_detail:\n","                sys_log.warning(\n","                    \"dc_upper_v2 <= long_dtk_1_ : {:.5f} {:.5f} ({})\".format(dc_upper_v2[c_i], long_dtk_1_[c_i], mr_res[c_i]))\n","                \n","    # ============ zone ============ #\n","    # ------ hl_loc_pct ------ #\n","    if config.loc_set.zone.hl_loc_pct != \"None\":      \n","      wave_high_loc_pct_ = res_df['wave_high_loc_pct_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","      wave_low_loc_pct_ = res_df['wave_low_loc_pct_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","\n","      if ep_loc_side == OrderSide.SELL:\n","        mr_res *= wave_high_loc_pct_ >= config.loc_set.zone.hl_loc_pct\n","        mr_res *= wave_high_loc_pct_ <= config.loc_set.zone.hl_loc_pct + 0.5\n","        if show_detail:\n","            sys_log.warning(\"wave_high_loc_pct_ >= config.loc_set.zone.hl_loc_pct : {:.5f} {:.5f} ({})\".format(wave_high_loc_pct_[c_i], config.loc_set.zone.hl_loc_pct, mr_res[c_i]))\n","      else:\n","        mr_res *= wave_low_loc_pct_ >= config.loc_set.zone.hl_loc_pct\n","        mr_res *= wave_low_loc_pct_ <= config.loc_set.zone.hl_loc_pct + 0.5\n","        if show_detail:\n","            sys_log.warning(\"wave_low_loc_pct_ >= config.loc_set.zone.hl_loc_pct : {:.5f} {:.5f} ({})\".format(wave_low_loc_pct_[c_i], config.loc_set.zone.hl_loc_pct, mr_res[c_i]))\n","\n","\n","    # ------ config var. 이 등록되지 않은 dur. 은 selection_id 으로 조건문을 나눔 (lvrg_set 과 동일) ------ #\n","    if config.loc_set.zone.use_zone:\n","\n","        # ------------------ wave_biaser (sr_confirmer) ------------------ #\n","        if selection_id in ['3_9']:     \n","          itv, period1, period2 = config.tr_set.p1_itv1, config.tr_set.p1_period1, config.tr_set.p1_period2          \n","\n","          if ep_loc_side == OrderSide.SELL:\n","            short_wave_high_ = res_df['short_wave_high_{}{}{}'.format(itv, period1, period2)]\n","            bb_lower_5T_amax = get_line(res_df['short_wave_high_idx_{}{}{}'.format(itv, period1, period2)].to_numpy(), res_df['bb_lower_5T'].to_numpy())\n","            mr_res *= short_wave_high_ <= bb_lower_5T_amax\n","            if show_detail:\n","                sys_log.warning(\"short_wave_high_ <= bb_lower_5T_amax : {:.5f} {:.5f} ({})\".format(short_wave_high_[c_i], bb_lower_5T_amax[c_i], mr_res[c_i]))\n","          else:\n","            long_wave_low_ = res_df['long_wave_low_{}{}{}'.format(itv, period1, period2)]\n","            bb_upper_5T_amax = get_line(res_df['long_wave_low_idx_{}{}{}'.format(itv, period1, period2)].to_numpy(), res_df['bb_upper_5T'].to_numpy())\n","            mr_res *= long_wave_low_ >= bb_upper_5T_amax\n","            if show_detail:\n","                sys_log.warning(\"long_wave_low_ >= bb_upper_5T_amax : {:.5f} {:.5f} ({})\".format(long_wave_low_[c_i], bb_upper_5T_amax[c_i], mr_res[c_i]))\n","\n","\n","        if selection_id in ['4_3', '3_5', '3_51']:\n","            dc_base_T20 = res_df['dc_base_T20'].to_numpy()\n","            dc_base_3T20 = res_df['dc_base_3T20'].to_numpy()\n","            # b1_dc_base_3T20 = res_df['dc_base_3T20'].shift(3).to_numpy()\n","            # dc_base_5T = res_df['dc_base_5T'].to_numpy()\n","            # dc_base_15T = res_df['dc_base_15T'].to_numpy()\n","            # dc_base_30T = res_df['dc_base_30T'].to_numpy()\n","            dc_base_H20 = res_df['dc_base_H20'].to_numpy()\n","            # dc_base_4H = res_df['dc_base_4H'].to_numpy()\n","            # dc_base_D = res_df['dc_base_D'].to_numpy()\n","\n","            itv, period1, period2 = config.tr_set.p1_itv1, config.tr_set.p1_period1, config.tr_set.p1_period2\n","            if ep_loc_side == OrderSide.SELL:\n","                # ------ short_base_ <= dc_base_3T20 ------ #\n","                short_base_ = res_df['short_base_{}{}{}'.format(itv, period1, period2)].to_numpy()\n","                mr_res *= short_base_ <= dc_base_3T20\n","                if show_detail:\n","                    sys_log.warning(\"short_base_ <= dc_base_3T20 : {:.5f} {:.5f} ({})\".format(short_base_[c_i], dc_base_3T20[c_i], mr_res[c_i]))\n","\n","                # mr_res *= short_base_ <= dc_base_T20\n","                # if show_detail:\n","                #     sys_log.warning(\"short_base_ <= dc_base_T20 : {:.5f} {:.5f} ({})\".format(short_base_[c_i], dc_base_T20[c_i], mr_res[c_i]))\n","\n","                # ------ reject csd ------ #\n","                # dc_upper_ = res_df['dc_upper_{}{}'.format(itv, period1)].to_numpy()\n","                # mr_res *= dc_upper_ <= dc_base_3T\n","                # if show_detail:\n","                #     sys_log.warning(\"dc_upper_ <= dc_base_3T20 : {:.5f} {:.5f} ({})\".format(dc_upper_[c_i], dc_base_3T[c_i], mr_res[c_i]))\n","\n","                # Todo, 부호 조심\n","                # dc_upper2_ = res_df['dc_upper_{}{}'.format(itv, period2)].to_numpy()\n","                # mr_res *= dc_upper2_ >= dc_base_H\n","                # if show_detail:\n","                #     sys_log.warning(\"dc_upper2_ >= dc_base_H20 : {:.5f} {:.5f} ({})\".format(dc_upper2_[c_i], dc_base_H[c_i], mr_res[c_i]))  \n","\n","                # long 과 동일한 dur.\n","                dc_lower2_ = res_df['dc_lower_{}{}'.format(itv, period2)].to_numpy()\n","                mr_res *= dc_lower2_ >= dc_base_H20\n","                if show_detail:\n","                    sys_log.warning(\"dc_lower2_ >= dc_base_H20 : {:.5f} {:.5f} ({})\".format(dc_lower2_[c_i], dc_base_H20[c_i], mr_res[c_i]))  \n","\n","                # ------ consecutive base ascender ------ #\n","                # ------ 1. roll_min ------ #\n","                dc_base_3T20_rollmin = res_df['dc_base_3T20'].rolling(config.loc_set.zone.base_roll_period).min().to_numpy()\n","                mr_res *= dc_base_3T20_rollmin == dc_base_3T20\n","                if show_detail:\n","                    sys_log.warning(\n","                        \"dc_base_3T20_rollmin == dc_base_3T2020 : {:.5f} {:.5f} ({})\".format(dc_base_3T20_rollmin[c_i], dc_base_3T20[c_i], mr_res[c_i]))\n","            else:\n","                # ------ long_base >= dc_base_3T20 ------ #\n","                long_base_ = res_df['long_base_{}{}{}'.format(itv, period1, period2)].to_numpy()\n","                mr_res *= long_base_ >= dc_base_3T20\n","                if show_detail:\n","                    sys_log.warning(\"long_base_ >= dc_base_3T20 : {:.5f} {:.5f} ({})\".format(long_base_[c_i], dc_base_3T20[c_i], mr_res[c_i]))\n","\n","                # mr_res *= long_base_ >= dc_base_T20\n","                # if show_detail:\n","                #     sys_log.warning(\"long_base_ >= dc_base_T20 : {:.5f} {:.5f} ({})\".format(long_base_[c_i], dc_base_T20[c_i], mr_res[c_i]))\n","\n","                # ------ reject csd ------ #\n","                # dc_lower_ = res_df['dc_lower_{}{}'.format(itv, period1)].to_numpy()\n","                # mr_res *= dc_lower_ >= dc_base_3T\n","                # if show_detail:\n","                #     sys_log.warning(\"dc_lower_ >= dc_base_3T20 : {:.5f} {:.5f} ({})\".format(dc_lower_[c_i], dc_base_3T[c_i], mr_res[c_i]))\n","\n","                dc_lower2_ = res_df['dc_lower_{}{}'.format(itv, period2)].to_numpy()\n","                mr_res *= dc_lower2_ >= dc_base_H20\n","                if show_detail:\n","                    sys_log.warning(\"dc_lower2_ >= dc_base_H20 : {:.5f} {:.5f} ({})\".format(dc_lower2_[c_i], dc_base_H20[c_i], mr_res[c_i]))\n","\n","                # bb_lower_5T = res_df['bb_lower_5T'].to_numpy()\n","                # mr_res *= dc_lower2_ >= bb_lower_5T\n","                # if show_detail:\n","                #     sys_log.warning(\"dc_lower2_ >= bb_lower_5T : {:.5f} {:.5f} ({})\".format(dc_lower2_[c_i], bb_lower_5T[c_i], mr_res[c_i]))\n","\n","                # ------ alignment ------ #\n","                # mr_res *= (dc_base_3T20 > dc_base_5T) & (dc_base_5T > dc_base_15T) & (dc_base_15T > dc_base_30T)\n","\n","                # ------ consecutive base ascender ------ #\n","                # ------ 1. roll_max ------ #\n","                dc_base_3T20_rollmax = res_df['dc_base_3T20'].rolling(config.loc_set.zone.base_roll_period).max().to_numpy()\n","                mr_res *= dc_base_3T20_rollmax == dc_base_3T20\n","                if show_detail:\n","                    sys_log.warning(\n","                        \"dc_base_3T20_rollmax == dc_base_3T2020 : {:.5f} {:.5f} ({})\".format(dc_base_3T20_rollmax[c_i], dc_base_3T20[c_i], mr_res[c_i]))\n","\n","                # ------ 2. roll_max_v2 - ascender  ------ #\n","                # dc_base_3T_ascend = (res_df['dc_base_3T'] >= res_df['dc_base_3T'].shift(3)).rolling(config.loc_set.zone.base_roll_period).sum().to_numpy()\n","                # # mr_res *= dc_base_3T_ascend == config.loc_set.zone.base_roll_period\n","                # mr_res *= dc_base_3T_ascend != config.loc_set.zone.base_roll_period\n","                # if show_detail:\n","                #     sys_log.warning(\"dc_base_3T_ascend == config.loc_set.zone.base_roll_period : {:.5f} {:.5f} ({})\".format(dc_base_3T_ascend[c_i], config.loc_set.zone.base_roll_period, mr_res[c_i]))\n","\n","\n","\n","    # -------------- zoned tr_set - post_work -------------- #\n","    if config.tr_set.c_ep_gap != \"None\" or config.tr_set.t_out_gap != \"None\":\n","        #       by zone_dtk       #\n","        #         c_zone        #\n","        zone_dc_upper_v2_ = res_df['zone_dc_upper_v2'.format(selection_id)].to_numpy()\n","        long_dtk_plot_1 = res_df['long_dtk_plot_1'].to_numpy() + res_df['long_dtk_plot_gap'].to_numpy() * config.loc_set.zone.zone_dt_k\n","        zone_dc_lower_v2_ = res_df['zone_dc_lower_v2'.format(selection_id)].to_numpy()\n","        short_dtk_plot_1 = res_df['short_dtk_plot_1'].to_numpy() - res_df['short_dtk_plot_gap'].to_numpy() * config.loc_set.zone.zone_dt_k\n","        if ep_loc_side == OrderSide.SELL:\n","            zone_res = zone_dc_upper_v2_ > long_dtk_plot_1  # mr_res 와는 별개임\n","            pos = 'short'\n","        else:\n","            zone_res = zone_dc_lower_v2_ < short_dtk_plot_1\n","            pos = 'long'\n","\n","        # static 여부에 따른 vectorized adj. - dynamic 은 vectorize 불가\n","        if config.ep_set.static_ep and config.tr_set.c_ep_gap != \"None\":\n","            res_df['{}_ep_{}'.format(pos, selection_id)][zone_res] = res_df['{}_ep2_{}'.format(pos, selection_id)][zone_res]\n","        if config.out_set.static_out and config.tr_set.t_out_gap != \"None\":\n","            res_df['{}_out_{}'.format(pos, selection_id)][~zone_res] = res_df['{}_out2_{}'.format(pos, selection_id)][\n","                ~zone_res]  # t_zone 에 대한 out2 setting\n","        zone_arr = np.where(zone_res == 1, 'c', 't')\n","\n","    return mr_res, zone_arr  # mr_res 의 True idx 가 open signal"]},{"cell_type":"markdown","source":["#### legacy"],"metadata":{"id":"EQ63Jwpvr7qA"}},{"cell_type":"code","source":["      \n","    if config.loc_set.point.wrr != \"None\":            \n","      wave_itv = 'T'\n","      wave_period = config.tr_set.wave_period\n","      co_wrr_ = res_df['co_wrr_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","      cu_wrr_ = res_df['cu_wrr_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","      if ep_loc_side == OrderSide.SELL:\n","        mr_res *= co_wrr_ <= config.loc_set.point.wrr\n","        if show_detail:\n","            sys_log.warning(\"co_wrr_ <= config.loc_set.point.wrr : {:.5f} {:.5f} ({})\".format(co_wrr_[c_i], config.loc_set.point.wrr, mr_res[c_i]))\n","      else:\n","        mr_res *= cu_wrr_ <= config.loc_set.point.wrr\n","        if show_detail:\n","            sys_log.warning(\"cu_wrr_ <= config.loc_set.point.wrr : {:.5f} {:.5f} ({})\".format(cu_wrr_[c_i], config.loc_set.point.wrr, mr_res[c_i]))\n","            \n","      # if ep_loc_side == OrderSide.SELL:\n","      #   mr_res *= cu_es_ >= config.loc_set.point.cu_es\n","      #   mr_res *= cu_es_ <= config.loc_set.point.cu_es + 2\n","      #   if show_detail:\n","      #       sys_log.warning(\"cu_es_ >= config.loc_set.point.cu_es : {:.5f} {:.5f} ({})\".format(cu_es_[c_i], config.loc_set.point.cu_es, mr_res[c_i]))\n","      # else:\n","      #   mr_res *= co_es_ >= config.loc_set.point.co_es\n","      #   mr_res *= co_es_ <= config.loc_set.point.co_es + 1\n","      #   if show_detail:\n","      #       sys_log.warning(\"co_es_ >= config.loc_set.point.co_es : {:.5f} {:.5f} ({})\".format(co_es_[c_i], config.loc_set.point.co_es, mr_res[c_i]))\n","\n","\n","      if ep_loc_side == OrderSide.SELL:\n","          mr_res *= lower_wick_ratio_ >= config.loc_set.point.wick_ratio\n","          # mr_res *= upper_wick_ratio_ >= config.loc_set.point.wick_ratio\n","          if show_detail:\n","              sys_log.warning(\"upper_wick_ratio_ >= config.loc_set.point.wick_ratio : {:.5f} {:.5f} ({})\".format(upper_wick_ratio_[c_i], config.loc_set.point.wick_ratio, mr_res[c_i]))\n","      else:\n","          mr_res *= upper_wick_ratio_ >= config.loc_set.point.wick_ratio\n","          mr_res *= upper_wick_ratio_ <= config.loc_set.point.wick_ratio + 0.1\n","          # mr_res *= lower_wick_ratio_ >= config.loc_set.point.wick_ratio\n","          if show_detail:\n","              sys_log.warning(\"lower_wick_ratio_ >= config.loc_set.point.wick_ratio : {:.5f} {:.5f} ({})\".format(lower_wick_ratio_[c_i], config.loc_set.point.wick_ratio, mr_res[c_i]))\n","              \n","      crr_ = res_df['crr_{}'.format(config.loc_set.point.tf_entry)].to_numpy()\n","      mr_res *= crr_ >= config.loc_set.point.crr\n","     \n","      if show_detail:\n","          sys_log.warning(\"crr_ >= config.loc_set.point.crr : {:.5f} {:.5f} ({})\".format(crr_[c_i], config.loc_set.point.crr, mr_res[c_i]))\n","\n","      b1_upper_wick_ratio_ = res_df['upper_wick_ratio_{}'.format(config.loc_set.point.wick_itv)].shift(itv_num).to_numpy()\n","      b1_lower_wick_ratio_ = res_df['lower_wick_ratio_{}'.format(config.loc_set.point.wick_itv)].shift(itv_num).to_numpy()\n","\n","      if ep_loc_side == OrderSide.SELL:\n","          upper_wick_ratio_ = res_df['upper_wick_ratio_{}'.format(config.loc_set.point.wick_itv)].to_numpy()\n","          mr_res *= upper_wick_ratio_ >= config.loc_set.point.wick_ratio\n","          if show_detail:\n","              sys_log.warning(\"upper_wick_ratio_ >= config.loc_set.point.wick_ratio : {:.5f} {:.5f} ({})\".format(upper_wick_ratio_[c_i], config.loc_set.point.wick_ratio, mr_res[c_i]))\n","      else:\n","          lower_wick_ratio_ = res_df['lower_wick_ratio_{}'.format(config.loc_set.point.wick_itv)].to_numpy()\n","          mr_res *= lower_wick_ratio_ >= config.loc_set.point.wick_ratio\n","          if show_detail:\n","              sys_log.warning(\"lower_wick_ratio_ >= config.loc_set.point.wick_ratio : {:.5f} {:.5f} ({})\".format(lower_wick_ratio_[c_i], config.loc_set.point.wick_ratio, mr_res[c_i]))\n","\n","    if config.loc_set.point.cppr != \"None\":   \n","      tf_entry = to_itvnum(config.loc_set.point.tf_entry)\n","      b1_cppr_ = res_df['b1_cppr_{}'.format(config.loc_set.point.tf_entry)].to_numpy()  # check b1's cppr in ep_loc\n","      if ep_loc_side == OrderSide.SELL:\n","        mr_res *= b1_cppr_ >= config.loc_set.point.cppr\n","        if show_detail:\n","            sys_log.warning(\"b1_cppr_ >= config.loc_set.point.cppr : {:.5f} {:.5f} ({})\".format(b1_cppr_[c_i], config.loc_set.point.cppr, mr_res[c_i]))\n","      else:\n","        mr_res *= b1_cppr_ <= -config.loc_set.point.cppr\n","        if show_detail:\n","            sys_log.warning(\"b1_cppr_ <= -config.loc_set.point.cppr : {:.5f} {:.5f} ({})\".format(b1_cppr_[c_i], config.loc_set.point.cppr, mr_res[c_i]))\n","            \n","    # ------------ candle_score ------------ #\n","    wick_score_list = literal_eval(config.loc_set.point.wick_score_list)\n","    if len(wick_score_list) != 0:\n","        score_itv_list = literal_eval(config.loc_set.point.score_itv_list)\n","        # ------ candle_score_v0 (1m initial tick 기준임) ------ #  Todo - higher timeframe 경우 back_data 사용해야함\n","        for wick_score_, score_itv_ in zip(wick_score_list, score_itv_list):\n","            wick_score = res_df['wick_score_{}'.format(score_itv_)].to_numpy()\n","            if ep_loc_side == OrderSide.SELL:\n","                mr_res *= wick_score <= -wick_score_\n","                if show_detail:\n","                    sys_log.warning(\"wick_score <= -wick_score_ : {:.5f} {:.5f} ({})\".format(wick_score[c_i], -wick_score_, mr_res[c_i]))\n","            else:\n","                mr_res *= wick_score >= wick_score_\n","                if show_detail:\n","                    sys_log.warning(\"wick_score >= wick_score_ : {:.5f} {:.5f} ({})\".format(wick_score[c_i], wick_score_, mr_res[c_i]))\n","            \n","\n","        # ------------------ swing_middle ------------------ #\n","        # ------------ 1. envelope ------------ #\n","\n","        # ------ a. dc ------ #\n","        # ep_loc check 기준 idx 가 entry 기준이라는 걸 명심\n","        if selection_id in ['v3_2']:\n","            hc_itv = '15T'\n","            dc_itv = '15T'\n","            shift_num = [0, to_itvnum(hc_itv)]\n","            div_res = [1, 0]\n","            for itv_num, res in zip(shift_num, div_res):\n","                close_ = res_df['close_{}'.format(hc_itv)].shift(itv_num).to_numpy()  # close_bar timein 사용하는 경우, 특수로 shift(0) 사용가능\n","                if ep_loc_side == OrderSide.SELL:\n","                    dc_lower_ = res_df['dc_lower_%s' % dc_itv].shift(itv_num).to_numpy()\n","                    mr_res *= (close_ < dc_lower_) == res\n","                else:\n","                    dc_upper_ = res_df['dc_upper_%s' % dc_itv].shift(itv_num).to_numpy()\n","                    mr_res *= (close_ > dc_upper_) == res\n","\n","        # ------------ 2. degree ------------ #\n","        # ------ a. norm_body_ratio ------ #\n","        if config.loc_set.zone.abs_ratio != \"None\":\n","            itv = config.loc_set.point.tf_entry\n","            abs_ratio_ = res_df['abs_ratio_{}'.format(itv)].to_numpy()\n","            mr_res *= abs_ratio_ >= config.loc_set.zone.abs_ratio\n","            # mr_res *= abs_ratio_ <= config.loc_set.zone.abs_ratio\n","\n","    # ------------ 2. imbalance_ratio ------------ #\n","    if config.loc_set.zone.ir != \"None\":\n","        itv = config.loc_set.point.tf_entry\n","        itv_num = to_itvnum(itv)\n","        if ep_loc_side == OrderSide.SELL:\n","            short_ir_ = res_df['short_ir_{}'.format(itv)].to_numpy()\n","            # short_ir_ = res_df['short_ir_{}'.format(itv)].shift(itv_num).to_numpy()\n","\n","            # mr_res *= short_ir_ >= config.loc_set.zone.ir     # greater\n","            mr_res *= short_ir_ <= config.loc_set.zone.ir  # lesser\n","            if show_detail:\n","                sys_log.warning(\n","                    \"short_ir_ <= config.loc_set.zone.ir : {:.5f} {:.5f} ({})\".format(short_ir_[c_i], config.loc_set.zone.ir, mr_res[c_i]))\n","        else:\n","            long_ir_ = res_df['long_ir_{}'.format(itv)].to_numpy()\n","            # long_ir_ = res_df['long_ir_{}'.format(itv)].shift(itv_num).to_numpy()\n","\n","            # mr_res *= long_ir_ >= config.loc_set.zone.ir\n","            mr_res *= long_ir_ <= config.loc_set.zone.ir\n","            if show_detail:\n","                sys_log.warning(\n","                    \"long_ir_ <= config.loc_set.zone.ir : {:.5f} {:.5f} ({})\".format(long_ir_[c_i], config.loc_set.zone.ir, mr_res[c_i]))\n","                \n","        # if selection_id in ['3_6']:\n","        #   itv, period1, period2 = config.loc_set.point.p1_itv0, config.loc_set.point.p1_period1, config.loc_set.point.p1_period2          \n","\n","        #   if ep_loc_side == OrderSide.SELL:\n","        #     high_5T = res_df['high_5T'].to_numpy()  # Todo, tf_entry - 1 open 기준이라 future_data 사용 가능\n","        #     short_base_ = res_df['short_base_{}{}{}'.format(itv, period1, period2)]\n","        #     mr_res *= high_5T < short_base_\n","        #     if show_detail:\n","        #         sys_log.warning(\n","        #             \"high_5T < short_base_ : {:.5f} {:.5f} ({})\".format(high_5T[c_i], short_base_[c_i], mr_res[c_i]))\n","        #   else:\n","        #     low_5T = res_df['low_5T'].to_numpy()  # Todo, tf_entry - 1 open 기준이라 future_data 사용 가능\n","        #     long_base_ = res_df['long_base_{}{}{}'.format(itv, period1, period2)]\n","        #     mr_res *= low_5T > long_base_\n","        #     if show_detail:\n","        #         sys_log.warning(\n","        #             \"low_5T > long_base_ : {:.5f} {:.5f} ({})\".format(low_5T[c_i], long_base_[c_i], mr_res[c_i]))'\n","        \n","        # ------ dc_base ------ #\n","        # if selection_id in ['4']:  # 'v3_3', 'v3_4',\n","        #   hc_itv = '5T'\n","        #   dc_itv = '5T'\n","        #   itv_num = to_itvnum(hc_itv)\n","        #   close_ = res_df['close_{}'.format(hc_itv)].shift(itv_num).to_numpy()   # 따라서 future_data 사용시, shifting 필요함\n","        #   if ep_loc_side == OrderSide.SELL:\n","        #     dc_lower_ = res_df['dc_lower_%s' % dc_itv].shift(itv_num).to_numpy()\n","        #     mr_res *= close_ < dc_lower_\n","        #   else:\n","        #     dc_upper_ = res_df['dc_upper_%s' % dc_itv].shift(itv_num).to_numpy()\n","        #     mr_res *= close_ > dc_upper_\n","\n","        # ------ ema ------ #\n","        # if selection_id in ['v5_2']: # 'v3'\n","        #   ema_5T = res_df['ema_5T'].to_numpy()\n","        #   if ep_loc_side == OrderSide.SELL:\n","        #     mr_res *= close < ema_5T\n","        #   else:\n","        #     mr_res *= close > ema_5T\n","        \n","        # ------ b. bb ------ #\n","        # close = res_df['close'].to_numpy()\n","\n","        # if selection_id in ['v3_3']:\n","        #   open = res_df['open'].to_numpy()\n","        #   if ep_loc_side == OrderSide.SELL:\n","        #     bb_lower_1m = res_df['bb_lower_1m'].to_numpy()\n","        #     # mr_res *= close <= bb_lower_1m\n","        #     mr_res *= open <= bb_lower_1m\n","        #   else:\n","        #     bb_upper_1m = res_df['bb_upper_1m'].to_numpy()\n","        #     # mr_res *= close >= bb_upper_1m\n","        #     mr_res *= open >= bb_upper_1m\n","\n","        if selection_id in ['4_1']:\n","            if ep_loc_side == OrderSide.SELL:\n","                bb_lower_15T = res_df['bb_lower_15T'].to_numpy()\n","                short_ep_ = res_df['short_ep_{}'.format(selection_id)].to_numpy()\n","                mr_res *= bb_lower_15T >= short_ep_\n","            else:\n","                bb_upper_15T = res_df['bb_upper_15T'].to_numpy()\n","                long_ep_ = res_df['long_ep_{}'.format(selection_id)].to_numpy()\n","                mr_res *= bb_upper_15T <= long_ep_\n","\n","        # if selection_id in ['v5_2']:\n","        #   bb_upper2_ = res_df['bb_upper2_%s' % config.loc_set.zone.bbz_itv].to_numpy()\n","        #   bb_lower2_ = res_df['bb_lower2_%s' % config.loc_set.zone.bbz_itv].to_numpy()\n","        #   if ep_loc_side == OrderSide.SELL:\n","        #     mr_res *= bb_upper2_ < close\n","        #   else:\n","        #     mr_res *= bb_lower2_ > close\n","\n","        # degree_list = literal_eval(config.loc_set.zone.degree_list)\n","        # if len(degree_list) != 0:\n","        # # if selection_id in ['v3_3', 'v3_4']:\n","        #   norm_close_15 = res_df['norm_close_15'].to_numpy()   # -> 이거 뭘로 만들었는지 불분명함,,\n","        #   b1_norm_close_15 = res_df['norm_close_15'].shift(15).to_numpy()\n","\n","        #   if ep_loc_side == OrderSide.SELL:\n","        #     mr_res *= norm_close_15 <= -degree_list[0]\n","        #     # mr_res *= b1_norm_close_15 <= -degree_list[1]\n","        #   else:\n","        #     mr_res *= norm_close_15 >= degree_list[0]\n","        #     # mr_res *= b1_norm_close_15 >= degree_list[1]\n","\n","        # ------ b. dc ------ #\n","        # if selection_id in ['v3_3']:\n","        #   if ep_loc_side == OrderSide.SELL:\n","        #     dc_lower_ = res_df['dc_lower_1m'].to_numpy()\n","        #     b1_dc_lower_ = res_df['dc_lower_1m'].shift(1).to_numpy()\n","        #     mr_res *= dc_lower_ < b1_dc_lower_\n","        #   else:\n","        #     dc_upper_ = res_df['dc_upper_1m'].to_numpy()\n","        #     b1_dc_upper_ = res_df['dc_upper_1m'].shift(1).to_numpy()\n","        #     mr_res *= dc_upper_ > b1_dc_upper_\n","\n","        # ------ c. sar ------ #\n","        # if selection_id in ['v3_3']:\n","        # sar_uptrend_3T = res_df['sar_uptrend_3T'].to_numpy()\n","        # if ep_loc_side == OrderSide.SELL:\n","        #   mr_res *= sar_uptrend_3T == 0\n","        # else:\n","        #   mr_res *= sar_uptrend_3T == 1"],"metadata":{"id":"csZwxsP5r_Pz"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"JjKHyqftzhD7"},"source":["### set config (override available)"]},{"cell_type":"code","execution_count":9,"metadata":{"id":"q_4E-zH02WJy","executionInfo":{"status":"ok","timestamp":1651813120127,"user_tz":-540,"elapsed":4,"user":{"displayName":"7th June","userId":"08178289703395036410"}}},"outputs":[],"source":["#     caution : MARKET / LIMIT spelling   #\n","#      json doesn't support single quotes     #\n","\n","param_dict = {\n","  \"selection_id\": \"5_4\",\n","  \"trader_set\": {\n","    \"backtrade\": 0,\n","    \"back_data_path\": \"C:\\\\Users\\\\Lenovo\\\\PycharmProjects\\\\System_Trading\\\\JnQ\\\\candlestick_concated\\\\database_bn\\\\2022-04-08\\\\2022-04-08 ETHUSDT_1m.ftr\",\n","    \"start_datetime\": \"2020-09-05 00:00:59.999\",\n","    \"run\": 1,\n","    \"df_log\": 0,\n","    \"latest_index\": -1,\n","    \"complete_index\": -2,\n","    \"limit_fee\": 0.0002,\n","    \"market_fee\": 0.0004,\n","    \"initial_asset\": 10,\n","    \"asset_changed\": 0,\n","    \"symbol\": \"ETHUSDT\",\n","    \"symbol_changed\": 0,\n","    \"itv_list\": \"['T', '3T', '5T', '15T', '30T', '4H']\",\n","    \"row_list\": \"[100, 50, 1, 1, 1, 1]\",\n","    \"rec_row_list\": \"[1, 1, 1, 1, 1, 1]\",\n","    \"offset_list\": \"['1h', '1h', '1h', '1h', '1h', '1h']\",\n","    \"bar_close_second\": 59,\n","    \"realtime_term\": 0.01,\n","    \"api_retry_term\": 3,\n","    \"check_entry_sec\": 10,\n","    \"entry_execution_wait\": 60,\n","    \"breakout_qty_ratio\": 0.97,\n","    \"qty_check_term\": 30,\n","    \"exit_execution_wait\": 60,\n","    \"close_complete_term\": 5,\n","    \"save_stacked_df\": 0,\n","    \"stacked_df_exist\": 1\n","  },\n","  \"pos_set\": {\n","    \"short_inversion\": 0,\n","    \"long_inversion\": 0,\n","    \"short_ban\": 0,\n","    \"long_ban\": 0\n","  },\n","  \"loc_set\": {      \n","    \"point\": {\n","      \"exp_itv\": \"5T\",\n","      \"tf_entry\": \"15T\",\n","      \"candle_pattern\": \"CDLMARUBOZU\",\n","      \"short_spread\": \"None\",\n","      \"long_spread\": \"None\",\n","      \"short_tr_thresh\": \"None\",\n","      \"long_tr_thresh\": \"None\",\n","      \"short_wick_ratio\": \"None\",\n","      \"long_wick_ratio\": \"None\",\n","      \"wick_itv\": \"15T\",\n","      \"co_es\": \"None\",\n","      \"cu_es\": \"None\",\n","      \"crr\": \"None\",\n","      \"cppr\": \"None\",\n","      \"ppr\": \"None\",\n","      \"wbr\": \"None\",\n","      \"dbr\": \"None\",\n","      \"dbr2\": \"None\",\n","      \"brr\": \"None\",\n","      \"ir\": \"None\",\n","      \"abs_ratio\": \"None\"\n","    },\n","    \"zone\": {\n","      \"use_zone\": 0,\n","      \"base_roll_period\": 50,\n","      \"degree_list\": \"[]\",\n","      \"dtk_itv\": \"5T\",\n","      \"dt_k\": \"None\",\n","      \"dc_period\": 135,\n","      \"use_dtk_line\": 0,\n","      \"zone_dt_k\": 0.4,\n","      \"zone_dc_period\": 135\n","    }\n","  },\n","  \"tr_set\": {\n","    \"wave_period\": 5,\n","    \"wave_greater1\": 5,\n","    \"wave_greater2\": 2,\n","    \"wave_lesser1\": 2,\n","    \"wave_lesser2\": 2,\n","    \"p1_itv1\": \"15T\",\n","    \"p1_itv0\": \"T\",\n","    \"p1_period1\": 1,\n","    \"p1_period2\": 5,\n","    \"p2_itv1\": \"None\",\n","    \"p2_itv0\": \"T\",\n","    \"p2_period1\": 20,\n","    \"p2_period2\": 40,\n","    \"ei_k\": 0.0,\n","    \"ep_out_tick\": 10,\n","    \"tp_gap\": 0.0,\n","    \"ep_gap\": -0.0,\n","    \"out_gap\": 0,\n","    \"decay_gap\": \"None\",\n","    \"c_ep_gap\": \"None\",\n","    \"t_out_gap\": \"None\",\n","    \"wb_tp_gap\": 0,\n","    \"wb_out_gap\": 0,\n","    \"bias_info_tick\": 240\n","  },\n","  \"ep_set\": {\n","    \"entry_type\": \"LIMIT\",\n","    \"static_ep\": 1,\n","    \"point2\": {\n","      \"use_point2\": 0,\n","      \"entry_type\": \"MARKET\"\n","    }\n","  },\n","  \"tp_set\": {\n","    \"non_tp\": 0,\n","    \"static_tp\": 1,\n","    \"tp_onexec\": 0,\n","    \"decay_term\": 60,\n","    \"p_ranges\": \"[1]\",\n","    \"p_qty_ratio\": \"[1]\"\n","  },\n","  \"out_set\": {\n","    \"hl_out\": 1,\n","    \"static_out\": 1,\n","    \"out_onexec\": 0,\n","    \"tf_exit\": \"None\",\n","    \"rsi_exit\": 0\n","  },\n","  \"lvrg_set\": {\n","    \"leverage\": 2,\n","    \"static_lvrg\": 0,\n","    \"allow_float\": 0,\n","    \"target_pct\": 0.03,\n","    \"lvrg_rejection\": 0\n","  }\n","}\n","\n","config = EasyDict(param_dict)"]},{"cell_type":"markdown","source":["#### legacy"],"metadata":{"id":"MuD_2vY7TI_8"}},{"cell_type":"code","source":[",\n","      \"hc_itv\": 60,\n","      \"osc_band\": 20\n","      \n","      \"wick_score_list\": \"[]\",\n","      \"body_score_list\": \"[]\",\n","      \"score_itv_list\": \"[]\",,\n","\n","      \"wick_score_list\": \"[]\",\n","      \"body_score_list\": \"[]\",\n","      \"score_itv_list\": \"['T']\""],"metadata":{"id":"EKag94Y2TMCO"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"rLI8unIyroiC"},"source":["## run"]},{"cell_type":"code","execution_count":10,"metadata":{"id":"qBJfPsmJzVIr","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1651813147491,"user_tz":-540,"elapsed":494,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"5a0cc6e6-a808-44c2-f9a9-47bdecacf2bc"},"outputs":[{"output_type":"stream","name":"stdout","text":["\"5_4\" {\n"," \"point\": {\n","  \"exp_itv\": \"5T\",\n","  \"tf_entry\": \"15T\",\n","  \"candle_pattern\": \"CDLMARUBOZU\",\n","  \"short_spread\": \"None\",\n","  \"long_spread\": \"None\",\n","  \"short_tr_thresh\": \"None\",\n","  \"long_tr_thresh\": \"None\",\n","  \"short_wick_ratio\": \"None\",\n","  \"long_wick_ratio\": \"None\",\n","  \"wick_itv\": \"15T\",\n","  \"co_es\": \"None\",\n","  \"cu_es\": \"None\",\n","  \"crr\": \"None\",\n","  \"cppr\": \"None\",\n","  \"ppr\": \"None\",\n","  \"wbr\": \"None\",\n","  \"dbr\": \"None\",\n","  \"dbr2\": \"None\",\n","  \"brr\": \"None\",\n","  \"ir\": \"None\",\n","  \"abs_ratio\": \"None\"\n"," },\n"," \"zone\": {\n","  \"use_zone\": 0,\n","  \"base_roll_period\": 50,\n","  \"degree_list\": \"[]\",\n","  \"dtk_itv\": \"5T\",\n","  \"dt_k\": \"None\",\n","  \"dc_period\": 135,\n","  \"use_dtk_line\": 0,\n","  \"zone_dt_k\": 0.4,\n","  \"zone_dc_period\": 135\n"," }\n","} {\n"," \"wave_period\": 5,\n"," \"wave_greater1\": 5,\n"," \"wave_greater2\": 2,\n"," \"wave_lesser1\": 2,\n"," \"wave_lesser2\": 2,\n"," \"p1_itv1\": \"15T\",\n"," \"p1_itv0\": \"T\",\n"," \"p1_period1\": 1,\n"," \"p1_period2\": 5,\n"," \"p2_itv1\": \"None\",\n"," \"p2_itv0\": \"T\",\n"," \"p2_period1\": 20,\n"," \"p2_period2\": 40,\n"," \"ei_k\": 0.0,\n"," \"ep_out_tick\": 10,\n"," \"tp_gap\": 0.0,\n"," \"ep_gap\": -0.0,\n"," \"out_gap\": 0,\n"," \"decay_gap\": \"None\",\n"," \"c_ep_gap\": \"None\",\n"," \"t_out_gap\": \"None\",\n"," \"wb_tp_gap\": 0,\n"," \"wb_out_gap\": 0,\n"," \"bias_info_tick\": 240\n","} {\n"," \"entry_type\": \"LIMIT\",\n"," \"static_ep\": 1,\n"," \"point2\": {\n","  \"use_point2\": 0,\n","  \"entry_type\": \"MARKET\"\n"," }\n","} {\n"," \"non_tp\": 0,\n"," \"static_tp\": 1,\n"," \"tp_onexec\": 0,\n"," \"decay_term\": 60,\n"," \"p_ranges\": \"[1]\",\n"," \"p_qty_ratio\": \"[1]\"\n","} {\n"," \"hl_out\": 1,\n"," \"static_out\": 1,\n"," \"out_onexec\": 0,\n"," \"tf_exit\": \"None\",\n"," \"rsi_exit\": 0\n","} {\n"," \"leverage\": 2,\n"," \"static_lvrg\": 0,\n"," \"allow_float\": 0,\n"," \"target_pct\": 0.03,\n"," \"lvrg_rejection\": 0\n","} "]}],"source":["# funcs = [ep_out_v2, ep_loc_point2_v2, lvrg_set]  # ep_out for p1 & p2\n","funcs = [ep_out, ep_loc_point2_v2, lvrg_set]     # ep_out for p1-only\n","# funcs = [ep_out_v0, ep_loc_point2_v2, lvrg_set]  # ep_out for v3\n","\n","id_idx_list = [0]  # ID_arr 에서 import 할 id_idx 선택\n","public_override = 1\n","utils_override = 1\n","config_override = 1\n","\n","# ------ config_list 와 같은 org_var 에 override 하는거 다시 생각하기 ------ #\n","ID_list = ID_arr[id_idx_list]\n","utils_list = utils_arr[id_idx_list]\n","config_list = config_arr[id_idx_list]\n","\n","if config_override or utils_override:\n","  assert len(config_list) == 1\n","  if config_override:    \n","    config_list[0] = config\n","    ID_list[0] = config.selection_id\n","  \n","config = config_list[0]  # base config = config_list[0]\n","tp_fee, out_fee = calc_tp_out_fee_v2(config)   # -> rev_pr 때문에 일단 이곳에도 선언함\n","\n","# ------- inversion set ------- #\n","inversion = 0\n","fdist_thresh = 1\n","# ------- plot param ------- #\n","show_detail = 0\n","# ------- temp param ------- #\n","allow_osc_touch = 0\n","rsi_gap = 5\n","\n","# ------- just printing config ------- #\n","_ = [print(json.dumps(config[key_], indent=1), end=' ') for key_ in ['selection_id', 'loc_set', 'tr_set', 'ep_set', 'tp_set', 'out_set', 'lvrg_set']] #  'trader_set',"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"afUV2b1jaggN"},"outputs":[],"source":["# config.trader_set.start_datetime = \"2020-09-05 00:00:59.999\" #  \"2020-09-05 00:00:59.999\" # 2022-02-01 16:34:59.999000 2022-01-14 16:34:59.999000  \"2020-09-05 00:00:59.999\" \"2022-01-10 00:00:59.999\" \"2021-10-04 02:39:59.999000\""]},{"cell_type":"code","execution_count":11,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":4842,"status":"ok","timestamp":1651813155138,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"WstWVNihCNH8","outputId":"6bb67e5a-b8dc-49f4-9507-e86dc616a160"},"outputs":[{"output_type":"stream","name":"stdout","text":["public_indi elapsed time : 3.0832810401916504\n","make data_list elapsed time : 0.00015592575073242188\n"]}],"source":["# ------ slicing res_df ------ #\n","res_df = res_df_.loc[pd.to_datetime(config.trader_set.start_datetime):]\n","\n","np_timeidx = np.array([intmin_np(date_) for date_ in res_df.index.to_numpy()])\n","\n","# ------------ public_indi ------------ # - 딱히 반복될 이유가 없는 phase - annot. 달때, why 까지 적어주면 좋음\n","start_0 = time.time()\n","if public_override:\n","    res_df = public_indi(res_df, config_list[0], np_timeidx)  # 현재 대부분의 시간은 h_candle 에서 소비되고 있음\n","else:\n","    res_df = utils_public.public_indi(res_df, config_list[0], np_timeidx)\n","print(\"public_indi elapsed time :\", time.time() - start_0)\n","\n","# ------------ make data_list ------------ # - 반복될 이유가 없는 phase - public_indo 에 종속\n","start_0 = time.time()\n","ohlc_cols = ['open', 'high', 'low', 'close']\n","ohlc_list = [res_df[col_].to_numpy() for col_ in ohlc_cols]\n","print(\"make data_list elapsed time :\", time.time() - start_0)"]},{"cell_type":"markdown","metadata":{"id":"RqRF1eyZ0xBL"},"source":["### idep_plot"]},{"cell_type":"code","execution_count":36,"metadata":{"id":"_iYcJk8nK8Yq","executionInfo":{"status":"ok","timestamp":1651813306444,"user_tz":-540,"elapsed":566,"user":{"displayName":"7th June","userId":"08178289703395036410"}}},"outputs":[],"source":["# ------ edit utils config ------ #\n","# config_list[0].loc_set.point.candle_pattern = talib.get_function_groups()['Pattern Recognition'][51]   # \"None\" # 0.5 0.7\n","# config_list[0].pos_set.short_ban = 0\n","# config_list[0].tr_set.wave_lesser = 3\n","config_list[0].tr_set.wave_greater1 = 5\n","config_list[0].tr_set.wave_greater2 = 2\n","# config_list[0].tr_set.p1_period1 = 5\n","# config_list[0].tr_set.p1_period2 = 5\n","# # config_list[0].tr_set.p2_period1 = 20\n","# # config_list[0].tr_set.p2_period2 = 20\n","# config_list[0].tr_set.tp_gap = 1.5\n","# config_list[0].tr_set.ep_gap = -1.\n","# config_list[0].tr_set.out_gap = 0\n","# config_list[0].tr_set.wb_tp_gap = 0.5\n","# config_list[0].tr_set.wb_out_gap = -0.5\n","# config_list[0].tr_set.bias_info_tick = 500\n","# config_list[0].trader_set.limit_fee = 1e-10 # 1e-10  0.0002\n","# config_list[0].trader_set.market_fee = 1e-10 # 1e-10  0.0004"]},{"cell_type":"code","execution_count":37,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":5,"status":"ok","timestamp":1651813306445,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"iI39YI_5GguK","outputId":"dfd4eaaf-9040-42c1-b68b-e16e5fb53318"},"outputs":[{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 100681\n","np.sum(long_open_res == 1) : 99012\n","np.sum(short_open_res == 1) : 17353\n","np.sum(long_open_res == 1) : 18310\n","np.sum(short_open_res == 1) : 2078\n","np.sum(long_open_res == 1) : 2018\n","np.sum(short_open_res == 1) : 2078\n","np.sum(long_open_res == 1) : 2018\n"]},{"output_type":"stream","name":"stdout","text":["enlist_rtc elapsed time : 0.28968262672424316\n","enlist_tr elapsed time : 0.13971948623657227\n"]}],"source":["if utils_override:   # 현재, utils_override 하는 경우 1개의 ID 만 허용함 \n","  start_0 = time.time()\n","  res_df = enlist_rtc(res_df, config_list[0], np_timeidx)\n","  print(\"enlist_rtc elapsed time :\", time.time() - start_0)\n","  start_0 = time.time()\n","  res_df = enlist_tr(res_df, config_list[0], np_timeidx)    # 36995.0 -> 152766.0 # 4044 np.sum(long_open_res == 1) : 4325\n","  print(\"enlist_tr elapsed time :\", time.time() - start_0)\n","else:\n","    start_0 = time.time()\n","    for utils_, config_ in zip(utils_list, config_list):\n","        res_df = utils_.enlist_rtc(res_df, config_, np_timeidx)\n","        res_df = utils_.enlist_tr(res_df, config_, np_timeidx)\n","    print(\"elapsed time :\", time.time() - start_0)"]},{"cell_type":"code","execution_count":33,"metadata":{"id":"gfDSOGMd91rE","executionInfo":{"status":"ok","timestamp":1651813287778,"user_tz":-540,"elapsed":560,"user":{"displayName":"7th June","userId":"08178289703395036410"}}},"outputs":[],"source":["# ------ edit loc_set config ------ #\n","config_list[0].loc_set.point.cu_wrr_21 = \"None\" # \"None\" 5 2.5\n","config_list[0].loc_set.point.co_wrr_21 = \"None\" # \"None\" 5 2.5\n","config_list[0].loc_set.point.wrr_32 = \"None\" # \"None\" 1 0.5\n","config_list[0].loc_set.zone.hl_loc_pct = \"None\" # \"None\" 1 0.5\n","config_list[0].loc_set.point.wrr = \"None\" # \"None\" # 2.5\n","config_list[0].loc_set.point.cu_es = \"None\" # \"None\" # -2\n","config_list[0].loc_set.point.co_es = \"None\" # \"None\" # -3\n","# config_list[0].loc_set.point.crr = 2\n","config_list[0].loc_set.point.short_wick_ratio = \"None\" # \"None\" 0.6 0.4\n","config_list[0].loc_set.point.long_wick_ratio = 0.6 # \"None\" 0.4\n","# config_list[0].loc_set.point.cppr = 0.5   # \"None\" # 0.5 0.7\n","# config_list[0].loc_set.point.wbr = \"None\" # 0.7\n","# config_list[0].loc_set.point.dbr = \"None\"   # 0.7\n","# config_list[0].loc_set.point.dbr2 = \"None\"  # 0.7\n","# config_list[0].loc_set.point.brr = \"None\"   # 0.8\n","# config_list[0].loc_set.point.ir = \"None\" # \"None\" 0.8\n","# config_list[0].loc_set.point.wick_score_list = \"[]\"\n","# config_list[0].loc_set.point.score_itv_list = \"['H']\"\n","# # config_list[0].loc_set.point.abs_ratio = \"None\"  # 0.7\n","config_list[0].loc_set.point.short_tr_thresh = 4  #  \"None\" 0.8 # # 0.7 # tr_thresh 엄청 민감함\n","config_list[0].loc_set.point.long_tr_thresh = 4   #  \"None\" 0.8 ## 0.7\n","# config_list[0].loc_set.zone.use_zone = 0\n","# # config_list[0].loc_set.zone.base_roll_period = 60"]},{"cell_type":"code","execution_count":38,"metadata":{"executionInfo":{"elapsed":1452,"status":"ok","timestamp":1651813309397,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"9DPgykxQ92mU","colab":{"base_uri":"https://localhost:8080/"},"outputId":"f22e3f97-d927-41de-b778-a61f661c0bea"},"outputs":[{"output_type":"stream","name":"stderr","text":["short_tr_ >= short_tr_thresh : nan 4.00000 (0.0)\n","long_tr_ >= long_tr_thresh : nan 4.00000 (0.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 1.0207579135894775\n"]}],"source":["open_info_df = get_open_info_df(ep_loc_v3, res_df, np_timeidx, ID_list, config_list, id_idx_list)  # --> point * dur. 관련 (loc_set) param 에 종속 (open_info 가 변경되는게 아니라면, 재실행할 필요없음)"]},{"cell_type":"code","execution_count":40,"metadata":{"id":"KqVkg236t_f2","executionInfo":{"status":"ok","timestamp":1651811286775,"user_tz":-540,"elapsed":471,"user":{"displayName":"7th June","userId":"08178289703395036410"}}},"outputs":[],"source":["# ------ edit entry & exit (ep, tp, out, ..) config ------ #\n","# config_list[0].tr_set.ei_k = -0.5\n","# config_list[0].tr_set.ep_out_tick = 10\n","# # # config_list[0].ep_set.point2.use_point2 = 1\n","# # # config_list[0].ep_set.point2.entry_type = \"LIMIT\"\n","# # # config_list[0].ep_set.point2.wick_score_list = str([])\n","# # # config_list[0].tp_set.static_tp = 1\n","# # # config_list[0].tp_set.non_tp = 0 # 0 1\n","config_list[0].tp_set.p_ranges = \"[1]\"\n","config_list[0].tp_set.p_qty_ratio = \"[1]\"\n","# config_list[0].tp_set.p_ranges = \"[0.2, 0.66, 1]\"\n","# config_list[0].tp_set.p_qty_ratio = \"[0.25, 0.25, 0.5]\"\n","# config_list[0].tp_set.p_ranges = \"[0.5, 1]\"\n","# config_list[0].tp_set.p_qty_ratio = \"[0.3, 0.7]\"\n","# # # config_list[0].out_set.hl_out = 1\n","# # # config_list[0].out_set.tf_exit = \"None\" # 15 \"None\"\n","config_list[0].lvrg_set.leverage = 1\n","config_list[0].lvrg_set.static_lvrg = 0\n","config_list[0].lvrg_set.target_pct = 0.03\n","# # config_list[0].lvrg_set.allow_float = 0\n","# config_list[0].lvrg_set.lvrg_rejection = 0"]},{"cell_type":"code","execution_count":39,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":644},"executionInfo":{"elapsed":3913,"status":"ok","timestamp":1651813324380,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"HHq6cr9GPBot","outputId":"9f3f0b30-b14b-47df-a1d5-2292b8e7d17e"},"outputs":[{"output_type":"stream","name":"stdout","text":["en_ex_pairing elapsed time : 0.14416980743408203\n","short_obj.shape : (305, 5)\n","long_obj.shape : (224, 5)\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1728x576 with 6 Axes>"],"image/png":"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GQAwcOBA9O7dG7/99huuXbuG119/Hd999x169uyJHj16QET9Q2ju7u5ITk5G3bp1X/XDIiIiqhSKet3p5OSEli1b4qeffsKtW7fQsWNHLFmyBB07doSjo6Oybty4cfj999+xbNkyBAQEwNbWFlu3bkVycjIOHjz4qh4OkQphmOoehUIh7u7uFb6O4kZTU1O0tbXLfN7Tp0/LwYMHlbd79OghIiJ9+/ZVjr399tsiImJjY6Mc8/T0lAsXLlT488IwDMNUvtS0HqupqSn169dXGdPW1haFQiGbNm1SjhkbG6sdO3DgQBERsbKyUruvb9++EhcXJ1988YWIiOjr61f4c8UwDMNUXGpafwWK97qzQYMGamNTp04VERFzc3PlWFhYmGzdulWlbs+ePXL9+vUKf66YmhluQUA1Vp8+fXDixAmkpKQgNjYW69evV3nHiaurK0QE7du3x9GjR5GcnIzQ0FDY29sX+xzW1tYQEQwcOBCHDh1CcnIyIiIiMG3aNJU6T09PXLhwASNHjsQ///yD9PR0dO/evcwea564uDjo6Ogob9va2uLRo0cICgpSjl24cAF37tyBra1tmZ+fiIhqhurcY3Nzc5GYmKgylpWVhX///RdNmjRRjuX35SZXrlwBAJU64Nm2BqtXr8a3336L2NjYUq+NiIiqt+rcX4srLi5ObezF/qqrq4tWrVrh2LFjKnVHjx5F+/btYW5uXu7rJHoRL8BSjdSrVy/8+eefePToERwdHfHZZ59h6NCh8PT0VKvdsWMH/u///g/29va4desWvLy80LRp0xKdb+PGjbh27RpGjx4NPz8/eHh4wM7OTqWmRYsWWLZsGZYuXQpbW1soFIp858priNbW1sU6t5aWFgwNDTF+/HgMGjQIHh4eyvssLS0RFhamdkxoaCgsLS1Vxtq2bYsnT54gPT0dQUFBalsUEBERATWrx+bR0dFBly5dcPPmzULrevbsCQBqdR9++CFq166NtWvXlui8RERUc9SU/lqa1509e/ZETk4OwsPDAQC1a9eGpqYmMjMzVerybr/55ptFzklUHir8bbgMU9558eMbp06dkoCAAJWa/v37i4hIu3btBIC4urqKiMjEiROVNcbGxpKVlSXTpk0r1nmtra1FROT3339XGT969KicO3dOedvT01NERDp16lTknFZWVpKVlZXvxxdfTPfu3SVP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\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["idep_plot elapsed time : 1.6239569187164307\n"]}],"source":["test_ratio = 0.0\n","short_pr, short_obj, short_lvrg_arr, short_fee_arr, short_tpout_arr, short_bias_arr, short_false_bias_arr, short_point1_arr, short_en_tp1, short_en_out0, \\\n","      long_pr, long_obj, long_lvrg_arr, long_fee_arr, long_tpout_arr, long_bias_arr, long_false_bias_arr, long_point1_arr, long_en_tp1, long_en_out0 = \\\n","get_res_v5(res_df, open_info_df, ohlc_list, config_list, np_timeidx, funcs, test_ratio=test_ratio, plot_is=1, signi=False)   # open 이 많을 수록 en_ex_pairing elapsed time : 11.58370590209961"]},{"cell_type":"code","source":["# ------ inversion ------ #\n","_ = get_res_v5(res_df, open_info_df, ohlc_list, config_list, np_timeidx, funcs, inversion=True, test_ratio=test_ratio, plot_is=1, signi=False)"],"metadata":{"id":"8lYgsqH-rfAM"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"n6gc7lERC4VE"},"source":["### statistics (stem 별로 진행)"]},{"cell_type":"code","execution_count":27,"metadata":{"id":"HHjIdn2MC4VE","executionInfo":{"status":"ok","timestamp":1651810850845,"user_tz":-540,"elapsed":828,"user":{"displayName":"7th June","userId":"08178289703395036410"}}},"outputs":[],"source":["selection_id = config.selection_id\n","\n","short_open_i = short_obj[-1].astype(int)\n","long_open_i = long_obj[-1].astype(int)\n","\n","short_open_tp_1 = res_df['short_tp_1_{}'.format(selection_id)].to_numpy()[short_open_i]\n","long_open_tp_1 = res_df['long_tp_1_{}'.format(selection_id)].to_numpy()[long_open_i]\n","\n","short_open_tp_gap = res_df['short_tp_gap_{}'.format(selection_id)].to_numpy()[short_open_i]  # use open_i\n","long_open_tp_gap = res_df['long_tp_gap_{}'.format(selection_id)].to_numpy()[long_open_i]\n","\n","short_open_epout_0 = res_df['short_epout_0_{}'.format(selection_id)].to_numpy()[short_open_i]\n","long_open_epout_0 = res_df['long_epout_0_{}'.format(selection_id)].to_numpy()[long_open_i]\n","\n","short_open_epout_gap = res_df['short_epout_gap_{}'.format(selection_id)].to_numpy()[short_open_i]  # use open_i\n","long_open_epout_gap = res_df['long_epout_gap_{}'.format(selection_id)].to_numpy()[long_open_i]\n","\n","# ------ pairing 된 en, ex_idx 기준으로 survey 진행 ------ #\n","# 0. high, low (exit_done 까지의) -> partial (tpg) 과 outg survey 목표\n","#   a. short -> tpg - low, outg - high\n","#   b. long -> tpg - high, outg - low\n","short_max_tpg = get_max_tpg_v2(\"SELL\", ohlc_list, short_pr, short_obj[:4], short_open_tp_1, short_open_tp_gap)\n","long_max_tpg = get_max_tpg_v2(\"BUY\", ohlc_list, long_pr, long_obj[:4], long_open_tp_1, long_open_tp_gap)\n","# short_max_tpg = get_max_tpg_v2(\"SELL\", ohlc_list, short_pr, short_obj[:4], short_open_tp_1, short_open_epout_gap)\n","# long_max_tpg = get_max_tpg_v2(\"BUY\", ohlc_list, long_pr, long_obj[:4], long_open_tp_1, long_open_epout_gap)\n","\n","# ------ 0. tp 까지 도달하는 최소 idx 도출, en_idx 부터 ------ #\n","#   a. bias_info_tick 의 limit 을 정해주지 않으면 굉장히 길어질 수 있다고 봄\n","# short_max_outg, short_outg_open_idx = get_max_outg_v2(\"SELL\", config, ohlc_list, short_obj, short_tpout_arr, short_open_epout_0, short_open_epout_gap)\n","# long_max_outg, long_outg_open_idx = get_max_outg_v2(\"BUY\", config, ohlc_list, long_obj, long_tpout_arr, long_open_epout_0, long_open_epout_gap)\n","short_max_outg, short_open_idx, short_true_open_idxth = get_max_outg_v3(\"SELL\", config, ohlc_list, short_obj, short_tpout_arr, short_open_epout_0, short_open_epout_gap)\n","long_max_outg, long_open_idx, long_true_open_idxth = get_max_outg_v3(\"BUY\", config, ohlc_list, long_obj, long_tpout_arr, long_open_epout_0, long_open_epout_gap)\n","\n","current_tpg= config.tr_set.tp_gap\n","current_outg = config.tr_set.out_gap"]},{"cell_type":"markdown","source":["#### consecutive dur. value survey on bias"],"metadata":{"id":"tOFkzUX2imQu"}},{"cell_type":"code","source":["res_df.dtypes"],"metadata":{"id":"CgvSrXaZEkMZ"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"gnSvYKIzC4VF"},"outputs":[],"source":["# ------------ dependent vars. ------------ #\n","# res_df 에 존재하는 col 는 모두 사용가능함\n","\n","# ------ 1. 도출한 outg 와 vars. pairing 진행 (by valid_idx) ------ #\n","devided_cols, public_cols = [], []\n","\n","devided_cols.append('tr_{}'.format(selection_id))\n","\n","wave_tf = 'T'\n","wave_period = config.tr_set.wave_period\n","\n","public_cols.append('cu_wrr_21_{}{}'.format(wave_tf, wave_period))\n","# public_cols.append('cu_wrr_32_{}{}'.format(wave_tf, wave_period))\n","public_cols.append('co_wrr_21_{}{}'.format(wave_tf, wave_period))\n","# public_cols.append('co_wrr_32_{}{}'.format(wave_tf, wave_period))\n","\n","# public_cols.append('wave_high_terms_cnt_fill_T5')\n","# public_cols.append('wave_low_terms_cnt_fill_T5')\n","# public_cols.append('wave_high_loc_pct_T5')\n","# public_cols.append('wave_low_loc_pct_T5')\n","\n","# public_cols.append('b1_co_es_15T1')\n","# public_cols.append('b1_cu_es_15T1')\n","# public_cols.append('b1_upper_wick_ratio_15T')\n","# public_cols.append('b1_lower_wick_ratio_15T')\n","\n","#  'co_wrr_T5', 'cu_wrr_T5', 'b1_cppr_15T', 'b1_updbr', 'b1_lwdbr', 'b1_updbr_cppr', 'b1_lwdbr_cppr' 'abs_ratio_5T', 'rel_ratio_5T', 'body_rel_ratio_5T'\n","\n","# devided_cols = ['tr_{}'.format(selection_id)]  # , 'ir_5T'\n","# public_cols = ['wave_high_terms_cnt_fill_T5', 'wave_low_terms_cnt_fill_T5', 'wave_high_loc_pct_T5', 'wave_low_loc_pct_T5', \n","#                'b1_co_es_15T1', 'b1_cu_es_15T1', 'b1_upper_wick_ratio_15T', 'b1_lower_wick_ratio_15T']\n","\n","short_datas = [res_df['short_' + col].to_numpy() for col in devided_cols] + [res_df[col].to_numpy() for col in public_cols]\n","long_datas = [res_df['long_' + col].to_numpy() for col in devided_cols] + [res_df[col].to_numpy() for col in public_cols]\n","\n","titles = devided_cols + public_cols"]},{"cell_type":"code","source":["plt.style.use(['dark_background', 'fast'])\n","fig = plt.figure(figsize=(14, len(titles) * 5))\n","nrows, ncols = len(short_datas), 1\n","gs = gridspec.GridSpec(nrows=nrows,  # row 부터 index 채우고 col 채우는 순서임 (gs_idx)\n","                        ncols=ncols\n","                        )\n","\n","num_samples = 30\n","alpha = 0.8\n","xmin = 0\n","xmax = 10\n","\n","for ings_idx, (title, short_data, long_data) in enumerate(zip(titles, short_datas, long_datas)):\n","  inner_gs = gs[ings_idx].subgridspec(nrows=2, ncols=2)\n","\n","  short_open_data = short_data[short_open_idx]\n","  long_open_data = long_data[long_open_idx]\n","\n","  short_true_data = short_open_data[short_bias_arr.ravel()]\n","  short_false_data = short_open_data[short_false_bias_arr.ravel()]\n","  long_true_data = long_open_data[long_bias_arr.ravel()]\n","  long_false_data = long_open_data[long_false_bias_arr.ravel()]\n","  \n","  short_true_valid_idx = np.ones_like(short_true_data).astype(bool)\n","  short_false_valid_idx = np.ones_like(short_false_data).astype(bool)\n","  long_true_valid_idx = np.ones_like(long_true_data).astype(bool)\n","  long_false_valid_idx = np.ones_like(long_false_data).astype(bool)\n","\n","  short_true_valid_idx *= ~np.isinf(short_true_data)\n","  short_false_valid_idx *= ~np.isinf(short_false_data)\n","  long_true_valid_idx *= ~np.isinf(long_true_data)\n","  long_false_valid_idx *= ~np.isinf(long_false_data)\n","\n","  try:\n","    short_true_valid_idx *= short_true_data > xmin\n","    short_false_valid_idx *= short_false_data > xmin\n","    long_true_valid_idx *= long_true_data > xmin\n","    long_false_valid_idx *= long_false_data > xmin\n","\n","  except:\n","    pass\n","\n","  try:\n","    short_true_valid_idx *= short_true_data < xmax\n","    short_false_valid_idx *= short_false_data < xmax\n","    long_true_valid_idx *= long_true_data < xmax\n","    long_false_valid_idx *= long_false_data < xmax\n","    \n","  except:\n","    pass\n","    \n","  plt.subplot(inner_gs[0])\n","  ns, bins, patches = plt.hist([short_true_data[short_true_valid_idx], short_false_data[short_false_valid_idx]], \n","           bins=num_samples, alpha=alpha, color=['#00ff00', '#ff0000'], edgecolor='black')  \n","  plt.title('short_' + title)  \n","\n","  plt.subplot(inner_gs[2])\n","  total_ns = np.sum(ns, axis=0)\n","  hist_ratio = ns[0] / total_ns\n","  # valid_idx = total_ns > 1\n","  valid_idx = np.full(len(hist_ratio), True)\n","  valid_hist_ratio = hist_ratio[valid_idx]\n","  plt.hist(bins[:-1][valid_idx], weights=valid_hist_ratio, bins=num_samples, color='#00ff00', edgecolor='black')\n","  plt.ylim(0, 1)\n","  \n","\n","  plt.subplot(inner_gs[1])\n","  ns, bins, patches = plt.hist([long_true_data[long_true_valid_idx], long_false_data[long_false_valid_idx]], \n","           bins=num_samples, alpha=alpha, color=['#00ff00', '#ff0000'], edgecolor='black')\n","  plt.title('long_' + title)\n","  \n","  plt.subplot(inner_gs[3])\n","  total_ns = np.sum(ns, axis=0)\n","  hist_ratio = ns[0] / total_ns\n","  # valid_idx = total_ns > 1\n","  valid_idx = np.full(len(hist_ratio), True)\n","  valid_hist_ratio = hist_ratio[valid_idx]\n","  plt.hist(bins[:-1][valid_idx], weights=valid_hist_ratio, bins=num_samples, color='#00ff00', edgecolor='black')\n","  plt.ylim(0, 1)\n","\n","  \n","# plt.suptitle(title)\n","plt.show()"],"metadata":{"id":"Sahvc-R0jD1A","colab":{"base_uri":"https://localhost:8080/","height":968},"executionInfo":{"status":"ok","timestamp":1651670961786,"user_tz":-540,"elapsed":2896,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"1840cae3-1019-488c-bef4-c771eed85b54"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/numpy/core/fromnumeric.py:3208: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.\n","  return asarray(a).size\n","/usr/local/lib/python3.7/dist-packages/matplotlib/cbook/__init__.py:1376: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.\n","  X = np.atleast_1d(X.T if isinstance(X, np.ndarray) else np.asarray(X))\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1008x1080 with 12 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","metadata":{"id":"Arnb-kXlC4VF"},"source":["#### tpg survey for partial"]},{"cell_type":"code","execution_count":28,"metadata":{"id":"jHh0uFkXC4VF","colab":{"base_uri":"https://localhost:8080/","height":741},"executionInfo":{"status":"ok","timestamp":1651810855851,"user_tz":-540,"elapsed":1684,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"804a766a-6321-41bc-dcb6-85eaab111963"},"outputs":[{"output_type":"stream","name":"stdout","text":["52\n","52\n","52\n","52\n","pkx : [0.03997647 2.0167238  2.73054922]\n","pkx : [-0.03767855  0.18363707  0.58602909  0.7268663   0.88782311  1.39081314]\n","\n","74\n","74\n","65\n","65\n","pkx : [-5.71029994 -5.09579043 -3.40588927 -1.25510598]\n","pkx : [-3.72574064 -3.42625567 -2.45292953 -1.18011842]\n","\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 864x576 with 4 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["# 1. outg 는 partial 을 위한 histogram 작성 진행\n","# 현재, outg 내부에는 tp 한것과 out 한것이 공존하는 상태\n","titles = ['outg', 'tpg']\n","short_max_datas = [short_max_outg[short_true_open_idxth], short_max_tpg]\n","long_max_datas = [long_max_outg[long_true_open_idxth], long_max_tpg]\n","\n","# titles = ['tpg']\n","# short_max_datas = [short_max_tpg]\n","# long_max_datas = [long_max_tpg]\n","\n","plt.style.use(['dark_background', 'fast'])\n","fig = plt.figure(figsize=(12, 8))\n","nrows, ncols = 2, 1\n","gs = gridspec.GridSpec(nrows=nrows,  # row 부터 index 채우고 col 채우는 순서임 (gs_idx)\n","                        ncols=ncols\n","                        )\n","  \n","for ings_idx, (title, short_max_data, long_max_data) in enumerate(zip(titles, short_max_datas, long_max_datas)):\n","\n","  inner_gs = gs[ings_idx].subgridspec(nrows=1, ncols=2)\n","  if ings_idx == 0:\n","    axvline = current_outg\n","    title_add = 'true_' + title\n","  else:\n","    axvline = current_tpg\n","    title_add = 'false_' + title\n","\n","  print(len(long_max_data))\n","\n","  short_plot_idx = np.ones_like(short_max_data).astype(bool)\n","  long_plot_idx = np.ones_like(long_max_data).astype(bool)\n","  # short_plot_idx = short_max_data <= axvline\n","  # long_plot_idx = long_max_data <= axvline\n","\n","  print(np.sum(long_plot_idx))    \n","\n","  short_plot_idx *= ~np.isnan(short_max_data)\n","  long_plot_idx *= ~np.isnan(long_max_data)  # nan 과 inf 때문에 이 방식 채택\n","\n","  print(np.sum(long_plot_idx))\n","\n","  short_plot_idx *= ~np.isinf(short_max_data)\n","  long_plot_idx *= ~np.isinf(long_max_data)  # nan 과 inf 때문에 이 방식 채택\n","  \n","  print(np.sum(long_plot_idx))\n","    \n","  plt.subplot(inner_gs[0])\n","  kde_plot_v2(*np.unique(short_max_data[short_plot_idx], return_counts=True))\n","  plt.title('short_' + title_add)  \n","  plt.axvline(axvline, color='red', linewidth=3)\n","\n","  plt.subplot(inner_gs[1])\n","  kde_plot_v2(*np.unique(long_max_data[long_plot_idx], return_counts=True))\n","  plt.title('long_' + title_add)\n","  plt.axvline(axvline, color='red', linewidth=3)\n","\n","  print()\n","\n","# plt.suptitle(title)\n","plt.show()"]},{"cell_type":"markdown","source":["#### legacy"],"metadata":{"id":"mScdfR9hmjVu"}},{"cell_type":"markdown","metadata":{"id":"xivLUsSGC4VF"},"source":["##### outg survey for precision (eploc vars. dependency)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"LB28R3QIjCDc"},"outputs":[],"source":["# ------------ dependent vars. ------------ #\n","# res_df 에 존재하는 col 는 모두 사용가능함\n","# ------ 1. 도출한 outg 와 vars. pairing 진행 (by valid_idx) ------ #\n","devided_cols = ['tr_{}'.format(strat_version)]  # , 'ir_5T'\n","public_cols = ['wave_body_ratio']  # 'abs_ratio_5T', 'rel_ratio_5T', 'body_rel_ratio_5T'\n","\n","short_datas = [res_df['short_' + col].to_numpy() for col in devided_cols] + [res_df[col].to_numpy() for col in public_cols]\n","long_datas = [res_df['long_' + col].to_numpy() for col in devided_cols] + [res_df[col].to_numpy() for col in public_cols]\n","\n","titles = devided_cols + public_cols"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"nX9TpLcvFu7T"},"outputs":[],"source":["plot_outg_range = (-1, 10)\n","plot_data_range = (-10, 100)\n","\n","plt.style.use(['dark_background', 'fast'])\n","fig = plt.figure(figsize=(12, 18))\n","nrows, ncols = len(short_datas), 1\n","gs = gridspec.GridSpec(nrows=nrows,  # row 부터 index 채우고 col 채우는 순서임 (gs_idx)\n","                        ncols=ncols\n","                        )\n","\n","for ings_idx, (title, short_data, long_data) in enumerate(zip(titles, short_datas, long_datas)):\n","  inner_gs = gs[ings_idx].subgridspec(nrows=1, ncols=2)\n","\n","  print(len(long_max_outg))\n","\n","  short_plot_idx = (plot_outg_range[0] <= short_max_outg) & (short_max_outg <= plot_outg_range[1])\n","  long_plot_idx = (plot_outg_range[0] <= long_max_outg) & (long_max_outg <= plot_outg_range[1])  # nan 과 inf 때문에 이 방식 채택\n","\n","  print(np.sum(long_plot_idx))\n","\n","  short_open_data = short_data[short_open_idx]\n","  long_open_data = long_data[long_open_idx]\n","  \n","  short_plot_idx *= (plot_data_range[0] <= short_open_data) * (short_open_data <= plot_data_range[1])\n","  long_plot_idx *= (plot_data_range[0] <= long_open_data) * (long_open_data <= plot_data_range[1]) # nan 과 inf 때문에 이 방식 채택\n","\n","  short_plot_idx *= ~np.isnan(short_open_data)\n","  long_plot_idx *= ~np.isnan(long_open_data)  # nan 과 inf 때문에 이 방식 채택\n","\n","  print(np.sum(long_plot_idx))\n","\n","  short_plot_idx *= ~np.isinf(short_open_data)\n","  long_plot_idx *= ~np.isinf(long_open_data)  # nan 과 inf 때문에 이 방식 채택\n","\n","  print(np.sum(long_plot_idx))\n","\n","  short_true_idx = short_plot_idx * short_true_open_idxth\n","  long_true_idx = long_plot_idx * long_true_open_idxth\n","  \n","  short_false_idx = short_plot_idx * ~short_true_open_idxth\n","  long_false_idx = long_plot_idx * ~long_true_open_idxth\n","\n","  plt.subplot(inner_gs[0])\n","  # ------ true_bias ------ #\n","  x, y = short_max_outg[short_true_idx].ravel(), short_open_data[short_true_idx].ravel()  \n","  plt.scatter(x, y, color='white', alpha=0.5)\n","  # ------ false_bias ------ #\n","  x, y = short_max_outg[short_false_idx].ravel(), short_open_data[short_false_idx].ravel()\n","  plt.scatter(x, y, color='fuchsia', alpha=0.3)\n","  plt.axvline(current_outg, color='red', linewidth=3)\n","  plt.title(\"{} coef : {:0.3f}\".format(title, np.corrcoef(-x, y)[0, 1]))\n","\n","  plt.subplot(inner_gs[1])    \n","  # ------ true_bias ------ #\n","  x, y = long_max_outg[long_true_idx].ravel(), long_open_data[long_true_idx].ravel()  \n","  plt.scatter(x, y, color='white', alpha=0.5)\n","  # ------ false_bias ------ #\n","  x, y = long_max_outg[long_false_idx].ravel(), long_open_data[long_false_idx].ravel()\n","  plt.scatter(x, y, color='fuchsia', alpha=0.3)\n","  plt.axvline(current_outg, color='red', linewidth=3)\n","  plt.title(\"{} coef : {:0.3f}\".format(title, np.corrcoef(-x, y)[0, 1]))\n","\n","  print()  \n","\n","# plt.suptitle(title)\n","plt.show()\n","# print()"]},{"cell_type":"markdown","metadata":{"id":"EtjwB7Qk-Grj"},"source":["### significance_v3"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"oVifICO4-Grk","colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"status":"ok","timestamp":1651708709995,"user_tz":-540,"elapsed":12994,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"d58c1e2f-2121-4d5b-8ca8-f6b255ccb77a"},"outputs":[{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 100681\n","np.sum(long_open_res == 1) : 99012\n","np.sum(short_open_res == 1) : 17353\n","np.sum(long_open_res == 1) : 18310\n","np.sum(short_open_res == 1) : 2078\n","np.sum(long_open_res == 1) : 2018\n","np.sum(short_open_res == 1) : 2078\n","np.sum(long_open_res == 1) : 2018\n"]},{"output_type":"stream","name":"stdout","text":["en_ex_pairing elapsed time : 0.08211874961853027\n","short_obj.shape : (183, 5)\n","long_obj.shape : (92, 5)\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 100681\n","np.sum(long_open_res == 1) : 99012\n","np.sum(short_open_res == 1) : 17353\n","np.sum(long_open_res == 1) : 18310\n","np.sum(short_open_res == 1) : 2078\n","np.sum(long_open_res == 1) : 2018\n","np.sum(short_open_res == 1) : 2078\n","np.sum(long_open_res == 1) : 2018\n"]},{"output_type":"stream","name":"stdout","text":["idep_plot elapsed time : 0.2087397575378418\n","en_ex_pairing elapsed time : 0.10305666923522949\n","short_obj.shape : (183, 5)\n","long_obj.shape : (92, 5)\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 100681\n","np.sum(long_open_res == 1) : 99012\n","np.sum(short_open_res == 1) : 17353\n","np.sum(long_open_res == 1) : 18310\n","np.sum(short_open_res == 1) : 2078\n","np.sum(long_open_res == 1) : 2018\n","np.sum(short_open_res == 1) : 2078\n","np.sum(long_open_res == 1) : 2018\n"]},{"output_type":"stream","name":"stdout","text":["idep_plot elapsed time : 0.20801091194152832\n","en_ex_pairing elapsed time : 0.09827303886413574\n","short_obj.shape : (183, 5)\n","long_obj.shape : (92, 5)\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 100681\n","np.sum(long_open_res == 1) : 99012\n","np.sum(short_open_res == 1) : 17353\n","np.sum(long_open_res == 1) : 18310\n","np.sum(short_open_res == 1) : 2078\n","np.sum(long_open_res == 1) : 2018\n","np.sum(short_open_res == 1) : 2078\n","np.sum(long_open_res == 1) : 2018\n"]},{"output_type":"stream","name":"stdout","text":["idep_plot elapsed time : 0.21625757217407227\n","en_ex_pairing elapsed time : 0.1836376190185547\n","short_obj.shape : (183, 5)\n","long_obj.shape : (92, 5)\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 100681\n","np.sum(long_open_res == 1) : 99012\n","np.sum(short_open_res == 1) : 17353\n","np.sum(long_open_res == 1) : 18310\n","np.sum(short_open_res == 1) : 2078\n","np.sum(long_open_res == 1) : 2018\n","np.sum(short_open_res == 1) : 2078\n","np.sum(long_open_res == 1) : 2018\n"]},{"output_type":"stream","name":"stdout","text":["idep_plot elapsed time : 0.21225714683532715\n","en_ex_pairing elapsed time : 0.1327199935913086\n","short_obj.shape : (183, 5)\n","long_obj.shape : (92, 5)\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 100681\n","np.sum(long_open_res == 1) : 99012\n","np.sum(short_open_res == 1) : 17353\n","np.sum(long_open_res == 1) : 18310\n","np.sum(short_open_res == 1) : 2078\n","np.sum(long_open_res == 1) : 2018\n","np.sum(short_open_res == 1) : 2078\n","np.sum(long_open_res == 1) : 2018\n"]},{"output_type":"stream","name":"stdout","text":["idep_plot elapsed time : 0.2113633155822754\n","en_ex_pairing elapsed time : 0.14110636711120605\n","short_obj.shape : (183, 5)\n","long_obj.shape : (91, 5)\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 100681\n","np.sum(long_open_res == 1) : 99012\n","np.sum(short_open_res == 1) : 17353\n","np.sum(long_open_res == 1) : 18310\n","np.sum(short_open_res == 1) : 2078\n","np.sum(long_open_res == 1) : 2018\n","np.sum(short_open_res == 1) : 2078\n","np.sum(long_open_res == 1) : 2018\n"]},{"output_type":"stream","name":"stdout","text":["idep_plot elapsed time : 0.2062058448791504\n","en_ex_pairing elapsed time : 0.14747834205627441\n","short_obj.shape : (183, 5)\n","long_obj.shape : (91, 5)\n","idep_plot elapsed time : 0.19914889335632324\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 100681\n","np.sum(long_open_res == 1) : 99012\n","np.sum(short_open_res == 1) : 17353\n","np.sum(long_open_res == 1) : 18310\n","np.sum(short_open_res == 1) : 2078\n","np.sum(long_open_res == 1) : 2018\n","np.sum(short_open_res == 1) : 2078\n","np.sum(long_open_res == 1) : 2018\n"]},{"output_type":"stream","name":"stdout","text":["en_ex_pairing elapsed time : 0.15386390686035156\n","short_obj.shape : (183, 5)\n","long_obj.shape : (91, 5)\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 100681\n","np.sum(long_open_res == 1) : 99012\n","np.sum(short_open_res == 1) : 17353\n","np.sum(long_open_res == 1) : 18310\n","np.sum(short_open_res == 1) : 2078\n","np.sum(long_open_res == 1) : 2018\n","np.sum(short_open_res == 1) : 2078\n","np.sum(long_open_res == 1) : 2018\n"]},{"output_type":"stream","name":"stdout","text":["idep_plot elapsed time : 0.20255589485168457\n","en_ex_pairing elapsed time : 0.18609309196472168\n","short_obj.shape : (183, 5)\n","long_obj.shape : (91, 5)\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 100681\n","np.sum(long_open_res == 1) : 99012\n","np.sum(short_open_res == 1) : 17353\n","np.sum(long_open_res == 1) : 18310\n","np.sum(short_open_res == 1) : 2078\n","np.sum(long_open_res == 1) : 2018\n","np.sum(short_open_res == 1) : 2078\n","np.sum(long_open_res == 1) : 2018\n"]},{"output_type":"stream","name":"stdout","text":["idep_plot elapsed time : 0.2053663730621338\n","en_ex_pairing elapsed time : 0.18819427490234375\n","short_obj.shape : (182, 5)\n","long_obj.shape : (91, 5)\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 100681\n","np.sum(long_open_res == 1) : 99012\n","np.sum(short_open_res == 1) : 17353\n","np.sum(long_open_res == 1) : 18310\n","np.sum(short_open_res == 1) : 2078\n","np.sum(long_open_res == 1) : 2018\n","np.sum(short_open_res == 1) : 2078\n","np.sum(long_open_res == 1) : 2018\n"]},{"output_type":"stream","name":"stdout","text":["idep_plot elapsed time : 0.20166349411010742\n","en_ex_pairing elapsed time : 0.19433093070983887\n","short_obj.shape : (182, 5)\n","long_obj.shape : (91, 5)\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 100681\n","np.sum(long_open_res == 1) : 99012\n","np.sum(short_open_res == 1) : 17353\n","np.sum(long_open_res == 1) : 18310\n","np.sum(short_open_res == 1) : 2078\n","np.sum(long_open_res == 1) : 2018\n","np.sum(short_open_res == 1) : 2078\n","np.sum(long_open_res == 1) : 2018\n"]},{"output_type":"stream","name":"stdout","text":["idep_plot elapsed time : 0.20362114906311035\n","en_ex_pairing elapsed time : 0.2056262493133545\n","short_obj.shape : (181, 5)\n","long_obj.shape : (91, 5)\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 100681\n","np.sum(long_open_res == 1) : 99012\n","np.sum(short_open_res == 1) : 17353\n","np.sum(long_open_res == 1) : 18310\n","np.sum(short_open_res == 1) : 2078\n","np.sum(long_open_res == 1) : 2018\n","np.sum(short_open_res == 1) : 2078\n","np.sum(long_open_res == 1) : 2018\n"]},{"output_type":"stream","name":"stdout","text":["idep_plot elapsed time : 0.2042984962463379\n","en_ex_pairing elapsed time : 0.20847702026367188\n","short_obj.shape : (181, 5)\n","long_obj.shape : (91, 5)\n","idep_plot elapsed time : 0.19941377639770508\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 100681\n","np.sum(long_open_res == 1) : 99012\n","np.sum(short_open_res == 1) : 17353\n","np.sum(long_open_res == 1) : 18310\n","np.sum(short_open_res == 1) : 2078\n","np.sum(long_open_res == 1) : 2018\n","np.sum(short_open_res == 1) : 2078\n","np.sum(long_open_res == 1) : 2018\n"]},{"output_type":"stream","name":"stdout","text":["en_ex_pairing elapsed time : 0.22302722930908203\n","short_obj.shape : (181, 5)\n","long_obj.shape : (91, 5)\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 100681\n","np.sum(long_open_res == 1) : 99012\n","np.sum(short_open_res == 1) : 17353\n","np.sum(long_open_res == 1) : 18310\n","np.sum(short_open_res == 1) : 2078\n","np.sum(long_open_res == 1) : 2018\n","np.sum(short_open_res == 1) : 2078\n","np.sum(long_open_res == 1) : 2018\n"]},{"output_type":"stream","name":"stdout","text":["idep_plot elapsed time : 0.20234036445617676\n","en_ex_pairing elapsed time : 0.23124480247497559\n","short_obj.shape : (180, 5)\n","long_obj.shape : (91, 5)\n","idep_plot elapsed time : 0.19838428497314453\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 100681\n","np.sum(long_open_res == 1) : 99012\n","np.sum(short_open_res == 1) : 17353\n","np.sum(long_open_res == 1) : 18310\n","np.sum(short_open_res == 1) : 2078\n","np.sum(long_open_res == 1) : 2018\n","np.sum(short_open_res == 1) : 2078\n","np.sum(long_open_res == 1) : 2018\n"]},{"output_type":"stream","name":"stdout","text":["en_ex_pairing elapsed time : 0.24717402458190918\n","short_obj.shape : (180, 5)\n","long_obj.shape : (91, 5)\n","idep_plot elapsed time : 0.19729161262512207\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 100681\n","np.sum(long_open_res == 1) : 99012\n","np.sum(short_open_res == 1) : 17353\n","np.sum(long_open_res == 1) : 18310\n","np.sum(short_open_res == 1) : 2078\n","np.sum(long_open_res == 1) : 2018\n","np.sum(short_open_res == 1) : 2078\n","np.sum(long_open_res == 1) : 2018\n"]},{"output_type":"stream","name":"stdout","text":["en_ex_pairing elapsed time : 0.2515571117401123\n","short_obj.shape : (180, 5)\n","long_obj.shape : (91, 5)\n","idep_plot elapsed time : 0.202378511428833\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1728x576 with 36 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["# from google.colab import output\n","# ------------ survey param ------------ #\n","# itv_num_list = [1, 3, 5, 15]\n","# itv_list = ['15m', '30m', '1h', '4h']\n","# itv_list = ['3m', '5m', '15m', '30m', '1h', '4h']\n","# val_list = np.arange(-0.5, -0.9, -0.1)     # prcn 1\n","val_list = np.arange(0.0, 0.5, 0.03)  # prcn 2\n","# val_list = np.arange(-0.5, -0.6, -0.005)    # prcn 3\n","# val_list = np.arange(0.944, 0.945, 0.0001)    # prcn 4\n","# val_list = np.arange(70, 80, 1)   # prcn -1\n","# val_list = np.arange(200, 180, -5)   # prcn -2\n","# val_list = talib.get_function_groups()['Pattern Recognition']\n","\n","# ------------ get survey_res ------------ #\n","result = []\n","res_shape = (3, 12)  # short, long, both x data\n","config_list_copy = copy.deepcopy(config_list)\n","for set_val in val_list:\n","  # ------------ open 결정 이전의 인자값 ------------ #\n","  # ------ point * dur. ------ #\n","  # config_list_copy[0].loc_set.point.candle_pattern = set_val\n","  # config_list_copy[0].loc_set.zone.degree_list = set_val\n","  # config_list_copy[0].loc_set.point2.wick_score_list = str([set_val])\n","  # config_list_copy[0].loc_set.zone.ir = set_val  \n","  # config_list_copy[0].loc_set.zone.abs_ratio = set_val  \n","\n","  # ------------ open 결정 이후의 인자값 ------------ #\n","  # ------ utils ------ #\n","  # config_list_copy[0].tr_set.tp_gap = set_val  \n","  # config_list_copy[0].tr_set.ep_gap = set_val \n","  config_list_copy[0].tr_set.out_gap = set_val  \n","\n","  # config_list_copy[0].tr_set.tp_gap = abs(set_val) - 0.5\n","  # config_list_copy[0].tr_set.out_gap = set_val + 0.5\n","  # config_list_copy[0].tr_set.wb_tp_gap = config_list_copy[0].tr_set.tp_gap\n","  # config_list_copy[0].tr_set.wb_out_gap = config_list_copy[0].tr_set.out_gap\n","\n","  # ------ entry, exit (ep, tp, out vars.) ------ #\n","  # config_list_copy[0].tr_set.ei_k = set_val\n","  # config_list_copy[0].ep_set.ep_out_tick = set_val  \n"," \n","  for utils_, config_ in zip(utils_list, config_list_copy):\n","    # enlist_rtc(res_df, config_, np_timeidx)\n","    enlist_tr(res_df, config_, np_timeidx)\n","  # open_info_df = get_open_info_df(ep_loc_v3, res_df, np_timeidx, ID_list, config_list_copy, id_idx_list)   # point * mr_res 이기 때문에 utils_tr & rtc 의 영향을 충분히 받음\n","\n","  try:\n","    result.append(get_res_v5(res_df, open_info_df, ohlc_list, config_list_copy, np_timeidx, funcs, test_ratio=test_ratio, plot_is=1, signi=True))    \n","  except:\n","    result.append(np.full(res_shape, np.nan))\n","    # pass\n","\n","survey_res_list = [np.array(result)[:, s_i::3] for s_i in range(3)]   # 3 for s, l, b\n","# short_res, long_res, both_res = survey_res_list\n","\n","# ------------ plot survey_res ------------ #\n","title_list = [\"short\", \"long\", \"both\"]\n","sub_title_list = ['prcn', 'wb', 'len_pr', 'dpf', 'wr', 'sr', 'acc_pr', 'sum_pr', 'min_pr', 'liqd', 'acc_mdd', 'sum_mdd']\n","space_ = \" \" * 120\n","\n","fig = plt.figure(figsize=(24, 8))\n","plt.style.use('dark_background')\n","gs = gridspec.GridSpec(nrows=1,\n","                        ncols=3,\n","                        # height_ratios=[1, 1, 1]\n","                      )\n","# nrows, ncols, h_r = 3, 3, [1, 1, 1]\n","nrows, ncols, h_r = 3, 4, [1, 1, 1]\n","# nrows, ncols, h_r = 4, 3, [1, 1, 1, 1]\n","# if d_idx == 0:\n","# else:\n","  # nrows, ncols, h_r = 2, 2, [1, 1]\n","\n","for d_idx, (title_name, survey_res) in enumerate(zip(title_list, survey_res_list)):  \n","  inner_gs = gs[d_idx].subgridspec(nrows=nrows,\n","                        ncols=ncols,\n","                        height_ratios=h_r\n","                      )\n","  for in_idx, (data_, sub_title) in enumerate(zip(survey_res.T, sub_title_list)):\n","    plt.subplot(inner_gs[in_idx])\n","    data = data_.ravel()\n","    valid_idx = ~np.isnan(data)\n","    if np.sum(valid_idx) > 0:\n","      if type(val_list[0]) == str:\n","        x, y = np.arange(len(val_list))[valid_idx], data[valid_idx]\n","      else:\n","        x, y = val_list[valid_idx], data[valid_idx]\n","      plt.plot(x, y)  # 앞에서부터 len(result) 만큼만    \n","      plt.title(sub_title + '_{:.2f}'.format(x[np.argmax(y)]))\n","    else:\n","      plt.title(sub_title)\n","\n","plt.suptitle(space_.join(title_list))\n","plt.show()\n","# print(\"\\n\")"]},{"cell_type":"code","source":["\n","# ------------ plot survey_res ------------ #\n","title_list = [\"short\", \"long\", \"both\"]\n","sub_title_list = ['prcn', 'wb', 'len_pr', 'dpf', 'wr', 'sr', 'acc_pr', 'sum_pr', 'min_pr', 'liqd', 'acc_mdd', 'sum_mdd']\n","space_ = \" \" * 120\n","\n","fig = plt.figure(figsize=(24, 8))\n","plt.style.use('dark_background')\n","gs = gridspec.GridSpec(nrows=1,\n","                        ncols=3,\n","                        # height_ratios=[1, 1, 1]\n","                      )\n","# nrows, ncols, h_r = 3, 3, [1, 1, 1]\n","nrows, ncols, h_r = 3, 4, [1, 1, 1]\n","# nrows, ncols, h_r = 4, 3, [1, 1, 1, 1]\n","# if d_idx == 0:\n","# else:\n","  # nrows, ncols, h_r = 2, 2, [1, 1]\n","\n","for d_idx, (title_name, survey_res) in enumerate(zip(title_list, survey_res_list)):  \n","  inner_gs = gs[d_idx].subgridspec(nrows=nrows,\n","                        ncols=ncols,\n","                        height_ratios=h_r\n","                      )\n","  for in_idx, (data_, sub_title) in enumerate(zip(survey_res.T, sub_title_list)):\n","    plt.subplot(inner_gs[in_idx])\n","    data = data_.ravel()\n","    valid_idx = ~np.isnan(data)\n","    if np.sum(valid_idx) > 0:\n","      if type(val_list[0]) == str:\n","        x, y = np.arange(len(val_list))[valid_idx], data[valid_idx]\n","      else:\n","        x, y = val_list[valid_idx], data[valid_idx]\n","      plt.plot(x, y)  # 앞에서부터 len(result) 만큼만    \n","      plt.title(sub_title + '_{:.2f}'.format(x[np.argmax(y)]))\n","    else:\n","      plt.title(sub_title)\n","\n","plt.suptitle(space_.join(title_list))\n","plt.show()"],"metadata":{"id":"oE5zkT75Beiy"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"EJ4f-3Zf4ImT"},"source":["### backtrader validation"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"pbYUlJl34ImU"},"outputs":[],"source":["# ------ open validation ------ #\n","long_open_ = res_df['long_open_{}'.format(config.selection_id)].to_numpy()\n","long_open_ts = list(map(lambda x : str(x), res_df.index[long_open_ == 1]))  "]},{"cell_type":"code","execution_count":null,"metadata":{"id":"wyYMYcxx4ImV"},"outputs":[],"source":["long_index = open_info_df.side == 'BUY'\n","\n","for ts in res_df.index[open_info_df.index[long_index]]:\n","  print(ts)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"BPI-9QX74ImW"},"outputs":[],"source":["trade_log_name = \"ETHUSDT_1650120909.pkl\"\n","trade_log_dir_path = \"./trade_log/0405_wave_trader_realterm\"\n","\n","with open(os.path.join(trade_log_dir_path, trade_log_name), 'rb') as f:\n","  trade_log = pickle.load(f)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"FMXhzaTK4ImX"},"outputs":[],"source":["trade_log"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"DiTKuq9T4ImY"},"outputs":[],"source":["# 1. ts 에 pair 된 en_p, ex_p 만 비교하면 될 것\n","#   -> open_idx, en_idx, ex_idx 조회하면 될 것\n","\n","pos_side = \"BUY\" # SELL BUY\n","val_obj = short_obj if pos_side == \"SELL\" else long_obj\n","\n","# ------ get idep trade_info ------ #\n","en_ts = list(map(lambda x : str(x), res_df.index[val_obj[2].astype(int).ravel()])) \n","ex_ts = list(map(lambda x : str(x), res_df.index[val_obj[3].astype(int).ravel()])) \n","en_p = val_obj[0].ravel()\n","ex_p = val_obj[1].ravel()\n","\n","# ------ execute ts comparison ------ #\n","logged_en_ts = [k for k, v in trade_log.items() if 'entry' in v if pos_side in v]\n","\n","lacked_ts = [ts for ts in en_ts if not ts in logged_en_ts]   # trade_log 에 없는 거래\n","added_ts = [ts for ts in logged_en_ts if not ts in en_ts]    # trade_log 에만 있는 거래\n","\n","print(lacked_ts)\n","print(added_ts)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"VnTmGTJI4ImZ"},"outputs":[],"source":["# ------ check added_ts ------ #\n","keys = list(trade_log.keys())\n","\n","for k_i in range(len(keys)):\n","  if keys[k_i] in added_ts:\n","    # print(trade_log[keys[k_i]])\n","    # print(trade_log[keys[k_i + 1]])\n","    print(keys[k_i], trade_log[keys[k_i]])\n","    print(keys[k_i + 1], trade_log[keys[k_i + 1]])"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Vn5x7mcP4ImZ"},"outputs":[],"source":["# ------ price sync_check ------ #\n","accept_price_gap = 0.1\n","for i in range(len(en_ts)):\n","  try:\n","    print(en_ts[i], trade_log[en_ts[i]][0] - en_p[i])\n","    # print(trade_log[str(ex_ts[i])])\n","    # print(ex_ts[i], trade_log[ex_ts[i]][0] - ex_p[i])\n","    print(ex_ts[i])\n","    print()\n","\n","  except Exception as e:\n","    print(e)\n"]},{"cell_type":"markdown","metadata":{"id":"1GVZ03zDyU2N"},"source":["### legacy"]},{"cell_type":"markdown","metadata":{"id":"IWO7KkqltMFt"},"source":["#### main_functions"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"MY1csdNRLGsk"},"outputs":[],"source":["def get_open_info_df(ep_loc_v2, res_df, np_timeidx, ID_list, config_list, id_idx_list):\n","  start_0 = time.time()\n","  # ------ get mr_res, zone_arr ------ #\n","  short_mr_res_obj = np.array([ep_loc_v2(res_df, config_, np_timeidx, show_detail=True, ep_loc_side=OrderSide.SELL) for config_ in config_list])\n","  long_mr_res_obj = np.array([ep_loc_v2(res_df, config_, np_timeidx, show_detail=True, ep_loc_side=OrderSide.BUY) for config_ in config_list])\n","  short_open_idx_list = [np.where(res_df['short_open_{}'.format(id)].to_numpy() * mr_res)[0] for id, mr_res in zip(ID_list, short_mr_res_obj[:, 0].astype(np.float64))]   # \"point * mr_Res\"\n","  long_open_idx_list = [np.where(res_df['long_open_{}'.format(id)].to_numpy() * mr_res)[0] for id, mr_res in zip(ID_list, long_mr_res_obj[:, 0].astype(np.float64))]  # zip 으로 zone (str) 과 묶어서 dtype 변경됨\n","\n","  # ------ open_info_arr ------ #\n","  short_side_list = [np.full(len(list_), OrderSide.SELL) for list_ in short_open_idx_list]\n","  long_side_list = [np.full(len(list_), OrderSide.BUY) for list_ in long_open_idx_list]\n","\n","  short_zone_list = [zone_res[short_open_idx] for zone_res, short_open_idx in zip(short_mr_res_obj[:, 1], short_open_idx_list)]\n","  long_zone_list = [zone_res[long_open_idx] for zone_res, long_open_idx in zip(long_mr_res_obj[:, 1], long_open_idx_list)]\n","\n","  short_id_list = [np.full(len(list_), id) for id, list_ in zip(ID_list, short_open_idx_list)]\n","  long_id_list = [np.full(len(list_), id) for id, list_ in zip(ID_list, long_open_idx_list)]\n","\n","  selected_id_idx = np.arange(len(id_idx_list))\n","  short_id_idx_list = [np.full(len(list_), id) for id, list_ in zip(selected_id_idx, short_open_idx_list)]\n","  long_id_idx_list = [np.full(len(list_), id) for id, list_ in zip(selected_id_idx, long_open_idx_list)]\n","\n","  # ------ get open_info_df ------ #\n","  #   series 만들어서 short / long 끼리 합치고 둘이 합치고, 중복은 우선 순위 정해서 제거\n","  short_open_df_list = [pd.DataFrame(index=index_, data=np.vstack((data_)).T, columns=['side', 'zone', 'id', 'id_idx']) for index_, data_ in zip(short_open_idx_list, zip(short_side_list, short_zone_list, short_id_list, short_id_idx_list))]\n","  long_open_df_list = [pd.DataFrame(index=index_, data=np.vstack((data_)).T, columns=['side', 'zone', 'id', 'id_idx']) for index_, data_ in zip(long_open_idx_list, zip(long_side_list, long_zone_list, long_id_list, long_id_idx_list))]\n","\n","  open_info_df = pd.concat(short_open_df_list + long_open_df_list)\n","  # ------ sorting + unique ------ #\n","  open_info_df.sort_index(inplace=True)\n","  # print(len(open_info_df))\n","  # print(len(open_info_df))\n","  # open_info_df.head()\n","  print(\"get_open_info_df elapsed time :\", time.time() - start_0)\n","  return open_info_df[~open_info_df.index.duplicated(keep='first')]  # 먼저 순서를 우선으로 지정  "]},{"cell_type":"code","execution_count":null,"metadata":{"id":"eiQ36_SLLE3w"},"outputs":[],"source":["def get_res_v5(res_df, open_info_df, ohlc_list, config_list, np_timeidx, funcs, inversion=False, test_ratio=0.3, plot_is=True, signi=False):\n","  # ------------ make open_info_list ------------ #\n","  open_idx = open_info_df.index.to_numpy()\n","  len_df = len(res_df)\n","  s_idx = (open_idx < int(len_df * (1 - test_ratio))) == plot_is\n","  s_open_info_df = open_info_df[s_idx]\n","  s_open_idx = open_idx[s_idx]\n","\n","  open_info_list = [s_open_info_df[col_].to_numpy() for col_ in s_open_info_df.columns]\n","  side_arr, zone_arr, id_arr, id_idx_arr = open_info_list\n","\n","  # ------------ get paired_res ------------ #\n","  start_0 = time.time()\n","  paired_res = en_ex_pairing_v5(res_df, s_open_idx, open_info_list, ohlc_list, config_list, np_timeidx, funcs)\n","  # valid_openi_arr, pair_idx_arr, pair_price_arr, lvrg_arr, fee_arr, tpout_arr = paired_res\n","  print(\"en_ex_pairing elapsed time :\", time.time() - start_0)  #  0.37 --> 0.3660471439361572 --> 0.21(lesser if)\n","\n","  # ------------ idep_plot ------------ #\n","  start_0 = time.time()\n","  high, low = ohlc_list[1:3]\n","  res = idep_plot_v13(res_df, len_df, config_list[0], high, low, s_open_idx, side_arr, paired_res, inversion=inversion, sample_ratio=1 - test_ratio, signi=signi)\n","  print(\"idep_plot elapsed time :\", time.time() - start_0)   # 1.40452 (v6) 1.4311 (v5)\n","\n","  return res"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"8LiKwfiJ4bvM"},"outputs":[],"source":["def plot_info_v6(gs, gs_idx, sample_len, tr, prcn, rc, bars_in, pr, total_pr, cum_pr, liqd, leverage, title_position, fontsize):\n","  try:\n","    plt.subplot(gs[gs_idx])\n","    idep_res_obj = get_res_info_nb_v2(sample_len, pr, total_pr, cum_pr, liqd)\n","    plt.plot(cum_pr)\n","    plt.plot(idep_res_obj[-1], color='gold')\n","    if sample_len is not None:\n","      plt.axvline(sample_len, alpha=1., linestyle='--', color='#ffeb3b')\n","    # title_str = \"prcn : {:.3f} rc : {:.3f}\\n len_pr : {} dpf : {:.3f}\\n wr : {:.3f} sr : {:.3f}\\n acc_pr : {:.3f} sum_pr : {:.3f}\\n\" +\\\n","    #           \"min_pr : {:.3f} liqd : {:.3f}\\n acc_mdd : -{:.3f} sum_mdd : -{:.3f}\\n leverage {}\"\n","    # title_str = \"tr : {:.3f}\\n prcn : {:.3f}\\n rc : {:.3f}\\n len_pr : {}\\n dpf : {:.3f}\\n wr : {:.3f}\\n sr : {:.3f}\\n acc_pr : {:.3f}\\n sum_pr : {:.3f}\\n\" +\\\n","    #           \"min_pr : {:.3f}\\n liqd : {:.3f}\\n acc_mdd : -{:.3f}\\n sum_mdd : -{:.3f}\\n leverage {}\"\n","    title_str = \"tr : {:.3f}\\n prcn : {:.3f}\\n wave_bias : {:.3f}\\n bars_in : {:.3f}\\n len_pr : {}\\n dpf : {:.3f}\\n wr : {:.3f}\\n sr : {:.3f}\\n acc_pr : {:.3f}\\n sum_pr : {:.3f}\\n\" +\\\n","              \"min_pr : {:.3f}\\n liqd : {:.3f}\\n acc_mdd : -{:.3f}\\n sum_mdd : -{:.3f}\\n leverage {}\"\n","    plt.title(title_str.format(tr, prcn, rc, bars_in, *idep_res_obj[:-1], leverage), position=title_position, fontsize=fontsize)\n","  except Exception as e:\n","    print(\"error in plot_info :\", e)\n","\n","  return gs_idx + 1"]},{"cell_type":"code","source":["def ffill_line(line_, idx_):\n","  len_line = len(line_)\n","  total_en_idx = np.zeros(len_line)\n","  total_en_idx[idx_] = 1\n","  idx_line_ = np.where(total_en_idx, line_, np.nan)\n","  idx_line = pd.Series(idx_line_).ffill().to_numpy()\n","\n","  return idx_line\n","\n","def get_wave_bias_v2(res_df, config, high, low, len_df, short_obj, long_obj):\n","  \n","  short_op_idx = short_obj[-1].astype(int)\n","  short_en_idx = short_obj[2].astype(int)\n","  short_en_tp1 = ffill_line(res_df['short_wave_1_{}'.format(config.selection_id)].to_numpy(), short_op_idx)   # en_idx 에 sync 된 open_idx 를 사용해야함\n","  short_en_out0 = ffill_line(res_df['short_wave_0_{}'.format(config.selection_id)].to_numpy(), short_op_idx)\n","\n","  long_op_idx = long_obj[-1].astype(int)\n","  long_en_idx = long_obj[2].astype(int)\n","  long_en_tp1 = ffill_line(res_df['long_wave_1_{}'.format(config.selection_id)].to_numpy(), long_op_idx)\n","  long_en_out0 = ffill_line(res_df['long_wave_0_{}'.format(config.selection_id)].to_numpy(), long_op_idx)\n","\n","  bias_info_tick = config.tr_set.bias_info_tick\n","\n","  # 1. min 에 초점을 맞추는 거니까, touch 없을시 len_df 로 설정\n","  # 2. future_data 사용이니까, shift(-bias_info_tick) 설정\n","  # 3. entry 다음 idx 부터 -> tp & out 체결 logic 이 현재 entry_idx 부터 되어있어서 취소\n","  len_df_range = np.arange(len_df)\n","  last_idx = len_df - 1\n","  shift_range = bias_info_tick - 1  # entry_idx 까지 포함해서 wave_bias check\n","  short_en_tp1_touch_idx = pd.Series(np.where(low <= short_en_tp1, len_df_range, last_idx)).rolling(bias_info_tick, min_periods=1).min().shift(-shift_range).to_numpy()[short_en_idx]  \n","  short_en_out0_touch_idx = pd.Series(np.where(high >= short_en_out0, len_df_range, last_idx)).rolling(bias_info_tick, min_periods=1).min().shift(-shift_range).to_numpy()[short_en_idx]\n","\n","  long_en_tp1_touch_idx = pd.Series(np.where(high >= long_en_tp1, len_df_range, last_idx)).rolling(bias_info_tick, min_periods=1).min().shift(-shift_range).to_numpy()[long_en_idx]\n","  long_en_out0_touch_idx = pd.Series(np.where(low <= long_en_out0, len_df_range, last_idx)).rolling(bias_info_tick, min_periods=1).min().shift(-shift_range).to_numpy()[long_en_idx]\n","\n","  short_true_bias_idx = short_en_tp1_touch_idx < short_en_out0_touch_idx  # true_bias 의 조건\n","  long_true_bias_idx = long_en_tp1_touch_idx < long_en_out0_touch_idx\n","\n","  short_false_bias_idx = short_en_tp1_touch_idx >= short_en_out0_touch_idx  # false_bias 의 조건\n","  long_false_bias_idx = long_en_tp1_touch_idx >= long_en_out0_touch_idx\n","\n","  # return short_true_bias_idx.ravel(), short_false_bias_idx.ravel(), long_true_bias_idx.ravel(), long_false_bias_idx.ravel()\n","  return short_true_bias_idx, short_false_bias_idx, long_true_bias_idx, long_false_bias_idx, short_en_tp1[short_en_idx], short_en_out0[short_en_idx], long_en_tp1[long_en_idx], long_en_out0[long_en_idx]\n","\n","  \n","def wave_bias(true_idx, false_idx):  # 정확하게 하려고, true & false 로 기준함\n","    true_sum = np.sum(true_idx)\n","    false_sum = np.sum(false_idx)\n","    return true_sum / (true_sum + false_sum)"],"metadata":{"id":"aFpEbTaECnGW"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def get_pr_v4(open_side, h, l, obj, tpout, lvrg, fee, p_ranges, p_qty_ratio, inversion=False):  # --> 여기서 사용하는 ex_p = ex_p\n","\n","    en_p = obj[0]\n","    # ex_p = obj[1]\n","    tp, out = np.split(tpout, 2, axis=1)\n","    len_p = len(p_ranges)\n","    en_ps, tps, outs, lvrgs, fees = [np.tile(arr_, (1, len_p)) for arr_ in [en_p, tp, out, lvrg, fee]]\n","\n","    np_obj = np.array(obj).T[0]\n","    assert len(np_obj.shape) == 2\n","\n","    # iin == iout 인 경우 분리\n","    en_idx = np_obj[:, 2]\n","    ex_idx = np_obj[:, 3]\n","    equal_idx = en_idx == ex_idx\n","\n","    min_low = np.full_like(en_p, np.nan)\n","    min_low[~equal_idx] = np.array([np.min(l[int(iin + 1):int(iout + 1)]) for _, _, iin, iout in np_obj[~equal_idx, :4]]).reshape(-1, 1)  # start from iin + 1 (tp 체결을 entry_idx 부터 보지 않음)\n","    max_high = np.full_like(en_p, np.nan)\n","    max_high[~equal_idx] = np.array([np.max(h[int(iin + 1):int(iout + 1)]) for _, _, iin, iout in np_obj[~equal_idx, :4]]).reshape(-1, 1)\n","\n","    if open_side == \"SELL\":\n","        p_tps = en_ps - (en_ps - tps) * p_ranges\n","        # min_low = np.full_like(en_p, np.nan)\n","        # min_low[~equal_idx] = np.array([np.min(l[int(iin + 1):int(iout + 1)]) for _, _, iin, iout in np_obj[~equal_idx, :4]]).reshape(-1, 1)  # start from iin + 1 (tp 체결을 entry_idx 부터 보지 않음)\n","        tp_idx = (np.tile(min_low, (1, len_p)) <= p_tps) * (np.tile(max_high, (1, len_p)) <= outs)  # entry_idx 포함해서 out touch 금지 (보수적 검증)\n","    else:\n","        p_tps = en_ps + (tps - en_ps) * p_ranges\n","        # max_high = np.full_like(en_p, np.nan)\n","        # max_high[~equal_idx] = np.array([np.max(h[int(iin + 1):int(iout + 1)]) for _, _, iin, iout in np_obj[~equal_idx, :4]]).reshape(-1, 1)\n","        tp_idx = (np.tile(max_high, (1, len_p)) >= p_tps) * (np.tile(min_low, (1, len_p)) >= outs)\n","\n","    ex_ps = outs.copy()\n","    ex_ps[tp_idx] = p_tps[tp_idx]\n","\n","    if open_side == \"SELL\":\n","        if not inversion:\n","            pr = ((en_ps / ex_ps - fees - 1) * lvrgs * p_qty_ratio).sum(axis=1) + 1\n","            # ------ liquidation ------ #\n","            max_high = np.full_like(en_p, np.nan)\n","            max_high[~equal_idx] = np.array([np.max(h[int(iin):int(iout)]) for _, _, iin, iout in np_obj[~equal_idx, :4]]).reshape(-1, 1)\n","            liqd = np.nanmin((en_p / max_high - fee - 1) * lvrg + 1)\n","        else:\n","            pr = ((ex_ps / en_ps - fees - 1) * lvrgs * p_qty_ratio).sum(axis=1) + 1\n","            # ------ liquidation ------ #\n","            min_low = np.full_like(en_p, np.nan)\n","            min_low[~equal_idx] = np.array([np.min(l[int(iin):int(iout)]) for _, _, iin, iout in np_obj[~equal_idx, :4]]).reshape(-1, 1)\n","            liqd = np.nanmin((min_low / en_p - fee - 1) * lvrg + 1)\n","    else:\n","        if not inversion:\n","            pr = ((ex_ps / en_ps - fees - 1) * lvrgs * p_qty_ratio).sum(axis=1) + 1\n","            # ------ liquidation ------ #\n","            min_low = np.full_like(en_p, np.nan)\n","            min_low[~equal_idx] = np.array([np.min(l[int(iin):int(iout)]) for _, _, iin, iout in np_obj[~equal_idx, :4]]).reshape(-1, 1)\n","            liqd = np.nanmin((min_low / en_p - fee - 1) * lvrg + 1)\n","        else:\n","            pr = ((en_ps / ex_ps - fees - 1) * lvrgs * p_qty_ratio).sum(axis=1) + 1\n","            # ------ liquidation ------ #\n","            max_high = np.full_like(en_p, np.nan)\n","            max_high[~equal_idx] = np.array([np.max(h[int(iin):int(iout)]) for _, _, iin, iout in np_obj[~equal_idx, :4]]).reshape(-1, 1)\n","            liqd = np.nanmin((en_p / max_high - fee - 1) * lvrg + 1)\n","\n","    return pr.reshape(-1, 1), liqd"],"metadata":{"id":"642Dt6urKfvF"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"xafHpMLwESKf"},"outputs":[],"source":["def idep_plot_v13(res_df, len_df, config, high, low, open_idx, side_arr, paired_res, inversion=False, sample_ratio=0.7, title_position=(0.5, 0.5), fontsize=15, signi=False):\n","    if not signi:\n","        plt.style.use(['dark_background', 'fast'])\n","        fig = plt.figure(figsize=(24, 8))\n","        gs = gridspec.GridSpec(nrows=2,  # row 몇 개\n","                               ncols=3,  # col 몇 개\n","                               height_ratios=[10, 1]\n","                               # height_ratios=[10, 10, 1]\n","                               )\n","    gs_idx = 0\n","    # plt.suptitle(key)\n","    \n","    p_ranges, p_qty_ratio = literal_eval(config.tp_set.p_ranges), literal_eval(config.tp_set.p_qty_ratio)\n","    assert np.sum(p_qty_ratio) == 1.0\n","    assert len(p_ranges) == len(p_qty_ratio)\n","\n","    if sample_ratio is not None:\n","      sample_len = int(len_df * sample_ratio)\n","    else:\n","      sample_len = len_df\n","\n","    # ------ short & long data preparation ------ #\n","    # start_0 = time.time()\n","    point1_arr, valid_openi_arr, pair_idx_arr, pair_price_arr, lvrg_arr, fee_arr, tpout_arr, tr_arr = paired_res    \n","    assert len(valid_openi_arr) != 0, \"assert len(valid_openi_arr) != 0\"    \n","    short_valid_openi_idx = np.where(side_arr[valid_openi_arr] == OrderSide.SELL)[0]  # valid_openi_arr 에 대한 idx, # side_arr,\n","    long_valid_openi_idx = np.where(side_arr[valid_openi_arr] == OrderSide.BUY)[0]\n","\n","    valid_open_idx = open_idx[valid_openi_arr].reshape(-1, 1)\n","\n","    short_obj = np.hstack((pair_price_arr, pair_idx_arr, valid_open_idx))[short_valid_openi_idx]\n","    long_obj = np.hstack((pair_price_arr, pair_idx_arr, valid_open_idx))[long_valid_openi_idx]\n","    both_obj = np.vstack((short_obj, long_obj))\n","    print(\"short_obj.shape :\", short_obj.shape)\n","    print(\"long_obj.shape :\", long_obj.shape)\n","\n","    short_obj, long_obj, both_obj = [np.split(obj_, 5, axis=1) for obj_ in [short_obj, long_obj, both_obj]]\n","\n","    short_point1_arr, long_point1_arr = [point1_arr[openi_idx_].reshape(-1, 1) for openi_idx_ in [short_valid_openi_idx, long_valid_openi_idx]]\n","    short_lvrg_arr, long_lvrg_arr = [lvrg_arr[openi_idx_].reshape(-1, 1) for openi_idx_ in [short_valid_openi_idx, long_valid_openi_idx]]\n","    short_fee_arr, long_fee_arr = [fee_arr[openi_idx_].reshape(-1, 1) for openi_idx_ in [short_valid_openi_idx, long_valid_openi_idx]]\n","    short_tpout_arr, long_tpout_arr = [tpout_arr[openi_idx_] for openi_idx_ in [short_valid_openi_idx, long_valid_openi_idx]]\n","    # short_bias_arr, long_bias_arr = [bias_arr[openi_idx_] for openi_idx_ in [short_valid_openi_idx, long_valid_openi_idx]]\n","    short_tr_arr, long_tr_arr = [tr_arr[openi_idx_] for openi_idx_ in [short_valid_openi_idx, long_valid_openi_idx]]\n","    # print(\"long_bias_arr.shape :\", long_bias_arr.shape)    \n","    # print(\"elapsed time :\", time.time() - start_0)\n","\n","    short_true_bias_idx, short_false_bias_idx, long_true_bias_idx, long_false_bias_idx, short_en_tp1, short_en_out0, long_en_tp1, long_en_out0 = \\\n","    get_wave_bias_v2(res_df, config, high, low, len_df, short_obj, long_obj)\n","\n","    len_short, len_long = len(short_valid_openi_idx), len(long_valid_openi_idx)\n","\n","    # ------ plot_data ------ #\n","    try:\n","      # start_0 = time.time()      \n","      if len_short == 0:\n","        short_pr = []\n","        gs_idx += 1\n","      else:\n","        short_tr = short_tr_arr.mean()\n","        short_pr, short_liqd = get_pr_v4(OrderSide.SELL, high, low, short_obj, short_tpout_arr, short_lvrg_arr, short_fee_arr, p_ranges, p_qty_ratio, inversion)\n","        short_total_pr = to_total_pr(len_df, short_pr, short_obj[-2])\n","        short_cum_pr = np.cumprod(short_total_pr)\n","        # short_liqd = liquidation_v2(OrderSide.SELL, h, short_obj[:4], short_lvrg_arr, short_fee_arr)\n","        short_prcn, short_rc = precision(short_pr, short_true_bias_idx), wave_bias(short_true_bias_idx, short_false_bias_idx)\n","        short_trade_ticks = np.mean(short_obj[-2] - short_obj[-1])\n","        if signi:\n","          short_idep_res_obj = (short_prcn, short_rc) + get_res_info_nb_v2(sample_len, short_pr, short_total_pr, short_cum_pr, short_liqd)\n","        else:\n","          gs_idx = plot_info_v6(gs, gs_idx, sample_len, short_tr, short_prcn, short_rc, short_trade_ticks, short_pr, short_total_pr, short_cum_pr, short_liqd, short_lvrg_arr[-1], title_position, fontsize)\n","      # print(\"elapsed time :\", time.time() - start_0)\n","\n","    except Exception as e:\n","      gs_idx += 1\n","      print(\"error in short plot_data :\", e)\n","\n","    try:\n","      # start_0 = time.time()   \n","      if len_long == 0:\n","        long_pr = []\n","        gs_idx += 1\n","      else:\n","        long_tr = long_tr_arr.mean()\n","        long_pr, long_liqd = get_pr_v4(OrderSide.BUY, high, low, long_obj, long_tpout_arr, long_lvrg_arr, long_fee_arr, p_ranges, p_qty_ratio, inversion)\n","        long_total_pr = to_total_pr(len_df, long_pr, long_obj[-2])\n","        long_cum_pr = np.cumprod(long_total_pr)\n","        # long_liqd = liquidation_v2(OrderSide.BUY, l, long_obj[:4], long_lvrg_arr, long_fee_arr)\n","        long_prcn, long_rc = precision(long_pr, long_true_bias_idx), wave_bias(long_true_bias_idx, long_false_bias_idx)\n","        long_trade_ticks = np.mean(long_obj[-2] - long_obj[-1])\n","        if signi:\n","          long_idep_res_obj = (long_prcn, long_rc) + get_res_info_nb_v2(sample_len, long_pr, long_total_pr, long_cum_pr, long_liqd)\n","        else:\n","          gs_idx = plot_info_v6(gs, gs_idx, sample_len, long_tr, long_prcn, long_rc, long_trade_ticks, long_pr, long_total_pr, long_cum_pr, long_liqd, long_lvrg_arr[-1], title_position, fontsize)\n","      # print(\"elapsed time :\", time.time() - start_0)\n","    except Exception as e:\n","      gs_idx += 1\n","      print(\"error in long plot_data :\", e)\n","\n","    \n","    try:\n","      # start_0 = time.time()\n","      if len_short * len_long == 0:\n","        both_pr = []\n","        gs_idx += 1\n","      else:\n","        both_tr = (short_tr + long_tr) / 2\n","        both_pr = np.vstack((short_pr, long_pr))  # for 2d arr, obj 를 1d 로 만들지 않는 이상, pr 은 2d 유지될 것\n","        both_total_pr = to_total_pr(len_df, both_pr, both_obj[-2])\n","        both_cum_pr = np.cumprod(both_total_pr)\n","        both_liqd = min(short_liqd, long_liqd)\n","        both_true_bias_idx = np.vstack((short_true_bias_idx, long_true_bias_idx))  # vstack for 2d arr\n","        both_false_bias_idx = np.vstack((short_false_bias_idx, long_false_bias_idx))\n","        both_prcn, both_rc = precision(both_pr, both_true_bias_idx), wave_bias(both_true_bias_idx, both_false_bias_idx)\n","        both_trade_ticks = np.mean(both_obj[-2] - both_obj[-1])\n","        if signi:\n","          both_idep_res_obj = (both_prcn, both_rc) + get_res_info_nb_v2(sample_len, both_pr, both_total_pr, both_cum_pr, both_liqd)\n","        else:\n","          gs_idx = plot_info_v6(gs, gs_idx, sample_len, both_tr, both_prcn, both_rc, both_trade_ticks, both_pr, both_total_pr, both_cum_pr, both_liqd, lvrg_arr[-1], title_position, fontsize)\n","      # print(\"elapsed time :\", time.time() - start_0)\n","    except Exception as e:\n","      gs_idx += 1\n","      print(\"error in both plot_data :\", e)\n","\n","    if not signi:\n","      if len_short * len_long > 0:\n","        for obj, cum_pr in zip([short_obj, long_obj, both_obj], [short_cum_pr, long_cum_pr, both_cum_pr]):\n","          try:\n","            # start_0 = time.time()\n","            gs_idx = frq_dev_plot_v3(gs, gs_idx, len_df, sample_len, obj[-2], cum_pr[-1], fontsize)\n","            # print(\"elapsed time :\", time.time() - start_0)          \n","          except Exception as e:\n","            gs_idx += 1\n","            print(\"error in frq_dev_plot_v3 :\", e)\n","        plt.show()\n","        plt.close()\n","\n","      return short_pr, short_obj, short_lvrg_arr, short_fee_arr, short_tpout_arr, short_true_bias_idx, short_false_bias_idx, short_point1_arr, short_en_tp1, short_en_out0, \\\n","      long_pr, long_obj, long_lvrg_arr, long_fee_arr, long_tpout_arr, long_true_bias_idx, long_false_bias_idx, long_point1_arr, long_en_tp1, long_en_out0\n","        \n","    else:\n","        return [short_idep_res_obj[:-1], long_idep_res_obj[:-1], both_idep_res_obj[:-1]]"]},{"cell_type":"markdown","metadata":{"id":"EFyWTuscH8VH"},"source":["#### get paired_res function"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"qfbtFVMR01UJ"},"outputs":[],"source":["def en_ex_pairing_v5(res_df, open_idx, open_info_list, ohlc_list, config_list, np_timeidx, funcs):  # 이미 충분히 줄여놓은 idx 임\n","    side_arr, zone_arr, id_arr, id_idx_arr = open_info_list\n","    id_idx_arr = id_idx_arr.astype(int)\n","\n","    ep_out, ep_loc_point2, lvrg_set = funcs\n","\n","    point1_list, valid_openi_list, pair_idx_list, pair_price_list, lvrg_list, fee_list, tpout_list, tr_list = [[] for li in range(8)]\n","    len_df = len(res_df)\n","    len_open_idx = len(open_idx)\n","    i, open_i = 0, -1  # i for total_res_df indexing\n","\n","    while 1:\n","        # ------------ entry phase ------------ #\n","        open_i += 1  # 확인 끝났으면 조기 이탈(+1), 다음 open_idx 조사 진행\n","        if open_i >= len_open_idx:\n","            break\n","\n","        # ------ ep_loc ------ #\n","        op_idx = open_idx[open_i]  # open_i 는 i 와 별개로 운영\n","        if op_idx < i:  # i = 이전 거래 끝난후의 res_df index - \"거래 종료후 거래 시작\", '<' : 거래 종료시점 진입 가능하다는 의미\n","            continue\n","\n","        # ------ dynamic data by ID ------ #\n","        #     1. 해당 id 로 config 재할당해야함\n","        id_idx = id_idx_arr[open_i]\n","        config = config_list[id_idx]\n","        selection_id = config.selection_id\n","        open_side = side_arr[open_i]\n","\n","        side_pos = 'short' if open_side == OrderSide.SELL else 'long'\n","        tp_arr = res_df['{}_tp_{}'.format(side_pos, selection_id)].to_numpy()  # => eptpout arr_list 만들어서 꺼내 사용하면 될 것\n","        point_idxgap_arr = res_df['{}_point_idxgap_{}'.format(side_pos, selection_id)].to_numpy()\n","\n","        ep_arr = res_df['{}_ep_{}'.format(side_pos, selection_id)].to_numpy()  # Todo - while loop 내에서 to_numpy() 반복하느니, pd_indexing 이 낫지 않을까\n","        out_arr = res_df['{}_out_{}'.format(side_pos, selection_id)].to_numpy()\n","        # bias_info_arr = res_df['{}_bias_info_{}'.format(side_pos, selection_id)].to_numpy()  # ex. rolling(entry ~ end)'s high\n","        # bias_thresh_arr = res_df['{}_bias_thresh_{}'.format(side_pos, selection_id)].to_numpy()  # ex. close + dc_T20 * 0.5\n","        tr_arr = res_df['{}_tr_{}'.format(side_pos, selection_id)].to_numpy()\n","\n","        # ------ ei_k & point2 ------ #\n","        i = op_idx + 1  # open_signal 이 close_bar.shift(1) 이라고 가정하고 다음 bar 부터 체결확인한다는 의미\n","        if i >= len_df:  # res_df 의 last_index 까지 돌아야함\n","            break\n","\n","        # ------ point1 & 2's tp_j ------ #\n","        point_idxgap = point_idxgap_arr[op_idx]\n","        if np.isnan(point_idxgap):\n","            continue\n","        else:\n","            # ------ allow point2 only next to point1 ------ #\n","            open_arr = res_df['{}_open_{}'.format(side_pos, selection_id)].to_numpy()\n","            tp_j = int(op_idx - point_idxgap)\n","            if np.sum(open_arr[tp_j:op_idx]) != 0:\n","                continue\n","\n","        exec_j, ep_j, tp_j, out_j, entry_done, en_p, fee = check_eik_point2_exec_v3(res_df, config, op_idx, tp_j, len_df, open_side,\n","                                                                                 [*ohlc_list, ep_arr], ep_out, ep_loc_point2)\n","        i = exec_j\n","\n","        if not entry_done:\n","            continue\n","\n","        # ------ leverage ------ #\n","        out = out_arr[out_j]  # lvrg_set use out on out_j\n","        leverage = lvrg_set(res_df, config, open_side, en_p, out, fee)  # res_df 변수 사용됨 - 주석 처리 된 상태일뿐\n","        if leverage is None:\n","            continue\n","\n","        exit_done, cross_on = 0, 0\n","        # ------ check tpout_onexec ------ #\n","        # if not config.ep_set.static_ep and config.ep_set.entry_type == \"LIMIT\" and config.ep_set.tpout_onexec:\n","        if config.ep_set.entry_type == \"LIMIT\":\n","            if config.tp_set.tp_onexec:  # dynamic 은 tp_onexec 사용하는 의미가 없음\n","                tp_j = exec_j\n","            if config.out_set.out_onexec:  # dynamic 은 out_onexec 사용하는 의미가 없음\n","                out_j = exec_j\n","\n","        while 1:\n","            # ------------ exit phase ------------ #\n","            if not config.tp_set.static_tp:  # 앞으로 왠만하면 static 만 사용할 예정\n","                tp_j = i\n","            if not config.out_set.static_out:\n","                out_j = i\n","\n","            # ------------ out ------------ #  # out 우선 (보수적 검증)\n","            # ------ signal_out ------ #\n","            if not exit_done:\n","                exit_done, cross_on, ex_p, fee = check_market_out_exec_v2(config, res_df, np_timeidx, open_i, i, len_df, fee, open_side, cross_on, exit_done)\n","            # ------ hl_out ------ #\n","            if config.out_set.hl_out != \"None\":\n","                if not exit_done:  # and i != len_df - 1:\n","                    exit_done, ex_p, fee = check_out(config, open_i, i, out_j, len_df, fee, open_side, exit_done, [*ohlc_list, out_arr])\n","\n","            # ------------ tp ------------ #\n","            if not config.tp_set.non_tp and i != exec_j:\n","              if not exit_done:\n","                exit_done, ex_p, fee = check_limit_tp_exec(res_df, config, open_i, i, tp_j, len_df, fee, open_side, exit_done,\n","                                                           [*ohlc_list, [tp_arr]])  # 여기서는 j -> i 로 변경해야함\n","                # if config.tp_set.tp_type in ['LIMIT']:  # 'BOTH' -> 앞으로는, LIMIT 밖에 없을거라 주석처리함\n","                # if not exit_done and config.tp_set.tp_type in ['MARKET', 'BOTH']:\n","\n","            if exit_done:  # 이 phase 는 exit_phase 뒤에도 있어야할 것 - entry_done var. 사용은 안하겠지만\n","                # ------ append dynamic vars. ------ #\n","                point1_list.append(tp_j)\n","                valid_openi_list.append(open_i)  # side, zone, start_ver arr 모두 openi_list 로 접근하기 위해 open_i 를 담음\n","                pair_idx_list.append([exec_j, i])  # entry & exit (체결 기준임)\n","                pair_price_list.append([en_p, ex_p])\n","                lvrg_list.append(leverage)\n","                fee_list.append(fee)\n","                tpout_list.append([tp_arr[tp_j], out_arr[out_j]])  # for tpout_line plot_check\n","                # bias_list.append([bias_info_arr[exec_j], bias_thresh_arr[exec_j]])  # backtest 에서만 가능한 future_data 사용\n","                # bias_list.append([bias_info_arr[exec_j], tp_arr[tp_j]])  # bias_info 는 entry_idx 부터 & tp = bias_thresh\n","                tr_list.append(tr_arr[op_idx])\n","\n","                # open_i += 1  # 다음 open_idx 조사 진행\n","                break\n","\n","            # 1. 아래있으면, 체결 기준부터 tp, out 허용 -> tp 가 entry_idx 에 체결되는게 다소 염려되기는 함, 일단 진행 (그런 case 가 많지 않았으므로)\n","            # 2. 위에있으면, entry 다음 tick 부터 exit 허용\n","            i += 1\n","            if i >= len_df:  # res_df 의 last_index 까지 돌아야함\n","                break\n","\n","        if i >= len_df:  # or open_i >= len_open_idx:  # res_df 의 last_index 까지 돌아야함\n","            break\n","        else:\n","            continue\n","\n","    return np.array(point1_list), np.array(valid_openi_list), np.array(pair_idx_list), np.array(pair_price_list), np.array(lvrg_list), np.array(\n","        fee_list), np.array(tpout_list), np.array(tr_list)\n","\n","\n","def check_eik_point2_exec_v3(res_df, config, op_idx, tp_j, len_df, open_side, np_datas, ep_out, ep_loc_point2):\n","    o, h, l, c, ep_arr = np_datas\n","    ep_j = op_idx\n","    # tp_j = op_idx\n","    out_j = op_idx\n","\n","    selection_id = config.selection_id    \n","    allow_ep_in = 0 if config.ep_set.point2.use_point2 else 1\n","    entry_done = 0\n","    ep = None\n","\n","    if config.ep_set.entry_type == \"LIMIT\":\n","        fee = config.trader_set.limit_fee\n","\n","        for e_j in range(op_idx + 1, len_df):\n","            # ------ index setting for dynamic options ------ #\n","            if not config.ep_set.static_ep:\n","                ep_j = e_j  # dynamic_ep 를 위한 ep_index var.\n","                out_j = e_j  # dynamic_out 를 위한 out_index var. - 조건식이 static_ep 와 같이 있는 이유 모름 => dynamic_lvrg 로 사료됨\n","\n","            if not config.tp_set.static_tp:\n","                tp_j = e_j\n","\n","            # ------ ei_k ------ # - limit 사용하면 default 로 ei_k 가 존재해야함\n","            if ep_out(res_df, config, op_idx, e_j, tp_j, [h, l], open_side):\n","              break\n","\n","            # ------ point2 ------ #\n","            if not allow_ep_in:\n","                allow_ep_in, out_j = ep_loc_point2(res_df, config, e_j, out_j, side=OrderSide.SELL)\n","                if allow_ep_in:\n","                  if config.ep_set.point2.entry_type == \"LIMIT\":\n","                    ep_j = e_j\n","                    # print(\"e_j in point2 :\", e_j)\n","                    continue\n","\n","            # ------ check ep_exec ------ #\n","            if allow_ep_in:\n","              if config.ep_set.point2.use_point2 and config.ep_set.point2.entry_type == 'MARKET':\n","                entry_done = 1\n","                ep = c[e_j]\n","                break\n","              else:\n","                if open_side == OrderSide.SELL:\n","                    if h[e_j] >= ep_arr[ep_j]:\n","                        entry_done = 1\n","                        ep = ep_arr[ep_j]\n","                        if o[e_j] >= ep_arr[ep_j]:  # open comp 는 결국, 수익률에 얹어주는 logic (반보수) -> 사용 보류\n","                            ep = o[e_j]\n","                        break\n","                else:\n","                    if l[e_j] <= ep_arr[ep_j]:\n","                        entry_done = 1\n","                        ep = ep_arr[ep_j]\n","                        if o[e_j] <= ep_arr[ep_j]:\n","                            ep = o[e_j]\n","                        break\n","\n","    else:  # market entry\n","        e_j = op_idx + 1\n","        entry_done = 1\n","        ep = c[op_idx]\n","        fee = config.trader_set.market_fee\n","\n","    return e_j, ep_j, tp_j, out_j, entry_done, ep, fee  # 다음 start_i <-- e_j 로 변경\n","    #   e_j => 다음 phase 의 시작 index <-> ep_j : ep 의 기준 index\n","    #   ep_j, tp_j, out_j 가 return 되어야함 - exit phase 에서 이어가기 위함\n","\n","\n","def check_limit_tp_exec(res_df, config, open_i, j, tp_j, len_df, fee, open_side, exit_done, np_datas):\n","    o, h, l, c, tps = np_datas\n","    tp = None\n","    selection_id = config.selection_id\n","    len_tps = len(tps)\n","\n","    for tp_i, tp_arr in enumerate(tps):\n","        #     decay adjustment    #\n","        #     tp_j includes dynamic_j - functionalize  #\n","        try:\n","            if config.tr_set.decay_gap != \"None\":\n","                decay_share = (j - open_i) // config.tp_set.decay_term\n","                decay_remain = (j - open_i) % config.tp_set.decay_term\n","                if j != open_i and decay_remain == 0:\n","                    if open_side == OrderSide.SELL:\n","                        tp_arr[tp_j] += res_df['short_tp_gap_{}'.format(selection_id)].iloc[open_i] * config.tr_set.decay_gap * decay_share\n","                    else:\n","                        tp_arr[tp_j] -= res_df['long_tp_gap_{}'.format(selection_id)].iloc[open_i] * config.tr_set.decay_gap * decay_share\n","        except:\n","            pass\n","\n","        if open_side == OrderSide.SELL:\n","            if l[j] <= tp_arr[tp_j]:  # and partial_tp_cnt == tp_i:  # we use static tp now\n","                # if l[j] <= tp_arr[j] <= h[j]: --> 이건 잘못되었음\n","                # partial_tp_cnt += 1 --> partial_tp 보류\n","\n","                # ------ dynamic tp ------ #\n","                if tp_arr[j] != tp_arr[j - 1] and not config.tp_set.static_tp:\n","                    # tp limit 이 불가한 경우 - open 이 이미, tp 를 넘은 경우\n","                    if o[j] < tp_arr[j]:\n","                        tp = o[j]\n","                    # tp limit 이 가능한 경우 - open 이 아직, tp 를 넘지 않은 경우\n","                    else:\n","                        tp = tp_arr[j]\n","                # ------ static tp ------ #\n","                else:\n","                    #   tp limit 이 불가한 경우 - open 이 이미, tp 를 넘은 경우\n","                    if o[j] < tp_arr[tp_j]:  # static 해놓고 decay 사용하면 dynamic 이니까\n","                        if config.tr_set.decay_gap != \"None\" and decay_remain == 0:\n","                            tp = o[j]  # tp_j -> open_i 를 가리키기 때문에 decay 는 한번만 진행되는게 맞음\n","                        else:\n","                            tp = tp_arr[tp_j]\n","                    else:\n","                        tp = tp_arr[tp_j]\n","\n","                if tp_i == len_tps - 1:\n","                    exit_done = 1  # partial 을 고려해 exit_done = 1 상태는 tp_i 가 last_index 로 체결된 경우만 해당\n","\n","        else:\n","            if h[j] >= tp_arr[tp_j]:\n","                # ------ dynamic tp ------ #\n","                if tp_arr[j] != tp_arr[j - 1] and not config.tp_set.static_tp:\n","                    if o[j] > tp_arr[j]:\n","                        tp = o[j]\n","                    else:\n","                        tp = tp_arr[j]\n","\n","                # ------ static tp ------ #\n","                else:\n","                    if o[j] > tp_arr[tp_j]:\n","                        if config.tr_set.decay_gap != \"None\" and decay_remain == 0:\n","                            tp = o[j]\n","                        else:\n","                            tp = tp_arr[tp_j]\n","                    else:\n","                        tp = tp_arr[tp_j]\n","\n","                if tp_i == len_tps - 1:\n","                    exit_done = 1  # partial 을 고려해 exit_done = 1 상태는 tp_i 가 last_index 로 체결된 경우만 해당\n","\n","    if exit_done:\n","        fee += config.trader_set.limit_fee\n","\n","    return exit_done, tp, fee\n","\n","\n","def check_market_out_exec_v2(config, res_df, np_timeidx, open_i, j, len_df, fee, open_side, cross_on, exit_done):    \n","    close = res_df['close'].to_numpy()\n","    ex_p = None\n","    selection_id = config.selection_id\n","\n","    # ------ timestamp ------ #\n","    if config.out_set.tf_exit != \"None\":\n","        if np_timeidx[j] % config.out_set.tf_exit == config.out_set.tf_exit - 1 and j != open_i:\n","            exit_done = 1\n","\n","    # ------ rsi ------ # -> vectorize 가능함 => 추후 적용\n","    if config.out_set.rsi_exit:\n","        rsi_T = res_df['rsi_T'].to_numpy()\n","\n","        if open_side == OrderSide.SELL:\n","            if (rsi_T[j - 1] >= 50 - config.loc_set.point.osc_band) & (rsi_T[j] < 50 - config.loc_set.point.osc_band):\n","                exit_done = 1\n","        else:\n","            if (rsi_T[j - 1] <= 50 + config.loc_set.point.osc_band) & (rsi_T[j] > 50 + config.loc_set.point.osc_band):\n","                exit_done = 1\n","\n","    # ------ heikin_ashi ------ #\n","    # if selection_id in ['v3_3']:\n","    #     if open_side == OrderSide.SELL:\n","    #       if (ha_o[j] < ha_c[j]):# & (ha_o[j] == ha_l[j]):   # 양봉 출현\n","    #           exit_done = 1\n","    #     else:\n","    #       if (ha_o[j] > ha_c[j]):# & (ha_o[j] == ha_h[j]):  # 음봉 출현\n","    #           exit_done = 1\n","\n","    # ------------ early out ------------ #\n","    # ------ bb ------ # --> cross_on 기능은 ide latency 개선 여부에 해당되지 않음\n","    if selection_id in ['v5_2']:\n","        bb_upper_5T = res_df['bb_upper_5T'].to_numpy()\n","        bb_lower_5T = res_df['bb_lower_5T'].to_numpy()\n","\n","        if open_side == OrderSide.SELL:\n","            if close[j] < bb_lower_5T[j] < close[j - 1]:\n","                cross_on = 1\n","            if cross_on == 1 and close[j] > bb_upper_5T[j] > close[j - 1]:\n","                exit_done = 1\n","        else:\n","            if close[j] > bb_upper_5T[j] > close[j - 1]:\n","                cross_on = 1\n","            if cross_on == 1 and close[j] < bb_lower_5T[j] < close[j - 1]:\n","                exit_done = 1\n","\n","    if exit_done:\n","        ex_p = close[j]\n","        fee += config.trader_set.market_fee\n","\n","    return exit_done, cross_on, ex_p, fee\n","\n","\n","def check_out(config, open_i, j, out_j, len_df, fee, open_side, exit_done, np_datas):\n","    o, h, l, c, out_arr = np_datas\n","    ex_p = None\n","\n","    if config.out_set.hl_out:\n","        if open_side == OrderSide.SELL:\n","            if h[j] >= out_arr[out_j]:  # check out only once\n","                exit_done = 1\n","        else:\n","            if l[j] <= out_arr[out_j]:  # check out only once\n","                exit_done = 1\n","    else:  # close_out\n","        if open_side == OrderSide.SELL:\n","            if c[j] >= out_arr[out_j]:  # check out only once\n","                exit_done = 1\n","        else:\n","            if c[j] <= out_arr[out_j]:  # check out only once\n","                ex_p = c[j]\n","                exit_done = 1\n","\n","    if exit_done:\n","        if config.out_set.hl_out:\n","            ex_p = out_arr[out_j]\n","        else:\n","            ex_p = c[j]\n","\n","        if open_side == OrderSide.SELL:\n","            if o[j] >= out_arr[out_j]:\n","                ex_p = o[j]\n","        else:\n","            if o[j] <= out_arr[out_j]:\n","                ex_p = o[j]\n","\n","        fee += config.trader_set.market_fee\n","\n","    return exit_done, ex_p, fee"]},{"cell_type":"markdown","metadata":{"id":"zQ-roiifspcX"},"source":["#### ep_loc.point & zone legacy"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Js5eL87VspcX"},"outputs":[],"source":["\n","    # res_df['entry_{}'.format(selection_id)] = np.where((res_df['open'] >= res_df['cloud_bline_%s' % cb_itv]) &\n","    #                 # (res_df['close'].shift(config.loc_set.point.tf_entry * 1) <= res_df['cloud_bline_%s' % cb_itv]) &\n","    #                 (res_df['close'] < res_df['cloud_bline_%s' % cb_itv])\n","    #                 , res_df['entry_{}'.format(selection_id)] - 1, res_df['entry_{}'.format(selection_id)])\n","\n","    # res_df['entry_{}'.format(selection_id)] = np.where((res_df['open'] >= res_df['bb_lower_1m']) &\n","    #                 # (res_df['close'].shift(config.loc_set.point.tf_entry * 1) <= res_df['bb_lower_1m']) &\n","    #                 (res_df['close'] < res_df['bb_lower_1m'])\n","    #                 , res_df['entry_{}'.format(selection_id)] - 1, res_df['entry_{}'.format(selection_id)])\n","\n","    # res_df['entry_{}'.format(selection_id)] = np.where((res_df['open'] <= res_df['cloud_bline_%s' % cb_itv]) &\n","    #                   # (res_df['close'].shift(config.loc_set.point.tf_entry * 1) >= res_df['cloud_bline_%s' % cb_itv]) &\n","    #                   (res_df['close'] > res_df['cloud_bline_%s' % cb_itv])\n","    #                 , res_df['entry_{}'.format(selection_id)] + 1, res_df['entry_{}'.format(selection_id)])\n","\n","    # res_df['entry_{}'.format(selection_id)] = np.where((res_df['open'] <= res_df['bb_upper_1m']) &\n","    #                   # (res_df['close'].shift(config.loc_set.point.tf_entry * 1) >= res_df['bb_upper_1m']) &\n","    #                   (res_df['close'] > res_df['bb_upper_1m'])\n","    #                 , res_df['entry_{}'.format(selection_id)] + 1, res_df['entry_{}'.format(selection_id)])\n","\n","\n","    \n","   # --------------- ema --------------- #   \n","  # res_df['ema5_1m'] = ema(res_df['close'], 5).shift(1)\n","\n","  #   # --------------- cloud bline --------------- #   \n","  # res_df['cloud_bline_1m'] = cloud_bline(res_df, 26).shift(1)\n","  \n","    #       stochastic      #\n","  # res_df['stoch'] = stoch(res_df, 5, 3, 3)\n","\n","    #       fisher      #\n","  # res_df['fisher30'] = fisher(res_df, 30)\n","  # res_df['fisher60'] = fisher(res_df, 60)\n","  # res_df['fisher120'] = fisher(res_df, 120)\n","\n","    #       cctbbo      #\n","  # res_df['cctbbo'], _ = cct_bbo(res_df, 21, 13)\n","\n","    #       ema_roc      #\n","  # res_df['ema_roc'] = ema_roc(res_df['close'], 13, 9)\n","\n","\n","   # ------------------------------ htf data ------------------------------ #    \n","\n","  #             Todo              #\n","  # htf_df = pd.read_excel(date_path2 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","  # htf_df = pd.read_excel(date_path3 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","  # # htf_df = pd.read_excel(date_path4 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","  # # # htf_df = pd.read_excel(date_path5 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","  # # # # # # htf_df = pd.read_excel(date_path6 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","\n","  # # ---- htf index slicing ---- #\n","  # htf_df = htf_df.loc[:res_df.index[-1]]\n","  \n","  # print(\"res_df.index[-1] :\", res_df.index[-1])\n","  # print(\"htf_df.index[-1] :\", htf_df.index[-1])\n","\n","  # res_df = dc_line(res_df, htf_df, '5m')\n","  # res_df = dc_level(res_df, '5m', 1)\n","\n","\n","  # # # if \"sma4\" in res_df.columns:\n","  # # #   res_df.drop(\"sma4\", axis=1, inplace=1)\n","\n","  # # htf_df['sma'] = htf_df['close'].rolling(60).mean()\n","  # # res_df = res_df.join(pd.DataFrame(index=res_df.index, data=to_lower_tf_v2(res_df, htf_df, [-1]), columns=['sma_30m']))\n","  \n","  # htf_df['stoch'] = stoch(htf_df, 13, 3, 3)\n","  # res_df = res_df.join(pd.DataFrame(index=res_df.index, data=to_lower_tf_v2(res_df, htf_df, [-1], backing_i=-1), columns=['stoch_5m']))\n","\n","   \n","  # fifth_df['ema'] = ema(fifth_df['close'], 5)\n","  # res_df = res_df.join(pd.DataFrame(index=res_df.index, data=to_lower_tf_v2(res_df, fifth_df, [-1]), columns=['ema5']))\n","\n","        # ------------------------------------ short ------------------------------------ # \n","\n","        # --------- by sar --------- # \n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_3m'].iloc[i] == 0:\n","        #   mr_score += 1\n","\n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_5m'].iloc[i] == 0:\n","        #   mr_score += 1          \n","\n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_15m'].iloc[i] == 0:\n","        #   mr_score += 1\n","\n","          #      dc & sar      # \n","        # mr_const_cnt += 1\n","        # # if res_df['dc_upper_1m'].iloc[i] <= res_df['sar_15m'].iloc[i]:\n","        # if res_df['dc_upper_3m'].iloc[i] <= res_df['sar_5m'].iloc[i]:\n","        # # if res_df['dc_upper_5m'].iloc[i] <= res_df['sar_15m'].iloc[i]:\n","        #   mr_score += 1\n","\n","        # -------------- dr scheduling -------------- #\n","        # if config.ep_set.entry_type == 'MARKET':\n","        #   mr_const_cnt += 1\n","        #   if (res_df['close'].iloc[i] - res_df['short_tp'].iloc[i]) / (res_df['short_out'].iloc[i] - res_df['close'].iloc[i]) <= config.ep_set.tr_thresh * (1 + config.ep_set.dr_error):  \n","        #     mr_score += 1\n","\n","           \n","        # ------- entry once ------- #   \n","        # prev_entry_cnt = 0\n","        # for back_i in range(i - 1, 0, -1):\n","        #   if res_df['entry'][back_i] == 1:\n","        #     break\n","\n","        #   elif res_df['entry'][back_i] == -1:\n","        #     prev_entry_cnt += 1          \n","        # # # print(\"prev_entry_cnt :\", prev_entry_cnt)\n","\n","        # mr_const_cnt += 1\n","        # # if prev_entry_cnt <= config.ep_set.entry_incycle:\n","        # # if prev_entry_cnt == config.ep_set.entry_incycle:\n","        # if prev_entry_cnt >= config.ep_set.entry_incycle:\n","        #   mr_score += 1\n","\n","        # ------- htf zoning ------- #   \n","        # mr_const_cnt += 1\n","        #   #       bb zone     #\n","        # if res_df['close'].iloc[i] < res_df['bb_lower_%s' % bbz_interval].iloc[i]:\n","        # # if res_df['close'].iloc[i] < res_df['bb_lower2_1h'].iloc[i]:\n","        # # if res_df['close'].iloc[i] < res_df['bb_base_1h'].iloc[i]:\n","\n","        #   #       cbline zone     #\n","        # # if res_df['close'].iloc[i] < res_df['cloud_bline_%s' % cb_interval].iloc[i]:\n","\n","        #   mr_score += 1\n","\n","  \n","        # ------- ben ep_in's tp done ------- #   \n","        # mr_const_cnt += 1\n","        # if res_df['low'].iloc[i] > res_df['short_tp'].iloc[i]:\n","        #   mr_score += 1\n","\n","\n","        # -------------- feature dist const. -------------- #\n","        # if initial_i < input_size:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","        # entry_input_x = min_max_scale(res_df[selected_price_colname].iloc[initial_i - input_size:initial_i].values)\n","       \n","        # re_entry_input_x = expand_dims(entry_input_x)\n","\n","        # entry_vector = model.predict(re_entry_input_x, verbose=0)\n","        # # print(test_result.shape)\n","\n","        # f_dist = vector_dist(entry_vector, selected_vector)\n","        # print(\"f_dist :\", f_dist)\n","\n","        # if f_dist < fdist_thresh:\n","          # mr_score += 1\n","\n","\n","\n","        # ------------------------------------ long ------------------------------------ # \n","          \n","\n","        # --------- by sar --------- # \n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_3m'].iloc[i] == 1:\n","        #   mr_score += 1   \n","\n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_5m'].iloc[i] == 1:\n","        #   mr_score += 1     \n","\n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_15m'].iloc[i] == 1:\n","          # mr_score += 1\n","\n","          #      dc & sar      # \n","        # mr_const_cnt += 1\n","        # # if res_df['dc_lower_1m'].iloc[i] >= res_df['sar_15m'].iloc[i]:\n","        # if res_df['dc_lower_3m'].iloc[i] >= res_df['sar_5m'].iloc[i]:\n","        # # if res_df['dc_lower_5m'].iloc[i] >= res_df['sar_15m'].iloc[i]:\n","        #   mr_score += 1\n","\n","        # -------------- dr scheduling -------------- #\n","        # if config.ep_set.entry_type == \"MARKET\":\n","          # mr_const_cnt += 1        \n","          # if (res_df['long_tp'].iloc[i] - res_df['close'].iloc[i]) / (res_df['close'].iloc[i] - res_df['long_out'].iloc[i]) <= config.ep_set.tr_thresh * (1 + config.ep_set.dr_error): # 일반적으로 dr 상에서 tp 비율이 더 커짐 (tr 보다)\n","          #   mr_score += 1\n","\n","        # -------------- ep limit -------------- #    \n","        # mr_const_cnt += 1\n","        # # if (res_df['open'].iloc[i] - res_df['long_ep'].iloc[i]) / res_df['open'].iloc[i] < config.ep_set.max_eplim_pct:\n","        # if config.ep_set.min_eplim_pct < (res_df['open'].iloc[i] - res_df['long_ep'].iloc[i]) / res_df['open'].iloc[i] < config.ep_set.max_eplim_pct:\n","        # # if 0 < (res_df['open'].iloc[i] - res_df['long_ep'].iloc[i]) / res_df['open'].iloc[i] < config.ep_set.max_eplim_pct:\n","        #   # if res_df['st_gap_15m'].iloc[i] / res_df['open'].iloc[i] < 0:\n","        #   #   print(\"i, res_df['st_gap_15m'].iloc[i] :\", i, res_df['st_gap_15m'].iloc[i])\n","        #   mr_score += 1\n","\n","\n","        # -------------- entry once -------------- #    \n","        # prev_entry_cnt = 0\n","        # for back_i in range(i - 1, 0, -1):\n","        #   if res_df['entry'][back_i] == -1:\n","        #     break\n","\n","        #   elif res_df['entry'][back_i] == 1:\n","        #     prev_entry_cnt += 1\n","          \n","        # mr_const_cnt += 1\n","        # # if prev_entry_cnt <= config.ep_set.entry_incycle:\n","        # # if prev_entry_cnt == config.ep_set.entry_incycle:\n","        # if prev_entry_cnt >= config.ep_set.entry_incycle:\n","        #   mr_score += 1\n","\n","\n","        # ------- htf zoning ------- #   \n","        # mr_const_cnt += 1\n","          \n","        #   #       bb zone     #\n","        # if res_df['close'].iloc[i] > res_df['bb_upper_%s' % bbz_interval].iloc[i]:\n","        # # if res_df['close'].iloc[i] > res_df['bb_upper2_1h'].iloc[i]:\n","        # # if res_df['close'].iloc[i] > res_df['bb_base_1h'].iloc[i]:\n","        \n","        #   #       cbline zone     #\n","        # # if res_df['close'].iloc[i] > res_df['cloud_bline_%s' % cb_interval].iloc[i]:\n","\n","        #   mr_score += 1\n","\n","\n","        # ------- ben ep_in's tp done ------- #   \n","        # mr_const_cnt += 1\n","        # if res_df['high'].iloc[i] < res_df['long_tp'].iloc[i]:\n","        #   mr_score += 1\n","\n","\n","        # -------------- feature dist const. -------------- #\n","        # if initial_i < input_size:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","          \n","        # entry_input_x = min_max_scale(res_df[selected_price_colname].iloc[initial_i - input_size:initial_i].values)\n","       \n","        # re_entry_input_x = expand_dims(entry_input_x)\n","\n","        # entry_vector = model.predict(re_entry_input_x, verbose=0)\n","        # # print(test_result.shape)\n","\n","        # f_dist = vector_dist(entry_vector, selected_vector)\n","        # print(\"f_dist :\", f_dist)\n","\n","        # if f_dist < fdist_thresh:\n","          # mr_score += 1"]},{"cell_type":"markdown","metadata":{"id":"_blyFhQJUd5X"},"source":["#### dump"]},{"cell_type":"markdown","metadata":{"id":"dHFkv6Ar1ojU"},"source":["## plot_check_v2"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"FCpPCl931ojV"},"outputs":[],"source":["# res_df = wave_range_v4(res_df, 20, ltf_df=None, touch_lbperiod=50)\n","# res_df = h_candle_v4(res_df, 20, ltf_df=None, touch_lbperiod=50)\n","del np_df\n","del np_plot_params"]},{"cell_type":"code","execution_count":61,"metadata":{"id":"rMIwv1Nr1ojX","executionInfo":{"status":"ok","timestamp":1651812785939,"user_tz":-540,"elapsed":3243,"user":{"displayName":"7th June","userId":"08178289703395036410"}}},"outputs":[],"source":["# ------------------ plot_config ------------------ #\n","save_mode = 0\n","front_plot = 3    # 0 : whole, 1 : open, 2 : ep_tick, 3 : tp_tick, 4 : bias_tick\n","bias_plot = 0     # 1 : true_bias only, -1 : false_bias only, 0 : both\n","pr_descend = 1    # 1 : 큰 pr 부터, 0 : 작은 pr 부터\n","position = 1      # -1 : short 1 : long\n","\n","x_max = 500\n","x_margin_mult = 1/30\n","y_margin_mult = 1/30  # 0 \n","\n","prev_plotsize = 50 #  100 20\n","# post_plotsize = 60\n","post_plotsize = config.tr_set.bias_info_tick\n","\n","inversion = 0\n","hedge = 0\n","\n","# ------ show or save ------ #\n","if save_mode:\n","  plot_check_dir = current_path + \"plot_check/\" +  key.replace(\".ftr\", \"\")\n","  shutil.rmtree(plot_check_dir, ignore_errors=True)  # remove existing dir\n","  os.makedirs(plot_check_dir)\n","  print(plot_check_dir)\n","else:\n","  plot_check_dir = None\n","\n","# ------------ 한 방향에 대해 plot_check 함 (by position var.) ------------ #\n","#   obj by position  \n","if position == -1:\n","  pos_str = \"SELL\"\n","  pr_, obj_ = short_pr, short_obj\n","  arr_list = [short_point1_arr, short_lvrg_arr, short_fee_arr, short_tpout_arr, short_bias_arr, short_false_bias_arr, short_en_tp1, short_en_out0]\n","else:   # both option currently not supported\n","  pos_str = \"BUY\"\n","  pr_, obj_ = long_pr, long_obj\n","  arr_list = [long_point1_arr, long_lvrg_arr, long_fee_arr, long_tpout_arr, long_bias_arr, long_false_bias_arr, long_en_tp1, long_en_out0]\n","pr, obj, [point1_arr, lvrg_arr, fee_arr, tpout_arr, bias_arr, false_bias_arr, en_tp1, en_out0] = sort_bypr_v4(pr_, obj_, arr_list, descending=pr_descend)  # --> pr_descend 의 의미가 사라짐.. (false -> true plot 으로 이동한 것뿐)\n","\n","pr_msg = \"%s\\n {} ~ {} -> {:.5f}\\n lvrg : {}\\n fee : {:.4f}\" % (pos_str)  # = data_window, pos_str 으로 이곳에서 정의함\n","\n","# ------------------ data chunknize ------------------ #\n","np_df = res_df.to_numpy()\n","\n","# left_end_idx = obj[2] - prev_plotsize  # left_margin 기준 - entry_idx\n","left_end_idx = obj[4] - prev_plotsize  # left_margin 기준 - open_idx\n","right_end_idx = obj[3] + post_plotsize\n","invalid_left_end = np.sum(left_end_idx < 0)\n","\n","np_plot_params = np.hstack((left_end_idx, right_end_idx, pr, *obj, point1_arr, lvrg_arr, fee_arr, tpout_arr, en_tp1, en_out0))[invalid_left_end:]  # all arr should have same dimension\n","if bias_plot:\n","  if bias_plot == 1:\n","    bias_idx = bias_arr[invalid_left_end:].ravel()  # true_bias 만 plot\n","  else:\n","    bias_idx = false_bias_arr[invalid_left_end:].ravel()  # false_bias 만 plot\n","  np_plot_params = np_plot_params[bias_idx]"]},{"cell_type":"markdown","metadata":{"id":"-4CXGqEN1ojY"},"source":["### session_plot"]},{"cell_type":"code","execution_count":62,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":4,"status":"ok","timestamp":1651812785939,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"outputId":"bbbd7180-4aac-4a81-8587-3fc702477749","id":"2bjxKCIh1ojZ"},"outputs":[{"output_type":"stream","name":"stderr","text":["/content/drive/My Drive/Colab Notebooks/JnQ/funcs/funcs_plot_check.py:10: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.\n","  step_col_arr = np.array(col_list)\n"]}],"source":["s_id = config.selection_id\n","\n","# ============ make col_idx_dict config ============ #\n","nonstep_col_list = []\n","step_col_list = []\n","stepmark_col_list = []\n","data_window_col_list = []\n","\n","# ============ nonstep_col_list - add info(col, alpha, color, linewidth) ============ #\n","# nonstep_col_list.append([['close'], 1, '#ffffff', 2])\n","\n","# ============ step_col_list - add info(col, alpha, color, linewidth) ============ #\n","# ------ htf_candle ------ #\n","hc_tf1 = '5T'\n","hc_tf2 = '15T'\n","\n","# step_col_list.append([['open_{}'.format(hc_tf1), 'close_{}'.format(hc_tf1)], 1, '#ffffff', 1])\n","# step_col_list.append([['open_{}'.format(hc_tf2), 'close_{}'.format(hc_tf2)], 1, '#ffffff', 2])\n","\n","# ------ resi_sup ------ #\n","# rs_tf = 'T'\n","# step_col_list.append([['resi_{}'.format(rs_tf), 'sup_{}'.format(rs_tf)], 1, '#ffeb3b', 1])\n","# step_col_list.append([['resi_out_{}'.format(rs_tf), 'sup_out_{}'.format(rs_tf)], 1, 'dodgerblue', 2])\n","\n","# ------ wave_range ------ #\n","wave_tf = 'T'\n","wave_period = 5\n","\n","# step_col_list.append([['wave_low_fill_{}{}'.format(wave_tf, wave_period)], 1, '#ffeb3b', 1])\n","# step_col_list.append([['wave_high_fill_{}{}'.format(wave_tf, wave_period)], 1, '#ffeb3b', 1])\n","\n","# step_col_list.append([['dc_upper_{}{}'.format(wave_tf, wave_period), 'dc_lower_{}{}'.format(wave_tf, wave_period)], 1, '#ffeb3b', 1])\n","step_col_list.append([['dc_base_{}{}'.format(wave_tf, wave_period)], 1, '#5b9cf6', 1])\n","\n","# ------ dc ------ #\n","dc_tf1 = '5T'\n","\n","dc_tf2 = '15T'\n","dc_period2 = 1\n","\n","# step_col_list.append([['dc_upper_{}{}'.format(dc_tf2, dc_period2), 'dc_lower_{}{}'.format(dc_tf2, dc_period2)], 1, '#ff00ff', 4]),  # inner #ffeb3b\n","step_col_list.append([['dc_base_{}{}'.format(dc_tf2, dc_period2)], 1, '#5b9cf6', 4])\n","\n","# ------ bb ------ #\n","bb_tf1 = 'T'\n","bb_period1 = 60\n","\n","step_col_list.append([['bb_upper_{}{}'.format(bb_tf1, bb_period1), 'bb_lower_{}{}'.format(bb_tf1, bb_period1)], 1, '#ffffff', 1])\n","step_col_list.append([['bb_upper2_{}{}'.format(bb_tf1, bb_period1), 'bb_lower2_{}{}'.format(bb_tf1, bb_period1)], 1, '#ffffff', 1])\n","step_col_list.append([['bb_upper3_{}{}'.format(bb_tf1, bb_period1), 'bb_lower3_{}{}'.format(bb_tf1, bb_period1)], 1, '#ffffff', 1])\n","step_col_list.append([['bb_base_{}{}'.format(bb_tf1, bb_period1)], 1, '#00ff00', 1])\n","\n","\n","# ------ ema ------ #\n","# step_col_list.append([['ema_5T'], 1, '#03ed30', 2])\n","\n","# ============ stepmark_col_list - add info(col, alpha, color, linewidth, marker_style) ============ #\n","# stepmark_col_list.append([['sar_T'], 1, 'dodgerblue', 7])\n","\n","# ------ wave_range ------ #\n","stepmark_col_list.append([['wave_low_fill_{}{}'.format(wave_tf, wave_period)], 1, '#ff00ff', 7, '*'])\n","stepmark_col_list.append([['wave_high_fill_{}{}'.format(wave_tf, wave_period)], 1, '#00ff00', 7, '*'])\n","  \n","stepmark_col_list.append([['wave_co_marker_{}{}'.format(wave_tf, wave_period)], 1, '#ff00ff', 5, 'o'])\n","stepmark_col_list.append([['wave_cu_marker_{}{}'.format(wave_tf, wave_period)], 1, '#00ff00', 5, 'o'])\n","\n","# ============ data_window_col_list ============ #\n","# ------ wrr ------ #\n","# data_window_col_list.append([['cu_wrr_{}{}'.format(wave_tf, wave_period)], 'cu_wrr_{}{}'.format(wave_tf, wave_period)])\n","# data_window_col_list.append([['co_wrr_{}{}'.format(wave_tf, wave_period)], 'co_wrr_{}{}'.format(wave_tf, wave_period)])\n","data_window_col_list.append([['cu_wrr_21_{}{}'.format(wave_tf, wave_period)], 'cu_wrr_21_{}{}'.format(wave_tf, wave_period)])\n","data_window_col_list.append([['cu_wrr_32_{}{}'.format(wave_tf, wave_period)], 'cu_wrr_32_{}{}'.format(wave_tf, wave_period)])\n","data_window_col_list.append([['co_wrr_21_{}{}'.format(wave_tf, wave_period)], 'co_wrr_21_{}{}'.format(wave_tf, wave_period)])\n","data_window_col_list.append([['co_wrr_32_{}{}'.format(wave_tf, wave_period)], 'co_wrr_32_{}{}'.format(wave_tf, wave_period)])\n","\n","# ====== str to numbcol ====== #\n","nonstep_col_arr = strcol_tonumb(res_df, nonstep_col_list)\n","step_col_arr = strcol_tonumb(res_df, step_col_list)\n","stepmark_col_arr = strcol_tonumb(res_df, stepmark_col_list)\n","data_window_col_arr = strcol_tonumb(res_df, data_window_col_list)\n","\n","col_idx_dict = \\\n","{\n","  \"ohlc_col_idxs\": get_col_idxs(res_df, ['open', 'high', 'low', 'close']),\n","  \"vp_col_idxs\": get_col_idxs(res_df, ['close', 'volume']),\n","  # \"ohlc_col_idxs\": get_col_idxs(res_df, ['haopen', 'hahigh', 'halow', 'haclose']),  # heikin-ashi ver.\n","  \"nonstep_col_info\": nonstep_col_arr,\n","  \"step_col_info\": step_col_arr,\n","  \"stepmark_col_info\": stepmark_col_arr,\n","  \"data_window_col_info\": data_window_col_arr,\n","  \"ylim_col_idxs\": get_col_idxs(res_df, ['open', 'high', 'low', 'close', 'dc_upper_15T1', 'dc_lower_15T1'])  # , 'dc_upper_H', 'dc_lower_H', 'dc_upper_15T', 'dc_lower_15T', 'short_out_{}'.format(selection_id), 'long_out_{}'.format(selection_id)\n","}   # , 'wave_1_{}'.format(wave_tf2), 'wave_0_{}'.format(wave_tf2), 'dc_upper_15T', 'dc_lower_15T'"]},{"cell_type":"markdown","source":["#### session_plot main"],"metadata":{"id":"XfvH5ngyieS9"}},{"cell_type":"code","execution_count":63,"metadata":{"id":"OCLMABZT1ojb","colab":{"base_uri":"https://localhost:8080/","height":1000},"outputId":"c7641744-8a20-482a-c7c6-40676be06ead","executionInfo":{"status":"ok","timestamp":1651812799083,"user_tz":-540,"elapsed":11493,"user":{"displayName":"7th June","userId":"08178289703395036410"}}},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 2160x1296 with 2 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 2160x1296 with 2 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 2160x1296 with 2 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 2160x1296 with 2 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 2160x1296 with 2 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 2160x1296 with 2 Axes>"],"image/png":"iVBORw0KGgoAAAANSUhEUgAABzEAAAM1CAYAAADw3gwUAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAAgAElEQVR4nOzde1hU1f4/8DfXURwQBFFRREVRIYPKa3IpqTTzinS8HaGsTvfUTmX2TfFy1KzUY6Z0OWhqinq8YaVYCoIXztF+KSSiooAgDgoMDDOAqPj5/eHX/W1kwAFRMN6v53k/h73X2muvvWZ8zvNpwYwFAAERERERERERERERERERUSNh2dATICIiIiIiIiIiIiIiIiL6I25iEhEREREREREREREREVGjwk1MIiIiIiIiIiIiIiIiImpUuIlJRERERERERERERERERI0KNzGJiIiIiIiIiIiIiIiIqFHhJiYRERERERERERERERERNSrcxCQiIiIiIiIiIiIiIiKiRoWbmERERHchMzMTZWVl0Ov10Gq1+PHHH9GhQwcAQHx8PF566SWj/kFBQcjJyQEAJCQkYNasWUbtkyZNwtmzZ9G8efP78wBERERERER037CGJCIiMh83MYmIiO7S8OHDYW9vj3bt2uHSpUtYvny5Wde9/PLLmDZtGry9vQEALi4uWLx4MV5++WWUl5ffyykTERERERFRA2ENSUREZB5uYhIREdWTiooKbNmyRSko7yQ9PR3z589HVFQULCws8MUXX2Dr1q3Yv3//vZ0oERERERERNTjWkERERDXjJiYREVE9ad68OcaOHYv//Oc/Zl+zZMkSWFhYYMuWLRg4cCDef//9ezhDIiIiIiIiaixYQxIREdXMuqEnQERE9KDbsWMHrl+/jhYtWiA/Px+DBw82+9obN25g8uTJSE1NxciRI2EwGO7hTImIiIiIiKihsYYkIiIyD/8Sk4iI6C6NGjUKTk5OaNasGd566y0kJCSgTZs2uH79OmxsbIz62tjY4Nq1a0bnTp48CQBITU29b3MmIiIiIiKihsEakoiIyDzcxCQiIqonN27cwPbt21FZWQl/f39kZ2ejU6dORn06d+6M8+fPN8wEiYiIiIiIqNFgDUlERFQzbmISERHVoxEjRsDJyQlpaWnYtGkTXnzxRfTp0wcA0K1bN0ybNg0bN25s4FkSERERERFRY8AakoiIqHr8TkwiIqK79MMPP6CyshIigvPnzyM8PBwnT57EyZMn8eGHH2L16tVwd3fH5cuX8a9//QvffPNNQ0+ZiIiIiIiIGghrSCIiIvNYAJCGngQRERERERERERERERER0S38OFkiIiIiIiIiIiIiIiIialS4iUlEREREREREREREREREjQo3MYmIiIiIiIiIiIiIiIioUeEmJhERERERERERERERERE1KtzEJCIiIiIiIiIiIiIiIqJGhZuYRERNQFxcHC5fvgydTofjx49jxIgRRu0uLi5Yv349iouLodVq8f333yttJ06cgF6vV3Lt2jXs3LlTaf/6669x6tQpVFZWIjw8vMq9O3fujB9++AElJSXIz8/HokWLlLY/jqvX63H9+nV88cUX1T7H1KlTodFooNPpEBUVBVtb27tZlip69uyJo0ePQqvVQqvV4pdffkHPnj2N+jzyyCNISEiAXq9HXl4e3nnnHQCAu7t7lecREbz77rsAgLZt2yImJga5ubkQEXh4eBiNe6d1FhEYDAal/dtvv632OZycnLBt2zYYDAZkZWVh/Pjx9bVENRo0aBDS0tJQWlqKuLg4dOzYsdq+AwYMwH//+1+UlJQgOTkZAwcOVNpmzJhhtBZlZWWorKyEs7MzAMDW1hZRUVHQ6XTQaDSYNm2a0djNmzfHihUrkJ+fj+LiYiQkJChtERERuHr1qtH4nTt3rueVICIiIiJ6cN1N/fj888/j0KFDKC0tRXx8fJWxhw0bht9//x16vR6HDh0yqrfCwsLw66+/QqfTIScnB4sWLYKVlZXS7uHhgZ9++glarRYajQbLly83ar/d+PHjkZWVBYPBgO3bt8PJyelulqUKZ2dnHDx4EAUFBSgqKsLhw4fx+OOPG/WpqR5+8803cfToUVy5cgWrV6+uMv5LL72E9PR06PV67N69G+3atVPabG1tERkZiby8PBQWFmLnzp1wc3NT2htbrW3KnZ7/j3x8fBAbG4v8/HyIiFGbra0t/vWvfyErKwslJSU4duwYhgwZYnKcmTNnQkQQHBysnHNycsLGjRtRUFCA/Px8fP/997C3tze67p133kFGRgYMBgNOnjyJbt261fGpiYioLoRhGIb5c6dXr15iZWUlAKRv375SUlIibdu2VdoTExNl8eLF4uDgINbW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eTOLFi1SOVkREQka1/VfvF18Npxhpxl3IuHHH4lOJTlFRETEwVJdqoGDEhCOwao91i53az8waTZl48a4tTWVIPX0eofJK81NDooVEf9R6djgcySOd+3aFequhKVWJTG/+OILHnvsMefjffv28dJLL/GHP/wBgFOnTjmfe/75591e++STT/K3v/2NzMxMtzhPbrrpJgC+//571q9f72yvra0F4NixY7zzzjsAbNmyhSFDhgD29Sub8rvf/Q6Aw4cPM2XKFDp06EBSUhL79+/nyy+/5PXXX+f+++/nyJEj3H///QAsXbqU999/n6KiIm691T46pnv37lRVVZGcnExN/UyXrl27kpiYyDnnnENOTk6LZ2iKiIiIiPiiuQRlWK63JCIiIiGx/rbOHttXz9D5goiISCg5Eseq2OlZq5KYruLi4rj44ou55pprADh48CBvvvmmx9i0tDQmTpzo/MDlH//4h9f3/fnPf07v3r0BWLVqlVvCc8WKFQwcOJCzzz6bSy+9lE8//ZSRI0cC9nKwn3zyidf3NRqNDB06FICjR4+yadMmLr30UlJTU6msrKSkpIS1a9dSUFDAO++8wxlnnIHBYODjjz/mlltu4cEHH3S+11/+8heqqqq48cYbmTRpEgCpqamcOHHC+bWYNGkSq1evbvqLKCIiIiLiZ1p7U0RERCT8WCsrPZ6jWSsr+XHaVLc2bzNoLdWlXhPTkcpoNXDZni70+iqT/ReYOIQRK9ZQd0skankqGwsqHSvhp01JzJ07dzpLpwLs37+fvLw856xEh4suuqhRYnHZsmUsXLjQ63vffPPNAFitVp544gm355544gmSkpL4+9//zvbt253tH330EdOnT+fkyZNe3zczM5O0tDQALr30Urfn0tPTOX78OA888AA2m41hw4a5Pd+9e3dnsvLzzz8nNzfXedLhaE92Kcl34YUX8uyzz9K5c2f++7//22ufREREol25pabJZEqVxcaama1/f8cF78iD8aTlnMf2fl9jNWpUucQ2X5KTmq0pIiIiElw/TpvqVlbVUXK14/pNjWK9JSqjrTSwESNP3pdP30NnkXwynprEWq7jNUYxSolMkQBR2ViJFEZ/vlmvXr0oLCzkjDPOaDb21ltvZcmSJR6fS09PZ/z48YC9TOyXX37p9vzEiRN54IEHMBrdu5+dnU3fvn2b3G9CQoLb46lTp9K+fXvnrNALL7yQyZMnN3pdly5deO2110hLS+PHH39kwoQJbh/6vPHGG1x99dVkZWXRvn17Zs6cSV1dHQALFy5stsStiIhINBuy8VkMBoPXrV2SgckrzU1uf7xyucf3dlzwPrRsBNe+HM9Dy0bw5H35GK06GRdpjmO2ZlObyWQKdTdFwk5SUhI7duxgz549fPLJJyxatMj53JIlS/j888/Zv3+/cymSyy+/nPLycnbv3s3u3bvdBvSOGjWK4uJiDh48yJ/+9KdgH4qIiMSYbo8vBexrUDruF4/OcyZTi0fnBb1P+dgTmGmWBOJsBtIsCQxLupK/3Wq/Fkw9WRX0PolEE5PJ1Og6TzMuJVK0KYk5ePBgEhIS6NWrF2+88QZgn3U5c6b7VIpPP/0Ug8FA+/bt+fWvf015eTkAf/rTnzjrrLMave+NN97oTPo1LDlrMBhYtmwZCQkJHD16lNzcXNq3b88///lPzjnnHFatWsXAgQO99rmsrAyr1T6Cp7S0lGeffZaqqioef/xxZ0zDRGiXLl3Ytm0b3bp1o7KyktGjR/Pxxx+7xaxZs4aCggKOHz9OVVUVTz75pPNrkpqaykUXXeT9CzkIsLlsDddvtTWxzXKJm9VMrKtdTcS5Tnwd0Mx7DnCJfaKJOB2TjknHpGPSMfl0TOU/2e6XY7r9pt1ejyl9/Ytu255u5V6PKX39i375Ph2YOLvZY1ozM5U1/VJZM8Pz9tZwlw92XY7JarMy9JPOtKtJJM5qpF1NItb2R7lsTxePxyQip2VmZjY5wMAxMleJThF3FouFESNG0K9fP/r160deXh5DhgzhxhtvpEuXLvTs2ZNevXqxbt0652veeecd+vfvT//+/fnLX/4C2Jc7eeyxx8jPz6dXr15MnDiR3NzcUB2WiIQJT4OM9LdW/CW+Y4dG97NcKsu53g+k8Y8cdQ5YvfGaTaScdC8YmGCxUr7sL6yZmcr9b84OSp9EgmH5M8dY/syxoO7TMevSddOyIhIp2jwTs7a2ls8++4xly5Y523JycjzGVlVV8corr/DWW28BEB8fT9euXRvFzZ5t/8N09OhRXnnlFbfnzjrrLOd/sO3bt1NcXExVVRVr1661H5DRyPDhw73298SJE3z++edNHpNjTUuA8847z5nALC8vZ+TIkbz77rtNvt7BdaamSnWJiIi0Tby11nmRm7ew6b/FiafiyD2iE3IRf/Al0elpLRWRaFddXQ3Yq/0kJCRgs9m45ZZbuPfee53Xf99//32T73HJJZdw6NAhDh8+zKlTp1i3bh3XXHNNwPsuIuHN099e/a2VaJOUlmEfyDozlX++NJYTibVuz5sxs4c9IeqdSODc9IcvuOkPX4S6GyIRo1VJzAULFnD99ddz3nnnkZCQQE5ODnPnznU+7yj/mpaWxqOPPsrQoUNJT08nJSWF/Px8Z5LRarXy1Vdfub33FVdcQc+ePQFYuXKlsySrQ1lZmTPJeNlll3HhhRfSrl0755qUgHOm5/nnn+8csXbPPfc4n3eMhs3IyOCGG24gLS2NOXPmOJ9/++23AfcEpslk4sorr2THjh2Nvh4dOnTggw8+YPz48aSnp9OuXTtmzJjByJEjAaioqGi0JqibXYDBZRvU4HlDE9sKl7gVzcS6GtRE3E0ucR81854fucTe1EScjknHpGPSMemYfDqmjl9c5pdjeviJ/l6PqWz8GLet35cdvR5T2fgxzR6TW4yX71OP55a3+Zj+7+5K50Xu5rHDnO2jDaOpSj6JzWBzbhd90pfPzjd5PCYRERF/MBqN7N69m+PHj7NlyxY+/PBDfvKTnzBhwgR27tzJq6++Svfu3Z3xP/vZz9izZw+vvvoqvXr1AuDcc8/l66+/dsYcPXqUc889N+jHIiIiEkqFFPJx9+NUJ52izmCjOukUO9hBIYWh7pqIiIRYfPMhjQ0dOpQxY8Z4fO7w4cOsXLnS/ubx8cydO9ctwelq2bJllJSUuLXdfPPNgH2G54oVKxq95uTJk/zv//4vv//97+ncuTPFxcVuzx87doyNGzf+f/buOz6qKv//+GsmhYRQk1Cl9yLdiBRBEBBsgOCqgCIdIyyisLoqAi4qfBHURfgtfaUEC21VBJSu7Ip0UIy0ECkSISEhpJLM/P6YzGUmmfSevJ887mPOnPncc88dSJg7n3vOybD/8+bN46mnnqJFixasWrWKVatWGa99++23bNmyBYARI0YYI0X9/Pw4fPiwUzszZsxg5syZAHTs2JEvvvjC5fGmTp1KQkJChn0SERGRnLFf8LY5WxWvRHfiPZM43uhP9rW9mPnOIpIn7NPeZRajKYukJLFYLLRr146KFSuyadMmWrZsSZkyZYiPjycgIICBAweyYsUKunXrxpEjR6hbty4xMTH069ePzZs306RJk2wdb8yYMcasRf7+/vlxSiIiIoXCgoVRf99Kt2O1aR7qx691w1n2/sNYsC0JVnnD5kLuoUjead/aB4AjJ2LyvO3w8HCXI/e1/qUUZzlKYq5fv55y5crRsmVL/Pz8uH37NiEhIXzzzTfMnTuXGzduALZpWT/++GPuv/9+6tSpQ/ny5YmKiuL48eN88sknTslDgCpVqjBw4EAAvv76a65cueLy+FOnTiU0NJThw4fTtGlTPD09CQsLY9euXcyYMSPTH8qYmBi6d+/OrFmz6N+/P76+vly8eJGgoCBmzZqV7ffj1q1bTJgwgccee4wWLVpQtWpVYmNjOXjwIPPmzePbb7/NdpsiIiKSNa4uePe1vYjFrKncRQpKVpKT4eHhSnRKiRQVFcXu3bvp27cvly5dMm6q3bRpEytXrgQgOjraiN+6dSuLFi3Cz8+Py5cvU7t2beO1WrVqcfnyZZfHWbp0qXGj78GDB/PrdEREpJBYoqOptH4Tjp+WitNno6TIKGONzaTIqGzvbzFb2dP+d/a0/932PCWBKVLSHN7ZFgBTlf153rZ97UuRkiRHScy1a9eydu3aTOMSExOZOHFiltu9du0aZcqUyTTOYrHwz3/+k3/+858ZxoWGhqb7Q3v9+nXGjx9vjPx0ZebMmcZIy4wkJyezcOFCFi5cmGmsiIiI3NFg0VzjQrdJ0BLAdsF7PnCqERP8SF+qeXkBcGOQbSaIsPh4mm3ZZsSkvuAVkaInK1/AaR15KS78/f25ffs2UVFReHl50bt3b+bMmcPmzZvp0aMHK1eupHv37pw+fRqAatWqGbMQBQQEYDabCQ8PJzIyksaNG1OvXj0uX77M008/7bRUioiIlB43RzwHOI86LE6fjRyv4UQk/7kadakRl1IS5SiJKSIiIpIX7AnMjOrsCczM6kSk+NO0tFJc1KhRg08++QQ3NzfMZjOff/45W7Zs4YcffmDt2rVMnjyZW7duMXr0aAAGDx7MCy+8QFJSEnFxcTz99NOA7YbYCRMmsH37dtzc3FixYgWnTp0qzFMTERERkWJAoy6ltFASU0REREREioTiOC1teuvOHDp0qECOL4Xj5MmTtG/fPk19VFQUjz76aJr6jGbu2bp1K1u3bs3zPoqIZMWtBGua/1d1w5DklWSzle/ahXGyfiStQirBJtAssSIikh1KYoqIiJQyYfHxTiMZw+Lj08SknsI19fStkrGsvMeOa8bYn4tI5vIq0ZlXIiIiXN4BrTULRUSkOBi/Jp61o8s61RWnKUylCDPDE2/u53DjG8SWSaZsghsEAA+hRKaIiGSZkpgiIiKljD0ZeWPQAKf1Vhylnq5V07dmT1beY/uaMU2ClnB6yNgC65tIaaDRIyIiIlJUpXd9UFTl+HqlHxxufIMY72QA22NHWz1b8rSLIiVaejO/aP1LKS2UxBQRERFJoRGUIiIiIiIlw98eXMLQfkGF3Y0Sb+iyWJf1J9u+xwmvWc6V5Uy0njmNVgNfIyFGCRiRrNDal1LaKYmZCbPZzMsvv8zo0aOpV68e4eHhbN68mTfffJMbN25kqY2RI0fy17/+laZNmxIdHc327dv5+9//zqVLl/K59yIiIsVf6sSivc5R6sSivS67NIJSRERERKRkiPUsZ0yVm16iraiLiIhwOb3vrXgL4HxOSbEJnKbgr09ST0dseAR8vnAzRmICcMvKielvc2LL2wXTOZEiqMODxwq7CyLFipKYmVi8eDGjR482ntesWZPAwEC6du1Kx44diXcxQsPRG2+8waxZd+468vLyYtiwYXTv3p2AgADCwsLyre8iIiLFRWRCPL89M+ZOhWM5hSU6GrcKFVzub08sioiIiIhIydRg0VzjsbR8/k9vinyr1ZomeVjkErVbocOZyk5rYsYcSIathd0xkcJ15ERMYXdBCommBs4Zc2F3oCi77777jATmxo0b8ff357XXXgOgdevWTJo0KcP969Spw1tvvQXAjz/+SPXq1Rk2bBgAtWvXZsaMGfnXeRERkWKk48bVNF231NhMJlOazVy+fGF3M19oNKeIiIiISObsM6+kt7SDlnkoYiywcVYXln0YwOufNWfZhwHwkK0ebLPfiIiz8PBwrFar06YEV8lhnxo49ZbeDStiUyhJzKZNmxIUFMQff/xBQkICFy5cYN68eZQrV86I6d69u/GDOm7cOD766COuXbvGzZs3WbNmDZUqVXJq85lnnuHMmTPExsayc+dOmjRpYuy/cuXKHPVzyJAhRnn27NmEh4czd+5cbt68meZ1VwYPHoynpycA8+fPJywsjLVr13Lq1CkAnn76ac1nLSIiJVaDRXNpErSEJkFLANv0q/a7p+1cfdGgLx9ERERERCQrzgdO5fSQsZweMrbUjM4sTtwsJvoers6UDU3pe7i6kcAUKc0Wz2vI4nkNXb7mKsmlBJeUdgU+nWzr1q354YcfKO8wmqJu3bq8/PLLdOvWjS5dupCYmOi0z6xZs/D39zeeDx06lCpVqvDQQw8B0LNnT9asWYPZbDae7969O9d9bd++vVE+ffo0ABaLhfPnz9O2bVtatGiBp6dnmv5mtL+93KJFCypVqkT9+vVz3U8RESk5StKovNRrVLqq0/qSIiIiIiIiIlJajH2uuu3x5bNpXtOoS5G0Cnwk5vz58ylfvryRyCtTpgxPPPEEAPfccw8jRoxIs09iYiJt27alatWq7Ny5E4A+ffrQtWtXAGbOnInZbCYpKYnHHnuMypUr50kS0zFxah996Vh2d3d3OYdxVvcHqFq1aq77KSIiIsVTdaqzhz1Uo1qBxJTb+48MY0xxlXlrthtvdA5iQr8ghi6LddpefD+WnxvG57ovIiIiIiKScxEREWmmnPzXMK/C7paIZIOmFRXJJEruGAAAIABJREFUmgJNYnp7e9O9e3cAmjRpwqlTp0hISGDjxo1GTI8ePdLst3z5co4fP861a9d45513jPouXbpgNpu59957Adi7dy9ff/01kZGRxlqU+cFxClir1Vrg+4uIiGSm8obNhd2FAme91gXrtS4FcqzqVGf124/mOmk4jWl0pStvkf7nlryMcbveIsMYr1+fpPFZd+Z/vIePtw5h7eiyTluLKStpft4z130REREREZGc8/PzS5P8KFdGS1aJiEjJU6BJzMqVK+PunvEMtq5GNl68eNEoX7582Sjfdddd+Pv7G+tOOr526dKlLPWpbt26ae5cmj59OgDXr1834ipUqGCU7VPhJiUlcePGjXTbzmx/gGvXrmWpnyIiInau7rpNvYWHhxd2N0u0aUzjnt+q5zhpGEssVqwEEogbbgQSiBUrscTma4wJs8uYips+o9KGTZQJ6YcJM2VC+lFpwyYjxrENs9VktJHgYTFGaSZ4WDLti4iIiIjkTHrXAPrcLyIiIiVZgSYxb9y4QXJyMgCbNm1yOWS6T58+afarVauWUb7rrruM8uXLl7l+/bqxJmWNGjWM12rXrp3r/h45csQoN2nSBACz2UzDhraFd0+dOpXuepjp7e9YjoyMJCQkJNf9FBGR0sXVXbept4ymO5ecSy+Zl92kYQMasJKVTknCFaygPvULJeZm3/Ek1NmJ1ZwAgNWcQELdnUZMem3UuV3DGKVZ93bNTI8jIiIiIjmT3jWAPveLiBRt4eHhTjefiEj2FGgSMy4ujn379gHw2GOPMWzYMMqWLUvFihXp168fmzdvplu3bmn2GzVqFK1ataJKlSq88cYbRv3+/fuxWCwcOHAAgAceeIDevXtTsWJF3n777Sz1KTQ0NM0HwJkzZwIQFBRkxL322mv4+fkxdepUYySl4+srV65M84voiy++MJKcL7/8MtWqVWPIkCG0aNECgE8//VS/uERERIqRvEoaXuUqu9iFBx7EEIMHHuxiF2GE5WuM1S3eZYzV+wZJVU+C1R2rWzxY3UmqetKIyUobjjEJnlaXMSIiIiIiIiKlia+vr1PuQUSyp0CTmACvvPIKt27dwt3dndWrVxMTE0NkZCTffPMN/fv3d/mDbDabOXHiBH/++ScPPvggAN9++y0//PADADNmzMBiseDh4cG3335LZGSk09qaOU0U/vjjjyxbtgyAJ554guvXrzN79mwATpw4wUcffZTh/hcvXjSSqffddx9Xr15l7dq1gG262xkzZuSoXyIiIpJWzKUEYi4l5Elb6a0pmleJRYCRjARgBjOcnudnzN+Sp6Ub43nhQcBKfPPPACueF3q6bMP2esbH2fh4UroxIiIiIiKStxosmgtAk6AlRjn4kb7cGDSAG4MGEPxI38LsnkipkHrEpX2LiIhwijt8/BaHj98qpF6KFD8FnsQ8evQoAQEBBAUFcfXqVRITE7ly5Qq7du1i0qRJTlOw2k2fPp158+Zx7do1bt26RVBQEE8//bTx+q5du3j22Wc5d+4c8fHx7N27lyeffNJ4PaN1KzMzbtw4/va3v/Hbb7+RkJDAlStXWLRoEQ888ADx8fGZ7v/OO+8watQojh8/Tnx8PNevX2ft2rV07tyZsDCNTBAREckqS3R0huuA+rQ9SEKd7fnej7xKLIYSSm968z7v04c+hBJaqDGWsteIuX8GCU03E9N1Jpay1122kdB0c6bH2dI3Kd0Yu3axTxIQO8zY7GtrOm4JMRHp7i8iIiIixUh1YA9QLQv16cQmeUVy8cG5JHlFZand7x7u41Qf5/0H3z3chzjvqznuQ7ZiC5B7pYrcSrDy2zNjOPfCFKxWK02/3kql9ZuosHIV1by8CqVfYQ7fnTqW7UlVJVelJEk94tK++fn5OcXd0+s49/Q6Xki9FCl+3AvjoMHBwQwdOjTL8YmJiUyZMoUpU6a4fN3Hx4eLFy/SuHFjrFYrHh4ezJkzx3h9z549Oe6rxWJh7ty5zJ07N8O4ESNGMGLECJevrVixghUrVuS4DyIiIgI3RzyX7ghJu4KYpj2UUGYyk73s5RCHeI7nchQzgjufG/ak/CnMmLiABUY5qerPJFX9Gccc5J02BmR6nKEZHMfOnTIcLLvGeH56yNh0Y0VERESkmJsGdAXeAl7MpD6d2PC7txBX5Szhd3+dpXb/rP5fp/qT7WbzZ/X/crLde5n3LQ/6W9DGr4k3Pl+fHjKWG4MGAFBp/aZC61OzLdsAuDFogFEGjKRqYSVXRUSk+CiUJGZeq1SpEvv27SMuLo5r165RpUoVvL29Adi6dStfffVVIfdQRERESoq8ShqKiIiIiBQnNwYNyPSmwjRiAW+H54EpmxUwuagn/dgo9gIQ1XivrS6DWBuLUb+WskbomeZLbXE56EOWYuPA4XAiIiKSCwU+nWx+uHnzJuvWrePPP/+katWqWCwWDh8+zCuvvMLjjz9e2N0TERGRAmC91gWudy3sboiIiIiIlHpNgpbYCg2AldiSmaQ8rgDauKhfB3yafqwpyQNIecwkNnW7dc4Nwi3Jlk11S/LOcR+yFFs/y2+TiJRC1mtdbN9fiEiWFNmRmHv37sVkMmUeCERHRzNkyJB87pGIiIiIiIiIiEjJFhER4XKZBkt0NGyokL3GrgK7gGFADOCZ8vyki/ot2EY7DgJTkidWj0SnWOvwZFu9Ockp1u22NxavRDo1WEL9Sc9wvkEQP3qNw3zbk2SPONgCd9Xsx8X6m22xbolZ6kN2+usUG5a9tyi/WaKjqbR+k9Pg1ciEeDpuXF1ofRIp7sLDw/H19XWqi4iIKKTeiJRsJWIkpoiIiEhe0V2RIiIiIlKa+fn5YTKZ0mzm8uVz1uDIlMcZqZ67qk+p8zv5mMtYp/qUutZH38SanMx/LaNYO7os/7OMxpqcTPLrcUbsucafACZaH30TMGWpD9npb5rYIiDZbGVbh6tM23Ivn77XCZOb7e+x6bqlVCqjtShFcsPX1zfN70g/P7/C7pYUIeHh4VitVqdNie6cURJTRERERERERERE8kco0Bt4H+iT8jy9+pQ63+CH0sTW2j0Z3+CHqLX7JafYFicnZ9quT0wdHtz6NS1OTqbntq+y1Ifs9DdNbGEzwxNv7mf0Swd57y/BjH7pIGwn298EN1g0F7BND2wvi4hI5pTozjtFdjpZkbzw+OOP89prr9GmTRsSEhLYt28fr7/+OqdOnSrsromIFGlh8fFU8/Jyeu4o+JG+Tq/fGDSAsPh4mm3Zlm99qrxhc761LSIiIiIiecOe7GqwaC7nA6fCiJTrh0G264ewDfE0YxuMcNhpT8pmNy5V3QgoG9QUgLJ/NnMe8fhs2tjU7XZettSoqv5HdxidfqyTTNpNN7aw9YPDjW8Q450MYHvsaKvPDvdKFV2WRURECoqSmFJiDRs2jNWr78zvX7ZsWfr3788DDzxAp06d+PXXXwuxdyIiRZs9GXlj0ACXyUPHBGZGdYXB1fo9jiIiInT3m4iIiIhIPrEnuxyTXo7XCkXluqGkSSKBgNhhAHjNvMgJr1nOAWWBtgXfLxERkdxQElNKJG9vbz766CMAzp8/T8+ePWnYsCHffPMNFStWZP78+fTrl83bz0REpFgwmUwZvp5ZklNEREREpKRJ7+bEhJgIhi6LLYQe5Uy72CdxpwwBy4YZdQkxWmMM4GjZL4zy6en/wOcLN2MkJgCxwDGgZYF3TaTYCg8Px9fXN0291jYUKThKYgoA1atX548//gDgpZde4qOPPsLLy4ubN2/i4eHB6NGjWb58OZUrV+b69euYzWb+/ve/M3v2bB599FEmTZpEixYt8PPzIykpieDgYJYsWcKSJUsAmDp1Kv/3f/8HQIMGDQgJCQGgZs2aXLx4EbPZzNtvv8306dMBeOaZZ5g4cSKtWrXCzc2NkydPMm/ePD7//PMsnU+/fv2M/2D+9a9/ERoaSmhoKDt37uThhx+md+/e+Pn5ER4enqfvo4hIaZF6ull7naOkyKg0Uw4lRUblW59Wf3ApT9oZ+/LZPGlHRERERKSoWz+pVpZj14wq/JsB3SnDwbJrOD1kbGF3pWjbCh3OVLZNKetlwSfeTMyBZNgKDIXIhHh+e2aMLdb+CFiio7k54jmnpuyJY8ApeZwdWhpEiiv7uoZ5Sd85iGRPNpdzlpLq6tWrnD1r+wV63333ARAQEICHhwcAnTp1Mh7NZts/m3379gHQpUsXevXqRc2aNSlTpgw+Pj506NCBxYsXM378eADWrVuHxWIBYPDgwcZxBw8ebLS3Zs0aAGbOnElQUBCdOnWiXLlyeHt7c++99/LZZ5/xyiuvZOl82rdvb5RPnz6dpuzm5kabNm2y/P6IiJREubmQbLZlG5U3bDbaqLxhc5r1MM8HTuX0kLHGFwynh4y1rYnjQl58CfHcu6E8925orttZujqMpavDct2OiIiIiIhIobDAxlldWPZhAK2PTGPZhwHwkK0eoOPG1TRdt5Sm65ZiMpmIHDyQyMEDMZcvn6Ype+L4YNk1rB1dtmDPQ6QAhYeHY7Vanbb8GHGp7xxEskcjMcXw/fff06hRIyNh2blzZwAsFkuautjYWA4ePAjA5s2b2bBhA+fOnePmzZvUrFmTTZs20aFDB1544QX+9a9/cenSJfbu3UuPHj0YPHgwc+faFnm3JzR/+uknzpw5Q7169Xj99dcB+Pjjj5k2bRpWq5VFixYxZMgQ3n77bZYvX05kZGSG5+Lv72+Ub9686bJctWrVnL9ZIiIiJUhWRtYGP9LXiLkxaIARkzp5LSIiIiJS1BWlKXQnpHo+NCerH6U6nYBlw5iUUm51DL6u+hpDl6Qfa+/DGmBCv6A7fUiJta+1mdORmKnZrz8crzkcZ/LJzxl8RNKTH6MuRST3NBJTDPaRlXXr1qV69ep06tSJpKQktm7dSrNmzahUqZKRxDxw4AC3b98G4NKlS0ycOJETJ04QFxfH77//TocOHQBo0qSJ0f7atWsBuPfee6lTpw7Vq1c32rOPwuzduzfu7rbc+oQJE7hx4waRkZEMGTIEgLJlyxojRXPC8T8irYkmIlKyrHq9Lqter5vrdsY8W40xz1bLgx4VH1kZWZs6yZlenYiIiIiISEbs1xqO1xz2mXzsZZGSqjR+5yCSG0piiuH77783yp06daJTp06cOHGC7777DrPZTNeuXQkICADuJDxNJhNff/01zz33HLVq1TKmn7Xzcvhyc/369cSn3GE1ePBgBg0ahJubG7dv3+bTTz8FoEqVKpn209Viyqldv37dKFeoUMEol3eYFuPatWuZtiMiIsXHs5Nr8ezkrK/pk54l8xuxZH6jPOhR8aT1akRERESkpIm+FlLYXSh2TBZoe9zMgK/caXvcjMmSNkbvq0j2lfbvHEoaV9MQ59dUxKWVkphiOHfuHFeuXAHg2WefpWrVqvzvf//jf//7HwDjx4+nXLlywJ2EZ+PGjWnbti0Aq1atomLFiphMJtavX5+m/aioKLZs2QLYkpj2qWS/++47I6HomHzs378/JpMpzRYUFJTpuRw5csQoO44GtZeTk5M5fvx4Vt4WEREREREREZFSo0nQksyDipmfVk9Uwi0bTBZ49QNPXlziyRNfuvPiEk9e/cDTKZEZb4rmp9UTC6+TIiJFgH0a4tSbn59fYXetxNCamOLk+++/56mnnuLxxx8H4L///S9Hjx4lPj6efv1sE+InJiYaiU1PT09j37i4OBITE+nVqxcPP/ywy/bXrFnDoEGD6NixozGdq30qWbAlNJOTk3Fzc2PWrFmEhIQQHBxMzZo1eeSRRxg4cCC9e/fO9Dy2bt1KREQEvr6+jB8/ns8//5yGDRvy4IMPGscJDw/PwTskIiIiIiIiIiLFydVTu/jy7y0Luxsu2debt3OcGeXGoAFZmikldeL59JCxRrsT+gXx8dYhRjsZxVr+soo1o8rD18BFIMEW450A9c9buDH2SbawxWjn6qldWT5PkaIiPDzc5Ux/GjknUjRpJKY4sY+wdHNzA+B///sft2/f5vDhw5jNtn8uR44cITbWtrJ3cHAw586dA2DcuHHExcWxfft2rl696rL9b775hhs3bmA2m3FzcyM6OprNm+98GAsJCWHOnDkAtGrVihMnTpCYmMiFCxdYuHAhjRplbah9XFwckybZljBv0KABFy5cYOfOnZQpU4aoqChefvnl7L41IiKlUl5NLWpf20REREREREQKhxkzDxypQ+DGdjxwpA5miwmAZLOVbR2ucu+v7/DAtxv4bEU8lhir075eie60pW2+91HXjpLfNHJOpHhRElOcOK6LefXqVUJCbFNt2Edewp31MAGSkpLo378/+/btIzY2lrNnzzJ8+HCnGEeJiYl88cUXxvNNmzYRFxfnFPPGG28wdOhQ9u/fT3R0NLGxsZw5c4bVq1cTGBiY5XNZs2YN/fv358cffyQ2NpbIyEi+/PJLunTpwq+//prldkRERCTvmC0mHjhShwFfuTt9cSIiIiIiBS/1KEApeGHx8S7LwY/0BWx/R/Zybpgxs53tzF/QkwkbOjB/QU+Wv9cPk9nEE2/uZ/RLBzkc8H8cuv8pXgysxU1TlNP+8Z5JHONYrvshIiKSHZpOVpycOHECkyntl4lTp05l6tSpLvf55Zdf6N69u1PdmjVrGDFihMv4cePGMW7cuAz7ERQUlKW1LzPz5Zdf8uWXX+a6HRGR4iYiIsKYtjujGN1pKAXJjJnl7/WjzdmqeCe608+zJ8cb/cmov28t7K6JiIiIiBSKZlu2uayv5uXlspxT/ehHRzrik+ABgE+CB23OVqVDvw4cbnyUGO9kAGK8k4npGM7H/T5m8o5X8Un0IMbzNscb/cnWX/S5XURECpaSmCIiIiVQVpKTmSU5i6tqVCOMMJevVac6dM84JivtSM70w5bATP3FSbdjtQku5L6JiIiIiJREZRNvMaFfEM8nuePzpTs4XAZ6J7rTYMgjHPI6nGoneKvtW1xsHsCHPj3xuceDzv3uItkt2QiJTIinMpr6VURE8peSmFIshYSEUK9ePZev/fvf/053FKiIiJRci6oMYRzjeIvFvMiLLmOmMQ3rD1auvnAVFqXTUCBYF1t5i/+XbjuSsSQSGLosNk39gK/c8f7S+eOnV6I7zUM1IlhEREREJD/8305bonHYf27zEOsoT3njtTjPJM4HbcFnoNkYiQlALFiPWdkz9Hfa8m+IBj53Xq+ypN4UKyVLeHg4vr6+TnURERGF1BsbU5X9hXp8keJGSUyREkwfKEUkM3n1e6Io/bYJTPmTY4vAtMiU+3ZKiWz93Y9KW+WGiZe4h5eK1L8ikdw7dOhQYXdBREQEcF5bMSw+Pt3pS6Vk28pWDnCATmW645XoTrxnEscb/cnhrYe5/4wfhxvfILZMMmUT3Ig5kAxbgaHptxeZEJ/mejK3S5ZUpzqf8ilP8ZQxK46ruqISWxS4StJlV0leasbX19fl0mkiUnyYC7sDIjlRv359TCaTy02jMEVEREREREREbPJqbcVbCVasVuctPDw8L7ooBcCChYd4iJcn7mLB4MO8PHEXo/6+FavFysZZXVj2YQCvf9acZR8GwEOAJeP2Om5cneY7udwm06Yxja505S3eyrCuqMQWtPDw8DQ/g0C635FmdQPStJvepp95ESloGokpUoLpTiMRyYjVai0xvyeGMYxVR38HIKndDkYwgrWsTROzghUkkognnunGrNrhjsls4nbPxS5jSqsbgwa4rK+8YXOauiZBS5ymmnLUbM1Suh2rTfNQP36tG86+thexmK3pxosUVwcPHizsLoiISCkQERGRZjScJTqaM8/8Jc+PNX5NPGtHl3Wqy4uZXTL67Ch5y4KFPe1/Z0/7353q3Swm+h6uTt/D1e2BBSqWWLzxNp67mhXHXmfFiglTocbGEUdZnH8WCkJ+jSrMzihMzfqWe4d2tAHgnl7HC7knIsWDRmKKiIhIsTeSkZhqJWOqlWw8dxUDMIMZGcaY2pyBVqfTjZHcsZit7Gn/O/9v4FH2tP8di1kXwSIiIiI55efnl2ZUlbl8+RxPGdtg0VzAlli0lwtaen1IioxyepSSowENWMlKYokFbEnNdazjUz51qlvBCtrQptBj61M/X98PVyMurVZroa/lCHdunChqozOL8nuWWoc25ejQplxhd0Ok2FASU0RERIq9UEKNch/6OD13jOlNb97n/QxjMmtHRERERKSkcq9U0WXZvq6m/bEw+nA+cKrToxRvjjO6XOUqu9iFBx7EEIMHHmxJ+eNYt4tdnORkocfm97qY9hGXqbeisG6lqxsnwPV0tPmV3MzOtLpF4T0TkdxRElNERESKvRHcWQ95D3tcjqAcwQj2sjfTmMzaEREREREpbexraeZmTU0p+VyN0stqMsvVzDnpzaZTFGLziquEXFEcPZgRV4nN7K61mZ0N0iYslayUglASfl6LIyUxRURERERERERERCTLXK1jml4yy9fXN9P2XM2ck95sOkUhNq+4GnVZUhJy6f17yO1WUt4fKX5K8s9rUeZe2B0QERERERERERERkdIr9aw4e9jj9LpjXVGIFRGRgqGRmCIiIiIuZDaFTX6t7yEiIiIiIiIli6tpKDUVpYhI5pTEFBERkRLh112R/LorMtftLFl1lSWrrmY6hU1WpkQSEZGiqU+fPuzYsYPIyEji4uI4ceIEgYGBTjHTp083vmDs1q0bmzdv5tatW1y4cIEpU6Zk+VjDhw832hk4cCCrVq0iMjKS8PBwFixYgKenZ6Zt2PdfuXJlts9VRERECp+raSg1FWXpZP/OQUSyRtPJioiISInQ4qlf8qSdca+cy5N2RESkaBo5ciTLly93qmvVqhULFy6kefPmTJw4Mc0+//nPf6hUqRIAPj4+zJ07l5MnT7J9+/ZsHXvJkiX4+/sbzydMmICnpyfjxo3LwZmIiIgUDxEREVit1jR1JTWBFx4enuamV424FDt95yCSPRqJKSIiIiIiIqWCj48P8+fPB2DDhg1Ur14dHx8f3n//fQACAwNp1qxZmv2Cg4OpWbMmffr0MeoGDx6c7eOHhYXRoEED6taty8mTJwFbUrVevXo5OBsRkZKrXeyTBMQOIyB2GEOXxRpbQowSQcWRn59fqZrZxtWoy5KasBURyW8aiSkiIiIlwpAethEyQbtzN6Vs+9Y+ABw5EZPrPomISNHSuXNnKlasCMCgQYMYNGiQ0+tms5kHHniA4OBgp/qZM2fyxx9/8McffxAWFka1atWoXbt2to8/f/58QkJCAPjggw9YsWIF7u7udOzYkQsXLqS7n8lkyvaxRESKM3fKcLDsGgBODxlbyL0p+cLi46nm5WWU7ZIio3CvVNEoi0ju6TsHkexRElNERERKhLWftwQgqMr+XLVzeGdbAEy5bEdERIqeKlWqZBrjamTImTNnjHJ8ype7ZcqUyfbxL168aJQvX75slO+6665styUiUhS4miYUIDIhno4bVxdCjyQnmm3ZBsCNQQOMMsD5wKk0CVqSL4nk9P7tFLdpZjV1rGSXvnMQyR5NJysiIiIiIiKlwvXr143ypEmT0kz1ZjKZePfdd9Psl5SUZJRdfeGaVbVq1TLKjolLx4SmiEhx4mqa0KbrllKpjFdhd02KOFf/dorjNLOaOlZEJH8piSkiIiIiIiKlwn//+19u3rwJwNSpU+ncuTOenp7UqFGD5557jiNHjuTr8SdPnky9evWoU6cOkydPBmwJ0gMHDmS4n9VqxWq1snLlynztn4hIQWuwaK7TIzhPW6opTHPOcVrY1FPEuiqLiIgURZpOVkREREREREqFW7duMXXqVBYvXkytWrXYv79gp/Hy9/c31sS0W7FiRYbrYYqIlGT29Rbtj2CbwrTTshe1FmYuFcYUsXnB1TSzRWGKWVfTxoKmjhURyW9KYoqIiIiIiEipsWTJEkJDQ5kyZQr33HMPXl5eXLlyhaNHj7Jhw4Z8Pfb48eMZMGAATzzxBBaLhbVr1zJlypR8PaaIiEhx4ipZmZup3POKfdpYEREpWJpOVkREREREJJ/06dOHHTt2EBkZSVxcHCdOnCAwMNB4vUaNGsaIg2+++caonzNnDlarldu3b9OxY8dMjzN8+HBjytGBAweyatUqIiMjCQ8PZ8GCBXh6embaRmmasnT79u307t2bypUr4+3tTcOGDRk8eDDr1q0zYmbOnGmsbRUaGmrU169fH5PJRI8ePbJ93KioKEaOHEmlSpXw9fVl4sSJJCQkZLqfvR8jRozI9jFFRERSK6qjMNNj/6yUegsPD89Vu+Hh4S7bdbVpxKVI6ZHe7wb9HigcGokpIiIikgOupjlyFVPY0x4VpAaL5hpTgTUJWgLY1tk5HzjViEmKjHKaLsxeJ1ISjRw5kuXLlzvVtWrVioULF9K8eXMmTpzIH3/8waRJk1i1ahX9+vXjqaee4rfffjPWS3z//fczXS8xtSVLluDv7288nzBhAp6enowbNy73JyUiIiJSwNK7prInGhxl5xpMoytFxBX9bihalMQUERGREmHoX37Jk3Y6PHgsS3FZuTAuCtMeFaTUyUlXdY4JTZGSzGw2M3/+fAA2bNjAiy++SHR0NDNnzmTKlCkEBgaycOFCgoODWb16NYMGDaJ///588MEHXL16FQ8PD37++WemT5+e7WOHhYVx7733kpyczNdff02rVq0YOXIk7733ntZezGN169bN8D19/vnnC6wvIiIipY2razJXic30aFSVFIasfucgIjZKYoqIiEiJELQ7Mk/aOXIiJk/aEZHSrVy5clSsaEviDxo0iEGDBjm9bjabeeCBBwgODgZg3LhxdO3alRo1alCjRg1u377N8OHDSUxMzPax58+fT0hICAAffPABK1aswN3dnY4dO2aYcNPdxvnjk08+4ZNPPinsboiIiJQKpWkmHCl4a7sVAAAgAElEQVSe9J2DSPZoTUwREZFSKr11RfJyjRERkdLK3T3z+0V9fX2NclhYGOvXrzee//TTTxw5ciRHx7548aJRvnz5slG+6667ctSepC80NNRYr9LVpuSliBQFYfHxLsvBj/R1epTi48agAQVynOpUZ/Xbj1KNamnq97DHqd5VXXZjRUREUlMSU0REpJTy8/PL8ItXk8nk9AV7UXfqs5ac+qxlrttZPK8hi+c1zIMeiUhplpSUZJQnTZrk8nfsu+++a8S0adOGESNGGM+7dOnC008/naNj16pVyyg7Ji4dE5oiIlJ6NNuyDYDKGzYbZYBqXl5OjyKVN2x2ej6NadzzW3Xe4q009V3p6lTvqi67sSKlgb5zEMmeIpvE7A9MT9nyQ21gNfAnEAccA0ZmY//KwELgMhAP/ApMwfUbWhl4HziXEnsN2AfoPjcREZG807xnJZr3rJTrdsY+V52xz1XPgx6JSGl269Ytbt68CcDUqVPp3Lkznp6e1KhRg+eee85plKW7uzv//ve/8fT05JdffmHLli0ALFiwgKpV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km7cwoULnRKk33//Pbt376ZPnz6Abb3HhIQEQkJC+Oabb5g7d64xatFxxOW2bdsICAigXLlyhISEsHjxYj766COsViubN2/m8uXL1K5dO0t9//bbb+nduzczZszgnnvuwWQycfToUd599122bt2ao/2tVitubm589tln/PTTTzRs2JAePTK++uvWrZtxvHHjxvHEE09QtmxZPD09uXnzJkFBQbz55pvEx8dn6bxERIoSCxb2tP+dPe1/N55jgb6Hq1OJN4k8fDjjWDGExcdTzcvLKIuIiJRGeZbELEiNsI1mvIVt1GU1wDPltX9hm35WRERERESkKHNzc+Puu++mf//+AJw5c4adO3e6jPXx8eGZZ54xpjb617/+ZbzWvXt3o9yiRQvOnDlDrVq1OHv2LHPmzGHNmjVObS1cuBA3NzcmTJjA888/n8dnZeNqhGdoaKhR7tmzJ99//32aGG9vbyOp+tNPP9GvX78MjxMcHGwkMevUqcPFixczjN+7d2+mScaZM2cyc+ZMl6+52r9ixYps2rSJli1bUqZMGX799VdMJhMDBw5k8uTJdOt2Z/6hBx54gEWLFtG1a1cALBYLrVq14sqVK1SpUoXvvvuOTz/91EjoOhozZgxjx9rWpvP398/wHERECsqNQQPSrKcpeaPZlm1p3t/gR/oaic3gR/rSbMu2wuqeiIhIgciT6WQL2kVgM7Y1Nathm951PzASeKEQ+yUiIiIiIpIVBw8eJCkpiWPHjtGoUSNOnTrFgw8+mGb0XcuWLbFardy6dYulS5cCsGDBAqZNm2bEOI5EfOmll2jUqBFeXl7cfffdrF69mlGjRhmvDx8+nM6dOxMUFMTevXvz+SzvaNSokTEF7m+//cYPP/zgMu6ZZ56hUqVKAPy///f/Mmyza9euxvS73333XaYJzPwSFRXF7t276du3L5cuXWLjxo0AbNq0idatWxtxrVq1YtmyZfTv35+IiAij/soV2yIq165dY9OmTcYUtKktXbqUgIAAAgICuH79ej6ekYiIFFX2BGbqsoiISElVLJOYvwMDgbuAMkBFoCu2tTJFRERERESKmxYtWrB161YqVKiQaezEiROZNWuW8dzDw8MoHzx4kKpVq9KmTRuioqIAjFGFFSpUYPbs2dy8eTPDqWDzWu3atdm+fTs+Pj7cvHmTp556CqvV6jJ23LhxANy4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\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\n"]}],"source":["_ = [plot_check_v6(np_df, config, param_zip, pr_msg, x_max, x_margin_mult, y_margin_mult, front_plot, plot_check_dir, **col_idx_dict) for param_zip in zip(np_plot_params, np_plot_params[::-1])]"]},{"cell_type":"markdown","source":["### whole_plot"],"metadata":{"id":"sZAYhcdoXnm4"}},{"cell_type":"code","source":["s_id = config.selection_id\n","\n","# ------------ make col_idx_dict config ------------ #\n","nonstep_col_list = []\n","step_col_list = []\n","stepmark_col_list = []\n","\n","# ============ nonstep_col_list - add info(col, alpha, color, linewidth) ============ #\n","# nonstep_col_list.append([['close'], 1, '#ffffff', 2])\n","\n","# ============ step_col_list - add info(col, alpha, color, linewidth) ============ #\n","# ------ htf_candle ------ #\n","hc_tf1 = '15T'\n","hc_tf2 = 'H'\n","hc_tf3 = '4H'\n","\n","step_col_list.append([['open_{}'.format(hc_tf1), 'close_{}'.format(hc_tf1)], 1, '#ffffff', 1])\n","step_col_list.append([['open_{}'.format(hc_tf2), 'close_{}'.format(hc_tf2)], 1, '#ffffff', 2])\n","# step_col_list.append([['open_{}'.format(hc_tf3), 'close_{}'.format(hc_tf3)], 1, '#ffffff', 4])\n","\n","# ------ resi_sup ------ #\n","# rs_tf = 'T'\n","# step_col_list.append([['resi_{}'.format(rs_tf), 'sup_{}'.format(rs_tf)], 1, '#ffeb3b', 1])\n","# step_col_list.append([['resi_out_{}'.format(rs_tf), 'sup_out_{}'.format(rs_tf)], 1, 'dodgerblue', 2])\n","\n","# ------ wave_range ------ #\n","wave_tf1 = config_list[0].tr_set.p1_itv1\n","wave_period1, wave_period2 = config_list[0].tr_set.p1_period1, config_list[0].tr_set.p1_period2\n","\n","# step_col_list.append([['dc_upper_{}{}'.format(wave_tf1, wave_period1), 'dc_lower_{}{}'.format(wave_tf1, wave_period1)], 1, '#ffeb3b', 1])\n","# step_col_list.append([['dc_upper_{}{}'.format(wave_tf1, wave_period2), 'dc_lower_{}{}'.format(wave_tf1, wave_period2)], 1, '#ffeb3b', 1])\n","\n","# step_col_list.append([['dc_upper_{}{}'.format(wave_tf2, wave_period2), 'dc_lower_{}{}'.format(wave_tf2, wave_period2)], 1, '#e65100', 2])\n","\n","# ------ dc ------ #\n","dc_tf1 = '5T'\n","dc_period1 = 20\n","dc_tf2 = 'H'\n","dc_period2 = 20\n","# step_col_list.append([['dc_upper_{}{}'.format(dc_tf1, dc_period1), 'dc_lower_{}{}'.format(dc_tf1, dc_period1)], 1, '#ffeb3b', 1]),  # inner\n","# step_col_list.append([['dc_base_{}{}'.format(dc_tf1, dc_period1)], 1, '#5b9cf6', 1])\n","step_col_list.append([['dc_upper_{}{}'.format(dc_tf2, dc_period2), 'dc_lower_{}{}'.format(dc_tf2, dc_period2)], 1, '#ff00ff', 4]),  # inner\n","step_col_list.append([['dc_base_{}{}'.format(dc_tf2, dc_period2)], 1, '#5b9cf6', 4])\n","\n","# ------ bb ------ #\n","bb_tf1 = 'T'\n","bb_period1 = 20\n","\n","# step_col_list.append([['bb_upper_{}{}'.format(bb_tf1, bb_period1), 'bb_lower_{}{}'.format(bb_tf1, bb_period1)], 1, '#ffffff', 1])\n","# step_col_list.append([['bb_base_{}{}'.format(bb_tf1, bb_period1)], 1, '#00ff00', 1])\n","\n","# step_col_list.append([['bb_upper_{}'.format(tf2), 'bb_lower_{}'.format(tf2)], 1, '#e91e63', 4])\n","\n","# ------ ema ------ #\n","# step_col_list.append([['ema_5T'], 1, '#03ed30', 2])\n","\n","# ============ stepmark_col_list - add info(col, alpha, color, linewidth) ============ #\n","# stepmark_col_list.append([['sar_T'], 1, 'dodgerblue', 7])\n","\n","\n","# ============ str to numbcol ============ #\n","nonstep_col_arr = strcol_tonumb(res_df, nonstep_col_list)\n","step_col_arr = strcol_tonumb(res_df, step_col_list)\n","stepmark_col_arr = strcol_tonumb(res_df, stepmark_col_list)\n","\n","col_idx_dict = \\\n","{\n","  \"ohlc_col_idxs\": get_col_idxs(res_df, ['open', 'high', 'low', 'close']),\n","  \"vp_col_idxs\": get_col_idxs(res_df, ['close', 'volume']),\n","  # \"ohlc_col_idxs\": get_col_idxs(res_df, ['haopen', 'hahigh', 'halow', 'haclose']),  # heikin-ashi ver.\n","  \"nonstep_col_info\": nonstep_col_arr,\n","  \"step_col_info\": step_col_arr,\n","  \"stepmark_col_info\": stepmark_col_arr,\n","  \"ylim_col_idxs\": get_col_idxs(res_df, ['open', 'high', 'low', 'close', 'dc_upper_15T4', 'dc_lower_15T4'])  # , 'dc_upper_H', 'dc_lower_H', 'dc_upper_15T', 'dc_lower_15T', 'short_out_{}'.format(selection_id), 'long_out_{}'.format(selection_id)\n","}   # , 'wave_1_{}'.format(wave_tf2), 'wave_0_{}'.format(wave_tf2), 'dc_upper_15T', 'dc_lower_15T'"],"metadata":{"id":"jjFziVVIhgSr"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["#### whole_plot main"],"metadata":{"id":"50HXDIdJij28"}},{"cell_type":"code","source":["plot_op_idx_nums = 10\n","\n","win_idxs = (pr_ > 1).ravel()  # [-plot_op_idx_nums:]\n","selected_op_idxs = obj_[4].ravel().astype(int)  # [-plot_op_idx_nums:]\n","selected_ex_idxs = obj_[3].ravel().astype(int)  # [-plot_op_idx_nums:]\n","\n","len_idxs = len(win_idxs)\n","print(\"len_idxs :\", len_idxs)\n","\n","split_range = np.arange(plot_op_idx_nums, len_idxs, plot_op_idx_nums)\n","win_idxs_list = np.split(win_idxs, split_range, axis=0)\n","selected_op_idxs_list = np.split(selected_op_idxs, split_range, axis=0)\n","selected_ex_idxs_list = np.split(selected_ex_idxs, split_range, axis=0)"],"metadata":{"id":"-tbLsXN9eN2p"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["_ = [whole_plot_check(np_df, a, b, c, plot_check_dir=None, **col_idx_dict) for a, b, c in zip(win_idxs_list, selected_op_idxs_list, selected_ex_idxs_list)]"],"metadata":{"id":"FtILHO-4kVlO"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"iTW2ZuX61ojg"},"source":["### plot_funcs"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"0l6joTK_1ojh"},"outputs":[],"source":["def whole_plot_check(data, win_idxs, selected_op_idxs, selected_ex_idxs, plot_check_dir=None, **col_idx_dict):\n","  # start_0 = time.time()\n","  plt.style.use(['dark_background', 'fast'])\n","  fig = plt.figure(figsize=(30, 12))\n","  nrows, ncols = 1, 1\n","  gs = gridspec.GridSpec(nrows=nrows,  # row 부터 index 채우고 col 채우는 순서임 (gs_idx)\n","                          ncols=ncols,\n","                          #height_ratios=[31, 1]\n","                          )\n","\n","  ax = fig.add_subplot(gs[0])\n","\n","  # ------------ add_col section ------------ #\n","  a_data = data[selected_op_idxs[0]:selected_op_idxs[-1] + 1]\n","\n","  plot_op_idxs = selected_op_idxs - selected_op_idxs[0]  \n","  plot_win_op_idxs = plot_op_idxs[win_idxs]\n","  plot_loss_op_idxs = plot_op_idxs[~win_idxs]\n","\n","  plot_ex_idxs = selected_ex_idxs - selected_op_idxs[0]\n","  plot_win_ex_idxs = plot_ex_idxs[win_idxs]\n","  plot_loss_ex_idxs = plot_ex_idxs[~win_idxs]\n","\n","\n","  # ------ add cols ------ #\n","  [nonstep_col_plot(a_data[:, params[0]], *params[1:]) for params in col_idx_dict['nonstep_col_info']]\n","  [step_col_plot(a_data[:, params[0]], *params[1:]) for params in col_idx_dict['step_col_info']]\n","  [stepmark_col_plot(a_data[:, params[0]], *params[1:]) for params in col_idx_dict['stepmark_col_info']]\n","\n","  # [plt.axvline(op_idx, color='#00ff00') for op_idx in plot_win_op_idxs]\n","  # [plt.axvline(op_idx, color='#ff0000') for op_idx in plot_loss_op_idxs]\n","  [plt.axvspan(op_idx, ex_idx, alpha=0.5, color='#00ff00') for op_idx, ex_idx in zip(plot_win_op_idxs, plot_win_ex_idxs)]\n","  [plt.axvspan(op_idx, ex_idx, alpha=0.5, color='#ff0000') for op_idx, ex_idx in zip(plot_loss_op_idxs, plot_loss_ex_idxs)]\n","  \n","  plt.show()\n","\n","  if plot_check_dir is None:\n","    plt.show()\n","    print()\n","  else:\n","    fig_name = plot_check_dir + \"/whole_plot_{}.png\".format(selected_op_idxs[0])\n","    plt.savefig(fig_name)\n","    print(fig_name, \"saved !\")\n","  plt.close()\n","  # print(\"elapsed time :\", time.time() - start_0)\n","\n","  return\n","\n","def plot_check_v6(data, config, param_zip, pr_msg, x_max, x_margin_mult, y_margin_mult, front_plot, plot_check_dir=None, **col_idx_dict):\n","  # start_0 = time.time()\n","  plt.style.use(['dark_background', 'fast'])\n","  fig = plt.figure(figsize=(30, 18))\n","  nrows, ncols = 2, 2\n","  gs = gridspec.GridSpec(nrows=nrows,  # row 부터 index 채우고 col 채우는 순서임 (gs_idx)\n","                         ncols=ncols,\n","                         height_ratios=[3, 1]\n","                         )\n","  for gs_idx, params in enumerate(param_zip):\n","\n","    iin, iout, pr, ep, tp, entry_idx, exit_idx, open_idx, point1_idx, lvrg, fee, tp_line, out_line, en_tp1, en_out0 = params\n","\n","    # if exit_idx - open_idx < 50:  # temporary\n","    #   break\n","\n","    ax = fig.add_subplot(gs[gs_idx])\n","\n","    # ------------ add_col section ------------ #\n","    a_data = data[int(iin):int(iout + 1)]\n","    # a_data = data[iin:iout]\n","    # ------ candles ------ #\n","    candle_plot(a_data[:, col_idx_dict['ohlc_col_idxs']], ax, alpha=1.0, wickwidth=1.0)\n","\n","    # ------ add cols ------ #\n","    [nonstep_col_plot(a_data[:, params_[0]], *params_[1:]) for params_ in col_idx_dict['nonstep_col_info']]\n","    [step_col_plot(a_data[:, params_[0]], *params_[1:]) for params_ in col_idx_dict['step_col_info']]\n","    [stepmark_col_plot(a_data[:, params_[0]], *params_[1:]) for params_ in col_idx_dict['stepmark_col_info']]\n","\n","    # ------ ep, tp + xlim ------ #\n","    try:\n","      eptp_hvline_v5(config, ep, tp, entry_idx, exit_idx, open_idx, point1_idx, tp_line, out_line, en_tp1, en_out0,\n","                    front_plot, iin, iout, x_max, x_margin_mult, y_margin_mult, a_data, **col_idx_dict)\n","    except Exception as e:\n","      print(\"error in eptp_hvline_v3 :\", e)\n","\n","    #     Todo    #\n","    #     3. outer_price plot 일 경우, gs_idx + nrows 하면 됨\n","\n","    # ------ trade_info ------ #\n","    data_msg_list = [\"\\n {} : {:.3f}\".format(*params_[1:], *data[int(open_idx), params_[0]]) for params_ in col_idx_dict['data_window_col_info']]  # * for unsupported format for arr\n","    ps_msg_expand = pr_msg.format(entry_idx, exit_idx, pr, lvrg, fee) + ''.join(data_msg_list)\n","    \n","    plt.title(ps_msg_expand)\n","\n","  if plot_check_dir is None:\n","    plt.show()\n","    print()\n","  else:\n","    fig_name = plot_check_dir + \"/{}.png\".format(int(entry_idx))\n","    plt.savefig(fig_name)\n","    print(fig_name, \"saved !\")\n","  plt.close()\n","  # print(\"elapsed time :\", time.time() - start_0)\n","\n","  return\n","\n","def eptp_hvline_v5(config, en_p, ex_p, entry_idx, exit_idx, open_idx, point1_idx, tp_line, out_line, en_tp1, en_out0,\n","                   front_plot, iin, iout, x_max, x_margin_mult, y_margin_mult, a_data, **col_idx_dict):\n","  # ------ get vertical ticks ------ #\n","  entry_tick = int(entry_idx - iin)\n","  exit_tick = entry_tick + int(exit_idx - entry_idx)\n","  open_tick = entry_tick - int(entry_idx - open_idx)\n","  point1_tick = open_tick - int(open_idx - point1_idx)\n","  bias_info_tick = entry_tick + config.tr_set.bias_info_tick\n","\n","  if front_plot == 1:\n","    x_max = open_tick + 20\n","  elif front_plot == 2:\n","    x_max = entry_tick + 20 \n","  elif front_plot == 3:\n","    x_max = exit_tick + 20\n","  elif front_plot == 4:\n","    x_max = bias_info_tick + 20\n","\n","  if (iout - iin) > x_max:\n","    x_margin = x_max * x_margin_mult\n","    plt.xlim(0 - x_margin, x_max + x_margin)\n","  x0, x1 = plt.gca().get_xlim()\n","\n","  # ------------ hlines ------------ #\n","  # ------ entry & exit ------ #\n","  en_xmin = entry_tick / x1\n","  ex_xmin = exit_tick / x1\n","  plt.axhline(en_p, x0, en_xmin, linewidth=2, linestyle='--', alpha=1, color='lime')  # en_p line axhline\n","  plt.text(x0, en_p, 'en_p :\\n {:.3f} \\n epg {}'.format(en_p, config.tr_set.ep_gap), ha='right', va='center', fontweight='bold', fontsize=15)  # en_p line label\n","  plt.axhline(ex_p, ex_xmin, 1, linewidth=2, linestyle='--', alpha=1, color='lime')  # ex_p line axhline (signal 도 포괄함, 존재 의미)\n","  plt.text(x1, ex_p, 'ex_p :\\n {}'.format(ex_p), ha='left', va='center', fontweight='bold', fontsize=15)  # ex_p line label\n","\n","  # ------ tpout_line ------ #\n","  plt.axhline(tp_line, 0.05, 1, linewidth=2, linestyle='-', alpha=1, color='#00ff00')  # ep 와 gap 비교 용이하기 위해 ex_xmin -> 0.1 사용\n","  plt.text(x0, tp_line, 'tpg {}'.format(config.tr_set.tp_gap), ha='right', va='center', fontweight='bold', fontsize=15, color='#00ff00')\n","  plt.axhline(out_line, 0.05, 1, linewidth=2, linestyle='-', alpha=1, color='#ff0000')\n","  plt.text(x0, out_line, 'outg {}'.format(config.tr_set.out_gap), ha='right', va='center', fontweight='bold', fontsize=15, color='#ff0000')\n","\n","  # ------ wave_line ------ #\n","  text_x_pos = (x0 + x1) * 0.1\n","  plt.axhline(en_tp1, 0.2, 1, linewidth=2, linestyle='-', alpha=1, color='#ffffff')\n","  plt.text(text_x_pos, en_tp1, ' wave_1', ha='right', va='bottom', fontweight='bold', fontsize=15)\n","  plt.axhline(en_out0, 0.2, 1, linewidth=2, linestyle='-', alpha=1, color='#ffffff')\n","  plt.text(text_x_pos, en_out0, ' wave_0', ha='right', va='bottom', fontweight='bold', fontsize=15)\n","\n","  # ------ ylim ------ #\n","  if front_plot:\n","    y_lim_data = a_data[:x_max + 1, col_idx_dict['ylim_col_idxs']]  # +1 for including open_tick\n","  else:\n","    y_lim_data = a_data[:, col_idx_dict['ylim_col_idxs']]\n","  \n","  y_min = y_lim_data.min()\n","  y_max = y_lim_data.max()\n","  y_margin = (y_max - y_min) * y_margin_mult\n","  plt.ylim(y_min - y_margin, y_max + y_margin)\n","\n","  # ------------ vline (open_tick, entry_tick, exit_tick) ------------ #\n","  y0, y1 = plt.gca().get_ylim()\n","  l_data = a_data[:exit_tick + 1, col_idx_dict['ohlc_col_idxs'][2]]  # +1 for including exit_tick\n","  point1_ymax, open_ymax, en_ymax, ex_ymax = [(l_data[tick_] - y0) / (y1 - y0) - .01 for tick_ in [point1_tick, open_tick, entry_tick, exit_tick]]  # -.05 for margin\n","  plt.axvline(point1_tick, 0, point1_ymax, alpha=1, linewidth=2, linestyle='--', color='#ff7722')\n","  plt.axvline(open_tick, 0, open_ymax, alpha=1, linewidth=2, linestyle='--', color='#ffeb3b')  # 추후, tick 별 세부 정의가 달라질 수 있음을 고려해 multi_line 작성 유지\n","  plt.axvline(entry_tick, 0, en_ymax, alpha=1, linewidth=2, linestyle='--', color='#ffeb3b')\n","  plt.axvline(exit_tick, 0, ex_ymax, alpha=1, linewidth=2, linestyle='--', color='#ffeb3b')\n","  plt.axvline(bias_info_tick, alpha=1, linewidth=2, linestyle='-', color='#ffeb3b')\n","\n","  return"]},{"cell_type":"markdown","metadata":{"id":"8soVNGFt1ojj"},"source":["#### legacy"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"narSQRCz1ojj"},"outputs":[],"source":["_ = [plot_check_v4(np_df, config, param_zip, pr_msg, x_max, x_margin_mult, y_margin_mult, front_plot, plot_check_dir, 500, 0.07, 100, **col_idx_dict) for param_zip in zip(np_plot_params, np_plot_params[::-1])]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"kLiEIiMW1ojk"},"outputs":[],"source":["def plot_check_v4(data, config, param_zip, pr_msg, x_max, x_margin_mult, y_margin_mult, front_plot, plot_check_dir=None, vp_range=500, kde_factor=0.05, num_samples=100, **col_idx_dict):\n","  # start_0 = time.time()\n","  plt.style.use(['dark_background', 'fast'])\n","  fig = plt.figure(figsize=(30, 18))\n","  nrows, ncols = 2, 2\n","  gs = gridspec.GridSpec(nrows=nrows,  # row 부터 index 채우고 col 채우는 순서임 (gs_idx)\n","                         ncols=ncols,\n","                         height_ratios=[3, 1]\n","                         )\n","  for gs_idx, params in enumerate(param_zip):\n","    ax = fig.add_subplot(gs[gs_idx])\n","    iin, iout, pr, ep, tp, entry_idx, exit_idx, open_idx, lvrg, fee, tp_line, out_line, bias_info, bias_thresh = params\n","\n","    # ------------ add_col section ------------ #\n","    iin, iout = int(iin), int(iout)\n","    a_data = data[iin:iout]\n","    # ------ candles ------ #\n","    candle_plot(a_data[:, col_idx_dict['ohlc_col_idxs']], ax, alpha=1.0, wickwidth=1.0)\n","    \n","    # ------ add cols ------ #\n","    [nonstep_col_plot(a_data[:, params[0]], *params[1:]) for params in col_idx_dict['nonstep_col_info']]\n","    [step_col_plot(a_data[:, params[0]], *params[1:]) for params in col_idx_dict['step_col_info']]\n","    [stepmark_col_plot(a_data[:, params[0]], *params[1:]) for params in col_idx_dict['stepmark_col_info']]\n","\n","    # vp_data = data[iin - vp_range:iin, col_idx_dict['vp_col_idxs']]\n","    # vp_info = [vp_range, vp_data[:, 0], vp_data[:, 1], kde_factor, num_samples]\n","    vp_data = data[iin - vp_range:iin, col_idx_dict['vp_col_idxs']].T\n","    vp_info = [vp_range, *vp_data, kde_factor, num_samples]\n","\n","    # ------ ep, tp + xlim ------ #\n","    eptp_hvline_v4(config, ep, tp, entry_idx, exit_idx, open_idx, tp_line, out_line, bias_info, bias_thresh, \n","                   front_plot, iin, iout, x_max, x_margin_mult, y_margin_mult, a_data, vp_info, **col_idx_dict)        \n","\n","    #     Todo    #\n","    #     3. outer_price plot 일 경우, gs_idx + nrows 하면 됨\n","\n","    # ------ trade_info ------ #\n","    plt.title(pr_msg.format(entry_idx, exit_idx, pr, lvrg, fee))\n","\n","  if plot_check_dir is None:\n","    plt.show()\n","    print()\n","  else:\n","    fig_name = plot_check_dir +  \"/%s.png\" % int(entry_idx)\n","    plt.savefig(fig_name)\n","    print(fig_name, \"saved !\")\n","  plt.close()\n","  # print(\"elapsed time :\", time.time() - start_0)  \n","\n","  return\n","\n","def eptp_hvline_v4(config, en_p, ex_p, entry_idx, exit_idx, open_idx, tp_line, out_line, bias_info, bias_thresh, \n","                   front_plot, iin, iout, x_max, x_margin_mult, y_margin_mult, a_data, vp_info, **col_idx_dict):\n","  # ------ get vertical ticks ------ #\n","  entry_tick = int(entry_idx - iin)\n","  open_tick = entry_tick - int(entry_idx - open_idx)\n","  exit_tick = entry_tick + int(exit_idx - entry_idx)\n","\n","  if front_plot == 1:\n","    x_max = open_tick\n","  elif front_plot == 2:\n","    x_max = entry_tick\n","  if (iout - iin) > x_max:\n","    x_margin = x_max * x_margin_mult\n","    plt.xlim(0 - x_margin, x_max + x_margin)\n","  x0, x1 = plt.gca().get_xlim()\n","  # ------------ hlines ------------ #\n","  # ------ entry & exit ------ #\n","  en_xmin = entry_tick / x1\n","  ex_xmin = exit_tick / x1\n","  plt.axhline(en_p, x0, en_xmin, linewidth=2, linestyle='--', alpha=1, color='lime')  # en_p line axhline\n","  plt.text(x0, en_p, ' en_p :\\n {}'.format(en_p), ha='right', va='center', fontweight='bold')  # en_p line label\n","  plt.axhline(ex_p, ex_xmin, 1, linewidth=2, linestyle='--', alpha=1, color='lime')  # ex_p line axhline (signal 도 포괄함, 존재 의미)\n","  plt.text(x1, ex_p, ' ex_p :\\n {}'.format(ex_p), ha='left', va='center', fontweight='bold')  # ex_p line label\n","\n","  # ------ tpout_line ------ #\n","  plt.axhline(tp_line, 0.1, 1, linewidth=4, linestyle='-', alpha=1, color='#00ff00')  # ep 와 gap 비교 용이하기 위해 ex_xmin -> 0.1 사용\n","  plt.text(x0, tp_line, ' %s' % config.tr_set.tp_gap, ha='left', va='center', fontweight='bold')\n","  plt.axhline(out_line, 0.1, 1, linewidth=4, linestyle='-', alpha=1, color='#ff0000')\n","  plt.text(x0, out_line, ' %s' % config.tr_set.out_gap, ha='left', va='center', fontweight='bold')\n","\n","  # ------ bias_line ------ #\n","  plt.axhline(bias_info, 0.1, 1, linewidth=4, linestyle='-', alpha=1, color='dodgerblue')\n","  plt.text(x0, bias_info, ' bias_info', ha='left', va='center', fontweight='bold')\n","  plt.axhline(bias_thresh, 0.1, 1, linewidth=4, linestyle='-', alpha=1, color='#ff8400')\n","  plt.text(x0, bias_thresh, ' bias_thresh', ha='left', va='center', fontweight='bold')\n","\n","  # ------ volume profile ------ #\n","  vp_range, close, volume, kde_factor, num_samples = vp_info\n","  if iin >= vp_range:\n","    start_0 = time.time()\n","    kde = stats.gaussian_kde(close, weights=volume, bw_method=kde_factor)\n","    kdx = np.linspace(close.min(), close.max(), num_samples)\n","    kdy = kde(kdx)\n","    print(\"kde elapsed_time :\", time.time() - start_0)\n","\n","    kdy_max = kdy.max()\n","    # peaks,_ = signal.find_peaks(kdy)\n","    peaks,_ = signal.find_peaks(kdy, prominence=kdy_max * 0.3)\n","    peak_list = kdx[peaks]   # peak_list\n","    [plt.axhline(peak, linewidth=6, linestyle='-', alpha=1, color='white') for peak in peak_list]\n","    \n","    kdy_ratio = entry_tick / kdy_max # 30 / 0.0001\n","    plt.plot(kdy * kdy_ratio, kdx, color='white')\n","    # plt.plot(pky, pkx, 'bo', color='yellow')\n","\n","  # ------ ylim ------ #\n","  if front_plot:\n","    y_lim_data = a_data[:x_max + 1, col_idx_dict['ylim_col_idxs']]  # +1 for including open_tick\n","  else:\n","    y_lim_data = a_data[:, col_idx_dict['ylim_col_idxs']]\n","  y_min = y_lim_data.min()\n","  y_max = y_lim_data.max()\n","  y_margin = (y_max - y_min) * y_margin_mult\n","  # plt.ylim(y_min - y_margin, y_max + y_margin)\n","\n","  # ------------ vline (open_tick, entry_tick, exit_tick) ------------ #\n","  y0, y1 = plt.gca().get_ylim()\n","  l_data = a_data[:exit_tick + 1, col_idx_dict['ohlc_col_idxs'][2]]  # +1 for including exit_tick\n","  open_ymax, en_ymax, ex_ymax = [(l_data[tick_] - y0) / (y1 - y0) - .01 for tick_ in [open_tick, entry_tick, exit_tick]]  # -.05 for margin\n","  plt.axvline(open_tick, 0, open_ymax, alpha=1, linewidth=2, linestyle='--', color='#ffeb3b')  # 추후, tick 별 세부 정의가 달라질 수 있음을 고려해 multi_line 작성 유지\n","  plt.axvline(entry_tick, 0, en_ymax, alpha=1, linewidth=2, linestyle='--', color='#ffeb3b')\n","  plt.axvline(exit_tick, 0, ex_ymax, alpha=1, linewidth=2, linestyle='--', color='#ffeb3b')\n","\n","  return"]},{"cell_type":"markdown","source":["### dump"],"metadata":{"id":"ddL_BC24buq0"}},{"cell_type":"markdown","source":["#### whole_plot thing"],"metadata":{"id":"zgTrEWWqbwsT"}},{"cell_type":"code","source":["fig = go.Figure(data=[go.Candlestick(x=t_df.index,\n","                open=t_df.open,\n","                high=t_df.high,\n","                low=t_df.low,\n","                close=t_df.close)])\n","\n","fig.show()"],"metadata":{"id":"M4zn8wxibzAR"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["cf.go_offline()\n","init_notebook_mode()"],"metadata":{"id":"4IhBjPMobzAS"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["qf = cf.QuantFig(t_df, title=\"Apple's stock price in 2021\", name='AAPL')\n","qf.iplot()"],"metadata":{"id":"n9WZkE9wbzAS"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"zmYbP-Gc1ojs"},"source":["#### brief np_pr survey"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"82a8Km8z1ojs"},"outputs":[],"source":["# plot_pr_list[:100]\n","plt.plot(np_pr)\n","plt.axhline(1)\n","plt.show()"]},{"cell_type":"markdown","metadata":{"id":"5rdQZm_71ojv"},"source":["#### plot indi. legacy"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"u11r-dU91ojw"},"outputs":[],"source":["\n","  # ---------------------- ma ---------------------- #\n","   # --------- ema --------- #\n","  # alpha = 1\n","  # for sm_i, item in enumerate(ema_list):\n","  #   if sm_i > 0:\n","  #     lw = 5\n","  #   else:\n","  #     lw = 2\n","  #   plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#03ed30', linewidth=lw)\n","  #   alpha -= 0.2\n","\n","  #   # --------- sma --------- #\n","  # alpha = 1\n","  # for sm_i, sma in enumerate(sma_list):\n","  #   if sm_i > 0:\n","  #     lw = 5\n","  #   else:\n","  #     lw = 4\n","  #   plt.step(np.arange(len(plot_df)), plot_df[sma].values, alpha=alpha, color='#e91e63', linewidth=lw)\n","  #   alpha -= 0.2\n","\n","  \n","  # ---------------------- cb ---------------------- #\n","  # alpha = 1\n","  # for sm_i, item in enumerate(cb_list):\n","  #   if sm_i > 0:\n","  #     lw = 5\n","  #   else:\n","  #     lw = 2\n","  #   plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#5b9cf6', linewidth=lw)\n","  #   alpha -= 0.2\n","\n","\n","  \n","  # ---------------------- sar ---------------------- #\n","  # alpha = 1\n","  # markersize = 5\n","  # for sar in sar_list:\n","  #   plt.step(plot_df[sar].values, 'c*', alpha=alpha, markersize=markersize, color='dodgerblue')  # sar mic\n","  #   markersize += 1\n","  #   alpha -= 0.1\n","\n","  # plt.step(plot_df.values[:, [12]], 'co', alpha=1, markersize=7)  # sar mac\n","\n","  #               cloud               #\n","  # alpha = 0.7\n","  # for senkoua, senkoub in zip(senkoua_list, senkoub_list):\n","  #   plt.fill_between(np.arange(len(plot_df)), plot_df[senkoua].values, plot_df[senkoub].values, # ichimoku\n","  #                     where=plot_df[senkoua].values >= plot_df[senkoub].values, facecolor='g', alpha=alpha) # ichimoku\n","  #   plt.fill_between(np.arange(len(plot_df)), plot_df[senkoua].values, plot_df[senkoub].values,\n","  #                     where=plot_df[senkoua].values <= plot_df[senkoub].values, facecolor='r', alpha=alpha)  \n","  #   alpha -= 0.05\n","  \n","\n","\n","  # ---------------------- outer price indi. ---------------------- #\n","  #           macd          #\n","  # plt.subplot(312)\n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for macd in macd_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[macd].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","\n","  # plt.axhline(0, linestyle='--')\n","\n","  \n","  # #           trix          #  \n","  # # plt.subplot(313)\n","  # plt.subplot(gs[2])\n","  # alpha = 1\n","  # for trix in trix_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[trix].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","  # plt.axhline(0, linestyle='--')\n","\n","  \n","  #           fisher          #  \n","  # plt.subplot(313)\n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for fisher in fisher_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[fisher].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","    \n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","\n","  # plt.axhline(0, linestyle='--')\n","  # plt.axhline(fisher_upper, linestyle='--')\n","  # plt.axhline(fisher_lower, linestyle='--')\n","\n","  #           stoch          #  \n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for stoch_ in stoch_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[stoch_].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axhline(50, linestyle='--')\n","  # plt.axhline(stoch_upper, linestyle='--')\n","  # plt.axhline(stoch_lower, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","\n","  # ---------- cctbbo ---------- #  \n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for cctbbo in cctbbo_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[cctbbo].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axhline(50, linestyle='--')\n","  # plt.axhline(cctbbo_upper, linestyle='--')\n","  # plt.axhline(cctbbo_lower, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","\n","  # ---------- ema_roc ---------- #  \n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for emaroc in emaroc_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[emaroc].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","  # plt.axhline(0, linestyle='--')\n","  \n","  # ---------- bbw ---------- #  \n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for bbwp_ in bbwp_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[bbwp_].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","  # plt.axhline(bbwp_thresh, linestyle='--')\n","\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","\n"]},{"cell_type":"markdown","metadata":{"id":"tApzvz_gK9lR"},"source":["## legacy"]},{"cell_type":"markdown","metadata":{"id":"OJqkmkpsLCYC"},"source":["### tr_tresh calc"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"gcpo4MGd9Wm4"},"outputs":[],"source":["res_wr = 0.6\n","# tr_thresh = 1\n","# tr_thresh = ((1 - res_wr) / res_wr) ** 0.5\n","tr_thresh = ((1 - res_wr) / res_wr) + 0.01\n","# tr_thresh = 2.6\n","print(\"res_wr :\", res_wr)\n","print(\"tr_thresh :\", tr_thresh)\n","\n","\n","#   단리    #\n","trade_num = 1000\n","asset = 1 # thousand USDT\n","test_loss_gap = 0.95  # fee adjusted\n","test_pr_gap = 1 + (1 - test_loss_gap) * tr_thresh\n","\n","test_loss_cnt = trade_num * (1 - res_wr)\n","test_pr_cnt = trade_num * res_wr\n","\n","test_trade_list = [test_pr_gap] * int(test_pr_cnt) + [test_loss_gap] * int(test_loss_cnt)\n","random.shuffle(test_trade_list)\n","# print(\"len(test_trade_list) :\", len(test_trade_list))\n","print(test_trade_list[:10])\n","print()\n","\n","# print(\"%.5f\" % np.cumprod(test_trade_list)[-1])\n","for tr_thresh_ in np.arange(1, 3, 0.2):\n","  if (1 + (1 - test_loss_gap) * tr_thresh_) ** test_pr_cnt * test_loss_gap ** test_loss_cnt > 1:\n","    break\n","print(\"복리를 위한 tr_thresh_ :\", tr_thresh_)\n","# print(\"tr_thresh :\", tr_thresh)\n","print(\"np.cumprod(test_trade_list)[-1] :\", np.cumprod(test_trade_list)[-1])\n","print(\"total_pr : \", np.cumprod(test_trade_list)[-1])\n","print()\n","#   복리 tr_thresh  #\n","#   1. trade_num 에 영향 받지 않음\n","#   2. loss_gap 에 비례함\n","\n","for tr_thresh_ in np.arange(1, 3, 0.01):\n","  if ((1 - test_loss_gap) * tr_thresh_) * test_pr_cnt + (test_loss_gap - 1) * test_loss_cnt > 0:\n","    break\n","np_test_trade = np.array(test_trade_list) - 1\n","print(np_test_trade[:10])\n","# print(\"%.3f\" % )\n","print(\"단리를 위한 tr_thresh_ :\", tr_thresh_)\n","# print(\"tr_thresh :\", tr_thresh)\n","print(\"np.cumsum(np_test_trade)[-1] :\", np.cumsum(np_test_trade)[-1])\n","print(\"total_pr : \", 1 + np.cumsum(np_test_trade)[-1])\n"]}],"metadata":{"accelerator":"GPU","colab":{"collapsed_sections":["Ic1mfmwWCIBu","VdukVo5-Suzj","Bw5JibDKSuzj","Pe0QpnORSuzk","E0n53hflJbnp","MlFkpO1MSuzl","t1E_eAyPSuzm","nUs4fjVHSuzl","L7l5CTJfSuzn","x_XGJqBi8Jex","MSUY4nnku3s9","epgS5Dksu-HX","Iy76iO7gztne","x2yj2SwAXDLp","EOXQbXixiQcK","xpyP5t8Ht_pE","MuD_2vY7TI_8","mScdfR9hmjVu","xivLUsSGC4VF","sZAYhcdoXnm4","zmYbP-Gc1ojs","5rdQZm_71ojv","tApzvz_gK9lR","OJqkmkpsLCYC"],"name":"stem5_4_vec_backi2(0504).ipynb","toc_visible":true,"provenance":[],"machine_shape":"hm","authorship_tag":"ABX9TyNIlBwJ3840DaW9WFnHsqEG"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}