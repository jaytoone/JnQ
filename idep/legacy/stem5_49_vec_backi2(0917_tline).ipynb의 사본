{"cells":[{"cell_type":"code","execution_count":1,"metadata":{"id":"6rmQpzEGXfCw","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1663388849148,"user_tz":-540,"elapsed":19588,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"89d6e910-283d-4c92-ba00-f366fe8faa27"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')\n","\n","import os, sys\n","\n","current_path = '/content/drive/My Drive/Colab Notebooks/JnQ/'\n","\n","os.chdir(current_path)\n","\n","strat_pkg = 'IDE'\n","\n","mpl_finance_path = '/content/drive/My Drive/Colab Notebooks/JnQ/mpl_finance'\n","ta_lib_path = '/content/drive/My Drive/Colab Notebooks/JnQ/ta_lib'\n","\n","if mpl_finance_path not in sys.path:\n","\n","  try:\n","    sys.path.insert(0, '/content/drive/My Drive/Colab Notebooks/JnQ')\n","    sys.path.insert(0, '/content/drive/My Drive/Colab Notebooks/JnQ/{}'.format(strat_pkg))\n","    sys.path.insert(0, '/content/drive/My Drive/Colab Notebooks/JnQ/funcs')\n","    sys.path.insert(0, mpl_finance_path)\n","    sys.path.insert(0, ta_lib_path)\n","    \n","  except Exception as e:\n","    print(e)"]},{"cell_type":"markdown","metadata":{"id":"8uqYv5StTazo"},"source":["# requirements"]},{"cell_type":"code","execution_count":2,"metadata":{"id":"9qGt60DKTZmf","executionInfo":{"status":"ok","timestamp":1663388908829,"user_tz":-540,"elapsed":6009,"user":{"displayName":"7th June","userId":"08178289703395036410"}}},"outputs":[],"source":["# !pip install zigzag --target=$'/content/drive/My Drive/Colab Notebooks/JnQ/zigzag'\n","# !pip install talib-binary --target=$'/content/drive/My Drive/Colab Notebooks/JnQ/ta_lib'\n","# !pip install findiff\n","\n","# import nvstrings, nvcategory, cudf\n","# import cuml\n","# import cudf\n","\n","import os\n","import talib\n","from funcs.funcs_idep import *\n","from funcs.funcs_duration_v2 import *\n","from funcs.funcs_plot_check import *\n","from funcs.funcs_pairing import *\n","# from funcs.funcs_ide import *\n","# from funcs.funcs_indicator_candlescore import *\n","from funcs.funcs_indicator import *\n","from funcs.funcs_trader import *\n","from ast import literal_eval\n","import logging\n","import importlib\n","\n","import mpl_finance as mf\n","import matplotlib.pyplot as plt\n","from matplotlib import gridspec\n","# from zigzag import *\n","# from tqdm.notebook import tqdm\n","\n","# import IPython\n","# import IPython.display\n","\n","import numpy as np\n","# import jax.numpy as np\n","import pandas as pd\n","# import seaborn as sns\n","# import tensorflow as tf\n","# from scipy import stats, signal\n","\n","import pickle\n","import shutil\n","import json\n","from easydict import EasyDict\n","import copy\n","\n","import datetime\n","from datetime import datetime\n","import random\n","import time\n","# import warnings\n","\n","# warnings.simplefilter(\"ignore\", category=RuntimeWarning)\n","\n","np.seterr(invalid=\"ignore\")\n","np.set_printoptions(suppress=True)\n","np.set_printoptions(linewidth=2000) \n","\n","pd.set_option('mode.chained_assignment',  None)\n","\n","pd.set_option('display.max_rows', 500)\n","pd.set_option('display.max_columns', 500)\n","pd.set_option('display.width', 1000)"]},{"cell_type":"markdown","metadata":{"id":"Ic1mfmwWCIBu"},"source":["# makeset - with to_htf dataframes"]},{"cell_type":"markdown","metadata":{"id":"AUSBU7T8Suzi"},"source":["## sync_check_make"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"QmhLikYlSuzi"},"outputs":[],"source":["def sync_check_make(df):\n","\n","    make_itv_list = ['3T', '5T', '15T', '30T', 'H', '4H', 'D']\n","    offset_list = ['1h', '1h', '1h', '1h', '1h', '1h', '9h']\n","\n","    assert len(make_itv_list) == len(offset_list), \"length of itv & offset_list should be equal\"\n","        \n","    htf_df_list = [to_htf(df, itv_=itv_, offset=offset_) for itv_, offset_ in zip(make_itv_list, offset_list)]\n","\n","    df_3T, df_5T, df_15T, df_30T, df_H, df_4H, df_D = htf_df_list\n","\n","    for htf_df in htf_df_list:\n","      print(\"{} -> \".format(pd.infer_freq(htf_df.index)), htf_df.tail(1))\n","\n","    # heikinashi_v2(res_df_)\n","    # h_candle_v3(df, df_5T, '5T')\n","    # df = h_candle_v4(df, df_5T)\n","    # df = h_candle_v4(df, df_15T)\n","    # df = h_candle_v4(df, df_30T)\n","    # df = h_candle_v4(df, 'D')\n","\n","    # df = candle_pattern_pkg(df, df_5T)\n","    # df = candle_pattern_pkg(df, df_30T)\n","    # df = candle_pattern_pkg(df, df_H)\n","    # df = candle_pattern_pkg(df, df_4H)\n","    \n","    # --------------- stochastic --------------- #\n","    # df = stoch_v2(df)\n","    # df_5T['stoch'] = stoch(df_5T, 13, 3, 3)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf_v2(df, df_5T, [-1], backing_i=-1), columns=['stoch_5m']))\n","\n","    # print(\"stoch phase done\")\n","\n","    # --------------- ma --------------- #  \n","    # df = ma(df, 60)\n","    # print(\"ma phase done\")\n","\n","    # df = macd_hist(df, 5, 35, 15)\n","    # print(\"macd_hist phase done\")\n","    \n","    # df = enough_space(df, '15T', 1)\n","    \n","    # --------------- dc --------------- #  \n","    # dc_period = 20\n","    # df = donchian_channel_v4(df, dc_period)\n","    # df = dc_line(df, df_5T, '5T')  # join 사용시에만 return df 허용함\n","    # df = dc_line(df, df_15T, '15T')\n","    # df = dc_line_v2(df, df_H, 'H', dc_period=5)\n","\n","    # df = dc_line_v4(df, df, dc_period=10)\n","    # df = dc_line_v4(df, df, dc_period=20)\n","    # df = dc_line_v4(df, df, dc_period=100)\n","    # df = dc_line_v4(df, df_5T, dc_period=20)\n","    # df = dc_line_v4(df, df_15T, dc_period=20)\n","    # df = dc_line_v4(df, df_H, dc_period=20)\n","    # df = dc_line_v4(df, df_4H, dc_period=20)\n","    # print(\"dc phase done\")\n","\n","    # df_5T = cci_v2(df_5T, 20)\n","\n","    df_5T = tc_cci(df_5T, 20)\n","\n","    df = df.join(to_lower_tf_v2(df, df_5T, [-3, -2, -1]), how='inner')\n","\n","    # --------------- bb --------------- #  \n","    bb_period = 100\n","\n","    # upper, base, lower = talib.BBANDS(res_df_.close, timeperiod=20, nbdevup=1, nbdevdn=1, matype=0)\n","    \n","    # df = bb_width_v3(df, period=60, multiple=1)\n","    # df = bb_line(df, df_5T, '5T')\n","    \n","    # df = bb_line_v3(df, df_15T, 60)\n","    \n","    # df = bb_line_v3(df, df, bb_period)\n","    # df = bb_level_v2(df, 'T', bb_period)\n","    # print(\"bb phase done\")\n","\n","    c_itv = '5T'\n","\n","    # df =  wick_ratio(df, c_itv)\n","    # df =  wick_ratio(df, c_itv)\n","\n","    bb_itv= 'T'\n","\n","    # df = candle_range_ratio(df, c_itv, bb_itv, bb_period)\n","    # # candle_pumping_ratio(df, c_itv, bb_itv, bb_period)\n","\n","    dc_itv= '15T'\n","    dc_period = 4\n","    # df = candle_pumping_ratio_v2(df, c_itv, dc_itv, dc_period)\n","    # print(\"candle_pumping_ratio_v2 phase done\")\n","\n","    # df = dc_over_body_ratio(df, c_itv, dc_itv, dc_period)\n","    # print(\"dc_over_body_ratio phase done\")\n","\n","    # df = body_rel_ratio(df, c_itv)\n","    # print(\"body_rel_ratio phase done\")\n","\n","    # --------------- cbline --------------- #    \n","    # cloud_bline(df_3T, 20)\n","    # df = df.join(to_lower_tf_v2(df, df_3T, [-1]), how='inner')\n","    # # cloud_bline(df_5T, 20)\n","    # # df = df.join(to_lower_tf_v2(df, df_5T, [-1]), how='inner')\n","    # cloud_bline(df_15T, 20)\n","    # df = df.join(to_lower_tf_v2(df, df_15T, [-1]), how='inner')\n","    # cloud_bline(df_30T, 20)\n","    # df = df.join(to_lower_tf_v2(df, df_30T, [-1]), how='inner')\n","    # cloud_bline(df_H, 20)\n","    # df = df.join(to_lower_tf_v2(df, df_H, [-1]), how='inner')\n","    # cloud_bline(df_4H, 20)\n","    # df = df.join(to_lower_tf_v2(df, df_4H, [-1]), how='inner')\n","\n","    # print(\"cbline phase done\")\n","\n","\n","\n","    # --------------- sd_dc --------------- #\n","    # df = sd_dc(df, 20, 40)\n","    # df = sd_dc(df, 20, 20)\n","    # df = sd_dc(df_5T, 20, 40, df)\n","    # df = sd_dc(df_H, 20, 40, df)\n","\n","    # print(\"sd_dc phase done\")\n","\n","    # --------------- imb_ratio --------------- #\n","    # imb_ratio(df, '5T')\n","    # imb_ratio_v3(df, \"5T\")\n","    # imb_ratio_v4(df, \"5T\")\n","\n","    # imb_ratio(df, 'H')\n","    # imb_ratio_v2(df, '5T')\n","    \n","    # print(\"imb_ratio phase done\")\n","\n","    # --------------- rel_abs_ratio --------------- #\n","    # rel_abs_ratio(df, '5T', norm_period=120)\n","\n","    # --------------- normalize data --------------- #\n","    # itv = 'T'\n","    # lb_period = 15\n","    # target_col = 'close_{}{}'.format(itv, lb_period)\n","    # target_data = df['close'].diff(lb_period).to_numpy()\n","    # norm_data(df, target_data, target_col)    \n","    # print(\"normalize data phase done !\")\n","\n","    # --------------- lucid sar --------------- #\n","    # lucid_sar_v2(df)\n","    # lucid_sar_v2(df_3T)\n","    # df = df.join(to_lower_tf_v2(df, df_3T, [-2, -1]), how='inner')\n","    # lucid_sar_v2(df_5T)\n","    # df = df.join(to_lower_tf_v2(df, df_5T, [-2, -1]), how='inner')\n","    # lucid_sar_v2(df_15T)\n","    # df = df.join(to_lower_tf_v2(df, df_15T, [-2, -1]), how='inner')\n","    # lucid_sar_v2(df_30T)\n","    # df = df.join(to_lower_tf_v2(df, df_30T, [-2, -1]), how='inner')       \n","\n","    # print(\"sar phase done\")\n","\n","    # --------------- supertrend --------------- #\n","    # df = st_price_line(df, df_3T, '3m')\n","    # df = st_price_line(df, df_5T, '5m')\n","    # df = st_price_line(df, df_15T, '15m')\n","    # df = st_price_line(df, df_30T, '30m')\n","    # df = st_price_line(df, df_H, '1h')\n","    # df = st_price_line(df, df_4H, '4h')\n","\n","    # print(\"supertrend phase done\")\n","\n","    # --------------- rsi --------------- #  \n","    # df['rsi_1m'] = rsi(df, 14)    \n","    # df_5T['rsi_5m'] = rsi(df_5T, 14)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf_v2(df, df_5T, [-1]), columns=['rsi_5m']))\n","    \n","    # print(\"rsi phase done\")\n","\n","\n","    # --------------- cci --------------- #  \n","    # df['cci_1m'] = cci(df, 20)\n","\n","    # print(\"cci phase done\")\n","\n","    # --------------- ema --------------- #      \n","    # df_5T['ema_5m'] = ema(df_5T['close'], 195)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf_v2(df, df_5T, [-1]), columns=['ema_5m']))\n","    \n","    # print(\"ema phase done\")        \n","\n","\n","    return df\n"]},{"cell_type":"markdown","metadata":{"id":"mEKyVbHWSuzi"},"source":["## make & save res_df (concat 생각하면, timeindex sync 맞춰야함)"]},{"cell_type":"markdown","metadata":{"id":"VdukVo5-Suzj"},"source":["### old (xlsx)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"khKb9nhlSuzj"},"outputs":[],"source":["pd.set_option('display.max_rows', 500)\n","pd.set_option('display.max_columns', 500)\n","pd.set_option('display.width', 1000)\n","\n","\n","save_path = './candlestick_concated/res_df/'\n","\n","exist_list = os.listdir(save_path)\n","\n","\n","a_day = 3600 * 24\n","\n","for i in tqdm(range(len(file_list))):\n","\n","  keys = [file_list[i]]\n","\n","  # if 'neo'.upper() not in file_list[i]:\n","    # continue\n","\n","  # if '2021-04-30'.upper() not in file_list[i]:\n","  if '2021-07-01'.upper() not in file_list[i]:\n","  # if '2021-10-10'.upper() not in file_list[i]:\n","    continue\n","\n","\n","  for key in keys:      \n","\n","    # if 'eth'.upper() not in key:\n","    #   continue\n","\n","    excel_name = key.replace(\".xlsx\", \"_st1h_backi2.xlsx\")\n","    excel_path = save_path + excel_name\n","\n","    if excel_name in exist_list:\n","      print(excel_name, \"already exist !\")\n","      continue\n","    \n","    open_indexes = []\n","    \n","    df = pd.read_excel(date_path + key, index_col=0)\n","    second_df = pd.read_excel(date_path2 + key, index_col=0)\n","    third_df = pd.read_excel(date_path3 + key, index_col=0)\n","    fourth_df = pd.read_excel(date_path4 + key, index_col=0)\n","    fifth_df = pd.read_excel(date_path5 + key, index_col=0)\n","    \n","    print(df.index[[0, -1]])\n","    print(second_df.index[[0, -1]])\n","    print(third_df.index[[0, -1]])\n","    print(fourth_df.index[[0, -1]])\n","    print(fifth_df.index[[0, -1]])\n","\n","    open_indexes.append(df.index[0])\n","    open_indexes.append(second_df.index[0])\n","    open_indexes.append(third_df.index[0])\n","    open_indexes.append(fourth_df.index[0])\n","    open_indexes.append(fifth_df.index[0])\n","    \n","    try:\n","      #     Todo    #\n","      #      1. 1m 마지막 timeindex 의 date 기준, 08:59:59.999000 를 last timestamp 로 설정\n","      #      2. 시작 timestamp 는 모든 tf 의 가장 최근 시작 index,\n","      #       a. 1m 의 시작 timeindex 는 최소, htf 의 시작 timeindex 보다 interval 만큼 앞서야함\n","      #         i. 따라서 1m open_index, latest_open_index + 1d 를 하면 댐\n","      #           1. timestamp 으로 변환후 1day 를 더하고 datetime 으로 변환\n","      sixth_df = pd.read_excel(date_path6 + key, index_col=0)\n","      seventh_df = pd.read_excel(date_path7 + key, index_col=0)\n","\n","      print(sixth_df.index[[0, -1]])\n","      print(seventh_df.index[[0, -1]])\n","      print()\n","\n","      open_indexes.append(sixth_df.index[0])\n","      open_indexes.append(seventh_df.index[0])\n","\n","    except Exception as e:\n","      print(e)\n","\n","    latest_open_index = sorted(open_indexes)[-1]\n","    \n","    open_ts = datetime.timestamp(latest_open_index)\n","    latest_open_index_1m = datetime.fromtimestamp(open_ts + a_day)\n","\n","    #   str 로 만들어 접근하면 불가함  #\n","    end_index = pd.to_datetime(str(df.index[-1]).split(\" \")[0] + \" 08:59:59.999000\")\n","    # break\n","\n","    sliced_df = df.loc[latest_open_index_1m:end_index] # to_lower_tf 의 기준 ltf\n","    sliced_second_df = second_df.loc[latest_open_index:end_index]\n","    sliced_third_df = third_df.loc[latest_open_index:end_index]\n","    sliced_fourth_df = fourth_df.loc[latest_open_index:end_index]\n","    sliced_fifth_df = fifth_df.loc[latest_open_index:end_index]\n","\n","    print(\"sliced index\")\n","    print(sliced_df.index[[0, -1]])\n","    print(sliced_second_df.index[[0, -1]])\n","    print(sliced_third_df.index[[0, -1]])\n","    print(sliced_fourth_df.index[[0, -1]])\n","    print(sliced_fifth_df.index[[0, -1]])\n","\n","    try:\n","      sliced_sixth_df = sixth_df.loc[latest_open_index:end_index]\n","      sliced_seventh_df = seventh_df.loc[latest_open_index:end_index]\n","\n","      print(sliced_sixth_df.index[[0, -1]])\n","      print(sliced_seventh_df.index[[0, -1]])\n","\n","      res_df = sync_check(sliced_df, sliced_second_df, sliced_third_df, sliced_fourth_df, sliced_fifth_df, sliced_sixth_df, sliced_seventh_df)\n","    \n","    except:\n","      res_df = sync_check(sliced_df, sliced_second_df, sliced_third_df, sliced_fourth_df, sliced_fifth_df)\n","\n","\n","\n","    res_df.to_excel(excel_path)\n","    print(excel_name, \"saved succesfully !\")"]},{"cell_type":"markdown","metadata":{"id":"Bw5JibDKSuzj"},"source":["### xlsx to feather"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"VA-_gcA7Suzj"},"outputs":[],"source":["pd.set_option('display.max_rows', 500)\n","pd.set_option('display.max_columns', 500)\n","pd.set_option('display.width', 1000)\n","\n","\n","save_path = './candlestick_concated/res_df/'\n","\n","exist_list = os.listdir(save_path)\n","\n","\n","a_day = 3600 * 24\n","\n","for i in tqdm(range(len(file_list))):\n","\n","  keys = [file_list[i]]\n","\n","  # if 'neo'.upper() not in file_list[i]:\n","    # continue\n","\n","  # if '2021-04-30'.upper() not in file_list[i]:\n","  # if '2021-07-01'.upper() not in file_list[i]:\n","  if '2021-10-10'.upper() not in file_list[i]:\n","    continue\n","\n","\n","  for key in keys:      \n","\n","    # if 'eth'.upper() not in key:\n","    #   continue\n","\n","    feather_name = key.replace(\".xlsx\", \".ftr\")\n","    # feather_path = save_path + feather_name\n","\n","    if feather_name in exist_list:\n","      print(feather_name, \"already exist !\")\n","      continue\n","    \n","    open_indexes = []\n","    \n","    df = pd.read_excel(date_path + key, index_col=0)\n","    second_df = pd.read_excel(date_path2 + key, index_col=0)\n","    third_df = pd.read_excel(date_path3 + key, index_col=0)\n","    fourth_df = pd.read_excel(date_path4 + key, index_col=0)\n","    fifth_df = pd.read_excel(date_path5 + key, index_col=0)\n","    \n","    print(df.index[[0, -1]])\n","    print(second_df.index[[0, -1]])\n","    print(third_df.index[[0, -1]])\n","    print(fourth_df.index[[0, -1]])\n","    print(fifth_df.index[[0, -1]])\n","\n","    open_indexes.append(df.index[0])\n","    open_indexes.append(second_df.index[0])\n","    open_indexes.append(third_df.index[0])\n","    open_indexes.append(fourth_df.index[0])\n","    open_indexes.append(fifth_df.index[0])\n","    \n","    try:\n","      #     Todo    #\n","      #      1. 1m 마지막 timeindex 의 date 기준, 08:59:59.999000 를 last timestamp 로 설정\n","      #      2. 시작 timestamp 는 모든 tf 의 가장 최근 시작 index,\n","      #       a. 1m 의 시작 timeindex 는 최소, htf 의 시작 timeindex 보다 interval 만큼 앞서야함\n","      #         i. 따라서 1m open_index, latest_open_index + 1d 를 하면 댐\n","      #           1. timestamp 으로 변환후 1day 를 더하고 datetime 으로 변환\n","      sixth_df = pd.read_excel(date_path6 + key, index_col=0)\n","      seventh_df = pd.read_excel(date_path7 + key, index_col=0)\n","\n","      print(sixth_df.index[[0, -1]])\n","      print(seventh_df.index[[0, -1]])\n","      print()\n","\n","      open_indexes.append(sixth_df.index[0])\n","      open_indexes.append(seventh_df.index[0])\n","\n","    except Exception as e:\n","      print(e)\n","\n","\n","    df.reset_index().to_feather(date_path + feather_name, compression='lz4')\n","    second_df.reset_index().to_feather(date_path2 + feather_name, compression='lz4')\n","    third_df.reset_index().to_feather(date_path3 + feather_name, compression='lz4')\n","    fourth_df.reset_index().to_feather(date_path4 + feather_name, compression='lz4')\n","    fifth_df.reset_index().to_feather(date_path5 + feather_name, compression='lz4')\n","    sixth_df.reset_index().to_feather(date_path6 + feather_name, compression='lz4')\n","    seventh_df.reset_index().to_feather(date_path7 + feather_name, compression='lz4')\n","\n","    print(\"xlsx converted to feather !\")\n","    "]},{"cell_type":"markdown","metadata":{"id":"Pe0QpnORSuzk"},"source":["### add itv_name to ftr"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"M-gl30KxSuzk"},"outputs":[],"source":["save_path = './candlestick_concated/res_df/'\n","\n","# dir_path = \"bbdc3m_backi2\"\n","# date = '2021-10-10'\n","date = '2021-07-01'\n","\n","db_path = './candlestick_concated/database_bn/non_cum/%s/' % date\n","os.makedirs(os.path.join(db_path), exist_ok=True)\n","\n","# exist_list = os.listdir(os.path.join(save_path, dir_path))\n","# break\n","\n","\n","a_day = 3600 * 24\n","\n","for i in tqdm(range(len(file_list))):\n","\n","  keys = [file_list[i]]\n","\n","  # if 'neo'.upper() not in file_list[i]:\n","    # continue\n","\n","  if date not in file_list[i]:\n","    continue\n","\n","\n","  for key in keys:      \n","\n","    # if 'eth'.upper() not in key:\n","    #   continue\n","    # print(key)\n","    \n","    if \".ftr\" not in key:\n","      continue\n","        \n","    df = shutil.copy(date_path + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval))\n","    second_df = shutil.copy(date_path2 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval2))\n","    third_df = shutil.copy(date_path3 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval3))\n","    fourth_df = shutil.copy(date_path4 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval4))\n","    fifth_df = shutil.copy(date_path5 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval5))\n","    sixth_df = shutil.copy(date_path6 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval6))\n","    seventh_df = shutil.copy(date_path7 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval7))\n","\n","    print(\"copied to\" + db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval))\n"]},{"cell_type":"markdown","metadata":{"id":"4oZ1ohTtSuzk"},"source":["### feather ver. (database to res_df)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"vgVHpnUsSuzk"},"outputs":[],"source":["# db_path = './candlestick_concated/database_ub/' # upbit\n","db_path = './candlestick_concated/database_bn/'   # binance\n","\n","save_path = './candlestick_concated/res_df/'\n","\n","save_dir_path = \"bb1d_backi2\"\n","date = '2022-02-17'\n","\n","# concat_path = 'noncat' # 새로운 cols 를 기존 cum/concat 에 붙이려는 경우\n","concat_path = 'concat'\n","cum_path = \"cum\"\n","# cum_path = \"non_cum\"  # non_cum 으로 진행하는 경우, row concat 용도이기 때문에 noncat -> concat 으로 변경 (base cols 를 모두 담고 있음)\n","\n","load_path = os.path.join(db_path, cum_path, date)\n","save_path = os.path.join(save_path, save_dir_path, concat_path, cum_path, date)\n","\n","os.makedirs(save_path, exist_ok=True)\n","\n","file_list = os.listdir(load_path)\n","exist_list = os.listdir(save_path)\n","# break\n","\n","a_day = 3600 * 24\n","\n","for i in tqdm(range(len(file_list))):\n","\n","  keys = [file_list[i]]\n","\n","  # if 'neo'.upper() not in file_list[i]:\n","    # continue\n","\n","  if date not in file_list[i]:\n","    continue\n","\n","\n","  for key in keys:      \n","\n","    # if 'eth'.upper() not in key:\n","    #   continue\n","    # print(key)\n","    \n","    if \".ftr\" not in key:\n","      continue\n","\n","    if \"_1m\" not in key:\n","      continue\n","\n","    # feather_name = key.replace(\".ftr\", \"_%.ftr\" % save_dir_path)\n","    feather_name = key.replace(\"_1m\", \"\")\n","    feather_path = os.path.join(save_path, feather_name)\n","\n","    if feather_name in exist_list:\n","      print(feather_name, \"already exist !\")\n","      continue\n","    \n","    df = pd.read_feather(os.path.join(load_path, key), columns=None, use_threads=True).set_index(\"index\")\n","\n","    res_df = sync_check_make(df)\n","\n","    res_df.reset_index().to_feather(feather_path, compression='lz4')\n","    print(feather_path, \"saved succesfully !\")"]},{"cell_type":"markdown","metadata":{"id":"YxCPUzoyidwH"},"source":["#### just add col to loaded df"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":602},"executionInfo":{"elapsed":3433,"status":"ok","timestamp":1662649247695,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"odqVwQHpYo1M","outputId":"bb9eae01-c30f-42dc-9ec9-b653eab9d29d"},"outputs":[{"output_type":"stream","name":"stdout","text":["3T ->                          open     high      low    close\n","index                                                  \n","2022-04-27 08:45:00  2803.55  2803.97  2799.26  2800.43\n","5T ->                          open     high      low    close\n","index                                                  \n","2022-04-27 08:45:00  2803.55  2803.97  2799.26  2800.43\n","15T ->                          open     high      low    close\n","index                                                  \n","2022-04-27 08:45:00  2803.55  2803.97  2799.26  2800.43\n","30T ->                          open     high      low    close\n","index                                                  \n","2022-04-27 08:30:00  2783.61  2806.93  2780.79  2800.43\n","H ->                          open     high      low    close\n","index                                                  \n","2022-04-27 08:00:00  2819.33  2822.77  2761.27  2800.43\n","4H ->                          open    high      low    close\n","index                                                 \n","2022-04-27 05:00:00  2837.34  2855.0  2761.27  2800.43\n","D ->                          open    high      low    close\n","index                                                 \n","2022-04-26 09:00:00  3006.12  3043.0  2761.27  2800.43\n"]},{"output_type":"execute_result","data":{"text/plain":["                         dc_base_15T20  dc_upper_H20  dc_lower_H20  dc_base_H20  dc_upper_4H20  dc_lower_4H20  dc_base_4H20   cci_5T20 short_tc_5T20 long_tc_5T20\n","index                                                                                                                                                            \n","2022-04-27 08:41:59.999       2811.135        3020.4       2796.54      2908.47         3043.0         2791.3       2917.15 -69.312832         False        False\n","2022-04-27 08:42:59.999       2811.135        3020.4       2796.54      2908.47         3043.0         2791.3       2917.15 -69.312832         False        False\n","2022-04-27 08:43:59.999       2811.135        3020.4       2796.54      2908.47         3043.0         2791.3       2917.15 -69.312832         False        False\n","2022-04-27 08:44:59.999       2811.135        3020.4       2796.54      2908.47         3043.0         2791.3       2917.15 -69.312832         False        False\n","2022-04-27 08:45:59.999       2811.135        3020.4       2796.54      2908.47         3043.0         2791.3       2917.15 -54.076567         False        False"],"text/html":["\n","  <div id=\"df-a09336c2-d371-494d-885a-78aa17e8bc5a\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>dc_base_15T20</th>\n","      <th>dc_upper_H20</th>\n","      <th>dc_lower_H20</th>\n","      <th>dc_base_H20</th>\n","      <th>dc_upper_4H20</th>\n","      <th>dc_lower_4H20</th>\n","      <th>dc_base_4H20</th>\n","      <th>cci_5T20</th>\n","      <th>short_tc_5T20</th>\n","      <th>long_tc_5T20</th>\n","    </tr>\n","    <tr>\n","      <th>index</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2022-04-27 08:41:59.999</th>\n","      <td>2811.135</td>\n","      <td>3020.4</td>\n","      <td>2796.54</td>\n","      <td>2908.47</td>\n","      <td>3043.0</td>\n","      <td>2791.3</td>\n","      <td>2917.15</td>\n","      <td>-69.312832</td>\n","      <td>False</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>2022-04-27 08:42:59.999</th>\n","      <td>2811.135</td>\n","      <td>3020.4</td>\n","      <td>2796.54</td>\n","      <td>2908.47</td>\n","      <td>3043.0</td>\n","      <td>2791.3</td>\n","      <td>2917.15</td>\n","      <td>-69.312832</td>\n","      <td>False</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>2022-04-27 08:43:59.999</th>\n","      <td>2811.135</td>\n","      <td>3020.4</td>\n","      <td>2796.54</td>\n","      <td>2908.47</td>\n","      <td>3043.0</td>\n","      <td>2791.3</td>\n","      <td>2917.15</td>\n","      <td>-69.312832</td>\n","      <td>False</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>2022-04-27 08:44:59.999</th>\n","      <td>2811.135</td>\n","      <td>3020.4</td>\n","      <td>2796.54</td>\n","      <td>2908.47</td>\n","      <td>3043.0</td>\n","      <td>2791.3</td>\n","      <td>2917.15</td>\n","      <td>-69.312832</td>\n","      <td>False</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>2022-04-27 08:45:59.999</th>\n","      <td>2811.135</td>\n","      <td>3020.4</td>\n","      <td>2796.54</td>\n","      <td>2908.47</td>\n","      <td>3043.0</td>\n","      <td>2791.3</td>\n","      <td>2917.15</td>\n","      <td>-54.076567</td>\n","      <td>False</td>\n","      <td>False</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a09336c2-d371-494d-885a-78aa17e8bc5a')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-a09336c2-d371-494d-885a-78aa17e8bc5a button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-a09336c2-d371-494d-885a-78aa17e8bc5a');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":20}],"source":["res_df_ = sync_check_make(res_df_)  # suffix duplication 유의\n","res_df_.tail().iloc[:, -10:]\n","# res_df_.dtypes"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"3SKglsQCj5_x"},"outputs":[],"source":["test_df_ = sync_check_make(res_df_.iloc[-4000:])  # suffix duplication 유의\n","test_df_.tail().iloc[:, -10:]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"gOQxwYqK0jCS"},"outputs":[],"source":["# ------ validation ------ #\n","# res_df_.cppr_15T.describe()\n","print((res_df_.open_15T.to_numpy() - res_df_.close_15T.to_numpy())[-10:])\n","print((res_df_.dc_upper_15T4.to_numpy() - res_df_.dc_lower_15T4.to_numpy())[-10:])"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"RmiB5VU5DN6B"},"outputs":[],"source":["# np.where(res_df_.CDL3LINESTRIKE_15T) #.iloc[-1000:,]\n","\n","# CDL3LINESTRIKE = talib.CDL3LINESTRIKE(df_15T.open, df_15T.high, df_15T.low, df_15T.close)\n","for col in talib.get_function_groups()['Pattern Recognition']:  \n","  print(np.unique(res_df_[col + '_15T'].to_numpy(), return_counts=True))\n","\n","# CDLCLOSINGMARUBOZU = talib.CDLCLOSINGMARUBOZU(df_15T.open, df_15T.high, df_15T.low, df_15T.close)\n","# print(np.unique(CDLCLOSINGMARUBOZU.to_numpy(), return_counts=True))\n","# print(CDLCLOSINGMARUBOZU.tail(50))"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":2745,"status":"ok","timestamp":1662649314828,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"XrgJPQRuisCa","outputId":"4852a9a5-f5cd-4678-922a-329b53d7e944"},"outputs":[{"output_type":"stream","name":"stdout","text":["./candlestick_concated/database_bn/cum/2022-04-27/2022-04-27 ETHUSDT_1m.ftr saved !\n"]}],"source":["# ------------ save current res_df ------------ #\n","ftr_path = os.path.join(save_path.replace(\"res_df\", \"database_bn\"), \"cum\", date)\n","ftr_full_path = os.path.join(ftr_path, key)\n","\n","res_df_.reset_index().to_feather(ftr_full_path, compression='lz4')  # key 잘 확인하고 저장\n","print(ftr_full_path, 'saved !')"]},{"cell_type":"markdown","metadata":{"id":"E0n53hflJbnp"},"source":["### htf candle check"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"6xW0yugCWvGz"},"outputs":[],"source":["itv_list = ['3T', '5T', '15T', '30T', '1H', '4H']\n","comp_df_list = [second_df, third_df, fourth_df, fifth_df, sixth_df, seventh_df]\n","offset_list = ['1h', '2min', '2min', '2min', '2min', '2min']\n","# itv_list = ['4H']\n","# comp_df_list = [seventh_df]\n","\n","slice_len = 100\n","for itv_, comp_df_, offset in zip(itv_list, comp_df_list, offset_list):\n","\n","  print(\"itv_ :\", itv_)\n","\n","  # df = h_candle_v2(df, '3T')\n","  # end_ts = \n","  h_res_df = df.resample(itv_, offset=offset).agg({\n","          'open': 'first',\n","          'high': 'max',\n","          'low': 'min',\n","          'close': 'last'\n","      })\n","\n","  #   앞은 길이가 다르고, 뒤에서부터 잘라서 비교    #\n","  #   last_row 빼고는 동일, 4h 제외\n","  # print(df.tail())\n","  print(h_res_df.tail())\n","  print(comp_df_.tail())\n","  # # print(h_res_df.head())\n","  # # print(second_df.head())\n","\n","  # print(len(h_res_df))\n","  # print(len(second_df))\n","\n","  # print(h_res_df.values[-slice_len:])\n","  # print(second_df.iloc[:, :4].values[-slice_len:])\n","  # print(np.argwhere(h_res_df.values[-slice_len:] != comp_df_.iloc[:, :4].values[-slice_len:]))\n","  # print()\n","  break"]},{"cell_type":"markdown","metadata":{"id":"jTN3M842Suzl"},"source":["## concat & save new res_df"]},{"cell_type":"markdown","metadata":{"id":"MlFkpO1MSuzl"},"source":["### old (xlsx)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"U-3QkfbFSuzl"},"outputs":[],"source":["save_path = './candlestick_concated/res_df/'\n","\n","dict_name = \"2021-07-01 ETHUSDT_bb15m_backi2_res_dfs.pkl\"\n","\n","#     load with pickle    #\n","with open(save_path + dict_name, 'rb') as f:\n","  saved_res_df_dict = pickle.load(f)\n","\n","print(dict_name, \"loaded !\")\n","res_df_files = os.listdir(save_path)\n","res_df_files.reverse()\n","\n","print(res_df_files)\n","\n","res_df_dict = {}\n","\n","base_postfix = '_bb15m_backi2.xlsx'\n","new_postfix = '_st1h_backi2.xlsx'\n","\n","max_cnt = 10\n","sample_cnt = max_cnt\n","\n","for k_i, key in enumerate(res_df_files):\n","\n","  if '2021-07-01'.upper() not in key:\n","  # if '2021-10-10'.upper() not in key:\n","    continue\n","\n","  # if \"link\".upper() not in key:\n","  # if \"btc\".upper() not in key:\n","  #   continue\n","\n","  if new_postfix not in key:\n","    continue\n","\n","  # if key in \n","\n","  if sample_cnt == max_cnt:\n","    dict_name = \"%s_res_dfs.pkl\" % key.split(\".\")[0]\n","    print(\"dict_name :\", dict_name)\n","\n","  base_df = saved_res_df_dict[key.replace(new_postfix, base_postfix)]\n","  # base_df = pd.read_excel(save_path + key.replace(new_postfix, base_postfix), index_col=0)  \n","  res_df = pd.read_excel(save_path + key, index_col=0)  \n","\n","  # print(base_df.head())\n","  # print(res_df.head())\n","  # break\n","\n","  new_res_df = pd.concat([base_df, res_df], axis=1) # df_tot.drop_duplicates()\n","  # new_res_df.head()\n","\n","  droped_new_res_df = new_res_df.loc[:,~new_res_df.columns.duplicated(keep='last')]\n","  droped_new_res_df.head()\n","  # break\n","\n","  # res_df_dict[key] = res_df\n","  res_df_dict[key] = droped_new_res_df\n","  print(key, \"saved to dict !\")\n","\n","  #     save with pickle    #\n","  with open(save_path + dict_name, 'wb') as f:\n","    pickle.dump(res_df_dict, f)\n","\n","  sample_cnt -= 1\n","\n","  if sample_cnt <= 0:\n","    break\n"]},{"cell_type":"markdown","metadata":{"id":"t1E_eAyPSuzm"},"source":["### new col to latest feather (1m_indi. only)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"xyI5NrM7Suzm"},"outputs":[],"source":["save_path = './candlestick_concated/res_df/'\n","\n","cum_dir = \"cum\"\n","\n","new_dir_path = \"rsi_backi2\"\n","base_dir_path = \"bbdc3m_backi2\"\n","\n","new_date = '2021-11-17'\n","\n","\n","\n","#     load ftr list    #\n","base_save_path = os.path.join(save_path, base_dir_path, \"concat/cum\", new_date)\n","new_save_path = base_save_path.replace(base_dir_path, new_dir_path)\n","\n","#     save to (new) cum dir    #\n","#      1. if dir. not exists, makedir\n","os.makedirs(new_save_path, exist_ok=True)\n","\n","ftr_list = [s for s in os.listdir(base_save_path) if \"ftr\" in s]\n","print(ftr_list)\n","# break\n","\n","\n","max_cnt = 10\n","sample_cnt = max_cnt\n","\n","for key in ftr_list:\n","\n","  if new_date not in key:\n","    continue\n","\n","\n","  #       read from base postfix's directory    #\n","  base_df = pd.read_feather(os.path.join(base_save_path, key), columns=None, use_threads=True).set_index(\"index\")\n","  # print(base_df.head())\n","  # print(res_df.head())\n","  # break\n","\n","  droped_new_res_df = sync_check(base_df)\n","\n","  # new_res_df = pd.concat([base_df, res_df], axis=0) # df_tot.drop_duplicates()\n","  # # new_res_df.head()\n","\n","  # intersection_cols = res_df.columns.intersection(base_df.columns)\n","\n","  # droped_new_res_df = new_res_df.loc[~new_res_df.index.duplicated(keep='last'),intersection_cols]\n","  # droped_new_res_df = new_res_df.loc[:,~new_res_df.columns.duplicated(keep='last')]\n","  # droped_new_res_df = new_res_df.loc[:,~new_res_df.index.duplicated(keep='last')]\n","  # droped_new_res_df.head()\n","  # break\n","\n","  droped_new_res_df.reset_index().to_feather(os.path.join(new_save_path, key), compression='lz4')\n","\n","  print(os.path.join(new_save_path, key), \"saved !\")\n","\n","  # sample_cnt -= 1\n","\n","  # if sample_cnt <= 0:\n","  #   break\n"]},{"cell_type":"markdown","metadata":{"id":"nUs4fjVHSuzl"},"source":["### feather ver. (col concat)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"6cu-Y82iSuzl"},"outputs":[],"source":["new_dir_path = \"st3m_backi2\"\n","base_dir_path = \"bb1d_backi2\"\n","\n","# new_date = \"2021-11-17\"\n","new_date = \"2022-01-10\"\n","\n","#     save to (new) concat dir    #\n","#      1. if dir. not exists, makedir\n","save_path = './candlestick_concated/res_df/'\n","save_path = os.path.join(save_path, new_dir_path, \"concat/cum\", new_date)   \n","# save_path = os.path.join(save_path, new_dir_path, \"concat/non_cum\", new_date)   # row col 하려면 concat 맞음, noncum 사용\n","os.makedirs(save_path, exist_ok=True)\n","\n","\n","#     load ftr list    #\n","# ftr_list = [s for s in os.listdir(os.path.join(save_path, new_dir_path)) if \"ftr\" in s]\n","\n","noncat_path = save_path.replace(\"concat/\", \"noncat/\")\n","ftr_list = [s for s in os.listdir(noncat_path) if \"ftr\" in s]\n","print(ftr_list)\n","# break\n","\n","\n","for key in ftr_list:\n","\n","  if new_date not in key:\n","    continue\n","\n","  try:\n","\n","    #       read from base postfix's directory    #\n","    base_df = pd.read_feather(os.path.join(save_path.replace(new_dir_path, base_dir_path), key), columns=None, use_threads=True).set_index(\"index\")\n","    res_df = pd.read_feather(os.path.join(noncat_path, key), columns=None, use_threads=True).set_index(\"index\")\n","\n","    # print(base_df.head())\n","    # print(res_df.head())\n","    # break\n","\n","    new_res_df = pd.concat([base_df, res_df], axis=1) # df_tot.drop_duplicates()\n","    # new_res_df.head()\n","\n","    droped_new_res_df = new_res_df.loc[:,~new_res_df.columns.duplicated(keep='last')]\n","    # droped_new_res_df.head()\n","    # break\n","\n","    droped_new_res_df.reset_index().to_feather(os.path.join(save_path, key), compression='lz4')\n","\n","    # res_df_dict[key] = res_df\n","    # res_df_dict[key] = droped_new_res_df\n","    print(os.path.join(save_path, key), \"saved !\")\n","  \n","  except Exception as e:\n","    print(\"error occured ! :\", e)\n","  \n","\n","  # sample_cnt -= 1\n","\n","  # if sample_cnt <= 0:\n","  #   break\n"]},{"cell_type":"markdown","metadata":{"id":"WVAKq3i8Suzm"},"source":["### feather ver. (row concat) , database cum 도 호환가능"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"XG2p9OhhSuzm"},"outputs":[],"source":["# save_path = './candlestick_concated/res_df/'        # cols 추가된 cum db 에 new_row's cols 기준으로 합치는 경우\n","save_path = './candlestick_concated/database_bn/'   # ohlcv cum db 만들 경우\n","\n","base_date = '2022-04-25'\n","# new_date = '2022-02-17'\n","new_date = '2022-04-27'\n","\n","# ------ load ftr list ------ #\n","if \"database\" in save_path:\n","  base_dir_path = \"\"\n","  new_dir_path = \"\"\n","  concat_dir = \"\"\n","else:\n","  base_dir_path = \"sar_backi2\"\n","  new_dir_path = \"bb4h_backi2\"  # dir_path 가 base / new 서로 달라질 수 있어서 분할함\n","  concat_dir = \"concat\"\n","\n","base_date_path = os.path.join(save_path, base_dir_path, concat_dir, \"cum\", base_date)      # 기존 cum db 와 new_date db 를 cum 진행\n","# base_date_path = os.path.join(save_path, base_dir_path, concat_dir, \"non_cum\", base_date)    # non_cum db 와 new_date db 를 cum 진행\n","\n","# new_date_path = os.path.join(save_path, new_dir_path, concat_dir, \"cum\", new_date)      # 상황별로 직접 선택해야할 듯\n","new_date_path = os.path.join(save_path, new_dir_path, concat_dir, \"non_cum\", new_date)\n","\n","\n","\n","# ------ save to (new) concat dir ------ #\n","#      1. if dir. not exists, makedir\n","save_path = new_date_path.replace(\"non_cum\", \"cum\")   # non_cum 아니여도 무관\n","os.makedirs(save_path, exist_ok=True)   # noncat / concat 두가지 경우 존재가능할 것\n","# os.makedirs(os.path.join(save_path, dir_path, \"noncat/cum\", new_date), exist_ok=True)\n","\n","\n","ftr_list = [s for s in os.listdir(new_date_path) if \"ftr\" in s]\n","exist_list = os.listdir(save_path)\n","print(ftr_list)\n","# break\n","\n","\n","for key in ftr_list:\n","\n","  if new_date not in key:   # date rejection\n","    continue\n","  if '1m' not in key:  # itv rejection\n","    continue\n","\n","  # if key in exist_list:\n","  #   print(key, \"already exist !\")\n","  #   continue\n","\n","  #       read from base postfix's directory    #\n","  base_df = pd.read_feather(os.path.join(base_date_path, key.replace(new_date, base_date)), columns=None, use_threads=True).set_index(\"index\")   # key 에 new_date 담겨있음\n","  res_df = pd.read_feather(os.path.join(new_date_path, key), columns=None, use_threads=True).set_index(\"index\")\n","\n","  # print(base_df.head())\n","  # print(res_df.head())\n","  # break\n","\n","  new_res_df = pd.concat([base_df, res_df], axis=0) # df_tot.drop_duplicates()\n","  # new_res_df.head()\n","\n","  intersection_cols = res_df.columns.intersection(base_df.columns)\n","\n","  droped_new_res_df = new_res_df.loc[~new_res_df.index.duplicated(keep='last'),intersection_cols]\n","  # droped_new_res_df = new_res_df.loc[:,~new_res_df.columns.duplicated(keep='last')]\n","  # droped_new_res_df = new_res_df.loc[:,~new_res_df.index.duplicated(keep='last')]\n","  # droped_new_res_df.head()\n","  # break  \n","  \n","  print(droped_new_res_df.iloc[[0, -1]])  \n","\n","  # ------------- verify df continuity directly itv by itv ------------- #\n","  true_continue = True\n","  if \"_\" in key:\n","\n","    # interval = key.split(\".\")[0].split(\"_\")[-1] \n","    # itv_num = to_itvnum(interval)\n","\n","    # verified_df = consecutive_df(droped_new_res_df, to_itvnum(interval))\n","    # verified_df.reset_index().to_feather(os.path.join(save_path, key), compression='lz4')\n","\n","    # res_df_dict[key] = res_df\n","    # res_df_dict[key] = droped_new_res_df  \n","\n","    np_idx_ts = np.array(list(map(lambda x: datetime.timestamp(x), droped_new_res_df.index)))\n","    ideal_ts_gap = 60 # * itv_num\n","\n","    for ts_i in range(len(np_idx_ts)):\n","      \n","      if ts_i != 0:\n","        ts_gap = np_idx_ts[ts_i] - np_idx_ts[ts_i - 1]\n","        if ts_gap > ideal_ts_gap or ts_gap < ideal_ts_gap:\n","        # if ts_gap == ideal_ts_gap:\n","          print(droped_new_res_df.index[ts_i - 1])\n","          print(droped_new_res_df.index[ts_i])\n","          # print(ts_gap)\n","          print(\"------------------ unideal ts_gap ------------------\")\n","          true_continue = False\n","\n","    print(\"continuity checked !\")\n","\n","  if true_continue:\n","    droped_new_res_df.reset_index().to_feather(os.path.join(save_path, key), compression='lz4')\n","\n","  print(os.path.join(save_path, key), \"saved !\")\n","  \n"]},{"cell_type":"markdown","metadata":{"id":"L7l5CTJfSuzn"},"source":["### check continuity"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"w-5jn9opBl73"},"outputs":[],"source":["droped_new_res_df = res_df_"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"nGzMGyC3Suzn"},"outputs":[],"source":["# print(droped_new_res_df.columns)\n","\n","print(droped_new_res_df.iloc[[0, -1]])\n","\n","np_idx_ts = np.array(list(map(lambda x: datetime.timestamp(x), droped_new_res_df.index)))\n","\n","print(np_idx_ts[:10])\n","for ts_i in range(len(np_idx_ts)):\n","  \n","  if ts_i != 0:\n","    ts_gap = np_idx_ts[ts_i] - np_idx_ts[ts_i - 1]\n","\n","    if ts_gap > 60 or ts_gap < 60:\n","\n","      print(\"invalid ts_gap found !\")\n","    # if ts_gap == 60:\n","      print(droped_new_res_df.index[ts_i - 1])\n","      print(droped_new_res_df.index[ts_i])\n","      # print(ts_gap)\n","      print()\n"]},{"cell_type":"markdown","metadata":{"id":"x_XGJqBi8Jex"},"source":["### check length of front missing value + middle_data non_missing validity"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"yRNwqVeAu8X8"},"outputs":[],"source":["#       1. new_date 의 시작 timeidx 와 base_date end timeidx 의 최소 days' gap     #\n","#       2. new_date 의 시작 부분 indi. value 는 np.nan 으로 채워질 거기 때문에 계산해야함    #\n","\n","df_count = droped_new_res_df.count()\n","len_missing = df_count.max() - df_count.min()\n","print(len_missing / 1440)\n","\n","#       3. \n","missing_sliced_df = droped_new_res_df.iloc[len_missing:]\n","df_count2 = missing_sliced_df.count()\n","# print(df_count2)\n","print((df_count2.max() - df_count2.min()))    # this value should be zero !\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"AY7E2_hTBsyM"},"outputs":[],"source":["# df_count2.index[df_count2.argmin()]\n","# missing_sliced_df.head(5)\n","\n","stay_missed = np.sum(pd.isnull(missing_sliced_df), axis=0)\n","print(stay_missed)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"p9yqewOw9g33"},"outputs":[],"source":["stay_missed_cols = stay_missed[stay_missed != 0].index\n","\n","for sm_col in stay_missed_cols:\n","  \n","  row_idx = np.argwhere(pd.isnull(missing_sliced_df[sm_col].values))\n","\n","  plt.figure(figsize=(3,3))\n","  plt.plot(row_idx)\n","  plt.ylim(0, len(missing_sliced_df))\n","  plt.title(sm_col)\n","\n","  plt.show()\n"]},{"cell_type":"markdown","metadata":{"id":"MSUY4nnku3s9"},"source":["## legacy"]},{"cell_type":"markdown","metadata":{"id":"epgS5Dksu-HX"},"source":["### mv files"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"aJcVpEdrslA5"},"outputs":[],"source":["df_path = './candlestick_concated/survey_df_v2'\n","files_ = os.listdir(df_path)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"cEKyEYkotFDy"},"outputs":[],"source":["dirs = [file_ for file_ in files_ if not file_.endswith('.ftr')]\n","files = [file_ for file_ in files_ if file_.endswith('.ftr')]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"IgM79tcxtPVZ"},"outputs":[],"source":["dirs"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"M767iRtwtRQP"},"outputs":[],"source":["def move_fn(dir_, file_):\n","  src_path = os.path.join(df_path, file_)\n","  dst_path = os.path.join(df_path, dir_, file_)\n","  shutil.move(src_path, dst_path)\n","  print(\"moved to {}\".format(dst_path))\n","\n","_ = [move_fn('2022-01-10 ETHUSDT_all', file_) for file_ in files if 'eth'.upper() in file_]\n","# sols\n"]},{"cell_type":"markdown","metadata":{"id":"Iy76iO7gztne"},"source":["### move legacy files"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"hMRht32Czwry"},"outputs":[],"source":["# print()\n","cur_dir_list = os.listdir('.')\n","for f in cur_dir_list:\n","  if 'legacy' in f :\n","    # print(f)\n","    if os.path.isdir(current_path + f,):\n","      continue\n","\n","    shutil.move(current_path + f, current_path + 'legacy/' + f)\n","    print(\"moved to\" + current_path + 'legacy/' +  f)"]},{"cell_type":"markdown","metadata":{"id":"5duWn8t4BRyv"},"source":["# IDE platform\n"]},{"cell_type":"markdown","metadata":{"id":"6HOjnZjSgzk1"},"source":["## load ftr_list"]},{"cell_type":"code","execution_count":3,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":4461,"status":"ok","timestamp":1663388970785,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"7FPBG5Qqg2jB","outputId":"802f83a9-2498-4d93-9880-48c86c5ba2bf"},"outputs":[{"output_type":"stream","name":"stdout","text":["['2022-04-27 ETHUSDT_1m.ftr']\n","2022-04-27 ETHUSDT_1m.ftr loaded !\n","load res_df_ elapsed time : 3.5588738918304443\n"]}],"source":["save_path = './candlestick_concated/database_bn/'\n","\n","# dir_path = \"bb1d_backi2\"\n","# date = \"2022-02-17\"\n","# ftr_path = os.path.join(save_path, dir_path, \"concat/cum\", date)\n","\n","# ------ 1T_database ------ #\n","# date = \"2022-04-27\"\n","# ftr_path = os.path.join(save_path, \"non_cum\", date)\n","\n","date = \"2022-04-27\"\n","# date = \"2022-02-17\"\n","ftr_path = os.path.join(save_path, \"cum\", date)\n","\n","# ------ load ftr list ------ #\n","ftr_list = [s for s in os.listdir(ftr_path) if \"ftr\" in s if date in s]\n","print(ftr_list)\n","\n","start_0 = time.time()\n","key = ftr_list[0]  # tempoaray use single key\n","res_df_ = pd.read_feather(os.path.join(ftr_path, key), columns=None, use_threads=True).set_index(\"index\")\n","# print(res_df_.head())\n","print(key, \"loaded !\")\n","print(\"load res_df_ elapsed time :\", time.time() - start_0)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"RQH_l4opEh_O"},"outputs":[],"source":["res_df_.dtypes\n","# res_df_.index[[0, -1]]"]},{"cell_type":"markdown","metadata":{"id":"x2yj2SwAXDLp"},"source":["### edit cols"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"x9wkWw15XCAm","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1662649235837,"user_tz":-540,"elapsed":629,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"fe8f88bc-7e54-4d36-b469-0053db82740a"},"outputs":[{"output_type":"stream","name":"stdout","text":["['cci_5T20']\n"]}],"source":["col_list = list(res_df_.columns)\n","\n","# ------ check target cols ------ #\n","print([col_ for col_ in col_list if 'cci_5T' in col_])\n","\n","# ------ drop ------ #\n","# res_df_.drop([col_ for col_ in col_list if 'open_15T' in col_], inplace=True, axis=1)\n","res_df_.drop([col_ for col_ in col_list if 'cci_5T' in col_], inplace=True, axis=1)\n","# res_df_.drop([col_ for col_ in col_list if '_T40' in col_], inplace=True, axis=1)\n","# res_df_.drop([col_ for col_ in col_list if 'long_base' in col_], inplace=True, axis=1)\n","# res_df_.drop([col_ for col_ in col_list[5:]], inplace=True, axis=1)\n","\n","# ------ replace ------ #\n","# for c_i, col_ in enumerate(col_list):\n","#   if 'basis' in col_:\n","# #   # if col_[-1] in ['m', 'h', 'd', 'H'] and '_' in col_:eTa_5T\n","# #   # if col_[0] in ['h'] and '_' in col_:\n","# #   if 'bir_' in col_:\n","\n","#     col_list[c_i] = col_.replace('basis', 'base')\n","# #     # col_list[c_i] = col_.replace('m', 'T').replace('h', 'H').replace('1T', 'T')\n","# #     # col_list[c_i] = col_.replace('1d', 'D')\n","# #     # col_list[c_i] = col_.replace('eTa_5T', 'ema_5T')\n","# #     # col_list[c_i] = col_list[c_i][1:]\n","# #     # print(col_list[c_i][0])\n","# res_df_.columns = col_list\n","# col_list[-2:] = ['resi_T', 'sup_T']"]},{"cell_type":"markdown","metadata":{"id":"14chOHeXh6JD"},"source":["### lab"]},{"cell_type":"markdown","metadata":{"id":"O87s8_EUakqS"},"source":["#### instant indi."]},{"cell_type":"code","source":["def get_wave_time_ratio(res_df, wave_itv1, wave_period1):\n","\n","  wave_cu_post_idx_fill_ = res_df['wave_cu_post_idx_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy().astype(int)\n","  wave_co_post_idx_fill_ = res_df['wave_co_post_idx_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy().astype(int)\n","\n","  wave_cu_idx_fill_ = res_df['wave_cu_idx_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy().astype(int)\n","  wave_co_idx_fill_ = res_df['wave_co_idx_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy().astype(int)\n","\n","  wave_valid_cu_post_idx_fill_ = np.where(wave_cu_post_idx_fill_ < 0, 0, wave_cu_post_idx_fill_)\n","  wave_valid_co_post_idx_fill_ = np.where(wave_co_post_idx_fill_ < 0, 0, wave_co_post_idx_fill_)\n","\n","  wave_valid_cu_idx_fill_ = np.where(wave_cu_idx_fill_ < 0, 0, wave_cu_idx_fill_)\n","  wave_valid_co_idx_fill_ = np.where(wave_co_idx_fill_ < 0, 0, wave_co_idx_fill_)\n","\n","  res_df['short_wave_time_ratio_{}{}'.format(wave_itv1, wave_period1)] = (wave_valid_co_post_idx_fill_ - wave_valid_cu_post_idx_fill_[wave_valid_co_post_idx_fill_[wave_valid_cu_idx_fill_]]) / (wave_valid_cu_idx_fill_ - wave_valid_co_post_idx_fill_)\n","  res_df['long_wave_time_ratio_{}{}'.format(wave_itv1, wave_period1)] = (wave_valid_cu_post_idx_fill_ - wave_valid_co_post_idx_fill_[wave_valid_cu_post_idx_fill_[wave_valid_co_idx_fill_]]) / (wave_valid_co_idx_fill_ - wave_valid_cu_post_idx_fill_)\n","\n","  return res_df"],"metadata":{"id":"Fg4JnLY6i99D"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def wave_range_cci_v4_1(t_df, wave_period):\n","    t_df = cci_v2(t_df, wave_period)\n","    itv = pd.infer_freq(t_df.index)\n","\n","    cci_ = t_df['cci_{}{}'.format(itv, wave_period)].to_numpy()\n","    b1_cci_ = t_df['cci_{}{}'.format(itv, wave_period)].shift(1).to_numpy()\n","\n","    baseline = 0\n","    band_width = 100\n","    upper_band = baseline + band_width\n","    lower_band = baseline - band_width\n","\n","    data_cols = ['open', 'high', 'low', 'close']\n","    ohlc_list = [t_df[col_].to_numpy() for col_ in data_cols]\n","    open, high, low, close = ohlc_list\n","\n","    # ============ modules ============ #\n","    # ------ define co, cu ------ # <- point missing 과 관련해 정교해아함\n","    cu_bool = (b1_cci_ > upper_band) & (upper_band > cci_)\n","    co_bool = (b1_cci_ < lower_band) & (lower_band < cci_)\n","\n","    return wave_publics_v2(t_df, cu_bool, co_bool, ohlc_list, wave_period)"],"metadata":{"id":"XkrbzNFKZhl0"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def wave_publics_v2(t_df, cu_bool, co_bool, ohlc_list, wave_period):\n","    itv = pd.infer_freq(t_df.index)\n","\n","    len_df = len(t_df)\n","    len_df_range = np.arange(len_df).astype(int)\n","\n","    cu_idx = get_index_bybool(cu_bool, len_df_range)\n","    co_idx = get_index_bybool(co_bool, len_df_range)\n","\n","    open, high, low, close = ohlc_list\n","\n","    cu_fill_idx, co_fill_idx, cu_prime_idx, co_prime_idx, cu_prime_fill_idx, co_prime_fill_idx, valid_cu_bool, valid_co_bool = get_terms_info_v4(\n","        cu_idx, co_idx, len_df, len_df_range)\n","    # cu_fill_idx, co_fill_idx, cu_prime_idx, co_prime_idx, cu_prime_fill_idx, co_prime_fill_idx, \\\n","    #   cu_post_idx, co_post_idx, cu_post_fill_idx, co_post_fill_idx, valid_cu_bool, valid_co_bool = get_terms_info_v5(cu_idx, co_idx, len_df, len_df_range)\n","\n","    # ------ get post_terms ------ #\n","    high_post_terms = np.vstack((co_fill_idx[valid_cu_bool], cu_idx[valid_cu_bool])).T.astype(int)\n","    low_post_terms = np.vstack((cu_fill_idx[valid_co_bool], co_idx[valid_co_bool])).T.astype(int)\n","\n","    high_post_terms_cnt = high_post_terms[:, 1] - high_post_terms[:, 0]\n","    low_post_terms_cnt = low_post_terms[:, 1] - low_post_terms[:, 0]\n","\n","    # ------ get post_idx ------ #\n","    paired_cu_post_idx = high_post_terms[:, 1]  # Todo, 여기는 cross_idx (위에서 vstack 으로 cross_idx 입력함)\n","    paired_co_post_idx = low_post_terms[:, 1]\n","\n","    cu_post_idx = np.full(len_df, np.nan)  # --> Todo, unavailable : not cross_idx\n","    co_post_idx = np.full(len_df, np.nan)\n","\n","    cu_post_idx[paired_cu_post_idx] = paired_cu_post_idx\n","    co_post_idx[paired_co_post_idx] = paired_co_post_idx\n","\n","    cu_post_fill_idx = fill_arr(cu_post_idx)\n","    co_post_fill_idx = fill_arr(co_post_idx)\n","\n","    # ------ get prime_terms ------ # # 기본은 아래 logic 으로 수행하고, update_hl 도 해당 term 구간의 hl 이 더 작거나 클경우 적용 가능할 것\n","    # high_prime_terms = np.vstack((co_prime_fill_idx[valid_cu_bool], cu_idx[valid_cu_bool])).T.astype(int)\n","    # low_prime_terms = np.vstack((cu_prime_fill_idx[valid_co_bool], co_idx[valid_co_bool])).T.astype(int)\n","\n","    # high_prime_terms_cnt = high_prime_terms[:, 1] - high_prime_terms[:, 0]\n","    # low_prime_terms_cnt = low_prime_terms[:, 1] - low_prime_terms[:, 0]\n","\n","    # paired_prime_cu_idx = high_prime_terms[:, 1]\n","    # paired_prime_co_idx = low_prime_terms[:, 1]\n","\n","    # ====== get wave_hl & terms ====== #\n","    wave_high_ = np.full(len_df, np.nan)\n","    wave_low_ = np.full(len_df, np.nan)\n","\n","    wave_highs = np.array([high[iin:iout + 1].max() for iin, iout in high_post_terms])\n","    wave_lows = np.array([low[iin:iout + 1].min() for iin, iout in low_post_terms])\n","\n","    wave_high_[paired_cu_post_idx] = wave_highs\n","    wave_low_[paired_co_post_idx] = wave_lows\n","\n","    wave_high_fill_ = fill_arr(wave_high_)\n","    wave_low_fill_ = fill_arr(wave_low_)\n","\n","    # ------ Todo, update_hl 에 대해서, post_terms_hl 적용 ------ #\n","    wave_high_terms_low_ = np.full(len_df, np.nan)\n","    wave_low_terms_high_ = np.full(len_df, np.nan)\n","\n","    wave_high_terms_lows = np.array([low[iin:iout + 1].min() for iin, iout in high_post_terms])  # for point rejection, Todo, min_max 설정 항상 주의\n","    wave_low_terms_highs = np.array([high[iin:iout + 1].max() for iin, iout in low_post_terms])\n","\n","    wave_high_terms_low_[paired_cu_post_idx] = wave_high_terms_lows\n","    wave_low_terms_high_[paired_co_post_idx] = wave_low_terms_highs\n","\n","    update_low_cu_bool = wave_high_terms_low_ < wave_low_fill_\n","    update_high_co_bool = wave_low_terms_high_ > wave_high_fill_\n","\n","    # ------ term cnt ------ #\n","    wave_high_terms_cnt_ = np.full(len_df, np.nan)\n","    wave_low_terms_cnt_ = np.full(len_df, np.nan)\n","\n","    wave_high_terms_cnt_[paired_cu_post_idx] = high_post_terms_cnt\n","    wave_low_terms_cnt_[paired_co_post_idx] = low_post_terms_cnt\n","\n","    wave_high_terms_cnt_fill_ = fill_arr(wave_high_terms_cnt_)\n","    wave_low_terms_cnt_fill_ = fill_arr(wave_low_terms_cnt_)\n","\n","    # ------ hl_fill 의 prime_idx 를 찾아야함 ------ #\n","    # b1_wave_high_fill_ = pd.Series(wave_high_fill_).shift(1).to_numpy()\n","    # b1_wave_low_fill_ = pd.Series(wave_low_fill_).shift(1).to_numpy()\n","    # wave_high_prime_idx = np.where((wave_high_fill_ != b1_wave_high_fill_) & ~np.isnan(wave_high_fill_), len_df_range, np.nan)\n","    # wave_low_prime_idx = np.where((wave_low_fill_ != b1_wave_low_fill_) & ~np.isnan(wave_low_fill_), len_df_range, np.nan)\n","    #\n","    # high_prime_idx_fill_ = fill_arr(wave_high_prime_idx)\n","    # low_prime_idx_fill_ = fill_arr(wave_low_prime_idx)\n","\n","    # ============ enlist to df_cols ============ #\n","    t_df['wave_high_fill_{}{}'.format(itv, wave_period)] = wave_high_fill_\n","    t_df['wave_low_fill_{}{}'.format(itv, wave_period)] = wave_low_fill_\n","    t_df['wave_high_terms_cnt_fill_{}{}'.format(itv, wave_period)] = wave_high_terms_cnt_fill_\n","    t_df['wave_low_terms_cnt_fill_{}{}'.format(itv, wave_period)] = wave_low_terms_cnt_fill_\n","\n","    t_df['wave_update_low_cu_bool_{}{}'.format(itv, wave_period)] = update_low_cu_bool  # temporary, for plot_check\n","    t_df['wave_update_high_co_bool_{}{}'.format(itv, wave_period)] = update_high_co_bool\n","\n","    t_df['wave_cu_{}{}'.format(itv, wave_period)] = cu_bool  # * ~update_low_cu_bool\n","    t_df['wave_co_{}{}'.format(itv, wave_period)] = co_bool  # * ~update_high_co_bool\n","    \n","    t_df['wave_cu_idx_fill_{}{}'.format(itv, wave_period)] = cu_fill_idx\n","    t_df['wave_co_idx_fill_{}{}'.format(itv, wave_period)] = co_fill_idx\n","\n","    t_df['wave_co_post_idx_{}{}'.format(itv, wave_period)] = co_post_idx  # paired_\n","    t_df['wave_cu_post_idx_{}{}'.format(itv, wave_period)] = cu_post_idx  # paired_\n","    t_df['wave_co_post_idx_fill_{}{}'.format(itv, wave_period)] = co_post_fill_idx\n","    t_df['wave_cu_post_idx_fill_{}{}'.format(itv, wave_period)] = cu_post_fill_idx\n","\n","    # Todo, idx 저장은 sync. 가 맞는 tf_df 에 대하여 적용하여야함\n","    # ------ for roll prev_hl ------ #\n","    # high_post_idx 를 위해 co_prime_idx 입력 = 뜻 : high_term's prime co_idx (high_prime_idx = wave_high 를 만들기 위한 가장 앞단의 co_idx)\n","    t_df['wave_co_prime_idx_{}{}'.format(itv,\n","                                         wave_period)] = co_prime_idx  # co_prime_idx wave_high_prime_idx  # high 갱신을 고려해, prev_hl 는 prime_idx 기준으로 진행\n","    t_df['wave_cu_prime_idx_{}{}'.format(itv,\n","                                         wave_period)] = cu_prime_idx  # cu_prime_idx wave_low_prime_idx  # cu_prime_idx's low 를 사용하겠다라는 의미, 즉 roll_prev 임\n","    t_df['wave_co_prime_idx_fill_{}{}'.format(itv, wave_period)] = co_prime_fill_idx  # co_prime_fill_idx high_prime_idx_fill_\n","    t_df['wave_cu_prime_idx_fill_{}{}'.format(itv, wave_period)] = cu_prime_fill_idx  # cu_prime_fill_idx low_prime_idx_fill_\n","\n","    # ------ for plot_checking ------ #\n","    t_df['wave_cu_marker_{}{}'.format(itv, wave_period)] = get_line(cu_idx, close)\n","    t_df['wave_co_marker_{}{}'.format(itv, wave_period)] = get_line(co_idx, close)\n","\n","    return t_df"],"metadata":{"id":"FdDkSxbaX4AI"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"LyGnAMvLYvOZ"},"source":["#### wave_range"]},{"cell_type":"markdown","metadata":{"id":"O1uu9vQnY5dn"},"source":["##### plot_check"]},{"cell_type":"code","execution_count":45,"metadata":{"id":"YqBXjVPzdccC","executionInfo":{"status":"ok","timestamp":1663389548486,"user_tz":-540,"elapsed":336,"user":{"displayName":"7th June","userId":"08178289703395036410"}}},"outputs":[],"source":["i = random.randint(0, len(res_df))\n","# i = 235290, 512385\n","# i = 74470\n","# i = 82533\n","i = 387103\n","i = 370055\n","i = 336424\n","\n","plot_size = 300 # 1500 150\n","# t_df = res_df.iloc[i - plot_size:i + plot_size]\n","t_df = res_df.iloc[i - plot_size:i]\n","a_data = t_df.to_numpy()"]},{"cell_type":"code","execution_count":55,"metadata":{"id":"PgaNnempXRd_","executionInfo":{"status":"ok","timestamp":1663393104597,"user_tz":-540,"elapsed":3,"user":{"displayName":"7th June","userId":"08178289703395036410"}}},"outputs":[],"source":["wave_itv1, wave_period1 = 'T', 20\n","roll_hl_cnt = 3\n","\n","if wave_itv1 != 'T':\n","    offset = '1h' if wave_itv1 != 'D' else '9h'\n","    htf_df = to_htf(t_df, wave_itv1, offset=offset)  # to_htf 는 ohlc, 4개의 col 만 존재 (현재까지)\n","    htf_df = wave_range_cci_v4_1(htf_df, wave_period1)\n","    # htf_df = wave_range_dc_envel_v1(htf_df, wave_period1)\n","    \n","\n","    cols = list(htf_df.columns)  # 그냥 다 넣어버리기 (추후 혼란 방지)\n","\n","    valid_high_prime_idx, valid_low_prime_idx, roll_prev_high_idx_arr, roll_prev_low_idx_arr = roll_wave_hl_idx_v5(htf_df, wave_itv1, wave_period1, roll_hl_cnt=roll_hl_cnt)\n","\n","    htf_df = get_roll_wave_data_v2(htf_df, valid_high_prime_idx, roll_prev_high_idx_arr, 'wave_high_fill_{}{}'.format(wave_itv1, wave_period1), roll_hl_cnt)\n","    cols += list(htf_df.columns[-roll_hl_cnt:])\n","\n","    htf_df = get_roll_wave_data_v2(htf_df, valid_low_prime_idx, roll_prev_low_idx_arr, 'wave_low_fill_{}{}'.format(wave_itv1, wave_period1), roll_hl_cnt)\n","    cols += list(htf_df.columns[-roll_hl_cnt:])\n","\n","    htf_df = wave_range_ratio_v4_2(htf_df, wave_itv1, wave_period1, roll_hl_cnt=3)\n","    cols += list(htf_df.columns[-4:])  # wrr 은 4개의 cols\n","\n","    # ------ 필요한 cols 만 join (htf's idx 정보는 ltf 와 sync. 가 맞지 않음 - join 불가함) ------ #\n","    t_df.drop(cols, inplace=True, axis=1, errors='ignore')\n","    t_df = t_df.join(to_lower_tf_v3(t_df, htf_df, cols, backing_i=0), how='inner')\n","\n","else:  \n","  t_df = wave_range_cci_v4_1(t_df, wave_period1)\n","  # t_df = wave_range_stoch_v1(t_df, wave_period1)\n","  # t_df = wave_range_dc_envel_v1(t_df, wave_period1)\n","\n","  valid_high_prime_idx, valid_low_prime_idx, roll_prev_high_idx_arr, roll_prev_low_idx_arr = roll_wave_hl_idx_v5(t_df, wave_itv1, wave_period1, roll_hl_cnt=roll_hl_cnt)\n","  t_df = get_roll_wave_data_v2(t_df, valid_high_prime_idx, roll_prev_high_idx_arr, 'wave_high_fill_{}{}'.format(wave_itv1, wave_period1), roll_hl_cnt)\n","  t_df = get_roll_wave_data_v2(t_df, valid_low_prime_idx, roll_prev_low_idx_arr, 'wave_low_fill_{}{}'.format(wave_itv1, wave_period1), roll_hl_cnt)\n","\n","  t_df = wave_range_ratio_v4_2(t_df, wave_itv1, wave_period1, roll_hl_cnt=roll_hl_cnt)\n","\n","# t_df = wave_range_v11(t_df, config)\n","# t_df = wave_range_v11_2(t_df, config)\n","# t_df = wave_range_dcbase_v11_3(t_df, config, over_period=2)\n","# t_df = wave_range_cci_v1(t_df, wave_itv1, wave_period1)\n","# t_df = wave_range_v12(t_df, config, ltf_df=None)\n","# t_df = wave_range_v13(t_df, config, ltf_df=None, term_thresh=1)\n","# t_df = wave_range_v14(t_df, config, ltf_df=None, term_thresh1=1, term_thresh2=3)\n","# t_df = wave_range_v15(t_df, config, term_thresh1=2, term_thresh2=3)\n"]},{"cell_type":"code","source":["def wave_range_cci_v4_1(t_df, wave_period, band_width=100):\n","    t_df = cci_v2(t_df, wave_period)\n","    itv = pd.infer_freq(t_df.index)\n","\n","    cci_ = t_df['cci_{}{}'.format(itv, wave_period)].to_numpy()\n","    b1_cci_ = t_df['cci_{}{}'.format(itv, wave_period)].shift(1).to_numpy()\n","\n","    baseline = 0\n","    upper_band = baseline + band_width\n","    lower_band = baseline - band_width\n","\n","    data_cols = ['open', 'high', 'low', 'close']\n","    ohlc_list = [t_df[col_].to_numpy() for col_ in data_cols]\n","    open, high, low, close = ohlc_list\n","\n","    # ============ modules ============ #\n","    # ------ define co, cu ------ # <- point missing 과 관련해 정교해아함\n","    cu_bool = (b1_cci_ > upper_band) & (upper_band > cci_)\n","    co_bool = (b1_cci_ < lower_band) & (lower_band < cci_)\n","\n","    return wave_publics_v3(t_df, cu_bool, co_bool, ohlc_list, wave_period)"],"metadata":{"id":"WM85fKSd9F7f","executionInfo":{"status":"ok","timestamp":1663393101893,"user_tz":-540,"elapsed":466,"user":{"displayName":"7th June","userId":"08178289703395036410"}}},"execution_count":54,"outputs":[]},{"cell_type":"code","execution_count":57,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":862},"executionInfo":{"elapsed":2786,"status":"ok","timestamp":1663393141160,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"-Dr_tTk9csFm","outputId":"53ac4f58-eff0-4346-f28e-dc30e6835245"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1080x1080 with 2 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["plt.style.use(['dark_background', 'fast'])\n","fig = plt.figure(figsize=(15, 15))\n","nrows, ncols = 2, 1\n","gs = gridspec.GridSpec(nrows=nrows,  # row 부터 index 채우고 col 채우는 순서임 (gs_idx)\n","                        ncols=ncols,\n","                        height_ratios=[3, 1]\n","                        )\n","\n","ax = fig.add_subplot(gs[0])\n","\n","# ------ candles ------ #\n","candle_plot(a_data[:, col_idx_dict['ohlc_col_idxs']], ax, alpha=1.0, wickwidth=1.0)\n","# _ = [step_col_plot(a_data[:, params[0]], *params[1:]) for params in col_idx_dict['step_col_info']]\n","\n","len_df = len(t_df)   \n","len_df_range = np.arange(len_df).astype(int)\n","\n","# ============ ============ ============ #\n","# ============ ============ ============ #\n","\n","wave_high_fill_ = t_df['wave_high_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","wave_low_fill_ = t_df['wave_low_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","wave_high_terms_cnt_fill_ = t_df['wave_high_terms_cnt_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","wave_low_terms_cnt_fill_ = t_df['wave_low_terms_cnt_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","\n","wave_high_idx_fill_ = t_df['wave_high_idx_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","wave_low_idx_fill_ = t_df['wave_low_idx_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","\n","wave_cu_idx_ = get_index_bybool(t_df['wave_cu_{}{}'.format(wave_itv1, wave_period1)].to_numpy(), len_df_range)\n","wave_co_idx_ = get_index_bybool(t_df['wave_co_{}{}'.format(wave_itv1, wave_period1)].to_numpy(), len_df_range)\n","# wave_cu_bool_idx_ = get_index_bybool(t_df['wave_cu_bool_{}{}'.format(wave_itv1, wave_period1)].to_numpy(), len_df_range)\n","# wave_co_bool_idx_ = get_index_bybool(t_df['wave_co_bool_{}{}'.format(wave_itv1, wave_period1)].to_numpy(), len_df_range)\n","wave_update_low_cu_bool_idx_ = get_index_bybool(t_df['wave_update_low_cu_bool_{}{}'.format(wave_itv1, wave_period1)].to_numpy(), len_df_range)\n","wave_update_high_co_bool_idx_ = get_index_bybool(t_df['wave_update_high_co_bool_{}{}'.format(wave_itv1, wave_period1)].to_numpy(), len_df_range)\n","\n","wave_cu_prime_idx_ = t_df['wave_cu_prime_idx_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","wave_co_prime_idx_ = t_df['wave_co_prime_idx_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","wave_cu_prime_idx_fill_ = t_df['wave_cu_prime_idx_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","wave_co_prime_idx_fill_ = t_df['wave_co_prime_idx_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","\n","wave_cu_post_idx_ = t_df['wave_cu_post_idx_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","wave_co_post_idx_ = t_df['wave_co_post_idx_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","wave_cu_post_idx_fill_ = t_df['wave_cu_post_idx_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","wave_co_post_idx_fill_ = t_df['wave_co_post_idx_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","\n","wave_cu_marker_ = t_df['wave_cu_marker_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","wave_co_marker_ = t_df['wave_co_marker_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","\n","# high_prime_idx = t_df['wave_high_prime_idx_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","# low_prime_idx = t_df['wave_low_prime_idx_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","# high_prime_idx_fill = t_df['wave_high_prime_idx_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","# low_prime_idx_fill = t_df['wave_low_prime_idx_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","\n","# ============ plot_check ============ #\n","# dc_base_ = t_df['dc_base_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","# plt.step(len_df_range, dc_base_, alpha=1.0, color='cyan', linewidth=1)\n","\n","plt.step(len_df_range, wave_cu_marker_, \"o\", alpha=1.0, color='#ff00ff', markersize=3)\n","plt.step(len_df_range, wave_co_marker_, \"o\", alpha=1.0, color='#00ff00', markersize=3)\n","\n","# plt.step(len_df_range, t_df['dc_upper_{}{}'.format(wave_itv1, wave_period1)], color='#ffeb3b')\n","# plt.step(len_df_range, t_df['dc_lower_{}{}'.format(wave_itv1, wave_period1)], color='#ffeb3b')\n","\n","# [plt.axvline(int(idx_), color=\"#ff0000\") for idx_ in wave_cu_bool_idx_ if not np.isnan(idx_)]\n","# [plt.axvline(int(idx_), color=\"#0000ff\") for idx_ in wave_co_bool_idx_ if not np.isnan(idx_)]\n","[plt.axvline(int(idx_), color=\"#ff0000\") for idx_ in wave_update_low_cu_bool_idx_ if not np.isnan(idx_)]\n","[plt.axvline(int(idx_), color=\"#0000ff\") for idx_ in wave_update_high_co_bool_idx_ if not np.isnan(idx_)]\n","\n","# [plt.axvline(int(idx_), color=\"#ff00ff\") for idx_ in wave_cu_idx_ if not np.isnan(idx_)]\n","# [plt.axvline(int(idx_), color=\"#00ff00\") for idx_ in wave_co_idx_ if not np.isnan(idx_)]\n","\n","# [plt.axvline(int(idx_), color=\"#00ff00\") for idx_ in wave_high_prime_idx if not np.isnan(idx_)]\n","# [plt.axvline(int(idx_), color=\"#ff00ff\") for idx_ in wave_low_prime_idx if not np.isnan(idx_)]\n","\n","plt.step(len_df_range, wave_high_fill_, \"*\", alpha=1.0, color='#00ff00', markersize=6)\n","plt.step(len_df_range, wave_low_fill_, \"*\", alpha=1.0, color='#ff00ff', markersize=6)\n","\n","# ------ data check in gs[0] ------ #\n","plt.axvline(wave_cu_post_idx_fill_[230], color='r')\n","plt.axvline(wave_cu_prime_idx_fill_[230])\n","\n","plt.xlim(0, len_df)\n","\n","plt.subplot(gs[1])\n","\n","# --- cci --- #\n","cci_ = t_df['cci_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","plt.step(len_df_range, cci_, alpha=1.0, color='yellow', linewidth=2)\n","plt.axhline(100, color=\"#ffffff\")\n","plt.axhline(-100, color=\"#ffffff\")\n","\n","# --- stoch --- #\n","# stoch_ = t_df['stoch_{}{}33'.format(wave_itv1, wave_period1)].to_numpy()\n","# plt.step(len_df_range, stoch_, alpha=1.0, color='yellow', linewidth=2)\n","# plt.axhline(67, color=\"#ffffff\")\n","# plt.axhline(33, color=\"#ffffff\")\n","\n","[plt.axvline(int(idx_), color=\"#ff00ff\") for idx_ in wave_cu_idx_ if not np.isnan(idx_)]\n","[plt.axvline(int(idx_), color=\"#00ff00\") for idx_ in wave_co_idx_ if not np.isnan(idx_)]   # long 이라서 초록색임\n","\n","# plt.step(len_df_range, wave_high_terms_cnt_fill_, alpha=1.0, color='yellow', linewidth=2)\n","# plt.step(len_df_range, wave_low_terms_cnt_fill_, alpha=1.0, color='yellow', linewidth=2)\n","# plt.step(len_df_range, wave_high_terms_cnt_fill_, \"*\", alpha=1.0, color='#00ff00', markersize=6)\n","# plt.step(len_df_range, wave_low_terms_cnt_fill_, \"*\", alpha=1.0, color='#ff00ff', markersize=6)\n","\n","\n","plt.xlim(0, len_df)  # for sync. with gs[0]\n","\n","plt.show()"]},{"cell_type":"code","source":["# wave_high_idx_fill_[200]\n","print(wave_low_idx_fill_[200])\n","print(wave_low_idx_fill_[210])\n","\n","y = (y1 - y0) / (x1 - x0) * x + y0 # x : x0 부터의 ticks "],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"x-ob07j19TUf","executionInfo":{"status":"ok","timestamp":1663393203342,"user_tz":-540,"elapsed":361,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"2c6894ee-421c-492b-d658-042bafe57265"},"execution_count":61,"outputs":[{"output_type":"stream","name":"stdout","text":["149.0\n","208.0\n"]}]},{"cell_type":"markdown","metadata":{"id":"c2yVTn1tnxMn"},"source":["###### data_window"]},{"cell_type":"code","source":["# print(valid_high_prime_idx)  # = valid_co_prime_idx\n","# print(roll_prev_high_idx_arr)   # = roll_prev_co_idx_arr\n","print(valid_low_prime_idx)  # = valid_co_prime_idx\n","print(roll_prev_low_idx_arr)   # = roll_prev_co_idx_arr"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"6bra-Br3lq1h","executionInfo":{"status":"ok","timestamp":1660483201485,"user_tz":-540,"elapsed":351,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"8c90e368-24c7-439e-9733-567d4848859a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[ 39  45 124 164]\n","[[ 39  45 124]\n"," [ 45 124 164]]\n"]}]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":345,"status":"ok","timestamp":1660484147094,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"0DgdFydfB1f-","outputId":"1677cb32-6a71-4292-b49a-204f7da8ed20"},"outputs":[{"output_type":"stream","name":"stdout","text":["145.0\n","239.0\n"]}],"source":["idx = 239\n","# print(wave_cu_post_idx_fill_[idx])\n","# print(wave_co_prime_idx_fill_[idx - 1])\n","# print(wave_co_post_idx_fill_[idx - 1])\n","# print(wave_co_prime_idx_fill_[idx])\n","print(wave_co_post_idx_fill_[int(wave_cu_post_idx_fill_[idx])])\n","print(wave_co_idx_[idx])\n","\n","# print(len(t_df))\n","# len(wave_co_prime_idx_fill_)"]},{"cell_type":"code","source":["wave_co_idx_[~np.isnan(wave_co_idx_)]"],"metadata":{"id":"7zLNu-8gjeJ1"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"zj_d5wsfDzf_"},"outputs":[],"source":["roll_hl_cnt = 3\n","high_prime_idx = t_df['wave_high_prime_idx_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","low_prime_idx = t_df['wave_low_prime_idx_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","\n","valid_high_prime_idx = high_prime_idx[~np.isnan(high_prime_idx)].astype(int)  # roll_high 를 위한 prime_idx\n","valid_low_prime_idx = low_prime_idx[~np.isnan(low_prime_idx)].astype(int)  # roll_low 를 위한 prime_idx\n","\n","roll_high_idx_arr = np.array([valid_high_prime_idx[idx_ + 1 - roll_hl_cnt:idx_ + 1] for idx_ in range(len(valid_high_prime_idx)) if\n","                              idx_ + 1 >= roll_hl_cnt])  # cnt 수를 만족시키기 위해 idx 제한\n","roll_low_idx_arr = np.array(\n","    [valid_low_prime_idx[idx_ + 1 - roll_hl_cnt:idx_ + 1] for idx_ in range(len(valid_low_prime_idx)) if idx_ + 1 >= roll_hl_cnt])"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Z-EokTzIqb-T"},"outputs":[],"source":["%timeit -n1 -r1 wave_range_v10(res_df[-100000:], period1, ltf_df=None) # 23.7 s per loop\n","%timeit -n1 -r1 wave_range_v11(res_df[-100000:], period1, ltf_df=None) # 574 ms per loop"]},{"cell_type":"markdown","metadata":{"id":"Q_1wJTcRYpm8"},"source":["##### legacy"]},{"cell_type":"code","source":["def get_next_fibo_gap(x):\n","  if 0 < x < 0.214:\n","    return -0.786\n","  elif 0.214 < x < 0.382:\n","    return -0.618\n","  elif 0.382 < x < 0.5:\n","    return -0.5\n","  elif 0.5 < x < 0.618:\n","    return -0.382\n","  elif 0.618 < x < 0.764:\n","    return -0.236\n","  elif 0.764 < x < 1:\n","    return 0\n","  else:\n","    return np.nan # 일단은, wrr_32 < 1 만 허용키로.\n","\n","\n","def get_next_fibo_gap2(x):\n","  if 0 < x < 0.214:\n","    return -0.618\n","  elif 0.214 < x < 0.382:\n","    return -0.5\n","  elif 0.382 < x < 0.5:\n","    return -0.382\n","  elif 0.5 < x < 0.618:\n","    return -0.236\n","  elif 0.618 < x < 0.764:\n","    return 0\n","  elif 0.764 < x < 1:\n","    return 0\n","  else:\n","    return np.nan # 일단은, wrr_32 < 1 만 허용키로."],"metadata":{"id":"Bmp7faPhzydp"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"02DcTVB2cYuR"},"source":["##### dump"]},{"cell_type":"code","source":["roll_hl_cnt = 3\n","wave_itv = pd.infer_freq(t_df.index)\n","wave_period = config.tr_set.wave_period\n","\n","len_df = len(t_df)\n","\n","high_prime_idx = t_df['wave_high_prime_idx_{}{}'.format(wave_itv, wave_period)].to_numpy()   # cu_post_idx\n","low_prime_idx = t_df['wave_low_prime_idx_{}{}'.format(wave_itv, wave_period)].to_numpy()    \n","\n","valid_high_prime_idx = high_prime_idx[~np.isnan(high_prime_idx)].astype(int)  # roll_high 를 위한 prime_idx\n","valid_low_prime_idx = low_prime_idx[~np.isnan(low_prime_idx)].astype(int)  # roll_low 를 위한 prime_idx\n","\n","roll_high_idx_arr = np.array([valid_high_prime_idx[idx_ + 1 - roll_hl_cnt:idx_ + 1] for idx_ in range(len(valid_high_prime_idx)) if idx_ + 1 >= roll_hl_cnt])  # cnt 수를 만족시키기 위해 idx 제한\n","roll_low_idx_arr = np.array([valid_low_prime_idx[idx_ + 1 - roll_hl_cnt:idx_ + 1] for idx_ in range(len(valid_low_prime_idx)) if idx_ + 1 >= roll_hl_cnt])\n"],"metadata":{"id":"fjGcs9ngkh5s"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["t_df = cci_v2(t_df, wave_period)\n","\n","cci_ = t_df['cci_{}{}'.format(itv, wave_period)].to_numpy()\n","b1_cci_ = t_df['cci_{}{}'.format(itv, wave_period)].shift(1).to_numpy()\n","\n","band_width = 100\n","upper_band = band_width\n","lower_band = -band_width\n","\n","len_df = len(t_df)\n","len_df_range = np.arange(len_df).astype(int)\n","\n","data_cols = ['open', 'high', 'low', 'close']\n","open, high, low, close = [t_df[col_].to_numpy() for col_ in data_cols]\n","# b1_close = t_df.close.shift(itv_num).to_numpy()\n","\n","# ============ modules ============ #\n","# ------ define co, cu ------ # <- point missing 과 관련해 정교해아함\n","cu_bool = (b1_cci_ > upper_band) & (upper_band > cci_)\n","co_bool = (b1_cci_ < lower_band) & (lower_band < cci_)\n","\n","cu_idx = get_index_bybool(cu_bool, len_df_range)\n","co_idx = get_index_bybool(co_bool, len_df_range)\n","\n","cu_fill_idx, co_fill_idx, cu_prime_idx, co_prime_idx, cu_prime_fill_idx, co_prime_fill_idx, valid_cu_bool, valid_co_bool = get_terms_info_v4(\n","    cu_idx, co_idx, len_df, len_df_range)\n","\n","# ------ get post_terms ------ #\n","high_post_terms = np.vstack((co_fill_idx[valid_cu_bool], cu_idx[valid_cu_bool])).T.astype(int)\n","low_post_terms = np.vstack((cu_fill_idx[valid_co_bool], co_idx[valid_co_bool])).T.astype(int)\n","\n","high_post_terms_cnt = high_post_terms[:, 1] - high_post_terms[:, 0]\n","low_post_terms_cnt = low_post_terms[:, 1] - low_post_terms[:, 0]\n","\n","paired_post_cu_idx = high_post_terms[:, 1]\n","paired_post_co_idx = low_post_terms[:, 1]\n","\n","# ------ get prime_terms ------ # # 기본은 아래 logic 으로 수행하고, update_hl 도 해당 term 구간의 hl 이 더 작거나 클경우 적용 가능할 것\n","# high_prime_terms = np.vstack((co_prime_fill_idx[valid_cu_bool], cu_idx[valid_cu_bool])).T.astype(int)\n","# low_prime_terms = np.vstack((cu_prime_fill_idx[valid_co_bool], co_idx[valid_co_bool])).T.astype(int)\n","\n","# high_prime_terms_cnt = high_prime_terms[:, 1] - high_prime_terms[:, 0]\n","# low_prime_terms_cnt = low_prime_terms[:, 1] - low_prime_terms[:, 0]\n","\n","# paired_prime_cu_idx = high_prime_terms[:, 1]\n","# paired_prime_co_idx = low_prime_terms[:, 1]\n","\n","# ====== get wave_hl & terms ====== #\n","wave_high_ = np.full(len_df, np.nan)\n","wave_low_ = np.full(len_df, np.nan)\n","\n","wave_highs = np.array([high[iin:iout + 1].max() for iin, iout in high_post_terms])\n","wave_lows = np.array([low[iin:iout + 1].min() for iin, iout in low_post_terms])\n","\n","wave_high_[paired_post_cu_idx] = wave_highs\n","wave_low_[paired_post_co_idx] = wave_lows\n","\n","wave_high_fill_ = fill_arr(wave_high_)\n","wave_low_fill_ = fill_arr(wave_low_)\n","\n","# ------ Todo, update_hl 에 대해서, post_terms_hl 적용 ------ #\n","wave_high_terms_low_ = np.full(len_df, np.nan)\n","wave_low_terms_high_ = np.full(len_df, np.nan)\n","\n","wave_high_terms_lows = np.array([low[iin:iout + 1].min() for iin, iout in high_post_terms])  # for point rejection, Todo, min_max 설정 항상 주의\n","wave_low_terms_highs = np.array([high[iin:iout + 1].max() for iin, iout in low_post_terms])\n","\n","wave_high_terms_low_[paired_post_cu_idx] = wave_high_terms_lows\n","wave_low_terms_high_[paired_post_co_idx] = wave_low_terms_highs\n","\n","update_low_cu_bool = wave_high_terms_low_ < wave_low_fill_\n","update_high_co_bool = wave_low_terms_high_ > wave_high_fill_\n","\n","# ------ term cnt ------ #\n","wave_high_terms_cnt_ = np.full(len_df, np.nan)\n","wave_low_terms_cnt_ = np.full(len_df, np.nan)\n","\n","wave_high_terms_cnt_[paired_post_cu_idx] = high_post_terms_cnt\n","wave_low_terms_cnt_[paired_post_co_idx] = low_post_terms_cnt\n","\n","wave_high_terms_cnt_fill_ = fill_arr(wave_high_terms_cnt_)\n","wave_low_terms_cnt_fill_ = fill_arr(wave_low_terms_cnt_)\n","\n","# ------ hl_fill 의 prime_idx 를 찾아야함 ------ #\n","# b1_wave_high_fill_ = pd.Series(wave_high_fill_).shift(1).to_numpy()\n","# b1_wave_low_fill_ = pd.Series(wave_low_fill_).shift(1).to_numpy()\n","# wave_high_prime_idx = np.where((wave_high_fill_ != b1_wave_high_fill_) & ~np.isnan(wave_high_fill_), len_df_range, np.nan)\n","# wave_low_prime_idx = np.where((wave_low_fill_ != b1_wave_low_fill_) & ~np.isnan(wave_low_fill_), len_df_range, np.nan)\n","#\n","# high_prime_idx_fill_ = fill_arr(wave_high_prime_idx)\n","# low_prime_idx_fill_ = fill_arr(wave_low_prime_idx)\n","\n","# ============ enlist to df_cols ============ #\n","t_df['wave_high_fill_{}{}'.format(itv, wave_period)] = wave_high_fill_\n","t_df['wave_low_fill_{}{}'.format(itv, wave_period)] = wave_low_fill_\n","t_df['wave_high_terms_cnt_fill_{}{}'.format(itv, wave_period)] = wave_high_terms_cnt_fill_\n","t_df['wave_low_terms_cnt_fill_{}{}'.format(itv, wave_period)] = wave_low_terms_cnt_fill_\n","\n","# ------ for roll prev_hl ------ #\n","# high_post_idx 를 위해 co_prime_idx 입력\n","t_df['wave_high_prime_idx_{}{}'.format(itv, wave_period)] = co_prime_idx # co_prime_idx wave_high_prime_idx  # high 갱신을 고려해, prev_hl 는 prime_idx 기준으로 진행\n","t_df['wave_low_prime_idx_{}{}'.format(itv, wave_period)] = cu_prime_idx # cu_prime_idx wave_low_prime_idx  # cu_prime_idx's low 를 사용하겠다라는 의미, 즉 roll_prev 임\n","\n","# ------ for first_high ------ #\n","t_df['wave_high_prime_idx_fill_{}{}'.format(itv, wave_period)] = co_prime_fill_idx # co_prime_fill_idx high_prime_idx_fill_\n","t_df['wave_low_prime_idx_fill_{}{}'.format(itv, wave_period)] = cu_prime_fill_idx # cu_prime_fill_idx low_prime_idx_fill_\n","\n","# ------ for plot_checking ------ #\n","t_df['wave_cu_bool_{}{}'.format(itv, wave_period)] = cu_bool  # temporary, for plot_check\n","t_df['wave_co_bool_{}{}'.format(itv, wave_period)] = co_bool\n","t_df['wave_cu_{}{}'.format(itv, wave_period)] = cu_bool * ~update_low_cu_bool\n","t_df['wave_co_{}{}'.format(itv, wave_period)] = co_bool * ~update_high_co_bool\n","t_df['wave_cu_marker_{}{}'.format(itv, wave_period)] = get_line(cu_idx, close)\n","t_df['wave_co_marker_{}{}'.format(itv, wave_period)] = get_line(co_idx, close)\n","# t_df['update_low_cu_bool_{}{}'.format(itv, wave_period)] = update_low_cu_bool\n","# t_df['update_high_co_bool_{}{}'.format(itv, wave_period)] = update_high_co_bool\n","\n","if itv != 'T':\n","    join_cols = np.arange(-15, 0, 1).astype(int)  # wave vars. + wave_unit's col\n","    res_df.drop(t_df.columns[join_cols], inplace=True, axis=1, errors='ignore')\n","    try:\n","        res_df = res_df.join(to_lower_tf_v3(res_df, t_df, join_cols, backing_i=0), how='inner')\n","    except Exception as e:\n","        print(\"error in wave_range()'s join() :\", e)\n","\n","    return res_df\n","\n","else:\n","    return t_df"],"metadata":{"id":"CLYKs7ItkgIa"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Go7ARIUhfC1g"},"outputs":[],"source":["\n","\n","def get_roll_wave_data_v2(valid_prime_idx, roll_idx_arr, len_df, data, roll_prev_hl_cnt):\n","\n","    roll_data = pd.DataFrame(np.full((len_df, roll_prev_hl_cnt), np.nan))\n","    roll_data.iloc[valid_prime_idx[roll_prev_hl_cnt:], :] = data[roll_idx_arr]  # 제한된 idx 를 제외한 row 에 roll_hl 입력\n","\n","    return roll_data.ffill().to_numpy()\n","\n","def roll_wave_hl_v5(t_df, config, roll_prev_hl_cnt=3):\n","  \n","    wave_itv = pd.infer_freq(t_df.index)\n","    wave_period = config.tr_set.wave_period\n","\n","    len_df = len(t_df)\n","\n","    high_prime_idx = t_df['wave_high_prime_idx_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","    low_prime_idx = t_df['wave_low_prime_idx_{}{}'.format(wave_itv, wave_period)].to_numpy()    \n","\n","    valid_high_prime_idx = high_prime_idx[~np.isnan(high_prime_idx)].astype(int)  # roll_high 를 위한 prime_idx\n","    valid_low_prime_idx = low_prime_idx[~np.isnan(low_prime_idx)].astype(int)  # roll_low 를 위한 prime_idx\n","\n","    roll_prev_high_idx_arr = np.array([valid_high_prime_idx[idx_ - roll_prev_hl_cnt:idx_] for idx_ in range(len(valid_high_prime_idx)) if idx_ >= roll_prev_hl_cnt])  # cnt 수를 만족시키기 위해 idx 제한\n","    roll_prev_low_idx_arr = np.array([valid_low_prime_idx[idx_ - roll_prev_hl_cnt:idx_] for idx_ in range(len(valid_low_prime_idx)) if idx_ >= roll_prev_hl_cnt])\n","\n","    return valid_high_prime_idx, valid_low_prime_idx, roll_prev_high_idx_arr, roll_prev_low_idx_arr"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"pgA8QqyXZ66o"},"outputs":[],"source":["t_df[roll_cols].tail(100)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"wF7fKJ3mOhaf"},"outputs":[],"source":["data_col = 'wave_high_fill_{}{}'.format(wave_itv1, wave_period1)\n","data = htf_df[data_col].to_numpy()\n","len_htf_df = len(htf_df)\n","\n","\n","roll_data = pd.DataFrame(index=htf_df.index, data=np.full((len_htf_df, roll_hl_cnt), np.nan))\n","roll_data.iloc[valid_high_prime_idx[roll_hl_cnt - 1:], :] = data[roll_prev_high_idx_arr]  # 제한된 idx 를 제외한 row 에 roll_hl 입력\n","\n","# roll_data.ffill()\n","htf_df[roll_cols] = roll_data.ffill()\n","htf_df[roll_cols]\n","\n","# htf_df[roll_cols] = np.nan\n","# htf_df[roll_cols].iloc[valid_high_prime_idx[roll_hl_cnt - 1:]] = data[roll_prev_high_idx_arr]  # 제한된 idx 를 제외한 row 에 roll_hl 입력\n","\n","# htf_df[roll_cols] = htf_df[roll_cols].ffill().to_numpy()\n","\n","# valid_high_prime_idx\n","# np.sum(~np.isnan(roll_high))\n","# htf_df[roll_cols]\n","# roll_prev_low_idx_arr"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"3vHLGont-BFe"},"outputs":[],"source":["# t_df\n","to_lower_tf_v2(res_df, t_df, join_cols)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Mh3w2s-j34Zs"},"outputs":[],"source":["wave_post_highs = np.array([high[iin:iout + 1].max() for iin, iout in high_post_terms])\n","wave_post_lows = np.array([low[iin:iout + 1].min() for iin, iout in low_post_terms])\n","\n","# print(len(paired_cu_idx))\n","# print(len(wave_post_highs))\n","# print(len(cu_bool))\n","\n","update_paired_cu_bool = (cu_bool * (wave_high_terms_low_ < wave_low_fill_))[paired_cu_idx]\n","update_paired_cu_idx = paired_cu_idx[update_paired_cu_bool]\n","wave_high_[update_paired_cu_idx] = wave_post_highs[update_paired_cu_bool]\n","\n","update_paired_co_bool = (co_bool * (wave_low_terms_high_ > wave_high_fill_))[paired_co_idx]\n","update_paired_co_idx = paired_co_idx[update_paired_co_bool]\n","wave_low_[update_paired_co_idx] = wave_post_lows[update_paired_co_bool]\n","\n","wave_high_fill2_ = fill_arr(wave_high_)\n","wave_low_fill2_ = fill_arr(wave_low_)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":3,"status":"ok","timestamp":1651799326382,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"eQ06-kWq4m6F","outputId":"5c5df956-4fbd-4aa4-e1d6-dc5d0c23ac19"},"outputs":[{"name":"stdout","output_type":"stream","text":["11\n","11\n"]}],"source":["# wave_post_highs\n","# update_cu_bool = (cu_bool * (wave_high_terms_low_ < wave_low_fill_))[paired_cu_idx]\n","# print(paired_cu_idx[update_cu_bool])\n","# print(paired_cu_idx)\n","print(len(update_paired_cu_idx))\n","print(len(wave_post_highs[update_paired_cu_bool]))\n","# print(high_prime_terms[:, 1])\n","# print(high_post_terms[:, 1])"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"SUFmr9Z_kcCN"},"outputs":[],"source":["cu_idx = get_index_bybool(cu_bool, len_df_range)\n","co_idx = get_index_bybool(co_bool, len_df_range)\n","\n","cu_fill_idx = fill_arr(cu_idx)\n","co_fill_idx = fill_arr(co_idx)\n","\n","notnan_cu_bool = ~np.isnan(cu_idx)\n","notnan_co_bool = ~np.isnan(co_idx)\n","\n","# ------ 생략된 idx 에 대한 prime_idx 탐색 ------ #\n","high_bool = cu_fill_idx < co_fill_idx  # 이렇게 해야 high_terms[:, 1] 이 cu_idx 가 나옴\n","low_bool = co_fill_idx < cu_fill_idx\n","\n","high_terms_vec = get_index_bybool(high_bool, len_df_range)\n","low_terms_vec = get_index_bybool(low_bool, len_df_range) # -> low_terms\n","\n","high_terms_list = using_clump(high_terms_vec)\n","low_terms_list = using_clump(low_terms_vec)\n","\n","valid_cu_prime_idx = np.array([terms.min() for terms in low_terms_list])\n","valid_co_prime_idx = np.array([terms.min() for terms in high_terms_list])\n","\n","cu_prime_idx = np.full(len_df, np.nan)\n","co_prime_idx = np.full(len_df, np.nan)\n","\n","cu_prime_idx[valid_cu_prime_idx] = valid_cu_prime_idx\n","co_prime_idx[valid_co_prime_idx] = valid_co_prime_idx\n","\n","cu_prime_fill_idx = fill_arr(cu_prime_idx)\n","co_prime_fill_idx = fill_arr(co_prime_idx)\n","\n","# ------ get co, cu terms_v2 ------ # # 기본은 아래 logic 으로 수행하고, update_hl 도 해당 term 구간의 hl 이 더 작거나 클경우 적용 가능할 것\n","valid_cu_bool = notnan_cu_bool * ~np.isnan(co_fill_idx) * ~np.isnan(co_prime_fill_idx)\n","valid_co_bool = notnan_co_bool * ~np.isnan(cu_fill_idx) * ~np.isnan(cu_prime_fill_idx)\n","\n","high_post_terms = np.vstack((co_fill_idx[valid_cu_bool], cu_idx[valid_cu_bool])).T.astype(int)\n","low_post_terms = np.vstack((cu_fill_idx[valid_co_bool], co_idx[valid_co_bool])).T.astype(int)\n","\n","high_terms_cnt = high_post_terms[:, 1] - high_post_terms[:, 0] \n","low_terms_cnt = low_post_terms[:, 1] - low_post_terms[:, 0] \n","\n","high_prime_terms = np.vstack((co_prime_fill_idx[valid_cu_bool], cu_idx[valid_cu_bool])).T.astype(int)\n","low_prime_terms = np.vstack((cu_prime_fill_idx[valid_co_bool], co_idx[valid_co_bool])).T.astype(int)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"_3pOQtt2ttfk"},"outputs":[],"source":["# co_prime_idx\n","# co_prime_fill_idx\n","high_prime_terms"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":6,"status":"ok","timestamp":1651756811396,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"kKaD1fK3WPRP","outputId":"bbe470f3-17d0-4029-97e9-2fb383a0c752"},"outputs":[{"data":{"text/plain":["array([nan,  2.,  7.,  2.,  4.,  2.,  7.,  5.,  4.,  6.,  9.,  2.,  5., 11., 14.])"]},"execution_count":79,"metadata":{},"output_type":"execute_result"}],"source":["#  get_index_bybool(notnan_cu_bool, len_df_range)\n","valid_cu_idx = cu_idx[notnan_cu_bool]\n","valid_shift_cu_idx = pd.Series(valid_cu_idx).shift(1).to_numpy()\n","valid_co_idx = co_idx[notnan_co_bool]\n","valid_shift_co_idx = pd.Series(valid_co_idx).shift(1).to_numpy()\n","\n","valid_cu_idx - valid_shift_cu_idx\n","valid_co_idx - valid_shift_co_idx"]},{"cell_type":"markdown","metadata":{"id":"1MNVIExLULhJ"},"source":["#### legacy"]},{"cell_type":"markdown","metadata":{"id":"EOXQbXixiQcK"},"source":["##### volume_profile"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"7pFuazxpgx9B"},"outputs":[],"source":["session_df = res_df_.iloc[-1440:] # 0.159 -> 0.024 (14400 -> 1440)\n","volume = session_df['volume'].to_numpy()\n","close = session_df['close'].to_numpy()\n","# px.histogram(session_df, x='volume', y='close', nbins=150, orientation='h').show()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"SoPJkiyKiXLM"},"outputs":[],"source":["kde_factor = 0.05\n","num_samples = 100\n","\n","start_0 = time.time()\n","kde = stats.gaussian_kde(close,weights=volume,bw_method=kde_factor)\n","kdx = np.linspace(close.min(),close.max(),num_samples)\n","kdy = kde(kdx)\n","ticks_per_sample = (kdx.max() - kdx.min()) / num_samples\n","print(\"ticks_per_sample :\", ticks_per_sample)  # sample 당 가격\n","print(\"kdy elapsed_time :\", time.time() - start_0)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"mK2jBddAxJ14"},"outputs":[],"source":["peaks,_ = signal.find_peaks(kdy)\n","pkx = kdx[peaks]\n","pky = kdy[peaks]\n","\n","plt.figure(figsize=(10,5))\n","# plt.hist(close, bins=num_samples, weights=volume, alpha=.8, color='#1592e6')\n","# plt.plot(kdx, kdy, color='white')\n","# plt.plot(pkx, pky, 'bo', color='yellow')\n","plt.plot(kdy, kdx, color='white')\n","plt.plot(pky, pkx, 'bo', color='yellow')\n","plt.show()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"a8tpQZCy0SO1"},"outputs":[],"source":["pkx"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"gfA946s8UgS0"},"outputs":[],"source":["# ------ vp 의 indi. 화가 필요함 -> point 설정 ------ #\n","# 1. 4 level 은 미리 만들어놓는게 맞는걸로 보임 -> 추종하는 function 이 많음 (utils_tr, ep_out ...)\n","#   a. 4 level 에 국한하는게 아니라, 모든 peaks 에 대해 levels 설정\n","#   b. 각 session 별로 peak_list 가 주어질 것\n","#     i. prev_data 사용해야하는점 주의 (session vp 는 future_data)"]},{"cell_type":"markdown","metadata":{"id":"3T-9FwWFXR4f"},"source":["###### prominence_info"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"RmBt2agljClE"},"outputs":[],"source":["start_0 = time.time()\n","min_prom = kdy.max() * 0.0\n","pipsize = 0.01\n","max_width_pips = 20\n","# width_range=(1, max_width_pips * pipsize / ticks_per_sample)\n","width_range= max_width_pips * pipsize / ticks_per_sample\n","peaks, peak_props = signal.find_peaks(kdy, prominence=min_prom, width=width_range)\n","\n","peak_x = kdx[peaks]\n","peak_y = kdy[peaks]\n","# ------ prominence lines ------ #\n","left_base = peak_props['left_bases']\n","right_base = peak_props['right_bases']\n","line_x = peak_x\n","line_y0 = peak_y\n","line_y1 = peak_y # - peak_props['prominences']\n","print(\"prom_line elapsed_time :\", time.time() - start_0)\n","\n","\n","for x, y0, y1 in zip(line_x, line_y0, line_y1):\n","    fig.add_shape(type='line',\n","        xref='x', yref='y',\n","        # x0=x, y0=y0, x1=x, y1=y1,\n","        x0=x, y0=0, x1=x, y1=y1,\n","        line=dict(\n","            color='red',\n","            width=2,\n","        )\n","    )\n","\n","# ------ width ------ #\n","left_ips = peak_props['left_ips']\n","right_ips = peak_props['right_ips']\n","# width_x0 = kdx.min() + (left_ips * ticks_per_sample)\n","# width_x1 = kdx.min() + (right_ips * ticks_per_sample)\n","width_x0 = kdx.min() + (left_base * ticks_per_sample)\n","width_x1 = kdx.min() + (right_base * ticks_per_sample)\n","\n","# int_from = kdx.min() + (left_base * ticks_per_sample)\n","# int_to = kdx.min() + (right_base * ticks_per_sample)\n","# [kde.integrate_box_1d(x0, x1) for x0, x1 in zip(int_from, int_to)]\n","\n","width_y = peak_props['width_heights']\n","\n","for x0, x1, y in zip(width_x0, width_x1, width_y):\n","    fig.add_shape(type='line',\n","        xref='x', yref='y',\n","        x0=x0, y0=y, x1=x1, y1=y,\n","        line=dict(\n","            color='red',\n","            width=2,\n","        )\n","    )\n","fig.show()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"zqj944n-WzyZ"},"outputs":[],"source":["# peaks  # ndarray\n","# kdx  # ndarray\n","# kdy  # ndarray\n","# kdx.min()\n","left_base * ticks_per_sample\n","# volume"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Rvqv0RGojo9h"},"outputs":[],"source":["print(peak_y)\n","print(peak_props['prominences'])\n","peak_props"]},{"cell_type":"markdown","metadata":{"id":"c2729DJ6h720"},"source":["##### imb."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Rucj-iepiR_-"},"outputs":[],"source":["t_df = res_df_.iloc[-120:-100]\n","a_data = t_df.to_numpy()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ktm1aB-Bh7GH"},"outputs":[],"source":["plt.style.use(['dark_background', 'fast'])\n","fig = plt.figure(figsize=(15, 9))\n","nrows, ncols = 1, 1\n","gs = gridspec.GridSpec(nrows=nrows,  # row 부터 index 채우고 col 채우는 순서임 (gs_idx)\n","                        ncols=ncols\n","                        # height_ratios=[3, 1]\n","                        )\n","\n","ax = fig.add_subplot(gs[0])\n","\n","# ------ candles ------ #\n","candle_plot(a_data[:, col_idx_dict['ohlc_col_idxs']], ax, alpha=1.0, wickwidth=1.0)\n","_ = [step_col_plot(a_data[:, params[0]], *params[1:]) for params in col_idx_dict['step_col_info']]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"jMQBhQ1Ljt5Y"},"outputs":[],"source":["def imb_ratio_v4(df, itv):\n","\n","  itv_num = to_itvnum(itv)\n","\n","  close = df['close_{}'.format(itv)].to_numpy()\n","  open = df['open_{}'.format(itv)].to_numpy()\n","\n","  b1_close = df['close_{}'.format(itv)].shift(itv_num).to_numpy()\n","  b1_open = df['open_{}'.format(itv)].shift(itv_num).to_numpy()\n","  b1_high = df['high_{}'.format(itv)].shift(itv_num).to_numpy()\n","  b1_low = df['low_{}'.format(itv)].shift(itv_num).to_numpy()\n","\n","  body_range = abs(close - open)\n","  b1_body_range = abs(b1_close - b1_open)\n","\n","  df['body_rel_ratio_{}'.format(itv)] = body_range / b1_body_range\n","\n","  short_body_range = np.where(close <= b1_low, body_range, b1_body_range)\n","  long_body_range = np.where(close >= b1_high, body_range, b1_body_range)\n","\n","  # 추후에 통계 측정해야함 -> bir 에 따른 개별 trader 의 epout / tpep 이라던가 => short 에 양봉은 취급안함 (why use np.nan)\n","  df['short_ir_{}'.format(itv)] = np.where(close < open, (b1_low - close) / short_body_range, np.nan) # close < open & close < b1_low\n","  df['long_ir_{}'.format(itv)] = np.where(close > open, (close - b1_high) / long_body_range, np.nan) # close > open & close > b1_high\n","\n","  return"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"I1Vq_BiKpY3P"},"outputs":[],"source":["def imb_ratio_v3(df, itv):\n","\n","  itv_num = to_itvnum(itv)\n","\n","  # high = df['high_{}'.format(itv)].to_numpy()\n","  # low = df['low_{}'.format(itv)].to_numpy()\n","  # candle_range = high - low\n","\n","  close = df['close_{}'.format(itv)].to_numpy()\n","  open = df['open_{}'.format(itv)].to_numpy()\n","\n","  b1_close = df['close_{}'.format(itv)].shift(itv_num).to_numpy()\n","  b1_open = df['open_{}'.format(itv)].shift(itv_num).to_numpy()\n","  b1_high = df['high_{}'.format(itv)].shift(itv_num).to_numpy()\n","  b1_low = df['low_{}'.format(itv)].shift(itv_num).to_numpy()\n","\n","  body_range = abs(close - open)\n","  b1_body_range = abs(b1_close - b1_open)\n","\n","  df['body_rel_ratio_{}'.format(itv)] = body_range / b1_body_range\n","\n","  short_body_ratio = np.where(close <= b1_low, body_range, b1_body_range)\n","  long_body_range = np.where(close >= b1_high, body_range, b1_body_range)\n","\n","  # 추후에 통계 측정해야함 -> bir 에 따른 개별 trader 의 epout / tpep 이라던가 => short 에 양봉은 취급안함 (why use np.nan)\n","  df['short_ir_{}'.format(itv)] = np.where(close < open, (b1_low - close) / body_range, np.nan) # close < open & close < b1_low\n","  df['long_ir_{}'.format(itv)] = np.where(close > open, (close - b1_high) / body_range, np.nan) # close > open & close > b1_high\n","\n","  return"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"mtnMUkhwkdrE"},"outputs":[],"source":["imb_ratio(t_df, \"5T\")\n","# imb_ratio_v3(t_df, \"5T\")\n","# imb_ratio_v4(t_df, \"5T\")\n","\n","t_df.tail(100).short_ir_5T  # .461871\n","# t_df.iloc[:, -10:]\n","# t_df.dtypes"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"RVUs1YE_pgBI"},"outputs":[],"source":["# imb_ratio(t_df, \"5T\")\n","# imb_ratio_v3(t_df, \"5T\")\n","imb_ratio_v4(t_df, \"5T\")\n","\n","t_df.tail(100).short_ir_5T  # .461871\n","# t_df.iloc[:, -10:]\n","# t_df.dtypes"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"bieHiKjBkuFL"},"outputs":[],"source":["# ------ rtc 1, 0 개념 ------ #\n","# short_rtc_1 = close\n","# short_rtc_0 = b1_low\n","\n","# long_rtc_1 = close\n","# long_rtc_0 = b1_high\n","\n","# rtc 로 활용하려면, col 로 추가해야할 것 -> 추가할만한 col_name 은 아님\n","# 1. h_candle 인 경우 -> ?\n","#   a. h_candle_v3 먹이고, open_{}.shift(num_itv).to_numpy() 진행 -> ex. res_df['close_{}'.format(hc_itv)].shift(itv_num).to_numpy() "]},{"cell_type":"code","execution_count":null,"metadata":{"id":"3X6bMXJIjPYy"},"outputs":[],"source":["# 1. 현재 종가 - 이전 고가 = imb_range (long)\n","long_imb_range = t_df.close - t_df.high.shift(1)\n","# 2. 이전 저가 - 현재 종가 - imb_range (short)\n","short_imb_range = t_df.low.shift(1) - t_df.close"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"q1nEA19v7Qpj"},"outputs":[],"source":["from math import floor\n","\n","\n","def _calc_dev(base_price, price):\n","    return 100 * (price - base_price) / base_price\n","\n","\n","def zigzag(highs, lows, depth=10, dev_threshold=5):\n","    def pivots(src_raw, length, isHigh):\n","        src = list(reversed(src_raw))\n","        bar_index = list(range(len(src)))\n","        for start in range(0, len(src)):\n","            if start + 2 * length + 1 > len(src) - 1:\n","                return\n","            p = 0\n","            if length < len(src) - start:\n","                p = src[start + length]\n","            if length == 0:\n","                yield 0, p\n","            else:\n","                isFound = True\n","                for i in range(start, start + length):\n","                    if isHigh and src[i] > p:\n","                        isFound = False\n","                    if not isHigh and src[i] < p:\n","                        isFound = False\n","                for i in range(start + length + 1, start + 2 * length + 1):\n","                    if isHigh and src[i] >= p:\n","                        isFound = False\n","                    c = not isHigh and src[i] <= p\n","                    if c:\n","                        isFound = False\n","                if isFound:\n","                    yield (bar_index[start + length], p)\n","                else:\n","                    yield None, None\n","\n","    data_highs = [x for x in pivots(highs, floor(depth / 2), True) if x[0]]\n","    data_lows = [x for x in pivots(lows, floor(depth / 2), False) if x[0]]\n","\n","    raw_pairs = []\n","\n","    for i, (ind, p) in enumerate(data_highs):\n","        lows_d = sorted([(ind_l, p_l) for ind_l, p_l in data_lows if ind > ind_l], key=lambda x: x[0])\n","        if lows_d:\n","            lows = lows_d[-1]\n","\n","            if abs(_calc_dev(lows[1], p)) >= dev_threshold:\n","                raw_pairs.append(\n","                    ((ind, p),\n","                     (lows[0], lows[1]))\n","                )\n","\n","    result = []\n","\n","    for (i_h, p_h),(i_l, p_l) in raw_pairs:\n","        if not result:\n","            result.append(((i_h, p_h),(i_l, p_l)))\n","            continue\n","\n","        if i_l == result[-1][1][0]:\n","            if p_h > result[-1][0][1]:\n","                result = result[:-1]\n","            else:\n","                continue\n","\n","        result.append(((i_h, p_h),(i_l, p_l)))\n","\n","    return result\n","\n","# highs, lows = t_df.high.to_numpy(), t_df.low.to_numpy()\n","# zigzag(highs, lows, depth=5, dev_threshold=5)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"fGlmdyb97j4Q"},"outputs":[],"source":["t_df = res_df_.iloc[-120:]\n","a_data = t_df.to_numpy()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ropzIp0wUPAA"},"outputs":[],"source":["# import plotly.express as px\n","# import plotly.graph_objects as go\n","\n","def get_dist_plot(c, v, kx, ky):\n","    fig = go.Figure()\n","    fig.add_trace(go.Histogram(name='Vol Profile', x=c, y=v, nbinsx=150, \n","                               histfunc='sum', histnorm='probability density',\n","                               marker_color='#B0C4DE'))\n","    fig.add_trace(go.Scatter(name='KDE', x=kx, y=ky, mode='lines', marker_color='#D2691E'))    \n","\n","    peaks,_ = signal.find_peaks(kdy)\n","    pkx = kdx[peaks]\n","    pky = kdy[peaks]\n","    pk_marker_args=dict(size=10, color='black')\n","    fig.add_trace(go.Scatter(name=\"Peaks\", x=pkx, y=pky, mode='markers', marker=pk_marker_args))\n","    fig.show()\n","\n","    return fig"]},{"cell_type":"markdown","metadata":{"id":"RZJ6uIA_VcJs"},"source":["##### instant."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"nLWAP1Cl2Hvu"},"outputs":[],"source":["def wave_range_ratio(res_df, config, bb_itv, bb_period):\n","\n","  wave_itv = pd.infer_freq(res_df.index)\n","  wave_period = config.tr_set.wave_period\n","\n","  bb_upper_ = res_df['bb_upper_{}{}'.format(bb_itv, bb_period)].to_numpy()\n","  bb_lower_ = res_df['bb_lower_{}{}'.format(bb_itv, bb_period)].to_numpy()\n","  \n","  cu_prime_idx_fill_ = res_df['wave_cu_prime_idx_fill_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","  co_prime_idx_fill_ = res_df['wave_co_prime_idx_fill_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","\n","  cu_bb_range = get_line(co_prime_idx_fill_, bb_upper_) - get_line(co_prime_idx_fill_, bb_lower_)  # cu 에서 co_prime 의 bb_range 사용\n","  co_bb_range = get_line(cu_prime_idx_fill_, bb_upper_) - get_line(cu_prime_idx_fill_, bb_lower_)\n","\n","  wave_range = res_df['wave_high_fill_{}{}'.format(wave_itv, wave_period)].to_numpy() - res_df['wave_low_fill_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","  \n","  res_df['cu_wrr_{}{}'.format(wave_itv, wave_period)] = wave_range / cu_bb_range   # for cu (currently, long)\n","  res_df['co_wrr_{}{}'.format(wave_itv, wave_period)] = wave_range / co_bb_range\n","\n","  return res_df"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"H_zPYIshbZgP"},"outputs":[],"source":["# Todo, future_data\n","def enough_space(res_df, itv, period):\n","\n","  dc_upper_ = res_df['dc_upper_{}{}'.format(itv, period)].to_numpy()\n","  dc_base_ = res_df['dc_base_{}{}'.format(itv, period)].to_numpy()\n","  dc_lower_ = res_df['dc_lower_{}{}'.format(itv, period)].to_numpy()  \n","  high_ = res_df['high_{}'.format(config.loc_set.point.tf_entry)].to_numpy()\n","  low_ = res_df['low_{}'.format(config.loc_set.point.tf_entry)].to_numpy()\n","\n","  half_dc_gap = dc_upper_ - dc_base_\n","\n","  res_df['cu_es_{}{}'.format(itv, period)] = (low_ - dc_lower_) / half_dc_gap\n","  res_df['co_es_{}{}'.format(itv, period)] = (dc_upper_ - high_) / half_dc_gap\n","\n","  return res_df"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"o3IUBc59VR5D"},"outputs":[],"source":["# Todo, future_data\n","def candle_range_ratio(res_df, c_itv, bb_itv, bb_period):\n","\n","  itv_num = to_itvnum(c_itv)\n","\n","  b1_bb_upper_ = res_df['bb_upper_{}{}'.format(bb_itv, bb_period)].shift(itv_num).to_numpy()\n","  b1_bb_lower_ = res_df['bb_lower_{}{}'.format(bb_itv, bb_period)].shift(itv_num).to_numpy()\n","  bb_range = b1_bb_upper_ - b1_bb_lower_   # <-- h_candle's open_idx 의 bb_gap 사용\n","\n","  high_ = res_df['high_{}'.format(c_itv)].to_numpy()\n","  low_ = res_df['low_{}'.format(c_itv)].to_numpy()\n","  candle_range = high_ - low_  # 부호로 양 / 음봉 구분 (양봉 > 0)\n","  \n","  res_df['crr_{}'.format(c_itv)] = candle_range / bb_range\n","\n","  return res_df"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"u3yFd8Dcok5m"},"outputs":[],"source":["def body_rel_ratio(res_df, c_itv):\n","\n","  itv_num = to_itvnum(c_itv)\n","  \n","  b1_close_ = res_df['close_{}'.format(c_itv)].shift(itv_num).to_numpy()\n","  b1_open_ = res_df['open_{}'.format(c_itv)].shift(itv_num).to_numpy()\n","  b1_body_range = abs(b1_close_ - b1_open_)\n","\n","  close_ = res_df['close_{}'.format(c_itv)].to_numpy()\n","  open_ = res_df['open_{}'.format(c_itv)].to_numpy()\n","  body_range = abs(close_ - open_)\n","  \n","  res_df['body_rel_ratio_{}'.format(c_itv)] = body_range / b1_body_range\n","\n","  return res_df\n","\n","def dc_over_body_ratio(res_df, c_itv, dc_itv, dc_period):\n","  close_ = res_df['close_{}'.format(c_itv)].to_numpy()\n","  open_ = res_df['open_{}'.format(c_itv)].to_numpy()\n","  body_range = abs(close_ - open_)\n","  \n","  dc_upper_ = res_df['dc_upper_{}{}'.format(dc_itv, dc_period)].to_numpy()\n","  dc_lower_ = res_df['dc_lower_{}{}'.format(dc_itv, dc_period)].to_numpy() \n","\n","  res_df['dc_upper_{}{}_br'.format(dc_itv, dc_period)] = (close_ - dc_upper_) / body_range\n","  res_df['dc_lower_{}{}_br'.format(dc_itv, dc_period)] = (dc_lower_ - close_) / body_range\n","\n","  return res_df"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"JWj02LLGbnji"},"outputs":[],"source":["def candle_pumping_ratio_v2(res_df, c_itv, dc_itv, period):\n","\n","  res_df = dc_line_v3(res_df, dc_itv, dc_period=period)\n","\n","  dc_upper_ = res_df['dc_upper_{}{}'.format(dc_itv, period)].to_numpy()\n","  dc_lower_ = res_df['dc_lower_{}{}'.format(dc_itv, period)].to_numpy()\n","  dc_range = dc_upper_ - dc_lower_\n"," \n","  open_ = res_df['open_{}'.format(c_itv)].to_numpy()\n","  close_ = res_df['close_{}'.format(c_itv)].to_numpy()\n","  body = close_ - open_  # 부호로 양 / 음봉 구분 (양봉 > 0)\n","  \n","  res_df['cppr_{}'.format(c_itv)] = body / dc_range\n","\n","  return res_df\n","\n","\n","# Todo, future_data\n","def candle_pumping_ratio(res_df, c_itv, bb_itv, period):\n","\n","  itv_num = to_itvnum(c_itv)\n","\n","  # 여기에도 v2 처럼 bb_indi. 추가 (자동화)\n","\n","  b1_bb_upper_ = res_df['bb_upper_{}{}'.format(bb_itv, period)].shift(itv_num).to_numpy()\n","  b1_bb_lower_ = res_df['bb_lower_{}{}'.format(bb_itv, period)].shift(itv_num).to_numpy()\n","  bb_range = b1_bb_upper_ - b1_bb_lower_\n","\n","  open_ = res_df['open_{}'.format(c_itv)].to_numpy()\n","  close_ = res_df['close_{}'.format(c_itv)].to_numpy()\n","  body = close_ - open_  # 부호로 양 / 음봉 구분 (양봉 > 0)\n","  \n","  res_df['cppr_{}'.format(c_itv)] = body / bb_range\n","\n","  return res_df\n","\n","\n","def pumping_ratio(res_df, config, itv, period1, period2):\n","\n","  bb_lower_5T = res_df['bb_lower_5T'].to_numpy()\n","  bb_upper_5T = res_df['bb_upper_5T'].to_numpy()\n","  bb_range = bb_upper_5T - bb_lower_5T\n","\n","  selection_id = config.selection_id\n","  \n","  res_df['short_ppr_{}'.format(selection_id)] = res_df['short_tp_gap_{}'.format(selection_id)].to_numpy() / get_line(res_df['short_wave_high_idx_{}{}{}'.format(itv, period1, period2)].to_numpy(), bb_range)\n","  res_df['long_ppr_{}'.format(selection_id)] = res_df['long_tp_gap_{}'.format(selection_id)].to_numpy() / get_line(res_df['long_wave_low_idx_{}{}{}'.format(itv, period1, period2)].to_numpy(), bb_range)\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"OpkclLSzazZ-"},"outputs":[],"source":["def wave_body_ratio(res_df_, itv, period):\n","  dc_upper_ = res_df_['dc_upper_{}{}'.format(itv, period)].to_numpy()\n","  dc_lower_ = res_df_['dc_lower_{}{}'.format(itv, period)].to_numpy()\n","  close_ = res_df_['close_{}'.format(itv)].to_numpy()\n","  open_ = res_df_['open_{}'.format(itv)].to_numpy()\n","\n","  dc_range = dc_upper_ - dc_lower_\n","  body_range = abs(close_ - open_)\n","\n","  res_df_['wave_body_ratio'] = body_range / dc_range\n","  res_df_['dc_upper_body_ratio'] = (np.maximum(close_, open_) - dc_upper_) / body_range\n","  res_df_['dc_lower_body_ratio'] = (dc_lower_) - np.minimum(close_, open_) / body_range\n","\n","  return"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"0-zzitQRbnz8"},"outputs":[],"source":["# res_df_['wave_body_ratio'].tail(200)\n","\n","itv = 'H'\n","period = 5\n","wave_body_ratio(res_df_, itv, period)"]},{"cell_type":"markdown","metadata":{"id":"qsyPhNR8yP1c"},"source":["##### dump"]},{"cell_type":"markdown","metadata":{"id":"xpyP5t8Ht_pE"},"source":["### calc recursive indi's min_period"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"N1Hbm4OA4Tkk"},"outputs":[],"source":["ticker_prcn = get_precision_by_price(res_df.close.iloc[-1]) + 2\n","\n","target_len = 300000\n","slice_len_list = list(range(50, 10000, 100))\n","slice_len_list.insert(0, target_len)\n","\n","start_0 = time.time()\n","# prev_int_, prev_pnts_ = None, None\n","offset = 1\n","\n","for sl_idx, sample_len in enumerate(slice_len_list):\n","\n","  sample_df = res_df.iloc[-sample_len -offset:-offset]\n","  sample_len2 = sample_len\n","\n","  # --------- input using indi.s --------- #\n","  # res = ema_v0(sample_df['close'], 190)\n","  res = rsi(sample_df, 14)\n","\n","    #    to_htf()    #\n","  # df_5T = to_htf(sample_df, itv_='5T', offset='1h')\n","  # sample_len2 = len(df_5T)\n","\n","  # # --------- input using htf_indi. --------- #\n","  # res = ema(df_5T['close'], 195)\n","  # -------------------------------------- #\n","\n","  res_last_row = res.iloc[-1]\n","  if pd.isnull(res_last_row):\n","    continue\n","\n","  # print(res_last_row)\n","  # break\n","\n","  # sample_df = sample_df.join(to_lower_tf_v2(sample_df, df_5T, [-1]), how='inner')\n","\n","\n","  #   자리수 분할 계산    #\n","  int_, points_ = str(res_last_row).split('.')\n","  pnts_ = points_[:ticker_prcn]\n","\n","  if sl_idx == 0:\n","    target_int_ = int_\n","    target_pnts_ = pnts_\n","    print(\"target {} ({}) -> {} {}\".format(sample_len, sample_len2, int_, points_))\n","\n","  else:\n","    if target_int_ == int_ and target_pnts_ == pnts_:\n","      # print(sample_len, \"({})\".format(sample_len2), '->', int_, pnts_, end='\\n\\n')\n","      print(\"{} ({}) -> {} {}\\n\".format(sample_len, sample_len2, int_, points_))\n","      break\n","\n","print(time.time() - start_0)  # (1301)(1361)(1301)"]},{"cell_type":"markdown","metadata":{"id":"rrIGjmUzqU-D"},"source":["## import utils & config"]},{"cell_type":"code","execution_count":4,"metadata":{"id":"SeJan_0t95yL","executionInfo":{"status":"ok","timestamp":1663388972607,"user_tz":-540,"elapsed":1825,"user":{"displayName":"7th June","userId":"08178289703395036410"}}},"outputs":[],"source":["frame_ver = \"0114_htf\"\n","ID_arr = np.array(['v3', 'v5_2'])\n","\n","utils_public_name = \"{}.utils.{}_utils_public\".format(strat_pkg, frame_ver)\n","utils_public_lib = importlib.import_module(utils_public_name)\n","utils_public = utils_public_lib   # temporary\n","\n","u_name_list = [\"{}.utils.{}_utils_{}\".format(strat_pkg, frame_ver, id_) for id_ in ID_arr]\n","utils_arr = np.array([importlib.import_module(u_name) for u_name in u_name_list])\n","\n","config_name_list = [\"{}_config_{}.json\".format(frame_ver, id_) for id_ in ID_arr]\n","cfg_path_list = [os.path.join(current_path, strat_pkg, \"config\", name_) for name_ in config_name_list]\n","cfg_file_list = [open(cfg_path) for cfg_path in cfg_path_list]\n","config_arr = np.array([EasyDict(json.load(cfg_)) for cfg_ in cfg_file_list])\n","\n","# ------ opened files should be closed --> 닫지 않으면 reopen 시 error occurs ------ #\n","_ = [cfg_.close() for cfg_ in cfg_file_list]\n","show_plot = 1   # idep's var - do not touch"]},{"cell_type":"markdown","metadata":{"id":"leSQlImg4_9L"},"source":["### utils_"]},{"cell_type":"code","execution_count":5,"metadata":{"id":"CB2yZdQ95Cdg","executionInfo":{"status":"ok","timestamp":1663388972607,"user_tz":-540,"elapsed":4,"user":{"displayName":"7th June","userId":"08178289703395036410"}}},"outputs":[],"source":["# import pandas as pd\n","# import numpy as np\n","# import logging\n","\n","def enlist_tr(res_df, config, np_timeidx, mode='OPEN', show_detail=True):\n","\n","    # ================== enlist wave_unit ================== #\n","    selection_id = config.selection_id\n","    \n","    len_df = len(res_df)\n","    len_df_range = np.arange(len_df)\n","\n","    # if config.tr_set.check_hlm == 2:  # 동일한 param 으로도 p2_hlm 시도를 충분히 할 수 있음 (csdbox 와 같은)\n","    #   assert not (wave_itv1 == wave_itv2 and wave_period1 == wave_period2)\n","\n","    # ------------ get wave_features ------------ #      \n","    wave_itv1 = config.tr_set.wave_itv1\n","    wave_period1 = config.tr_set.wave_period1\n","    wave_itv2 = config.tr_set.wave_itv2\n","    wave_period2 = config.tr_set.wave_period2\n","    tc_period = config.tr_set.tc_period\n","    roll_hl_cnt = 3\n","\n","    roll_highs1 = [res_df['wave_high_fill_{}{}_-{}'.format(wave_itv1, wave_period1, cnt_ + 1)].to_numpy() for cnt_ in reversed(range(roll_hl_cnt))]\n","    roll_lows1 = [res_df['wave_low_fill_{}{}_-{}'.format(wave_itv1, wave_period1, cnt_ + 1)].to_numpy() for cnt_ in reversed(range(roll_hl_cnt))]\n","\n","    wave_high_fill1_ = res_df['wave_high_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","    wave_low_fill1_ = res_df['wave_low_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","\n","    roll_highs2 = [res_df['wave_high_fill_{}{}_-{}'.format(wave_itv2, wave_period2, cnt_ + 1)].to_numpy() for cnt_ in reversed(range(roll_hl_cnt))]\n","    roll_lows2 = [res_df['wave_low_fill_{}{}_-{}'.format(wave_itv2, wave_period2, cnt_ + 1)].to_numpy() for cnt_ in reversed(range(roll_hl_cnt))]\n","\n","    wave_high_fill2_ = res_df['wave_high_fill_{}{}'.format(wave_itv2, wave_period2)].to_numpy()\n","    wave_low_fill2_ = res_df['wave_low_fill_{}{}'.format(wave_itv2, wave_period2)].to_numpy()\n","    \n","    # res_df['short_wave_spread_fill_{}{}'.format(wave_itv1, wave_period1)] = roll_highs1[-1] / wave_low_fill1_\n","    # res_df['long_wave_spread_fill_{}{}'.format(wave_itv1, wave_period1)] = wave_high_fill1_ / roll_lows1[-1]\n","    res_df['short_wave_spread_fill_{}{}'.format(wave_itv1, wave_period1)] = wave_high_fill1_ / wave_low_fill1_\n","    res_df['long_wave_spread_fill_{}{}'.format(wave_itv1, wave_period1)] = wave_high_fill1_ / wave_low_fill1_\n","\n","    # ------------ enlist tr_unit ------------ #\n","    # cu's roll_high_[:, -1] = prev_high & cu's roll_low_[:, -1] = current_low\n","    # co's roll_low_[:, -1] = prev_low & co's roll_high_[:, -1] = current_high\n","    res_df['short_tp_1_{}'.format(selection_id)] = wave_low_fill2_   # wave_low_fill1_ b2_low_5T\n","    res_df['short_tp_0_{}'.format(selection_id)] = roll_highs2[-1]   # roll_highs1[-1] wave_high_fill1_  # roll_high_[:, -2]\n","    res_df['long_tp_1_{}'.format(selection_id)] = wave_high_fill2_   # wave_high_fill1_ b2_high_5T\n","    res_df['long_tp_0_{}'.format(selection_id)] = roll_lows2[-1]    # roll_lows1[-1]  wave_low_fill1_   # roll_low_[:, -2]\n","\n","    res_df['short_ep1_1_{}'.format(selection_id)] = wave_low_fill2_ # wave_low_fill1_   # b2_low_5T\n","    res_df['short_ep1_0_{}'.format(selection_id)] = wave_high_fill2_  # wave_high_fill1_  # roll_high_[:, -2]\n","    res_df['long_ep1_1_{}'.format(selection_id)] = wave_high_fill2_ # wave_high_fill1_   # b2_high_5T\n","    res_df['long_ep1_0_{}'.format(selection_id)] = wave_low_fill2_  # wave_low_fill1_    # roll_low_[:, -2]\n","\n","    # --> p2's ep use p1's ep\n","    # res_df['short_ep2_1_{}'.format(selection_id)] = wave_low_fill1_  # wave_low_fill2_   # b2_low_5T\n","    # res_df['short_ep2_0_{}'.format(selection_id)] = wave_high_fill1_ # wave_high_fill2_  # roll_high_[:, -2]\n","    # res_df['long_ep2_1_{}'.format(selection_id)] = wave_high_fill1_  # wave_high_fill2_   # b2_high_5T\n","    # res_df['long_ep2_0_{}'.format(selection_id)] = wave_low_fill1_   # wave_low_fill2_    # roll_low_[:, -2]\n","\n","    # --> out use p1's low, (allow prev_low as out for p1_hhm only)\n","    # res_df['short_out_1_{}'.format(selection_id)] = wave_low_fill1_   # wave_low_fill1_   # wave_low_fill2_   # b2_low_5T\n","    # res_df['short_out_0_{}'.format(selection_id)] = wave_high_fill1_ # roll_highs1[-1] if not config.tr_set.check_hlm else wave_high_fill1_   # roll_highs2[-1]  # roll_high_[:, -2]\n","    # res_df['long_out_1_{}'.format(selection_id)] = wave_high_fill1_   # wave_high_fill1_   # wave_high_fill2_   # b2_high_5T\n","    # res_df['long_out_0_{}'.format(selection_id)] = wave_low_fill1_ # roll_lows1[-1] if not config.tr_set.check_hlm else wave_low_fill1_   # roll_lows2[-1]    # roll_low_[:, -2]\n","    \n","    # below codes exist for p2_wave\n","    res_df['short_ep2_1_{}'.format(selection_id)] = wave_low_fill2_   # b2_low_5T\n","    res_df['short_ep2_0_{}'.format(selection_id)] = wave_high_fill2_  # roll_high_[:, -2]\n","    res_df['long_ep2_1_{}'.format(selection_id)] = wave_high_fill2_   # b2_high_5T\n","    res_df['long_ep2_0_{}'.format(selection_id)] = wave_low_fill2_    # roll_low_[:, -2]\n","\n","    res_df['short_out_1_{}'.format(selection_id)] = wave_low_fill2_\n","    res_df['short_out_0_{}'.format(selection_id)] = roll_highs2[-1]\n","    res_df['long_out_1_{}'.format(selection_id)] = wave_high_fill2_\n","    res_df['long_out_0_{}'.format(selection_id)] = roll_lows2[-1]\n","    \n","\n","    # --- inversion --- #\n","    if config.pos_set.short_inversion or config.pos_set.long_inversion:\n","        res_df.rename({short_tp_1_: long_tp_1_, long_tp_1_: short_tp_1_}, axis=1, inplace=True)\n","        res_df.rename({short_tp_0_: long_tp_0_, long_tp_0_: short_tp_0_}, axis=1, inplace=True)\n","        res_df.rename({short_epout_1_: long_epout_1_, long_epout_1_: short_epout_1_}, axis=1, inplace=True)\n","        res_df.rename({short_epout_0_: long_epout_0_, long_epout_0_: short_epout_0_}, axis=1, inplace=True)\n","\n","    res_df['short_tp_gap_{}'.format(selection_id)] = abs(res_df['short_tp_1_{}'.format(selection_id)] - res_df['short_tp_0_{}'.format(selection_id)])\n","    res_df['long_tp_gap_{}'.format(selection_id)] = abs(res_df['long_tp_1_{}'.format(selection_id)] - res_df['long_tp_0_{}'.format(selection_id)])\n","    res_df['short_ep1_gap_{}'.format(selection_id)] = abs(res_df['short_ep1_1_{}'.format(selection_id)] - res_df['short_ep1_0_{}'.format(selection_id)])\n","    res_df['long_ep1_gap_{}'.format(selection_id)] = abs(res_df['long_ep1_1_{}'.format(selection_id)] - res_df['long_ep1_0_{}'.format(selection_id)])\n","\n","    res_df['short_out_gap_{}'.format(selection_id)] = abs(res_df['short_out_1_{}'.format(selection_id)] - res_df['short_out_0_{}'.format(selection_id)])\n","    res_df['long_out_gap_{}'.format(selection_id)] = abs(res_df['long_out_1_{}'.format(selection_id)] - res_df['long_out_0_{}'.format(selection_id)])\n","    res_df['short_ep2_gap_{}'.format(selection_id)] = abs(res_df['short_ep2_1_{}'.format(selection_id)] - res_df['short_ep2_0_{}'.format(selection_id)])\n","    res_df['long_ep2_gap_{}'.format(selection_id)] = abs(res_df['long_ep2_1_{}'.format(selection_id)] - res_df['long_ep2_0_{}'.format(selection_id)])\n","\n","\n","    data_cols = ['open', 'high', 'low', 'close']  # Todo - public_indi 이전에 해야할지도 모름 # 'close', 'haopen', 'hahigh', 'halow', 'haclose'\n","    open, high, low, close = [res_df[col_].to_numpy() for col_ in data_cols]\n","\n","    # ================== point ================== #     \n","    short_open_res1 = np.ones(len_df) #.astype(object)\n","    long_open_res1 = np.ones(len_df)  #.astype(object)\n","    short_open_res2 = np.ones(len_df) #.astype(object)\n","    long_open_res2 = np.ones(len_df)  #.astype(object)\n","    \n","    # ------------ wave_point ------------ #\n","    notnan_short_tc = ~pd.isnull(res_df['short_tc_{}{}'.format(wave_itv1, wave_period1)].to_numpy())  # isnull for object\n","    notnan_long_tc = ~pd.isnull(res_df['long_tc_{}{}'.format(wave_itv1, wave_period1)].to_numpy())  # isnull for object    \n","\n","    notnan_cu = ~pd.isnull(res_df['wave_cu_{}{}'.format(wave_itv1, wave_period1)].to_numpy())  # isnull for object\n","    notnan_co = ~pd.isnull(res_df['wave_co_{}{}'.format(wave_itv1, wave_period1)].to_numpy())\n","    notnan_cu2 = ~pd.isnull(res_df['wave_cu_{}{}'.format(wave_itv2, wave_period2)].to_numpy())  # isnull for object\n","    notnan_co2 = ~pd.isnull(res_df['wave_co_{}{}'.format(wave_itv2, wave_period2)].to_numpy())\n","\n","    # short_open_res1 *= res_df['wave_cu_{}{}'.format(wave_itv1, wave_period1)].to_numpy().astype(bool) * notnan_cu  # object로 변환되는 경우에 대응해, bool 로 재정의\n","    # long_open_res1 *= res_df['wave_co_{}{}'.format(wave_itv1, wave_period1)].to_numpy().astype(bool) * notnan_co  # np.nan = bool type 으로 True 임..\n","    short_open_res1 *= res_df['short_tc_{}{}'.format(wave_itv1, wave_period1)].to_numpy().astype(bool) * notnan_short_tc\n","    long_open_res1 *= res_df['long_tc_{}{}'.format(wave_itv1, wave_period1)].to_numpy().astype(bool) * notnan_long_tc\n","    short_open_res2 *= res_df['wave_cu_{}{}'.format(wave_itv2, wave_period2)].to_numpy().astype(bool) * notnan_cu2  # object로 변환되는 경우에 대응해, bool 로 재정의\n","    long_open_res2 *= res_df['wave_co_{}{}'.format(wave_itv2, wave_period2)].to_numpy().astype(bool) * notnan_co2  # np.nan = bool type 으로 True 임..\n","    # short_open_res2 *= res_df['short_tc_{}{}'.format(wave_itv2, tc_period)].to_numpy()\n","    # long_open_res2 *= res_df['long_tc_{}{}'.format(wave_itv2, tc_period)].to_numpy()\n","\n","    if show_detail:\n","      sys_log.warning(\"wave_point\")\n","      sys_log.warning(\"np.sum(short_open_res1 == 1) : {}\".format(np.sum(short_open_res1 == 1)))\n","      sys_log.warning(\"np.sum(long_open_res1 == 1) : {}\".format(np.sum(long_open_res1 == 1)))  \n","      sys_log.warning(\"np.sum(short_open_res2 == 1) : {}\".format(np.sum(short_open_res2 == 1)))\n","      sys_log.warning(\"np.sum(long_open_res2 == 1) : {}\".format(np.sum(long_open_res2 == 1)))  \n","    \n","    # ------ reject wave_update_hl ------ #\n","    notnan_update_low_cu = ~pd.isnull(res_df['wave_update_low_cu_bool_{}{}'.format(wave_itv1, wave_period1)].to_numpy())\n","    notnan_update_high_co = ~pd.isnull(res_df['wave_update_high_co_bool_{}{}'.format(wave_itv1, wave_period1)].to_numpy())\n","    notnan_update_low_cu2 = ~pd.isnull(res_df['wave_update_low_cu_bool_{}{}'.format(wave_itv2, wave_period2)].to_numpy())\n","    notnan_update_high_co2 = ~pd.isnull(res_df['wave_update_high_co_bool_{}{}'.format(wave_itv2, wave_period2)].to_numpy())\n","\n","    short_open_res1 *= ~(res_df['wave_update_low_cu_bool_{}{}'.format(wave_itv1, wave_period1)].to_numpy().astype(bool)) * notnan_update_low_cu\n","    long_open_res1 *= ~(res_df['wave_update_high_co_bool_{}{}'.format(wave_itv1, wave_period1)].to_numpy().astype(bool)) * notnan_update_high_co\n","    short_open_res2 *= ~(res_df['wave_update_low_cu_bool_{}{}'.format(wave_itv2, wave_period2)].to_numpy().astype(bool)) * notnan_update_low_cu2\n","    long_open_res2 *= ~(res_df['wave_update_high_co_bool_{}{}'.format(wave_itv2, wave_period2)].to_numpy().astype(bool)) * notnan_update_high_co2\n","\n","    # short_open_res1 *= ~res_df['wave_update_low_cu_bool_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","    # long_open_res1 *= ~res_df['wave_update_high_co_bool_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","    # short_open_res2 *= ~res_df['wave_update_low_cu_bool_{}{}'.format(wave_itv2, wave_period2)].to_numpy()\n","    # long_open_res2 *= ~res_df['wave_update_high_co_bool_{}{}'.format(wave_itv2, wave_period2)].to_numpy()\n","\n","    if show_detail:\n","      sys_log.warning(\"reject update_hl\")\n","      sys_log.warning(\"np.sum(short_open_res1 == 1) : {}\".format(np.sum(short_open_res1 == 1)))\n","      sys_log.warning(\"np.sum(long_open_res1 == 1) : {}\".format(np.sum(long_open_res1 == 1)))  \n","      sys_log.warning(\"np.sum(short_open_res2 == 1) : {}\".format(np.sum(short_open_res2 == 1)))\n","      sys_log.warning(\"np.sum(long_open_res2 == 1) : {}\".format(np.sum(long_open_res2 == 1)))  \n","\n","    # ------ wave_itv ------ #    \n","    if wave_itv1 != 'T':      \n","      wave_itv1_num = to_itvnum(wave_itv1)\n","      short_open_res1 *= np_timeidx % wave_itv1_num == (wave_itv1_num - 1)\n","      long_open_res1 *= np_timeidx % wave_itv1_num == (wave_itv1_num - 1) \n","\n","      if show_detail:\n","        sys_log.warning(\"wave_itv1\")\n","        sys_log.warning(\"np.sum(short_open_res1 == 1) : {}\".format(np.sum(short_open_res1 == 1)))\n","        sys_log.warning(\"np.sum(long_open_res1 == 1) : {}\".format(np.sum(long_open_res1 == 1)))  \n","    \n","    if wave_itv2 != 'T':\n","      wave_itv2_num = to_itvnum(wave_itv2)\n","      short_open_res2 *= np_timeidx % wave_itv2_num == (wave_itv2_num - 1)\n","      long_open_res2 *= np_timeidx % wave_itv2_num == (wave_itv2_num - 1) \n","\n","      if show_detail:\n","        sys_log.warning(\"wave_itv2\")\n","        sys_log.warning(\"np.sum(short_open_res2 == 1) : {}\".format(np.sum(short_open_res2 == 1)))\n","        sys_log.warning(\"np.sum(long_open_res2 == 1) : {}\".format(np.sum(long_open_res2 == 1)))\n","\n","    # ------ wave_mm ------ #\n","    wave_high_terms_cnt_fill1_ = res_df['wave_high_terms_cnt_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","    wave_low_terms_cnt_fill1_ = res_df['wave_low_terms_cnt_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","\n","    short_open_res1 *= (wave_high_terms_cnt_fill1_ > config.tr_set.wave_greater2) & (wave_low_terms_cnt_fill1_ > config.tr_set.wave_greater1)\n","    long_open_res1 *= (wave_low_terms_cnt_fill1_ > config.tr_set.wave_greater2) & (wave_high_terms_cnt_fill1_ > config.tr_set.wave_greater1)\n","\n","    # wave_high_terms_cnt_fill2_ = res_df['wave_high_terms_cnt_fill_{}{}'.format(wave_itv2, wave_period2)].to_numpy()\n","    # wave_low_terms_cnt_fill2_ = res_df['wave_low_terms_cnt_fill_{}{}'.format(wave_itv2, wave_period2)].to_numpy()\n","\n","    # short_open_res2 *= (wave_high_terms_cnt_fill2_ > config.tr_set.wave_greater2) & (wave_low_terms_cnt_fill2_ > config.tr_set.wave_greater1)\n","    # long_open_res2 *= (wave_low_terms_cnt_fill2_ > config.tr_set.wave_greater2) & (wave_high_terms_cnt_fill2_ > config.tr_set.wave_greater1)\n","\n","    if show_detail:\n","      sys_log.warning(\"wave_mm\")\n","      sys_log.warning(\"np.sum(short_open_res1 == 1) : {}\".format(np.sum(short_open_res1 == 1)))\n","      sys_log.warning(\"np.sum(long_open_res1 == 1) : {}\".format(np.sum(long_open_res1 == 1)))\n","      # sys_log.warning(\"np.sum(short_open_res2 == 1) : {}\".format(np.sum(short_open_res2 == 1)))\n","      # sys_log.warning(\"np.sum(long_open_res2 == 1) : {}\".format(np.sum(long_open_res2 == 1)))\n","\n","    # ------ wave_length ------ #\n","    if config.tr_set.wave_length1 != \"None\": \n","      short_wave_length_fill_ = res_df['short_wave_length_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","      long_wave_length_fill_ = res_df['long_wave_length_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","\n","      short_open_res1 *= short_wave_length_fill_ >= config.tr_set.wave_length1\n","      long_open_res1 *= long_wave_length_fill_ >= config.tr_set.wave_length1\n","\n","      if show_detail:\n","        sys_log.warning(\"wave_length\")\n","        sys_log.warning(\"np.sum(short_open_res1 == 1) : {}\".format(np.sum(short_open_res1 == 1)))\n","        sys_log.warning(\"np.sum(long_open_res1 == 1) : {}\".format(np.sum(long_open_res1 == 1)))\n","\n","    # ------ wave_spread ------ #\n","    if config.tr_set.wave_spread1 != \"None\":\n","      short_wave_spread_fill = res_df['short_wave_spread_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","      long_wave_spread_fill = res_df['long_wave_spread_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","\n","      short_open_res1 *= short_wave_spread_fill >= config.tr_set.wave_spread1\n","      long_open_res1 *= long_wave_spread_fill >= config.tr_set.wave_spread1\n","\n","      if show_detail:\n","        sys_log.warning(\"wave_spread\")\n","        sys_log.warning(\"np.sum(short_open_res1 == 1) : {}\".format(np.sum(short_open_res1 == 1)))\n","        sys_log.warning(\"np.sum(long_open_res1 == 1) : {}\".format(np.sum(long_open_res1 == 1)))      \n","\n","    # ------ wave_time_ratio ------ #\n","    if config.tr_set.wave_time_ratio1 != \"None\":\n","      short_wave_time_ratio = res_df['short_wave_time_ratio_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","      long_wave_time_ratio = res_df['long_wave_time_ratio_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","\n","      short_open_res1 *= short_wave_time_ratio >= config.tr_set.wave_time_ratio1\n","      long_open_res1 *= long_wave_time_ratio >= config.tr_set.wave_time_ratio1\n","\n","      if show_detail:\n","        sys_log.warning(\"wave_time_ratio\")\n","        sys_log.warning(\"np.sum(short_open_res1 == 1) : {}\".format(np.sum(short_open_res1 == 1)))\n","        sys_log.warning(\"np.sum(long_open_res1 == 1) : {}\".format(np.sum(long_open_res1 == 1)))   \n","\n","\n","    # ------------ 추세선 리스트 ------------ #\n","    # ------ ma & prev_low ------ #    \n","    # ma_period = 60\n","\n","    # short_prev_ma_ = res_df['short_ma_T{}_-1'.format(ma_period)].to_numpy()\n","    # long_prev_ma_ = res_df['long_ma_T{}_-1'.format(ma_period)].to_numpy()    \n","    \n","    # short_open_res1 *= short_prev_ma_ > roll_highs1[-1]  # Todo, index sync. 요망\n","    # long_open_res1 *= long_prev_ma_ < roll_lows1[-1]\n","\n","    # if show_detail:\n","    #   sys_log.warning(\"ma & prev_low\")\n","    #   sys_log.warning(\"np.sum(short_open_res1 == 1) : {}\".format(np.sum(short_open_res1 == 1)))\n","    #   sys_log.warning(\"np.sum(long_open_res1 == 1) : {}\".format(np.sum(long_open_res1 == 1)))     \n","\n","\n","    # ================== tr_set ================== #\n","    # ------------ tp ------------ #\n","    tpg = config.tr_set.tp_gap\n","    res_df['short_tp_{}'.format(selection_id)] = res_df['short_tp_1_{}'.format(selection_id)].to_numpy() - res_df['short_tp_gap_{}'.format(selection_id)].to_numpy() * tpg\n","    res_df['long_tp_{}'.format(selection_id)] = res_df['long_tp_1_{}'.format(selection_id)].to_numpy() + res_df['long_tp_gap_{}'.format(selection_id)].to_numpy() * tpg\n","    # res_df['short_tp_{}'.format(selection_id)] = short_tp_1 - short_epout_gap * tpg\n","    # res_df['long_tp_{}'.format(selection_id)] = long_tp_1 + long_epout_gap * tpg\n","\n","    # ------ limit_ep1 ------ #\n","    if config.ep_set.entry_type == \"LIMIT\":\n","        epg1 = config.tr_set.ep_gap1\n","\n","        # ------ epbox as epg ------ #\n","        # res_df['short_ep1_{}'.format(selection_id)] = res_df['short_ep1_0_{}'.format(selection_id)].to_numpy() + res_df['short_ep1_gap_{}'.format(selection_id)].to_numpy() * epg1\n","        # res_df['long_ep1_{}'.format(selection_id)] = res_df['long_ep1_0_{}'.format(selection_id)].to_numpy() - res_df['long_ep1_gap_{}'.format(selection_id)].to_numpy() * epg1     \n","\n","        # ------ tpbox as epg ------ #\n","        # p1_hlm 을 위해선, tp_0 를 기준할 수 없음 --> ep1 & ep2 를 기준으로 진행\n","        # res_df['short_ep1_{}'.format(selection_id)] = res_df['short_ep1_0_{}'.format(selection_id)].to_numpy() + res_df['short_tp_gap_{}'.format(selection_id)].to_numpy() * epg1  # fibonacci 고려하면, tp / out gap 기준이 맞지 않을까\n","        # res_df['long_ep1_{}'.format(selection_id)] = res_df['long_ep1_0_{}'.format(selection_id)].to_numpy() - res_df['long_tp_gap_{}'.format(selection_id)].to_numpy() * epg1      \n","        \n","        # ------ fibo_ep ------ #\n","        res_df['short_ep1_{}'.format(selection_id)] = res_df['short_tp_0_{}'.format(selection_id)].to_numpy() + res_df['short_tp_gap_{}'.format(selection_id)].to_numpy() * epg1  # fibonacci 고려하면, tp / out gap 기준이 맞지 않을까\n","        res_df['long_ep1_{}'.format(selection_id)] = res_df['long_tp_0_{}'.format(selection_id)].to_numpy() - res_df['long_tp_gap_{}'.format(selection_id)].to_numpy() * epg1    \n","                \n","    # ------ market_ep1 ------ #\n","    else:\n","        res_df['short_ep1_{}'.format(selection_id)] = close\n","        res_df['long_ep1_{}'.format(selection_id)] = close\n","    \n","    # ------ limit_ep2 ------ #   \n","    if config.ep_set.point2.entry_type == \"LIMIT\":\n","        epg2 = config.tr_set.ep_gap2\n","\n","        # # ------ epbox as epg ------ #\n","        # res_df['short_ep2_{}'.format(selection_id)] = res_df['short_ep2_0_{}'.format(selection_id)].to_numpy() + res_df['short_ep2_gap_{}'.format(selection_id)].to_numpy() * epg2\n","        # res_df['long_ep2_{}'.format(selection_id)] = res_df['long_ep2_0_{}'.format(selection_id)].to_numpy() - res_df['long_ep2_gap_{}'.format(selection_id)].to_numpy() * epg2  \n","\n","        # ------ outbox as epg ------ # --> ep1 & ep2 를 기준으로 진행\n","        # res_df['short_ep2_{}'.format(selection_id)] = res_df['short_ep2_0_{}'.format(selection_id)].to_numpy() + res_df['short_out_gap_{}'.format(selection_id)].to_numpy() * epg2\n","        # res_df['long_ep2_{}'.format(selection_id)] = res_df['long_ep2_0_{}'.format(selection_id)].to_numpy() - res_df['long_out_gap_{}'.format(selection_id)].to_numpy() * epg2  \n","        \n","        # ------ fibo_ep by tp_box ------ #\n","        # res_df['short_ep2_{}'.format(selection_id)] = res_df['short_tp_0_{}'.format(selection_id)].to_numpy() + res_df['short_tp_gap_{}'.format(selection_id)].to_numpy() * epg2  # fibonacci 고려하면, tp / out gap 기준이 맞지 않을까\n","        # res_df['long_ep2_{}'.format(selection_id)] = res_df['long_tp_0_{}'.format(selection_id)].to_numpy() - res_df['long_tp_gap_{}'.format(selection_id)].to_numpy() * epg2   \n","        \n","        # ------ fibo_ep by out_box ------ #        \n","        res_df['short_ep2_{}'.format(selection_id)] = res_df['short_out_0_{}'.format(selection_id)].to_numpy() + res_df['short_out_gap_{}'.format(selection_id)].to_numpy() * epg2  # fibonacci 고려하면, tp / out gap 기준이 맞지 않을까\n","        res_df['long_ep2_{}'.format(selection_id)] = res_df['long_out_0_{}'.format(selection_id)].to_numpy() - res_df['long_out_gap_{}'.format(selection_id)].to_numpy() * epg2   \n","\n","    # ------ market_ep2 ------ #\n","    else: \n","        res_df['short_ep2_{}'.format(selection_id)] = close\n","        res_df['long_ep2_{}'.format(selection_id)] = close\n","                \n","\n","    # ------------ out ------------ #\n","    outg = config.tr_set.out_gap\n","    # res_df['short_out_{}'.format(selection_id)] = short_tp_0 + short_tp_gap * outg            # 1. for hhm check -> 규칙성과 wave_range 기반 거래 기준의 hhm 확인\n","    # res_df['long_out_{}'.format(selection_id)] = long_tp_0 - long_tp_gap * outg\n","\n","    if config.tr_set.check_hlm == 0:\n","      res_df['short_out_{}'.format(selection_id)] = res_df['short_tp_0_{}'.format(selection_id)].to_numpy() + res_df['short_tp_gap_{}'.format(selection_id)].to_numpy() * outg\n","      res_df['long_out_{}'.format(selection_id)] = res_df['long_tp_0_{}'.format(selection_id)].to_numpy() - res_df['long_tp_gap_{}'.format(selection_id)].to_numpy() * outg\n","      \n","      # ------ ep1box as outg ------ #\n","      # res_df['short_out_{}'.format(selection_id)] = res_df['short_ep1_0_{}'.format(selection_id)].to_numpy() + res_df['short_ep1_gap_{}'.format(selection_id)].to_numpy() * outg\n","      # res_df['long_out_{}'.format(selection_id)] = res_df['long_ep1_0_{}'.format(selection_id)].to_numpy() - res_df['long_ep1_gap_{}'.format(selection_id)].to_numpy() * outg \n","\n","    elif config.tr_set.check_hlm == 1:    # for p1_hlm\n","      # ------ irregular - next_fibo ------ #\n","      # co_wrr_32_ = res_df['co_wrr_32_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","      # cu_wrr_32_ = res_df['cu_wrr_32_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","\n","      # short_next_fibo_outg = np.vectorize(get_next_fibo_gap2)(cu_wrr_32_)\n","      # long_next_fibo_outg = np.vectorize(get_next_fibo_gap2)(co_wrr_32_)\n","\n","      # res_df['short_out_{}'.format(selection_id)] = res_df['short_tp_0_{}'.format(selection_id)].to_numpy() + res_df['short_tp_gap_{}'.format(selection_id)].to_numpy() * short_next_fibo_outg  # ep 와 마찬가지로, tpg 기준 가능\n","      # res_df['long_out_{}'.format(selection_id)] = res_df['long_tp_0_{}'.format(selection_id)].to_numpy() - res_df['long_tp_gap_{}'.format(selection_id)].to_numpy() * long_next_fibo_outg \n","\n","      # ------ ep1box as outg ------ #\n","      # res_df['short_out_{}'.format(selection_id)] = res_df['short_ep1_0_{}'.format(selection_id)].to_numpy() + res_df['short_ep1_gap_{}'.format(selection_id)].to_numpy() * outg\n","      # res_df['long_out_{}'.format(selection_id)] = res_df['long_ep1_0_{}'.format(selection_id)].to_numpy() - res_df['long_ep1_gap_{}'.format(selection_id)].to_numpy() * outg \n","\n","      # ------ 1_tr - ep1box as outg ------ #\n","      # res_df['short_out_{}'.format(selection_id)] = res_df['short_ep1_0_{}'.format(selection_id)].to_numpy() + res_df['short_ep1_gap_{}'.format(selection_id)].to_numpy() * outg\n","      # res_df['long_out_{}'.format(selection_id)] = res_df['long_ep1_0_{}'.format(selection_id)].to_numpy() - res_df['long_ep1_gap_{}'.format(selection_id)].to_numpy() * outg \n","      \n","      # ------ 1_tr - auto_calculation by ep1 ------ #\n","      # res_df['short_out_{}'.format(selection_id)] = res_df['short_ep1_{}'.format(selection_id)] + (res_df['short_ep1_{}'.format(selection_id)].to_numpy() - res_df['short_tp_{}'.format(selection_id)].to_numpy())\n","      # res_df['long_out_{}'.format(selection_id)] = res_df['long_ep1_{}'.format(selection_id)].to_numpy() - (res_df['long_tp_{}'.format(selection_id)].to_numpy() - res_df['long_ep1_{}'.format(selection_id)].to_numpy())\n","\n","      # ------ tpbox as outg ------ #\n","      # res_df['short_out_{}'.format(selection_id)] = res_df['short_ep1_0_{}'.format(selection_id)].to_numpy() + res_df['short_tp_gap_{}'.format(selection_id)].to_numpy() * outg  # ep 와 마찬가지로, tpg 기준 가능\n","      # res_df['long_out_{}'.format(selection_id)] = res_df['long_ep1_0_{}'.format(selection_id)].to_numpy() - res_df['long_tp_gap_{}'.format(selection_id)].to_numpy() * outg \n","      \n","      # ------ fibo_out ------ #      \n","      res_df['short_out_{}'.format(selection_id)] = res_df['short_tp_0_{}'.format(selection_id)].to_numpy() + res_df['short_tp_gap_{}'.format(selection_id)].to_numpy() * outg  # ep 와 마찬가지로, tpg 기준 가능\n","      res_df['long_out_{}'.format(selection_id)] = res_df['long_tp_0_{}'.format(selection_id)].to_numpy() - res_df['long_tp_gap_{}'.format(selection_id)].to_numpy() * outg \n","    \n","    else:  # p2_hlm    \n","      # ------ outbox as out ------ #\n","      res_df['short_out_{}'.format(selection_id)] = res_df['short_out_0_{}'.format(selection_id)].to_numpy() + res_df['short_out_gap_{}'.format(selection_id)].to_numpy() * outg\n","      res_df['long_out_{}'.format(selection_id)] = res_df['long_out_0_{}'.format(selection_id)].to_numpy() - res_df['long_out_gap_{}'.format(selection_id)].to_numpy() * outg\n","\n","      # res_df['short_out_{}'.format(selection_id)] = res_df['short_tp_0_{}'.format(selection_id)].to_numpy() + res_df['short_tp_gap_{}'.format(selection_id)].to_numpy() * outg\n","      # res_df['long_out_{}'.format(selection_id)] = res_df['long_tp_0_{}'.format(selection_id)].to_numpy() - res_df['long_tp_gap_{}'.format(selection_id)].to_numpy() * outg\n","\n","      # ------ ep2box as out ------ #\n","      # res_df['short_out_{}'.format(selection_id)] = res_df['short_ep2_0_{}'.format(selection_id)].to_numpy() + res_df['short_ep2_gap_{}'.format(selection_id)].to_numpy() * outg   # p2's ep_box 를 out 으로 사용한다?\n","      # res_df['long_out_{}'.format(selection_id)] = res_df['long_ep2_0_{}'.format(selection_id)].to_numpy() - res_df['long_ep2_gap_{}'.format(selection_id)].to_numpy() * outg     \n","      \n","\n","    # ------------ point validation ------------ # - vecto. 로 미리 거를 수 있는걸 거르면 좋을 것\n","    short_tp_ = res_df['short_tp_{}'.format(selection_id)].to_numpy()\n","    short_ep1_ = res_df['short_ep1_{}'.format(selection_id)].to_numpy()\n","    short_ep2_ = res_df['short_ep2_{}'.format(selection_id)].to_numpy()\n","    short_out_ = res_df['short_out_{}'.format(selection_id)].to_numpy()\n","\n","    long_tp_ = res_df['long_tp_{}'.format(selection_id)].to_numpy()\n","    long_ep1_ = res_df['long_ep1_{}'.format(selection_id)].to_numpy()\n","    long_ep2_ = res_df['long_ep2_{}'.format(selection_id)].to_numpy()\n","    long_out_ = res_df['long_out_{}'.format(selection_id)].to_numpy()\n","\n","    # ------ p1 point_validation ------ #\n","    short_open_res1 *= (short_tp_ < short_ep1_) & (short_ep1_ < short_out_)  # tr_set validation reject nan data & 정상 거래 위한 tp > ep / --> p2_box location (cannot be vectorized)\n","    # short_open_res1 *= close < short_ep1_   # reject entry open_execution\n","    short_open_res1 *= close < short_out_ # res_df['short_ep1_0_{}'.format(selection_id)].to_numpy()   # reject hl_out open_execution -> close always < ep1_0 at wave_p1\n","    # short_out_  res_df['short_tp_0_{}'.format(selection_id)].to_numpy() res_df['short_ep1_0_{}'.format(selection_id)].to_numpy()\n","\n","    long_open_res1 *= (long_tp_ > long_ep1_) & (long_ep1_ > long_out_)  # (long_tp_ > long_ep_) # tr_set validation     \n","    # long_open_res1 *= close > long_ep1_  # reject entry open_execution    \n","    long_open_res1 *= close > long_out_ # res_df['long_ep1_0_{}'.format(selection_id)].to_numpy()  # reject hl_out open_execution  \n","    # long_out_ res_df['long_tp_0_{}'.format(selection_id)].to_numpy() res_df['long_ep1_0_{}'.format(selection_id)].to_numpy()\n","\n","    # ------ p2 point_validation ------ # --> executed in en_ex_pairing() function.\n","    # short_open_res2 *= (short_ep2_ < short_out_) # tr_set validation (short_tp_ < short_ep_) # --> p2_box location (cannot be vectorized)\n","    # short_open_res2 *= close < short_out_    # reject hl_out open_execution\n","\n","    # long_open_res2 *= (long_ep2_ > long_out_)  # tr_set validation (long_tp_ > long_ep_) &   # p2's ep & out cannot be vectorized\n","    # long_open_res2 *= close > long_out_    # reject hl_out open_execution\n","\n","    res_df['short_open1_{}'.format(selection_id)] = short_open_res1 * (not config.pos_set.short_ban)\n","    res_df['long_open1_{}'.format(selection_id)] = long_open_res1 * (not config.pos_set.long_ban)\n","    # print(\"res_df['long_open1_{}'.format(selection_id)].to_numpy() :\", res_df['long_open1_{}'.format(selection_id)].to_numpy()) \n","    res_df['short_open2_{}'.format(selection_id)] = short_open_res2\n","    res_df['long_open2_{}'.format(selection_id)] = long_open_res2\n","\n","    if show_detail:\n","      sys_log.warning(\"point validation\")\n","      sys_log.warning(\"np.sum(short_open_res1 == 1) : {}\".format(np.sum(short_open_res1 == 1)))\n","      sys_log.warning(\"np.sum(long_open_res1 == 1) : {}\".format(np.sum(long_open_res1 == 1)))\n","      # sys_log.warning(\"np.sum(short_open_res2 == 1) : {}\".format(np.sum(short_open_res2 == 1)))\n","      # sys_log.warning(\"np.sum(long_open_res2 == 1) : {}\".format(np.sum(long_open_res2 == 1)))\n","    \n","    # ------------ higher_high momentum ------------ #\n","    # wb_tpg = config.tr_set.wb_tp_gap\n","    # wb_outg = config.tr_set.wb_out_gap\n","    # res_df['short_wave_1_{}'.format(selection_id)] = res_df['short_tp_1_{}'.format(selection_id)].to_numpy() - res_df['short_tp_gap_{}'.format(selection_id)].to_numpy() * wb_tpg\n","    # res_df['long_wave_1_{}'.format(selection_id)] = res_df['long_tp_1_{}'.format(selection_id)].to_numpy() + res_df['long_tp_gap_{}'.format(selection_id)].to_numpy() * wb_tpg\n","    \n","    # res_df['short_wave_0_{}'.format(selection_id)] = res_df['short_tp_0_{}'.format(selection_id)].to_numpy() + res_df['short_tp_gap_{}'.format(selection_id)].to_numpy() * wb_outg        # hhm check\n","    # res_df['long_wave_0_{}'.format(selection_id)] = res_df['long_tp_0_{}'.format(selection_id)].to_numpy() - res_df['long_tp_gap_{}'.format(selection_id)].to_numpy() * wb_outg\n","    # res_df['short_wave_0_{}'.format(selection_id)] = short_epout_0 + short_epout_gap * wb_outg\n","    # res_df['long_wave_0_{}'.format(selection_id)] = long_epout_0 - long_epout_gap * wb_outg\n","\n","    # ------ tr ------ #\n","    if config.tr_set.check_hlm == 2:\n","      res_df['short_tr_{}'.format(selection_id)] = np.nan\n","      res_df['long_tr_{}'.format(selection_id)] = np.nan\n","    else:      \n","      res_df['short_tr_{}'.format(selection_id)] = abs(\n","          (short_ep1_ / short_tp_ - config.trader_set.limit_fee - 1) / (short_ep1_ / short_out_ - config.trader_set.market_fee - 1))   # 이게 맞음, loss 의 분모 > 분자 & profit 의 분모 < 분자\n","      res_df['long_tr_{}'.format(selection_id)] = abs(\n","          (long_tp_ / long_ep1_ - config.trader_set.limit_fee - 1) / (long_out_ / long_ep1_ - config.trader_set.market_fee - 1))\n","\n","    # ------ zoned_ep ------ #\n","    # if config.tr_set.c_ep_gap != \"None\":\n","    #     # res_df['short_ep_org_{}'.format(selection_id)] = res_df['short_ep_{}'.format(selection_id)].copy()\n","    #     # res_df['long_ep_org_{}'.format(selection_id)] = res_df['long_ep_{}'.format(selection_id)].copy()\n","    #     res_df['short_ep2_{}'.format(selection_id)] = short_epout_1 + short_epout_gap * config.tr_set.c_ep_gap\n","    #     res_df['long_ep2_{}'.format(selection_id)] = long_epout_1 - long_epout_gap * config.tr_set.c_ep_gap\n","\n","    # # ------ zoned_out ------ #\n","    # if config.tr_set.t_out_gap != \"None\":\n","    #     # res_df['short_out_org_{}'.format(selection_id)] = res_df['short_out_{}'.format(selection_id)].copy()\n","    #     # res_df['long_out_org_{}'.format(selection_id)] = res_df['long_out_{}'.format(selection_id)].copy()\n","    #     res_df['short_out2_{}'.format(selection_id)] = short_epout_0 + short_epout_gap * config.tr_set.t_out_gap\n","    #     res_df['long_out2_{}'.format(selection_id)] = long_epout_0 - long_epout_gap * config.tr_set.t_out_gap\n","\n","    return res_df\n"]},{"cell_type":"markdown","metadata":{"id":"HuCb0phoPN83"},"source":["#### legacy"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"-DNPumVZi0xs"},"outputs":[],"source":["\n","\n","    # ------ wave_point 분리 ------ #\n","    # cci_ = res_df['cci_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","    # b1_cci_ = res_df['cci_{}{}'.format(wave_itv1, wave_period1)].shift(1).to_numpy()        \n","    \n","    # band_width = 100\n","    # upper_band = band_width\n","    # lower_band = -band_width\n","\n","    # update_low_cu_bool = res_df['update_low_cu_bool_{}{}'.format(wave_itv1, wave_period1)]\n","    # update_high_co_bool = res_df['update_high_co_bool_{}{}'.format(wave_itv1, wave_period1)]\n","\n","    # short_open_res1 *= (b1_cci_ > upper_band) & (upper_band > cci_) & ~update_low_cu_bool\n","    # long_open_res1 *= (b1_cci_ < lower_band) & (lower_band < cci_) & ~update_high_co_bool   \n","\n","    \n","# ------------ csd ------------ #\n","    # ------ dc ------ #\n","    # dc_upper_ = res_df['dc_upper_T30'].to_numpy()    \n","    # dc_lower_ = res_df['dc_lower_T30'].to_numpy()    \n","\n","    # # Todo, post_cu ~ co 의 dc_lower == low (=touched) 여부 조사\n","    # short_open_idx1 = get_index_bybool(short_open_res1, len_df_range)\n","    # long_open_idx1 = get_index_bybool(long_open_res1, len_df_range)\n","    # wave_co_post_idx_fill_ = res_df['wave_co_post_idx_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","    # wave_cu_post_idx_fill_ = res_df['wave_cu_post_idx_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()   # co_prime_idx (wave_high 정보를 지정하기 위한 front co_idx 지정)\n","\n","    # # 1. dc_lower == low 여부 조사, np.nan 덕분에 vectorize 불가하다고 봄\n","    # short_valid_idx_bool = ~(pd.isnull(wave_co_post_idx_fill_) | pd.isnull(short_open_idx1)) # get_index_bybool\n","    # dc_upper_touch = dc_upper_ <= high\n","    # dc_upper_touch_span = np.full(len_df, np.nan)\n","    # dc_upper_touch_span[short_valid_idx_bool] = [dc_upper_touch[int(iin):int(iout) + 1].sum() for iin, iout in zip(wave_co_post_idx_fill_, short_open_idx1) if not pd.isnull(iin) if not pd.isnull(iout)]\n","\n","    # long_valid_idx_bool = ~(pd.isnull(wave_cu_post_idx_fill_) | pd.isnull(long_open_idx1)) # get_index_bybool\n","    # dc_lower_touch = dc_lower_ >= low\n","    # dc_lower_touch_span = np.full(len_df, np.nan)\n","    # dc_lower_touch_span[long_valid_idx_bool] = [dc_lower_touch[int(iin):int(iout) + 1].sum() for iin, iout in zip(wave_cu_post_idx_fill_, long_open_idx1) if not pd.isnull(iin) if not pd.isnull(iout)]\n","\n","    # short_open_res1 *= dc_upper_touch_span == 0\n","    # long_open_res1 *= dc_lower_touch_span == 0\n","\n","    # if show_detail:\n","    #   sys_log.warning(\"csd - dc\")\n","    #   sys_log.warning(\"np.sum(short_open_res1 == 1) : {}\".format(np.sum(short_open_res1 == 1)))\n","    #   sys_log.warning(\"np.sum(long_open_res1 == 1) : {}\".format(np.sum(long_open_res1 == 1)))\n","    #   # sys_log.warning(\"np.sum(short_open_res2 == 1) : {}\".format(np.sum(short_open_res2 == 1)))\n","    #   # sys_log.warning(\"np.sum(long_open_res2 == 1) : {}\".format(np.sum(long_open_res2 == 1)))   \n","    \n","    # ================== pattern depiction ================== #  \n","    # bb_upper_ = res_df['bb_upper_{}{}'.format('T', 60)].to_numpy()\n","    # bb_lower_ = res_df['bb_lower_{}{}'.format('T', 60)].to_numpy()\n","    # bb_upper2_ = res_df['bb_upper2_{}{}'.format('T', 60)].to_numpy()\n","    # bb_lower2_ = res_df['bb_lower2_{}{}'.format('T', 60)].to_numpy()\n","    # bb_upper3_ = res_df['bb_upper3_{}{}'.format('T', 60)].to_numpy()\n","    # bb_lower3_ = res_df['bb_lower3_{}{}'.format('T', 60)].to_numpy()\n","    \n","    # ------ 양 / 음봉 (long) ------ #\n","    # short_open_res1 *= close < open\n","    # long_open_res1 *= close > open\n","\n","    # if show_detail:\n","    #   sys_log.warning(\"close > open\")\n","    #   sys_log.warning(\"np.sum(short_open_res1 == 1) : {}\".format(np.sum(short_open_res1 == 1)))\n","    #   sys_log.warning(\"np.sum(long_open_res1 == 1) : {}\".format(np.sum(long_open_res1 == 1)))\n","\n","    \n","    # # ------ even_break, hhhl (long) ------ #        \n","    # # cu's roll_high_[:, -1] = prev_high & cu's roll_low_[:, -1] = current_low\n","    # # co's roll_low_[:, -1] = prev_low & co's roll_high_[:, -1] = current_high\n","    # short_open_res1 *= (roll_low_[:, -2] > roll_low_[:, -1]) # & (roll_high_[:, -2] > roll_high_[:, -1])\n","    # long_open_res1 *= (roll_high_[:, -2] < roll_high_[:, -1]) # & (roll_low_[:, -2] < roll_low_[:, -1])\n","\n","    # if show_detail:\n","    #   sys_log.warning(\"even_break\")\n","    #   sys_log.warning(\"np.sum(short_open_res1 == 1) : {}\".format(np.sum(short_open_res1 == 1)))\n","    #   sys_log.warning(\"np.sum(long_open_res1 == 1) : {}\".format(np.sum(long_open_res1 == 1)))\n","\n","    # # ------ roll_high < bb_upper2 (long) ------ #\n","    # short_open_res1 *= (roll_low_[:, -4] > roll_low_bb_lower2_[:, -4])\n","    # short_open_res1 *= (roll_low_[:, -3] > roll_low_bb_lower2_[:, -3])\n","    # short_open_res1 *= (roll_low_[:, -2] > roll_low_bb_lower2_[:, -2])\n","    # short_open_res1 *= (roll_low_[:, -1] > roll_low_bb_lower2_[:, -1])\n","\n","    # long_open_res1 *= (roll_high_[:, -4] < roll_high_bb_upper2_[:, -4])\n","    # long_open_res1 *= (roll_high_[:, -3] < roll_high_bb_upper2_[:, -3])\n","    # long_open_res1 *= (roll_high_[:, -2] < roll_high_bb_upper2_[:, -2])\n","    # long_open_res1 *= (roll_high_[:, -1] < roll_high_bb_upper2_[:, -1])\n","    \n","    # if show_detail:\n","    #   sys_log.warning(\"roll_high < bb_upper2\")\n","    #   sys_log.warning(\"np.sum(short_open_res1 == 1) : {}\".format(np.sum(short_open_res1 == 1)))\n","    #   sys_log.warning(\"np.sum(long_open_res1 == 1) : {}\".format(np.sum(long_open_res1 == 1)))\n","\n","\n","    # ------ get candle_lastidx ------ #        \n","    # tf_entry = to_itvnum(config.loc_set.point.tf_entry)\n","    # b1_shift = np_timeidx % tf_entry + 1  # dynamic\n","    # b1_candle_lastidx = (len_df_range - b1_shift).astype(float)\n","    # b2_candle_lastidx = (len_df_range - (b1_shift + tf_entry)).astype(float)\n","    # b3_candle_lastidx = (len_df_range - (b1_shift + 2 * tf_entry)).astype(float)\n","    # b1_candle_lastidx[b1_candle_lastidx < 0] = np.nan\n","    # b2_candle_lastidx[b2_candle_lastidx < 0] = np.nan\n","    # b3_candle_lastidx[b3_candle_lastidx < 0] = np.nan\n","\n","    # high_5T = res_df['high_5T'].to_numpy()\n","    # low_5T = res_df['low_5T'].to_numpy()\n","\n","    # b2_high_5T = get_line(b2_candle_lastidx, high_5T)\n","    # b2_low_5T = get_line(b2_candle_lastidx, low_5T)\n","    \n","        # # ------ bb_stream ------ #        \n","        # roll_high_bb_upper_ = get_roll_wave_data(valid_high_prime_idx, roll_high_idx_arr, len_df, bb_upper_, roll_hl_cnt)\n","        # roll_low_bb_upper_ = get_roll_wave_data(valid_low_prime_idx, roll_low_idx_arr, len_df, bb_upper_, roll_hl_cnt)\n","        # roll_high_bb_upper2_ = get_roll_wave_data(valid_high_prime_idx, roll_high_idx_arr, len_df, bb_upper2_, roll_hl_cnt)\n","        # roll_low_bb_upper2_ = get_roll_wave_data(valid_low_prime_idx, roll_low_idx_arr, len_df, bb_upper2_, roll_hl_cnt)\n","\n","        # roll_high_bb_lower_ = get_roll_wave_data(valid_high_prime_idx, roll_high_idx_arr, len_df, bb_lower_, roll_hl_cnt)\n","        # roll_low_bb_lower_ = get_roll_wave_data(valid_low_prime_idx, roll_low_idx_arr, len_df, bb_lower_, roll_hl_cnt)\n","        # roll_high_bb_lower2_ = get_roll_wave_data(valid_high_prime_idx, roll_high_idx_arr, len_df, bb_lower2_, roll_hl_cnt)\n","        # roll_low_bb_lower2_ = get_roll_wave_data(valid_low_prime_idx, roll_low_idx_arr, len_df, bb_lower2_, roll_hl_cnt)\n","\n","        # wave_base_ = res_df['dc_base_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","\n","        # roll_high_wave_base_ = get_roll_wave_data(valid_high_prime_idx, roll_high_idx_arr, len_df, wave_base_, roll_hl_cnt)\n","        # roll_low_wave_base_ = get_roll_wave_data(valid_low_prime_idx, roll_low_idx_arr, len_df, wave_base_, roll_hl_cnt)\n","\n","        # short_open_res *= (roll_high_bb_lower_[:, -2] > roll_high_wave_base_[:, -2]) & (roll_high_wave_base_[:, -2] > roll_high_bb_lower2_[:, -2])\n","        # short_open_res *= (roll_low_bb_lower_[:, -1] > roll_low_wave_base_[:, -1]) & (roll_low_wave_base_[:, -1] > roll_low_bb_lower2_[:, -1])\n","        # short_open_res *= (roll_high_bb_lower_[:, -1] > roll_high_wave_base_[:, -1]) & (roll_high_wave_base_[:, -1] > roll_high_bb_lower2_[:, -1])\n","\n","        # long_open_res *= (roll_low_bb_upper_[:, -2] < roll_low_wave_base_[:, -2]) & (roll_low_wave_base_[:, -2] < roll_low_bb_upper2_[:, -2])\n","        # long_open_res *= (roll_high_bb_upper_[:, -1] < roll_high_wave_base_[:, -1]) & (roll_high_wave_base_[:, -1] < roll_high_bb_upper2_[:, -1])\n","        # long_open_res *= (roll_low_bb_upper_[:, -1] < roll_low_wave_base_[:, -1]) & (roll_low_wave_base_[:, -1] < roll_low_bb_upper2_[:, -1])\n","\n","        # if show_detail:\n","        #   sys_log.warning(\"bb_stream\")\n","        #   sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","        #   sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))  \n","\n","        # ------ candle_pattern  ------ #   \n","        # b3_bb_upper_ = get_line(b3_candle_lastidx, bb_upper_)\n","        # b3_bb_lower_ = get_line(b3_candle_lastidx, bb_lower_)\n","        # b3_bb_upper2_ = get_line(b3_candle_lastidx, bb_upper2_)\n","        # b3_bb_lower2_ = get_line(b3_candle_lastidx, bb_lower2_)\n","        # b3_close = get_line(b3_candle_lastidx, close)\n","\n","        # b2_bb_upper2_ = get_line(b2_candle_lastidx, bb_upper2_)\n","        # b2_bb_lower2_ = get_line(b2_candle_lastidx, bb_lower2_)\n","        # b2_bb_upper3_ = get_line(b2_candle_lastidx, bb_upper3_)\n","        # b2_bb_lower3_ = get_line(b2_candle_lastidx, bb_lower3_)\n","        # b2_close = get_line(b2_candle_lastidx, close)\n","\n","        # b1_bb_upper_ = get_line(b1_candle_lastidx, bb_upper_)\n","        # b1_bb_lower_ = get_line(b1_candle_lastidx, bb_lower_)\n","        # b1_bb_upper2_ = get_line(b1_candle_lastidx, bb_upper2_)\n","        # b1_bb_lower2_ = get_line(b1_candle_lastidx, bb_lower2_)\n","        # b1_close = get_line(b1_candle_lastidx, close)\n","        # b1_high_5T = get_line(b1_candle_lastidx, high_5T)\n","        # b1_low_5T = get_line(b1_candle_lastidx, low_5T)\n","\n","        # short_open_res *= (b3_bb_lower_ > b3_close) & (b3_close > b3_bb_lower2_)\n","        # short_open_res *= (b2_bb_lower2_ > b2_close) & (b2_close > b2_bb_lower3_)\n","        # short_open_res *= (b1_bb_lower_ > b1_close) & (b1_close > b1_bb_lower2_)\n","\n","        # long_open_res *= (b3_bb_upper_ < b3_close) & (b3_close < b3_bb_upper2_)\n","        # long_open_res *= (b2_bb_upper2_ < b2_close) & (b2_close < b2_bb_upper3_)\n","        # long_open_res *= (b1_bb_upper_ < b1_close) & (b1_close < b1_bb_upper2_)\n","\n","        # # short_open_res *= (b2_low_5T < b1_low_5T) & (b2_close < b1_close)\n","        # # long_open_res *= (b2_high_5T > b1_high_5T) & (b2_close > b1_close)\n","\n","        # if show_detail:\n","        #   sys_log.warning(\"candle_pattern\")\n","        #   sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","        #   sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1))) \n","\n","\n","        # ------ low_confirm ------ #\n","        # short_open_res *= b1_high_5T > wave_high_fill_\n","        # long_open_res *= b1_low_5T < wave_low_fill_\n","\n","        # if show_detail:\n","        #   sys_log.warning(\"low_confirm\")\n","        #   sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","        #   sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1))) \n","        \n","        # ------ candle_ratio ------ #\n","        # b2_candle_range_5T = b2_high_5T - b2_low_5T\n","        # b1_candle_range_5T = b1_high_5T - b1_low_5T\n","        \n","        # short_open_res *= b1_candle_range_5T / b2_candle_range_5T < config.loc_set.point.crr\n","        # long_open_res *= b1_candle_range_5T / b2_candle_range_5T < config.loc_set.point.crr\n","\n","        # if show_detail:\n","        #   sys_log.warning(\"candle_ratio\")\n","        #   sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","        #   sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1))) \n","\n","        # ------ wick_ratio ------ #\n","        # upper_wick_ratio_ = res_df['upper_wick_ratio_{}'.format(config.loc_set.point.wick_itv)].to_numpy()\n","        # lower_wick_ratio_ = res_df['lower_wick_ratio_{}'.format(config.loc_set.point.wick_itv)].to_numpy()\n","        # b2_upper_wick_ratio_ = get_line(b2_candle_lastidx, upper_wick_ratio_)\n","        # b2_lower_wick_ratio_ = get_line(b2_candle_lastidx, lower_wick_ratio_)\n","\n","        # short_open_res *= b2_upper_wick_ratio_ < config.loc_set.point.short_wick_ratio\n","        # long_open_res *= b2_upper_wick_ratio_ < config.loc_set.point.long_wick_ratio\n","\n","        # if show_detail:\n","        #   sys_log.warning(\"wick_ratio\")\n","        #   sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","        #   sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1))) \n","\n","        # ------ large wave1_range ------ #          \n","        # roll_bb_upper_ = get_roll_wave_data(valid_high_prime_idx, roll_high_idx_arr, len_df, bb_upper_, roll_hl_cnt)\n","        # roll_bb_lower_ = get_roll_wave_data(valid_low_prime_idx, roll_low_idx_arr, len_df, bb_lower_, roll_hl_cnt)\n","        # roll_bb_upper3_ = get_roll_wave_data(valid_high_prime_idx, roll_high_idx_arr, len_df, bb_upper3_, roll_hl_cnt)\n","        # roll_bb_lower3_ = get_roll_wave_data(valid_low_prime_idx, roll_low_idx_arr, len_df, bb_lower3_, roll_hl_cnt)\n","\n","        # short_open_res *= (roll_bb_upper_[:, -2] < roll_high_[:, -2]) & (roll_low_[:, -1] < roll_bb_lower_[:, -1]) & (roll_low_[:, -1] > roll_bb_lower3_[:, -1])\n","        # long_open_res *= (roll_bb_upper_[:, -1] < roll_high_[:, -1]) & (roll_low_[:, -2] < roll_bb_lower_[:, -2]) & (roll_high_[:, -1] < roll_bb_upper3_[:, -1])\n","\n","        # if show_detail:\n","        #   sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","        #   sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))\n","        \n","        # ------ low in bb_level3 ------ #  Todo, idx sync 맞춰야할 것\n","        # short_open_res *= (bb_upper2_ < wave_high_fill_) & (wave_high_fill_ < bb_upper3_)\n","        # long_open_res *= (bb_lower3_ < wave_low_fill_) & (wave_low_fill_ < bb_lower2_)\n","\n","        # if show_detail:\n","        #   sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","        #   sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))\n","\n","        # ------ first_high ------ #        \n","        # wave_high_prime_idx_fill_= res_df['wave_high_prime_idx_fill_{}{}'.format(itv, period1)].to_numpy()\n","        # wave_low_prime_idx_fill_= res_df['wave_low_prime_idx_fill_{}{}'.format(itv, period1)].to_numpy()\n","        # cu_prime_wave_base = get_line(cu_prime_idx_fill_, wave_base_)\n","        # co_prime_wave_base = get_line(co_prime_idx_fill_, wave_base_)\n","\n","        # # short_open_res *= (co_roll_high_[:, -1] > dc_base_) & (dc_base_ > co_roll_low_[:, -1])\n","        # # long_open_res *= (cu_roll_low_[:, -1] < dc_base_) & (dc_base_ < cu_roll_high_[:, -1])\n","\n","        # short_open_res *= (cu_prime_wave_base > dc_base_) & (dc_base_ > co_prime_wave_base)\n","        # long_open_res *= (co_prime_wave_base < dc_base_) & (dc_base_ < cu_prime_wave_base)\n","\n","        # if show_detail:\n","        #   sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","        #   sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))\n","\n","        # cu_prime_dc_base = get_line(cu_prime_idx_fill_, dc_base_)        \n","        # co_prime_dc_base = get_line(co_prime_idx_fill_, dc_base_)\n","        \n","        # shift_size = to_itvnum(p1_itv1)\n","        # b1_dc_base_ = res_df['dc_base_{}{}'.format(p1_itv1, p1_period1)].shift(shift_size).to_numpy()\n","\n","        # short_open_res *= (b1_dc_base_ < dc_base_)\n","        # long_open_res *= (b1_dc_base_ > dc_base_)\n","\n","        # if show_detail:\n","        #   sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","        #   sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))\n","\n","        # ------ b1_base_15T < wave_high ------ #\n","        # short_open_res *= (b1_dc_base_ > co_roll_low_[:, -1])\n","        # long_open_res *= (b1_dc_base_ < cu_roll_high_[:, -1])\n","\n","        # if show_detail:\n","        #   sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","        #   sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))   \n","        \n","        \n","    # b1_itv_num = to_itvnum(config.tr_set.p2_itv0)\n","    # b2_itv_num = to_itvnum(config.tr_set.p2_itv0) * 2  # multi 2 for imb_v2\n","\n","    # res_df[short_tp_1_] = res_df['dc_lower_{}{}'.format(itv, period1)]\n","    # res_df[short_tp_0_] = res_df['dc_upper_{}{}'.format(itv, period2)]\n","    # # res_df[short_tp_0_] = res_df['dc_upper_15T4']\n","    # res_df[long_tp_1_] = res_df['dc_upper_{}{}'.format(itv, period1)]\n","    # res_df[long_tp_0_] = res_df['dc_lower_{}{}'.format(itv, period2)]\n","    # # res_df[long_tp_0_] = res_df['dc_lower_15T4']\n","    \n","        # ------ base_cc ------ #\n","        dc_base_ = res_df['dc_base_{}{}'.format(p1_itv1, p1_period1)].to_numpy()\n","\n","        # close_ = res_df['close_{}'.format(config.loc_set.point.tf_entry)].to_numpy()\n","        # b1_dc_base_ = res_df['dc_base_{}{}'.format(p1_itv1, p1_period1)].shift(tf_entry).to_numpy()\n","        # b1_close_ = res_df['close_{}'.format(config.loc_set.point.tf_entry)].shift(tf_entry).to_numpy()\n","\n","        # short_open_res *= ((b1_close_ > dc_base_) & (dc_base_ > close_)) | ((b1_close_ > b1_dc_base_) & (dc_base_ > close_))\n","        # long_open_res *= ((b1_close_ < dc_base_) & (dc_base_ < close_)) | ((b1_close_ < b1_dc_base_) & (dc_base_ < close_))\n","\n","        # if show_detail:\n","        #   sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","        #   sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))\n","        \n","        # ------ tf_entry ------ #\n","        # tf_entry = to_itvnum(config.loc_set.point.tf_entry)\n","        \n","        # short_open_res *= np_timeidx % tf_entry == (tf_entry - 1)\n","        # long_open_res *= np_timeidx % tf_entry == (tf_entry - 1) \n","\n","        # if show_detail:\n","        #   sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","        #   sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))\n","\n","    \n","        # ------ cppr 로 양음봉 check ------ # \n","        # tf_entry = to_itvnum(config.loc_set.point.tf_entry)\n","\n","        # res_df['b1_cppr_{}'.format(config.loc_set.point.tf_entry)] = res_df['cppr_{}'.format(config.loc_set.point.tf_entry)].shift(tf_entry)\n","        # b1_cppr_ = res_df['b1_cppr_{}'.format(config.loc_set.point.tf_entry)].to_numpy()  # check b1's cppr in ep_loc\n","        # cppr_ = res_df['cppr_{}'.format(config.loc_set.point.tf_entry)].to_numpy()\n","        # short_open_res *= (b1_cppr_ > 0) & (cppr_ < 0)\n","        # long_open_res *= (b1_cppr_ < 0) & (cppr_ > 0)\n","\n","        # res_df['b1_updbr'] = res_df['dc_upper_15T4_br'].shift(tf_entry).to_numpy()\n","        # res_df['b1_lwdbr'] = res_df['dc_lower_15T4_br'].shift(tf_entry).to_numpy()\n","        \n","        # res_df['b1_updbr_cppr'] = b1_cppr_ * res_df['b1_updbr'].to_numpy()\n","        # res_df['b1_lwdbr_cppr'] = b1_cppr_ * res_df['b1_lwdbr'].to_numpy()\n","\n","        # if show_detail:\n","        #   sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","        #   sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))\n","\n","        # ------ dc_cross ------ #\n","        # b1_dc_upper_15T4 = res_df['dc_upper_15T4'].shift(tf_entry).to_numpy()\n","        # b1_dc_lower_15T4 = res_df['dc_lower_15T4'].shift(tf_entry).to_numpy()\n","        # b1_high_ = res_df['high_{}'.format(config.loc_set.point.tf_entry)].shift(tf_entry).to_numpy()\n","        # b1_low_ = res_df['low_{}'.format(config.loc_set.point.tf_entry)].shift(tf_entry).to_numpy()\n","        # short_open_res *= b1_high_ > b1_dc_upper_15T4\n","        # long_open_res *= b1_low_ < b1_dc_lower_15T4\n","        \n","        # ------ dc_cc ------ #\n","        # b1_close_ = res_df['close_{}'.format(config.loc_set.point.tf_entry)].shift(tf_entry).to_numpy()\n","        # short_open_res *= b1_close_ > b1_dc_upper_15T4\n","        # long_open_res *= b1_close_ < b1_dc_lower_15T4\n","\n","        # if show_detail:\n","        #   sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","        #   sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))\n","\n","        # ------ empty_space ------ #       \n","        # dc_upper_15T4 = res_df['dc_upper_15T4'].to_numpy()\n","        # dc_lower_15T4 = res_df['dc_lower_15T4'].to_numpy() \n","        # high_ = res_df['high_{}'.format(config.loc_set.point.tf_entry)].to_numpy()\n","        # low_ = res_df['low_{}'.format(config.loc_set.point.tf_entry)].to_numpy()\n","        # short_open_res *= high_ < dc_upper_15T4\n","        # long_open_res *= low_ > dc_lower_15T4\n","        \n","        # ------ candle_pattern ------ #  \n","        # pattern_column = \"{}_{}\".format(config.loc_set.point.candle_pattern, config.loc_set.point.tf_entry)\n","        # short_open_res *= res_df[pattern_column].to_numpy() < 0\n","        # long_open_res *= res_df[pattern_column].to_numpy() > 0\n","\n","        # if show_detail:\n","        #   sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","        #   sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))\n","\n","\n","        # ------ lower_touch > upper_touch (long) ------ #\n","        # short_open_res *= res_df['short_upper_touch_idx_{}{}{}'.format(p1_itv1, p1_period1, p1_period2)].to_numpy() > res_df['short_lower_touch_idx_{}{}{}'.format(p1_itv1, p1_period1, p1_period2)].to_numpy()\n","        # long_open_res *= res_df['long_lower_touch_idx_{}{}{}'.format(p1_itv1, p1_period1, p1_period2)].to_numpy() > res_df['long_upper_touch_idx_{}{}{}'.format(p1_itv1, p1_period1, p1_period2)].to_numpy()\n","\n","        # ------ base_3T cross ------ #\n","        # dc_base_3T = res_df['dc_base_3T'].to_numpy()\n","        # b1_close = res_df['close'].shift(1).to_numpy()\n","        # short_open_res *= (b1_close > dc_base_3T) & (dc_base_3T > close)\n","        # long_open_res *= (b1_close < dc_base_3T) & (dc_base_3T < close)\n","\n","        # ------ wave_low < base_5T (long) ------ #\n","        # dc_base_5T = res_df['dc_base_5T'].to_numpy()        \n","        # short_open_res *= res_df['short_upper_touch_line_{}{}{}'.format(p1_itv1, p1_period1, p1_period2)].to_numpy() > dc_base_5T\n","        # long_open_res *= res_df['long_lower_touch_line_{}{}{}'.format(p1_itv1, p1_period1, p1_period2)].to_numpy() < dc_base_5T      \n","\n","        # ------ ppr ------ #\n","        # pumping_ratio(res_df, config, p1_itv1, p1_period1, p1_period2)  "]},{"cell_type":"markdown","metadata":{"id":"aTV4h3LjTZBp"},"source":["#### dump"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"dc49JPmoTaPQ"},"outputs":[],"source":["\n","    \n","    csd_period = 40\n","    res_df = dc_line_v4(res_df, res_df, dc_period=csd_period)\n","    \n","    dc_upper_ = res_df['dc_upper_T{}'.format(csd_period)].to_numpy()    \n","    dc_lower_ = res_df['dc_lower_T{}'.format(csd_period)].to_numpy()  \n","\n","    short_open_res2 *= dc_upper_touch_span == 0\n","    long_open_res2 *= dc_lower_touch_span == 0\n","\n","    # ------ csdbox ------ # --> 결국 dc's upper & lower\n","    if show_detail:\n","      sys_log.warning(\"csdbox\")\n","      # sys_log.warning(\"np.sum(short_open_res1 == 1) : {}\".format(np.sum(short_open_res1 == 1)))\n","      # sys_log.warning(\"np.sum(long_open_res1 == 1) : {}\".format(np.sum(long_open_res1 == 1)))\n","      sys_log.warning(\"np.sum(short_open_res2 == 1) : {}\".format(np.sum(short_open_res2 == 1)))\n","      sys_log.warning(\"np.sum(long_open_res2 == 1) : {}\".format(np.sum(long_open_res2 == 1)))\n","      \n","    # olds,\n","    # np.nan - np.nan = np.nan -> vectorize 가능할 것 => xx\n","    # 1. wave_high_prime_idx_ ~ long_open_idx1 의 valid(not_non) 한 idx 를 max_dc_lower 와 min_low 의 비교값으로 채워넣음\n","    # valid_idx = ~(pd.isnull(wave_cu_post_idx_fill_) | pd.isnull(long_open_idx1))\n","    # max_dc_lower_ = [dc_lower_[int(iin):int(iout)].max() for iin, iout in zip(wave_cu_post_idx_fill_, long_open_idx1) if not pd.isnull(iin) if not pd.isnull(iout)]\n","    # min_low = [low[int(iin):int(iout)].min() for iin, iout in zip(wave_high_prime_idx_, long_open_idx1) if not pd.isnull(iin) if not pd.isnull(iout)]\n","    \n","    short_tp_1_, long_tp_1_ = 'short_tp_1_{}'.format(selection_id), 'long_tp_1_{}'.format(selection_id)\n","    short_tp_0_, long_tp_0_ = 'short_tp_0_{}'.format(selection_id), 'long_tp_0_{}'.format(selection_id)\n","    short_tp_gap_, long_tp_gap_ = 'short_tp_gap_{}'.format(selection_id), 'long_tp_gap_{}'.format(selection_id)\n","\n","    short_ep_1_, long_ep_1_ = 'short_ep_1_{}'.format(selection_id), 'long_ep_1_{}'.format(selection_id)\n","    short_ep_0_, long_ep_0_ = 'short_ep_0_{}'.format(selection_id), 'long_ep_0_{}'.format(selection_id)\n","    short_ep_gap_, long_ep_gap_ = 'short_ep_gap_{}'.format(selection_id), 'long_ep_gap_{}'.format(selection_id)\n","\n","    short_epout_1_, long_epout_1_ = 'short_epout_1_{}'.format(selection_id), 'long_epout_1_{}'.format(selection_id)\n","    short_epout_0_, long_epout_0_ = 'short_epout_0_{}'.format(selection_id), 'long_epout_0_{}'.format(selection_id)\n","    short_epout_gap_, long_epout_gap_ = 'short_epout_gap_{}'.format(selection_id), 'long_epout_gap_{}'.format(selection_id)\n","    \n","    # ================== convert unit -> numpy ================== #   \n","    # tp_cols = [short_tp_1_, short_tp_0_, short_tp_gap_, long_tp_1_, long_tp_0_, long_tp_gap_]\n","    # epout_cols = [short_epout_1_, short_epout_0_, short_epout_gap_, long_epout_1_, long_epout_0_, long_epout_gap_]\n","\n","    # short_tp_1, short_tp_0, short_tp_gap, long_tp_1, long_tp_0, long_tp_gap = [res_df[col_].to_numpy() for col_ in tp_cols]\n","    # short_epout_1, short_epout_0, short_epout_gap, long_epout_1, long_epout_0, long_epout_gap = [res_df[col_].to_numpy() for col_ in epout_cols]\n","\n","    if p2_itv1 != \"None\":  # vectorized point2\n","        short_point1_on2_idx = pd.Series(\n","            np.where(res_df['short_wave_point_{}{}{}'.format(p1_itv1, p1_period1, p1_period2)], len_df_range, np.nan)).rolling(point1_to2_period,\n","                                                                                                                                    min_periods=1).max().to_numpy()  # period 내의 max_point1_idx\n","        long_point1_on2_idx = pd.Series(\n","            np.where(res_df['long_wave_point_{}{}{}'.format(p1_itv1, p1_period1, p1_period2)], len_df_range, np.nan)).rolling(point1_to2_period,\n","                                                                                                                                   min_periods=1).max().to_numpy()\n","\n","        short_point2_idx = pd.Series(\n","            np.where(res_df['short_wave_point_{}{}{}'.format(p2_itv1, p2_period1, p2_period2)], len_df_range, np.nan)).to_numpy()\n","        long_point2_idx = pd.Series(\n","            np.where(res_df['long_wave_point_{}{}{}'.format(p2_itv1, p2_period1, p2_period2)], len_df_range, np.nan)).to_numpy()\n","\n","        res_df['short_point_idxgap_{}'.format(selection_id)] = short_point2_idx - short_point1_on2_idx\n","        res_df['long_point_idxgap_{}'.format(selection_id)] = long_point2_idx - long_point1_on2_idx\n","\n","        # ------ p1 & p2 ------ #\n","        short_open_res *= ~np.isnan(res_df['short_point_idxgap_{}'.format(selection_id)].to_numpy())\n","        long_open_res *= ~np.isnan(res_df['long_point_idxgap_{}'.format(selection_id)].to_numpy())\n","\n","        if show_detail:\n","          sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","          sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))\n","\n","        # ------ p2 amax > p1_idx (long) ------ #\n","        short_open_res *= res_df['short_upper_touch_idx_{}{}{}'.format(p2_itv1, p2_period1, p2_period2)].to_numpy() > short_point1_on2_idx\n","        long_open_res *= res_df['long_lower_touch_idx_{}{}{}'.format(p2_itv1, p2_period1, p2_period2)].to_numpy() > long_point1_on2_idx\n","\n","        if show_detail:\n","          sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","          sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))\n","\n","        # ------ higher low (long) ------ #\n","        # short_a_line1_on2_ = get_line(short_point1_on2_idx, res_df['short_a_line_{}{}{}'.format(p1_itv1, p1_period1, p1_period2)].to_numpy())\n","        # long_a_line1_on2_ = get_line(long_point1_on2_idx, res_df['long_a_line_{}{}{}'.format(p1_itv1, p1_period1, p1_period2)].to_numpy())\n","\n","        # short_a_line2_ = res_df['short_a_line_{}{}{}'.format(p2_itv1, p2_period1, p2_period2)].to_numpy()\n","        # long_a_line2_ = res_df['long_a_line_{}{}{}'.format(p2_itv1, p2_period1, p2_period2)].to_numpy()\n","\n","        # short_open_res *= short_a_line1_on2_ >= short_a_line2_\n","        # long_open_res *= long_a_line1_on2_ <= long_a_line2_\n","\n","        # print(np.sum(long_open_res == 1))\n","\n","        # ------ higher high (long) ------ #\n","        # short_open_res *= co_roll_low_[:, -2] > co_roll_low_[:, -1]\n","        # long_open_res *= cu_roll_high_[:, -2] < cu_roll_high_[:, -1]\n","\n","        # short_open_res *= co_roll_low_[:, -3] > co_roll_low_[:, -2]\n","        # long_open_res *= cu_roll_high_[:, -3] < cu_roll_high_[:, -2]\n","\n","        # if show_detail:\n","        #   sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","        #   sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))\n","\n","        # ------ higher low (long) ------ # \n","        # short_open_res *= co_roll_high_[:, -2] > co_roll_high_[:, -1]\n","        # long_open_res *= cu_roll_low_[:, -2] < cu_roll_low_[:, -1]\n","\n","        # if show_detail:\n","        #   sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","        #   sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))  \n","\n","        # ------ tf2_base < wave_low ------ #\n","        # short_open_res *= (dc_base_ > co_roll_high_[:, -1])\n","        # long_open_res *= (dc_base_ < cu_roll_low_[:, -1])\n","\n","        # if show_detail:\n","        #   sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","        #   sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))  \n","\n","        # short_open_res *= (cu_prime_wave_base > cu_prime_dc_base) & (dc_base_ > co_prime_wave_base)\n","        # long_open_res *= (co_prime_wave_base < co_prime_dc_base) & (dc_base_ < cu_prime_wave_base)\n","\n","        short_open_res *= (co_prime_dc_base < co_roll_low_[:, -2])\n","        long_open_res *= (cu_prime_dc_base > cu_roll_high_[:, -2])  #  b1_cu_prime_idx’s tf2_base > b1_high -> b1 이 아님 (error)\n","\n","\n","        res_df[short_epout_1_] = res_df['short_wave_low_{}{}{}'.format(itv, period1, period2)]\n","        res_df[short_epout_0_] = res_df['short_new_wave_high_{}{}{}'.format(itv, period1, period2)]\n","        res_df[long_epout_1_] = res_df['long_wave_high_{}{}{}'.format(itv, period1, period2)]\n","        res_df[long_epout_0_] = res_df['long_new_wave_low_{}{}{}'.format(itv, period1, period2)]\n","        \n","        # ------ get candle_lastidx ------ #        \n","        tf_entry = to_itvnum(config.loc_set.point.tf_entry)\n","        b1_candle_shift = np_timeidx % tf_entry + 1\n","        b2_candle_shift = b1_candle_shift + tf_entry\n","        b3_candle_shift = b1_candle_shift + 2 * tf_entry\n","\n","        print(b3_candle_shift)\n","\n","        # bb_upper_ = res_df['bb_upper_{}{}'.format('T', 60)].to_numpy()\n","        # bb_lower_ = res_df['bb_lower_{}{}'.format('T', 60)].to_numpy()\n","        # bb_upper2_ = res_df['bb_upper2_{}{}'.format('T', 60)].to_numpy()\n","        # bb_lower2_ = res_df['bb_lower2_{}{}'.format('T', 60)].to_numpy()\n","        # bb_upper3_ = res_df['bb_upper3_{}{}'.format('T', 60)].to_numpy()\n","        # bb_lower3_ = res_df['bb_lower3_{}{}'.format('T', 60)].to_numpy()\n","\n","        # ------ compare by back_idx  ------ #   \n","        b3_bb_upper_ = res_df['bb_upper_{}{}'.format('T', 60)].shift(b3_candle_shift).to_numpy()\n","        b3_bb_lower_ = res_df['bb_lower_{}{}'.format('T', 60)].shift(b3_candle_shift).to_numpy()\n","        b3_bb_upper2_ = res_df['bb_upper2_{}{}'.format('T', 60)].shift(b3_candle_shift).to_numpy()\n","        b3_bb_lower2_ = res_df['bb_lower2_{}{}'.format('T', 60)].shift(b3_candle_shift).to_numpy()\n","        b3_close = res_df['close'].shift(b3_candle_shift).to_numpy()\n","\n","        b2_bb_upper2_ = res_df['bb_upper2_{}{}'.format('T', 60)].shift(b2_candle_shift).to_numpy()\n","        b2_bb_lower2_ = res_df['bb_lower2_{}{}'.format('T', 60)].shift(b2_candle_shift).to_numpy()\n","        b2_bb_upper3_ = res_df['bb_upper3_{}{}'.format('T', 60)].shift(b2_candle_shift).to_numpy()\n","        b2_bb_lower3_ = res_df['bb_lower3_{}{}'.format('T', 60)].shift(b2_candle_shift).to_numpy()\n","        b2_close = res_df['close'].shift(b2_candle_shift).to_numpy()\n","\n","        b1_bb_upper_ = res_df['bb_upper_{}{}'.format('T', 60)].shift(b1_candle_shift).to_numpy()\n","        b1_bb_lower_ = res_df['bb_lower_{}{}'.format('T', 60)].shift(b1_candle_shift).to_numpy()\n","        b1_bb_upper2_ = res_df['bb_upper2_{}{}'.format('T', 60)].shift(b1_candle_shift).to_numpy()\n","        b1_bb_lower2_ = res_df['bb_lower2_{}{}'.format('T', 60)].shift(b1_candle_shift).to_numpy()\n","        b1_close = res_df['close'].shift(b1_candle_shift).to_numpy()\n"]},{"cell_type":"markdown","metadata":{"id":"HKdUKKl-483N"},"source":["### utils_public"]},{"cell_type":"code","execution_count":6,"metadata":{"id":"nzOYWA2kqZ0d","executionInfo":{"status":"ok","timestamp":1663389105398,"user_tz":-540,"elapsed":762,"user":{"displayName":"7th June","userId":"08178289703395036410"}}},"outputs":[],"source":["# from funcs.funcs_indicator import *\n","# from funcs.funcs_trader import *\n","# import logging\n","# from ast import literal_eval\n","\n","pd.set_option('mode.chained_assignment',  None)\n","sys_log = logging.getLogger()\n","\n","\n","class OrderSide:\n","    BUY = \"BUY\"\n","    SELL = \"SELL\"\n","    INVALID = None\n","\n","\n","def lvrg_set(res_df, config, open_side, ep_, out_, fee, limit_leverage=50):\n","    selection_id = config.selection_id\n","    if not pd.isnull(out_) and not config.lvrg_set.static_lvrg:\n","        if selection_id in ['v3']:\n","            if open_side == OrderSide.SELL:\n","                loss = out_ / ep_\n","            else:\n","                loss = ep_ / out_\n","        else:  # 이 phase 가 정석, 윗 phase 는 결과가 수익 극대화라 사용함\n","            if open_side == OrderSide.SELL:\n","                loss = ep_ / out_\n","            else:\n","                loss = out_ / ep_\n","\n","        config.lvrg_set.leverage = config.lvrg_set.target_pct / abs(loss - 1 - (fee + config.trader_set.market_fee))\n","\n","    # ------------ leverage rejection ------------ #\n","    # 감당하기 힘든 fluc. 의 경우 진입하지 않음 - dynamic_lvrg 사용 경우\n","    if config.lvrg_set.leverage < 1 and config.lvrg_set.lvrg_rejection:\n","        # if config.lvrg_set.leverage >= 1 and config.lvrg_set.lvrg_rejection:\n","        return None\n","\n","    if not config.lvrg_set.allow_float:\n","        config.lvrg_set.leverage = int(config.lvrg_set.leverage)\n","\n","    config.lvrg_set.leverage = min(limit_leverage, max(config.lvrg_set.leverage, 1))\n","\n","    return config.lvrg_set.leverage\n","\n","\n","def sync_check(df_, config, order_side=\"OPEN\", row_slice=True):\n","    try:\n","        make_itv_list = [m_itv.replace('m', 'T') for m_itv in literal_eval(config.trader_set.itv_list)]\n","        row_list = literal_eval(config.trader_set.row_list)\n","        rec_row_list = literal_eval(config.trader_set.rec_row_list)\n","        offset_list = literal_eval(config.trader_set.offset_list)\n","\n","        assert len(make_itv_list) == len(offset_list), \"length of itv & offset_list should be equal\"\n","        htf_df_list = [to_htf(df_, itv_=itv_, offset=offset_) for itv_idx, (itv_, offset_)\n","                       in enumerate(zip(make_itv_list, offset_list)) if itv_idx != 0]  #\n","        htf_df_list.insert(0, df_)\n","\n","        # for htf_df_ in htf_df_list:\n","        #     print(htf_df_.tail())\n","\n","        #       Todo        #\n","        #        1. row_list calc.\n","        #           a. indi. 를 만들기 위한 최소 period 가 존재하고, 그 indi. 를 사용한 lb_period 가 존재함\n","        #           b. => default_period + lb_period\n","        #               i. from sync_check, public_indi, ep_point2, ep_dur 의 tf 별 max lb_period check\n","        #                   1. default_period + max lb_period check\n","        #                       a. 현재까지 lb_period_list\n","        #                           h_prev_idx (open / close) 60\n","        #                           dc_period 135\n","        #                           zone_dc_period 135\n","\n","        # --------- slicing (in trader phase only) --------- #\n","        #               --> latency 영향도가 높은 곳은 이곳\n","        if row_slice:  # recursive 가 아닌 indi. 의 latency 를 고려한 slicing\n","            df, df_3T, df_5T, df_15T, df_30T, df_H, df_4H = [df_s.iloc[-row_list[row_idx]:].copy() for row_idx, df_s in enumerate(htf_df_list)]\n","            rec_df, rec_df_3T, rec_df_5T, rec_df_15T, rec_df_30T, rec_df_H, rec_df_4H = [df_s.iloc[-rec_row_list[row_idx]:].copy() for row_idx, df_s\n","                                                                                         in\n","                                                                                         enumerate(htf_df_list)]\n","        else:\n","            df, df_3T, df_5T, df_15T, df_30T, df_H, df_4H = htf_df_list\n","            rec_df, rec_df_3T, rec_df_5T, rec_df_15T, rec_df_30T, rec_df_H, rec_df_4H = htf_df_list\n","\n","        # --------- add indi. --------- #\n","\n","        #        1. 필요한 indi. 는 enlist_epouttp & mr_check 보면서 삽입\n","        #        2. min use_rows 계산을 위해서, tf 별로 gathering 함        #\n","        # start_0 = time.time()\n","\n","        # ------ T ------ #\n","        # df = dc_line(df, None, 'T', dc_period=20)\n","        # df = bb_line(df, None, 'T')\n","        #\n","        # ------ 3T ------ #\n","        # df = dc_line(df, df_3T, '3T')\n","\n","        # ------ 5T ------ #\n","        # h_candle_v3(df, '5T')\n","        df = dc_line(df, df_5T, '5T')\n","        df = bb_line(df, df_5T, '5T')\n","        #\n","        # ------ 15T ------ #\n","        # h_candle_v3(df, '15T')\n","        df = dc_line(df, df_15T, '15T')\n","        df = bb_line(df, df_15T, '15T')\n","        #\n","        # ------ 30T ------ #\n","        # df = bb_line(df, df_30T, '30T')\n","        #\n","        # ------ H ------ #\n","        # h_candle_v3(df, 'H')\n","        # df = dc_line(df, df_H, 'H')\n","\n","        # ------ 4H ------ #\n","        # df = bb_line(df, df_4H, '4H')\n","\n","        # rec_df['rsi_1m'] = rsi(rec_df, 14)  # Todo - recursive, 250 period\n","        # df = df.join(to_lower_tf_v2(df, rec_df.iloc[:, [-1]], [-1], backing_i=0), how='inner')  # <-- join same_tf manual\n","        #\n","        # if order_side in [\"OPEN\"]:\n","        #     rec_df_5T['ema_5T'] = ema(rec_df_5T['close'], 195)  # Todo - recursive, 1100 period (5T)\n","        #     df = df.join(to_lower_tf_v2(df, rec_df_5T, [-1]), how='inner')\n","\n","    except Exception as e:\n","        sys_log.error(\"error in sync_check :\", e)\n","    else:\n","        return df\n","\n","\n","    return wave_publics_v2(t_df, cu_bool, co_bool, ohlc_list, wave_period)\n","\n","def public_indi(res_df, config, np_timeidx, order_side=\"OPEN\"):\n","\n","    selection_id = config.selection_id\n","\n","    wave_itv1 = config.tr_set.wave_itv1\n","    wave_itv2 = config.tr_set.wave_itv2\n","    wave_period1 = config.tr_set.wave_period1\n","    wave_period2 = config.tr_set.wave_period2\n","    tc_period = config.tr_set.tc_period\n","    roll_hl_cnt = 3\n","  \n","    # assert to_itvnum(wave_itv1) > 1  # wave_itv2 == 'T' and \n","    # ====== public ====== #\n","    # res_df = wave_range_dcbase_v11_3(res_df, config, over_period=2) \n","    \n","    # ------------ wave_period1 ------------ #\n","    if to_itvnum(wave_itv1) > 1: \n","      offset = '1h' if wave_itv1 != 'D' else '9h'\n","      htf_df = to_htf(res_df, wave_itv1, offset=offset)\n","      htf_df = wave_range_cci_v4_1(htf_df, wave_period1)\n","      \n","      # cols = list(htf_df.columns[-15:-4])  # except idx col\n","      cols = list(htf_df.columns[4:])  # 15T_ohlc 를 제외한 wave_range_cci_v4 로 추가된 cols, 다 넣어버리기 (추후 혼란 방지)\n","\n","      valid_co_prime_idx, valid_cu_prime_idx, roll_co_idx_arr, roll_cu_idx_arr = roll_wave_hl_idx_v5(htf_df, wave_itv1, wave_period1, roll_hl_cnt=roll_hl_cnt)\n","\n","      htf_df = get_roll_wave_data_v2(htf_df, valid_co_prime_idx, roll_co_idx_arr, 'wave_high_fill_{}{}'.format(wave_itv1, wave_period1), roll_hl_cnt)\n","      cols += list(htf_df.columns[-roll_hl_cnt:])\n","\n","      htf_df = get_roll_wave_data_v2(htf_df, valid_cu_prime_idx, roll_cu_idx_arr, 'wave_low_fill_{}{}'.format(wave_itv1, wave_period1), roll_hl_cnt)\n","      cols += list(htf_df.columns[-roll_hl_cnt:])\n","\n","      htf_df = wave_range_ratio_v4_3(htf_df, wave_itv1, wave_period1, roll_hl_cnt=roll_hl_cnt)\n","      cols += list(htf_df.columns[-4:])\n","\n","      # ------ 필요한 cols 만 join (htf's idx 정보는 ltf 와 sync. 가 맞지 않음 - join 불가함) ------ #\n","      res_df.drop(cols, inplace=True, axis=1, errors='ignore')\n","      res_df = res_df.join(to_lower_tf_v3(res_df, htf_df, cols, backing_i=1), how='inner')\n","    else:\n","      # res_df = wave_range_cci_v4(res_df, wave_period1)\n","      res_df = wave_range_cci_v4_1(res_df, wave_period1)\n","      # res_df = wave_range_stoch_v1(res_df, wave_period1)\n","      # res_df = wave_range_dc_envel_v1(res_df, wave_period1)\n","\n","      res_df = get_wave_time_ratio(res_df, wave_itv1, wave_period1)\n","\n","      valid_co_prime_idx, valid_cu_prime_idx, roll_co_idx_arr, roll_cu_idx_arr = roll_wave_hl_idx_v5(res_df, wave_itv1, wave_period1, roll_hl_cnt=roll_hl_cnt)\n","\n","      # res_df = add_roll_idx(res_df, valid_cu_prime_idx, roll_cu_idx_arr, 'wave_cu_{}{}'.format(wave_itv1, wave_period1), roll_hl_cnt)\n","      # res_df = add_roll_idx(res_df, valid_co_prime_idx, roll_co_idx_arr, 'wave_co_{}{}'.format(wave_itv1, wave_period1), roll_hl_cnt)\n","\n","      res_df = get_roll_wave_data_v2(res_df, valid_co_prime_idx, roll_co_idx_arr, 'wave_high_fill_{}{}'.format(wave_itv1, wave_period1), roll_hl_cnt)  # Todo, 갱신되는 high 의 last_high 를 추리기 위해 co_prime 사용함\n","      res_df = get_roll_wave_data_v2(res_df, valid_cu_prime_idx, roll_cu_idx_arr, 'wave_low_fill_{}{}'.format(wave_itv1, wave_period1), roll_hl_cnt)\n","      \n","      res_df = wave_range_ratio_v4_3(res_df, wave_itv1, wave_period1, roll_hl_cnt=roll_hl_cnt)\n","      res_df = get_wave_length(res_df, valid_co_prime_idx, valid_cu_prime_idx, roll_co_idx_arr, roll_cu_idx_arr, wave_itv1, wave_period1, roll_hl_cnt=roll_hl_cnt)\n","\n","      # res_df = tc_dc_base(res_df, tc_period)\n","      res_df = tc_cci(res_df, tc_period)\n","      # res_df = tc_cci_v2(res_df, tc_period)\n","\n","      # ------ prev_low vs ma ------ #\n","      # ma_period = 60\n","      # res_df = ma(res_df, ma_period)\n","      \n","      # res_df['short_ma_T{}'.format(ma_period)] = res_df['ma_T{}'.format(ma_period)]\n","      # res_df['long_ma_T{}'.format(ma_period)] = res_df['ma_T{}'.format(ma_period)]\n","      \n","      # res_df = get_roll_wave_data_v2(res_df, valid_co_prime_idx, roll_co_idx_arr, 'short_ma_T{}'.format(ma_period), roll_hl_cnt)   # Todo, for index sync.\n","      # res_df = get_roll_wave_data_v2(res_df, valid_cu_prime_idx, roll_cu_idx_arr, 'long_ma_T{}'.format(ma_period), roll_hl_cnt)   # Todo, for index sync.\n","\n","    # ------------ wave_period2 ------------ #\n","    if wave_itv1 != wave_itv2 or wave_period1 != wave_period2:\n","      assert wave_itv2 == 'T'      \n","      \n","      res_df = wave_range_cci_v4_1(res_df, wave_period2, band_width=99)\n","\n","      valid_co_prime_idx, valid_cu_prime_idx, roll_co_idx_arr, roll_cu_idx_arr = roll_wave_hl_idx_v5(res_df, wave_itv2, wave_period2, roll_hl_cnt=roll_hl_cnt)\n","      res_df = get_roll_wave_data_v2(res_df, valid_co_prime_idx, roll_co_idx_arr, 'wave_high_fill_{}{}'.format(wave_itv2, wave_period2), roll_hl_cnt)\n","      res_df = get_roll_wave_data_v2(res_df, valid_cu_prime_idx, roll_cu_idx_arr, 'wave_low_fill_{}{}'.format(wave_itv2, wave_period2), roll_hl_cnt)\n","\n","      res_df = wave_range_ratio_v4_3(res_df, wave_itv2, wave_period2, roll_hl_cnt=roll_hl_cnt)\n","      \n","\n","    # ------ wave_loc_pct (bb) ------ #\n","    # res_df = wave_loc_pct_v2(res_df, config, 'T', 60)\n","    # res_df = wave_loc_pct(res_df, config, 'T', 60)\n","\n","    # future_cols = ['cu_es_15T1', 'co_es_15T1', 'upper_wick_ratio_15T', 'lower_wick_ratio_15T']\n","    # itv_list = ['15T', '15T', '15T', '15T']\n","    # res_df = backing_future_data(res_df, future_cols, itv_list)\n","\n","    # ====== intervaly ====== #    \n","    # ------ 5T ------ #\n","    # res_df = dc_level(res_df, '5T', 1)\n","    # res_df = bb_level(res_df, '5T', 1)\n","\n","    # res_df = st_level(res_df, '5T', 1)\n","\n","    # ------ 15T ------ #\n","    # res_df = dc_level(res_df, '15T', 1)\n","    # res_df = bb_level(res_df, '15T', 1)\n","    # res_df = dtk_plot(res_df, dtk_itv2='15T', hhtf_entry=15, use_dtk_line=config.loc_set.zone1.use_dtk_line, np_timeidx=np_timeidx)\n","\n","    # res_df = st_level(res_df, '15T', 1)\n","\n","    # ------ 30T ------ #\n","    # res_df = dc_level(res_df, '30T', 1)\n","    # res_df = bb_level(res_df, '30T', 1)\n","    # res_df = st_level(res_df, '30T', 1)\n","\n","    # ------ H ------ #\n","    # res_df = bb_level(res_df, 'H', 1)\n","\n","    # ------ 4H ------ #\n","    # res_df = bb_level(res_df, '4H', 1)\n","\n","    # res_df['dc_upper_v2'.format(selection_id)] = res_df['high'].rolling(config.loc_set.zone1.dc_period).max()   # Todo, consider dc_period\n","    # res_df['dc_lower_v2'.format(selection_id)] = res_df['low'].rolling(config.loc_set.zone1.dc_period).min()\n","\n","    # res_df['zone_dc_upper_v2'.format(selection_id)] = res_df['high'].rolling(config.loc_set.zone1.zone_dc_period).max()   # Todo, consider zone_dc_period\n","    # res_df['zone_dc_lower_v2'.format(selection_id)] = res_df['low'].rolling(config.loc_set.zone1.zone_dc_period).min()\n","\n","    # if order_side in [\"OPEN\"]:\n","        # candle_score_v3(res_df, 'T', unsigned=False)\n","        # candle_score_v3(res_df, config.loc_set.point1.exp_itv, unsigned=False)\n","\n","    #     temp indi.    #\n","    # res_df[\"ma30_1m\"] = res_df['close'].rolling(30).mean()\n","    # res_df[\"ma60_1m\"] = res_df['close'].rolling(60).mean()\n","    # res_df = dtk_plot(res_df, dtk_itv2='15T', hhtf_entry=15, use_dtk_line=config.loc_set.zone1.use_dtk_line, np_timeidx=np_timeidx)\n","\n","    return res_df\n","\n","\n","def expiry_v0(res_df, config, op_idx, e_j, tp_j, np_datas, open_side):\n","    high, low = np_datas\n","    selection_id = config.selection_id\n","    expire = 0\n","\n","    if config.tr_set.expire_tick != \"None\":\n","        if e_j - op_idx >= config.tr_set.expire_tick:\n","            expire = 1\n","\n","    if config.tr_set.expire_k1 != \"None\":\n","        if open_side == OrderSide.SELL:\n","            short_tp_1_ = res_df['short_tp_1_{}'.format(selection_id)].to_numpy()  # id 에 따라 dynamic 변수라 이곳에서 numpy 화 진행\n","            short_tp_gap_ = res_df['short_tp_gap_{}'.format(selection_id)].to_numpy()\n","            if low[e_j] <= short_tp_1_[tp_j] - short_tp_gap_[tp_j] * config.tr_set.expire_k1:\n","                expire = 1\n","        else:\n","            long_tp_1_ = res_df['long_tp_1_{}'.format(selection_id)].to_numpy()  # iloc 이 빠를까, to_numpy() 가 빠를까  # 3.94 ms --> 5.34 ms (iloc)\n","            long_tp_gap_ = res_df['long_tp_gap_{}'.format(selection_id)].to_numpy()\n","            if high[e_j] >= long_tp_1_[tp_j] + long_tp_gap_[tp_j] * config.tr_set.expire_k1:\n","                expire = 1\n","\n","    return expire\n","\n","\n","def expiry(res_df, config, op_idx, e_j, tp_j, np_datas, open_side):\n","    high, low = np_datas\n","    selection_id = config.selection_id\n","    expire = 0\n","\n","    if config.tr_set.expire_tick != \"None\":\n","        if e_j - op_idx >= config.tr_set.expire_tick:\n","            expire = 1\n","\n","    if config.tr_set.expire_k1 != \"None\":\n","        if open_side == OrderSide.SELL:\n","            short_tp_ = res_df['short_tp_{}'.format(selection_id)].to_numpy()  # id 에 따라 dynamic 변수라 이곳에서 numpy 화 진행\n","            short_tp_gap_ = res_df['short_tp_gap_{}'.format(selection_id)].to_numpy()\n","            if low[e_j] <= short_tp_[tp_j] + short_tp_gap_[tp_j] * config.tr_set.expire_k1:\n","                expire = 1\n","        else:\n","            long_tp_ = res_df['long_tp_{}'.format(selection_id)].to_numpy()  # iloc 이 빠를까, to_numpy() 가 빠를까  # 3.94 ms --> 5.34 ms (iloc)\n","            long_tp_gap_ = res_df['long_tp_gap_{}'.format(selection_id)].to_numpy()\n","            if high[e_j] >= long_tp_[tp_j] - long_tp_gap_[tp_j] * config.tr_set.expire_k1:\n","                expire = 1\n","\n","    return expire\n","\n","\n","# def expiry_p1(res_df, config, op_idx1, i, op_idx2, np_datas, open_side):\n","def expiry_p1(res_df, config, op_idx1, op_idx2, tp1, tp0, tp_gap, np_datas, open_side):\n","    high, low = np_datas\n","    selection_id = config.selection_id\n","    expire = 0\n","    touch_idx = None\n","\n","    # if config.tr_set.expire_tick != \"None\":\n","    #     if e_j - op_idx >= config.tr_set.expire_tick:\n","    #         expire = 1\n","\n","    # Todo, p1's tp1, 0 cannot be vectorized\n","    #   a. expiration 의 조건은 wave1, 0 의 broken\n","    idx_range = np.arange(op_idx1, op_idx2)\n","    if config.tr_set.expire_k1 != \"None\":\n","        if open_side == OrderSide.SELL:\n","            touch_idx = np.where((low[op_idx1:op_idx2] <= tp1 + tp_gap * config.tr_set.expire_k1) | \\\n","                                 (high[op_idx1:op_idx2] >= tp0 - tp_gap * config.tr_set.expire_k1),\n","                                 idx_range, np.nan)\n","            # if op_idx1 >= 16353:\n","            #   print(\"high[16353], tp0 :\", high[16353], tp0)\n","            if np.sum(~np.isnan(touch_idx)) > 0:  # touch 가 존재하면, \n","            # if low[op_idx1:op_idx2].min() <= tp1 + tp_gap * config.tr_set.expire_k1 or \\\n","            # high[op_idx1:op_idx2].max() >= tp0 - tp_gap * config.tr_set.expire_k1:   # p2_box loc. 이 있어서, op_idx2 + 1 안함\n","                expire = 1\n","        else:\n","            touch_idx = np.where((high[op_idx1:op_idx2] >= tp1 - tp_gap * config.tr_set.expire_k1) | \\\n","                                  (low[op_idx1:op_idx2] <= tp0 + tp_gap * config.tr_set.expire_k1),\n","                                  idx_range, np.nan)\n","            if np.sum(~np.isnan(touch_idx)) > 0:                                  \n","            # if high[op_idx1:op_idx2].max() >= tp1 - tp_gap * config.tr_set.expire_k1 or \\\n","            # low[op_idx1:op_idx2].min() <= tp0 + tp_gap * config.tr_set.expire_k1:\n","                expire = 1\n","\n","    return expire, np.nanmin(touch_idx)\n","\n","\n","def expiry_p2(res_df, config, op_idx, e_j, wave1, wave_gap, np_datas, open_side):\n","    high, low = np_datas\n","    selection_id = config.selection_id\n","    expire = 0\n","\n","    if config.tr_set.expire_tick != \"None\":\n","        if e_j - op_idx >= config.tr_set.expire_tick:\n","            expire = 1\n","\n","    if config.tr_set.expire_k2 != \"None\":\n","        if open_side == OrderSide.SELL:\n","            if low[e_j] <= wave1 + wave_gap * config.tr_set.expire_k2:\n","                expire = 1\n","        else:\n","            if high[e_j] >= wave1 - wave_gap * config.tr_set.expire_k2:\n","                expire = 1\n","\n","    return expire\n","\n","\n","# def ep_loc_point2_v2(res_df, config, i, out_j, side=OrderSide.SELL):\n","#     allow_ep_in = 1\n","#     if config.selection_id in ['v5_2']:\n","#         if side == OrderSide.SELL:\n","#             dc_upper_T = res_df['dc_upper_T'].to_numpy()\n","#             dc_upper_15T = res_df['dc_upper_15T'].to_numpy()\n","#             allow_ep_in *= (dc_upper_T[i - 1] <= dc_upper_15T[i]) & \\\n","#                            (dc_upper_15T[i - 1] != dc_upper_15T[i])\n","#         else:\n","#             dc_lower_T = res_df['dc_lower_T'].to_numpy()\n","#             dc_lower_15T = res_df['dc_lower_15T'].to_numpy()\n","#             allow_ep_in *= (dc_lower_T[i - 1] >= dc_lower_15T[i]) & \\\n","#                            (dc_lower_15T[i - 1] != dc_lower_15T[i])\n","\n","#     if config.selection_id in ['v3_4']:\n","#         wick_score_list = literal_eval(config.ep_set.point2.wick_score_list)\n","#         wick_scores = [res_df['wick_score_{}'.format(s_itv)].to_numpy() for s_itv in literal_eval(config.ep_set.point2.score_itv_list)]\n","#         close = res_df['close'].to_numpy()\n","#         if side == OrderSide.SELL:\n","#             sup_T = res_df['sup_T'].to_numpy()\n","#             allow_ep_in *= close[i] < sup_T[i - 1]\n","#             if len(wick_score_list) != 0:\n","#                 allow_ep_in *= wick_scores[0][i] < -wick_score_list[0]\n","#         else:\n","#             resi_T = res_df['resi_T'].to_numpy()\n","#             allow_ep_in *= close[i] > resi_T[i - 1]\n","#             if len(wick_score_list) != 0:\n","#                 allow_ep_in *= wick_scores[0][i] > wick_score_list[0]\n","\n","#     if allow_ep_in:\n","#         out_j = i\n","#     return allow_ep_in, out_j\n","\n","\n","# vectorized calc.\n","# multi-stem 에 따라 dynamic vars.가 입력되기 때문에 class 내부 vars. 로 종속시키지 않음\n","def ep_loc_p1_v3(res_df, config, np_timeidx, show_detail=True, ep_loc_side=OrderSide.SELL):\n","    # ------- param init ------- #\n","    selection_id = config.selection_id\n","    c_i = config.trader_set.complete_index\n","    len_df = len(res_df)\n","    mr_res = np.ones(len_df)\n","    zone_arr = np.full(len_df, 'n')\n","\n","    # ------ process 한번에 처리해서 param_check 만 ver. 별로 하면 될 것 ------ #\n","    #     => public_indi() 가 될 것\n","    #     1. 사용한 param 정보와 matching 된 data 병렬로 나열 logging 될 것\n","    tp_fee, out_fee = calc_tp_out_fee_v2(config)\n","\n","    # ============ tr_thresh ============ #  # vectorize allow only for p1_hhm\n","    if config.loc_set.point1.short_tr_thresh != \"None\":  #  and not config.tr_set.check_hlm:\n","        if ep_loc_side == OrderSide.SELL:\n","            short_tr_ = res_df['short_tr_{}'.format(selection_id)].to_numpy()\n","            mr_res *= short_tr_ >= config.loc_set.point1.short_tr_thresh\n","            # mr_res *= short_tr_ <= config.loc_set.point1.short_tr_thresh + 0.1\n","            if show_detail:\n","                sys_log.warning(\n","                    \"short_tr_ >= short_tr_thresh : {:.5f} {:.5f} ({})\".format(short_tr_[c_i], config.loc_set.point1.short_tr_thresh, mr_res[c_i]))\n","        else:\n","            long_tr_ = res_df['long_tr_{}'.format(selection_id)].to_numpy()\n","            mr_res *= long_tr_ >= config.loc_set.point1.long_tr_thresh\n","            # mr_res *= long_tr_ <= config.loc_set.point1.long_tr_thresh + 0.1\n","            if show_detail:\n","                sys_log.warning(\n","                    \"long_tr_ >= long_tr_thresh : {:.5f} {:.5f} ({})\".format(long_tr_[c_i], config.loc_set.point1.long_tr_thresh, mr_res[c_i]))\n","\n","    # ============ spread - independent to tr_set ============ #  --> Todo, 사용 안하고 싶은 wave_point1\n","    if config.loc_set.point1.short_spread != \"None\":\n","        if selection_id in ['v3']:\n","            if ep_loc_side == OrderSide.SELL:\n","                bb_base_5T = res_df['bb_base_5T'].to_numpy()  # to_numpy() 는 ep_loc 에서 진행됨\n","                bb_lower_5T = res_df['bb_lower_5T'].to_numpy()\n","                short_spread = (bb_base_5T - bb_lower_5T - tp_fee * bb_base_5T) / (bb_base_5T - bb_lower_5T + out_fee * bb_base_5T)\n","                mr_res *= short_spread >= config.loc_set.point1.short_spread\n","                if show_detail:\n","                    sys_log.warning(\n","                        \"short_spread >= config.loc_set.point1.short_spread : {:.5f} {:.5f} ({})\".format(short_spread[c_i], config.loc_set.point1.short_spread, mr_res[c_i]))\n","            else:\n","                bb_upper_5T = res_df['bb_upper_5T'].to_numpy()\n","                dc_lower_5T = res_df['dc_lower_5T'].to_numpy()\n","                # mr_res *= (bb_base_5T - dc_lower_5T - tp_fee * bb_upper_5T) / (bb_base_5T - dc_lower_5T + out_fee * bb_base_5T) >= config.loc_set.point1.long_spread\n","                long_spread = (bb_upper_5T - dc_lower_5T - tp_fee * bb_upper_5T) / (bb_upper_5T - dc_lower_5T + out_fee * bb_upper_5T)\n","                mr_res *= long_spread >= config.loc_set.point1.long_spread\n","                if show_detail:\n","                    sys_log.warning(\n","                        \"long_spread >= config.loc_set.point1.long_spread : {:.5f} {:.5f} ({})\".format(long_spread[c_i], config.loc_set.point1.long_spread, mr_res[c_i]))                  \n","\n","    # ============ point1 ratios ============ #\n","    # ------ wave_range_ratio ------ #    \n","    if config.loc_set.point1.wrr_10 != \"None\":   # for excessive range rejection         \n","      wave_itv1 = config.tr_set.wave_itv1\n","      wave_period1 = config.tr_set.wave_period1\n","      co_wrr_10_ = res_df['co_wrr_10_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","      cu_wrr_10_ = res_df['cu_wrr_10_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","      if ep_loc_side == OrderSide.SELL:\n","        mr_res *= cu_wrr_10_ <= config.loc_set.point1.wrr_10\n","        # mr_res *= cu_wrr_10_ >= config.loc_set.point1.wrr_10\n","        if show_detail:\n","            sys_log.warning(\"cu_wrr_10_ <= config.loc_set.point1.wrr_10 : {:.5f} {:.5f} ({})\".format(cu_wrr_10_[c_i], config.loc_set.point1.wrr_10, mr_res[c_i]))\n","      else:\n","        mr_res *= co_wrr_10_ <= config.loc_set.point1.wrr_10\n","        # mr_res *= co_wrr_10_ >= config.loc_set.point1.wrr_10\n","        if show_detail:\n","            sys_log.warning(\"co_wrr_10_ <= config.loc_set.point1.wrr_10 : {:.5f} {:.5f} ({})\".format(co_wrr_10_[c_i], config.loc_set.point1.wrr_10, mr_res[c_i]))\n","\n","    if config.loc_set.point1.wrr_21 != \"None\":   # for excessive range rejection         \n","      wave_itv1 = config.tr_set.wave_itv1\n","      wave_period1 = config.tr_set.wave_period1\n","      co_wrr_21_ = res_df['co_wrr_21_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","      cu_wrr_21_ = res_df['cu_wrr_21_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","      if ep_loc_side == OrderSide.SELL:\n","        mr_res *= cu_wrr_21_ <= config.loc_set.point1.wrr_21\n","        # mr_res *= cu_wrr_21_ >= config.loc_set.point1.wrr_21\n","        if show_detail:\n","            sys_log.warning(\"cu_wrr_21_ <= config.loc_set.point1.wrr_21 : {:.5f} {:.5f} ({})\".format(cu_wrr_21_[c_i], config.loc_set.point1.wrr_21, mr_res[c_i]))\n","      else:\n","        mr_res *= co_wrr_21_ <= config.loc_set.point1.wrr_21\n","        # mr_res *= co_wrr_21_ >= config.loc_set.point1.wrr_21\n","        if show_detail:\n","            sys_log.warning(\"co_wrr_21_ <= config.loc_set.point1.wrr_21 : {:.5f} {:.5f} ({})\".format(co_wrr_21_[c_i], config.loc_set.point1.wrr_21, mr_res[c_i]))\n","\n","    if config.loc_set.point1.wrr_32 != \"None\":            \n","      wave_itv1 = config.tr_set.wave_itv1\n","      wave_period1 = config.tr_set.wave_period1\n","      co_wrr_32_ = res_df['co_wrr_32_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","      cu_wrr_32_ = res_df['cu_wrr_32_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","      if ep_loc_side == OrderSide.SELL:\n","        mr_res *= cu_wrr_32_ <= config.loc_set.point1.wrr_32 #+ 0.1  # 0.1 0.05\n","        # mr_res *= (cu_wrr_32_ >= config.loc_set.point1.wrr_32) # & (cu_wrr_32_ <= 1)\n","        # mr_res *= cu_wrr_32_ >= config.loc_set.point1.wrr_32 - 0.1\n","        if show_detail:\n","            sys_log.warning(\"cu_wrr_32_ <= config.loc_set.point1.wrr_32 : {:.5f} {:.5f} ({})\".format(cu_wrr_32_[c_i], config.loc_set.point1.wrr_32, mr_res[c_i]))\n","      else:\n","        mr_res *= co_wrr_32_ <= config.loc_set.point1.wrr_32 #+ 0.1  # 0.1 0.05\n","        # mr_res *= (co_wrr_32_ >= config.loc_set.point1.wrr_32) # & (co_wrr_32_ <= 1)\n","        # mr_res *= co_wrr_32_ >= config.loc_set.point1.wrr_32 - 0.1\n","        if show_detail:\n","            sys_log.warning(\"co_wrr_32_ <= config.loc_set.point1.wrr_32 : {:.5f} {:.5f} ({})\".format(co_wrr_32_[c_i], config.loc_set.point1.wrr_32, mr_res[c_i]))\n","\n","    # ------ enough_space - Todo, future_data ------ #\n","    if config.loc_set.point1.co_es != \"None\":      \n","      itv, period1 = config.tr_set.p1_itv1, config.tr_set.p1_period1 \n","      b1_cu_es_ = res_df['b1_cu_es_{}{}'.format(itv, period1)].to_numpy()\n","      b1_co_es_ = res_df['b1_co_es_{}{}'.format(itv, period1)].to_numpy()\n","      if ep_loc_side == OrderSide.SELL:\n","        mr_res *= b1_co_es_ >= config.loc_set.point1.co_es\n","        mr_res *= b1_co_es_ <= config.loc_set.point1.co_es + 2\n","        if show_detail:\n","            sys_log.warning(\"b1_co_es_ >= config.loc_set.point1.co_es : {:.5f} {:.5f} ({})\".format(b1_co_es_[c_i], config.loc_set.point1.co_es, mr_res[c_i]))\n","      else:\n","        mr_res *= b1_cu_es_ >= config.loc_set.point1.cu_es\n","        mr_res *= b1_cu_es_ <= config.loc_set.point1.cu_es + 1\n","        if show_detail:\n","            sys_log.warning(\"b1_cu_es_ >= config.loc_set.point1.cu_es : {:.5f} {:.5f} ({})\".format(b1_cu_es_[c_i], config.loc_set.point1.cu_es, mr_res[c_i]))\n","\n","    # ------------ wick_ratio - Todo, future_data ------------ #\n","    # if config.loc_set.point1.short_wick_ratio != \"None\":\n","    #   b1_upper_wick_ratio_ = res_df['b1_upper_wick_ratio_{}'.format(config.loc_set.point1.wick_itv)].to_numpy()\n","    #   b1_lower_wick_ratio_ = res_df['b1_lower_wick_ratio_{}'.format(config.loc_set.point1.wick_itv)].to_numpy()      \n","    #   if ep_loc_side == OrderSide.SELL:\n","    #       # mr_res *= b1_upper_wick_ratio_ >= config.loc_set.point1.short_wick_ratio\n","    #       mr_res *= b1_lower_wick_ratio_ >= config.loc_set.point1.short_wick_ratio\n","    #       if show_detail:\n","    #           sys_log.warning(\"b1_lower_wick_ratio_ >= config.loc_set.point1.short_wick_ratio : {:.5f} {:.5f} ({})\".format(b1_lower_wick_ratio_[c_i], config.loc_set.point1.short_wick_ratio, mr_res[c_i]))\n","    #   else:\n","    #       # mr_res *= b1_lower_wick_ratio_ >= config.loc_set.point1.long_wick_ratio\n","    #       mr_res *= b1_upper_wick_ratio_ >= config.loc_set.point1.long_wick_ratio\n","    #       if show_detail:\n","    #           sys_log.warning(\"b1_upper_wick_ratio_ >= config.loc_set.point1.long_wick_ratio : {:.5f} {:.5f} ({})\".format(b1_upper_wick_ratio_[c_i], config.loc_set.point1.long_wick_ratio, mr_res[c_i]))\n","\n","    # ------ candle_range_ratio - Todo, future_data ------ #\n","    # if config.loc_set.point1.crr != \"None\":   \n","    #   tf_entry = to_itvnum(config.loc_set.point1.tf_entry)\n","    #   b1_crr_ = res_df['crr_{}'.format(config.loc_set.point1.tf_entry)].shift(tf_entry).to_numpy()\n","    #   mr_res *= b1_crr_ >= config.loc_set.point1.crr\n","    #   if show_detail:\n","    #       sys_log.warning(\"b1_crr_ >= config.loc_set.point1.crr : {:.5f} {:.5f} ({})\".format(b1_crr_[c_i], config.loc_set.point1.crr, mr_res[c_i]))\n","    \n","    # ------ dc_over_body_ratio ------ #\n","    if config.loc_set.point1.dbr != \"None\":\n","      b1_lwdbr = res_df['b1_lwdbr'].to_numpy()\n","      b1_updbr = res_df['b1_updbr'].to_numpy()\n","      if ep_loc_side == OrderSide.SELL:        \n","        mr_res *= b1_lwdbr >= config.loc_set.point1.dbr\n","        if show_detail:\n","            sys_log.warning(\n","                \"b1_lwdbr >= config.loc_set.point1.dbr : {:.5f} {:.5f} ({})\".format(b1_lwdbr[c_i], config.loc_set.point1.dbr, mr_res[c_i]))\n","      else:\n","        mr_res *= b1_updbr >= config.loc_set.point1.dbr\n","        if show_detail:\n","            sys_log.warning(\n","                \"b1_updbr >= config.loc_set.point1.dbr : {:.5f} {:.5f} ({})\".format(b1_updbr[c_i], config.loc_set.point1.dbr, mr_res[c_i]))\n","            \n","    if config.loc_set.point1.dbr2 != \"None\":\n","      b1_lwdbr = res_df['b1_lwdbr'].to_numpy()\n","      b1_updbr = res_df['b1_updbr'].to_numpy()\n","      if ep_loc_side == OrderSide.SELL:    \n","        mr_res *= b1_updbr >= config.loc_set.point1.dbr2\n","        if show_detail:\n","            sys_log.warning(\n","                \"b1_updbr >= config.loc_set.point1.dbr2 : {:.5f} {:.5f} ({})\".format(b1_updbr[c_i], config.loc_set.point1.dbr2, mr_res[c_i]))\n","      else:\n","        mr_res *= b1_lwdbr >= config.loc_set.point1.dbr2\n","        if show_detail:\n","            sys_log.warning(\n","                \"b1_lwdbr >= config.loc_set.point1.dbr2 : {:.5f} {:.5f} ({})\".format(b1_lwdbr[c_i], config.loc_set.point1.dbr2, mr_res[c_i]))\n","\n","    # ------ wick_body_ratio ------ #\n","    if config.loc_set.point1.wbr != \"None\":\n","        wave_body_ratio = res_df['wave_body_ratio'].to_numpy()\n","        mr_res *= wave_body_ratio >= config.loc_set.point1.wbr\n","        if show_detail:\n","            sys_log.warning(\n","                \"wave_body_ratio >= config.loc_set.point1.wbr : {:.5f} {:.5f} ({})\".format(wave_body_ratio[c_i], config.loc_set.point1.wbr, mr_res[c_i]))\n","            \n","    # ------ body_rel_ratio ------ #\n","    if config.loc_set.point1.brr != \"None\":\n","        body_rel_ratio_ = res_df['body_rel_ratio_{}'.format(config.loc_set.point1.tf_entry)].to_numpy()\n","        mr_res *= body_rel_ratio_ <= config.loc_set.point1.brr\n","        if show_detail:\n","            sys_log.warning(\n","                \"body_rel_ratio_ <= config.loc_set.point1.brr : {:.5f} {:.5f} ({})\".format(body_rel_ratio_[c_i], config.loc_set.point1.brr, mr_res[c_i]))\n","\n","    # ------ pumping_ratio ------ #\n","    if config.loc_set.point1.ppr != \"None\":\n","      if ep_loc_side == OrderSide.SELL:\n","        short_ppr_ = res_df['short_ppr_{}'.format(selection_id)].to_numpy()\n","        mr_res *= short_ppr_ >= config.loc_set.point1.ppr\n","        if show_detail:\n","            sys_log.warning(\"short_ppr_ >= config.loc_set.point1.ppr : {:.5f} {:.5f} ({})\".format(short_ppr_[c_i], config.loc_set.point1.ppr, mr_res[c_i]))\n","      else:\n","        long_ppr_ = res_df['long_ppr_{}'.format(selection_id)].to_numpy()\n","        mr_res *= long_ppr_ >= config.loc_set.point1.ppr\n","        if show_detail:\n","            sys_log.warning(\"long_ppr_ >= config.loc_set.point1.ppr : {:.5f} {:.5f} ({})\".format(long_ppr_[c_i], config.loc_set.point1.ppr, mr_res[c_i]))\n"," \n","    # ============ rtc_zone  ============ #  --> Todo, 사용 안하고 싶은 wave_dur., 추후 zone 으로 옮길 것\n","    # ------ dtk ------ #\n","    if config.loc_set.zone1.dt_k != \"None\":\n","        # ------ dc_v2 ------ #\n","        dc_lower_v2 = res_df['dc_lower_v2'.format(selection_id)].to_numpy()\n","        short_dtk_1_ = res_df['short_dtk_1_{}'.format(selection_id)].to_numpy() - \\\n","                       res_df['short_dtk_gap_{}'.format(selection_id)].to_numpy() * config.loc_set.zone1.dt_k\n","        dc_upper_v2 = res_df['dc_upper_v2'.format(selection_id)].to_numpy()\n","        long_dtk_1_ = res_df['long_dtk_1_{}'.format(selection_id)].to_numpy() + \\\n","                      res_df['long_dtk_gap_{}'.format(selection_id)].to_numpy() * config.loc_set.zone1.dt_k\n","        if ep_loc_side == OrderSide.SELL:\n","            mr_res *= dc_lower_v2 >= short_dtk_1_\n","            if show_detail:\n","                sys_log.warning(\n","                    \"dc_lower_v2 >= short_dtk_1_ : {:.5f} {:.5f} ({})\".format(dc_lower_v2[c_i], short_dtk_1_[c_i], mr_res[c_i]))\n","        else:\n","            mr_res *= dc_upper_v2 <= long_dtk_1_\n","            if show_detail:\n","                sys_log.warning(\n","                    \"dc_upper_v2 <= long_dtk_1_ : {:.5f} {:.5f} ({})\".format(dc_upper_v2[c_i], long_dtk_1_[c_i], mr_res[c_i]))\n","                \n","    # ============ zone ============ #\n","    # ------ config var. 이 등록되지 않은 dur. 은 selection_id 으로 조건문을 나눔 (lvrg_set 과 동일) ------ #\n","    if config.loc_set.zone1.use_zone:\n","\n","      # ------------ 추세선 리스트 on_price ------------ #\n","      wave_itv1 = config.tr_set.wave_itv1\n","      wave_period1 = config.tr_set.wave_period1      \n","      \n","      wave_high_fill1_ = res_df['wave_high_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","      wave_low_fill1_ = res_df['wave_low_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","\n","      short_tp_0_ = res_df['short_tp_0_{}'.format(selection_id)].to_numpy()\n","      long_tp_0_ = res_df['long_tp_0_{}'.format(selection_id)].to_numpy()\n","\n","        # ------ ma ------ #\n","      # ma_period = 60\n","      # # res_df = ma(res_df, ma_period)       \n","      # ma_ = res_df['ma_T{}'.format(ma_period)].to_numpy()\n","\n","      # if ep_loc_side == OrderSide.SELL:\n","      #   mr_res *= wave_high_fill1_ < ma_\n","      #   if show_detail:\n","      #     sys_log.warning(\"wave_high_fill1_ < ma_ : {:.5f} {:.5f} ({})\".format(wave_high_fill1_[c_i], ma_[c_i], mr_res[c_i]))\n","      # else:\n","      #   mr_res *= wave_low_fill1_ > ma_\n","      #   if show_detail:\n","      #     sys_log.warning(\"wave_low_fill1_ > ma_ : {:.5f} {:.5f} ({})\".format(wave_low_fill1_[c_i], ma_[c_i], mr_res[c_i]))\n","        \n","        # ------ dc_base ------ #      \n","      # dc_base_ = res_df['dc_base_T30'].to_numpy()\n","      dc_base_T20 = res_df['dc_base_T20'].to_numpy()\n","      dc_base_5T20 = res_df['dc_base_5T20'].to_numpy()\n","      dc_base_15T20 = res_df['dc_base_15T20'].to_numpy()\n","      dc_base_H20 = res_df['dc_base_H20'].to_numpy()\n","      dc_base_4H20 = res_df['dc_base_4H20'].to_numpy()\n","      \n","      if ep_loc_side == OrderSide.SELL:\n","        mr_res *= short_tp_0_ < dc_base_H20\n","        if show_detail:\n","          sys_log.warning(\"short_tp_0_ < dc_base_H20 : {:.5f} {:.5f} ({})\".format(short_tp_0_[c_i], dc_base_H20[c_i], mr_res[c_i]))\n","      else:\n","        mr_res *= long_tp_0_ > dc_base_H20\n","        if show_detail:\n","          sys_log.warning(\"long_tp_0_ > dc_base_H20 : {:.5f} {:.5f} ({})\".format(long_tp_0_[c_i], dc_base_H20[c_i], mr_res[c_i]))   \n","\n","\n","      # if ep_loc_side == OrderSide.SELL:\n","      #   mr_res *= wave_high_fill1_ < dc_base_5T20\n","      #   if show_detail:\n","      #     sys_log.warning(\"wave_high_fill1_ < dc_base_5T20 : {:.5f} {:.5f} ({})\".format(wave_high_fill1_[c_i], dc_base_5T20[c_i], mr_res[c_i]))\n","      # else:\n","      #   mr_res *= wave_low_fill1_ > dc_base_5T20\n","      #   if show_detail:\n","      #     sys_log.warning(\"wave_low_fill1_ > dc_base_5T20 : {:.5f} {:.5f} ({})\".format(wave_low_fill1_[c_i], dc_base_5T20[c_i], mr_res[c_i]))    \n","\n","\n","      # if ep_loc_side == OrderSide.SELL:\n","      #   mr_res *= dc_base_T20 < dc_base_5T20\n","      #   if show_detail:\n","      #     sys_log.warning(\"dc_base_T20 < dc_base_5T20 : {:.5f} {:.5f} ({})\".format(dc_base_T20[c_i], dc_base_5T20[c_i], mr_res[c_i]))\n","      # else:\n","      #   mr_res *= dc_base_T20 > dc_base_5T20\n","      #   if show_detail:\n","      #     sys_log.warning(\"dc_base_T20 > dc_base_5T20 : {:.5f} {:.5f} ({})\".format(dc_base_T20[c_i], dc_base_5T20[c_i], mr_res[c_i]))  \n","          \n","      # if ep_loc_side == OrderSide.SELL:\n","      #   mr_res *= dc_base_5T20 < dc_base_15T20\n","      #   if show_detail:\n","      #     sys_log.warning(\"dc_base_5T20 < dc_base_15T20 : {:.5f} {:.5f} ({})\".format(dc_base_5T20[c_i], dc_base_15T20[c_i], mr_res[c_i]))\n","      # else:\n","      #   mr_res *= dc_base_5T20 > dc_base_15T20\n","      #   if show_detail: \n","      #     sys_log.warning(\"dc_base_5T20 > dc_base_15T20 : {:.5f} {:.5f} ({})\".format(dc_base_5T20[c_i], dc_base_15T20[c_i], mr_res[c_i]))  \n","          \n","      # if ep_loc_side == OrderSide.SELL:\n","      #   mr_res *= dc_base_5T20 < dc_base_15T20\n","      #   if show_detail:\n","      #     sys_log.warning(\"dc_base_15T20 < dc_base_H20 : {:.5f} {:.5f} ({})\".format(dc_base_15T20[c_i], dc_base_H20[c_i], mr_res[c_i]))\n","      # else:\n","      #   mr_res *= dc_base_5T20 > dc_base_15T20\n","      #   if show_detail: \n","      #     sys_log.warning(\"dc_base_15T20 > dc_base_H20 : {:.5f} {:.5f} ({})\".format(dc_base_15T20[c_i], dc_base_H20[c_i], mr_res[c_i]))  \n","      \n","      # ------------ out_price ------------ #\n","        # ------ macd ------ #\n","      # # macd_ = res_df['macd_T535'].to_numpy()\n","      # macd_ = res_df['macd_hist_T53515'].to_numpy()\n","\n","      # if ep_loc_side == OrderSide.SELL:\n","      #   mr_res *= macd_ < 0\n","      #   if show_detail:\n","      #     sys_log.warning(\"macd_ < 0 : {:.5f} {:.5f} ({})\".format(macd_[c_i], 0, mr_res[c_i]))\n","      # else:\n","      #   mr_res *= macd_ > 0\n","      #   if show_detail:\n","      #     sys_log.warning(\"macd_ > 0 : {:.5f} {:.5f} ({})\".format(macd_[c_i], 0, mr_res[c_i]))\n","\n","      # ------ bb_base uptrend ------ #\n","      # bb_base_T100 = res_df['bb_base_T100'].to_numpy()\n","      # b1_bb_base_T100 = res_df['bb_base_T100'].shift(1).to_numpy()\n","\n","      # lb_period = config.loc_set.zone1.bb_trend_period\n","      # bb_base_downtrend = pd.Series(b1_bb_base_T100 < bb_base_T100).rolling(lb_period).sum().to_numpy() == 0\n","      # bb_base_uptrend = pd.Series(b1_bb_base_T100 > bb_base_T100).rolling(lb_period).sum().to_numpy() == 0\n","\n","      # if ep_loc_side == OrderSide.SELL:\n","      #   mr_res *= bb_base_downtrend\n","      #   if show_detail:\n","      #       sys_log.warning(\"bb_base_downtrend : {:.5f} ({})\".format(bb_base_downtrend[c_i], mr_res[c_i]))       \n","      # else:\n","      #   mr_res *= bb_base_uptrend\n","      #   if show_detail:\n","      #       sys_log.warning(\"bb_base_uptrend : {:.5f} ({})\".format(bb_base_uptrend[c_i], mr_res[c_i]))    \n","\n","    # -------------- zoned tr_set - post_work -------------- #\n","    if config.tr_set.c_ep_gap != \"None\" or config.tr_set.t_out_gap != \"None\":\n","        #       by zone_dtk       #\n","        #         c_zone        #\n","        zone_dc_upper_v2_ = res_df['zone_dc_upper_v2'.format(selection_id)].to_numpy()\n","        long_dtk_plot_1 = res_df['long_dtk_plot_1'].to_numpy() + res_df['long_dtk_plot_gap'].to_numpy() * config.loc_set.zone1.zone_dt_k\n","        zone_dc_lower_v2_ = res_df['zone_dc_lower_v2'.format(selection_id)].to_numpy()\n","        short_dtk_plot_1 = res_df['short_dtk_plot_1'].to_numpy() - res_df['short_dtk_plot_gap'].to_numpy() * config.loc_set.zone1.zone_dt_k\n","        if ep_loc_side == OrderSide.SELL:\n","            zone_res = zone_dc_upper_v2_ > long_dtk_plot_1  # mr_res 와는 별개임\n","            pos = 'short'\n","        else:\n","            zone_res = zone_dc_lower_v2_ < short_dtk_plot_1\n","            pos = 'long'\n","\n","        # static 여부에 따른 vectorized adj. - dynamic 은 vectorize 불가\n","        if config.ep_set.static_ep and config.tr_set.c_ep_gap != \"None\":\n","            res_df['{}_ep_{}'.format(pos, selection_id)][zone_res] = res_df['{}_ep2_{}'.format(pos, selection_id)][zone_res]\n","        if config.out_set.static_out and config.tr_set.t_out_gap != \"None\":\n","            res_df['{}_out_{}'.format(pos, selection_id)][~zone_res] = res_df['{}_out2_{}'.format(pos, selection_id)][\n","                ~zone_res]  # t_zone 에 대한 out2 setting\n","        zone_arr = np.where(zone_res == 1, 'c', 't')\n","\n","    return mr_res, zone_arr  # mr_res 의 True idx 가 open signal\n","\n","\n","def ep_loc_p2_v3(res_df, config, np_timeidx, show_detail=True, ep_loc_side=OrderSide.SELL):\n","    # ------- param init ------- #\n","    selection_id = config.selection_id\n","    c_i = config.trader_set.complete_index\n","    len_df = len(res_df)\n","    mr_res = np.ones(len_df)\n","    zone_arr = np.full(len_df, 'n')\n","\n","    # ------ process 한번에 처리해서 param_check 만 ver. 별로 하면 될 것 ------ #\n","    #     => public_indi() 가 될 것\n","    #     1. 사용한 param 정보와 matching 된 data 병렬로 나열 logging 될 것\n","    # tp_fee, out_fee = calc_tp_out_fee_v2(config)\n","\n","    # ============ point1 ratios ============ #\n","    # ------ wave_range_ratio ------ #\n","    # if config.loc_set.point2.cu_wrr_21 != \"None\":   # for excessive range rejection         \n","    #   wave_itv1 = config.tr_set.wave_itv1\n","    #   wave_period1 = config.tr_set.wave_period1\n","    #   co_wrr_21_ = res_df['co_wrr_21_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","    #   cu_wrr_21_ = res_df['cu_wrr_21_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","    #   if ep_loc_side == OrderSide.SELL:\n","    #     mr_res *= cu_wrr_21_ <= config.loc_set.point2.cu_wrr_21\n","    #     mr_res *= cu_wrr_21_ >= config.loc_set.point2.cu_wrr_21 - 0.2\n","    #     if show_detail:\n","    #         sys_log.warning(\"cu_wrr_21_ <= config.loc_set.point2.cu_wrr_21 : {:.5f} {:.5f} ({})\".format(cu_wrr_21_[c_i], config.loc_set.point2.cu_wrr_21, mr_res[c_i]))\n","    #   else:\n","    #     mr_res *= co_wrr_21_ <= config.loc_set.point2.co_wrr_21\n","    #     mr_res *= co_wrr_21_ >= config.loc_set.point2.co_wrr_21 - 0.2\n","    #     if show_detail:\n","    #         sys_log.warning(\"co_wrr_21_ <= config.loc_set.point2.co_wrr_21 : {:.5f} {:.5f} ({})\".format(co_wrr_21_[c_i], config.loc_set.point2.co_wrr_21, mr_res[c_i]))\n","\n","    if config.loc_set.point2.wrr_32 != \"None\":            \n","      wave_itv2 = config.tr_set.wave_itv2\n","      wave_period2 = config.tr_set.wave_period2\n","      co_wrr_32_ = res_df['co_wrr_32_{}{}'.format(wave_itv2, wave_period2)].to_numpy()\n","      cu_wrr_32_ = res_df['cu_wrr_32_{}{}'.format(wave_itv2, wave_period2)].to_numpy()\n","      if ep_loc_side == OrderSide.SELL:\n","        mr_res *= cu_wrr_32_ <= config.loc_set.point2.wrr_32  #  + 0.1  # 0.1 0.05\n","        # mr_res *= cu_wrr_32_ >= config.loc_set.point2.wrr_32\n","        if show_detail:\n","            sys_log.warning(\"cu_wrr_32_ <= config.loc_set.point2.wrr_32 : {:.5f} {:.5f} ({})\".format(cu_wrr_32_[c_i], config.loc_set.point2.wrr_32, mr_res[c_i]))\n","      else:\n","        mr_res *= co_wrr_32_ <= config.loc_set.point2.wrr_32  #  + 0.1  # 0.1 0.05\n","        # mr_res *= co_wrr_32_ >= config.loc_set.point2.wrr_32\n","        if show_detail:\n","            sys_log.warning(\"co_wrr_32_ <= config.loc_set.point2.wrr_32 : {:.5f} {:.5f} ({})\".format(co_wrr_32_[c_i], config.loc_set.point2.wrr_32, mr_res[c_i]))\n","\n","    if config.loc_set.point2.csd_period != \"None\":\n","      wave_itv2 = config.tr_set.wave_itv2\n","      csd_period = config.loc_set.point2.csd_period\n","      \n","      res_df = dc_line_v4(res_df, res_df, dc_period=csd_period)\n","      dc_upper_ = res_df['dc_upper_{}{}'.format(wave_itv2, csd_period)].to_numpy()    \n","      dc_lower_ = res_df['dc_lower_{}{}'.format(wave_itv2, csd_period)].to_numpy()\n","      if ep_loc_side == OrderSide.SELL:\n","        csdbox = res_df['short_tp_1_{}'.format(selection_id)].to_numpy() + res_df['short_tp_gap_{}'.format(selection_id)].to_numpy() * config.loc_set.point2.csdbox_range\n","        mr_res *= dc_upper_ <= csdbox\n","        if show_detail:\n","            sys_log.warning(\"dc_upper_ <= csdbox : {:.5f} {:.5f} ({})\".format(dc_upper_[c_i], csdbox[c_i], mr_res[c_i]))\n","      else:\n","        csdbox = res_df['long_tp_1_{}'.format(selection_id)].to_numpy() - res_df['long_tp_gap_{}'.format(selection_id)].to_numpy() * config.loc_set.point2.csdbox_range\n","        mr_res *= dc_lower_ >= csdbox\n","        if show_detail:\n","            sys_log.warning(\"dc_lower_ >= csdbox : {:.5f} {:.5f} ({})\".format(dc_lower_[c_i], csdbox[c_i], mr_res[c_i]))\n","\n","    # ============ zone ============ #    \n","    # ------------ 추세선 리스트 on_price ------------ #\n","    if config.loc_set.zone2.use_zone:\n","      wave_itv1 = config.tr_set.wave_itv1\n","      wave_period1 = config.tr_set.wave_period1      \n","      \n","      wave_high_fill1_ = res_df['wave_high_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","      wave_low_fill1_ = res_df['wave_low_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","\n","      dc_base_T20 = res_df['dc_base_T20'].to_numpy()\n","      dc_base_5T20 = res_df['dc_base_5T20'].to_numpy()\n","      dc_base_15T20 = res_df['dc_base_15T20'].to_numpy()\n","      dc_base_H20 = res_df['dc_base_H20'].to_numpy()\n","      dc_base_4H20 = res_df['dc_base_4H20'].to_numpy()\n","\n","        # ------ ma ------ #\n","      # ma_period = 60\n","      # # res_df = ma(res_df, ma_period)       \n","      # ma_ = res_df['ma_T{}'.format(ma_period)].to_numpy()\n","\n","      # if ep_loc_side == OrderSide.SELL:\n","      #   mr_res *= wave_high_fill1_ < ma_\n","      #   if show_detail:\n","      #     sys_log.warning(\"wave_high_fill1_ < ma_ : {:.5f} {:.5f} ({})\".format(wave_high_fill1_[c_i], ma_[c_i], mr_res[c_i]))\n","      # else:\n","      #   mr_res *= wave_low_fill1_ > ma_\n","      #   if show_detail:\n","      #     sys_log.warning(\"wave_low_fill1_ > ma_ : {:.5f} {:.5f} ({})\".format(wave_low_fill1_[c_i], ma_[c_i], mr_res[c_i]))\n","        \n","        # ------ out0 & dcbase ------ #      \n","      if ep_loc_side == OrderSide.SELL:\n","        # mr_res *= wave_high_fill1_ < dc_base_5T20\n","        mr_res *= wave_high_fill1_ < dc_base_H20\n","        if show_detail:\n","          # sys_log.warning(\"wave_high_fill1_ < dc_base_5T20 : {:.5f} {:.5f} ({})\".format(wave_high_fill1_[c_i], dc_base_5T20[c_i], mr_res[c_i]))\n","          sys_log.warning(\"wave_high_fill1_ < dc_base_H20 : {:.5f} {:.5f} ({})\".format(wave_high_fill1_[c_i], dc_base_H20[c_i], mr_res[c_i]))\n","      else:\n","        # mr_res *= wave_low_fill1_ > dc_base_5T20\n","        mr_res *= wave_low_fill1_ > dc_base_H20\n","        if show_detail:\n","          # sys_log.warning(\"wave_low_fill1_ > dc_base_5T20 : {:.5f} {:.5f} ({})\".format(wave_low_fill1_[c_i], dc_base_5T20[c_i], mr_res[c_i]))\n","          sys_log.warning(\"wave_low_fill1_ > dc_base_H20 : {:.5f} {:.5f} ({})\".format(wave_low_fill1_[c_i], dc_base_H20[c_i], mr_res[c_i]))\n","\n","        # ------ dcbase ------ #\n","      if ep_loc_side == OrderSide.SELL:\n","        # mr_res *= dc_base_T20 < dc_base_5T20\n","      #   mr_res *= dc_base_5T20 < dc_base_15T20\n","        mr_res *= dc_base_15T20 < dc_base_H20\n","        if show_detail:\n","      #     sys_log.warning(\"dc_base_T20 < dc_base_5T20 : {:.5f} {:.5f} ({})\".format(dc_base_T20[c_i], dc_base_5T20[c_i], mr_res[c_i]))\n","      #     sys_log.warning(\"dc_base_5T20 < dc_base_15T20 : {:.5f} {:.5f} ({})\".format(dc_base_5T20[c_i], dc_base_15T20[c_i], mr_res[c_i]))\n","          sys_log.warning(\"dc_base_5T20 < dc_base_H20 : {:.5f} {:.5f} ({})\".format(dc_base_5T20[c_i], dc_base_H20[c_i], mr_res[c_i]))\n","      else:\n","      #   mr_res *= dc_base_T20 > dc_base_5T20\n","      #   mr_res *= dc_base_5T20 > dc_base_15T20\n","        mr_res *= dc_base_15T20 > dc_base_H20\n","        if show_detail:\n","      #     sys_log.warning(\"dc_base_T20 > dc_base_5T20 : {:.5f} {:.5f} ({})\".format(dc_base_T20[c_i], dc_base_5T20[c_i], mr_res[c_i]))  \n","      #     sys_log.warning(\"dc_base_5T20 > dc_base_15T20 : {:.5f} {:.5f} ({})\".format(dc_base_5T20[c_i], dc_base_15T20[c_i], mr_res[c_i]))\n","          sys_log.warning(\"dc_base_5T20 > dc_base_H20 : {:.5f} {:.5f} ({})\".format(dc_base_5T20[c_i], dc_base_H20[c_i], mr_res[c_i]))\n","      \n","\n","\n","    return mr_res, zone_arr  # mr_res 의 True idx 가 open signal"]},{"cell_type":"markdown","metadata":{"id":"EQ63Jwpvr7qA"},"source":["#### legacy"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"csZwxsP5r_Pz"},"outputs":[],"source":["      \n","    # ------ hl_loc_pct ------ #\n","    if config.loc_set.zone.hl_loc_pct != \"None\":      \n","      wave_high_loc_pct_ = res_df['wave_high_loc_pct_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","      wave_low_loc_pct_ = res_df['wave_low_loc_pct_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","\n","      if ep_loc_side == OrderSide.SELL:\n","        mr_res *= wave_high_loc_pct_ >= config.loc_set.zone.hl_loc_pct\n","        mr_res *= wave_high_loc_pct_ <= config.loc_set.zone.hl_loc_pct + 0.5\n","        if show_detail:\n","            sys_log.warning(\"wave_high_loc_pct_ >= config.loc_set.zone.hl_loc_pct : {:.5f} {:.5f} ({})\".format(wave_high_loc_pct_[c_i], config.loc_set.zone.hl_loc_pct, mr_res[c_i]))\n","      else:\n","        mr_res *= wave_low_loc_pct_ >= config.loc_set.zone.hl_loc_pct\n","        mr_res *= wave_low_loc_pct_ <= config.loc_set.zone.hl_loc_pct + 0.5\n","        if show_detail:\n","            sys_log.warning(\"wave_low_loc_pct_ >= config.loc_set.zone.hl_loc_pct : {:.5f} {:.5f} ({})\".format(wave_low_loc_pct_[c_i], config.loc_set.zone.hl_loc_pct, mr_res[c_i]))\n","\n","            \n","        # ------------------ wave_biaser (sr_confirmer) ------------------ #\n","        if selection_id in ['3_9']:     \n","          itv, period1, period2 = config.tr_set.p1_itv1, config.tr_set.p1_period1, config.tr_set.p1_period2          \n","\n","          if ep_loc_side == OrderSide.SELL:\n","            short_wave_high_ = res_df['short_wave_high_{}{}{}'.format(itv, period1, period2)]\n","            bb_lower_5T_amax = get_line(res_df['short_wave_high_idx_{}{}{}'.format(itv, period1, period2)].to_numpy(), res_df['bb_lower_5T'].to_numpy())\n","            mr_res *= short_wave_high_ <= bb_lower_5T_amax\n","            if show_detail:\n","                sys_log.warning(\"short_wave_high_ <= bb_lower_5T_amax : {:.5f} {:.5f} ({})\".format(short_wave_high_[c_i], bb_lower_5T_amax[c_i], mr_res[c_i]))\n","          else:\n","            long_wave_low_ = res_df['long_wave_low_{}{}{}'.format(itv, period1, period2)]\n","            bb_upper_5T_amax = get_line(res_df['long_wave_low_idx_{}{}{}'.format(itv, period1, period2)].to_numpy(), res_df['bb_upper_5T'].to_numpy())\n","            mr_res *= long_wave_low_ >= bb_upper_5T_amax\n","            if show_detail:\n","                sys_log.warning(\"long_wave_low_ >= bb_upper_5T_amax : {:.5f} {:.5f} ({})\".format(long_wave_low_[c_i], bb_upper_5T_amax[c_i], mr_res[c_i]))\n","\n","\n","        if selection_id in ['4_3', '3_5', '3_51']:\n","            dc_base_T20 = res_df['dc_base_T20'].to_numpy()\n","            dc_base_3T20 = res_df['dc_base_3T20'].to_numpy()\n","            # b1_dc_base_3T20 = res_df['dc_base_3T20'].shift(3).to_numpy()\n","            # dc_base_5T = res_df['dc_base_5T'].to_numpy()\n","            # dc_base_15T = res_df['dc_base_15T'].to_numpy()\n","            # dc_base_30T = res_df['dc_base_30T'].to_numpy()\n","            dc_base_H20 = res_df['dc_base_H20'].to_numpy()\n","            # dc_base_4H = res_df['dc_base_4H'].to_numpy()\n","            # dc_base_D = res_df['dc_base_D'].to_numpy()\n","\n","            itv, period1, period2 = config.tr_set.p1_itv1, config.tr_set.p1_period1, config.tr_set.p1_period2\n","            if ep_loc_side == OrderSide.SELL:\n","                # ------ short_base_ <= dc_base_3T20 ------ #\n","                short_base_ = res_df['short_base_{}{}{}'.format(itv, period1, period2)].to_numpy()\n","                mr_res *= short_base_ <= dc_base_3T20\n","                if show_detail:\n","                    sys_log.warning(\"short_base_ <= dc_base_3T20 : {:.5f} {:.5f} ({})\".format(short_base_[c_i], dc_base_3T20[c_i], mr_res[c_i]))\n","\n","                # mr_res *= short_base_ <= dc_base_T20\n","                # if show_detail:\n","                #     sys_log.warning(\"short_base_ <= dc_base_T20 : {:.5f} {:.5f} ({})\".format(short_base_[c_i], dc_base_T20[c_i], mr_res[c_i]))\n","\n","                # ------ reject csd ------ #\n","                # dc_upper_ = res_df['dc_upper_{}{}'.format(itv, period1)].to_numpy()\n","                # mr_res *= dc_upper_ <= dc_base_3T\n","                # if show_detail:\n","                #     sys_log.warning(\"dc_upper_ <= dc_base_3T20 : {:.5f} {:.5f} ({})\".format(dc_upper_[c_i], dc_base_3T[c_i], mr_res[c_i]))\n","\n","                # Todo, 부호 조심\n","                # dc_upper2_ = res_df['dc_upper_{}{}'.format(itv, period2)].to_numpy()\n","                # mr_res *= dc_upper2_ >= dc_base_H\n","                # if show_detail:\n","                #     sys_log.warning(\"dc_upper2_ >= dc_base_H20 : {:.5f} {:.5f} ({})\".format(dc_upper2_[c_i], dc_base_H[c_i], mr_res[c_i]))  \n","\n","                # long 과 동일한 dur.\n","                dc_lower2_ = res_df['dc_lower_{}{}'.format(itv, period2)].to_numpy()\n","                mr_res *= dc_lower2_ >= dc_base_H20\n","                if show_detail:\n","                    sys_log.warning(\"dc_lower2_ >= dc_base_H20 : {:.5f} {:.5f} ({})\".format(dc_lower2_[c_i], dc_base_H20[c_i], mr_res[c_i]))  \n","\n","                # ------ consecutive base ascender ------ #\n","                # ------ 1. roll_min ------ #\n","                dc_base_3T20_rollmin = res_df['dc_base_3T20'].rolling(config.loc_set.zone.base_roll_period).min().to_numpy()\n","                mr_res *= dc_base_3T20_rollmin == dc_base_3T20\n","                if show_detail:\n","                    sys_log.warning(\n","                        \"dc_base_3T20_rollmin == dc_base_3T2020 : {:.5f} {:.5f} ({})\".format(dc_base_3T20_rollmin[c_i], dc_base_3T20[c_i], mr_res[c_i]))\n","            else:\n","                # ------ long_base >= dc_base_3T20 ------ #\n","                long_base_ = res_df['long_base_{}{}{}'.format(itv, period1, period2)].to_numpy()\n","                mr_res *= long_base_ >= dc_base_3T20\n","                if show_detail:\n","                    sys_log.warning(\"long_base_ >= dc_base_3T20 : {:.5f} {:.5f} ({})\".format(long_base_[c_i], dc_base_3T20[c_i], mr_res[c_i]))\n","\n","                # mr_res *= long_base_ >= dc_base_T20\n","                # if show_detail:\n","                #     sys_log.warning(\"long_base_ >= dc_base_T20 : {:.5f} {:.5f} ({})\".format(long_base_[c_i], dc_base_T20[c_i], mr_res[c_i]))\n","\n","                # ------ reject csd ------ #\n","                # dc_lower_ = res_df['dc_lower_{}{}'.format(itv, period1)].to_numpy()\n","                # mr_res *= dc_lower_ >= dc_base_3T\n","                # if show_detail:\n","                #     sys_log.warning(\"dc_lower_ >= dc_base_3T20 : {:.5f} {:.5f} ({})\".format(dc_lower_[c_i], dc_base_3T[c_i], mr_res[c_i]))\n","\n","                dc_lower2_ = res_df['dc_lower_{}{}'.format(itv, period2)].to_numpy()\n","                mr_res *= dc_lower2_ >= dc_base_H20\n","                if show_detail:\n","                    sys_log.warning(\"dc_lower2_ >= dc_base_H20 : {:.5f} {:.5f} ({})\".format(dc_lower2_[c_i], dc_base_H20[c_i], mr_res[c_i]))\n","\n","                # bb_lower_5T = res_df['bb_lower_5T'].to_numpy()\n","                # mr_res *= dc_lower2_ >= bb_lower_5T\n","                # if show_detail:\n","                #     sys_log.warning(\"dc_lower2_ >= bb_lower_5T : {:.5f} {:.5f} ({})\".format(dc_lower2_[c_i], bb_lower_5T[c_i], mr_res[c_i]))\n","\n","                # ------ alignment ------ #\n","                # mr_res *= (dc_base_3T20 > dc_base_5T) & (dc_base_5T > dc_base_15T) & (dc_base_15T > dc_base_30T)\n","\n","                # ------ consecutive base ascender ------ #\n","                # ------ 1. roll_max ------ #\n","                dc_base_3T20_rollmax = res_df['dc_base_3T20'].rolling(config.loc_set.zone.base_roll_period).max().to_numpy()\n","                mr_res *= dc_base_3T20_rollmax == dc_base_3T20\n","                if show_detail:\n","                    sys_log.warning(\n","                        \"dc_base_3T20_rollmax == dc_base_3T2020 : {:.5f} {:.5f} ({})\".format(dc_base_3T20_rollmax[c_i], dc_base_3T20[c_i], mr_res[c_i]))\n","\n","                # ------ 2. roll_max_v2 - ascender  ------ #\n","                # dc_base_3T_ascend = (res_df['dc_base_3T'] >= res_df['dc_base_3T'].shift(3)).rolling(config.loc_set.zone.base_roll_period).sum().to_numpy()\n","                # # mr_res *= dc_base_3T_ascend == config.loc_set.zone.base_roll_period\n","                # mr_res *= dc_base_3T_ascend != config.loc_set.zone.base_roll_period\n","                # if show_detail:\n","                #     sys_log.warning(\"dc_base_3T_ascend == config.loc_set.zone.base_roll_period : {:.5f} {:.5f} ({})\".format(dc_base_3T_ascend[c_i], config.loc_set.zone.base_roll_period, mr_res[c_i]))\n","\n","\n","    if config.loc_set.point.wrr != \"None\":            \n","      wave_itv = 'T'\n","      wave_period = config.tr_set.wave_period\n","      co_wrr_ = res_df['co_wrr_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","      cu_wrr_ = res_df['cu_wrr_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","      if ep_loc_side == OrderSide.SELL:\n","        mr_res *= co_wrr_ <= config.loc_set.point.wrr\n","        if show_detail:\n","            sys_log.warning(\"co_wrr_ <= config.loc_set.point.wrr : {:.5f} {:.5f} ({})\".format(co_wrr_[c_i], config.loc_set.point.wrr, mr_res[c_i]))\n","      else:\n","        mr_res *= cu_wrr_ <= config.loc_set.point.wrr\n","        if show_detail:\n","            sys_log.warning(\"cu_wrr_ <= config.loc_set.point.wrr : {:.5f} {:.5f} ({})\".format(cu_wrr_[c_i], config.loc_set.point.wrr, mr_res[c_i]))\n","            \n","      # if ep_loc_side == OrderSide.SELL:\n","      #   mr_res *= cu_es_ >= config.loc_set.point.cu_es\n","      #   mr_res *= cu_es_ <= config.loc_set.point.cu_es + 2\n","      #   if show_detail:\n","      #       sys_log.warning(\"cu_es_ >= config.loc_set.point.cu_es : {:.5f} {:.5f} ({})\".format(cu_es_[c_i], config.loc_set.point.cu_es, mr_res[c_i]))\n","      # else:\n","      #   mr_res *= co_es_ >= config.loc_set.point.co_es\n","      #   mr_res *= co_es_ <= config.loc_set.point.co_es + 1\n","      #   if show_detail:\n","      #       sys_log.warning(\"co_es_ >= config.loc_set.point.co_es : {:.5f} {:.5f} ({})\".format(co_es_[c_i], config.loc_set.point.co_es, mr_res[c_i]))\n","\n","\n","      if ep_loc_side == OrderSide.SELL:\n","          mr_res *= lower_wick_ratio_ >= config.loc_set.point.wick_ratio\n","          # mr_res *= upper_wick_ratio_ >= config.loc_set.point.wick_ratio\n","          if show_detail:\n","              sys_log.warning(\"upper_wick_ratio_ >= config.loc_set.point.wick_ratio : {:.5f} {:.5f} ({})\".format(upper_wick_ratio_[c_i], config.loc_set.point.wick_ratio, mr_res[c_i]))\n","      else:\n","          mr_res *= upper_wick_ratio_ >= config.loc_set.point.wick_ratio\n","          mr_res *= upper_wick_ratio_ <= config.loc_set.point.wick_ratio + 0.1\n","          # mr_res *= lower_wick_ratio_ >= config.loc_set.point.wick_ratio\n","          if show_detail:\n","              sys_log.warning(\"lower_wick_ratio_ >= config.loc_set.point.wick_ratio : {:.5f} {:.5f} ({})\".format(lower_wick_ratio_[c_i], config.loc_set.point.wick_ratio, mr_res[c_i]))\n","              \n","      crr_ = res_df['crr_{}'.format(config.loc_set.point.tf_entry)].to_numpy()\n","      mr_res *= crr_ >= config.loc_set.point.crr\n","     \n","      if show_detail:\n","          sys_log.warning(\"crr_ >= config.loc_set.point.crr : {:.5f} {:.5f} ({})\".format(crr_[c_i], config.loc_set.point.crr, mr_res[c_i]))\n","\n","      b1_upper_wick_ratio_ = res_df['upper_wick_ratio_{}'.format(config.loc_set.point.wick_itv)].shift(itv_num).to_numpy()\n","      b1_lower_wick_ratio_ = res_df['lower_wick_ratio_{}'.format(config.loc_set.point.wick_itv)].shift(itv_num).to_numpy()\n","\n","      if ep_loc_side == OrderSide.SELL:\n","          upper_wick_ratio_ = res_df['upper_wick_ratio_{}'.format(config.loc_set.point.wick_itv)].to_numpy()\n","          mr_res *= upper_wick_ratio_ >= config.loc_set.point.wick_ratio\n","          if show_detail:\n","              sys_log.warning(\"upper_wick_ratio_ >= config.loc_set.point.wick_ratio : {:.5f} {:.5f} ({})\".format(upper_wick_ratio_[c_i], config.loc_set.point.wick_ratio, mr_res[c_i]))\n","      else:\n","          lower_wick_ratio_ = res_df['lower_wick_ratio_{}'.format(config.loc_set.point.wick_itv)].to_numpy()\n","          mr_res *= lower_wick_ratio_ >= config.loc_set.point.wick_ratio\n","          if show_detail:\n","              sys_log.warning(\"lower_wick_ratio_ >= config.loc_set.point.wick_ratio : {:.5f} {:.5f} ({})\".format(lower_wick_ratio_[c_i], config.loc_set.point.wick_ratio, mr_res[c_i]))\n","\n","    if config.loc_set.point.cppr != \"None\":   \n","      tf_entry = to_itvnum(config.loc_set.point.tf_entry)\n","      b1_cppr_ = res_df['b1_cppr_{}'.format(config.loc_set.point.tf_entry)].to_numpy()  # check b1's cppr in ep_loc\n","      if ep_loc_side == OrderSide.SELL:\n","        mr_res *= b1_cppr_ >= config.loc_set.point.cppr\n","        if show_detail:\n","            sys_log.warning(\"b1_cppr_ >= config.loc_set.point.cppr : {:.5f} {:.5f} ({})\".format(b1_cppr_[c_i], config.loc_set.point.cppr, mr_res[c_i]))\n","      else:\n","        mr_res *= b1_cppr_ <= -config.loc_set.point.cppr\n","        if show_detail:\n","            sys_log.warning(\"b1_cppr_ <= -config.loc_set.point.cppr : {:.5f} {:.5f} ({})\".format(b1_cppr_[c_i], config.loc_set.point.cppr, mr_res[c_i]))\n","            \n","    # ------------ candle_score ------------ #\n","    wick_score_list = literal_eval(config.loc_set.point.wick_score_list)\n","    if len(wick_score_list) != 0:\n","        score_itv_list = literal_eval(config.loc_set.point.score_itv_list)\n","        # ------ candle_score_v0 (1m initial tick 기준임) ------ #  Todo - higher timeframe 경우 back_data 사용해야함\n","        for wick_score_, score_itv_ in zip(wick_score_list, score_itv_list):\n","            wick_score = res_df['wick_score_{}'.format(score_itv_)].to_numpy()\n","            if ep_loc_side == OrderSide.SELL:\n","                mr_res *= wick_score <= -wick_score_\n","                if show_detail:\n","                    sys_log.warning(\"wick_score <= -wick_score_ : {:.5f} {:.5f} ({})\".format(wick_score[c_i], -wick_score_, mr_res[c_i]))\n","            else:\n","                mr_res *= wick_score >= wick_score_\n","                if show_detail:\n","                    sys_log.warning(\"wick_score >= wick_score_ : {:.5f} {:.5f} ({})\".format(wick_score[c_i], wick_score_, mr_res[c_i]))\n","            \n","\n","        # ------------------ swing_middle ------------------ #\n","        # ------------ 1. envelope ------------ #\n","\n","        # ------ a. dc ------ #\n","        # ep_loc check 기준 idx 가 entry 기준이라는 걸 명심\n","        if selection_id in ['v3_2']:\n","            hc_itv = '15T'\n","            dc_itv = '15T'\n","            shift_num = [0, to_itvnum(hc_itv)]\n","            div_res = [1, 0]\n","            for itv_num, res in zip(shift_num, div_res):\n","                close_ = res_df['close_{}'.format(hc_itv)].shift(itv_num).to_numpy()  # close_bar timein 사용하는 경우, 특수로 shift(0) 사용가능\n","                if ep_loc_side == OrderSide.SELL:\n","                    dc_lower_ = res_df['dc_lower_%s' % dc_itv].shift(itv_num).to_numpy()\n","                    mr_res *= (close_ < dc_lower_) == res\n","                else:\n","                    dc_upper_ = res_df['dc_upper_%s' % dc_itv].shift(itv_num).to_numpy()\n","                    mr_res *= (close_ > dc_upper_) == res\n","\n","        # ------------ 2. degree ------------ #\n","        # ------ a. norm_body_ratio ------ #\n","        if config.loc_set.zone.abs_ratio != \"None\":\n","            itv = config.loc_set.point.tf_entry\n","            abs_ratio_ = res_df['abs_ratio_{}'.format(itv)].to_numpy()\n","            mr_res *= abs_ratio_ >= config.loc_set.zone.abs_ratio\n","            # mr_res *= abs_ratio_ <= config.loc_set.zone.abs_ratio\n","\n","    # ------------ 2. imbalance_ratio ------------ #\n","    if config.loc_set.zone.ir != \"None\":\n","        itv = config.loc_set.point.tf_entry\n","        itv_num = to_itvnum(itv)\n","        if ep_loc_side == OrderSide.SELL:\n","            short_ir_ = res_df['short_ir_{}'.format(itv)].to_numpy()\n","            # short_ir_ = res_df['short_ir_{}'.format(itv)].shift(itv_num).to_numpy()\n","\n","            # mr_res *= short_ir_ >= config.loc_set.zone.ir     # greater\n","            mr_res *= short_ir_ <= config.loc_set.zone.ir  # lesser\n","            if show_detail:\n","                sys_log.warning(\n","                    \"short_ir_ <= config.loc_set.zone.ir : {:.5f} {:.5f} ({})\".format(short_ir_[c_i], config.loc_set.zone.ir, mr_res[c_i]))\n","        else:\n","            long_ir_ = res_df['long_ir_{}'.format(itv)].to_numpy()\n","            # long_ir_ = res_df['long_ir_{}'.format(itv)].shift(itv_num).to_numpy()\n","\n","            # mr_res *= long_ir_ >= config.loc_set.zone.ir\n","            mr_res *= long_ir_ <= config.loc_set.zone.ir\n","            if show_detail:\n","                sys_log.warning(\n","                    \"long_ir_ <= config.loc_set.zone.ir : {:.5f} {:.5f} ({})\".format(long_ir_[c_i], config.loc_set.zone.ir, mr_res[c_i]))\n","                \n","        # if selection_id in ['3_6']:\n","        #   itv, period1, period2 = config.loc_set.point.p1_itv0, config.loc_set.point.p1_period1, config.loc_set.point.p1_period2          \n","\n","        #   if ep_loc_side == OrderSide.SELL:\n","        #     high_5T = res_df['high_5T'].to_numpy()  # Todo, tf_entry - 1 open 기준이라 future_data 사용 가능\n","        #     short_base_ = res_df['short_base_{}{}{}'.format(itv, period1, period2)]\n","        #     mr_res *= high_5T < short_base_\n","        #     if show_detail:\n","        #         sys_log.warning(\n","        #             \"high_5T < short_base_ : {:.5f} {:.5f} ({})\".format(high_5T[c_i], short_base_[c_i], mr_res[c_i]))\n","        #   else:\n","        #     low_5T = res_df['low_5T'].to_numpy()  # Todo, tf_entry - 1 open 기준이라 future_data 사용 가능\n","        #     long_base_ = res_df['long_base_{}{}{}'.format(itv, period1, period2)]\n","        #     mr_res *= low_5T > long_base_\n","        #     if show_detail:\n","        #         sys_log.warning(\n","        #             \"low_5T > long_base_ : {:.5f} {:.5f} ({})\".format(low_5T[c_i], long_base_[c_i], mr_res[c_i]))'\n","        \n","        # ------ dc_base ------ #\n","        # if selection_id in ['4']:  # 'v3_3', 'v3_4',\n","        #   hc_itv = '5T'\n","        #   dc_itv = '5T'\n","        #   itv_num = to_itvnum(hc_itv)\n","        #   close_ = res_df['close_{}'.format(hc_itv)].shift(itv_num).to_numpy()   # 따라서 future_data 사용시, shifting 필요함\n","        #   if ep_loc_side == OrderSide.SELL:\n","        #     dc_lower_ = res_df['dc_lower_%s' % dc_itv].shift(itv_num).to_numpy()\n","        #     mr_res *= close_ < dc_lower_\n","        #   else:\n","        #     dc_upper_ = res_df['dc_upper_%s' % dc_itv].shift(itv_num).to_numpy()\n","        #     mr_res *= close_ > dc_upper_\n","\n","        # ------ ema ------ #\n","        # if selection_id in ['v5_2']: # 'v3'\n","        #   ema_5T = res_df['ema_5T'].to_numpy()\n","        #   if ep_loc_side == OrderSide.SELL:\n","        #     mr_res *= close < ema_5T\n","        #   else:\n","        #     mr_res *= close > ema_5T\n","        \n","        # ------ b. bb ------ #\n","        # close = res_df['close'].to_numpy()\n","\n","        # if selection_id in ['v3_3']:\n","        #   open = res_df['open'].to_numpy()\n","        #   if ep_loc_side == OrderSide.SELL:\n","        #     bb_lower_1m = res_df['bb_lower_1m'].to_numpy()\n","        #     # mr_res *= close <= bb_lower_1m\n","        #     mr_res *= open <= bb_lower_1m\n","        #   else:\n","        #     bb_upper_1m = res_df['bb_upper_1m'].to_numpy()\n","        #     # mr_res *= close >= bb_upper_1m\n","        #     mr_res *= open >= bb_upper_1m\n","\n","        if selection_id in ['4_1']:\n","            if ep_loc_side == OrderSide.SELL:\n","                bb_lower_15T = res_df['bb_lower_15T'].to_numpy()\n","                short_ep_ = res_df['short_ep_{}'.format(selection_id)].to_numpy()\n","                mr_res *= bb_lower_15T >= short_ep_\n","            else:\n","                bb_upper_15T = res_df['bb_upper_15T'].to_numpy()\n","                long_ep_ = res_df['long_ep_{}'.format(selection_id)].to_numpy()\n","                mr_res *= bb_upper_15T <= long_ep_\n","\n","        # if selection_id in ['v5_2']:\n","        #   bb_upper2_ = res_df['bb_upper2_%s' % config.loc_set.zone.bbz_itv].to_numpy()\n","        #   bb_lower2_ = res_df['bb_lower2_%s' % config.loc_set.zone.bbz_itv].to_numpy()\n","        #   if ep_loc_side == OrderSide.SELL:\n","        #     mr_res *= bb_upper2_ < close\n","        #   else:\n","        #     mr_res *= bb_lower2_ > close\n","\n","        # degree_list = literal_eval(config.loc_set.zone.degree_list)\n","        # if len(degree_list) != 0:\n","        # # if selection_id in ['v3_3', 'v3_4']:\n","        #   norm_close_15 = res_df['norm_close_15'].to_numpy()   # -> 이거 뭘로 만들었는지 불분명함,,\n","        #   b1_norm_close_15 = res_df['norm_close_15'].shift(15).to_numpy()\n","\n","        #   if ep_loc_side == OrderSide.SELL:\n","        #     mr_res *= norm_close_15 <= -degree_list[0]\n","        #     # mr_res *= b1_norm_close_15 <= -degree_list[1]\n","        #   else:\n","        #     mr_res *= norm_close_15 >= degree_list[0]\n","        #     # mr_res *= b1_norm_close_15 >= degree_list[1]\n","\n","        # ------ b. dc ------ #\n","        # if selection_id in ['v3_3']:\n","        #   if ep_loc_side == OrderSide.SELL:\n","        #     dc_lower_ = res_df['dc_lower_1m'].to_numpy()\n","        #     b1_dc_lower_ = res_df['dc_lower_1m'].shift(1).to_numpy()\n","        #     mr_res *= dc_lower_ < b1_dc_lower_\n","        #   else:\n","        #     dc_upper_ = res_df['dc_upper_1m'].to_numpy()\n","        #     b1_dc_upper_ = res_df['dc_upper_1m'].shift(1).to_numpy()\n","        #     mr_res *= dc_upper_ > b1_dc_upper_\n","\n","        # ------ c. sar ------ #\n","        # if selection_id in ['v3_3']:\n","        # sar_uptrend_3T = res_df['sar_uptrend_3T'].to_numpy()\n","        # if ep_loc_side == OrderSide.SELL:\n","        #   mr_res *= sar_uptrend_3T == 0\n","        # else:\n","        #   mr_res *= sar_uptrend_3T == 1"]},{"cell_type":"markdown","metadata":{"id":"JjKHyqftzhD7"},"source":["### set config (override available)"]},{"cell_type":"code","execution_count":7,"metadata":{"id":"q_4E-zH02WJy","executionInfo":{"status":"ok","timestamp":1663389106004,"user_tz":-540,"elapsed":1,"user":{"displayName":"7th June","userId":"08178289703395036410"}}},"outputs":[],"source":["#     caution : MARKET / LIMIT spelling   #\n","#      json doesn't support single quotes     #\n","\n","param_dict = {\n","  \"selection_id\": \"5_49\",\n","  \"trader_set\": {\n","    \"backtrade\": 0,\n","    \"back_data_path\": \"C:\\\\Users\\\\Lenovo\\\\PycharmProjects\\\\System_Trading\\\\JnQ\\\\candlestick_concated\\\\database_bn\\\\2022-02-17\\\\2022-02-17 ETHUSDT_1m.ftr\",\n","    \"start_datetime\": \"2020-09-05 00:00:59.999\",\n","    \"run\": 1,\n","    \"df_log\": 0,\n","    \"latest_index\": -1,\n","    \"complete_index\": -2,\n","    \"limit_fee\": 1e-10,\n","    \"market_fee\": 1e-10,\n","    \"initial_asset\": 24500,\n","    \"asset_changed\": 0,\n","    \"symbol\": \"ETHUSDT\",\n","    \"symbol_changed\": 0,\n","    \"itv_list\": \"['T', '3T', '5T', '15T', '30T', 'H', '4H']\",\n","    \"row_list\": \"[100, 50, 1, 1, 1, 50, 1]\",\n","    \"rec_row_list\": \"[1, 1, 1, 1, 1, 1, 1]\",\n","    \"offset_list\": \"['1h', '1h', '1h', '1h', '1h', '1h', '1h']\",\n","    \"bar_close_second\": 59,\n","    \"realtime_term\": 0.01,\n","    \"order_term\": 0.25,\n","    \"api_retry_term\": 1,\n","    \"check_entry_sec\": 10,\n","    \"entry_execution_wait\": 60,\n","    \"breakout_qty_ratio\": 0.97,\n","    \"qty_check_term\": 30,\n","    \"exit_execution_wait\": 60,\n","    \"close_complete_term\": 5,\n","    \"save_stacked_df\": 0,\n","    \"stacked_df_exist\": 1\n","  },\n","  \"pos_set\": {\n","    \"short_inversion\": 0,\n","    \"long_inversion\": 0,\n","    \"short_ban\": 0,\n","    \"long_ban\": 0\n","  },\n","  \"loc_set\": {      \n","    \"point1\": {\n","      \"exp_itv\": \"5T\",\n","      \"tf_entry\": \"15T\",\n","      \"candle_pattern\": \"CDLMARUBOZU\",\n","      \"short_spread\": \"None\",\n","      \"long_spread\": \"None\",\n","      \"short_tr_thresh\": \"None\",\n","      \"long_tr_thresh\": \"None\",\n","      \"short_wick_ratio\": \"None\",\n","      \"long_wick_ratio\": \"None\",\n","      \"wick_itv\": \"5T\",\n","      \"wrr_10\": \"None\",\n","      \"wrr_21\": \"None\",\n","      \"wrr_32\": 0.3,\n","      \"co_es\": \"None\",\n","      \"cu_es\": \"None\",\n","      \"crr\": \"None\",\n","      \"cppr\": \"None\",\n","      \"ppr\": \"None\",\n","      \"wbr\": \"None\",\n","      \"dbr\": \"None\",\n","      \"dbr2\": \"None\",\n","      \"brr\": \"None\",\n","      \"ir\": \"None\",\n","      \"abs_ratio\": \"None\"\n","    },\n","    \"point2\": {\n","      \"wrr_32\": \"None\",\n","      \"csdbox_range\": 0.3,\n","      \"short_tr_thresh\": \"None\",\n","      \"long_tr_thresh\": \"None\",\n","      \"csd_period\": \"None\"\n","    },\n","    \"zone1\": {\n","      \"use_zone\": 0,\n","      \"base_roll_period\": 50,\n","      \"degree_list\": \"[]\",\n","      \"dtk_itv\": \"5T\",\n","      \"dt_k\": \"None\",\n","      \"dc_period\": 135,\n","      \"use_dtk_line\": 0,\n","      \"zone_dt_k\": 0.4,\n","      \"zone_dc_period\": 135\n","    },\n","    \"zone2\": {\n","      \"use_zone\": 0\n","    }\n","  },\n","  \"tr_set\": {\n","    \"check_hlm\": 0,\n","    \"wave_itv1\" : \"5T\",\n","    \"wave_period1\": 20,\n","    \"wave_length1\": \"None\",\n","    \"wave_spread1\": \"None\",\n","    \"wave_time_ratio1\": \"None\",\n","    \"wave_itv2\" : \"T\",    \n","    \"wave_period2\": 20,\n","    \"tc_period\": 20,\n","    \"wave_greater1\": 0,\n","    \"wave_greater2\": 0,\n","    \"wave_lesser1\": 2,\n","    \"wave_lesser2\": 2,\n","    \"expire_k1\": 0.0,\n","    \"expire_k2\": 0.0,\n","    \"expire_tick\": \"None\",\n","    \"p2_box_k1\" : 0,\n","    \"p2_box_k2\" : 0,\n","    \"p1p2_low\": 0.0,\n","    \"tp_gap\": 0.0,\n","    \"ep_gap1\": -0.12,\n","    \"ep_gap2\": -0.5,\n","    \"out_gap\": 0,\n","    \"decay_gap\": \"None\",\n","    \"c_ep_gap\": \"None\",\n","    \"t_out_gap\": \"None\",\n","    \"wb_tp_gap\": 0,\n","    \"wb_out_gap\": 0,\n","    \"bias_tick\": 100\n","  },\n","  \"ep_set\": {\n","    \"entry_type\": \"MARKET\",\n","    \"static_ep\": 1,\n","    \"point2\": {\n","      \"entry_type\": \"LIMIT\"\n","    }\n","  },\n","  \"tp_set\": {\n","    \"non_tp\": 0,\n","    \"static_tp\": 1,\n","    \"tp_onexec\": 0,\n","    \"decay_term\": 60,\n","    \"p_ranges\": \"[1]\",\n","    \"p_qty_ratio\": \"[1]\"\n","  },\n","  \"out_set\": {\n","    \"hl_out\": 1,\n","    \"static_out\": 1,\n","    \"out_onexec\": 0,\n","    \"tf_exit\": \"None\",\n","    \"rsi_exit\": 0\n","  },\n","  \"lvrg_set\": {\n","    \"static_lvrg\": 0,\n","    \"leverage\": 5,\n","    \"target_pct\": 0.03,\n","    \"allow_float\": 0,\n","    \"lvrg_rejection\": 0\n","  }\n","}\n","\n","config = EasyDict(param_dict)"]},{"cell_type":"markdown","metadata":{"id":"MuD_2vY7TI_8"},"source":["#### legacy"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"EKag94Y2TMCO"},"outputs":[],"source":[",\n","      \"hc_itv\": 60,\n","      \"osc_band\": 20\n","      \n","      \"wick_score_list\": \"[]\",\n","      \"body_score_list\": \"[]\",\n","      \"score_itv_list\": \"[]\",,\n","\n","      \"wick_score_list\": \"[]\",\n","      \"body_score_list\": \"[]\",\n","      \"score_itv_list\": \"['T']\""]},{"cell_type":"markdown","metadata":{"id":"rLI8unIyroiC"},"source":["## run"]},{"cell_type":"code","execution_count":8,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":4,"status":"ok","timestamp":1663389107283,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"qBJfPsmJzVIr","outputId":"b5da7c45-ed24-4ac3-ae5e-10ce5dfe3798"},"outputs":[{"output_type":"stream","name":"stdout","text":["\"5_49\" {\n"," \"point1\": {\n","  \"exp_itv\": \"5T\",\n","  \"tf_entry\": \"15T\",\n","  \"candle_pattern\": \"CDLMARUBOZU\",\n","  \"short_spread\": \"None\",\n","  \"long_spread\": \"None\",\n","  \"short_tr_thresh\": \"None\",\n","  \"long_tr_thresh\": \"None\",\n","  \"short_wick_ratio\": \"None\",\n","  \"long_wick_ratio\": \"None\",\n","  \"wick_itv\": \"5T\",\n","  \"wrr_10\": \"None\",\n","  \"wrr_21\": \"None\",\n","  \"wrr_32\": 0.3,\n","  \"co_es\": \"None\",\n","  \"cu_es\": \"None\",\n","  \"crr\": \"None\",\n","  \"cppr\": \"None\",\n","  \"ppr\": \"None\",\n","  \"wbr\": \"None\",\n","  \"dbr\": \"None\",\n","  \"dbr2\": \"None\",\n","  \"brr\": \"None\",\n","  \"ir\": \"None\",\n","  \"abs_ratio\": \"None\"\n"," },\n"," \"point2\": {\n","  \"wrr_32\": \"None\",\n","  \"csdbox_range\": 0.3,\n","  \"short_tr_thresh\": \"None\",\n","  \"long_tr_thresh\": \"None\",\n","  \"csd_period\": \"None\"\n"," },\n"," \"zone1\": {\n","  \"use_zone\": 0,\n","  \"base_roll_period\": 50,\n","  \"degree_list\": \"[]\",\n","  \"dtk_itv\": \"5T\",\n","  \"dt_k\": \"None\",\n","  \"dc_period\": 135,\n","  \"use_dtk_line\": 0,\n","  \"zone_dt_k\": 0.4,\n","  \"zone_dc_period\": 135\n"," },\n"," \"zone2\": {\n","  \"use_zone\": 0\n"," }\n","} {\n"," \"check_hlm\": 0,\n"," \"wave_itv1\": \"5T\",\n"," \"wave_period1\": 20,\n"," \"wave_length1\": \"None\",\n"," \"wave_spread1\": \"None\",\n"," \"wave_time_ratio1\": \"None\",\n"," \"wave_itv2\": \"T\",\n"," \"wave_period2\": 20,\n"," \"tc_period\": 20,\n"," \"wave_greater1\": 0,\n"," \"wave_greater2\": 0,\n"," \"wave_lesser1\": 2,\n"," \"wave_lesser2\": 2,\n"," \"expire_k1\": 0.0,\n"," \"expire_k2\": 0.0,\n"," \"expire_tick\": \"None\",\n"," \"p2_box_k1\": 0,\n"," \"p2_box_k2\": 0,\n"," \"p1p2_low\": 0.0,\n"," \"tp_gap\": 0.0,\n"," \"ep_gap1\": -0.12,\n"," \"ep_gap2\": -0.5,\n"," \"out_gap\": 0,\n"," \"decay_gap\": \"None\",\n"," \"c_ep_gap\": \"None\",\n"," \"t_out_gap\": \"None\",\n"," \"wb_tp_gap\": 0,\n"," \"wb_out_gap\": 0,\n"," \"bias_tick\": 100\n","} {\n"," \"entry_type\": \"MARKET\",\n"," \"static_ep\": 1,\n"," \"point2\": {\n","  \"entry_type\": \"LIMIT\"\n"," }\n","} {\n"," \"non_tp\": 0,\n"," \"static_tp\": 1,\n"," \"tp_onexec\": 0,\n"," \"decay_term\": 60,\n"," \"p_ranges\": \"[1]\",\n"," \"p_qty_ratio\": \"[1]\"\n","} {\n"," \"hl_out\": 1,\n"," \"static_out\": 1,\n"," \"out_onexec\": 0,\n"," \"tf_exit\": \"None\",\n"," \"rsi_exit\": 0\n","} {\n"," \"static_lvrg\": 0,\n"," \"leverage\": 5,\n"," \"target_pct\": 0.03,\n"," \"allow_float\": 0,\n"," \"lvrg_rejection\": 0\n","} "]}],"source":["# funcs = [expire_v2, ep_loc_point2_v2, lvrg_set]  # expire for p1 & p2\n","funcs = [expiry_p1, expiry_p2, lvrg_set]     # expire for p1-only\n","# funcs = [expire_v0, ep_loc_point2_v2, lvrg_set]  # expire for v3\n","\n","id_idx_list = [0]  # ID_arr 에서 import 할 id_idx 선택\n","public_override = 1\n","utils_override = 1\n","config_override = 1\n","\n","# ------ config_list 와 같은 org_var 에 override 하는거 다시 생각하기 ------ #\n","ID_list = ID_arr[id_idx_list]\n","utils_list = utils_arr[id_idx_list]\n","config_list = config_arr[id_idx_list]\n","\n","if config_override or utils_override:\n","  assert len(config_list) == 1\n","  if config_override:    \n","    config_list[0] = config\n","    ID_list[0] = config.selection_id\n","  \n","config = config_list[0]  # base config = config_list[0]\n","tp_fee, out_fee = calc_tp_out_fee_v2(config)   # -> rev_pr 때문에 일단 이곳에도 선언함\n","\n","# ------- inversion set ------- #\n","inversion = 0\n","fdist_thresh = 1\n","# ------- plot param ------- #\n","show_detail = 0\n","# ------- temp param ------- #\n","allow_osc_touch = 0\n","rsi_gap = 5\n","\n","# ------- just printing config ------- #\n","_ = [print(json.dumps(config[key_], indent=1), end=' ') for key_ in ['selection_id', 'loc_set', 'tr_set', 'ep_set', 'tp_set', 'out_set', 'lvrg_set']] #  'trader_set',"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"afUV2b1jaggN"},"outputs":[],"source":["# config.trader_set.start_datetime = \"2020-09-05 00:00:59.999\" #  \"2020-09-05 00:00:59.999\" # 2022-02-01 16:34:59.999000 2022-01-14 16:34:59.999000  \"2020-09-05 00:00:59.999\" \"2022-01-10 00:00:59.999\" \"2021-10-04 02:39:59.999000\"\n","# ------ p1_hhm 의 경우 out_box 를 위해 wave_itv 1 & 2 를 동일하게 설정해야함 ------ #\n","config_list[0].tr_set.wave_itv1 = 'T'\n","config_list[0].tr_set.wave_period1 = 20\n","config_list[0].tr_set.wave_itv2 = 'T'\n","config_list[0].tr_set.wave_period2 = 4\n","config_list[0].tr_set.tc_period = 20"]},{"cell_type":"code","execution_count":9,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":3601,"status":"ok","timestamp":1663389114647,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"WstWVNihCNH8","outputId":"11304f11-c6b4-4dd2-cdd2-a2a604a5a711"},"outputs":[{"output_type":"stream","name":"stdout","text":["public_indi elapsed time : 2.5995709896087646\n","make data_list elapsed time : 0.00021958351135253906\n"]}],"source":["# ------ slicing res_df ------ #\n","res_df = res_df_.loc[pd.to_datetime(config.trader_set.start_datetime):]\n","\n","np_timeidx = np.array([intmin_np(date_) for date_ in res_df.index.to_numpy()])\n","\n","# ------------ public_indi ------------ # - 딱히 반복될 이유가 없는 phase - annot. 달때, why 까지 적어주면 좋음\n","start_0 = time.time()\n","if public_override:\n","    res_df = public_indi(res_df, config_list[0], np_timeidx)  # 현재 대부분의 시간은 h_candle 에서 소비되고 있음\n","else:\n","    res_df = utils_public.public_indi(res_df, config_list[0], np_timeidx)\n","print(\"public_indi elapsed time :\", time.time() - start_0)\n","\n","# ------------ make data_list ------------ # - 반복될 이유가 없는 phase - public_indo 에 종속\n","start_0 = time.time()\n","ohlc_cols = ['open', 'high', 'low', 'close']\n","ohlc_list = [res_df[col_].to_numpy() for col_ in ohlc_cols]\n","print(\"make data_list elapsed time :\", time.time() - start_0)"]},{"cell_type":"code","source":["res_df.dtypes"],"metadata":{"id":"rRBzxUfDuXeK"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"RqRF1eyZ0xBL"},"source":["### idep_plot"]},{"cell_type":"code","execution_count":21,"metadata":{"id":"_iYcJk8nK8Yq","executionInfo":{"status":"ok","timestamp":1663389219647,"user_tz":-540,"elapsed":9,"user":{"displayName":"7th June","userId":"08178289703395036410"}}},"outputs":[],"source":["# ------ edit utils config ------ #\n","config_list[0].tr_set.check_hlm = 0\n","# config_list[0].loc_set.point.candle_pattern = talib.get_function_groups()['Pattern Recognition'][51]   # \"None\" # 0.5 0.7\n","# config_list[0].pos_set.short_ban = 0\n","# config_list[0].pos_set.long_ban = 0\n","# config_list[0].tr_set.wave_lesser = 3\n","# config_list[0].tr_set.wave_length1 = \"None\"  # \"None\" 45 15 110 100 \n","# config_list[0].tr_set.wave_spread1 = \"None\"  # \"None\" 15 110 100 \n","# config_list[0].tr_set.wave_time_ratio1 = \"None\"  # \"None\" 6\n","# config_list[0].tr_set.wave_greater1 = 0  # 0 50 \n","# config_list[0].tr_set.wave_greater2 = 0  # 10\n","# config_list[0].tr_set.p1_period1 = 5\n","# config_list[0].tr_set.p1_period2 = 5\n","# # config_list[0].tr_set.p2_period1 = 20\n","# # config_list[0].tr_set.p2_period2 = 20\n","config_list[0].ep_set.entry_type = \"LIMIT\" # \"LIMIT\" # \"MARKET\"\n","# config_list[0].ep_set.point2.entry_type = \"LIMIT\" # \"LIMIT\" # \"MARKET\"\n","# config_list[0].tr_set.tp_gap = 0.5\n","config_list[0].tr_set.ep_gap1 = -0.5 # -0.8 -0.618 -0.23 -0.382 0.19 0.8 -0.12 -0.26\n","config_list[0].tr_set.ep_gap2 = -0.5 # -0.618 -0.23 -0.382 0.19 -0.5\n","# config_list[0].tr_set.out_gap = 0.2  # 0 -0.35 -0.6\n","# config_list[0].tr_set.wb_tp_gap = 0.5\n","# config_list[0].tr_set.wb_out_gap = -0.0\n","# config_list[0].trader_set.limit_fee = 1e-10\n","# config_list[0].trader_set.market_fee = 1e-10\n","# config_list[0].trader_set.limit_fee = 0.0002\n","# config_list[0].trader_set.market_fee = 0.0004\n","# config_list[0].loc_set.point.short_wick_ratio = 0.2 # \"None\" # 2.5\n","# config_list[0].loc_set.point.long_wick_ratio = 0.2 # \"None\" # 2.5\n","# config_list[0].loc_set.point.crr = 0.5"]},{"cell_type":"code","execution_count":22,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":546,"status":"ok","timestamp":1663389220186,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"iI39YI_5GguK","outputId":"f4c70035-817c-4c78-e899-673402290464"},"outputs":[{"output_type":"stream","name":"stderr","text":["WARNING:root:wave_point\n","WARNING:root:np.sum(short_open_res1 == 1) : 41080\n","WARNING:root:np.sum(long_open_res1 == 1) : 42205\n","WARNING:root:np.sum(short_open_res2 == 1) : 42292\n","WARNING:root:np.sum(long_open_res2 == 1) : 42483\n","WARNING:root:reject update_hl\n","WARNING:root:np.sum(short_open_res1 == 1) : 41020\n","WARNING:root:np.sum(long_open_res1 == 1) : 42080\n","WARNING:root:np.sum(short_open_res2 == 1) : 40725\n","WARNING:root:np.sum(long_open_res2 == 1) : 40478\n","WARNING:root:wave_itv1\n","WARNING:root:np.sum(short_open_res1 == 1) : 8204\n","WARNING:root:np.sum(long_open_res1 == 1) : 8416\n","WARNING:root:wave_mm\n","WARNING:root:np.sum(short_open_res1 == 1) : 8202\n","WARNING:root:np.sum(long_open_res1 == 1) : 8410\n","WARNING:root:point validation\n","WARNING:root:np.sum(short_open_res1 == 1) : 8125\n","WARNING:root:np.sum(long_open_res1 == 1) : 8344\n"]},{"output_type":"stream","name":"stdout","text":["enlist_tr elapsed time : 1.1278069019317627\n"]}],"source":["if utils_override:   # 현재, utils_override 하는 경우 1개의 ID 만 허용함 \n","  # start_0 = time.time()\n","  # res_df = enlist_rtc(res_df, config_list[0], np_timeidx)\n","  # print(\"enlist_rtc elapsed time :\", time.time() - start_0)\n","  start_0 = time.time()\n","  res_df = enlist_tr(res_df, config_list[0], np_timeidx)    # 36995.0 -> 152766.0 # 4044 np.sum(long_open_res == 1) : 4325\n","  print(\"enlist_tr elapsed time :\", time.time() - start_0)\n","else:\n","    start_0 = time.time()\n","    for utils_, config_ in zip(utils_list, config_list):\n","        # res_df = utils_.enlist_rtc(res_df, config_, np_timeidx)\n","        res_df = utils_.enlist_tr(res_df, config_, np_timeidx)\n","    print(\"elapsed time :\", time.time() - start_0)"]},{"cell_type":"code","execution_count":32,"metadata":{"id":"gfDSOGMd91rE","executionInfo":{"status":"ok","timestamp":1663389320755,"user_tz":-540,"elapsed":604,"user":{"displayName":"7th June","userId":"08178289703395036410"}}},"outputs":[],"source":["# ------ edit loc_set config ------ #\n","config_list[0].loc_set.point1.wrr_10 = \"None\" # \"None\" 0.3\n","config_list[0].loc_set.point1.wrr_21 = \"None\" # \"None\" \n","config_list[0].loc_set.point1.wrr_32 = 0.5 # \"None\" 1 0.5 0.482 0.302\n","config_list[0].loc_set.point2.wrr_32 = \"None\" # \"None\" 1 0.5 0.382 0.302 0.25\n","config_list[0].loc_set.point2.csd_period = \"None\"  # \"None\" 100\n","config_list[0].loc_set.zone1.use_zone = 0\n","config_list[0].loc_set.zone1.bb_trend_period = 150\n","# config_list[0].loc_set.zone1.hl_loc_pct = \"None\" # \"None\" 1 0.5\n","config_list[0].loc_set.zone2.use_zone = 0\n","# config_list[0].loc_set.point1.cu_es = \"None\" # \"None\" # -2\n","# config_list[0].loc_set.point1.co_es = \"None\" # \"None\" # -3\n","# config_list[0].loc_set.point1.cppr = 0.5   # \"None\" # 0.5 0.7\n","# config_list[0].loc_set.point1.wbr = \"None\" # 0.7\n","# config_list[0].loc_set.point1.dbr = \"None\"   # 0.7\n","# config_list[0].loc_set.point1.dbr2 = \"None\"  # 0.7\n","# config_list[0].loc_set.point1.brr = \"None\"   # 0.8\n","# config_list[0].loc_set.point1.ir = \"None\" # \"None\" 0.8\n","# config_list[0].loc_set.point1.wick_score_list = \"[]\"\n","# config_list[0].loc_set.point1.score_itv_list = \"['H']\"\n","# # config_list[0].loc_set.point1.abs_ratio = \"None\"  # 0.7\n","config_list[0].loc_set.point1.short_tr_thresh = \"None\"  #  \"None\" 0.5 2 0.8 # # 0.7  5 # tr_thresh 엄청 민감함\n","config_list[0].loc_set.point1.long_tr_thresh = 5  #  \"None\" 2 0.8 ## 0.7 5 \n","# # config_list[0].loc_set.zone1.base_roll_period = 60"]},{"cell_type":"code","execution_count":33,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":2899,"status":"ok","timestamp":1663389324120,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"9DPgykxQ92mU","outputId":"dd52076e-5303-40c2-a242-16b9f5ba6a8a"},"outputs":[{"output_type":"stream","name":"stderr","text":["WARNING:root:cu_wrr_32_ <= config.loc_set.point1.wrr_32 : 1.00000 0.50000 (0.0)\n","WARNING:root:co_wrr_32_ <= config.loc_set.point1.wrr_32 : 1.68579 0.50000 (0.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 1.4431970119476318\n","get_open_info_df elapsed time : 1.1962440013885498\n"]}],"source":["open_info_df1 = get_open_info_df_v2(ep_loc_p1_v3, res_df, np_timeidx, ID_list, config_list, id_idx_list, open_num=1)  # --> point * dur. 관련 (loc_set) param 에 종속 (open_info 가 변경되는게 아니라면, 재실행할 필요없음)\n","open_info_df2 = get_open_info_df_v2(ep_loc_p2_v3, res_df, np_timeidx, ID_list, config_list, id_idx_list, open_num=2)\n","open_info_df_list = [open_info_df1, open_info_df2]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"KqVkg236t_f2"},"outputs":[],"source":["# ------ edit entry & exit (ep, tp, out, ..) config ------ #\n","# config_list[0].tr_set.expire_k = -0.5\n","# config_list[0].tr_set.expire_tick = \"None\"\n","# config_list[0].tr_set.p2_box_k1 = 0.0  # 0 default --> 0 ~ 1 사이 값 사용 tp_1 로부터 떨어지는 거리\n","# config_list[0].tr_set.p2_box_k2 = 0.0  # 0.5 0 default --> \"None\" 불가, 0 ~ 1 사이 값 사용 tp_0 로부터 떨어지는 거리, 본디 p2_box 는 p1_box 내부에 존재해야, 정확한 hhm 이 측정가능해짐\n","# config_list[0].tr_set.p1p2_low = 0.5  # 0.5 0.7 0  0 is equal to \"None\", 마찬가지로 tp_0 로부터 떨어지는 거리\n","config_list[0].loc_set.point2.short_tr_thresh = \"None\"  #  \"None\" 0.5 2 0.8 # # 0.7 # tr_thresh 엄청 민감함\n","config_list[0].loc_set.point2.long_tr_thresh = \"None\"  #  \"None\" 2 0.8 ## 0.7\n","# # # config_list[0].ep_set.point2.entry_type = \"LIMIT\"\n","# # # config_list[0].ep_set.point2.wick_score_list = str([])\n","# # # config_list[0].tp_set.static_tp = 1\n","# # # config_list[0].tp_set.non_tp = 0 # 0 1\n","# config_list[0].tp_set.p_ranges = \"[1]\"\n","# config_list[0].tp_set.p_qty_ratio = \"[1]\"\n","# config_list[0].tp_set.p_ranges = \"[0.2, 0.66, 1]\"\n","# config_list[0].tp_set.p_qty_ratio = \"[0.25, 0.25, 0.5]\"\n","# config_list[0].tp_set.p_ranges = \"[0.66, 1]\"\n","# config_list[0].tp_set.p_qty_ratio = \"[0.3, 0.7]\"\n","# config_list[0].out_set.hl_out = 1\n","# # # config_list[0].out_set.tf_exit = \"None\" # 15 \"None\"\n","config_list[0].lvrg_set.static_lvrg = 0\n","config_list[0].lvrg_set.leverage = 1\n","config_list[0].lvrg_set.target_pct = 0.03 # 0.1 0.03\n","# # config_list[0].lvrg_set.allow_float = 0\n","# config_list[0].lvrg_set.lvrg_rejection = 0"]},{"cell_type":"code","source":["test_ratio = 0.0\n","short_pr, short_obj, short_lvrg_arr, short_fee_arr, short_tpout_arr, short_tr_arr, short_bias_arr, short_net_p1_bias_tick, short_p2exec_p1_bias_tick, short_net_p1_idx_arr, short_p2_idx_arr, short_tp_1, short_tp_0, short_out_1, short_out_0, short_ep2_0, \\\n","      long_pr, long_obj, long_lvrg_arr, long_fee_arr, long_tpout_arr, long_tr_arr, long_bias_arr, long_net_p1_bias_tick, long_p2exec_p1_bias_tick, long_net_p1_idx_arr, long_p2_idx_arr, long_tp_1, long_tp_0, long_out_1, long_out_0, long_ep2_0 = \\\n","get_res_v9(res_df, open_info_df_list, ohlc_list, config_list, np_timeidx, funcs, test_ratio=test_ratio, plot_is=1, signi=0, show_detail=0)   # open 이 많을 수록 en_ex_pairing elapsed time : 11.58370590209961"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":664},"id":"TvGs5mBxsuBK","executionInfo":{"status":"ok","timestamp":1663389326564,"user_tz":-540,"elapsed":2447,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"8a38926c-3978-4c78-d373-35a203ef9569"},"execution_count":34,"outputs":[{"output_type":"stream","name":"stdout","text":["en_ex_pairing elapsed time : 0.4387242794036865\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1728x576 with 6 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["idep_plot elapsed time : 1.5351431369781494\n"]}]},{"cell_type":"code","execution_count":null,"metadata":{"id":"8lYgsqH-rfAM"},"outputs":[],"source":["# ------ inversion ------ #\n","_ = get_res_v5(res_df, open_info_df, ohlc_list, config_list, np_timeidx, funcs, inversion=True, test_ratio=test_ratio, plot_is=1, signi=False)"]},{"cell_type":"markdown","metadata":{"id":"n6gc7lERC4VE"},"source":["### statistics (stem 별로 진행)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"HHjIdn2MC4VE"},"outputs":[],"source":["selection_id = config.selection_id\n","\n","short_p1_idx = short_obj[-1].astype(int)\n","long_p1_idx = long_obj[-1].astype(int)\n","\n","short_open_tp_1 = res_df['short_tp_1_{}'.format(selection_id)].to_numpy()[short_p1_idx]\n","long_open_tp_1 = res_df['long_tp_1_{}'.format(selection_id)].to_numpy()[long_p1_idx]\n","\n","short_open_tp_0 = res_df['short_tp_0_{}'.format(selection_id)].to_numpy()[short_p1_idx]\n","long_open_tp_0 = res_df['long_tp_0_{}'.format(selection_id)].to_numpy()[long_p1_idx]\n","\n","short_open_tp_gap = res_df['short_tp_gap_{}'.format(selection_id)].to_numpy()[short_p1_idx]  # use open_i\n","long_open_tp_gap = res_df['long_tp_gap_{}'.format(selection_id)].to_numpy()[long_p1_idx]\n","\n","short_open_out_0 = res_df['short_out_0_{}'.format(selection_id)].to_numpy()[short_p1_idx]\n","long_open_out_0 = res_df['long_out_0_{}'.format(selection_id)].to_numpy()[long_p1_idx]\n","\n","short_open_out_gap = res_df['short_out_gap_{}'.format(selection_id)].to_numpy()[short_p1_idx]  # use open_i\n","long_open_out_gap = res_df['long_out_gap_{}'.format(selection_id)].to_numpy()[long_p1_idx]\n","\n","# ------ out case 의 max_high check (long) ------ #\n","short_max_tpg = get_max_tpg_v2(OrderSide.SELL, ohlc_list, short_pr, short_obj[:4], short_open_tp_1, short_open_tp_gap)\n","long_max_tpg = get_max_tpg_v2(OrderSide.BUY, ohlc_list, long_pr, long_obj[:4], long_open_tp_1, long_open_tp_gap)\n","# short_max_tpg = get_max_tpg_v2(OrderSide.SELL, ohlc_list, short_pr, short_obj[:4], short_open_tp_1, short_open_out_gap)\n","# long_max_tpg = get_max_tpg_v2(OrderSide.BUY, ohlc_list, long_pr, long_obj[:4], long_open_tp_1, long_open_out_gap)\n","\n","# ------ true_bias 의 outg 확인 ------ # --> 추후, outg 로 tp_gap / out_gap custom 여부를 위해, 본 cell 을 지우지 않음\n","short_max_outg = get_max_outg_v4(OrderSide.SELL, config, ohlc_list, short_obj, short_tpout_arr, short_open_tp_0, short_open_tp_gap)  # tp_box's mean_low 확인 위해 tp_gap 입력함\n","long_max_outg = get_max_outg_v4(OrderSide.BUY, config, ohlc_list, long_obj, long_tpout_arr, long_open_tp_0, long_open_tp_gap)\n","\n","current_tpg = config.tr_set.tp_gap\n","current_outg = config.tr_set.out_gap"]},{"cell_type":"markdown","metadata":{"id":"tOFkzUX2imQu"},"source":["#### consecutive dur. value survey on bias"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"CgvSrXaZEkMZ"},"outputs":[],"source":["res_df.dtypes"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"gnSvYKIzC4VF"},"outputs":[],"source":["# ------------ dependent vars. ------------ #\n","# res_df 에 존재하는 col 는 모두 사용가능함\n","\n","# ------ 1. 도출한 outg 와 vars. pairing 진행 (by valid_idx) ------ #\n","devided_cols, public_cols = [], []\n","\n","devided_cols.append('tr_{}'.format(selection_id))\n","\n","devided_cols.append('wave_length_fill_{}{}'.format(wave_itv1, wave_period1))\n","devided_cols.append('wave_spread_fill_{}{}'.format(wave_itv1, wave_period1))\n","\n","wave_itv1 = 'T'\n","wave_period1 = config.tr_set.wave_period1\n","\n","# public_cols.append('cu_wrr_21_{}{}'.format(wave_itv1, wave_period1))\n","public_cols.append('cu_wrr_32_{}{}'.format(wave_itv1, wave_period1))\n","# public_cols.append('co_wrr_21_{}{}'.format(wave_itv1, wave_period1))\n","public_cols.append('co_wrr_32_{}{}'.format(wave_itv1, wave_period1))\n","\n","# public_cols.append('wave_high_terms_cnt_fill_T5')\n","# public_cols.append('wave_low_terms_cnt_fill_T5')\n","# public_cols.append('wave_high_loc_pct_T5')\n","# public_cols.append('wave_low_loc_pct_T5')\n","\n","# public_cols.append('b1_co_es_15T1')\n","# public_cols.append('b1_cu_es_15T1')\n","# public_cols.append('b1_upper_wick_ratio_15T')\n","# public_cols.append('b1_lower_wick_ratio_15T')\n","\n","#  'co_wrr_T5', 'cu_wrr_T5', 'b1_cppr_15T', 'b1_updbr', 'b1_lwdbr', 'b1_updbr_cppr', 'b1_lwdbr_cppr' 'abs_ratio_5T', 'rel_ratio_5T', 'body_rel_ratio_5T'\n","\n","# devided_cols = ['tr_{}'.format(selection_id)]  # , 'ir_5T'\n","# public_cols = ['wave_high_terms_cnt_fill_T5', 'wave_low_terms_cnt_fill_T5', 'wave_high_loc_pct_T5', 'wave_low_loc_pct_T5', \n","#                'b1_co_es_15T1', 'b1_cu_es_15T1', 'b1_upper_wick_ratio_15T', 'b1_lower_wick_ratio_15T']\n","\n","short_datas = [res_df['short_' + col].to_numpy() for col in devided_cols] + [res_df[col].to_numpy() for col in public_cols]\n","long_datas = [res_df['long_' + col].to_numpy() for col in devided_cols] + [res_df[col].to_numpy() for col in public_cols]\n","\n","titles = devided_cols + public_cols"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"elapsed":4479,"status":"ok","timestamp":1658034578976,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"Sahvc-R0jD1A","outputId":"d8b458c5-24c9-40d3-cc1d-5672d1432ae9"},"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/numpy/core/fromnumeric.py:3208: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.\n","  return asarray(a).size\n","/usr/local/lib/python3.7/dist-packages/matplotlib/cbook/__init__.py:1376: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.\n","  X = np.atleast_1d(X.T if isinstance(X, np.ndarray) else np.asarray(X))\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1008x1800 with 20 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["plt.style.use(['dark_background', 'fast'])\n","fig = plt.figure(figsize=(14, len(titles) * 5))\n","nrows, ncols = len(short_datas), 1\n","gs = gridspec.GridSpec(nrows=nrows,  # row 부터 index 채우고 col 채우는 순서임 (gs_idx)\n","                        ncols=ncols\n","                        )\n","\n","num_samples = 30\n","alpha = 0.8\n","xmin = 0\n","xmax = 10\n","\n","for ings_idx, (title, short_data, long_data) in enumerate(zip(titles, short_datas, long_datas)):\n","  inner_gs = gs[ings_idx].subgridspec(nrows=2, ncols=2)\n","\n","  short_open_data = short_data[short_p1_idx]\n","  long_open_data = long_data[long_p1_idx]\n","\n","  short_true_data = short_open_data[short_bias_arr.ravel()]\n","  # short_false_data = short_open_data[short_false_bias_arr.ravel()]\n","  short_false_data = short_open_data[~short_bias_arr.ravel()]\n","  long_true_data = long_open_data[long_bias_arr.ravel()]\n","  # long_false_data = long_open_data[long_false_bias_arr.ravel()]\n","  long_false_data = long_open_data[~long_bias_arr.ravel()]\n","  \n","  short_true_valid_idx = np.ones_like(short_true_data).astype(bool)\n","  short_false_valid_idx = np.ones_like(short_false_data).astype(bool)\n","  long_true_valid_idx = np.ones_like(long_true_data).astype(bool)\n","  long_false_valid_idx = np.ones_like(long_false_data).astype(bool)\n","\n","  short_true_valid_idx *= ~np.isinf(short_true_data)\n","  short_false_valid_idx *= ~np.isinf(short_false_data)\n","  long_true_valid_idx *= ~np.isinf(long_true_data)\n","  long_false_valid_idx *= ~np.isinf(long_false_data)\n","\n","  try:\n","    short_true_valid_idx *= short_true_data > xmin\n","    short_false_valid_idx *= short_false_data > xmin\n","    long_true_valid_idx *= long_true_data > xmin\n","    long_false_valid_idx *= long_false_data > xmin\n","\n","  except:\n","    pass\n","\n","  try:\n","    short_true_valid_idx *= short_true_data < xmax\n","    short_false_valid_idx *= short_false_data < xmax\n","    long_true_valid_idx *= long_true_data < xmax\n","    long_false_valid_idx *= long_false_data < xmax\n","    \n","  except:\n","    pass\n","    \n","  plt.subplot(inner_gs[0])\n","  ns, bins, patches = plt.hist([short_true_data[short_true_valid_idx], short_false_data[short_false_valid_idx]], \n","           bins=num_samples, alpha=alpha, color=['#00ff00', '#ff0000'], edgecolor='black')  \n","  plt.title('short_' + title)  \n","\n","  plt.subplot(inner_gs[2])\n","  total_ns = np.sum(ns, axis=0)\n","  hist_ratio = ns[0] / total_ns\n","  # valid_idx = total_ns > 1\n","  valid_idx = np.full(len(hist_ratio), True)\n","  valid_hist_ratio = hist_ratio[valid_idx]\n","  plt.hist(bins[:-1][valid_idx], weights=valid_hist_ratio, bins=num_samples, color='#00ff00', edgecolor='black')\n","  plt.ylim(0, 1)\n","  \n","\n","  plt.subplot(inner_gs[1])\n","  ns, bins, patches = plt.hist([long_true_data[long_true_valid_idx], long_false_data[long_false_valid_idx]], \n","           bins=num_samples, alpha=alpha, color=['#00ff00', '#ff0000'], edgecolor='black')\n","  plt.title('long_' + title)\n","  \n","  plt.subplot(inner_gs[3])\n","  total_ns = np.sum(ns, axis=0)\n","  hist_ratio = ns[0] / total_ns\n","  # valid_idx = total_ns > 1\n","  valid_idx = np.full(len(hist_ratio), True)\n","  valid_hist_ratio = hist_ratio[valid_idx]\n","  plt.hist(bins[:-1][valid_idx], weights=valid_hist_ratio, bins=num_samples, color='#00ff00', edgecolor='black')\n","  plt.ylim(0, 1)\n","\n","  \n","# plt.suptitle(title)\n","plt.show()"]},{"cell_type":"markdown","metadata":{"id":"Arnb-kXlC4VF"},"source":["#### tpg & outg survey"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":881},"executionInfo":{"elapsed":2820,"status":"ok","timestamp":1659074362424,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"jHh0uFkXC4VF","outputId":"cf21f56c-faf2-471d-b7e0-5c16e0ff2bdd"},"outputs":[{"output_type":"stream","name":"stdout","text":["223\n","533\n","223\n","533\n","223\n","533\n","223\n","533\n","pkx : [0.05994977 0.14818175 0.35111529 0.74815919]\n","pkx : [0.09816775 0.30374184 0.78029994]\n","\n","56\n","84\n","56\n","84\n","56\n","84\n","56\n","84\n","pkx : [-0.23140658 -0.19827966 -0.16515274 -0.14385686 -0.11072994 -0.07287061 -0.01371539]\n","pkx : [-0.32640606 -0.24710795 -0.18102619 -0.11494443 -0.03234223]\n","\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 864x576 with 4 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["# 1. outg 는 partial 을 위한 histogram 작성 진행\n","# 현재, outg 내부에는 tp 한것과 out 한것이 공존하는 상태\n","titles = ['outg', 'tpg']\n","short_max_datas = [short_max_outg[short_bias_arr], short_max_tpg]\n","long_max_datas = [long_max_outg[long_bias_arr], long_max_tpg]\n","\n","# titles = ['tpg']\n","# short_max_datas = [short_max_tpg]\n","# long_max_datas = [long_max_tpg]\n","\n","plt.style.use(['dark_background', 'fast'])\n","fig = plt.figure(figsize=(12, 8))\n","nrows, ncols = 2, 1\n","gs = gridspec.GridSpec(nrows=nrows,  # row 부터 index 채우고 col 채우는 순서임 (gs_idx)\n","                        ncols=ncols\n","                        )\n","  \n","for ings_idx, (title, short_max_data, long_max_data) in enumerate(zip(titles, short_max_datas, long_max_datas)):\n","\n","  inner_gs = gs[ings_idx].subgridspec(nrows=1, ncols=2)\n","  if ings_idx == 0:\n","    axvline = current_outg\n","    title_add = 'true_' + title\n","  else:\n","    axvline = current_tpg\n","    title_add = 'false_' + title\n","\n","  print(len(short_max_data))\n","  print(len(long_max_data))\n","\n","  short_plot_idx = np.ones_like(short_max_data).astype(bool)\n","  long_plot_idx = np.ones_like(long_max_data).astype(bool)\n","  # short_plot_idx = short_max_data <= axvline\n","  # long_plot_idx = long_max_data <= axvline\n","\n","  print(np.sum(short_plot_idx))\n","  print(np.sum(long_plot_idx))    \n","\n","  short_plot_idx *= ~np.isnan(short_max_data)\n","  long_plot_idx *= ~np.isnan(long_max_data)  # nan 과 inf 때문에 이 방식 채택\n","\n","  print(np.sum(short_plot_idx))\n","  print(np.sum(long_plot_idx))\n","\n","  short_plot_idx *= ~np.isinf(short_max_data)\n","  long_plot_idx *= ~np.isinf(long_max_data)  # nan 과 inf 때문에 이 방식 채택\n","  \n","  print(np.sum(short_plot_idx))\n","  print(np.sum(long_plot_idx))\n","    \n","  plt.subplot(inner_gs[0])\n","  kde_plot_v2(*np.unique(short_max_data[short_plot_idx], return_counts=True))\n","  plt.title('short_' + title_add)  \n","  plt.axvline(axvline, color='red', linewidth=3)\n","\n","  plt.subplot(inner_gs[1])\n","  kde_plot_v2(*np.unique(long_max_data[long_plot_idx], return_counts=True))\n","  plt.title('long_' + title_add)\n","  plt.axvline(axvline, color='red', linewidth=3)\n","\n","  print()\n","\n","# plt.suptitle(title)\n","plt.show()"]},{"cell_type":"markdown","metadata":{"id":"mScdfR9hmjVu"},"source":["#### legacy"]},{"cell_type":"markdown","metadata":{"id":"xivLUsSGC4VF"},"source":["##### outg survey for precision (eploc vars. dependency)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"LB28R3QIjCDc"},"outputs":[],"source":["# ------------ dependent vars. ------------ #\n","# res_df 에 존재하는 col 는 모두 사용가능함\n","# ------ 1. 도출한 outg 와 vars. pairing 진행 (by valid_idx) ------ #\n","devided_cols = ['tr_{}'.format(strat_version)]  # , 'ir_5T'\n","public_cols = ['wave_body_ratio']  # 'abs_ratio_5T', 'rel_ratio_5T', 'body_rel_ratio_5T'\n","\n","short_datas = [res_df['short_' + col].to_numpy() for col in devided_cols] + [res_df[col].to_numpy() for col in public_cols]\n","long_datas = [res_df['long_' + col].to_numpy() for col in devided_cols] + [res_df[col].to_numpy() for col in public_cols]\n","\n","titles = devided_cols + public_cols"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"nX9TpLcvFu7T"},"outputs":[],"source":["plot_outg_range = (-1, 10)\n","plot_data_range = (-10, 100)\n","\n","plt.style.use(['dark_background', 'fast'])\n","fig = plt.figure(figsize=(12, 18))\n","nrows, ncols = len(short_datas), 1\n","gs = gridspec.GridSpec(nrows=nrows,  # row 부터 index 채우고 col 채우는 순서임 (gs_idx)\n","                        ncols=ncols\n","                        )\n","\n","for ings_idx, (title, short_data, long_data) in enumerate(zip(titles, short_datas, long_datas)):\n","  inner_gs = gs[ings_idx].subgridspec(nrows=1, ncols=2)\n","\n","  print(len(long_max_outg))\n","\n","  short_plot_idx = (plot_outg_range[0] <= short_max_outg) & (short_max_outg <= plot_outg_range[1])\n","  long_plot_idx = (plot_outg_range[0] <= long_max_outg) & (long_max_outg <= plot_outg_range[1])  # nan 과 inf 때문에 이 방식 채택\n","\n","  print(np.sum(long_plot_idx))\n","\n","  short_open_data = short_data[short_open_idx]\n","  long_open_data = long_data[long_open_idx]\n","  \n","  short_plot_idx *= (plot_data_range[0] <= short_open_data) * (short_open_data <= plot_data_range[1])\n","  long_plot_idx *= (plot_data_range[0] <= long_open_data) * (long_open_data <= plot_data_range[1]) # nan 과 inf 때문에 이 방식 채택\n","\n","  short_plot_idx *= ~np.isnan(short_open_data)\n","  long_plot_idx *= ~np.isnan(long_open_data)  # nan 과 inf 때문에 이 방식 채택\n","\n","  print(np.sum(long_plot_idx))\n","\n","  short_plot_idx *= ~np.isinf(short_open_data)\n","  long_plot_idx *= ~np.isinf(long_open_data)  # nan 과 inf 때문에 이 방식 채택\n","\n","  print(np.sum(long_plot_idx))\n","\n","  short_true_idx = short_plot_idx * short_true_open_idxth\n","  long_true_idx = long_plot_idx * long_true_open_idxth\n","  \n","  short_false_idx = short_plot_idx * ~short_true_open_idxth\n","  long_false_idx = long_plot_idx * ~long_true_open_idxth\n","\n","  plt.subplot(inner_gs[0])\n","  # ------ true_bias ------ #\n","  x, y = short_max_outg[short_true_idx].ravel(), short_open_data[short_true_idx].ravel()  \n","  plt.scatter(x, y, color='white', alpha=0.5)\n","  # ------ false_bias ------ #\n","  x, y = short_max_outg[short_false_idx].ravel(), short_open_data[short_false_idx].ravel()\n","  plt.scatter(x, y, color='fuchsia', alpha=0.3)\n","  plt.axvline(current_outg, color='red', linewidth=3)\n","  plt.title(\"{} coef : {:0.3f}\".format(title, np.corrcoef(-x, y)[0, 1]))\n","\n","  plt.subplot(inner_gs[1])    \n","  # ------ true_bias ------ #\n","  x, y = long_max_outg[long_true_idx].ravel(), long_open_data[long_true_idx].ravel()  \n","  plt.scatter(x, y, color='white', alpha=0.5)\n","  # ------ false_bias ------ #\n","  x, y = long_max_outg[long_false_idx].ravel(), long_open_data[long_false_idx].ravel()\n","  plt.scatter(x, y, color='fuchsia', alpha=0.3)\n","  plt.axvline(current_outg, color='red', linewidth=3)\n","  plt.title(\"{} coef : {:0.3f}\".format(title, np.corrcoef(-x, y)[0, 1]))\n","\n","  print()  \n","\n","# plt.suptitle(title)\n","plt.show()\n","# print()"]},{"cell_type":"markdown","metadata":{"id":"983aUwM76s6X"},"source":["#### dump"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"p_e8PtFXa7mc"},"outputs":[],"source":["# len(np.unique(long_obj[-1]))\n","p1_hhm_p1_idx = long_obj[-1]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"nLZDkNNxbZPO"},"outputs":[],"source":["p1_hlm_p1_idx = long_obj[-1]"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":261,"status":"ok","timestamp":1653452376525,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"WhCPOi1qbkHS","outputId":"e3b8db71-3e48-4177-a3fe-9f891a362596"},"outputs":[{"data":{"text/plain":["array([350065., 440065., 502833., 735204., 836258.])"]},"execution_count":161,"metadata":{},"output_type":"execute_result"}],"source":["# len(p1_hhm_p1_idx[~np.isin(p1_hhm_p1_idx, p1_hlm_p1_idx)])\n","p1_hlm_p1_idx[~np.isin(p1_hlm_p1_idx, p1_hhm_p1_idx)]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"wgERZ65F5RBB"},"outputs":[],"source":["org_p1_idx = long_p2_idx_arr  # long_obj[-1]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"rAao95SEnOY0"},"outputs":[],"source":["new_p1_idx = long_p2_idx_arr  # long_obj[-1]"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":267,"status":"ok","timestamp":1653119592395,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"OEQ9KWXVnQ2J","outputId":"85c3e998-5c1e-4b5a-8366-28fe8cc3639b"},"outputs":[{"name":"stdout","output_type":"stream","text":["153\n","163\n"]},{"data":{"text/plain":["array([ 35609, 105164, 188999, 347399, 358994, 379304, 379544, 397274, 482474, 550919, 656774, 833129])"]},"execution_count":220,"metadata":{},"output_type":"execute_result"}],"source":["uniq_org_p1_idx = np.unique(org_p1_idx)\n","uniq_new_p1_idx = np.unique(new_p1_idx)\n","print(len(uniq_org_p1_idx))\n","print(len(uniq_new_p1_idx))\n","uniq_new_p1_idx[~np.isin(uniq_new_p1_idx, uniq_org_p1_idx)]\n","# np.unique(new_p1_idx).remove(np.unique(org_p1_idx))"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"hOtCGUeBQ4hn"},"outputs":[],"source":["open_idx = open_info_df.index.to_numpy()\n","# len_df = len(res_df)\n","# s_idx = (open_idx < int(len_df * (1 - test_ratio))) == plot_is\n","# s_open_info_df = open_info_df[s_idx]\n","# s_open_idx = open_idx[s_idx]\n","\n","# open_info_list = [s_open_info_df[col_].to_numpy() for col_ in s_open_info_df.columns]\n","# side_arr, zone_arr, id_arr, id_idx_arr = open_info_list\n","\n","long_open_ = res_df['long_open_{}'.format(config.selection_id)].to_numpy()\n","short_open_ = res_df['short_open_{}'.format(config.selection_id)].to_numpy()\n","\n","long_open_idx = get_index_bybool(long_open_, np.arange(len(res_df)))\n","short_open_idx = get_index_bybool(short_open_, np.arange(len(res_df)))"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"QPhjkZQhRLqr"},"outputs":[],"source":["valid_long_open_idx = long_open_idx[~np.isnan(long_open_idx)]\n","valid_short_open_idx = short_open_idx[~np.isnan(short_open_idx)]\n","\n","# print(valid_long_open_idx[valid_long_open_idx > 4000][:10])\n","# print(valid_short_open_idx[valid_short_open_idx > 4000][:10])\n","\n","print(open_idx[open_idx > 4000][:10])\n","\n","print(np.hstack((long_obj[-1], long_obj[3]))[:10])\n","print(np.hstack((short_obj[-1], short_obj[3]))[:10])\n","# print([:10])"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"cFd7Fz0Y6ucU"},"outputs":[],"source":["# short_max_outg, short_outg_open_idx = get_max_outg_v2(\"SELL\", config, ohlc_list, short_obj, short_tpout_arr, short_open_epout_0, short_open_epout_gap)\n","# long_max_outg, long_outg_open_idx = get_max_outg_v2(\"BUY\", config, ohlc_list, long_obj, long_tpout_arr, long_open_epout_0, long_open_epout_gap)\n","# short_max_outg, short_open_idx, short_true_open_idxth = get_max_outg_v3(\"SELL\", config, ohlc_list, short_obj, short_tpout_arr, short_open_epout_0, short_open_epout_gap)\n","# long_max_outg, long_open_idx, long_true_open_idxth = get_max_outg_v3(\"BUY\", config, ohlc_list, long_obj, long_tpout_arr, long_open_epout_0, long_open_epout_gap)"]},{"cell_type":"markdown","metadata":{"id":"EtjwB7Qk-Grj"},"source":["### significance_v4"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"elapsed":94486,"status":"ok","timestamp":1662375629618,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"oVifICO4-Grk","outputId":"6a893363-2ab7-4613-d92b-14407dcb5617"},"outputs":[{"output_type":"stream","name":"stderr","text":["WARNING:root:wave_point\n","WARNING:root:np.sum(short_open_res1 == 1) : 42048\n","WARNING:root:np.sum(long_open_res1 == 1) : 42240\n","WARNING:root:np.sum(short_open_res2 == 1) : 42048\n","WARNING:root:np.sum(long_open_res2 == 1) : 42240\n","WARNING:root:reject update_hl\n","WARNING:root:np.sum(short_open_res1 == 1) : 40427\n","WARNING:root:np.sum(long_open_res1 == 1) : 40130\n","WARNING:root:np.sum(short_open_res2 == 1) : 40427\n","WARNING:root:np.sum(long_open_res2 == 1) : 40130\n","WARNING:root:wave_mm\n","WARNING:root:np.sum(short_open_res1 == 1) : 40425\n","WARNING:root:np.sum(long_open_res1 == 1) : 40128\n","WARNING:root:point validation\n","WARNING:root:np.sum(short_open_res1 == 1) : 28319\n","WARNING:root:np.sum(long_open_res1 == 1) : 28683\n","WARNING:root:cu_wrr_32_ <= config.loc_set.point1.wrr_32 : 0.54867 0.10000 (0.0)\n","WARNING:root:co_wrr_32_ <= config.loc_set.point1.wrr_32 : 1.00000 0.10000 (0.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 1.4183809757232666\n","get_open_info_df elapsed time : 1.1475732326507568\n","en_ex_pairing elapsed time : 0.002592325210571289\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:root:wave_point\n","WARNING:root:np.sum(short_open_res1 == 1) : 42048\n","WARNING:root:np.sum(long_open_res1 == 1) : 42240\n","WARNING:root:np.sum(short_open_res2 == 1) : 42048\n","WARNING:root:np.sum(long_open_res2 == 1) : 42240\n","WARNING:root:reject update_hl\n","WARNING:root:np.sum(short_open_res1 == 1) : 40427\n","WARNING:root:np.sum(long_open_res1 == 1) : 40130\n","WARNING:root:np.sum(short_open_res2 == 1) : 40427\n","WARNING:root:np.sum(long_open_res2 == 1) : 40130\n","WARNING:root:wave_mm\n","WARNING:root:np.sum(short_open_res1 == 1) : 40425\n","WARNING:root:np.sum(long_open_res1 == 1) : 40128\n","WARNING:root:point validation\n","WARNING:root:np.sum(short_open_res1 == 1) : 28319\n","WARNING:root:np.sum(long_open_res1 == 1) : 28683\n","WARNING:root:cu_wrr_32_ <= config.loc_set.point1.wrr_32 : 0.54867 0.20000 (0.0)\n","WARNING:root:co_wrr_32_ <= config.loc_set.point1.wrr_32 : 1.00000 0.20000 (0.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 1.1166181564331055\n","get_open_info_df elapsed time : 1.1268563270568848\n","en_ex_pairing elapsed time : 0.05585646629333496\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:root:wave_point\n","WARNING:root:np.sum(short_open_res1 == 1) : 42048\n","WARNING:root:np.sum(long_open_res1 == 1) : 42240\n","WARNING:root:np.sum(short_open_res2 == 1) : 42048\n","WARNING:root:np.sum(long_open_res2 == 1) : 42240\n","WARNING:root:reject update_hl\n","WARNING:root:np.sum(short_open_res1 == 1) : 40427\n","WARNING:root:np.sum(long_open_res1 == 1) : 40130\n","WARNING:root:np.sum(short_open_res2 == 1) : 40427\n","WARNING:root:np.sum(long_open_res2 == 1) : 40130\n","WARNING:root:wave_mm\n","WARNING:root:np.sum(short_open_res1 == 1) : 40425\n","WARNING:root:np.sum(long_open_res1 == 1) : 40128\n"]},{"output_type":"stream","name":"stdout","text":["idep_plot elapsed time : 0.1961812973022461\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:root:point validation\n","WARNING:root:np.sum(short_open_res1 == 1) : 28319\n","WARNING:root:np.sum(long_open_res1 == 1) : 28683\n","WARNING:root:cu_wrr_32_ <= config.loc_set.point1.wrr_32 : 0.54867 0.30000 (0.0)\n","WARNING:root:co_wrr_32_ <= config.loc_set.point1.wrr_32 : 1.00000 0.30000 (0.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9891541004180908\n","get_open_info_df elapsed time : 1.133213996887207\n","en_ex_pairing elapsed time : 0.443495512008667\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:root:wave_point\n","WARNING:root:np.sum(short_open_res1 == 1) : 42048\n","WARNING:root:np.sum(long_open_res1 == 1) : 42240\n","WARNING:root:np.sum(short_open_res2 == 1) : 42048\n","WARNING:root:np.sum(long_open_res2 == 1) : 42240\n","WARNING:root:reject update_hl\n","WARNING:root:np.sum(short_open_res1 == 1) : 40427\n","WARNING:root:np.sum(long_open_res1 == 1) : 40130\n","WARNING:root:np.sum(short_open_res2 == 1) : 40427\n","WARNING:root:np.sum(long_open_res2 == 1) : 40130\n","WARNING:root:wave_mm\n","WARNING:root:np.sum(short_open_res1 == 1) : 40425\n","WARNING:root:np.sum(long_open_res1 == 1) : 40128\n"]},{"output_type":"stream","name":"stdout","text":["idep_plot elapsed time : 0.21266508102416992\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:root:point validation\n","WARNING:root:np.sum(short_open_res1 == 1) : 28319\n","WARNING:root:np.sum(long_open_res1 == 1) : 28683\n","WARNING:root:cu_wrr_32_ <= config.loc_set.point1.wrr_32 : 0.54867 0.40000 (0.0)\n","WARNING:root:co_wrr_32_ <= config.loc_set.point1.wrr_32 : 1.00000 0.40000 (0.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 1.010218620300293\n","get_open_info_df elapsed time : 1.1166355609893799\n","en_ex_pairing elapsed time : 1.9594817161560059\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:root:wave_point\n","WARNING:root:np.sum(short_open_res1 == 1) : 42048\n","WARNING:root:np.sum(long_open_res1 == 1) : 42240\n","WARNING:root:np.sum(short_open_res2 == 1) : 42048\n","WARNING:root:np.sum(long_open_res2 == 1) : 42240\n","WARNING:root:reject update_hl\n","WARNING:root:np.sum(short_open_res1 == 1) : 40427\n","WARNING:root:np.sum(long_open_res1 == 1) : 40130\n","WARNING:root:np.sum(short_open_res2 == 1) : 40427\n","WARNING:root:np.sum(long_open_res2 == 1) : 40130\n","WARNING:root:wave_mm\n","WARNING:root:np.sum(short_open_res1 == 1) : 40425\n","WARNING:root:np.sum(long_open_res1 == 1) : 40128\n"]},{"output_type":"stream","name":"stdout","text":["idep_plot elapsed time : 0.25990796089172363\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:root:point validation\n","WARNING:root:np.sum(short_open_res1 == 1) : 28319\n","WARNING:root:np.sum(long_open_res1 == 1) : 28683\n","WARNING:root:cu_wrr_32_ <= config.loc_set.point1.wrr_32 : 0.54867 0.50000 (0.0)\n","WARNING:root:co_wrr_32_ <= config.loc_set.point1.wrr_32 : 1.00000 0.50000 (0.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9856662750244141\n","get_open_info_df elapsed time : 1.1325628757476807\n","en_ex_pairing elapsed time : 4.9015138149261475\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:root:wave_point\n","WARNING:root:np.sum(short_open_res1 == 1) : 42048\n","WARNING:root:np.sum(long_open_res1 == 1) : 42240\n","WARNING:root:np.sum(short_open_res2 == 1) : 42048\n","WARNING:root:np.sum(long_open_res2 == 1) : 42240\n","WARNING:root:reject update_hl\n","WARNING:root:np.sum(short_open_res1 == 1) : 40427\n","WARNING:root:np.sum(long_open_res1 == 1) : 40130\n","WARNING:root:np.sum(short_open_res2 == 1) : 40427\n","WARNING:root:np.sum(long_open_res2 == 1) : 40130\n","WARNING:root:wave_mm\n","WARNING:root:np.sum(short_open_res1 == 1) : 40425\n","WARNING:root:np.sum(long_open_res1 == 1) : 40128\n"]},{"output_type":"stream","name":"stdout","text":["idep_plot elapsed time : 0.3125646114349365\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:root:point validation\n","WARNING:root:np.sum(short_open_res1 == 1) : 28319\n","WARNING:root:np.sum(long_open_res1 == 1) : 28683\n","WARNING:root:cu_wrr_32_ <= config.loc_set.point1.wrr_32 : 0.54867 0.60000 (1.0)\n","WARNING:root:co_wrr_32_ <= config.loc_set.point1.wrr_32 : 1.00000 0.60000 (0.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 1.008387565612793\n","get_open_info_df elapsed time : 1.125178575515747\n","en_ex_pairing elapsed time : 8.5075364112854\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:root:wave_point\n","WARNING:root:np.sum(short_open_res1 == 1) : 42048\n","WARNING:root:np.sum(long_open_res1 == 1) : 42240\n","WARNING:root:np.sum(short_open_res2 == 1) : 42048\n","WARNING:root:np.sum(long_open_res2 == 1) : 42240\n","WARNING:root:reject update_hl\n","WARNING:root:np.sum(short_open_res1 == 1) : 40427\n","WARNING:root:np.sum(long_open_res1 == 1) : 40130\n","WARNING:root:np.sum(short_open_res2 == 1) : 40427\n","WARNING:root:np.sum(long_open_res2 == 1) : 40130\n","WARNING:root:wave_mm\n","WARNING:root:np.sum(short_open_res1 == 1) : 40425\n","WARNING:root:np.sum(long_open_res1 == 1) : 40128\n"]},{"output_type":"stream","name":"stdout","text":["idep_plot elapsed time : 0.35973072052001953\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:root:point validation\n","WARNING:root:np.sum(short_open_res1 == 1) : 28319\n","WARNING:root:np.sum(long_open_res1 == 1) : 28683\n","WARNING:root:cu_wrr_32_ <= config.loc_set.point1.wrr_32 : 0.54867 0.70000 (1.0)\n","WARNING:root:co_wrr_32_ <= config.loc_set.point1.wrr_32 : 1.00000 0.70000 (0.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 1.025289535522461\n","get_open_info_df elapsed time : 1.1360254287719727\n","en_ex_pairing elapsed time : 12.39824891090393\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:root:wave_point\n","WARNING:root:np.sum(short_open_res1 == 1) : 42048\n","WARNING:root:np.sum(long_open_res1 == 1) : 42240\n","WARNING:root:np.sum(short_open_res2 == 1) : 42048\n","WARNING:root:np.sum(long_open_res2 == 1) : 42240\n","WARNING:root:reject update_hl\n","WARNING:root:np.sum(short_open_res1 == 1) : 40427\n","WARNING:root:np.sum(long_open_res1 == 1) : 40130\n","WARNING:root:np.sum(short_open_res2 == 1) : 40427\n","WARNING:root:np.sum(long_open_res2 == 1) : 40130\n","WARNING:root:wave_mm\n","WARNING:root:np.sum(short_open_res1 == 1) : 40425\n","WARNING:root:np.sum(long_open_res1 == 1) : 40128\n"]},{"output_type":"stream","name":"stdout","text":["idep_plot elapsed time : 0.39333009719848633\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:root:point validation\n","WARNING:root:np.sum(short_open_res1 == 1) : 28319\n","WARNING:root:np.sum(long_open_res1 == 1) : 28683\n","WARNING:root:cu_wrr_32_ <= config.loc_set.point1.wrr_32 : 0.54867 0.80000 (1.0)\n","WARNING:root:co_wrr_32_ <= config.loc_set.point1.wrr_32 : 1.00000 0.80000 (0.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 1.034311056137085\n","get_open_info_df elapsed time : 1.1319921016693115\n","en_ex_pairing elapsed time : 16.35196018218994\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:root:wave_point\n","WARNING:root:np.sum(short_open_res1 == 1) : 42048\n","WARNING:root:np.sum(long_open_res1 == 1) : 42240\n","WARNING:root:np.sum(short_open_res2 == 1) : 42048\n","WARNING:root:np.sum(long_open_res2 == 1) : 42240\n","WARNING:root:reject update_hl\n","WARNING:root:np.sum(short_open_res1 == 1) : 40427\n","WARNING:root:np.sum(long_open_res1 == 1) : 40130\n","WARNING:root:np.sum(short_open_res2 == 1) : 40427\n","WARNING:root:np.sum(long_open_res2 == 1) : 40130\n","WARNING:root:wave_mm\n","WARNING:root:np.sum(short_open_res1 == 1) : 40425\n","WARNING:root:np.sum(long_open_res1 == 1) : 40128\n"]},{"output_type":"stream","name":"stdout","text":["idep_plot elapsed time : 0.41879725456237793\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:root:point validation\n","WARNING:root:np.sum(short_open_res1 == 1) : 28319\n","WARNING:root:np.sum(long_open_res1 == 1) : 28683\n","WARNING:root:cu_wrr_32_ <= config.loc_set.point1.wrr_32 : 0.54867 0.90000 (1.0)\n","WARNING:root:co_wrr_32_ <= config.loc_set.point1.wrr_32 : 1.00000 0.90000 (0.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 1.0511291027069092\n","get_open_info_df elapsed time : 1.1418323516845703\n","en_ex_pairing elapsed time : 19.928776502609253\n","idep_plot elapsed time : 0.41760993003845215\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1728x576 with 36 Axes>"],"image/png":"iVBORw0KGgoAAAANSUhEUgAABWkAAAILCAYAAACadh4AAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAAgAElEQVR4nOzde1gUZfsH8C+nReW0CAiKiIhgKopYHkrLkjyQGZbmq1agkeY5U/PUgdQ0stfMSqkfIqmpaKmJeSS1VzMyVERRFFQkQI4CuyAqp+f3B7GJgJx2mV34fq7ruS52Znbm3hmWm3nmmXv0AAgQERERERERERERkST0pQ6AiIiIiIiIiIiIqDljJy0RERERERERERGRhNhJS0RERERERERERCQhdtISERERERERERERSYidtEREREREREREREQSYictERERERERERERkYTYSUtNmr+/P7Zs2SJ1GERERFSFhIQEeHp6Sh0GERERVUMIAWdnZ7Wsy9fXFydPnlTLuoiaInbSEtVBSEgIli9fLnUYRERERERERFrL0dERQggYGBhIHQqRzmAnLVEt6evz60JEREREREREROrHXidqEhYsWIDk5GQolUpcuXIFgwcPVs2TyWTYtGkTlEolYmJi8Pjjj6vmPfbYYzh+/DhycnIQExODkSNHquaFhIRg/fr12L9/P/Lz8+Hn54fXXnsNCxYsQF5eHsLCwhr1MxIRETVlMpkMa9asQUpKClJSUrBmzRrIZDIAwKBBg5CUlIS5c+ciPT0dt27dwsSJE1Xvbd26NcLCwqBQKPDXX39h+fLlvJ2SiIhITV544QVcv34dmZmZWLVqFfT09AAAenp6eP/993Hz5k2kp6dj06ZNMDc3BwCcOHECAJCbm4u8vDz0799ftb7PP/8c2dnZuHHjBoYPH974H4hIiwk2Nl1urq6u4u+//xZt27YVAISjo6Po1KmTACD8/f3F3bt3hZeXl9DX1xcrV64UERERAoAwNDQU8fHxYvHixcLIyEg899xzQqlUCldXVwFAhISEiNzcXPHUU08JPT09YWxsLEJCQsTy5csl/8xsbGxsbGxNoSUkJAhPT08BQCxdulREREQIGxsbYW1tLU6dOiWWLVsmAIhBgwaJoqIisXTpUmFoaCi8vLzEnTt3hFwuFwDE9u3bxfbt20XLli1F165dxd9//y1Onjwp+edjY2NjY2PT9SaEEMeOHROWlpbCwcFBXL16Vfj5+QkAYtKkSSI+Pl44OTkJExMTsWvXLrF582YBlJ2XCyGEgYGBal2+vr6isLBQvPXWW0JfX19MnTpVpKSkSP4Z2di0qEkeABtbg5qzs7NIT08Xnp6ewtDQsMI8f39/ER4ernrdtWtXUVBQIACIgQMHitTUVKGnp6eav23bNuHv7y+Ask7aTZs2VVgfO2nZ2NjY2NjU1x7spL127Zrw8vJSzRs6dKhISEgQQFknbUFBQYUTvfT0dNGvXz+hr68vCgsLVRdZAYjly5ezk5aNjY2NjU0NTQghhg0bpno9bdo08euvvwoA4tdffxXTpk1TzXN1dRWFhYXCwMCg2k7a+Ph41euWLVsKIYSwtbWV/HOysWlDY7kD0nnXr1/HnDlz8PHHHyMjIwPbt29H27ZtVfPT0tJUPxcUFKBly5YwMDBAu3btkJSUBCGEan5iYiLs7e1Vr5OSkhrnQxARETVz7dq1Q2Jioup1YmIi2rVrp3p9+/ZtlJSUqF4XFBTA1NQUNjY2MDIyqpCzmb+JiIjU58G8+mB+rip3GxkZwdbWttp1PXh+fvfuXQCAqampukMm0knspKUmYfv27Xj66adVT5D87LPPanzPrVu34ODgoKqnAwAdOnRASkqK6vWDHbhVvSYiIiL1uHXrFhwdHVWvO3TogFu3btX4vszMTBQVFaF9+/aqaQ4ODhqJkYiIqDl6MK8+mJ+ryt1FRUVIT0/nuTNRPbCTlnSeq6srnnvuOchkMty7dw93795FaWlpje87ffo0CgoKsGDBAhgaGmLQoEEYOXIkQkNDq31Peno6OnXqpM7wiYiICGUXXD/44ANYW1vDysoKH330EX744Yca31daWordu3fj448/RsuWLdGlSxf4+Pg0QsRERETNw3vvvQe5XI727dvjnXfewY4dOwCU5e53330XHTt2hImJCVauXIkdO3agpKQEmZmZKCkp4fkzUR2wk5Z0nrGxMQICApCVlYW0tDS0adMGixcvrvF9RUVFGDlyJLy8vJCVlYX169fDx8cHV69erfY9wcHB6NatG3JycrBnzx51fgwiIqJm7ZNPPsGZM2dw4cIFXLx4EefOncMnn3xSq/fOnDkTFhYWSEtLw5YtW7B9+3bcv39fwxETERE1D3v37sXZs2dx/vx57N+/H8HBwQCAjRs3YsuWLThx4gQSEhJw7949zJo1C0BZKYMVK1bg1KlTyMnJQb9+/aT8CEQ6QQ9lxWmJiIiIiJqEgIAA2NnZYeLEiVKHQkRERERUKxxJS0REREQ6rUuXLujRowcAoE+fPvDz8+MdL0RERESkUwylDoCIiIiIqCHMzMywfft2tGvXDunp6Vi9ejX27t0rdVhERERERLXGcgdEREREREREREREEmK5AyIiIiIiIiIiIiIJsZOWiIiIiIiIiIiISELspCUiIiIiIiIiIiKSEDtpiYiIiIiIiIiIiCTETloiIiIiIiIiIiIiCbGTloiIiIiIiIiIiEhC7KQlIiIiIiIiIiIikhA7aYmIiIiIiIiIiIgkxE5aIiIiIiIiIiIiIgmxk5aIiIiIiIiIiIhIQuykJSIiIiIiIiIiIpIQO2mJiIiIiIiIiIiIJMROWiIiIiIiIiIiIiIJsZOWiIiIiIiIiIiISELspCUiIiIiIiIiIiKSEDtpiYiIiIiIiIiIiCTETloiIiIiIiIiIiIiCbGTloiIiIiIiIiIiEhC7KQlIiIiIiIiIiIikhA7aYmIiIiIiIiIiIgkxE5aIiIiIiIiIiIiIgmxk5aIiIiIiIiIiIhIQuykJSIiIiIiIiIiIpIQO2mJiIiIiIiIiIiIJMROWiIiIiIiIiIiIiIJsZOWiIiIiIiIiIiISELspCUiIiIiIiIiIiKSEDtpiYiIiIiIiIiIiCTETloiqsDV1RVRUVFQKpWYNWuW1OFQNUJCQrB8+fIal2vRogXCwsKQm5uLnTt3NkJkRERUHeZY3cAcS0Ske5hjdQNz7KM1qU7ahIQEeHp6Vpo+aNAgJCUlSRARPYzHSPstWLAAx48fh7m5Ob7++mu1rXfw4MGIjY3FnTt3cOzYMXTo0KHaZZ988kmcPn0aSqUS0dHRGDBgQIX548ePx82bN5Gfn489e/bA0tJSbXE2NWPGjIGtrS2srKwwduzYRy5b2/3q4uKCn3/+GRkZGbh9+zYOHToEV1fXCsvMmTMHqampUCgUCA4OhkwmU9tnosbHv93aj8dINzDHNi3MsaQO/Put/XiMdANzbNPSXHNsk+qklZqlpSV2796N/Px83Lx5E+PHj6922fnz5+PixYtQKpW4ceMG5s+fX2G+o6Mjjh07hjt37iA2NrbKpEA1c3d3x5kzZ3Dnzh2cOXMG7u7uVS4nk8mwYcMG3Lx5E0qlElFRURg+fHiFZeryx1mXOTo64tKlS1XO09ev358MKysr7N69Gx9++CFat26NM2fOYMeOHVUua2lpiX379uHzzz+HXC7HqlWrsG/fPsjlcgBAt27d8N133+GNN96Ara0tCgoKsH79+nrF1Rw4OjoiLi4OJSUlj1yuLvtVLpcjLCwMXbp0ga2tLf766y/s3btXNX/o0KFYtGgRPD094ejoiE6dOmHp0qVq/VzUvNQlv86ZMwfXr1+HQqFASkoKvvjiCxgYGKjmM7+qB/Nr/TDHNi3MsdQU8BxW+zDH1g9zbNPSnHOsaCotISFBeHp6Vpo+aNAgkZSUpPHtb9u2TYSGhgoTExMxYMAAkZubK7p161blsu+9957w8PAQBgYGwtXVVdy8eVP85z//Uc3/448/xOrVq0WLFi3EK6+8InJycoS1tbXk+1iXjpGRkZG4efOmmDNnjpDJZGLWrFni5s2bwsjIqNKyrVq1Ev7+/sLR0VHo6emJESNGCKVSKRwdHQUAYWVlJXJzc8WYMWOEsbGxWLVqlYiIiJB8f6q7HT16VBQXF4u7d++KvLw8sXXrVrF+/Xqxf/9+kZ+fLzw9PUWvXr3E2bNnhVKpFKGhoWL79u1i+fLlj1zv5MmTxalTpyrs74KCAtGlS5dKy44YMULExMRUmHb16lXx5ptvCgBixYoVYuvWrap5nTp1Evfv3xempqaS7z9Ntur2e/l3Z/HixSIzM1MkJCSICRMmCADi448/Fvfv3xeFhYUiLy9PtQ+rag3Zr5aWlkIIIVq3bi0AiK1bt4oVK1ao5g8ePFikpqZKvg/Z6t90Kb926tRJWFhYCKDsd/Po0aPi3XffVc1nfm14Y36tX2OO1d7GHMsmZdOlHMtzWM0fI+bY+jXmWO1tzLF1btIfNHW1hIQEMW/ePBEdHS1yc3NFaGioMDY2Vh38uXPnivT0dHHr1i0xceJE1ftCQkLEunXrxIEDB0ReXp74/fffha2trVizZo3Izs4WsbGxolevXo/cdqtWrcT9+/eFi4uLatrmzZvFp59+WqvY165dK7766isBQLi4uIh79+5V+KU6ceKEePvttyXfx5o+Rg8uN3/+fBEdHS3y8/PFhg0bRJs2bcSBAweEUqkU4eHhQi6XP3JbQ4YMEcnJyRWmJSYmimHDhtUq1ujoaPHKK68IoG5/nHW9HT9+XPj5+Qmg7LuRm5srnnrqKaGnpyfMzMxU/zQYGhqK0aNHi8LCwhqT25dffinWr19fYdrFixdV+/fBNmLECHHp0qUK0+Li4sQXX3whAIiff/5ZLFiwoML8vLw80bt3b8n3nabag/+sPbzfBw0aJIqKisTq1auFTCYTzzzzjMjPzxeurq4CgPD39xdbtmypcRsN2a/e3t7i1q1bqtfnz58XY8eOVb22srKqkPzYdK/pan5t3bq1CA8PF+vWrRMA82v5csyv0jXmWO1rzLFsUjddzbEAz2GZY7WrMcdqX2OOrXtrcuUOxo4di+HDh8PJyQk9e/bExIkTAQB2dnawsLCAvb09/Pz8sG7dOtWw8/L3ffDBB7C2tsb9+/cRERGBc+fOwdraGj/99BO++OKLR27X1dUVxcXFiI+PV02Ljo5G9+7daxX3008/rRqa3717d9y4cQP5+fn1Wpe2q+4YPWz06NEYMmQIXF1dMXLkSBw8eBBLliyBjY0N9PX1MXv27Edup3v37rhw4UKFaRcuXKjVfmzTpg1cXV0rHJPo6GjV/IKCAly/fr3JHJNH2bt3L/744w8IIdCrVy8YGRnhyy+/RHFxMXbt2oXIyMga12FqagqFQlFhmkKhgJmZWaVlIyIi0K5dO4wbNw6Ghobw8fGBs7MzWrVqVed1NRX9+/evcb9/+OGHKCwsxIkTJ7B///4a6/Y8rL771d7eHuvWrcPcuXOrXVf5z035GDUHupRfx48fD4VCgdu3b8Pd3R3fffcdAObXcsyv2oM5VnrMsaQNdCnHPojnsJUxx2oP5ljpMcfWXZPrpP3qq6+QmpqKnJwc7Nu3D7169QIAFBUVYdmyZSguLsbBgweRn5+PLl26qN63Z88enDt3Dvfv38eePXtw7949bNmyBaWlpdixYwc8PDweuV1TU1MolcoK02r7hfv444+hr6+PkJAQ1bqa8pe3umP0sK+//hoZGRm4desWTp48idOnT+P8+fOqY1SbY1Kf/WhoaIitW7di06ZNuHr1aoPW1RQ8WAy/Xbt2SElJqTA/MTGxxnXk5+fD3Ny8wjRzc3Pk5eVVWjY7Oxve3t6YO3cu0tPTMXz4cPz6669ITk6u87qaipr2e05ODgoKCirMa9euXZ22UZ/9am1tjSNHjmD9+vUIDQ2tdl3lPzflY9Qc6FJ+3b59OywsLODi4oJvv/0W6enpqnU15b/lzK+6hzlWesyxpA10KceW4zksc6y2Y46VHnNs3TW5Ttq0tDTVzwUFBTA1NQUA3L59u0LB4QfnAVCdwAHA3bt3K71+cNmq1PcLN2PGDPj4+GDEiBEoLCxs0Lp0RXXH6GFSHBM9PT1s2bIFhYWFmDlzZoPW1VQIIVQ/p6amwt7evsL82hSfv3TpUoWC961atYKzs3O1hd1PnDiBvn37wsrKCm+88QYee+wx/PXXX1Wuy8nJCcbGxoiLi6vT59IlNe13S0tL1RXa8nm3bt2q0zbqul/lcjmOHDmCsLAwrFy58pHrcnd3R1paGrKzs+sUE2kXXcuvAHDt2jVcunRJ9fCApv63nPlV9zDHSo85lrSBruVYnsMyx+oC5ljpMcfWXZPrpJVKXFwcDA0N0blzZ9U0d3f3ar+8ADBp0iTVk+MevLpw6dIldOrUqcIf8JrWRZVdunQJPXv2rDCtZ8+ej9yPwcHBsLW1xejRo1FcXFxhXXX549xURUREoLi4GLNnz4ahoSFefvll9O3bt8b37dmzB25ubnjllVdgbGyMjz76CBcuXFBd5X1Yr169YGhoCDMzM/z3v/9FUlISjhw5AgDYunUrRo4ciYEDB6JVq1ZYtmyZ6om0TVVt9vvSpUthZGSEgQMH4sUXX8SPP/5Yp23UZb+amZnh8OHDOHXqFBYvXlxp/ubNm+Hn54euXbvCwsICH3zwAb7//vs6xUNUrj759UGGhoZwdnYGwPyqLsyvmsEcKw3mWGrOeA6rfZhjNYM5VhrMsXXHTlo1KSgowO7du7Fs2TK0atUKTz31FLy9vbFly5Yql58wYQJWrlyJIUOGICEhocK8+Ph4nD9/Hv7+/jA2NsaoUaPQs2dP7Nq1qzE+SpPx22+/oaSkBLNnz4ZMJsOMGTMAAMeOHaty+cDAQHTt2hUjR47EvXv3Ksyr6x/npqqoqAivvPIKJk6ciOzsbPznP//B7t27a3xfVlYWRo8ejRUrViAnJwf9+vXDuHHjVPMDAwMRGBioer1gwQJkZWUhKSkJbdu2xcsvv6yad/nyZUydOhVbt25FRkYGzMzMMH36dPV+UC1T035PS0tDTk4Obt26ha1bt2Lq1Kl1/t2sab8eOHBAlcjKk+ukSZOQl5enag4ODgCAw4cPY9WqVTh+/Dj+/vtvJCYmwt/fXw17gpqjuuZXPz8/2NjYAAC6du2KxYsX4+jRowCYX9WF+VUzmGOlwRxLzRnPYbUPc6xmMMdKgzm2fiR/4pu6WkJCgvD09FS9Ln8a3MNPXXx42ZCQkApP9fPz8xPHjx9XvXZ2dhZFRUU1bt/S0lLs2bNH5Ofni8TERDF+/HjVvIEDB4q8vDzV6xs3bojCwkKRl5enaoGBgar5jo6O4vjx46KgoEBcuXKlwufS5VbbY/Twclu2bBH+/v4VjlF4eHiN2+vVq5c4c+aMKCgoEGfPnq3whNPFixeLAwcOCACiQ4cOQggh7t69W+GYTJgwQbW8p6eniI2NFQUFBeL48ePC0dFR8v2pDe3h7w9b47aq/r6xsam76VJ+3bhxo0hLSxP5+fkiISFBrFq1ShgbG6vmM78yv+pSY46VtjHHsjVG06Ucy3PYRx8j5ljdasyx0jbm2Kqb3j8/EBHVS0hICJKTk/Hhhx9KHUqzNGjQIPzwww+qq39ERNR0MMdKizmWiKjpYo6VFnNs1VjugIjUYvHixRVuGShvBw4ckDo0+kdgYGCVx+jBW3SIiEj7MMdqP+ZYIiLdxByr/ZpTjuVI2jpwcHDA5cuXq5zXrVs3JCUlNXJENGHCBHz33XeVpicmJsLNzU2CiEiXBAcH48UXX0RGRgZ69OgBAFi1ahVGjhyJwsJCXL9+HZMmTYJCoYCjoyNiY2NVNXL+/PNPTJs2TcrwiZoM5lftw/xKRNQ0MMdqH+ZYIqoOO2mJqNl6+umnkZ+fj82bN6s6aYcMGYJjx46hpKQEAQEBAIBFixbB0dERv/zyi2o5IiIiIiIiIiJ1MZQ6gIdlZGQgMTFR6jCaHEdHR7Rp06ZB6+Cx0QweG2nJZDI4OzsjMjKy0jwXFxf88ssvDVo/j436qeM701zx91Ez+HdcO6nrbwWPjfrxO6O9mGPrj7+T6se/442jR48eKCkpAQAIIRAbGwsDAwM4OztDJpOp7jAsX8bBwQHW1ta4dOkSJk6ciKioKACAj48PPvjgAwDAJ598gs2bNz9yuzwumsEcq71qe2wkf3rZgy0yMlLyGJpiU8d+5bHhsWmKzdHRUVy8eLHKeTk5OeK1115TLZefny/OnTsnfvvtNzFw4MBq1zl58mQRGRkpIiMjRUJCguSfsak1/r5z32lb499x7Wzq2qc8Ntp5bHhctPfYNNfGfae9+5TH5tEtISFBWFlZVZj22WefiYULFwoAYuHChSIgIEAAEF5eXuLAgQMiMjJS9OvXT/z5558CgLC0tBTXr18XlpaWQi6Xi+vXrwu5XM7jIkFjjtXeVpv9ygeHERFVYcmSJRBCYOvWrQCA1NRUdOjQAb1798bcuXOxbds2mJmZVfneoKAg9OnTB3369EFWVlZjhk1ERERERNQg3t7e2LRpEwBg06ZNGDVqlGp6+QjZ06dPQy6Xw87ODsOGDUN4eDhycnKQm5uL8PBwDB8+XLL4iXRVrTpphw0bhitXriA+Ph4LFy6scplXX30Vly5dQkxMjKpTAygb8h4XF4e4uDj4+PioJ2oiLdO+fXscO3ZM9R2YPXs2AMDf3x/JycmIiopCVFQUvLy8VO9ZtGgR4uPj4ebmhqFDh6qm1+b7Rprl6+uLF198EQkJCapphYWFyM7OBgCcO3cO169fh6urq1QhEhERERERNZgQAkeOHMGZM2cwefJkAICtrS3S0tIAAGlpabC1tQUA2NvbV3jYXHJyMuzt7aud/rDJkycjMjISkZGRsLa21uTHItJJNdak1dfXx7p16zBkyBAkJycjMjISYWFhiI2NVS3TuXNnLF68GAMGDEBubi5sbGwAAJaWlvD398cTTzwBIQTOnj2LsLAw5Obm1jpAWcuWKLx7tx4fjajxFBcXY968eYiKioKpqSnOnj2L8PBwAMCaNWuwevXqCst37doV48aNQ/fu3REZGYn169erOvxq+r6RZpi3sYEyIxPDhg3DggULMGjQIBw8eFA139raGtnZ2SgtLYWTkxNcXFxw48aNOm1D39AAetBDSXGxusMnIiLSWuU5VpOMWhij6N59jW6DqLYsbG2gSNfs7zyRugwcOBC3bt2CjY0NwsPDceXKlUrLCCHUsq2goCAEBQUBQJXPBKG6MTQ2hqyFMQoUSo1tQ09PD4bGMubYRlLjSNq+ffvi2rVrSEhIQFFREUJDQ+Ht7V1hmcmTJ2PdunWqztfMzLKE1NAh7wPGj8Gnfx1DS/Oqbykm0hZpaWmqgun5+fmIjY2t8sphOW9vb4SGhqKwsBCFhYW4du0a+vbtW6vvG6nPtm3bEBERgS5duiDp778REPQtvvnmG5iZmSE8PBzdunVDYGAgAOCZZ57BhQsXEBUVhZ9++glTp05FTk5Orbdl6+yEz86eQPfnntbUxyHSGM+3fDHl2zVSh0FEOkbWsiXGfLQQi/aFwqp99f8XNdSwGZPxyR/h0NPT09g2iGqrjZMjFvy8Hc+/PUnqUIhq5datWwDK+nH27NmDvn37Ij09HXZ2dgAAOzs7ZGRkAABSUlLg4OCgem/79u2RkpJS7XTSHLltG8z4fj0mfhmg0e0s2LsdYz9erNFt0L9q7KStzbB1V1dXuLq64vfff0dERASGDRtW6/cC1Q95V2aW1XK0bGtXx49FJB1HR0d4eHjg9OnTAICZM2ciOjoawcHBkMvlABp+mwjAW0XUYcKECfAc9yq+iP4DK4/sRcCH/nBxcUGHDh3g4eGBy5cvY9q0aQCA3bt3w83NDR4eHnj88cfxyy+/1Glb+dk50NfXh7mNlSY+CpFGdfTogS4D+sPEUi51KESkIzq698C8nzaj3+iX8EfobuSmZ6jKQ3Xv3r1CeShLS0scOXIEcXFxOHLkiOr/pdrKz86BoZERTFrzbxRJLzMxCTHHTsBr5hQ8P2Wi1OEQPVKrVq1gamqq+nno0KGIiYlBWFgYfH19AZSVgtu7dy8AICwsTFXGsl+/flAoFEhLS8Phw4cxdOhQyOVyyOVyDB06FIcPH5bmQzUDTh49MWdHCNo4OeJ/m7drdFv52Tkwb2Oj0W3Qv9Ty4DBDQ0O4uLjg2Wefxfjx4xEUFAQLC4tav7+6h+zk3CqrgWLZjp20pBtMTEywa9cuzJkzB3l5eQgMDISzszN69eqF1NTUSmUPGoIPp2q4x0d6YdLaAKReu45vfKciNy1dY9sqyFWguKgI5jZMcKR7zP+5EOTk4S5xJESk7QwMDfHCO9MwY1Mg9PT1sX7SdPyyZh1KiopU5aEuXbqE/v37Y8aMGejatSsWLVqEo0ePwtXVFUePHsWiRYvqtM3y28oteBJJWkCUliL0w09wJuwgvGa9Dc/JvlKHRFQtW1tb/P777zh//jz++usv7N+/H4cPH0ZAQACGDBmCuLg4PP/88wgIKButeeDAAdy4cQNubm4ICgrC9OnTAQA5OTlYvny5ahDRsmXL6nTXIdVe/1dHYWrwN7iXl4+vJryFS8dPanR7yswsWNhwUFhjqbEmbW2GrScnJ+P06dMoLi7GzZs3ERcXBxcXF6SkpODZZ5+t8N7ffvut1sHlpP7TScuRtKQDDA0NsWvXLmzduhV79uwBANVtIUBZp2r56MtHfa94m0jjeMZnHLzfewdxf0bi+3cW4X5BgUa3J4RAXtZtmDPBkQ4ys24NAOj0uDtijv1P4miISFvZuThjwsqPYP+YK07vCsPeVWsr5Ne0tDTVg2geLA/l7e2tOmfYtGkTfvvttzp11CrSy/7fktu2QUpsnPo+EFE9lXfUQg94YfZUAMDRoE0SR0VUWUJCAnr16lVpenZ2Np5//vkq3zNz5kz069cPffr0qTA9JCQEISEhGomTyi6CvrxkHp58dRRif4/ADws+wr28fI1vV5GRia7PDND4dqhMjQQ5HZwAACAASURBVCNpIyMj4eLigo4dO8LIyAjjxo1DWFhYhWV+/vln1T9WVlZWcHV1xY0bNxo85P1OTi4K797jSFrSCcHBwYiNjcWaNf/WbSyv4wMAL7/8MmJiYgCU3SYybtw4yGQyyGQyuLi44K+//qrV940a7oV3psH7vXcQfeQYNkyfp/EO2nLKjCyWOyCdo6evDzOrsk5ap94cSUtElenp6+PZia/h3dCNMLexRvDM97Dz408fmV8fLA9V3VPEa0vxz0PJeDsmPWjYsGG4cuUK4uPjsXDhwkrzfX19kZGRgaioKERFRcHPzw8A4O7ujj/++AMxMTGIjo7G2LFj67V9UVqK0A8+wZl9B/HC7KnwfIsjaomofsysWmNa8Dd48tVROBa8GcEz5jdKBy1QdreKcauWaGFm2ijba+5qHElbUlKCmTNn4vDhwzAwMMDGjRtx+fJlLF26FGfOnMG+fftUnbGXLl1CSUkJ3nvvPWRnZwOAasg7gHoNec9NS+dIWtJ6AwYMgI+Pj+rBUgCwZMkSjB8/Hr169YIQAjdv3sTbb78NALh8+TJ27tyJy5cvw97eHi+//DJKS0sBoMrvG6mHvoEBxny4oKw+3o7d2L1yNcQ/+70xKDKzYOPoUPOCRFrExNIC+gYGyM/Ogf1jrpC1bInCu3elDouItERr+7YYt+JDOD/ugQu//oafln2GOzm5j3yPvr5+hfJQD6vuKeKTJ0/GlClTAKBCPf6829koKS6GhS07aamMvr4+1q1bhyFDhiA5ORmRkZEICwtDbGxsheV27NiBWbNmVZhWUFAAHx8fXLt2DW3btsXZs2dx+PBhKBSKOsdR3lGrp6eHF96ZCiEEjgVvbtBnI6LmxaF7V0xcG4BW5ubYMv8DnD98tFG3X34h1KKNTaN1DDdnNXbSAsDBgwdx8ODBCtP8/f0rvJ43bx7mzZtX6b0NHfKecyuVI2lJ6506darKJwo//L150MqVK7Fy5UpERkbi0KFDFd7zqPdR/RjKZHh91TL08ByEI99uxOF1QY0eQ17WbTg/4dHo2yVqiPJ6tBeP/g9PvjoKHXu5IS4iUuKoiEgb9B31IrwXzYEoFdi2ZBnO7qv5/xdDQ0M4Oztj6dKlqvJQ5U8RT0tLq/AU8YcFBQUhKKgsf5cPAgHKOsLysm5DbttGDZ+KmoK+ffvi2rVrSEhIAACEhobC29u7UidtVeLj41U/p6amIiMjAzY2NvXqpAXKfj+3v78cenp6GDFnGgCBY8Fb6rUuImpeHh/phVf9FyIvKxtfvzEFt67G1/wmNXuwkzb9ekKjb7+5UcuDwzQpOzWNI2mJqEGMTVphcuAX6OE5CHs+/UKSDlqgLMGZyC1gKJNJsn2i+jCzLivRcfHX31BaUgKn3pXrlhFR82JiKcekrz7Df5a/j+RLV7B69Bu16qAFyspD3bt3r0J5qOqeIl4XivRMPjiMVOzt7ZGUlKR6nZycDHt7+0rLjR49GtHR0fjxxx/Rvn37SvP79OkDmUyG69evV7mdyZMnqx6U9ODo7oeJ0lJsW7IM5/Yfxog50zHY7416fCoiai70DQzw0oJ3MGHlR7h5/iK+HDdJkg5aoKxkHwBYtOGzVRpDrUbSSinnVhrMrFrD0NgYxffvSx0OEekYUytLTF6/Bm1dnPHDQn9EHTgiWSx5mbcBAOY2VshOSZUsDqK6KK+jnJn4N1KuxqMT69ISNWvmbWwwbcPXsGxnh72r1uLkDzuqLU/wsPLyUAUFBRXKQwUEBGDnzp3w8/NDYmJivWqAKjIy0aZTxzq/j5qvffv2Yfv27SgsLMSUKVOwadMmeHp6qubb2dlhy5Yt8PX1rfZ3vLrR3VUpH1ELACPmTIcQAsc3/qCmT0NETUUrC3O88d9P4Nq/D05s2YF9X3yN0uISyeJRZJZ10rLue+PQ+pG0OallDxGwbFu3Bwg0B8HBwUhPT8fFixerXWbt2rWIj49Ht27d4OFR8TZrMzMzJCUl4euvv9Z0qESSaG3fFjM3fYc2To7YOPs9STtogQcS3CNGWhBpGzOrsk5aZVY2Es5Gw7GnGwwMtf4ab4MxxxJVJrezxYyQ9TBvY43vJs/GiS2hte6gBf4tD3X58mV4eHjAw8MDBw8eVD1F3NXVFUOGDKnzMyyAsk5ajqSlcikpKXBw+Pc5AO3bt0dKSkqFZbKzs1FYWAgA2LBhAx5//HHVPDMzM+zfvx/vv/8+Tp8+rba4SktKsP395Th34AhefHcGnpv0mtrWrUtqm2Pd3NwQHR3NHEvNhrmNNWb/EAQnj54I/WA59q76UtIOWgAovn8fd3IVzLGNRPs7aW+Vd9Ky5MHDvv/+ewwfPrza+V5eXnBxcYGLiwsSExMRGBhYYf7y5ctx4sQJTYdJJAlrRwfM3PwdTOQW+HbyLFz5/U+pQ4Iys/zp0+ykJd1hbmOFu8o8FN+/jxvnzsOohTEcuneVOiyNY44lqqi1fVtMD1kPE7kFvpvyDhKiLkgdUgWK9Ay0NDOFcatWUodCWiAyMhIuLi7o2LEjjIyMMG7cOISFhVVYxs7u3/PLl156SVWv1sjICHv27MHmzZuxa9cutcdWWlKC7UuWIerAEbw4d2az7KitbY6NiYnBlClTmGOpWTCzao1pwd/AzNoK3741G5F7D0gdkooiI5MP52wkutNJy4eHVXLy5ElkZ2dXO9/b2xubN5c9PfTOnTuQy+Wqf0Z69+4NW1tbHDki7chCIk2Q29liatBX0DcwwLqJ05AYHSN1SAAAparcATtpSXeYWVsh73ZZrkk4Fw0AcHq86Zc8YI4l+peVQ3tMD1mPlmam+HbybPx94ZLUIVWierAJTyIJQElJCWbOnInDhw8jNjYWO3fuxOXLl7F06VKMHDkSADB79mzExMTg/PnzmD17NiZOnAgAGDt2LJ555hlMnDgRUVFRiIqKgru7evNeaUkJtj3QUdtn1Ai1rl/b1SXHnj59mjmWmjzT1paYuuFrWNjaYMP0ubh5XssuhPJulUaj9Z20yswslBQXs5O2HqormK+np4fVq1dj/vz5Na6jtsXwibSFqZUlpgZ9hRYmJgia+i7Srt2QOiSVglwFiouK2ElLFQwbNgxXrlxBfHw8Fi5cWGm+r68vMjIyVCeKfn5+FeZr+pY/c2srKP8p1ZGfnYOMhER04sPDmGOp2Wjj5IgZIethZGyMQL+ZSL58ReqQqqRI//fp00QAcPDgQXTp0gWdO3fGypUrAQD+/v7Yt28fgLJ6yG5ubujVqxcGDx6Mq1evAgC2bt0KmUymKsnh4eGB6OhotcdX3lGbEHUBw2dMbhalhGqLOZaaExO5Bd4O+gqt7dthw4z5WnenClD28DCewzYOre+kLS0pgSIjk+UO1Gj69Ok4cOBApbpMVQkKCkKfPn3Qp08fZGVlNUJ0RPXX0twMU779EuZtbLBhxnykXImTOqQKhBBQZjLB0b/09fWxbt06eHl5oVu3bhg/fjy6dq1cSmDHjh2qE8Xg4OAK8zR9y5+ZtRXysm6rXt84ex4dPXpAT09PY9vUZcyx1JTYOjth2sZ10Dc0QKDfTMmeLF0b5SNp+WAT0iWlJSUI/3Yj5Ha2eOIlL6nD0XrMsdTUtDQ3x9v/9xVsOjhg46z3cONMlNQhVUmRkQkzq9bQNzCQOpQmTycu1+WkprGTth6qK5j/5JNP4umnn8b06dNhamoKmUyG/Px8LF68WMJoiRpG1rIl3lq3GrbOTgieMV/rbhEpl5d5G+Y2VlKHQVqib9++uHbtGhISEgAAoaGh8Pb2VtXFq0n5LX+HDh3CE088oZEYzaxbQ/lgJ+25aPQf4w07l05IjbuukW3qAuZYauraunbG1KCvUFJcjMC3ZiEjIVHqkB6pvJNWbttG4kiI6ubqH6eRdCkWg/18ELn3AEpLpH1IkDZgjqXmoIWZKd7+vy9h69wRG2ctQPzpM1KHVC1FRib0DQxgZt1adecKaYbWj6QFyurSspO27sLCwuDj4wMAMDExgUKhQFpaGl5//XU4OjrCyckJ8+fPx+bNm5nYSKcZymSYtDYAHXp0ww8LPkJcxF9Sh1QtBUfS0gOqu53vYaNHj0Z0dDR+/PFHtG/fHgBqfctfQ273k7VsiRYmJhVG0iacOw8Azb7kAXMsNWXtu3XB9I3rUFxYiPWTpmt9By0AFN27jwKFkjVpSSf9+n+bYN2hPdyHeUodilZ4MMf269ePOZaaHGOTVpgSuAZtXTsjZM4iXP3jdIPXGRwcjPT0dHTv3l01zd/fH8nJyaqyaV5e9Ruxz5JCjUc3OmlT02Bha8Oh1Q/Ztm0bIiIi0KVLFyQlJeHNN9/E22+/jbfffhsAcODAAdy4cQPXrl2Do6Mjpk+fLnHEROqnb2CA11ctg+uTfbHjo5W4+OtvUof0SHlZt5ncqE727duHjh07wt3dHeHh4di0aROA2t/y15Db/cysy0Z9lz/0DgCyU1KRm54Bp95N++FhzLHao3379jh27BguXbqEmJgYzJ49GwBgaWmJI0eOIC4uDkeOHIFcLle9Z+3atXBzc0N0dDQ8PDxU0318fBAXF4e4uDhVBwBV1KFHN0wN+hr38u9g3cRpyPo7WeqQaq3swSa8EEq659LxE0i7dgOeb/k0i3JCtc2xbm5uCAoKYo6lJkXWsiUmr/8C7bs9hs3z3seVkxFqWe/333+P4cOHV5q+Zs0aVdm0gwcP1mvdygx20jYmoU0tMjKy0rR+o18Sqy9GCLmdreTx6Wqrar9KsQ42Hht1Nj09PTF+xUdi9cUIMXDCmDq/Pzg4WKSnp4uLFy+qpllaWoojR46IuLg4oVAohFwuV81bu3atiI+PF9HR0cLDw6Nex8Zzsq9YfTFCGMpkku8/XW1N6fe9f//+4tChQ6rXixYtEosWLap2eX19fZGbmysAiB9++EEkJiaKhIQEkZmZKRQKhfj000/Vuu+ceruL1RcjhOuTfSpMf/2zpeKjX8Mk33/a0vh3XLPNzs5O9TfX1NRUXL16VXTt2lV89tlnYuHChQKAWLhwoQgICBAAhJeXlzhw4ICIjIwU/fr1E3/++acAyv6+X79+XVhaWgq5XC6uX79e4W88jw1Ex149xYqIX8XiAz9q9P9uTX1n3gr8QryzPVjy/ajLrTn9vmvbvuv94jCx+mKEcBv8jOSfRVuaun4f+XutncemOR4XWcsWYnrIerEq6qTo8fyzal+/o6OjKCgoUL329/cX8+bNa/CxMW1tWe9zbrbq92tVTTdG0t5KAwBYtmPJAyL616hF7+KJl7xw8Ovv8Pu2n+r8/qquNi5atAhHjx6Fq6srlEolFi1aBADw8vKCi4sLXFxcMGXKFAQGBtYrZmVm2UhG1qUlAIiMjISLiws6duwIIyMjjBs3DmFhYRWWsbP7N/e99NJLqnq1jXHLX1UjaYGyurQWtjawal+5NAORuqWlpSEqquxBGvn5+YiNjYW9vT28vb1VI8s3bdqEUaNGAQC8vb2xefNmAMDp06chl8thZ2eHYcOGITw8HDk5OcjNzUV4eHiVI06aK6fe7pjy3RooM7OwbuJ05KalSx1SnSnTM1mTlnTW+YO/IispGZ6TfaUOhYg0wKiFMd786nM4efTEtkUfN9odoDNnzkR0dDSCg4Mr3HX0sEeVSLuTk4vioiKY23AkrabpRCdt+T+J7KQlonLDZ03BwAmv4rfvt+HX//u+Xus4efIksrOzK0x78KT/9u3bNZ7011V5Z5d5HWuDUtNUUlKCmTNn4vDhw4iNjcXOnTtx+fJlLF26FCNHjgQAzJ49GzExMTh//jxmz56NiRMnNlp85v900j5YkxYAbpz9py7t40275AFpH0dHR3h4eOD06dOwtbVFWlrZhfy0tDTY2toCqL7Wc21rQAMNq+Wsiyzb2WHSlwHITcvA+knTVbc16hpFRiZMrVpD35Al0kj3lJaU4PjGH9DBrRtcn+wrdTjUzOjr6+PcuXPYt28fAKBjx474888/ER8fj9DQUBgZGQEAZDIZQkND4ebmhj///BOOjo6qdSxatAjx8fG4cuUKhg4dKsnn0FaGMhkmfRkA5769sf2D5Th/+GijbDcwMBDOzs7o1asXUlNTsXr16mqXfVSJNCEElJlZLHfQCHSikzYn9Z+RtHx4GBEBeHbiaxgyZRIifvoZ+1Z/rdZ1P3jSX1RUVONJf1UedXKvzCw78TVnzTz6x8GDB9GlSxd07twZK1euBFBW5L/8n+QlS5bAzc0NvXr1wuDBg3H16tVK69i0aRNmzZql9tjMrK1QXFSEAoWywvT06wkoUCjh1MwfHkaNy8TEBLt27cKcOXOQl5dXab4QQm3bakgtZ11jaGwM3zWfQt/AABtnvYe829k1v0lLKTIyoa+vD3Mr3q1Cuily7wHkpmfg+SkTpQ6Fmpl33nlHdbcWAHz22WdYs2YNXFxckJOTAz8/PwCAn58fcnJyEBMTgzVr1uCzzz4DAHTt2hXjxo1D9+7dMXz4cKxfvx76+jrR3aRxevr68Fm9Al0G9MfOj1bg3C+HG23bGRkZKC0thRACQUFB6Nu3/heAlBnspG0MOvGtKbp3H3m3s9lJS1qNDzZpHP3HeGPkvJmIOhiOXcs/1/j26nPS/6iTe2VGebkDdtKS9jO3sUL+7exK3wMhBBLORaNTE394GGkPQ0ND7Nq1C1u3bsWePXsAAOnp6ao7Guzs7JCRkQEASElJgYODg+q97du3R0pKSrXTm7vRH8yHQ7fHsHXxUp16SFhVctPLfgfMbXkSSbqppKgIv32/Dc5PeMDJo6fU4VAzYW9vjxEjRmDDhg2qaYMHD8ZPP5WVk3u4pFD5XYc//fQTPD09VdNDQ0NRWFiImzdv4tq1aw3qEGxKBvmMR/dnB2L3ytWI3HugUbf94J2fL7/8MmJiYuq9LkVGJiyYXzVOJzppgbLRtOykJW1WXFyMefPmoXv37ujfvz9mzJiBrl27VqhxevTo0Uo1TmNiYirUOLW0tIS/vz/69euHvn37wt/f/5G1Y5oT1yf7YPSHC3D5xClsX7IMorRU7dt48KTfyMioxpP+urqTq/inng87aUn7mVlbVapHW+7GuWjYdOwAM6vWjRwVNUfBwcGIjY3FmjVrVNPCwsLg61tWu9HX1xd79+5VTS+/wNmvXz8oFAqkpaXh8OHDGDp0KORyOeRyOYYOHYrDhxtvNIs2evLVl9F31Is4EhiM2BOnpA6nwRTpZXersC4t6bLTu/YiPzsHnhxNS43kyy+/xIIFC1D6z7mVlZUVcnNzUVJSAqDiHYQP3l1YUlIChUIBKyurWt912NzKCbV17Qyv2W/jwq+/4dT2uj9DpS62bduGiIgIGBsbIykpCW+++SZWrVqFCxcuIDo6Gs899xzefffdeq9fkZ7Ju0Ebge500t5KY01a0mp8sIlmyVq2wJiPFiErMQmb5r6PkuJijWznwZN+KyurGk/660OZmcVOWtIJ5tZWlerRlrtxrqwurRNH05KGDRgwAD4+Phg8eDCioqIQFRUFLy8vBAQEYMiQIYiLi8Pzzz+PgIAAAMCBAwdw48YNuLm5ISgoCNOnTwcA5OTkYPny5aqTw2XLliEnJ0fKjyYpR3c3jFr8Li6fOIUjgcFSh6MW5bV0eTsm6bLCu/dwYssOdB34JOy7ukodDjVxI0aMQEZGBs6dO9co22tW5YRkMrwW8DEKchX4aWmAxrc3YcIEtGvXDufOnYODgwM2btwIHx8f9OzZE+7u7vD29q73+StQVravhYkJjFu1UmPU9DBDqQOorZzUNHR9+impwyCqlcZ4sMnkyZMxZcoUAGgWVyGHTvWDVft2WDdpOorv31fLOrdt24Znn30W1tbWSEpKgr+/PwICArBz5074+fnB3Ny8wkn/Cy+8gGvXrqGgoACTJk2q93bzMm/DglchSQeYWVvh75jLVc5LuXwVhXfvwam3Oy6EH2/kyKg5OXXqFPT09Kqc9/zzz1c5febMmejXrx/69OlTYXpISAhCQkLUHqOuMbNqDd/VK5Gblo5ti5eqtZ6vlO7kKlB0/z47aUnnnQr9Cc9Neg2eb/li87z3pQ6HmrABAwbgpZdewgsvvIAWLVrA3Nwca9euhVwuh4GBAUpKSircQfjg3YUGBgawsLDA7du3WVKoCl6z30ZbF2cETXsXd3IVUofTYIryC6G2NshISJQ4mqZLZ0bS5qamQ9ayBUwseds3abfGerBJc7oK2a6LC57xGYc/f9qLG2ei1Lbe8quNMplMdbUxOzsbzz//PFxdXREXF1dhlNXMmTPRuXNn9OzZE2fPnq33dhWZWTCz5kNNSLvpGxjAtLUl8qopd1BSXIzECzHoxIeHEekUfUMDvPHfT9DS3Azfz1mEu8rK/6voMkVGJizsWO6AdNu9/Dv4PfQn9Hj+WbRxcpQ6HGrClixZAgcHBzg5OWHcuHE4duwYXn/9dRw/fhxjxowBULmkUPldh2PGjMGxY8dU08eNGweZTIaOHTvCxcUFf/31lzQfSgt07vs4nvWdgFOhu3Dl9z+lDkctyksK8UKoZulMJ21OatlIRNalJW3GB5uon56+Pl79eBEKFEr8smad1OGohTKTT8Yk7WdiKYe+vj6U1ZQ7AICEc9Fo16UzWpiaNGJkRNQQL86dCecnPLDz40+RGndd6nDUTpGRyRxLTcLJLTtQdO8+PN/ylToUaoYWLlyIuXPnIj4+HlZWVggOLiuLExwcDCsrK7i5uWHu3Lmq561cvnwZO3fuxOXLl3Ho0CHMmDFDVeO2uWlhZorxKz5ERkIi9q3+Wupw1KZ8JK05c6xG6U4n7a1/OmlZl5a0GB9son4Dxo1GB7du+DlgTZMZ7aPMzEIrC3MYymRSh0JULXObstHe1dWkBYAbZ89D38AAHXv1aKywiKgBPLyGYNAb43Biyw5EHTgidTgaoUxnJy01DXdyFfjzp5/h8cIQtG7fTupwqBn43//+h5EjRwIAEhIS0K9fP7i4uGDs2LEoLCwEANy/fx9jx45FTEwM+vXrh4SEBNX7V65cic6dO+Oxxx7DoUOHJPkM2mD0+/NhZmWFbYuXouieesr0aQNlZtndu8yxmqUznbTZtziSlrQbH2yifnI7W7zwzlTE/h6B84d+lToctSlPcOWdYETaqLwkx6NG0iZeiEFJUTGcWPKASOu1dXXG2KVLcP1sFPZ90XRG9jxMkcG7Vajp+O37bRClpXhu0utSh0JEtdBr+PPoPWIYjny3EUmXYqUOR60K797DXWUen62iYTrz4LC7SiXu3bnDTlrSWnywifq9smQeAD3s/uRzqUNRK2VGeSetDbJTUiWOhqhq5v88kLC6mrRA2T9rybFX0am3e2OFRUT10MLMFBPXBOCuMg9b5n2A0uISqUPSmNz0DBi1MEYrC3MUKJRSh0PUIMrMLPz18370HTUC4d+FQPnP7cZEpH0sbG0w+sP3cDP6Io5t2Cx1OBqhyMhkuQMN05mRtEBZyQOWOyBqHno8/yy6P/c0jqzf0OQ6MpVZHElL2s/MujUAIO929iOXSzgXjQ49urF8B5GW0tPTw2uffgx5W1tsmrekxu+0pgUHB8Pd3R0XL15UTfP390dycnKFO5Hq68GnTxM1Bcc3boGevj6e9R0vdShEVA09PT2M++RDGBgaYtviZSgtaZoXQ1n3XfN0q5M2NY0jaYmagRamJnh58VykxMbhxA87pA5H7f4dSctbRUh7mdtYo0ChRPE/Nciqc+PceRjKZHBw69pIkRFRXQx5exK6DRqAnwPWIDE6Rupw8P333yM+Pr7S9DVr1sDDwwMeHh44ePBgvdev5NOnqYnJTklF1IFw9B8zCiZyC6nDIaIqDHxtLFz798HeVWtxOylZ6nA0RpGRyYugGqZTnbS5qekcSfuA4OBgpKenVxiJ8LC1a9ciPj4e3bp1g4eHBwDA3d0df/zxB2JiYhAdHY2xY8c2VshEtfLCO9NgZtUaOz/+tElehbyTq0BxURHr+ZBWM7Nq/ch6tOUSzkUDADo1sbq0zLHUFHR9+ikMmzEZf/38CyJ27pE6HADAyZMnUVxcrLH156ZnAGAnLTUtRzdsglELYzz9xn+kDqXBmF+pqbF1dsKIOdMQc/wETu8KkzocjVJkZMLMqjX09HWqK1Gn6NSezUlNg4ncArKWLaUORSt8//33GD58eLXzvby84OLiAhcXFyQmJiIwMBAAUFBQAB8fH7i5uWH48OH48ssvYWHBq7KkHTq698CAcaNxctuPSL58RepwNEaZmQUza3bSkvYyt7F+ZD3acgUKJdKu3YDT402rLi1zLOm6FqYmGLtsCVJi47Drk/9KHU6NZs6ciejoaAQHB0Mul1e5zOTJk1UPVrWuJocqs7JQWloKC9s2mgyXqFFlJCTi4q+/YeC4MWhhaqKarqevD9PWlrDt1BGdHu+FHp6D0P/VUfCc7IuXFrwDt8HPSBh11ZhfqSkxMDTEa59+jHv5d/DjxwFSh6NxivRMGBgawsyqtdShNFk68+AwoKwmLQBYtrND+vUEiaOR3smTJ+Ho6FjtfG9vb2zeXFaw+s6dO5DL5bCzs6twi1lqaioyMjJgY2MDhUKh8ZiJHsXA0BBj/BciJzUNh77+P6nD0ShlZhZH0hKGDRuGtWvXwsDAABs2bMBnn31WYb6vry8+//xzpKSkAAC++eYbVT3HwMBAmJubo6SkBCtWrMDOnTvVGpuZdWv8feFSrZa9cfY8eo8YBj19fYjSUrXGIRXmWNJ1Q95+E6atLRE8Yx6K79+XOpxHCgwMxPLlyyGEwPLly7F69Wr4+flVWi4oKAhBQUEAgMjIyCrXVVpcgvzsHI6kpSbnaNAmuA8djHe2BQMATCzlaGluBv1qRrQVFxbi6QmvImjau4iLqPr7IgXmV2pKhs+cDPuurgie+R7ys3OkDkfjlJn/1Q8vIAAAIABJREFUlu0r/5nUS7dG0pZ30ra1lTgS3WBvb4+kpCTV6+TkZNjb21dYpk+fPpDJZLh+/Xpjh0dUybOTXkNbF2fsXrEahXfvSh2ORikzb8PMmg8Oa8709fWxbt06eHl5oVu3bhg/fjy6dq1c13XHjh2qOo3BwWUnZo0xmsTc2hrKWoykBYAb56LRwtQE7bp0VmsM2ow5lrRZGydHPP3aWJzeHYbky1elDqdGGRkZKC0thRACQUFB6Nu3b4PWx5p5BJRdCL1y5Qri4+OxcOHCSvN9fX2RkZGhemDdgxcGfHx8EBcXh7i4OPj4+DRm2NVKuRKH4xt/gCI9EylX4hB1MBzh327E7pWrsWX+B/j2rVn47+g3sNTzJSx8fBA+HDgc6Tdu4vVVy9Havq3U4dca8yvpCqfe7nh20uuI+OlnXP7f71KH0ygU6Xw4p6bp1Eja7NTyTlrdSTLazM7ODlu2bIGvry+EEFUuM3nyZEyZMgUAqr2tjEgdrDu0x5C3JyH6yLFmkeSUmVno3Ke31GGQhPr27Ytr164hIaHszpDQ0FB4e3sjNja2xvdqejSJsUkryFq2QF4tatICQMLZ8wDK6tKmxMapJQZdxxxLUhq1cA4K797Fwa++kzqUWrGzs0NaWtn/+S+//DJiYhr2gDNFegZat+P5QnNWfiF0yJAhSE5ORmRkJMLCwirl2B07dmDWrFkVpllaWsLf3x9PPPEEhBA4e/YswsLCkJub25gfoUq/rFlXp+VD3lmEOaHBmPhlAL5+YwqK7mn3qPraqE1+BZhjSbOMWhhj/IqPcDspBWGrvpI6nEajyODDOTWtViNpG3IVsri4WDV97969DQo2LzMLxUVFfHhYLaWkpMDBwUH1un379qpbZs3MzLB//368//77OH36dLXrCAoKQp8+fdCnTx9kZXE4O2nOmI8Wovh+IfZ8+oXUoTQKZWYWWlmYw9DYWOpQSCK1GSkCAKNHj0Z0dDR+/PFHtG/fvtL8mkaT1KaG48PMbcqWU9by735uegayU1Lh1Ltp1aV9FOZY0lbdn3saXQb0x6F1QbiTI32n0sO2bduGxx57DF26dEFSUhLefPNNrFq1ChcuXEB0dDSee+45vPvuuw3ahiI9kzVpm7kHL4QWFRWpLoTWxrBhwxAeHo6cnBzk5uYiPDz8kTVUtdntpGRsXeiPtq6d8ar/IqnDqRV15FeAOZY0a8B/RsOqfTvs9F/Z5O8AfVB+dg5KiovZSatBNXbSNuR2TAC4e/euanptE2N1hBDITUtnJ20thYWFqW7PMTExgUKhQFpaGoyMjLBnzx5s3rwZu3btkjhKIuCJl16AS78nsP/LwFqP3NN1qno+1iy6TtXbt28fOnbsCHd3d4SHh2PTpk0V5pePJpk0aVK1o0nqc5JSXoojLyu71rHeOHcenR7vVevldR1zLGkjQ5kM3gveQWr8dfyxc7fU4VRpwoQJuHDhAmQyGRwcHLBx40b4+PigZ8+ecHd3h7e3t2pUbX0pMjJhIrfghdBmrCEXQmv7XqB+F0Ib25Xf/8Shb/4Pj784HE+//h+pw6kR8ytpO1nLlnjuzddx5fc/ceOfu8maC1Fairys2yx3oEE1dtI25CqkJuSmpsOyLTtpgbKRCBH/z96dx0VVrw8c/7Ary8gqKJorqIQLIeCWu6CVoliKVGp51a5xbbF+mXfhpjfTNtu0uojbzV1TMUXErdzQURFEULBQQdmXGUQFgfn9gYySICADZ4b5vl8vXsmZc+Y8g3a+nO95vs9z8mSVTITZs2cze/ZsAPbu3csff/zBlStX6NChA3PmzAFg0qRJDB48mOnTp6uznHv31p/sJ0G7WNhYM+79uaTExBG9bafU4TQZZVZl0XUxwOmrx2WKVMrLy6OkpASAlStX4unpqX6tPtkk9SW7P0lbn4YAKedisbKzxb5D+9p31gFijBV00ZBpU7Br58yupV9RXlomdTiSUVYux3TQzkkzQTvU9iC0LnQlW/PQynXEHTjC2HnBdJG43JYYXwVdNyjoRSxtbYhcESp1KJJQZOWoV90JmldrTdrqniT6+Pg8st/EiRMZPHgwSUlJvPPOO6SlpQHQokUL5HI5paWlLFmypNqSB/WpF5OfnoFLP6/awtYLQUFBte4THBwMVHTAPXv2LADr169n/fr1jRqbINTV8NdfpYWlBVs/WvLYulLNTeUycpmDaB6mr+RyOS4uLnTs2JEbN24QGBj4yHX94TqN48aNU9fSa+xskspMWmV9Mmkfqkubcy21lr21nxhjBV1j7diaEX+ZRuz+QySfOiN1OJIqeKixSW7ajVr2Fpqjuj4IrbRy5Uo+/fRT9bFDhw6tcuyRI0caNd7GplKp2PSPRby1IYypn/+HZZNfoyAjU5JYxPgq6DIzC3OGTn+ZhN+Oc/1CgtThSEKRlU3rjk9JHUazVaeatLV53FPIDh064OXlRVBQEF999RWdO3d+5Pj6PIHMv5mBzMEeI2Od6nkmCEI1zCzM8Zk4jtj9h8j8PUXqcNRcXV2JiYnBzc2NmJgYFAoFb731FiEhIaSlpamf3o8ZM+aJz/Egk1Y8hdRXZWVlBAcHExkZSWJiIlu2bCEhIYGPPvqIsWPHAjB37lzi4+M5f/48c+fOZfr06UDjZ5PI7G0pLSnhjlJZ52OyUq5xKy+fzp4iq0XQrLCwMDIzM7lw4YJ62+Oux/Pnzyc5ORl3d3d8fX3V22vrsaDrXnj3TQwNDdn9xbdShyI5RWYWgKhLq8cefhBqYmJCYGAg4eHhVfZxcnqwOvPhB6GRkZH4+vpibW2NtbU1vr6+REZGNmn8jaG46Dar3/oAY1NTpn/1iSgHIghPYFDQS1hYtyJy+UqpQ5GMMitb1KRtRLVO0jZ0OebNmzcBSElJ4ciRI3h4eDQo4PybGRgaGooaGILQDPhMHEdLK0t+XbtB6lCqSEpKwsPDg4SEBDw9Pbl9+zY7duwAYNmyZeo62xEREU98jqICBaX37tGqtZik1WcRERF069aNrl27snjxYqBi8mn37t0ALFiwAHd3d/r06cPw4cO5fPkyUJFNYmpqqv636OHhQWxsrMbisrK3R/kE9aH/OBerV83DhKaxZs2aapv2VHc97tGjB4GBgTz99NMkJSWxYsUKDA0N69xjQVd19uyDx3O+HFr1P/JvNqyea3Mguk8LDXkQmp+fz6JFi9S1ZhcuXEh+fr6En0Zzsq9eZ8OH/6b90z148Z/vSx2OIOiUFpYWDJ0eRPzh30hLuCR1OJJRZGXTUmaFacsWUofSLNU6SduQp5DW1taYmpoCYGdnx8CBA0lIaFhKeH56xS+eoi6tIOg2Q2MjBr8ymSvyc6QlXJY6nBqNGDGC33//nevXr2v8vZXZOVhpaZMJQb/J7G0pzK7/JG3KuVjs27dDJiZGBA06evRolWXJj+Pv78+mTZsoKSmhpKSEK1eu4O3trXU9FjTJ0MiICR++S97NdA6v/knqcLRCcdFt7hYViUlaPfekD0IBVq9ejYuLCy4uLqxZs0aK8BvNxSPHiFyxEi//5xkYOFHqcASJmZmZcerUKc6fP098fDz//ve/AejYsSPR0dEkJyezadMmTExMADA1NWXTpk24u7sTHR1Nhw4d1O9VuZLl0qVLVVayNBeDX5mMuUzG/hVhUociKcX9kkLi9/3GUeskbUOeQvbo0YMzZ85w/vx5Dh8+zJIlS9QTuE8q7352gE3bNg16H0EQpNV71HBs2jjx69qNUofyWIGBgWzc+CDG4OBgYmNjCQsLw9rautpj6trpV5mdIzJpBa1k5WBPYe4TZNKq69KKbFqh8VV3Pa6pK3t9urWDbnRsr+QzcRxtu7mw+/NvuXe3WOpwtIYiM1usvBOEGkT9sIqLR47h/39vixUweq64uJjhw4fTp08f+vTpw+jRo/Hx8WHp0qUsW7YMFxcX8vPzmTFjBgAzZswgPz+f+Ph4li1bxtKlS4GqK1lGjx6tXsnSXLSUWTH41UDiDhzhxqUkqcORVGVjYdGcs3HU6f+aJ30KefLkSXr16kWfPn3o1asXq1atanDAlQXObdqKTFpBu4iaefUzZNoUslKukfjbcalDqZGBgQHjxo1j69atAHz//fd06dKFPn36kJ6ezhdffFHtcXWts63MzhU1aQWtZGVni/IJMmlvXk7mblERnT37NEJUgvBAXa/HT0pXOrabt5Ix5m+zST51hriow1KHo1UUWWKSVhBqolKp2LDgI/Ju3GTqFx+LjDg9V1RUBFQ0pjUxMUGlUjF8+HC2bdsGwNq1axk/fjxQsWKlsgfRtm3bGDFihHp75UqWq1evqleyNBeDXw2kpcyK/d/rby3aSuqSQmKMbRQ6132r7N49lNk5otyBoHXWrFnDd999x7p166psX7Zs2SM3jw8/aZTL5axYsQJXV1cAli9fzqhRo0hLS0MulxMeHt7gDHRt07mvB+2f7sHWj5agUqmkDqdGrVq14ty5c2RlVTQgqfwvVNzA//LLLw16f2V2Dl29nmnQewiCphkaG2FlZ0vhE9SkLS8r41psPD2eHcDQ6S9jYGiAoaERBoYGGNyvC2pgaIiBwYPvC3PzOLphC+WlZY3waYTmqqbr8eN6KdTWY0EXjQ6eRQtLC3Yu/UrqULSOIjObrt5ijBWEmtwtvMXqtz5g7oaVTP9yMctfm0PZvXtShyVIwNDQkLNnz9K1a1eWL1/O77//TkFBAWVlFb+bPbz65OGVKWVlZSgUCuzs7HB2diY6Olr9njWtWJk5cyazZs0C0PqVKpXMW8kY/MpkzkceJD3pd6nDkVxluQNRUqhx6NwkLVQ0DxOZtIK2OXr0aJWaPI/z55p56enp6ieNlTXzAHXNvOY2STt06hQKc/M4s3uf1KE8lq2tLR9//LH6eycnJzIyKkquTJgwgfj4+Aa9vzIrB/NWMozNzCgtFktUBe1gaWsL8ESNw6Ci1l3AgnmMnRdc7evlZWWoylWoVOWoylWYtDDDsXNHtvz7kyeOWdA/NV2Pw8PD2bBhA19++SWmpqa4uLhw+vRpDAwM1D0Wbty4QWBgIEFBQVJ+hAZr282F/i+N5/im7WQki5vGP1NkZiGzt8fA0BBVebnU4QiCVsr84yqb/r6I6V8tYfz8d9i+6FOpQxIkUF5ejoeHB61atWLHjh1079690c4VGhpKaGgoUNH/SBcMmRaEqXlL9n+v37VoKxXfvs3dW0UiA7+R6OYkbXoGzt1dpQ5DEOokODiYqVOncubMGebNm0dBQcFjnzT+uWaej49Pte+ri08hARw6PsXTw54lcsVKrZ6YNDc3RyaT8fPPP6u3ffrpp/Tp0weVSsXVq1eZPXt2g86hvL+EVmZvS96N9Aa9lyBoiszeDuCJMmkBjm/chnxnRVZjebkKVVkZKpUKVXl5tZnzo4NnMWr2a+TeuMnB0LVPHrjQbG3YsIGhQ4dib29PamoqISEhDB06tNrrcUJCgrp/grOzMxMmTKD8/gRdZY8FIyMjVq1a1eBmtlIb/+E73FEWErlCLL2sjiIrGyMTYyxtbZ74eiYI+uDCwV85smYDQ6cHcfrn3aRebF7JIULdKRQKDh8+TP/+/bG2tsbIyIiysrIqq08eXrFiZGREq1atyM3NfexKFl1mYd2KZ19+idh9B8j8PUXqcGoVFhZG7969uXDhAj179gTAxsaGzZs307FjR65evcqkSZMoKCho0HkUWdkik7aR6GQl5/ybGVi3ccTAwEDqUAThsRqzZp6u1Mv7syFTp3CvuJgTm3+ufWcJ3b59m/Pnz6NUKtXbpk6dSq9evejduzf+/v7qLK4npcy6P0nrIAY4QXtY3Z+kfZKatJVK7tyl5M5dSouLKSstrcieraG0yb7v/suZ3RE8N/cNnnm++XUCFhouKCiItm3bYmpqSvv27Vm1atVjr8eLFy+ma9euxMfHs2/fgxUb1fVY0FV9Ro+ki6cHe7/5gTvKQqnD0UrqmnniJlIQarX/hzBu5eXz/DtzpA5FaGL29va0atUKgBYtWjBq1CgSExM5fPgwL774IgDTpk1j165dQMWKlWnTpgHw4osvcujQIfX2wMBATE1N6dixo3oli64b+trLmJiZsf+HhvdXagpr1qwhOTm5yrb58+dz8OBBXF1dOXjwIPPnz2/weUTd98ajm5O06RmYmJlhaWsjdSiC8FhZWVmU388eCw0NVZc0qOlJY3N9AlnJwsaavmPHcGZ3BLfy8qUOR3KK+50xZa11JxNaaP5kDg3LpH0SW/61mCunzzJ50T/o0tejyc4rCLrItGULxr73N1ITLnHq591Sh6O11DXzxE2kINSquOg2UT+uwsWnL90H9ZM6HKEJtWnThsOHDxMbG4tcLicqKoo9e/bwwQcf8O6775KcnIydnR1hYRVL/cPCwrCzs8Pd3Z13331XPeH38EqWffv28eabb6pXsugqSzsbBga+yLm9+8lKuSZ1OHVy9OhRSktLq2x7uNnbw03gGkKZlSMaYDcSnZykzbtZkS0h6tIK2s7J6cG/0T/XzKt80vhwzTy5XK6umWdiYkJgYCDh4eFSha9xAycHYNLCjN/WbZI6FK1QWDlJez9zURC0QWUmbWFuXpOds6y0lDXvfEjO9TSmf70Ex84dm+zcgqBrhv9lKtaOrdn5yTJRa/UxFJkVzeVEJq0g1M3JLTvJuZ7G8++8iYGhTk4TCE/gwoULPPPMM/Tu3ZuePXuyaNEiAFJSUvDx8cHFxYVJkyZRUlICQHFxMZMmTSI+Ph4fHx91LxV4sJKle/fuVVay6Kphr72CiZkpUT+uljqUBnF0dFSvOMrIyMDR0bHa/WbOnIlcLkcul9daTlGRlU0rBwexur0R6OTVNz+9cpK2jcSRCMIDGzZs4OTJk3Tr1o3U1FRef/11Pv30U+Li4oiNjWXYsGG88847QNUnja6uruonjWVlZeqaeYmJiep9mgNjMzMGBE7k4pFjOvMksrEVFSgovXePViKTVtAiMns7ivILKPvTU/jGdkdZyMo571Jaco+/rPgSKzvbJj2/IOiCFpYWDH4lkHN793P1fJzU4Wi1W3n5lN0rpZVja6lDEQSdUFZaSsQ3P9DWtSueL4yWOhxBkJSVvR0DJ0/k7C/7yLmWWvsBOqSmEmT1KadYWffdwta6MULUazrZOKygcpK2jcikFbRHdV2iV62quXbN4sWLWbx4MXK5/JGaeREREY0So5Q8X/DDys6WX9dukDoUraLMzhE1aQWtYmVvh1KiJjv5NzMIe/M95qxewYzln7PitTcpuXNHklgEQRv1HTcGM/OWYiytA5VKhTInR2TSCkI9xO4/xJD4BEYHz+T8vgOU3s+eFAR9M/z1VzE0NiLqB93OogXIzMzEycmJjIwMnJycyMrKavB7qksKtXbgVq4oY6hJOplJe/dWEXeUhaLcgSDoCAMDA4ZMnUJqwiV+PxMjdThapWKSVpQ7ELSHzMFO0k7oaQmX+N/7/8S5uyuvfLoQQyMjyWIRBG3Tf1IA1+IukpZwWepQdIJobCII9aNSqfjly+XYtHFiUNBLUocjCJKQtXag/6TxnNm1l9w03e8P83Czt4ebwDXEg+acYrWKpunkJC1UlDywcaq+loYgCNql+6D+OHbuyK9rN0oditYRRdcFbWNlJ10mbaXE346z45MveXroIMbPf0fSWARBW3Tp64FTl06c3PKz1KHoDEVmtsikFYR6+l1+jsSjJxgxcyotZTKpwxGEJjfiL1MxNDQi6r+6l0W7YcMGunfvXqUE45IlSxg1ahRJSUmMHDmSJUuWNPg8yuyKSVrRAFvzdHeS9maG3mfShoWFkZmZyYULF2rc5+uvvyY5ORk3Nzc8PB50zJ46dSpJSUkkJSUxderUpghX0GNDpwdRkJFJ7P6DUoeidZQ5uWKSVs/5+flx6dIlkpOT+eCDDx55fdq0aWRlZRETE0NMTAwzZsxQv9YY13KZgx2F2dJO0gKc2Pwzh1f9xMDAiQyd9mg5mcYmxlhB2wyYHMBthZKYfWIsrStFpsikFYQnseerFbSwtGTEXxpnDKvrGOvu7k5sbKwYY4UmY+3Ymn4Tx3F65y/k329Yr0uCgoKIi4vD1NSU9u3bs2rVKvLy8hg5ciSurq6MGjWK/PyGlycozMmjvKxMPAhtBLo7SZueofc1adesWcPo0TUXdR8zZgwuLi64uLhw7do1vv/+ewBsbGwICQnBx8cHb29vQkJCsLYWBZ+FxuHcw5Wu3p4c/WkL5aVlUoejdZRZOZi3kmFsZiZ1KIIEDA0NWb58OWPGjMHNzY0pU6bQo0ePR/bbvHkzHh4eeHh4EBYWBjTOtbyFlSUmZmYoc6WfpIWKm8Tz+w4w9r2/0ct3eJOeW4yxgjaxsrej54ihyHftobS4WOpwdIYiK5sWFhaYWZhLHYog6JT0pN85uzuCQUEvYt0Iq1frOsbGx8cza9YsMcYKTWbEzGlgYMCB/66ROhStVl5WRmFunpikbQQ62TgMKjJpW8qsaGFpwd1bRVKHI4mjR4/SoUOHGl/39/dn3bp1ABQVFWFtbY2TkxNDhw4lKipK/QQlKiqK0aNHs2nTpjqf2///3qZtd5eGfQA9dfNSMrs+/UrqMJrM0GlB3L1VRPT2hte+aY7US0Uc7MhLuylxNEJT8/b25sqVK6SkpACwadMm/P39SUxMrPVYPz+/Bl/L/0xmX1EfWRsyaaGiNt7Gvy+iVWsHghb/C2VWTpN1tBdjrG5qrmOsT8BYjEyMObFlh9ShNFhYWBi9e/fmwoUL9OzZE6iYeNm8eTMdO3bk6tWrTJo0iYKCggaf60HNPAeyUq41+P0EQZ/s+y6UPqNHMjp4Fpv+sUij713XMXbevHmcOnVKY2OsGF+fXHMdXx9m7eSId8BYTm0PpyAjU+pwtJ4iS5QUagw6m0mbl16Req7vJQ8ex9nZmdTUVPX3aWlpODs717i9OjNnzkQulyOXy7G3F0uyhfqxdmxNb78RRG/fpbcPU2qjvD8ZJhP/f+mlul6PJ06cSGxsLFu3bqVdu3b1OrY+13Gr+5O0UtekfVhpSQmr5v4fBemZvP7NUq1ZRSPGWKGpGBga0u9Ff5JOnibnWmrtB2i5NWvWkJycXGXb/PnzOXjwIK6urhw8eJD58+dr5FyKzIoO1q0cRWMTQaivgoxMjq3fiufY0bRx7dqk5xZjrCCF/pMmYGhoyOFVP0kdik5QiuacjUJnM2kLKidp27QhPel3iaNpvkJDQwkNDQVALpertzf3p2iCZgx6eRIAR3/aInEk2kuRnQOIoutCzXbv3s3GjRspKSlh1qxZrF27lhEjRtT5+Jqu49WprI9cqEWTtAC3FUpC58zj3S1rmLzo7/w4cy4qlUrqsBpMjLFCXbgNHoBNGyd2LW0e/y6OHj1KaWkphoYPckX8/f0ZOnQoAGvXruXIkSMamahVZFZk0lqLm0hBeCIHw9bhM3Ecz78zh5V/fVfqcOqlujFWjK9CTYxMTPAJGEvCr8fIT9e9WrRSUGTl0OmZPlKH0ezobCZtZRFnkUlbsxs3btC+fXv19+3atePGjRs1bhcETTKzMKffi/7E7T8klos8RmHlJO39DEZBv9TlepyXl0dJSQkAK1euxNPTs87H1peVvS2gXZm0lXJT09j16de4+PRl4JSJUocjxlihyQyYPBFFZjYXjxyTOpRG4+joSEZGxe/2GRkZODpWXwOzvplxDx6EiklaQXgSd5SFHAxdS49B/enq7dlk5xVjrNDUeo0ahpWdLcc3/Sx1KDpDkZWNhXUr0VtFw3R2kvZWXj73iouxaYRC5s1FeHi4uuOlhYUFCoWCjIwMIiMj8fX1xdraGmtra3x9fYmMjJQ4WqG58Zk4jpZWlhxZu1HqULRaUYGC0nv3aCUyafWSXC7HxcWFjh07YmJiQmBgIOHh4VX2cXJ68DBy3Lhx6nq1jXEtl9nbc+9uMXcLbzXofRrL6R27SfjtOM+//Sb2HdrXfkAjEmOs0BTs2jnTfVA/orftpLxMf5pv1pQpHxoaipeXF15eXuTk5NT6PqXFxRTlF4iaeYLQAMc2biPvZjovvPsmBgYGTXLOh8dYHx8fMcYKjW7g5ACyr14nOfrxq86EB5SVdd8dxH2sJulsuQOVSkVBeqZeZ9Ju2LCBoUOHYm9vT2pqKiEhIZiYmADw448/snfvXp577jmuXLlCmzZtGDx4MAD5+fksWrRIvexj4cKF6uLrgqAJhkZGPPvyJH4/E0NawiWpw9F6yqwcZA7iBlIflZWVERwcTGRkJEZGRqxatYqEhAQ++ugjzpw5w+7du5k7dy7jxo2jtLSUvLw8pk+fDjTOtdzK3lYrs2gftvXfS3h/x3qmfPxPlk/7a6NNXIkxVtAG/V8aT1lpKdE/75Y6lEaVmZmJk5MTGRkZODk5kZWVpbH3VmRlYy1q0grCEystKWHfd6EELf4Xvf1GcH7fgQa/Z13H2GHDhhEaGsprr70GiDFWaBxtXLvS6Zne7Pr062ZRTqupqJtzOjqQmyYy2jVFZydpAfLTM7SmgYgUgoKCat0nODgYqMjWOnv2rHr76tWrWb16daPFJui3XqOGYdu2DTs/+VLqUHSCMicHmYMod6CvIiIiiIiIqLItJCRE/ecFCxawYMGCao/V9LVc5mCvdfVo/0yZncP2/3zGq58tYuj0IA6F/a9RziPGWEFqxqameE94gfhDv6mzVZqr8PBwpk2bxtKlS5k2bRq7du3S2HsrsrKRiZq0gtAg5/ZEMmRqIGPmzubCgSOUlZY26P3qOsb6+Pjg5eVVZbsYYwVNGzA5gJI7d5Hv2iN1KDqlsu67WK2iWTpb7gAq6tLqcyatIGirQUEvkX0tlYRfj0sdik6oyKQVy0QE6VnZaX8mLcD5fQc4H3kQvzdn0sa1i9ThCEKj6O07HAvftTqzAAAgAElEQVQba05u2SF1KBq1YcMGunfvTrdu3UhNTeX1119nyZIljBo1iqSkJEaOHMmSJUs0dj5FZra4gRSEBlKVl7Nn2Qrs27ej/6QJUocjCBrTwtICzxf8iImI4o6yUOpwdIo6k1aMsRql05O0eekZyBzsMTY1lToUQRDua9vNhU4evTix+WedXi6SkpKCm5sbMTEx6iVVNjY27N+/n6SkJPbv34+1tbVGzqXMyUUmatIKWkAXMmkr/fyfz7itUDLl439hZKzTC4OEOggLCyMzM5MLFy6otz3umvz111/j7u5ObGwsHh4e6u1Tp04lKSmJpKQkdb1DbTVgcgBZKddIPnVG6lA0KigoiLi4OExNTWnfvj2rVq0iLy+PkSNH4urqyqhRozS6fFmRmYWlrY24TghCA10+cYqkaDm+b7xOC0sLqcMRBI3wHDsGM3NzTmzeLnUoOufurSKKb98R97EaptOTtAXpFR3jrZ1EnSlB0BYDAyc2m+UiSUlJeHh4qJdZzZ8/n4MHD+Lq6srBgweZP3++Rs6jzMrBXCYTnTEFSRmZmGBh3UonMmmhouneto+W4NzdlVFvvC51OEIjW7NmDaNHj66yraZr8pgxY3BxcSE+Pp5Zs2bx/fffAxWTuiEhIfj4+ODt7U1ISIjGHrZpWhvXrnTs05OTW3dKHYrOU2RlY2hoKFas6CE/Pz8uXbpEcnIyH3zwQY37BQQEoFKp8PT0BMDY2Jg1a9YQFxdHQkKCxn7faw72LFuOhY01w157RepQBA1p164dhw4d4uLFi8THxzN37lyg+T8IrTRgcgDX4i6SlnBZ6lB0kjJLrFbRNJ2epM2/mQ6ATds2EkciCE+W5ZOcnIybm5vOD26VWlhZ8szzfpzbE9ksl4v4+/uzdu1aANauXcv48eM18r7K7IqlIqIurSAlKztbAAqza++Yri0uHjnG6Z2/MHzGq7R3d5M6HKERHT16lLy8vCrbarom+/v7s27dOgBOnTqFtbU1Tk5O+Pn5ERUVRX5+PgUFBURFRT0y8astRH08zRHLMfWToaEhy5cvZ8yYMbi5uTFlyhR69OjxyH6Wlpa89dZbREdHq7e99NJLmJmZ0atXLzw9PZk9ezYdOnRoyvC1VlrCZc7t3c/gVwOxsNHOh1xC/ZSWljJv3jyefvpp+vXrx5tvvkmPHj2a9YPQSl36euDUpRMnNv8sdSg6SyEmaTVOtydp0zMAsHFylDgSQXiyLB8XFxeuXbum04Pbw7z8n8e0ZQuOb9L95SIqlQoXFxfOnDnDzJkzAXB0dCQjo+K6k5GRgaNj9deemTNnIpfLkcvl2NvXnrmjzK7IXJTVYV9BaCxW9hUPCZQ5ebXsqV12Lf0KZXYOUz7+p8hG1zM1XZOdnZ1JTU1V75eWloazs3ON26tT3+u4JplZmOP5gh/n9x1olg88m1rlJK1oHqZfvL29uXLlCikpKdy7d49Nmzbh7+//yH6LFi1i6dKl3L17V71NpVJhYWGBkZERLVu2pKSkBKVS2ZTha7UDP67GtGULBkwOkDoUQQMyMjKIiYkB4NatWyQmJuLs7NysH4RWGhA4kaICBecjD0odis5SZGUjE5O0GqXTk7QFmVmUl5WJ5mGCVnjSLJ+ioiKdHtwqGRgYMHByAFfPX+Dm5WSpw2mwQYMGkZiYyJgxY3jzzTd59tlnH9mnppq7oaGheHl54eXlRU5O7VmJivuZi6KejyAlmf39TNo6/JvVJndvFbH5X4tx7NyR5+bOljocQUKarINe3+u4JvVV18cTmT2aUJAhMmn1UV0eynh4eNC+fXv27t1bZfu2bdsoKioiPT2d69ev8/nnn9dYJ1nKBzpSyfzjKgm/Hmdg4ETxcLSZ6dChAx4eHpw6darRHoRqy/8zMgd7eg4fwukdv1BaXCxZHLquIpNWP659TUWnJ2nLS8tQZueISVpBazXXLJ/quPTzwqHjUxzftE3qUDTi5s2bAGRnZ7Njxw68vb3JzMzEyanieuPk5ERWVpZGzqWsXIop6uUJErK6/+9P1zJpAZKj5RzbuI1nX5lM574etR8gNAs1XZNv3LhB+/bt1fu1a9eOGzdu1Lhd2/SfNIHr8QmkXkyUOpRm4Y5Syb27xVg7ih4WwgMGBgZ8+eWXzJs375HXvL29KSsro23btnTq1Il58+bRqVOnat9Hygc6UjqyZj1Wdrb0HasbySRC7SwsLNi+fTtvv/02hYWPruLQ1INQbfl/xmfiOIxMjDm5ZYdkMTQHyqwcjE1NsbBuJXUozYZOT9IC5N/MwKaNmKQVdENzyfKpzsDAAApz84jdf1jqUBrM3NwcS0tL9Z99fX2Jj48nPDycadOmATBt2jR27dqlkfPdVigpLSkRNWkFScnsbCkvL+dWnu5N0kJFM5O8tJsELvoHZubmUocjNIGarsnh4eHqmu4+Pj4oFAoyMjKIjIzE19cXa2trrK2t8fX1JTIyUrL4q9PZsw9tXLpwcrO4adQkkemjf2p7KGNlZYW7uztHjhwhJSWFfv36ER4ejqenJ0FBQezbt4/S0lKys7M5fvw4ffv2leJjaK3fz8SQejGRIVOnYGBgIHU4QgMZGxuzfft21q9fz44dFeNPc30QCmBobET/F8eTeOwkuWnaGaOuUJcUEqtVNEb3J2nTM0QmraC1mvPg9jBrJ0fchgzi1PZwyu7dkzqcBnN0dOTYsWO4ublx+vRp9uzZQ2RkJEuWLGHUqFEkJSUxcuRIlixZorFzKrNzkTmIwU2QjpWDPUX5BZSXlkkdyhMpuXOXjX9fhE1bJ8a+9zepwxE0bMOGDZw8eZJu3bqRmprK66+/XuM1ee/evfzxxx+4u7sTGhrKnDlzAMjPz2fRokXqVSgLFy6scQmzVAZMmsBtpZKYfVFSh9KsKLKyRU1aPSOXy3FxcaFjx46YmJgQGBhIeHi4+nWlUomDgwOdOnWiU6dOREdHM27cOM6ePcv169cZPnw4UPGwvl+/fly6dEmqj6K1jqxeT+tOHXAbMlDqUIQGCgsLIzExkWXLlqm3NccHoZWeHjKIVo4OnNgkygo1lLo5pxhjNcZY6gAaKj89k96+IzAwNERVXi51OIJQReXgtnTp0kcGt+DgYDZt2oSFhUWVwW3x4sXqZmG+vr58+OGHUn6EOuk/aQIAJ7fulDgSzUhJSaFPnz7I5XK8vLzU2/Py8hg5cmSjnFOZkyMyaQVJyextKczJlTqMBrl6Po4ja9Yz/PVXuXDwVy4fj679IEEnBAUFVbu9pmtycHAwPj4+Va7hAKtXr2b16tUaj08TLO1s6DlqGCc2/cy9u6I+niYpMrN4qtfTUochNKGysjKCg4OJjIzEyMiIVatWkZCQwEcffcSZM2fYvXt3jccuX76c1atXEx8fj4GBAatXr+bChQtNGL1uiDtwhLwb6QyZHsTFI8ekDkd4QgMHDmTq1KnExcWpG4gtWLCAJUuWsGXLFmbMmMG1a9eYNGkSUPEg9LnnnmPYsGGEhoby2muvAVUfhAJa+SC00oDAieTdTCfx6AmpQ9F5ikxR913T6jRJ6+fnx9dff42RkRErV65k6dKlVV6fNm0an332mTrj77vvviMsLAyAqVOn8o9//AOA//znP+pmSZqSfzMDIxNjZA526n8ggiCFDRs2MHToUOzt7UlNTSUkJKTWwe3KlSu0adOGwYMHA7o1uFUyMjHBJ2AsCb8eoyAjU+pwdJYyK4fWnTpIHYagx6zs7XV+khYgcvlKejw7gMkfLeCzgJe5o3y0rpogaCPv8WMxNjHhxBaR2aNpisxscQOphyIiIoiIiKiyLSQkpNp9hw0bpv5zUVGR+nd2oWblZWX89r9NjJ//Dk/1dOP6hQSpQxKewPHjx2ssWdGcHoRWat2pA679vNjz1fciyU8DlPfLLooxVnNqnaQ1NDRk+fLljBo1irS0NORyOeHh4SQmVm1msHnzZv72t6rLC21sbAgJCaFv376oVCrOnj1LeHg4BQUFGvsA+enpFedychKTtIKkniTLByqWY509e1a9XRcGt4f19h2GlZ0txzdtlzoUnabMzqGrj6fUYQh6zMrelqyUa1KH0WClJSVs/PtC3toQxnNz32D7fz6TOiRBqJWBoSH9J40nOfoM2VevSx1Os6PIysbEzAwL61YUFSikDkcQmo3TO37Bd84Mhk5/mXXz/i51OIJQq/6TJlB67x6nd9ScTS/UXXlpGYW5echE3XeNqbUmrbe3N1euXCElJYV79+6xadMm/P396/Tmfn5+REVFkZ+fT0FBAVFRUYwerdkOkPk3MwBEXVpBkMjAwBfJSrlGcvQZqUPRacrsXMxlMozNzKQORdBTMns7CrWgCaEm3EhM4vjG7fR7aTzt3LpJHY4g1Kr7oP7Ytm0jsmgbSUFmRU8A0dhEEDSr+PZtTm7ZSc8RQ7Br5yx1OILwWKYtW+Dl/zxx+w9xK0+7V6vqErFaRbNqnaR1dnYmNTVV/X1aWhrOzo9egCdOnEhsbCxbt26lXbt29Tq2IfLTxSStIEjFubsrHfv05MSWHahUKqnD0WnK7PudMUVdWkECLWUyjE1NUebkSR2KxkSuCKUov4AJC+aJztOC1hsweQKKrGziD/8mdSjNkmhsIgiN59iGrZSXlzP41clShyIIj+XxnC8trSw5LhqGaZQiS0zSalKtk7R1sXv3bjp27Ejv3r2Jiopi7dq19Tp+5syZ6k679vb1S5MuuXOXovwCbNro5yStn58fly5dIjk5mQ8++OCR15966ikOHDiAm5sbhw8frjJJvnTpUuLj40lISODrr79uyrCFZmJg4ESKb99BvmuP1KHoPEXW/Xo+DmKpiL6p7TpeKSAgAJVKhadnRVkMY2Nj1qxZQ1xcHAkJCcyfP/+JY6h8OFCY3TwyaQHu3irily+X07F3T/r6P1fv4+s6vsbGxtKtWzcxvgpPzLZdW7oP6s+p7eGUl5ZJHU6zpLxfEs3asbXEkQhC86PMzuHcnki8xr+AeStZnY4R97CCFAZOnsjNy8lcPR8ndSjNipik1axaJ2lv3LhB+/bt1d+3a9dO3SCsUl5eHiUlJQCsXLlSfQNZl2MBQkND8fLywsvLi5wnWGqZl56hl5m0lfWCx4wZg5ubG1OmTKFHjx5V9vn8889Zt24dCQkJLFy4kE8++QSA/v37M3DgQHr16oW7uzteXl4MGTJEio8h6KiWMis8nvPl3N5I7hbekjocnae837DJSkzS6pW6XMcBLC0teeutt4iOjlZve+mllzAzM6NXr154enoye/ZsOnR4suZzMvuKSVplbvPJpAU4uzuClJg4nn97Di1lVnU+rj7ja+/evbl586YYX4UnNmBSAKqyck5u3Sl1KM2WMjeX8vJycRMpCI3k17UbMTNvSf9JE2rdV9zDClLo0Nsd5x6uHN8ssmg1TZGVjaWtDUYmJlKH0izUOkkrl8txcXGhY8eOmJiYEBgYSHh4eJV9nJweTJCOGzdO3VQsMjISX19frK2tsba2xtfXl8jISA1/BChIz9TLTNq61At2c3Pj0KFDABw+fFj9ukqlokWLFpiammJmZoaJiQmZmZlN/hkE3eXl/zymLVtwQiwX0Qhl5VJMMUmrV+pa933RokUsXbqUu3fvqrepVCosLCwwMjKiZcuWlJSUoFQqnygOq/uZtMpmlEkLFT+jnz/+HAvrVvjN+Uudj6vv+FpYWCjGV+GJmLQwwydgLBcOHml2//9pk/LSMgpzcsUkrSA0kowrf5B47CSDgl7C2NT0sfuKe1hBCgMmB3D3VhHnftH8fJQuSElJIS4ujpiYGORyuUbfW3l/Rago26cZxrXtUFZWRnBwMJGRkRgZGbFq1SoSEhL46KOPOHPmDLt372bu3LmMGzeO0tJS8vLymD59OgD5+fksWrRI/Y9g4cKF5OdrvkBz/s0MXPt71euY1p06YNPGCfNWMsytW1X89/6XhXUrzGUV2y2sW2FmYc6V02f5de1GLp84pfH4n1R1NX99fHyq7BMbG0tAQAAAEyZMQCaTYWtrS3R0NIcPHyY9PR0DAwO+++47Ll269Mg5Zs6cyaxZswDqXYpCaL4MDAwYMDmAlJg4bl5OljqcZuG2QklpSYkY3PRMXa7jHh4etG/fnr179/L++++rt2/btg1/f3/S09MxNzfnnXfeqXaMrct1XGZ3v9zB/Yzu5uTm5WRObt3JwMCJnPp5N+lJV2o9pj7j6zfffIO1tXW9x1cQY6wAzzzni3krGcc2bpM6lGZPkZVNK1HuQBAaza9rNvDGym955nk/Tu/YXeN+TXEPC2KMFR6wsLGmj98IorftouTOHanDkcywYcPIzdX87/rquu+tW5N/M0Pj769vap2kBYiIiCAiIqLKtpCQEPWfFyxYwIIFC6o9dvXq1axevboBIdYuPz0DM3NzWspk3Kkli8jAwIDRwbMYOWv6I6/dKbzFbYWC2woltwsU5N64yW2FkrJ79+gzeiSzfvyK9OTf+XXtBs7tjaLs3r1G+kSa89577/Hdd9/h5ubGkCFDSEtLo6ysjC5dutCjRw91k7eoqCgGDRrEsWPHqhwfGhpKaGgogMafuAi6y7W/Nw4d2hO5YqXUoTQryuxcZA4iy0d4wMDAgC+//FL98PNh3t7elJWV0bZtW2xsbDh69CgHDhwgJSWlyn51uY5bOdhRfPsOxUW3Nf4ZtEHEt/+lt+9wAhbMY/n0v2rkPSvH1+nTp2NlZVXv8RXEGCvAwCkvcvNyMinnYqUOpdlTZmVj176d1GEIQrOVfOoMNxKTGDJtCvKdvzSoqXBD72FBjLHCA94TXsDY1JQTotRBoxDNOTWrTpO02i7/ZjoAtm2duPGYSVpjMzOCFv+L3r7DObU9nNM79zyYlFUqH9usYc+yFXg858uQaVMI/M8/ee6tv3JswzZObNlR68RwY6lLzd/09HQmTpyIXC7n73//OxMnTkShUDBz5kyio6MpKioCKibi+/fvX+0AJwh/NiAwgMLcPOKiDksdSrOizM5B1lo86dcntV3HrayscHd358iRI0BFeaHw8HDGjRtHUFAQ+/bto7S0lOzsbI4fP07fvn0fmaStC5m9HYWN8GRdW9xRKtn79fdM+mgBz7zgV+tSt/qMrwBnz56ldevWYnwV6qWTRy+cu7uy5d+fSB2KXlBk5dDZ00PqMAShWTuydj0vL/mI7oP6k3j0RLX7iHtYoSkZGBrS/6UJXDl9lsw/rkodjmRUKhX79+9HpVLx448/qh9gaIIiszKTVkzSakKtNWl1QX56RUr145qHWdnZMmfVcnqOHEr4Z9+w5d+fcPV8HFkp17iVl19rN92y0lLOhO/li4mv8uOst0hPusJzb73BP6N2MuHDd7Fr5/zY4xtDXeoF29nZYWBgAMCHH37IqlWrALh+/TpDhgzByMgIY2NjhgwZoq4lLAiPY9PGCbfBA4nevksnssl1iTI7R93ASdAPtV3HlUolDg4OdOrUiU6dOhEdHc24ceM4e/Ys169fZ/jw4QCYm5vTr1+/Gpf81cbK3o7C7OY7SQtwescvXIu7yNh3gzGzMH/svvUdX9u0aSPGV6HeBk55kdtKJTF790sdil4oyMjCvJUMkxZmUociCM3W+ciD5KdnMHR6UI37iHtYoSn1eHYAdu3a6n3DsEGDBuHp6cmYMWN48803efbZZx/ZZ+bMmcjlcuRyeb1KhNxRKrl3t1hM0mpI85ikvV/3oqbmYU4uXZi7YSVOXTuz9p0P+XXdxgadL+nkaf77xjt8FvAKsfsP0u+l8czfs4VpXy6mY++eDXrv+ni4XnBiYiJbtmxR1wseO3YsAEOHDuXy5cu4u7vj6OjIxx9/DFTUMvz999+5cOECsbGxxMbG8ssvvzRZ7ILuquzaGr11l8SRND8ik1b/1OU6XpPly5djaWlJfHw8crmc1atXc+HChSeKw8reDmUzrEf7MJVKxY7FX2BpZ4vvX2c8dt/6jK+XL1/G2NhYjK9Cvcgc7Ok1chind/xCyZ27tR8gNNiDmnniJlIQGkt5aRm//bSZrt6etHPrXu0+4h5WaEoj/jKVvBvpxB/6VepQJHXz5k0AsrOz2bFjB97e3o/sExoaipeXF15eXuTk1K+ZqSIrm1biPlZjVNr0JZfLn+i4xacOqca9P/eR7d0H9VN9fPKA6l8HwlXOPVwbJWaZg71qzNw3VIuOR6q+uHBSNfWLj1WmLVtK/rPUxM9V0+8hvnT778bY1FT10a97VdO/WiL5z605/t0MnzFV9cWFkypjMzPJP7s2f4lrkeZ/douOR6omfPiu5PE1xdeLIR+oPo05qnLs0qnRf65N/R7iq3F+po3xd+P71xmqz2KPq+zat5P856RNfzcpKSmquLg4VUxMTK0/9/r+vbj49FV9ceGkqktfD8k/vzZ/iWuR+Nk19MvMwlz1nxNRqlc+Xag1P1Pxd6P5L1343adLXw/VFxdOqgZMDpD85yXl3425ubnK0tJS/efjx4+r/Pz8NPp3M2fNCtWc1Ssk/+za/lWXn2uzyKQFKMjIfCSTduCUF5nx3efkXE/jq6AZ3EhMapRzK7NziPjmBxaNHE/Etz/Sc8QQ/vbTf7Ft17ZRzicIUunlOwxLWxuOb9oudSjNUuH9J5YyB1HyQGg6xqammMtkzT6TtlLE1z9QXHSbgAXzpA5F0FNGxsb0f2k8l46dJDc1TepwtM6wYcPw8PDAy8tLo+9bkJkFiMYmgtDYiotuE711J719hz+2HKEgNLYRM6ehzMnl9M49UociKUdHR44dO8b58+c5ffo0e/bsITLy8f0Z6kuZmS1WqmhIs5mkzb+ZgXUbRwAMjYyY8OG7BCyYR8Jvx1k+/a8o7y9xakwld+5w4L9rWDlnHtZOrXl74ypc+mn2F0xBkNLAwIlkpVwjOVp0SG0MiqyKSdpWDmKpiNB0rOxtAZp9TdpKRQUK9n7zA129PenjN0LqcAQ91HPkUGQO9hzfuE3qUPSKaGwiCE3n6IYtqMpVDH4lUOpQBD3V/ukedBvgw69rN1JaXCx1OJJKSUmhT58+9OnTB3d3dxYvXqzxcyiycsT4qiHNZ5I2PQObNk6YWZjz+refMijoJY6s3cCatz+k5M6dJo3l8olTfBU4A2V2DrN+WMbgV8XgJOg+5x6udOzdkxN6UHS9Xbt2HDp0iKeffpr4+Hjmzp0LQEhICGlpacTExBATE8OYMWM0et7KTEYrMUkrNCGr+83qlLn6MUkLEL1tF6kJlxj7/lxMW7aUOhxBzwya8iI519O4fPyU1KFoncru02fOnGHmzJmPvP6kTU2gIpniTuEtWjm21lS4giDUQJGZTUxEFD4Tx9JSZiV1OIIeGv6XqdxWKjm5ZYfUoegFRVY2Ji3MaCmTSR2Kzms+k7Q3M7Cys+Vv//svrv292bpwKbs//xZVebkk8eSmpvHtK7O4eOQY/v/3FlM+/hfGZqKbrL5KSUkhLi6OmJgY5PKKLFQbGxv279+Pu7s7+/fvx9raWr3/119/TXJyMrGxsXh4eEgVdhXPvjyZ4tt3kIfvlTqURldaWsq8efO4ePEi/fr1480336RHjx4ALFu2DA8PDzw8PIiIiNDoeSsz/kUmrdCUZPcnOvQlkxZAVV7OjsVfYO3YmlFvvCZ1OEID1TTGurq6kpSUpFVjrHN3Vzo905vjm7ajUqma9Ny6oLbu0w1pagKVjU1Epo8gNIUjazdgZm5O/5fGSx2K8BhhYWFkZmZWaT5beZ/6uDHUzc2tyhg6depUkpKSSEpKYurUqU36Gf7MsXNHeo0cyrH1Wym+fVvSWPSFujmnKCnUYM1nkjY9HQBrx9asnPMu0Vt3ShwRFN++zdp3PiRyeSh9x43hzTUrxD9aPfbnGmvz58/n4MGDxMfHc/DgQebPnw/AmDFjcHFxwcXFhVmzZvH9999LGTYATl074/mCHye37uBu4S2pw2l0GRkZxMTEAHDr1i0SExNxdnZu9PPeVigpLSlBJjpjCk2ostyBvtSkrXQtNp7TO39h8KuBtO7UQepwhAaqboxVKpW4urpq1Rg7MHAixbfvcHqn6EZenbp0n24IRWaWmKQVhCaSnnSFyydO8ezLkzAyMZE6HKEGa9asYfTo0VW2Vd6nPm4MvXbtmnoMtbGxISQkBB8fH7y9vQkJCakysdvUhv9lKsW3b3N0/RbJYtA3ItlIc5rNJO3l46c4vfMXvn11FkkntadepkqlYv8Pq1g19/9o3akDb29aTcc+vaQOS9AC/v7+rF27FoC1a9cyfvx49fZ169YBcOrUKaytrXFykrbo/vNvz6G46DYHQ9dKGocUOnTogIeHB6dOVSxLDQ4OJjY2lrCwsBp/+WjIckxldq46s1EQmoLMwZ7ysjJu5eVLHUqT2/PVCu7ducv4+e9IHYqgYf7+/uTeL+GhLWNsS5mMZ5734+wv+/TigWd9mZubY2lpqf6zr68v8fHxGj2HIitbJEwIQhM6smYDMgd7PF8YXfvOgiSOHj1KXl5elW11uU8tKipSj6F+fn5ERUWRn59PQUEBUVFRj0z8NhXbdm3xGDOKk1t3cluhlCQGfaTOpBUPQhus2UzSFhUo2PzPj8n846rUoVTr4uGjfPPyTIqLbvPXVd/R70V/qUMSmlB1NdYcHR3JyMgAKjI3HR0rGt85OzuTmpqqPjYtLa3aLM6GTATWR5e+HrgNGcjBlWv1bqAzNDRk+/btvP322xQWFvL999/TpUsX+vTpQ3p6Ol988UW1xzVkOaYyO0dk0gpNysrellv5BZKVB5LSrdx89i0PpdsAH9yHD5E6HOEJ1TTG3rt3D9CeMdYnYCwmLcw4vmm7Rt6vuWmK7tOKrGys7O0wMGw2t0CCoNWSTp4mLeEyw157GQMDA6nDEeqovvepdR1bofHvYYdNfxlVeTm/rt2o8fcWakYgOWsAACAASURBVFbZAFsmHoQ2mPgNpQll/p7C10EzuHLqLC+FzGfiP97HyNhY6rCEJlBbjTWg3rXpGlqXra5eeDeYgoxMjm7Qry7UxsbGdOnShfXr17NjR0XB+aysLMrLy1GpVISGhmp8GSbcn6S938hJEJqCzN5er+rR/tmJzT+T8XsKz731hpi40VG6MMYaGBoyYHIAV+TnyEj+vcHv1xw1SffpzGyMjI2xsrPV+HsLglC9w6t/onWnDjw9bLDUoQhPSJM11BvzHtbK3g7vCS9weucelNmNd38sPKrs3j1u5eWLTFoNEHcjTeyOspCVb87j0Kr/MWByADOWfy4aiumB6mqsZWZmqpdYOjk5kZWVBcCNGzdo3769+th27dpx48aNpg8a6O03gqd6urHvu/9SWlwsSQxSCQsL4+7duyxbtky97eElsRMmTND4MkwQmbRC07Oyt0WZq7+TtOVlZez77r84du4olmPqqJrGWJP7NRC1YYzt8ewA7Nq15fhG/XrgqW0UmWI5piA0tbiow+Sm3WD4669IHYpQR/W9T9WW+9chU6dgaGTE4dU/Nfm5BdGcU1PEJK0EVOXl7Fm2gs3//BiXfl5M/+oTUUy9Gaupxlp4eDjTpk0DYNq0aezatQuA8PBwdUdMHx8fFAqFerlJUzIyNua5uW9wM+kKZ3bva/LzS2ngwIFMnToVKysrYmJiiImJYcyYMXz66afExcURGxvLsGHDeOcdzdexVGTlYC6TiYc3QpOROeh3Ji3AhQNHSE24hO9fZ4gVLjrmcWOsnV3FqgRtGGMHTZlIQWYW8Yd/a/RzCTVT3J9oEHVpBaHplJeVcXj1ejr0dqdzXw+pwxHqoC73qRYWFuoxNDIyEl9fX6ytrbG2tsbX11fj5Wpq01ImY8DkCcRERJGXdrNJzy1UEMlGmiHuRCR0eucvGBgZMunfHzLti49Z++4CykpLpQ5L0DBHR0f1cnljY2M2bNhAZGQkcrmcLVu24O7uTkFBAZMmTQJg7969PPfcc1y5coXbt2/z2muvSRJ3v5fGY/9UO0LnvKt3tSqPHz+OgYEBcrlc3SkcICIiotHPXXh/2Y/MwU78giE0OgMDA6xsbVHm6PckLcC+b39k5vfL8A4Yy8ktO6QOR6ijx42xs2fPJikpiWvXrkk6xjp0fIpuA/sR8e2PlJeWNfr5hJqpG5s4tpY4EqEp+Pn58fXXX2NkZMTKlStZunRptfsFBASwfft2+vbty9mzZwHo2bMnP/74IzKZjPLycry8vCjWs1VlmiTftRe/OX9h+IxX+eNMjNThCA/ZsGEDQ4cOxd7entTUVEJCQliyZAlbtmxhxowZNY6hbdq0YfDgihIW+fn5LFq0CLm8ooH7woULyc9v2oa0zwa9iJm5OYfC/tek5xUeUGRm49yjm9Rh6DwxSSuxU9vDMTI2ZuI/3ueVTxfyv//7p/gFvpmprLH2Z3l5eYwcORK5XM6oUaOqvBYcHNxU4VXLzMIc3zde58rps1w6elLSWPRNZdH1Vg72YpJWaHTmrWQYmRirHw7os0vHokk5F8uo2a8h37VX70q86KrHjbFJSUlVHrRVauoxdsDkAErv3SN6+64mPa/wqKK8Akrv3RPLMfWAoaEhy5cvZ9SoUaSlpSGXywkPDycxMbHKfpaWlrz11ltER0ertxkZGfHTTz/x6quvEhcXh62trboRofBkSouLObp+C8/NfYM2rl1JT7oidUjCfUFBQdVuHzlyZLXbK8dQuVyufqgBsHr1alavXq35AOvAzNycZ1+ZTPyhX8m48ockMQgVD0ItbW0wNDYSc1oNIModaIETm39m59Kv6DVqGEEf/wtDIyOpQxL03LDXXsHS1oZfvlwudSh6p7LIvUzcQApNwMqhYkmSMidP4ki0w95vfqBVawcGBU6UOhShmTAzN8fL/3liIw9yK7dps4qER6lUKpRZOWKSVg94e3tz5coVUlJSuHfvHps2bcLf3/+R/RYtWsTSpUu5e/euepuvry9xcXHExcUBFQ99yvVsVVljOLH5Z+4WFYnatILG9X9pPOatZBwIXSd1KHpNkZWNoaEhMntR8qAhxCStljj602Z2f/EdHs/5Mnnh30WHaUEyVvZ2DH41kJiIKFIvJtZ+gKBR6klaezuJIxGaip+fH5cuXSI5OZkPPvigxv0CAgJQqVR4enqqt/Xs2ZMTJ04QHx9PXFwcZvWsZSyzr+hwXig64ALwx9nzXD4ezfAZr2JmYS51OEIz8MwLfrS0suSYaBimNRRZ2aImrR5wdnYmNTVV/X1aWhrOzs5V9vHw8KB9+/bs3bu3ynZXV1dUKhX79u3j7NmzvP/++zWeZ+bMmcjlcuRyOfZiYuKx7igLid62i95+I7Bp61T7AYJQB8ampgyZNoWkk6dJjU+QOhy99qCkkBhjG0LMBGqRI2vWE/Htj/QdN4aX/vUBBgYGtR5T2839U089xYEDB3Bzc+Pw4cNVfjlp3749kZGRJCQkcPHiRTp06KDRzyPoJr85f8HIxJiIb36UOhS9dFuhpLSkRBRd1xOVyzHHjBmDm5sbU6ZMoUePHo/s97jlmG+88Qbu7u4MHTq03ssxrexFJu2fRXz7XyxsrHn3k//UaXyNjY2lW7duYnwVqjVoyoukXkzketxFqUMR7hPdpwWoqMn+5ZdfMm/evEdeMzY2ZtCgQbz88ssMGjSICRMmMHz48GrfJzQ0FC8vL7y8vMgRpYNq9dv/NqFSqXjnPx+Je1hBI7z8n0fmYM+B0LVSh6L3FJn3J2nFGNsgYpJWyxz47xr2/7AKn4njCPj7e4/dty43959//jnr1q0jISGBhQsX8sknn6hfW7duHZ999hlubm54e3uTdb/jraC/WnfqgPeEFzi5ZQe5aTekDkdvKbNzxTIRPSH1ckx1Jq1oHKaWejGR+EO/8f7M2UyYNKnW8bV3797cvHlTjK/CI7p4PYNT184cF1m0WkWRmSWyfPTAjRs3aN++vfr7du3acePGg99trayscHd358iRI6SkpNCvXz/Cw8Px9PQkLS2N3377jdzcXO7cucPevXt55plnpPgYzY4iM5uYvfsJnvIqEwMni3tYoUEMjYwY9vorXI29wO/yc1KHo/fUK0IdxH1sQ4hJWi0UuTyUQ2HrGDA5AP8P3q5xv7rc3Lu5uXHo0CEADh8+rH69R48eGBsbc+DAAQCKioq4c+dOI30iQVc8//ZfuXe3mKgfpSn6LlRQZueITFo90RTLMR+3FNPKwZ67RUWUiOt/FVlHT1Nwr5jOwwfWaXwtLCwU46vwiEFTXqQov4CYfQelDkV4iCIzGzNzcyztbKQORWhEcrkcFxcXOnbsiImJCYGBgYSHh6tfVyqVODg40KlTJzp16kR0dDTjxo3j7NmzREZG0rNnT1q2bImRkRFDhgwhIUEso9YU5bmLKO4V026gt7iHFRqkz5iR2LVry0FRi1YrFOUXUFpSIh6ENpCYpNVSe776nl/XbWTwK5N54d3quxDX5eY+NjaWgIAAACZMmIBMJsPW1hZXV1cKCgrYvn07586d49NPP8Wwmjq4os6S/ujYpxfuw4dwaNX/KMovkDocvabIyhZPIAVAM8sxH7cUU2ZnS6EodfCIFiq4+kcKg4ImYWVvV+v4am1tXe/xFcQY25x18XoG9+GDOfVzOKXFxVKHIzwkJSaWstJS5qxagX2H9rUfIOiksrIygoODiYyMJDExkS1btpCQkMBHH33E2LFjH3tsQUEBX375JXK5nPPnz3Pu3LlHHpQKT66lgSHXr19j0JQXMW3ZslHuYUGMsc2dgYEBI2ZM5WbSFRJ/Oy51OMJ9CtGcs8HEJK0WC//sG45t3Maw115mzN9mP9F7vPfeewwZMgQ3NzeGDBlCWloaZWVlGBsb8+yzz/Lee+/h5eVF586dmT59+iPHizpL+mPsvGAUWdkc/Wmz1KHovcKcXGQOonGYPpB6OaaVgz1KcW2v1o2EyxiZGDNy5rRqX68cX8+dO4eVlVW9x1cQY2xz1bmvBzO++5zMP65yePV6qcMR/uT6hQR+nDkXC+tWvL1xFT2eHSB1SEIjiYiIoFu3bnTt2pXFixcDEBISwu7dux/Zd9iwYZw9e1b9/fr163F3d6dnz/9n78zjY7reP/6ZmSwS2ReyR0ii0SCxxdrYU76/oLailSC2KkVRpTQ0WlVFVVU1qLWWahEaVWonNMgiEtlDJovsmezL5Pn9MTIylchEZjJLzvv1el4zc++59zz3PueeZ8655zyn6ysX9WS8HumxCdA1NIDHhDH17m9uGxZgPlbdeXPIW7Bw7IjLew6CiBStDuM5gqxsWLt0ho6BgaJVUVlYJ62Sc3rjVoT8dhrD587A24vmSuxrrHEPABkZGZgwYQKio6Px2WefAQAKCwvB5/MRHh6O5ORkCIVCnD59msVaasW4DvVEB7euuPDjHlSWlTd+AEOuFGblQNfAAJpttBWtCkPOKHo6poGZKRtJWw9paWkwNzHBv6fPoe+kcXBycWnQv/bo0UO8j/lXhoN7N8ze+S3yMzLx05xFKC0UKFolRj0k3gvDd1NmITc1DbN+2Ixhs+t/GcNgMGRPWloajNvqIfF+GDx9psDWzo61YRlNZtgcH2Q/SUX4BRZSSJm4dfwPmNnZYPkfh+DYp6ei1VFJWCetkkNE+D3gG9w5eQYj5s6E79avoK2rC6Dxxj0AmJqagsPhAABWrVqFffv2iY81MjIST/0YOnQoi7XUSuFq8PC/JR/gWVIKQk//qWh1GKgTdJ1NzVJ7FD0dU9/MVFzeGC+o9a9xwf+AC8B31sxX+ldLS0vmXxmw7+6K2bu2ovBZNn7yW4ji3HxFq8R4BfkZmfjBdx7Cz1/E6MXz4bPlS2jp6ChaLQZD7anrY02tLDFjth9rwzKahPvokbBz7YIr+w6BmrhoLkO+hAX/jR3vz0FlaRnmBX6P/y1dAJ6GhqLVUjlImSQ0NFThOiirvDV9Cn0TdoNWnDpCZnY2BIBGjRpFsbGxlJCQQKtXryYAtH79evL29iYANGHCBIqLi6OysjIKDAwkLS0t8fmGDx9OERERFBkZSb/88gtpamoy2yhAZHFfm3OOfpPeoS0PQ+jNIYMUfi+UTRRlG+d+fWjLwxBycO+m8HugjMLqItncO8022rTlYQgN9fNRuF7KKLX+NSMnm66nJ5OZvW29/jU2NpaysrKa5V//axsmshFZ3VNpzmPXtQt9GXKJPj17nAzMzRR+7couiv7v81/x9JlKm8Nv0rLfD5GJjZXC74+q26a1Crt30kutj80pElBwVBhxOBy5tWGZbeQjiqjHNbS0aNynS2nLwxBaenw/8aSwfWsUZfCxWjptaOLnK2nLwxBacmwfmXewU/h9UQaR8r4qXlFZFgZ1F8c+PWn9tWDacOtvchnUv0XvK7ONfESRttHS0SH/K+fow/27FH4flFEUZRsLx4605WEIdfcapvB7oIzC6iLZ3DsTGyva8jCEeo8drXC9lFn0TI3pq7v/0Pub1kt1X2VhGyaykZbqpLXp8gZtuPU3rQr+jQzbmyv8ulVBlPGZce7XhwJuXqCAmxfIuV9vhd8jVbZNaxV275ouPf7Pi7Y8DKEungPlek+ZbWQvLV2PWzh1ouV/HKYtD0No7CdLSKNOxz0TxdrmVeI61JO+uPEXfXX3MnlMGKPwe6Nokea+snAHKkbCv/dFMbT46Zj1w2YMnzdTPBWEwWgKGtraGL14PgzMTHFu205Fq8OoQ2GWaPp5/8nvwMmjF3vGGXLBwFS0OJ2AxaR9JcW5+bhx+ATcR4+EpbOjotVhKBnWLs6YF7gdpYIi7Jq1EIXPshWtEuM1iQv5F99NmYXCrGzM2bUNnj5TFa0Sg6H2hP91CXnpGRg6631Fq8JQYga9NxlLju5FW2Mj/Dx/Kc588x2qKysVrRZDCqIuX8O3E6bjSWQUJq9bBd9tG6FryBYVexWsk1YFyc/IxA6feXjw5wWMWjgXvts2QrutrqLVYqgIRu3bYfTiD/D5xdMY9N5khJ75E08iohStFqMOZQIBLv28H1adnTB/zw6sCv4Nw+fOgGF7c0WrxlAj9M2fd9KymLSNcvXArygTFGHUwrmNJ2a0GiydHTHv5+9RXlyCXX4foiDzmaJVYjSTXH4avn9vDh7+cw1jVnyE975exxbxZDDkSE21ENcOHIVDj+7o4NZN0eowlAx9UxPM3rUV4z5diriQUGyZMB2xt+4oWi1GExFkZePnuYtx9tsd6OI5AMt/Pwwnj16KVktpYZ20Kkp1RQWOrv4Cp7/ehi6eA7D4170w72CnaLUYSoxDj+7w2fIlVv/1O4bMfA+J98Kwc+YCHFuzQdGqMerh/I7dWD/UG4c/+Rx5/AyMWjQPay6cgt8P38J16FvgavAUrSJDxTEwE3XSFuXmKlgT5adMUIQr+4/gzSGDYNftTUWrw1ACLJw64YM9O1BVXo5dfguRn56paJUYMqKyrAwHl32G4O0/wW3UCHx0OBDD5vii6zBPtHOwZwugMBgy5t9TZ1GSX8BG0zIkcHlrAJb9fgiOvXrg9w2bsW/RChTnsQU5VRUiwtUDv+L792ajorQUc3/ejv9b+iHzqfUg1R3x8vLC9u3bwePxsGfPHmzatKnedOPHj8fvv/+OXr164f79+7C3t0dMTAxiY2MBAHfu3MEHH3wgO+0ZuHHkBNJj4+Gz5Uss/nUvfl21HtHXbipaLUYzkfaZawwNLS24jx6BQdMmw9rFGaWFAlw7eBS3j/2B/AzWoHwdZGUbaaiurETY+YsIO38RJjZW6PPO/6HP2P/DzO2bIMjJxb2gYNz94yxynqTKTQeG+qJvbgphdTVK8gsVrYpKcOPwCQx6bzJGLZqH3XM+UrQ6DAXSvmMHzA/8HtWVVfhx1kLk8dMVrRJDDvyz5wDSY+MxbtVSjP5ovni7sKoaufw0PEtKQVbyE9Hn8+8VpaUK1JjBUE0qy8px8+hJeC2YjfadHPAsMVnRKjEUiIa2NryXLcTAqRORHhuPXX4LWZlQI9Ji4rB1si/GrFiMIbPeR4//80J2ylPkpWcgPz0T+RmZyEvLQH5GJgozsyCsrla0yi1Oo520XC4XO3fuxIgRI8Dn8xEaGoqgoCDExMRIpNPT08PixYtx547k8PPExES4u7vLVmuGBIn3wrDt3ZmYsf1r+P2wGRd2BuLi7l9ARIpWjfEaSPvMvQrD9uboP3k8+k4cCz0TY2TEJ+LEuo148OcFVJVXyFF79UYWtnld8vjp+GvHz/j7x73oPKAv+k7whqfPVAydNR2J98LwJDIKFaVlqCwtQ0VJCSpKy1BRUoqKMsnflaVlqKqsQE21UO46M5QbA1NTFOflg2pqFK2KSlBZVoZ/9hzEuJVL4NinJxL+va9olRivSXNetrVzsMf8vT+gRijEj34fIjeVL0dNWx8t+SJUGmJu3EbMjdvQ0tFBOwc7tOvYAe0dOqBdxw5o52CPLm8NAE/zRXOq8Fk2SgoKUFFSivLSUpEfrpXSUlSUlKBc/L0UVeUVqK6qgvC5VFdWiX4//6yufL69qpL5bYZac+voSQyZ+T6GzHyPzfJTcZpTj1s6O+L9Teth4dgR1w4exZ/f7YKwqkqO2rYelMm/VpVX4PeAbxB97RZ6/G8kjC0t4NyvDwzMzcDlvpjsX1NTA0F2DvJrO22fZaOyrAyV5RWoKi8Xf68sKxf9Ln/+WVaBqooK1FRXQ1gtFH0KRZ81QuX3pY120vbp0wcJCQlITha9vTh27BjGjh37UqdEQEAANm3ahBUrVshHU8YrKch8hh985mPi2k/g9eEcWHfpjCMr16GyrEzRqjGaiLTPXH1oaGlh6pdr0XX4YHC4XDy6cgM3jpxAYugDeavdKmiObWRFjVCImOu3EHP9FvTNTNFrzCj0Hvs/DJo2uclx82qEwudSI/4ufO68qKYGwmrRJxGJO/JqamrE31/sIxAIIBK9HCK8eElEz/cBL7Y/31ebpu7+utvrpvtt/SbWGSJj9M1NIchhoQ6aQsiJUxjsOxW9xoxmnbQqSnNetpl3sMMHe38AAPw0exGbxSBjFPkitDEqy8rAj44FPzpWYjtXgwczWxu0c7BHO4cOMO9gC10DfWjrtkVbQ0OYWFmiTdu20G6rCy1dHYnG5+tQ66Pr+u0aoRA11UIIhdXi77W+mohAwhrU0PPfwhc+vTZNfsYzHFsT0Cy9GIzmUlJQiLt/BKH/5PH464dAFuNbRWlOPT5gygSMWfERSgsF2D13MeJC/m0BjVsHyupfa9u0tfA0NGBk0R7GVhYwtrKAiZWl6LulBey7u8LAzEwmceKFVSJ/KRRWi/xndbXIR9YQamqEorYt1aBGWCPhL8VpqEbUxq0RtX2JakTt3Fq/Wys1Nbh/7i+Env6zSfo12klrbW2N1NQXf0L5fD48PDwk0ri7u8PW1hbBwcEvddI6ODjgwYMHEAgEWLNmDW7eZFPx5UV1RQWOrQkAP/oxXAb1ZyseqijSPHMAMGfOHMydK1rExszMDIBoerymtjauHzqO28d/R15aRsso3Upojm3kQVFOLq7sO4wr+w4DEDUWtXR00EZX1BjUbtsW2ro60G6rK/rUFTUUNbQ0weXxJEWDBy6XK/7O42mAw+WCp8EDOBxwAHC4XHCeNzA5XC44HA44XA444Ii2cwAOhwNwOKI04NR+FZ3jP/uef3m+W/zlxW8OR3TOF5sZMiQ3NQ25qWmKVkOlqK6sxI8zP0ReOqtbVZXmvGzjcrkozi/A4RVrkZX8RN6qtjqU4UVoU6mpFiIr+cnz8nD9lWk5HA4027QR+eS2umjTVhcaWtrgaWpAQ0sLGpoa4D3/1NDUAk9TExpamuLPF/6ZBy5P47n/5kr6cR4PPA0NsY/m8ngiP83hgsvjgsPhgsPlgMt9vp3HlRgJzGAokmsHjqJTL3cYmJuyTloVpTn1OBHh8a07OOG/ESX5BfJWtVWhKv5VWC0KJ5TLb7h9wuFyoamtBS0dHWi20YZWmzbQbNMGWjrPP9toQ1OnDTS1tcHT0BD7Ra4G75W/OVwuuM/buhwu5z+/X3zncrmidi1X1LblcLiiJmvt9lrhcsHR4IHDafrL2WZ7ZQ6Hg61bt2LGjBkv7cvIyICdnR3y8vLQo0cPnD59Gm+++SaKiook0rVUh0Zr4eavv+HW0ZMs3IGaExgYiMDAQABAaGioePu+jz5RlEqM5zRkG3lTUy1EeVExyouKWyxPhupy+uttilZBJXnVH0eG8tOcl23PklKwdaIP+38lJ6SxjSq3GYhINDWzrAxFbBYDg/ES+RmZ2DLRR9FqMJpBc+rx28f/wO3jf7SMoq0MZRto1ByopgaVZeWoLCtXtCpyo9Fu3bS0NNja2op/29jYIC3tRQNFX18frq6uuHr1KpKTk9G3b18EBQWhZ8+eqKysRF5eHgDgwYMHSExMhLOz80t5BAYGonfv3ujduzdycnJkcV2tHtaAUF0ae+YYioPZhsFgMFoHDf03Zf+vFAtrMzAYDIZqw+px5YXZRjlotJM2NDQUTk5O6NChAzQ1NTFlyhQEBQWJ9wsEApibm8PBwQEODg64c+cOxowZg/v378PM7EXgXwcHBzg5OSEpKUl+V8NgqAGNPXMMxcFsw2AwGKoNe9mmvDDbMBgMhmrD6nHlhNlFtWi0k1YoFGLhwoW4cOECYmJicOLECURHR2P9+vXw9vZ+5bFvvfUWIiMjERYWhpMnT2L+/PnIz8+XmfIMhjrS0DPHUDzMNgwGg6HasJdtyguzDYPBYKg2rB5XTphdVAupYtKeP38e58+fl9jm7+9fb9ohQ4aIv//xxx/44w8WV4TBaCr1PXMM5YDZhsFgMFSXui/beDwe9u3bx162KQnMNgwGg6HasHpcOWF2US04AJQquFZWVhaePGl8xVwzM7MWjZOh6vnZ29ujXbt2zTqHMtpG1e0CtJxt1OFetXR+zDbKmZ8s7NJaYfU4qyuagqrnJ6u6gtlGOW2jjPVZS+enrPVZa4XVFcpZVwDMNvLIj9XjypsX+1+qvPlJaxtSRQkNDWX5Kam0pO7MLsqru7rnp8q6q3t+TFTLZqw8Kq/u6p6fKuuu7vmpsu7qXH8yUT2bqXt+qqy7uuenyrqzelw5dVf3/Gql0Zi0DAaDwWAwGAwGg8FgMBgMBoPBkB+sk5bBYDAYDAaDwWAwGAwGg8FgMBQID8A6RSvxujx48IDlp6S0pO7MLtKj7veK2Yblx5AdrB5XTtT9XjHbsPzkgTrfK1W2S2tFncujIvKTJep+r5htlDM/ZheWX12UbuEwBoPBYDAYDAaDwWAwGAwGg8FoTbBwBwwGg8FgMBgMBoPBYDAYDAaDoUBYJy2DwWAwGAwGg8FgMBgMBoPBYCgQpeuk9fLywuPHjxEfH4+VK1e+tH/p0qV49OgRIiIicOnSJdjZ2Yn3VVdXIywsDGFhYThz5oxM8vP19UVWVpb4vH5+fuJ9Pj4+iIuLQ1xcHHx8fGSS39atW8V5xcbGIj8/v1nXJ0uYbZhtpM2P2eYF6mwbVbZLa0Wdy6M0+SlzmVRn26iyXYCWtQ17ZqRHnZ8ZafJTZtu0VtS5TKpyeVRnu0iTH7ON9Pkx27yA2UaxtiFlES6XSwkJCeTg4ECampoUHh5OLi4uEmkGDx5MOjo6BIDmz59Px44dE+8rKiqSeX6+vr60Y8eOl441NjamxMREMjY2JiMjI0pMTCQjI6Nm51dXFi5cSHv37n3t62O2YbZhtmG2kZdtVNkurVXUuTxKm19dUaYyqc62UWW7tLRt2DOjnHZhtmEiqzKiqmVSlcujOtuF2YbZhtlGPW2jVCNp+/Tpg4SEBCQnJ6OqqgrHjh3D2LFjJdJcvXoVZWVlAIA7d+7AxsZGrvk1hJeXFy5evIj8/HwUFBTg4sWLQUpVBgAAIABJREFUePvtt2Wa39SpU3H06NEmXZO8YLaRhNmG2UYa1Nk2qmyX1oo6l8fXyU+ZyqQ620aV7QK0rG3YMyM96vzMvE5+ymSb1oo6l0lVLo/qbJfXyY/ZhtlGGphtJGlp2yhVJ621tTVSU1PFv/l8PqytrRtM7+fnh/Pnz4t/t2nTBqGhoQgJCZHKqNLmN2HCBEREROC3334TF76m6trUY+zs7ODg4IDLly+/9vXJEmabFzDbtIxttLS0sHfvXvzzzz8YNGgQli5d2uAxPj4+uHfvHgQCATw8PDBy5EjweDzx9T148AC5ubkoKytDSkoKpk6d2uh1ygJ1tU3d9EuWLEFGRgY+//xzTJ8+HVpaWi+ltbOzg6OjIy5evIiioiIUFRWhbdu24PP54murtXdhYSEyMjLE9mbIDnUuj009htXjLV9XSJNe2ewCtKxtlNG/vvvuu3j8+DEKCwvh4eGB6dOnQ19fX3xtzL9KIuv6jPlY1UGdy6Qq1+PqbJemHsNsw3ystKirbermZ2hoiIyMDBQWFuLtt9+Gra1tvWn79++P/v3749SpU2Ifq6OjI76+CRMmyNy/ajT7DArivffeQ69eveDp6SneZm9vj/T0dHHl8/DhQyQlJTUrn7Nnz+Lo0aOorKzE3LlzceDAAcyaNQvz58+HnZ0d3n//fSxcuLDB4zdv3oyxY8fCwsICAoEA8fHxEvvNzMxw7949uLi4ICYmBn5+foiIiMCUKVNw8uRJ1NTUyPX65IGibHP58mXo6+vDyMgIjx49wubNm1FZWfnScR4eHggICEDPnj0hFApx9epVXLhwQSLNu+++i+HDh2Pq1KnYs2cPPv30U/E+ZpvGqe+5GTZs2EvpOBxOg+dYt24dnJyc8MEHH8Db2xuffPIJoqOj602rq6uLJUuWYNCgQXB0dMTQoUOxfPlybNq0Cfb29vj222+RlpaGrl27YsWKFQgMDERERESD51MEymabWng8HoRCYb37rK2t4e3tjaFDh2LgwIH4/PPPsX79eqxatUoi3ZQpUxAcHIwZM2bAyMgIQqEQVlZWEtfm5eUFJycn2Nvbw8LCAleuXEF0dPRLzyajZVAVH7tp0yZMnToVhoaGqKioQEpKisR+5mNfn9f1sS4uLjh48CA6deoEAEhNTUVcXJxEmn79+iEnJwcAJHysKtsFaBnbtLR/vXXrFgYMGAA/Pz84ODhAX18fGzZswOLFi5l//Q9N9a8A87GtFUWVyePHj6OiogIDBgxAYWEh7ty5g3/++afeY5l/FaHM/vX+/fs4d+6cRBrWhlWtNizzsdIjyzZs9+7d0b17d/Tq1Qvp6em4ffs29PT06k3r7e0NAGL/CkDCxz548ADx8fEy9a9KNZI2LS1NogfbxsYGaWlpL6UbNmwYPvvsM4wZM0aiAktPTwcAJCcn4+rVq3B3d3+t/GpH4AFAXl6eOI89e/agZ8+eOHr0KGJjY3Hw4EF89tlnOHnyJBwdHevVtaSkBN7e3jA0NMTnn3+OAQMGoF+/fgBEhdfLywuHDx+GsbExDhw4gDNnzkBTUxNTpkx5aUh1U69PliiDbTIyMiTS1LXN06dP0alTJwwbNgwLFy6EpaUl1q9fX6+uxsbG+Pnnn9GhQwfY29ujqKgIs2fPFuc3d+5ceHh4YNu2bejWrRu8vb0xb9488fGqapvAwEDs27cPrq6uCAsLw7hx4wCIdJ89ezb+/PNPWFtbS+hvY2OD33//HVlZWcjJycGOHTtemZ+vry9u3ryJ9evXIysrCzExMUhKSkLPnj0BALNmzcL48eNx8+ZNlJaWwsXFpV5da88VEBCAuLg46OvrIzAwEDNmzKj3+n766SfcvHkTkyZNwp49e3DkyBEMGDAAAFBQUIAJEybg448/xpUrV1BTU4OgoCBMnz79dW+51LzqXn3yySfg8/kQCAR4+vQpvvzyS6SkpGDt2rXi9E5OTkhNTRWXq5CQECxfvhwREREoLi7Gnj170K5dOwQHB0MgEGDlypVwcHCoN79a9PX1UVFRgTlz5sDf3x+DBw/GsmXLxLr6+/vjt99+g4+PD7744gvMmDGjwWtzc3PD3r17ER0dDRMTE5w/f77e9FOmTEFQUJDEtv8+M++++y4CAgJQUFCAx48fi+3NkB3KUI/L2sfu3bsXb7zxBgwNDeHn5wcXFxe88847AJiPbWp+svKx6enpmDhxIkxMTGBmZoZLly7By8tLvH/8+PGws7ND9+7dX/KxymYXQDrbrFy5EmlpaThw4ACMjY0xevRo8b7Ro0cjOjoaERERMDIywvjx48XnUQX/yufzkZubiylTpuC3336DUCiEo6MjAOX1r8ALH1tSUoK9e/di8+bN2L17NwICAgCIypWnpyeuX78uLlfJyckN+tgDBw7gnXfegZGRUb35AaJnxtLSEkQEDoeDwYMHIz09HW5ubmJd/f39MXPmTIwbNw6FhYXMx6oRyl6P79mzB3369EFYWBhmz56NsLAwnDx5EmZmZvXqyvyrCGX2r0FBQVi4cCFrw6pwG1YVfayqt2EB0aC9jIwMREdHo6CgALdu3YKzs3O9aWs7aetS97nR0tLCX3/9JXP/qrCAxP8VHo9HiYmJ1KFDB3EA3y5dukikcXNzo4SEBHJ0dJTYbmRkRFpaWgSATE1NKS4ujlxcXGjGjBkUFBQkThcXF0cnTpwQ51dVVUWjRo0iIqLU1FRKSUmhpKQkcXoLCwvx93HjxlFYWBiVl5eTra0tJSUlkZGREd2+fZuys7PJ2Ni40esrLi6mDRs2kKamJiUkJFBmZqZEmidPnpCfnx8lJydLdX2qbJu6aT755BPi8/kkEAjo8ePHNGLECMrLy6Pg4GA6cuQIVVdX09q1ayWOqWuba9euEZ/PJ0AUPDo9PZ0yMzPJyMiIkpKSXmkbd3d3EggE4uu7ffs2PX36VHx9s2bNopCQEAJAnTt3VlnbZGRkUP/+/YnD4dDkyZOpuLiYOnfuTFOmTCE+n0/Dhw+nuLg48vLyIjs7O+JyuRQeHk5bt24lXV1d0tbWpgEDBrwyP19fX6qqqqLPP/+cNDQ0xPn8+++/BIBu3LhBVVVV1LdvXzI1NW3QNkZGRkRE1K5dO3F+H3zwAT18+LDe6/uvbU6dOkUbN24kIyMj6t27N5WUlEjYZtmyZRL1QkvbxtnZmZ4+fUqWlpbk5uZGKSkpNHToUPrll18oICBAfA+GDx9OqampYt35fD6FhIRQu3btyMrKip49e0b3798nNzc30tbWpsuXL1Nubu4ry0KvXr2IiOjXX3+ld999l8LDwykrK4vGjRtHSUlJtHHjRqqsrKTMzEwyMTGhNm3aNHht5eXl9OGHH4rz6t+/PxERmZiYvGQXe3t7IiLi8/nE5/Np//79ZGpqSqamppSQkCC2d+1xEyZMoMjIyBZ7jlqDqLuPtbW1pYqKCtq4cSPzsUriY3k8Hi1cuJCEQqH42oqLi8nf31+cptbHKqN/ldY2y5cvp+TkZHJychL7PQsLC/L19SU+n0+9evUiU1NTSk5OpmHDhqmcf506dSoJhUIiIiouLqYRI0YorX8FIPaxI0aMoISEBPL09KSOHTuKfWxtufL09KS0tDSx7snJyQ36WF1dXSotLaWtW7c2WA4sLCzEvu769et09+5dcnV1pezsbEpPTycjIyPauHEj1dTU0HvvvUccDof5WDUSWdfjq1evbtC/AqCnT59SamoqEREtWrSIysvLKTU19aUyWft9wYIFJBQKSU9Pj4yNjSkpKYlu375NS5cubbStxPyrcvrXBQsWUElJCWvDqngbVpV8rDq0YQFQeHg4ZWZmivN7+PDhS/619rmprWf5fD6lpqbS4cOHydLSkgBQx44diYho4MCB4mNk5F9b5iGUVkaNGkWxsbGUkJBAq1evJgC0fv168vb2JgB08eJFyszMpLCwMAoLC6MzZ84QAOrXrx9FRkZSeHg4RUZG0qxZswgAOTg4UH5+PnE4HLK0tKSUlBSxA3NwcCCBQECxsbFERBQfH0/Gxsb05ZdfivP76quvKCoqisLDw+ny5cv04YcfUnR0NAGgmTNnUnx8POXn59PFixcbvbY2bdpQbm4upaamUkJCAp07d46Cg4Mlru/s2bP0119/0caNGyWObej6VNk2tVL3YQdA9vb21LFjRzp8+DDV1NRQeno6ffbZZ9SmTRuJ/OrapqioiJYsWSI+56JFi4iIKDExkWbMmPHK61q8eDGFhISIr6+6upp+/PFH8fUtXbqUBAIBASB/f3+1sU1YWBh98sknJBAIiM/nv6R73759KSsri3g8ntT5bdu2jdLS0iRsU1hYSCtWrCAAdOXKFTpz5gzFx8dTfHx8g7axsbEhIiJtbW1xfqmpqVRZWVnv9dW1zcyZM8VOoV+/fpSQkECVlZUS1zd79my6cuWKwmzz/fffU35+Pg0bNowuXboktk1ubi7FxsaKy1ViYiJVVFSIdU9OTqZp06aJz33y5ElxWQVEK0/evn37lWVh586dREQUExNDly9fps6dO9OmTZtoz549NHPmTMrNzaXS0tJGnxsAlJ6eLq7PVq9eTRoaGkRE5Ofn95Jd2rZtSz179iQej0ejR4+mgoICEggEFBkZScuWLZOwNwAaPnz4S38mmcinPKq6j125ciUVFRUREVF6ejolJiYyH1vnvIrysfn5+VRVVUVCoZAOHDggvraysjLq06ePOK+ePXuSQCBQWv/6OrYpKCigMWPG0J07dygtLe0l/VXVv1pZWZG/vz85OTkprX9dv349zZ07V9wArGuXJ0+eUEBAgLhcxcfHU2VlpVj3xnzsjz/+SEVFRQ2Wg6+++kpc3925c4c6d+5MAGjTpk10/fp1io+Pp9zcXHr8+LFU18d8rOqJLOvxxvxrXl4ejR49moiISkpKKCAg4JX1eGRkJCUkJIh1nTlzJuXn51N+fn6D9QXzr8rvXz/77DPWhlWTNqwq+Fh1acMmJCTQmjVrxPmtWbOGiIi+++67l2zz7bffiv1ru3bt6PLlyyQQCCg8PJxiYmLk5V9b9kFUhDx9+pTc3d3p3Xffpd27d9Pdu3epc+fONGPGDHElTEQ0ZMiQRs/1/vvvi99I1cqGDRvol19+afTY/fv30/nz58W/16xZQ0ePHpVIc/jwYYkRJq1BOnXqRM+ePaNhw4aRhoaGeLu/vz9du3ZNqnMkJCSQl5eX+HftH1l7e/tXHte1a1fKzc2VePtRXV0t/mMNgBwdHYmIFH6fmivTp0+nsLAw8R+yqqoqmjVrFj169Ij+97//vZR+0qRJFBoa2qQ8fH19xW8ca+XEiRP0ySefECBycLNnz270PLVvIc3NzcXbxo8f3+hbqbFjx1JmZia5urqKt7m5uVFJSYlEuo8//rhF3kK+SqZOnUo3btygvLw8Onr0KFlaWkq8hQRAnp6eEqMiakdh1f4+dOiQRH3h5+fX6Auj2tE2urq64m0LFiyg4OBgAkTP3eHDh6W6hvDwcJo0aZL4t4mJSb1vIeuT9u3bExGRnp7ea9ubiXKIsvhYNzc3WrduHenp6RHAfGytKNLH6urq0gcffECjR48Wb1NHH9sa/GuteHh40P379wlQXv8KMB/LfKx6CPOvyi3Mv7aMMB/7Yr8y+FjmX+XvX5UqJq28uHbtGgYPHoy33noL165dw9WrV+Hp6QlPT09cu3ZNnK7uqnANUVxcDAMDA4ltBgYGKCoqeuVx33zzDVxdXTF58uRmn0vdSExMxJIlS7Bu3TpkZWXh6NGjsLS0BCCdTYCX72Xt91fdy06dOuH8+fNYvHgxbt68+cpzqbpN7OzsEBgYiIULF8LU1BTGxsaIiooCh8NBamqqOAB9XVJTU2FnZycRP1Ia/ruaop2dnThuCwCI/iu8moKCAqSnp6N79+7ibd27d8ejR48aPMbLywuBgYHw9vZGVFSUeHtcXBw0NDTE8X2kOVdLcPToUQwaNAj29vYgImzatAklJSXQ1dUVp7GwsJBb/nXjDL2OjQDg0aNHL9koMzMTeXl5jR5bmweXy30tezOUB2XwsQAQHh6OsrIycSw35mNFKMrHAkBpaSl++uknHDx4EObm5g2eS5Vt0hr8a100NDTE16Ss/hVgPpb5WPWA+VflhvlX+cN8rPL5WOZf5e9fW1Un7aBBg3Dt2jVcu3atXgcnjVEfPXqEjh07Sqz+1pgh1q1bh1GjRmHkyJESFeWjR4/QrVs3ibTdunVT+IOnCOp72AH5PWh2dna4dOkSAgICcPjw4UbPpeo2adu2LYgI2dnZAIAZM2bA1dUVgGghgeXLl6NHjx4ARJ3XdnZ2+Pfff5GRkYGvv/4aurq60NbWRv/+/RvNq127dvjoo4+goaGBiRMnwsXFBcHBwU3W+eDBg1izZg2MjIzQuXNnzJkzB/v376837ZAhQ3DkyBFMmDABoaGhEvtKS0vxxx9/4IsvvoCuri769++PsWPH4tChQ03WSVY4OztjyJAh0NLSQnl5OcrKylBTU4Pw8HCMHj0axsbGaN++PZYsWSI3HdauXQsdHR106dIFM2fOxPHjx5t8joMHD4oXkzA0NMSaNWsatFGfPn3g7OwMDocDExMTfP/997hy5QoEAoH4XNLam6FcKNrH1qXun1vmY1/Q0j62LlwuF7q6uuLGj7r5WHX3r9OmTRM3iOzs7PDll1+KV4NXRv8KMB/LfKz6wPyr8sP8q3xhPla5fCzzry3nXxU6XLolxMnJiQQCAcXHxxMA0tfXp9zcXCosLCQul0uAaKpIp06dpDpfSEgIbd68mbS1tWncuHGUn59PZmZm9ab99NNPKS4ujtq3b//SPk1NTUpJSaGPPvqItLS06MMPP6SUlBTS1NRU+D1rSXF2dqYhQ4aQlpYWaWpq0t69e2n//v3k7+9Phw4dkuocXl5elJGRQS4uLmRoaEj//PPPS3F3asXKyooSEhJo2bJl9e6fN28eRUdHk5WVFVlaWlJUVBTNmzdP4fepubJhwwbKzc2l7Oxs2rJlC129elUc12zevHn0+PFjKioqoocPH5KbmxsBooUCTp06RTk5OZSdnU3bt29/ZR6+vr508+ZN2rFjBxUUFFBsbCyNGDFCvP/KlSsSsdReJVpaWrR3714qLCykzMxMWrp0qXifra0tFRUVka2tLQGgy5cvU1VVFRUVFYmlduoDIArEf+rUKSouLqYnT57Q1KlTFWqLrl270t27d0kgEFBubi6dPXuWLC0tSVtbm44dO0aFhYUUERFBS5YskdtUkTlz5lBaWhplZGSI4y0BaNJzB4CWLl1KmZmZVFhYSPv27RMvQACAoqKixPGHpkyZQklJSVRcXEzp6el04MABiXrxVfZmotyiKB/L4XBo7ty5ZGRkRACod+/elJ6eTosWLSKA+dhaaWkfO3z4cHJzcyMul0v6+vq0fft2SktLE8frUkcfq87+dcOGDZSamkrFxcWUmppKu3fvlpgOqGz+FWA+lvlY9RHmX5VbmH9tGWE+Vnl8LPOvLeZfFf/gtYSkp6fTvn37xL9DQ0MlOnGa4uDs7e3pypUrVFpaSo8fP5YocNOmTaOoqCiJ85aXl0t0Hq1atUq8383Nje7du0elpaXiFe4Ufa9aWhp62OX1oH3++edERBI2KSoqkjjXpk2bKDc3l3Jzc2nTpk0Kv0eqIr6+vnTjxg2F68GkYal1cPUF02fC5HVFET6Ww+HQ+fPnKTc3l4qKiig2NlbCvwLMxwIt72MnTpxIMTExVFRURFlZWXTu3Dnq2rWrxLmYj226MP+qGsJ8LBNZC/OvyivMv6qPMB+r/NKa/Cvn+RcGg8FoNr6+vpg9ezYGDRqkaFUYDWBvb4+UlBRoaGhAKBQqWh0Gg8FgSAHzr6oB87EMBoOhejAfq/y0Jv/aKmLSMhgM2bFr1y4UFRW9JLt27Wryueo7T1FREQYOHCgHzVsP06ZNq/e+1l1QTVqCg4PrPdeqVavkoDmDwWC0Xph/VQ2Yj2UwGAzVg/lY5Yf51xcofDivssnAgQNfmgpf35R4Ji0rwcHB9drkv9NvmDBhwoSJ8grzscopzMcykZfY2NjQ5cuX6dGjRxQVFUUfffRRvem2b99O8fHxFBERQe7u7grXmwkTVRPmX5VTmH9lwoRJU4SFO2AwGAwGg8FgMBhywcLCApaWlggLC4Oenh7u37+PcePGISYmRpxm1KhRWLRoEUaPHg0PDw9s374dffv2VaDWDAaDwWAwGC2PhqIV+C9ZWVl48uSJotVQO+zt7dGuXbtmnYPZRj4w2ygvzDbKiSzs0lph5VF6DAwMYGdnBwDIyclBZmamxH49PT3Y2tpCV1cXAoEARkZG4n0+Pj5Ys2YNAGDDhg04ePBgo/kx28geWdUVzDayxdzcHLdv34axsbF429ixY8XPyd27d2FkZAQLC4uXnru6MLvIB+ZjXx9WJmUPq8eVF9ZOUl6YbZQXaW2j8OG8dSU0NFThOqijyOK+Mtsw27Q2YbZRTmH3lN07eQuXy6WEhARycHAgTU1NCg8PJxcXF4k09vb21LVrVzpw4AAlJCSItxsbG1NiYiIZGxuTkZERJSYmkpGREbONAkRW95TZRnZib29PT548ofv370tsP3v2LA0YMED8+9KlS9SzZ8+Xjp8zZw6FhoZSaGgoJScnK/x61FFYeWf3TpmE1ePKK6ydpLzCbKO8Is19ZQuHqTheXl54/Pgx4uPjsXLlypf2L126FI8ePUKXLl1w6dIl8aggQDTSJy4uDnFxcfDx8WlJtRkMBoPBUFr69OmDhIQEJCcno6qqCseOHcPYsWMl0jx58gQPHz5ETU2NxHYvLy9cvHgR+fn5KCgowMWLF/H222+3pPoMhlLStm1b/P7771iyZMlLz420BAYGonfv3ujduzdycnJkrCGDwWAwGKqFjY0NLl++jEePHiEqKgofffRRvem2b9+O+Ph4REREwN3dvYW1ZDQFqTppG+sIBIBJkyaJC8aRI0fE21lHoPzgcrnYuXMnRo0ahS5dumDq1KlwcXGRSBMWFoZevXohOjoaJ0+exDfffAMAMDY2hr+/Pzw8PNCnTx/4+/tLTNVkMBgMBqO1Ym1tjdTUVPFvPp8Pa2trmR87Z84chIaGIjQ0FGZmZs1TmsFQYjQ0NPD777/jyJEjOHXq1Ev709LSYGtrK/5tY2ODtLS0llSRwWAwGAyVo7q6GsuWLcObb76Jvn374sMPP0SbNm0k0owaNQpOTk5wcnLC3LlzsWvXLgVpy5CGRjtppekIdHR0xKpVqzBgwAC4urpiyZIlAFhHoLyRZqTP1atXUVZWBgC4c+cObGxsALCRPgwGg8FgKBo2KpDRWti7dy9iYmKwbdu2evcHBQWJB3N4eHigsLDwlfFoGQyGatPYIDAtLS0cO3YMrq6uuHPnDuzt7cX7unbtitu3byMqKgqRkZHQ1tZuSdUZDKUiMzMTYWFhAIDi4mLExMRAS0tLIk1Dcd8ZykmjnbTSdATOmTMHO3fuREFBAQAgOzsbQPM7Au26vYkxnywGV4PXlGtqNTR1pI+fnx/Onz//Wsf+F7e3h8PTZ+praM2QJxwOB4N9p8HJo5eiVWEoKZ37e8C+u6ui1WCoGBaOHdF5QOtZab05o/paekTgGwP7wsKxo9zOz3h9+r87Hnqmxo0nVHMGDBgAHx8fDB06FGFhYQgLC4OhoSHmzZuHefPmAQCCg4ORlJSEhIQEBAYGYsGCBQrWuulwNXgYMHUidA0NFK0KQ8XoNnIoTGysFK1GiyHNIDA/Pz/k5+cjKioK27Ztw6ZNmwAAPB4Phw8fxvz58+Hq6orBgwejqqpKLnpyuFz0f3c8NP7T4cVQPIbtzdF77GhFq6F02Nvbw93dHcXFxRLbpe37UeYZXkYW7VuNzRvtpJXGoM7OznB2dsbNmzcREhICLy8vqY8FGi4MFh0d4Dl9CozasxVGm4uJiQl69eqFzZs3N+m4hmzjMqg/Bk6bJGs11Z69e/fi2bNnePjwYYNpmhMvRkNbC33Ge2Pql5+zRgLjJdy8hmH2rq3w++Fb6Biw8sGQnuFzZ8BnywZwea3jpWloaCicnJzQoUMHaGpqYsqUKQgKCpLq2AsXLmDkyJEwMjKCkZERRo4ciQsXLshN13cD1uB/S1WvQ0vdsenyBiasWYGZ320CT0ND0eoolFu3boHD4aB79+5wd3eHu7s7CgsLsXv3buzevVucbuHChXB0dES3bt1w//59BWr8evzfxwsxfvUy9Jv0jqJVYagQPE1NTP/mC7z94RxFq9JiSDMIbOzYsThw4AAA4OTJkxg2bBgAYOTIkYiMjERkZCQAIC8v77VjXDdGxx7dMWHNCnQdPlgu52e8Pp6+0zBlw1rYvunSeOJWgrrHfZ+yYQ2mbFgLw/bmilZF7shk4TANDQ04OTlh8ODBmDp1KgIDA2FoaCj18Q0VhvwM0TQnY0s2FLs+pB2tM2zYMFhaWmLMmDGorKxs0rEN2aYoJxf6ZiayvJxWwf79+185mry58WKqyitwZKU/2poYYdK6Vc1Vl6FGdB7QF9M2rkP643jo6Oth1KK5ilaJoUIYtDNDm7ZtYdXZUdGqtAhCoRALFy7EhQsXEBMTgxMnTiA6Ohrr16+Ht7c3AKBXr15ITU3FpEmTYG9vj6ioKABAfn4+AgICxC84v/jiC+Tn58tFTy6PBz0TY3Rw6woOhyOXPBivh13XLgCADm5d4b18kYK1Ycgb91Ej4Dl9CmqEQnQe4KFodRgqhLFle3B5PDj369Nq6nFpBnLVTSMUClFYWAhTU1M4OzuDiPDXX3/h/v37WLFiRYP5NHdUYG1nkPUbzk0+liFfHHv3AAD0m8xeigHqH/fd5a0B4pnCHdy6KVgb+dNoJ600BuXz+QgKCkJ1dTVSUlIQFxcHJyenZheGvPTnnbRWllI60ZLHAAAgAElEQVQf05qQZqSPm5sbdu/ejYSEBHEYCqD5I30EObnQ1NaGjoG+zK6nNXDjxg3k5eU1uF8W8WLSHsfh/Paf0G34YHiM926WvgzZ4jr0LYWMROzg1g0ztm1EZkISdvl9iNvH/0C/SeNg6dw6OtwYzcfA1BQA4NDDTcGatBznz59H586d4ejoiK+++goA4O/vj7NnzwIA7t27B1tbW+jp6SE8PByuri/CiPzyyy/iF2779++Xm456JsbgcrnQNTBA+04OcsuH0XRsXV1QlJuHa4eOYdB7k+E+aoSiVWLICQunTpi0bhWS7ofj+qHj6NC9K7Tb6ipaLYaKYGItCnOgb2oCaxfWGdgYGhoaGDhwIN577z0MHDgQ77zzDoYOHVpv2uaOCjRsJ+qktXHp3Cyd1YHGZoN6enqioKBAHNJm7dq1ctNFx8AAls6OqCgtg9vbw9FGX09ueakK6hz3ncvjwXvZQmQlP0FFaRk6uHVVtEpyp9FOWmk6Ak+fPo3BgwcDgPgNV1JSUrM7AgufZQEAjK3YSNr6kGakz+bNm6Gnp4dOnTohLCwMZ86cAdD8kT5FObkARH8oGLJDVquCXzt4FHF3QjF25VKY2dvWezxDEnmHorDr2gUzt2+Cz5YvWzS2laWzI2bv/BYFmc/w8/wlKC8uwV87A1FaKMA7qz9uMT0Yqo2+uaiTtmOP7grWhFEXg+d2AQAHd2YbZcLOtQtSo2JwbusPSLofjknrVrHYwWpIG722mLFtIypKSnBw+RpEX7sJnqYGHPv0VLRqDBWhbiza1hL7XZqBXHXT8Hg8GBoaIjc3F3w+H9evX0dubi7KysoQHByMHj16yEVPA/PnI2m7sM7zxmaDAqLBSLUhbQICAuSmS6de7uByuQjevgvaujro+X+te/FzdY/77jF+DNp37IBz23YiNSoaDu5sJK1UHYEXLlxAbm4uHj16hCtXrmDFihXIy8trdkdgdWUlBNk5LNzBK2hspM+IESNgYWGB6OhouLu7S8T7ac5IH0G26G2kgblyBZRuTbzq7TAR4ehnAaiurMT7m9a3+nh40iDvUBRPH0bj1MYt6DrME3N2bW2RUTZmdjaYu/s7VJSWYvfcxSjOE9W/ZYIiBH//Ezr1dIfb28PlrgdDtdHS0UGbtm1RU1MDB9ZJq1Tom9bppO2h/n9aVQVtXV2069gBT6OiUVMtxMHla1BRWgrfrV+xEZZqBIfDwdSvPoeJlSUOfPwZinJykRL+EOUlJXijlXS2MZqPqbUlqquqkBYT12rKjTSDwIKCguDr6wsAmDhxIi5fvgxA1O/QtWtX6OjogMfjwdPTE9HR0XLR06CdqJ2ra2AAE+vWPbO3sdmgLUmn3u6oKC1DyIlTeBoVjX6TxilaJYWiznHftdvqwuvD2Ui8F4ZHV24gOTwSVp2doKXTRtGqyRWpYtI21hEIAMuWLcObb76Jbt264fjx4+LtzZ3yl5+eyUbSKiFFuaJKWt/MtJGUjKYgy3gxgqxsnPDfCNs3XeDVihYjeF1aIhTFzV9P4sin/nBw744P9u2Enon8Vv02bG+OeT9/Dy6Xi91zF6Mg85nE/n9PnUNq9GN4L18ELR0duenBUH1q6/mUsEjom5rAvIOdgjVi1FI7kvZJ5CM2klaJsOnSGVwuF6lRoo6DopxcHFq+Bqa21pgSsEbB2jFkxdDZPnAd8haCvt2OlHDRIkbC6mok/Hu/1YyIZDQfYytLFGQ8Q/SNW7Dv7toqpm5LMwhs7969MDU1haurKz7++GN8+umnAICCggJs3boVoaGhCA8Px4MHDxAcHCwXPQ3NzVAqEAAArFnIg0bp168fwsPDERwcjC5dujSYrrmxgh379ERKeCSE1dW489tpWDp1ahWjK1sjQ2dNh76pCYI2fw8ASAl/CJ6GBmxdGy5f6oBMFg6TJ/kZmTC2aK9oNRj/QVAb7oAtHiZTZB0vJuryNYScPI0hs95Hp15Nm57PkERWoSge/Pk39n20Au0dOmDhgZ/k8hKqrZEh5u7eDl1DAwR+sBRZyU9eSkM1NTj91VYYtW+HYbN9ZK4DQ30weF7PR/z9DwAW8kCZqO1Aj7x4BSbWljBq307BGjGAF4uGpUbFiLcl3Q/Hn9t+RLcRQzDYd5qiVGPIiM79PfD2wrl48OcF3Pz1pMS+xzfvwNTGioWbYkiFibUV8tLSEXvzDngaGuLFcdSdxgaBVVRUYPLkyYiKioKHhweSk5PFxx45cgSurq7o2rUrVq5cKTcdDdqZI/7OPQirq1m84EZ48OAB7O3t4ebmhh07duD06dMNpm1OrOC2RoawcnZEwr8PAABh5y+hrKgYfVv5aFp1xKh9O3j6TMX9c3+BH/0YAPAkQrRIr7rHpVX+Ttr0TBhZtm81q12qCuVFxagqr4DBa7z9as38+uuvCAkJQefOnZGamopZs2bB3NxcrvFigr7ZjpwnqZi20R86BgbNPh+jcRr78/H45h3snvMR2poYYdHBn2W64I+2ri5m79oKU2sr7F20Avzo2AbTpkQ8xL2g8xg8YxpMbW1kpgNDvdB/HtYm8V4YinLzWtXiYcqOgbkZSgsFSPj3HgCgAxtJohTYunZBTiofJQWFEtuvHTyKiL8vY/SSD9CRvThVWYytLPDepvXITEjCb+u/fml/7O27AIA3Bni0tGoMFcTE2hK5ael4EvkIZYKiVhPyQBUwbGeGPH46niUms8XDGqGoqAglJSUARB3wmpqaMDWV/YzbWt+ZeE/USVtZVob75/5C95FD0dbIUOb5MRTH24vmARzg/PcvQjaUCYqQmZCk9iOnlb+TNiMTmtracp0WzHg9BDm5bCRtE5k2bRqsrKygpaUFW1tb7Nu3D9nZ2XKNF1NZVo4jn66DvqkpJvnL722zuiPLUBSAqIN054wFAAdYeOAn2Hd3bfygRtDQ0sLM7zfB+g1nHFj2GZLuhTV6zLltO1FdVYWxKz5qdv4M9aR2JK0gOxfJYZHo2JN10ioL+qYmEGTnID02ARWlpSxmsJJg17ULUh/WHyPx+NovkZuahumbA1hcfxVEQ1sbvts2gsvlYv+SVagsK38pTR4/HdkpT1nIA0ajaOnoQN/UBHn8DNQIhYi7E4o3BrJyowzoGhpAQ0sLhVnZSHscB5subyhaJaWmffsXM5979+4NLpeL3Nxcmefj2LsHKkpLkfroxUyVkN9OQ1NbG73GjJZ5fgzFYO3ijN5jR+P6oePIz5CcVZwcHgn77q5qPYhT6Ttp89JFRmFxaZWPopxc1sBQEfjRj3H+h93oPnIoeo9lDux1kHUoCgDIjE/EDz7zUFoowLyfv0fn/q8/6obL42H65i/g5NELx9YEIOb6LamOK8rJxcWffsGbQwaxhgGjXvTNzCCsqkZpQSGS7ofD1MYKhu3NFa0WA6KRtEU5eagRCvEkIgoObuo9skAV0Dc1gbGlBZ7WaUDWpaK0FPuXfAptXR34fLsBXA2e1OfW0mkDjwljsOjQz+g7cWzjBzBkzoTPlsO2yxs4smo9clP5DaaLvX0XnXr1gIaWVgtqx1A1ahejyktLBwDE3roDI4v2Mp1hxXg9DNqJ/ucUZueAHx0LfVOTVt3ubWw26MSJExEVFYXw8HB8//33mDJlilz06NS7B5IfRKKmWijelhmfiOSwyFa/gJg6MWb5RyjOy8flvQdf2vck/CF0DQzQrmOHlleshVD6TtqCzNpO2ta9oqIyIsjJhb4pG0mrKlzd/ysS/r2Pd1YvY1Pb60ERoSgAIC8tAzt85iLnSSpm/bAZbm8Pb/I5OBwOJq9fDdehnvjjqy148OffTTr+xuHjyEp+gnErl4KnodHk/BnqjYGZKYry8kBESH4QDgDoyEIeKAX6ZiYQPA+pkvwgApbOndBGr62CtWrd1C5m0dBIWgB4lpSCE/4b4dCjO7w/XtToOU1tbeC9fBHWXjqDyetWwa5rF7iPGiEznRnS0XfSOPR55//w9669jb4IfXzrLrR1ddjodsYrMbG2AlC3k7Y2VAZ7aa5oDJ930gqycpAWIwod1poXD2tsNujOnTvh6uoKNzc39OvXDyEhITLXQc/EGJZOnZAQ+vJM05ATp2DewQ6OfXrKPF9Gy+Ly1gA49umJv3ftRXlxyUv7k8NEC3Wqc8gDpe+kza8dSWvJRtIqG2wkrWpBNTU4uvoLCKuq8d7X65o0eqc1oIhQFLUU5+bjx1kL8CQiCu9tWo8BUya8Mj2Hy4WxpQWcPHqh76RxmP7tBvQeOxrnf/gZt46efOWx9SGsrsbpTd/BvIMd3pr+7uteBuM18fLywuPHjxEfH1/vAhi+vr7IyspCWFgYwsLC4OfnJ7FfX18fqamp2LFjh1z00zc3hSBb1BGYHpuA8pIS1vGgJBiYiUbSAqI/rVweD/bdmh86hfH62HXtAmF1NdIex70yXfhfl3D98HG8Nf3del/OcTgcvDGoH2b/uAWfnjuOQdMmI/bWXfzgOx93fg+C1RtO8roERj3Yde2Cd1Z9jJibIfj7p32Npk8MfYDqyspmzZBhqD8m1qL2bV56BgCg4FkWMuIT2cwmJcDweRtXkJ2N9NgE1NTUsMXDFIw4Hm3og5f2RVy8gpKCQvSb/E5Lq8WQIVwNHryXLURW8hOEnKx/8bmcp3wU5eap9eJhSj9kqry4BGWCIhbuQAkR5OSirZEheJqaEFZVKVodhhQUPMvCb19sgu+WLzHyAz/8teNnRavEeE55cQl+nr8U0zd/gfGfLUdbYyM8+PMCzOxsYGprAzNbG5jZicTE2lJiCmVVRQUu/bwfl3b/8tr5x966g6gr1zF83kzcP3dB3CnHkC9cLhc7d+7EiBEjwOfzERoaiqCgIMTESE6VPn78OBYtqn/EXUBAAK5fvy43HQ1MTVHwLAsARNPqwx+yuLRKQBu9ttBsoy1+Vp9EPoKwuhoOPbqLFy5itDy2b7rgWWJyvbFK/8u5LT/A9k0XTF6/ChlxCXiWlAIdA330Hvc/DHh3AszsbCDIzsHFn/bhzskzYlu37+SA/pPfgbGVhXgwA0N+6JkYw3frVyh8loUjK9eBamoaPaayrAzJDyLxxsC+OLf1hxbQkqGKmFhboaK0DMW5+eJtsbfuYuC0idDSaSNVPcKQDwbtRJ20hVk5EFZVIedJKls8TME49u6B8pKSehdFrq6oQOiZPzFo2mTom5qgKDdPARoymovH+DFo37ED9i1aIRHS4r88iXiIDmoc4kvpR9ICosXDjC3aN56Q0aIUPW8ssJAHqkXk35fx76lzGDbbl3W0KBnVFRU4sHQ1Qs/8Ca8Fs7Hqz98wZ9c2jF+9DB4TvGHY3hwZ8Ym4fugYTqzbiB9nfYiA4WOxqvcQnN+xu/EMGiHom+/B09DA/5bKJpQDo3H69OmDhIQEJCcno6qqCseOHcPYsdLHmuzRowfat2+Pv/9uWoiLpqBvbiqeUg8ASQ8iYOnUCToGBnLLk9E4tTNZip4vzFFZVoa0x3FqPf2rMfbu3Ytnz57h4cOH9e739PREQUGBeFT62rVrZa6DXdcuePqKUAd1EVZX4+DyNagsK8eM777GRP+V+PxSEMauWAxBdg4OrViLDSPfwd+79kq8OEt/PkrX+g02qkveGLQzx/vffIG2RkY4sHQ1ygQCqY99fOsOLJ06iWNbMlqe152p0r17d9y+fRtRUVGIiIjA5MmT5aKfibUV8p+Poq3l8a070NDSQqdePeSSJ0M6DMzNUJJfIB6IlBYTy0bSKhhRPNoI1Ajr77y7c/IMeJoa6POOdwtrxpAF2m114bVgNhJCH+DR1ZuvTJsc9hDm9rbQMzVuIe1aFqUfSQuIQh6wkbTKh+D5FEt9M1MUZD5TsDaMpnBq41Y49OiOqV99ji0TfVBeVKxolRjPqREKcWzNBsTeuguepiZynvKRm8pvkTfCufw0XD3wK0bMnYmQE6eREh4p9zxbO9bW1khNTRX/5vP58PB4eXrshAkT8NZbbyEuLg5Lly4Fn88Hh8PBli1b8P7772P48IZjGc+ZMwdz584FAJiZNS1EDYfLhZ6xkXhKPSDqpAVEsaCir736TxRDftS+IBVkv1g9OTksEv0mjgNPQwPC6mpFqaYw9u/fjx9++AEHD7680EQtN27cgLe3fBpwprY20DU0wNMo6TppAUCQlY1Dy9dgXuD3MLJojwd/XsCtY78jPTa+wWMy4hNRIxTCqrMToi7LbxR9a4TL48G+uyveGNgPLoP6iTvCf139RaMhLP5L7O078F62EJ3790Ho6T/loS7jFTRnpkppaSl8fHyQkJAAS0tL3L9/HxcuXEBhYaFMdTSxtkRemmQnbfKDCFSUluGNQf0Qc+O2TPNjSI9he3MU1nk5xo+Jg/vokdA1NEBpofQvaxiyQc/UGBadHF5Zl2anPEX83XvwmDAGl/cdkmrWA0N5GOrnA31TE+xZsKzRtCnhopfxHbp3Vcv/QaozkpbFpFU6ip6PrDIwN1WwJoymUllWhiOfroOhuTkmrv1E0eow6iHs/EXcCwpGSnhki07ZubznIAoyn+GdVR+Dw1UJF6H2nD17Fh06dED37t1x8eJFHDhwAACwYMECBAcHIy0t7ZXHBwYGonfv3ujduzdycpoWxkLPxBhcHk9iFN/Th9GorqpCRxaXVqGIR9Lm1OmkfRABLZ02rXa0z40bN5CXp7gpjnZdRYuGSTuStpbEe2H4dvz7+GL4WPy2/utXdtACQFV5BbJSnsKaxaWVCfqmJug9djSmf7sB668HY+GBnzBkxnsoKyrGua0/4JuxU3H/7PkmnzcjLhGFWdlsESgF0ZyZKvHx8UhISAAAZGRkICsrC+bmsh8RbWJtJV40rJbqykokhj5g5UbBGJiboTArW/ybLR6mWByfjyyvLx5tXUJ+Ow1TGyt07t+nJdRi/D97Zx7eVJm+4ZvuBZouSWnpQlvoAqUUChTEFcUBcYFRHAVmRlB+ijqKjjqDg6OICyPOuIsOwyLLgIg7KMgwIqMsxQJtofuWlu5ruu9pf3+kiRS6pG2Sk6TffV1e0uQk54E0yXfe73mf10C4eXtxw+8Xc+bAIfKTU/s8Pj85lbaWFquNPLAYJ62zzAWnkSO6nfAmkIZLnbQCyyMvMZnDH2zh1iceJvV4DGf2H5RaksAMaGls4sA/3uP3/3iFmXfdQcxnX0styaopKCjA399f97Ofn98VRddLi05btmzh9ddfB2DWrFlcd911PProo4wcORIHBwfq6ur4y1/+YjB9ss7P90udtG3NzeQlpoi4FInRfvfWXFKkzdFNvJ3c70LhUGHWrFnEx8dTWFjIM888Q3Jy9/9OA3Gg+0dMoKWxiZIsZb91lSpz+3V8YVoGgZOtd2iGsRkzKZzwG65l/HWz8A8fD0B1aRkX/vs/Un46SUZMrEGuOdJOnibixusZZmMjXF0mZjCdKpcSHR2Ng4MDWVlZBtXnLJPh7DKSisuKtACpx08RfsM1yP39qMjL7+bRAmPj6ulJUfovr3l+isZJ7zchlIyYWKlkDVnGRU+lsbauz46GxO//R21FJbPuuZPU4zEmUicYLPMfXwnD4NC7+sX3tbW0kJeUarXDwyzCJqXqbKUXkQfmRV1lJe3t7bqLeIHlcXTbLjJ/Pstdzz2NYoyf1HIEZkL84e/JjD3HraseFrmjRiY2NpaQkBACAwOxt7dn8eLF7N+/v8sx3t6/fPctWLBA16r5u9/9joCAAIKCgnjmmWfYuXOnQQu0oMmjBbpk0gJkn43HL3w8Ds5OBj2fQH9kCjmtzc001tTqbqutqKT8Yj5BwuXcLefOnSMgIIApU6bw3nvv8dVX3U8OhoE50MdEhFOQktZjXp4hKUxNx8N3NM4yF6Ofy9qYNOcGntizlTn/dx+tjU0cfOefvHH3fbw0ZwH71q7nwn+PGcwUknY8huGuMvwjJhjk+QSGpadOFS3e3t7s2rWL+++/n46Ojm6f48EHHyQ2NpbY2Nh+RQrJ/UYDoLos7gDQFZfGXyvctFJgY2uLi8KjSxdRY00NFfmFwkkrEcEzpvWaR6tF3dbG6S8OEH79Nbh6iTxwS8B3QijTF8znx12f9CtCMyf+Av4Tx3cZpm0tWEaRtjNQ3X30aImVCC6lvU1NvapKOGktmI72dvasWYe6tY3fbliHrZ1FmOsFJuCr197EWebCvEdXSC3FqlGr1Tz22GMcPnyYlJQU9u3bR3JyMuvWrdPlZq5atYrExETi4+NZtWoVy5cvN5k+mVzrpK3ocnv2uXhs7e0YM2miybQIuuKikHdxOGtRxiVYrbNgsNTW1lJfrym+HTp0CHt7e+Ryw6xhbOxs8ZsQ1q882sFQkKqJRPAJDTbJ+ayJyLk3UVNewQvXz2fj8kf4fsuOPiMmBkp6TCzt7e2Mv/pKB6fAuOjbqdLS0gJoOlWmTZumu8/FxYVvv/2W5557jtOnT/d4noFGCrn7aK5rL8+kBc2MgLLcPBF5IBHaqKdL4w4AClLT8RNFWpPjopAzKiigz6gDLac//xqGDWPmXQuMrExgCBY8s4raikq+37Kj74MvISf+PHYODlb5nrSQIm0xIJy05khteYXIpLVwqkvK+OSF9YyJCOeWxx+SWo7ATChKzyL+u/8y5ZaeB1IJDMOhQ4cICwsjODiY9evXA7B27VoOHDgAwJo1a4iIiGDKlCncdNNNpKWlXfEcO3bsuGLwiSFw6SbuADS71+3t7SKXVkJcFB5XFM9Bk0vrIvdAEeDfzaOGNl5eXro/R0dHY2NjQ0XFlf+GA8F73FjsnRzJS0zp+2ADUJjeWaQdPzTzhwfKsGHDCL0qmvSTP3dxoRuLhuoa8hJTCBOOSJMzmE4Ve3t7vvzyS3bu3Mnnn39uFH1yXx+AbuMOANJOxDAueqpVusTMHW3me83lRdqUNDwDx+A4YrgUsoYswdGaPNrM2LN6HV9ZUETaydNctWghNra2xpQmGAQOzk5c97t7CZ4xjf98uJXm+oZ+PT4noXN4WJT15dJaRJG2rlJFa3Mz7t5efR8sMCm15RW4GMiFIpCOxKP/4+S+L7npgd8TclW01HIEZkJ2Z7HHTXz2DllknnIaampo63QaaWmqraMoPZMgkUsrGTJPBbXdFBiVnbm0Y6OGXgF9z549nDp1irCwMPLy8lAoFKxcuZKVK1cCcPfdd+tc6e+++y6LFy822LkHOjRsoNRVqKguLRPDw/qJT1gIIz3cST/1s8nOmXYihjER4SI+yMQMplPlnnvu4frrr2f58uXExcURFxfH5MmG/Uz18POhoaaGptq6bu9PPR6D43BnEV8jAa6jNEXa6tKuzuj8zuFhPmHic9eUjIueSmNNra6DRB9O7fsSVy9Pwm+4xojKBP3Fxs6W8ddexdK/reXFY9/y69VPkns+iZjP+z8Dpa5CRVluHkFR1tc9ZhG9zR0dHVQVlQgnrRlSU17BqLGBUssQGID9f3+HsdOmsOTV53nj7vuoV1VJLUkgMflJmuma/hPH9ysjSGA9uCjk1JR17zRUnksg+te3Y2NnS3ub8TM4BV1xkXugPJdwxe2lylzqVVUETZ3Mz199I4Ey6Vi6dGmXn2NjY9m06ZchFBs3bmTjxo1GOfeYiHDqq6qpyC/o+2ADUZiWga9w0vaL0M6J3+kmHPyTduI0cx9ZQeisaBIOf2+y8wo0nSqHDh3qctvatWt1f16zZg1r1qy54nG7d+9m9+7dRtXm4Tuayvwrow60ZJ05R1tLC+OvuUoMqjIxslGaLNNLM2kBCpI1RVq/CWHdfv8KjENw9FSyz8b3a/hiyo8nqSop5arf/JrEoz8aUZ2gL4YNG0bA5ElMvW0uk+fexEgPdxqqazj37X84d/A/KM/G95j53Rc58ecZf+0sAyuWHotw0gKoiopxHy2KtOZGbXmFyKS1Elqbmvn3n19ghJsr9667csEqGHoUpmfS1tqK30Qx8GSoIlPIu22pB43T2nG4M77jrS8LytyxtbNjpId7j6+NMi6BICts/zJn/CeFmyyPVktBagZeY4Owtbc36XktmbBZMylMz+zxvWMMLiYm01BTQ5jIpRVcgoevD5U9RB0AtDQ2kX02nrBrxO+NqXEd5Um7Wk1dparL7bUVlZoOBivMwDRXZKM88QwcQ+YZ/fJotbSr1Zz+7GvCrp6Jh5+PkdQJesM7eCy3PvEIaw59zuO7NhG98DYyTp9h2+N/4sUbb+ezlzaQfSZuwAVa0MSvucg9rG4AuuUUaQuLhZO2G+bNm0dqaioZGRmsXr36ivuvu+46zp49y7Rp01i0aFGX+9ra2nQtPF9/3X+LOUBNWQV29vYMdxUtXNZAUXom37y5kYk3Xsc1ixf1/QCBVaNubaUoI4sxYir1kMWltyLt2XgAkUsrASPl7oCmm6U7lOfO4xk4RnecwLg4ODvhPS7IZHm0WgrTMrC1t8N7XJBJz9tftm7dSklJCRcuXOj2/htuuIGqqirdmvT55583ig57J0eCpkaSftJ0UQegKRZkxJwRQ6AEXfDwGU1lYc9OWtBEHowOGYeb1ygTqRJAZ5xQeSXt6iu7hApS0vELF0VaUxEcHQVA1s/9K9ICnP7yAHR0cNWihYaWJeiF8ddexdOf7+JPX+5m9vKllGQr2f2XF3lx9m38+88vkHTsOOrWVoOcSxvxFTjFuowJllOkLS5B5qkQ4emXYGNjw8aNG5k/fz7h4eEsWbKECRO6FlMuXrzI8uXLux2M0djYSFRUFFFRUSxcOLAPL+3Fu3DTWg8/7d5Hyk8nueOZx/EOHiu1HIHE5CWm4DdxvNQyBBLhopD3WAisLa+gLDePsdNEkdbUyBSavLwenbTxmkVrkJUtWs0V3wlh2NjamiyPVktBajoAPmaeS7t9+3ZuueWWXo/56aefdGvSl19+2Sg6xk6Lws7BwaR5tFpSj8fg6uUp1lUCQBNXY0iCrfAAACAASURBVO/kSGVBH0XaEzEAwk1rYmSjFFSXlXV7X0FqOqOCArBzdDSxqqHJuOlTaaipoTA9s9+PrS4pI/l/x5lx5+3Y2llEyqdVcNdzf8JxuDNfvPoPXpqzgC2PPs25bw7T3NC/wWD6UJqdQ0NNDYFWlktrOUXawmIA3LzFTqKWGTNmkJmZiVKppLW1lb17915RbM3Nze3RuWAItBfv2imYAutg719fobG2jt+9/pJYhAxx8pNSGC6TIffzlVqKwMQ4Dh+O43BnassrezxGeS6BoKlTGDZsmAmVCbQboz3lBecnp9Ha1CwGzpiIMRGaoWF5SaYt0lZczKe5ocHsh9j89NNPVFb2/DliKkJnRdPa3Ez2uXiTnzvtZGexTUQeCEDXfl2Z33PcAUBJlpKq4hLCrNCF3Vc3qIODA3v37iUiIoKYmBgCAgK63O/v709tbS1PP/20wbW5jvK8Io9WS35yGrZ2dowOGWfw8wquJHjGNE1LfD/yaC/l5L6vcJF7EDHnBgMrMx/MpVsFwHdCKHI/H/77rx2c2Pv5FZEhhqajo4PchESrMyVYUJFWs9Mocml/wdfXl7y8PN3P+fn5+PrqX0hxcnIiNjaWU6dO9eikffDBB4mNjSU2NhaF4spCbI3OSevRT/UCc6auUsXe515mdMg47nj6ManlmIy+Foz+/v4cPXqUc+fOkZCQwPz58yVQaVryLhkeJhhauHh2FgLLu79QAcg+F88IN1cxQNLEyDpfm56ctOrWVi4mJhMUJYq0psA/YgKVhUXUVRj3YuRyOjo6KEzLtIrhYbNmzSI+Pp6DBw8SHh7e43F9rUt7I+zqmSjPJdDa1DxYuf2muqSMoowsxl9rfcU2Qf/x8O0s0vaSSasl9XgMobNmYGNna2xZJkOfbtAVK1agUqlITEzkrbfeYsOGDV3uf/PNN68YCmcoXD0VVJf04KRN+WV4mMC4uHmNQjHGj8zYuAE/R/rJ01TkFzLrN782oDLzwly6VQAib74RdVsbST+YblibMu483sFjcZa5mOycxsZyirRFGietKNIajoCAAKKjo1m6dClvv/02Y8de2YK1efNmoqOjiY6OprybC/XaThePrJ8L5aGMpRQC006e5tiOPVy75G7Cb7hWEg2mpLsFo5OTU5dj/vrXv7Jv3z6mTp3K4sWL+eCDDyRSazqKs7JpbW4Ww8OGIDKFthDYswMu+6xmuvHYqVNMokmgQeukra3o3eXsOz4UB2enHo8RGIYxk8JNnkerpTAtw+ydtH1x7tw5AgICmDJlCu+99x5fffVVj8f2tS7tCReFnNEh4ySJOtCSdvI0Y6dNEe9JAR6+owH6zKQFTeSBs8tIAiZNNLYsk6FPN+jChQvZsWMHAJ999hlz5szpcp9SqSQpKcng2mzt7Rnh7tajk1ZVVEx9VTW+4Za/OWbujIueCkDmz2cH/BwdHR3EfPYVITOn89vXXsTLCk0F5tKtAjDp5tlkn4mnvqraZOfMidc4iAMmR5jsnMbGYoq0VSWltKvVYnjYJRQUFODv76/72c/Pj4KCAr0fX1io2b1VKpUcO3aMqKiofmtobmiguaFROGn1xNIKgQff+Sf5yWksfvk5q4+06G7B6Obm1uWYjo4OZDLNkDxXV1fde8iaaW9TU5iaIZy0QxCZrqW+50JIRV4+NWXlIpfWxMgUcupVVajb2no8RhmXgK29Hf4RPbsSBYNnhLsbcj9fk+fRailITcfZZaSu6GOJ1NbWUl9fD8ChQ4ewt7dHLjfsrIPQWTMASDPx0LBLSTtxGjsHB8ZO7/96W2BdyH19qCmv0MvVnXH6DOq2NsKsyIWtTzfopceo1Wqqq6uRy+WMGDGC1atXs27duj7PMxDnvbZTpaa057VPQUqacNKagHHRU6mvqqY4I2tQz/Pjrk/4Ydu/mXjjdTzz5W7ue+NVRocGG0ilZWCKbhWvsYF4jQ3kwvfHBqm2f+QlJqNuayNwivXk0lpMkba9TU1NWbko0l5CbGwsISEhBAYGYm9vz+LFi9m/f79ej3Vzc8OhcwibXC7nmmuuITl5YBcYteUVuot5Qe9YWiFQ3drKv1e/gJ2jI0vWv2DVuZPdLRgdLhtU+OKLL/K73/2OvLw8Dh48yOOPP97tcw3mC84cyUtOxS98vFW//oIr0bk1e2ip15J9LkFkn5qY3ga6aclJSKS9vV28NkZGu4F1MVGaIm1hagYAPmGW6+ry8vLS/Tk6OhobG5tuB94OhtBZ0dRWVFI0gOEzhiL7bDwtjU0il1aAh6+PXlEHAE21deQmJDLeCnNpB8KLL77IW2+9pdvY6Y2BOO9dR2nm31T3skFdkJLO6JBxVhVBYY4Ez5hK1pk4Ojo6BvU8bS0tfPPWRl6ddxffb9lB6KwZPPP5Lu5/dwP+Q6BT0BTdKqBx0QJc+P5/g5Hbb1oamyhMy7CqXFqLKdKCZniYiDv4BbVazWOPPcbhw4dJSUlh3759JCcns27dOu644w4Apk+fTl5eHu7u7mzatInExEQAJkyYwJkzZ4iPj+eHH37gtddeIyVlYK16teUVuot5Qe9YYiGwLOciX294i9Crornxgd8b7TyWwJIlS9i+fTv+/v7ceuut7Nq1q9vC5WC+4MyR/KQUnEaOQBHg3/fBAqtB5imnrbWVhuqaXo9TnovHfbS3+H42ITKFvM/ieVNtHcUZWYyNsp5FqzkyJiKc9vZ2CpLTJDl/UWY27Wo1vuPNN/Jgz549nDp1irCwMPLy8njggQfw9PRk5cqVANx9990kJiYSHx/Pu+++y+LFiw16/mHDhhE6awYZMbGDvtgfDG0tLWSdjRPFNgHuvt6oCvqOOtCSeiIG/4kTGOnhbkRVpkOfbtBLj7G1tcXV1ZWKigpmzpzJ66+/jlKp5Mknn2TNmjX84Q9/MJg22SjNNVV1afeZtAD5KWnYOTjgNTbIYOcVdMV9tDdyP1+yYs8Z7Dnrq6r57r1/8cq8O/lu42bGTp3Ck3u38eCHbxFoRQW+yzFFtwpo8mhz4i/02oFnLJRx5xkzaaLVbJxYVpG2uEQ4aS/j0KFDhIWFERwczPr16wFYu3YtBw4cAODMmTP4+/sTFxeHQqEgIkKT1XHq1CkiIyOZMmUKkZGRbNu2bcAaakSR1qCYYyHw9BcHiDt0hNuefITrfnuPUc8lFd0tGFtaWrocs2LFCvbt2wdATEwMTk5OVuGU7QsxPGxo4qJHIRB+yaUNEpEHJsNFIaemrO/XRhl3noApk7CxtY5FqzniPymckiwlzQ0Nkpy/rbmZUmUuPmZcpF26dCk+Pj44ODjg7+/Ptm3bKCsrY9OmTQBs3LiRiIgIpkyZwqxZszh16pRBz+8dMg6ZQi5pHq2WtOMxjAoKsOh4CsHgGGZjg7u3NxX9KNKmnYgBIPTqGcaSZVL06Qbdv38/y5YtAzQbOUePHgXg+uuvJygoiKCgIN5++23Wr1/Pxo0bDabNtTPeraaPIi2AX7iIPDAW2liYTAMWabU01dZx5J/beGXenXz79gf4hYfx+K5NPLzlPV0OrjVhim4VDz8ffCeEcv7IDwZ9Xn3Jib+Ag7MTPqHmuxbqD5ZVpC0sxs3Li2E2FiXb6qktr9Dl9wh6x5ILgR8/9zLnj/zAr5/9Izc/tFxqOQanuwVjVVVVl2MuXryoG1wwfvx4nJycKCvreRFnLZQqc2luaBTDw4YYMj0LgUUZWTTW1Frd8LC+hjw6ODiwd+9eMjIyGD9+PAEBAYBmKGdDQwNxcXHExcXx4YcfGlybzFO/ArryXAJOI0YwOmScwTUINIyJkG5omJbCtAx8x1tu3IGxCdPm0Z6KlViJZngYQNjVwk07VHHzGoWtvZ3ecQegaa+vrai0Ghe2Pt2gW7duRS6XExERwVNPPcWzzz5rEm2uozxpa2nptYuo4mI+TfX1IpfWiATPmEq9qoqSzGyjnaO5voGjW3fx6i138fXf38FrbCCPbtvIo9s/wMllpNHOa2ik7lYBiJwzG8DkebRacuLPAxBkJd1jFlXtVBUWY2tvJ1ybZkZNWQXDZTLsLmvbF1yJJRcC1a2t7PrT85zZf4j5j6/ktj8+KrUkg9LdgrGpqanLgvHpp5/mwQcfJD4+no8//pjly5dLK9pEtKvVFKam4x8unLSGpq9C4LJlyygtLdUV/FasWAHA5MmTOXnyJImJiSQkJHDPPYZ3uLso5NTqsdPe0d6OMv48Y6dZT5G2uyGPEyZ03aRYsWIFKpWKkJAQSkpK2LBhg+6+rKwsoqKiiIqK4pFHHjGoNmeZC3YODn1m0oLGSQsQNNU6Fq3mhruPNyM93CXLo9VSkJqB+2hvhrvKJNVhroRePYPizOxenXGmolSZS2VBEWHXiFzaoYrWRV3ZDydtR0cHaSdOE3b1TKuZD9BXN2hzczP33HMPiYmJzJw5E6VSecVzrFu3jjfeeMOgumSjFFT3MjQMNK9HQWo6vqJIazTGTTdMHq0+tDQ28ePOvbx6yyIOvPE+46ZFMXH2dUY/r6GQulsFNHm0+clp/fpcMyTVJWVUFhZZzfAwyyrSFmledA+Re2dWaN08LgoPiZWYP5ZeCGxXq9n715c5sfdzbnrg99z13DNWs1iEvheMKSkpXHvttUyZMoWoqCiOHDkipVyTkpeUiu+EMNHJYED0KQQCfPLJJ7qC39atWwFoaGjgvvvuIyIigltuuYW3334bV1dXg+rTt6UeNI5Nr7GBjHB36/tgC6C7IY8LFy7scszChQvZsWMHACqVSre5Zmxkeg50A6gqLkFVVExQlIiiMAZjJk0ENJOFpaQwLR0AnzDraPMzJHaOjoydOoU0M4g60JJ28jQhM6dbTXaeoH94+PkAUJnfv8HAqSdiGOnhLgqDRkbmqdBrQ6cgJR2fsGCxLjYC7j7eyP18jBJ10BttLS38b+fHtDQ2CZd0P5CN8iRwyiTJXLRacuMvECictKZHVVgMIHJpzYyaCm2RVjic9cHSC4EdHR188eo/OLp1J9csXsTiV54XeYdDgLzkFByHOzMqKEBqKVaDPoXAnsjIyCAzUzOlvKioiNLSUjw9PQ2mzcbOlhHubnoVAuGSXForKQZ2N+TR19e312Oqq6t1gxiCgoI4d+4cx44d49prr+3xPAMZAKn9rtV3MIMy7rzVvC7mxpiIcFqbmylKz5JUR2Ga5rPAnHNppWLs1EjsnRzNIo9WS+rxGJxGjiBwsnU4fgT9w8PXh3a1mqrikn49Lv3Uz7S3tzP+WuuIPDBXXEd5Uq3H92tBSjqOw4fjKYbqGpzgzlxYQw4N05eO9nYK0zPwnSAihPRl0k3XA0iWR6tFGX8BN69RVjHIWK8i7UDbMQHa2tp0t3/99deDEqsqEkVac6S202klM4PcVIHp+PbtDzn4zj+ZvmA+v//7y9ja20stSWBE8nXDw0QuraHQpxAIsGjRIhISEvj000/x8/O74v7o6GgcHBzIyjJcoWikhwc2NjZ6tdQD5CWl0NrczFgxPIyioiLGjBnD1KlTeeqpp9izZw8uLi7dHjuQAZDaDPjaikq9jleeS8DVy1OsnYyAf8QEClLTUbe1SaqjrlJFdUkZvmHiovJyQq+aQVtrK9ln4qSWoiPz5zOo29oIu1pEHgxFPHxHU11a1u/PjXpVFflJqVaTS2uuyEYpqOkj7gB+GR4mnM2GZ1z0NOoqVRQbMY+2NzQu6RCr6hY1JpNunk1xlpJSZa6kOnI6I76sIfKgzyLtYNoxARobG3W36+sQ6omWxibqVVVWUR23JmpE3MGQ5fstO/jyb28S+asbeeDd17F3cpRaksBIlOVcpKm+Hv+JIpfWlBw4cIDAwEAmT57MkSNHdO31Wry9vdm1axf3339/j7ldA3Fryjo/z/V10qpbW7l4IZmgqdZRpO1uyGNBQUGvx7i6ulJRUUFLSwuVlZoC6rlz58jKyiI01HDFMxd5f520nS5nK3ltzAUbW1v8wsdLPjRMS0FqunDSdkPo1TPIiTtPS2OT1FJ0NNXVk5uQSJhwRA5JPHxGDzi3MfVEDAGTI3CWdb/xJxgcjsOH4zRiBDV6zAIpzc6htalZtMUbgXHRUWRJuLFWkJqOs8tIPHx9JNNgKYxwc2Xc9CjJow5AM8i4uaHBKiIP+izSDqYd0xioikqEG8TMqKtU0a5WI/MUTtqhyPE9n/LJ868SOiuah/75Nk4jR0gtSWAEOjo6yE9Ow08UaQ2GPoXAyspKWlpaANiyZQvTpk3T3efi4sK3337Lc889x+nTp3s8z0Dcmi6dxVx9M2kBss/F4zs+FAdnZ70fY650N+Rx//79XY7Zv38/y5YtA8Dd3Z2jR48CoFAosOnMqAsKCiIkJITsbMO5QWSeClqbmmmqq9fr+OJMJY01tSLywMCMGhuI43BnyYeGaSlIS8crKFAMcb2EkXJ3fMeHknbSfKIOtKSeiME/fDwjPdylliIwMR5+PlQW9C+PVkva8RhsbG0JmTndwKoEoHHRAlTrkUnbrlZTmJ4p2uINjIefDx4+o8n8+axkGgpSNDnv4rXtm4k3Xo+NrS0XjhyTWgrtajW555OsIkqozyLtYNsxnZyciI2N5dSpUz0Wd/vj8lEVFQsnrZnR0d5OnapKOGmHMD9/9Q3/Xr2WgMgIHt7ynpgwbaXkJ6XiGxYqhp0YCH0Kgd7ev3zfLViwgJQUjWvP3t6eL7/8kp07d/L5558bXFt/nbQAyrMJ2NrZETglwuB6TE13Qx6Tk5O7DHncunUrcrmcjIwMvL29efbZZwG4/vrrOX/+PHFxcXz22Wc8/PDDqFQqg2lzUXhQo2exHTTf0TkJFwiyAmeBOTEmIhyAixfMo0hbmJqBrb0dXuMCpZZiNoReFQ1A+qmeN7GkIu2ERlPo1TMkViIwJbb29sg8Ff0eGqblYmIyDTU1LHtzPX/7+Qde+uk7nv/v1zz7zT6e/nwXq3Zv4ZGt7/N/H7zBsjfXs/Rva4ma/ysD/y2sF63hqFqPuAPQOC6HUiFv69atlJSUcOHChR6Peeedd8jIyCAhIYGoqKh+nyN4unR5tFqKM7NRt7bhO37ovLYDZdLNN1CRX0hBarrUUgDIib+AT1gwjsOHSy1lUNgZ4kkOHDjAxx9/TEtLCw899BA7duzQTTkOCAigsLCQoKAgjh49yoULF65wlGzevJnNmzcDmovW3lAVFhNyldg9NDdqyypEJu0QJ+Hw97Q0NLLsrfU8+tEHbHroiX4VeATmT15SCvZOjniNDaIoPVNqORbPpYVAW1tbtm3bpisEnjlzhgMHDrBq1SoWLFhAW1sblZWVLF++HIB77rmH66+/Hrlcrrtt+fLlJCQkGESbS+eFir65p6BZGLWr1QRNnUL6qd6/yy2BQ4cOcejQoS63rV27Vvfn5uZm7rnnHkCzdlEqlQB88cUXfPHFF0bTJVMoqC3X/3UBUJ47z61PPIyzTEZjTY2RlA0t/CMm0FhTS8XFfKmlAFCQmgGAb1iozgU01AmdNZN6VZVZ/nsUpKTR3NCA/8QJnPvmsNRyBCbC3ccbGxsbKgYYd9CuVrPrmecJmjoZe0dH7J0cdf936PyznZMjI9zdsHd0ZISbK1G3zqWlsZGkY8cN/LexPly9NANY9Y0TKkhJ4+p77sTDd+ARFpbE9u3bef/999m5c2e398+fP5+QkBBCQkKYOXMmH374IVdd1b9Yl3EzplJbUUlJdo4BFA+MtpYWSrKV+IaLKIvecBo5gtBZMzi++1OppejIiTuPja0tYyaFk3H6jNRyBkyfRVp92zG1bNmyhddff133c2GhZqdQqVRy7NgxoqKiBtX2pyoqxmnECHGhYWbUVFQIJ62AlJ9OsvmRp1jx/t95ePO7/GPR7+lob5dalsBA5F0yPEwUaQ1DX4XANWvWsGbNmiset3v3bnbv3m00XTKFnPqqatStrXo/prmhgYLUdMZOm2I0XQKNk7Y052K/HqOM/2WYQsqPJ4wha8gxJiKcvKSUHrOgTU1lfgFN9fUil/YSQmdFkx4Tazav0aV0dHRQmnORUYEBUksRmBB5Z8blQOMOANJP/Uz6Kf0iPOwcHXlsx4csfe1F3v3tg5RkKQd83qGAa+cGtT6DwwDyk38ZHjYUirQ//fQTAQE9f2YtXLhQV8A9ffo0bm5ueHt7U1xcrPc5gqOnSuqi1VKQmk6YGNLXKxOuvwY7e3su/PeY1FJ05J5PpL29ncCoSIsu0vYZdzCYdkw3NzccOrOx5HI511xzDcnJg2sLUxVqPgA9RC6tWVFbViEyaQWApj3l03Ub8A4eS8jMaX0/QGAxVOTl01hTK4aHDQFcFHK9nSSXkn0ugYBJE7G1tzeCKgFo2jH726WQl5hMW2srY6eKyANDYOfoyOjQcWYTdQCaol9RWqYo0nbiHTwW11GeZu3qL1PmMipIFGmNybx580hNTSUjI4PVq1dfcf+yZcsoLS0lLi6OuLg4VqxYobvvvvvuIz09nfT0dO677z6D6NEOIlKZqKDX1tzMR0+spqWxiQfee13EkfWBzNOTprp6mhsa9Dpe2xYvhodp0Dcms6eoS7m/H27eXmT+bAZF2pR0ZAo5Lgq51FLMlsibZ1NdWkbu+USppehoqqunODOboCmWnUvbZ5FWn1y2VatWkZiYSHx8PKtWrdK1Xk6YMIEzZ84QHx/PDz/8wGuvvaYr4A4UVZFmJ0YMDzMvasorcPHwYNiwYVJLEZgBF/57jIbqGqIX3ia1FIGByUtOFcPDhgAyhbxfUQdalGfjsXdyxD9c/I4YA1t7e4a7yqjpZ5G2tamZ/ORUMTzMQPiOD8HWzs5shoZpKUjLwDcsVKzFgNBZmqxXfR2HUlCizMXDdzT2To5SS7FKbGxs2LhxI/Pnzyc8PJwlS5YwYcKEK4775JNPiIqKIioqiq1btwKaYZBr165l5syZzJgxg7Vr1+Lm5jZoTR6+3rS1tlI9gE3QgVJdUsb2J5/FzWsU9/3jVTFXoBdkoxT92qBua2mhOCtbtMX3k54G2gZHazJss86YQZE2VQwP6w0HZyfGXzuLxKM/ml23Sk7cecZERjDMps9Sp9mil/JDhw4RFhZGcHAw69evBzTtmAcOHAA07ZgRERFMmTKFm266ibQ0jfX/1KlTREZGMmXKFCIjI9m2bdugBasKO4u0YniYWVFbXo6tvR3D3VylliIwA9paWog7dIRJc2bjNHKE1HIEBiQ/KQWfsBDhlLRyBuqkVcZp2uqDpolioDGQdTo6agfy2pw7j3/EBOw6O5wEA0c7NCwvcXDGA0NTmJqO08gROrfeUCb06hmUKnOpKi6RWkqPlCpzAfAMGCOxEutkxowZZGZmolQqaW1tZe/evT0Osb6cefPmceTIEVQqFVVVVRw5coRbbrll0Jo8fH1QFRabPAosNyGRT9dtIOSq6Sx4ZpVJz21JuI7ypLq0rF+PKUhJF07aTvSJyeyNoKlTqCkr1302SomuSCuGh3VL2NUzcXB24vyRH6SWcgU58RdwdhmJd3CQ1FIGjMWVl+urqmlpbBJOWjOjpnOIiWgJEGiJ/epb7J0cmTxvjtRSBAYkLykVO3t7RoeMk1qKwIjIFPJ+D6cCqKtUUarMZezU7nNpbWxtsbWzw87BAXsnRxyHD8fWziAzTIcE2uz3mgG8Nsq4BOwcHPATLudBM2ZSOFUlpQPayDAm2uFhQz3ywNbennHTokg7eVpqKb2iLUSIyAPjoG/r9aJFi0hISODTTz/Fz8+vX4+Fnlu3u8PD12dQebSD4cz+gxzbsYfrfnsPMxctkESDuSPzVPS/SJuahovcQ8T+Afv379dFg8ycOZPq6up+5dF++uLf2Hj/o8aS1y+a6xsoy80TBfgeiPzVjdSrqsg+Gy+1lCvQzWGYbLkRXxZ5ZaQqKhZOWjND6+qRKeQUZ2RJrEZgDuQlpVCcmU30wts4/fn+vh8gsAjykjTOMf+JE8hPTpVYjcAYOI0cgb2TIzXlAytAZZ2NY9bdv+a1M8cYZmODjY0NNrY9t1c21tSy+dGnyE0wn0wrc0W7EVo7gNcmJ/4CAEFTI8npXMAKBoZ/RLhZ5dFqKc5Som5rw3d8qFkN8jA1QVGRODg7mXUeLUB5bh7t7e2iSCshBw4c4OOPP6alpYWHHnqIHTt2MGdO/8wFmzdvZvPmzYBmlktvePiO5sL36QPWO1i+fesDvMeN5a7nnqFUmYvyXIJkWswR137GHQDkJ2vb4sPMbuPO0OzZs4fZs2ejUCjIy8ujra2NlStXArBp0yYOHjzIrbfeSmZmJg0NDdx///39en51WxvluXl9H2giClLTxRyObrC1t2fC9ddw/sgPtKvVUsu5gsr8QmrKKwiMmsSpT7+UWs6AsMwibWExbqO9pJYhuAThpBV0R+zXB7nj6cdQBPib1ZeuYOCoCoupV1XhP3E8pz6VWo3AGGjdIANx0gL8sG03jdU1ALS3d9DR3q77r72jgw51Ox0d2ts6mHXPnTzw7uu8+7uHqMjLN9jfwxqRdbq0BuKkrVdVUZKdw9X33kVVcSkJh783y8X1YNi6dSu33347paWlTJrU/dCId955h1tvvZWGhgaWL19OXFxcv87hLJPhGeDPz19+YwjJBqWtuZlSZS4+YUPbSRt29QzUrW1mMSG8N9paWqgsKBRFWiOhT+t1ZeUvn6Vbtmzh9ddf1z129uzZXR577NixQelxcHZmpIe7ZE5agHa1ml1/fp4ndm9h2ZvreWfJCt28l6HOCDdX7BwcqCntX6G1MC2D9vZ2/MLDSPnxhJHUmQdLly7t8nNsbCybNm3qcttjjz1mSklGpSAlnSnz5uDkMpKm2jqp5ZgNIVdNx9llJOf/a35RB1py4s4TFGW5TlqLizsA4aQ1R7STpmWeokgr+IWz33xHu1pN9IJbpZYiMCB5SWJ4mDXjIu9sqR+gI6QiL59vBfJRgQAAIABJREFU3/6Qb9/+kEPv/pPv3v8Xhz/Ywn/+uY3/bvqI77fs4OjWXfzw0W6O7djD5kf+yLBhw3jwgzcYIXLNe8VF4UF7ezt1lQMroH/+8us01zfwuw3rWL1/LzPvusOq4ia2b9/ea27k/PnzCQkJISQkhIceeogPP/yw3+fQumryzGxomJaC1HR8h3jcQcisGeScv6D3hHYpKVXmiiKtkYiNjSUkJITAwEDs7e1ZvHgx+/d37ezy9v7lenLBggW6AdeHDx9m7ty5uLm54ebmxty5czl8+PCg9Hj4abKiKwuKBvU8g6Wpto5tq/6Mnb0997+7AQdnJ0n1mAuyUZpN0P4OdWtpbKQs5yJ+YsCU1aHLpR3iG5+XEzlnNo21dWTEnJFaSo8o488j9/PVXdNYGpZZpC0sxkXuIaahogm2T01NJSMjg9WrV19x/3XXXcfZs2eZNm0aixYt6nLffffdR3p6Ounp6br8mIHS0thIU329cNIKulBbXkHqiRimL5hv9hMW+3ovAfzmN78hKSmJxMREdu/ebWKF5kNecgrewWOxcxSfwdbIL07aCpOcr/xiPtse/zNuo724/93Xxe9VL8g8FdSrqmhvG5gDNutMHG8s+j0fPfEsjbW13LNuDWsOfca1S39jFWuqn376qYsz7nIWLlzIzp07ATh9+jRubm5dijT6MGZS59CwJPMaGqalMDUDN2+vIbvhMcLdDf/w8aSf/FlqKXpRqsxlVGAAw4YNk1qK1aFWq3nsscc4fPgwKSkp7Nu3j+TkZNatW8cdd9wBwKpVq0hMTCQ+Pp5Vq1axfPlyAFQqFS+//LIua/all15CpVINSo+Hz2gASZ20WspyLvLv1S8wOmQci195Xvz+ATJPTwBqSvqXSQtQkJKGjxgwZXUUpKYBmigLgQYbW1sibrqelB9PoG5tlVpOjxSkaArso0Mtc4aKeVdNekBVpNmBHOpuWhsbGzZu3Mj8+fMJDw9nyZIlTJgwocsxFy9eZPny5VRUdL3Ydnd3Z+3atcycOZMZM2awdu1a3NzcBqWntqxCN3laINAS+/VB3Ly9CJk5TWopPaLPeyk4OJi//OUvXHPNNURERPDkk09KpFZ68pNSsbWzwycsWGopAiOg3WyrMVGRFiAn4QJ71rxEUFQkS14VF4w94aLwGHTxvKOjg8Sj/+PtxQ/wr5VPUlFQyJ1/eYrnvvuCm1b8HscRww2k1vwwxDAg/4gJlCpzaaqrN7regVCY1jk8bIg6f0JmTgcg/ZTlFGntnRxFjJuROHToEGFhYQQHB7N+/XoA1q5dy4EDBwBYs2YNERERTJkyhZtuuom0tDTdYz/66COd83779u2D1uLhqy3SSuuk1ZJ6PIZv3tzI5Lk3cfPK/mWHWiOunlon7UCKtOl4+Iwesptj1kpdhYrqkjJ8RQFeR9DUyYxwd+O8mefel2QpAfAaGySxkoFhmUXaQk12zlAv0s6YMYPMzEyUSiWtra3s3buXhQsXdjkmNzeXCxcuXPHYefPmceTIEVQqFVVVVRw5cqTXFkF9qKmoEE5awRUkHztOQ3UN0Qtvk1pKj+jzXnrwwQfZuHEjVVVVAJQNYBFnLVw6PExgfcgUclqbm02ev3X+P0c58I/3mDJvDrf98Q8mPbelIFMoDOpwTjt5mg+WP8r7yx6mICWd2558lL/+50vm/eFBhrvKDHYeS2Tz5s1ER0cTHR1N+SWD2sZMmmiWQ8O0DPUibdjVM2moqSEvyTIGW5YqcwEYFRQoqQ6B8fHw86G5oZG6ysE5cg3J/3Z+zJn9h7jlDw8yac4NUsuRFJlXp5O2rP/fsfkpWselKOZZGwWp6eJ1vYTIX91IS2MTaSdipJbSK3WVKupVVXiNE0Vak6EqKgHA3WdoF2n74wgZ6GN7cpJ0h3DSCrqjraWFuENHmDRnNk4jR0gtp1v0eT+EhoYSGhrK8ePHOXXqFPPmzevx+frzvrFEqkvKqCmvEBNPrRQXhXzAQ8MGy7Edezj+8WfceP9vufreuyTRYM64KDyM4nBWnktg8yN/5K177yfz53PMffgB/vqfL7lpxe8Nfi4p0WeQUG+4eY1CppBz0UzzaAHqq6qpKi7BZ4jm0obOiiYj5gwd7e1SS9GLspyLACKXdggg9x1tFlEHl/PputfIPZ/EkvVrGR1qug6pvmLGHBwc2Lt3LxEREcTExBAQoHmP3HzzzZw5c4bz589z5swZbrzxRoPocfVUUFepGlALty67VLTFWx0FqemMCgoQUVzAsGHDmHTTDaSeiKGlsUlqOX1SnK3Ea2yg1DIGhEUWaWvKylG3tQ15J60p6MlJ0h015cJJqw9DMfs09qtvsXdyZPK8OVJLGTB2dnaEhIQwe/ZslixZwubNm3F17b6tqT/vG0slPykVv3BRpLVGZJ5yaiT8vf3qtbdI+uEn7vzLU4TfcK1kOswRTQHdeDEU+cmp7PjjX3j910vJOH2G25581KrcVfv379dl8M+cOZPq6mqKi/WfbK4I8Ke1udmsnbQABakZZteeuXXrVkpKSrrt7tLyzjvvkJGRQUJCAlFRUf0+x6igANy8vSwm6gA0bp+G6hpRpB0CePj6mE3UwaW0tbSw/clnaaqtY/lbf8POwcHo59QnZmzFihWoVCoSExN566232LBhAwDl5eXccccdREZGsmzZMnbt2mUQTbJRigEPTG2sqaUivwA/UaS1OgpS0rC1s2N0iGVmmxqSMZETcfXy5MJ/f5Bail6UZOXgHTxWahkDwiKLtO1qNdUlZUM+v2kwjpDBukm6o7a8AmeXkVYxfMRYdLcocXLqOlXVGrNP85JSKM7MNtvIA33eD/n5+ezfv5+2tjZycnJIT08nJGRoOpVA85p6jQ3EwdlZaikCAyOlkxago72df69+gfyUNH73+ktiM6CT4a4y7OztB9SK2V9KspTsfOo58pJS+M2Lf0E2ytPo5zQEe/bs4dSpU4SFhZGXl4dCoWDlypWsXLkSgIMHD5KdnU1mZiabN2/m0Ucf7dfzZ/58lueuupn8ZPNupS9MyzA758/27dt7jdWaP3++Lv/zoYce4sMPP+z3OUJnzQAsJ49Wi2Z42BipZQiMjKZIa35OWtAYoD5+7iUUY/yYvXyp0c+nT8zYwoUL2bFjBwCfffYZc+ZojB7x8fEUdc6nSUpKwtnZGQcDFJZlngqqB1ikBchPTjO7zTHB4PnFJW2+r60pNkEBJs2ZTVtrK8n/OzFQqSalJEvJcFcZI+XuUkvpNxZZpAVQFRUP+biD2NhYQkJCCAwMxN7ensWLF7N//369Hnv48GHmzp2Lm5sbbm5uzJ07l8OHDw9Kj9bdI9y0PdPdouTygW3Wmn0a+/VBgqIiUQT4932widHnvfTVV18xe/ZsAORyOaGhoWRnZ0ug1jzIS0rFxtYW3yHaUmvNyBTyAbtJDEVLYxPbHvsT9aoqVmz8x5D/vgfNBSRgVCftpajb2vj36rXYOTiw9NUXLGKY29KlS/Hx8cHBwQF/f3/Ky8vZtGkTmzZt0h3z2GOPERwcTGRkJGfPnu33OdRtbWbfSl+Qmo6tnR3eZpTF9tNPP1FZ2fPmz8KFC9m5cycAp0+fxs3NDW/v/r3vw66eSVlunlm6FXujVJkrnLRWjrNMhtPIEVQWmu/vZsbpMyT85yhz/m+Z0btV9YkZu/QYtVpNdXU1cnnXa8xFixZx7tw5Wlpauj1Pf+LHXEd5UlM68LVPQWo6noFjrHr45lCksqCIhpoasy7Am2ITFCDyV7PJiIk128Gpl1OSnQNY5vAwyy3SFhYP+bgDtVrNY489xuHDh0lJSWHfvn0kJyezbt067rjjDgCmT59OXl4e7u7ubNq0icTERABUKhUvv/yy7ovrpZdeQqUaXJC91t0jk4sibU90tyi5fPdX3+xTS8s9PfvNd7Sr1UQvuFVqKVfQ03vJx8dH9146fPgwFRUVJCUl8cMPP/CnP/2p1wtOaye/c3iYnxgeNmj6ikBZtmwZpaWlxMXFERcXx4oVK3T33XfffaSnp5Oenq5r4x4MtnZ2jHB3o7ZC+t/t2opKNj/yR+wc7Pm/D97EWeYitSRJ0W6AGiOTtifKc/P4esNbhFw1nRuWGd9dJTAMhama4WGWtIk22FkJtnZ2jIuOsjgXLUCpMgeZpwInl5FSSxEYCbnfaAAq8823SAuw/+/vAnDHM49LrKRvwsPD2bBhg65Tojv0jR+zsbXFRe5BdenAjTEFncPDAidPGvBzCMyTgpR0sy7SmmIT1CcsBLmfL+ePHBuMVJNSkqUEMKsNa32xk1rAQFEVFeM6yhMbW1va1Wqp5UjGoUOHOHToUJfb1q5dq/vzmTNn8Pf3JzY2lujo6C7HffTRR3z00UcG06K9cHTxFEXawXBp9qmfnx8//vgjkyZNorq6ustxmzdvZvPmzYDGCWru1JZXkHoihukL5vPdxs1m50Tq7r1UWFjIgQMHdD8//fTTPP3006aWZpbUVlRSVVwihocNEm0Eyq9+9Svy8/OJjY1l//79pKSkdDnuk08+4fHHu140ubu7s3btWqZPn05HRwdnz55l//79Ohf+QHCRewBI7qTVUqrM5aMnnmXlv95h+Vt/418P/3FAQz2sAZkERVqA018cYPy1s5i/aiUZp2MpSEk36fkF/aeyoJCmunp8zPiicqD0tPYJmDIJx+HDLbRImwvAqMAxZp93LBgYHr4+AGYbd6ClqriE77fuZP5jDxEyczoZp88Y5Tz6xIxdeoytrS2urq5UVGi+/3x9ffnyyy+57777DNLVNtLDHRtb20E5afMSU2iqq+f/PniD1BMx/PzlNyQfO466rW3Q+gTSUpCazjX3LrLYulNPm6D9yeSP/NWNtKvVJB37yRgSjUJNWTmNNbV4WWCR1oKdtEXY2tnhaiE5aUMBbQumTMQd9Eh3i5LLW3SsOfs09uuDuHl7ETJzmtRSBAYgLykVf+GkHRT65LL1xLx58zhy5AgqlYqqqiqOHDnSa7uTPmjdmlJm0l5O9pk4Pnn+FYJnTOPel9ZILUcydK+NCTJpL+fTda9RV6nidxtewsHZqe8HCCSlo6ODwrQMfMMsZ+0w2FkJYbNmoG5rI/Pn/kdYSE2JtkgbFCipDoHxsJQiLcCxj3ZTnpfPr5/9IzZ2tkY5hz4xY/v372fZsmUA3H333Rw9ehQAV1dXvv32W5599llOnjxpED3aOKGaQUTM1VdV88bdv+f7LTvxCQ1m+Vt/44Xv97Pgz0/gLYZOWTQFqenYOzkOiVianrpVJs25gawzcdSrBm4EkYKS7By8xgZKLaPfWG6RtqgEQOTUmRH1qirUbW3CSdsL3S1KLne9WXP2afKx4zRU15jtADFB/8hLSmFUUIDI3xoE+rb4Llq0iISEBD799FP8/Pz69dj+RKPIOj+/zcVJq+Xct//h4Lv/ZNrtt3DN4kVSy5EEmaec5oZGmhsaTH7uhuoaPl7zEooAf+54ZpXJzy/oPwWp6YwOC7aILGHQFGS0kS0zZ86kurq6Xy6f43s+ZduqP1tMVt6lVBYU0tbaOiQKAEMVD9/RNFTXWMTvZ1tLC/tffwfv4LFcu+Q3RjmHPpF9W7duRS6XExERwVNPPcWzzz4L/JIr/sILL+hioDw9B2facvXSPL56EE5a0OSXfvf+v3hl3l386+E/khl7jmsWL+JPX/ybJz7eyqzf3CliTSwQbQeROUce9EZ/NkF7igjZ/4/3OLLJcB3YpqIkSymctKZEVaRZuA31XFpzoqOjg7oKlcik7YXuFiVNTU1dFiXWnH3a1tJC3KEjTJozG6eRI6SWIxgk+UmaCed+E8IkVmLdHDhwgMDAQCZPnsyRI0d00471Rd9MNrjErVlherdmX3y/eQepx2O47Y9/QDHGT2o5JsdFITfZ0LDuyPz5LP/bvoer77mTiJuul0yHQD8KUzNwGjECD78rN26kYM+ePZw6dYqwsDDy8vJQKBSsXLlSlyd58OBBsrOzyczMZPPmzTz66KP9ev7aikpSfzplDOlGp71NTfnFfFGktWI8/HyosAAXrZakY8dJOX6KuY+sMNpk9EOHDhEWFkZwcDDr168HNJF92pix5uZm7rnnHhITE5k5cyZKpSZf8tVXX2XkyJFERUXp/hvskGWtk3YwmbSX0tHeTtqJGHY981deuukOvnrtLewcHLj7hT/z4tFvWPq3tQTPEF2FlkJZzkVam5rxnWCZRdrBboICpJ2IISv2nDHkGZXibCUucg9GuLlKLaVfWHCRVuOkdRvtJbESwaXUVFQIJ20f9LUoAU326cSJE4mMjOSTTz6RSqpRiP3qW+ydHJk8b47UUgSDJD9ZU6QVkQcDR5/d7crKSl0sypYtW5g2bZrej+0vMl2R1jw3hj5Zux51WyuLX3meYTYWu4QZEDKJi7QAh97bRF5yKve8+BfdRa3APClI0zp/zCPyYOnSpfj4+ODg4IC/vz/l5eVs2rSJTZs26Y7ROuQiIyM5e9byYgsGQ6kyVxRprRi5rw+qAvMeGnY5X732FvZOjtz2ZP82TCwR11GetKvV1FUOboh2d9RXVfPT7n28sej3vHXvcn7+6hvCr7+GR7a+z+1PPWbw8wkMT7tarYkQMlMn7eWboA888ACenp4G2wS1ZEqycgAYZWGRBxZ7hdPW3ExtRaWIOzAzassrdE4sgaA78pJSKM7MFpEHVkB9VTUV+YX4ieFhA0afXLZLJ7AuWLBAN1Ts8OHDzJ07Fzc3N9zc3Jg7dy6HDx8elB4XhZy6ShXtbeY5GKGmtIwv//YmQVGR3HDfEqnlmBQXhdzkQ8MuR93Wxu7Va7F3cmLJq89bTCv9UKQkKwd1axs+ZlKkFfROqTIXhb+f0TJABdLiPtqbSgsr0pbn5vHjzo+Z8evbGRM5UWo5RsV1lCe15ZVGH2qcn5zGF6/+gxdvuoOfv/qGG+5bbLHuzKFGQWq62RZpL98E3bZtG2VlZWITFE3cAWBxkQcWW6QFUBUW4yHiDsyK2rIKMThM0CexXx8kKCoSRYB/3wcLzJr8ZDE8bDDok8u2atUqEhMTiY+PZ9WqVSxfvhwAlUrFyy+/rMubfemll1CpBucCkXlKXwjsi3PfHOb8kR+Y//hDeAePlVqOyTAHJy1o2v6+fv1tQmfN4Lrf3yu1HEEPtLW0UKLMwTfMPC8qBV0pVeZia2+H3EziKQSGw0Uhx97J0SKGhl3OkU3bqS4p4641T1t194rMU0H1ICMT+kNbczNfv/4OdZUq7n5htVX/21oLBanpOMtc8PDzkVqKoB9UFZfQVF9vccPDLPoTQVVUjLvPaKllCC6hpqKCkR7u4stG0Ctnv/mOdrWa6AW3Si1FMEjyklJQjPHDWeYitRSLpa8IlDVr1hAREcGUKVO46aabSEtL0z32o48+IiQkhJCQELZv3z5oLS5y8ygE9sXnr/ydxto6lrz6wpBwntk5OuIsczGbAnrMZ19z4fv/cdsTj+ATJpya5kphqvm2Zwq6UqrMBRCRB1aI3FdT1LGkTFotLY2NHHjzffwnTmDGnbdLLcdoyEYpqDFQHq2+NNXW8fXr7zAmIpyr773LpOcW9B9LHx42lCnNzsVbOGlNh6qwGDdvkUlrTtSWVWBrZ8cId8sKZxaYltryClJPxDB9wXxR0LdwdMPDwkXkgTXg4imnpsw8CoG9UVep4rOXXscvPIybH1wutRyjI1N4AJrvWHPh0xf/Rn1VNb/dsA57J0ep5Qi6oSAtHVcvT0Z6GGfwj8BwlOWIIq214uGnMRRV5ltekRYg7uB/yDobx62rHrbaDXlXTwXVpb0PVjUG8d/9l7QTMdy66mGR827mFGVkoW5rE/EUFkhJthKvsaJIazJURcU4ODuJxacZoXX5uMhF5IGgd2K/PoibtxchM8V0U0smP0Xj6vQXubRWgUwhp7bCfAqBvZF49H+c2X+Imx9ajl94mNRyjIo2673GjF6b+qpqPn7uZbzHBXHH049LLUfQDYWpGQD4hAVLrETQF0119dSUlTMqUBRprQ2PTidtZWH/pqmbE1+uf5PhrjJu+cODUksxOHYODoxwd6OmzPRFWoDPX/kHtnZ2LFz9pCTnF+hHW0sLpcpc4aS1QEqylLh6eeLkMlJqKXpj8UVaQLhpzQity0fsBgr6IvnYcRqqa8QAMQunsaaWstw8kUtrBTjLZNg5OFiEk1bLVxveoraikiWvvoCdg4PUcoyGNuvdnJy0ABkxsRzbvodrFi8i/IZrpZYjuIzCNG2RVlxUWgKlylzhpLVCPHx9qCmvoK25WWopA6YoPZOT+77k6nvvYnSodW36yDw136/VJo470FKRX8CRf33ElHlzGH/tVZJoEOhHfnKaKNJaIMWZmuFh3hbkprXsIm3njqS7jxgeZi5oXT7a1kyBoCfaWlqIO3SESXNm4zRyhNRyBIMgPykFP+GktXh0LfVmknuqD401tex7YT3ewWO55bGHpJZjNHROWjN8bQ6++08KUtK596U1jHATUUfmREN1DaqiYtGeaSGIIq114uEz2iKHhl3Od+9vprGmljvXPCW1FIMi8/QEoEaCuAMtxz7aTXGWkrue+5OIDzJjClLTcR3liYtc1DksiZJsTZHWa1ygtEL6gWUXaYtEkdbc0F7cuyiEk1bQN7FffYu9kyOT582RWopgEOQlpeLhM1pEz1g42g4IcywE9kbaydOc3PclNyxbQlBUpNRyjILMU0G7Wk1dpUpqKVegbm1lz5p1OLmMZMGfnpBajuAychMSCZ4xTeS/WwClylyGu8rEd6mV4eE3msqCIqllDJrGmhoOvvtPxk2LImr+r6SWYzBkozRrn2qJ4g4A1G1tfP7K35H7+fCrlQ9IpkPQOwWpncPDxManRaEqLKalsQkvCxoeZtErtsaaWprq6nEfLYq05kJrUzONtXW4CCetQA/yklIozswWkQcWTl6ydniYdeeCWjsuFuik1XLgH++hKixi8avP4+DsbJDnnDdvHqmpqWRkZLB69eor7ndwcGDv3r1kZGQwfvx4AgJ+ccA9++yzZGRkkJqayty5cwetxUXuQZ2qio729kE/lzEozszm6NZdTF8wn7CrZ0otR3AJiUd/RKaQEzBpotRSBH1QqhTDwwxNX5/jWu666y46OjqYNk0zJ8HOzo7t27dz/vx5kpOTefbZZwd0fhtbW9y8vSx2aNjlnP7iAHnJqdzx9OMG+66VGtdRWietNHEHWrLPxPHzV98we9lSvIPHSqpF0D2F2iLteHG9Y0l0dHRQosyxqOFhFl2kBY2b1kM4ac2K2vIKkUkr0JvYrw8SFBWJYoyf1FIGvJgf6hSkpNHe3o6fyKW1aGSdHRBSDc8YDC2Njez96yt4+Ppw+1N/GPTz2djYsHHjRubPn094eDhLlixhwoSuv98rVqxApVIREhJCSUkJGzZsAGDChAksXryYiRMncsstt/DBBx9gM0gXo8xTYXZ5tJfz339tpyQ7h0XP/xkHZyep5Qg6SfnpJG2trUTMuUFqKYI+EEVaw6LP5zjAyJEjeeKJJ4iJidHd9pvf/AZHR0ciIyOZNm0aK1eu7LIRpy+uXp7Y2tlZRdwBQEd7O1+ufwNXL09ufmi51HIMgqungtbmZhqqa6SWwjdvvE9TXR13P/9nhg0bJrUcwWU01dVTnpcvnLQWSEmWUsQdmBJVYTHuo0dLLUNwCTXlFcJJK9Cbcwf/Q3t7O1Nvmyepju4W805OVxYaulvMD3Wa6xsoy7mIv8iltWhcFHJaGptorm+QWsqAyD4bz4+79nLN4kWEzpoxqOeaMWMGmZmZKJVKWltb2bt3LwsXLuxyzMKFC9mxYwcAKpWKOXPm6G7fu3cvLS0t5OTkkJmZyYwZg9PjovDQZb6bK+rWVj598W/I/XyYZ4UTwC2Vprp6Mk+fZZIo0po9VcUltDQ2iSKtgdDncxzg5ZdfZsOGDTQ1Nelu6+joYMSIEdja2uLs7ExLSws1Nf0v4nn4+gBYRdyBltyERGK//pYbli2xiuHdslEKs9mcrq+q5sCb7xM0dTIz7rxdajmCbihISRfDwyyQkqwc3Ed74zhiuNRS9MLyi7RFxSKT1syoLSvXObIEgr6oKS0j8+ezTLv9Fkl1dLeYd3Nzu+K47hbzAk10hb9w0lo0LgoPasrN40JloBx6dxPFWUrufWkNTi4jB/w8vr6+5OXl6X7Oz8/H19e312Oqq6uRy+V6PVbLgw/+P3t3HhZV2T5w/CsDuLIJKCoKqJgLpbi3ueaaYpopai6Jmqlp1tsvzXpN7bVMM1vUXBCXLFyyRBNQRDIrFMENBUUEFJR9lZ1hfn8goyjIAANnludzXVzFzJk59/gM58x55n7uezZBQUEEBQVh9ZTzpomVpcZn0gJEXbjMP/sO0e/NieJ4oEFC/U9j1cZWq+qx6SOFQkFS9G0xSasmqhyLnZ2dad26NceOHStz+8GDB8nOzubevXvcvn2bdevWkZZW9Zrgljo4SQslTcQABrlNlTiSmjO1tpK0adjjgn7/g8jzFxj1/gJRn1oDxYXdwKqNrWh6rWVKm4c1c7CXNA5V6cQkbSMzU+o30o5ZcX2QmZIqMmmFKgk56oNVG1vaPCddzbzyPswbGxuX2aaiD/OPU3XiRZdEX7iCWTNrjShbIVSPqZUVWcmpUodRI0UFBXguW4WJlSWvffSe1OFUatu2bfTq1YtevXqRXMEEeb169TBp2lRrGrr9sWETWcmpvPHZEgwMZVKHIwChp04DiGxaLZAYFS0maetIvXr1WL9+PR988MET9/Xu3Ru5XE7Lli1xcHDggw8+wMGh/C85nvaZz6JVC4rlctLi42vlNUglPT6Bc78dpc/rLpg3byZ1ODVi1sxa0qZh5Tm4cg3GjRoy+oN3pQ5FeExc+HUAWopsWq2SEFkySWujJSUPVJqkray1f1BbAAAgAElEQVRO4/Tp00lMTOTChQtcuHABNzc35X3Tpk3jxo0b3Lhxg2nTpqkv8gfS7pac9MxbaP9yi+pQtbGJk5MTgYGBynpKdnZ25OTkKMds8+bNaospKymZBo0b60xBeaH2XfYLoDAvX/Js2qd52of5x6ky8aJrIs4GAeDYp5fEkQjVZWLVVGOW/NXEnathnNy+m15jXqVTvxer9RxxcXG0bt1a+butrS1xcXFP3cbMzIyUlBSVHlsVjczNkBkZkqUlx5K8+9kcWr2OVh07MGD6ZKnDESjpFRB96QpOg/pJHYpQicSoGCxatsCwfn2pQ9F6lR2LTUxMcHJyIiAggKioKPr27YuXlxc9evRg8uTJ+Pj4UFRURFJSEn///Tc9e/Ysdz9P+8zXtFUL0hMSKS6S186LlJD/9t0ADJql/uv7umTazIoMiZuGPS4xKoZTHj/R02UE7XuL/heaJC6stHmYmKTVJqlx9yjMz9ea5mGVTtKqWnR93759ODs74+zsjLu7OwAWFhYsX76cPn360Lt3b5YvX17u8uGaSLtXMkmrjyUPqtLYJDQ0lG+++UbZ2AQgMjJSOWbvvPOO2uLKfJCJZWJlqbbnFHRbfnYOoadO4zz8Fckyr8r7MF9QUKD8/Wkf5gVIvh1LenwCjn3Lv4gRNJ+ptRVZKdqdSVvKb4sH8ZFRjF26GMPHMuJVERQUhKOjI/b29hgZGeHq6oqXl1eZbby8vJg+fTpQ8nnH399feburqyvGxsbY29vj6OjIuXPnqv1aTK1LzqWZWpTlHOp/mkvH/Rk6101k12uI0JN/0rpLJ52oIanLEqNiMDAwwNpO/N3UVGXH8czMTKytrXFwcMDBwYHAwEBcXFwIDg7m9u3bDBo0CIBGjRrRt29fwsPDqxyDZauWOlfqoFTavXiCfv+DPuNGY9bcWupwqqV+o0Y0aNxYo8odlPLbuovk27G8/smHyIyMpA4HqFninq7ISkklMylZTNJqmWK5nKTo21pT9qnSSVpVi66XZ9iwYZw4cYK0tDTS09M5ceIEw4erN1OuNJPWooX+TdJWtbHJwYMHlY1NalNpto+pKHkgVEHwUV8aW5jzzAt9Jdl/eR/m09PTlfc/7cO8UCLi7Hna9+ouOtJqIZmREY3MTHUikxZAXlTEb6u/xtK2FQNnvln1x8vlLFiwAF9fX8LCwti/fz/Xrl1jxYoVjB49GgB3d3csLS2JiIjAxsaGJUuWAHDt2jXl9j4+PsyfP5/i4uJqvxYTy5JJ2iwtG5vfvlhPUUEBbyxfInUoAnDFv6TkgdOglyWORHiahKgYQHvq5mkyVY7jFdm4cSNNmjQhNDSUoKAgPDw8uHLlSpVjaNqqJalxd6v7EjTeye27qFfPgEFu2plNWzq5nJmkWZm0AEX5+fz6+VqaOdgxWANq/6raYLm8xD1dExd+g1adxCSttkmIjKK5rpQ7ULUBxuuvv86lS5c4cOAAtra2VXpsTeo3ZiWnUFRQQFM9zKStamMTuVyubGwC4ODgQEhICAEBAbz00kvl7qM6Y6PMpLXWj1qcgnpc/yeQ7LR0eowaJsn+y/swn5eXp9KHeaFEROB5GluY06JDe6lD0SqVZSaUGjduHAqFQpm9bWhoyM6dO7l8+TLXrl1TThJWh+mDlQ/aXpP2UTfPBXPRx4/BbtOqtdrG29ubZ555hvbt27N69WoAli9fzpEjRwDIz89nwoQJODo6EhYWRlRUlPKxq1evpn379nTs2BEfH58avQ7TB+dSbcqkhZLPZ0fW/0D73j3oPVYcQ6WWHHOH+Ju3cBok6tJqsuTbJZ/ZRV1a9ajsOP6ogQMHKr94z87OZsKECTg5OdGlSxfWrVtX5X0bGhtj1txaZzNpoSRZ6tzho/R93QXTZtqXTVt6fs3QwExagBv/nuPCseMMnj0dK7vWlT+gFqnaYFkfxIZdp3lb+2qt1BKkE38rGouWLTBu+OSXC5pGLY3Djhw5gr29PV27duXEiRPKzE1V1aR+o0KhID0+US8zaWvi3r17tGnThu7du/P+++/z888/Y2Ji8sR21Rmb0mwfkUlbvupOyOi64iI5F3z8cBrYj/qNpWkEWN0P80KJiHMl/x6OfUTJA1WpWlKoSZMmLFq0iMDAQOVtb7zxBvXr1+e5556jR48evP3228q641VV2uwxS0uaU6nqyLrvKS4uZsz/aX4TsYpo89icO3SEyPMXGP2fBZhYis8EUgv1P03bHt1oZGYqdShCBQrz8kmNu0cz+zZShyLUUOmXg6mxuptJC3ByW0k2bVWzPavbVwVgyZIlREREEB4eztChQ6sdu2mz0klazcukLXX4q28pzMuXvBmqKg2WofzEvcdpe4PluLAbyAwNaeHYTupQhCpIiIwqKSekBefXSidpVWmAkZqaqqzduH37duWkkrqbZ1Qk7V48Fi1bqP15NV1VG5vIZDJlY5OCggJSU0uyckJCQoiMjKRDB/Wk7edkZCIvLMJECw+6tU3VpSLlTcjog+CjPhg1qM9zrwyQOhShGjITk0iMihF1aatA1ZJCq1atYs2aNeTl5SlvUygUNG7cGJlMRsOGDSkoKCAzM7NacTzM1tTMbJLqSk9IxG+rB88O7s8zL0pTSqWmTK2syMvOpiA3V+pQqkyhUHBgxZcY1a/Pa0vflzocvRfqfxqZoSGd+5e/ekrQDIlRMViLTFqt1/TBtWnqXd3NpIWSbNqgw3/QpwrZtDXpq9KpUydcXV3p0qULw4cPZ9OmTRgYVC/vzOzBZ5+sJM39EjQrJRW/rTvp9PILtOvVXepwnkrVxD1tb7AcF/6geZgoeaBVEiJLVrxpQ13aSo9oqjTPsLF5mMXq4uJCWFgYAL6+vgwdOhRzc3PMzc0ZOnQovr6+an4JJZO05i1q1gjBQCajsbkZ1vZtsO/6LJ36vUhPl5H0m+rK0HfcaNujm5qiVZ+qNjYZP368srGJlZWV8oTm4OCAo6Mjt27dUktcCoWCrJQU5fJZ4SFVl4qUNyGjD25fvkry7Vi6j1Jv7Wqh7kScPU/bHt2QGRpKHYpWUKVsjbOzM61bt+bYsWNlbj948CDZ2dncu3eP27dvs27dOtLS0p7YhyoZC8q6p1q2pF4Vf+72JDEqhrFLFmtM842qMLFqqtEXkJVJir7NiR896DZsMF0G1O7koGhq8nR3roaRnpCI06B+UociPEViVAzN7O1EfXct17RVSwCdrklb6uT2XRgYyBikYg34mvRVGTNmDJ6enhQUFBAdHc3Nmzfp3bt3teI2bWZN3v1s8nNyqvX4unLml4Ok3Ytn1PvzJTsuVNZgGSpO3NM1qbF3yc3MEs3DtEzynVjkhUU0b6v5k7SVXkU/WqdRJpOxY8cOZdH18+fPc+TIERYuXIiLiwtFRUWkpqYyY8YMANLS0li1ahVBQUEArFy5stwLyJpKuxuPqbUVMkND5EVFlW5v0dKG0R+8i0ULGxqZm9LIzJRGpk9f+jVs3ixuX7nGn7t+5rJfAMVyubrCrzZVxsbd3Z09e/bg5OTE+++/j6urKwD9+vVj5cqVFBYWUlxczNy5c9U6NpnJKZhYi0nax6myVOTRCZkPP/ywwueaPXs2c+bMAdDKpSIVCT7qw5C5MzFtZk2mBi8/EsoXERjEi66v09qpM9EXL0sdjtarV68e69evV55XH9W7d2/kcjktW7bEwsKCv/76Cz8/vzK1UaEkY2Hbtm0AyvPx40ytLSkuLuZ+qvrP0VKTFxby+5ffMGfLBvpPm4S/+26pQ6oSU2srMlO0d5IW4NTOn+g24hXGffIhN4NCyM9W/wVxaWbWkCFDiI2NJSgoCJlM9sR2+/bt491331X7/rVFqP9per82CqMG9SnMy5c6HKEciVEx1G/UELNm1qQnJEodjlBNTW1bUFRQQKaG1jtVp9S4e5z3Okbf8WPwd99TaRPS8q6H+vTpU+E2j/ZVadWqVZmVhhX1vIHKr5XMmllrdKmDUkUFBfj8sI1J//uUrkMHcdH3ZJ3H8GhyWFxc3BMNlqEkcS8+vqSp+6OJe7oo7nqEmKTVMsVFcpJibmOjBc3DVEp18vb2xtvbu8xty5cvV/7/xx9/zMcff1zuYz08PPDw8KhBiJVLuxePgYEBZjbNKq370+a5Lsz87isMjY2JvnSF5Nt3yE7PICcjk5yMkv9mp2eW/J6eQXZGBsVFcnqMHk7/qa5MXfc5qXH3OP3TPs4dOiL5N2+VjU1pY5OgoKAyJ79Dhw5x6NChWosrKykFc5uaZTfro6dNyDxOlYkXbRTyhy/D5s2i+4ghBOz6WepwhCq6GXSB4uJiHPv2FJO0KqisbI2JiQlOTk4EBAQAJR+Avby8cHFxYfLkyfj4+FBUVERSUhJ///03PXv2fGKSVhUmVpZkp6VrxBeQteH6P2e57BfAK3NmEPKHL+nxCVKHpDITy6bcvR4hdRg1UlwkZ//yL1i4dxuvvjePQ/+rehOeyjyamQXg6enJ/Pnz1b4fbRd68k9emjSeZ17oQ6j/6Trb77Bhw/j222+RyWRs3779ifunT5/O2rVrlce/H374QWc7g1cmMSoagGZt7cQkrRZr2qolaXfjUSgUUodSJ/y276LnmJEMnPkmh9dskDocoPJrJVNrK62ZRA8+6kP/6ZMYsXAuV07+qVJimjqVlxw2duxYlRL3dFFc+A2eH/8aBjKZzn521kUJt6JpqQUNrtXSOExqaXdLvrGprHlYt2GDmbdjI/nZOXw3ZRbb33mfvUs+4/cvv+H4ZnfO/HyQkD+Oc/3vQO6EXiMlNo68rPsU5Oby7/7fWOPiyo6F/0dafDyvffQen574nVGL52PWXPu6Wda2zBSRSVueypaKPDohExUVRd++ffHy8tLZ5SLlSb4dS8ylULqPGiZ1KEI15GZmEhd+QzQPU1FlZWsyMzOxtrbGwcEBBwcHAgMDcXFxITg4mNu3bzNo0CAAGjVqRN++fQkPD69WHKZWlpVmvmg7r6++xcDAgNH/0a4sSlNrKzK1sGnY4+6EXuPM3gM8P2Es9t2eU/vzq7OpCWh/Y5OKRAZfICcjs05LHqhaj3/fvn04Ozvj7OystxO0UJJJC9BM1KXVak1btdCLUgelUmPvEnzEh+fHv4ZJJSXvatJXRZ09b0ytrchI0vxMWgBFcTF/fLMRqza29H3jNUliqKzB8scff4yTkxPdunVj0KBBXL9+XZI460LctesYN2ygMU2oRLkn1cTfvIVl61YYlvP5UJPo1CRt05YVT9K+MmcGU9d9zp3QML6bMkv5AagqFAoFV0/9xaYZ89gwyY3r/5yl//RJLPM+xOQvlouU90dkJaXQxMKcetUs5K6rypuQeXSpyNMmZPRJ8FEfWnXsgI3omqmVbgaex66rE8YNn7wIF8p6NDMhLCyM/fv3K8vWjB49+qmP3bhxI02aNCE0NJSgoCA8PDy4cuVKteIwsbLUyXq0j0q7F4/f9l10GzYYx769pA5HJcYNG9CgSWOdGRvv77eQHp/AhBVLaVhJmanaoGpTE9D+xiYVKS6Sc+3Pv+nc/yUMyikHURtUrccvlMhKSSU3M4tmDvZShyLUgGWrlqTE6XbTsMf5bd2JgaGMQTOnPnW7mvRV8fLywtXVFWNjY+zt7XF0dOTcuXPVitesmZVWfUEdfiaQiLPnGfL2W9Rv3EjqcPSaJjUPE1+Eqi7hVjQGMhnW9q0r31hCOjGDlp6QSHFxcbmZtDIjIyb977+MePdtzh/x5sfZC8lOz6jxPu+EXmPPh5+yeuR4zngepMvAl3n/wC7mbv+e1l06Vf4EOi4zOQUDmYwmTS2kDkWjlDchk5eXp9KEjD656HsSeWERPUQ2rVaKOHseQyOjWsmW00WVZSY8auDAgcovbbKzs5kwYQJOTk506dKFdeuqv4Tc1NqSTB2aiKpIgMdeku/EMnbp+1rR3O5hQzfdGJuC3Fz2L/8CS9uWLPxpK1ZtKs5krSrR1ER1of5/0tjcDIfuXetkf+rMctbVDOfHlTYPE7RT/UaNaGxhTtpd/ZqkTYmNI/ioD8+/8fRsWlW+oHZ3d8fS0lLZV2XJkiUAXLt2Tbm9j48P8+fPp7i4uMqxNjY3w9DYmIwE7cikLfXHN5swsWzKgBlTpA5FryVGxVCYl68RSXrii1DVJUSWlMSyaddW4kieTicmaeWFhWQlp2DRskWZ2xubm/H2tm/p6TIC7x+28svHK5EXFqp132l34/H66ltWDXmNI1//QDMHOxbs/pFer72q1v1om6wHSzNNK1nuoo+qOyGjT7LT0gn/O5Durw4T3Y21UNSFSxQVFuLYV5Q80Ab16tWjiWVTncnWfJqiggJ+/3IDzdva8/KUCVKHU6nSi9xMHRqbiMAgfpz1Lo3MTFn0szvtejqr5XkrW6kCJTWdS+l6U5Onuf7PWQrz8nl2cH+pQ1FSNctZVzOcH5cYHSPKHWgxw/rGnPfy5vaVa1KHUuf8tu7CwFDGwJlvPnW7yq6HSvuqhIaG0qdPnzL19levXk379u3p2LEjPj4+1YrTtFnJlzzalEkLcOdqGBd9/Og/bVKlZSWE2lMsl3MvIlIjJmnFF6GqS4q5g7yoiObtHKQO5al0YpIWSpYxmrd42KiqmYMdC/dup41TZ/b85xP8ttRu87K8rPsE7NzLunFvcivkEq6rPuG1JYsxMKybpWSaprR+nqhLK1RXyFEfzJs3o62aLuCFulOQm0fM5VBRl1ZLNDIzxdDISOsuVKor7PTfXA04w5B3ZmJqrdkfQE0fnEN1bWyiLlzm2ymzyExK5u2t39FnXM1XkqiyUmXhwoWEhoZy8eJFFi5cqNNNTZ6mIDeP6/+erbO6tCLLueoSo2Iwa24tljRrqey0dH5ZtpKb5/Qv0SLlTiwhf/jywhtjMbFsKnU4FTK1Lukpoy2Nwx517LstGBoZMXTuTKlD0Wtx4Tc0otyBKsQXoSXkhYWk3ImjeVt7qUN5Kt2ZpL0bryx30L53D979aSv1Gzdis9sCLvqerLM4cjIy2TZ3MX/u/oWXp0zg7S3f0tjcrM72rymykh5k0lqKSVqheq7+eYa8+9n0GDVc6lCEargZeJ5WnZ6RpO6kUDWlmRhZKbqTrVmZw2s2IDM0ZPQHC6QO5akejo32Nw57XGrsXb6fOoeb584zYcXHjP7g3RrXsRdNTVQXevJPLFrYYNv5mVrfl8hyrjpl8zBR8kDQQie2lNSmHfCW5i7JN2tWMkmrLY3DHpVyJ5Z/D/xGn9ddNKZxlT6KDbtOI1NTLJ7SF6kuiC9CqyY+Mkpk0taVtHvxWLRoTp9xo5nz4wYyE5P5bsosYi6F1nksxXI5Xmu/4+ePV2LX1Yn3PD1o+YxjncchpdKLfZFJK1RXYV4+l/1O8dyQgRjWry91OEIVRZw9j4GBgdqWMgu1R1ezNZ8mJTaOUx576f7qMI3O1je1skReVER2Ws1r6WuivPvZbJ//H878fIABMyYzY8MXGDdsKHVYeuHan39TLJfjNKj2Sx6ILOeqU07SipIHghYqyaY9zgsTxtHEUjP7kzwsd6CdX4Ke2OJBYX4+IxfOlToUvRUXVtI8rLVTZ0njEF+EVk3CrSis2thqdG8K3ZmkvRuPobExE1Z8zM1z5/l+6hxSJe6oGXzEmx+mzcVAZsC7e7bSbdhgSeOpS0UFBeRkZoqatEKNhBz1paFJEzr3f1HqUIQqun3lGvk5uaIurRZ42JxKOy9UqsvffTepcfcY9/EHGluayMTKkvupaSiq0RRFWxTL5fz2xXoO/W8dnV5+gQW7f8S8eTOpw9J52ekZ3Aq+WGclD0SWc9Wk3IlDXlQkJmkFreW31QNDYyMGznh6bVqpmFlbcT81Te39aurK/dQ0Tnns5bkhA7Hr6iR1OHrp7vUIMhKTeNH1dUnjEF+EVk1CZDQyQ0Os7FpXvrFEdGaS9t6NmwD8s+8Q2+f/h7z72RJHVCL2WjgbXGcSF3adqes+Z+Sid2q8nE9bZCaliILmQo3cDAohIyGJHqOGSR2KUEXyoiJuhVxUS11aA5lmTqDpioeZtPo1SVuYl8/hr76lhWM7Xpwo7QfsiphaWyprvOu6vz1/xX3+f2jaqiWLfnGXPDNFH4T6n6aFYzus2pTfQESQjryoiJQ7cWIps6C1km8/yKadqJnZtGbNrLV+BdHp3Z5kJqcwavF8qUPRS/LCQvzd99C+V3fa9eouaSzii1DVJUSWNCHU5JIHOjNbGHXhMitfceHXz9dSLJdLHU4ZWSmpbHZbwL8HfmfwrGm4/bCWBiZNpA6r1mUlp4hMWqFGFMXFhBw7TqeXXtDL2s7a7mbgeZq3tcf0Qd2v6rDt3JGlxw7USd1EfWViZUl+Tg4FublSh1LnQv3/JPxMIMPmz9bIBicmlpZ6leF8/Z+zfP/mbArz85nvsYmuerQCSQqh/qcB6qTkgVB1idExIpNW0GonHmTTDpiuebVpTZtZkZGoffVoH1WQm8vxTe607dGNzv1fkjocvRR48DAZiUkMmzdL6lAEFSVG36a4uBgbDW4epjOTtAAZCZp7oJUXFXFw5RoOrFxDh769WbR3u85/8MpKThE1aYUaCz7qg8zIkOeGDqrV/QwbNozw8HAiIiL46KOPnrh/8eLFXL16lUuXLuHn50ebNiK7pTIRZ88D0L539b9dHjL3LRo0aUxSzB11hSU8xtTKUu+yaB/125frMWpQn2HzZ0sdyhNMrS2VjTj1RcKtaL6dPIvYa+FMW/c5r7z9ltQh6ay0e/HEXrteZyUPhKpJjIrB2q61WE0iaK3kmDuEHDvOi66va1w2ram1FZmJ2p1JC3D2Ny8So2J49b13xLFCAkUFBfi776ZdT2fa99bfZlzapCg/n9TYuyKTVngo8MDvbHabT0NTExb97E7Hl/pKHVKtyUxOUdY6FITqunfjJvciIukxanit7cPAwICNGzcyYsQIOnfuzKRJk+jUqVOZbS5cuEDPnj3p2rUrBw8e5Kuvvqq1eHTF3esRZKdnVLvkQauOHXAa2I/Te/aRn52j5uiEUiZW+pWt+bjkmDsEHjxM79dGYWnbSupwlOoZGNCkqQWZKfo3Ntlp6Wye9S7nvbwZsWAOYz56T+qQdNYV/z+x6+qkkZnk+i4xKgZDY2MsWraQOhRBqLYTW0qyaQfNnCp1KEoGMhkmlk3J0PJyBwDFRXKOfbsZm/Zt6ekyUupw9FLgQS/SExJFNq0WSYiMEpO0QllRFy6zYeJbJN+O5a3vvqLjy89LHVKtyEpKoX6jhtRv3EjqUAQtF3zUBwfn52hq27JWnr93797cvHmTqKgoCgsL8fT0ZMyYMWW2CQgIIPfBcvDAwEBsbUUNv8ooFApunguu9iTtK3NmkJt1n7/27ldzZMKjTK2t9KbuaUX8tu5EXlTE0HluUoei1MTCHAOZTO8yaUvJCwv5ZdlK/tz9C/3enMjYpe9LHZJOCvU/jYGBAV0Gvix1KMJjEqNiAHR+5Z2g25Jj7nD+iDcvTBxXo/JX6tTEsikGMplOZNICXDn5J9GXrjB8/myMGtSXOhy9U1RQgP/23bTt0U0tvTiE2pdwKwpr+zYam30uJmklkp6QyOZZC7gXEcmMb76gw/O9pA5J7Uqzf0TzMKGmLvxxHIDur9ZOA7FWrVpx587D5fSxsbG0alVxRp2bmxve3t4V3j979myCgoIICgrCyspKrbFqm4iz57FoYVPlxjQ2ju14bshA/tq7n7ys+7UUnQBgYtlUrzNpoaQ8z9+/HKT7q8M05pv10nOnvk+ge639jlMee3lp8huMW/Yf6tWrJ3VIOiU+IpLk27Gi5IEGSoy6DUBzMUkraLkTP+7AwEDGK7OnSx0KAGbWJZ/Ntb0m7aOOrt+IWXNrXp4yUepQ9FLgryKbVpvER0ZjaGSEZWvNWUH3KDFJK6G8rPtsmb2IxKgYZn63VvKugOpWmv1jaq3fk1RCzaUnJHLzXDA9ammStiqmTJlCz549Wbt2bYXbbNu2jV69etGrVy+Sk3XjW/rqunkuGID2VfxmecicGeRlZ3N6z77aCEt4wLB+fRqamuh1TdpS/jv2UJCTy3ANqU1r+qCmu75m0j7q6Pof8N+xhxddX2fcJx+KiVo1C/U/jWOfnmLlk4bJzcwkKyVVZNIKWi817h5nD3nR53UXLFrYSB0Ops1Krk0zk3RnkjYq5BJXT/3FILepNDIzlTocvSMvLOTktl04dO+qk8l3uiYhMgqA5m01IzHjcWKSVmK5mZlsmbOI5DuxuP2wDofuXaUOSW1Ks39MRZ0zQQ2Cj/rSzMGO1l06Vb5xFcXFxdG6dWvl77a2tsTFxT2x3eDBg1m2bBkuLi4UFBSoPQ5dlBR9m/SExCot/2ne1p7nhg7izM8Hyc3MrMXoBFOrkuNzlh7WPX1cTkYmf+7+heeGDMS2c0epw3mYSSvGBoA/vtmE37ZdvDBhLOP/+5GYqFWjKyf/xNDYmE4v6Wb5LW2WGBUjJmlroLKmsKXGjRuHQqGgR4+HjX+effZZ/vnnH0JDQ7l8+TL164tl5DXht20niuJihmhAM0hTZSatbiVS/LFhE/UbNWTEwrlSh6KXzh46Qtq9eIbN04wv+4WKlZYTat7OXtpAKiAmaTVAdlo6W2YvJCMhkVmbvsauq5PUIalFaWaWKHcgqMNlv1MU5ufTfZT6s2mDgoJwdHTE3t4eIyMjXF1d8fLyKrNNt27d2LJlCy4uLiTp0DfvdSEi8DyOvXuoPKnyypwZFOblcXr3L7UcmWaQ8iJSOREosjUB+HP3L2SnZzDi3belDkXZeFPfS1E8yvu7Hzmx1YO+48fwxmdLxUStmsRcDiUrJRWnwf2lDkV4jJikrT5VmsICNGnShEWLFhEYGKi8TSaT8dNPPzF37lycnJwYMGAAhYWFdRm+zslISOLf/b/Tc8xILFtL29fBrAmfRogAACAASURBVLk18qIi7qemSRqHuiXciuavvft5YcJYRi56R+pw9E5JNu1u7Ls9S4fne0sdjvAUBbm5pMbdw0ZDSpw9TkzSaoislFQ2uy0gKzmV2Zu/UTmLp7KLe2NjYzw9PXFyciIwMBA7u4cf9JYsWUJERATh4eEMHTpUba+lVG5mJkUFBcolm4JQE3lZ97kacAbnEUMwMFRvkW+5XM6CBQvw9fUlLCyM/fv3c+3aNVq2bMno0aMBWLt2LU2aNOHAgQNcuHCBw4cPqzUGXRZx9jyNLcxp0aF9pdta27eh2/BX+MfzENnpGXUQnbSkvog0tRITgY/Kz87B330PHV/qK/nKFlNrS3Kz7lOYly9pHJrG5/utHN/sTp9xo5mw8mPqGYiPsjWlKC4m9NRpOr38AjIjI6nDER6RGBVDYwtzGpubSR2K1lGlKSzAqlWrWLNmDXl5ecrbhg4dyuXLl7l8+TIAqampFBcX11nsusrffTfywiKGvjNT0jjMrK3JSklFoYNjemTd9/yz7xCDZ03D5f8WSR2O3jn324Ns2vmiNq2mi4+8JcodCJXLTErmR7cF5GRk8Pa2b2nVscNTt1fl4t7NzY20tDRCQ0P55ptvWLNmDQCdOnXC1dWVLl26MHz4cDZt2oRBLVzoZCanqD2Ttp6BAbadOzJgxhRcP/+UwbOm88wLfcQHWD0QdPgPTCybMvQd9Xdg9/b25plnnqF9+/asXr0agLt373LkyBEAhgwZgo2NDc7Ozjg7O5f7QV8o381z5wFo36dHJVvC4FnTKSooJGD3z7UdlkaQ+iLyYXMq3VryVxN/ex4kMymZkRIvFzSxshST5xXw3bQd343b6P3aKCauXCYmatUg1P80DZo0xlGF47RQdxKjogFENm01qNIU1tnZmdatW3Ps2LEyt3fo0AGFQoGPjw/BwcF8+OGHFe5HNItVXVZKKmd+OVDSpLOtvWRxmFpbkaljpQ5KKRQKfv18Laf37KP/VFfRcLOOyYuK8Nu2C/uuz/LMi32lDkd4ioTIaJo52GnkZ0jNi0jPpSckstltAfnZOby99VtsHNtVuK0qF/djxoxh165dABw8eJDBgwcrb/f09KSgoIDo6Ghu3rxJ797qT8vPSk5VZmpVV7169WjVsQP9prky8/u1rDrjy+J9Hoz+YAHPvNiHkYvmMmfLBlb+5cPH3r8y7ev/MchtKh2e70VDU1E4XZeE//UvgQcPM2TOW3QdNljqcAQVZSQkkRgVU2ldWsvWtnR/dSj/HviN+ym6tQStInVxEfm0C0hTayuK5XKy03Q/a1lVhXn5+G3dSdse3ST9gG1qZams7S486fiPO/D+YSu9xozE9fNPNPJDtjaJCDxPXna2KHmgYUrr5olJWvWrV68e69ev54MPPnjiPkNDQ1566SWmTJnCSy+9xNixYxk0aFC5zyOaxVZNgMdeCnJzGTpPukxD02ZWOtU0rDyHv9qgbLgp6rjXraDfjpIad49htZBUJKhPwq0ojBrUp2nLFlKH8gRDqQMQnpR2N57Nbu8y32MTc7d9x6a35ik/pD2qvIv7Pn36VLiNXC4nIyMDS0tLWrVqVWbZbHkTA1BycT9nzhyAan07nJWcTNNWLav0mHr16tG8fVva9+pO+949aNfTWdmlMin6Nhd9/Yg8F8LNoBCyklNoYNKEVh070LpLJ1p36Yhtl450Hfrwg1TynVhir13nTmgYV07+Scqd2Cq/DkFzHFr9Nc3bOeC66hOSY+4QF35D6pAEFUScPU+P0cMxMJRRXCQvd5vBs6ZRLJdzymNvHUenuUovImfMmPHEfaUXkb169SInJ4eTJ08SHByMv79/me22bdvGtm3bgJL6y48ysWzK/dQ0nVzyVxOBBw8zYMYURrw7h+t/B1b+gFpgYmVJ7NUwSfatLfy2eKCQFzNy0VwMZDJ++XglxfLyjy/C08kLCwn1P03v10aReCuG03s8pQ5JANLuJVCYn08zB3upQ9E6lTWFNTExwcnJiYCAAABsbGzw8vLCxcWF2NhYTp8+TcqDxo3Hjh2je/fuT5xfharLTs/g9J59DJ07k5PbdnH3ekSdx2DWzJqokEt1vt+69sc3mygqKGTo3JnIjIzY99//ic97daAkm3YnEz5bSseX+hJ+RprPkcLTJURGAdC8nQMpsU82DJeSSDvQUCl3Ytk8awEKhYJ33H/Ayq515Q+qBTX9djgzObVK5Q6cRw5l+amjfHjoJ8YufZ+Wz7Tnysk/2bv0M1a+4sKXoydycMUaLnifUC4Dzcu6T2RQCAE797Lnw0/5YuQbfPLiMH6cvZA/NmwiLuwGrbt0YvQHC/j42AEW7PqRPq+70KBJ4yq/HnWorI7w4sWLuXr1KpcuXcLPz482bdpIEKXmkhcWsnPxEnIyMnjruzU0aWohdUiCCiLOnqdB48a0cepS7v0WLW3oOXoEgQcP69US76pcREZFRdG3b1+8vLzo0aNHmYvI3Nxc5UVkVZhaW4mmYeWQFxVxfPN2WnfpxLMSZRaaWluSmZIqyb61ycntu/hjwya6jxzK5C+WYyBTb81yffLb6q+5GnCGMf+3iGlf/4/6jRpJHZLeUxQXkxRzB2t78VmwqiprCpuZmYm1tTUODg44ODgQGBiIi4sLwcHB+Pr68uyzz9KwYUNkMhn9+/fn2rVrEr4a3WFhYcGH41yZ0e5Zjh8/jrm5ebnbTZs2jRs3buDk5MS0adMAaNiwIUePHiUsLIzQ0FC++OKLKu/f0NiYxuZmZCTqdiZtKd+N2/D+fgu9xoxkyhfL1d7XQyjf+cPHSrJp582WOhShAgm3ogGwaa95dWnFJK0GS4q+zY9uC6hnYMA77j9gaVs207Wyi/vHt5HJZJiZmZGSkqLSY9UhKymZxhbmKp0Q+r7xGpO/WE7KnTg8P1nF50PHsnrEePYvX03IUV8yElQ/meZmZhIRGIS/+x52f7CM1SNeZ+UrLhz9ZiONzM2Y8NlSPjv1B1PWrOCZF/rU2TLJ8uoIN2jQoMw2Fy5coGfPnnTt2pWDBw/y1Vdf1Uls2uR+Shoeiz6iiYUF09evRmYoFgVousigEIqLiyusSzvIbRoKRTGnPH6q48ikJfVFpIlVU7JSxCRteYKP+pIYFcPwBXPqfCm9ccOG1G/UiKwksXRWFf7uezjy9Q84jxhCn3EuUoejtfLuZ7Nr8VKOrPsep0H9eM9zB801tPOxPkmMihHlDqqhoqawK1asUDaFrUh6ejrr168nKCiIixcvEhIS8kTJIaF6lixZwonjx5mwaD6pxgas/nrdE9tYWFiwfPly+vTpQ1hYGMuXL1dO5q5bt45OnTrh7OzMiy++yPDhw6u0/9KG1pl6dH7127qz5Bw5cihT134urpvqgLyoCL+tHrR5tjOdXn5B6nCEcuRn55Aen6CRzcPEJK2GS7gVzZY5CzGqX5/5uzZj19VJeV9lF/cAXl5eTJ8+HYDx48crl+l4eXnh6uqKsbEx9vb2ODo6cu7cObXHn5mSioGBAU2aNn3qdv2mufLGfz8i/My/bJ71LkGHj5F2L16tsWQkJHFqx098NWYSGya5ce73o3R8sS9ztmzg0+O/8+riebVexL68OsKPf4McEBBAbm4uAIGBgdja2tZqTNoq9tp19v33f7Tt0Y2xHz9ZT0zQLDkZmdwNjyi3Lq1582b0HjuKs4eOVOnLGF0g9UWkqZXIpK1IsVyOz8Zt2LRvi/PIIXW6b+VFZLLIpFVVwM69bHtnMYG/HpY6FK0XsOtnfpy9kAYmTVj0szvOI4dKHZJeS4yKwdK2JTIjI6lD0TrlNYVdvny5sinsowYOHEhwcLDy97179+Lk5MSzzz5b7so3oXpK+6Wc2XuAoOibjB039olthg0bxokTJ0hLS0Mul3PixAmGDx9Obm6usjxFYWEhISEhVb5OMmtmDaCzjcMqErBzL79/+Q3PvTKA6d98gaGxsdQh6bwgr2OkxMYxdJ6oTaupEiKjaN7OXuowniAmabXAvRuRbHprHoX5+czz2ETf8SXNwVS5uHd3d8fS0hInJyfef/99lixZAsC1a9eU2/v4+DB//vwqdwVXRWkWkKlVxZO0Q+bOZMyHi7h03J+di5ZQlJ+v9jgedyf0Gof+t47PBo5i5+KlxF4Lp/+0Sfzf4V9Y9Is7L04aj7V9G7UVWTdu2IC2PZ0ZNnUSuY/81cXGxmL8lJOkm5sb3t7eaolBF13wPsHJ7bt5/o3XeGHiOKnDESoRcfY89l2dMGpQv8ztA92mAiXZcPpIqovIevXq0cTSQq/KS6jCwsKC48ePc+PGDdZ+8BGpkdEMmzfriRUhpUsxb9y4gaXlw7I+p06dIjw8nAsXLnDhwgWsra2rHENpmSAxNlUTfiZQ1NtTk1vnL7D+jenEhV3nzTUrGLv0fZF9JZHEqBgMZDKs2ogv7QXt17x5c+Lj48nPyeHIj+6Ym5ji4PxcmW1UaapqZmbG6NGjOXnyZJX2b/pgklZfyh086q+9+zm48iu6DHiJmd+twbB+/cofJFRbcZEcvy07aePUmU79XpQ6HKEc8beiaeZgr3GN9cSnLS0Rf/MWG1zdeHPNCt5YvgTbzh357Yv1eHt7PzGJt3z5cuX/5+fnM2HCBIKCgp5oKrZ69WrlhEBtKc0CMrGyAq4/cf+ri+cxaOZUgg4fY//y1XXe8ENeWMgVvwCu+AXQpKkFziOH0stlJOMeZGbmZWdzNzyC2LDr3A2/QWzYdRJuRVfY+AhKJj6s7dtg19WJNs92we65LrRwbIeBTIajaVNM0rNVim3KlCn07NmT/v3Lr4dY06ZuusL7+y20cGzHax8tJiEyisjzF6QOSahAxNnzDHxrCg7OXbnxb0nmvmkza/q+7kLQ4T9Ij0+QOEL90tjCHJmhIZliIrCMJUuWcPLkSdasWcNHH31E++eeJbOdPb3HjibwwO/Aw6WYPXv2RKFQEB8fj7m5Oenp6UDJ8fvRyfSqMrUuOaaLsRGklJWcwuZZC3h10TwGzJhM6y6d2P3BMtITEqUOTa8kRkUD0MzBTtnoRBA02YkTJ7CxsXni9mXLlpX5/e99v6LY5sHwd99m88z5Kj+/TCbjl19+4bvvviMqquK/ifKulaIvXmbPh5+SGndX5f3pkn8P/Ia8sJA3Vixl1sZ17Hj3Qwpy86QOS2edP+rN4DnTGTbPjbDTf0sdjvCYhMgo6jdqiHmL5qTdVe8q7poQk7RaJDczk+3zP2D4gjm8Mns6LRzbsev9jzW6pk5FmbT16tVj7Mcf8KLr6/zt+Su/rf4ahUIhRYhK91PT+Ounffz10z6aOdhh91wXWnV6BttOz9Bn3GhlA43C/Hzu3YgkNuw6cWHXiQuPoImF+YNJ2c60cepMQ1MTAHIzs7gdeg2/bbu4ffkqNg0b89H7D5fm29raUlBQ8EQsgwcPZtmyZfTv37/c++HpHdv1iaK4mL1LlrNw73amr1/NhkkzSY27J3VYQjmiQi4hLyzCsU8P5STtwBlTqFfPgJPbdkkcnf4xeXBcFtmaZY0ZM4YBAwYAsGvXLgICAtgYdJohb7/F+cPHKCooKLMUE0pqBw8fPhxPT0+1xGBiKcZG0AzFRXKOfP09MZdDmbhyGYv37+Snj5YTEai/nzvqWlJ0SUZhyw7tueIXIG0wgqCCIUMqLhGUkJCAjY0N8fHxWJpbkJSUTPte3XHs05OIs+eBkp4qpedhKLleKi1zALB161YiIiL49ttvnxpHeddKGQlJXPTxq+Yr0w3nfj9KUVEhkz7/lPk7f+ToNxvFMb2WFBfJ8du6E9dVn9C5/0tc+/OM1CEJj0iIjAageTsHMUkrVJ+iuBjv734kLuw6rp9/wuJ9Huxa/DHRl65IHVq5sh50pjaxfpjpaSCTMWHFUnqNeZVTHns5uv4HqcKrUGJUDIlRMQQdLqnvWM/AAGu71spJ21adOuA8/BVemPCwjlKxXM69iEgu+Phx+3IoMZevkhR9u8zk8w2ZjO2bf8Te3p64uDhcXV2VmVelunXrxpYtWxg+fDhJSfq3FKc68u5ns+PdD1n0iztvfbuG76e+TcGDur6C5ijIzSXmcijtH9SlNbFsyvNvvMb5I94adWLUF6YPskpETdqySpdiAsTHx9O8eXOOffcj83Zs5IWJ4zi9x/OJpZgFBQVllmJ6eHggl8v59ddf+fzzzyvcV0UrIkytrZAXFpGTnqHulycI1XL5xCnu3rjJjG++YM6WDfj8sBX/7bsl/4JdHxTk5hJ77TpD33GjVccOnPL4iagLl6UOSxCqpbRfypo1a5g+fTr7f/mFjOfaMfzdOcpJWl9fX1avXo25uTkymYyhQ4eydOlSAFatWoWZmRmzZs2S8mVovZCjvhTk5DJ26fvM3fYdt4Iv4rNxG5FBIVKHpnOCj/jwyuwZDJ3nJiZpNUzCrWgAbNo6EP7Xv9IG8wgxSaulLp84RWJUDG99u4Z3PDby2xfrlcswNYm8qIjstHRMH9TXkxkaMvnLz+g2bDA+G7dx4scdEkeoGkVxsXLi9sKx48rbm9q2pNUzjmRnZBJ7NbzSicFH6wjLZDJ27NjB2LFjWbFiBefPn+fIkSOsXbuWJk2acODAAQBu377NmDFjavX16YLk27Hs+c+nzN68HtfPP2HPfz4RF48aKOLseYbMnUlDUxMGzJiCgaFMZNFKRJ/rnqq6FBNAoVAQGRTCjcAgBrlN5eyvXk9s86gpU6Zw9+5dmjRpwq+//srUqVPZs6f8essVrYgwsWpKVmqqOIYJGiU55g7fTZnF+P9+xMiFc+nQtxfnfjvKtdP/kJuZKXV4Om3LnIW8OGk8L00az4LdW4i+eIVTHj9x9dRf4jghaJUvv/yS/fv34+bmRkxMDBMmTOCZwf1Y8MUq+h05zBujx5CWlsaqVasICgrC1taWd955h7S0NFq1asUnn3xCWFgYISElk4k//PAD7u7uEr8q7RTqf5qwv/6l7+suDJ41nXk7NnIzKATfTdu5JcrHqU2xXI7fVg9cP/+UMR+9xxW/AGIuX0VeWCh1aHovNzOTzKRkmrdzkDqUMsQkrRaLv3mLDZNmMmXNCt7470fYdn6G31av17g/+MzkFEysLDE0Nmb6+tV07v8iXmu/48/dv0gdWo2lxt4lNbZqNY0eryM8duzYMnWEn7ZESHi6G/+e48j6Hxjz4SLuvf2W1nwJoE9ungtm2LxZdB06iOcnjCXkj+OkxMZJHZZeMrV+MEmbon+TtKouxbSxsSExsaT+pvd3P7LoZ3defnPCE0sxjY2NiYsreR/fvVtyTrh//z4///wzvXv3rnCStiKmVlYaXcpI0F8FuXn8vHQFUSGXGfL2W0z+YjnyoiJunb9I6Kk/CfX/q9z64sOGDePbb79FJpOxffv2J+43NjZm9+7d9OjRg5SUFCZOnEhMTExdvCStkJORyYkfdxCwcy+9XxtF/+mTeOvbNSRGxRCwcy/BR30pqqA8liBoktTUVF555ZUyt537/ShXZ75Jbs595W0eHh54eHgQFBTEzp07gZIyCJrW4EfbyQsL+dvzV84eOkLf8SWTtfM9NhFx9jy+m7YTFXJJ6hB1QvBRX54dPICXJo2n35sTKcjNI+rCJW6eC+bmuWBir12vUW8ecY6tvoTIaJq3tZc6jDIMKt+kZNDDw8OJiIh4avfocePGoVAo6NGjBwB2dnbk5OQoOxxv3rxZPVELSrmZWbjP/w9+W3fy/PjXmO+xSdm1UlNkJadgaduSWRu/puPLz3Nw5Vc6MUEraKbTuz0JOnyM4fNn4zSo/KZrgnRiLoWSn5OLy4cLMapvzMntIotWKiaWluTdzxYNIx5TuhQTYPr06Rw+fBiA21eucfXUXwyYPpnT//7D0KFDMTc3x9zcHFNTU+UKCUvLkslvQ0NDRo0aRWhoaJVjMLFqStaDxpuCoIn+PfAbq4aMYYPrTE7t+AkTq6aMXfoBn574nff2efDK229h49gOAAMDAzZu3MiIESPo3LkzkyZNokGDBmWez83NjbS0NBwdHfnmm29Ys2aNFC9L4xXm5fO35698OWoie/7zCfm5uUxY8THLfH5lkNtUGpg0kTpEQaiy4iI5xzfvoHXnjuKzu0SKCgo48/NB/jdiPL+v2UDzdg4s2PUjb2/7DvtuzwGVzwkZGxvj6elJREQEgYGB2NnZ1fXL0FjFcjk7Fv4fn748nB3vfkjgwcOYWFny6nvzWPSzO6vO+DLz+7X0m+pKiw7tq/RlhDjH1kzCrSjty6QtHfQhQ4YQGxtLUFAQXl5ehIWFldmuSZMmLFq0iMDAwDK3R0ZG4uzsrN6ohTIUxcV4f7+F2LDrTPrfpyz23MGu95cRfVEz6lVlJqfQ4fneFMvleC5bRfBRH6lDEnTcwZVraGbfhslfLCfyfAgFuXkU5OZSkJNLQW4u+bl5yv8vyM0lPyeXgtw8EqOiyUgQdYBrk7yoiKiQS3R8qS8hf/iSFH1b6pD0lqm1pcjWLEd5SzEBevTowWAbO+JNTeg6ZqRyKSaUZM+mpaXRqFEjfH19MTIyQiaT4efnpyxnUBWm1lbcDr2m1telD0QmSd1SKBTcuRrGnatheH+/BSu71jgN7IfToH4MmzeLEQvmkHwnlsLI28QlJhAdE4OiuBhPT0/mzy/byX3MmDF89tlnABw8eJAfftC8fgWapFgu56LvSS76nqR97x4Mmvkmr743j8GzpxN48DBhp/9BUVys0nMV5udz+4o43gjSCvnDl1dmT2f4gtlcPXValPGQSFF+Pn/9tI/Ag7/z/ISxDJo5lXf3bOHGP2dZOmIcA/v3V84JyWSyMo99dCJw4sSJrFmzBldXV4leiWbKy7rP1YAzXA0oqU3b2MKcdr2649i7B+1796DLgJcAyE5LJynmDvk5OeRn55T8Nye35P+zc8jPyVb+3sm+LXfu3iUqKgpAnGOrKD4yigZNGvPs4P7kZKi/dFPavfgqNzWvdJK2d+/e3Lx5s8ygjxkz5olJ2lWrVrFmzRo+/PDDKgUgqM8VvwBlndpZG9fx+bCx5N3PljosUmPvUlRYyE//91/RlVaoE0UFBexcvJTXP/kPZs2bYdywIfUbNcS4YUOMGzbA0Ni43Mf9vmYDf/20r46j1T/hZ/7FsW9P/LbulDoUvWZiZals7ig8VN5STIDg4GCmTJjIiHff5vaVq3gHnMHDwwN4WE82JyeHnj171mj/BjIZjS3MRSZtFZWXVCAuIOtWcswdAnbuJWDnXkwsm9J5wEs4DerHqJEjsDC3wqKlDamxd4mNjcX4sfPwo8345HI5GRkZWFpakvJYOZaKmu3ps9Llsi2fcWTAjMm8PGUCA6ZPVvnxiVExrHERfweCtBTFxfhu3MbUdZ/TecBLXD31l9Qh6bXCvHxO7/Yk8MDvvDDxdaYunE+xWROSMtIpLCwUE4Fqkp2WzuXj/lw+7g+AWXNr2vcqmbA1a25N/caNMLW2on6jRtRvXPJjaGRU5jkcTZtilPewVII4x1ZNXPgNAGZs+LJWnv/4jzvw3Vi1hI1KJ2kf72AcGxtLnz59ymzj7OxM69atOXbs2BOTtA4ODoSEhJCZmcknn3zCmTNPdrTTxzdDbUmIjGLDpJm06thBIyZoAU667+Hc70dF93ahTmUmJeOxaEm59xkYyh5M2JZO3jagfqNGODs+Q3h4uMjCqmV/7/uVqwF/VflbRUG9Dq3+GkMjUZq+qry/31Krz69QKNg4bS6ZelgruCbKSyoQF5DSyUpJ5eyvXpz91YvsySG8PmlilWv4l6eiZnsC3L0ewc9LV/DHhk1YtbZV+XGF+fm1GJUgqO7ScX8K3/2Qa3/+LXUowgMFuXkE7NxL8/xiTCa5cj81DRATgbUlIyGJ4KM+T115LDMyon6jhg8mbRvzmosL/fo+r5b96+M59vblq3wz8S3qN2pYK8+fdq/qc2A1vjqrV68e69evZ8aMGU/cd+/ePdq0aUNqairdu3fn999/p0uXLmRlZZXZTh/fDLUpL+s+kUEhUoehVJSfLyZoBY1SXCQnL+s+eVkPGxQYGBhwfN9BkYVVB4qL5GKCVgPER0RKHYJQDkVxMdGXrkgdhtYpL6mguheQIC4i1Sn61i1MjOorf7e1taXgsSZXcXFxtG7dmri4OGQyGWZmZuWOi1C5jIQkUbpJ0EoKhUK5DFzQLEUFBWQkJKrlucTcT83ICwvJyShULs2/+Pe/vDZkmPJ+cY6tuthr4VKHUEaljcNKB7SUra2tsoMxgImJCU5OTgQEBBAVFUXfvn3x8vKiR48eFBQUkJpaslwvJCSEyMhIOnToUAsvQxAEoWYezcIqXcZjbm5eZpsxY8awa1dJo6uDBw8yePBgKUIVBEEQatm2bdvo1asXvXr1IjlZ1G6uiaCgIBwdHbG3t8fIyAhXV1fS09PLbPNow77x48fj7+8vRaiCIAhCOcqbE6poIhAQE4F1SJxjdU+lk7TlDbqXl5fy/szMTKytrXFwcMDBwYHAwEBcXFwIDg7GysoKA4OSXTg4OODo6MitW7dq79UIgiBUU02ysB43e/ZsgoKCCAoKEhlYgiAIdUBcQGouuVzOggUL8PX1JSwsjP3795OXl8eKFSsYPXo0AO7u7lhaWhIREcH777/PkiXllysSBEEQ6p6YCNRc4hyreyotd/DooMtkMnbs2MG1a9dYsWIF58+f58iRIxU+tl+/fqxcuZLCwkKKi4uZO3cuaWlpan0BgiAImkYs4xEEQahbj15AxsXFPfUCMjAwUFxA1jFvb2+8vb2Vv48dO5bly5crf8/Pz2fChAlShCYIgiBUorw5obFjx5aZE3J3d2fPnj1ERESQmpoqSsLVIXGO1S31AIXUQTwqMTFRpUY8VlZWdbr8TNv3Z2dnR7NmzWr0HJo4Nto+LlB3Y6ML/1a1ub/GjRvTsmVLIiIip3CdZAAAIABJREFUALCxscHc3BwTExPlNj4+Pnz22WcEBgYik8mIj4/H2tr6qc8rxkYzj2f6ShzHxXG8KrRtf2ZmZspM2ZSUFIyNjdm8ebPyArJ+/frs2bMHZ2dn5QVkaaOxpxFjo5nHcU08ntX1/jT1eKavxLFCM48VIMamNvYnjuOauy/xuVRz96fq2Ci08ScoKEjsT0N/6jJ2MS6aG7u27U8mkykiIyMV9vb2CiMjI8XFixcVnTt3LrPNvHnzFJs3b1YAiokTJyr27dunEbGL/YkfbR4z8X7U3Nh1fX/aHLuu70+bY9fl46f40b4x0/X9aXPsur4/bY5dHMc1M3Zd31/pT6XlDgRBEPSBKqVdxDIeQRAEQRAEQRAEQRBqg5ikFQRBeODxej6AqOcjCIIgCIIgCIIgCEKtkwGfSR1EdYWEhIj9aai6jF2Mi+p0/d9KjI3Yn6A+4jiumXT930qMjdhfbdDlfyttHhd9pcvvRyn2p066/m8lxkYz9yfGRezvURrXOEwQBEEQBEEQBEEQBEEQBEGfGEgdgCAIgiAIgiAIgiAIgiAIgj4Tk7SCIAiCIAiCIAiCIAiCIAgS0rhJ2mHDhhEeHk5ERAQfffTRE/cvXryYq1evcunSJfz8/GjTpo3yvqKiIi5cuMCFCxc4fPiwWvY3ffp0EhMTlc/r5uamvG/atGncuHGDGzduMG3aNLXsb/369cp9Xb9+nbS0tBq9PnUSYyPGRtX9ibF5SJfHRpvHRV/p8vtRlf1p8ntSl8dGm8cF6nZsxN+M6nT5b0aV/Wny2OgrXX5PavP7UZfHRZX9ibFRfX9ibB4SYyPt2Cg05cfAwEBx8+ZNhYODg8LIyEhx8eJFRadOncpsM2DAAEXDhg0VgGLu3LkKT09P5X1ZWVlq39/06dMV33///ROPtbCwUERGRiosLCwU5ubmisjISIW5uXmN9/foz4IFCxTu7u7Vfn1ibMTYiLERY1NbY6PN46KvP7r8flR1f4/+aNJ7UpfHRpvHpa7HRvzNaOa4iLERP+p6j2jre1Kb34+6PC5ibMTYiLHRzbHRqEza3r17c/PmTaKioigsLMTT05MxY8aU2SYgIIDc3FwAAgMDsbW1rdX9VWTYsGGcOHGCtLQ00tPTOXHiBMOHD1fr/iZNmsQvv/xSpddUW8TYlCXGRoyNKnR5bLR5XPSVLr8fq7M/TXpP6vLYaPO4QN2OjfibUZ0u/81UZ3+aNDb6Spffk9r8ftTlcanO/sTYiLFRhRibsup6bDRqkrZVq1bcuXNH+XtsbCytWrWqcHs3Nze8vb2Vvzdo0ICgoCD+/fdf3NzcyMrKwsCg4peo6v5ef/11Ll26xIEDB5RvvqrGWtXHtGnTBgcHB/z9/ct9faq+adVFXWOTl5fHp59+ytKlS9m2bVu19te/f3/lfWJs1Pt3o0rs4u9Gdbo8Nto8LvpKXe/H4OBgcnJynnp+rcr+xLFCt8+x2jwuULfHcfE3ozpdPr9W9TGaNjb6SpfPsdr8ftTl82tVH6OrYyOO4+onxuYhKcZGoyZpq2LKlCn07NmTtWvXKm+zs7OjV69eTJ48mU8++YSuXbtSXFxco/0cOXIEe3t7unbtyokTJ9i1a1e1n2vUqFFMnjyZjIwM3N3dMTQ0LHe7Pn364Ofnh4WFBfHx8ezfvx8bG5syr2/Xrl2kpqaSnJzMl19+We2YasPTxiYpKYl58+axb98+Zs+eXaP9VDY2FhYWHDp0iE8//ZRly5YxadKkCp/LxcWFcePGkZmZya1btxg5cmSZ++3s7PD39yc7O5ugoCDOnj1b5r316Nhs2LCBtm3b1ui11ZbK/m7UFfvTxsbZ2Zm//vqrwseeOnWqTI2ZqnB1deXgwYNibJ5ClWOanZ0dq1atqvACYfny5SxcuFDlfWrzuOirp70fx48fT0JCAvb29jXej7rOse+99x7btm1j2rRpuLu7Y2xsXO52ffr04fjx44SFhWFubo6npyc2NjbAw9d36dIlfv31V1JTUzXu/AraeY599tlnuXLlCpmZmaxfvx5nZ+cy95eeYyMiImjQoAEDBw584rVpw7GiLo7j4vxaddp2ft2zZ0+V9qvNY6OvtO0cK65hNff8Kq5hxTWs1DRhbB7dry6cYzVqkjYuLo7WrVsrf7e1tSUuLu6J7QYPHsyyZctwcXGhoKBAefvdu3cBiIqKIiAg4ImLgOrsLzU1VbmP7du306NHjwofe+/evQr3NXToUFxcXAgJCcHOzo62bdsyffr0cl+fxf+zd95hUVxdGH9ZOihFUEB6EYRYUeyK0ahBJcYSRWNXNHYTSWwxCsYuRmMXW0BFsQYjxgYqMagoRZoICAhIV5ogsHi+Pwz7uUpZ6uzC/T3PeR6Wmbn3nXtm5szcuXOuujpkZGQwcuRIGBoaIj8/H8eOHRPs35AhQwAAy5cvR6dOnWBvb4+5c+dWua91pb58w+fzERoa2ii+2bt3L0pKSuDh4YFdu3Zh//79sLKyqrC+vLw8PH36FOrq6vjyyy/x5ZdfQkNDQ7Dc09MTwcHB0NDQQEFBAQYPHgxNTc1P9k/UY68+kbTzplWrVtVqFaW+iRMnIiEhAQUFBbh48SLU1dXh4ODwyacIL1++xMiRI+Ht7Q1dXV34+PjA0tJSaJ2lS5ciNTVVcPNZWQdPTZE033y4bfn/KqOwsLDaujp37oxHjx5h06ZNGDJkCDp37lzpvoWHhyM/P19gfD4fv//+u2D9QYMGISoqCm/evIGvr69QcnqGaEjy8aivr1/p8Th06FCsWLECCxYsgL+/P0xMTODs7Fxhferq6jh06BBiYmIwfPhwQXwt3785c+Zg4MCBOH/+PJYvX94o8RVo2jE2JSUFampqmDp1KtTV1eHu7g4rKytMmDBBsE55jI2MjMS2bdtw7tw5QYzlMr6W62+s84bFV9GR5OtZ+f/qUl95fH3z5g3Wrl2LR48eCW3/4f7p6uoKxVgWXxsGST4mq4ux7BlWPOMrwJ5hAfYMy2Js04yxnCUk/tikpaUpLi6OjIyMBAl8rayshNZJSUmhrKwsioqKooKCAjp8+DC1adOGbty4QXl5eXTjxg0yMTGh58+fExGRtLQ0ASA/Pz9ycXGhf/75h/Ly8ujatWvUpk2bKuszNDQkIiJHR0dKSUmh7OxsSkhIECQofvXqFV26dInOnDlDZWVltHjx4kr37eTJk7Rp0yZBfUOHDqWSkpJP9g8AWVhYUHx8vOB3165dKS8vj+Tk5AgAPXjwgNLS0gTJjWfOnEkBAQGc+6ZLly4UGxtLZmZmQv9XU1MTaE9MTKSkpCTas2cPeXh4CNaZPHkyJSQkUFZWFq1atYri4+Pp5cuXZGRkRC1btqTs7GzKycmhiIgIcnJyoqSkJNLW1hZs//XXXwvaQF1dneLj46m4uJi6detGz58/J3V1dXJ3d6dNmzaJtH8ZGRl04sQJAkDt2rWjt2/fUosWLQS+uXv3Ls2dO/eT/dPQ0KBnz55VmXhaXH0jqnZR6qvKNxkZGRQQEEBqamoC33y4rZ+fH82aNavK+uzt7SkvL4/69+9PysrKdPLkSfrrr7+Ezpvy/bOysqLc3FwaPnw4PXv2jHbs2EExMTGCa8PQoUMpLS2NrKysSE1Njfz8/Co9Tpq6b54/f05qamrUsWNHIiLS1NSssJ61a9fSiRMnqqxLVlaWEhISaOPGjRQfH0+LFi2ihIQEkpWVrXbflJWVKT8/n/r37y9YJycnh8aNG0fy8vK0devWBr/mNUWr7viIj4+nHTt20Nu3b+nNmzeC+Orj40N5eXl069YtUlNToy5duhARUYcOHQioOL5qaGhUWV95fHVycqKUlBR6+fIlHTt2TODXzZs3U0FBAZ05c4Zyc3MpIyPjk2tFuZ08eZI2bNggqG/SpEmUmppa4fEPCMfY8vhafkzeu3ePvv/+e8Ex2RjxVRTfAJIbYyvaNw8PD/r9998J+H+Mtba2FvilPMZyHV/r0zei6GfxVTz9Uh++qUl89fDwqLK+8vi6dOlS6tChA2VlZQnia3X7x+Ird9cKSY6x7BlWPONrRfvHnmHrVh+LsZLpmyYYYxvnJBTV7OzsKDo6mmJjY2nVqlUEgJydncne3p4AUGFhIRUXF1NYWBiFh4fT27dv6fHjxzRt2jQKCwujvLw8SktLox9//PGTTtrY2Fhq164dKSgoCA7iquorD3A5OTn05MkTevDgAWVnZ9PgwYMJAF26dInevXtHL1++pBkzZpCCgkKl+xUSEkLjx48X1FfeidyqVSuh/Ss/eD48wZYsWUJhYWH05MkTCgkJIT6fT+vXrxcs79atG+Xl5XHumxs3blBaWhoFBwdTcHAw/fnnnwSAevfuLdBeXFxM27ZtE5wgAMjS0lJwMMvJyZGrqyuVlpbSypUrKTo6ml69ekXx8fGkrq5Ov/32GyUkJFBSUhJt3LiRwsPDKSQkhHx9fcnCwkKoDcvKyigmJoamT59OAGjZsmXk7e0t0v6lpKTQ3LlzydnZmTZs2ECRkZFCvtm9e7fgAfPD/Xvy5AnNnDmTs/MmKyuLsrKyKC8vjzIyMmjDhg0C3+Tm5lJRURHx+XzKy8ujrl27Uu/evSkqKopev35NpaWllJ+fX+GsiR/atGnTKCIigl69ekV8Pp+ys7Opd+/edOnSJcrIyKD09HS6fPmywDd3796lW7duUW5uLj148IC8vb2psLBQ4JsvvviCoqKiKCcnh3bv3k23b98WCnAVHXsbNmygJ0+eCI49ExMT4vP55OrqKrRd7969KSUlhXJzcwW+kZKSosLCQho0aBAB/+/gKd9m0KBBlJqaWi9++emnnygzM5PKysqouLiYDh8+TMeOHaO7d+8KtD969Ij4fL7gvHnz5g05OTlRTEwMlZWVUVZWFkVGRtKTJ08EL6KqmrHSzs6O4uLiiIjo3Llz9OLFCyosLKS9e/dS9+7dKT09nfh8PmVmZgrOGx6PR9u2baO8vDwqKSmhjIwMoeunkZER3b59m/Ly8uj69eu0e/du8vDwqPKaMGTIEEpOTha6niUmJtKwYcOqPWemTp1KcXFxgt+Ojo507949wW8lJSUqLCwUOueZ1exaUZHP4uPjKScnhzIyMig8PJxKSkro9evX1KVLF7K1taX8/HxKTU2lqKgokeJrVfXNmjWLiIgiIiIoIiKCnj59SsXFxYLr9dq1a6m0tJRevnxJMTEx5OjoWOk+lcfX8vpiYmKIiARxsqoYu2TJEgoICBAck3w+n2JiYgTHZGPF1+p8A0h2jP1434KCguivv/4ie3t7+vrrrykyMlLIL+UxVhzia7n+jIwMKikpobdv31JERASdPn1a4JuIiAgqLS0lPp9PRUVFdPv2bQJAo0aNopycHCotLaXS0lK6efNmlfWw+Cq6NfX4WtU1Yc2aNZScnCx0PSuPrx9fEz4+b1h8bfhrRVONsewZVjzj68f7x55hK6+LxVjRjcVYzmNs456IdbX4+HiaNGmS4Pe5c+do3759gt8LFy6kixcvCjpYPwxwq1evFqw3b948unr1apV1lZfxYSNu2bKFDh8+LHDanTt3RNIdGxsrcCwAkpGRISIiQ0PDKrfr2LEjZWdnU79+/QT/4/P5QprMzMyIiDj3jaj+Gzx4sFCAW7NmDXl6egrWUVJSouLiYkFneFxcnFDbOTo6UlJSUpX19OvX75OL1OzZs8nPz69ajevWraOQkBDBG5LJkyd/8sbj119/pWPHjnHenh/buHHjSEdHh6SkpGj8+PFUUFBA2traNG7cOEpOTqbu3bsTADI1NSUDAwPi8XgUEhJCO3bsICUlJZKXl6e+fftWWce0adOotLSUpk+fTjwej9avX0+JiYm0Z88ekpOToyFDhlBeXh4pKysTAPL09KQzZ86QkpISffbZZ5ScnEz+/v4EvH+7lJeXR2PHjiUZGRlaunQplZaWfhLgPrZLly7RTz/9JPS//Px8sra2/mTdBQsW0JUrVwS/eTweFRUVCUa+f9jBU66p/OazLr4wNzenFy9ekI6ODgHvrycmJiZ07NgxoRtUW1tboeM5Pj6eAgICqE2bNtS2bVtKT0+nx48fU5cuXUheXp5u3bpFv/zyS5V1l1+79u/fT/Ly8jRkyBAqKiqiixcvUuvWrQXlDhgwgADQ3LlzKSoqivT09EhdXZ18fX2Frp///vsvubq6kpycHPXv35/y8vKERhFUZEuXLiUfHx+h/12+fJl++OGHatvu1q1btHbtWsHvnTt3Cl3nAVBYWBiNGTOG83OuKRmLr5IdX8t9yGJswxiLryy+ltfF4iuz2hiLsZIdY1l8bVhjMZbF2PK6WIwFiVVOWlFJT08X/F1UVPTJ7xYtWlS4XVpamuDvwsLCStf7mA9nfktMTETbtm0rXFYVBQUFUFFREfwu/zs/P7/SbUxNTXH16lUsWbIE//zzT5VlVVWOuNO2bVuhdiwsLER2dnalyxMTE6st8+M2AkRrpwULFmDq1KkYMWKEIOdJbcvignPnziE1NRVEBC8vL8TExKBHjx6YPXs2tm7dKsinEhcXhxcvXqBHjx5o27YtfvzxRxQWFqK4uBj37t2rtp74+HgcP34c7969w5kzZ2BgYAAXFxeUlJTgxo0bKCkpgZmZGXg8HsaOHYtffvkFhYWFiIiIEEryPXz4cEREROD8+fPg8/nYuXOn0HlaGS1atEBubq7Q/3Jzc9GyZctP1r158yZsbW1ha2sLWVlZrFq1CnJyclBSUqqwrPK/KyqrJpSVlUFeXh5WVlaQkZFBYmIinj9/LtK2u3fvRkZGBl6+fAl/f388ePAAISEhKC4uxsWLF0XOF7V+/XoUFxfjxo0bePPmDTw9PZGZmSkot7yc8ePHY+fOnUhOTsbr16+xadMmQRn6+vqwsbHBmjVrUFJSAn9/f1y+fLnaumviow8xMDCAra2t0HFS27IYNYfF16YVXwEWY+sLFl9ZfP0QFl8ZtYHF2KYVY1l8rT9YjGUx9kOae4yVyE7axubDpMIGBgaCRMEA8P7lX/VEREQITZrTuXNnpKWl4dWrVxWub2BggJs3b2L9+vU4ceJEtWVFRESIpEMcSU1NFWpjRUVFoYTnHy8XJdnys2fPICMjAzMzM8H/qmunGTNmYMWKFRg8eLBQ4uiIiAiYmJgI3RCJa5tPmTIFwcHBeP36NV6/fo0OHTpAU1MT+vr6iIuL+2R9fX19JCYmoqysrEb1fHxTCQAZGRlC/2vRogVat24NWVnZSm9QPr55AUS7aazJTUd0dDSmTZuGPXv2IDU1FZqamoiMjERycnKFZYly8ykKcXFxWLp0KdatW4eMjAx4enpCR0dHpG1rexNf23Kquols27YtXr9+jcLCwgqXV0ZtbwynTJmCf/75BwkJCXUuiyH+sPja8LAYWz+w+Mria23KYfGVwSUsxjYsLL7WHyzGshhbm3KaaoxlnbQisGbNGigqKsLKygozZszAmTNnalyGu7s7Zs2aBUtLS6iqquLnn3/G8ePHK1y3bdu28PX1xZ49e3Dw4MEKy/rhhx/Qtm1b6OjoYNmyZZWWJQmcO3cOI0eORN++fSErKwsXFxfweP8/NL28vLBy5UqoqalBV1cXixYtqrbMwsJCXLhwAS4uLlBSUkKfPn0watQoeHh4VLj+pEmTsHHjRgwZMgTx8fFCy2JiYhASEoK1a9dCXl4eX3/9NTp16oTz58/XbcfrGQMDA7i5uWHhwoXQ0NCAuro6wsPDISUlhaSkJJiamn6yTVJSEgwMDCAtLd0gmjIzM1FaWlrpDcrHNy8APvldER/f5BkbG0NeXh7Pnj2rcP3z58+jY8eO0NTUxNq1a2FkZITAwMAKy6ru5rMmeHp6on///jA0NAQRYcuWLXjz5o3gDSgAaGtr17meulLVTWRqairU1dWFNItykxkREYFOnToJ/a9Tp07V3hhOnTpV6A1keVkf+khJSQmmpqZieZPJqBksvjY8LMbWHRZfWXytLSy+MriExdiGhcXX+oHFWBZja0tTjbGsk1YE7ty5g9jYWNy6dQvbt2/HjRs3alzGtWvXsHXrVvj5+eHFixdITEzE2rVrBcvDw8MxadIkAMDs2bNhamqKdevWIT8/X2DlHDx4EJcvX0ZYWBjCw8Nx5cqVCgOhpBAZGYkFCxbg1KlTSE1NxevXrwVviADA2dkZiYmJiI+Px/Xr1ysNUh8zf/58KCoqCt4AzZs3D5GRkQCAfv36CbXpr7/+Cg0NDQQGBgrae//+/YLlDg4O6N69O16/fo3Nmzdj3LhxyMrKqqcWqB+UlZVBRMjMzAQATJ8+HR06dAAAHD58GE5OTrC2tgbw/jMkAwMDPHz4EKmpqdi8eTOUlJQgLy+PPn361Jumd+/e4cKFC1i3bh0UFRVhaWmJadOmCZZfuXIFn332GUaPHg1paWksXrxYpAv+yZMnYW9vj379+kFJSQkuLi64cOECCgoKKlzf2toaPB4PmpqaOHToELy9vREdHQ2gZjefNcHc3Byff/455OTk8PbtWxQVFeHdu3cICQnB8OHDoa6uDi0tLSxdurTOddUVLy8vLF68GLq6ulBTU8OKFSsEy168eIFHjx7B2dkZsrKy6Nu3L+zt7ast8/bt2ygrK8PixYshJyeHBQsWAAB8fX0r3aZ3797Q1dXF2bNnhf5/8eJFdOjQAWPGjIG8vDx++eUXPHnyROBDhuTC4mvDw2Js3WHxlcXX2sLiK4NLWIxtWFh8rR9YjGUxtrY05Rjb6ImhJcU+TtzOrPGsPDk71zokzX799VfKzs6mzMxMcnV1FZplcu7cufT06VPKz8+nsLAw6tKlCwEgfX19unjxImVlZVFmZibt2rWryjqmTZsmSJoOvE/g/nHS/6SkJEHydk1NTbp8+bJgZkwXFxeh7YcNG0bR0dFVzoxZkU2cOJESExOpoKCALl26ROrq6oJlPj4+tHLlSsFvf39/ysvLo+zsbDpw4AApKSkJlfX9999TWloa5ebm0tGjRwUJ9+tiHTt2pAcPHgjqvXz5Muno6JC8vDydPn2acnNzKTQ0lJYuXfpJ0vUPj30PDw+hBOSzZs2iGzduVFl3RdeupKQksrW1FSq3fCIKaWlp2rFjB2VlZdHz589p/vz5QtsbGxvT3bt3KT8//5OZMauyLl260KNHj6iwsFCQOL582cqVKz9Jyn7gwAFyd3evsKzBgwdTVFQUFRYWkp+fX7UTVjATb2PxlVtjMbbmxuLr+2UsvrL4ykz8jcVY7ozF19oZi7Hvl7EYy2IsAJL67w9GBRgaGiIhIQEyMjI1znfCqBvx8fGYPXs2bt26xbUUBoPBYNQzLL5yC4uxDAaD0XRhMZY7WHxlMBh1pdmnO5g0aZLQ5xjlFh4eXuOyfHx8Kixr5cqVDaCcoa+vX2F75+fni5QThsFgMBgNB4uvkg2LsQwGgyG+sBgrubD4ymAwqoPz4e3MmDETL9u/fz/l5+d/Yvv3729WGsTZJk2aVGH7hIeHNysNzJgxYyZJJg6xTRw0iLOJQ2wTBw3MmDFjJmkmDvFNHDSIs4lDfBMHDVUZS3fAYDAYDAaDwWAwGAwGg8FgMBgcIsO1gI/JyMhAYmIi1zKaHIaGhmjTpk2dymC+aRiYb8QX5hvxpD780lxhx2PDwK4V4oGRkRFUVVXB5/MRERFRoV927dqF4cOHo7CwENOnT0dwcHC15TLf1D/snBFfWIytPeyYrH/q63hkvql/2HVcfGG+EV9E9Q3nw3k/tMDAQM41NEWrj3ZlvmG+aW7GfCOextqUtZ24GbtWiIf179+funbtSmFhYRW2qZ2dnWBG3p49e9L9+/eZbzgyds6Ir7F2ZW0nTlZfbcp8I56+YX5hvmluJkq7NvuJwxgMBoPBYDAYko+/vz9evXpV6fJRo0bB3d0dAPDgwQOoqalBW1u7seQxGAwGgyGxHDlyBOnp6QgLC6t0nV27diEmJgahoaHo2rVrI6pjMJoOrJOWwWAwwG48GNwwbNgwPH36FDExMVi+fPknyw0MDHDz5k2EhobCz88Purq6AICBAwciODhYYEVFRRg1alRjy2cwJApdXV0kJSUJficnJwvOqY9xdHREYGAgAgMDoamp2VgSmywsxjIYDIZkc/z4cXz55ZeVLrezs0O7du3Qrl07zJkzB/v3729Edc0XFl+bHmLdSSslJQV1HTbCQRxRaNkCCi1bcC2Dwag3Tnqegv3XX1e6nN14VI+sgjzkFBVEMp6MNNdyOYfH42Hv3r2ws7ODlZUVJk6cCEtLS6F1tm/fDnd3d3Tu3BkuLi7YtGkTAOD27dvo2rUrunbtikGDBqGwsBDXr1+vUf1SPB4UWijX2/4w6g9pWVnIKSpwLaNZ4+bmBhsbG9jY2CArK4trORLP+cve7OG+DkjxeCLH15qarII817vXJFFWU4WMnBzXMhgVoKrVmmsJEgn7WkU8cffwwFejR1e6nMXX6im/724Ik5ap+TRgYjdx2If0mTAGI75fgEubf8PDi5e5lsP4gPHrVkLPygLuy1YjOTKaazkMRo1RVGkJ466dYWLdGSbdukDPqj0CjnhUun5lNx5paWmNJVms+XzGtxj5w0KR1y99W4yQa7dw/9yfSAh50oDKxJcePXogNjYW8fHxAIDTp09j1KhRiIqKEqxjZWWFH374AQDg5+eHS5cufVLOuHHjcPXqVRQVFdWo/oV/HEBJUREOzllSh71g1DcycnLYFOiHa3vdcPPQca7lNClSUlKgr68v+K2np4eUlBQOFTV9WhsZYOT382HRtxdOzXOqdD0WY6tmkftBGHbu0CBlZ8QnYstXDg1SdnNF01AfTuc9cGGDK3uGFTO62dvBYf1qbBk1EVmJSdVvwBCZyr5W+fg67ujoiDlz5gAA+1KlEtoYG0LTQB9KqirVmCoUW7ZAdkTl/THxcv6zAAAgAElEQVQsvlaNlqkxfvA63mAv1a4fOIpre91qtI1Yd9KG+d5Fx8EDMcFlFdr364WzzptRlJfPtSwGgDvunpi6/Vcs8jiES1t2IsDrIteSGIwqUWmtCRPrzjDu1gUm3bpA28wEPB4P/JISJIVHwe/4SbyKiql0e1FvPIDmefPR+csvkBYXj8BLV0RaX0NfF9bDh8Jm1HCkxcXj/rk/8cj7Kory8hpYqfhQ0THVs2dPoXVCQ0MxZswY/P777xg9ejRUVFTQqlUroZEMDg4O2LFjR6X1VHY85mZkQtvMpL52h1FP8EtKUJiTCzVtLa6lNDm8vb2xcOFCnD59Gj179kRubi57SGkgWmioY+h3s9Br3CiUvi3GjYPHUJhb+fWdPdxXjpyiIgw7d0DE7X/w/HFIvZffnOJuY5GVmITMhBfoP3k866QVM6L/vY8yPh8DJk/AhQ3buZbTLHFzc4Ob2/tOq8DAQI7ViAdSUlIw7NQBHQbbosOgAWhtqC+0/F1ZGQpz895bXh7ys18h/XmC4H8yhcWY+Fm3Cstmz7BV0+HzAZCRk8OVnfvxrqys3stPDK08DUVliHUnbV5GJg7OWYyB0yfBbtF3MOz0GU6udMbzR8FcS2v2JIaGY8c30zBx4y8Yt+YnmHbrgrPOW1BcWMi1NAYDwPtg18VuCMx72cDYurMg2BUXFiIhJAyh127heVAoXoRFgl9cDAAwNDSsl7qb281HCw116Fu1h8/vB3D7+EmRt7u8/Xd0HjYYvcaNwtfLl2LE0nl4csMP98/92SAPopKIk5MT9uzZg+nTp+Pu3btITk5G2Qc3ENra2ujYsSOuXbtWaRmVHY+56Zlo369Xw4ln1JqctAyoabfhWobEcerUKQwcOBCamppISkoCn8/H3LlzAQAHDx6Ej48Phg8fjtjYWBQWFmLGjBkcK256yCrIw3bqRHw+czJk5eVx/9yfuL7/CApeva6XGNvc4isAaJkYAQAeXvwL4b53uBXDEBn/k2cxwWUVTLt3RRx7dhUbCrJfI+iva7AZNQJ/7zlU5csjRs1gX6vUDGlZWbTr2Q0dBtnis8/7Q0VTA/zSUsQ+eIzbf5xCSmQ03uTmojA3D8UFb0BElZZlaGgI/Fh3Tc0xxpr3tkFK1DP4HnHnWooAse6kBQAigt+xk4h58BiTtzhj3pE9uHX4D1zffwTv+PXf080QnTc5uTiywAmfz5wCu0VzoGtpgT+WrUZaTBzX0hjNHJ60NMY7r4LNqOF4k5OL+OBQBHhdxPPHIUiJflarawe78agc8949AADR9x7UaLuSorcIvHQFgZeuQMfcFL3GjkK3kV+i28gvkRGfiIBzl/DY+yre5OQ2hGzOEeWYSk1NxdixYwEAysrKGDt2LHJz/98e48ePx8WLF8Hn82tcf256BuSVlKDQQhlvC97Uci8YDUFOWho09PW4liFxTJo0Seh3YGAgDh48KPS/hQtFT8vCEB0pHg82Xw3HlwvnQFWrNcJu3cGVnfuQmfBCpO1ZjK0cbTNjAEBa3HOOlTBqQpDPdYz8fj76T57AOmnFjDsep9Fz7Ffo/c1o3Dr8B9dymgzsa5XqkVdWgmW/3ugwaAAsB/R9fw/+5g2e/nMf4bfuIMr/33q/J2fxtXLkFBVh1LUT/D3OcC1FCLGeOOxDkiOfYsf46Qi8dAVD5szAwuMHoKFX8Yy8jMaDiOB7xB37Zy+CQgtlLD11BDZfj+BaFqMZw5ORxreb18Fm1HD8vdcNawfY4dji5bjj7omkiKhav9zx9vbG1KlTAYDdeHyERZ+eKHj1GilRtc9PnfosDhc37YDzYHt4rl6PNzm5GPXjEvxyyxuTtzg3yet9YGAg2rVrByMjI8jKysLBwQHe3t5C62hoaEBKSgoAsHLlShw9elRo+cSJE+Hp6Vmr+nPS0gEAqlpsxGZFDBs2DE+fPkVMTAyWL1/+yXIDAwPcvHkToaGhsLCwgK7u+2N04MCBCA4OFlhRURFGjRpVo7pz0jKgxvzCkBAs+vbCD2f/wIT1q5GTlo49077D8aUrRO6gBViMrQotUxOUFhcjO4k9VEsS/OJiBJz7E5993h+tdHW4lsP4gPS4eDz95z76TRoHaVlZruVIDKdOnUJAQAAsLCyQlJQETU1NzJ07V/DFio+PD54/f47Y2Fi4ublh/vz5HCsWH2Tk5PDtFme43L2KKdt/hVnP7gj5+yYOz1+GtQOGw8PpZwRfvdEggyZYfK0ck+5dICMri2f3H3It5RNInCwwMLDadToPG0y/3rtOG+7fpG4jv+RcsySYKO1a1zJaaKjTd267yTUsgCasX02yCvKc77ckWGP4prmYtKwszfh9C7mGBdDAaZNqtO2pU6fo5cuXVFJSQklJSTRz5kxKSEiguXPnCtbZs2cPxcbG0pMnT6hbt27MNwBJSUnRuttX6NstzvVetpapMY36aSk53/EhNa02TbJN7ezsKDo6mmJjY2nVqlUEgJydncne3p4A0NixY+nZs2cUHR1Nbm5uJCcnJ9jW0NCQkpOTSUpKSuT6Pmw7oy6dyDUsgCz69OS8HcTNeDwexcbGkrGxMcnKylJISAhZWloKrePl5UVTp04lAPT06VNyd3f/pBx1dXXKzs4mRUXFGvnm8xnfkmtYAMkrK3HeFpJs9XWtaErXnPq0thbtaO6hXeQaFkArfc5S52GDK1334xgbHx9Pc+fOrVOMbS5+mb3PlX44+0ej1ddc2rUx2k5VqzVtDfYn+2WLONcmqdZQ13Hz3j3INSyAun81nPN9lFRjz7Ci27dbnMk1LIC+XvE9GVt3Jiker97KZs+wtbevflpCmwNvk4x84/Vbidiu3DdObQ4GNW0tmn98H7mGBdC3m9eRQgtlzrWLszXWRVSKx6Nh82fTttB75HThBLUxNuR838XdWICrH5NVkKc5B34j17AA6uswlvmmkUy3vXmD3+TyZKSbVZs2pH3Yduo62uQaFkA9RttzrkvcrFevXvT3338Lfq9YsYJWrFghtE54eDjp6ekJ2jU3N/eTchwdHenEiRM19k1XuyHkGhZAWqbGnLeFJBvrpG04GzRrCm0LvUcu/n9T/8kTSFpWttHbtLn4ZfW1C/Tt5nWNVl9zadfGarvJW13o13vXSU6El3XMRGvT+irH6cIJWnbu0xeszBrPN83hejP0u5nkGhZAg2ZNYb4RM3O6cILmHNzZqHWK0q4Sk+7gY3LS0rF/5kJc3X0QnYcNxg9n3WHUuSPXspo99O4dru07DLfvvkdLjVZYevooutoN4VoWo4kjr6SE2Xtd0a53D5xZswH3Tp/nWlKzwaJvTwBA9L81y0dbE1j+8YYhLzML7969g5pWa66liB2VzYT7IaGhoRgzZgwAQE1NDSoqKmjVqpXQOg4ODlWmo3B0dERgYCACAwOFZtEtT0Whpq1V531hMOqbnmO/woil8xF67RY2Dh8H/xNnUFZayrWsJom8khJatdVBWlw811IYteSfk2ehqNIS3b+y41oK4yPuuHuirUU7tOvZnWspjCaK9YihGLbAEQ8v/gXfIx5cy2F8gEprTei0M8WzAPGbIE1iO2mB9x2CNw8dx97p8wAQ5h/fB8sBfbmWxQDwLOAhXL+ZhpdPYzB5qwtGr1omyKvIYNQnCi1bYM7BnTC27oxTK53x8NJfXEtqVlj06YmUp8+Qn5XNtRRGDSnj81GQ/YrlpK0lTk5OsLW1RVBQEFq2bInk5GSUlf3/hYK2tjY6duyIa9euVVqGm5sbbGxsYGNjg6ysLMH/c9IyAABq2sw3DPGiw6ABGLfmJ0T5/4tTq5zxNr+Aa0lNGi1TIwDvc2gyJJOE0DC8CI9Ev0nfsGchMSPoynXkZWXDdtpErqUwmiBGXTphgstqxD58jHMuW7iWw/iIdr1sALzvtxI3JLqTtpzE0HDs+GYaXkbHYMo2F+iYm3EtiQEgLyMT+2YtwO0/TqHfxHEY8/OPXEtiNDGUVFXw3eHd0PusPTx+XINgn+tcS2pWlM+I2ZCjaBkNS056BhutWQGizISbmpqKsWPHwtraWrAsNzdXsHz8+PG4ePEi+Hx+jevPzcx8P8qZ+YYhRhhbd8bkLS5IingK92Wr2VcOjYC2qQkAIC32OcdKGHXB/6QXtEyMYN67B9dSGB9QVlqKe6fPw7J/H2iZGHEth9GEaKXXFjN2bcbrl2k4/v0qlNXiXpDRsFj06YH87FdIfRbLtZRPaBKdtADwtuANji76CUX5BZi1ZxtaarSqfiNGg/OOX4bL23fjptsf6DN+NL76cTHXkhhNhBYa6ph3dC+0TY1xfMkKhN28zbWkZodZj26QkZVF9D3WSSup5KZnQpWlO/iEwMBAtGvXDkZGRpCVlYWDgwO8vb2F1tHQ0BCMitLR0cHRo0eFlk+cOLHKVAdV8Y5fhvzMbDaSliE2aJuZYOburXidmoYjC5ahpOgt15KaBVpmxih9W4zs5JdcS2HUgdBrvsjLykb/yeO5lsL4iIAzF1D6thj9p0zgWgqjiaDQsgVm73WFFI+HwwuWoSgvj2tJjApo18sGMQ8egYi4lvIJTaaTFnifX+/ooh+hpKqKGb9vhYy8PNeSGP9x9fcDuHviDGynTsSwBY5cy2FIOCptWmPBsf3Q0NPFkQVOiPL/l2tJzRKLvj1RXFiE+OAnXEth1JLc9AyosXQHn1BWVoaFCxfi2rVriIqKgpeXFyIjI+Hs7Ax7e3sAwMCBAxEdHY3o6GjIyMhgw4YNgu0NDQ2hr6+PO3fu1FpDTlo6G0nLEAvUdbQx58BOlBYV49DcpXiTk1v9Rox6QdvUBBnxiaB377iWwqgDZaWlCDhzAZb9+0DTUL/6DRiNxpucXAR6+6C7vR1atFLnWg5DwuHJSGPajo3Q0NfF8aUrkPUimWtJjArQMTeFiqYGnonp16BNqpMWAFKinuHUynXQ72AJh/WruZbD+ADvrbvw4Lw3hn43E5/PnMy1HIaEot5WGwuO74NKa024zfseMQ8ecS2p2WLRpyfiAoPYhDESTE56BhRVWkJeSYlrKWLH1atXYWFhATMzM2zcuBEAsHbtWly+fBkAcP78eZibm8PCwgKJiYkoKSkRbJuYmAg9Pb06vZ1/nZbOOtAZnKOspoo5B3dCTlEBh+Z9j9epaVxLalZomRohLY6lOqgtw4YNw9OnTxETE4Ply5d/stzAwAA3b95EaGgo/Pz8hCaI5PP5CA4ORnBwMP788886a/n37EXwS0vRf9I3dS6LUb/4nzgDWXl59Bk/mmspDAlnzGonmPeywdl1m/H8cQjXchiVYN7rfeqZaDGcNAwQsZNWnAKcKIT73oXPzn3oajcEQ+fNapQ6GdVDRDjrsgVBPtcx8vsF6DtxHNeSOKG680lfXx++vr4ICgpCaGgo7OzYbLDltDE2xILj+6GkqoIDjosRHxTKtaRmSyu9tmhtqI/of+9zLYVRB3LT309QxVIeiB9sJC2Da+QUFTBrz3aot9XGkUU/Ii0mjmtJzQp5ZSWo62gjLZZNGlYbeDwe9u7dCzs7O1hZWWHixImwtLQUWmf79u1wd3dH586d4eLigk2bNgmWFRUVoWvXrujatStGjRpVZz0F2a8RcvUmuo8aDoUWynUuT9IRtX/BysqqwfsXMuITEXnnHvo4jIWMnFydy2M0T2ynTkTvcV/jxqFjeOTtw7UcRhWY9+6BtLh45GVkci2lQqrtpBW3ACcqfsdO4uHFvzBs/mx0HT600eptbMQpwIkCvXsHz9UuCPe9gzGrlsHm6xGNUq+4UNH5pKCgILTOzz//DC8vL1hbW8PBwQH79u3jSK14YWpjjUUnDkFGTg77Zy5EUngk15KaNRZ9egIAnrJ8tBJNTvr7mxNVNmJT7MhJy4CcogKUVFW4lsJohvBkpDFl+6/Q72CJEz/9wl6KcoCWqTEAIJ2NpK0VPXr0QGxsLOLj41FaWorTp09/8ixqZWUFX19fAICfn1+DP6v6nzwDBWVl2Hw9skHrEXdq0r8QGRnZKP0Lt/84hZYarWA9Yli9lMdoXnQYNAAjly1EyN83cW2PG9dyGFUgIycHk25d8CzgIddSKqXaTlpxDHCics5lC+IeBWOCyyoYdu7AtZx6RxwDnCi845fB3WkNou/dx/h1K9Fl2OBGq5trKjqf1NTUhNYhIqiovH8oV1VVxcuXbLKI7l8Nx9yDu5CXkYVdk2bhZXQM15KaPe379kR28ktkJSZxLYVRB3LT3o+kVWMjacWOnLR0AO/zgTIYjc34dSthNaAvzq3finDfu1zLaZZom5oAABtJW0t0dXWRlPT/e5Tk5GShwSoAEBoaijFjxgAARo8eDRUVFbRq9X7yaQUFBQQGBiIgIKDK5yRHR0cEBgYiMDAQmpqaVWpKjoxGfFAo+k0aBylek8s6KDLi2L8QFxiElKhnsJ3q0KD1MJoeupbmmLRpHZLCIuH5869iOREV4/8YdekIOUUFPBPTVAeACJ20jRHgahLcakIZn4/jS1cgNz0TM3ZtgXrbpvWgI44BTlTKSktxbOkKxIc8waRN6/DZwH5cS2oUKjqf5D76rGbdunWYPHkykpKS4OPjg0WLFlVYVkOdN+LGsAWOmLhhDeIeB2P31Ll4/ZLlw+Manow0zHp0R7SYJltniE5uBhtJK67klHegazPfMBqXEUvnwWbUCFzdcwgPzntzLafZom1mjJKit3iVwl7WNxROTk6wtbVFUFAQbG1tkZycjLKyMgDvJ4C0sbHBpEmTsHPnTpiYmFRYhpubG2xsbGBjY4OsrKxq6/Q/dRaa+nqwGtCnXvdFkhDHDnQAuOPuCW0zE1j07VWb3WI0Q1S1WmPW7u148zoHR5f8BH5xMdeSGNVg0acHykr5eP4omGsplVIvr/DqGuBqGtxqQmFuHo4sdIK0rAxm7dkOeeWmMzmKJHegA0Dp22IcWeCE5KhoTHXdgHa9bOq1fEll4sSJOH78OPT19TF8+HB4eHhASkrqk/Ua8rwRB2Tk5PDt5nUY+t1MPLhwGW7zvsfb/AKuZTEAGHXuCIUWyohmqQ4kHn5JCQpevWadtGJI+UhalpeW0ZgMmOKAQbOm4t7p87h58BjXcpo12qbGSI9PYKOyaklKSgr09fUFv/X09JCSkiK0TmpqKsaOHQtra2usXv1+wunc3FwAEHzJFh8fj9u3b6Nr1671oivs1m3kpKWj37fj66W8pkp5/4KVlVWjdaCH/H0TuemZbDQtQyQUVVQwa/f7/qUjC51QkP2aa0kMEWjXuwcSnoShuLCQaymVUm0nrbgGuJqQEZ8I9x9Wo42xIaZsWw+etHSja+CKuga4hu4ILH5TCLd5PyAjPhEzdm2BcddO9V6HOFHR+fThjOAAMGvWLHh5eQEA7t+/DwUFhSY9UrYilNVUMffQLliPGIYrO/fDa+1GvOOXcS2L8R8WfXqijM9H7MNHXEth1AO56ZlQY520YkdB9ivwS0vZSFpGo9FpyOcY9dMShF73xcVNO7iW0+zRMjNBOkt1UGsCAwPRrl07GBkZQVZWFg4ODvD2Fh4ZrqGhIRgIsXLlShw9ehQAoKamJvjSTUNDA3379kVkZP3MhfCOX4Z7p8/DvJcNtM0q7lxs6tSkfyEyMrLR+hfK+Hz843kWFn16QsfctF7KZDRNVNq0xoLj+6BlagT3ZauRFstyh0sCymqq0G1vjmf/im8+WkCETlpxDXA1JebBI1zYsB2W/fvAflnFn49LGuIa4GpKUV4eDs5Zgtz0DMzetwN6Vu050dEYVHQ+5eTkCK3z4sULDB78Pk9v+/btoaCggMxM8Zx5sCHQNNDDohNu0O9gCQ+nn+F7xJ1rSYyPsOjbE4mh4Xhb8IZrKYx6ICctHaosJ63YQUTvO9DZSFpGIyDF42HkDwuRFBGFUyudQe/ecS2pWaPQsgXUtNogjU0aVmvKysqwcOFCXLt2DVFRUfDy8kJkZCScnZ1hb28PABg4cCCio6MRHR0NLS0tbNiwAQBgaWmJR48eISQkBH5+fti8eTOioqLqTdv9c3+i9G0x+n37Tb2VKUmIc/9CwNk/UVxYhAFT2GhaRsVoGupjkftBqLfVhtu8H1j6NwmiXc/u4PF4Yj1pGCBCJ604B7iacv/cn7jj7okBUyag9/jRnOmoL8Q5wNWUglevsX/2IrzJycHcQ7vQ1qIdZ1oakorOp7dv3wqdT8uWLYOjoyNCQkLg6emJ6dOncyu6ETG27ozFJw9DsWULHJi1CCHXbnEtifERyupq0LW0YDckTYic9Aw2klZMyUlPhyobSctoBDoMGgANvba4eegP8D/6wofR+GibGANgk4bVlatXr8LCwgJmZmbYuHEjAGDt2rW4fPkyAOD8+fMwNzeHhYUFHB0dBV+3BQQEoFOnTujSpQs6deokeH6qLwpz8/D4r7/RfaQdlFRV6rVsSaAm/QsdOnRo1P6Forw8BP55BdYjhqGlpka9lctoGuhZWWDhHwcgqyCP/TMXIPbhY64lMWqAee8eKMzLQ1LEU66lVAuJkwUGBjZo+VI8Hs3as522BvtTu57dOd/fupqdnR1FR0dTbGwsrVq1igCQs7Mz2dvbEwAaO3YsPXv2jIqKisjNzY3k5OQIAPXu3ZuePHlCISEh9OTJE5o5cybnvgFArXR16OfrF8nF/2/SMTfjvH0bw+qjXRvDNw1t1iOG0pbHd2i592nS0NPlXA/zTcXWdfhQcg0LIP3PLCXaL83VKmq7wbOnkWtYAMnIy3OuT1Ktoa4V325eR6uunud8/yTV6uta0RyuOQv/OEArfc6SFI8nMb5pyn7pOfYrcg0LoFZ6bRu97qbcruLUdtrtTMk1LIA+nzmZc93ibFxcxzX09Whb6D36ctEczvdfnK25XcdNbaxpQ8BNWv33BdI01OdcD/NNzW31tQs0bcdGsfdNvUwcJknQu3c48dMvyIhPxJTtv6KVrg7XkuqEqG+Iw8PDG/UNcW15lZKK/TMXovTtW8w7vJvlA2omfDF3Br7d7IyE0HD8PnkOspNTqt+oARg2bBiePn2KmJgYLF++/JPl+vr68PX1RVBQEEJDQ2FnZ8eBSm6x6NMTb17nIDkqmmspjHoiJz0DAKDahqU8EDdep75PRVHR5JEMRn2h38EKxtad4X/Ci6U5EBO0TU1QXFiE1ympXEthNBBpMXGIefAIfR3GNqv5UiSB7KRkRPj5o8/4MZBVkOdaDkMM6DjYFnMO/IbXqWnYPXUushKTqt+IIVa0NjJAq7Y6eBYQyLWUaml2nbQAUFxYiGNLVkCKJ4XpOzdDTlGBa0mMD8hOTsG+mQtRWlKC79x2N9uk+s2FL+ZMh93COQj80weH5ixBUV4eJzp4PB727t0LOzs7WFlZYeLEiVBQEL42/Pzzz/Dy8oK1tTUcHBywb98+TrRyhZSUFCz69sSzgIfsQb4JkftfJ60ay0srduSkpUNGVhYtNFpxLYXRhLGdMgFF+QUIvHSFaymM/9A2M0ZGfAKIiGspjAbE/6QX1HW00WGwLddSGB9xx90Tymqq6G4/nGspDI7pOfYrTHXdgKSIp9g7fT7yMprPXDFNCfPePQBA7PPRAs20kxZ4/4bsxE9roWNuhvHOq7iWw/iI7KRk7J+5AGWlfHx3eDe0TI25lsRoAIw6d8TQebMQdOUaTv+8HmV8PmdaevTogdjYWMTHx6O0tBSnT5+Gmpqa0DpEBBWV97nDVFVVBZPvNRd0zM2goqnB8tE2MQQjaVnuU7EjJ+2/DnQ2eRijgVDTaoNOQwfh/rk/UVxYyLUcxn9omRizfLTNgMg795CdnIL+k5rnBGLiTHxQKF6ER8J2qgM09HTRSq9ttaauo821bEY9M2jWVIxftxLR/z7AwTmLORtMxKg75r1tkJ2cwtkXuzVBhmsBXBJ97z58du3HyO8XIDkyGrePn+RaEuMDsl4kY9+sBZh/dC/mHdmD/TMXIP15AteyGPWEQgtlTNq8Djlp6Ti3fivXcqCrq4ukpP9/upKcnCyYXK+cdevW4fr161i0aBGUlZXxxRdfVFiWo6Mj5syZAwDQ1NRsONGNjEXfngCAp/dYJ21TonxEgJoW6wgUN3LS0gEA6jpaSArnbnJPSWHYsGHYtWsXpKWlcfjw4U+W6+vr448//oCamhqkpaWxYsUKXL16lQOl4kO//zqH/jl1tkHrYb4RHYWWLaCq1Rrpcc+5lsJoYOjdO/zjeQ6jflyC3uNHoyD7lUjbJT6JQF5mVgOrY9z5wxNTtq3HqqvnRN4mPigUf277ncVsCUdKSgr2Py6G7RQHPP7rb5xe8yve8cu4lsWoJTwZaZjZdEOQz3WupYhEs+6kBQC/oyegZ2mBEUvn4WV0jEQMf25OZCUmYf+shZh/dC+++6+jNiM+kWtZjHpg3JqfoKbdBnumfYfiN5IxemfixIk4fvw4duzYgV69esHDwwMdOnT45HNENzc3uLm5AQACA8U/742oWPTpiZfRMcjPyuZaSpPh446LLVu2CC03MDDA0aNH0bp1a7x69QqTJ09GSsr7N8D6+vo4fPgw9PX1QUQYPnw4EhNrfn0sKXqLwtw8qLGRtGJHeSctG0lbPeUpa4YMGYLk5GQEBgZC+qM8j+Upaw4cOABLS0v4+PjA2Lj5fqkjp6iIXuNGIezmbcGx1hAw39QMbdP3ab7YSNrmwcOLf2Ho3JkYt+YnkbcpzM3DiZ9+YV82NTCh126hrLQUckpKIq3fspU6bKdPwlLPIwi6cg1Xdu5v0GtrY9NcXrbxZKQxwWU1utvb4a7HGXhv2yX2qWeai29qi0GHz6DQQlli+vqafSctAJz5ZQPamBhhyrb12OkwUyKGQDcnMhNeYP+shZh3dC/mHd3LOmqbAN3s7dB1+FD4/H4AL55EcC0HAJCSkgJ9fX3Bbz09PcFEe+XMmjULX375JQDg/v37UH2TpwYAACAASURBVFBQgKamJjIzm35uIjlFxfcTy3ic4VpKk6Gijgtvb29ERUUJ1tm+fTvc3d3h7u6Ozz//HJs2bcLUqVMBAO7u7tiwYQNu3rwJZWVlvKtDnuCc9Ayospy0Ykdhbh5Kit6yDnQR+DBlDQCcPn0aCxYsEFqnuaes+Ribr0dAUaUl7nicbtB6mG9qhrbZ+87pNDaStlnwNr8Am7+agJYi5h6XV1LG2DU/Yvb+Hfh79yH4HnEX+w4kSYWIEHbrTo22CTh7CZ/PmoyBUyeh4+CBuONxGr5H3CVmQEplNJeXbdIyMpi+czOsbPvC5/cDuOX2B9eSqqW5+KYumPe2wbuyMsQ+fMy1FJFotjlpP6Sk6C2OLXk/k/uM37dATlGRY0WMj8mIT8T+mQsgJSWFeUf2oLWRAdeSGLVEQ18PY1YvQ9yjYPge8eBajoDAwEC0a9cORkZGkJWVhYODA3JycoTWefHiBQYPHgwAaN++PRQUFJpFBy0AmNpYQ0ZWlo3aqEcqyoM8atQooXWsrKzg6+sLAPDz8xMst7S0hIyMDG7evAkAePPmDYqKimqtJTc9A6parCNQHMlJS2cjaUVA1JQ1kydPRlJSEnx8fLBo0aJKy3N0dERgYCACAwObVNqacqR4PPT/djwSQsIa/GVpffqmqfsFALRMjVFcWIic1KYzAo9RNQXZr5H6LE4kSwh5gt2THRFy9QaGL/kO037bBHll0UZ6Mhqe4sJC/L37EDaPHI/QG774wnEaVl45i17jRoH3UceZJNFc5u6wHjEUVrZ9cWGjq0R00ALNxzd1waJPTyRFPEVRXj7XUkSCddL+x6vkl/D48WdomRjB4defuZbDqABBRy2Ph3lH9kDTQI9rSYwaIi0jg8lbnPGOX4ZTK9aB6jDyr74pKyvDwoULce3aNURFRcHLywtv376Fs7Mz7O3tAQDLli2Do6MjQkJC4OnpienTp3MruhFp37cniguL8DwolGspTYaKOi50dXWF1gkNDcWYMWMAAKNHj4aKigpatWoFc3Nz5OTk4Pz58wgKCsLWrVvB49U+pOekZ0CNddKKJcw39Ud5yhp9fX0MHz4cHh4ekJKSqnBdNzc32NjYwMbGBllZTS/3o5VtX7Q21G/wUbSiIqpvmrpfAEDbzATpcQlsdCSjUkqK3uLkinW4tPk3WNn2xVLPo9AyMeJaFuMDctIz4LnKBTsdZiIjIRHfrF2BH87+AYs+PbmWViuay8u2nmO+QmbCC9zzFD0PMdc0F9/UFoUWytDvYIln9yUj1QHAOmmFeBYQiCu/7UPnoYMwaNZUruUwKiD9eQIOzF4EnrQ05h3dCw191lErSQxb4AiDjlbwWrdJMKO8OHH16lVYWFjAzMwMGzduBACsXbsWly9fBgBERUWhX79+6NKlC7p27YobN25wKbdRsejTE3GPglBWWsq1lGaFk5MTbG1tERQUBFtbWyQnJ6OsrAwyMjLo378/nJycYGNjAxMTk0pfGohyw5WbnomWGq0gLSvbgHvDqA1sJK1oiJqyxsvLC4BwyprmyIApDniVkorwGn7KWxuYb2qGtqkxS3XAEAn/k144MHsRFFVaYonnEXQa8jnXkhgfkRQRhX3T5+P40hWQlZfHnIM7MXv/DmiZNr1PzSX9ZVsbY0MYW3fGgwveXEupdyTdN3XBrEc3SMvI4FmA5MwTwzppP+L2H6cQ5HMddovnon3/3lzLYVRAWuxzHHBcDBlZWcw/ugc65qZcS2KIgFmPbvh85mQEnLuEsJu3uZbDqAGtdHXQ2sgA0fdYqoP6pKKOi/JJwcpJTU3F2LFjYW1tjdWrVwMAcnNzkZycjJCQEMTHx6OsrAyXLl2CtbV1hfWIcsOVm/b+pYlqm+bZKSLO5KRloGVrDfBkJPczycaApawRHV1Lc5jZWOOfU2fxrqzhZ6tmvhEdRRUVqLTWRDqbNIwhIs8fh2DH+OlIjYnDtB0bMfL7BRL9WX1TJezWHWz9ehL+3LYLhp0+g9N5D3y5cA6k6vAVVGPSHF629RzzFcpK+Qj09uFaSo1oDr6pC+a9e6C4sBCJIWFcSxEZybgqNDJeazciNToWkzc7s0/qxZS0mDgccFwEKSkeFnm4ofOwwVxLYlSBkqoKJm1ci6zEJHhv3cW1HEYNsejTCwBYPtp6pqKOC29v4bf3GhoagjfdK1euxNGjRwXbqqmpCW6wBg0ahMjIyFprKR/ZzvLS/p9hw4bh6dOniImJwfLlyz9ZbmBggJs3byI0NBQWFhZCqSr09fVx7do1REZGIiIiAoaGhrXWkZOaBh6PB9XWbGK3qmApa0RnwBQHvH3zptFGCzHfiA6bNIxRG/IyMrFvxgLcO30en8+cjDkHdkJZXa36DRmNSllpKe66n8am4d/g0eWrGDJ3Bmbu3gqFli24llYtTf1lm7SMDLp/ZYeI2/4oyH7NtZwa0dR9U1fMe9kgLjAYZXw+11JqBImTBQYGcq4BAKm31SaXu1fpx4snSV5JiXM94tCu4uKbD62lRita6H6QXMMCaMTSeSTF43GuifnmU5uxazNteXyHdNubc66F+abmNn3nZlr99wXOdTSlNi03Ozs7io6OptjYWFq1ahUBIGdnZ7K3tycANHbsWHr27BlFR0eTm5sbycnJCbb94osvKDQ0lJ48eULHjh0jWVnZWredlokRuYYFUFe7IZy3iTgYj8ej2NhYMjY2JllZWQoJCSFLS0uhdby8vGjq1KkEgJ4+fUru7u6CZX5+fvTFF18QAFJWViZFRcVa+8aiT09yDQsg466dOG8XSbP6ulY0pWuOSmtN2hrkT6N+WirxvmlKfim33t+MJtewAFLT1pJo3zRXE4e2sxk1nDY/uk0/X79IelbtOdcjLm0qDr752Hp/M5q2BvnTistnSMvEiHM91dnH96yBgYFC96yWlpb0zz//UEhICAUHB9OQIdXfU4qLXzoN+ZxcwwKofb9enGthvqk/U9fRJtewAOr/7XjOtdSwXbkXKq4Hg1mPbrQ12J+m79xMUlJSnOvhul3FyTcfmrSMDI39+UdyDQsgx/2/kaKKCueamG/+b+UPHAOmOHCuhfmm5saTkaYNATdp3C/LOdfSVNpUHNtOXkmJXMMCaOD0bznXKA7Wq1cv+vvvvwW/V6xYQStWrBBaJzw8nPT09ATtmpubS8D7G2F/f/968w3rQK+9NeWH+9qa3aK5tC30HrXSayvxvmlKfim30St/oA0BNyXeN83VxKXt9KwsaPXfF2jzo9s0cNokkleW3AFHTf06bty1E631+4s23L9JHQbZcq6nsdtUXPziuP83WnPjkkQO+GrqvqmL9RxjT65hAWL1EkSUdmXpDqog9uFjXHbdg46DbbHgjwPoajeETaoihpTx+Tj/6zZ4rd0Isx7WWHr6CLTbsTy14oCWiRFG/bQET/+5D/8TZ7iWw6gFhp06QKGFMqLv3edaCqMBKS4sRFF+AVS12Cf1QMUz5X6YzgAAQkNDMWbMGACAmpoaVFRU0KpVK5ibmyMnJwfnz59HUFAQtm7dCl4lOedEmdQt5798wWraLBUFo27IKsij9/jRCPe9i1fJL7mWw6gALVNjpMfFcy2DIeEkR0Zjp8MMxD58DHunRVjrexljf/6RPR+JIfHBT/DbhBlIj0vAjF2bMWyBY4UTOjEaDnUdbZj36YGHF/8CvXvHtRxGPWLepydy0zOR/jyBayk1gnXSVoP/iTO4sGE7WrRSx+StLlhz4xLsFn8HdR1trqUxPuLBhcvYO2M+ZOXlsfgEy1PLNTJycpi81QVv37zB6Z/Xg4i4lsSoBRZ9e6KMz0fMg0dcS2E0MLnpGVBjOWlFxsnJCba2tggKCkLLli2RnJyMsrIyyMjIoH///nBycoKNjQ1MTEwqza8pyqRuxYWFKMrLhxq772DUke72w6Gspoq77p5cS2FUgpapscQ9TDLEkzc5uTg8fxl+mzADodd8YTNqBH68cALzj+9Dly+/gLSMDNcSGf/xPqfwfDy4cBlDv5uJGb9vhUILZa5lNRtsvh4BAHh46S+OlTDqEykeD+16dsez+w+5llJjWCetCNw7fR5b7Cfg4JwlSAwNw6CZk7Hq7/OY+ftWtO/Xi73tEiNePInAbxNm4GV0DKZu/xUjls6TmFkzmxojvp+PthbtcHrNr8jPfsW1HEYtsejTEy+eROBtwRuupTAamNz0DDZx2H9UNFNuSkqK0DqpqakYO3YsrK2tBctyc3ORnJyMkJAQxMfHo6ysDJcuXYK1tXWd9OSkZ7CRtIw6ISUlhQFTJuBFeCTig59wLYdRAUqqKlDR1EBaLJs0jFF/JEc+xZlfNsDli6/gve13qLZujSnb1uPnG5fw5cI57AsaMYFfUgKvtRtx/tdtaN+3F5acOoI2xoZcy2rySPF46DF6JGICHuL1yzSu5TDqEd325lBWU8WzANZJ22QhIjwLeIhjS1Zgw5djccvtD+h3tILj/t+w4ooXBk7/FspqqlzLZADIz8rG/pkL8K/XRQyaNRWz97pCUUWFa1nNivb9e2PA5Am463EGT/0DuJbDqCXKaqrQs2qPp/8+4FoKoxHISc9kI2n/o6KZcr29vYXW0dDQELyk1dHRwdGjRwXbqqmpCdIXDBo0CJGRkXXSk5OWDjUtrTqVwWjeWPTrhTbGhrjrwVIPiSvaZiYAgDSW7oDRABTm5uGOuyc2jxyPQ999j6SwSAx2nIbVf1/AtN82oV0vG64lMgD8e+YC9s9eCEWVllhy6gg+G9iPa0lNGvPePaCuo/0/9u48Lqp6/QP4ZxY22QYBAdllUVlFAfeAXEhLS7jmem27Vvdm21VvmZWpqeXSr255u13KW94WNTVTk3CDckEDRUQQEMVZWIYZYADZGc7vDwRBUbaZOWdmnvfrNa+bzuGcB86Vc84zz/d5cG7/IbZDIRrmPz4SAJB/Lo3lSPqO1jn0g6pUjl8/+w+O/XsHgqdEYcL8eMxavgyPLFuKzKSTkOXkauW44stXIMka2IOesVC3tGDf+s2Q5eQibvUKvLbrK/z31TdReu0626EhNjYWn3zyCQQCAb788stut5k7dy7ee+89MAyDzMxMLFq0SMdR9p+lyBbz1q1GcX4Bfvn4X2yHQwbAf3wk+Hw+8s5QktYYVMnLYO1oD75QgNYWNdvhsEqtVmPZsmVISkqCQCDAjh07kJOTg7Vr1yI9PR2HDh1CdHQ0Nm3aBIZhIBQKsWHDBgBAa2srVqxYgRMnToDH4+HChQtISEgYUDyq0jK4B47UxLdGjFTUkgVQycuQefQE26GQ+3Dy8QYAyKmSlmgRwzDIO3MOeWfOwW6oM8bPnYOxcbMQMjUaDbW1aFVr/vpfW6HCxwuepVVZvVR4MRMfz3sGT328Cc9+ugVJ//oSx/69g1rHacHYuFm4VVGJ7ORTbIdCNMx/fASKcvNxq7yS7VD6jJK0A6BuacGlpBO4lHQCzr7DMP7JOQifNQPhs2do5XjyGzex+fEFWtm3oTq/7yBKC27gqY824rXvv4JKXqb5gzAMfv3sP7iU1PODD5/Px/bt2zFt2jTIZDKkpaVBIBB02cbX1xerVq3CxIkToVKp4OioX8uQ4t/5BwbZ2uA/L7yGlqYmtsMh/WRqYYEJ8+JQq6rS2gdPhFtU8jLw+XzY2Ntr53elnklMTERiYmKXv1uzZk3Hf+/btw/79u0D0FY929Tp993x48cRGhqqsVhUpXJYDbaD0MwMLY2NGtsv0U/BU6MxyMYaeWf/gKpU3uP2Lv4+8B8XgcP/t93oP4DhMmffYaivuUW/f4nOVBaX4sgnn+Po518hZHqMVj4MtB3iiNDpD8PF3xeFFzM1vn9DpZKXYftTf0X8OysR+7e/YMrSpwAtJGmvnU/Hl39brvH96gOrwXYIinkIp77fA3VzM9vhEA0ytTCHd1gITn33I9uh9AslaTWktOAGftq4DQc3fwLTQRYa3/+0F57BpAVzwRcItPIJpyETZ17Bx/OfxdTnn4aFtZXG9z9i8ngET4vpVZI2MjISBQUFKCxsW8q2a9cuvPTSS122Wbp0KbZv3w6VSgUAUCgUGo9ZW8JmTkfo9Ifxy8f/Qkl+AdvhkH6ycXTAc59thYu/D/as2USTTo1E1e3EgMjZiZIEHFNZ0paIEzk5QimRsRwNYZPI2Ql/3rweApO2W/iyQjHyzp5H3tk/cD3tIprq6+/5mocWz0djXT3O7f1Z1+GSPnD28Yb8BrU6ILrX0tSEi4eTcPFwksb3be/uhtDpD8PRw52StH3U0tSE3e9sQP7ZP+Di76vx/XuFBcN/XKTR5hfCZ82AwESIP6jVgcEJjJ4MoampXvajBShJq3HqlhbUV9dofL+l125AYCKEnYszymVFPX8B6aJaocT+DVu1su+//GsbHD3ce94QgKurK6RSacefZTIZTE1Nu2zj7+8PADh9+jQEAgHee+89JCXde9O0dOlSPP/88wDQ0fuQTbZOjohbvRyFGZeR/N/v2A6H9JOznw/+sn0rLGys8dWylcg7c47tkIiOqORtHwjZOg8B6DmKU9qrJUXOTpSkNXIP/XkewAP+/ZeX4ezng+ETIjE2bjYmL3oSLc3NuHkpC/mpfyD/7B+QXc2DpZ0tRj86Hef3H9LK/SnRHCcfb+SknGY7DEI0qrK4BOrmFjh49u5ZidwrI/EYMhKPaXy/EY/PhM+YMNgNdUG51PjuLcbGz0ZhxmXIb9xkOxSiQUO8PRH/zj9QdDUf19Mush1Ov1CSVk8oJG2JPQdPd0rScoziphTDxozS2P6EQiH8/PwQHR0NNzc3/P777wgODkZVVVWX7RISEjr6HKalsd8Qe9661RAITfDD6vVUeamn/MZF4KmPNqKprh7bn/orivOusR0S0aH2Slqa9Mw9qtI7Vc7EeFnYWGPcnx5HRuIxXDufjmvn03Hq290QmJjAOywEwydEwn/8WMx85UXMfOVF1KqqUCUvA18oxO/f0sAwLrO0E8HafjANDSMGp1WtRkVRMRw83NgOhdxFIW5LzDp6uRtdktY7LARDvD2x65332Q6FaJCFjQ2e/XQLWpqasOOVf0Dd0sJ2SP1CSVo9oRBLAACOnm7IO8NyMKQLpUQKs0GDYOPogGqF8oHbFhUVwd39zifJbm5uXfoYAm3VtefPn0dLSwtu3ryJ/Px8+Pn5IT09XSvxa8KEeXEYPmEs9q7bbHQXeUMR8cSjmPvum5DfKMSXLy1HlVx/2mwQzaivrkFjXT1ETkPYDoXc5U4rCjo3xmzCk3EwGzQIKV93Xa2ibm5GwR8XUPDHBfzy8eewGmwHv7Hh8J8QCf/xkbhw6FcoxdL77JVwgfPtoWGlNDSMGCCFRApHqqTlHOXtIjBHD3fkIpXlaHRrbPxsNNyqRWbSSbZDIRrCFwiwZOt62A11xufPLutVz36u4rMdAOmdW+WVaLhVC0dPD7ZDIXdRiO9UOfckLS0Nfn5+8PLygomJCebPn9/Re7bdgQMHEB0dDQCwt7eHv78/btzg7k27g4cbZi1/GbmnzyH1x5/YDqffYmNjkZubi2vXruGNN97odpu5c+ciOzsbV65cwXffcaelg8DEBPy7BtD1RexLSzF//dso+CMdnz31IiVojViVvAy2lKTlnJamJtSUV1AlrRETmppi8uIncfV0Kkryrz9w21sVlchIPIbd72zA+qmPY9fb63UUJekvZ99hAECVtMQgKcUy2LtTJS3X3KqoRH11jdG1ojC3skTo9CnISDzWbR93op9mr3wF/uMjsXfdh7h56TLb4QwIVdLqEYVECode9j4lunOnytkdN9IzHritWq3GsmXLkJSUBIFAgB07dmDOnDlYu3Yt0tPTcejQISQlJWH69OnIzs6GWq3GypUrUVFRoYtvpc/4AgEWbHgXLc1N2L1mI9vh9Bufz8f27dsxbdo0yGQypKWl4eDBg1228fX1xapVqzBx4kSoVCo4OnJjSTiPx8PKn76DuZUlso6nIOPX4yi8mNmrlhMCoRBPrnsL4bNm4Py+g9j7/maa/G3kquQKqqTlKJW8DCIXStIaq/DZM2BtPxjJO75lOxSiBU4+3qivrkF1GX1ISgxP26pDC9gMcaT/j3OMMVY5h82YDlMLc5zfd7DnjYleGBvf1ps/5ZvvkXbgF7bDGTBK0uoRpVgK96CRbIdB7qIqLUNLU1Ovh4clJiYiMTGx489z5szBmjVrumyzfPlyLF++XKNxakP004vgNSoY3/7jXb2+6YqMjERBQQEKC9sqWHbt2oXHH3+8yzZLly7F9u3bOyqfFQpufL9eo4Lh6OmOm5lZGDNrBibMi0NVmQKZR0/i0q/HIc680u3XWdhY4+n/2wTfyDE48sm/ceLLb3QcOeEilbwMvpGj2Q6DdKOqVE6VSEaKx+cj+qmFkFzJ0dshGOTBnH2HURUtMVgdqw493PT6ecEQKSUyeIYEsR2GTo2Nn4Wi3HxIs6+yHQrRgGFjRiF+9UpcPZ2Kwx9tZzscjehVu4OelgF7eHjg+PHjyMzMRHJyMlxdXTveW7JkCfLz85Gfn48lS5ZoLnIjpJTIMHioCwRCyq1zCdPaCqVEZnRLRYYO90PsS3/BpV+Pa2XiqC65urpCKr3Tr08mk3X5PQYA/v7+8Pf3x+nTp5GamorY2Fhdh9mtkGkPo7mxEf954TW8Fz0T/1vxNsSXszF+7hN45dsErE7aj8defwluAcM7vsZuqDOW7fyiLcH+xhpK0JIOVfIy2Dg6gMenbkhcoyoto3YHRiooZjIcvTyQ8vX3bIdCtMTZxxul17nb2kpf0TMsN9zpfUofNHKN4qYEdkOdITAxYTsUnXAd4Q/3wJE4v/8Q26EQDbAb6oynPtqIclkRvv3HuwYzvLzHp7D2ZcAzZsxAQEAAFixYgJEju1Zzbt26FTt37kRoaCjWrVuHTZs2AQDs7OywZs0ajB07FpGRkVizZg1EIpF2vhMjoBBLwRcIMNhtaMff9fbmIyAggG4+tEhpZEtFBCYmWLhpDepUVdj3/ha2w9EJoVAIPz8/REdHY8GCBUhISICtrW232y5duhRpaWlIS0uDg4OD1mLi8XgImRaNvLPn0Vhbh6b6BlxKOoFvXl+FNVEz8f2qtSgtuIGH/jwfr+/+Gm8e3oPH/r4Mr37/FWwc7PHFC68h48hRrcVH9I9KXgaBUAhr+8Fsh0LuoiqVw8LaCmaWg9gOhehYzDOLoZTKkHU8he1QiBZYDbaDpZ0I8gKqpNUkeobljsoSOVqamroUtNAzLDcoJVLw+Xw4uLv2vLEBiIybhebGRlz8JYntUMgAmQ0ahGc/3QK+UICvlq1AQ80ttkPSmB6TtJ2XATc3N3e7DDggIAAnT7ZNxktOTu54PzY2FseOHUNlZSVUKhWOHTuGRx55RAvfhnFo/xSyvS9tX24+cnJy6OZDixQ3pbB3dzWa6rNHli2Fi58Pdq/ZiLqqarbDGbCioiK4u9+5cXRzc0NRUVGXbWQyGQ4ePIiWlhbcvHkT+fn58PPz63Z/CQkJiIiIQEREBJRKpdbidg8aCZGzEy4fS7nnvcbaOlw4/Cu+emkF1kQ/it3vbkRlcQmilsxHU30DPv3z8z32UCbGR1VaBgA0PIyD2s8NVdMaF+/RofAMDcJv3/yAVjX1DDdETj7eAAD5DUrSahI9w3IH09qKclkxPcNykEIsA9C7Adj6TmhmhjGPxuLysWTUV9ewHQ4ZAB6Ph4Wb3oXTMC/8b8XbUEpkbIekUT1mlHqzDDgzMxNxcXEA2vpr2tjYYPDgwb36WkB3VWf6TnHzzoAqgG4+uEQhkcLEzAwiZ8NPbHiHhSD66UVI/fEAck+lsh2ORqSlpcHPzw9eXl4wMTHB/Pnz7xkcduDAAURHRwMA7O3t4e/vjxs32F2aGDI1Bi3Nzcj57fQDt6uvrsYfPx3CF8+/incfmoEPZj2JskKxjqIk+qRKfjsR6MSNwXjkjsoSOQBK0hqbmGcW41ZFJdJ+1v9BGKR7zr7DAAClVEmrUbp4hgXoOba3lBIZPcNyUEcrCk8PliPRvpBp0bCwsaaBYQYgdtlSBD0chYNb/on81DS2w9E4jZT9rVixAlFRUbh48SKioqIgk8mg7sOn/bqqOtN3dVXVqKuqhsPtfj6UQOcOpbj9AmfYn0KaDRqEBRvfRUVRMQ5u+Sfb4WiMWq3GsmXLkJSUhKtXr2LPnj3IycnB0KFDMWvWLABAUlISysvLkZ2djeTkZKxcuRIVFRWsxh0yPQbXzqf36dPg+uoatLZQNRbpXnuSlippuUdV2p6kpXNjLJx8vBEYPQmnf9iL5oZGtsMZkJ6WNgPA3LlzkZ2djStXruC7777TcYTscfbxRl11NaoV9AykawN9hgXoOba3lBIpHNzdwOPxKIHOIfXVNbhVUQkHT8PvFzw2bjYUYimu00pCvTbqkamY9vwzOLf3Z5z+/ke2w9GKHidQ9WYZcElJCeLj4wEAlpaWiI+PR1VVFYqKijoqz9q/NiUlRTORGymFWApHr95/0rVixQp89tlnCAgI6HcCPSEhAUBbtSHp3p2ppe4G+WlOu1krXobdUBf86+m/oqm+nu1wNCoxMRGJiYld/q64uBiHDt1pLL98+XIsX75c16F1y3WEP+zdXHH8PzT0i2hOraoKzY2NEFGSlnOqFUq0qtVUSWtEop9eiMa6epz5YS/boQxI+9LmadOmQSaTIS0tDQKBoMs2vr6+WLVqFSZOnAiVSgVHR+Op5nfy9aZ+tFpAz7DcohBLYWJuBtshvfu3PdBnWICeY3tLKZHB0cOwC40cPN3hGzEav3z8L7ZDIQPgFjAC89e/jesXMrB/w1a2w9GaHitpe7MM2N7eHjweDwCwatUq7NixA0Bb5dn06dMhEokgEokwffp0JCVRk+aBUEqkHZW0fbn5yMnJwerVqwGgj2Ni7QAAIABJREFU4+ajp68lvVetUKKxrs6gl4qMmDwe4+c+gd++/h6FGZfZDsfohUyLgbqlBdnJv7MdCjEwVXIFbKlak3Na1WpUK8upktZI2Do5YvSjsfjjp0N63/u9u6XNd/eQXLp0KbZv3w6VSgUAUCgUbITKCmefYSi9TklaTaNnWG5p7xnp4OlOz7AcoxBLDPoZFgDGznkM6pYWpP18hO1QtMIYVqtYO9jjmX9+iJryCnzz+ltQt7SwHZLW9Jikvd8y4LVr13YsA46OjkZeXh7y8vLg5OSEDRs2AAAqKyuxfv36jmUG69atQ2VlpXa/IwOnFEshcnaC0NSUbj44RimWGfRSkZmvvIiyQjF+3Z7AdigEbUna6+kZqFVVsR0KGYDeTjfOzMy8Z7pxS0sLMjIykJGRgZ9//lljMankZbClnrScpCqVUyXtAxjSQ8rkRfPA4/Hw284f2A5lwLpbnmxqatplG39/f/j7++P06dNITU1FbGxst/sytOXL1vaDYSmyRWkBuz3uDRE9w3KLsmPVoRs9w3KMQiyFrZMjTC3MH7idvl5j+UIBwh9/FFd/P4MaZTnb4Whcd4P4zM27nsvOq1WCgoLw2muvsRRt/03/63OwtLXFjldWorZSxXY4Wsdw6ZWWlsZ6DFx+hc2czmzLSmWcfLwZAMyMGTOYvLw8pqCggHnrrbcYAMzatWuZWbNmMQCY+Ph4Jj8/n6mvr2cSEhIYU1PTjn0988wzzLVr15hr164xTz/9NJ2bAb7+vPV95s3De/r8dZr4uWr73HiFBjPbslKZcX96nPWfsy5fXD03zr7DmG1Zqcz4uXNY/xnp63nhwovP5zMFBQWMt7c3Y2Jiwly6dIkZOXJkl2327NnDLFmyhAHAxMTEMDt37ux4r6amRis/u4Wb1jBvJe5l/eejTy9d/a7489b3mTcP7Wb9++Xiq7t/T1lZWV228fX1ZS5evMiIRCIGAOPo6Kiz89uXl7m1FbMh9Tiz6MO1rP9cNfGKj49nEhISOv68ePFiRi6Xd9nm0KFDzP79+xmhUMh4eXkxEomEsbW15dR50cbLb2w4sy0rlfEbG856LIb0c6WfHfdePB6P+SA9hXns78sYQLfPsHRuHvwKmf4wsy0rlXHx973vNtq6xurivIx8aCKzLSuVCYiaxPrPWhuvcePGMb/++mvHn998801GKpV22ebDDz9knnvuuT7tl0v/ZsytLJmN508wT659i/VYBvrqzc9VI4PDiO7cPaAqMTERw4cPh6+vLzZu3AgAWLNmTUcfzX379sHf3x9XrlzB0qVL0dTU1LGv//73v/Dz84Ofnx++/vpr3X4jBkghlmCwqwv4QkHPG+uZCfPjUF9zCxd/Ocp2KARtVbStra24cvI3tkMhAzCQ6cbaVCUvg63TkI4KFsIdVEl7f4a0pH783CdgbmWJlP9yowppoLpbntz5fhRoq649ePAgWlpacPPmTeTn58PPz0/Xoeqck483AFAlLTF4DMOgXFoEx9urDukZljs68gsPmHujz9dY/3ERaG5oRN7Z82yHohXGsFplzKwZMBs0CGd372c7FJ2gJK2eUUjuDKgi3KIUyyAQCjF4qAvboWiUpZ0IodMfRvrBIwY3LExfhUyLQeHFTNSUV7AdChmAgUw3BgBzc3OkpaUhNTX1gcnbvt5wqeQKCE1MYDlY1OO2RLdUpWUwMTeDpciW7VA4R5MPKQB7DyoCExM8tHge8s6eR1Fuvs6Oq03dLW1uf4hvd+DAgY5BTfb29vD398eNG4afuHT2HYZaVRVdz4lRaJutQs+wXNPeL/hBw8P0ORHoEx6Gm5lZUDc3a/1YXCUUCuHn54fo6GgsWLAACQkJsLW9914yISEBERERiIiIgFKpZCHS7k2YFwdJVg5kOblsh6ITlKTVMw01t1BTXmHQvU/11Z0qZ8NqvB455zEITU2RuucntkMhaPuU28XPB5ePJbMdCtGBFStWICoqChcvXrxnurGnpyciIiKwcOFCfPzxxxg2bFi3++jrDVeVvAwAIHKiAVVcoyqVAwBV0/ZTbx9SAPYeVMY89ghsHB2Q8rVhVNEC3fcGbWho6NIbNCkpCeXl5cjOzkZycjJWrlyJigrDT1w6+3ij9LrhJ6MJAQCFWAZ7d1daqcMxTfX1qJIrBpxf4GIi0MLGGi7DfXEjPUOrx2GToa9WGRYeBmcfb5zdvY/tUHSGkrR6SCmRGVwi0BAoxBIAbVNLDQWPz8f4uXNQ8McFyG/cZDscAiBkagwAIOtECruBkAHry3Tj0aNHd5luDADFxcUAgMLCQqSkpCAsLEwjcalK25K0tkaepO3LULfhw4frZqhbSXuS1rjPTXcM4SGFx+Mh5plFKLqaj/zUNLbD0aieljYDwPLlyxEYGIiQkBDs3r2brVB1ysnXG/KCQrbDIEQnlBIpTMzM6INGDlJIpA/ML+jrNdY7LBR8Ph/XDThJa+irVSbOi0NdVTUyfj3Bdig6Q0laPaSUSB+4HIGwo1ZVhbrq6o5+wYZg+MSxsHcbijNG0v9FH4RMi8HNzCxUybnR54n030CmG4tEoo5lZvb29pg4cSJycnI0EhdV0nY/KXfkyJFdttm6dSt27tyJ0NBQFBcXY9OmTR3v1dfXIywsDGFhYRrtI0yVtPdnCA8pAdGTMMTbE8n//ZbtUIgOWDvYY5CNDUqvU5KWGIf2ZfWGVNBiKJRiKRw87l9Jq6/X2GFjRqGlqQniLM3cI3ORIa9WsXawR/CUaPxx4DBaGhvZDkdnKEmrhxRiKWydHGFqYc52KOQuiptSg0rSTpwXj2qFkgZUccRgt6FwCxiOy0ep1YEh6O6mKicnp8tNVXR0NPLy8pCXlwcnJyds2LABADBy5Eikp6fj0qVLSE5OxgcffICrV69qJK5bFZVQN7cYdSVtX4e61dTU6GSo262KSrQ0N1MlbTcM4SEl5pnFqCgqQebRk2yHQnTA2betRQ0NDSPGor013IOSgYQdCrEU1vaDYW5t1e37+nqN9QkPgzgr2+ATfIa6WmVs3CwITIRG13ZRyHYApO/aP4W0d3dDSX4By9GQzpQSKbzDQtkOQyMGu7pgxOTxOP6fr9HaomY7HII7rQ4uH6ckraFITExEYmJil79bs2ZNx3/v27cP+/bd24MpNTUVISEhWomJYRhUlSlg6+Solf3rg+4GZIwdO7bLNu1D3f75z39CJBJ1DHWrqKjoGOrW0tKCDz744L4tD5YuXYrnn38eAHo1PINhGFTJy6iS9j7u/vc0Z86cLv+egLaHlOXLl+s6tB55jQqBd1gIftq0Da1quuYaA2cfbwCAnCppiZGoKlOguaHRoApaDIXy9nByRw93SLO7/9Bf366xZoMGwXWkP05+9T+2QyH9wBcIMH7uE8g7e74j/2UsqJJWD90ZUEUXOK5RiqUQuThBeNe0S3007k9PgGltxbm9B9gOhdwWMi0G0uyrqCwuZTsUYuCq5GVG3e6gNzoPdbO2ttbJUDegrWewLVXSGpyYZxaiVlWFP346zHYoREecfL1xq6IStyoq2Q6FEJ1gGAZKqQwO7lRJyzWK9ipnA8oveIWFQCAUGnQ/WkMWEDURImcnnDXCtotUSauHOvr5UF9azlGIpeDz+bB3d71vZURsbCw++eQTCAQCfPnll/fdV1xcHPbt24fw8HBcuHBBWyF3S2BigrFxs5Cdcpp6n3KEyNkJniGB+OXjf7EdCjECqlI53AJH9ryhgerLUDcAuHDhAoYMGfLAoW6a6sumKpXDa5R2qqgJO8ytrRAQPRnJO75FU30D2+GQfnLwcMMr332JVrUaqlI5VKVlqCwpRVVpGSpL5bf/To5qRTmY1lY4+wyjoazE6CjEUjgN82I7DHKXcmkRWltbDaoIzCc8DOrmFogzs9gOhfTDhCfnQFUqR85vZ9gORecoSauHGuvqUFWmMKhfooZC0VHl7NFtkrZ9GM20adMgk8mQlpYGgUBwz3ZWVlZ49dVXce7cOa3H3J3Q6TGwGmyH1D3G98kVVwVPjQYAXD5GrQ6I9qnkCgQ9HMV2GKzpPCCjqKgI8+fPx8KFC7tsY29vj4qKCjAMAxcXFyQkJABoG+pWV1eHpqamjqFumzdv1lhsqtK2Kmcenw+mtVVj+yXs8QgKAJ/Px7VzaWyHQgZgzqrl4AsEuHw8GSJnJzh4uMFvbDjMrSy7bKduaUFVmQI2jg44v+/gffZGiGFSSqQIeGgCXcM4pqWpCaoSuUHlF3zCwyDNuUoffuohBw83DJ84Domf/ccoW0BRklZPKSUyg/olaig6+vl4dr+Mp/MwGgDYtWsXXnrppXu2W79+PT788EOsXLlSe8E+wIR58VDclODauXRWjk/uFTI1GsV514yuJw9hR5W8DCbmZhhka4O6qmq2w9G5zgMyBAIBduzY0THULT09HYcOHUJ0dDQ2bdoEhmEgFAq7DHX74osv0NraCj6fr9GhbkBbJa3ARAhr+8GoVvSuRQLhNs/QILS2tkJyxXCnTxu64KnRGDFpHA588H849d2eLu+ZW1lC5OwEkYtT2/86D4GdszOsHQYj48hRliImhB1KsRRCU1PYuTihoqiE7XBIJwqxxGBW6ppamMM9cCR+2/k926GQfhj/5Byom1uM9oNMStLqKaVYioDoSWyHQe7ScKsWNeUV973AdTeMxvSu/rVhYWFwd3fHkSNHHpik7evAmd5y8feFd1gIft78CRiG0dh+Sf9ZO9jDKywERz//iu1QiJFQycsAALZOQ4wySQv0bahbWloampqaAGh3qBvQVkkLACLnIZSkNRCeIYGQXy9EY20d26GQfjC1sMATb7yGotx8nNl176DHhlu1KC24gdICzbQ8IUSfKTq17aMkLbcoJTKMnjmd7TA0wjM0GAIT6kerj4RmZoh84jFknUhBjbKc7XBYQYPD9JRCIoW1/WCYWQ5iOxRyF8VNCRy9PPr1tTweDx999FGvpmL2Z+BMb0yYF4fmhkak/XxEY/vUF7GxscjNzcW1a9fwxhtv3He7uLg4MAyDMWPG6CSu4ClR4PP5uHz0pE6OR0jV7SQtDQ/jHlWpHEBbn2piGDyCAyG5nM12GKSfpr34DETOTtj//lajXJZJSF/QAGzuUoilsLCxhqWdiO1QBmzYmFFoVatRmHGZ7VBIH4U9MgWDbG2McmBYO0rS6im6wHGXUiKDg0f37Q66G0bTXn0FANbW1ggKCkJKSgoKCwsxbtw4HDx4UGfJQDPLQRjzWCwyEo+hvtq4qufa+wXPmDEDAQEBWLBgAczNze/Zjo1+wSHTYlB6vZAGjBCdUd0eGGjrTElarqksoSStIXHwcIOlyBbiy1fYDoX0g9MwL0T9eQH++OkwbtJwGkJ6VK1QorGu3mCW1RsShVgCAHA0gHPjEx4G2dU8WqGihybMi0fp9UKjroKmJK2e6rxUhHCLQiyF7RBHmA26t8q58zAaExMTzJ8/HyqVquP96upqODo6wtvbG97e3jh37hxmz56NCxcu6CT28FkzYDZoULfL9Qxd537Bzc3N2LVrF0Siez9Jbu8X3NCgmyb0lnYi+ISHIet4ik6ORwgA1CjLoW5poUpaDqqvrkZjXT1ElEA3CJ4hQQAAcRb1o9VHcatXoLGuDof/bzvboRCiN8qlMjjcZ34HYU9HEZiXfucXhKam8AgOwI30S2yHQvrILWAEPIIDjLqKFqAkrd4ql95O0lIlLee0fwrZXTVt52E0V69exZ49e9DQ0IC1a9di1qxZug71HhPmxUFyJQeynFy2Q9G5vvYL1pWghx8CXyBAJrU6IDrEtLaiRlkOWydHtkMh3aiSl1ElrYHwDA1CQ20t5NcL2Q6F9FHYzOnwjRyDI5/8G7WVqp6/gBACoK2gxRCqNQ1NRXEJ1C0tel8E5hESCBMzM6OuxNRXE+bFobGuHhcOJfa8sQGjwWF6qrmhEZUlpXSB4yClpC3R5+DpjqLc/Hvev3sYzZw5c7oMo+ksJiZGO0F2Y1h4GJx9h2HXO+/r7Jj6pL1f8NNPP93jtpoc6hY6LQZKiQwl+QUD2g8hfaWiRCBnqUrlVOVsIDyCAyDNugqmtZXtUEgfmFtZYvaKlyG5koNz+35mOxxC9IpSIkNQTFsRAvVx5o7WFjUqZMV6XwTmEx6G1tZWFGZksh0K6QMLG2uEzZiGC4d/RcOtWrbDYRVV0uoxpVhGPWk5SHm7FYW+nZuJ8+JQV1WNS78eZzsUVmiyX7CmhrpZ2NjANzIcl49RFS3RvSq5ghKBHKUqpQS6ITAxN8NQfz/qR6uHpv/tL7CyH4x967dQgp2QPlKKpRCYCGHn4sx2KOQuColU755h7+YzJgwl+QWor65hOxTSB+GzZ8LUwtzoWx0AlKTVawqJVO8/6TJEzQ2NUJXK9WqpiLX9YARPicYfBw6juaGR7XBYwcV+wUExkyAwESLzaLLWjkHI/ajkZdTugKNUpXJYO9qDLxSwHQoZALeRwyEwEUKSlc12KKQPXPx9MGnBn3DuxwNG2R6KkIFSdFp1SLhFKZbp1TPs3QRCITxDg6jVgZ7h8XiYOC8ONy9loTjvGtvhsI6StHpMKZbCUmQLCxsbtkMhd1GIpXrVdH1s/GwITIRI3fMT26Gwhov9goOnxqCiqIQeAgkrqkrLYDZoEMytrdgOhdxFVSoHn8+H7RBKouuzO0PDKEmrL3g8HuJXr0R9dQ2O/PMLtsMhRC91DKii4WGcoxBLYDbIAjZ6en/hHhQAUwtz3KAkrV7xHRsORy8PnNltfMPLu0M9afVYe+9TR083SGgqMKcoxFKETtNdP9mB4AsEGD/3CeSdPd/RqsFYcalfsLmVJYZPiMTpH/Zq9TiE3E+VvAwAIHIagtKaWyxHQzpTld4+N85OqCwuZTka0l8eIYEolxXhVnkl26GQXgqfPQPeo0Ox6533UV9dzXY4hOilmvIKNNTW6nXFpqHqyC94uKG6TMFyNH03bMwoAMCNC5dYjoT0xYQn5+BWRSUu0+pRAFRJq9cUYloqwlVKsRSWdiK9qHIe+dAEiJydqP8LxwRETYTQ1BRZx1LYDoUYKZW87ebclvrSco6qVA4A1JdWz3mGBEJ8mapo9YWFjTUeff0lFGZcRvrPR9gOhxC9phTL6BmWgxQ39Tu/4BMehpJr11GrqmI7FNJLtk6OCIyZjD8OHEZLp3kwxoyStHqsXFaMVrUajvQpJOco9GgZz8R5cVCVypHz2xm2QyGdBE+NQZVcQQNlCGvuVNLq55I3Q3ankpYS6PrK1skRImcnSChJqzdmvPwCLEW22L9hKxiGYTscQvSaUiKlZ1gOUpXK0dzYCEdPD7ZD6TO+QACvsGCqotUz4+IfB4/PR+qPB9gOhTMoSavH1M3NqCwp1dtPugyZUk8a4jt4uGH4xHFI3fszWtVqtsMht5lamGPkpPHIOpFCD4KENVUKBVpbW6mSloMa6+pQV11NlbR6zCM4EACM5oO42NhY5Obm4tq1a3jjjTfuu11cXBwYhsGYMWN0GF3P3AJGYPyTc3D6h7001IQQDVBKZLAb6kwDMDmGYRiUS4v0otDobq4jh8Pc0pKGhukRvlCAsfGzkXs6FRWyYrbD4QxK0uo5pVgKBw/9+yVq6MqlRW1Vzhz/FHL8k3Ogbm7B+X0H2Q6FdOI/PhIm5mbIOvEb26EQI9baokaNshwiStJykqq0jCpp9ZhncCBamppQlGv4CT8+n4/t27djxowZCAgIwIIFC2Bubn7PdlZWVnj11Vdx7tw5FqK8Px6fj/i3V+JWeQWStiewHQ4hBkEpkUIgFGKw61C2QyF3UYiletkv2Cc8DABoaJgeCYp5CLZDHHF2t/EOL+8OJWn1nEIi43wi0BipW1pQUVwCRw4n0Hl8PkY/GovslFOoUZazHQ7pJDBmMuqqq3HjIi3XIeyqkiuokpajVKVyiJyoklZfeYQGQnY1D+rmZrZD0brIyEgUFBSgsLAQzc3N2LVrF0Qi0T3brV+/Hh9++CEaGhpYiPL+xsbPhkdwAA5t+xQNt2rZDocQg6AQtw0rpmIj7mkvAuPx9StV5BMehrJCMWrKK9gORef0dbXKpIVzUVFUgtzTqWyHwin69S+P3EMplsLC2gpWg+3YDoXcRSmWwcGLuwl0z5Ag2DjYI/PoSbZDIZ3w+HwEPDQRuadS0dpCLSiMQU83Vh4eHjh+/DgyMzORnJwMV1fXLu9bW1tDKpXi008/1XhsKnkZbKknLSdRJa3+4gsFcA8YCcnlHLZD0QlXV1dIpdKOP8tkMpiamnbZJiwsDO7u7jhy5MEDuZYuXYq0tDSkpaXBwcFBK/F2NsjWBo+++lcU/HEBF385qvXjEc3q6frq7u6OkydP4uLFi8jMzMSMGTMAAJ6enqirq0NGRgYyMjLw+eef6zp0g9feGo760nKPQiKF0NRUr+4xeHw+vEeH4voF46ui1dfVKkOH+8EnPAxnftgLprWV7XA4pVdJWrrAcddw56F42i8UWRmXHnhuAgIC6NzomEIs4fSNR/DUKLQ0NeHqqbNsh0I68QwJgtVgO2Qnn2I7FKID3d1YjRw5sss2W7duxc6dOxEaGop169Zh06ZNXd5fv349fv/9d63EVyUvo3YHHKUqlcNqsB2EZmZsh0L6yMXPB6YW5kbTj7YnPB4PH330EZYvX97jtgkJCYiIiEBERASUSqXWYxv96HQMsrXBz5s/0fqxiGb15vr69ttvY8+ePRg9ejTmz5+Pf/3rXx3vXb9+HWFhYQgLC8Nf//pXXYdv8CZGROIpn2Ds/mQ7PcNyzJ0B2F2fY7lcrTl0uC8srK2MstWBvq5WmbzoSTTW1eP8T4fYDoVzekzS0gWOu/h8Pt56+TX8dDMXC//+8gPPTU5ODp0bHVNKpDC3soSVPTernIOnRCM/NQ2NtXVsh0I6CYqZjJbmZuSe4cannES7uruxevzxx7tsExAQgJMn2yrek5OTu7w/evRoODk54ehR7VR4VcnLYGFjDbNBg7Syf9J/qtIyAICIKp07cPkBsjNjGxpWVFQEd/c7D/tubm5oamrq+LO1tTWCgoKQkpKCwsJCjBs3DgcPHuTEcsxRsVNRnF9Aw8L0UG+urwzDwMbGBgBga2uL4mIaXKML7fmFz08cwfr939MzLMcoO5K0d1aEcr1a0yd8NAAY5dAwfVytYmknQtjMaUg/eAT11TVaO46+6jFJSxc47oqMjMS1vDxU1NdCNNSFzg3HKG7ee4HjCtcR/rB3G4qs4ylsh0LuEhgzGdfTLlLfOyPR3Y3V3e0MMjMzERcXBwCYM2cObGxsMHjwYPB4PGzbtg0rVqx44DEGcsOlkisAgFoecJCqVA4AsHNxZjkSbuD6A2RnniFBqFaWo7K4lLUYdCktLQ1+fn7w8vKCiYkJ5s+fD5VK1fF+dXU1HB0d4e3tDW9vb5w7dw6zZ8/GhQsXWIy67fee9+hQXPr1OKtxkP7pzfX1vffew+LFiyGVSnHkyBG8/PLLHe95e3vj4sWLSElJwaRJk3QWtzFozy/k5VyFnbsrPcNyTLVCica6ui7Dw7herTlszCgopTJU3b5vJXdwcbXK+LlPwMTMDKe//1Frx9BnPSZpdXGB03V/KUPh6uoKiUSCiqISOHi6P/DchISE0M2Hjik43GspeGo0WtVqZKfQknoucfTywBBvT2p1QLpYsWIFoqKicPHiRURFRUEmk0GtVuNvf/sbjhw5gqKiogd+/UBuuKrkbdWaxjg8rC+9gocPH67TXsFAp0paPeoZp01cf4DszDMkEJKsbNaOr2tqtRrLli1DUlISrl69ij179qChoQFr167FrFmz2A7vvkKnTwEAZCadYDkSoi0LFizA119/DXd3d8ycORP/+9//wOPxUFJSAg8PD4wePRp///vf8f3338Pa2rrbfdBzbN+15xcUEhnsXJxRXFJCz7AcoxTL4OB5Z6gbl6s1eTweho0ZhRvpxjlwWd9WqwiEQkyYF4fc0+dQVihmJQau08jgsIFe4HTdX8rQPKj3afu5uXz5cr/ODd149J+qRI6W5mY4enEwSTslCjcuXEKtqortUEgngdGTAQDZKadZjoToSnc3VncnXUtKShAfH4/Ro0dj9erVAICqqiqMHz8ey5YtQ2FhIbZu3YolS5bc0692oFRy41xS39dewcXFxTrtFQx0SqA7O2ntGPpEkw+QgPbufyxsbDDE2xPiTONJ0gJAYmIihg8fDl9fX2zcuBEAsGbNGhw6dG8vupiYGNaraAFgVOwUyHLyoJTI2A6F9ENvrq/PPfcc9uzZAwA4d+4czM3N4eDggKamJlRUtE2Iv3jxIq5fvw5/f/9uj0PPsf2nFEvBFwi6HYA90GdYgJ5jB0IhkfZpNSib1ZpOvsNgKbI1ylYHgP6tVgmZ/jBshzji1He7WTm+PugxSaurCxzpu/Zz0/5JlzbODd149F+rWo1yaVGXpSJcMMTbE86+w5B1IoXtUMhdgmImQ5aT17GMmRi+7m6sDh482GUbe3t78Hg8AMCqVauwY8cOAMDixYvh6ekJb29vrFixAjt37sSqVas0Gl91WdvvfWNLBPa1V3BNTY1OewUDQEtTE2rKK6iStpf68gAJaO/+xyM4AIDx9KPVV3ZDneEZGoTMo1RFq696c32VSCSYMqWtYnrEiBEwNzeHQqGAg4MD+Py2x2Rvb2/4+fnhxo0bOv8eDFX7M2z7qkPfESMogc4xCrEEg11dwBcKAHC7WtMnPAwAcD39otaPxUX6tlpl8qInUVYoRt6Z82yHwlk9JmnpAsdd7efGpL4RFpaWWLh4EZ0bjlGKpXDw5FaSNujhKADAlRPaq/AifWdpJ4LnqGBqQWFkuruxysnJ6XJjFR0djby8POTl5cHJyQkbNmzQWXwdiUAja3fQ117BIpGoz72CNUFVKofIyBLo98PlB8hwusKEAAAgAElEQVTOPEMC0apWQ5adq9Pjkr5pb3VwiVod6K3eXF+XL1+OpUuX4tKlS/jhhx/w9NNPAwAeeughXL58GRkZGdi7dy9efPFFVFZWsvjdGJb2Z1grCMDn8TDrkUfoGZZjlGIZBEIhBrsOBcDtak2f8DBUlpQaTZ/37ujLahWPkEB4hgTi9Pc/gmEYVmLQB8KeNuh8gRMIBNixY0fHBS49PR2HDh3C8uXLkZCQgNdffx0Mw3S5wK1btw7Nzc1obW2lC5yGtZ+b7f/+N+ych+CrL7+677kJCAi45+aDzo32KcRS+I+PBI/H6/hFFBsbi08++QQCgQBffvnlPV/z+uuv4y9/+QtaWlqgUCjw7LPPQiKRaCym4ClREF/O7ljGTLghIGoi+Hw+9aM1QomJiUhMTOzyd2vWrOn473379mHfvn0P3Mc333yDb775RivxVckVNDisGytWrMBnn32Gp59+GtbW1n3uFQy0LcV8/vnnAaBfSzFVpWVw8HDreUMj0PkBsqio6L4PkO2Sk5OxYsUKnT+oeIYEofR6IRrr6nR6XNI3obEPQ5KVgwoZDSvSZz1dX69evdptT9P9+/dj//79Wo/PWLU/w/70449w9HBD4qnf6BmWY5TiO7NVlGJptzmhOXPmdDlnbBk2ZhTyzlJVpj54aNGTqK+uQdrPPbedMnYMl15paWmsx6Bvr8GuLsy2rFRmbNwsrf5c6dz0/TVu7hPMtqxURuQ0hAHA8Pl8pqCggPH29mZMTEyYS5cuMVlZWV2+Jjo6mrGwsGAAMC+++CKza9cujZ0bkbMTsy0rlYl5djHrPxt9eOny383TH3/AvH30J9a/Z3140e8i3f7snv3nZmb53p2sx67L17hx45hff/21489vvvkm8+abb953+wsXLjBSqZQBwHz77beMWCxmCgsLGYVCwVRVVTGbNm3Syrl54s3XmffPHmP958WV14wZM5i8vDymoKCAeeutt5i0tDRm7dq1zKxZ994fJScnM2PGjOnVfjX1O4fH4zHrTycxf1rzBus/K7ZfXL4vtXdzZbZlpTLRTy1k/eekr+fGWF/0s+v769Xvv2Je+M8nWv+Z0rnp28tSZMtsy0plJi+ep9Wf6UD3McTbs8c8iDG+uHBu7n7ZDHFkNl88xcxa8TLrPx+unxuNDA4j7KoskaOlqYlzy+oJoLjZVgHr6NXWeL0306dTUlJQX18PoK0Hk5ub5qqkgh5+CACQdeI3je3TUPQ0yf31119HdnY2MjMzcfz4cXh49L6Zfk+EZmbwHx9JA8MIJ6nkZbA1snYHfe0V7OLiotNewe1UpWWwsLaCmeUgrexf33B9uZ+DpzsG2dpAYmRDw/RNaCy1OiBEV5QSKefmdxCgVlWFuupqOHI8v+ATPhoAjHZomD6ZOC8OPD4PZ37Yy3YonEdJWgPAtLaiXFZMFzgOUt5uiN9+bnozfbqz55577p5lWgMRPDUaJdeudyxhIW16M8k9IyMD4eHhCA0Nxd69e7F582aNHd9vbDjMBllQqwPCSVVyBSxFtjAxN2M7FJ3pa69goVCo017B7dqHDFJfWv3gGRIEgIaGcd2o2Cm4eSmLhngSogMKsRQiFycIH/A8RNihFMs4n6QdFj4KVWUKKCUytkMhDyA0M8P4uU8gO+U0KopK2A6H83rsSUv0g0Is4fwvUWNUXaZEU30DHDz7Xg27aNEihIeHIyoqqtv3+9rL0GqwHYaNDsXx/3zd51gMXecKZwDdTnJPSUnp+O9z585h8eLFGjt+UMxkNNyqxfU045xKSritvX+17RBHo7oJ7kuv4LS0tC5Dqtpps1cw0FZJC7QlaeXXC7V2HKIZniGBqK+5hbJCMduhkPtw8HSH60h/HPjwY7ZDIcQoKCVS8Pl82LsNhfzGTbbDIZ0oxBJ4h4WyHcYD+YwJww2qouW80TOnw9JOhFPf7WE7FL1AlbQGQimWwcHdrWPpJeEGhmGglEjh6Nm2NL6n6dPtpkyZgtWrV2P27Nndvg8ACQkJiIiIQEREBJRKZY+xBEZPAl8gwOXjKf37ZgxYbya5d9ZThfPSpUuRlpaGtLS0HhPoPB4PAdGTkHs6FeqWlr4HT4iWtVeTGVvLA33Qfm7sXKiSVh94BAdCeiWHJhpz2KjbrQ4yj55kORJCjINC3PbhL7Xt4x4lx6uc7d3dYOvkiOvpl9gOhfRg8uInUZx3jQqSeokqaQ2EQiKFibkZbJ2G0PIsjlGIpXDx8wHQ8/RpABg1ahS++OILPPLII1AoFBqLI3hqNMplRSjJL9DYPo1RTxXOQFsCPSEhAUDbOX8Q9+AA2DjY4wq1OiAcVXW7klZESVrOqVYo0apWwyMoAMV51zS+f4VYivrqGo3v1xiZWpjDxd8HJ7/6H9uhkAcY9chU3LhwCdVlmrv/IoTcX3trOEdq28c5ComsrcrZ3ZWTq3V8wsMAANfTKfHHZT4RozHU3xe7393Idih6g5K0BqK9x6ijpzslaTlGIZYiKOYh8AWCLn0OBQIBduzYgTlz5mDt2rVIT0/HoUOHsGXLFlhZWeHHH38EAEgkknuW3veVuZUl/MZF4PR3P2riWzI43VU4FxUV3bNde4VzVFTUfSuc+yowejLULS3IPZ2qkf0RomlVt5MVVEnLPa1qNSqKSjA2fjbGxs/W+P6ryhTY/MRCNNTc0vi+jY1bwAgIhEKIM6kfLVc5DfOCi58P9m/cxnYohBiN+uoa1FaqqJKWgzoGYHu6czZJW1NeQS2EOG7yoidRW6nCxSNH2Q5Fb1CS1kC0J2kdPNxx7Xw6y9GQzpQSKQQmQti5OKNcVnRPn8M5c+Z06XM4bdo0jccw8qGJEJqYIItaHXSruwrnhQsXIj4+vmMbbVU4B8VMxo30S1StRjiruaERtaoqiJwpSctFX7zwKoZ4eWh8v5Z2dpi/fjUeeWkpDnzwfxrfv7HxDAkEAEiu5LAcCbmf0NgpaG1txWVqdUCITikkUjh49H1+B9GujipnjibQh4WPwo0L1OqAywa7uiAwZjJOfrkTLY2NbIejNyhJayCqyhRobmjs14Aqol2Km7cT6J7uKJfdW52pC8FTolCtUNJE6fvorsI5JycHQ4cOxaxZs7RW4Wzv7gZn32E4t/dnTXwbhGhNlbwMtk6ObIdBulEhK0aFrFgr+/YIDsDE+fH446fDWmmnYEw8ggOhlMhQW6nqeWPCilGPTMWN9AzUlFewHQohRkUpkXUsXSfc0XCrFjXlFXDgYCsKu6HOGDzUBb998z3boZAHmLjgT2DUrTizez/boegVStIaCIZhoJTKqJ8PB3X+FDLvzDmdH19oZoYRk8Yj/eARGlbyAN1Nci8uLsahQ4cAaKfCOTB6EgAgO4X60RJuU8nL4BkShD+9+4bG911dpsCJL3fS4DwO+vWz/yB0+sOIf3slPlvyAl1DBsAzNAgFf1xgOwxyHy7+PnAa5oVT39LkaUJ0TSmRIXzWDAjNzKjajmOUYikctbBaZ6D8x0cCAK6nZ7AcCbkfUwsLjJ0zC5ePnaQ+731ESVoDorgpgZOPN9thkLvcqqhEfc0t1paKDJ8QCbNBFsg68Rsrxyf3FxgzGcX5BagoKmE7FEIeKPdUKtxGDu/4YEFjeDzYONjD3NoKB7f8U7P7JgNWX12DX/5vO+a//w7CH5+JtAO/sB2SXhI5DYHtEEeIL2ezHQq5j9DYKWhVq3H5eDLboRBidDra9rm7orTgBsvRkM4UEimGTxjLdhhd2AxxxMxXXkRRbj5Kr9H/X7gq4vGZsLCxxu/f0YeffUVJWgOilEgRED0JfIEArWo12+GQThRiCWtJ2uAp0airqqbJlxwzyNYG3mEhOLmDJn0T7juzax/O7NqnlX0//sZriFqyANfTM5CdTFXlXJN+MBFj42bjsddfwpWTv1P/7H7wCA0CAEgoSctZo2KnouCPC9SOghAWKDrNVqEkLbcobkoR+cRjMLWwQFN9PdvhgC8QYPGHa2FiboZv//EurfDhKB6Ph0kL50J8OZvuffqBz3YARHMUYhmEJiYQuTixHQq5i1IiY2VqKV8oQGDMJGSnnEJrCyXuuWTk5AkQCIXIPklJKWLcDn+0HZIrOZj//tuwG+rMdjjkLgzDYN+GrRhka4MZL7/Adjh6yTM4EM2NjdTXl6NcR/jD0dMdl349znYohBilO63haLYK13BteNi0F56BT3gY9q3fgrJCMdvhkPsYPnEshnh74hRV0fYLJWkNSMcvUepLyzmKmxLYuThDYGKi0+P6RozGIBsbZB1P0elxSc8CYyajqkwBWU4u26EQwip1czP+t/Id8MDDn7e8D4GQFvlwTUl+AU7/sBfjn5wDt4DhbIejdzxDAiHLyaO+yxw16pEpUDe3UFsoQljC5QFVxq6jypkDSVrfyDGY+sIz+OPAYVw4/Cvb4ZAHmLxoHqrKFLh89CTboeglStIaEC79EiVdKSVS8AUC2LsN1elxg6dEo7GuDnmpaTo9LnkwgYkJhk8ci+yU07RMhxAAFbJi7H53AzxDAvHo639jOxzSjaTtCbhVUYm41SvB4/HYDkdvCIRCuAWMgPjyFbZDIfcRGjsV+efTUFdVzXYohBgttlYdkgcrl8oAAA4e7FY5W9nbYdEH70FxU4KfNm5jNRbyYEO8PTFi0jic3b2fPpzuJ0rSGpAaZTkaamtZ/yVK7qUQt13gdLlUhMfnI2hKFHJPn6NJqRzjGzkG5paWyE6hVgeEtMs68Rt+/3Y3opYsQGDMZLbDIXdpuFWLQ9s+hWdIICLnPMZ2OHrDxd8XJuZmkGTlsB0Kq2JjY5Gbm4tr167hjTfeuOf9119/HdnZ2cjMzMTx48fh4aGbaeLugSNh7zYUmdTqgBBWKSVSWg3KQU31DVDJy+DoqZvfyd3h8XhYtOk9WFhbY+eKt9FU38BaLOTB+EIBHln2PJobG5H64wG2w9FblKQ1MOWSIs70jCF33Onno7sLnGdIEGwc7KnVAQcFxUxGY10dCs5fYDsUQjiF+tNy28XDSbh+IQOPvvY3DLK1YTscveAZEggAEGcabyUtn8/H9u3bMWPGDAQEBGDBggUwNzfvsk1GRgbCw8MRGhqKvXv3YvPmzTqJbdQjU9HS3IwrNLSQEFYpxFLYOjnC1MK8542JTinFUlbzCw8/twT+4yPx0wcfofTaddbiIA9maSfCC198gtDpD+PYF/+lQZwDQElaA6OQSKmfDwfVV9fgVkWlTpfxBE+NQktTE3J+P6OzY5LeCYyejLwz59HS1MR2KIRwSkd/Wh6f+tNy1P4N22BubYWZr/6V7VD0gkdIIKrKFFCVytkOhTWRkZEoKChAYWEhmpubsWvXLohEoi7bpKSkoP725PBz587Bza1vq8KEZmawsLHuc2yhsQ8j78x51FfX9PlrCSGaUy5pW3Vo7+7KciTkbgqxlLWVut6jQ/HIsqXIOHIU5/cdZCUG0rOhw/3w2g874BkahO9WvYcTCd+wHZJeoyStgVGIJRjs6gK+UMB2KOQuur7ABU+JRv65NDTW1unsmKRnbgEjYOvkSFU7hNwH9aflttJr13Hquz0YGz8b7kEBbIfDeZ4hQRBfzmY7DFa5urpCKpV2/Fkmk8HU1PS+2z/33HNITEzs9r2lS5ciLS0NaWlpcHBw6Pj7qD/Px6pffsSkhXN7fQ/sGRoEOxdnXEqiVgeEsE1xe9UhFRtxj1IshdVgu359EDYQliJbLN68DhVFJfhx3Yc6Pba+YbOlUMj0h7Fs5xfgCwX4bMmLuHg4SWP7NlaUpDUwSrEMAqEQg111O6CK9EwpkcLRSzftDoYO94O921BkHadJxVwTGDMZrWo1ck+dZTsUwhE93Vh5eHjg+PHjyMzMRHJyMlxdXTv+/sKFC8jIyMCVK1fwwgsv6Dp0rck6noJT3+2h/rQcdfTzr1CjLEfc6uXg8elW8n4sRbZw9HSHJMu4k7R9sWjRIoSHh2PLli3dvp+QkICIiAhERERAqVR2/H3O76dRlJuPOav+jpX7v0Ng9KQejzUqdiqaGxuRTR+aEsI6JQvzO0jvsJVAn//+O7CyE2HnitVUdPQAbLUU4vF4mPHyC3hq2wYU513Dx/OegSwnd8D7JZSkNThK8e3ep/QpJOcobkohchqik15LwVOj0apW02AqDgqKmYzCjMuoVVWxHQrhgO5urEaOHNllm61bt2Lnzp0IDQ3FunXrsGnTJgBASUkJxo8fj7CwMIwdOxZvvvkmXFxc2Pg2tOLQts8gzb5K/Wk5qLG2Doe2fgqPoACMi3+c7XA4yz24rdLY2Ctpi4qK4O5+577Uzc0NTd20+5kyZQpWr16N2bNnd/v+g5TkX8cXS1/Bl39bDoZh8OynW/Dil5/CdYR/t9vzeDyETn8YuafP0cM/IRzQWFeHamU5VdJykOKmBAAwe84TOqvWfGjJfARETcShbZ+i6Gp+v/djDHTRUuhu5laWeOafmzH1+adxbu/P+Py5ZagprxjQPskdlKQ1MB2fdNGnkJzTfm7s3bXf8iB4ShRuXLhEDbs5xm6oM4YO96OqHdKhuxurxx/vmvQKCAjAyZMnAQDJyckd7zc3N3ckMszMzMA3sIpGdXMzdq54m/rTclRG4jFcO5+Oma++CEs7Uc9fYIQ8Q4LQqlZDln2V7VBYlZaWBj8/P3h5ecHExATz58+HStX1/mTUqFH44osvMHv2bCgUin4f6+qps9gavxj7N2zFUH9fvLb7v5i3bjVsHB26bOcVFgJbJ0dkJp3o97EIIZqlFEvh4MlO71Nyf+WyYjBqNd56+VWdVGu6BwXgsddeQtaJ33D6+72a+BYMmi5aCnXm4OmOV777EiMmjsO+97fgx7UfQN3cPLBvgnRhWE90BLWVKtRX19BSEQ7qqHLW8rlx9PKAi58Psk6kaPU4pO8Co9uWbVOFM2nX3Y1VezuDdpmZmYiLiwMAzJkzBzY2Nhg8eDCAtoq0zMxMSKVSfPjhhygpKbnnGL254eIq6k/LbT9t3AazQYPwKA0R65ZnSCBK8q+jqb6B7VBYpVarsWzZMiQlJeHq1avYs2cPGhoasHbtWsyaNQsAsGXLFlhZWeHHH39ERkYGfv75534fr7VFjTO79mHjo3Px2zc/YPRjsXjz8B5Me/HZjtVMo2KnoKm+AdkppzXyPRJCBk4pkdFqUA5SNzfDsr4Jyls1Wq/WNLe2wp+3rEdVmQK7392gkfjJHf1tKdRuxKRxeO37r2ApssUXz7+Cs7v3aztko0RJWgOkkLA3gZHcn/L21FJtL+MJnhIFALhy4netHof0XWDMZJReL+z4/wIhvbFixQpERUXh4sWLiIqKgkwmg1qtBtCW1A0NDYWvry+eeuopDBky5J6v7+mGi+vY6k/bl17Bw4cPN4pewXeT37iJ3/+3C2PjZ8MjJJDtcFgbnCEQCjHI1gZ2Q53h7OcDr9BgDJ8wFh5BARBTP1oAQGJiIoYPHw5fX19s3LgRALBmzRocOnQIADBt2jQ4OzsjLCwMYWFh96wo6I+Gmls4/NFn2Dx7AXJPp+KRl5bijUO7ET57JkKmxeDqqbNoup1QIISwTyGWwsbRAWaDBrEdCrkLr7oWdYy6488DqdZ8kCffWwWR0xD87x/voL66pl+xGhtdtBQCgJhnFuG57dtQUVyCjxc8i+vpGQOKm9wfrR00QEqJDJ4hQWyHQe7SVF+PKrkCjl7aTtJGQ5KVA5W8TKvHIX1jbm0FnzFhSPnme7ZDIRzS3Y1VUVFRl21KSkoQHx8PALC0tER8fDyqqqru2ebKlSuYPHky9u3bp/3AdezQts/gNSoYCzetQUlegdaPx+Px8M4T87D92C9Q1dVi5T9Wwnp8GEqr2pZoX0k+hb/NfBw7d+7Ezp07kZubi02bNmHJkiUdvYKbmppgaWmJK1eu4ODBg91WORuC/2/v/mOiuPs8gL9hZaX6tEKpF1tAIMFSSHviWa29NKc5WhGfoOVoCrZEbDkM1bYX9S5STUtJTps2Pb2KjTUIqTaNtLV/KLninT4EY56IorArlLDswLYiplWRqucvQD/3h8fICsos7I+Z2fcr+Sbs7sx+Zub9nYEZZr/7P19VYtafF+KtLz5FTwD/ATWYWe6KfByt/gkNDQ2wWCxu0wx+FPPGjRsoKirCZ599htzcXM01opOfRtYH6zBx8iRMnDQJ4ZMnYeLkSZjwkBPVjobGMa8TeUfP2W7sWbcRCbP+Fkv+7V+wbNOHAAAbhzog0pWL6hdUxaC7jeOQ6smVi5cQPnOypmkH79acP3/+iK8XFhZi5cqVAOD2Ca+/z/knzFz4j6j+j+04E+RjuXti6JBC3d3dDx1SaNGiRR4PKWSZMAG5mz7E3y1eCNt//wXfffjvQf8JIV/jRVoTcjXaYQ2fiJCQEIhIoBeHhmg9+ldcvdDjs/cPnWBBz9lu/GJr9lkNM0tPT8cXX3wBi8WCXbt2DXvdarViz549mD17Nnp6epCTk4Nff/1V03v/6fFIdJ6yoaX2iLcXmwxspD+s3njjDbdpoqKicOnSJYgIPvjgA1RWVgK4O1RCT08Pbt68iYiICLz00kvYunVrIFbD527392PPuo3I/Nf3Ef4nbScJ45HwN9Nw/vIf+O3S3eP1iQ4HUp6KRdeFu//8uj0wgJSUFKxduxYAcPXqVbexggeZcazg+/XduIFv15fg5cJ8hNx3UdSfBjP7tatL/Sjm6tWr3aapq6tTf66vr0deXp5HNW4P3MbArT5c6+3FzWvXcevaddy6fh03//ea+vOta/fa9StXcN6l7XcE+Z6r6TS2vfnPmLX4FSTOmY3WI38N9CIR0RC/d7ignDiFEJP/3jSinxubkPHSPyAsfCL6b94a9W7N+fPnP/BuzfLycpSXlwO4+3fwIBFB81+O4AhvaPHI0CGFLBYLKisrkZWVhdLSUpw8eRLV1dVuQwoBwJkzZzR/YuX2wABu9w/gv/5zB2or9vhyVWgI0VNraGgI+DKYsXljuzIb77T09HRpa2sTp9Mp69evH7ZdrVarVFVVidPplPr6eomLi2M2fmihoaGiKIokJCRIWFiY2Gw2aW5udpvmnXfekR07dggAycnJkaqqKmYTgGa2bZqRkSEOh0MURZENGzYIACktLZXMzEwBINnZ2dLe3i4Oh0PKy8vFarUKAHn55ZfFbreLzWYTu90uhYWFQbftfNWys7OlvLxcfZyXlydlZWVu03z77bfy/vvvCwBxOp0iIvL4448LAImJiRG73S7Xrl2TVatWaarJbLyf2e+///7A6cvKymTjxo3MJkCNf5fqt3G7ctvpqXlrmzKb8TWLxSIdHR0SHx//wPOk1NRUURRFEhMTmUuAG3/H6rdp2a6a/k012hhfsbGxqK2tRWNjI+x2OzIyMtTXiouL4XQ60dbWhoULF2opR2RaoaGh+PLLLx/6zZgFBQXo7e3FjBkzsHXrVnz66acBWtrgMnfuXCiK8tAB8ZcuXYrdu3cDAPbt24e0tLRALCqZzGhjNf744494+umnkZSUhMLCQvXOhMOHD2PmzJlITU3FzJkz1bsSyD+GjhX86KOPejxWMGDsL3UzstG+OANgNkRmwHNYIu/w9xdAEgW7h1/FHeHusuTkZLdpdu7cKUVFRQJAkpOTxeVyqT/bbDaxWq0SHx8viqJIaGgor9jr9Iq9P94j2Nu8efPk4MGD6uPi4mLp6upym+bgwYMyb948Ae7+1/LChQvMxg9Ny11Yzc3NEh0drT5WFEWioqKGvVdhYaE0NDRIQ0ODejxk815jf+e283Ub6VhdXFz8wOlPnTo17Fg+2CoqKiQ7O5vZBCCzkTJJS0uT1tZWmTp1qub3Zjbeb/y7VL/NLNvV3+ewZtp2emq8k1a/jcdx/TZmo9/mlTtpR7q77P7xK0QEjz32GABgypQpOHfuHIC7d51VVVWhr68Pv/zyCxRFwdy5c0crSWRa0dHR6OrqUh+P9M2YQ6e5ffs2Ll++jKioqGHvxbt89Ku8vBxz5szBnDlzcPHixUAvDhF5aOhYwWFhYcjNzcWBAwfcpomKikJISAgA4Mknn3QbK3jwExKDYwU7HA7/rkAQGimzB31xxpIlSzz+4gwiMhaewxIRkRGNepF2pItK0dHRbtN8/PHHyMvLQ1dXF3766Se89957mucFeLGJaCx4IdC7uru7ERsbqz4eaUD8odNYLBZMmTIFPT2++yI4IgqMkT7W19ra6vaxvgULFsDhcMDhcGDChAnYtGkTACA5ORnHjx+HzWbDkSNH8Pnnn6OlpSWQqxMU+FFMIhrKH+ewAM9jiYjIuyZ4402WLVuGr7/+Glu2bMG8efPwzTff4Nlnn9U8/9Bv+Dt//rzbt/w9yBNPPOHXC1NGrxcXF+eV99BbNkbLZfLkyXjqqaeQmpoKAJg2bRomTZrkNs3ghcDu7m7NFwK1ZGO0bRWIes899xzsdjv6+/uRnJyMmzdvur1+4MAB5Ofno76+Hq+99hpqa2tHfU9mo8/jWbDicdyzeleuXAEAZGVlISsrCwCwePFifPTRRwCAy5cvAwAiIyOHjRXsKR4rvFNvaGZxcXEoKSlRX3vllVfG9J7MRp/HcT0ez/xdzxe1gul37HjPYQHPz2PN3B99Uc9b/ZHHcX1mw+O4fo/j3GcCm81Dx0PQMi5bS0uLxMTEqI87Ojpk6tSpw6YdOtbmeJu/x8gwez2jLrvRchnpmzFTUlLcplm1apXs2LFDAEhOTo589913ulj2YKiXkZEhDodDFEWRDRs2CAApLS2VzMxMASATJ06U77//XpxOpxw/flwSEhJ0s+ysx2bUzNgf9bvsZq9n5GU3ez0jL7uZj59GajyHDY56Rl52s9cz8rLzOK7PZTd7vcE26nAHWsZlO3PmjPot58888wzCw8Nx4cIFHDhwALm5ubBarYiPj8eMGTNw4sSJ0Tlwbc8AAAaXSURBVEoSmZaWj9BWVFQgKioKTqcTa9euRXFxcYCXOnjU1NQgKSkJiYmJ2Lx5MwCgpKQE1dXVAIBbt27h9ddfx4wZM/DCCy/A5XIFcnGJiIiIaAQ8hyUiIiMadbiDoReVLBYLKisr1YtKJ0+eRHV1NdatW4fy8nKsWbMGIoIVK1YAAFpbW9WLUAMDA1i9ejXu3Lnj63Ui0rWamhrU1NS4PTf045iDFwKJiIiIiMhzPIclIiIjsgD4eLSJFEXB9u3bsW3bNhw9ehQAUFdXh/b2dgDAxYsXUVlZia+++go7d+5EZ2enOu/Ro0exbds2bN++HYqieHXhGxsbvfp+wV7Pm/y57MxFO7NvK2bDeuQ9PI7rk9m3FbNhPV8w87Yyci6+xnPY4KjnTWbfVsxGn/WYC+sNFYK74x4QERERERERERERUQCMOiYtEREREREREREREfkOL9ISERERERERERERBZDuLtKmp6ejra0NTqcT69evH/b6mjVr8PPPP8Nut+Pw4cOYPn26+trAwACamprQ1NSE/fv3e6Vefn4+zp8/r75vQUGB+try5cvR3t6O9vZ2LF++3Cv1tmzZotZyOBzo7e0d1/p5E7NhNlrrMZt7zJyNkXMJVmbuj1rq6blPmjkbI+cC+Dcb7jPamXmf0VJPz9kEKzP3SSP3RzPnoqUes9Fej9ncw2wCm43opYWGhoqiKJKQkCBhYWFis9kkOTnZbZoFCxbII488IgCkqKhIqqqq1NeuXr3q9Xr5+flSVlY2bN7IyEjp6OiQyMhIiYiIkI6ODomIiBh3vaHt3XfflYqKijGvH7NhNsyG2fgqGyPnEqzNzP1Ra72hTU990szZGDkXf2fDfUafuTAbNm/1EaP2SSP3RzPnwmyYDbMxZza6upN27ty5UBQFLpcL/f39qKqqwtKlS92mqaurw40bNwAA9fX1iImJ8Wm9B0lPT8ehQ4fQ29uLP/74A4cOHcKiRYu8Wm/ZsmXYu3evR+vkK8zGHbNhNlqYORsj5xKszNwfx1JPT33SzNkYORfAv9lwn9HOzPvMWOrpKZtgZeY+aeT+aOZcxlKP2TAbLZiNO39no6uLtNHR0ejq6lIfnz17FtHR0Q+cvqCgADU1Nerj8PBwNDQ04NixY5pC1VovOzsbdrsdP/zwg9r5PF1WT+eZPn06EhISUFtbO+b18yZmcw+zYTZamTkbI+cSrMzcHz2dR2990szZGDkXwL/ZcJ/Rzsz7jKfz6C2bYGXmPmnk/mjmXDydh9kwG62YzT2ByGaC19/RT9588008//zzmD9/vvpcXFwczp07p27E5uZmdHZ2jqtOdXU19u7di76+PqxcuRK7d+9GWlraeBd/VLm5udi3bx/u3LmjPueL9fMFZsNsmI3nzJyNkXMJVmbuj4Cx+6SZszFyLoB/suE+4zkz7zOAsbMJVmbuk0buj2bOBWA2WjAbzzEb72ejqztpu7u7ERsbqz6OiYlBd3f3sOnS0tKwceNGLFmyBH19ferz586dAwC4XC7U1dVh1qxZ46536dIltcauXbswe/Zsj5Z1LOsH3O0M999S7en6eROzuYfZMButzJyNkXMJVmbuj57Oo7c+aeZsjJwL4N9suM9oZ+Z9xtN59JZNsDJznzRyfzRzLp7Ow2yYjVbM5p5AZROwAYnvbxaLRTo6OiQ+Pl4dwDclJcVtmtTUVFEURRITE92ej4iIEKvVKgAkKipK2tvbHzr4r9Z606ZNU39+9dVX5dixY+oAxZ2dnRIRESERERHS2dkpkZGR464HQJKSksTlco17/ZgNs2E2zMZX2Rg5l2BtZu6PRu+TZs7GyLn4OxvuM/rMhdmwBXufNHJ/NHMuzIbZMBvTZuOfoLW2jIwMcTgcoiiKbNiwQQBIaWmpZGZmCgA5dOiQ/Pbbb9LU1CRNTU2yf/9+ASAvvviinD59Wmw2m5w+fVrefvttr9TbvHmztLS0iM1mk9raWklKSlLnfeutt8TpdIrT6ZQVK1Z4pR4AKSkpkU8++cRtvrGuH7NhNsyG2fgqGyPnEqzNzP3R6H3SzNkYORd/Z8N9Rp+5MBu2YO+TRu6PZs6F2TAbZmO+bEL+/wciIiIiIiIiIiIiCgBdjUlLREREREREREREFGx4kZaIiIiIiIiIiIgogHiRloiIiIiIiIiIiCiAeJGWiIiIiIiIiIiIKIB4kZaIiIiIiIiIiIgogHiRloiIiIiIiIiIiCiAeJGWiIiIiIiIiIiIKID+D0ZAvGSqXHsjAAAAAElFTkSuQmCC\n"},"metadata":{}}],"source":["# from google.colab import output\n","# ------------ survey param ------------ #\n","# itv_num_list = [1, 3, 5, 15]\n","# itv_list = ['15m', '30m', '1h', '4h']\n","# itv_list = ['3m', '5m', '15m', '30m', '1h', '4h']\n","val_list = np.arange(0.1, 1, 0.1)     # prcn 1\n","# val_list = np.arange(-0.5, 0.5, 0.05)  # prcn 2\n","# val_list = np.arange(-0.5, 0., 0.03)  # prcn 2\n","# val_list = np.arange(-0.5, -0.6, -0.005)    # prcn 3\n","# val_list = np.arange(0.944, 0.945, 0.0001)    # prcn 4\n","# val_list = np.arange(1, 10, 1)   # prcn -1\n","# val_list = np.arange(100, 120, 1)   # prcn -2\n","# val_list = talib.get_function_groups()['Pattern Recognition']\n","\n","# ------------ get survey_res ------------ #\n","result = []\n","res_shape = (3, 12)  # short, long, both x data\n","config_list_copy = copy.deepcopy(config_list)\n","for set_val in val_list:\n","  # ------------ open 결정 이전의 인자값 ------------ #\n","  # ------ point * dur. ------ #\n","  config_list_copy[0].loc_set.point1.wrr_32 = set_val\n","  # config_list_copy[0].loc_set.point1.candle_pattern = set_val\n","  # config_list_copy[0].loc_set.zone.degree_list = set_val\n","  # config_list_copy[0].loc_set.point2.wick_score_list = str([set_val])\n","  # config_list_copy[0].loc_set.zone.ir = set_val  \n","  # config_list_copy[0].loc_set.zone.abs_ratio = set_val\n","\n","  # ------------ open 결정 이후의 인자값 ------------ #\n","  # ------ utils ------ #\n","  # config_list_copy[0].tr_set.tp_gap = set_val  \n","  # config_list_copy[0].tr_set.ep_gap1 = set_val \n","  # config_list_copy[0].tr_set.ep_gap2 = set_val \n","  # config_list_copy[0].tr_set.out_gap = set_val  \n","  # config_list_copy[0].tr_set.wave_length1 = set_val  \n","  # config_list_copy[0].tr_set.wave_time_ratio1 = set_val\n","\n","  # config_list_copy[0].tr_set.tp_gap = abs(set_val) - 0.5\n","  # config_list_copy[0].tr_set.out_gap = set_val + 0.5\n","  # config_list_copy[0].tr_set.wb_tp_gap = config_list_copy[0].tr_set.tp_gap\n","  # config_list_copy[0].tr_set.wb_out_gap = config_list_copy[0].tr_set.out_gap\n","\n","  # ------ entry, exit (ep, tp, out vars.) ------ #\n","  # config_list_copy[0].tr_set.expire_k = set_val\n","  # config_list_copy[0].ep_set.expire_tick = set_val  \n"," \n","  for utils_, config_ in zip(utils_list, config_list_copy):\n","    enlist_tr(res_df, config_, np_timeidx)\n","  # open_info_df = get_open_info_df(ep_loc_v3, res_df, np_timeidx, ID_list, config_list_copy, id_idx_list)   # point * mr_res 이기 때문에 utils_tr & rtc 의 영향을 충분히 받음\n","  open_info_df1 = get_open_info_df_v2(ep_loc_p1_v3, res_df, np_timeidx, ID_list, config_list_copy, id_idx_list, open_num=1)  # --> point * dur. 관련 (loc_set) param 에 종속 (open_info 가 변경되는게 아니라면, 재실행할 필요없음)\n","  open_info_df2 = get_open_info_df_v2(ep_loc_p2_v3, res_df, np_timeidx, ID_list, config_list_copy, id_idx_list, open_num=2)\n","  open_info_df_list = [open_info_df1, open_info_df2]\n","\n","  try:\n","    result.append(get_res_v9(res_df, open_info_df_list, ohlc_list, config_list_copy, np_timeidx, funcs, test_ratio=test_ratio, plot_is=1, signi=True))    \n","  except:\n","    result.append(np.full(res_shape, np.nan))\n","    # pass\n","\n","survey_res_list = [np.array(result)[:, s_i::3] for s_i in range(3)]   # 3 for s, l, b\n","# short_res, long_res, both_res = survey_res_list\n","\n","# ------------ plot survey_res ------------ #\n","title_list = [\"short\", \"long\", \"both\"]\n","sub_title_list = ['hhm', 'hlm', 'frq', 'dpf', 'wr', 'sr', 'acc_pr', 'sum_pr', 'min_pr', 'liqd', 'acc_mdd', 'sum_mdd']\n","space_ = \" \" * 120\n","\n","fig = plt.figure(figsize=(24, 8))\n","plt.style.use('dark_background')\n","gs = gridspec.GridSpec(nrows=1,\n","                        ncols=3,\n","                        # height_ratios=[1, 1, 1]\n","                      )\n","# nrows, ncols, h_r = 3, 3, [1, 1, 1]\n","nrows, ncols, h_r = 3, 4, [1, 1, 1]\n","# nrows, ncols, h_r = 4, 3, [1, 1, 1, 1]\n","# if d_idx == 0:\n","# else:\n","  # nrows, ncols, h_r = 2, 2, [1, 1]\n","\n","for d_idx, (title_name, survey_res) in enumerate(zip(title_list, survey_res_list)):  \n","  inner_gs = gs[d_idx].subgridspec(nrows=nrows,\n","                        ncols=ncols,\n","                        height_ratios=h_r\n","                      )\n","  for in_idx, (data_, sub_title) in enumerate(zip(survey_res.T, sub_title_list)):\n","    plt.subplot(inner_gs[in_idx])\n","    data = data_.ravel()\n","    valid_idx = ~np.isnan(data)\n","    if np.sum(valid_idx) > 0:\n","      if type(val_list[0]) == str:\n","        x, y = np.arange(len(val_list))[valid_idx], data[valid_idx]\n","      else:\n","        x, y = val_list[valid_idx], data[valid_idx]\n","      plt.plot(x, y)  # 앞에서부터 len(result) 만큼만    \n","      plt.title(sub_title + '_{:.2f}'.format(x[np.argmax(y)]))\n","    else:\n","      plt.title(sub_title)\n","\n","plt.suptitle(space_.join(title_list))\n","plt.show()\n","# print(\"\\n\")"]},{"cell_type":"markdown","metadata":{"id":"EJ4f-3Zf4ImT"},"source":["### backtrader validation"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"BPI-9QX74ImW"},"outputs":[],"source":["trade_log_name = \"ETHUSDT_1658210884.pkl\"\n","trade_log_dir_path = \"./trade_log/0717_5_47_trader\"\n","\n","with open(os.path.join(trade_log_dir_path, trade_log_name), 'rb') as f:\n","  trade_log = pickle.load(f)"]},{"cell_type":"code","source":["trade_log  # both pos_side's log"],"metadata":{"id":"9Kymnik4ZpA6"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"DiTKuq9T4ImY","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1658222594162,"user_tz":-540,"elapsed":431,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"a06c3f6a-311d-4a7d-c425-00563fd8980f"},"outputs":[{"output_type":"stream","name":"stdout","text":["lacked_open_ts : []\n","added_open_ts : ['2022-01-14 17:27:59.999000']\n","\n","lacked_entry_ts : []\n","added_entry_ts : ['2022-01-14 17:28:59.999000']\n","\n","lacked_exit_ts : []\n","added_exit_ts : ['2022-01-14 19:53:59.999000']\n","\n"]}],"source":["# 1. ts 에 pair 된 en_p, ex_p 만 비교하면 될 것\n","#   -> open_idx, en_idx, ex_idx 조회하면 될 것\n","\n","pos_side = \"SELL\" # BUY\n","val_obj = short_obj if pos_side == \"SELL\" else long_obj\n","\n","# ------ get idep trade_info ------ #\n","op_ts = list(map(lambda x : str(x), res_df.index[val_obj[4].astype(int).ravel()])) \n","en_ts = list(map(lambda x : str(x), res_df.index[val_obj[2].astype(int).ravel()])) \n","ex_ts = list(map(lambda x : str(x), res_df.index[val_obj[3].astype(int).ravel()])) \n","en_p = val_obj[0].ravel()\n","ex_p = val_obj[1].ravel()\n","\n","for order_type, ts_ in zip(['open', 'entry', 'exit'], [op_ts, en_ts, ex_ts]):\n","  trade_log_ts = [k for k, v in trade_log.items() if order_type in v if pos_side in v]\n","  lacked_ts = [ts for ts in ts_ if not ts in trade_log_ts]\n","  added_ts = [ts for ts in trade_log_ts if not ts in ts_]\n","\n","  print(\"lacked_{}_ts :\".format(order_type), lacked_ts)\n","  print(\"added_{}_ts :\".format(order_type), added_ts)\n","  print()"]},{"cell_type":"code","source":["# ex_ts\n","# [k for k, v in trade_log.items() if order_type in v if pos_side in v]\n","# list(trade_log.keys())[1]\n","res_df.iloc[-0:]"],"metadata":{"id":"ZlcPZeuO-UnB"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["#### check added_ts"],"metadata":{"id":"bPfWgZCI73LZ"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"VnTmGTJI4ImZ"},"outputs":[],"source":["keys = list(trade_log.keys())\n","\n","for k_i in range(len(keys)):\n","  if keys[k_i] in added_ts:\n","    # print(trade_log[keys[k_i]])\n","    # print(trade_log[keys[k_i + 1]])\n","    print(keys[k_i], trade_log[keys[k_i]])\n","    print(keys[k_i + 1], trade_log[keys[k_i + 1]])"]},{"cell_type":"markdown","source":["#### price sync_check"],"metadata":{"id":"yMFIedEG77Yt"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"Vn5x7mcP4ImZ","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1658223074884,"user_tz":-540,"elapsed":378,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"96d56d1e-03f6-472a-cddd-5f449f3001ba"},"outputs":[{"output_type":"stream","name":"stdout","text":["2022-01-17 03:19:59.999000 -0.00580000000036307\n","\n","2022-01-18 16:49:59.999000 0.0\n","\n","2022-01-27 05:56:59.999000 -0.007399999999961437\n","\n","2022-01-27 11:51:59.999000 0.0\n","\n","2022-02-03 01:29:59.999000 0.0\n","\n","2022-02-05 10:58:59.999000 0.0\n","\n","2022-02-08 17:00:59.999000 -0.00559999999950378\n","\n","2022-02-13 07:03:59.999000 -0.003800000000410364\n","\n","2022-02-16 10:32:59.999000 -0.0039999999999054126\n","\n","2022-02-16 13:43:59.999000 0.0\n","\n"]}],"source":["accept_price_gap = 0.1\n","for i in range(len(en_ts)):\n","  try:\n","    print(en_ts[i], trade_log[en_ts[i]][0] - en_p[i])\n","    # print(trade_log[str(ex_ts[i])])\n","    # print(ex_ts[i], trade_log[ex_ts[i]][0] - ex_p[i])\n","    # print(ex_ts[i])\n","    print()\n","\n","  except Exception as e:\n","    print(e)\n"]},{"cell_type":"markdown","metadata":{"id":"1GVZ03zDyU2N"},"source":["### legacy"]},{"cell_type":"markdown","metadata":{"id":"IWO7KkqltMFt"},"source":["#### main_functions"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"MY1csdNRLGsk"},"outputs":[],"source":["def get_open_info_df_v2(ep_loc_v2, res_df, np_timeidx, ID_list, config_list, id_idx_list, open_num=1):\n","  start_0 = time.time()\n","  # ------ get mr_res, zone_arr ------ #\n","  short_mr_res_obj = np.array([ep_loc_v2(res_df, config_, np_timeidx, show_detail=True, ep_loc_side=OrderSide.SELL) for config_ in config_list])\n","  long_mr_res_obj = np.array([ep_loc_v2(res_df, config_, np_timeidx, show_detail=True, ep_loc_side=OrderSide.BUY) for config_ in config_list])\n","  short_open_idx_list = [np.where(res_df['short_open{}_{}'.format(open_num, id)].to_numpy() * mr_res)[0] for id, mr_res in zip(ID_list, short_mr_res_obj[:, 0].astype(np.float64))]   # \"point * mr_Res\"\n","  long_open_idx_list = [np.where(res_df['long_open{}_{}'.format(open_num, id)].to_numpy() * mr_res)[0] for id, mr_res in zip(ID_list, long_mr_res_obj[:, 0].astype(np.float64))]  # zip 으로 zone (str) 과 묶어서 dtype 변경됨\n","\n","  # ------ open_info_arr ------ #\n","  short_side_list = [np.full(len(list_), OrderSide.SELL) for list_ in short_open_idx_list]\n","  long_side_list = [np.full(len(list_), OrderSide.BUY) for list_ in long_open_idx_list]\n","\n","  short_zone_list = [zone_res[short_open_idx] for zone_res, short_open_idx in zip(short_mr_res_obj[:, 1], short_open_idx_list)]\n","  long_zone_list = [zone_res[long_open_idx] for zone_res, long_open_idx in zip(long_mr_res_obj[:, 1], long_open_idx_list)]\n","\n","  short_id_list = [np.full(len(list_), id) for id, list_ in zip(ID_list, short_open_idx_list)]\n","  long_id_list = [np.full(len(list_), id) for id, list_ in zip(ID_list, long_open_idx_list)]\n","\n","  selected_id_idx = np.arange(len(id_idx_list))\n","  short_id_idx_list = [np.full(len(list_), id) for id, list_ in zip(selected_id_idx, short_open_idx_list)]\n","  long_id_idx_list = [np.full(len(list_), id) for id, list_ in zip(selected_id_idx, long_open_idx_list)]\n","\n","  # ------ get open_info_df ------ #\n","  #   series 만들어서 short / long 끼리 합치고 둘이 합치고, 중복은 우선 순위 정해서 제거\n","  short_open_df_list = [pd.DataFrame(index=index_, data=np.vstack((data_)).T, columns=['side', 'zone', 'id', 'id_idx']) for index_, data_ in zip(short_open_idx_list, zip(short_side_list, short_zone_list, short_id_list, short_id_idx_list))]\n","  long_open_df_list = [pd.DataFrame(index=index_, data=np.vstack((data_)).T, columns=['side', 'zone', 'id', 'id_idx']) for index_, data_ in zip(long_open_idx_list, zip(long_side_list, long_zone_list, long_id_list, long_id_idx_list))]\n","\n","  open_info_df = pd.concat(short_open_df_list + long_open_df_list)\n","  # ------ sorting + unique ------ #\n","  open_info_df.sort_index(inplace=True)\n","  # print(len(open_info_df))\n","  # print(len(open_info_df))\n","  # open_info_df.head()\n","  print(\"get_open_info_df elapsed time :\", time.time() - start_0)\n","  return open_info_df[~open_info_df.index.duplicated(keep='first')]  # 먼저 순서를 우선으로 지정  "]},{"cell_type":"code","execution_count":null,"metadata":{"id":"eiQ36_SLLE3w"},"outputs":[],"source":["def get_res_v9(res_df, open_info_df_list, ohlc_list, config_list, np_timeidx, funcs, inversion=False, test_ratio=0.3, plot_is=True, signi=False, show_detail=False):\n","  # ------------ make open_info_list ------------ #\n","  open_idx1, open_idx2 = [open_info_df.index.to_numpy() for open_info_df in open_info_df_list]\n","  len_df = len(res_df)\n","\n","  sample_len = int(len_df * (1 - test_ratio))\n","  sample_idx1 = (open_idx1 < sample_len) == plot_is  # in / out sample plot 여부\n","  sample_open_idx1 = open_idx1[sample_idx1]  \n","  sample_idx2 = (open_idx2 < sample_len) == plot_is  # in / out sample plot 여부\n","\n","  # ------------ open_info_list 기준 = p1 ------------ #\n","  sample_open_info_df1, sample_open_info_df2 = [df_[idx_] for df_, idx_ in zip(open_info_df_list, [sample_idx1, sample_idx2])]\n","  open_info1 = [sample_open_info_df1[col_].to_numpy() for col_ in sample_open_info_df1.columns]\n","\n","  if config_list[0].tr_set.check_hlm in [0, 1]:   # 여기서 open_info 자동화하더라도, utils info 는 직접 실행해주어야함\n","    sample_open_idx2 = sample_open_idx1\n","    open_info2 = open_info1\n","  else:\n","    sample_open_idx2 = open_idx2[sample_idx2]\n","    open_info2 = [sample_open_info_df2[col_].to_numpy() for col_ in sample_open_info_df2.columns]\n","\n","  # ------------ get paired_res ------------ #\n","  start_0 = time.time()\n","  paired_res = en_ex_pairing_v9_5(res_df, [sample_open_idx1, sample_open_idx2], [open_info1, open_info2], ohlc_list, config_list, np_timeidx, funcs, show_detail)\n","  # valid_openi_arr, pair_idx_arr, pair_price_arr, lvrg_arr, fee_arr, tpout_arr = paired_res\n","  print(\"en_ex_pairing elapsed time :\", time.time() - start_0)  #  0.37 --> 0.3660471439361572 --> 0.21(lesser if)\n","\n","  # ------------ idep_plot ------------ #\n","  start_0 = time.time()\n","  high, low = ohlc_list[1:3]\n","  res = idep_plot_v16_2(res_df, len_df, config_list[0], high, low, sample_open_info_df1, paired_res, inversion=inversion, sample_ratio=1 - test_ratio, signi=signi)\n","  print(\"idep_plot elapsed time :\", time.time() - start_0)   # 1.40452 (v6) 1.4311 (v5)\n","\n","  return res"]},{"cell_type":"code","source":["def plot_info_v9(gs, gs_idx, len_df, sample_len, tr, hhm, p2_hhm, out_hhm, mean_low, hlm, bars_in, net_p1_frq, pr, total_pr, cum_pr, liqd, leverage, title_position, fontsize):\n","  try:\n","    plt.subplot(gs[gs_idx])\n","    idep_res_obj = get_res_info_nb_v2(sample_len, pr, total_pr, cum_pr, liqd)\n","    plt.plot(cum_pr)\n","    plt.plot(idep_res_obj[-1], color='gold')\n","    if sample_len is not None:\n","      plt.axvline(sample_len, alpha=1., linestyle='--', color='#ffeb3b')\n","    plt.xlim(0, len_df)\n","\n","    title_str = \"tr : {:.3f}\\n tpbox_hhm : {:.3f}\\n tpbox_p2exec_hhm : {:.3f}\\n outbox_hhm : {:.3f}\\n tpbox_mean_low : {:.3f}\\n hlm : {:.3f}\\n bars_in : {:.3f}\\n net_p1_frq : {}\\n frq : {}\\n dpf : {:.3f}\\n wr : {:.3f}\\n sr : {:.3f}\\n acc_pr : {:.3f}\\n sum_pr : {:.3f}\\n\" +\\\n","              \"min_pr : {:.3f}\\n liqd : {:.3f}\\n acc_mdd : -{:.3f}\\n sum_mdd : -{:.3f}\\n leverage {:.3f}\"\n","    plt.title(title_str.format(tr, hhm, p2_hhm, out_hhm, mean_low, hlm, bars_in, net_p1_frq, *idep_res_obj[:-1], leverage), position=title_position, fontsize=fontsize)\n","  except Exception as e:\n","    print(\"error in plot_info :\", e)\n","\n","  return gs_idx + 1"],"metadata":{"id":"8hdpN7S8JJF-"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"xafHpMLwESKf"},"outputs":[],"source":["def idep_plot_v16_2(res_df, len_df, config, high, low, open_info_df1, paired_res, inversion=False, sample_ratio=0.7, title_position=(0.5, 0.5),\n","                  fontsize=15, signi=False):  # open_idx, side_arr\n","    if not signi:\n","        plt.style.use(['dark_background', 'fast'])\n","        plt.figure(figsize=(24, 8))\n","        gs = gridspec.GridSpec(nrows=2,  # row 몇 개\n","                               ncols=3,  # col 몇 개\n","                               height_ratios=[10, 1]\n","                               # height_ratios=[10, 10, 1]\n","                               )\n","    gs_idx = 0\n","    # plt.suptitle(key)\n","\n","    p_ranges, p_qty_ratio = literal_eval(config.tp_set.p_ranges), literal_eval(config.tp_set.p_qty_ratio)\n","    assert np.sum(p_qty_ratio) == 1.0\n","    assert len(p_ranges) == len(p_qty_ratio)\n","\n","    if sample_ratio is not None:\n","        sample_len = int(len_df * sample_ratio)\n","    else:\n","        sample_len = len_df\n","\n","    # ------ short & long data preparation ------ #\n","    # start_0 = time.time()\n","\n","    net_p1_idx_arr, p1_idx_arr, p2_idx_arr, pair_idx_arr, pair_price_arr, lvrg_arr, fee_arr, tpout_arr, tr_arr = paired_res\n","    assert len(p1_idx_arr) != 0, \"assert len(p1_idx_arr) != 0\"\n","\n","    short_net_p1_idx_arr = net_p1_idx_arr[np.where(open_info_df1.side.loc[net_p1_idx_arr] == OrderSide.SELL)[0]]\n","    long_net_p1_idx_arr = net_p1_idx_arr[np.where(open_info_df1.side.loc[net_p1_idx_arr] == OrderSide.BUY)[0]]\n","\n","    short_net_p1_frq = len(short_net_p1_idx_arr)\n","    long_net_p1_frq = len(long_net_p1_idx_arr)\n","    # print(\"len(short_net_p1_true_bias_bool) :\", len(short_net_p1_idx_arr))\n","    # print(\"len(long_net_p1_true_bias_bool) :\", len(long_net_p1_idx_arr))\n","\n","    short_p1_openi_idx = np.where(open_info_df1.side.loc[p1_idx_arr] == OrderSide.SELL)[0]  # p1_idx_arr 에 대한 idx, # side_arr,\n","    long_p1_openi_idx = np.where(open_info_df1.side.loc[p1_idx_arr] == OrderSide.BUY)[0]\n","\n","    # p1_idx = open_idx[p1_openi_arr].reshape(-1, 1)   # != p1_idx_arr, p1_openi_arr 은 exit_done 기준임\n","\n","    np_obj = np.hstack((pair_price_arr, pair_idx_arr, p1_idx_arr.reshape(-1, 1)))  # p1_idx_arr is 1d, need to be changed to 2d (for stacking)\n","    short_obj = np_obj[short_p1_openi_idx]\n","    long_obj = np_obj[long_p1_openi_idx]\n","    both_obj = np.vstack((short_obj, long_obj))\n","    # print(\"short_obj.shape :\", short_obj.shape)\n","    # print(\"long_obj.shape :\", long_obj.shape)\n","\n","    short_obj, long_obj, both_obj = [np.split(obj_, 5, axis=1) for obj_ in [short_obj, long_obj, both_obj]]\n","\n","    short_p2_idx_arr, long_p2_idx_arr = [p2_idx_arr[openi_idx_].reshape(-1, 1) for openi_idx_ in [short_p1_openi_idx, long_p1_openi_idx]]\n","    short_lvrg_arr, long_lvrg_arr = [lvrg_arr[openi_idx_].reshape(-1, 1) for openi_idx_ in [short_p1_openi_idx, long_p1_openi_idx]]\n","    short_fee_arr, long_fee_arr = [fee_arr[openi_idx_].reshape(-1, 1) for openi_idx_ in [short_p1_openi_idx, long_p1_openi_idx]]\n","    short_tpout_arr, long_tpout_arr = [tpout_arr[openi_idx_] for openi_idx_ in [short_p1_openi_idx, long_p1_openi_idx]]\n","    # short_bias_arr, long_bias_arr = [bias_arr[openi_idx_] for openi_idx_ in [short_p1_openi_idx, long_p1_openi_idx]]\n","    short_tr_arr, long_tr_arr = [tr_arr[openi_idx_] for openi_idx_ in [short_p1_openi_idx, long_p1_openi_idx]]\n","    # print(\"long_bias_arr.shape :\", long_bias_arr.shape)\n","    # print(\"short / long arr setting elapsed time :\", time.time() - start_0)\n","\n","    # start_0 = time.time()\n","\n","    short_tpbox_hhm, long_tpbox_hhm, short_tpbox_p2exec_hhm, long_tpbox_p2exec_hhm, short_outbox_hhm, long_outbox_hhm, \\\n","          short_net_p1_bias_tick, long_net_p1_bias_tick, short_p2exec_p1_bias_tick, long_p2exec_p1_bias_tick, short_p2_true_bias_bool, long_p2_true_bias_bool, \\\n","          short_tp_1, short_tp_0, long_tp_1, long_tp_0, short_out_1, short_out_0, long_out_1, long_out_0, short_ep2_0, long_ep2_0 = \\\n","      get_wave_bias_v6(res_df, config, high, low, len_df, short_net_p1_idx_arr, long_net_p1_idx_arr, short_p2_idx_arr, long_p2_idx_arr, short_obj, long_obj)\n","\n","    # print(\"get_wave_bias elapsed time :\", time.time() - start_0)\n","    # print(\"short_net_p1_bias_tick, long_net_p1_bias_tick, short_p2exec_p1_bias_tick, long_p2exec_p1_bias_tick :\", short_net_p1_bias_tick, long_net_p1_bias_tick, short_p2exec_p1_bias_tick, long_p2exec_p1_bias_tick)\n","\n","    len_short, len_long = len(short_p1_openi_idx), len(long_p1_openi_idx)\n","\n","    # ------ plot_data ------ #\n","    try:\n","        # start_0 = time.time()\n","        if len_short == 0:\n","            short_pr = []\n","            gs_idx += 1\n","        else:\n","            short_tr = short_tr_arr.mean()\n","            short_pr, short_liqd = get_pr_v4(OrderSide.SELL, high, low, short_obj, short_tpout_arr, short_lvrg_arr, short_fee_arr, p_ranges,\n","                                             p_qty_ratio, inversion)\n","            short_total_pr = to_total_pr(len_df, short_pr, short_obj[-2])\n","            short_cum_pr = np.cumprod(short_total_pr)\n","            short_hlm = hlm(short_pr, short_p2_true_bias_bool)\n","            short_trade_ticks = np.mean(short_obj[-2] - short_obj[-1])\n","            if signi:\n","                short_idep_res_obj = (short_tpbox_p2exec_hhm, short_hlm) + get_res_info_nb_v2(sample_len, short_pr, short_total_pr, short_cum_pr, short_liqd)\n","            else:\n","                gs_idx = plot_info_v8(gs, gs_idx, len_df, sample_len, short_tr, short_tpbox_hhm, short_tpbox_p2exec_hhm, short_outbox_hhm, short_hlm, short_trade_ticks, short_net_p1_frq, short_pr, short_total_pr,\n","                                      short_cum_pr, short_liqd, short_lvrg_arr.mean(), title_position, fontsize)\n","        # print(\"short plot_data elapsed time :\", time.time() - start_0)\n","\n","    except Exception as e:\n","        gs_idx += 1\n","        print(\"error in short plot_data :\", e)\n","\n","    try:\n","        # start_0 = time.time()\n","        if len_long == 0:\n","            long_pr = []\n","            gs_idx += 1\n","        else:\n","            long_tr = long_tr_arr.mean()\n","            long_pr, long_liqd = get_pr_v4(OrderSide.BUY, high, low, long_obj, long_tpout_arr, long_lvrg_arr, long_fee_arr, p_ranges, p_qty_ratio,\n","                                           inversion)\n","            long_total_pr = to_total_pr(len_df, long_pr, long_obj[-2])\n","            long_cum_pr = np.cumprod(long_total_pr)\n","            # long_hhm = long_net_p1_hhm\n","            long_hlm = hlm(long_pr, long_p2_true_bias_bool)\n","            long_trade_ticks = np.mean(long_obj[-2] - long_obj[-1])\n","            if signi:\n","                long_idep_res_obj = (long_tpbox_p2exec_hhm, long_hlm) + get_res_info_nb_v2(sample_len, long_pr, long_total_pr, long_cum_pr, long_liqd)\n","            else:\n","                gs_idx = plot_info_v8(gs, gs_idx, len_df, sample_len, long_tr, long_tpbox_hhm, long_tpbox_p2exec_hhm, long_outbox_hhm, long_hlm, long_trade_ticks, long_net_p1_frq, long_pr, long_total_pr,\n","                                      long_cum_pr, long_liqd, long_lvrg_arr.mean(), title_position, fontsize)\n","        # print(\"long plot_data elapsed time :\", time.time() - start_0)\n","    except Exception as e:\n","        gs_idx += 1\n","        print(\"error in long plot_data :\", e)\n","\n","    try:\n","        # start_0 = time.time()\n","        if len_short * len_long == 0:\n","            both_pr = []\n","            gs_idx += 1\n","        else:\n","            both_tr = (short_tr + long_tr) / 2\n","            both_pr = np.vstack((short_pr, long_pr))  # for 2d arr, obj 를 1d 로 만들지 않는 이상, pr 은 2d 유지될 것\n","            both_total_pr = to_total_pr(len_df, both_pr, both_obj[-2])\n","            both_cum_pr = np.cumprod(both_total_pr)\n","            both_liqd = min(short_liqd, long_liqd)\n","            both_p2_true_bias_bool = np.hstack((short_p2_true_bias_bool, long_p2_true_bias_bool))  # hstack for 1d arr, vstack for 2d arr\n","            both_tpbox_hhm = (short_tpbox_hhm + long_tpbox_hhm) / 2\n","            both_tpbox_p2exec_hhm, both_hlm = (short_tpbox_p2exec_hhm + long_tpbox_p2exec_hhm) / 2, (short_hlm + long_hlm) / 2\n","            both_outbox_hhm = (short_outbox_hhm + long_outbox_hhm) / 2\n","            both_trade_ticks = np.mean(both_obj[-2] - both_obj[-1])\n","            both_net_p1_frq = short_net_p1_frq + long_net_p1_frq\n","            if signi:\n","                both_idep_res_obj = (both_tpbox_p2exec_hhm, both_hlm) + get_res_info_nb_v2(sample_len, both_pr, both_total_pr, both_cum_pr, both_liqd)\n","            else:\n","                gs_idx = plot_info_v8(gs, gs_idx, len_df, sample_len, both_tr, both_tpbox_hhm, both_tpbox_p2exec_hhm, both_outbox_hhm, both_hlm, both_trade_ticks, both_net_p1_frq, both_pr, both_total_pr,\n","                                      both_cum_pr, both_liqd, lvrg_arr.mean(), title_position, fontsize)\n","        # print(\"both plot_data elapsed time :\", time.time() - start_0)\n","    except Exception as e:\n","        gs_idx += 1\n","        print(\"error in both plot_data :\", e)\n","\n","    if not signi:\n","        if len_short * len_long > 0:\n","            for obj, bias_arr, cum_pr in zip([short_obj, long_obj, both_obj], [short_p2_true_bias_bool, long_p2_true_bias_bool, both_p2_true_bias_bool],\n","                                             [short_cum_pr, long_cum_pr, both_cum_pr]):\n","                try:\n","                    # start_0 = time.time()\n","                    gs_idx = frq_dev_plot_v4(gs, gs_idx, len_df, sample_len, obj[-2], bias_arr, cum_pr[-1], fontsize)\n","                    # print(\"frq_dev_plot elapsed time :\", time.time() - start_0)\n","                except Exception as e:\n","                    gs_idx += 1\n","                    print(\"error in frq_dev_plot :\", e)\n","            plt.show()\n","            plt.close()\n","\n","        return short_pr, short_obj, short_lvrg_arr, short_fee_arr, short_tpout_arr, short_tr_arr, short_p2_true_bias_bool, short_net_p1_bias_tick, short_p2exec_p1_bias_tick, short_net_p1_idx_arr, short_p2_idx_arr, short_tp_1, short_tp_0, short_out_1, short_out_0, short_ep2_0, \\\n","               long_pr, long_obj, long_lvrg_arr, long_fee_arr, long_tpout_arr, long_tr_arr, long_p2_true_bias_bool, long_net_p1_bias_tick, long_p2exec_p1_bias_tick, long_net_p1_idx_arr, long_p2_idx_arr, long_tp_1, long_tp_0, long_out_1, long_out_0, long_ep2_0  # long_net_p1_idx_arr long_p2_idx_arr\n","\n","    else:\n","        return [short_idep_res_obj[:-1], long_idep_res_obj[:-1], both_idep_res_obj[:-1]]"]},{"cell_type":"markdown","metadata":{"id":"EFyWTuscH8VH"},"source":["#### get paired_res function"]},{"cell_type":"code","source":["def en_ex_pairing_v9_5(res_df, open_idx_list, open_info_list, ohlc_list, config_list, np_timeidx, funcs, show_detail=False):  # 이미 충분히 줄여놓은 idx 임\n","\n","    open_info1, open_info2 = open_info_list\n","    side_arr1, _, _, id_idx_arr1 = open_info1\n","    side_arr2, _, _, _ = open_info2\n","\n","    expiry_p1, expiry_p2, lvrg_set = funcs\n","\n","    net_p1_idx_list, p1_idx_list, p2_idx_list, pair_idx_list, pair_price_list, lvrg_list, fee_list, tpout_list, tr_list = [[] for li in range(9)]\n","    len_df = len(res_df)\n","\n","    open, high, low, close = ohlc_list\n","    \n","    open_idx1, open_idx2 = open_idx_list\n","    len_open_idx1 = len(open_idx1)\n","    len_open_idx2 = len(open_idx2)\n","    i, open_i1, open_i2 = 0, -1, -1  # i for total_res_df indexing\n","\n","    while 1:   # for p1's loop\n","\n","        # Todo, \n","        #   1. (갱신) p1's open_i + 1 과 op_idx 를 꺼내오는 건, eik1 또는 tp 체결의 경우만 해당됨, \n","        #   2. out 의 경우 p2's op_idx 기준으로 retry 필요\n","        #     a. 또한, p2's op_idx > p1's op_idx\n","\n","        # ============ get p1_info ============ #\n","        # if eik1 or tp_done or first loop:\n","        open_i1 += 1  # 확인 끝났으면 조기 이탈(+1), 다음 open_idx 조사 진행\n","        if open_i1 >= len_open_idx1:\n","            break\n","\n","        if show_detail:\n","            print(\"open_i1 :\", open_i1, side_arr1[open_i1])\n","\n","        op_idx1 = open_idx1[open_i1]  # open_i1 는 i 와 별개로 운영\n","        if op_idx1 < i:  # i = 이전 거래 끝난후의 res_df index - \"거래 종료후 거래 시작\", '<' : 거래 종료시점 진입 가능하다는 의미\n","            continue\n","\n","        # ------ set loop index i ------ #\n","        i = op_idx1      # + 1 --> op_idx1 = op_idx2 가능함 # open_signal 이 close_bar.shift(1) 이라고 가정하고 다음 bar 부터 체결확인한다는 의미\n","        if i >= len_df:  # res_df 의 last_index 까지 돌아야함\n","            break        \n","\n","        # ------ dynamic arr info by ID ------ #\n","        #     1. 해당 id 로 config 재할당해야함\n","        #       a. use open_i1\n","        open_side = side_arr1[open_i1]\n","        id_idx = id_idx_arr1.astype(int)[open_i1]\n","        config = config_list[id_idx]\n","        selection_id = config.selection_id\n","        check_hlm = config.tr_set.check_hlm   \n","\n","        # check_net_hhm = 1 if (config.tr_set.wave_itv1 == config.tr_set.wave_itv2) and (config.tr_set.wave_period1 == config.tr_set.wave_period2) else 0\n","\n","        side_pos = 'short' if open_side == OrderSide.SELL else 'long'   \n","        if show_detail:\n","          print(\"============ op_idx1 : {} {} ============\".format(op_idx1, open_side))\n","     \n","        # if show_detail:\n","        #   print(\"check_hlm :\", check_hlm)\n","\n","        # ------ load tr_data ------ #\n","        tp_arr = res_df['{}_tp_{}'.format(side_pos, selection_id)].to_numpy()\n","        ep1_arr = res_df['{}_ep1_{}'.format(side_pos, selection_id)].to_numpy()\n","        ep2_arr = res_df['{}_ep2_{}'.format(side_pos, selection_id)].to_numpy()\n","        out_arr = res_df['{}_out_{}'.format(side_pos, selection_id)].to_numpy()\n","\n","        tr_arr = res_df['{}_tr_{}'.format(side_pos, selection_id)].to_numpy()  # just for p1_hhm\n","\n","        tp_1_ = res_df['{}_tp_1_{}'.format(side_pos, selection_id)].to_numpy()[op_idx1]  # for p2_box location & p1's exipiry\n","        tp_0_ = res_df['{}_tp_0_{}'.format(side_pos, selection_id)].to_numpy()[op_idx1]\n","        tp_gap_ = res_df['{}_tp_gap_{}'.format(side_pos, selection_id)].to_numpy()[op_idx1]    \n","\n","        # if not check_net_hhm:  # this phase exist for p1 entry (net hhm sync.) in p2_platform\n","        exec_j, ep_j, tp_j, out_j, entry_done, en_p, fee = check_entry_v6(res_df, config, config.ep_set.entry_type, op_idx1, tp_1_, tp_gap_, len_df, open_side,\n","                                                                                [*ohlc_list, ep1_arr], expiry_p2)        \n","        i = exec_j  # = entry_loop 를 돌고 나온 e_j\n","        if not entry_done:\n","            if show_detail:\n","              print(\"p1's expiry by expiry_p2 function in p1's loop : continue\")\n","            continue   \n","        # else:        \n","        #   tp_j = op_idx1\n","\n","        prev_open_i2 = open_i2\n","        net_p1_idx_list.append(op_idx1)\n","        # if check_hlm in [0, 1]:\n","        #   i = op_idx1  # allow op_idx2 = op_idx1\n","        allow_exit = 1\n","        # ============ entry loop ============ #\n","        while 1:  # for p2's loop (allow retry)\n","\n","          # ============ get p2_info ============ #\n","          if check_hlm in [1, 2]:\n","            open_i2 += 1  # 확인 끝났으면 조기 이탈(+1), 다음 open_idx 조사 진행\n","            if open_i2 >= len_open_idx2:  # open_i2 소진\n","                break\n","\n","            if show_detail:\n","              print(\"open_i2 :\", open_i2, side_arr2[open_i2])\n","\n","            # ------ check side sync. ------ #\n","            if open_side != side_arr2[open_i2]:\n","              continue\n","\n","            # ------ assert, op_idx2 >= exec_j ------ #\n","            op_idx2 = open_idx2[open_i2]  # open_i2 는 i 와 별개로 운영\n","            if check_hlm == 1 and allow_exit:\n","              if op_idx2 < op_idx1:\n","                continue\n","            else:\n","              if op_idx2 < i:   # p1 execution 이후의 i 를 허용 (old, 이곳 i = op_idx1 + 1 or p2's exec_j or exit_loop's i + 1)\n","                continue\n","            \n","            if check_hlm == 2:\n","              i = op_idx2 + 1  # open_signal 이 close_bar.shift(1) 이라고 가정하고 다음 bar 부터 체결확인한다는 의미\n","              if i >= len_df:  # res_df 의 last_index 까지 돌아야함\n","                  break\n","\n","            if show_detail:\n","              print(\"op_idx1, op_idx2 :\", op_idx1, op_idx2, side_arr2[open_i2])\n","              \n","          else:\n","            op_idx2 = op_idx1\n","\n","          tp_ = tp_arr[op_idx1]          \n","          ep2_ = ep2_arr[op_idx2]\n","          out_ = out_arr[op_idx2]\n","\n","          out_1_ = res_df['{}_out_1_{}'.format(side_pos, selection_id)].to_numpy()[op_idx2]\n","          out_0_ = res_df['{}_out_0_{}'.format(side_pos, selection_id)].to_numpy()[op_idx2]\n","          out_gap_ = res_df['{}_out_gap_{}'.format(side_pos, selection_id)].to_numpy()[op_idx2]  \n","\n","          # ------ const. for p2_wave ------ #\n","          wave_itv1 = config.tr_set.wave_itv1\n","          wave_period1 = config.tr_set.wave_period1\n","          wave_itv2 = config.tr_set.wave_itv2\n","          wave_period2 = config.tr_set.wave_period2\n","\n","          if check_hlm in [1, 2]:\n","            # ------ check p1's expiry - Todo, priority ------ # - p2_box 생성 이전의 hl_survey\n","            # 1. op_idx1 ~ op_idx2 까지의 hl_check \n","            # if check_hlm:  # p1_hlm, p2_hlm --> Todo, 이거를 왜 p1_hlm 에도 적용했는지 잘 모르겠음\n","            if op_idx1 < op_idx2:\n","              expire, touch_idx = expiry_p1(res_df, config, op_idx1, op_idx2, tp_1_, tp_0_, tp_gap_, ohlc_list[1:3], open_side)\n","              if expire:   # p1's expiry\n","                  if show_detail:\n","                    print(\"expiry_p1, touch_idx = {} : break\".format(touch_idx))\n","                  i = touch_idx  #  + 1  --> 이거 아닌것 같음 # op_idx1 과 op_idx2 사이의 op_idx1' 을 살리기 위함, 즉 바로 다음 op_idx1 로 회귀 (건너뛰지 않고)\n","                  open_i2 = prev_open_i2\n","                  break   # change op_idx1\n","\n","            if check_hlm == 2:\n","              # ------ p2 point_validation - vectorization unavailable ------ # p1_loop 로 return 되는 정확한 i 를 반환하기 위해서 expiry_p1 에 순서 양보  # Todo, 새로운 tp, ep, out 에 대한 처리 필요 (p1_hlm 사용시)\n","              if open_side == OrderSide.SELL:\n","                # --- p2_wave validation --- #\n","                # wave_co_post_idx = res_df['wave_co_post_idx_fill_{}{}'.format(wave_itv2, wave_period2)].to_numpy()[op_idx2]\n","                # if not (op_idx1 < wave_co_post_idx):\n","                #   if show_detail:\n","                #     print(\"p2_wave validation : continue\")\n","                #   continue  # change op_idx2\n","\n","                # --- p2_wave high validation --- #\n","                # wave_high_fill1_ = res_df['wave_high_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()[op_idx1]\n","                # wave_high_fill2_ = res_df['wave_high_fill_{}{}'.format(wave_itv2, wave_period2)].to_numpy()[op_idx2]\n","                # if not (wave_high_fill1_ >= wave_high_fill2_):\n","                #   if show_detail:\n","                #     print(\"p2_wave high validation : continue\")\n","                #   continue  # change op_idx2\n","                  \n","                if not (tp_ < ep2_):  # tr_set validation & reject hl_out open_exec.\n","                  break  # change op_idx1\n","                elif not (ep2_ < out_ and close[op_idx2] < out_):\n","                  if show_detail:\n","                    print(\"point validation : continue\")\n","                  continue  # change op_idx2\n","              else:\n","                # --- p2_wave validation --- #\n","                # wave_cu_post_idx = res_df['wave_cu_post_idx_fill_{}{}'.format(wave_itv2, wave_period2)].to_numpy()[op_idx2]\n","                # if not (op_idx1 < wave_cu_post_idx):\n","                #   if show_detail:\n","                #     print(\"p2_wave validation : continue\")\n","                #   continue  # change op_idx2\n","                \n","                # --- p2_wave low validation --- #\n","                # wave_low_fill1_ = res_df['wave_low_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()[op_idx1]\n","                # wave_low_fill2_ = res_df['wave_low_fill_{}{}'.format(wave_itv2, wave_period2)].to_numpy()[op_idx2]\n","                # if not (wave_low_fill1_ <= wave_low_fill2_):\n","                #   if show_detail:\n","                #     print(\"p2_wave low validation : continue\")\n","                #   continue  # change op_idx2\n","\n","                if not (tp_ > ep2_):              \n","                  break\n","                elif not (ep2_ > out_ and close[op_idx2] > out_):\n","                  if show_detail:\n","                    print(\"point validation : continue\")\n","                  continue\n","\n","              # ------ p2_box location ------ #\n","              if open_side == OrderSide.SELL:\n","                if not ((tp_1_ + tp_gap_ * config.tr_set.p2_box_k1 <= out_1_) and (out_0_ <= tp_0_ - tp_gap_ * config.tr_set.p2_box_k2)):  # tp1, tp0 에 닿으면 expiry\n","                # if not ((tp_1_ + tp_gap_ * config.tr_set.p2_box_k1 >= out_1_) and (out_0_ <= tp_0_ - tp_gap_ * config.tr_set.p2_box_k2)):  # tp1, tp0 에 닿으면 expiry\n","                  if show_detail:\n","                      print(\"p2_box rejection : continue\")\n","                  continue\n","                else:                \n","                  # ------ p1p2_low ------ #\n","                  if not high[op_idx1:op_idx2 + 1].max() < tp_0_ - tp_gap_ * config.tr_set.p1p2_low:\n","                    if show_detail:\n","                      print(\"p1p2_low rejection : continue\")\n","                    continue\n","              else:\n","                if not ((tp_1_ - tp_gap_ * config.tr_set.p2_box_k1 >= out_1_) and (out_0_ >= tp_0_ + tp_gap_ * config.tr_set.p2_box_k2)):\n","                # if not ((tp_1_ - tp_gap_ * config.tr_set.p2_box_k1 <= out_1_) and (out_0_ >= tp_0_ + tp_gap_ * config.tr_set.p2_box_k2)):\n","                  if show_detail:\n","                      print(\"p2_box rejection : continue\")\n","                  continue\n","                else:\n","                  # ------ p1p2_low ------ #\n","                  if not low[op_idx1:op_idx2 + 1].min() > tp_0_ + tp_gap_ * config.tr_set.p1p2_low:\n","                    if show_detail:\n","                      print(\"p1p2_low rejection : continue\")\n","                    continue\n","\n","              # ------ check p2's expiry ------ # - 현재, op_idx2 기준의 ep2_arr 을 사용 중임.\n","              # exec_j, ep_j, _, out_j, entry_done, en_p, fee = check_entry_v6(res_df, config, config.ep_set.point2.entry_type, op_idx2, tp_1_, tp_gap_, len_df, open_side,\n","              #                                                                         [*ohlc_list, ep2_arr], expiry_p2)   # Todo, tp_1 & tp_gap 사용이 맞을 것으로 봄                                                                                      \n","              exec_j, ep_j, _, out_j, entry_done, en_p, fee = check_entry_v6(res_df, config, config.ep_set.point2.entry_type, op_idx2, out_1_, out_gap_, len_df, open_side,\n","                                                                                      [*ohlc_list, ep2_arr], expiry_p2)   # Todo, tp_1 & tp_gap 사용이 맞을 것으로 봄\n","              i = exec_j  # = entry_loop 를 돌고 나온 e_j\n","              if not entry_done:   # p2's expiry\n","                  if show_detail:\n","                      print(\"expiry_p2, i = {} : continue\".format(i))\n","                  continue  # change op_idx2            \n","              \n","              # ------ devectorized tr_calc ------ # - en_p 에 대해 하는게 맞을 것으로봄\n","              if open_side == OrderSide.SELL:\n","                tr_ = abs((en_p / tp_ - config.trader_set.limit_fee - 1) / (en_p / out_ - config.trader_set.market_fee - 1))\n","              else:\n","                tr_ = abs((tp_ / en_p - config.trader_set.limit_fee - 1) / (out_ / en_p - config.trader_set.market_fee - 1))              \n","\n","              # ------ tr_threshold ------ #\n","              if config.loc_set.point2.short_tr_thresh != \"None\":\n","                if open_side == OrderSide.SELL:\n","                  if tr_ < config.loc_set.point2.short_tr_thresh:\n","                    if show_detail:\n","                      print(\"tr_threshold : continue\")\n","                    continue\n","                else:\n","                  if tr_ < config.loc_set.point2.long_tr_thresh:\n","                    if show_detail:\n","                      print(\"tr_threshold : continue\")\n","                    continue\n","                \n","          if not allow_exit:  # p1_hlm 의 경우, 한번 out 되면 price 가 wave_range 에 닿기전까지 retrade 를 허용하지 않는다. (expiry_p1 을 이용해 op_idx1 을 변경할 것)  \n","            if show_detail:\n","              print(\"allow_exit = {} : continue\".format(allow_exit))\n","            continue\n","\n","          if check_hlm in [0, 1]:\n","            tr_ = tr_arr[op_idx1]\n","\n","          # ------ leverage ------ #\n","          # out = out_arr[out_j]  # lvrg_set use out on out_j (out_j shoud be based on p2)\n","          leverage = lvrg_set(res_df, config, open_side, en_p, out_, fee)  # res_df 변수 사용됨 - 주석 처리 된 상태일뿐\n","          if leverage is None:\n","              if show_detail:\n","                    print(\"leverage is None : continue\")\n","              if check_hlm:\n","                continue  # change op_idx2\n","              else:\n","                break   # change op_idx1\n","\n","          exit_done, cross_on = 0, 0\n","          # ------ check tpout_onexec ------ #\n","          # if not config.ep_set.static_ep and config.ep_set.entry_type == \"LIMIT\" and config.ep_set.tpout_onexec:\n","          if config.ep_set.entry_type == \"LIMIT\":\n","              if config.tp_set.tp_onexec:  # dynamic 은 tp_onexec 사용하는 의미가 없음\n","                  tp_j = exec_j\n","              if config.out_set.out_onexec:  # dynamic 은 out_onexec 사용하는 의미가 없음\n","                  out_j = exec_j\n","\n","          # ============ exit loop ============ #\n","          while 1:\n","            if not config.tp_set.static_tp:  # 앞으로 왠만하면 static 만 사용할 예정\n","                tp_j = i\n","            if not config.out_set.static_out:\n","                out_j = i\n","\n","            # ------------ out ------------ #  # out 우선 (보수적 검증)\n","            # ------ signal_out ------ #\n","            if not exit_done:\n","                exit_done, cross_on, ex_p, fee = check_signal_out_v3(res_df, config, open_i2, i, len_df, fee, open_side, cross_on, exit_done, [*ohlc_list, np_timeidx])\n","            # ------ hl_out ------ #\n","            if config.out_set.hl_out:\n","                if not exit_done:  # and i != len_df - 1:\n","                    exit_done, ex_p, fee = check_hl_out_v2(config, i, out_j, len_df, fee, open_side, exit_done, [*ohlc_list, out_arr])\n","\n","            # ------------ tp ------------ #\n","            if not config.tp_set.non_tp and i != exec_j:\n","              if not exit_done:\n","                exit_done, ex_p, fee = check_limit_tp_exec(res_df, config, open_i2, i, tp_j, len_df, fee, open_side, exit_done,\n","                                                          [*ohlc_list, [tp_arr]])  # 여기서는 j -> i 로 변경해야함\n","                # if config.tp_set.tp_type in ['LIMIT']:  # 'BOTH' -> 앞으로는, LIMIT 밖에 없을거라 주석처리함\n","                # if not exit_done and config.tp_set.tp_type in ['MARKET', 'BOTH']:\n","\n","            if exit_done:  # 이 phase 는 exit_phase 뒤에도 있어야할 것 - entry_done var. 사용은 안하겠지만\n","                # ------ append dynamic vars. ------ #\n","                p1_idx_list.append(op_idx1)  # side, zone, start_ver arr 모두 openi_list 로 접근하기 위해 open_i 를 담음\n","                p2_idx_list.append(op_idx2)\n","                pair_idx_list.append([exec_j, i])  # entry & exit (체결 기준임)\n","                pair_price_list.append([en_p, ex_p])\n","                lvrg_list.append(leverage)\n","                fee_list.append(fee)\n","                tpout_list.append([tp_arr[tp_j], out_arr[out_j]])  # for tpout_line plot_check\n","                tr_list.append(tr_)   # Todo, tr vectorize 불가함, 직접 구해주어야할 건데.. (오래걸리지 않을까 --> tr_set 데이터만 모아서 vecto 계산이 나을 것)\n","\n","                # open_i += 1  # 다음 open_idx 조사 진행\n","                break\n","\n","            # 1. 아래있으면, 체결 기준부터 tp, out 허용 -> tp 가 entry_idx 에 체결되는게 다소 염려되기는 함, 일단 진행 (그런 case 가 많지 않았으므로)\n","            # 2. 위에있으면, entry 다음 tick 부터 exit 허용\n","            i += 1\n","            if i >= len_df:  # res_df 의 last_index 까지 돌아야함\n","                break\n","          \n","          if i >= len_df:  # res_df 의 last_index 까지 돌아야함\n","              break\n","\n","          if exit_done == 1:  # tp_done 은 check_hlm 여부와 무관하게 op_idx1 을 변경함\n","            if show_detail:\n","                    print(\"exit_done = {}, i = {} : break\".format(exit_done, i))\n","            break   # change op_idx1\n","          else:  # exit_done -> -1 or 0 (0 means end of df) \n","            if check_hlm in [1, 2]:\n","              if check_hlm == 1:   # exit only once in p1_hlm mode\n","                allow_exit = 0\n","              if show_detail:\n","                      print(\"exit_done = {}, i = {} : continue\".format(exit_done, i))\n","              continue  # change op_idx2\n","            else:\n","              if show_detail:\n","                      print(\"exit_done = {}, i = {} : break\".format(exit_done, i))\n","              break   # change op_idx1    \n","\n","        # if op_idx1 >= 16355:\n","        #   break\n","\n","        if i >= len_df:  # or open_i >= len_open_idx:  # res_df 의 last_index 까지 돌아야함\n","            break\n","        else:\n","            continue\n","\n","    return np.array(net_p1_idx_list), np.array(p1_idx_list), np.array(p2_idx_list), np.array(pair_idx_list), np.array(pair_price_list), np.array(lvrg_list), np.array(\n","        fee_list), np.array(tpout_list), np.array(tr_list)"],"metadata":{"id":"dJB5VtXMM8D8"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def en_ex_pairing_v9_5(res_df, open_idx_list, open_info_list, ohlc_list, config_list, np_timeidx, funcs, show_detail=False):  # 이미 충분히 줄여놓은 idx 임\n","\n","    open_info1, open_info2 = open_info_list\n","    side_arr1, _, _, id_idx_arr1 = open_info1\n","    side_arr2, _, _, _ = open_info2\n","\n","    expiry_p1, expiry_p2, lvrg_set = funcs\n","\n","    net_p1_idx_list, p1_idx_list, p2_idx_list, pair_idx_list, pair_price_list, lvrg_list, fee_list, tpout_list, tr_list = [[] for li in range(9)]\n","    len_df = len(res_df)\n","\n","    open, high, low, close = ohlc_list\n","    \n","    open_idx1, open_idx2 = open_idx_list\n","    len_open_idx1 = len(open_idx1)\n","    len_open_idx2 = len(open_idx2)\n","    i, open_i1, open_i2 = 0, -1, -1  # i for total_res_df indexing\n","\n","    while 1:   # for p1's loop\n","\n","        # Todo, \n","        #   1. (갱신) p1's open_i + 1 과 op_idx 를 꺼내오는 건, eik1 또는 tp 체결의 경우만 해당됨, \n","        #   2. out 의 경우 p2's op_idx 기준으로 retry 필요\n","        #     a. 또한, p2's op_idx > p1's op_idx\n","\n","        # ============ get p1_info ============ #\n","        # if eik1 or tp_done or first loop:\n","        open_i1 += 1  # 확인 끝났으면 조기 이탈(+1), 다음 open_idx 조사 진행\n","        if open_i1 >= len_open_idx1:\n","            break\n","\n","        if show_detail:\n","            print(\"open_i1 :\", open_i1, side_arr1[open_i1])\n","\n","        op_idx1 = open_idx1[open_i1]  # open_i1 는 i 와 별개로 운영\n","        if op_idx1 < i:  # i = 이전 거래 끝난후의 res_df index - \"거래 종료후 거래 시작\", '<' : 거래 종료시점 진입 가능하다는 의미\n","            continue\n","\n","        # ------ set loop index i ------ #\n","        i = op_idx1      # + 1 --> op_idx1 = op_idx2 가능함 # open_signal 이 close_bar.shift(1) 이라고 가정하고 다음 bar 부터 체결확인한다는 의미\n","        if i >= len_df:  # res_df 의 last_index 까지 돌아야함\n","            break        \n","\n","        # ------ dynamic arr info by ID ------ #\n","        #     1. 해당 id 로 config 재할당해야함\n","        #       a. use open_i1\n","        open_side = side_arr1[open_i1]\n","        id_idx = id_idx_arr1.astype(int)[open_i1]\n","        config = config_list[id_idx]\n","        selection_id = config.selection_id\n","        check_hlm = config.tr_set.check_hlm   \n","\n","        # check_net_hhm = 1 if (config.tr_set.wave_itv1 == config.tr_set.wave_itv2) and (config.tr_set.wave_period1 == config.tr_set.wave_period2) else 0\n","\n","        side_pos = 'short' if open_side == OrderSide.SELL else 'long'   \n","        if show_detail:\n","          print(\"============ op_idx1 : {} {} ============\".format(op_idx1, open_side))\n","     \n","        # if show_detail:\n","        #   print(\"check_hlm :\", check_hlm)\n","\n","        # ------ load tr_data ------ #\n","        tp_arr = res_df['{}_tp_{}'.format(side_pos, selection_id)].to_numpy()\n","        ep1_arr = res_df['{}_ep1_{}'.format(side_pos, selection_id)].to_numpy()\n","        ep2_arr = res_df['{}_ep2_{}'.format(side_pos, selection_id)].to_numpy()\n","        out_arr = res_df['{}_out_{}'.format(side_pos, selection_id)].to_numpy()\n","\n","        tr_arr = res_df['{}_tr_{}'.format(side_pos, selection_id)].to_numpy()  # just for p1_hhm\n","\n","        tp_1_ = res_df['{}_tp_1_{}'.format(side_pos, selection_id)].to_numpy()[op_idx1]  # for p2_box location & p1's exipiry\n","        tp_0_ = res_df['{}_tp_0_{}'.format(side_pos, selection_id)].to_numpy()[op_idx1]\n","        tp_gap_ = res_df['{}_tp_gap_{}'.format(side_pos, selection_id)].to_numpy()[op_idx1]    \n","\n","        # if not check_net_hhm:  # this phase exist for p1 entry (net hhm sync.) in p2_platform\n","        exec_j, ep_j, tp_j, out_j, entry_done, en_p, fee = check_entry_v6(res_df, config, config.ep_set.entry_type, op_idx1, tp_1_, tp_gap_, len_df, open_side,\n","                                                                                [*ohlc_list, ep1_arr], expiry_p2)        \n","        i = exec_j  # = entry_loop 를 돌고 나온 e_j\n","        if not entry_done:\n","            if show_detail:\n","              print(\"p1's expiry by expiry_p2 function in p1's loop : continue\")\n","            continue   \n","        # else:        \n","        #   tp_j = op_idx1\n","\n","        prev_open_i2 = open_i2\n","        net_p1_idx_list.append(op_idx1)\n","        # if check_hlm in [0, 1]:\n","        #   i = op_idx1  # allow op_idx2 = op_idx1\n","        allow_exit = 1\n","        # ============ entry loop ============ #\n","        while 1:  # for p2's loop (allow retry)\n","\n","          # ============ get p2_info ============ #\n","          if check_hlm in [1, 2]:\n","            open_i2 += 1  # 확인 끝났으면 조기 이탈(+1), 다음 open_idx 조사 진행\n","            if open_i2 >= len_open_idx2:  # open_i2 소진\n","                break\n","\n","            if show_detail:\n","              print(\"open_i2 :\", open_i2, side_arr2[open_i2])\n","\n","            # ------ check side sync. ------ #\n","            if open_side != side_arr2[open_i2]:\n","              continue\n","\n","            # ------ assert, op_idx2 >= exec_j ------ #\n","            op_idx2 = open_idx2[open_i2]  # open_i2 는 i 와 별개로 운영\n","            if check_hlm == 1 and allow_exit:\n","              if op_idx2 < op_idx1:\n","                continue\n","            else:\n","              if op_idx2 < i:   # p1 execution 이후의 i 를 허용 (old, 이곳 i = op_idx1 + 1 or p2's exec_j or exit_loop's i + 1)\n","                continue\n","            \n","            if check_hlm == 2:\n","              i = op_idx2 + 1  # open_signal 이 close_bar.shift(1) 이라고 가정하고 다음 bar 부터 체결확인한다는 의미\n","              if i >= len_df:  # res_df 의 last_index 까지 돌아야함\n","                  break\n","\n","            if show_detail:\n","              print(\"op_idx1, op_idx2 :\", op_idx1, op_idx2, side_arr2[open_i2])\n","              \n","          else:\n","            op_idx2 = op_idx1\n","          \n","          tp_1_ = res_df['{}_tp_1_{}'.format(side_pos, selection_id)].to_numpy()[op_idx2]  # p2's tp_box 를 위한 재정의\n","          tp_0_ = res_df['{}_tp_0_{}'.format(side_pos, selection_id)].to_numpy()[op_idx2]\n","          tp_gap_ = res_df['{}_tp_gap_{}'.format(side_pos, selection_id)].to_numpy()[op_idx2]   \n","\n","          tp_ = tp_arr[op_idx2]          \n","          ep2_ = ep2_arr[op_idx2]\n","          out_ = out_arr[op_idx2]\n","\n","          out_1_ = res_df['{}_out_1_{}'.format(side_pos, selection_id)].to_numpy()[op_idx2]\n","          out_0_ = res_df['{}_out_0_{}'.format(side_pos, selection_id)].to_numpy()[op_idx2]\n","          out_gap_ = res_df['{}_out_gap_{}'.format(side_pos, selection_id)].to_numpy()[op_idx2]  \n","\n","          # ------ const. for p2_wave ------ #\n","          wave_itv1 = config.tr_set.wave_itv1\n","          wave_period1 = config.tr_set.wave_period1\n","          wave_itv2 = config.tr_set.wave_itv2\n","          wave_period2 = config.tr_set.wave_period2\n","\n","          if check_hlm in [1, 2]:\n","            # ------ check p1's expiry - Todo, priority ------ # - p2_box 생성 이전의 hl_survey\n","            # 1. op_idx1 ~ op_idx2 까지의 hl_check \n","            # if check_hlm:  # p1_hlm, p2_hlm --> Todo, 이거를 왜 p1_hlm 에도 적용했는지 잘 모르겠음\n","            # if op_idx1 < op_idx2:\n","            #   expire, touch_idx = expiry_p1(res_df, config, op_idx1, op_idx2, tp_1_, tp_0_, tp_gap_, ohlc_list[1:3], open_side)\n","            #   if expire:   # p1's expiry\n","            #       if show_detail:\n","            #         print(\"expiry_p1, touch_idx = {} : break\".format(touch_idx))\n","            #       i = touch_idx  #  + 1  --> 이거 아닌것 같음 # op_idx1 과 op_idx2 사이의 op_idx1' 을 살리기 위함, 즉 바로 다음 op_idx1 로 회귀 (건너뛰지 않고)\n","            #       open_i2 = prev_open_i2\n","            #       break   # change op_idx1\n","\n","            if check_hlm == 2:\n","              # ------ p2 point_validation - vectorization unavailable ------ # p1_loop 로 return 되는 정확한 i 를 반환하기 위해서 expiry_p1 에 순서 양보  # Todo, 새로운 tp, ep, out 에 대한 처리 필요 (p1_hlm 사용시)\n","              if open_side == OrderSide.SELL:\n","                # --- p2_wave validation --- #\n","                wave_co_post_idx = res_df['wave_co_post_idx_fill_{}{}'.format(wave_itv2, wave_period2)].to_numpy()[op_idx2]\n","                if not (op_idx1 < wave_co_post_idx):\n","                  if show_detail:\n","                    print(\"p2_wave validation : continue\")\n","                  continue  # change op_idx2\n","\n","                # --- p2_wave high validation --- #\n","                # wave_high_fill1_ = res_df['wave_high_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()[op_idx1]\n","                # wave_high_fill2_ = res_df['wave_high_fill_{}{}'.format(wave_itv2, wave_period2)].to_numpy()[op_idx2]\n","                # if not (wave_high_fill1_ >= wave_high_fill2_):\n","                #   if show_detail:\n","                #     print(\"p2_wave high validation : continue\")\n","                #   continue  # change op_idx2\n","                  \n","                if not (tp_ < ep2_):  # tr_set validation & reject hl_out open_exec.\n","                  break  # change op_idx1\n","                elif not (ep2_ < out_ and close[op_idx2] < out_):\n","                  if show_detail:\n","                    print(\"point validation : continue\")\n","                  continue  # change op_idx2\n","              else:\n","                # --- p2_wave validation --- #\n","                wave_cu_post_idx = res_df['wave_cu_post_idx_fill_{}{}'.format(wave_itv2, wave_period2)].to_numpy()[op_idx2]\n","                if not (op_idx1 < wave_cu_post_idx):\n","                  if show_detail:\n","                    print(\"p2_wave validation : continue\")\n","                  continue  # change op_idx2\n","                \n","                # --- p2_wave low validation --- #\n","                # wave_low_fill1_ = res_df['wave_low_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()[op_idx1]\n","                # wave_low_fill2_ = res_df['wave_low_fill_{}{}'.format(wave_itv2, wave_period2)].to_numpy()[op_idx2]\n","                # if not (wave_low_fill1_ <= wave_low_fill2_):\n","                #   if show_detail:\n","                #     print(\"p2_wave low validation : continue\")\n","                #   continue  # change op_idx2\n","\n","                if not (tp_ > ep2_):              \n","                  break\n","                elif not (ep2_ > out_ and close[op_idx2] > out_):\n","                  if show_detail:\n","                    print(\"point validation : continue\")\n","                  continue\n","\n","              # ------ p2_box location ------ #\n","              # if open_side == OrderSide.SELL:\n","              #   if not ((tp_1_ + tp_gap_ * config.tr_set.p2_box_k1 <= out_1_) and (out_0_ <= tp_0_ - tp_gap_ * config.tr_set.p2_box_k2)):  # tp1, tp0 에 닿으면 expiry\n","              #   # if not ((tp_1_ + tp_gap_ * config.tr_set.p2_box_k1 >= out_1_) and (out_0_ <= tp_0_ - tp_gap_ * config.tr_set.p2_box_k2)):  # tp1, tp0 에 닿으면 expiry\n","              #     if show_detail:\n","              #         print(\"p2_box rejection : continue\")\n","              #     continue\n","              #   else:                \n","              #     # ------ p1p2_low ------ #\n","              #     if not high[op_idx1:op_idx2 + 1].max() < tp_0_ - tp_gap_ * config.tr_set.p1p2_low:\n","              #       if show_detail:\n","              #         print(\"p1p2_low rejection : continue\")\n","              #       continue\n","              # else:\n","              #   if not ((tp_1_ - tp_gap_ * config.tr_set.p2_box_k1 >= out_1_) and (out_0_ >= tp_0_ + tp_gap_ * config.tr_set.p2_box_k2)):\n","              #   # if not ((tp_1_ - tp_gap_ * config.tr_set.p2_box_k1 <= out_1_) and (out_0_ >= tp_0_ + tp_gap_ * config.tr_set.p2_box_k2)):\n","              #     if show_detail:\n","              #         print(\"p2_box rejection : continue\")\n","              #     continue\n","              #   else:\n","              #     # ------ p1p2_low ------ #\n","              #     if not low[op_idx1:op_idx2 + 1].min() > tp_0_ + tp_gap_ * config.tr_set.p1p2_low:\n","              #       if show_detail:\n","              #         print(\"p1p2_low rejection : continue\")\n","              #       continue\n","\n","              # ------ check p2's expiry ------ # - 현재, op_idx2 기준의 ep2_arr 을 사용 중임.\n","              # exec_j, ep_j, _, out_j, entry_done, en_p, fee = check_entry_v6(res_df, config, config.ep_set.point2.entry_type, op_idx2, tp_1_, tp_gap_, len_df, open_side,\n","              #                                                                         [*ohlc_list, ep2_arr], expiry_p2)   # Todo, tp_1 & tp_gap 사용이 맞을 것으로 봄                                                                                      \n","              exec_j, ep_j, _, out_j, entry_done, en_p, fee = check_entry_v6(res_df, config, config.ep_set.point2.entry_type, op_idx2, out_1_, out_gap_, len_df, open_side,\n","                                                                                      [*ohlc_list, ep2_arr], expiry_p2)   # Todo, tp_1 & tp_gap 사용이 맞을 것으로 봄\n","              i = exec_j  # = entry_loop 를 돌고 나온 e_j\n","              if not entry_done:   # p2's expiry\n","                  if show_detail:\n","                      print(\"expiry_p2, i = {} : continue\".format(i))\n","                  continue  # change op_idx2            \n","              \n","              # ------ devectorized tr_calc ------ # - en_p 에 대해 하는게 맞을 것으로봄\n","              if open_side == OrderSide.SELL:\n","                tr_ = abs((en_p / tp_ - config.trader_set.limit_fee - 1) / (en_p / out_ - config.trader_set.market_fee - 1))\n","              else:\n","                tr_ = abs((tp_ / en_p - config.trader_set.limit_fee - 1) / (out_ / en_p - config.trader_set.market_fee - 1))              \n","\n","              # ------ tr_threshold ------ #\n","              if config.loc_set.point2.short_tr_thresh != \"None\":\n","                if open_side == OrderSide.SELL:\n","                  if tr_ < config.loc_set.point2.short_tr_thresh:\n","                    if show_detail:\n","                      print(\"tr_threshold : continue\")\n","                    continue\n","                else:\n","                  if tr_ < config.loc_set.point2.long_tr_thresh:\n","                    if show_detail:\n","                      print(\"tr_threshold : continue\")\n","                    continue\n","                \n","          if not allow_exit:  # p1_hlm 의 경우, 한번 out 되면 price 가 wave_range 에 닿기전까지 retrade 를 허용하지 않는다. (expiry_p1 을 이용해 op_idx1 을 변경할 것)  \n","            if show_detail:\n","              print(\"allow_exit = {} : continue\".format(allow_exit))\n","            continue\n","\n","          if check_hlm in [0, 1]:\n","            tr_ = tr_arr[op_idx1]\n","\n","          # ------ leverage ------ #\n","          # out = out_arr[out_j]  # lvrg_set use out on out_j (out_j shoud be based on p2)\n","          leverage = lvrg_set(res_df, config, open_side, en_p, out_, fee)  # res_df 변수 사용됨 - 주석 처리 된 상태일뿐\n","          if leverage is None:\n","              if show_detail:\n","                    print(\"leverage is None : continue\")\n","              if check_hlm:\n","                continue  # change op_idx2\n","              else:\n","                break   # change op_idx1\n","\n","          exit_done, cross_on = 0, 0\n","          # ------ check tpout_onexec ------ #\n","          # if not config.ep_set.static_ep and config.ep_set.entry_type == \"LIMIT\" and config.ep_set.tpout_onexec:\n","          if config.ep_set.entry_type == \"LIMIT\":\n","              if config.tp_set.tp_onexec:  # dynamic 은 tp_onexec 사용하는 의미가 없음\n","                  tp_j = exec_j\n","              if config.out_set.out_onexec:  # dynamic 은 out_onexec 사용하는 의미가 없음\n","                  out_j = exec_j\n","\n","          # ============ exit loop ============ #\n","          while 1:\n","            if not config.tp_set.static_tp:  # 앞으로 왠만하면 static 만 사용할 예정\n","                tp_j = i\n","            if not config.out_set.static_out:\n","                out_j = i\n","\n","            # ------------ out ------------ #  # out 우선 (보수적 검증)\n","            # ------ signal_out ------ #\n","            if not exit_done:\n","                exit_done, cross_on, ex_p, fee = check_signal_out_v3(res_df, config, open_i2, i, len_df, fee, open_side, cross_on, exit_done, [*ohlc_list, np_timeidx])\n","            # ------ hl_out ------ #\n","            if config.out_set.hl_out:\n","                if not exit_done:  # and i != len_df - 1:\n","                    exit_done, ex_p, fee = check_hl_out_v2(config, i, out_j, len_df, fee, open_side, exit_done, [*ohlc_list, out_arr])\n","\n","            # ------------ tp ------------ #\n","            if not config.tp_set.non_tp and i != exec_j:\n","              if not exit_done:\n","                exit_done, ex_p, fee = check_limit_tp_exec(res_df, config, open_i2, i, tp_j, len_df, fee, open_side, exit_done,\n","                                                          [*ohlc_list, [tp_arr]])  # 여기서는 j -> i 로 변경해야함\n","                # if config.tp_set.tp_type in ['LIMIT']:  # 'BOTH' -> 앞으로는, LIMIT 밖에 없을거라 주석처리함\n","                # if not exit_done and config.tp_set.tp_type in ['MARKET', 'BOTH']:\n","\n","            if exit_done:  # 이 phase 는 exit_phase 뒤에도 있어야할 것 - entry_done var. 사용은 안하겠지만\n","                # ------ append dynamic vars. ------ #\n","                p1_idx_list.append(op_idx1)  # side, zone, start_ver arr 모두 openi_list 로 접근하기 위해 open_i 를 담음\n","                p2_idx_list.append(op_idx2)\n","                pair_idx_list.append([exec_j, i])  # entry & exit (체결 기준임)\n","                pair_price_list.append([en_p, ex_p])\n","                lvrg_list.append(leverage)\n","                fee_list.append(fee)\n","                tpout_list.append([tp_arr[tp_j], out_arr[out_j]])  # for tpout_line plot_check\n","                tr_list.append(tr_)   # Todo, tr vectorize 불가함, 직접 구해주어야할 건데.. (오래걸리지 않을까 --> tr_set 데이터만 모아서 vecto 계산이 나을 것)\n","\n","                # open_i += 1  # 다음 open_idx 조사 진행\n","                break\n","\n","            # 1. 아래있으면, 체결 기준부터 tp, out 허용 -> tp 가 entry_idx 에 체결되는게 다소 염려되기는 함, 일단 진행 (그런 case 가 많지 않았으므로)\n","            # 2. 위에있으면, entry 다음 tick 부터 exit 허용\n","            i += 1\n","            if i >= len_df:  # res_df 의 last_index 까지 돌아야함\n","                break\n","          \n","          if i >= len_df:  # res_df 의 last_index 까지 돌아야함\n","              break\n","\n","          if exit_done == 1:  # tp_done 은 check_hlm 여부와 무관하게 op_idx1 을 변경함\n","            if show_detail:\n","                    print(\"exit_done = {}, i = {} : break\".format(exit_done, i))\n","            break   # change op_idx1\n","          else:  # exit_done -> -1 or 0 (0 means end of df) \n","            if check_hlm in [1, 2]:\n","              if check_hlm == 1:   # exit only once in p1_hlm mode\n","                allow_exit = 0\n","              if show_detail:\n","                      print(\"exit_done = {}, i = {} : continue\".format(exit_done, i))\n","              continue  # change op_idx2\n","            else:\n","              if show_detail:\n","                      print(\"exit_done = {}, i = {} : break\".format(exit_done, i))\n","              break   # change op_idx1    \n","\n","        # if op_idx1 >= 16355:\n","        #   break\n","\n","        if i >= len_df:  # or open_i >= len_open_idx:  # res_df 의 last_index 까지 돌아야함\n","            break\n","        else:\n","            continue\n","\n","    return np.array(net_p1_idx_list), np.array(p1_idx_list), np.array(p2_idx_list), np.array(pair_idx_list), np.array(pair_price_list), np.array(lvrg_list), np.array(\n","        fee_list), np.array(tpout_list), np.array(tr_list)"],"metadata":{"id":"PxD07KwPMy4G"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"qfbtFVMR01UJ"},"outputs":[],"source":["def check_entry_v6(res_df, config, entry_type, op_idx, wave1, wave_gap, len_df, open_side, np_datas, expiry):\n","    open, high, low, close, ep_arr = np_datas\n","    ep_j = op_idx\n","    tp_j = op_idx\n","    out_j = op_idx\n","\n","    # print(\"ep_arr[op_idx] :\", ep_arr[op_idx])\n","\n","    selection_id = config.selection_id    \n","    # allow_ep_in = 0 if config.ep_set.point2.use_point2 else 1\n","    entry_done = 0\n","    ep = None\n","\n","    if entry_type == \"LIMIT\":\n","        fee = config.trader_set.limit_fee\n","\n","        for e_j in range(op_idx + 1, len_df):\n","            # ------ index setting for dynamic options ------ #\n","            if not config.ep_set.static_ep:\n","                ep_j = e_j  # dynamic_ep 를 위한 ep_index var.\n","                out_j = e_j  # dynamic_out 를 위한 out_index var. - 조건식이 static_ep 와 같이 있는 이유 모름 => dynamic_lvrg 로 사료됨\n","\n","            if not config.tp_set.static_tp:\n","                tp_j = e_j\n","\n","            # ------ expire_k & expire_tick ------ # - limit 사용하면 default 로 expire_k 가 존재해야함\n","            if expiry(res_df, config, op_idx, e_j, wave1, wave_gap, [high, low], open_side):  # tp_j, \n","              break\n","\n","            # ------ point2 ------ #\n","            # if not allow_ep_in:\n","            #     allow_ep_in, out_j = ep_loc_point2(res_df, config, e_j, out_j, side=OrderSide.SELL)\n","            #     if allow_ep_in:\n","            #       if config.ep_set.point2.entry_type == \"LIMIT\":\n","            #         ep_j = e_j\n","            #         # print(\"e_j in point2 :\", e_j)\n","            #         continue\n","\n","            # ------ check ep_exec ------ #\n","            # if allow_ep_in:\n","              # if config.ep_set.point2.use_point2 and config.ep_set.point2.entry_type == 'MARKET':\n","              #   entry_done = 1\n","              #   ep = c[e_j]\n","              #   break\n","              # else:\n","\n","            if open_side == OrderSide.SELL:\n","              if high[e_j] >= ep_arr[ep_j]:\n","                  entry_done = 1\n","                  ep = ep_arr[ep_j]\n","                  if open[e_j] >= ep_arr[ep_j]:  # open comp 는 결국, 수익률에 얹어주는 logic (반보수) -> 사용 보류\n","                      ep = open[e_j]\n","                  break\n","            else:\n","              if low[e_j] <= ep_arr[ep_j]:\n","                  entry_done = 1\n","                  ep = ep_arr[ep_j]\n","                  if open[e_j] <= ep_arr[ep_j]:\n","                      ep = open[e_j]\n","                  break\n","\n","    else:  # market entry\n","        e_j = op_idx + 1\n","        entry_done = 1\n","        ep = close[op_idx]\n","        fee = config.trader_set.market_fee\n","\n","    return e_j, ep_j, tp_j, out_j, entry_done, ep, fee  # 다음 start_i <-- e_j 로 변경\n","    #   e_j => 다음 phase 의 시작 index <-> ep_j : ep 의 기준 index\n","    #   ep_j, tp_j, out_j 가 return 되어야함 - exit phase 에서 이어가기 위함\n","\n","\n","def check_limit_tp_exec(res_df, config, open_i, i, tp_j, len_df, fee, open_side, exit_done, np_datas):\n","\n","    open, high, low, close, tps = np_datas\n","    tp = None\n","    selection_id = config.selection_id\n","    len_tps = len(tps)\n","\n","    for tp_i, tp_arr in enumerate(tps):\n","\n","        #     decay adjustment    #\n","        #     tp_j includes dynamic_j - functionalize  #\n","        # try:\n","        #     if config.tr_set.decay_gap != \"None\":\n","        #         decay_share = (j - open_i) // config.tp_set.decay_term\n","        #         decay_remain = (j - open_i) % config.tp_set.decay_term\n","        #         if j != open_i and decay_remain == 0:\n","        #             if open_side == OrderSide.SELL:\n","        #                 tp_arr[tp_j] += res_df['short_tp_gap_{}'.format(selection_id)].iloc[open_i] * config.tr_set.decay_gap * decay_share\n","        #             else:\n","        #                 tp_arr[tp_j] -= res_df['long_tp_gap_{}'.format(selection_id)].iloc[open_i] * config.tr_set.decay_gap * decay_share\n","        # except:\n","        #     pass\n","\n","        if open_side == OrderSide.SELL:\n","            if low[i] <= tp_arr[tp_j]:  # and partial_tp_cnt == tp_i:  # we use static tp now\n","                # if low[i] <= tp_arr[i] <= h[i]: --> 이건 잘못되었음\n","                # partial_tp_cnt += 1 --> partial_tp 보류\n","\n","                # ------ dynamic tp ------ #\n","                if tp_arr[i] != tp_arr[i - 1] and not config.tp_set.static_tp:\n","                    # tp limit 이 불가한 경우 - open 이 이미, tp 를 넘은 경우\n","                    if open[i] < tp_arr[i]:\n","                        tp = open[i]\n","                    # tp limit 이 가능한 경우 - open 이 아직, tp 를 넘지 않은 경우\n","                    else:\n","                        tp = tp_arr[i]\n","\n","                # ------ static tp ------ #\n","                else:\n","                    #   tp limit 이 불가한 경우 - open 이 이미, tp 를 넘은 경우\n","                    if open[i] < tp_arr[tp_j]:  # static 해놓고 decay 사용하면 dynamic 이니까\n","                        if config.tr_set.decay_gap != \"None\" and decay_remain == 0:\n","                            tp = open[i]  # tp_j -> open_i 를 가리키기 때문에 decay 는 한번만 진행되는게 맞음\n","                        else:\n","                            tp = tp_arr[tp_j]\n","                    else:\n","                        tp = tp_arr[tp_j]\n","\n","                if tp_i == len_tps - 1:\n","                    exit_done = 1  # partial 을 고려해 exit_done = 1 상태는 tp_i 가 last_index 로 체결된 경우만 해당\n","\n","        else:\n","            if high[i] >= tp_arr[tp_j]:\n","                # ------ dynamic tp ------ #\n","                if tp_arr[i] != tp_arr[i - 1] and not config.tp_set.static_tp:\n","                    if open[i] > tp_arr[i]:\n","                        tp = open[i]\n","                    else:\n","                        tp = tp_arr[i]\n","\n","                # ------ static tp ------ #\n","                else:\n","                    if open[i] > tp_arr[tp_j]:\n","                        if config.tr_set.decay_gap != \"None\" and decay_remain == 0:\n","                            tp = open[i]\n","                        else:\n","                            tp = tp_arr[tp_j]\n","                    else:\n","                        tp = tp_arr[tp_j]\n","\n","                if tp_i == len_tps - 1:\n","                    exit_done = 1  # partial 을 고려해 exit_done = 1 상태는 tp_i 가 last_index 로 체결된 경우만 해당\n","\n","    if exit_done:\n","        fee += config.trader_set.limit_fee\n","\n","    return exit_done, tp, fee\n","\n","\n","def check_signal_out_v3(res_df, config, open_i, i, len_df, fee, open_side, cross_on, exit_done, np_datas):    \n","\n","    _, _, _, close, np_timeidx = np_datas\n","    ex_p = None\n","    selection_id = config.selection_id\n","\n","    # ------ timestamp ------ #\n","    if config.out_set.tf_exit != \"None\":\n","        if np_timeidx[i] % config.out_set.tf_exit == config.out_set.tf_exit - 1 and i != open_i:\n","            exit_done = -1\n","\n","    # ------ rsi ------ # -> vectorize 가능함 => 추후 적용\n","    if config.out_set.rsi_exit:\n","        rsi_T = res_df['rsi_T'].to_numpy()\n","\n","        if open_side == OrderSide.SELL:\n","            if (rsi_T[i - 1] >= 50 - config.loc_set.point.osc_band) & (rsi_T[i] < 50 - config.loc_set.point.osc_band):\n","                exit_done = -1\n","        else:\n","            if (rsi_T[i - 1] <= 50 + config.loc_set.point.osc_band) & (rsi_T[i] > 50 + config.loc_set.point.osc_band):\n","                exit_done = -1\n","\n","    # ------ heikin_ashi ------ #\n","    # if selection_id in ['v3_3']:\n","    #     if open_side == OrderSide.SELL:\n","    #       if (ha_o[i] < ha_c[i]):# & (ha_o[i] == ha_l[i]):   # 양봉 출현\n","    #           exit_done = -1\n","    #     else:\n","    #       if (ha_o[i] > ha_c[i]):# & (ha_o[i] == ha_h[i]):  # 음봉 출현\n","    #           exit_done = -1\n","\n","    # ------------ early out ------------ #\n","    # ------ bb ------ # --> cross_on 기능은 ide latency 개선 여부에 해당되지 않음\n","    if selection_id in ['v5_2']:\n","        bb_upper_5T = res_df['bb_upper_5T'].to_numpy()\n","        bb_lower_5T = res_df['bb_lower_5T'].to_numpy()\n","\n","        if open_side == OrderSide.SELL:\n","            if close[i] < bb_lower_5T[i] < close[i - 1]:\n","                cross_on = 1\n","            if cross_on == 1 and close[i] > bb_upper_5T[i] > close[i - 1]:\n","                exit_done = -1\n","        else:\n","            if close[i] > bb_upper_5T[i] > close[i - 1]:\n","                cross_on = 1\n","            if cross_on == 1 and close[i] < bb_lower_5T[i] < close[i - 1]:\n","                exit_done = -1\n","\n","    if exit_done:\n","        ex_p = close[i]\n","        fee += config.trader_set.market_fee\n","\n","    return exit_done, cross_on, ex_p, fee\n","\n","\n","def check_hl_out_v2(config, i, out_j, len_df, fee, open_side, exit_done, np_datas):\n","\n","    open, high, low, close, out_arr = np_datas\n","    ex_p = None\n","\n","    if config.out_set.hl_out:\n","        if open_side == OrderSide.SELL:\n","            if high[i] >= out_arr[out_j]:  # check out only once\n","                exit_done = -1\n","        else:\n","            if low[i] <= out_arr[out_j]:  # check out only once\n","                exit_done = -1\n","    else:  # close_out\n","        if open_side == OrderSide.SELL:\n","            if close[i] >= out_arr[out_j]:  # check out only once\n","                exit_done = -1\n","        else:\n","            if close[i] <= out_arr[out_j]:  # check out only once\n","                ex_p = close[i]\n","                exit_done = -1\n","\n","    if exit_done:\n","        if config.out_set.hl_out:\n","            ex_p = out_arr[out_j]\n","        else:\n","            ex_p = close[i]\n","\n","        if open_side == OrderSide.SELL:\n","            if open[i] >= out_arr[out_j]:\n","                ex_p = open[i]\n","        else:\n","            if open[i] <= out_arr[out_j]:\n","                ex_p = open[i]\n","\n","        fee += config.trader_set.market_fee\n","\n","    return exit_done, ex_p, fee"]},{"cell_type":"markdown","metadata":{"id":"zQ-roiifspcX"},"source":["#### ep_loc.point & zone legacy"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Js5eL87VspcX"},"outputs":[],"source":["\n","    # res_df['entry_{}'.format(selection_id)] = np.where((res_df['open'] >= res_df['cloud_bline_%s' % cb_itv]) &\n","    #                 # (res_df['close'].shift(config.loc_set.point.tf_entry * 1) <= res_df['cloud_bline_%s' % cb_itv]) &\n","    #                 (res_df['close'] < res_df['cloud_bline_%s' % cb_itv])\n","    #                 , res_df['entry_{}'.format(selection_id)] - 1, res_df['entry_{}'.format(selection_id)])\n","\n","    # res_df['entry_{}'.format(selection_id)] = np.where((res_df['open'] >= res_df['bb_lower_1m']) &\n","    #                 # (res_df['close'].shift(config.loc_set.point.tf_entry * 1) <= res_df['bb_lower_1m']) &\n","    #                 (res_df['close'] < res_df['bb_lower_1m'])\n","    #                 , res_df['entry_{}'.format(selection_id)] - 1, res_df['entry_{}'.format(selection_id)])\n","\n","    # res_df['entry_{}'.format(selection_id)] = np.where((res_df['open'] <= res_df['cloud_bline_%s' % cb_itv]) &\n","    #                   # (res_df['close'].shift(config.loc_set.point.tf_entry * 1) >= res_df['cloud_bline_%s' % cb_itv]) &\n","    #                   (res_df['close'] > res_df['cloud_bline_%s' % cb_itv])\n","    #                 , res_df['entry_{}'.format(selection_id)] + 1, res_df['entry_{}'.format(selection_id)])\n","\n","    # res_df['entry_{}'.format(selection_id)] = np.where((res_df['open'] <= res_df['bb_upper_1m']) &\n","    #                   # (res_df['close'].shift(config.loc_set.point.tf_entry * 1) >= res_df['bb_upper_1m']) &\n","    #                   (res_df['close'] > res_df['bb_upper_1m'])\n","    #                 , res_df['entry_{}'.format(selection_id)] + 1, res_df['entry_{}'.format(selection_id)])\n","\n","\n","    \n","   # --------------- ema --------------- #   \n","  # res_df['ema5_1m'] = ema(res_df['close'], 5).shift(1)\n","\n","  #   # --------------- cloud bline --------------- #   \n","  # res_df['cloud_bline_1m'] = cloud_bline(res_df, 26).shift(1)\n","  \n","    #       stochastic      #\n","  # res_df['stoch'] = stoch(res_df, 5, 3, 3)\n","\n","    #       fisher      #\n","  # res_df['fisher30'] = fisher(res_df, 30)\n","  # res_df['fisher60'] = fisher(res_df, 60)\n","  # res_df['fisher120'] = fisher(res_df, 120)\n","\n","    #       cctbbo      #\n","  # res_df['cctbbo'], _ = cct_bbo(res_df, 21, 13)\n","\n","    #       ema_roc      #\n","  # res_df['ema_roc'] = ema_roc(res_df['close'], 13, 9)\n","\n","\n","   # ------------------------------ htf data ------------------------------ #    \n","\n","  #             Todo              #\n","  # htf_df = pd.read_excel(date_path2 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","  # htf_df = pd.read_excel(date_path3 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","  # # htf_df = pd.read_excel(date_path4 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","  # # # htf_df = pd.read_excel(date_path5 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","  # # # # # # htf_df = pd.read_excel(date_path6 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","\n","  # # ---- htf index slicing ---- #\n","  # htf_df = htf_df.loc[:res_df.index[-1]]\n","  \n","  # print(\"res_df.index[-1] :\", res_df.index[-1])\n","  # print(\"htf_df.index[-1] :\", htf_df.index[-1])\n","\n","  # res_df = dc_line(res_df, htf_df, '5m')\n","  # res_df = dc_level(res_df, '5m', 1)\n","\n","\n","  # # # if \"sma4\" in res_df.columns:\n","  # # #   res_df.drop(\"sma4\", axis=1, inplace=1)\n","\n","  # # htf_df['sma'] = htf_df['close'].rolling(60).mean()\n","  # # res_df = res_df.join(pd.DataFrame(index=res_df.index, data=to_lower_tf_v2(res_df, htf_df, [-1]), columns=['sma_30m']))\n","  \n","  # htf_df['stoch'] = stoch(htf_df, 13, 3, 3)\n","  # res_df = res_df.join(pd.DataFrame(index=res_df.index, data=to_lower_tf_v2(res_df, htf_df, [-1], backing_i=-1), columns=['stoch_5m']))\n","\n","   \n","  # fifth_df['ema'] = ema(fifth_df['close'], 5)\n","  # res_df = res_df.join(pd.DataFrame(index=res_df.index, data=to_lower_tf_v2(res_df, fifth_df, [-1]), columns=['ema5']))\n","\n","        # ------------------------------------ short ------------------------------------ # \n","\n","        # --------- by sar --------- # \n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_3m'].iloc[i] == 0:\n","        #   mr_score += 1\n","\n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_5m'].iloc[i] == 0:\n","        #   mr_score += 1          \n","\n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_15m'].iloc[i] == 0:\n","        #   mr_score += 1\n","\n","          #      dc & sar      # \n","        # mr_const_cnt += 1\n","        # # if res_df['dc_upper_1m'].iloc[i] <= res_df['sar_15m'].iloc[i]:\n","        # if res_df['dc_upper_3m'].iloc[i] <= res_df['sar_5m'].iloc[i]:\n","        # # if res_df['dc_upper_5m'].iloc[i] <= res_df['sar_15m'].iloc[i]:\n","        #   mr_score += 1\n","\n","        # -------------- dr scheduling -------------- #\n","        # if config.ep_set.entry_type == 'MARKET':\n","        #   mr_const_cnt += 1\n","        #   if (res_df['close'].iloc[i] - res_df['short_tp'].iloc[i]) / (res_df['short_out'].iloc[i] - res_df['close'].iloc[i]) <= config.ep_set.tr_thresh * (1 + config.ep_set.dr_error):  \n","        #     mr_score += 1\n","\n","           \n","        # ------- entry once ------- #   \n","        # prev_entry_cnt = 0\n","        # for back_i in range(i - 1, 0, -1):\n","        #   if res_df['entry'][back_i] == 1:\n","        #     break\n","\n","        #   elif res_df['entry'][back_i] == -1:\n","        #     prev_entry_cnt += 1          \n","        # # # print(\"prev_entry_cnt :\", prev_entry_cnt)\n","\n","        # mr_const_cnt += 1\n","        # # if prev_entry_cnt <= config.ep_set.entry_incycle:\n","        # # if prev_entry_cnt == config.ep_set.entry_incycle:\n","        # if prev_entry_cnt >= config.ep_set.entry_incycle:\n","        #   mr_score += 1\n","\n","        # ------- htf zoning ------- #   \n","        # mr_const_cnt += 1\n","        #   #       bb zone     #\n","        # if res_df['close'].iloc[i] < res_df['bb_lower_%s' % bbz_interval].iloc[i]:\n","        # # if res_df['close'].iloc[i] < res_df['bb_lower2_1h'].iloc[i]:\n","        # # if res_df['close'].iloc[i] < res_df['bb_base_1h'].iloc[i]:\n","\n","        #   #       cbline zone     #\n","        # # if res_df['close'].iloc[i] < res_df['cloud_bline_%s' % cb_interval].iloc[i]:\n","\n","        #   mr_score += 1\n","\n","  \n","        # ------- ben ep_in's tp done ------- #   \n","        # mr_const_cnt += 1\n","        # if res_df['low'].iloc[i] > res_df['short_tp'].iloc[i]:\n","        #   mr_score += 1\n","\n","\n","        # -------------- feature dist const. -------------- #\n","        # if initial_i < input_size:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","        # entry_input_x = min_max_scale(res_df[selected_price_colname].iloc[initial_i - input_size:initial_i].values)\n","       \n","        # re_entry_input_x = expand_dims(entry_input_x)\n","\n","        # entry_vector = model.predict(re_entry_input_x, verbose=0)\n","        # # print(test_result.shape)\n","\n","        # f_dist = vector_dist(entry_vector, selected_vector)\n","        # print(\"f_dist :\", f_dist)\n","\n","        # if f_dist < fdist_thresh:\n","          # mr_score += 1\n","\n","\n","\n","        # ------------------------------------ long ------------------------------------ # \n","          \n","\n","        # --------- by sar --------- # \n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_3m'].iloc[i] == 1:\n","        #   mr_score += 1   \n","\n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_5m'].iloc[i] == 1:\n","        #   mr_score += 1     \n","\n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_15m'].iloc[i] == 1:\n","          # mr_score += 1\n","\n","          #      dc & sar      # \n","        # mr_const_cnt += 1\n","        # # if res_df['dc_lower_1m'].iloc[i] >= res_df['sar_15m'].iloc[i]:\n","        # if res_df['dc_lower_3m'].iloc[i] >= res_df['sar_5m'].iloc[i]:\n","        # # if res_df['dc_lower_5m'].iloc[i] >= res_df['sar_15m'].iloc[i]:\n","        #   mr_score += 1\n","\n","        # -------------- dr scheduling -------------- #\n","        # if config.ep_set.entry_type == \"MARKET\":\n","          # mr_const_cnt += 1        \n","          # if (res_df['long_tp'].iloc[i] - res_df['close'].iloc[i]) / (res_df['close'].iloc[i] - res_df['long_out'].iloc[i]) <= config.ep_set.tr_thresh * (1 + config.ep_set.dr_error): # 일반적으로 dr 상에서 tp 비율이 더 커짐 (tr 보다)\n","          #   mr_score += 1\n","\n","        # -------------- ep limit -------------- #    \n","        # mr_const_cnt += 1\n","        # # if (res_df['open'].iloc[i] - res_df['long_ep'].iloc[i]) / res_df['open'].iloc[i] < config.ep_set.max_eplim_pct:\n","        # if config.ep_set.min_eplim_pct < (res_df['open'].iloc[i] - res_df['long_ep'].iloc[i]) / res_df['open'].iloc[i] < config.ep_set.max_eplim_pct:\n","        # # if 0 < (res_df['open'].iloc[i] - res_df['long_ep'].iloc[i]) / res_df['open'].iloc[i] < config.ep_set.max_eplim_pct:\n","        #   # if res_df['st_gap_15m'].iloc[i] / res_df['open'].iloc[i] < 0:\n","        #   #   print(\"i, res_df['st_gap_15m'].iloc[i] :\", i, res_df['st_gap_15m'].iloc[i])\n","        #   mr_score += 1\n","\n","\n","        # -------------- entry once -------------- #    \n","        # prev_entry_cnt = 0\n","        # for back_i in range(i - 1, 0, -1):\n","        #   if res_df['entry'][back_i] == -1:\n","        #     break\n","\n","        #   elif res_df['entry'][back_i] == 1:\n","        #     prev_entry_cnt += 1\n","          \n","        # mr_const_cnt += 1\n","        # # if prev_entry_cnt <= config.ep_set.entry_incycle:\n","        # # if prev_entry_cnt == config.ep_set.entry_incycle:\n","        # if prev_entry_cnt >= config.ep_set.entry_incycle:\n","        #   mr_score += 1\n","\n","\n","        # ------- htf zoning ------- #   \n","        # mr_const_cnt += 1\n","          \n","        #   #       bb zone     #\n","        # if res_df['close'].iloc[i] > res_df['bb_upper_%s' % bbz_interval].iloc[i]:\n","        # # if res_df['close'].iloc[i] > res_df['bb_upper2_1h'].iloc[i]:\n","        # # if res_df['close'].iloc[i] > res_df['bb_base_1h'].iloc[i]:\n","        \n","        #   #       cbline zone     #\n","        # # if res_df['close'].iloc[i] > res_df['cloud_bline_%s' % cb_interval].iloc[i]:\n","\n","        #   mr_score += 1\n","\n","\n","        # ------- ben ep_in's tp done ------- #   \n","        # mr_const_cnt += 1\n","        # if res_df['high'].iloc[i] < res_df['long_tp'].iloc[i]:\n","        #   mr_score += 1\n","\n","\n","        # -------------- feature dist const. -------------- #\n","        # if initial_i < input_size:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","          \n","        # entry_input_x = min_max_scale(res_df[selected_price_colname].iloc[initial_i - input_size:initial_i].values)\n","       \n","        # re_entry_input_x = expand_dims(entry_input_x)\n","\n","        # entry_vector = model.predict(re_entry_input_x, verbose=0)\n","        # # print(test_result.shape)\n","\n","        # f_dist = vector_dist(entry_vector, selected_vector)\n","        # print(\"f_dist :\", f_dist)\n","\n","        # if f_dist < fdist_thresh:\n","          # mr_score += 1"]},{"cell_type":"markdown","metadata":{"id":"qM6H6fmrKtsA"},"source":["#### legacy"]},{"cell_type":"code","source":["def en_ex_pairing_v9_5(res_df, open_idx_list, open_info_list, ohlc_list, config_list, np_timeidx, funcs, show_detail=False):  # 이미 충분히 줄여놓은 idx 임\n","\n","    open_info1, open_info2 = open_info_list\n","    side_arr1, _, _, id_idx_arr1 = open_info1\n","    side_arr2, _, _, _ = open_info2\n","\n","    expiry_p1, expiry_p2, lvrg_set = funcs\n","\n","    net_p1_idx_list, p1_idx_list, p2_idx_list, pair_idx_list, pair_price_list, lvrg_list, fee_list, tpout_list, tr_list = [[] for li in range(9)]\n","    len_df = len(res_df)\n","\n","    open, high, low, close = ohlc_list\n","    \n","    open_idx1, open_idx2 = open_idx_list\n","    len_open_idx1 = len(open_idx1)\n","    len_open_idx2 = len(open_idx2)\n","    i, open_i1, open_i2 = 0, -1, -1  # i for total_res_df indexing\n","\n","    while 1:   # for p1's loop\n","\n","        # Todo, \n","        #   1. (갱신) p1's open_i + 1 과 op_idx 를 꺼내오는 건, eik1 또는 tp 체결의 경우만 해당됨, \n","        #   2. out 의 경우 p2's op_idx 기준으로 retry 필요\n","        #     a. 또한, p2's op_idx > p1's op_idx\n","\n","        # ============ get p1_info ============ #\n","        # if eik1 or tp_done or first loop:\n","        open_i1 += 1  # 확인 끝났으면 조기 이탈(+1), 다음 open_idx 조사 진행\n","        if open_i1 >= len_open_idx1:\n","            break\n","\n","        if show_detail:\n","            print(\"open_i1 :\", open_i1, side_arr1[open_i1])\n","\n","        op_idx1 = open_idx1[open_i1]  # open_i1 는 i 와 별개로 운영\n","        if op_idx1 < i:  # i = 이전 거래 끝난후의 res_df index - \"거래 종료후 거래 시작\", '<' : 거래 종료시점 진입 가능하다는 의미\n","            continue\n","\n","        # ------ set loop index i ------ #\n","        i = op_idx1      # + 1 --> op_idx1 = op_idx2 가능함 # open_signal 이 close_bar.shift(1) 이라고 가정하고 다음 bar 부터 체결확인한다는 의미\n","        if i >= len_df:  # res_df 의 last_index 까지 돌아야함\n","            break        \n","\n","        # ------ dynamic arr info by ID ------ #\n","        #     1. 해당 id 로 config 재할당해야함\n","        #       a. use open_i1\n","        open_side = side_arr1[open_i1]\n","        id_idx = id_idx_arr1.astype(int)[open_i1]\n","        config = config_list[id_idx]\n","        selection_id = config.selection_id\n","        check_hlm = config.tr_set.check_hlm   \n","\n","        # check_net_hhm = 1 if (config.tr_set.wave_itv1 == config.tr_set.wave_itv2) and (config.tr_set.wave_period1 == config.tr_set.wave_period2) else 0\n","\n","        side_pos = 'short' if open_side == OrderSide.SELL else 'long'   \n","        if show_detail:\n","          print(\"============ op_idx1 : {} {} ============\".format(op_idx1, open_side))\n","     \n","        # if show_detail:\n","        #   print(\"check_hlm :\", check_hlm)\n","\n","        # ------ load tr_data ------ #\n","        tp_arr = res_df['{}_tp_{}'.format(side_pos, selection_id)].to_numpy()\n","        ep1_arr = res_df['{}_ep1_{}'.format(side_pos, selection_id)].to_numpy()\n","        ep2_arr = res_df['{}_ep2_{}'.format(side_pos, selection_id)].to_numpy()\n","        out_arr = res_df['{}_out_{}'.format(side_pos, selection_id)].to_numpy()\n","\n","        tr_arr = res_df['{}_tr_{}'.format(side_pos, selection_id)].to_numpy()  # just for p1_hhm\n","\n","        tp_1_ = res_df['{}_tp_1_{}'.format(side_pos, selection_id)].to_numpy()[op_idx1]  # for p2_box location & p1's exipiry\n","        tp_0_ = res_df['{}_tp_0_{}'.format(side_pos, selection_id)].to_numpy()[op_idx1]\n","        tp_gap_ = res_df['{}_tp_gap_{}'.format(side_pos, selection_id)].to_numpy()[op_idx1]    \n","\n","        # if not check_net_hhm:  # this phase exist for p1 entry (net hhm sync.) in p2_platform\n","        exec_j, ep_j, tp_j, out_j, entry_done, en_p, fee = check_entry_v6(res_df, config, config.ep_set.entry_type, op_idx1, tp_1_, tp_gap_, len_df, open_side,\n","                                                                                [*ohlc_list, ep1_arr], expiry_p2)        \n","        i = exec_j  # = entry_loop 를 돌고 나온 e_j\n","        if not entry_done:\n","            if show_detail:\n","              print(\"p1's expiry by expiry_p2 function in p1's loop : continue\")\n","            continue   \n","        # else:        \n","        #   tp_j = op_idx1\n","\n","        prev_open_i2 = open_i2\n","        net_p1_idx_list.append(op_idx1)\n","        # if check_hlm in [0, 1]:\n","        #   i = op_idx1  # allow op_idx2 = op_idx1\n","        allow_exit = 1\n","        # ============ entry loop ============ #\n","        while 1:  # for p2's loop (allow retry)\n","\n","          # ============ get p2_info ============ #\n","          if check_hlm in [1, 2]:\n","            open_i2 += 1  # 확인 끝났으면 조기 이탈(+1), 다음 open_idx 조사 진행\n","            if open_i2 >= len_open_idx2:  # open_i2 소진\n","                break\n","\n","            if show_detail:\n","              print(\"open_i2 :\", open_i2, side_arr2[open_i2])\n","\n","            # ------ check side sync. ------ #\n","            if open_side != side_arr2[open_i2]:\n","              continue\n","\n","            # ------ assert, op_idx2 >= exec_j ------ #\n","            op_idx2 = open_idx2[open_i2]  # open_i2 는 i 와 별개로 운영\n","            if check_hlm == 1 and allow_exit:\n","              if op_idx2 < op_idx1:\n","                continue\n","            else:\n","              if op_idx2 < i:   # p1 execution 이후의 i 를 허용 (old, 이곳 i = op_idx1 + 1 or p2's exec_j or exit_loop's i + 1)\n","                continue\n","            \n","            if check_hlm == 2:\n","              i = op_idx2 + 1  # open_signal 이 close_bar.shift(1) 이라고 가정하고 다음 bar 부터 체결확인한다는 의미\n","              if i >= len_df:  # res_df 의 last_index 까지 돌아야함\n","                  break\n","\n","            if show_detail:\n","              print(\"op_idx1, op_idx2 :\", op_idx1, op_idx2, side_arr2[open_i2])\n","              \n","          else:\n","            op_idx2 = op_idx1\n","          \n","          tp_1_ = res_df['{}_tp_1_{}'.format(side_pos, selection_id)].to_numpy()[op_idx2]  # p2's tp_box 를 위한 재정의\n","          tp_0_ = res_df['{}_tp_0_{}'.format(side_pos, selection_id)].to_numpy()[op_idx2]\n","          tp_gap_ = res_df['{}_tp_gap_{}'.format(side_pos, selection_id)].to_numpy()[op_idx2]   \n","\n","          tp_ = tp_arr[op_idx2]          \n","          ep2_ = ep2_arr[op_idx2]\n","          out_ = out_arr[op_idx2]\n","\n","          out_1_ = res_df['{}_out_1_{}'.format(side_pos, selection_id)].to_numpy()[op_idx2]\n","          out_0_ = res_df['{}_out_0_{}'.format(side_pos, selection_id)].to_numpy()[op_idx2]\n","          out_gap_ = res_df['{}_out_gap_{}'.format(side_pos, selection_id)].to_numpy()[op_idx2]  \n","\n","          # ------ const. for p2_wave ------ #\n","          wave_itv1 = config.tr_set.wave_itv1\n","          wave_period1 = config.tr_set.wave_period1\n","          wave_itv2 = config.tr_set.wave_itv2\n","          wave_period2 = config.tr_set.wave_period2\n","\n","          if check_hlm in [1, 2]:\n","            # ------ check p1's expiry - Todo, priority ------ # - p2_box 생성 이전의 hl_survey\n","            # 1. op_idx1 ~ op_idx2 까지의 hl_check \n","            # if check_hlm:  # p1_hlm, p2_hlm --> Todo, 이거를 왜 p1_hlm 에도 적용했는지 잘 모르겠음\n","            # if op_idx1 < op_idx2:\n","            #   expire, touch_idx = expiry_p1(res_df, config, op_idx1, op_idx2, tp_1_, tp_0_, tp_gap_, ohlc_list[1:3], open_side)\n","            #   if expire:   # p1's expiry\n","            #       if show_detail:\n","            #         print(\"expiry_p1, touch_idx = {} : break\".format(touch_idx))\n","            #       i = touch_idx  #  + 1  --> 이거 아닌것 같음 # op_idx1 과 op_idx2 사이의 op_idx1' 을 살리기 위함, 즉 바로 다음 op_idx1 로 회귀 (건너뛰지 않고)\n","            #       open_i2 = prev_open_i2\n","            #       break   # change op_idx1\n","\n","            if check_hlm == 2:\n","              # ------ p2 point_validation - vectorization unavailable ------ # p1_loop 로 return 되는 정확한 i 를 반환하기 위해서 expiry_p1 에 순서 양보  # Todo, 새로운 tp, ep, out 에 대한 처리 필요 (p1_hlm 사용시)\n","              if open_side == OrderSide.SELL:\n","                # --- p2_wave validation --- #\n","                wave_co_post_idx = res_df['wave_co_post_idx_fill_{}{}'.format(wave_itv2, wave_period2)].to_numpy()[op_idx2]\n","                if not (op_idx1 < wave_co_post_idx):\n","                  if show_detail:\n","                    print(\"p2_wave validation : continue\")\n","                  continue  # change op_idx2\n","\n","                # --- p2_wave high validation --- #\n","                # wave_high_fill1_ = res_df['wave_high_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()[op_idx1]\n","                # wave_high_fill2_ = res_df['wave_high_fill_{}{}'.format(wave_itv2, wave_period2)].to_numpy()[op_idx2]\n","                # if not (wave_high_fill1_ >= wave_high_fill2_):\n","                #   if show_detail:\n","                #     print(\"p2_wave high validation : continue\")\n","                #   continue  # change op_idx2\n","                  \n","                if not (tp_ < ep2_):  # tr_set validation & reject hl_out open_exec.\n","                  break  # change op_idx1\n","                elif not (ep2_ < out_ and close[op_idx2] < out_):\n","                  if show_detail:\n","                    print(\"point validation : continue\")\n","                  continue  # change op_idx2\n","              else:\n","                # --- p2_wave validation --- #\n","                wave_cu_post_idx = res_df['wave_cu_post_idx_fill_{}{}'.format(wave_itv2, wave_period2)].to_numpy()[op_idx2]\n","                if not (op_idx1 < wave_cu_post_idx):\n","                  if show_detail:\n","                    print(\"p2_wave validation : continue\")\n","                  continue  # change op_idx2\n","                \n","                # --- p2_wave low validation --- #\n","                # wave_low_fill1_ = res_df['wave_low_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()[op_idx1]\n","                # wave_low_fill2_ = res_df['wave_low_fill_{}{}'.format(wave_itv2, wave_period2)].to_numpy()[op_idx2]\n","                # if not (wave_low_fill1_ <= wave_low_fill2_):\n","                #   if show_detail:\n","                #     print(\"p2_wave low validation : continue\")\n","                #   continue  # change op_idx2\n","\n","                if not (tp_ > ep2_):              \n","                  break\n","                elif not (ep2_ > out_ and close[op_idx2] > out_):\n","                  if show_detail:\n","                    print(\"point validation : continue\")\n","                  continue\n","\n","              # ------ p2_box location ------ #\n","              # if open_side == OrderSide.SELL:\n","              #   if not ((tp_1_ + tp_gap_ * config.tr_set.p2_box_k1 <= out_1_) and (out_0_ <= tp_0_ - tp_gap_ * config.tr_set.p2_box_k2)):  # tp1, tp0 에 닿으면 expiry\n","              #   # if not ((tp_1_ + tp_gap_ * config.tr_set.p2_box_k1 >= out_1_) and (out_0_ <= tp_0_ - tp_gap_ * config.tr_set.p2_box_k2)):  # tp1, tp0 에 닿으면 expiry\n","              #     if show_detail:\n","              #         print(\"p2_box rejection : continue\")\n","              #     continue\n","              #   else:                \n","              #     # ------ p1p2_low ------ #\n","              #     if not high[op_idx1:op_idx2 + 1].max() < tp_0_ - tp_gap_ * config.tr_set.p1p2_low:\n","              #       if show_detail:\n","              #         print(\"p1p2_low rejection : continue\")\n","              #       continue\n","              # else:\n","              #   if not ((tp_1_ - tp_gap_ * config.tr_set.p2_box_k1 >= out_1_) and (out_0_ >= tp_0_ + tp_gap_ * config.tr_set.p2_box_k2)):\n","              #   # if not ((tp_1_ - tp_gap_ * config.tr_set.p2_box_k1 <= out_1_) and (out_0_ >= tp_0_ + tp_gap_ * config.tr_set.p2_box_k2)):\n","              #     if show_detail:\n","              #         print(\"p2_box rejection : continue\")\n","              #     continue\n","              #   else:\n","              #     # ------ p1p2_low ------ #\n","              #     if not low[op_idx1:op_idx2 + 1].min() > tp_0_ + tp_gap_ * config.tr_set.p1p2_low:\n","              #       if show_detail:\n","              #         print(\"p1p2_low rejection : continue\")\n","              #       continue\n","\n","              # ------ check p2's expiry ------ # - 현재, op_idx2 기준의 ep2_arr 을 사용 중임.\n","              # exec_j, ep_j, _, out_j, entry_done, en_p, fee = check_entry_v6(res_df, config, config.ep_set.point2.entry_type, op_idx2, tp_1_, tp_gap_, len_df, open_side,\n","              #                                                                         [*ohlc_list, ep2_arr], expiry_p2)   # Todo, tp_1 & tp_gap 사용이 맞을 것으로 봄                                                                                      \n","              exec_j, ep_j, _, out_j, entry_done, en_p, fee = check_entry_v6(res_df, config, config.ep_set.point2.entry_type, op_idx2, out_1_, out_gap_, len_df, open_side,\n","                                                                                      [*ohlc_list, ep2_arr], expiry_p2)   # Todo, tp_1 & tp_gap 사용이 맞을 것으로 봄\n","              i = exec_j  # = entry_loop 를 돌고 나온 e_j\n","              if not entry_done:   # p2's expiry\n","                  if show_detail:\n","                      print(\"expiry_p2, i = {} : continue\".format(i))\n","                  continue  # change op_idx2            \n","              \n","              # ------ devectorized tr_calc ------ # - en_p 에 대해 하는게 맞을 것으로봄\n","              if open_side == OrderSide.SELL:\n","                tr_ = abs((en_p / tp_ - config.trader_set.limit_fee - 1) / (en_p / out_ - config.trader_set.market_fee - 1))\n","              else:\n","                tr_ = abs((tp_ / en_p - config.trader_set.limit_fee - 1) / (out_ / en_p - config.trader_set.market_fee - 1))              \n","\n","              # ------ tr_threshold ------ #\n","              if config.loc_set.point2.short_tr_thresh != \"None\":\n","                if open_side == OrderSide.SELL:\n","                  if tr_ < config.loc_set.point2.short_tr_thresh:\n","                    if show_detail:\n","                      print(\"tr_threshold : continue\")\n","                    continue\n","                else:\n","                  if tr_ < config.loc_set.point2.long_tr_thresh:\n","                    if show_detail:\n","                      print(\"tr_threshold : continue\")\n","                    continue\n","                \n","          if not allow_exit:  # p1_hlm 의 경우, 한번 out 되면 price 가 wave_range 에 닿기전까지 retrade 를 허용하지 않는다. (expiry_p1 을 이용해 op_idx1 을 변경할 것)  \n","            if show_detail:\n","              print(\"allow_exit = {} : continue\".format(allow_exit))\n","            continue\n","\n","          if check_hlm in [0, 1]:\n","            tr_ = tr_arr[op_idx1]\n","\n","          # ------ leverage ------ #\n","          # out = out_arr[out_j]  # lvrg_set use out on out_j (out_j shoud be based on p2)\n","          leverage = lvrg_set(res_df, config, open_side, en_p, out_, fee)  # res_df 변수 사용됨 - 주석 처리 된 상태일뿐\n","          if leverage is None:\n","              if show_detail:\n","                    print(\"leverage is None : continue\")\n","              if check_hlm:\n","                continue  # change op_idx2\n","              else:\n","                break   # change op_idx1\n","\n","          exit_done, cross_on = 0, 0\n","          # ------ check tpout_onexec ------ #\n","          # if not config.ep_set.static_ep and config.ep_set.entry_type == \"LIMIT\" and config.ep_set.tpout_onexec:\n","          if config.ep_set.entry_type == \"LIMIT\":\n","              if config.tp_set.tp_onexec:  # dynamic 은 tp_onexec 사용하는 의미가 없음\n","                  tp_j = exec_j\n","              if config.out_set.out_onexec:  # dynamic 은 out_onexec 사용하는 의미가 없음\n","                  out_j = exec_j\n","\n","          # ============ exit loop ============ #\n","          while 1:\n","            if not config.tp_set.static_tp:  # 앞으로 왠만하면 static 만 사용할 예정\n","                tp_j = i\n","            if not config.out_set.static_out:\n","                out_j = i\n","\n","            # ------------ out ------------ #  # out 우선 (보수적 검증)\n","            # ------ signal_out ------ #\n","            if not exit_done:\n","                exit_done, cross_on, ex_p, fee = check_signal_out_v3(res_df, config, open_i2, i, len_df, fee, open_side, cross_on, exit_done, [*ohlc_list, np_timeidx])\n","            # ------ hl_out ------ #\n","            if config.out_set.hl_out:\n","                if not exit_done:  # and i != len_df - 1:\n","                    exit_done, ex_p, fee = check_hl_out_v2(config, i, out_j, len_df, fee, open_side, exit_done, [*ohlc_list, out_arr])\n","\n","            # ------------ tp ------------ #\n","            if not config.tp_set.non_tp and i != exec_j:\n","              if not exit_done:\n","                exit_done, ex_p, fee = check_limit_tp_exec(res_df, config, open_i2, i, tp_j, len_df, fee, open_side, exit_done,\n","                                                          [*ohlc_list, [tp_arr]])  # 여기서는 j -> i 로 변경해야함\n","                # if config.tp_set.tp_type in ['LIMIT']:  # 'BOTH' -> 앞으로는, LIMIT 밖에 없을거라 주석처리함\n","                # if not exit_done and config.tp_set.tp_type in ['MARKET', 'BOTH']:\n","\n","            if exit_done:  # 이 phase 는 exit_phase 뒤에도 있어야할 것 - entry_done var. 사용은 안하겠지만\n","                # ------ append dynamic vars. ------ #\n","                p1_idx_list.append(op_idx1)  # side, zone, start_ver arr 모두 openi_list 로 접근하기 위해 open_i 를 담음\n","                p2_idx_list.append(op_idx2)\n","                pair_idx_list.append([exec_j, i])  # entry & exit (체결 기준임)\n","                pair_price_list.append([en_p, ex_p])\n","                lvrg_list.append(leverage)\n","                fee_list.append(fee)\n","                tpout_list.append([tp_arr[tp_j], out_arr[out_j]])  # for tpout_line plot_check\n","                tr_list.append(tr_)   # Todo, tr vectorize 불가함, 직접 구해주어야할 건데.. (오래걸리지 않을까 --> tr_set 데이터만 모아서 vecto 계산이 나을 것)\n","\n","                # open_i += 1  # 다음 open_idx 조사 진행\n","                break\n","\n","            # 1. 아래있으면, 체결 기준부터 tp, out 허용 -> tp 가 entry_idx 에 체결되는게 다소 염려되기는 함, 일단 진행 (그런 case 가 많지 않았으므로)\n","            # 2. 위에있으면, entry 다음 tick 부터 exit 허용\n","            i += 1\n","            if i >= len_df:  # res_df 의 last_index 까지 돌아야함\n","                break\n","          \n","          if i >= len_df:  # res_df 의 last_index 까지 돌아야함\n","              break\n","\n","          if exit_done == 1:  # tp_done 은 check_hlm 여부와 무관하게 op_idx1 을 변경함\n","            if show_detail:\n","                    print(\"exit_done = {}, i = {} : break\".format(exit_done, i))\n","            break   # change op_idx1\n","          else:  # exit_done -> -1 or 0 (0 means end of df) \n","            if check_hlm in [1, 2]:\n","              if check_hlm == 1:   # exit only once in p1_hlm mode\n","                allow_exit = 0\n","              if show_detail:\n","                      print(\"exit_done = {}, i = {} : continue\".format(exit_done, i))\n","              continue  # change op_idx2\n","            else:\n","              if show_detail:\n","                      print(\"exit_done = {}, i = {} : break\".format(exit_done, i))\n","              break   # change op_idx1    \n","\n","        # if op_idx1 >= 16355:\n","        #   break\n","\n","        if i >= len_df:  # or open_i >= len_open_idx:  # res_df 의 last_index 까지 돌아야함\n","            break\n","        else:\n","            continue\n","\n","    return np.array(net_p1_idx_list), np.array(p1_idx_list), np.array(p2_idx_list), np.array(pair_idx_list), np.array(pair_price_list), np.array(lvrg_list), np.array(\n","        fee_list), np.array(tpout_list), np.array(tr_list)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"AH3JXLkwL_B6","executionInfo":{"status":"ok","timestamp":1658884508950,"user_tz":-540,"elapsed":1076,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"0fa49ccd-e99c-44fd-ac0a-84441dd585d4"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["False"]},"metadata":{},"execution_count":21}]},{"cell_type":"code","execution_count":null,"metadata":{"id":"uB-I09hKKvmu"},"outputs":[],"source":["def get_wave_bias_v6(res_df, config, high, low, len_df, short_net_p1_idx_arr, long_net_p1_idx_arr, short_p2_idx_arr, long_p2_idx_arr, short_obj,\n","                     long_obj):\n","    short_net_p1_idx = short_net_p1_idx_arr.astype(int)  # .reshape(-1, 1)\n","    short_p1_idx = short_obj[-1].astype(int).ravel()\n","    short_p2_idx = short_p2_idx_arr.astype(int).ravel()  # .reshape(-1, 1)\n","    short_en_idx = short_obj[2].astype(int)\n","\n","    short_tp_1 = ffill_line(res_df['short_tp_1_{}'.format(config.selection_id)].to_numpy(),\n","                            short_net_p1_idx)  # net_p1_idx ~ net_p1_idx' 사이에 대한 momentum 조사 (net 이유는 logic's validation)\n","    short_tp_0 = ffill_line(res_df['short_tp_0_{}'.format(config.selection_id)].to_numpy(), short_net_p1_idx)\n","    short_out_1 = ffill_line(res_df['short_out_1_{}'.format(config.selection_id)].to_numpy(),\n","                             short_p2_idx)  # 체결된, p2_idx ~ p2_idx' 사이에 대한 momentum 조사\n","    short_out_0 = ffill_line(res_df['short_out_0_{}'.format(config.selection_id)].to_numpy(), short_p2_idx)\n","    short_ep2_0 = ffill_line(res_df['short_ep2_0_{}'.format(config.selection_id)].to_numpy(), short_p2_idx)\n","    # short_net_wave_1 = ffill_line(res_df['short_wave_1_{}'.format(config.selection_id)].to_numpy(), short_op_idx)  # en_idx 에 sync 된 open_idx 를 사용해야함\n","    # short_net_wave_0 = ffill_line(res_df['short_wave_0_{}'.format(config.selection_id)].to_numpy(), short_op_idx)\n","\n","    long_net_p1_idx = long_net_p1_idx_arr.astype(int)  # .reshape(-1, 1)\n","    long_p1_idx = long_obj[-1].astype(int).ravel()\n","    long_p2_idx = long_p2_idx_arr.astype(int).ravel()  # .reshape(-1, 1)\n","    long_en_idx = long_obj[2].astype(int)\n","\n","    long_tp_1 = ffill_line(res_df['long_tp_1_{}'.format(config.selection_id)].to_numpy(), long_net_p1_idx)\n","    long_tp_0 = ffill_line(res_df['long_tp_0_{}'.format(config.selection_id)].to_numpy(), long_net_p1_idx)\n","    long_out_1 = ffill_line(res_df['long_out_1_{}'.format(config.selection_id)].to_numpy(), long_p2_idx)  # 체결된, p2_idx ~ p2_idx' 사이에 대한 momentum 조사\n","    long_out_0 = ffill_line(res_df['long_out_0_{}'.format(config.selection_id)].to_numpy(), long_p2_idx)\n","    long_ep2_0 = ffill_line(res_df['long_ep2_0_{}'.format(config.selection_id)].to_numpy(), long_p2_idx)\n","\n","    short_p2exec_p1_idx = np.unique(short_p1_idx)  # .reshape(-1, 1)   # 통일성을 위해 2d 로 설정\n","    long_p2exec_p1_idx = np.unique(long_p1_idx)  # .reshape(-1, 1)\n","\n","    # print(\"long_net_p1_idx.shape :\", long_net_p1_idx.shape)\n","    # print(\"long_en_idx.shape :\", long_en_idx.shape)\n","\n","    # ================== touch idx ================== #\n","    # 1. min 에 초점을 맞추는 거니까, touch 없을시 len_df 로 설정\n","    # 2. future_data 사용이니까, shift(-bias_info_tick) 설정 --> olds\n","    # 3. entry 다음 idx 부터 -> tp & out 체결 logic 이 현재 entry_idx 부터 되어있어서 취소\n","    # Todo, high 와 low 중 어디에 먼저닿느냐가 중요함을 key 로 잡고만든 logic 임\n","    len_df_range = np.arange(len_df)\n","    last_idx = len_df - 1  # nan 발생하면 대소 비교로 hhm 확인이 불가능해짐, np.nan <= np.nan --> false\n","\n","    # ------------ pair & idxs ------------ #\n","    short_net_p1_pair = list(zip(short_net_p1_idx, np.append(short_net_p1_idx[1:], last_idx)))   # p1's 1st & 2nd pair 위해서 last_idx 마지막에 붙여준 것\n","    long_net_p1_pair = list(zip(long_net_p1_idx, np.append(long_net_p1_idx[1:], last_idx)))\n","\n","    short_p2_pair = list(zip(short_p2_idx, np.append(short_p2_idx[1:], last_idx)))\n","    long_p2_pair = list(zip(long_p2_idx, np.append(long_p2_idx[1:], last_idx)))\n","\n","    short_tp_1_touch_idxs = np.where(low <= short_tp_1, len_df_range, last_idx)\n","    short_tp_0_touch_idxs = np.where(high >= short_tp_0, len_df_range, last_idx)\n","    long_tp_1_touch_idxs = np.where(high >= long_tp_1, len_df_range, last_idx)\n","    long_tp_0_touch_idxs = np.where(low <= long_tp_0, len_df_range, last_idx)\n","\n","    short_out_1_touch_idxs = np.where(low <= short_out_1, len_df_range, last_idx)\n","    short_out_0_touch_idxs = np.where(high >= short_out_0, len_df_range, last_idx)\n","    long_out_1_touch_idxs = np.where(high >= long_out_1, len_df_range, last_idx)\n","    long_out_0_touch_idxs = np.where(low <= long_out_0, len_df_range, last_idx)\n","\n","    # ------------ min touch_idx ------------ #\n","    short_tp_1_touch_idx = get_touch_idx_fill(short_tp_1_touch_idxs, short_net_p1_pair, short_net_p1_idx, len_df)  # pair means 구간\n","    short_tp_0_touch_idx = get_touch_idx_fill(short_tp_0_touch_idxs, short_net_p1_pair, short_net_p1_idx, len_df)\n","    long_tp_1_touch_idx = get_touch_idx_fill(long_tp_1_touch_idxs, long_net_p1_pair, long_net_p1_idx, len_df)\n","    long_tp_0_touch_idx = get_touch_idx_fill(long_tp_0_touch_idxs, long_net_p1_pair, long_net_p1_idx, len_df)\n","\n","    short_out_1_touch_idx = get_touch_idx_fill(short_out_1_touch_idxs, short_p2_pair, short_p2_idx, len_df)  # pair means 구간\n","    short_out_0_touch_idx = get_touch_idx_fill(short_out_0_touch_idxs, short_p2_pair, short_p2_idx, len_df)\n","    long_out_1_touch_idx = get_touch_idx_fill(long_out_1_touch_idxs, long_p2_pair, long_p2_idx, len_df)\n","    long_out_0_touch_idx = get_touch_idx_fill(long_out_0_touch_idxs, long_p2_pair, long_p2_idx, len_df)\n","\n","    # ------------ point's touch_idx ------------ #\n","    short_tp_1_net_p1_touch_idx = short_tp_1_touch_idx[short_net_p1_idx]  # for tp_box's net_hhm\n","    short_tp_0_net_p1_touch_idx = short_tp_0_touch_idx[short_net_p1_idx]\n","    long_tp_1_net_p1_touch_idx = long_tp_1_touch_idx[long_net_p1_idx]\n","    long_tp_0_net_p1_touch_idx = long_tp_0_touch_idx[long_net_p1_idx]\n","    # print(\"long_tp_1_net_p1_touch_idx :\", long_tp_1_net_p1_touch_idx)\n","\n","    short_tp_1_p2exec_p1_touch_idx = short_tp_1_touch_idx[short_p2exec_p1_idx]  # p2 까지 체결된 p1's hhm (p2 executed p1_hhm)\n","    short_tp_0_p2exec_p1_touch_idx = short_tp_0_touch_idx[short_p2exec_p1_idx]\n","    long_tp_1_p2exec_p1_touch_idx = long_tp_1_touch_idx[long_p2exec_p1_idx]\n","    long_tp_0_p2exec_p1_touch_idx = long_tp_0_touch_idx[long_p2exec_p1_idx]\n","\n","    short_tp_1_p2_touch_idx = short_tp_1_touch_idx[short_p2_idx]  # hlm 을 위한 hhm (on p2)\n","    short_tp_0_p2_touch_idx = short_tp_0_touch_idx[short_p2_idx]\n","    long_tp_1_p2_touch_idx = long_tp_1_touch_idx[long_p2_idx]\n","    long_tp_0_p2_touch_idx = long_tp_0_touch_idx[long_p2_idx]\n","\n","    short_out_1_p2_touch_idx = short_out_1_touch_idx[short_p2_idx]  # for out_box's executed_hhm\n","    short_out_0_p2_touch_idx = short_out_0_touch_idx[short_p2_idx]\n","    long_out_1_p2_touch_idx = long_out_1_touch_idx[long_p2_idx]\n","    long_out_0_p2_touch_idx = long_out_0_touch_idx[long_p2_idx]\n","\n","    # ------------ get wave's bias_tick ------------ #\n","    short_tp_1_net_p1_touch_idx2 = np.where(short_tp_1_net_p1_touch_idx == last_idx, np.nan, short_tp_1_net_p1_touch_idx)\n","    long_tp_1_net_p1_touch_idx2 = np.where(long_tp_1_net_p1_touch_idx == last_idx, np.nan, long_tp_1_net_p1_touch_idx)\n","\n","    short_tp_1_p2exec_p1_touch_idx2 = np.where(short_tp_1_p2exec_p1_touch_idx == last_idx, np.nan, short_tp_1_p2exec_p1_touch_idx)\n","    long_tp_1_p2exec_p1_touch_idx2 = np.where(long_tp_1_p2exec_p1_touch_idx == last_idx, np.nan, long_tp_1_p2exec_p1_touch_idx)\n","\n","    short_net_p1_bias_tick = short_tp_1_net_p1_touch_idx2 - short_net_p1_idx\n","    long_net_p1_bias_tick = long_tp_1_net_p1_touch_idx2 - long_net_p1_idx\n","\n","    short_p2exec_p1_bias_tick = short_tp_1_p2exec_p1_touch_idx2 - short_p2exec_p1_idx\n","    long_p2exec_p1_bias_tick = long_tp_1_p2exec_p1_touch_idx2 - long_p2exec_p1_idx\n","\n","    # ------------------ bias_bool & hhm ------------------ #\n","    short_net_p1_true_bias_bool = short_tp_1_net_p1_touch_idx < short_tp_0_net_p1_touch_idx  # true_bias 의 조건\n","    short_net_p1_false_bias_bool = short_tp_1_net_p1_touch_idx >= short_tp_0_net_p1_touch_idx  # false_bias 의 조건, ~true_bias_bool 와 같지 않음, why ..? = en_idx\n","    long_net_p1_true_bias_bool = long_tp_1_net_p1_touch_idx < long_tp_0_net_p1_touch_idx\n","    long_net_p1_false_bias_bool = long_tp_1_net_p1_touch_idx >= long_tp_0_net_p1_touch_idx\n","\n","    short_p2exec_p1_true_bias_bool = short_tp_1_p2exec_p1_touch_idx < short_tp_0_p2exec_p1_touch_idx  # true_bias 의 조건\n","    short_p2exec_p1_false_bias_bool = short_tp_1_p2exec_p1_touch_idx >= short_tp_0_p2exec_p1_touch_idx  # false_bias 의 조건, ~true_bias_bool 와 같지 않음, why ..? = en_idx\n","    long_p2exec_p1_true_bias_bool = long_tp_1_p2exec_p1_touch_idx < long_tp_0_p2exec_p1_touch_idx\n","    long_p2exec_p1_false_bias_bool = long_tp_1_p2exec_p1_touch_idx >= long_tp_0_p2exec_p1_touch_idx\n","\n","    short_p2_true_bias_bool = short_tp_1_p2_touch_idx < short_tp_0_p2_touch_idx\n","    # short_p2_false_bias_bool = short_tp_1_p2_touch_idx >= short_tp_0_p2_touch_idx\n","    long_p2_true_bias_bool = long_tp_1_p2_touch_idx < long_tp_0_p2_touch_idx\n","    # long_p2_false_bias_bool = long_tp_1_p2_touch_idx >= long_tp_0_p2_touch_idx\n","\n","    short_p2_out_true_bias_bool = short_out_1_p2_touch_idx < short_out_0_p2_touch_idx\n","    short_p2_out_false_bias_bool = short_out_1_p2_touch_idx >= short_out_0_p2_touch_idx\n","    long_p2_out_true_bias_bool = long_out_1_p2_touch_idx < long_out_0_p2_touch_idx\n","    long_p2_out_false_bias_bool = long_out_1_p2_touch_idx >= long_out_0_p2_touch_idx\n","\n","    short_tpbox_hhm = hhm(short_net_p1_true_bias_bool, short_net_p1_false_bias_bool)\n","    long_tpbox_hhm = hhm(long_net_p1_true_bias_bool, long_net_p1_false_bias_bool)\n","\n","    short_p2exec_tpbox_hhm = hhm(short_p2exec_p1_true_bias_bool, short_p2exec_p1_false_bias_bool)\n","    long_p2exec_tpbox_hhm = hhm(long_p2exec_p1_true_bias_bool, long_p2exec_p1_false_bias_bool)\n","\n","    # short_p2_hhm = hhm(short_p2_true_bias_bool, short_p2_false_bias_bool)\n","    # long_p2_hhm = hhm(long_p2_true_bias_bool, long_p2_false_bias_bool)\n","\n","    short_outbox_hhm = hhm(short_p2_out_true_bias_bool, short_p2_out_false_bias_bool)\n","    long_outbox_hhm = hhm(long_p2_out_true_bias_bool, long_p2_out_false_bias_bool)\n","\n","    # print(\"short_tpbox_hhm, short_p2_hhm, short_outbox_hhm :\", short_tpbox_hhm, short_p2_hhm, short_outbox_hhm)\n","\n","    return short_tpbox_hhm, long_tpbox_hhm, short_p2exec_tpbox_hhm, long_p2exec_tpbox_hhm, short_outbox_hhm, long_outbox_hhm, \\\n","           short_net_p1_bias_tick, long_net_p1_bias_tick, short_p2exec_p1_bias_tick, long_p2exec_p1_bias_tick, short_p2_true_bias_bool, long_p2_true_bias_bool, \\\n","           short_tp_1[short_en_idx], short_tp_0[short_en_idx], long_tp_1[long_en_idx], long_tp_0[long_en_idx], \\\n","           short_out_1[short_en_idx], short_out_0[short_en_idx], long_out_1[long_en_idx], long_out_0[long_en_idx], short_ep2_0[short_en_idx], long_ep2_0[long_en_idx]  # plot_check 을 위해 en_idx 넣음"]},{"cell_type":"code","source":["def idep_plot_v17(res_df, len_df, config, high, low, open_info_df1, paired_res, inversion=False, sample_ratio=0.7, title_position=(0.5, 0.5),\n","                  fontsize=15, signi=False):  # open_idx, side_arr\n","    if not signi:\n","        plt.style.use(['dark_background', 'fast'])\n","        plt.figure(figsize=(24, 8))\n","        gs = gridspec.GridSpec(nrows=2,  # row 몇 개\n","                               ncols=3,  # col 몇 개\n","                               height_ratios=[10, 1]\n","                               # height_ratios=[10, 10, 1]\n","                               )\n","    gs_idx = 0\n","    # plt.suptitle(key)\n","\n","    p_ranges, p_qty_ratio = literal_eval(config.tp_set.p_ranges), literal_eval(config.tp_set.p_qty_ratio)\n","    assert np.sum(p_qty_ratio) == 1.0\n","    assert len(p_ranges) == len(p_qty_ratio)\n","\n","    if sample_ratio is not None:\n","        sample_len = int(len_df * sample_ratio)\n","    else:\n","        sample_len = len_df\n","\n","    # ------ short & long data preparation ------ #\n","    # start_0 = time.time()\n","\n","    net_p1_idx_arr, p1_idx_arr, p2_idx_arr, pair_idx_arr, pair_price_arr, lvrg_arr, fee_arr, tpout_arr, tr_arr = paired_res\n","    assert len(p1_idx_arr) != 0, \"assert len(p1_idx_arr) != 0\"\n","\n","    short_net_p1_idx_arr = net_p1_idx_arr[np.where(open_info_df1.side.loc[net_p1_idx_arr] == OrderSide.SELL)[0]]\n","    long_net_p1_idx_arr = net_p1_idx_arr[np.where(open_info_df1.side.loc[net_p1_idx_arr] == OrderSide.BUY)[0]]\n","\n","    short_net_p1_frq = len(short_net_p1_idx_arr)\n","    long_net_p1_frq = len(long_net_p1_idx_arr)\n","    # print(\"short_net_p1_frq :\", short_net_p1_frq)\n","    # print(\"long_net_p1_frq :\", long_net_p1_frq)\n","\n","    short_p1_openi_idx = np.where(open_info_df1.side.loc[p1_idx_arr] == OrderSide.SELL)[0]  # p1_idx_arr 에 대한 idx, # side_arr,\n","    long_p1_openi_idx = np.where(open_info_df1.side.loc[p1_idx_arr] == OrderSide.BUY)[0]\n","\n","    # p1_idx = open_idx[p1_openi_arr].reshape(-1, 1)   # != p1_idx_arr, p1_openi_arr 은 exit_done 기준임\n","\n","    np_obj = np.hstack((pair_price_arr, pair_idx_arr, p1_idx_arr.reshape(-1, 1)))  # p1_idx_arr is 1d, need to be changed to 2d (for stacking)\n","    short_obj = np_obj[short_p1_openi_idx]\n","    long_obj = np_obj[long_p1_openi_idx]\n","    both_obj = np.vstack((short_obj, long_obj))\n","    print(\"short_obj.shape :\", short_obj.shape)\n","    print(\"long_obj.shape :\", long_obj.shape)\n","\n","    short_obj, long_obj, both_obj = [np.split(obj_, 5, axis=1) for obj_ in [short_obj, long_obj, both_obj]]\n","\n","    short_p2_idx_arr, long_p2_idx_arr = [p2_idx_arr[openi_idx_].reshape(-1, 1) for openi_idx_ in [short_p1_openi_idx, long_p1_openi_idx]]\n","    short_lvrg_arr, long_lvrg_arr = [lvrg_arr[openi_idx_].reshape(-1, 1) for openi_idx_ in [short_p1_openi_idx, long_p1_openi_idx]]\n","    short_fee_arr, long_fee_arr = [fee_arr[openi_idx_].reshape(-1, 1) for openi_idx_ in [short_p1_openi_idx, long_p1_openi_idx]]\n","    short_tpout_arr, long_tpout_arr = [tpout_arr[openi_idx_] for openi_idx_ in [short_p1_openi_idx, long_p1_openi_idx]]\n","    # short_bias_arr, long_bias_arr = [bias_arr[openi_idx_] for openi_idx_ in [short_p1_openi_idx, long_p1_openi_idx]]\n","    short_tr_arr, long_tr_arr = [tr_arr[openi_idx_] for openi_idx_ in [short_p1_openi_idx, long_p1_openi_idx]]\n","    # print(\"long_bias_arr.shape :\", long_bias_arr.shape)\n","    # print(\"short / long arr setting elapsed time :\", time.time() - start_0)\n","\n","\n","    # ------ get hhm ------ #    \n","    # start_0 = time.time()\n","    short_tpbox_hhm, long_tpbox_hhm, short_tpbox_p2exec_hhm, long_tpbox_p2exec_hhm, short_outbox_hhm, long_outbox_hhm, short_p2_true_bias_bool, long_p2_true_bias_bool, \\\n","          short_tp_1, short_tp_0, long_tp_1, long_tp_0, short_out_1, short_out_0, long_out_1, long_out_0, short_ep2_0, long_ep2_0 = \\\n","      get_wave_bias_v5(res_df, config, high, low, len_df, short_net_p1_idx_arr, long_net_p1_idx_arr, short_p2_idx_arr, long_p2_idx_arr, short_obj, long_obj)\n","    # print(\"get_wave_bias elapsed time :\", time.time() - start_0)\n","\n","\n","    # ------ mean_low ------ #    \n","    # start_0 = time.time()\n","    selection_id = config.selection_id\n","\n","    short_p1_idx = short_obj[-1].astype(int)\n","    long_p1_idx = long_obj[-1].astype(int)    \n","\n","    short_open_tp_1 = res_df['short_tp_1_{}'.format(selection_id)].to_numpy()[short_p1_idx] # != short_tp_1\n","    long_open_tp_1 = res_df['long_tp_1_{}'.format(selection_id)].to_numpy()[long_p1_idx]\n","\n","    short_open_tp_0 = res_df['short_tp_0_{}'.format(selection_id)].to_numpy()[short_p1_idx]\n","    long_open_tp_0 = res_df['long_tp_0_{}'.format(selection_id)].to_numpy()[long_p1_idx]\n","\n","    short_open_tp_gap = res_df['short_tp_gap_{}'.format(selection_id)].to_numpy()[short_p1_idx]  # use open_i\n","    long_open_tp_gap = res_df['long_tp_gap_{}'.format(selection_id)].to_numpy()[long_p1_idx]\n","\n","    short_max_outg = get_max_outg_v4(OrderSide.SELL, config, ohlc_list, short_obj, short_tpout_arr, short_open_tp_0, short_open_tp_gap)  # tp_box's mean_low 확인 위해 tp_gap 입력함\n","    long_max_outg = get_max_outg_v4(OrderSide.BUY, config, ohlc_list, long_obj, long_tpout_arr, long_open_tp_0, long_open_tp_gap)\n","\n","    short_mean_low = short_max_outg[short_p2_true_bias_bool].mean()\n","    long_mean_low = long_max_outg[long_p2_true_bias_bool].mean()\n","    both_mean_low = (short_mean_low + long_mean_low) / 2\n","    # print(\"short_mean_low :\", short_mean_low)\n","    # print(\"long_mean_low :\", long_mean_low)\n","    # print(\"both_mean_low :\", both_mean_low)\n","    # print(\"mean_low elapsed time :\", time.time() - start_0)\n","\n","    # ------ plot_data ------ #\n","    len_short, len_long = len(short_p1_openi_idx), len(long_p1_openi_idx)\n","\n","    try:\n","        # start_0 = time.time()\n","        if len_short == 0:\n","            short_pr = []\n","            gs_idx += 1\n","        else:\n","            short_tr = short_tr_arr.mean()\n","            short_pr, short_liqd = get_pr_v4(OrderSide.SELL, high, low, short_obj, short_tpout_arr, short_lvrg_arr, short_fee_arr, p_ranges,\n","                                             p_qty_ratio, inversion)\n","            short_total_pr = to_total_pr(len_df, short_pr, short_obj[-2])\n","            short_cum_pr = np.cumprod(short_total_pr)\n","            short_hlm = hlm(short_pr, short_p2_true_bias_bool)\n","            short_trade_ticks = np.mean(short_obj[-2] - short_obj[-1])\n","            if signi:\n","                short_idep_res_obj = (short_tpbox_p2exec_hhm, short_hlm) + get_res_info_nb_v2(sample_len, short_pr, short_total_pr, short_cum_pr, short_liqd)\n","            else:\n","                gs_idx = plot_info_v9(gs, gs_idx, len_df, sample_len, short_tr, short_tpbox_hhm, short_tpbox_p2exec_hhm, short_outbox_hhm, short_mean_low, short_hlm, short_trade_ticks, short_net_p1_frq, short_pr, short_total_pr,\n","                                      short_cum_pr, short_liqd, short_lvrg_arr.mean(), title_position, fontsize)\n","        # print(\"short plot_data elapsed time :\", time.time() - start_0)\n","\n","    except Exception as e:\n","        gs_idx += 1\n","        print(\"error in short plot_data :\", e)\n","\n","    try:\n","        # start_0 = time.time()\n","        if len_long == 0:\n","            long_pr = []\n","            gs_idx += 1\n","        else:\n","            long_tr = long_tr_arr.mean()\n","            long_pr, long_liqd = get_pr_v4(OrderSide.BUY, high, low, long_obj, long_tpout_arr, long_lvrg_arr, long_fee_arr, p_ranges, p_qty_ratio,\n","                                           inversion)\n","            long_total_pr = to_total_pr(len_df, long_pr, long_obj[-2])\n","            long_cum_pr = np.cumprod(long_total_pr)\n","            # long_hhm = long_net_p1_hhm\n","            long_hlm = hlm(long_pr, long_p2_true_bias_bool)\n","            long_trade_ticks = np.mean(long_obj[-2] - long_obj[-1])\n","            if signi:\n","                long_idep_res_obj = (long_tpbox_p2exec_hhm, long_hlm) + get_res_info_nb_v2(sample_len, long_pr, long_total_pr, long_cum_pr, long_liqd)\n","            else:\n","                gs_idx = plot_info_v9(gs, gs_idx, len_df, sample_len, long_tr, long_tpbox_hhm, long_tpbox_p2exec_hhm, long_outbox_hhm, long_mean_low, long_hlm, long_trade_ticks, long_net_p1_frq, long_pr, long_total_pr,\n","                                      long_cum_pr, long_liqd, long_lvrg_arr.mean(), title_position, fontsize)\n","        # print(\"long plot_data elapsed time :\", time.time() - start_0)\n","    except Exception as e:\n","        gs_idx += 1\n","        print(\"error in long plot_data :\", e)\n","\n","    try:\n","        # start_0 = time.time()\n","        if len_short * len_long == 0:\n","            both_pr = []\n","            gs_idx += 1\n","        else:\n","            both_tr = (short_tr + long_tr) / 2\n","            both_pr = np.vstack((short_pr, long_pr))  # for 2d arr, obj 를 1d 로 만들지 않는 이상, pr 은 2d 유지될 것\n","            both_total_pr = to_total_pr(len_df, both_pr, both_obj[-2])\n","            both_cum_pr = np.cumprod(both_total_pr)\n","            both_liqd = min(short_liqd, long_liqd)\n","            both_p2_true_bias_bool = np.hstack((short_p2_true_bias_bool, long_p2_true_bias_bool))  # hstack for 1d arr, vstack for 2d arr\n","            both_tpbox_hhm = (short_tpbox_hhm + long_tpbox_hhm) / 2\n","            both_tpbox_p2exec_hhm, both_hlm = (short_tpbox_p2exec_hhm + long_tpbox_p2exec_hhm) / 2, (short_hlm + long_hlm) / 2\n","            both_outbox_hhm = (short_outbox_hhm + long_outbox_hhm) / 2\n","            both_trade_ticks = np.mean(both_obj[-2] - both_obj[-1])\n","            both_net_p1_frq = short_net_p1_frq + long_net_p1_frq\n","            if signi:\n","                both_idep_res_obj = (both_tpbox_p2exec_hhm, both_hlm) + get_res_info_nb_v2(sample_len, both_pr, both_total_pr, both_cum_pr, both_liqd)\n","            else:\n","                gs_idx = plot_info_v9(gs, gs_idx, len_df, sample_len, both_tr, both_tpbox_hhm, both_tpbox_p2exec_hhm, both_outbox_hhm, both_mean_low, both_hlm, both_trade_ticks, both_net_p1_frq, both_pr, both_total_pr,\n","                                      both_cum_pr, both_liqd, lvrg_arr.mean(), title_position, fontsize)\n","        # print(\"both plot_data elapsed time :\", time.time() - start_0)\n","    except Exception as e:\n","        gs_idx += 1\n","        print(\"error in both plot_data :\", e)\n","\n","    if not signi:\n","        if len_short * len_long > 0:\n","            for obj, bias_arr, cum_pr in zip([short_obj, long_obj, both_obj], [short_p2_true_bias_bool, long_p2_true_bias_bool, both_p2_true_bias_bool],\n","                                             [short_cum_pr, long_cum_pr, both_cum_pr]):\n","                try:\n","                    # start_0 = time.time()\n","                    gs_idx = frq_dev_plot_v4(gs, gs_idx, len_df, sample_len, obj[-2], bias_arr, cum_pr[-1], fontsize)\n","                    # print(\"frq_dev_plot elapsed time :\", time.time() - start_0)\n","                except Exception as e:\n","                    gs_idx += 1\n","                    print(\"error in frq_dev_plot :\", e)\n","            plt.show()\n","            plt.close()\n","\n","        return short_pr, short_obj, short_lvrg_arr, short_fee_arr, short_tpout_arr, short_tr_arr, short_p2_true_bias_bool, short_p2_idx_arr, short_tp_1, short_tp_0, short_out_1, short_out_0, short_ep2_0, \\\n","               long_pr, long_obj, long_lvrg_arr, long_fee_arr, long_tpout_arr, long_tr_arr, long_p2_true_bias_bool, long_p2_idx_arr, long_tp_1, long_tp_0, long_out_1, long_out_0, long_ep2_0  # long_net_p1_idx_arr long_p2_idx_arr\n","\n","    else:\n","        return [short_idep_res_obj[:-1], long_idep_res_obj[:-1], both_idep_res_obj[:-1]]"],"metadata":{"id":"Eos0FoAgrfW5"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":260,"status":"ok","timestamp":1653436951068,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"oLDZobRcgg6E","outputId":"2f07e665-41ba-4c7e-b5d7-43fc14d09cd5"},"outputs":[{"data":{"text/plain":["Rolling [window=100,center=False,axis=0,method=single]"]},"execution_count":92,"metadata":{},"output_type":"execute_result"}],"source":["res_df.low.rolling(100) #> 1000"]},{"cell_type":"markdown","metadata":{"id":"_blyFhQJUd5X"},"source":["#### dump"]},{"cell_type":"code","source":["def get_pr_v4(open_side, h, l, obj, tpout, lvrg, fee, p_ranges, p_qty_ratio, inversion=False):  # --> 여기서 사용하는 ex_p = ex_p\n","\n","    en_p = obj[0]\n","    # ex_p = obj[1]\n","    tp, out = np.split(tpout, 2, axis=1)\n","    len_p = len(p_ranges)\n","    en_ps, tps, outs, lvrgs, fees = [np.tile(arr_, (1, len_p)) for arr_ in [en_p, tp, out, lvrg, fee]]\n","\n","    np_obj = np.array(obj).T[0]\n","    assert len(np_obj.shape) == 2\n","\n","    # iin == iout 인 경우 분리\n","    en_idx = np_obj[:, 2]\n","    ex_idx = np_obj[:, 3]\n","    equal_idx = en_idx == ex_idx    # equal_idx 는 어차피 out 임\n","    issue_idx = en_idx > ex_idx    # equal_idx 는 어차피 out 임\n","\n","    print('pass')\n","    idx_gap_ = (ex_idx - en_idx)[~equal_idx]\n","    print(\"en_idx[issue_idx] :\", en_idx[issue_idx])\n","    print(\"ex_idx[issue_idx] :\", ex_idx[issue_idx])\n","    print(\"idx_gap_[idx_gap_ <= 0] :\", idx_gap_[idx_gap_ <= 0])\n","\n","    min_low = np.full_like(en_p, np.nan)\n","    min_low[~equal_idx] = np.array([np.min(l[int(iin + 1):int(iout + 1)]) for _, _, iin, iout in np_obj[~equal_idx, :4]]).reshape(-1, 1)  # start from iin + 1 (tp 체결을 entry_idx 부터 보지 않음)\n","    max_high = np.full_like(en_p, np.nan)\n","    max_high[~equal_idx] = np.array([np.max(h[int(iin + 1):int(iout + 1)]) for _, _, iin, iout in np_obj[~equal_idx, :4]]).reshape(-1, 1)\n","\n","    if open_side == \"SELL\":\n","        p_tps = en_ps - (en_ps - tps) * p_ranges\n","        # min_low = np.full_like(en_p, np.nan)\n","        # min_low[~equal_idx] = np.array([np.min(l[int(iin + 1):int(iout + 1)]) for _, _, iin, iout in np_obj[~equal_idx, :4]]).reshape(-1, 1)  # start from iin + 1 (tp 체결을 entry_idx 부터 보지 않음)\n","        tp_idx = (np.tile(min_low, (1, len_p)) <= p_tps) * (np.tile(max_high, (1, len_p)) <= outs)  # entry_idx 포함해서 out touch 금지 (보수적 검증)\n","    else:\n","        p_tps = en_ps + (tps - en_ps) * p_ranges\n","        # max_high = np.full_like(en_p, np.nan)\n","        # max_high[~equal_idx] = np.array([np.max(h[int(iin + 1):int(iout + 1)]) for _, _, iin, iout in np_obj[~equal_idx, :4]]).reshape(-1, 1)\n","        tp_idx = (np.tile(max_high, (1, len_p)) >= p_tps) * (np.tile(min_low, (1, len_p)) >= outs)\n","\n","    ex_ps = outs.copy()\n","    ex_ps[tp_idx] = p_tps[tp_idx]\n","\n","    if open_side == \"SELL\":\n","        if not inversion:\n","            pr = ((en_ps / ex_ps - fees - 1) * lvrgs * p_qty_ratio).sum(axis=1) + 1\n","            # ------ liquidation ------ #\n","            max_high = np.full_like(en_p, np.nan)\n","            max_high[~equal_idx] = np.array([np.max(h[int(iin):int(iout)]) for _, _, iin, iout in np_obj[~equal_idx, :4]]).reshape(-1, 1)\n","            liqd = np.nanmin((en_p / max_high - fee - 1) * lvrg + 1)\n","        else:\n","            pr = ((ex_ps / en_ps - fees - 1) * lvrgs * p_qty_ratio).sum(axis=1) + 1\n","            # ------ liquidation ------ #\n","            min_low = np.full_like(en_p, np.nan)\n","            min_low[~equal_idx] = np.array([np.min(l[int(iin):int(iout)]) for _, _, iin, iout in np_obj[~equal_idx, :4]]).reshape(-1, 1)\n","            liqd = np.nanmin((min_low / en_p - fee - 1) * lvrg + 1)\n","    else:\n","        if not inversion:\n","            pr = ((ex_ps / en_ps - fees - 1) * lvrgs * p_qty_ratio).sum(axis=1) + 1\n","            # ------ liquidation ------ #\n","            min_low = np.full_like(en_p, np.nan)\n","            min_low[~equal_idx] = np.array([np.min(l[int(iin):int(iout)]) for _, _, iin, iout in np_obj[~equal_idx, :4]]).reshape(-1, 1)\n","            liqd = np.nanmin((min_low / en_p - fee - 1) * lvrg + 1)\n","        else:\n","            pr = ((en_ps / ex_ps - fees - 1) * lvrgs * p_qty_ratio).sum(axis=1) + 1\n","            # ------ liquidation ------ #\n","            max_high = np.full_like(en_p, np.nan)\n","            max_high[~equal_idx] = np.array([np.max(h[int(iin):int(iout)]) for _, _, iin, iout in np_obj[~equal_idx, :4]]).reshape(-1, 1)\n","            liqd = np.nanmin((en_p / max_high - fee - 1) * lvrg + 1)\n","\n","    return pr.reshape(-1, 1), liqd"],"metadata":{"id":"wDQWK3v5xOFa"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def idep_plot_v16(res_df, len_df, config, high, low, open_info_df1, paired_res, inversion=False, sample_ratio=0.7, title_position=(0.5, 0.5),\n","                  fontsize=15, signi=False):  # open_idx, side_arr\n","    if not signi:\n","        plt.style.use(['dark_background', 'fast'])\n","        plt.figure(figsize=(24, 8))\n","        gs = gridspec.GridSpec(nrows=2,  # row 몇 개\n","                               ncols=3,  # col 몇 개\n","                               height_ratios=[10, 1]\n","                               # height_ratios=[10, 10, 1]\n","                               )\n","    gs_idx = 0\n","    # plt.suptitle(key)\n","\n","    p_ranges, p_qty_ratio = literal_eval(config.tp_set.p_ranges), literal_eval(config.tp_set.p_qty_ratio)\n","    assert np.sum(p_qty_ratio) == 1.0\n","    assert len(p_ranges) == len(p_qty_ratio)\n","\n","    if sample_ratio is not None:\n","        sample_len = int(len_df * sample_ratio)\n","    else:\n","        sample_len = len_df\n","\n","    # ------ short & long data preparation ------ #\n","    # start_0 = time.time()\n","\n","    net_p1_idx_arr, p1_idx_arr, p2_idx_arr, pair_idx_arr, pair_price_arr, lvrg_arr, fee_arr, tpout_arr, tr_arr = paired_res\n","    assert len(p1_idx_arr) != 0, \"assert len(p1_idx_arr) != 0\"\n","\n","    short_net_p1_idx_arr = net_p1_idx_arr[np.where(open_info_df1.side.loc[net_p1_idx_arr] == OrderSide.SELL)[0]]\n","    long_net_p1_idx_arr = net_p1_idx_arr[np.where(open_info_df1.side.loc[net_p1_idx_arr] == OrderSide.BUY)[0]]\n","\n","    short_net_p1_frq = len(short_net_p1_idx_arr)\n","    long_net_p1_frq = len(long_net_p1_idx_arr)\n","    # print(\"len(short_net_p1_true_bias_bool) :\", len(short_net_p1_idx_arr))\n","    # print(\"len(long_net_p1_true_bias_bool) :\", len(long_net_p1_idx_arr))\n","\n","    short_p1_openi_idx = np.where(open_info_df1.side.loc[p1_idx_arr] == OrderSide.SELL)[0]  # p1_idx_arr 에 대한 idx, # side_arr,\n","    long_p1_openi_idx = np.where(open_info_df1.side.loc[p1_idx_arr] == OrderSide.BUY)[0]\n","\n","    # p1_idx = open_idx[p1_openi_arr].reshape(-1, 1)   # != p1_idx_arr, p1_openi_arr 은 exit_done 기준임\n","\n","    np_obj = np.hstack((pair_price_arr, pair_idx_arr, p1_idx_arr.reshape(-1, 1)))  # p1_idx_arr is 1d, need to be changed to 2d (for stacking)\n","    short_obj = np_obj[short_p1_openi_idx]\n","    long_obj = np_obj[long_p1_openi_idx]\n","    both_obj = np.vstack((short_obj, long_obj))\n","    print(\"short_obj.shape :\", short_obj.shape)\n","    print(\"long_obj.shape :\", long_obj.shape)\n","\n","    short_obj, long_obj, both_obj = [np.split(obj_, 5, axis=1) for obj_ in [short_obj, long_obj, both_obj]]\n","\n","    short_p2_idx_arr, long_p2_idx_arr = [p2_idx_arr[openi_idx_].reshape(-1, 1) for openi_idx_ in [short_p1_openi_idx, long_p1_openi_idx]]\n","    short_lvrg_arr, long_lvrg_arr = [lvrg_arr[openi_idx_].reshape(-1, 1) for openi_idx_ in [short_p1_openi_idx, long_p1_openi_idx]]\n","    short_fee_arr, long_fee_arr = [fee_arr[openi_idx_].reshape(-1, 1) for openi_idx_ in [short_p1_openi_idx, long_p1_openi_idx]]\n","    short_tpout_arr, long_tpout_arr = [tpout_arr[openi_idx_] for openi_idx_ in [short_p1_openi_idx, long_p1_openi_idx]]\n","    # short_bias_arr, long_bias_arr = [bias_arr[openi_idx_] for openi_idx_ in [short_p1_openi_idx, long_p1_openi_idx]]\n","    short_tr_arr, long_tr_arr = [tr_arr[openi_idx_] for openi_idx_ in [short_p1_openi_idx, long_p1_openi_idx]]\n","    # print(\"long_bias_arr.shape :\", long_bias_arr.shape)\n","    # print(\"short / long arr setting elapsed time :\", time.time() - start_0)\n","\n","    # start_0 = time.time()\n","\n","    short_tpbox_hhm, long_tpbox_hhm, short_tpbox_p2exec_hhm, long_tpbox_p2exec_hhm, short_outbox_hhm, long_outbox_hhm, short_p2_true_bias_bool, long_p2_true_bias_bool, \\\n","          short_tp_1, short_tp_0, long_tp_1, long_tp_0, short_out_1, short_out_0, long_out_1, long_out_0, short_ep2_0, long_ep2_0 = \\\n","      get_wave_bias_v5(res_df, config, high, low, len_df, short_net_p1_idx_arr, long_net_p1_idx_arr, short_p2_idx_arr, long_p2_idx_arr, short_obj, long_obj)\n","\n","    # print(\"get_wave_bias elapsed time :\", time.time() - start_0)\n","\n","    len_short, len_long = len(short_p1_openi_idx), len(long_p1_openi_idx)\n","\n","    # ------ plot_data ------ #\n","    try:\n","        # start_0 = time.time()\n","        if len_short == 0:\n","            short_pr = []\n","            gs_idx += 1\n","        else:\n","            short_tr = short_tr_arr.mean()\n","            short_pr, short_liqd = get_pr_v4(OrderSide.SELL, high, low, short_obj, short_tpout_arr, short_lvrg_arr, short_fee_arr, p_ranges,\n","                                             p_qty_ratio, inversion)\n","            short_total_pr = to_total_pr(len_df, short_pr, short_obj[-2])\n","            short_cum_pr = np.cumprod(short_total_pr)\n","            short_hlm = hlm(short_pr, short_p2_true_bias_bool)\n","            short_trade_ticks = np.mean(short_obj[-2] - short_obj[-1])\n","            if signi:\n","                short_idep_res_obj = (short_tpbox_p2exec_hhm, short_hlm) + get_res_info_nb_v2(sample_len, short_pr, short_total_pr, short_cum_pr, short_liqd)\n","            else:\n","                gs_idx = plot_info_v8(gs, gs_idx, len_df, sample_len, short_tr, short_tpbox_hhm, short_tpbox_p2exec_hhm, short_outbox_hhm, short_hlm, short_trade_ticks, short_net_p1_frq, short_pr, short_total_pr,\n","                                      short_cum_pr, short_liqd, short_lvrg_arr.mean(), title_position, fontsize)\n","        # print(\"short plot_data elapsed time :\", time.time() - start_0)\n","\n","    except Exception as e:\n","        gs_idx += 1\n","        print(\"error in short plot_data :\", e)\n","\n","    try:\n","        # start_0 = time.time()\n","        if len_long == 0:\n","            long_pr = []\n","            gs_idx += 1\n","        else:\n","            long_tr = long_tr_arr.mean()\n","            long_pr, long_liqd = get_pr_v4(OrderSide.BUY, high, low, long_obj, long_tpout_arr, long_lvrg_arr, long_fee_arr, p_ranges, p_qty_ratio,\n","                                           inversion)\n","            long_total_pr = to_total_pr(len_df, long_pr, long_obj[-2])\n","            long_cum_pr = np.cumprod(long_total_pr)\n","            # long_hhm = long_net_p1_hhm\n","            long_hlm = hlm(long_pr, long_p2_true_bias_bool)\n","            long_trade_ticks = np.mean(long_obj[-2] - long_obj[-1])\n","            if signi:\n","                long_idep_res_obj = (long_tpbox_p2exec_hhm, long_hlm) + get_res_info_nb_v2(sample_len, long_pr, long_total_pr, long_cum_pr, long_liqd)\n","            else:\n","                gs_idx = plot_info_v8(gs, gs_idx, len_df, sample_len, long_tr, long_tpbox_hhm, long_tpbox_p2exec_hhm, long_outbox_hhm, long_hlm, long_trade_ticks, long_net_p1_frq, long_pr, long_total_pr,\n","                                      long_cum_pr, long_liqd, long_lvrg_arr.mean(), title_position, fontsize)\n","        # print(\"long plot_data elapsed time :\", time.time() - start_0)\n","    except Exception as e:\n","        gs_idx += 1\n","        print(\"error in long plot_data :\", e)\n","\n","    try:\n","        # start_0 = time.time()\n","        if len_short * len_long == 0:\n","            both_pr = []\n","            gs_idx += 1\n","        else:\n","            both_tr = (short_tr + long_tr) / 2\n","            both_pr = np.vstack((short_pr, long_pr))  # for 2d arr, obj 를 1d 로 만들지 않는 이상, pr 은 2d 유지될 것\n","            both_total_pr = to_total_pr(len_df, both_pr, both_obj[-2])\n","            both_cum_pr = np.cumprod(both_total_pr)\n","            both_liqd = min(short_liqd, long_liqd)\n","            both_p2_true_bias_bool = np.hstack((short_p2_true_bias_bool, long_p2_true_bias_bool))  # hstack for 1d arr, vstack for 2d arr\n","            both_tpbox_hhm = (short_tpbox_hhm + long_tpbox_hhm) / 2\n","            both_tpbox_p2exec_hhm, both_hlm = (short_tpbox_p2exec_hhm + long_tpbox_p2exec_hhm) / 2, (short_hlm + long_hlm) / 2\n","            both_outbox_hhm = (short_outbox_hhm + long_outbox_hhm) / 2\n","            both_trade_ticks = np.mean(both_obj[-2] - both_obj[-1])\n","            both_net_p1_frq = short_net_p1_frq + long_net_p1_frq\n","            if signi:\n","                both_idep_res_obj = (both_tpbox_p2exec_hhm, both_hlm) + get_res_info_nb_v2(sample_len, both_pr, both_total_pr, both_cum_pr, both_liqd)\n","            else:\n","                gs_idx = plot_info_v8(gs, gs_idx, len_df, sample_len, both_tr, both_tpbox_hhm, both_tpbox_p2exec_hhm, both_outbox_hhm, both_hlm, both_trade_ticks, both_net_p1_frq, both_pr, both_total_pr,\n","                                      both_cum_pr, both_liqd, lvrg_arr.mean(), title_position, fontsize)\n","        # print(\"both plot_data elapsed time :\", time.time() - start_0)\n","    except Exception as e:\n","        gs_idx += 1\n","        print(\"error in both plot_data :\", e)\n","\n","    if not signi:\n","        if len_short * len_long > 0:\n","            for obj, bias_arr, cum_pr in zip([short_obj, long_obj, both_obj], [short_p2_true_bias_bool, long_p2_true_bias_bool, both_p2_true_bias_bool],\n","                                             [short_cum_pr, long_cum_pr, both_cum_pr]):\n","                try:\n","                    # start_0 = time.time()\n","                    gs_idx = frq_dev_plot_v4(gs, gs_idx, len_df, sample_len, obj[-2], bias_arr, cum_pr[-1], fontsize)\n","                    # print(\"frq_dev_plot elapsed time :\", time.time() - start_0)\n","                except Exception as e:\n","                    gs_idx += 1\n","                    print(\"error in frq_dev_plot :\", e)\n","            plt.show()\n","            plt.close()\n","\n","        return short_pr, short_obj, short_lvrg_arr, short_fee_arr, short_tpout_arr, short_tr_arr, short_p2_true_bias_bool, short_p2_idx_arr, short_tp_1, short_tp_0, short_out_1, short_out_0, short_ep2_0, \\\n","               long_pr, long_obj, long_lvrg_arr, long_fee_arr, long_tpout_arr, long_tr_arr, long_p2_true_bias_bool, long_p2_idx_arr, long_tp_1, long_tp_0, long_out_1, long_out_0, long_ep2_0  # long_net_p1_idx_arr long_p2_idx_arr\n","\n","    else:\n","        return [short_idep_res_obj[:-1], long_idep_res_obj[:-1], both_idep_res_obj[:-1]]"],"metadata":{"id":"6G92q_bExTVn"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"oE5zkT75Beiy"},"outputs":[],"source":["\n","# ------------ plot survey_res ------------ #\n","title_list = [\"short\", \"long\", \"both\"]\n","sub_title_list = ['prcn', 'wb', 'len_pr', 'dpf', 'wr', 'sr', 'acc_pr', 'sum_pr', 'min_pr', 'liqd', 'acc_mdd', 'sum_mdd']\n","space_ = \" \" * 120\n","\n","fig = plt.figure(figsize=(24, 8))\n","plt.style.use('dark_background')\n","gs = gridspec.GridSpec(nrows=1,\n","                        ncols=3,\n","                        # height_ratios=[1, 1, 1]\n","                      )\n","# nrows, ncols, h_r = 3, 3, [1, 1, 1]\n","nrows, ncols, h_r = 3, 4, [1, 1, 1]\n","# nrows, ncols, h_r = 4, 3, [1, 1, 1, 1]\n","# if d_idx == 0:\n","# else:\n","  # nrows, ncols, h_r = 2, 2, [1, 1]\n","\n","for d_idx, (title_name, survey_res) in enumerate(zip(title_list, survey_res_list)):  \n","  inner_gs = gs[d_idx].subgridspec(nrows=nrows,\n","                        ncols=ncols,\n","                        height_ratios=h_r\n","                      )\n","  for in_idx, (data_, sub_title) in enumerate(zip(survey_res.T, sub_title_list)):\n","    plt.subplot(inner_gs[in_idx])\n","    data = data_.ravel()\n","    valid_idx = ~np.isnan(data)\n","    if np.sum(valid_idx) > 0:\n","      if type(val_list[0]) == str:\n","        x, y = np.arange(len(val_list))[valid_idx], data[valid_idx]\n","      else:\n","        x, y = val_list[valid_idx], data[valid_idx]\n","      plt.plot(x, y)  # 앞에서부터 len(result) 만큼만    \n","      plt.title(sub_title + '_{:.2f}'.format(x[np.argmax(y)]))\n","    else:\n","      plt.title(sub_title)\n","\n","plt.suptitle(space_.join(title_list))\n","plt.show()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"pbYUlJl34ImU"},"outputs":[],"source":["# ------ open validation ------ #\n","pos_side = \"SELL\" # SELL BUY\n","\n","if pos_side == \"SELL\":\n","  open_ = res_df['short_open1_{}'.format(config.selection_id)].to_numpy()\n","  open_ts = list(map(lambda x : str(x), res_df.index[open_ == 1]))  \n","else:\n","  open_ = res_df['long_open1_{}'.format(config.selection_id)].to_numpy()\n","  open_ts = list(map(lambda x : str(x), res_df.index[open_ == 1]))  "]},{"cell_type":"code","execution_count":null,"metadata":{"id":"wyYMYcxx4ImV"},"outputs":[],"source":["pos_index = open_info_df1.side == pos_side\n","for ts in res_df.index[open_info_df1.index[pos_index]]:\n","  print(ts)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"6YcqQQzsl6Ys"},"outputs":[],"source":["\n","def hlm(pr_list, true_bool):   # true_pr in true_bias / true_bias\n","  true_bias_pr = pr_list[true_bool].ravel()\n","  print(\"len(pr_list) :\", len(pr_list))\n","  print(\"len(true_bias_pr) :\", len(true_bias_pr))\n","  print(\"np.sum(pr_list > 1) :\", np.sum(pr_list > 1))\n","  print(\"np.sum(true_bias_pr > 1) :\", np.sum(true_bias_pr > 1))\n","  return np.sum(true_bias_pr > 1) / len(true_bias_pr)  # 차원을 고려한 계산"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"t7a5Hyyyd5Lk"},"outputs":[],"source":["\n","def get_wave_bias_v5_1(res_df, config, high, low, len_df, short_net_p1_idx_arr, long_net_p1_idx_arr, short_p2_idx_arr, long_p2_idx_arr, short_obj, long_obj):\n","\n","    short_net_p1_idx = short_net_p1_idx_arr.astype(int) #.reshape(-1, 1)\n","    short_p1_idx = short_obj[-1].astype(int).ravel()\n","    short_p2_idx = short_p2_idx_arr.astype(int).ravel() #.reshape(-1, 1)\n","    short_en_idx = short_obj[2].astype(int)\n","\n","    short_prime_net_p1_bool = short_net_p1_idx - pd.Series(short_net_p1_idx).shift(1).to_numpy() > 1\n","    short_prime_net_p1_bool[0] = True\n","    short_prime_net_p1_idx = short_net_p1_idx[short_prime_net_p1_bool]\n","    \n","    short_prime_p2_bool = short_p2_idx - pd.Series(short_p2_idx).shift(1).to_numpy() > 1\n","    short_prime_p2_bool[0] = True\n","    short_prime_p2_idx = short_p2_idx[short_prime_p2_bool]\n","    \n","    short_tp_1 = ffill_line(res_df['short_tp_1_{}'.format(config.selection_id)].to_numpy(), short_prime_net_p1_idx)  # net_p1_idx ~ net_p1_idx' 사이에 대한 momentum 조사 (net 이유는 logic's validation)\n","    short_tp_0 = ffill_line(res_df['short_tp_0_{}'.format(config.selection_id)].to_numpy(), short_prime_net_p1_idx)\n","    short_out_1 = ffill_line(res_df['short_out_1_{}'.format(config.selection_id)].to_numpy(), short_prime_p2_idx)  # 체결된, p2_idx ~ p2_idx' 사이에 대한 momentum 조사\n","    short_out_0 = ffill_line(res_df['short_out_0_{}'.format(config.selection_id)].to_numpy(), short_prime_p2_idx)\n","    short_ep2_0 = ffill_line(res_df['short_ep2_0_{}'.format(config.selection_id)].to_numpy(), short_prime_p2_idx)\n","    # short_net_wave_1 = ffill_line(res_df['short_wave_1_{}'.format(config.selection_id)].to_numpy(), short_op_idx)  # en_idx 에 sync 된 open_idx 를 사용해야함\n","    # short_net_wave_0 = ffill_line(res_df['short_wave_0_{}'.format(config.selection_id)].to_numpy(), short_op_idx)\n","\n","    long_net_p1_idx = long_net_p1_idx_arr.astype(int) #.reshape(-1, 1)\n","    long_p1_idx = long_obj[-1].astype(int).ravel()\n","    long_p2_idx = long_p2_idx_arr.astype(int).ravel() #.reshape(-1, 1)\n","    long_en_idx = long_obj[2].astype(int)\n","\n","    long_prime_net_p1_bool = long_net_p1_idx - pd.Series(long_net_p1_idx).shift(1).to_numpy() > 1\n","    long_prime_net_p1_bool[0] = True\n","    long_prime_net_p1_idx = long_net_p1_idx[long_prime_net_p1_bool]\n","    \n","    long_prime_p2_bool = long_p2_idx - pd.Series(long_p2_idx).shift(1).to_numpy() > 1\n","    long_prime_p2_bool[0] = True\n","    long_prime_p2_idx = long_p2_idx[long_prime_p2_bool]\n","    \n","    long_tp_1 = ffill_line(res_df['long_tp_1_{}'.format(config.selection_id)].to_numpy(), long_prime_net_p1_idx)\n","    long_tp_0 = ffill_line(res_df['long_tp_0_{}'.format(config.selection_id)].to_numpy(), long_prime_net_p1_idx)\n","    long_out_1 = ffill_line(res_df['long_out_1_{}'.format(config.selection_id)].to_numpy(), long_prime_p2_idx)  # 체결된, p2_idx ~ p2_idx' 사이에 대한 momentum 조사\n","    long_out_0 = ffill_line(res_df['long_out_0_{}'.format(config.selection_id)].to_numpy(), long_prime_p2_idx)\n","    long_ep2_0 = ffill_line(res_df['long_ep2_0_{}'.format(config.selection_id)].to_numpy(), long_prime_p2_idx)\n","\n","    short_unq_p1_idx = np.unique(short_p1_idx)  #.reshape(-1, 1)   # 통일성을 위해 2d 로 설정\n","    long_unq_p1_idx = np.unique(long_p1_idx)  #.reshape(-1, 1)\n","\n","    bias_info_tick = config.tr_set.bias_info_tick\n","\n","    # print(\"long_net_p1_idx.shape :\", long_net_p1_idx.shape)\n","    # print(\"long_en_idx.shape :\", long_en_idx.shape)\n","\n","    # ================== touch idx ================== #\n","    # 1. min 에 초점을 맞추는 거니까, touch 없을시 len_df 로 설정\n","    # 2. future_data 사용이니까, shift(-bias_info_tick) 설정\n","    # 3. entry 다음 idx 부터 -> tp & out 체결 logic 이 현재 entry_idx 부터 되어있어서 취소\n","    # Todo, high 와 low 중 어디에 먼저닿느냐가 중요함을 key 로 잡고만든 logic 임\n","    len_df_range = np.arange(len_df)\n","    last_idx = len_df - 1  # nan 발생하면 대소 비교로 hhm 확인이 불가능해짐\n","    shift_range = bias_info_tick - 1  # entry_idx 까지 포함해서 wave_bias check\n","\n","    # ------------ pair & idxs ------------ #\n","    short_net_p1_pair = list(zip(short_net_p1_idx, np.append(short_net_p1_idx[1:], last_idx)))\n","    long_net_p1_pair = list(zip(long_net_p1_idx, np.append(long_net_p1_idx[1:], last_idx)))\n","\n","    short_p2_pair = list(zip(short_p2_idx, np.append(short_p2_idx[1:], last_idx)))\n","    long_p2_pair = list(zip(long_p2_idx, np.append(long_p2_idx[1:], last_idx)))\n","\n","    short_tp_1_touch_idxs = np.where(low <= short_tp_1, len_df_range, last_idx)   #.rolling(bias_info_tick, min_periods=1).min().shift(-shift_range).to_numpy()\n","    short_tp_0_touch_idxs = np.where(high >= short_tp_0, len_df_range, last_idx)   #.rolling(bias_info_tick, min_periods=1).min().shift(-shift_range).to_numpy()\n","    long_tp_1_touch_idxs = np.where(high >= long_tp_1, len_df_range, last_idx)   #.rolling(bias_info_tick, min_periods=1).min().shift(-shift_range).to_numpy()\n","    long_tp_0_touch_idxs = np.where(low <= long_tp_0, len_df_range, last_idx)   #.rolling(bias_info_tick, min_periods=1).min().shift(-shift_range).to_numpy()\n","\n","    short_out_1_touch_idxs = np.where(low <= short_out_1, len_df_range, last_idx)   #.rolling(bias_info_tick, min_periods=1).min().shift(-shift_range).to_numpy()\n","    short_out_0_touch_idxs = np.where(high >= short_out_0, len_df_range, last_idx)   #.rolling(bias_info_tick, min_periods=1).min().shift(-shift_range).to_numpy()\n","    long_out_1_touch_idxs = np.where(high >= long_out_1, len_df_range, last_idx)   #.rolling(bias_info_tick, min_periods=1).min().shift(-shift_range).to_numpy()\n","    long_out_0_touch_idxs = np.where(low <= long_out_0, len_df_range, last_idx)   #.rolling(bias_info_tick, min_periods=1).min().shift(-shift_range).to_numpy()\n","\n","    # ------------ min touch_idx ------------ #\n","    short_tp_1_touch_idx = get_touch_idx_fill(short_tp_1_touch_idxs, short_net_p1_pair, short_net_p1_idx, len_df)  # pair means 구간\n","    short_tp_0_touch_idx = get_touch_idx_fill(short_tp_0_touch_idxs, short_net_p1_pair, short_net_p1_idx, len_df)\n","    long_tp_1_touch_idx = get_touch_idx_fill(long_tp_1_touch_idxs, long_net_p1_pair, long_net_p1_idx, len_df)\n","    long_tp_0_touch_idx = get_touch_idx_fill(long_tp_0_touch_idxs, long_net_p1_pair, long_net_p1_idx, len_df)\n","\n","    short_out_1_touch_idx = get_touch_idx_fill(short_out_1_touch_idxs, short_p2_pair, short_p2_idx, len_df)  # pair means 구간\n","    short_out_0_touch_idx = get_touch_idx_fill(short_out_0_touch_idxs, short_p2_pair, short_p2_idx, len_df)\n","    long_out_1_touch_idx = get_touch_idx_fill(long_out_1_touch_idxs, long_p2_pair, long_p2_idx, len_df)\n","    long_out_0_touch_idx = get_touch_idx_fill(long_out_0_touch_idxs, long_p2_pair, long_p2_idx, len_df)\n","\n","    # ------------ point's touch_idx ------------ #\n","    short_tp_1_net_p1_touch_idx = short_tp_1_touch_idx[short_net_p1_idx]   # for tp_box's net_hhm\n","    short_tp_0_net_p1_touch_idx = short_tp_0_touch_idx[short_net_p1_idx]\n","    long_tp_1_net_p1_touch_idx = long_tp_1_touch_idx[long_net_p1_idx]\n","    long_tp_0_net_p1_touch_idx = long_tp_0_touch_idx[long_net_p1_idx]\n","    # print(\"long_tp_1_net_p1_touch_idx :\", long_tp_1_net_p1_touch_idx)\n","\n","    short_tp_1_unq_p1_touch_idx = short_tp_1_touch_idx[short_unq_p1_idx]    # p2 까지 체결된 p1's hhm\n","    short_tp_0_unq_p1_touch_idx = short_tp_0_touch_idx[short_unq_p1_idx]\n","    long_tp_1_unq_p1_touch_idx = long_tp_1_touch_idx[long_unq_p1_idx]\n","    long_tp_0_unq_p1_touch_idx = long_tp_0_touch_idx[long_unq_p1_idx]\n","\n","    short_tp_1_p2_touch_idx = short_tp_1_touch_idx[short_p2_idx]    # hlm 을 위한 hhm (on p2)\n","    short_tp_0_p2_touch_idx = short_tp_0_touch_idx[short_p2_idx]\n","    long_tp_1_p2_touch_idx = long_tp_1_touch_idx[long_p2_idx]\n","    long_tp_0_p2_touch_idx = long_tp_0_touch_idx[long_p2_idx]\n","\n","    short_out_1_p2_touch_idx = short_out_1_touch_idx[short_p2_idx]   # for out_box's executed_hhm\n","    short_out_0_p2_touch_idx = short_out_0_touch_idx[short_p2_idx]\n","    long_out_1_p2_touch_idx = long_out_1_touch_idx[long_p2_idx]\n","    long_out_0_p2_touch_idx = long_out_0_touch_idx[long_p2_idx]\n","\n","    # ------------------ bias_bool & hhm ------------------ #\n","    short_net_p1_true_bias_bool = short_tp_1_net_p1_touch_idx < short_tp_0_net_p1_touch_idx  # true_bias 의 조건\n","    short_net_p1_false_bias_bool = short_tp_1_net_p1_touch_idx >= short_tp_0_net_p1_touch_idx  # false_bias 의 조건, ~true_bias_bool 와 같지 않음, why ..? = en_idx\n","    long_net_p1_true_bias_bool = long_tp_1_net_p1_touch_idx < long_tp_0_net_p1_touch_idx\n","    long_net_p1_false_bias_bool = long_tp_1_net_p1_touch_idx >= long_tp_0_net_p1_touch_idx\n","\n","    short_unq_p1_true_bias_bool = short_tp_1_unq_p1_touch_idx < short_tp_0_unq_p1_touch_idx  # true_bias 의 조건\n","    short_unq_p1_false_bias_bool = short_tp_1_unq_p1_touch_idx >= short_tp_0_unq_p1_touch_idx  # false_bias 의 조건, ~true_bias_bool 와 같지 않음, why ..? = en_idx    \n","    long_unq_p1_true_bias_bool = long_tp_1_unq_p1_touch_idx < long_tp_0_unq_p1_touch_idx\n","    long_unq_p1_false_bias_bool = long_tp_1_unq_p1_touch_idx >= long_tp_0_unq_p1_touch_idx\n","\n","    short_p2_true_bias_bool = short_tp_1_p2_touch_idx < short_tp_0_p2_touch_idx\n","    short_p2_false_bias_bool = short_tp_1_p2_touch_idx >= short_tp_0_p2_touch_idx\n","    long_p2_true_bias_bool = long_tp_1_p2_touch_idx < long_tp_0_p2_touch_idx\n","    long_p2_false_bias_bool = long_tp_1_p2_touch_idx >= long_tp_0_p2_touch_idx\n","\n","    short_p2_out_true_bias_bool = short_out_1_p2_touch_idx < short_out_0_p2_touch_idx\n","    short_p2_out_false_bias_bool = short_out_1_p2_touch_idx >= short_out_0_p2_touch_idx\n","    long_p2_out_true_bias_bool = long_out_1_p2_touch_idx < long_out_0_p2_touch_idx\n","    long_p2_out_false_bias_bool = long_out_1_p2_touch_idx >= long_out_0_p2_touch_idx\n","\n","    short_net_p1_hhm = hhm(short_net_p1_true_bias_bool, short_net_p1_false_bias_bool)\n","    long_net_p1_hhm = hhm(long_net_p1_true_bias_bool, long_net_p1_false_bias_bool)\n","\n","    short_p1_hhm = hhm(short_unq_p1_true_bias_bool, short_unq_p1_false_bias_bool)\n","    long_p1_hhm = hhm(long_unq_p1_true_bias_bool, long_unq_p1_false_bias_bool)\n","\n","    # short_p2_hhm = hhm(short_p2_true_bias_bool, short_p2_false_bias_bool)\n","    # long_p2_hhm = hhm(long_p2_true_bias_bool, long_p2_false_bias_bool)\n","\n","    short_out_hhm = hhm(short_p2_out_true_bias_bool, short_p2_out_false_bias_bool)\n","    long_out_hhm = hhm(long_p2_out_true_bias_bool, long_p2_out_false_bias_bool)\n","\n","    # print(\"short_net_p1_hhm, short_p2_hhm, short_out_hhm :\", short_net_p1_hhm, short_p2_hhm, short_out_hhm)\n","\n","    return short_net_p1_hhm, long_net_p1_hhm, short_p1_hhm, long_p1_hhm, short_out_hhm, long_out_hhm, short_p2_true_bias_bool, long_p2_true_bias_bool, \\\n","          short_tp_1[short_en_idx], short_tp_0[short_en_idx], long_tp_1[long_en_idx], long_tp_0[long_en_idx], \\\n","          short_out_1[short_en_idx], short_out_0[short_en_idx], long_out_1[long_en_idx], long_out_0[long_en_idx], short_ep2_0[short_en_idx], long_ep2_0[long_en_idx]   # plot_check 을 위해 en_idx 넣음\n","          "]},{"cell_type":"code","execution_count":null,"metadata":{"id":"dsI-R8Zz7ls1"},"outputs":[],"source":["\n","        # tr_arr = res_df['{}_tr_{}'.format(side_pos, selection_id)].to_numpy()\n","\n","        # ------ point1 & 2's tp_j ------ #\n","        # point_idxgap = point_idxgap_arr[op_idx]\n","        # if np.isnan(point_idxgap):\n","        #     continue\n","        # else:\n","        #     # ------ allow point2 only next to point1 ------ #\n","        #     open_arr = res_df['{}_open_{}'.format(side_pos, selection_id)].to_numpy()\n","        #     tp_j = int(op_idx - point_idxgap)\n","        #     if np.sum(open_arr[tp_j:op_idx]) != 0:\n","        #         continue"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":157},"executionInfo":{"elapsed":350,"status":"ok","timestamp":1652751452213,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"gMur2u8WeQ2K","outputId":"7b506c38-7a8f-4bd1-a021-8a065d009882"},"outputs":[{"data":{"image/png":"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NmzYYN58883Y+127dpldu3ZlpO/KysoFG9ShoSFTWlpqpLkENDQ0ZCSZ559/3oRCoSX1QqGQef7552PHr9QrLS01g4ODsePz6yXqI5Xy97//3dx9991ZE/fVV19tPvjgA1NfX2/Onj1rCgoKlqyBN99802zYsMFIMgUFBebs2bNx18WVesnWT6I+7JSysjLz9ttvm29/+9uxJOn3mKX4G1Q/r4/rr7/enDhxYslxP8e8uNxzzz3mX//6l+/jvummm8zJkydNcXGxKSgoMO3t7aaxsTEr1jVlecpy5udsKtmWi/1csjX3+rnkQp71YyGnxi858yu+ZWVlGhsbi70fHx9XWVnZssRy44036tSpU5KkU6dO6cYbb0waY7Lj4+PjS44n68OpyspK1dXV6ejRo76POz8/Xz09PTpz5ow6Ozs1MjKizz//XLOzs0v6mR/b7OysZmZmtHbtWsdjWbt2bcI+7Pjtb3+rn/zkJ7p06ZIkJW3PLzFLkjFGb731lrq7u7V9+3ZJ/l7X1dXVOnv2rP74xz/q2LFj2r9/v6655hpfx7xYKBTSX/7yl6Rt+iHuyclJ/epXv9LJkyf16aefamZmRh988EFWrGssDz/lZ7/KplycDbI19/pZLuRZPyKnxpczG1Q/M8b4so9rr71Wr732mh5//HF98cUXnrTplJM+Ll26pLq6OpWXl6u+vl5f+9rX0hiZe9/97nd15syZrPza729961tav369tmzZokcffVS33377kjp+Wh+rVq3SunXrtHfvXq1bt07//e9/tWvXrpTbcyOVPgoLC7V161YdOnTIszadsttHIBBQU1OTqqurddNNN+naa6/V5s2b0xwdkLuyLRf7XTbnXj/L9jzrV+TU+HJmgzoxMaGKiorY+/Lyck1MTCxLLKdPn1ZpaakkqbS0VGfOnEkaY7Lj5eXlS44n68OuVatW6bXXXtNLL72k119/PWvilqSZmRm98847+uY3v6lAIKCCgoIl/cyPraCgQGvWrNFnn33meCyfffZZwj6sbNy4UVu3btXo6KhaW1v1ne98R3v27PF1zFdMTk5Kks6ePavXX39d9fX1vl4f4+PjGh8f1/vvvy9JevXVV7Vu3Tpfxzzfli1bdOzYsdi1fo777rvv1ujoqKampnTx4kX97W9/08aNG7NiXWN5+Ck/+00252K/yubc62fZnmf9ipwaX85sUMPhsGpqalRVVaXCwkKFQiG1tbUtSyxtbW3atm2bJGnbtm164403YsevfFtZQ0ODZmZmdOrUKXV0dKixsVGBQECBQECNjY3q6OjQqVOn9J///EcNDQ2S5r71bH5b8fqw68CBAxocHNRvfvObrIi7pKREa9askSStXr1a99xzjwYHB/XOO+/o3nvvjRvzlX7uvfdeHTlyJHY8FAqpqKhIVVVVqqmp0fvvv590/STqw8qTTz6piooKVVdXKxQK6ciRI/rBD37g65gl6ZprrtF1110X+3NjY6OOHz/u6/Vx+vRpjY2N6ZZbbpEk3XXXXRoYGPB1zPPdf//9sV/vTdamH+I+efKkNmzYoKuvvnrBXPt9XWP5+Ck/+0225eJskK251++yPc/6FTk1sWX/h7BelS1btpiPP/7YRKNR8+STT2akz5dfftlMTk6a8+fPm7GxMfPDH/7QfOUrXzFvv/22GR4eNp2dnaa4uDhW/3e/+52JRqPmww8/NOvXr48df/DBB00kEjGRSMQ88MADsePr1683/f39JhqNmueeey52PFkfVmXjxo3GGGP6+vpMT0+P6enpMVu2bPF13F//+tfNsWPHTF9fn+nv7zc/+9nPjCRTXV1tjh49aiKRiHnllVdMUVGRkWSuuuoq88orr5hIJGKOHj1qqqurY209+eSTJhqNmqGhodg3xCVbP4n6cFLuuOOO2Bc1+D3m6upq09vba3p7e83x48dj7fp5fUgyt956qwmHw6avr8+8/vrrJhAI+D5mSeaaa64xU1NT5vrrr7fVph/ifuqpp8zg4KDp7+83L774oikqKvL9uqYsb1mO/Oz3ko25ONtKNuXebCjZmmf9XsipS0ve5T8AAAAAALCscuZXfAEAAAAA2Y0NKgAAAADAF9igAgAAAAB8gQ0qAAAAAMAX2KACAAAAAHyBDSoAAAAAwBfYoAIAAAAAfIENKgAAAADAF/4fj/mXQjWbHIMAAAAASUVORK5CYII=\n","text/plain":["<Figure size 1152x144 with 2 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["# ------ bias frquency ------ #\n","len_df = len(res_df)\n","\n","plt.figure(figsize=(16, 2))\n","\n","ax1 = plt.subplot(121)\n","plt.fill_between(short_obj[-2].ravel(), 0, 1, where=short_bias_arr.ravel() > 0,\n","                facecolor='#00ff00', alpha=1, transform=ax1.get_xaxis_transform())   # 00ff00\n","# plt.fill_between(short_obj[-2].ravel(), 0, 1, where=short_bias_arr.ravel() < 1,\n","#                 facecolor='#ff00ff', alpha=1, transform=ax1.get_xaxis_transform())\n","\n","ax2 = plt.subplot(122)\n","plt.fill_between(long_obj[-2].ravel(), 0, 1, where=long_bias_arr.ravel() > 0,\n","                facecolor='#00ff00', alpha=1, transform=ax2.get_xaxis_transform())\n","plt.fill_between(long_obj[-2].ravel(), 0, 1, where=long_bias_arr.ravel() < 1,\n","                facecolor='#ff00ff', alpha=1, transform=ax2.get_xaxis_transform())\n","plt.show()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":157},"executionInfo":{"elapsed":872,"status":"ok","timestamp":1652756329304,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"eoXMxRm3qdz2","outputId":"98c90b55-4c14-402c-e2d4-d7b88f9e2e62"},"outputs":[{"data":{"image/png":"\n","text/plain":["<Figure size 1152x144 with 2 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["# ------ bias frquency ------ #\n","len_df = len(res_df)\n","\n","plt.figure(figsize=(16, 2))\n","\n","ax1 = plt.subplot(121)\n","plt.fill_between(short_obj[-2].ravel(), 0, 1, where=short_bias_arr.ravel() > 0,\n","                facecolor='#00ff00', alpha=1, transform=ax1.get_xaxis_transform())   # 00ff00\n","# plt.fill_between(short_obj[-2].ravel(), 0, 1, where=short_bias_arr.ravel() < 1,\n","#                 facecolor='#ff00ff', alpha=1, transform=ax1.get_xaxis_transform())\n","\n","ax2 = plt.subplot(122)\n","plt.vlines(long_obj[-2][long_bias_arr], ymin=0, ymax=1, color='#00ff00')\n","plt.vlines(long_obj[-2][~long_bias_arr], ymin=0, ymax=1, color='#ff00ff')\n","# [plt.axvline(x_, color='#ff00ff') for x_, bias_ in zip(long_obj[-2], long_bias_arr) if not bias_]\n","plt.show()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"dm7ZqzS9vqhm"},"outputs":[],"source":["%timeit -n1 -r10 plt.vlines(long_obj[-2][long_bias_arr], ymin=0, ymax=1, color='#00ff00')  # 528 ms per loop --> 8.71 ms per loop\n","%timeit -n1 -r10 [plt.axvline(x_, color='#00ff00') for x_, bias_ in zip(long_obj[-2], long_bias_arr) if bias_]\n","\n","# np.sum(long_bias_arr == ~long_bias_arr)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"qOE2YSzntx8v"},"outputs":[],"source":["# %timeit -n1 -r10 [plt.axvline(x_) for x_, bias_ in zip(long_obj[-2].ravel(), long_bias_arr.ravel()) if bias_]\n","%timeit -n1 -r10 plt.fill_between(long_obj[-2].ravel(), 0, 1, where=long_bias_arr.ravel() > 0, facecolor='#00ff00', alpha=1, transform=ax2.get_xaxis_transform())"]},{"cell_type":"markdown","metadata":{"id":"dHFkv6Ar1ojU"},"source":["## plot_check_v3"]},{"cell_type":"code","execution_count":35,"metadata":{"id":"rMIwv1Nr1ojX","executionInfo":{"status":"ok","timestamp":1663389334239,"user_tz":-540,"elapsed":367,"user":{"displayName":"7th June","userId":"08178289703395036410"}}},"outputs":[],"source":["# ------------------ plot_config ------------------ #\n","save_mode = 0\n","\n","front_plot = 0    # 0 : p1_tick, 1 : p2_tick\n","back_plot = 4     # 0 : post_plot_size, 1 : open, 2 : p2_tick, 3 : ep_tick, 4 : tp_tick\n","x_max = 300       # back_plot : 0 사용시, custom x_max 반영됨\n","\n","bias_plot = 0     # 1 : true_bias only, -1 : false_bias only, 0 : both\n","\n","pr_descend = 1   # 1 : 큰 pr 부터, -1 : 작은 pr 부터, 0 : 순서대로\n","\n","position = 1      # -1 : short, 0 & 1 : long\n","\n","x_margin_mult = 1/30\n","y_margin_mult = 1/30  # 0 \n","\n","prev_plotsize = 100 #  150 100 20 500 1000\n","post_plotsize = 200 #\n","\n","inversion = 0\n","hedge = 0\n","\n","# ------ show or save ------ #\n","if save_mode:\n","  plot_check_dir = current_path + \"plot_check/\" +  key.replace(\".ftr\", \"\")\n","  shutil.rmtree(plot_check_dir, ignore_errors=True)  # remove existing dir\n","  os.makedirs(plot_check_dir)\n","  print(plot_check_dir)\n","else:\n","  plot_check_dir = None\n","\n","# ------------ 한 방향에 대해 plot_check 함 (by position var.) ------------ #\n","#   obj by position  \n","if position == -1:\n","  pos_str = \"SELL\"\n","  pr_, obj_ = short_pr, short_obj\n","  arr_list = [short_p2_idx_arr, short_lvrg_arr, short_fee_arr, short_tpout_arr, short_bias_arr, short_net_p1_bias_tick, short_tp_1, short_tp_0, short_out_1, short_out_0, short_ep2_0]\n","else:   # both option currently not supported\n","  pos_str = \"BUY\"\n","  pr_, obj_ = long_pr, long_obj\n","  arr_list = [long_p2_idx_arr, long_lvrg_arr, long_fee_arr, long_tpout_arr, long_bias_arr, long_net_p1_bias_tick, long_tp_1, long_tp_0, long_out_1, long_out_0, long_ep2_0]\n","\n","if pr_descend:\n","  if pr_descend == -1:\n","    pr_descend = 0\n","  pr, obj, [p2_idx_arr, lvrg_arr, fee_arr, tpout_arr, bias_arr, bias_tick, tp_1, tp_0, out_1, out_0, ep2_0] = sort_bypr_v4(pr_, obj_, arr_list, descending=pr_descend)  # --> pr_descend 의 의미가 사라짐.. (false -> true plot 으로 이동한 것뿐)\n","else:\n","  pr, obj, [p2_idx_arr, lvrg_arr, fee_arr, tpout_arr, bias_arr, bias_tick, tp_1, tp_0, out_1, out_0, ep2_0] = pr_, obj_, arr_list\n","\n","pr_msg = \"%s\\n {} ~ {} -> {:.5f}\\n lvrg : {}\\n fee : {:.4f}\" % (pos_str)  # = data_window, pos_str 으로 이곳에서 정의함\n","\n","try:   # wave_range 단독 실행의 경우 tr_arr 이 존재하지 않기 때문에 try 처리함\n","  res_df['short_tr_{}'.format(selection_id)].iloc[short_obj[-1].astype(int).ravel()] = short_tr_arr\n","  res_df['long_tr_{}'.format(selection_id)].iloc[long_obj[-1].astype(int).ravel()] = long_tr_arr\n","except:\n","  pass\n","\n","if front_plot == 0:\n","  front_idx = obj[4]      # left_margin 기준 - open_idx\n","else:\n","  front_idx = p2_idx_arr  # left_margin 기준 - p2_idx\n","\n","left_end_idx = front_idx - prev_plotsize  \n","right_end_idx = obj[3] + post_plotsize\n","invalid_left_end = np.sum(left_end_idx < 0)\n","\n","np_plot_params = np.hstack((left_end_idx, right_end_idx, pr, *obj, p2_idx_arr, lvrg_arr, fee_arr, tpout_arr, tp_1, tp_0, out_1, out_0, ep2_0))[invalid_left_end:]  # all arr should have same dimension\n","# plot_idx = np.full(len(np_plot_params), True)\n","\n","if bias_plot:\n","  if bias_plot == 1:\n","    bias_idx = bias_arr[invalid_left_end:].ravel()  # true_bias 만 plot\n","  else:\n","    bias_idx = ~bias_arr[invalid_left_end:].ravel()  # false_bias 만 plot\n","  \n","  # trendy_idx = bias_tick[invalid_left_end:] < config.tr_set.bias_tick  # temp location\n","\n","  np_plot_params = np_plot_params[bias_idx] #  * trendy_idx]  "]},{"cell_type":"markdown","metadata":{"id":"-4CXGqEN1ojY"},"source":["### session_plot"]},{"cell_type":"code","execution_count":36,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":850,"status":"ok","timestamp":1663389339766,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"2bjxKCIh1ojZ","outputId":"ce82b66d-300a-42c5-9d19-383df586ea69"},"outputs":[{"output_type":"stream","name":"stderr","text":["/content/drive/My Drive/Colab Notebooks/JnQ/funcs/funcs_plot_check.py:11: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.\n","  step_col_arr = np.array(col_list)\n"]}],"source":["selection_id = config.selection_id\n","\n","# ============ make col_idx_dict config ============ #\n","nonstep_col_list = []\n","step_col_list = []\n","step_col_list2 = []\n","stepmark_col_list = []\n","data_window_p1_col_list = []\n","data_window_p2_col_list = []\n","\n","# ============ nonstep_col_list - add info(col, alpha, color, linewidth) ============ #\n","# nonstep_col_list.append([['close'], 1, '#ffffff', 2])\n","\n","# ============ step_col_list - add info(col, alpha, color, linewidth) ============ #\n","# ------ htf_candle ------ #\n","# hc_tf1 = '5T'\n","hc_tf2 = '15T'\n","\n","# step_col_list.append([['open_{}'.format(hc_tf1), 'close_{}'.format(hc_tf1)], 1, '#ffffff', 2])\n","# step_col_list.append([['open_{}'.format(hc_tf2), 'close_{}'.format(hc_tf2)], 1, '#ffffff', 4])\n","\n","# ------ resi_sup ------ #\n","# rs_tf = 'T'\n","# step_col_list.append([['resi_{}'.format(rs_tf), 'sup_{}'.format(rs_tf)], 1, '#ffeb3b', 1])\n","# step_col_list.append([['resi_out_{}'.format(rs_tf), 'sup_out_{}'.format(rs_tf)], 1, 'dodgerblue', 2])\n","\n","# ------ wave_base ------ #\n","wave_itv1 = config.tr_set.wave_itv1\n","wave_period1 = config.tr_set.wave_period1\n","wave_itv2 = config.tr_set.wave_itv2\n","wave_period2 = config.tr_set.wave_period2\n","\n","# step_col_list.append([['dc_base_{}{}'.format(wave_itv1, wave_period1)], 1, '#5b9cf6', 1])\n","# step_col_list.append([['dc_base_{}{}'.format(wave_itv2, wave_period2)], 1, '#5b9cf6', 5])\n","\n","# step_col_list.append([['wave_low_fill_{}{}'.format(wave_tf, wave_period)], 1, '#ffeb3b', 1])\n","# step_col_list.append([['wave_high_fill_{}{}'.format(wave_tf, wave_period)], 1, '#ffeb3b', 1])\n","# step_col_list.append([['dc_upper_{}{}'.format(wave_tf, wave_period), 'dc_lower_{}{}'.format(wave_tf, wave_period)], 1, '#ffeb3b', 1])\n","\n","# ------ dc ------ #\n","dc_tf1 = 'T'\n","dc_period1 = 20 # wave_period2  # 20\n","dc_tf2 = '5T'\n","dc_period2 = 20 # config.loc_set.point2.csd_period if config.loc_set.point2.csd_period != \"None\" else wave_period2 \n","dc_tf3 = '15T'\n","dc_period3 = 20\n","dc_tf4 = 'H'\n","dc_period4 = 20\n","\n","# step_col_list.append([['dc_upper_{}{}'.format(dc_tf1, dc_period1), 'dc_lower_{}{}'.format(dc_tf1, dc_period1)], 1, '#ff00ff', 1]),  # inner #ffeb3b\n","# step_col_list.append([['dc_upper_{}{}'.format(dc_tf2, dc_period2), 'dc_lower_{}{}'.format(dc_tf2, dc_period2)], 1, '#ffee58', 2]),  # inner #ffeb3b\n","step_col_list.append([['dc_base_{}{}'.format(dc_tf1, dc_period1)], 1, '#5b9cf6', 1]) # ffee58 5b9cf6 \n","step_col_list.append([['dc_base_{}{}'.format(dc_tf2, dc_period2)], 1, '#5b9cf6', 3]) # ffee58 5b9cf6\n","step_col_list.append([['dc_base_{}{}'.format(dc_tf3, dc_period3)], 1, '#5b9cf6', 5]) # ffee58 5b9cf6\n","step_col_list.append([['dc_base_{}{}'.format(dc_tf4, dc_period4)], 1, '#5b9cf6', 7]) # ffee58 5b9cf6\n","\n","# ------ bb ------ #\n","bb_tf1 = 'T'\n","bb_period1 = 60\n","\n","# step_col_list.append([['bb_upper_{}{}'.format(bb_tf1, bb_period1), 'bb_lower_{}{}'.format(bb_tf1, bb_period1)], 1, '#ffffff', 1])\n","# step_col_list.append([['bb_upper2_{}{}'.format(bb_tf1, bb_period1), 'bb_lower2_{}{}'.format(bb_tf1, bb_period1)], 1, '#ffffff', 1])\n","# step_col_list.append([['bb_upper3_{}{}'.format(bb_tf1, bb_period1), 'bb_lower3_{}{}'.format(bb_tf1, bb_period1)], 1, '#ffffff', 1])\n","# step_col_list.append([['bb_base_{}{}'.format(bb_tf1, bb_period1)], 1, '#00ff00', 1])\n","\n","\n","# ------ ma / ema ------ #\n","# step_col_list.append([['ema_5T'], 1, '#03ed30', 2])\n","\n","ma_period = 60\n","step_col_list.append([['ma_T{}'.format(ma_period)], 1, '#03ed30', 2])\n","# step_col_list.append([['long_ma_T{}_-1'.format(ma_period)], 1, '#03ed30', 2])\n","\n","# ============ step_col_list2 - add info(col, alpha, color, linewidth) ============ #\n","# ------ cci ------ #\n","step_col_list2.append([['cci_{}{}'.format(wave_itv1, wave_period1)], 1, '#00ff00', 3])\n","step_col_list2.append([['cci_{}{}'.format(wave_itv2, wave_period2)], 1, '#00ff00', 1])\n","\n","# ------ stoch ------ #\n","# step_col_list2.append([['stoch_{}{}33'.format(wave_itv1, wave_period1)], 1, '#00ff00', 3])\n","\n","# ------ macd ------ #\n","# step_col_list2.append([['macd_T535'], 1, '#00ff00', 1])\n","\n","\n","# ============ stepmark_col_list - add info(col, alpha, color, linewidth, marker_style) ============ #\n","# stepmark_col_list.append([['sar_T'], 1, 'dodgerblue', 7])\n","\n","# ------ wave_range ------ #\n","stepmark_col_list.append([['wave_low_fill_{}{}'.format(wave_itv1, wave_period1)], 1, '#e91e63', 10, '*'])\n","stepmark_col_list.append([['wave_high_fill_{}{}'.format(wave_itv1, wave_period1)], 1, '#2962ff', 10, '*'])\n","\n","stepmark_col_list.append([['wave_low_fill_{}{}'.format(wave_itv2, wave_period2)], 1, '#ff00ff', 7, '*'])\n","stepmark_col_list.append([['wave_high_fill_{}{}'.format(wave_itv2, wave_period2)], 1, '#00ff00', 7, '*'])\n","  \n","# stepmark_col_list.append([['wave_co_marker_{}{}'.format(wave_itv1, wave_period1)], 1, '#00ff00', 3, 'o'])\n","# stepmark_col_list.append([['wave_cu_marker_{}{}'.format(wave_itv1, wave_period1)], 1, '#ff00ff', 3, 'o'])\n","\n","# ============ data_window_col_list ============ #\n","# ------ wrr ------ #\n","# data_window_col_list.append([['cu_wrr_21_{}{}'.format(wave_itv1, wave_period1)], 'cu_wrr_21_{}{}'.format(wave_itv1, wave_period1)])\n","# data_window_col_list.append([['co_wrr_21_{}{}'.format(wave_itv1, wave_period1)], 'co_wrr_21_{}{}'.format(wave_itv1, wave_period1)])\n","data_window_p1_col_list.append([['cu_wrr_32_{}{}'.format(wave_itv1, wave_period1)], 'cu_wrr_32_{}{}'.format(wave_itv1, wave_period1)])\n","data_window_p1_col_list.append([['co_wrr_32_{}{}'.format(wave_itv1, wave_period1)], 'co_wrr_32_{}{}'.format(wave_itv1, wave_period1)])\n","# data_window_p2_col_list.append([['cu_wrr_32_{}{}'.format(wave_itv2, wave_period2)], 'cu_wrr_32_{}{}'.format(wave_itv2, wave_period2)])\n","# data_window_p2_col_list.append([['co_wrr_32_{}{}'.format(wave_itv2, wave_period2)], 'co_wrr_32_{}{}'.format(wave_itv2, wave_period2)])\n","\n","data_window_p1_col_list.append([['short_tr_{}'.format(selection_id)], 'short_tr_{}'.format(selection_id)])\n","data_window_p1_col_list.append([['long_tr_{}'.format(selection_id)], 'long_tr_{}'.format(selection_id)])\n","\n","\n","# ====== str to numbcol ====== #\n","nonstep_col_arr = strcol_tonumb(res_df, nonstep_col_list)\n","step_col_arr = strcol_tonumb(res_df, step_col_list)\n","step_col_arr2 = strcol_tonumb(res_df, step_col_list2)\n","stepmark_col_arr = strcol_tonumb(res_df, stepmark_col_list)\n","data_window_p1_col_arr = strcol_tonumb(res_df, data_window_p1_col_list)\n","data_window_p2_col_arr = strcol_tonumb(res_df, data_window_p2_col_list)\n","\n","col_idx_dict = \\\n","{\n","  \"ohlc_col_idxs\": get_col_idxs(res_df, ['open', 'high', 'low', 'close']),\n","  \"vp_col_idxs\": get_col_idxs(res_df, ['close', 'volume']),\n","  \"post_cu_idx\": get_col_idxs(res_df, ['wave_cu_post_idx_fill_{}{}'.format(wave_itv1, wave_period1)]),\n","  \"post_co_idx\": get_col_idxs(res_df, ['wave_co_post_idx_fill_{}{}'.format(wave_itv1, wave_period1)]),\n","  # \"post_cu_idx\": get_col_idxs(res_df, ['wave_cu_prime_idx_fill_{}{}'.format(wave_itv1, wave_period1)]),\n","  # \"post_co_idx\": get_col_idxs(res_df, ['wave_co_prime_idx_fill_{}{}'.format(wave_itv1, wave_period1)]),\n","  # \"ohlc_col_idxs\": get_col_idxs(res_df, ['haopen', 'hahigh', 'halow', 'haclose']),  # heikin-ashi ver.\n","  \"nonstep_col_info\": nonstep_col_arr,\n","  \"step_col_info\": step_col_arr,\n","  \"step_col_info2\": step_col_arr2,\n","  \"stepmark_col_info\": stepmark_col_arr,\n","  \"data_window_p1_col_info\": data_window_p1_col_arr,\n","  \"data_window_p2_col_info\": data_window_p2_col_arr,\n","  \"ylim_col_idxs\": get_col_idxs(res_df, ['open', 'high', 'low', 'close', 'short_tp_1_{}'.format(selection_id), 'long_tp_1_{}'.format(selection_id), 'short_tp_0_{}'.format(selection_id), 'long_tp_0_{}'.format(selection_id)])  \n","}   \n","#   'wave_low_fill_{}{}'.format(wave_itv2, wave_period2), 'wave_high_fill_{}{}'.format(wave_itv2, wave_period2)\n","#   'dc_upper_H', 'dc_lower_H', 'dc_upper_15T', 'dc_lower_15T', 'short_out_{}'.format(selection_id), 'long_out_{}'.format(selection_id)\n","#   'wave_1_{}'.format(wave_itv2), 'wave_0_{}'.format(wave_itv2), 'dc_upper_15T', 'dc_lower_15T'"]},{"cell_type":"markdown","metadata":{"id":"XfvH5ngyieS9"},"source":["#### session_plot main"]},{"cell_type":"code","execution_count":37,"metadata":{"id":"OCLMABZT1ojb","colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"status":"error","timestamp":1663389376763,"user_tz":-540,"elapsed":34733,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"1698846f-9e86-459e-a864-ae197baf3112"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 2160x1296 with 4 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 2160x1296 with 4 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 2160x1296 with 4 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 2160x1296 with 4 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 2160x1296 with 4 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 2160x1296 with 4 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 2160x1296 with 4 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\n"]},{"output_type":"error","ename":"KeyboardInterrupt","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-37-4ce521a836a6>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# p2_hlm 의 경우, tr 확인을 우해 session_plot 우선 실행 필요함\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0m_\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mplot_check_v9\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mres_df\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mconfig\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mparam_zip\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpr_msg\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mx_max\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mx_margin_mult\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_margin_mult\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mback_plot\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mplot_check_dir\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mcol_idx_dict\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mparam_zip\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mzip\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnp_plot_params\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnp_plot_params\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m<ipython-input-37-4ce521a836a6>\u001b[0m in \u001b[0;36m<listcomp>\u001b[0;34m(.0)\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# p2_hlm 의 경우, tr 확인을 우해 session_plot 우선 실행 필요함\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0m_\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mplot_check_v9\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mres_df\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mconfig\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mparam_zip\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpr_msg\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mx_max\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mx_margin_mult\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_margin_mult\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mback_plot\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mplot_check_dir\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mcol_idx_dict\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mparam_zip\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mzip\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnp_plot_params\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnp_plot_params\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/content/drive/My Drive/Colab Notebooks/JnQ/funcs/funcs_plot_check.py\u001b[0m in \u001b[0;36mplot_check_v9\u001b[0;34m(res_df, config, param_zip, pr_msg, x_max, x_margin_mult, y_margin_mult, back_plot, plot_check_dir, **col_idx_dict)\u001b[0m\n\u001b[1;32m    288\u001b[0m     \u001b[0;31m# print(\"iin, vp_iin, vp_iout, p1_idx :\", iin, vp_iin, vp_iout, p1_idx)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    289\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 290\u001b[0;31m     \u001b[0mvp_data\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mres_df\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0miloc\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvp_iin\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0mint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mp1_idx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcol_idx_dict\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'vp_col_idxs'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mto_numpy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mT\u001b[0m  \u001b[0;31m# Todo, vp_range should be calculated by wave_point\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    291\u001b[0m     \u001b[0;31m# print(\"vp_data :\", vp_data)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    292\u001b[0m     \u001b[0;31m# vp_info = [vp_range, *vp_data, kde_factor, num_samples]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m    923\u001b[0m                 \u001b[0;32mwith\u001b[0m \u001b[0msuppress\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mKeyError\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mIndexError\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    924\u001b[0m                     \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_value\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtakeable\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_takeable\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 925\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_getitem_tuple\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    926\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    927\u001b[0m             \u001b[0;31m# we by definition only have the 0th axis\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m_getitem_tuple\u001b[0;34m(self, tup)\u001b[0m\n\u001b[1;32m   1508\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_getitem_lowerdim\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtup\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1509\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1510\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_getitem_tuple_same_dim\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtup\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1511\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1512\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_get_list_axis\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mint\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m_getitem_tuple_same_dim\u001b[0;34m(self, tup)\u001b[0m\n\u001b[1;32m    807\u001b[0m             \u001b[0;31m# We should never have retval.ndim < self.ndim, as that should\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    808\u001b[0m             \u001b[0;31m#  be handled by the _getitem_lowerdim call above.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 809\u001b[0;31m             \u001b[0;32massert\u001b[0m \u001b[0mretval\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mndim\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mndim\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    810\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    811\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mretval\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36mndim\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    653\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_axis\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0ma\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_AXIS_ORDERS\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    654\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 655\u001b[0;31m     \u001b[0;34m@\u001b[0m\u001b[0mproperty\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    656\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mndim\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0mint\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    657\u001b[0m         \"\"\"\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]},{"output_type":"display_data","data":{"text/plain":["<Figure size 2160x1296 with 4 Axes>"],"image/png":"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q1evVv/+/ct0rrCwME2dOlXJyck6deqUpk6dqmeffbbIsWfOnFFKSortuLCw0HafJOnXX39VXl6e7fiP9xEAAAAAAABAySjiAQBuCnd3d23cuFHr1q2Tj4+PGjdurE2bNkmS3nzzTbVt21YhISEKDg5W69at9dZbb111vejoaHXu3FnSb6+nPHr0qDp16mQ7jo6Oto1t06aNEhISVLt2bU2cOFGS1K9fP02cOFEeHh7asWPHVc/Vt29fWSwWpaenKzg4WLNmzSpyXHBwsFxcXHTkyJES70etWrWUmpqqhIQERUREyM3NrcQ5RenUqZPi4uIkSQEBAbp48aIOHz5s64+JiVFQUFCRc9u3b6/MzMxi1w4KClJMTEyp1pIkX19fZWZmKj8/X6NGjdIHH3xg1z9mzBhZrVYlJyerSpUqWrx4sV3/tm3blJKSouXLl8vPz6/4iwYAAAAAAABuU+X+OCAhhJBbL08//bT56aefiuw7cuSIeeihh2zH3bp1M8eOHbvqel26dDExMTFGkvn222/NoEGDzO7du40ks3XrVturGsPCwkxiYqLd3Hnz5pn58+df8zU0btzYjB8/3tSuXfuKPg8PD7N//37zxhtvlLhO7dq1TbNmzYyDg4Np0KCBiY6ONp9++ukV44p6neYf89xzz5mkpCRTvXp1I8l06NDBpKSk2I0ZPHiw2bJlS5l+ZhcvXjRNmza1u35jTInzvLy8zOjRo02bNm2K7A8JCTHjxo0z7u7utraOHTuaSpUqmapVq5rIyEhz4MCBIl99SgghhBBCCCGEEELI7RqexAMA3BS+vr46evRokX0+Pj5KTEy0HScmJsrHx+eq6+3evVsBAQGqVauWQkJCtGDBAvn6+qp69epq3bq1tm3bZhublJR0xfyi2kpy5MgRxcXF6ZNPPrFrv+OOO/T111/r+++/1+TJk0tc5/Tp04qPj5cxRsePH9fo0aPVu3fva9pLz549NWnSJD300ENKT0+XJOXk5MjT09NunKenp6xW6zWt/bvL1yvtWpmZmZo/f75WrVolJyenK/p/+eUX5efn691337W1bd++XQUFBbJYLBoxYoQaNmyoZs2alWnfAAAAAAAAwK2IIh4A4KZISkqSv79/kX2nTp2ye31i/fr1derUqauul5+frx9//FEjRoxQbGysCgoKtGvXLr322ms6evSorbAl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dtvM5/ddzPGkP3DwxzmUGVspYysHf5zTrJhIxUazbbv289TZlznzxTpqK4o588U6zhT9larSfVSV7rXKs0V/84iJVKzaDhxT8v4DlH25mZL3H6CuJnxrn4qIiIh9Gdqiu+3YsSPqfdCmTZs2bdq0ta2t/8rFHptZX5qX67G5P8b761je3J9zU88vlFht2kDv79vKds011xjDhg0z9uzZY9WNGjXKePPNN42UlBQDMLp3724ARlpampGYmGgARs+ePY2SkhIjMTHRSEhIMA4cOGD07dvXSE5ONnbt2mUMHDiwybZt8zP2DAa1GOz2Uz4TpphIxUazbbv185lm/P9r06ZNmzZt2rRpC9vm7z2+ptMUERERERERCdHbb79N7969Pep+8IMf8Ktf/Yrq6moAa33CiooKKyY1NRXDMAC4/PLLOXDggDW16urVq7nhhhsoKChojafQfOVAmtvXg/2Us8MUE6nYaLZtt37Odm0VQDoiIiIiYhOaTlNERERExIfsRQvov3KxtS8i0pT+/ftzzTXX8M9//pOtW7dy2WWXWccuv/xy9u7dy549e7j77rupq6sjMzOToqIiK+bIkSNkZmb6PPedd97Jjh072LFjB926dYv4cwkoG3gBZzIPnPcI+yprXVtLYyIVG8227dbPcmAZ4H9pTBERERGJAiXxRERERER8SMro5HO/cOJ4AErzcq19ERGApKQkunTpwpVXXsm8efN45ZVXrGPvv/8+F198MTk5OfzsZz+jXbt2IZ37+eefJycnh5ycHI4dOxburoemGNgCJANVrroar9Ksd7QwJlKx0Wzbbv0sw/l/uQUoQURERERsREk8EREREZEQ9EhN9bkvInLkyBFee+01AHbs2EF9fX2jUXOFhYWcPXuWiy++mKNHj9KrVy/rWFZWFkePHm3VPjfbTFdpDiT0ThIV4bzi4GhhTKRio9m23fr5c1ed+X8qIiIiIrahJJ6IiIiIiIhIGKxdu5ZvfvObAPTr14+UlBSOHTtGnz59SExMBOCCCy5gwIABHDp0iB07dtCvXz/69OlDcnIykydPZt26ddF8CsE7DIwF3gHmAke9yreBTcDGFsZEKjaabdutn78Bxrn+T0VERETEVpKi3QERERERERGRWLNy5UpGjRpFt27dKCoq4tFHH2XZsmUsW7aMPXv2UF1dza233grAiBEjePDBB6mpqaG+vp7Zs2dz/PhxAObMmcPGjRtJTExk2bJlfPzxx9F8WsGb4Sq3ucqFXqUvzYmJVGw027ZjP7e6NhERERGxFSXxREREREREREI0depUn/Xf//73G9UtX76c5cuX+4x/4403eOONN8LaNxERERERiQ+aTlNERERERERERERERETEZpTEExEREREREREREREREbEZJfFEREREREREREREREREbEZJPBERERERERERERERERGbURJPRERERERERERERERExGaUxBMRERERERERERERERGxGSXxRERERKTNyF60gP4rF1v7psKJ4wEozcu19kVEREREREREoklJPBERERFpM5IyOvnc75Ga6nNfRERERERERCRalMQTERERERERERERERERsRkl8URERERERERERERERERsRkk8EREREREREREREREREZtREk9ERERERERERERERETEZpTEExERERFLSWWlz/3CieM9ShERERERERERiaykaHdAIuzRaHcgQh6LdgdERERiS/+Vi9k/dVaTcQPWb6A0L5fO+Ws96nukpnqUIiIiIiIiIiISWRqJJyIiIiIiIiIiIiIiImIzSuKJiIiIiIiIiIiIiIiI2IySeCIiIiLS5vlaC7D25Cmrzn1fRERERERERKQ1aE28eKe140RERESa5GstwM9nzwOc6wma++JbsGsuioiIiIiIiEjwNBJPRERERERERERERERExGaUxBMRERERERERERERERGxGSXxRERERERERERERERERGxGSTwREZFI6QlsBXoEUR9KrF3OEe/thescIiIiIiIiIiIizaAknoiISKQ8AowA5gdRH0qsXc4R7+2F6xxxoqSy0qN0V5qX29rdERERERERERGJew7AiHYn2rodO3aQk5MT7W6IiEi4lANpPuoNnK+8wfAXa5dzxHt74ThHBZAe5DlaQf+Vi9k/dZbH1+7cj5Xm5dI5f22jc3jXF04cT4/UVMCZ3BuwfkO4ux12zXne3t8776Slr8e0Nd7fo7ZO7+8l0vQzJiIiIiISX/y9x9dIPBERkRB5JwEayQZewJnMw1UuA4b4qF8FrA4y1i7niPf2wnWOvsQ9M4HnvS8iIiIiImJ3CckdyRzzGknpWT7LhOSOTcZEKjaabcdKP9W22g5XrN0lRbsDIiIicacY2AJMB8qAFNfXe3zUr8c5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r8dqnOeGDRtYsmSJaz2/c845h08//ZRPP/3UFZebm9tk32azsX37dr/9i4iEk3O9jtyiAurKyh1n7opfTQr3beRteiV37rf5KrgGetaoe1HTawHbRzE3kNwC5a3IHKy+nf27Pw5/x7trfBHPr5zc5Hi+notA+/bG1+Nryc/EvCgb0zjP6bncPb9yske/w6y3sDnt9WZziwXRemb069ePAIL/e6G9CMXP1e+JVhHws82bI52CSMzqumQpu+pHuMWaWBkN5/xbQFNwivjWeHrcWPydJCISLZwnPjl/l4b6d2rOnCeoKytv8rs8VrWqiOdewHNOk+kcZefuX//6F19//TVnnXUWP/jBD3juuecAuOGGGwAoLS1l165dHve54w7HMI2KigoKCwtbk57Lww8/zOzZswHo27cve/fuJSkpiaVLlzJ+/HhsNhszZsxgwQLva8o899xzvP3222zfvp0TJ05wwQUXMHFiw/CXb775BoCVK1dy7NgxMjIy+MlPfsIbb7zhsa7fe++95zEqUUQk0tzfxOLlDS1QNz6zn+QOGU3aq08di0A2EiruH9Zi6Qsq86Jsvh43xzUyvTmX79QU1CIiEn8an5mtETD+uZ+0U1pV5TrL3RfnZySdyCfxxH2dSOdoj9aM8hARkeiSM+cJtqzeSGlVlevzoPN3vS/uI6njgbk1d7r33nvJzMwEIDs7mz179mAYhuty2223uWLz8/Opra11xe3Zs4e+fftit9u5//77sdvtrtj+/fszatQoAAoLC5uslec8nslk8rg4vf/++5hMJr+j8IYPH8748eMBsFgszJ8/3yP3tWvXumJvueUW3nvvPQ4dOkRVVRUbN26kT58+ALz99ttsrj/DtrKyknvvvReAnJwcvv32W1avXk1ycjLl5eXcd999LXuCRSTs4ukXe1s4ix2xVPRoqeQOGRTentbkEmtD6aWB82xy5xYcX0o5/1/H0hdUvkbcXb4zFVvmNtflyMy+HJnZl8XP9QhzhiIiIuEX6REwwR497HXq9yDpv3xVxJ8vkUhwFuyc25b+P2g8g4aIiESO+2clb1NoOn/Xx/P3l+7atCZeIIqLi7niiiuYPXs2F154ISaTia1bt/KHP/yBlStXesQ6R+EBvPjii6FOrVl/+ctfuOKKK8jJyaFLly6cPHmSzz77jMWLFzeZfvP111/nxIkT/PrX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rewohuGIKfvus1b319LYYPcXK8eOlTxj6dgfVx/kouSerq008PU9nrepj9s6nbG/2AQSWMOaqF4XT0U8EcBydHCTNqO4HPukPRHIRkRERERERERE4sXUI+8D8FLFvz224l3eoy83aSu8PTqnuRNpzov1/99f1P/7gDWe+rit0xn7iz2TM5nOdAopjNjjbY6KeO1U9alj5M2zem1/897eEcgoMozicp9TtmktJhGR0Lv57lLeH1Dpum4paHpSRbhoNKeIiIiIiIiISGQ1nvq4LdMZNxc7gxlMYUqkH7JfKuK1U74Kdd4Ke/HM10g7byPzREQk+NwLeI0ZxeVhzERERERERERERCKt8dTH3gQ6nXEgsetY1+pcw0FFPBEREYm4IzP7Am1be1FERERERERERCSemCOdgITOrmuuAuD4xAmufREREREREREREREREYl+GokXx3qkpHjdF5H2IW+elbsat42v37FCHdXhTknaOfOibK03KiIiIiIiIiIiEiAV8URE4lTh7WkcnzjBo805VWFuUUEkUgq6nDlPkNCls2v/m/wHIpxRZOXMeQJw/Hzryspdz0ddWTkJXTpTVxbZNeZ8FfAu35ka5kwkFqT/8RKv7ReM3RbmTKIzBxGJrJdffpnvf//7HDp0iAEDBrja77rrLu68805sNhvLly/nV7/6FRkZGbz55psMGzaMhQsXcvfdd7vihw4dysKFC0lNTWXFihXce++9kXg4IiIiIiISpVTEE/HDcnRwkzajuBz7pD0RyEakwY3P7Ce5Q0ak0wjr+mW+ClTSwFnQbLwfbc+VLbOhANK40CzitGOf90LZpztOhTmT6MxBRCJr4cKFPP/887z66quutssuu4zrr7+eQYMGUVNTQ/fu3QGoqqrioYce4vzzz+f888/36OeFF15gxowZbNq0iRUrVnDVVVexatWqsD4WERERERGJXloTT8QLo9j3aBVNBRfbdk+eGekUgiK5QwaFt6e5Lu2BtwLVN/kPuH6m7oUq9xFnkR59JiIiIvHnn//8J8eOHfNo++lPf8rjjz9OTU0NAIcPHwbAarWyceNGqqqqPOKzsrLo1KkTmzZtAuDVV19lwgSd3CIiIiIiIg00Ek88VJ86Rt48a8Cxb97bO8QZRYavkXbeRuZJ5PiaStE5daBzX9of52sht6gg6kahxZtQjMbcdc1VrrVc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uvr12B3sPrKm9W4bHBwsPAbNMezn5vhVuzl+1W+OYbWb41ft5vhpWn8053o1m+NW3ebYVbc5dtVtjl01m+NW3ebY7d+U0wQAAAAAAICSkcQDAAAAAACAkpmUZKDoIOisxx57rOgQGCfHsNocv2pz/KrPMaw2x6/aHD/oD871anLcqsuxqy7Hrrocu2py3KrLsXvLhOytqwkAAAAAAACUhHKaAAAAAAAAUDKSeAAAAAAAAFAykng97CMf+Ug2bNiQjRs35sorryw6HEYwe/bsPPjgg/n+97+fdevW5bLLLkuSHHPMMVm1alWefvrprFq1KtOmTSs4Ug5m4sSJeeyxx3LPPfckSY4//vg88sgj2bhxY1asWJEpU6YUHCEHc/TRR+ev//qvs379+jz11FM5/fTTnYMV8rnPfS7r1q3Lk08+mdtuuy2HHnqoc7DkbrzxxuzYsSNPPvnkvm0HO+euv/76bNy4MWvXrs38+fOLCJkGzY7ff/7P/znr16/P2rVr8zd/8zc5+uij9/3bsmXLsnHjxmzYsCFnn312ESEDbeR+s1o2b96cJ554ImvWrMng4GAS95pl5fqompodt89//vPZunVr1qxZkzVr1mTx4sX7/s11UXmMpT/OeVe84Y6b8678Dj300KxevTqPP/541q1bl4GBgSTD96EecsghWbFiRTZu3JhHHnkkc+bMKTD64tS03msTJ06sbdq0qTZ37tzalClTao8//njtxBNPLDwubfg2c+bM2vz582tJakcccUTtH//xH2snnnhi7Qtf+ELtyiuvrCWpXXnllbWrr7668Fi14du/+Tf/pnbrrbfW7rnnnlqS2v/4H/+j9nu/93u1JLUbbrih9sd//MeFx6gN3772ta/VLrroolqS2pQpU2pHH320c7Ai7V3velfthz/8Ye1tb3tbLdl77i1dutQ5WPL2gQ98oDZ//vzak08+uW/bcOfc4sWLa/fee28tSW3hwoW1Rx55pPD4+701O35nnXVWbdKkSbUktauvvnrf8TvxxBNrjz/+eO2QQw6pHX/88bVNmzbVJk6cWPjvoGna2Jr7zeq1zZs314499tj9trnOLWdzfVTN1uy4ff7zn69dccUVBzzWdVG5Wqv9cc67crThjpvzrhpt6tSptSS1yZMn1x555JHawoULh+2/+ZM/+ZPaDTfcUEtS+73f+73aihUrCo+/gFZ4AFoH2umnn17727/9231/X7ZsWW3ZsmWFx6WNvt111121M888s7Zhw4bazJkza8neL6gNGzYUHpvWvM2aNav2rW99q/ahD31oXxLvueee29eZOfS81MrVjjrqqNoPf/jDA7Y7B6vR3vWud9WeffbZ2jHHHFObNGlS7Z577qmdffbZzsEKtDlz5uzX2THcOfff/tt/q51//vlNH6eV5/g1tnPPPbf2V3/1V7XkwGvRv/3bv62dfvrphcevadrYmvvN6rVmSTzXueVtro+q2YYet+GSCa6Lyt1G6o9z3pWz1Y+b865a7bDDDqs9+uijtdNOO23Y/pvGYzVp0qTac889V3jc3W7KafaoWbNmZcuWLfv+vnXr1syaNavAiGjFnDlzMn/+/KxevTozZszI9u3bkyTbt2/PjBkzCo6O4fzFX/xF/vRP/zR79uxJkhx77LH56U9/mjfeeCOJ87Ds5s6dm+eeey433XRTHnvssSxfvjyHH364c7AifvSjH+XP//zP8+yzz+bHP/5xdu3alUcffdQ5WEHDnXOubarnU5/6VO67774kjh/0Gud09dRqtaxatSrf+973cvHFFycZ/juX8nF9VF2XXnpp1q5dmxtvvHFfOUbHrbxG0x/n+JVP43FLnHdVMHHixKxZsyY7d+7M/fffnx/84AfD9t80Hrs33ngju3btyrHHHltY7EWQxIOSmTp1au6444587nOfy+7duw/491qtVkBUjORf/It/kZ07d+axxx4rOhTGaPLkyTnllFNyww035JRTTskrr7ySZcuWHfA452A5TZs2LUuWLMncuXPzrne9K1OnTs0555xTdFi0gXOumq666qq8/vrrufXWW4sOBYAk73//+3Pqqadm8eLF+exnP5sPfOADBzzGd251OFbVcMMNN+Td7353Tj755Pz4xz/ONddcU3RIHIT+uGoaetycd9WwZ8+ezJ8/P7Nnz85pp52W97znPUWHVGqSeD1q27ZtOe644/b9ffbs2dm2bVuBETEakydPzh133JFbb701d955Z5Jkx44dmTlzZpJk5syZ2blzZ5EhMoxFixblYx/7WDZv3pwVK1bkjDPOyPXXX59p06Zl0qRJSZyHZbd169Zs3bo1//AP/5Ak+cY3vpFTTjnFOVgRZ555ZjZv3pznn38+r7/+ev7mb/4mixYtcg5W0HDnnGub6li6dGn+5b/8l/nkJz+5b5vjB73FOV09P/rRj5Ikzz33XO68886cdtpprnMrxPVRNe3cuTN79uxJrVbL8uXLc9pppyVx3Mqolf44x688mh0351217Nq1Kw899FB+67d+a9j+m8ZjN2nSpBx99NF54YUXCou5CJJ4PWpwcDDz5s3L8ccfnylTpuT888/PypUriw6LEdx4441Zv359rrvuun3bVq5cmaVLlybZ2yl29913FxUeB3HVVVfluOOOy9y5c3P++efnwQcfzB/8wR/koYceynnnnZfE8Su7HTt2ZMuWLTnhhBOSJB/+8Ifz1FNPOQcr4tlnn83pp5+eww47LMlbx885WD3DnXMrV67MBRdckCRZuHBhdu3ata+8DeXxkY98JH/6p3+aj33sY/nZz362b/vKlStz/vnn55BDDsnxxx+fefPm7Rs0AVSP+81qOfzww3PEEUfs+/PZZ5+ddevWuc6tENdH1VRPACXJ7/7u72bdunVJXBeVAa+XpQAAIABJREFUUSv9cc678mh23Jx35Td9+vQcffTRSZK3ve1tOeuss7J+/fph+28az8XzzjsvDz74YDGBF6zwhfm0zrTFixfX/vEf/7G2adOm2lVXXVV4PNrB26JFi2q1Wq22du3a2po1a2pr1qypLV68uPb2t7+99q1vfav29NNP1+6///7aMcccU3is2sHb7/zO79TuueeeWpLa3Llza6tXr65t3Lixdvvtt9cOOeSQwuPThm8nnXRSbXBwsLZ27dranXfeWZs2bZpzsEJtYGCgtn79+tqTTz5Zu+WWW2qHHHKIc7Dk7bbbbqv96Ec/qv3yl7+sbdmypfapT33qoOfcf/2v/7W2adOm2hNPPFE79dRTC4+/31uz47dx48bas88+u+9a5oYbbtj3+Kuuuqq2adOm2oYNG2rnnHNO4fFrmja+5n6zOm3u3Lm1xx9/vPb444/X1q1bt+94uc4tZ3N9VM3W7LjdcssttSeeeKK2du3a2t13312bOXPmvse7LipPG0t/nPOu+DbccXPelb/983/+z2uPPfZYbe3atbUnn3yy9u///b+vJcP3oR566KG122+/vbZx48ba6tWra3Pnzi38d+h2m/DmHwAAAAAAAICSUE4TAAAAAAAASkYSDwAAAAAAAEpGEg8AAAAAAABKRhIPAAAAAAAASkYSDwAAAAAAAEpG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\n"},"metadata":{}}],"source":["# p2_hlm 의 경우, tr 확인을 우해 session_plot 우선 실행 필요함\n","_ = [plot_check_v9(res_df, config, param_zip, pr_msg, x_max, x_margin_mult, y_margin_mult, back_plot, plot_check_dir, **col_idx_dict) for param_zip in zip(np_plot_params, np_plot_params[::-1])]"]},{"cell_type":"markdown","metadata":{"id":"sZAYhcdoXnm4"},"source":["### whole_plot"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"jjFziVVIhgSr"},"outputs":[],"source":["s_id = config.selection_id\n","\n","# ------------ make col_idx_dict config ------------ #\n","nonstep_col_list = []\n","step_col_list = []\n","stepmark_col_list = []\n","\n","# ============ nonstep_col_list - add info(col, alpha, color, linewidth) ============ #\n","# nonstep_col_list.append([['close'], 1, '#ffffff', 2])\n","\n","# ============ step_col_list - add info(col, alpha, color, linewidth) ============ #\n","# ------ htf_candle ------ #\n","hc_tf1 = '15T'\n","hc_tf2 = 'H'\n","hc_tf3 = '4H'\n","\n","step_col_list.append([['open_{}'.format(hc_tf1), 'close_{}'.format(hc_tf1)], 1, '#ffffff', 1])\n","step_col_list.append([['open_{}'.format(hc_tf2), 'close_{}'.format(hc_tf2)], 1, '#ffffff', 2])\n","# step_col_list.append([['open_{}'.format(hc_tf3), 'close_{}'.format(hc_tf3)], 1, '#ffffff', 4])\n","\n","# ------ resi_sup ------ #\n","# rs_tf = 'T'\n","# step_col_list.append([['resi_{}'.format(rs_tf), 'sup_{}'.format(rs_tf)], 1, '#ffeb3b', 1])\n","# step_col_list.append([['resi_out_{}'.format(rs_tf), 'sup_out_{}'.format(rs_tf)], 1, 'dodgerblue', 2])\n","\n","# ------ wave_range ------ #\n","wave_tf1 = config_list[0].tr_set.p1_itv1\n","wave_period1, wave_period2 = config_list[0].tr_set.p1_period1, config_list[0].tr_set.p1_period2\n","\n","# step_col_list.append([['dc_upper_{}{}'.format(wave_tf1, wave_period1), 'dc_lower_{}{}'.format(wave_tf1, wave_period1)], 1, '#ffeb3b', 1])\n","# step_col_list.append([['dc_upper_{}{}'.format(wave_tf1, wave_period2), 'dc_lower_{}{}'.format(wave_tf1, wave_period2)], 1, '#ffeb3b', 1])\n","\n","# step_col_list.append([['dc_upper_{}{}'.format(wave_tf2, wave_period2), 'dc_lower_{}{}'.format(wave_tf2, wave_period2)], 1, '#e65100', 2])\n","\n","# ------ dc ------ #\n","dc_tf1 = '5T'\n","dc_period1 = 20\n","dc_tf2 = 'H'\n","dc_period2 = 20\n","# step_col_list.append([['dc_upper_{}{}'.format(dc_tf1, dc_period1), 'dc_lower_{}{}'.format(dc_tf1, dc_period1)], 1, '#ffeb3b', 1]),  # inner\n","# step_col_list.append([['dc_base_{}{}'.format(dc_tf1, dc_period1)], 1, '#5b9cf6', 1])\n","step_col_list.append([['dc_upper_{}{}'.format(dc_tf2, dc_period2), 'dc_lower_{}{}'.format(dc_tf2, dc_period2)], 1, '#ff00ff', 4]),  # inner\n","step_col_list.append([['dc_base_{}{}'.format(dc_tf2, dc_period2)], 1, '#5b9cf6', 4])\n","\n","# ------ bb ------ #\n","bb_tf1 = 'T'\n","bb_period1 = 20\n","\n","# step_col_list.append([['bb_upper_{}{}'.format(bb_tf1, bb_period1), 'bb_lower_{}{}'.format(bb_tf1, bb_period1)], 1, '#ffffff', 1])\n","# step_col_list.append([['bb_base_{}{}'.format(bb_tf1, bb_period1)], 1, '#00ff00', 1])\n","\n","# step_col_list.append([['bb_upper_{}'.format(tf2), 'bb_lower_{}'.format(tf2)], 1, '#e91e63', 4])\n","\n","# ------ ema ------ #\n","# step_col_list.append([['ema_5T'], 1, '#03ed30', 2])\n","\n","# ============ stepmark_col_list - add info(col, alpha, color, linewidth) ============ #\n","# stepmark_col_list.append([['sar_T'], 1, 'dodgerblue', 7])\n","\n","\n","# ============ str to numbcol ============ #\n","nonstep_col_arr = strcol_tonumb(res_df, nonstep_col_list)\n","step_col_arr = strcol_tonumb(res_df, step_col_list)\n","stepmark_col_arr = strcol_tonumb(res_df, stepmark_col_list)\n","\n","col_idx_dict = \\\n","{\n","  \"ohlc_col_idxs\": get_col_idxs(res_df, ['open', 'high', 'low', 'close']),\n","  \"vp_col_idxs\": get_col_idxs(res_df, ['close', 'volume']),\n","  # \"ohlc_col_idxs\": get_col_idxs(res_df, ['haopen', 'hahigh', 'halow', 'haclose']),  # heikin-ashi ver.\n","  \"nonstep_col_info\": nonstep_col_arr,\n","  \"step_col_info\": step_col_arr,\n","  \"stepmark_col_info\": stepmark_col_arr,\n","  \"ylim_col_idxs\": get_col_idxs(res_df, ['open', 'high', 'low', 'close', 'dc_upper_15T4', 'dc_lower_15T4'])  # , 'dc_upper_H', 'dc_lower_H', 'dc_upper_15T', 'dc_lower_15T', 'short_out_{}'.format(selection_id), 'long_out_{}'.format(selection_id)\n","}   # , 'wave_1_{}'.format(wave_tf2), 'wave_0_{}'.format(wave_tf2), 'dc_upper_15T', 'dc_lower_15T'"]},{"cell_type":"markdown","metadata":{"id":"50HXDIdJij28"},"source":["#### whole_plot main"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"-tbLsXN9eN2p"},"outputs":[],"source":["plot_op_idx_nums = 10\n","\n","win_idxs = (pr_ > 1).ravel()  # [-plot_op_idx_nums:]\n","selected_op_idxs = obj_[4].ravel().astype(int)  # [-plot_op_idx_nums:]\n","selected_ex_idxs = obj_[3].ravel().astype(int)  # [-plot_op_idx_nums:]\n","\n","len_idxs = len(win_idxs)\n","print(\"len_idxs :\", len_idxs)\n","\n","split_range = np.arange(plot_op_idx_nums, len_idxs, plot_op_idx_nums)\n","win_idxs_list = np.split(win_idxs, split_range, axis=0)\n","selected_op_idxs_list = np.split(selected_op_idxs, split_range, axis=0)\n","selected_ex_idxs_list = np.split(selected_ex_idxs, split_range, axis=0)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"FtILHO-4kVlO"},"outputs":[],"source":["_ = [whole_plot_check(np_df, a, b, c, plot_check_dir=None, **col_idx_dict) for a, b, c in zip(win_idxs_list, selected_op_idxs_list, selected_ex_idxs_list)]"]},{"cell_type":"markdown","metadata":{"id":"iTW2ZuX61ojg"},"source":["### plot_funcs"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"0l6joTK_1ojh"},"outputs":[],"source":["def whole_plot_check(data, win_idxs, selected_op_idxs, selected_ex_idxs, plot_check_dir=None, **col_idx_dict):\n","  # start_0 = time.time()\n","  plt.style.use(['dark_background', 'fast'])\n","  fig = plt.figure(figsize=(30, 12))\n","  nrows, ncols = 1, 1\n","  gs = gridspec.GridSpec(nrows=nrows,  # row 부터 index 채우고 col 채우는 순서임 (gs_idx)\n","                          ncols=ncols,\n","                          #height_ratios=[31, 1]\n","                          )\n","\n","  ax = fig.add_subplot(gs[0])\n","\n","  # ------------ add_col section ------------ #\n","  a_data = data[selected_op_idxs[0]:selected_op_idxs[-1] + 1]\n","\n","  plot_op_idxs = selected_op_idxs - selected_op_idxs[0]  \n","  plot_win_op_idxs = plot_op_idxs[win_idxs]\n","  plot_loss_op_idxs = plot_op_idxs[~win_idxs]\n","\n","  plot_ex_idxs = selected_ex_idxs - selected_op_idxs[0]\n","  plot_win_ex_idxs = plot_ex_idxs[win_idxs]\n","  plot_loss_ex_idxs = plot_ex_idxs[~win_idxs]\n","\n","\n","  # ------ add cols ------ #\n","  [nonstep_col_plot(a_data[:, params[0]], *params[1:]) for params in col_idx_dict['nonstep_col_info']]\n","  [step_col_plot(a_data[:, params[0]], *params[1:]) for params in col_idx_dict['step_col_info']]\n","  [stepmark_col_plot(a_data[:, params[0]], *params[1:]) for params in col_idx_dict['stepmark_col_info']]\n","\n","  # [plt.axvline(op_idx, color='#00ff00') for op_idx in plot_win_op_idxs]\n","  # [plt.axvline(op_idx, color='#ff0000') for op_idx in plot_loss_op_idxs]\n","  [plt.axvspan(op_idx, ex_idx, alpha=0.5, color='#00ff00') for op_idx, ex_idx in zip(plot_win_op_idxs, plot_win_ex_idxs)]\n","  [plt.axvspan(op_idx, ex_idx, alpha=0.5, color='#ff0000') for op_idx, ex_idx in zip(plot_loss_op_idxs, plot_loss_ex_idxs)]\n","  \n","  plt.show()\n","\n","  if plot_check_dir is None:\n","    plt.show()\n","    print()\n","  else:\n","    fig_name = plot_check_dir + \"/whole_plot_{}.png\".format(selected_op_idxs[0])\n","    plt.savefig(fig_name)\n","    print(fig_name, \"saved !\")\n","  plt.close()\n","  # print(\"elapsed time :\", time.time() - start_0)\n","\n","  return\n","\n","def plot_check_v9(res_df, config, param_zip, pr_msg, x_max, x_margin_mult, y_margin_mult, back_plot, plot_check_dir=None, **col_idx_dict):\n","  # start_0 = time.time()\n","  plt.style.use(['dark_background', 'fast'])\n","  fig = plt.figure(figsize=(30, 18))\n","  nrows, ncols = 2, 2\n","  gs = gridspec.GridSpec(nrows=nrows,  # row 부터 index 채우고 col 채우는 순서임 (gs_idx)\n","                         ncols=ncols,\n","                         height_ratios=[3, 1]\n","                         )\n","  for gs_idx, params in enumerate(param_zip):\n","\n","    iin, iout, pr, en_p, ex_p, entry_idx, exit_idx, p1_idx, p2_idx, lvrg, fee, tp_line, out_line, tp_1, tp_0, out_1, out_0, ep2_0 = params\n","\n","    # print(\"en_p, ex_p :\", en_p, ex_p)\n","    # print(\"tp_line, out_line, ep2_0 :\", tp_line, out_line, ep2_0)\n","\n","    # temporary\n","    # if exit_idx - p1_idx < 50:\n","    # if exit_idx != entry_idx:\n","    # print(\"p1_idx :\", p1_idx)\n","    # if p1_idx != 370259:\n","    #   break\n","\n","    # ============ define ax1 & ax2 ============ #\n","    ax1 = fig.add_subplot(gs[gs_idx])\n","    ax2 = fig.add_subplot(gs[gs_idx + 2])\n","\n","    # ------ date range ------ #\n","    if back_plot == 0:\n","      iout = iin + x_max\n","      # print(\"iin, iout :\", iin, iout)\n","\n","    a_data = res_df.iloc[int(iin):int(iout + 1)].to_numpy()\n","    # a_data = data[iin:iout]\n","\n","    # ------------ add_col section ------------ #\n","    # ------ candles ------ #\n","    candle_plot_v2(ax1, a_data[:, col_idx_dict['ohlc_col_idxs']], alpha=1.0, wickwidth=1.0)\n","\n","    # ------ add cols ------ #\n","    [nonstep_col_plot_v2(ax1, a_data[:, params_[0]], *params_[1:]) for params_ in col_idx_dict['nonstep_col_info']]\n","    [step_col_plot_v2(ax1, a_data[:, params_[0]], *params_[1:]) for params_ in col_idx_dict['step_col_info']]\n","    [stepmark_col_plot_v2(ax1, a_data[:, params_[0]], *params_[1:]) for params_ in col_idx_dict['stepmark_col_info']]\n","\n","    [step_col_plot_v2(ax2, a_data[:, params_[0]], *params_[1:]) for params_ in col_idx_dict['step_col_info2']]\n","\n","    # ------ get vp_info ------ #\n","    kde_factor = 0.1   # 커질 수록 전체적인 bars_shape 이 곡선이됨, 커질수록 latency 좋아짐 (0.00003s 정도)\n","    num_samples = 100  # plot 되는 volume bars (y_axis) 와 비례관계\n","    # vp_data = data[iin - 500:iin, col_idx_dict['vp_col_idxs']].T  # Todo, vp_range should be calculated by wave_point\n","\n","    if tp_1 < out_0:  # SELL order\n","      post_co_idx = res_df.iloc[int(p1_idx), col_idx_dict['post_co_idx']]\n","      # vp_iin = res_df.iloc[int(p1_idx) - 1, col_idx_dict['post_cu_idx']].to_numpy()  # Todo, co_idx 와 co_post_idx 의 차별을 위해서 -1 해줌 <-- 중요 point\n","      vp_iin = res_df.iloc[post_co_idx, col_idx_dict['post_cu_idx']].to_numpy()  # Todo, co_idx 와 co_post_idx 의 차별을 위해서 -1 해줌 <-- 중요 point\n","    else:\n","      post_cu_idx = res_df.iloc[int(p1_idx), col_idx_dict['post_cu_idx']]\n","      # vp_iin = res_df.iloc[int(p1_idx) - 1, col_idx_dict['post_co_idx']].to_numpy()\n","      vp_iin = res_df.iloc[int(post_cu_idx), col_idx_dict['post_co_idx']].to_numpy()\n","    # print(\"iin, vp_iin, p1_idx :\", iin, vp_iin, p1_idx)\n","\n","    vp_data = res_df.iloc[int(vp_iin):int(p1_idx), col_idx_dict['vp_col_idxs']].to_numpy().T  # Todo, vp_range should be calculated by wave_point\n","    # print(\"vp_data :\", vp_data)\n","    # vp_info = [vp_range, *vp_data, kde_factor, num_samples]\n","    vp_info = [*vp_data, kde_factor, num_samples]\n","\n","    # ------ ep, tp + xlim ------ #\n","    try:\n","      eptp_hvline_v9_1(ax1, ax2, config, *params, back_plot, x_max, x_margin_mult, y_margin_mult, a_data, vp_info, **col_idx_dict)\n","    except Exception as e:\n","      print(\"error in eptp_hvline :\", e)\n","\n","    #     Todo    #\n","    #     3. outer_price plot 일 경우, gs_idx + nrows 하면 됨\n","\n","    # ------ trade_info ------ #\n","    data_msg_list = [\"\\n {} : {:.3f}\".format(*params_[1:], *res_df.iloc[int(p1_idx), params_[0]]) for params_ in col_idx_dict['data_window_p1_col_info']]  # * for unsupported format for arr\n","    data_msg_list += [\"\\n {} : {:.3f}\".format(*params_[1:], *res_df.iloc[int(p2_idx), params_[0]]) for params_ in col_idx_dict['data_window_p2_col_info']]\n","    ps_msg_expand = pr_msg.format(p1_idx, exit_idx, pr, lvrg, fee) + ''.join(data_msg_list)\n","    \n","    ax1.set_title(ps_msg_expand)   # set_title on ax1\n","\n","  if plot_check_dir is None:\n","    plt.show()\n","    print()\n","  else:\n","    fig_name = plot_check_dir + \"/{}.png\".format(int(entry_idx))\n","    plt.savefig(fig_name)\n","    print(fig_name, \"saved !\")\n","  plt.close()\n","  # print(\"elapsed time :\", time.time() - start_0)\n","\n","  return\n","\n","def eptp_hvline_v9_1(ax1, ax2, config, iin, iout, pr, en_p, ex_p, entry_idx, exit_idx, p1_idx, p2_idx, lvrg, fee, tp_line, out_line, tp_1, tp_0, out_1, out_0, ep2_0,\n","                   back_plot, x_max, x_margin_mult, y_margin_mult, a_data, vp_info, **col_idx_dict):\n","  # ------ get vertical ticks ------ #\n","  entry_tick = int(entry_idx - iin)\n","  exit_tick = entry_tick + int(exit_idx - entry_idx)\n","  p1_tick = entry_tick - int(entry_idx - p1_idx)\n","  p2_tick = p1_tick + int(p2_idx - p1_idx)\n","\n","  if back_plot == 1:\n","    x_max = p1_tick + 20\n","  elif back_plot == 2:\n","    x_max = p2_tick + 20 \n","  elif back_plot == 3:\n","    x_max = entry_tick + 20 \n","  elif back_plot == 4:\n","    x_max = exit_tick + 20\n","\n","  # ============ xlim ============ #\n","  if (iout - iin) > x_max:\n","    x_margin = x_max * x_margin_mult\n","    ax1.set_xlim(0 - x_margin, x_max + x_margin)\n","    ax2.set_xlim(0 - x_margin, x_max + x_margin)\n","  x0, x1 = ax1.get_xlim()\n","\n","  # ============ hlines ============ #\n","  # ------------ ax1 ------------ #\n","  # ------ entry & exit ------ #\n","  en_xmin = entry_tick / x1\n","  ex_xmin = exit_tick / x1\n","  ax1.axhline(en_p, x0, en_xmin, linewidth=2, linestyle='--', alpha=1, color='lime')  # en_p line axhline\n","  if config.tr_set.check_hlm in [0, 1]:\n","    ax1.text(x0, en_p, 'en_p :\\n {:.3f} \\n epg1 {}'.format(en_p, config.tr_set.ep_gap1), ha='right', va='center', fontweight='bold', fontsize=15)  # en_p line label\n","  else:\n","    ax1.text(x0, en_p, 'en_p :\\n {:.3f} \\n epg2 {}'.format(en_p, config.tr_set.ep_gap2), ha='right', va='center', fontweight='bold', fontsize=15)  # en_p line label\n","  ax1.axhline(ex_p, ex_xmin, 1, linewidth=2, linestyle='--', alpha=1, color='lime')  # ex_p line axhline (signal 도 포괄함, 존재 의미)\n","  ax1.text(x1, ex_p, 'ex_p :\\n {}'.format(ex_p), ha='left', va='center', fontweight='bold', fontsize=15)  # ex_p line label\n","\n","  # ------ tpout_line ------ #\n","  ax1.axhline(tp_line, 0.05, 1, linewidth=2, linestyle='-', alpha=1, color='#00ff00')  # ep 와 gap 비교 용이하기 위해 ex_xmin -> 0.1 사용\n","  ax1.text(x0, tp_line, 'tpg {}'.format(config.tr_set.tp_gap), ha='right', va='center', fontweight='bold', fontsize=15, color='#00ff00')\n","  ax1.axhline(out_line, 0.05, 1, linewidth=2, linestyle='-', alpha=1, color='#ff0000')\n","  ax1.text(x0, out_line, 'outg {}'.format(config.tr_set.out_gap), ha='right', va='center', fontweight='bold', fontsize=15, color='#ff0000')\n","\n","  # ------ tp_box ------ #\n","  text_x_pos = (x0 + x1) * 0.1\n","  ax1.axhline(tp_1, 0.2, 1, linewidth=4, linestyle='-', alpha=1, color='#ffffff')\n","  ax1.text(text_x_pos, tp_1, ' tp_1', ha='right', va='bottom', fontweight='bold', fontsize=15)\n","  ax1.axhline(tp_0, 0.2, 1, linewidth=4, linestyle='-', alpha=1, color='#ffffff')\n","  ax1.text(text_x_pos, tp_0, ' tp_0', ha='right', va='bottom', fontweight='bold', fontsize=15)  \n","\n","  # ------ out_box ------ #\n","  # text_x_pos = (x0 + x1) * 0.1\n","  ax1.axhline(out_1, 0.2, 1, linewidth=2, linestyle='-', alpha=1, color='#ffffff')\n","  ax1.text(text_x_pos, out_1, ' out_1', ha='right', va='bottom', fontweight='bold', fontsize=15)\n","  ax1.axhline(out_0, 0.2, 1, linewidth=2, linestyle='-', alpha=1, color='#ffffff')\n","  ax1.text(text_x_pos, out_0, ' out_0', ha='right', va='bottom', fontweight='bold', fontsize=15)  \n","  # ------ ep_box ------ #\n","  # text_x_pos = (x0 + x1) * 0.1\n","  ax1.axhline(ep2_0, 0.2, 1, linewidth=1, linestyle='-', alpha=1, color='#ffffff')\n","  ax1.text(text_x_pos, ep2_0, ' ep2_0', ha='right', va='bottom', fontweight='bold', fontsize=15)\n","  \n","  # ------ volume profile ------ #\n","  close, volume, kde_factor, num_samples = vp_info\n","  # if iin >= vp_range:\n","  # start_0 = time.time()\n","  kde = stats.gaussian_kde(close, weights=volume, bw_method=kde_factor)\n","  kdx = np.linspace(close.min(), close.max(), num_samples)\n","  kdy = kde(kdx)\n","  kdy_max = kdy.max()\n","  # print(\"kde elapsed_time :\", time.time() - start_0)\n","\n","  # peaks,_ = signal.find_peaks(kdy, prominence=kdy_max * 0.3)   # get peak_entries\n","  # peak_list = kdx[peaks]   # peak_list\n","  # [ax1.axhline(peak, linewidth=1, linestyle='-', alpha=1, color='orange') for peak in peak_list]\n","  \n","  kdy_ratio = p1_tick / kdy_max # 30 / 0.0001   # max_value 가 p1_tick 까지 닿을 수 있게.\n","  # print(\"kdx :\", kdx)\n","  # ax1.plot(kdy * kdy_ratio, kdx, color='white')  # Todo, bars 가능 ?\n","  # ax1.barh(kdy * kdy_ratio, kdx, color='white')  # Todo, bars 가능 ?\n","  ax1.barh(kdx, kdy * kdy_ratio, color='#00ff00', alpha=0.5)  # Todo, bars 가능 ?\n","\n","  # ------------ ax2 ------------ #\n","  # ------ cci_band ------ #\n","  ax2.axhline(100, color=\"#ffffff\")\n","  ax2.axhline(-100, color=\"#ffffff\")\n","\n","  # ------ stoch_band ------ #\n","  # ax2.axhline(67, color=\"#ffffff\")\n","  # ax2.axhline(33, color=\"#ffffff\")\n","  \n","  # ax2.axhline(0, color=\"#ffffff\")\n","\n","  # ============ ylim ============ # - ax1 only\n","  if back_plot:\n","    y_lim_data = a_data[:x_max + 1, col_idx_dict['ylim_col_idxs']]  # +1 for including p1_tick\n","  else:\n","    y_lim_data = a_data[:, col_idx_dict['ylim_col_idxs']]\n","  \n","  y_min = y_lim_data.min()\n","  y_max = y_lim_data.max()\n","  y_margin = (y_max - y_min) * y_margin_mult\n","  ax1.set_ylim(y_min - y_margin, y_max + y_margin)\n","\n","  # ============ vline (p1_tick, entry_tick, exit_tick) ============ # - add p1_tick on ax2\n","  y0, y1 = ax1.get_ylim()\n","  low_data = a_data[:exit_tick + 1, col_idx_dict['ohlc_col_idxs'][2]]  # +1 for including exit_tick\n","  p2_ymax, en_ymax, ex_ymax = [(low_data[tick_] - y0) / (y1 - y0) - .01 for tick_ in [p2_tick, entry_tick, exit_tick]]  # -.05 for margin\n","  if p1_tick > 0:\n","    p1_ymax = (low_data[p1_tick] - y0) / (y1 - y0) - .01\n","    ax1.axvline(p1_tick, 0, p1_ymax, alpha=1, linewidth=2, linestyle='--', color='#ff0000')  # 추후, tick 별 세부 정의가 달라질 수 있음을 고려해 multi_line 작성 유지\n","    ax2.axvline(p1_tick, 0, 1, alpha=1, linewidth=2, linestyle='--', color='#ff0000')\n","  ax1.axvline(p2_tick, 0, p2_ymax, alpha=1, linewidth=2, linestyle='--', color='#2196f3')\n","  ax1.axvline(entry_tick, 0, en_ymax, alpha=1, linewidth=2, linestyle='--', color='#ffeb3b')\n","  ax1.axvline(exit_tick, 0, ex_ymax, alpha=1, linewidth=2, linestyle='--', color='#ffeb3b')\n","  ax2.axvline(p2_tick, 0, 1, alpha=1, linewidth=2, linestyle='--', color='#2196f3')\n","  ax2.axvline(entry_tick, 0, 1, alpha=1, linewidth=2, linestyle='--', color='#ffeb3b')\n","  ax2.axvline(exit_tick, 0, 1, alpha=1, linewidth=2, linestyle='--', color='#ffeb3b')\n","\n","  return"]},{"cell_type":"markdown","metadata":{"id":"8soVNGFt1ojj"},"source":["#### legacy"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"narSQRCz1ojj"},"outputs":[],"source":["_ = [plot_check_v4(np_df, config, param_zip, pr_msg, x_max, x_margin_mult, y_margin_mult, front_plot, plot_check_dir, 500, 0.07, 100, **col_idx_dict) for param_zip in zip(np_plot_params, np_plot_params[::-1])]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"kLiEIiMW1ojk"},"outputs":[],"source":["def plot_check_v4(data, config, param_zip, pr_msg, x_max, x_margin_mult, y_margin_mult, front_plot, plot_check_dir=None, vp_range=500, kde_factor=0.05, num_samples=100, **col_idx_dict):\n","  # start_0 = time.time()\n","  plt.style.use(['dark_background', 'fast'])\n","  fig = plt.figure(figsize=(30, 18))\n","  nrows, ncols = 2, 2\n","  gs = gridspec.GridSpec(nrows=nrows,  # row 부터 index 채우고 col 채우는 순서임 (gs_idx)\n","                         ncols=ncols,\n","                         height_ratios=[3, 1]\n","                         )\n","  for gs_idx, params in enumerate(param_zip):\n","    ax = fig.add_subplot(gs[gs_idx])\n","    iin, iout, pr, ep, tp, entry_idx, exit_idx, open_idx, lvrg, fee, tp_line, out_line, bias_info, bias_thresh = params\n","\n","    # ------------ add_col section ------------ #\n","    iin, iout = int(iin), int(iout)\n","    a_data = data[iin:iout]\n","    # ------ candles ------ #\n","    candle_plot(a_data[:, col_idx_dict['ohlc_col_idxs']], ax, alpha=1.0, wickwidth=1.0)\n","    \n","    # ------ add cols ------ #\n","    [nonstep_col_plot(a_data[:, params[0]], *params[1:]) for params in col_idx_dict['nonstep_col_info']]\n","    [step_col_plot(a_data[:, params[0]], *params[1:]) for params in col_idx_dict['step_col_info']]\n","    [stepmark_col_plot(a_data[:, params[0]], *params[1:]) for params in col_idx_dict['stepmark_col_info']]\n","\n","    # vp_data = data[iin - vp_range:iin, col_idx_dict['vp_col_idxs']]\n","    # vp_info = [vp_range, vp_data[:, 0], vp_data[:, 1], kde_factor, num_samples]\n","    vp_data = data[iin - vp_range:iin, col_idx_dict['vp_col_idxs']].T\n","    vp_info = [vp_range, *vp_data, kde_factor, num_samples]\n","\n","    # ------ ep, tp + xlim ------ #\n","    eptp_hvline_v4(config, ep, tp, entry_idx, exit_idx, open_idx, tp_line, out_line, bias_info, bias_thresh, \n","                   front_plot, iin, iout, x_max, x_margin_mult, y_margin_mult, a_data, vp_info, **col_idx_dict)        \n","\n","    #     Todo    #\n","    #     3. outer_price plot 일 경우, gs_idx + nrows 하면 됨\n","\n","    # ------ trade_info ------ #\n","    plt.title(pr_msg.format(entry_idx, exit_idx, pr, lvrg, fee))\n","\n","  if plot_check_dir is None:\n","    plt.show()\n","    print()\n","  else:\n","    fig_name = plot_check_dir +  \"/%s.png\" % int(entry_idx)\n","    plt.savefig(fig_name)\n","    print(fig_name, \"saved !\")\n","  plt.close()\n","  # print(\"elapsed time :\", time.time() - start_0)  \n","\n","  return\n","\n","def eptp_hvline_v4(config, en_p, ex_p, entry_idx, exit_idx, open_idx, tp_line, out_line, bias_info, bias_thresh, \n","                   front_plot, iin, iout, x_max, x_margin_mult, y_margin_mult, a_data, vp_info, **col_idx_dict):\n","  # ------ get vertical ticks ------ #\n","  entry_tick = int(entry_idx - iin)\n","  open_tick = entry_tick - int(entry_idx - open_idx)\n","  exit_tick = entry_tick + int(exit_idx - entry_idx)\n","\n","  if front_plot == 1:\n","    x_max = open_tick\n","  elif front_plot == 2:\n","    x_max = entry_tick\n","  if (iout - iin) > x_max:\n","    x_margin = x_max * x_margin_mult\n","    plt.xlim(0 - x_margin, x_max + x_margin)\n","  x0, x1 = plt.gca().get_xlim()\n","  # ------------ hlines ------------ #\n","  # ------ entry & exit ------ #\n","  en_xmin = entry_tick / x1\n","  ex_xmin = exit_tick / x1\n","  plt.axhline(en_p, x0, en_xmin, linewidth=2, linestyle='--', alpha=1, color='lime')  # en_p line axhline\n","  plt.text(x0, en_p, ' en_p :\\n {}'.format(en_p), ha='right', va='center', fontweight='bold')  # en_p line label\n","  plt.axhline(ex_p, ex_xmin, 1, linewidth=2, linestyle='--', alpha=1, color='lime')  # ex_p line axhline (signal 도 포괄함, 존재 의미)\n","  plt.text(x1, ex_p, ' ex_p :\\n {}'.format(ex_p), ha='left', va='center', fontweight='bold')  # ex_p line label\n","\n","  # ------ tpout_line ------ #\n","  plt.axhline(tp_line, 0.1, 1, linewidth=4, linestyle='-', alpha=1, color='#00ff00')  # ep 와 gap 비교 용이하기 위해 ex_xmin -> 0.1 사용\n","  plt.text(x0, tp_line, ' %s' % config.tr_set.tp_gap, ha='left', va='center', fontweight='bold')\n","  plt.axhline(out_line, 0.1, 1, linewidth=4, linestyle='-', alpha=1, color='#ff0000')\n","  plt.text(x0, out_line, ' %s' % config.tr_set.out_gap, ha='left', va='center', fontweight='bold')\n","\n","  # ------ bias_line ------ #\n","  plt.axhline(bias_info, 0.1, 1, linewidth=4, linestyle='-', alpha=1, color='dodgerblue')\n","  plt.text(x0, bias_info, ' bias_info', ha='left', va='center', fontweight='bold')\n","  plt.axhline(bias_thresh, 0.1, 1, linewidth=4, linestyle='-', alpha=1, color='#ff8400')\n","  plt.text(x0, bias_thresh, ' bias_thresh', ha='left', va='center', fontweight='bold')\n","\n","  # ------ volume profile ------ #\n","  vp_range, close, volume, kde_factor, num_samples = vp_info\n","  if iin >= vp_range:\n","    start_0 = time.time()\n","    kde = stats.gaussian_kde(close, weights=volume, bw_method=kde_factor)\n","    kdx = np.linspace(close.min(), close.max(), num_samples)\n","    kdy = kde(kdx)\n","    print(\"kde elapsed_time :\", time.time() - start_0)\n","\n","    kdy_max = kdy.max()\n","    # peaks,_ = signal.find_peaks(kdy)\n","    peaks,_ = signal.find_peaks(kdy, prominence=kdy_max * 0.3)\n","    peak_list = kdx[peaks]   # peak_list\n","    [plt.axhline(peak, linewidth=6, linestyle='-', alpha=1, color='white') for peak in peak_list]\n","    \n","    kdy_ratio = entry_tick / kdy_max # 30 / 0.0001\n","    plt.plot(kdy * kdy_ratio, kdx, color='white')\n","    # plt.plot(pky, pkx, 'bo', color='yellow')\n","\n","  # ------ ylim ------ #\n","  if front_plot:\n","    y_lim_data = a_data[:x_max + 1, col_idx_dict['ylim_col_idxs']]  # +1 for including open_tick\n","  else:\n","    y_lim_data = a_data[:, col_idx_dict['ylim_col_idxs']]\n","  y_min = y_lim_data.min()\n","  y_max = y_lim_data.max()\n","  y_margin = (y_max - y_min) * y_margin_mult\n","  # plt.ylim(y_min - y_margin, y_max + y_margin)\n","\n","  # ------------ vline (open_tick, entry_tick, exit_tick) ------------ #\n","  y0, y1 = plt.gca().get_ylim()\n","  l_data = a_data[:exit_tick + 1, col_idx_dict['ohlc_col_idxs'][2]]  # +1 for including exit_tick\n","  open_ymax, en_ymax, ex_ymax = [(l_data[tick_] - y0) / (y1 - y0) - .01 for tick_ in [open_tick, entry_tick, exit_tick]]  # -.05 for margin\n","  plt.axvline(open_tick, 0, open_ymax, alpha=1, linewidth=2, linestyle='--', color='#ffeb3b')  # 추후, tick 별 세부 정의가 달라질 수 있음을 고려해 multi_line 작성 유지\n","  plt.axvline(entry_tick, 0, en_ymax, alpha=1, linewidth=2, linestyle='--', color='#ffeb3b')\n","  plt.axvline(exit_tick, 0, ex_ymax, alpha=1, linewidth=2, linestyle='--', color='#ffeb3b')\n","\n","  return"]},{"cell_type":"markdown","metadata":{"id":"ddL_BC24buq0"},"source":["### dump"]},{"cell_type":"markdown","metadata":{"id":"zgTrEWWqbwsT"},"source":["#### whole_plot thing"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"M4zn8wxibzAR"},"outputs":[],"source":["fig = go.Figure(data=[go.Candlestick(x=t_df.index,\n","                open=t_df.open,\n","                high=t_df.high,\n","                low=t_df.low,\n","                close=t_df.close)])\n","\n","fig.show()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"4IhBjPMobzAS"},"outputs":[],"source":["cf.go_offline()\n","init_notebook_mode()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"n9WZkE9wbzAS"},"outputs":[],"source":["qf = cf.QuantFig(t_df, title=\"Apple's stock price in 2021\", name='AAPL')\n","qf.iplot()"]},{"cell_type":"markdown","metadata":{"id":"zmYbP-Gc1ojs"},"source":["#### brief np_pr survey"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"82a8Km8z1ojs"},"outputs":[],"source":["# plot_pr_list[:100]\n","plt.plot(np_pr)\n","plt.axhline(1)\n","plt.show()"]},{"cell_type":"markdown","metadata":{"id":"5rdQZm_71ojv"},"source":["#### plot indi. legacy"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"u11r-dU91ojw"},"outputs":[],"source":["\n","  # ---------------------- ma ---------------------- #\n","   # --------- ema --------- #\n","  # alpha = 1\n","  # for sm_i, item in enumerate(ema_list):\n","  #   if sm_i > 0:\n","  #     lw = 5\n","  #   else:\n","  #     lw = 2\n","  #   plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#03ed30', linewidth=lw)\n","  #   alpha -= 0.2\n","\n","  #   # --------- sma --------- #\n","  # alpha = 1\n","  # for sm_i, sma in enumerate(sma_list):\n","  #   if sm_i > 0:\n","  #     lw = 5\n","  #   else:\n","  #     lw = 4\n","  #   plt.step(np.arange(len(plot_df)), plot_df[sma].values, alpha=alpha, color='#e91e63', linewidth=lw)\n","  #   alpha -= 0.2\n","\n","  \n","  # ---------------------- cb ---------------------- #\n","  # alpha = 1\n","  # for sm_i, item in enumerate(cb_list):\n","  #   if sm_i > 0:\n","  #     lw = 5\n","  #   else:\n","  #     lw = 2\n","  #   plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#5b9cf6', linewidth=lw)\n","  #   alpha -= 0.2\n","\n","\n","  \n","  # ---------------------- sar ---------------------- #\n","  # alpha = 1\n","  # markersize = 5\n","  # for sar in sar_list:\n","  #   plt.step(plot_df[sar].values, 'c*', alpha=alpha, markersize=markersize, color='dodgerblue')  # sar mic\n","  #   markersize += 1\n","  #   alpha -= 0.1\n","\n","  # plt.step(plot_df.values[:, [12]], 'co', alpha=1, markersize=7)  # sar mac\n","\n","  #               cloud               #\n","  # alpha = 0.7\n","  # for senkoua, senkoub in zip(senkoua_list, senkoub_list):\n","  #   plt.fill_between(np.arange(len(plot_df)), plot_df[senkoua].values, plot_df[senkoub].values, # ichimoku\n","  #                     where=plot_df[senkoua].values >= plot_df[senkoub].values, facecolor='g', alpha=alpha) # ichimoku\n","  #   plt.fill_between(np.arange(len(plot_df)), plot_df[senkoua].values, plot_df[senkoub].values,\n","  #                     where=plot_df[senkoua].values <= plot_df[senkoub].values, facecolor='r', alpha=alpha)  \n","  #   alpha -= 0.05\n","  \n","\n","\n","  # ---------------------- outer price indi. ---------------------- #\n","  #           macd          #\n","  # plt.subplot(312)\n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for macd in macd_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[macd].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","\n","  # plt.axhline(0, linestyle='--')\n","\n","  \n","  # #           trix          #  \n","  # # plt.subplot(313)\n","  # plt.subplot(gs[2])\n","  # alpha = 1\n","  # for trix in trix_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[trix].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","  # plt.axhline(0, linestyle='--')\n","\n","  \n","  #           fisher          #  \n","  # plt.subplot(313)\n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for fisher in fisher_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[fisher].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","    \n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","\n","  # plt.axhline(0, linestyle='--')\n","  # plt.axhline(fisher_upper, linestyle='--')\n","  # plt.axhline(fisher_lower, linestyle='--')\n","\n","  #           stoch          #  \n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for stoch_ in stoch_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[stoch_].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axhline(50, linestyle='--')\n","  # plt.axhline(stoch_upper, linestyle='--')\n","  # plt.axhline(stoch_lower, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","\n","  # ---------- cctbbo ---------- #  \n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for cctbbo in cctbbo_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[cctbbo].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axhline(50, linestyle='--')\n","  # plt.axhline(cctbbo_upper, linestyle='--')\n","  # plt.axhline(cctbbo_lower, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","\n","  # ---------- ema_roc ---------- #  \n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for emaroc in emaroc_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[emaroc].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","  # plt.axhline(0, linestyle='--')\n","  \n","  # ---------- bbw ---------- #  \n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for bbwp_ in bbwp_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[bbwp_].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","  # plt.axhline(bbwp_thresh, linestyle='--')\n","\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","\n"]},{"cell_type":"markdown","metadata":{"id":"tApzvz_gK9lR"},"source":["## legacy"]},{"cell_type":"markdown","metadata":{"id":"OJqkmkpsLCYC"},"source":["### tr_tresh calc"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"gcpo4MGd9Wm4"},"outputs":[],"source":["res_wr = 0.6\n","# tr_thresh = 1\n","# tr_thresh = ((1 - res_wr) / res_wr) ** 0.5\n","tr_thresh = ((1 - res_wr) / res_wr) + 0.01\n","# tr_thresh = 2.6\n","print(\"res_wr :\", res_wr)\n","print(\"tr_thresh :\", tr_thresh)\n","\n","\n","#   단리    #\n","trade_num = 1000\n","asset = 1 # thousand USDT\n","test_loss_gap = 0.95  # fee adjusted\n","test_pr_gap = 1 + (1 - test_loss_gap) * tr_thresh\n","\n","test_loss_cnt = trade_num * (1 - res_wr)\n","test_pr_cnt = trade_num * res_wr\n","\n","test_trade_list = [test_pr_gap] * int(test_pr_cnt) + [test_loss_gap] * int(test_loss_cnt)\n","random.shuffle(test_trade_list)\n","# print(\"len(test_trade_list) :\", len(test_trade_list))\n","print(test_trade_list[:10])\n","print()\n","\n","# print(\"%.5f\" % np.cumprod(test_trade_list)[-1])\n","for tr_thresh_ in np.arange(1, 3, 0.2):\n","  if (1 + (1 - test_loss_gap) * tr_thresh_) ** test_pr_cnt * test_loss_gap ** test_loss_cnt > 1:\n","    break\n","print(\"복리를 위한 tr_thresh_ :\", tr_thresh_)\n","# print(\"tr_thresh :\", tr_thresh)\n","print(\"np.cumprod(test_trade_list)[-1] :\", np.cumprod(test_trade_list)[-1])\n","print(\"total_pr : \", np.cumprod(test_trade_list)[-1])\n","print()\n","#   복리 tr_thresh  #\n","#   1. trade_num 에 영향 받지 않음\n","#   2. loss_gap 에 비례함\n","\n","for tr_thresh_ in np.arange(1, 3, 0.01):\n","  if ((1 - test_loss_gap) * tr_thresh_) * test_pr_cnt + (test_loss_gap - 1) * test_loss_cnt > 0:\n","    break\n","np_test_trade = np.array(test_trade_list) - 1\n","print(np_test_trade[:10])\n","# print(\"%.3f\" % )\n","print(\"단리를 위한 tr_thresh_ :\", tr_thresh_)\n","# print(\"tr_thresh :\", tr_thresh)\n","print(\"np.cumsum(np_test_trade)[-1] :\", np.cumsum(np_test_trade)[-1])\n","print(\"total_pr : \", 1 + np.cumsum(np_test_trade)[-1])\n"]}],"metadata":{"accelerator":"GPU","colab":{"collapsed_sections":["Ic1mfmwWCIBu","E0n53hflJbnp","MlFkpO1MSuzl","x2yj2SwAXDLp","Q_1wJTcRYpm8","EOXQbXixiQcK","RZJ6uIA_VcJs","xpyP5t8Ht_pE","MuD_2vY7TI_8","983aUwM76s6X","_blyFhQJUd5X","50HXDIdJij28"],"provenance":[],"toc_visible":true,"authorship_tag":"ABX9TyMiXH1TJAL97gSP7Hff5PYZ"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}