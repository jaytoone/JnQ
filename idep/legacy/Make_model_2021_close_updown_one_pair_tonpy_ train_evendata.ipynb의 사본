{"nbformat":4,"nbformat_minor":0,"metadata":{"kernelspec":{"display_name":"Python [conda env:tensorflow2_p36]","language":"python","name":"conda-env-tensorflow2_p36-py"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.6.5"},"colab":{"name":"Make_model_2021_close_updown_one_pair_tonpy_ train_evendata.ipynb의 사본","provenance":[{"file_id":"1z4z_KLPzc6RWsxo3X_dHbpByxUAgjoMJ","timestamp":1583754134002}],"collapsed_sections":[],"toc_visible":true,"machine_shape":"hm"},"accelerator":"GPU"},"cells":[{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"AK9FjWwLOyay","executionInfo":{"status":"ok","timestamp":1619415704815,"user_tz":-540,"elapsed":20901,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"}},"outputId":"51c4fdf1-11a4-435a-9b60-4bbe6de8accd"},"source":["from google.colab import drive\n","drive.mount('/content/drive')\n","\n","import os, sys\n","\n","current_path = '/content/drive/My Drive/Colab Notebooks/Project_Stock/'\n","\n","os.chdir(current_path)"],"execution_count":1,"outputs":[{"output_type":"stream","text":["Mounted at /content/drive\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"8uqYv5StTazo"},"source":["### **Requirements**"]},{"cell_type":"code","metadata":{"id":"9qGt60DKTZmf"},"source":["# !pip install statsmodels==0.12.2\n","\n","# import statsmodels\n","# statsmodels.__version__"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"y7bVjhlwPI_-"},"source":["### **ARIMA**"]},{"cell_type":"code","metadata":{"id":"NvdpArctN_6l","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1619330203367,"user_tz":-540,"elapsed":7182,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"}},"outputId":"f6c97d3c-dacc-4e62-d169-7920d9c3becc"},"source":["from statsmodels.tsa.arima_model import ARIMA\n","# from statsmodels.tsa.arima.model import ARIMA\n","\n","from datetime import datetime\n","\n","\n","def arima_test(target, use_rows=None):\n","\n","  size = int(len(target) * 0.66)\n","  train, test = target[:size].values, target[size:]\n","  test_shift = test.shift(1).values\n","  test = test.values\n","  # break\n","\n","  history = list(train)\n","  predictions = list()\n","  err_ranges = list()\n","  for t in range(len(test)):\n","    \n","      if use_rows is not None:\n","        history = history[-use_rows:]\n","        \n","      model = ARIMA(history, order=(0, 2, 4))\n","      model_fit = model.fit()\n","      output = model_fit.forecast()\n","      # print(output)\n","      # break\n","\n","      predictions.append(output[0])\n","      err_ranges.append(output[1])\n","      obs = test[t]\n","      # print('obs :', obs)\n","      history.append(obs)\n","      # break\n","      print('\\r %.2f%%' % (t / len(test) * 100), end='')\n","\n","  print(len(test), len(predictions))\n","\n","  return predictions, err_ranges\n","\n","\n","# print(high)\n","\n","\n","def get_back_result(ohlcv, predictions, err_ranges, tp=0.04, sl=None, leverage=1, show_detail=False, show_plot=False, return_pr=False, cumsum=False, \n","                    close_ver=False, reverse_short=False):\n","\n","  \n","  high, low, test = np.split(ohlcv.values[-len(predictions):, [1, 2, 3]], 3, axis=1)\n","\n","  if close_ver:\n","    predictions = ohlcv['close'].shift(1).values[-len(test):]\n","\n","  fee = 0.0006\n","  long_profits = []\n","  short_profits = []\n","  liquidations = []\n","  win_cnt = 0\n","  for i in range(len(test)):\n","\n","    long_ep = predictions[i]\n","    if sl is not None:\n","      long_sl = long_ep * (1 / (sl + 1))\n","\n","    # assert long_ep < long_exit, 'long_exit < long_ep !, %s, %s' % (long_exit, long_ep)\n","    \n","    short_ep = (predictions[i] + err_ranges[i]) * (1 + tp)\n","    # short_ep = (predictions[i] + err_ranges[i]) * (1 / (1 - tp))\n","    if sl is not None:\n","      short_sl = short_ep * (1 / (1 - sl))\n","\n","    # print((low[i]))\n","\n","    #    long 우선   # <-- long & short 둘다 체결된 상황에서는 long 체결을 우선으로 한다.\n","    if low[i] < long_ep:\n","      \n","      liquidation = low[i] / long_ep - fee\n","      l_liquidation = 1 + (liquidation - 1) * leverage\n","      liquidations.append(l_liquidation)\n","\n","      if max(l_liquidation, 0) == 0:\n","        l_profit = 0\n","        # print('low[i], long_ep, l_liquidation :', low[i], long_ep, l_liquidation)\n","      else:\n","\n","        if sl is not None:\n","          if low[i] < long_sl:\n","            profit = long_sl / long_ep - fee\n","          else:\n","            profit = test[i] / long_ep - fee\n","\n","        else:\n","          profit = test[i] / long_ep - fee\n","\n","        l_profit = 1 + (profit - 1) * leverage\n","        l_profit = max(l_profit, 0)\n","        \n","        if profit >= 1:\n","          win_cnt += 1\n","\n","      long_profits.append(l_profit)\n","      short_profits.append(1.0)\n","\n","      if show_detail:\n","        print(test[i], predictions[i], long_ep)\n","\n","    # if high[i] > short_ep > low[i]: # 지정 대기가 아니라, 해당 price 가 지나면, long 한다.\n","\n","    #   if not reverse_short:\n","    #     liquidation = short_ep / high[i]  - fee\n","    #   else:\n","    #     liquidation = low[i] / short_ep  - fee\n","    #   l_liquidation = 1 + (liquidation - 1) * leverage\n","\n","    #   if max(l_liquidation, 0) == 0:\n","    #     l_profit = 0\n","    #   else:\n","\n","    #     if sl is not None:\n","    #       if high[i] > short_sl:\n","\n","    #         if not reverse_short:\n","    #           profit = short_ep / short_sl - fee\n","    #         else:\n","    #           profit = short_sl / short_ep - fee\n","\n","    #       else:\n","    #         if not reverse_short:\n","    #           profit = short_ep / test[i] - fee\n","    #         else:\n","    #           profit = test[i] / short_ep - fee\n","\n","    #     else:\n","\n","    #       if not reverse_short:\n","    #         profit = short_ep / test[i] - fee\n","    #       else:\n","    #         profit = test[i] / short_ep - fee\n","\n","    #     l_profit = 1 + (profit - 1) * leverage\n","    #     l_profit = max(l_profit, 0)\n","\n","    #     if profit >= 1:\n","    #       win_cnt += 1\n","\n","    #   short_profits.append(l_profit)\n","    #   long_profits.append(1.0)\n","\n","    #   if show_detail:\n","    #     print(test[i], predictions[i], short_ep)\n","    \n","    else:\n","      long_profits.append(1.0)\n","      short_profits.append(1.0)\n","      liquidations.append(1.0)\n","\n","\n","  long_win_ratio = sum(np.array(long_profits) > 1.0) / sum(np.array(long_profits) != 1.0)\n","  short_win_ratio = sum(np.array(short_profits) > 1.0) / sum(np.array(short_profits) != 1.0)\n","  long_frequency = sum(np.array(long_profits) != 1.0) / len(test)\n","  short_frequency = sum(np.array(short_profits) != 1.0) / len(test)\n","  if not cumsum:\n","    long_accum_profit = np.array(long_profits).cumprod()\n","    short_accum_profit = np.array(short_profits).cumprod()\n","  else:\n","    long_accum_profit = (np.array(long_profits) - 1.0).cumsum()\n","    short_accum_profit = (np.array(short_profits) - 1.0).cumsum()\n","\n","  # print(win_ratio)\n","\n","  if show_plot:\n","\n","    plt.figure(figsize=(10, 5))\n","    plt.suptitle('tp=%.4f, lvrg=%d' % (tp, leverage))\n","\n","    plt.subplot(151)\n","    plt.plot(liquidations)\n","    plt.title('liquidations')\n","\n","    plt.subplot(152)\n","    plt.plot(long_profits)\n","    plt.title('Win Ratio : %.2f %%\\nrequency : %.2f %%' % (long_win_ratio * 100, long_frequency * 100), color='black')\n","    # plt.show()\n","\n","    # print()\n","    plt.subplot(153)\n","    plt.plot(long_accum_profit)\n","    plt.title('Accum_profit : %.2f' % long_accum_profit[-1], color='black')\n","\n","    plt.subplot(154)\n","    plt.plot(short_profits)\n","    plt.title('Win Ratio : %.2f %%\\nrequency : %.2f %%' % (short_win_ratio * 100, short_frequency * 100), color='black')\n","    # plt.show()\n","\n","    # print()\n","    plt.subplot(155)\n","    plt.plot(short_accum_profit)\n","    plt.title('Accum_profit : %.2f' % short_accum_profit[-1], color='black')\n","    plt.show()\n","\n","  return [long_win_ratio, short_win_ratio], [long_frequency, short_frequency], [long_accum_profit[-1], short_accum_profit[-1]], [long_profits, short_profits]\n","\n","\n","# get_back_result(tp=0.04, leverage=1, show_plot=True)\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tools/_testing.py:19: FutureWarning: pandas.util.testing is deprecated. Use the functions in the public API at pandas.testing instead.\n","  import pandas.util.testing as tm\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"aDkU3tMiM2lO","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1619330204682,"user_tz":-540,"elapsed":7972,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"}},"outputId":"d2e214eb-0e8f-45f4-fab6-7ee07d02eab5"},"source":["import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","\n","interval = '30m'\n","date_path = './candlestick_concated/%s/2021-02-11/' % interval\n","file_list = os.listdir(date_path)\n","\n","print((file_list))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["['2021-02-11 BTCUSDT.xlsx', '2021-02-11 ETHUSDT.xlsx', '2021-02-11 BCHUSDT.xlsx', '2021-02-11 XRPUSDT.xlsx', '2021-02-11 EOSUSDT.xlsx', '2021-02-11 LTCUSDT.xlsx', '2021-02-11 ETCUSDT.xlsx', '2021-02-11 LINKUSDT.xlsx', '2021-02-11 XLMUSDT.xlsx', '2021-02-11 ADAUSDT.xlsx', '2021-02-11 XMRUSDT.xlsx', '2021-02-11 SXPUSDT.xlsx', '2021-02-11 KAVAUSDT.xlsx', '2021-02-11 BANDUSDT.xlsx', '2021-02-11 DASHUSDT.xlsx', '2021-02-11 ZECUSDT.xlsx', '2021-02-11 XTZUSDT.xlsx', '2021-02-11 BNBUSDT.xlsx', '2021-02-11 ATOMUSDT.xlsx', '2021-02-11 ONTUSDT.xlsx', '2021-02-11 IOTAUSDT.xlsx', '2021-02-11 BATUSDT.xlsx', '2021-02-11 NEOUSDT.xlsx', '2021-02-11 QTUMUSDT.xlsx', '2021-02-11 WAVESUSDT.xlsx', '2021-02-11 MKRUSDT.xlsx', '2021-02-11 SNXUSDT.xlsx', '2021-02-11 DOTUSDT.xlsx', '2021-02-11 THETAUSDT.xlsx', '2021-02-11 ALGOUSDT.xlsx', '2021-02-11 KNCUSDT.xlsx', '2021-02-11 ZRXUSDT.xlsx', '2021-02-11 COMPUSDT.xlsx', '2021-02-11 OMGUSDT.xlsx']\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"0en4ihETQ32K"},"source":["### **Data Stacking**"]},{"cell_type":"code","metadata":{"id":"OgZyYJPg3RJa"},"source":["def resize_npy(x):\n","\n","  temp_x = []\n","\n","  for d_i, data in enumerate(x):\n","    # resized_data = cv2.resize(data, (row * 2, col * 2)) --> input image 홰손된다\n","    # resized_data = data.repeat(2, axis=0).repeat(2, axis=1)\n","    data = data.repeat(2, axis=0).repeat(2, axis=1)\n","    # resized_data = data.repeat(1, axis=0).repeat(1, axis=1)\n","    # cmapped = plt.cm.Set1(resized_data)[:, :, :3]  # Drop Alpha Channel\n","    \n","    if d_i == 0:\n","      plt.imshow(data)\n","      plt.show()\n","      # plt.imshow(resized_data)\n","      # plt.show()\n","    # print('resized_data.shape :', resized_data.shape)\n","    # break\n","    temp_x.append(data)\n","\n","  return temp_x"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"SvZuk1rPrUMe","colab":{"base_uri":"https://localhost:8080/","height":971},"executionInfo":{"status":"ok","timestamp":1619330224291,"user_tz":-540,"elapsed":25579,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"}},"outputId":"d35bec40-e7d6-4ea9-84f3-8841a3c6f04c"},"source":["from sklearn.preprocessing import MinMaxScaler, MaxAbsScaler\n","import pickle\n","from sklearn.model_selection import train_test_split\n","\n","with open('./arima_result/arima_opt_profit_ls_only_long_result_%s.pickle' % interval, 'rb') as f:\n","  load_dict = pickle.load(f)\n","\n","candis = list(load_dict.keys())\n","long_index = 0\n","leverage = 5\n","prev_x = None\n","\n","seed = 1\n","random_state = 20\n","np.random.seed(seed)\n","\n","for i in range(len(candis)):\n","\n","  keys = [candis[i]]\n","  \n","  # if 'algo'.upper() not in candis[i]:\n","  #   continue\n","  if '2021-03-02 DOTUSDT.xlsx' in candis[i]:\n","    # print('')\n","    continue\n","\n","  if '04-08' not in candis[i]:  # <-- 04-08 includes all timestamp range\n","    continue\n","\n","  if 'theta'.upper() not in candis[i]:\n","    continue\n","\n","  # plt.figure(figsize=(35, 10))\n","  # plt.suptitle('%s %s' % (interval, keys))\n","\n","\n","  #         get tp parameter        #\n","\n","  # plt.subplot(1,10,3)\n","  # for key in keys:  \n","  #   # plt.plot(profit_result_dict[key]['tp_list'], profit_result_dict[key]['ap_list'])\n","  #   argmax = np.argmax(profit_result_dict[key]['ap_list'][:, [long_index]])\n","  #   peak_tp = profit_result_dict[key]['tp_list'][argmax]\n","  #   # plt.axvline(peak_tp, linestyle='--')\n","  #   # plt.title('acc profit, max at %.4f' % (peak_tp))  \n","\n","  # plt.subplot(1,10,4)\n","  # plt.title('max acc profit by leverage')  \n","  # for key in keys:  \n","  #   # plt.plot(profit_result_dict[key]['tp_list'], profit_result_dict[key]['max_ap_list'], label=key)\n","  #   argmax = np.argmax(profit_result_dict[key]['max_ap_list'][:, [long_index]])\n","  #   max_peak_tp = profit_result_dict[key]['tp_list'][argmax]\n","  #   # plt.axvline(max_peak_tp, linestyle='--')\n","  #   # plt.title('max acc profit, max at %.4f' % (max_peak_tp))  \n","\n","\n","  for key in keys:  \n","    # print(profit_result_dict[key]['leverage_ap_list'])\n","\n","    # for tp in [max_peak_tp]:\n","\n","      # if tp == peak_tp:\n","      #   plt.subplot(1,10,5)\n","      # else:\n","      #   plt.subplot(1,10,6)\n","\n","      #     leverage analysis     #\n","      ohlcv = load_dict[key]['ohlcv']\n","      # ohlcv = ohlcv.iloc[:-int(len(ohlcv) * 0.3)]  # exclude back_range\n","      # predictions = load_dict[key]['predictions']\n","      # err_ranges = load_dict[key]['err_ranges']\n","      print(\"ohlcv.index[0] :\", ohlcv.index[0])\n","      print(\"ohlcv.index[-1] :\", ohlcv.index[-1])\n","\n","      predictions = ohlcv['close'].shift(1).values\n","      err_ranges = np.zeros_like(predictions)\n","\n","      # leverage_list = profit_result_dict[key]['leverage_list']\n","      # temp_ap_list = list()\n","      # temp_pr_list = list()\n","\n","      try:\n","        print('-------------- %s --------------' % key)\n","        result = get_back_result(ohlcv, predictions, err_ranges, tp=0, leverage=leverage, show_plot=True, reverse_short=False, show_detail=False)\n","        # temp_ap_list.append(result[2])\n","        # temp_pr_list.append(result[3])\n","\n","        # if round(leverage) == 1:\n","        #   temp_pr_list = result[3]\n","        pr_list = result[3][long_index]\n","\n","      except Exception as e:\n","        print(e)\n","        break    \n","  # break\n","\n","\n","      pd.set_option('display.max_rows', 500)\n","      pd.set_option('display.max_columns', 500)\n","      pd.set_option('display.width', 1000)\n","\n","      #         clustering zone           #\n","\n","      #       set data features : ohlc, v, ep\n","      time_index = ohlcv.index[-len(predictions):]\n","      ohlc = ohlcv.iloc[-len(predictions):, :4]\n","      vol = ohlcv.iloc[-len(predictions):, [4]]\n","      long_ep = np.array(predictions)\n","      long_ep = long_ep.reshape(-1, 1)\n","\n","      ohlcv['u_wick'] = ohlcv['high'] / np.maximum(ohlcv['close'] , ohlcv['open'])\n","      ohlcv['d_wick'] = np.minimum(ohlcv['close'] , ohlcv['open']) / ohlcv['low']\n","      ohlcv['body'] = ohlcv['close'] / ohlcv['open']\n","\n","      candle = ohlcv.iloc[-len(predictions):, -3:]\n","\n","\n","      print('len(ohlc) :', len(ohlc))\n","      print('long_ep.shape :', long_ep.shape)\n","      print('len(pr_list) :', len(pr_list))\n","\n","\n","      #       set params    #\n","      period = 45\n","      data_x, data_pr, data_updown = [], [], []\n","      data_index = []\n","      key_i = i\n","\n","      for i in range(period, len(predictions)):\n","\n","        #   pr_list != 1 인 데이터만 사용한다\n","        # if 1:\n","        if pr_list[i] != 1:\n","          \n","          #   prediction 을 제외한 이전 데이터를 사용해야한다\n","          temp_ohlc = ohlc.iloc[i - period : i].values\n","          temp_long_ep = long_ep[i - period : i]\n","          temp_vol = vol.iloc[i - period : i].values\n","          temp_candle = candle.iloc[i - period : i].values\n","\n","          # print(temp_ohlc.shape)\n","          # print(temp_long_ep.shape)\n","          # print(temp_vol.shape)\n","          # print(temp_candle.shape)\n","          # break\n","\n","          #   stacking  \n","          # temp_data = np.hstack((temp_ohlc, temp_long_ep, temp_vol, temp_candle))\n","          temp_data = np.hstack((temp_ohlc, temp_long_ep, temp_vol))\n","          # temp_data = np.hstack((temp_ohlc, temp_vol))\n","\n","          # temp_data = np.hstack((temp_ohlc, temp_long_ep))\n","          # temp_data = temp_vol\n","\n","          #   scaler 설정\n","\n","          #   ohlc & ep -> max_abs\n","          # max_abs = MaxAbsScaler()\n","          # temp_data[:, :5] = max_abs.fit_transform(temp_data[:, :5])\n","\n","\n","          min_max = MinMaxScaler()\n","          temp_data[:, :5] = min_max.fit_transform(temp_data[:, :5])\n","\n","\n","          #   vol -> min_max\n","          min_max = MinMaxScaler()\n","          temp_data[:, [5]] = min_max.fit_transform(temp_data[:, [5]])\n","\n","\n","          #   candle -> max_abs    \n","          # max_abs = MaxAbsScaler()\n","          # temp_data[:, -3:] = max_abs.fit_transform(temp_data[:, -3:])\n","\n","          # min_max = MinMaxScaler()\n","          # temp_data[:, -3:] = min_max.fit_transform(temp_data[:, -3:])\n","\n","          if np.isnan(np.sum(temp_data)):\n","            continue\n","\n","          data_x.append(temp_data)\n","          data_pr.append(pr_list[i])\n","          data_index.append(time_index[i])\n","          data_updown.append(ohlc['close'].iloc[i] / ohlc['open'].iloc[i])\n","\n","\n","      print('np.array(data_x).shape :', np.array(data_x).shape)\n","      # print(data_x[0])\n","\n","\n","      #       Reshape data for image deep - learning     #\n","      _, row, col = np.array(data_x).shape\n","\n","      input_x = np.array(data_x).reshape(-1, row, col, 1).astype(np.float32)\n","\n","      #     1c to 3c    #\n","      input_x = input_x * np.ones(3, dtype=np.float32)[None, None, None, :]\n","      input_x = np.array(resize_npy(input_x))\n","\n","\n","      input_pr = np.array(data_pr).reshape(-1, 1).astype(np.float32)\n","      input_ud = np.array(data_updown).reshape(-1, 1).astype(np.float32)\n","      input_index = np.array(data_index).reshape(-1, 1)\n","      print('input_x.shape :', input_x.shape)\n","      print('input_x.dtype :', input_x.dtype)\n","      print('input_pr.shape :', input_pr.shape)\n","      print('input_ud.shape :', input_ud.shape)\n","      print('input_index.shape :', input_index.shape)\n","\n","\n","      # x_train_, x_test, pr_train_, pr_test, ud_train_, ud_test = train_test_split(input_x, input_pr, input_ud, test_size=0.4, shuffle=False, random_state=random_state)\n","      # x_train, x_val, pr_train, pr_val, ud_train, ud_val = train_test_split(x_train_, pr_train_, ud_train_, test_size=0.25, shuffle=False, random_state=random_state)\n","\n","      #     do stacking   #\n","      if prev_x is None:\n","        prev_x = input_x\n","        prev_pr = input_pr\n","        prev_ud = input_ud\n","      else:\n","        total_x = np.vstack((prev_x, input_x))\n","        total_pr = np.vstack((prev_pr, input_pr))\n","        total_ud = np.vstack((prev_ud, input_ud))\n","\n","        prev_x = total_x\n","        prev_pr = total_pr\n","        prev_ud = total_ud\n","\n","        print('total_x.shape :', total_x.shape)\n","        print('total_pr.shape :', total_pr.shape)\n","        print('total_ud.shape :', total_ud.shape)\n","\n","      # if prev_train_x is None:\n","      #   prev_train_x = x_train\n","      #   prev_val_x = x_val\n","      #   prev_test_x = x_test\n","        \n","      #   prev_train_pr = pr_train\n","      #   prev_val_pr = pr_val\n","      #   prev_test_pr = pr_test\n","\n","      #   prev_train_ud = ud_train\n","      #   prev_val_ud = ud_val\n","      #   prev_test_ud = ud_test\n","\n","      # else:\n","\n","      #   total_train_x = np.vstack((prev_train_x, x_train))\n","      #   total_val_x = np.vstack((prev_val_x, x_val))\n","      #   total_test_x = np.vstack((prev_test_x, x_test))\n","      #   total_train_pr = np.vstack((prev_train_pr, pr_train))\n","      #   total_val_pr = np.vstack((prev_val_pr, pr_val))\n","      #   total_test_pr = np.vstack((prev_test_pr, pr_test))\n","      #   total_train_ud = np.vstack((prev_train_ud, ud_train))\n","      #   total_val_ud = np.vstack((prev_val_ud, ud_val))\n","      #   total_test_ud = np.vstack((prev_test_ud, ud_test))\n","        \n","      #   prev_train_x = total_train_x\n","      #   prev_val_x = total_val_x\n","      #   prev_test_x = total_test_x\n","        \n","      #   prev_train_pr = total_train_pr\n","      #   prev_val_pr = total_val_pr\n","      #   prev_test_pr = total_test_pr\n","\n","      #   prev_train_ud = total_train_ud\n","      #   prev_val_ud = total_val_ud\n","      #   prev_test_ud = total_test_ud\n","        \n","      #   print(\"total_train_x.shape :\", total_train_x.shape)\n","      #   print(\"total_val_x.shape :\", total_val_x.shape)\n","      #   print(\"total_test_x.shape :\", total_test_x.shape)\n","      #   print(\"total_train_pr.shape :\", total_train_pr.shape)\n","      #   print(\"total_val_pr.shape :\", total_val_pr.shape)\n","      #   print(\"total_test_pr.shape :\", total_test_pr.shape)\n","      #   print(\"total_train_ud.shape :\", total_train_ud.shape)\n","      #   print(\"total_val_ud.shape :\", total_val_ud.shape)\n","      #   print(\"total_test_ud.shape :\", total_test_ud.shape)\n","\n","  break # --> use only one pair dataset\n","\n","  #         chunks 로 나누지 않아도, generator 에서 batch_size 만큼만 load 할 것   #\n","  # try:\n","  #   if len(total_x) > 300000:\n","  #     break\n","  # except:\n","  #   pass\n","\n","  \n","        "],"execution_count":null,"outputs":[{"output_type":"stream","text":["ohlcv.index[0] : 2020-05-27 17:29:59.999000\n","ohlcv.index[-1] : 2021-04-08 20:29:59.999000\n","-------------- 2021-04-08 THETAUSDT.xlsx --------------\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:158: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:159: RuntimeWarning: invalid value encountered in long_scalars\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:160: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:163: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray\n","/usr/local/lib/python3.7/dist-packages/numpy/core/_asarray.py:136: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray\n","  return array(a, dtype, copy=False, order=order, subok=True)\n"],"name":"stderr"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 720x360 with 5 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}},{"output_type":"stream","text":["len(ohlc) : 15175\n","long_ep.shape : (15175, 1)\n","len(pr_list) : 15175\n","np.array(data_x).shape : (14504, 45, 6)\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"iVBORw0KGgoAAAANSUhEUgAAAEEAAAD7CAYAAAA1pvlWAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAAU8klEQVR4nO2dW6wkx1nHf9/c55y9ZM9erN21YxvHShQhxQHLEMFDiAGZBMV5QFEMQgFZMi+AA0jEwAMg8WBLCMhDFLDBxA/BTjCJsEIIMcZWlBfjS2xw7NixTWyvtfbu8W7O7rnN9Ex/PMzUbHV19Ux1zzkz43X/pdY51dNdU/1N1dffvURVeaejMu8BLAJKIlASASiJAJREAEoiAFMSQURuEJHnReRFEbltpwY1a0hROUFEqsALwC8AJ4DHgJtU9dmdG95sUJvi3uuAF1X1ZQARuQ+4Ecgkwr59+/Tw4cOjtqoSx3FyQLUa9XodEUlc0+/3xw4miiJWV1fZ3Nx0P1pV1cO+e0bfObbn8TgOvGa1TwA/Ne6Gw4cPc8cdd4zaURSxtbWVIMTBgwc5duwY1WoVGBDh/PnznD9/PtFXHMfYs/jUqVPcddddPP3004nr+v3+K5MeZNcZo4jcIiKPi8jj586d2+2vK4RpiPA6cJnVvnR4LgFVvVNVr1XVa/ft2zfF1+0epiHCY8DVInKliDSATwEPTLpJRBKH+xkMloDviON4dPj6cvsLRWGeoKo9Eflt4D+AKnC3qn5v3D0iQqVSSbR9gzcPbf7v9/v0er3ENdVqNXGf3W9eTMMYUdVvAN8oev+4X859dfte5UV/eRelxEhJBGDK5ZAXrnDkvusNKpVKYo2btn1tVl9FJOCZEgFIMDgjBdoDFxGq1WqKCC4DdQnY7/cziToJC7cczIO6D71TTNCHhSPCPDDz5eDDbv7KIZg5Eey1XqvVUkJOo9EY8QD73PLycmK9b29vE0VRot9arUatlnwk+5oszJwI9sPV6/WU5NdsNhP8QERG5wx86rUhQr1eT3zfQhLBRSgDdImwkygZI3NeDnk0P1dQ8s2goprkTIlQrVbZu3dv4lwIY4yiiM3NzQQh3L62trZoNpspnhCCmRKhUqnQbrfHXlOr1VK/aL/fZ3t7e0QEEWF5eZlWqzW6pt1ujxht7nHlvmMO2G3P+UQiiMjdInJKRJ6xzq2IyIMi8oPh3wO7OspdRshM+CJwg3PuNuAhVb0aeGjYngjXRGbe9b1eb3QYRcj+3Kcdun1lmeRCMJEnqOq3ReQK5/SNwIeH/98DPAJ8dlJfcRyzsbExavf7faIoSgy23W7T6/US9sbt7e2Uf8KVGDc2Nuh2uykzXAiKMsZLVPXk8P83gEtCblJVut3uqN3r9VIPqKoj5mhfZ18jIqNZY2AI4BIrBFMzRh38jJnz7mL2O7wpIkcBhn9PZV14MfsdHgA+Pfz/08C/TjMIn//AmNR8ViXY2dfmRJ4gIvcyYIKHROQE8KfA7cBXRORm4BXgkyFfZnwIdtu1HdZqNZrN5kiSVNUEo8zqqwgvGH1nwMBvyvjo+iJf6OoALuwZYJ+DpIcqpK9QvC0kxt1GSQQWQJV2tchKpZIwuRu+4V43DQ9wMVfLku/hGo1GypwWRVFCyDLnbMY4jbF2rkSw7YgG5pU4yQM1jSveRckTKIkAzHg5GD+jQbVaTUSqiQitVitxDqDVaqX8kJubm3Q6nURfPpN7CGZOhEajMWo3Gg327t2bIIxhjDbcdr/fZ3V1NfGGaDQatNttlpaWEteePXt24rjmzhh90qHL8LLOuX0VZZYlT2ABhKUs79O4X9T3ap0GMyVCrVbjwIELNtlWq8WBAwdSzNK1LAEpxtjtdhNLot/vs7KywsGDBxP3nThxYvK4cj/JFKjVahw6dGjUXlpa4tChQylP8iQYw6rNZEWEI0eOsLq6mn9cue+YEj5JMG8MonHD+foqGWNBhDhfLhORh0XkWRH5nojcOjxfyAHjvsomhe/a/gdz2O64SUcIQpZDD/gDVX1SRPYCT4jIg8BvMHDA3C6DrJfbmOB7cBljpVKh2+0mNMROp8PW1lZCWTKOGQMRYc+ePYm+4jhmZWUlwXNCEWJeOwmcHP5/XkSeY5DrkNsBU61W2b9//6gdRREbGxsJye/8+fOcPXs2YULrdDoJEblWq3HVVVdhW697vR4HDhxIECYUuRjj0BP1QeBRAh0wInILcAvAu9/97kLxCG7bVamd7wvq30YwYxSRPcC/AJ9R1YQXZZwDxvY72Kk/i4SgmSAidQYE+JKqfnV4+k0ROaqqJyc5YAxcN1wURURRlFgOxr1mLwc3UtWY221fpHHBFTG7hfgdBPgH4DlV/SvrI+OAuZ1AB8z29jYvvPDCqN3r9VI5UMaUNi6OOYoiTp48mciLWltb46233mJ9fX3SMFIImQk/A/w68L8i8tTw3B9TwAETRRFvvPHGqG0cspNyG3xeqLNnzyYeeH19nfX19QQDDUXI2+E7QBa3KeSAWTSUEiNz0B3cHAVIv/J8uoQbn+AywbdNvkMcx2xvb4/aPs5fq9US2iHA5uYmW1tbo7aIpJhlp9MpHKQx85ngeqXdX84YY13na6/XS+gMbrheVmxTCEqeQEkEYA6JYLY26MuG9yWCbm1tJSRNESGKosRyUFXa7XZCQQvFzBmjndrvi16L4zhFBHetVyqVFAHjOOb48eMU0U9mPhPsgfd6vZTu4PNAuyY4XwifqtJqtVKOmhCUPIGSCMAcloOt4MRx7HXDuSZ414pshCVb8KpUKrRarUKh/jMlQr/fZ21tbdSu1+ssLS0liGA81TZ84Xvnzp1LaJGNRoOVlRWKBIzOlTEaydB+yGq1msqQg7QHyv5r/vfNohCUPIEwv0NLRP5bRJ4e+h3+fHj+ShF5VAaFpr4sg5Iic8NuB251gI+o6vrQ1vgdEfl34PeBv1bV+0Tkb4GbgS+M66harbJnz55R2wg9tiAUx3EqodPIEzaM78Gg3W5z5MiRXfM7KGA4UH14KPAR4FeH5+8B/owAIth+AV+dJVdiVFU2NjYS2XDVapVjx44l+lpeXubyyy/n6NGjkx4phVBrcxV4AngP8HngJeBHqmpGe4KBQ8Z378jvcPDgQW/Msg1f6o6dBmTD7cu49fMiiDGqal9Vr2FQS+k64H2hX/B2yHfIRTZV/ZGIPAx8CHiXiNSGs8FbaMpzf8qU7jvnpgNlJYL57ptUo82HEL/DYSAaEqDNoOreHcDDwK8A9xHodzD+AgOXCaoqm5ubrK2tpZaDq0Wurq4m7m02mzQaDV599dVJw0ghZCYcBe4Z8oUK8BVV/bqIPAvcJyJ/AXyXgYNmLFy/A6Tjls6cOcPJkycTs6HVaiWyYY0YbavltVqN9fX1QlpkyNvhfxg4Yd3zLzPgD7ngc6aGLBETnWJf786Wom64UmJkzn4HX0SJ/YtnXWO0SJ+QVaQG28y1SDc30h10FEU0Go2Eeb3RaKQ0y06nk2CMcRxz4sSJoPIhLmZuY7TThH1xRaqaemC39opx8bsZsq6nOhQXFU8omhF3URGhKOYa25x1LsS8lhUXvfAOWeNDNPC971utVipnweeQgSRTNW8H2+4YirmG9fp0gnq9TrvdTqQEdjqdlD7hy3fw2SKCxpT7josQJRGYA0/wyQWh9/pimu3Pi2LmPMHm/G7AtoH7gFnpAPY1vkSR4DEVuqsg3Hgkn8bnI4j911zj9jXNTCh5Avlim6si8l0R+fqwvVB+h2mQZybcCjxnte9g4Hd4D3CWgd9hImymZqf/2Ok7bpKHMa/ZhaXcvrL62zEiiMilwMeAvx+2hYHf4f7hJfcAnwj6QmuAxvnaaDRGhwnFsQ8TkGETxffQxuRuHyEIZYx/A/whYGr/HaSA38H2GA0/8zK0LPOa3Tb3T+orBCG+yF8GTqnqE0W+wPY72MbSRUJolPvHReSjQAvYB3yOAn6HRcXEmaCqf6Sql6rqFQw2svgvVf01LvgdIEfBKdua7Mt0M5qmzSd80Sf2/aaP7e1tNjY2EkcIphGWPktOvwMkw3qNiuya4VutVkKL7Pf7qTwGV9CKoohz584FlQpwkdcN9wiDrLfCfgdPn2PF5jwMr6gbrpQYKYkAzCFwy5fVZp9zNUtzjTvNiyaH+zDXciI2hzcwKcFuFT7fWncDvIti7sthmsHvFOZOhEXA3Kv6+5CVxuPqDDs1i+aaA2UYoMsT7HopqjrSJF24XmkoZmGaa1ivax+AC7Wc7YdxK+5B+mHN50WIUPIESiIACyAn+CJO3Oq8WcJSVumxvJhrNpxhgjYRut1uKpql2+0mfIwiwv79+xOO2ziOaTabKevVmTNnJo5rrjFLts3QIKsUqU08s1mGbalS1VHN57woeQLhAd4/BM4DfaCnqteKyArwZeAK4IfAJ1U1v0VjAZBnJvycql6jqtcO27k3ujABV+ZwTesmRzIrtM8+DD+x+7LNdD5mmoVpeELuOktRFHH69OlR21dOpNls0m63E6KxeUBbbF5bW0uE9RqG6tlceyJCiaDAt0REgb9T1TspUGepXq8nBmlsh27w9tLSUupV50aquLt62I6avAglws+q6usicgR4UES+b3+oqjokUApDgt0JsLS0NH+92YPQpI/Xh39PAV9jYGAN3uhi0RHigVqWQeE5RGQZ+EXgGQpudOEyuEnXhPZTdOtUCFsOlwBfG67RGvBPqvpNEXmMnHWWXIkxK0jDvCHsc27Um2uWK2JqNwjJd3gZ+IDn/FsUqLPkc6z6rhlnODHue/eeMqx3CpREYAHqNo9bEvb/Pled68MsirnGMY7LgbLh2iHBX2LEd10I5h7lPg1D2ymUPIEFJMI8ZsXMzWtuhrzrkO12u6yvryeWTafTSZjhspLDGo1Giie4ViofZs4TXB+DG6nii0oxGqKBYbBuGI+vsIxdwyULcyVC1jn31/TpBVnLpnS+FMRCOmTHZczaCNFDQjDX5NAsIchleL7aS/1+P9WXW8ctFHMlgnlgN8HDTeCo1+upX31jYyPFQHfTnjBzFGFudoxTXoRGub9LRO4Xke+LyHMi8iG5iDbYDn07fA74pqq+j4GB5TkKbrDt5ihkHZO2L/Fd7zsfNKZJ00dE9gNPAT+m1sUi8jzwYb1Q0P4RVX3vuL6azaYeO3Zs1Pat/0ajgRsN726E4Ytoi+N4VLbYxurq6hOWw8iLEJ5wJXAa+EcR+QCDeku3UmCDbVMu0G67El6z2UztF2m2PDIQkVRSh3Hp71ZYbw34CeALqvpBYANn6g9niHdKibW5dhHHyCwQQoQTwAlVfXTYvp8BUYL8DmolfRSphjULhOQ7vAG8JiJmvV8PPMsObLCdpUeEHFn9hVznIvSn+R3gS8O0v5eB32RYcymP38EH18fgi15zd/+w3x5uX7tScQtAVZ8CfBx26v0dsuyJtv3RdbT49AnfdaEotUhKIgBzzncAv+/BNcsbocr1M/iq9S28FgmktjdzhaVarZZieM1mMyEYqQ5qNrtbILlmuFDMfSZktV312pUg3RlUMsYpURKBOddZyrrGVYNdIcgEbdh92ep0XsyUCNVqleXl5VG73++nYpuziOAyvHq9ngjhjaLIy1RDMPO3g5vBNs49b1/ne426u/8Udc+XPIGSCMACJIL53u22hmiYoE9hsgWvvPHMNmYuLNkMLqvYlGt3NBmzruPWbtu1V/Ji7rnSWcYPXyjPuLC+vIYUGyERre8Vkaes45yIfOYd5XdQ1ed1kOdwDfCTwCaD+OZCfodFRN7lcD3wkqq+IiK58x1cqc4wPXfK29PaKEaupdoXCedzuIQsj7xE+BRw7/D/3H4HSFfmnOR2N0RwbYyudDhNPYU8tdcawMeBf/YMuLDfwRfX6Ok/dJiFkEdY+iXgSVV9c9h+5/gdLNzEhaUAO+B3gMnRJuMcq9O8Fm2EpgQuM9jc4res07n3lXaFpXGb39oygc9n6UqMZv/YIgQJ9TtsMCg6Z58rlO/g20PWnQ0+ru9qn66IbJcszItSgaIkArCgMUtZmOSfKIqFLVlsq9I+61OWGb7QmArdVRCu2OzbZt1c5/vfFa/tvkrz2pQoicACMEafG86d2lk1VVzMSoucGj7Lkm1j7Ha7bGxsJB5ma2uLra2tUVsykj58uwSGOGgXYibYhHGr69gxi7Yq7cY7m/NFnC8lT6AkArAAdZbcHKhut5sSfDqdTiKs32dZMsx04TfXjuM4weB8NVV8hHE1RLMBr5tZV61WU3HRITVW5lpsyleFr9frpeqsuNeISOq1acTrXWOMIvJ7MthT+hkRuVcGe01fKe+U/R1E5Djwu8C1qvrjQJWB1bnQ/g6LiNDlUAPaIhIBS8BJCuwrHcdxqsRQ1vp34SpV3W43JR3mSfSwEVJO5HUR+UvgVWAL+BaDnIeg/R1s9Hq9RFU834B9sYg+n8Lm5mYiqczsXt5o5F+VIcvhAIPqWlcCx4Bl4IbQL7D9DpDc69VIgSGR6a6Hye6naGC3Qchy+Hng/1T19HAwX2Ww50PQ/g5qFZuSjIJU80bI2+FV4KdFZEkGP4PJdyi0v8MiIoQnPCoi9wNPAj0GezncCfwbBfZ38MUt2wj1KbpygogUqrsGAdlwOwkRUVus9aX91Wq1lIrsW/NusTmfKA2wubm5I9lwM4dvJviMrVlvl7wotUgWoLrOIvQ7c5O7m7fg+h0Mj7AtS76lYO8zbWPXHLI7BZcIrtkMLjhRzAMajdGFLxvOFcFDUfIESiIAc35FmmnvC9h0ecJOrX8f5kqESqWS0vp8WfPVapVqtZqyQLm8wr0mFHOfCa50WK/XU3VWXNhhfTaKZr6UPIGSCMACVOb0fe4yQp9m6dNAi4bzzZQIlUoltf+Ca0oze0WOS/owD2prpKbkyNsiTditg+LCV2wmjuPUr+56muxXal6UPIGSCEBJBGD25rXTDEoUre7i1xxy+r9cVQ+PHdcsiQAgIo9PsvnNuv9yOVASAZgPEe5ctP5nzhMWEeVyYMZEEJEbROT5YXTL1MmkInK3iJwSkWesc7kzd2dGBBGpAp9nkFX3fuAmEXn/lN1+kXSYQO7M3VnOhOuAF1X1ZVXtAvcxiHsoDFX9NuDuhXgjg8gZhn8/MamfWRLhOPCa1Q6KbimA/BVDd2EQC4Nxmbs2ZkmE14HLrHZmdMuUyL1T2SyJ8Bhw9TD+scEgDPCBXfie/Jm7vsCp3TqAjwIvAC8Bf7ID/d3LIJwwYsBjbmaQxPoQ8APgP4GVSf2UEiMXOWMMRUkESiIAJRGAkghASQSgJAJQEgGA/wfVCoWZy9HIkQAAAABJRU5ErkJggg==\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}},{"output_type":"stream","text":["input_x.shape : (14504, 90, 12, 3)\n","input_x.dtype : float32\n","input_pr.shape : (14504, 1)\n","input_ud.shape : (14504, 1)\n","input_index.shape : (14504, 1)\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:201: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"thMdK22LQdKv","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1619331938742,"user_tz":-540,"elapsed":820,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"}},"outputId":"97ca0537-8c5b-465b-dce1-035d6bf2fde8"},"source":["period = 45\n","# x_save_path = current_path + 'npy/' + '%s_close_updown_x.npy' % period\n","# y_save_path = current_path + 'npy/' + '%s_close_updown_y.npy' % period\n","#         save to npy     #\n","# x_save_path = current_path + 'npy/' + '%s_close_updown_theta_x_ex.npy' % period\n","# y_save_path = current_path + 'npy/' + '%s_close_updown_theta_y_ex.npy' % period\n","\n","# total_x = np.load(x_save_path)\n","# total_pr = np.load(y_save_path)\n","\n","# _, row, col, _ = total_x.shape\n","\n","_, row, col, _ = input_x.shape\n","\n","#       split new test      #\n","\n","seed = 1\n","random_state = 20\n","np.random.seed(seed)\n","from sklearn.model_selection import train_test_split\n","#         train / test split      #\n","# x_train, x_test_, pr_train, pr_test_, ud_train, ud_test_ = train_test_split(re_input_x, input_pr, input_ud, test_size=0.4, shuffle=True, random_state=random_state)\n","# x_train_, x_test, pr_train_, pr_test = train_test_split(total_x, total_pr, test_size=0.2, shuffle=False, random_state=random_state)\n","# x_train, x_val, pr_train, pr_val = train_test_split(x_train_, pr_train_, test_size=0.25, shuffle=True, random_state=random_state)\n","# break\n","print(\"input_x.shape : \", input_x.shape)\n","\n","a_input_x, new_input_x, a_input_pr, new_input_pr, a_input_index, new_input_index = train_test_split(input_x, input_pr, input_index, test_size=0.3, shuffle=False, random_state=random_state)\n","\n","print(\"a_input_x.shape : \", a_input_x.shape)      \n","\n","# even_input_x = a_input_x[::2]\n","# x_test = a_input_x[1::2]\n","# even_input_pr = a_input_pr[::2]\n","# pr_test = a_input_pr[1::2]\n","# even_input_index = a_input_index[::2]\n","# index_test = a_input_index[1::2]\n","\n","x_train_, x_test, pr_train_, pr_test, index_train_, index_test = train_test_split(a_input_x, a_input_pr, a_input_index, test_size=0.2, shuffle=True, random_state=random_state)\n","\n","# print(\"x_train_.shape :\", x_train_.shape) # with a_input_x -> 4263 / with input_x -> 4219\n","\n","#           extract prev data           #\n","#           test data 의 짝수차 데이터를 train set 에 넘기고, train & val split 을 shuffle 로 진행한다\n","# print('org x_test.shape :', x_test.shape)\n","# x_test4train, pr_test4train, index_test4train =  x_test[::2], pr_test[::2], index_test[::2]\n","# x_test, pr_test, index_test =  x_test[1::2], pr_test[1::2], index_test[1::2]\n","# print('divided x_test.shape :', x_test.shape)\n","# print()\n","\n","\n","#          add test4train data to training set      #\n","# x_train_ = np.vstack((x_train_, x_test4train))\n","# pr_train_ = np.vstack((pr_train_, pr_test4train))\n","# index_train_ = np.vstack((index_train_, index_test4train))\n","\n","# print(\"x_test4train.shape :\", x_test4train.shape) \n","# print(\"added x_train_.shape :\", x_train_.shape) # with a_input_x -> 4263 / with input_x -> 4219\n","\n","\n","# x_train_, x_test, pr_train_, pr_test = train_test_split(input_x, input_pr, test_size=0.4, shuffle=True, random_state=random_state)\n","# x_train, x_val, pr_train, pr_val, index_train, index_val = train_test_split(even_input_x, even_input_pr, even_input_index, test_size=0.25, shuffle=True, random_state=random_state)\n","x_train, x_val, pr_train, pr_val, index_train, index_val = train_test_split(x_train_, pr_train_, index_train_, test_size=0.25, shuffle=True, random_state=random_state)\n","\n","#         pr label   #\n","y_train = np.where(pr_train > 1, 1, 0)\n","y_test = np.where(pr_test > 1, 1, 0)\n","y_val = np.where(pr_val > 1, 1, 0)\n","\n","print(\"x_train.shape :\", x_train.shape) # x_train.shape : (3807, 90, 12, 3)\n","\n","# del total_x"],"execution_count":null,"outputs":[{"output_type":"stream","text":["input_x.shape :  (14504, 90, 12, 3)\n","a_input_x.shape :  (10152, 90, 12, 3)\n","x_train.shape : (6090, 90, 12, 3)\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"6XibtKgphXyQ"},"source":["### Check shuffled index"]},{"cell_type":"code","metadata":{"id":"KH8eEW8ChZtV","colab":{"base_uri":"https://localhost:8080/","height":219},"executionInfo":{"status":"ok","timestamp":1619332048819,"user_tz":-540,"elapsed":2082,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"}},"outputId":"8bb864df-c834-414d-8644-6a8065019da9"},"source":["# print(index_val)\n","from datetime import datetime\n","\n","# print(index_test)\n","# print(index_train)\n","# print(index_val)\n","total_stamp = list(map(lambda x: datetime.timestamp(x[0]), input_index)) \n","timestamp_train = list(map(lambda x: datetime.timestamp(x[0]), index_train)) \n","timestamp_val = list(map(lambda x: datetime.timestamp(x[0]), index_val)) \n","timestamp_test = list(map(lambda x: datetime.timestamp(x[0]), index_test)) \n","# print(total_stamp)\n","# print(timestamp_train)\n","plt.figure(figsize=(40, 4))\n","plt.scatter(range(len(timestamp_train)), timestamp_train, label='train')\n","plt.scatter(range(len(timestamp_val)), timestamp_val, color='orange', label='val')\n","plt.scatter(range(len(timestamp_test)), timestamp_test, color='red', label='test')\n","plt.ylim(min(total_stamp), max(total_stamp))\n","plt.legend(fontsize=20)\n","\n","# print(new_input_index)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.legend.Legend at 0x7ff2e1a58e10>"]},"metadata":{"tags":[]},"execution_count":15},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 2880x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"b1UEFg1GVSLS"},"source":["### Load Data"]},{"cell_type":"code","metadata":{"id":"76BQc5XlUSS6"},"source":["# period = 45\n","# # x_save_path = current_path + 'npy/' + '%s_close_updown_x.npy' % period\n","# # y_save_path = current_path + 'npy/' + '%s_close_updown_y.npy' % period\n","# #         save to npy     #\n","# x_save_path = current_path + 'npy/' + '%s_close_updown_theta_x_ex.npy' % period\n","# y_save_path = current_path + 'npy/' + '%s_close_updown_theta_y_ex.npy' % period\n","\n","# total_x = np.load(x_save_path)\n","# total_pr = np.load(y_save_path)\n","\n","# _, row, col, _ = total_x.shape\n","\n","\n","\n","# seed = 1\n","# random_state = 20\n","# np.random.seed(seed)\n","# from sklearn.model_selection import train_test_split\n","# #         train / test split      #\n","# # x_train, x_test_, pr_train, pr_test_, ud_train, ud_test_ = train_test_split(re_total_x, total_pr, total_ud, test_size=0.4, shuffle=True, random_state=random_state)\n","# x_train_, x_test, pr_train_, pr_test = train_test_split(total_x, total_pr, test_size=0.2, shuffle=False, random_state=random_state)\n","# x_train, x_val, pr_train, pr_val = train_test_split(x_train_, pr_train_, test_size=0.25, shuffle=False, random_state=random_state)\n","# # break\n","# #         pr label   #\n","# y_train = np.where(pr_train > 1, 1, 0)\n","# y_test = np.where(pr_test > 1, 1, 0)\n","# y_val = np.where(pr_val > 1, 1, 0)\n","\n","# del total_x"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"GmmgsEUMqUjN"},"source":["### **Model**"]},{"cell_type":"code","metadata":{"id":"mcDUjgQzqUSr","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1619330358706,"user_tz":-540,"elapsed":5024,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"}},"outputId":"bb5ff4b7-eace-45ad-a12a-b650943407a0"},"source":["import os\n","# os.environ[\"CUDA_DEVICE_ORDER\"]=\"PCI_BUS_ID\"   \n","# os.environ[\"CUDA_VISIBLE_DEVICES\"]=\"0\"\n","\n","%tensorflow_version 1.x\n","\n","import keras\n","import tensorflow as tf\n","\n","import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import scipy.misc \n","from math import sqrt \n","import itertools\n","from IPython.display import display\n","\n","%matplotlib inline\n","\n","from keras.utils import plot_model\n","import keras.backend as K\n","from keras.models import Model, Sequential\n","import keras.layers as layers\n","from keras.optimizers import Adam, SGD\n","from keras.regularizers import l1, l2\n","\n","from sklearn.cluster import KMeans\n","from sklearn.metrics import silhouette_score\n","from sklearn.metrics import precision_score, recall_score, precision_recall_curve\n","from sklearn.metrics import confusion_matrix\n","from sklearn.metrics import plot_confusion_matrix\n","\n","\n","gdrive_path = current_path\n","\n","num_classes = 2\n","\n","def FER_Model(input_shape=(row, col, 3)):\n","    # first input model\n","    visible = layers.Input(shape=input_shape, name='input')\n","    \n","    net = layers.Conv2D(32, kernel_size=3, padding='same', kernel_initializer='he_normal')(visible)\n","    # net = layers.Conv2D(256, kernel_size=3, padding='same', kernel_initializer='he_normal')(visible)\n","    # net = layers.BatchNormalization()(net)\n","    net = layers.LeakyReLU()(net)\n","\n","    net = layers.Conv2D(64, kernel_size=3, padding='same', kernel_initializer='he_normal')(net)\n","    # net = layers.Conv2D(128, kernel_size=3, padding='same', kernel_initializer='he_normal')(net)\n","    # net = layers.BatchNormalization()(net)\n","    # net = layers.Activation('relu')(net)\n","    net = layers.LeakyReLU()(net)\n","    # net = layers.MaxPool2D(pool_size=2)(net)\n","    # net = layers.AveragePooling2D(padding='same')(net)\n","\n","    shortcut_1 = net\n","\n","    # net = layers.Conv2D(64, kernel_size=3, padding='same', kernel_initializer='he_normal')(net)\n","    net = layers.Conv2D(128, kernel_size=3, padding='same', kernel_initializer='he_normal')(net)\n","    net = layers.LeakyReLU()(net)\n","\n","    net = layers.Conv2D(256, kernel_size=3, padding='same', kernel_initializer='he_normal')(net)\n","    # net = layers.BatchNormalization()(net)\n","    # net = layers.Activation('relu')(net)\n","    net = layers.LeakyReLU()(net)\n","    # net = layers.MaxPool2D(pool_size=2)(net)\n","\n","    shortcut_2 = net\n","\n","#     net = layers.Conv2D(256, kernel_size=3, padding='same')(net)\n","#     # net = layers.Activation('relu')(net)\n","#     net = layers.LeakyReLU()(net)\n","#     net = layers.MaxPool2D(pool_size=2)(net)\n","\n","#     shortcut_3 = net\n","\n","#     net = layers.Conv2D(128, kernel_size=1, padding='same')(net)\n","#     # net = layers.Activation('relu')(net)\n","#     net = layers.LeakyReLU()(net)\n","#     net = layers.MaxPool2D(pool_size=2)(net)\n","\n","    net = layers.Flatten()(net)\n","    net = layers.Dense(128)(net)\n","    net = layers.LeakyReLU()(net)\n","\n","    net = layers.Dense(64)(net)\n","    net = layers.LeakyReLU()(net)\n","\n","    net = layers.Dense(num_classes, activation='softmax')(net)\n","\n","    # create model \n","    model = Model(inputs=visible, outputs=net)\n","    # summary layers\n","    # print(model.summary())\n","    \n","    return model"],"execution_count":null,"outputs":[{"output_type":"stream","text":["TensorFlow 1.x selected.\n"],"name":"stdout"},{"output_type":"stream","text":["Using TensorFlow backend.\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"zscZynIgMbAq","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1619330358707,"user_tz":-540,"elapsed":3672,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"}},"outputId":"65d0b038-924a-4eb1-83da-8dd214301780"},"source":["print(keras.__version__)\n","print(tf.__version__)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["2.3.1\n","1.15.2\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"fWUEyjzF21cJ"},"source":["### **Data Split**"]},{"cell_type":"code","metadata":{"scrolled":false,"id":"2iYLNSeSEp7p","colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"status":"ok","timestamp":1619332093609,"user_tz":-540,"elapsed":1440,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"}},"outputId":"99a3d438-e1da-406c-a427-e54890b84423"},"source":["from sklearn.model_selection import train_test_split\n","from keras.utils import np_utils\n","from keras.preprocessing.image import ImageDataGenerator \n","from sklearn.utils import class_weight\n","# import cv2\n","\n","\n","_, row, col, _ = x_train.shape\n","\n","#         pr label   #\n","# y_train = np.where(pr_train > 1, 1, 0)\n","# y_test = np.where(pr_test > 1, 1, 0)\n","# y_val = np.where(pr_val > 1, 1, 0)\n","\n","\n","seed = 1\n","random_state = 20\n","np.random.seed(seed)\n","# tf.random.set_seed(seed)\n","\n","#         up label      #\n","# y_train = np.where(ud_train > 1, 1, 0)\n","# y_test = np.where(ud_test > 1, 1, 0)\n","# y_val = np.where(ud_val > 1, 1, 0)\n","\n","print('pr_train[:5] :', pr_train[:5])\n","# print('ud_train[:5] :', ud_train[:5])\n","print('y_train[:5] :', y_train[:5])\n","print('y_train.dtype :', y_train.dtype)\n","\n","print('x_train.shape :', x_train.shape)\n","print('x_test.shape :', x_test.shape)\n","print('x_val.shape :', x_val.shape)\n","print('y_train.shape :', y_train.shape)\n","print('y_test.shape :', y_test.shape)\n","print('y_val.shape :', y_val.shape)\n","\n","def class_ratio(in_list):\n","\n","  return in_list / in_list[1]\n","\n","print('np.unique(y_train, return_counts=True :', np.unique(y_train, return_counts=True), class_ratio(np.unique(y_train, return_counts=True)[1]))\n","print('np.unique(y_val, return_counts=True :', np.unique(y_val, return_counts=True), class_ratio(np.unique(y_val, return_counts=True)[1]))\n","print('np.unique(y_test, return_counts=True :', np.unique(y_test, return_counts=True), class_ratio(np.unique(y_test, return_counts=True)[1]))\n","\n","label = y_train.reshape(-1, )\n","class_weights = class_weight.compute_class_weight('balanced', \n","                                                    classes=np.unique(label),\n","                                                    y=label)\n","class_weights = dict(enumerate(class_weights))\n","print('class_weights :', class_weights)\n","\n","# sample_weight = np.ones(shape=(len(y_train),))\n","# sample_weight[(y_train == 1).reshape(-1,)] = 1.5\n","# print('sample_weight[:20] :', sample_weight[:20])\n","\n","\n","print('np.isnan(np.sum(x_train)) :', np.isnan(np.sum(x_train)))\n","print('np.isnan(np.sum(x_val)) :', np.isnan(np.sum(x_val)))\n","print('np.isnan(np.sum(x_test)) :', np.isnan(np.sum(x_test)))\n","\n","print('np.isnan(np.sum(y_train)) :', np.isnan(np.sum(y_train)))\n","print('np.isnan(np.sum(y_val)) :', np.isnan(np.sum(y_val)))\n","print('np.isnan(np.sum(y_test)) :', np.isnan(np.sum(y_test)))\n","\n","y_train_ohe = np_utils.to_categorical(y_train, num_classes)\n","y_val_ohe = np_utils.to_categorical(y_val, num_classes)\n","y_test_ohe = np_utils.to_categorical(y_test, num_classes)\n","print('y_train_ohe.shape :', y_train_ohe.shape)\n","print('y_val_ohe.shape :', y_val_ohe.shape)\n","print('y_test_ohe.shape :', y_test_ohe.shape)\n","\n","datagen = ImageDataGenerator( \n","    rotation_range = 45,\n","    # zoom_range = 0.5,\n","    # shear_range = 0.5,\n","    # horizontal_flip = True,\n","    # vertical_flip = True,\n","    # width_shift_range=0.5,\n","    # height_shift_range=0.5,\n","    # fill_mode = 'nearest'\n","    )\n","\n","valgen = ImageDataGenerator( \n","    )\n","\n","datagen.fit(x_train)\n","valgen.fit(x_val)\n","\n","batch_size = 16\n","\n","for x_batch, _ in datagen.flow(x_train, y_train_ohe, batch_size=9):\n","\n","    plt.suptitle(\"train x_batch\")\n","\n","    for i in range(0, 9): \n","        plt.subplot(330 + 1 + i) \n","        # resized = cv2.resize(x_batch[i].reshape(row, col), (row * 2, col * 10))\n","        # cmapped = plt.cm.Set1(resized)\n","        # plt.imshow(cmapped)\n","        # plt.imshow(x_batch[i].reshape(row, col))\n","        plt.imshow(x_batch[i])\n","        plt.axis('off') \n","    plt.show() \n","    break\n","\n","for x_batch, _ in valgen.flow(x_val, y_val_ohe, batch_size=9):\n","\n","    plt.suptitle(\"val x_batch\")\n","\n","    for i in range(0, 9): \n","        plt.subplot(330 + 1 + i) \n","        # resized = cv2.resize(x_batch[i].reshape(row, col), (row * 2, col * 10))\n","        # cmapped = plt.cm.Set1(resized)\n","        # plt.imshow(cmapped)\n","        # plt.imshow(x_batch[i].reshape(row, col))\n","        plt.imshow(x_batch[i])\n","        plt.axis('off') \n","    plt.show() \n","    break\n","    \n","train_flow = datagen.flow(x_train, y_train_ohe, batch_size=batch_size) \n","val_flow = valgen.flow(x_val, y_val_ohe, batch_size=batch_size) \n","# break\n","\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["pr_train[:5] : [[1.0787843]\n"," [0.9692578]\n"," [1.003015 ]\n"," [1.0360625]\n"," [0.9871591]]\n","y_train[:5] : [[1]\n"," [0]\n"," [1]\n"," [1]\n"," [0]]\n","y_train.dtype : int64\n","x_train.shape : (6090, 90, 12, 3)\n","x_test.shape : (2031, 90, 12, 3)\n","x_val.shape : (2031, 90, 12, 3)\n","y_train.shape : (6090, 1)\n","y_test.shape : (2031, 1)\n","y_val.shape : (2031, 1)\n","np.unique(y_train, return_counts=True : (array([0, 1]), array([3382, 2708])) [1.24889217 1.        ]\n","np.unique(y_val, return_counts=True : (array([0, 1]), array([1157,  874])) [1.32379863 1.        ]\n","np.unique(y_test, return_counts=True : (array([0, 1]), array([1105,  926])) [1.19330454 1.        ]\n","class_weights : {0: 0.9003548196333531, 1: 1.1244460856720828}\n","np.isnan(np.sum(x_train)) : False\n","np.isnan(np.sum(x_val)) : False\n","np.isnan(np.sum(x_test)) : False\n","np.isnan(np.sum(y_train)) : False\n","np.isnan(np.sum(y_val)) : False\n","np.isnan(np.sum(y_test)) : False\n","y_train_ohe.shape : (6090, 2)\n","y_val_ohe.shape : (2031, 2)\n","y_test_ohe.shape : (2031, 2)\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 9 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 9 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"s-W6LL5c2VN2"},"source":["### **Training**"]},{"cell_type":"code","metadata":{"id":"EkVg1hVI2TNP","colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"status":"error","timestamp":1619340029617,"user_tz":-540,"elapsed":4600698,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"}},"outputId":"ff9072db-d68a-4a93-c94b-219257bd3c78"},"source":["(_, row, col, _) = x_train.shape\n","  \n","from keras.callbacks import ModelCheckpoint, EarlyStopping, TensorBoard\n","\n","ckpt_path = current_path + 'ckpt/'\n","board_path = current_path + 'graph/'\n","# model_name = 'classifier_%s_close_updown_pr_theta_shuffle_without_back_03.h5' % period\n","# model_name = 'classifier_%s_close_updown_pr_theta_train_prevdata_005.h5' % period\n","\n","model_name = 'classifier_%s_close_updown_pr_theta_train_evendata_shuffle.h5' % period\n","model = keras.models.load_model(ckpt_path + model_name)\n","\n","\n","# model = FER_Model(input_shape=(row, col, 3))\n","# opt = Adam(lr=0.00001, decay=0.000005)\n","# model.compile(loss='categorical_crossentropy', optimizer=opt, metrics=['accuracy'])\n","\n","model_name = 'classifier_%s_close_updown_pr_theta_train_evendata_shuffle.h5' % period\n","\n","\n","checkpoint = ModelCheckpoint(ckpt_path + model_name, monitor='val_loss', verbose=1, save_best_only=True, mode='auto')\n","checkpoint2 = TensorBoard(log_dir=board_path,\n","                          histogram_freq=0,\n","                          write_graph=True,\n","                          write_images=True)\n","checkpoint3 = EarlyStopping(monitor='val_loss', patience=40)\n","# callbacks_list = [checkpoint, checkpoint2, checkpoint3]\n","callbacks_list = [checkpoint, checkpoint2]\n","\n","# keras.callbacks.Callback 로 부터 log 를 받아와 history log 를 작성할 수 있다.\n","\n","# we iterate 200 times over the entire training set\n","num_epochs = 1000\n","history = model.fit_generator(train_flow, \n","                    steps_per_epoch=len(x_train) / batch_size, \n","                    epochs=num_epochs,  \n","                    verbose=2,  \n","                    callbacks=callbacks_list,\n","                    class_weight=class_weights,\n","                    validation_data=val_flow,  \n","                    validation_steps=len(x_val) / batch_size,\n","                    shuffle=False)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Epoch 1/1000\n"," - 6s - loss: 0.1974 - accuracy: 0.9253 - val_loss: 1.7980 - val_accuracy: 0.4993\n","\n","Epoch 00001: val_loss improved from inf to 1.79800, saving model to /content/drive/My Drive/Colab Notebooks/Project_Stock/ckpt/classifier_45_close_updown_pr_theta_train_evendata_shuffle.h5\n","Epoch 2/1000\n"," - 5s - loss: 0.1992 - accuracy: 0.9235 - val_loss: 1.0491 - val_accuracy: 0.5032\n","\n","Epoch 00002: val_loss improved from 1.79800 to 1.04914, saving model to /content/drive/My Drive/Colab Notebooks/Project_Stock/ckpt/classifier_45_close_updown_pr_theta_train_evendata_shuffle.h5\n","Epoch 3/1000\n"," - 5s - loss: 0.1930 - accuracy: 0.9292 - val_loss: 1.7098 - val_accuracy: 0.5071\n","\n","Epoch 00003: val_loss did not improve from 1.04914\n","Epoch 4/1000\n"," - 5s - loss: 0.1960 - accuracy: 0.9269 - val_loss: 2.3495 - val_accuracy: 0.5062\n","\n","Epoch 00004: val_loss did not improve from 1.04914\n","Epoch 5/1000\n"," - 5s - loss: 0.1990 - accuracy: 0.9228 - val_loss: 1.7588 - val_accuracy: 0.5160\n","\n","Epoch 00005: val_loss did not improve from 1.04914\n","Epoch 6/1000\n"," - 5s - loss: 0.1909 - accuracy: 0.9305 - val_loss: 1.1388 - val_accuracy: 0.5111\n","\n","Epoch 00006: val_loss did not improve from 1.04914\n","Epoch 7/1000\n"," - 5s - loss: 0.1971 - accuracy: 0.9207 - val_loss: 1.1407 - val_accuracy: 0.5140\n","\n","Epoch 00007: val_loss did not improve from 1.04914\n","Epoch 8/1000\n"," - 5s - loss: 0.1854 - accuracy: 0.9310 - val_loss: 2.4614 - val_accuracy: 0.5160\n","\n","Epoch 00008: val_loss did not improve from 1.04914\n","Epoch 9/1000\n"," - 5s - loss: 0.1884 - accuracy: 0.9282 - val_loss: 2.1088 - val_accuracy: 0.5032\n","\n","Epoch 00009: val_loss did not improve from 1.04914\n","Epoch 10/1000\n"," - 5s - loss: 0.1953 - accuracy: 0.9190 - val_loss: 0.7648 - val_accuracy: 0.5121\n","\n","Epoch 00010: val_loss improved from 1.04914 to 0.76476, saving model to /content/drive/My Drive/Colab Notebooks/Project_Stock/ckpt/classifier_45_close_updown_pr_theta_train_evendata_shuffle.h5\n","Epoch 11/1000\n"," - 5s - loss: 0.1886 - accuracy: 0.9294 - val_loss: 1.3366 - val_accuracy: 0.5165\n","\n","Epoch 00011: val_loss did not improve from 0.76476\n","Epoch 12/1000\n"," - 5s - loss: 0.1925 - accuracy: 0.9287 - val_loss: 1.9790 - val_accuracy: 0.4998\n","\n","Epoch 00012: val_loss did not improve from 0.76476\n","Epoch 13/1000\n"," - 5s - loss: 0.1965 - accuracy: 0.9243 - val_loss: 0.6141 - val_accuracy: 0.5150\n","\n","Epoch 00013: val_loss improved from 0.76476 to 0.61411, saving model to /content/drive/My Drive/Colab Notebooks/Project_Stock/ckpt/classifier_45_close_updown_pr_theta_train_evendata_shuffle.h5\n","Epoch 14/1000\n"," - 5s - loss: 0.1890 - accuracy: 0.9259 - val_loss: 1.8158 - val_accuracy: 0.4983\n","\n","Epoch 00014: val_loss did not improve from 0.61411\n","Epoch 15/1000\n"," - 5s - loss: 0.1803 - accuracy: 0.9325 - val_loss: 1.6491 - val_accuracy: 0.5130\n","\n","Epoch 00015: val_loss did not improve from 0.61411\n","Epoch 16/1000\n"," - 5s - loss: 0.1818 - accuracy: 0.9274 - val_loss: 1.2123 - val_accuracy: 0.5022\n","\n","Epoch 00016: val_loss did not improve from 0.61411\n","Epoch 17/1000\n"," - 5s - loss: 0.1850 - accuracy: 0.9266 - val_loss: 1.3511 - val_accuracy: 0.4998\n","\n","Epoch 00017: val_loss did not improve from 0.61411\n","Epoch 18/1000\n"," - 5s - loss: 0.1758 - accuracy: 0.9346 - val_loss: 1.5728 - val_accuracy: 0.5007\n","\n","Epoch 00018: val_loss did not improve from 0.61411\n","Epoch 19/1000\n"," - 5s - loss: 0.1878 - accuracy: 0.9264 - val_loss: 0.7495 - val_accuracy: 0.5027\n","\n","Epoch 00019: val_loss did not improve from 0.61411\n","Epoch 20/1000\n"," - 5s - loss: 0.1814 - accuracy: 0.9304 - val_loss: 1.8130 - val_accuracy: 0.5007\n","\n","Epoch 00020: val_loss did not improve from 0.61411\n","Epoch 21/1000\n"," - 5s - loss: 0.1772 - accuracy: 0.9351 - val_loss: 1.1872 - val_accuracy: 0.5096\n","\n","Epoch 00021: val_loss did not improve from 0.61411\n","Epoch 22/1000\n"," - 5s - loss: 0.1672 - accuracy: 0.9402 - val_loss: 1.6035 - val_accuracy: 0.5002\n","\n","Epoch 00022: val_loss did not improve from 0.61411\n","Epoch 23/1000\n"," - 5s - loss: 0.1794 - accuracy: 0.9299 - val_loss: 2.2862 - val_accuracy: 0.4993\n","\n","Epoch 00023: val_loss did not improve from 0.61411\n","Epoch 24/1000\n"," - 5s - loss: 0.1717 - accuracy: 0.9368 - val_loss: 1.5966 - val_accuracy: 0.4963\n","\n","Epoch 00024: val_loss did not improve from 0.61411\n","Epoch 25/1000\n"," - 5s - loss: 0.1866 - accuracy: 0.9294 - val_loss: 2.0817 - val_accuracy: 0.5037\n","\n","Epoch 00025: val_loss did not improve from 0.61411\n","Epoch 26/1000\n"," - 5s - loss: 0.1712 - accuracy: 0.9332 - val_loss: 2.9193 - val_accuracy: 0.4993\n","\n","Epoch 00026: val_loss did not improve from 0.61411\n","Epoch 27/1000\n"," - 5s - loss: 0.1744 - accuracy: 0.9348 - val_loss: 1.7118 - val_accuracy: 0.5066\n","\n","Epoch 00027: val_loss did not improve from 0.61411\n","Epoch 28/1000\n"," - 5s - loss: 0.1714 - accuracy: 0.9342 - val_loss: 1.1994 - val_accuracy: 0.4958\n","\n","Epoch 00028: val_loss did not improve from 0.61411\n","Epoch 29/1000\n"," - 5s - loss: 0.1665 - accuracy: 0.9389 - val_loss: 1.1176 - val_accuracy: 0.5066\n","\n","Epoch 00029: val_loss did not improve from 0.61411\n","Epoch 30/1000\n"," - 5s - loss: 0.1683 - accuracy: 0.9356 - val_loss: 2.0065 - val_accuracy: 0.5002\n","\n","Epoch 00030: val_loss did not improve from 0.61411\n","Epoch 31/1000\n"," - 5s - loss: 0.1658 - accuracy: 0.9381 - val_loss: 2.4325 - val_accuracy: 0.5091\n","\n","Epoch 00031: val_loss did not improve from 0.61411\n","Epoch 32/1000\n"," - 5s - loss: 0.1670 - accuracy: 0.9371 - val_loss: 1.3648 - val_accuracy: 0.5155\n","\n","Epoch 00032: val_loss did not improve from 0.61411\n","Epoch 33/1000\n"," - 5s - loss: 0.1670 - accuracy: 0.9361 - val_loss: 1.4697 - val_accuracy: 0.5066\n","\n","Epoch 00033: val_loss did not improve from 0.61411\n","Epoch 34/1000\n"," - 5s - loss: 0.1650 - accuracy: 0.9391 - val_loss: 1.2098 - val_accuracy: 0.5062\n","\n","Epoch 00034: val_loss did not improve from 0.61411\n","Epoch 35/1000\n"," - 5s - loss: 0.1671 - accuracy: 0.9378 - val_loss: 2.4560 - val_accuracy: 0.5101\n","\n","Epoch 00035: val_loss did not improve from 0.61411\n","Epoch 36/1000\n"," - 5s - loss: 0.1600 - accuracy: 0.9407 - val_loss: 2.7671 - val_accuracy: 0.5165\n","\n","Epoch 00036: val_loss did not improve from 0.61411\n","Epoch 37/1000\n"," - 5s - loss: 0.1611 - accuracy: 0.9419 - val_loss: 1.8914 - val_accuracy: 0.5091\n","\n","Epoch 00037: val_loss did not improve from 0.61411\n","Epoch 38/1000\n"," - 5s - loss: 0.1638 - accuracy: 0.9363 - val_loss: 1.9795 - val_accuracy: 0.5150\n","\n","Epoch 00038: val_loss did not improve from 0.61411\n","Epoch 39/1000\n"," - 5s - loss: 0.1678 - accuracy: 0.9391 - val_loss: 2.2442 - val_accuracy: 0.5135\n","\n","Epoch 00039: val_loss did not improve from 0.61411\n","Epoch 40/1000\n"," - 5s - loss: 0.1600 - accuracy: 0.9419 - val_loss: 1.4085 - val_accuracy: 0.5027\n","\n","Epoch 00040: val_loss did not improve from 0.61411\n","Epoch 41/1000\n"," - 5s - loss: 0.1521 - accuracy: 0.9438 - val_loss: 1.7649 - val_accuracy: 0.4973\n","\n","Epoch 00041: val_loss did not improve from 0.61411\n","Epoch 42/1000\n"," - 5s - loss: 0.1655 - accuracy: 0.9353 - val_loss: 1.5662 - val_accuracy: 0.5042\n","\n","Epoch 00042: val_loss did not improve from 0.61411\n","Epoch 43/1000\n"," - 5s - loss: 0.1495 - accuracy: 0.9461 - val_loss: 2.2226 - val_accuracy: 0.4968\n","\n","Epoch 00043: val_loss did not improve from 0.61411\n","Epoch 44/1000\n"," - 5s - loss: 0.1710 - accuracy: 0.9369 - val_loss: 1.8525 - val_accuracy: 0.5032\n","\n","Epoch 00044: val_loss did not improve from 0.61411\n","Epoch 45/1000\n"," - 5s - loss: 0.1649 - accuracy: 0.9379 - val_loss: 0.9258 - val_accuracy: 0.5047\n","\n","Epoch 00045: val_loss did not improve from 0.61411\n","Epoch 46/1000\n"," - 5s - loss: 0.1513 - accuracy: 0.9452 - val_loss: 0.8509 - val_accuracy: 0.4988\n","\n","Epoch 00046: val_loss did not improve from 0.61411\n","Epoch 47/1000\n"," - 5s - loss: 0.1542 - accuracy: 0.9475 - val_loss: 1.5843 - val_accuracy: 0.5007\n","\n","Epoch 00047: val_loss did not improve from 0.61411\n","Epoch 48/1000\n"," - 5s - loss: 0.1540 - accuracy: 0.9471 - val_loss: 1.7486 - val_accuracy: 0.5062\n","\n","Epoch 00048: val_loss did not improve from 0.61411\n","Epoch 49/1000\n"," - 5s - loss: 0.1574 - accuracy: 0.9414 - val_loss: 1.8346 - val_accuracy: 0.4988\n","\n","Epoch 00049: val_loss did not improve from 0.61411\n","Epoch 50/1000\n"," - 5s - loss: 0.1494 - accuracy: 0.9479 - val_loss: 2.7805 - val_accuracy: 0.5022\n","\n","Epoch 00050: val_loss did not improve from 0.61411\n","Epoch 51/1000\n"," - 5s - loss: 0.1542 - accuracy: 0.9437 - val_loss: 2.4624 - val_accuracy: 0.5007\n","\n","Epoch 00051: val_loss did not improve from 0.61411\n","Epoch 52/1000\n"," - 5s - loss: 0.1546 - accuracy: 0.9420 - val_loss: 3.2877 - val_accuracy: 0.5042\n","\n","Epoch 00052: val_loss did not improve from 0.61411\n","Epoch 53/1000\n"," - 5s - loss: 0.1513 - accuracy: 0.9409 - val_loss: 2.4706 - val_accuracy: 0.5086\n","\n","Epoch 00053: val_loss did not improve from 0.61411\n","Epoch 54/1000\n"," - 5s - loss: 0.1475 - accuracy: 0.9506 - val_loss: 2.4027 - val_accuracy: 0.5140\n","\n","Epoch 00054: val_loss did not improve from 0.61411\n","Epoch 55/1000\n"," - 5s - loss: 0.1522 - accuracy: 0.9461 - val_loss: 2.2025 - val_accuracy: 0.5121\n","\n","Epoch 00055: val_loss did not improve from 0.61411\n","Epoch 56/1000\n"," - 5s - loss: 0.1468 - accuracy: 0.9440 - val_loss: 1.9616 - val_accuracy: 0.5017\n","\n","Epoch 00056: val_loss did not improve from 0.61411\n","Epoch 57/1000\n"," - 5s - loss: 0.1560 - accuracy: 0.9388 - val_loss: 0.2285 - val_accuracy: 0.4958\n","\n","Epoch 00057: val_loss improved from 0.61411 to 0.22847, saving model to /content/drive/My Drive/Colab Notebooks/Project_Stock/ckpt/classifier_45_close_updown_pr_theta_train_evendata_shuffle.h5\n","Epoch 58/1000\n"," - 5s - loss: 0.1456 - accuracy: 0.9461 - val_loss: 3.6815 - val_accuracy: 0.4998\n","\n","Epoch 00058: val_loss did not improve from 0.22847\n","Epoch 59/1000\n"," - 5s - loss: 0.1411 - accuracy: 0.9493 - val_loss: 2.1982 - val_accuracy: 0.4993\n","\n","Epoch 00059: val_loss did not improve from 0.22847\n","Epoch 60/1000\n"," - 5s - loss: 0.1453 - accuracy: 0.9493 - val_loss: 2.2817 - val_accuracy: 0.5052\n","\n","Epoch 00060: val_loss did not improve from 0.22847\n","Epoch 61/1000\n"," - 5s - loss: 0.1395 - accuracy: 0.9481 - val_loss: 1.7812 - val_accuracy: 0.5047\n","\n","Epoch 00061: val_loss did not improve from 0.22847\n","Epoch 62/1000\n"," - 5s - loss: 0.1432 - accuracy: 0.9458 - val_loss: 1.4383 - val_accuracy: 0.5116\n","\n","Epoch 00062: val_loss did not improve from 0.22847\n","Epoch 63/1000\n"," - 5s - loss: 0.1479 - accuracy: 0.9430 - val_loss: 2.2425 - val_accuracy: 0.5032\n","\n","Epoch 00063: val_loss did not improve from 0.22847\n","Epoch 64/1000\n"," - 5s - loss: 0.1422 - accuracy: 0.9506 - val_loss: 0.9864 - val_accuracy: 0.5086\n","\n","Epoch 00064: val_loss did not improve from 0.22847\n","Epoch 65/1000\n"," - 5s - loss: 0.1346 - accuracy: 0.9517 - val_loss: 4.6108 - val_accuracy: 0.5052\n","\n","Epoch 00065: val_loss did not improve from 0.22847\n","Epoch 66/1000\n"," - 5s - loss: 0.1467 - accuracy: 0.9447 - val_loss: 1.9294 - val_accuracy: 0.5091\n","\n","Epoch 00066: val_loss did not improve from 0.22847\n","Epoch 67/1000\n"," - 5s - loss: 0.1441 - accuracy: 0.9481 - val_loss: 1.9211 - val_accuracy: 0.5057\n","\n","Epoch 00067: val_loss did not improve from 0.22847\n","Epoch 68/1000\n"," - 5s - loss: 0.1375 - accuracy: 0.9537 - val_loss: 1.5197 - val_accuracy: 0.5002\n","\n","Epoch 00068: val_loss did not improve from 0.22847\n","Epoch 69/1000\n"," - 5s - loss: 0.1445 - accuracy: 0.9470 - val_loss: 2.5615 - val_accuracy: 0.5032\n","\n","Epoch 00069: val_loss did not improve from 0.22847\n","Epoch 70/1000\n"," - 5s - loss: 0.1388 - accuracy: 0.9479 - val_loss: 3.1092 - val_accuracy: 0.5091\n","\n","Epoch 00070: val_loss did not improve from 0.22847\n","Epoch 71/1000\n"," - 5s - loss: 0.1343 - accuracy: 0.9527 - val_loss: 1.7811 - val_accuracy: 0.5052\n","\n","Epoch 00071: val_loss did not improve from 0.22847\n","Epoch 72/1000\n"," - 5s - loss: 0.1335 - accuracy: 0.9525 - val_loss: 1.9277 - val_accuracy: 0.4934\n","\n","Epoch 00072: val_loss did not improve from 0.22847\n","Epoch 73/1000\n"," - 5s - loss: 0.1348 - accuracy: 0.9529 - val_loss: 2.7431 - val_accuracy: 0.5057\n","\n","Epoch 00073: val_loss did not improve from 0.22847\n","Epoch 74/1000\n"," - 5s - loss: 0.1340 - accuracy: 0.9504 - val_loss: 3.6712 - val_accuracy: 0.5027\n","\n","Epoch 00074: val_loss did not improve from 0.22847\n","Epoch 75/1000\n"," - 5s - loss: 0.1435 - accuracy: 0.9460 - val_loss: 1.5553 - val_accuracy: 0.5111\n","\n","Epoch 00075: val_loss did not improve from 0.22847\n","Epoch 76/1000\n"," - 5s - loss: 0.1345 - accuracy: 0.9532 - val_loss: 0.7862 - val_accuracy: 0.5066\n","\n","Epoch 00076: val_loss did not improve from 0.22847\n","Epoch 77/1000\n"," - 5s - loss: 0.1326 - accuracy: 0.9524 - val_loss: 3.9001 - val_accuracy: 0.5071\n","\n","Epoch 00077: val_loss did not improve from 0.22847\n","Epoch 78/1000\n"," - 5s - loss: 0.1300 - accuracy: 0.9573 - val_loss: 5.5243 - val_accuracy: 0.4988\n","\n","Epoch 00078: val_loss did not improve from 0.22847\n","Epoch 79/1000\n"," - 5s - loss: 0.1249 - accuracy: 0.9555 - val_loss: 2.0691 - val_accuracy: 0.5037\n","\n","Epoch 00079: val_loss did not improve from 0.22847\n","Epoch 80/1000\n"," - 5s - loss: 0.1367 - accuracy: 0.9521 - val_loss: 1.9465 - val_accuracy: 0.5101\n","\n","Epoch 00080: val_loss did not improve from 0.22847\n","Epoch 81/1000\n"," - 5s - loss: 0.1250 - accuracy: 0.9580 - val_loss: 3.5051 - val_accuracy: 0.5071\n","\n","Epoch 00081: val_loss did not improve from 0.22847\n","Epoch 82/1000\n"," - 5s - loss: 0.1267 - accuracy: 0.9544 - val_loss: 0.7164 - val_accuracy: 0.5002\n","\n","Epoch 00082: val_loss did not improve from 0.22847\n","Epoch 83/1000\n"," - 5s - loss: 0.1278 - accuracy: 0.9547 - val_loss: 2.4310 - val_accuracy: 0.5042\n","\n","Epoch 00083: val_loss did not improve from 0.22847\n","Epoch 84/1000\n"," - 5s - loss: 0.1242 - accuracy: 0.9560 - val_loss: 3.5755 - val_accuracy: 0.5012\n","\n","Epoch 00084: val_loss did not improve from 0.22847\n","Epoch 85/1000\n"," - 5s - loss: 0.1234 - accuracy: 0.9562 - val_loss: 2.1312 - val_accuracy: 0.5071\n","\n","Epoch 00085: val_loss did not improve from 0.22847\n","Epoch 86/1000\n"," - 5s - loss: 0.1229 - accuracy: 0.9565 - val_loss: 3.3917 - val_accuracy: 0.4943\n","\n","Epoch 00086: val_loss did not improve from 0.22847\n","Epoch 87/1000\n"," - 5s - loss: 0.1206 - accuracy: 0.9606 - val_loss: 2.4406 - val_accuracy: 0.5022\n","\n","Epoch 00087: val_loss did not improve from 0.22847\n","Epoch 88/1000\n"," - 5s - loss: 0.1220 - accuracy: 0.9591 - val_loss: 2.0424 - val_accuracy: 0.5052\n","\n","Epoch 00088: val_loss did not improve from 0.22847\n","Epoch 89/1000\n"," - 5s - loss: 0.1220 - accuracy: 0.9591 - val_loss: 1.4768 - val_accuracy: 0.5155\n","\n","Epoch 00089: val_loss did not improve from 0.22847\n","Epoch 90/1000\n"," - 5s - loss: 0.1196 - accuracy: 0.9588 - val_loss: 2.3440 - val_accuracy: 0.5175\n","\n","Epoch 00090: val_loss did not improve from 0.22847\n","Epoch 91/1000\n"," - 5s - loss: 0.1261 - accuracy: 0.9547 - val_loss: 1.6794 - val_accuracy: 0.5135\n","\n","Epoch 00091: val_loss did not improve from 0.22847\n","Epoch 92/1000\n"," - 5s - loss: 0.1188 - accuracy: 0.9609 - val_loss: 2.8266 - val_accuracy: 0.5071\n","\n","Epoch 00092: val_loss did not improve from 0.22847\n","Epoch 93/1000\n"," - 5s - loss: 0.1253 - accuracy: 0.9557 - val_loss: 3.6266 - val_accuracy: 0.5032\n","\n","Epoch 00093: val_loss did not improve from 0.22847\n","Epoch 94/1000\n"," - 5s - loss: 0.1226 - accuracy: 0.9539 - val_loss: 1.9529 - val_accuracy: 0.5126\n","\n","Epoch 00094: val_loss did not improve from 0.22847\n","Epoch 95/1000\n"," - 5s - loss: 0.1256 - accuracy: 0.9529 - val_loss: 1.3412 - val_accuracy: 0.5101\n","\n","Epoch 00095: val_loss did not improve from 0.22847\n","Epoch 96/1000\n"," - 5s - loss: 0.1170 - accuracy: 0.9604 - val_loss: 4.1911 - val_accuracy: 0.5130\n","\n","Epoch 00096: val_loss did not improve from 0.22847\n","Epoch 97/1000\n"," - 5s - loss: 0.1214 - accuracy: 0.9557 - val_loss: 2.2335 - val_accuracy: 0.5076\n","\n","Epoch 00097: val_loss did not improve from 0.22847\n","Epoch 98/1000\n"," - 5s - loss: 0.1147 - accuracy: 0.9614 - val_loss: 2.8151 - val_accuracy: 0.5101\n","\n","Epoch 00098: val_loss did not improve from 0.22847\n","Epoch 99/1000\n"," - 5s - loss: 0.1169 - accuracy: 0.9571 - val_loss: 2.4210 - val_accuracy: 0.5190\n","\n","Epoch 00099: val_loss did not improve from 0.22847\n","Epoch 100/1000\n"," - 5s - loss: 0.1157 - accuracy: 0.9583 - val_loss: 2.2404 - val_accuracy: 0.5106\n","\n","Epoch 00100: val_loss did not improve from 0.22847\n","Epoch 101/1000\n"," - 5s - loss: 0.1220 - accuracy: 0.9557 - val_loss: 2.3776 - val_accuracy: 0.5096\n","\n","Epoch 00101: val_loss did not improve from 0.22847\n","Epoch 102/1000\n"," - 5s - loss: 0.1181 - accuracy: 0.9581 - val_loss: 3.0276 - val_accuracy: 0.5101\n","\n","Epoch 00102: val_loss did not improve from 0.22847\n","Epoch 103/1000\n"," - 5s - loss: 0.1159 - accuracy: 0.9586 - val_loss: 2.8146 - val_accuracy: 0.5066\n","\n","Epoch 00103: val_loss did not improve from 0.22847\n","Epoch 104/1000\n"," - 5s - loss: 0.1094 - accuracy: 0.9645 - val_loss: 4.2611 - val_accuracy: 0.5165\n","\n","Epoch 00104: val_loss did not improve from 0.22847\n","Epoch 105/1000\n"," - 5s - loss: 0.1161 - accuracy: 0.9581 - val_loss: 2.2445 - val_accuracy: 0.5017\n","\n","Epoch 00105: val_loss did not improve from 0.22847\n","Epoch 106/1000\n"," - 5s - loss: 0.1085 - accuracy: 0.9619 - val_loss: 1.7170 - val_accuracy: 0.5165\n","\n","Epoch 00106: val_loss did not improve from 0.22847\n","Epoch 107/1000\n"," - 5s - loss: 0.1145 - accuracy: 0.9621 - val_loss: 1.9920 - val_accuracy: 0.5066\n","\n","Epoch 00107: val_loss did not improve from 0.22847\n","Epoch 108/1000\n"," - 5s - loss: 0.1132 - accuracy: 0.9601 - val_loss: 1.5040 - val_accuracy: 0.5111\n","\n","Epoch 00108: val_loss did not improve from 0.22847\n","Epoch 109/1000\n"," - 5s - loss: 0.1075 - accuracy: 0.9649 - val_loss: 3.3374 - val_accuracy: 0.5076\n","\n","Epoch 00109: val_loss did not improve from 0.22847\n","Epoch 110/1000\n"," - 5s - loss: 0.1065 - accuracy: 0.9673 - val_loss: 2.3394 - val_accuracy: 0.5057\n","\n","Epoch 00110: val_loss did not improve from 0.22847\n","Epoch 111/1000\n"," - 5s - loss: 0.1025 - accuracy: 0.9672 - val_loss: 1.3993 - val_accuracy: 0.5066\n","\n","Epoch 00111: val_loss did not improve from 0.22847\n","Epoch 112/1000\n"," - 5s - loss: 0.1075 - accuracy: 0.9611 - val_loss: 2.4013 - val_accuracy: 0.5002\n","\n","Epoch 00112: val_loss did not improve from 0.22847\n","Epoch 113/1000\n"," - 5s - loss: 0.0995 - accuracy: 0.9678 - val_loss: 0.6511 - val_accuracy: 0.5022\n","\n","Epoch 00113: val_loss did not improve from 0.22847\n","Epoch 114/1000\n"," - 5s - loss: 0.1074 - accuracy: 0.9604 - val_loss: 2.5501 - val_accuracy: 0.5047\n","\n","Epoch 00114: val_loss did not improve from 0.22847\n","Epoch 115/1000\n"," - 5s - loss: 0.1074 - accuracy: 0.9619 - val_loss: 2.0554 - val_accuracy: 0.5071\n","\n","Epoch 00115: val_loss did not improve from 0.22847\n","Epoch 116/1000\n"," - 5s - loss: 0.1008 - accuracy: 0.9662 - val_loss: 2.4866 - val_accuracy: 0.5121\n","\n","Epoch 00116: val_loss did not improve from 0.22847\n","Epoch 117/1000\n"," - 5s - loss: 0.1083 - accuracy: 0.9621 - val_loss: 2.2981 - val_accuracy: 0.5052\n","\n","Epoch 00117: val_loss did not improve from 0.22847\n","Epoch 118/1000\n"," - 5s - loss: 0.1027 - accuracy: 0.9663 - val_loss: 2.0199 - val_accuracy: 0.5175\n","\n","Epoch 00118: val_loss did not improve from 0.22847\n","Epoch 119/1000\n"," - 5s - loss: 0.1047 - accuracy: 0.9639 - val_loss: 2.5188 - val_accuracy: 0.5052\n","\n","Epoch 00119: val_loss did not improve from 0.22847\n","Epoch 120/1000\n"," - 5s - loss: 0.1059 - accuracy: 0.9639 - val_loss: 1.9697 - val_accuracy: 0.4998\n","\n","Epoch 00120: val_loss did not improve from 0.22847\n","Epoch 121/1000\n"," - 5s - loss: 0.1049 - accuracy: 0.9652 - val_loss: 0.5749 - val_accuracy: 0.5155\n","\n","Epoch 00121: val_loss did not improve from 0.22847\n","Epoch 122/1000\n"," - 5s - loss: 0.1024 - accuracy: 0.9645 - val_loss: 1.9365 - val_accuracy: 0.5066\n","\n","Epoch 00122: val_loss did not improve from 0.22847\n","Epoch 123/1000\n"," - 5s - loss: 0.1010 - accuracy: 0.9658 - val_loss: 2.9957 - val_accuracy: 0.5017\n","\n","Epoch 00123: val_loss did not improve from 0.22847\n","Epoch 124/1000\n"," - 5s - loss: 0.1036 - accuracy: 0.9640 - val_loss: 1.5473 - val_accuracy: 0.5121\n","\n","Epoch 00124: val_loss did not improve from 0.22847\n","Epoch 125/1000\n"," - 5s - loss: 0.0953 - accuracy: 0.9678 - val_loss: 3.1842 - val_accuracy: 0.5081\n","\n","Epoch 00125: val_loss did not improve from 0.22847\n","Epoch 126/1000\n"," - 5s - loss: 0.1028 - accuracy: 0.9637 - val_loss: 1.3916 - val_accuracy: 0.5165\n","\n","Epoch 00126: val_loss did not improve from 0.22847\n","Epoch 127/1000\n"," - 5s - loss: 0.1046 - accuracy: 0.9626 - val_loss: 2.4077 - val_accuracy: 0.5057\n","\n","Epoch 00127: val_loss did not improve from 0.22847\n","Epoch 128/1000\n"," - 5s - loss: 0.1054 - accuracy: 0.9670 - val_loss: 3.4973 - val_accuracy: 0.5126\n","\n","Epoch 00128: val_loss did not improve from 0.22847\n","Epoch 129/1000\n"," - 5s - loss: 0.0973 - accuracy: 0.9665 - val_loss: 1.0587 - val_accuracy: 0.4993\n","\n","Epoch 00129: val_loss did not improve from 0.22847\n","Epoch 130/1000\n"," - 5s - loss: 0.1063 - accuracy: 0.9626 - val_loss: 2.3102 - val_accuracy: 0.4988\n","\n","Epoch 00130: val_loss did not improve from 0.22847\n","Epoch 131/1000\n"," - 5s - loss: 0.0950 - accuracy: 0.9681 - val_loss: 1.9483 - val_accuracy: 0.5037\n","\n","Epoch 00131: val_loss did not improve from 0.22847\n","Epoch 132/1000\n"," - 5s - loss: 0.1013 - accuracy: 0.9655 - val_loss: 0.9516 - val_accuracy: 0.5086\n","\n","Epoch 00132: val_loss did not improve from 0.22847\n","Epoch 133/1000\n"," - 5s - loss: 0.0984 - accuracy: 0.9683 - val_loss: 1.7568 - val_accuracy: 0.5007\n","\n","Epoch 00133: val_loss did not improve from 0.22847\n","Epoch 134/1000\n"," - 5s - loss: 0.0984 - accuracy: 0.9678 - val_loss: 3.4196 - val_accuracy: 0.5096\n","\n","Epoch 00134: val_loss did not improve from 0.22847\n","Epoch 135/1000\n"," - 5s - loss: 0.1034 - accuracy: 0.9649 - val_loss: 1.5360 - val_accuracy: 0.5012\n","\n","Epoch 00135: val_loss did not improve from 0.22847\n","Epoch 136/1000\n"," - 5s - loss: 0.0962 - accuracy: 0.9691 - val_loss: 2.8453 - val_accuracy: 0.4948\n","\n","Epoch 00136: val_loss did not improve from 0.22847\n","Epoch 137/1000\n"," - 5s - loss: 0.0955 - accuracy: 0.9658 - val_loss: 3.2890 - val_accuracy: 0.4978\n","\n","Epoch 00137: val_loss did not improve from 0.22847\n","Epoch 138/1000\n"," - 5s - loss: 0.0944 - accuracy: 0.9685 - val_loss: 1.9578 - val_accuracy: 0.4963\n","\n","Epoch 00138: val_loss did not improve from 0.22847\n","Epoch 139/1000\n"," - 5s - loss: 0.0934 - accuracy: 0.9703 - val_loss: 3.9515 - val_accuracy: 0.4914\n","\n","Epoch 00139: val_loss did not improve from 0.22847\n","Epoch 140/1000\n"," - 5s - loss: 0.0950 - accuracy: 0.9650 - val_loss: 0.9502 - val_accuracy: 0.5032\n","\n","Epoch 00140: val_loss did not improve from 0.22847\n","Epoch 141/1000\n"," - 5s - loss: 0.0916 - accuracy: 0.9696 - val_loss: 3.0741 - val_accuracy: 0.5052\n","\n","Epoch 00141: val_loss did not improve from 0.22847\n","Epoch 142/1000\n"," - 5s - loss: 0.0901 - accuracy: 0.9711 - val_loss: 2.0021 - val_accuracy: 0.5002\n","\n","Epoch 00142: val_loss did not improve from 0.22847\n","Epoch 143/1000\n"," - 5s - loss: 0.0931 - accuracy: 0.9706 - val_loss: 3.0592 - val_accuracy: 0.5032\n","\n","Epoch 00143: val_loss did not improve from 0.22847\n","Epoch 144/1000\n"," - 5s - loss: 0.0942 - accuracy: 0.9677 - val_loss: 2.9358 - val_accuracy: 0.5032\n","\n","Epoch 00144: val_loss did not improve from 0.22847\n","Epoch 145/1000\n"," - 5s - loss: 0.0878 - accuracy: 0.9721 - val_loss: 2.7564 - val_accuracy: 0.5007\n","\n","Epoch 00145: val_loss did not improve from 0.22847\n","Epoch 146/1000\n"," - 5s - loss: 0.0914 - accuracy: 0.9681 - val_loss: 2.0454 - val_accuracy: 0.5007\n","\n","Epoch 00146: val_loss did not improve from 0.22847\n","Epoch 147/1000\n"," - 5s - loss: 0.0903 - accuracy: 0.9688 - val_loss: 1.5683 - val_accuracy: 0.5037\n","\n","Epoch 00147: val_loss did not improve from 0.22847\n","Epoch 148/1000\n"," - 5s - loss: 0.0833 - accuracy: 0.9757 - val_loss: 1.9081 - val_accuracy: 0.4998\n","\n","Epoch 00148: val_loss did not improve from 0.22847\n","Epoch 149/1000\n"," - 5s - loss: 0.0856 - accuracy: 0.9716 - val_loss: 1.8754 - val_accuracy: 0.4993\n","\n","Epoch 00149: val_loss did not improve from 0.22847\n","Epoch 150/1000\n"," - 5s - loss: 0.0916 - accuracy: 0.9667 - val_loss: 2.1724 - val_accuracy: 0.5111\n","\n","Epoch 00150: val_loss did not improve from 0.22847\n","Epoch 151/1000\n"," - 5s - loss: 0.0925 - accuracy: 0.9690 - val_loss: 2.9851 - val_accuracy: 0.5062\n","\n","Epoch 00151: val_loss did not improve from 0.22847\n","Epoch 152/1000\n"," - 5s - loss: 0.0852 - accuracy: 0.9731 - val_loss: 4.1224 - val_accuracy: 0.5062\n","\n","Epoch 00152: val_loss did not improve from 0.22847\n","Epoch 153/1000\n"," - 5s - loss: 0.0876 - accuracy: 0.9722 - val_loss: 1.7901 - val_accuracy: 0.5037\n","\n","Epoch 00153: val_loss did not improve from 0.22847\n","Epoch 154/1000\n"," - 5s - loss: 0.0828 - accuracy: 0.9734 - val_loss: 5.4318 - val_accuracy: 0.5057\n","\n","Epoch 00154: val_loss did not improve from 0.22847\n","Epoch 155/1000\n"," - 5s - loss: 0.0886 - accuracy: 0.9726 - val_loss: 2.5000 - val_accuracy: 0.5042\n","\n","Epoch 00155: val_loss did not improve from 0.22847\n","Epoch 156/1000\n"," - 5s - loss: 0.0853 - accuracy: 0.9685 - val_loss: 2.0288 - val_accuracy: 0.5037\n","\n","Epoch 00156: val_loss did not improve from 0.22847\n","Epoch 157/1000\n"," - 5s - loss: 0.0901 - accuracy: 0.9680 - val_loss: 2.1330 - val_accuracy: 0.5032\n","\n","Epoch 00157: val_loss did not improve from 0.22847\n","Epoch 158/1000\n"," - 5s - loss: 0.0842 - accuracy: 0.9744 - val_loss: 3.2195 - val_accuracy: 0.5027\n","\n","Epoch 00158: val_loss did not improve from 0.22847\n","Epoch 159/1000\n"," - 5s - loss: 0.0821 - accuracy: 0.9741 - val_loss: 1.8642 - val_accuracy: 0.5111\n","\n","Epoch 00159: val_loss did not improve from 0.22847\n","Epoch 160/1000\n"," - 5s - loss: 0.0859 - accuracy: 0.9703 - val_loss: 2.1308 - val_accuracy: 0.5032\n","\n","Epoch 00160: val_loss did not improve from 0.22847\n","Epoch 161/1000\n"," - 5s - loss: 0.0886 - accuracy: 0.9691 - val_loss: 3.1709 - val_accuracy: 0.5002\n","\n","Epoch 00161: val_loss did not improve from 0.22847\n","Epoch 162/1000\n"," - 5s - loss: 0.0853 - accuracy: 0.9734 - val_loss: 3.6003 - val_accuracy: 0.4988\n","\n","Epoch 00162: val_loss did not improve from 0.22847\n","Epoch 163/1000\n"," - 5s - loss: 0.0830 - accuracy: 0.9713 - val_loss: 1.3193 - val_accuracy: 0.5062\n","\n","Epoch 00163: val_loss did not improve from 0.22847\n","Epoch 164/1000\n"," - 5s - loss: 0.0868 - accuracy: 0.9696 - val_loss: 3.2056 - val_accuracy: 0.4998\n","\n","Epoch 00164: val_loss did not improve from 0.22847\n","Epoch 165/1000\n"," - 5s - loss: 0.0845 - accuracy: 0.9698 - val_loss: 1.3249 - val_accuracy: 0.5032\n","\n","Epoch 00165: val_loss did not improve from 0.22847\n","Epoch 166/1000\n"," - 5s - loss: 0.0864 - accuracy: 0.9708 - val_loss: 3.1456 - val_accuracy: 0.5135\n","\n","Epoch 00166: val_loss did not improve from 0.22847\n","Epoch 167/1000\n"," - 5s - loss: 0.0798 - accuracy: 0.9747 - val_loss: 2.1531 - val_accuracy: 0.4948\n","\n","Epoch 00167: val_loss did not improve from 0.22847\n","Epoch 168/1000\n"," - 5s - loss: 0.0769 - accuracy: 0.9757 - val_loss: 2.3604 - val_accuracy: 0.4914\n","\n","Epoch 00168: val_loss did not improve from 0.22847\n","Epoch 169/1000\n"," - 5s - loss: 0.0838 - accuracy: 0.9741 - val_loss: 4.0073 - val_accuracy: 0.4983\n","\n","Epoch 00169: val_loss did not improve from 0.22847\n","Epoch 170/1000\n"," - 5s - loss: 0.0826 - accuracy: 0.9727 - val_loss: 1.3130 - val_accuracy: 0.5057\n","\n","Epoch 00170: val_loss did not improve from 0.22847\n","Epoch 171/1000\n"," - 5s - loss: 0.0785 - accuracy: 0.9747 - val_loss: 3.7322 - val_accuracy: 0.5106\n","\n","Epoch 00171: val_loss did not improve from 0.22847\n","Epoch 172/1000\n"," - 5s - loss: 0.0775 - accuracy: 0.9755 - val_loss: 1.6587 - val_accuracy: 0.4978\n","\n","Epoch 00172: val_loss did not improve from 0.22847\n","Epoch 173/1000\n"," - 5s - loss: 0.0746 - accuracy: 0.9773 - val_loss: 3.2814 - val_accuracy: 0.5027\n","\n","Epoch 00173: val_loss did not improve from 0.22847\n","Epoch 174/1000\n"," - 5s - loss: 0.0799 - accuracy: 0.9737 - val_loss: 4.0331 - val_accuracy: 0.5042\n","\n","Epoch 00174: val_loss did not improve from 0.22847\n","Epoch 175/1000\n"," - 5s - loss: 0.0809 - accuracy: 0.9727 - val_loss: 3.4101 - val_accuracy: 0.4993\n","\n","Epoch 00175: val_loss did not improve from 0.22847\n","Epoch 176/1000\n"," - 5s - loss: 0.0767 - accuracy: 0.9747 - val_loss: 0.4856 - val_accuracy: 0.4958\n","\n","Epoch 00176: val_loss did not improve from 0.22847\n","Epoch 177/1000\n"," - 5s - loss: 0.0749 - accuracy: 0.9775 - val_loss: 3.7449 - val_accuracy: 0.4973\n","\n","Epoch 00177: val_loss did not improve from 0.22847\n","Epoch 178/1000\n"," - 5s - loss: 0.0782 - accuracy: 0.9747 - val_loss: 1.6181 - val_accuracy: 0.5155\n","\n","Epoch 00178: val_loss did not improve from 0.22847\n","Epoch 179/1000\n"," - 5s - loss: 0.0839 - accuracy: 0.9708 - val_loss: 2.7776 - val_accuracy: 0.4973\n","\n","Epoch 00179: val_loss did not improve from 0.22847\n","Epoch 180/1000\n"," - 5s - loss: 0.0771 - accuracy: 0.9741 - val_loss: 2.6872 - val_accuracy: 0.5091\n","\n","Epoch 00180: val_loss did not improve from 0.22847\n","Epoch 181/1000\n"," - 5s - loss: 0.0803 - accuracy: 0.9727 - val_loss: 1.1517 - val_accuracy: 0.4943\n","\n","Epoch 00181: val_loss did not improve from 0.22847\n","Epoch 182/1000\n"," - 5s - loss: 0.0736 - accuracy: 0.9787 - val_loss: 3.8179 - val_accuracy: 0.5062\n","\n","Epoch 00182: val_loss did not improve from 0.22847\n","Epoch 183/1000\n"," - 5s - loss: 0.0745 - accuracy: 0.9757 - val_loss: 1.9204 - val_accuracy: 0.4973\n","\n","Epoch 00183: val_loss did not improve from 0.22847\n","Epoch 184/1000\n"," - 5s - loss: 0.0756 - accuracy: 0.9765 - val_loss: 2.4610 - val_accuracy: 0.5052\n","\n","Epoch 00184: val_loss did not improve from 0.22847\n","Epoch 185/1000\n"," - 5s - loss: 0.0785 - accuracy: 0.9724 - val_loss: 2.1112 - val_accuracy: 0.5042\n","\n","Epoch 00185: val_loss did not improve from 0.22847\n","Epoch 186/1000\n"," - 5s - loss: 0.0821 - accuracy: 0.9727 - val_loss: 2.6338 - val_accuracy: 0.5047\n","\n","Epoch 00186: val_loss did not improve from 0.22847\n","Epoch 187/1000\n"," - 5s - loss: 0.0799 - accuracy: 0.9747 - val_loss: 1.5429 - val_accuracy: 0.5007\n","\n","Epoch 00187: val_loss did not improve from 0.22847\n","Epoch 188/1000\n"," - 5s - loss: 0.0737 - accuracy: 0.9754 - val_loss: 3.2973 - val_accuracy: 0.4988\n","\n","Epoch 00188: val_loss did not improve from 0.22847\n","Epoch 189/1000\n"," - 5s - loss: 0.0743 - accuracy: 0.9754 - val_loss: 2.1882 - val_accuracy: 0.5071\n","\n","Epoch 00189: val_loss did not improve from 0.22847\n","Epoch 190/1000\n"," - 5s - loss: 0.0711 - accuracy: 0.9778 - val_loss: 1.4066 - val_accuracy: 0.5047\n","\n","Epoch 00190: val_loss did not improve from 0.22847\n","Epoch 191/1000\n"," - 5s - loss: 0.0684 - accuracy: 0.9780 - val_loss: 2.9567 - val_accuracy: 0.5032\n","\n","Epoch 00191: val_loss did not improve from 0.22847\n","Epoch 192/1000\n"," - 5s - loss: 0.0777 - accuracy: 0.9742 - val_loss: 4.4540 - val_accuracy: 0.4909\n","\n","Epoch 00192: val_loss did not improve from 0.22847\n","Epoch 193/1000\n"," - 5s - loss: 0.0778 - accuracy: 0.9744 - val_loss: 2.5139 - val_accuracy: 0.5047\n","\n","Epoch 00193: val_loss did not improve from 0.22847\n","Epoch 194/1000\n"," - 5s - loss: 0.0736 - accuracy: 0.9770 - val_loss: 3.8468 - val_accuracy: 0.5047\n","\n","Epoch 00194: val_loss did not improve from 0.22847\n","Epoch 195/1000\n"," - 5s - loss: 0.0730 - accuracy: 0.9755 - val_loss: 3.7631 - val_accuracy: 0.4993\n","\n","Epoch 00195: val_loss did not improve from 0.22847\n","Epoch 196/1000\n"," - 5s - loss: 0.0665 - accuracy: 0.9813 - val_loss: 3.1677 - val_accuracy: 0.5057\n","\n","Epoch 00196: val_loss did not improve from 0.22847\n","Epoch 197/1000\n"," - 5s - loss: 0.0727 - accuracy: 0.9773 - val_loss: 5.2769 - val_accuracy: 0.5066\n","\n","Epoch 00197: val_loss did not improve from 0.22847\n","Epoch 198/1000\n"," - 5s - loss: 0.0733 - accuracy: 0.9757 - val_loss: 2.2646 - val_accuracy: 0.5071\n","\n","Epoch 00198: val_loss did not improve from 0.22847\n","Epoch 199/1000\n"," - 5s - loss: 0.0695 - accuracy: 0.9755 - val_loss: 3.4979 - val_accuracy: 0.5062\n","\n","Epoch 00199: val_loss did not improve from 0.22847\n","Epoch 200/1000\n"," - 5s - loss: 0.0697 - accuracy: 0.9764 - val_loss: 2.3584 - val_accuracy: 0.4993\n","\n","Epoch 00200: val_loss did not improve from 0.22847\n","Epoch 201/1000\n"," - 5s - loss: 0.0772 - accuracy: 0.9716 - val_loss: 3.6549 - val_accuracy: 0.5086\n","\n","Epoch 00201: val_loss did not improve from 0.22847\n","Epoch 202/1000\n"," - 5s - loss: 0.0690 - accuracy: 0.9782 - val_loss: 3.0943 - val_accuracy: 0.5160\n","\n","Epoch 00202: val_loss did not improve from 0.22847\n","Epoch 203/1000\n"," - 5s - loss: 0.0689 - accuracy: 0.9785 - val_loss: 1.2383 - val_accuracy: 0.5219\n","\n","Epoch 00203: val_loss did not improve from 0.22847\n","Epoch 204/1000\n"," - 5s - loss: 0.0709 - accuracy: 0.9765 - val_loss: 2.7143 - val_accuracy: 0.5170\n","\n","Epoch 00204: val_loss did not improve from 0.22847\n","Epoch 205/1000\n"," - 5s - loss: 0.0713 - accuracy: 0.9757 - val_loss: 1.1852 - val_accuracy: 0.5101\n","\n","Epoch 00205: val_loss did not improve from 0.22847\n","Epoch 206/1000\n"," - 5s - loss: 0.0669 - accuracy: 0.9793 - val_loss: 2.7495 - val_accuracy: 0.5096\n","\n","Epoch 00206: val_loss did not improve from 0.22847\n","Epoch 207/1000\n"," - 5s - loss: 0.0705 - accuracy: 0.9775 - val_loss: 1.6385 - val_accuracy: 0.5091\n","\n","Epoch 00207: val_loss did not improve from 0.22847\n","Epoch 208/1000\n"," - 5s - loss: 0.0635 - accuracy: 0.9798 - val_loss: 1.8146 - val_accuracy: 0.5047\n","\n","Epoch 00208: val_loss did not improve from 0.22847\n","Epoch 209/1000\n"," - 5s - loss: 0.0657 - accuracy: 0.9801 - val_loss: 3.8316 - val_accuracy: 0.5145\n","\n","Epoch 00209: val_loss did not improve from 0.22847\n","Epoch 210/1000\n"," - 5s - loss: 0.0693 - accuracy: 0.9770 - val_loss: 2.9806 - val_accuracy: 0.5096\n","\n","Epoch 00210: val_loss did not improve from 0.22847\n","Epoch 211/1000\n"," - 5s - loss: 0.0621 - accuracy: 0.9811 - val_loss: 3.3449 - val_accuracy: 0.5032\n","\n","Epoch 00211: val_loss did not improve from 0.22847\n","Epoch 212/1000\n"," - 5s - loss: 0.0660 - accuracy: 0.9800 - val_loss: 3.5532 - val_accuracy: 0.5081\n","\n","Epoch 00212: val_loss did not improve from 0.22847\n","Epoch 213/1000\n"," - 5s - loss: 0.0639 - accuracy: 0.9791 - val_loss: 1.1148 - val_accuracy: 0.5066\n","\n","Epoch 00213: val_loss did not improve from 0.22847\n","Epoch 214/1000\n"," - 5s - loss: 0.0642 - accuracy: 0.9785 - val_loss: 2.9340 - val_accuracy: 0.5062\n","\n","Epoch 00214: val_loss did not improve from 0.22847\n","Epoch 215/1000\n"," - 5s - loss: 0.0598 - accuracy: 0.9819 - val_loss: 3.3627 - val_accuracy: 0.5135\n","\n","Epoch 00215: val_loss did not improve from 0.22847\n","Epoch 216/1000\n"," - 5s - loss: 0.0648 - accuracy: 0.9793 - val_loss: 3.6197 - val_accuracy: 0.5076\n","\n","Epoch 00216: val_loss did not improve from 0.22847\n","Epoch 217/1000\n"," - 5s - loss: 0.0675 - accuracy: 0.9780 - val_loss: 4.3905 - val_accuracy: 0.5096\n","\n","Epoch 00217: val_loss did not improve from 0.22847\n","Epoch 218/1000\n"," - 5s - loss: 0.0660 - accuracy: 0.9795 - val_loss: 1.5136 - val_accuracy: 0.5130\n","\n","Epoch 00218: val_loss did not improve from 0.22847\n","Epoch 219/1000\n"," - 5s - loss: 0.0650 - accuracy: 0.9796 - val_loss: 3.0522 - val_accuracy: 0.5101\n","\n","Epoch 00219: val_loss did not improve from 0.22847\n","Epoch 220/1000\n"," - 5s - loss: 0.0642 - accuracy: 0.9813 - val_loss: 5.4983 - val_accuracy: 0.5076\n","\n","Epoch 00220: val_loss did not improve from 0.22847\n","Epoch 221/1000\n"," - 5s - loss: 0.0610 - accuracy: 0.9833 - val_loss: 3.2306 - val_accuracy: 0.5057\n","\n","Epoch 00221: val_loss did not improve from 0.22847\n","Epoch 222/1000\n"," - 5s - loss: 0.0568 - accuracy: 0.9854 - val_loss: 2.6804 - val_accuracy: 0.5012\n","\n","Epoch 00222: val_loss did not improve from 0.22847\n","Epoch 223/1000\n"," - 5s - loss: 0.0636 - accuracy: 0.9795 - val_loss: 2.8277 - val_accuracy: 0.5106\n","\n","Epoch 00223: val_loss did not improve from 0.22847\n","Epoch 224/1000\n"," - 5s - loss: 0.0558 - accuracy: 0.9849 - val_loss: 2.5869 - val_accuracy: 0.5106\n","\n","Epoch 00224: val_loss did not improve from 0.22847\n","Epoch 225/1000\n"," - 5s - loss: 0.0610 - accuracy: 0.9828 - val_loss: 2.9447 - val_accuracy: 0.5066\n","\n","Epoch 00225: val_loss did not improve from 0.22847\n","Epoch 226/1000\n"," - 5s - loss: 0.0598 - accuracy: 0.9829 - val_loss: 0.5802 - val_accuracy: 0.4998\n","\n","Epoch 00226: val_loss did not improve from 0.22847\n","Epoch 227/1000\n"," - 5s - loss: 0.0608 - accuracy: 0.9798 - val_loss: 2.1678 - val_accuracy: 0.5101\n","\n","Epoch 00227: val_loss did not improve from 0.22847\n","Epoch 228/1000\n"," - 5s - loss: 0.0639 - accuracy: 0.9810 - val_loss: 3.6030 - val_accuracy: 0.5106\n","\n","Epoch 00228: val_loss did not improve from 0.22847\n","Epoch 229/1000\n"," - 5s - loss: 0.0643 - accuracy: 0.9803 - val_loss: 3.8855 - val_accuracy: 0.5086\n","\n","Epoch 00229: val_loss did not improve from 0.22847\n","Epoch 230/1000\n"," - 5s - loss: 0.0640 - accuracy: 0.9796 - val_loss: 1.6379 - val_accuracy: 0.5175\n","\n","Epoch 00230: val_loss did not improve from 0.22847\n","Epoch 231/1000\n"," - 5s - loss: 0.0599 - accuracy: 0.9814 - val_loss: 3.5411 - val_accuracy: 0.4998\n","\n","Epoch 00231: val_loss did not improve from 0.22847\n","Epoch 232/1000\n"," - 5s - loss: 0.0581 - accuracy: 0.9834 - val_loss: 4.0388 - val_accuracy: 0.5071\n","\n","Epoch 00232: val_loss did not improve from 0.22847\n","Epoch 233/1000\n"," - 5s - loss: 0.0596 - accuracy: 0.9814 - val_loss: 4.5103 - val_accuracy: 0.5091\n","\n","Epoch 00233: val_loss did not improve from 0.22847\n","Epoch 234/1000\n"," - 5s - loss: 0.0622 - accuracy: 0.9808 - val_loss: 3.6891 - val_accuracy: 0.5160\n","\n","Epoch 00234: val_loss did not improve from 0.22847\n","Epoch 235/1000\n"," - 5s - loss: 0.0511 - accuracy: 0.9874 - val_loss: 2.0109 - val_accuracy: 0.5012\n","\n","Epoch 00235: val_loss did not improve from 0.22847\n","Epoch 236/1000\n"," - 5s - loss: 0.0533 - accuracy: 0.9851 - val_loss: 3.0771 - val_accuracy: 0.5096\n","\n","Epoch 00236: val_loss did not improve from 0.22847\n","Epoch 237/1000\n"," - 5s - loss: 0.0583 - accuracy: 0.9824 - val_loss: 1.4593 - val_accuracy: 0.5135\n","\n","Epoch 00237: val_loss did not improve from 0.22847\n","Epoch 238/1000\n"," - 5s - loss: 0.0610 - accuracy: 0.9813 - val_loss: 2.5205 - val_accuracy: 0.5071\n","\n","Epoch 00238: val_loss did not improve from 0.22847\n","Epoch 239/1000\n"," - 5s - loss: 0.0570 - accuracy: 0.9842 - val_loss: 3.0145 - val_accuracy: 0.5116\n","\n","Epoch 00239: val_loss did not improve from 0.22847\n","Epoch 240/1000\n"," - 5s - loss: 0.0570 - accuracy: 0.9831 - val_loss: 1.8077 - val_accuracy: 0.5130\n","\n","Epoch 00240: val_loss did not improve from 0.22847\n","Epoch 241/1000\n"," - 5s - loss: 0.0560 - accuracy: 0.9839 - val_loss: 3.6522 - val_accuracy: 0.5091\n","\n","Epoch 00241: val_loss did not improve from 0.22847\n","Epoch 242/1000\n"," - 5s - loss: 0.0628 - accuracy: 0.9796 - val_loss: 3.2397 - val_accuracy: 0.5165\n","\n","Epoch 00242: val_loss did not improve from 0.22847\n","Epoch 243/1000\n"," - 5s - loss: 0.0571 - accuracy: 0.9831 - val_loss: 3.6547 - val_accuracy: 0.5017\n","\n","Epoch 00243: val_loss did not improve from 0.22847\n","Epoch 244/1000\n"," - 5s - loss: 0.0581 - accuracy: 0.9834 - val_loss: 5.0074 - val_accuracy: 0.5096\n","\n","Epoch 00244: val_loss did not improve from 0.22847\n","Epoch 245/1000\n"," - 5s - loss: 0.0547 - accuracy: 0.9813 - val_loss: 4.9008 - val_accuracy: 0.5106\n","\n","Epoch 00245: val_loss did not improve from 0.22847\n","Epoch 246/1000\n"," - 5s - loss: 0.0526 - accuracy: 0.9839 - val_loss: 4.2226 - val_accuracy: 0.5130\n","\n","Epoch 00246: val_loss did not improve from 0.22847\n","Epoch 247/1000\n"," - 5s - loss: 0.0535 - accuracy: 0.9849 - val_loss: 2.2929 - val_accuracy: 0.5071\n","\n","Epoch 00247: val_loss did not improve from 0.22847\n","Epoch 248/1000\n"," - 5s - loss: 0.0550 - accuracy: 0.9841 - val_loss: 4.9884 - val_accuracy: 0.5062\n","\n","Epoch 00248: val_loss did not improve from 0.22847\n","Epoch 249/1000\n"," - 5s - loss: 0.0564 - accuracy: 0.9846 - val_loss: 3.4851 - val_accuracy: 0.5145\n","\n","Epoch 00249: val_loss did not improve from 0.22847\n","Epoch 250/1000\n"," - 5s - loss: 0.0587 - accuracy: 0.9814 - val_loss: 1.3867 - val_accuracy: 0.5086\n","\n","Epoch 00250: val_loss did not improve from 0.22847\n","Epoch 251/1000\n"," - 5s - loss: 0.0593 - accuracy: 0.9808 - val_loss: 3.0195 - val_accuracy: 0.5116\n","\n","Epoch 00251: val_loss did not improve from 0.22847\n","Epoch 252/1000\n"," - 5s - loss: 0.0563 - accuracy: 0.9833 - val_loss: 4.2804 - val_accuracy: 0.5116\n","\n","Epoch 00252: val_loss did not improve from 0.22847\n","Epoch 253/1000\n"," - 5s - loss: 0.0530 - accuracy: 0.9841 - val_loss: 3.1274 - val_accuracy: 0.5135\n","\n","Epoch 00253: val_loss did not improve from 0.22847\n","Epoch 254/1000\n"," - 5s - loss: 0.0527 - accuracy: 0.9851 - val_loss: 4.5433 - val_accuracy: 0.5071\n","\n","Epoch 00254: val_loss did not improve from 0.22847\n","Epoch 255/1000\n"," - 5s - loss: 0.0546 - accuracy: 0.9814 - val_loss: 1.7924 - val_accuracy: 0.5086\n","\n","Epoch 00255: val_loss did not improve from 0.22847\n","Epoch 256/1000\n"," - 5s - loss: 0.0513 - accuracy: 0.9829 - val_loss: 4.4103 - val_accuracy: 0.5101\n","\n","Epoch 00256: val_loss did not improve from 0.22847\n","Epoch 257/1000\n"," - 5s - loss: 0.0518 - accuracy: 0.9849 - val_loss: 1.9206 - val_accuracy: 0.5032\n","\n","Epoch 00257: val_loss did not improve from 0.22847\n","Epoch 258/1000\n"," - 5s - loss: 0.0562 - accuracy: 0.9806 - val_loss: 3.0589 - val_accuracy: 0.5047\n","\n","Epoch 00258: val_loss did not improve from 0.22847\n","Epoch 259/1000\n"," - 5s - loss: 0.0548 - accuracy: 0.9818 - val_loss: 2.2790 - val_accuracy: 0.5052\n","\n","Epoch 00259: val_loss did not improve from 0.22847\n","Epoch 260/1000\n"," - 5s - loss: 0.0512 - accuracy: 0.9837 - val_loss: 4.4017 - val_accuracy: 0.5052\n","\n","Epoch 00260: val_loss did not improve from 0.22847\n","Epoch 261/1000\n"," - 5s - loss: 0.0486 - accuracy: 0.9854 - val_loss: 3.2075 - val_accuracy: 0.5140\n","\n","Epoch 00261: val_loss did not improve from 0.22847\n","Epoch 262/1000\n"," - 5s - loss: 0.0528 - accuracy: 0.9860 - val_loss: 1.6838 - val_accuracy: 0.5081\n","\n","Epoch 00262: val_loss did not improve from 0.22847\n","Epoch 263/1000\n"," - 5s - loss: 0.0555 - accuracy: 0.9841 - val_loss: 3.9802 - val_accuracy: 0.5027\n","\n","Epoch 00263: val_loss did not improve from 0.22847\n","Epoch 264/1000\n"," - 5s - loss: 0.0525 - accuracy: 0.9829 - val_loss: 2.9460 - val_accuracy: 0.5140\n","\n","Epoch 00264: val_loss did not improve from 0.22847\n","Epoch 265/1000\n"," - 5s - loss: 0.0531 - accuracy: 0.9841 - val_loss: 2.5860 - val_accuracy: 0.5037\n","\n","Epoch 00265: val_loss did not improve from 0.22847\n","Epoch 266/1000\n"," - 5s - loss: 0.0513 - accuracy: 0.9856 - val_loss: 0.6622 - val_accuracy: 0.4998\n","\n","Epoch 00266: val_loss did not improve from 0.22847\n","Epoch 267/1000\n"," - 5s - loss: 0.0453 - accuracy: 0.9888 - val_loss: 3.4192 - val_accuracy: 0.5057\n","\n","Epoch 00267: val_loss did not improve from 0.22847\n","Epoch 268/1000\n"," - 5s - loss: 0.0491 - accuracy: 0.9849 - val_loss: 3.6840 - val_accuracy: 0.4978\n","\n","Epoch 00268: val_loss did not improve from 0.22847\n","Epoch 269/1000\n"," - 5s - loss: 0.0477 - accuracy: 0.9856 - val_loss: 2.7466 - val_accuracy: 0.4998\n","\n","Epoch 00269: val_loss did not improve from 0.22847\n","Epoch 270/1000\n"," - 5s - loss: 0.0509 - accuracy: 0.9833 - val_loss: 3.0063 - val_accuracy: 0.5042\n","\n","Epoch 00270: val_loss did not improve from 0.22847\n","Epoch 271/1000\n"," - 5s - loss: 0.0463 - accuracy: 0.9857 - val_loss: 5.4833 - val_accuracy: 0.4938\n","\n","Epoch 00271: val_loss did not improve from 0.22847\n","Epoch 272/1000\n"," - 5s - loss: 0.0523 - accuracy: 0.9841 - val_loss: 1.7402 - val_accuracy: 0.4958\n","\n","Epoch 00272: val_loss did not improve from 0.22847\n","Epoch 273/1000\n"," - 5s - loss: 0.0485 - accuracy: 0.9864 - val_loss: 1.8713 - val_accuracy: 0.5027\n","\n","Epoch 00273: val_loss did not improve from 0.22847\n","Epoch 274/1000\n"," - 5s - loss: 0.0511 - accuracy: 0.9839 - val_loss: 3.4372 - val_accuracy: 0.5062\n","\n","Epoch 00274: val_loss did not improve from 0.22847\n","Epoch 275/1000\n"," - 5s - loss: 0.0448 - accuracy: 0.9867 - val_loss: 4.7065 - val_accuracy: 0.5012\n","\n","Epoch 00275: val_loss did not improve from 0.22847\n","Epoch 276/1000\n"," - 5s - loss: 0.0466 - accuracy: 0.9874 - val_loss: 2.4512 - val_accuracy: 0.4998\n","\n","Epoch 00276: val_loss did not improve from 0.22847\n","Epoch 277/1000\n"," - 5s - loss: 0.0531 - accuracy: 0.9833 - val_loss: 4.4148 - val_accuracy: 0.5116\n","\n","Epoch 00277: val_loss did not improve from 0.22847\n","Epoch 278/1000\n"," - 5s - loss: 0.0533 - accuracy: 0.9816 - val_loss: 2.5414 - val_accuracy: 0.5160\n","\n","Epoch 00278: val_loss did not improve from 0.22847\n","Epoch 279/1000\n"," - 5s - loss: 0.0502 - accuracy: 0.9851 - val_loss: 2.2622 - val_accuracy: 0.5071\n","\n","Epoch 00279: val_loss did not improve from 0.22847\n","Epoch 280/1000\n"," - 5s - loss: 0.0458 - accuracy: 0.9874 - val_loss: 3.9638 - val_accuracy: 0.4958\n","\n","Epoch 00280: val_loss did not improve from 0.22847\n","Epoch 281/1000\n"," - 5s - loss: 0.0494 - accuracy: 0.9852 - val_loss: 1.8066 - val_accuracy: 0.4973\n","\n","Epoch 00281: val_loss did not improve from 0.22847\n","Epoch 282/1000\n"," - 5s - loss: 0.0488 - accuracy: 0.9864 - val_loss: 3.3578 - val_accuracy: 0.4993\n","\n","Epoch 00282: val_loss did not improve from 0.22847\n","Epoch 283/1000\n"," - 5s - loss: 0.0501 - accuracy: 0.9857 - val_loss: 4.9649 - val_accuracy: 0.5017\n","\n","Epoch 00283: val_loss did not improve from 0.22847\n","Epoch 284/1000\n"," - 5s - loss: 0.0497 - accuracy: 0.9836 - val_loss: 2.8245 - val_accuracy: 0.4968\n","\n","Epoch 00284: val_loss did not improve from 0.22847\n","Epoch 285/1000\n"," - 5s - loss: 0.0408 - accuracy: 0.9895 - val_loss: 2.0307 - val_accuracy: 0.4978\n","\n","Epoch 00285: val_loss did not improve from 0.22847\n","Epoch 286/1000\n"," - 5s - loss: 0.0428 - accuracy: 0.9892 - val_loss: 6.4661 - val_accuracy: 0.5071\n","\n","Epoch 00286: val_loss did not improve from 0.22847\n","Epoch 287/1000\n"," - 5s - loss: 0.0401 - accuracy: 0.9903 - val_loss: 5.7624 - val_accuracy: 0.5007\n","\n","Epoch 00287: val_loss did not improve from 0.22847\n","Epoch 288/1000\n"," - 5s - loss: 0.0462 - accuracy: 0.9864 - val_loss: 3.6319 - val_accuracy: 0.4978\n","\n","Epoch 00288: val_loss did not improve from 0.22847\n","Epoch 289/1000\n"," - 5s - loss: 0.0449 - accuracy: 0.9872 - val_loss: 2.4261 - val_accuracy: 0.5071\n","\n","Epoch 00289: val_loss did not improve from 0.22847\n","Epoch 290/1000\n"," - 5s - loss: 0.0484 - accuracy: 0.9847 - val_loss: 2.8195 - val_accuracy: 0.5037\n","\n","Epoch 00290: val_loss did not improve from 0.22847\n","Epoch 291/1000\n"," - 5s - loss: 0.0455 - accuracy: 0.9860 - val_loss: 4.5763 - val_accuracy: 0.4978\n","\n","Epoch 00291: val_loss did not improve from 0.22847\n","Epoch 292/1000\n"," - 5s - loss: 0.0469 - accuracy: 0.9859 - val_loss: 1.6001 - val_accuracy: 0.4978\n","\n","Epoch 00292: val_loss did not improve from 0.22847\n","Epoch 293/1000\n"," - 5s - loss: 0.0490 - accuracy: 0.9847 - val_loss: 5.0970 - val_accuracy: 0.5022\n","\n","Epoch 00293: val_loss did not improve from 0.22847\n","Epoch 294/1000\n"," - 5s - loss: 0.0453 - accuracy: 0.9865 - val_loss: 4.3704 - val_accuracy: 0.4963\n","\n","Epoch 00294: val_loss did not improve from 0.22847\n","Epoch 295/1000\n"," - 5s - loss: 0.0424 - accuracy: 0.9878 - val_loss: 4.3429 - val_accuracy: 0.4988\n","\n","Epoch 00295: val_loss did not improve from 0.22847\n","Epoch 296/1000\n"," - 5s - loss: 0.0399 - accuracy: 0.9885 - val_loss: 2.7382 - val_accuracy: 0.5017\n","\n","Epoch 00296: val_loss did not improve from 0.22847\n","Epoch 297/1000\n"," - 5s - loss: 0.0426 - accuracy: 0.9887 - val_loss: 2.8537 - val_accuracy: 0.5002\n","\n","Epoch 00297: val_loss did not improve from 0.22847\n","Epoch 298/1000\n"," - 5s - loss: 0.0460 - accuracy: 0.9865 - val_loss: 7.1168 - val_accuracy: 0.4958\n","\n","Epoch 00298: val_loss did not improve from 0.22847\n","Epoch 299/1000\n"," - 5s - loss: 0.0427 - accuracy: 0.9897 - val_loss: 2.0306 - val_accuracy: 0.4973\n","\n","Epoch 00299: val_loss did not improve from 0.22847\n","Epoch 300/1000\n"," - 5s - loss: 0.0453 - accuracy: 0.9882 - val_loss: 1.3820 - val_accuracy: 0.4870\n","\n","Epoch 00300: val_loss did not improve from 0.22847\n","Epoch 301/1000\n"," - 5s - loss: 0.0431 - accuracy: 0.9870 - val_loss: 2.2529 - val_accuracy: 0.5042\n","\n","Epoch 00301: val_loss did not improve from 0.22847\n","Epoch 302/1000\n"," - 5s - loss: 0.0379 - accuracy: 0.9900 - val_loss: 3.2199 - val_accuracy: 0.4929\n","\n","Epoch 00302: val_loss did not improve from 0.22847\n","Epoch 303/1000\n"," - 5s - loss: 0.0437 - accuracy: 0.9875 - val_loss: 4.4497 - val_accuracy: 0.4958\n","\n","Epoch 00303: val_loss did not improve from 0.22847\n","Epoch 304/1000\n"," - 5s - loss: 0.0482 - accuracy: 0.9856 - val_loss: 1.5988 - val_accuracy: 0.4953\n","\n","Epoch 00304: val_loss did not improve from 0.22847\n","Epoch 305/1000\n"," - 5s - loss: 0.0400 - accuracy: 0.9892 - val_loss: 3.1506 - val_accuracy: 0.5017\n","\n","Epoch 00305: val_loss did not improve from 0.22847\n","Epoch 306/1000\n"," - 5s - loss: 0.0402 - accuracy: 0.9883 - val_loss: 2.3553 - val_accuracy: 0.5027\n","\n","Epoch 00306: val_loss did not improve from 0.22847\n","Epoch 307/1000\n"," - 5s - loss: 0.0424 - accuracy: 0.9895 - val_loss: 4.7974 - val_accuracy: 0.4934\n","\n","Epoch 00307: val_loss did not improve from 0.22847\n","Epoch 308/1000\n"," - 5s - loss: 0.0401 - accuracy: 0.9882 - val_loss: 1.2235 - val_accuracy: 0.5081\n","\n","Epoch 00308: val_loss did not improve from 0.22847\n","Epoch 309/1000\n"," - 5s - loss: 0.0435 - accuracy: 0.9864 - val_loss: 4.7646 - val_accuracy: 0.5062\n","\n","Epoch 00309: val_loss did not improve from 0.22847\n","Epoch 310/1000\n"," - 5s - loss: 0.0437 - accuracy: 0.9870 - val_loss: 4.0858 - val_accuracy: 0.5022\n","\n","Epoch 00310: val_loss did not improve from 0.22847\n","Epoch 311/1000\n"," - 5s - loss: 0.0423 - accuracy: 0.9857 - val_loss: 2.3845 - val_accuracy: 0.5047\n","\n","Epoch 00311: val_loss did not improve from 0.22847\n","Epoch 312/1000\n"," - 5s - loss: 0.0427 - accuracy: 0.9880 - val_loss: 4.4053 - val_accuracy: 0.5071\n","\n","Epoch 00312: val_loss did not improve from 0.22847\n","Epoch 313/1000\n"," - 5s - loss: 0.0409 - accuracy: 0.9864 - val_loss: 2.6542 - val_accuracy: 0.5071\n","\n","Epoch 00313: val_loss did not improve from 0.22847\n","Epoch 314/1000\n"," - 5s - loss: 0.0401 - accuracy: 0.9898 - val_loss: 2.3025 - val_accuracy: 0.5106\n","\n","Epoch 00314: val_loss did not improve from 0.22847\n","Epoch 315/1000\n"," - 5s - loss: 0.0384 - accuracy: 0.9905 - val_loss: 4.3011 - val_accuracy: 0.5057\n","\n","Epoch 00315: val_loss did not improve from 0.22847\n","Epoch 316/1000\n"," - 5s - loss: 0.0455 - accuracy: 0.9865 - val_loss: 2.0889 - val_accuracy: 0.5052\n","\n","Epoch 00316: val_loss did not improve from 0.22847\n","Epoch 317/1000\n"," - 5s - loss: 0.0437 - accuracy: 0.9867 - val_loss: 2.6838 - val_accuracy: 0.4973\n","\n","Epoch 00317: val_loss did not improve from 0.22847\n","Epoch 318/1000\n"," - 5s - loss: 0.0423 - accuracy: 0.9882 - val_loss: 2.7562 - val_accuracy: 0.5037\n","\n","Epoch 00318: val_loss did not improve from 0.22847\n","Epoch 319/1000\n"," - 5s - loss: 0.0439 - accuracy: 0.9883 - val_loss: 5.3421 - val_accuracy: 0.5150\n","\n","Epoch 00319: val_loss did not improve from 0.22847\n","Epoch 320/1000\n"," - 5s - loss: 0.0394 - accuracy: 0.9878 - val_loss: 1.3439 - val_accuracy: 0.5076\n","\n","Epoch 00320: val_loss did not improve from 0.22847\n","Epoch 321/1000\n"," - 5s - loss: 0.0374 - accuracy: 0.9910 - val_loss: 2.9687 - val_accuracy: 0.5057\n","\n","Epoch 00321: val_loss did not improve from 0.22847\n","Epoch 322/1000\n"," - 5s - loss: 0.0346 - accuracy: 0.9921 - val_loss: 3.9612 - val_accuracy: 0.5037\n","\n","Epoch 00322: val_loss did not improve from 0.22847\n","Epoch 323/1000\n"," - 5s - loss: 0.0407 - accuracy: 0.9870 - val_loss: 1.5021 - val_accuracy: 0.5071\n","\n","Epoch 00323: val_loss did not improve from 0.22847\n","Epoch 324/1000\n"," - 5s - loss: 0.0424 - accuracy: 0.9883 - val_loss: 4.1519 - val_accuracy: 0.5111\n","\n","Epoch 00324: val_loss did not improve from 0.22847\n","Epoch 325/1000\n"," - 5s - loss: 0.0378 - accuracy: 0.9910 - val_loss: 2.7414 - val_accuracy: 0.5066\n","\n","Epoch 00325: val_loss did not improve from 0.22847\n","Epoch 326/1000\n"," - 5s - loss: 0.0459 - accuracy: 0.9860 - val_loss: 6.1361 - val_accuracy: 0.5052\n","\n","Epoch 00326: val_loss did not improve from 0.22847\n","Epoch 327/1000\n"," - 5s - loss: 0.0363 - accuracy: 0.9911 - val_loss: 2.1245 - val_accuracy: 0.4993\n","\n","Epoch 00327: val_loss did not improve from 0.22847\n","Epoch 328/1000\n"," - 5s - loss: 0.0401 - accuracy: 0.9869 - val_loss: 2.2915 - val_accuracy: 0.4988\n","\n","Epoch 00328: val_loss did not improve from 0.22847\n","Epoch 329/1000\n"," - 5s - loss: 0.0368 - accuracy: 0.9895 - val_loss: 4.6782 - val_accuracy: 0.4978\n","\n","Epoch 00329: val_loss did not improve from 0.22847\n","Epoch 330/1000\n"," - 5s - loss: 0.0366 - accuracy: 0.9910 - val_loss: 2.0323 - val_accuracy: 0.5066\n","\n","Epoch 00330: val_loss did not improve from 0.22847\n","Epoch 331/1000\n"," - 5s - loss: 0.0319 - accuracy: 0.9923 - val_loss: 6.2587 - val_accuracy: 0.5062\n","\n","Epoch 00331: val_loss did not improve from 0.22847\n","Epoch 332/1000\n"," - 5s - loss: 0.0400 - accuracy: 0.9870 - val_loss: 2.8497 - val_accuracy: 0.5032\n","\n","Epoch 00332: val_loss did not improve from 0.22847\n","Epoch 333/1000\n"," - 5s - loss: 0.0339 - accuracy: 0.9929 - val_loss: 2.0751 - val_accuracy: 0.5047\n","\n","Epoch 00333: val_loss did not improve from 0.22847\n","Epoch 334/1000\n"," - 5s - loss: 0.0394 - accuracy: 0.9880 - val_loss: 1.1901 - val_accuracy: 0.5071\n","\n","Epoch 00334: val_loss did not improve from 0.22847\n","Epoch 335/1000\n"," - 5s - loss: 0.0387 - accuracy: 0.9897 - val_loss: 4.7339 - val_accuracy: 0.5062\n","\n","Epoch 00335: val_loss did not improve from 0.22847\n","Epoch 336/1000\n"," - 5s - loss: 0.0415 - accuracy: 0.9878 - val_loss: 3.8220 - val_accuracy: 0.5062\n","\n","Epoch 00336: val_loss did not improve from 0.22847\n","Epoch 337/1000\n"," - 5s - loss: 0.0370 - accuracy: 0.9901 - val_loss: 4.4461 - val_accuracy: 0.5091\n","\n","Epoch 00337: val_loss did not improve from 0.22847\n","Epoch 338/1000\n"," - 5s - loss: 0.0358 - accuracy: 0.9913 - val_loss: 5.1541 - val_accuracy: 0.5106\n","\n","Epoch 00338: val_loss did not improve from 0.22847\n","Epoch 339/1000\n"," - 5s - loss: 0.0360 - accuracy: 0.9903 - val_loss: 3.1183 - val_accuracy: 0.5017\n","\n","Epoch 00339: val_loss did not improve from 0.22847\n","Epoch 340/1000\n"," - 5s - loss: 0.0312 - accuracy: 0.9926 - val_loss: 2.3250 - val_accuracy: 0.5135\n","\n","Epoch 00340: val_loss did not improve from 0.22847\n","Epoch 341/1000\n"," - 5s - loss: 0.0393 - accuracy: 0.9901 - val_loss: 2.8522 - val_accuracy: 0.5062\n","\n","Epoch 00341: val_loss did not improve from 0.22847\n","Epoch 342/1000\n"," - 5s - loss: 0.0400 - accuracy: 0.9885 - val_loss: 3.5897 - val_accuracy: 0.5066\n","\n","Epoch 00342: val_loss did not improve from 0.22847\n","Epoch 343/1000\n"," - 5s - loss: 0.0396 - accuracy: 0.9885 - val_loss: 6.6108 - val_accuracy: 0.5126\n","\n","Epoch 00343: val_loss did not improve from 0.22847\n","Epoch 344/1000\n"," - 5s - loss: 0.0388 - accuracy: 0.9890 - val_loss: 1.3307 - val_accuracy: 0.5052\n","\n","Epoch 00344: val_loss did not improve from 0.22847\n","Epoch 345/1000\n"," - 5s - loss: 0.0398 - accuracy: 0.9882 - val_loss: 1.8049 - val_accuracy: 0.5081\n","\n","Epoch 00345: val_loss did not improve from 0.22847\n","Epoch 346/1000\n"," - 5s - loss: 0.0313 - accuracy: 0.9918 - val_loss: 2.1423 - val_accuracy: 0.5204\n","\n","Epoch 00346: val_loss did not improve from 0.22847\n","Epoch 347/1000\n"," - 5s - loss: 0.0355 - accuracy: 0.9901 - val_loss: 2.8210 - val_accuracy: 0.5150\n","\n","Epoch 00347: val_loss did not improve from 0.22847\n","Epoch 348/1000\n"," - 5s - loss: 0.0370 - accuracy: 0.9888 - val_loss: 5.5437 - val_accuracy: 0.5081\n","\n","Epoch 00348: val_loss did not improve from 0.22847\n","Epoch 349/1000\n"," - 5s - loss: 0.0355 - accuracy: 0.9913 - val_loss: 6.8778 - val_accuracy: 0.5150\n","\n","Epoch 00349: val_loss did not improve from 0.22847\n","Epoch 350/1000\n"," - 5s - loss: 0.0297 - accuracy: 0.9920 - val_loss: 3.1490 - val_accuracy: 0.5126\n","\n","Epoch 00350: val_loss did not improve from 0.22847\n","Epoch 351/1000\n"," - 5s - loss: 0.0341 - accuracy: 0.9898 - val_loss: 2.7242 - val_accuracy: 0.5121\n","\n","Epoch 00351: val_loss did not improve from 0.22847\n","Epoch 352/1000\n"," - 5s - loss: 0.0311 - accuracy: 0.9928 - val_loss: 4.0789 - val_accuracy: 0.5111\n","\n","Epoch 00352: val_loss did not improve from 0.22847\n","Epoch 353/1000\n"," - 5s - loss: 0.0313 - accuracy: 0.9921 - val_loss: 2.5093 - val_accuracy: 0.5135\n","\n","Epoch 00353: val_loss did not improve from 0.22847\n","Epoch 354/1000\n"," - 5s - loss: 0.0365 - accuracy: 0.9903 - val_loss: 4.3268 - val_accuracy: 0.4983\n","\n","Epoch 00354: val_loss did not improve from 0.22847\n","Epoch 355/1000\n"," - 5s - loss: 0.0368 - accuracy: 0.9892 - val_loss: 6.2143 - val_accuracy: 0.5091\n","\n","Epoch 00355: val_loss did not improve from 0.22847\n","Epoch 356/1000\n"," - 5s - loss: 0.0351 - accuracy: 0.9905 - val_loss: 4.4632 - val_accuracy: 0.5190\n","\n","Epoch 00356: val_loss did not improve from 0.22847\n","Epoch 357/1000\n"," - 5s - loss: 0.0325 - accuracy: 0.9916 - val_loss: 1.5207 - val_accuracy: 0.5106\n","\n","Epoch 00357: val_loss did not improve from 0.22847\n","Epoch 358/1000\n"," - 5s - loss: 0.0312 - accuracy: 0.9921 - val_loss: 3.7387 - val_accuracy: 0.5081\n","\n","Epoch 00358: val_loss did not improve from 0.22847\n","Epoch 359/1000\n"," - 5s - loss: 0.0308 - accuracy: 0.9916 - val_loss: 4.1540 - val_accuracy: 0.5091\n","\n","Epoch 00359: val_loss did not improve from 0.22847\n","Epoch 360/1000\n"," - 5s - loss: 0.0356 - accuracy: 0.9895 - val_loss: 5.9560 - val_accuracy: 0.5022\n","\n","Epoch 00360: val_loss did not improve from 0.22847\n","Epoch 361/1000\n"," - 5s - loss: 0.0343 - accuracy: 0.9915 - val_loss: 6.2011 - val_accuracy: 0.5057\n","\n","Epoch 00361: val_loss did not improve from 0.22847\n","Epoch 362/1000\n"," - 5s - loss: 0.0317 - accuracy: 0.9915 - val_loss: 1.9148 - val_accuracy: 0.5007\n","\n","Epoch 00362: val_loss did not improve from 0.22847\n","Epoch 363/1000\n"," - 5s - loss: 0.0332 - accuracy: 0.9898 - val_loss: 2.5101 - val_accuracy: 0.5175\n","\n","Epoch 00363: val_loss did not improve from 0.22847\n","Epoch 364/1000\n"," - 5s - loss: 0.0359 - accuracy: 0.9885 - val_loss: 3.0771 - val_accuracy: 0.5101\n","\n","Epoch 00364: val_loss did not improve from 0.22847\n","Epoch 365/1000\n"," - 5s - loss: 0.0366 - accuracy: 0.9897 - val_loss: 2.4746 - val_accuracy: 0.5130\n","\n","Epoch 00365: val_loss did not improve from 0.22847\n","Epoch 366/1000\n"," - 5s - loss: 0.0333 - accuracy: 0.9901 - val_loss: 2.7438 - val_accuracy: 0.5140\n","\n","Epoch 00366: val_loss did not improve from 0.22847\n","Epoch 367/1000\n"," - 5s - loss: 0.0329 - accuracy: 0.9921 - val_loss: 4.7873 - val_accuracy: 0.5116\n","\n","Epoch 00367: val_loss did not improve from 0.22847\n","Epoch 368/1000\n"," - 5s - loss: 0.0336 - accuracy: 0.9901 - val_loss: 4.3992 - val_accuracy: 0.5052\n","\n","Epoch 00368: val_loss did not improve from 0.22847\n","Epoch 369/1000\n"," - 5s - loss: 0.0312 - accuracy: 0.9915 - val_loss: 2.7057 - val_accuracy: 0.5047\n","\n","Epoch 00369: val_loss did not improve from 0.22847\n","Epoch 370/1000\n"," - 5s - loss: 0.0321 - accuracy: 0.9906 - val_loss: 3.9013 - val_accuracy: 0.4988\n","\n","Epoch 00370: val_loss did not improve from 0.22847\n","Epoch 371/1000\n"," - 5s - loss: 0.0339 - accuracy: 0.9908 - val_loss: 6.1578 - val_accuracy: 0.5106\n","\n","Epoch 00371: val_loss did not improve from 0.22847\n","Epoch 372/1000\n"," - 5s - loss: 0.0326 - accuracy: 0.9916 - val_loss: 4.6732 - val_accuracy: 0.5042\n","\n","Epoch 00372: val_loss did not improve from 0.22847\n","Epoch 373/1000\n"," - 5s - loss: 0.0278 - accuracy: 0.9938 - val_loss: 2.5574 - val_accuracy: 0.5057\n","\n","Epoch 00373: val_loss did not improve from 0.22847\n","Epoch 374/1000\n"," - 5s - loss: 0.0295 - accuracy: 0.9924 - val_loss: 2.4051 - val_accuracy: 0.5017\n","\n","Epoch 00374: val_loss did not improve from 0.22847\n","Epoch 375/1000\n"," - 5s - loss: 0.0313 - accuracy: 0.9916 - val_loss: 4.8818 - val_accuracy: 0.5047\n","\n","Epoch 00375: val_loss did not improve from 0.22847\n","Epoch 376/1000\n"," - 5s - loss: 0.0330 - accuracy: 0.9910 - val_loss: 3.6271 - val_accuracy: 0.5086\n","\n","Epoch 00376: val_loss did not improve from 0.22847\n","Epoch 377/1000\n"," - 5s - loss: 0.0286 - accuracy: 0.9929 - val_loss: 5.0702 - val_accuracy: 0.5071\n","\n","Epoch 00377: val_loss did not improve from 0.22847\n","Epoch 378/1000\n"," - 5s - loss: 0.0339 - accuracy: 0.9901 - val_loss: 4.3104 - val_accuracy: 0.4929\n","\n","Epoch 00378: val_loss did not improve from 0.22847\n","Epoch 379/1000\n"," - 5s - loss: 0.0343 - accuracy: 0.9901 - val_loss: 6.7176 - val_accuracy: 0.5032\n","\n","Epoch 00379: val_loss did not improve from 0.22847\n","Epoch 380/1000\n"," - 5s - loss: 0.0306 - accuracy: 0.9915 - val_loss: 3.6850 - val_accuracy: 0.5096\n","\n","Epoch 00380: val_loss did not improve from 0.22847\n","Epoch 381/1000\n"," - 5s - loss: 0.0322 - accuracy: 0.9910 - val_loss: 1.7913 - val_accuracy: 0.4968\n","\n","Epoch 00381: val_loss did not improve from 0.22847\n","Epoch 382/1000\n"," - 5s - loss: 0.0335 - accuracy: 0.9901 - val_loss: 4.3004 - val_accuracy: 0.5042\n","\n","Epoch 00382: val_loss did not improve from 0.22847\n","Epoch 383/1000\n"," - 5s - loss: 0.0315 - accuracy: 0.9905 - val_loss: 4.9922 - val_accuracy: 0.5022\n","\n","Epoch 00383: val_loss did not improve from 0.22847\n","Epoch 384/1000\n"," - 5s - loss: 0.0297 - accuracy: 0.9923 - val_loss: 5.1267 - val_accuracy: 0.5037\n","\n","Epoch 00384: val_loss did not improve from 0.22847\n","Epoch 385/1000\n"," - 5s - loss: 0.0296 - accuracy: 0.9911 - val_loss: 2.3524 - val_accuracy: 0.5160\n","\n","Epoch 00385: val_loss did not improve from 0.22847\n","Epoch 386/1000\n"," - 5s - loss: 0.0260 - accuracy: 0.9928 - val_loss: 4.6259 - val_accuracy: 0.5130\n","\n","Epoch 00386: val_loss did not improve from 0.22847\n","Epoch 387/1000\n"," - 5s - loss: 0.0287 - accuracy: 0.9915 - val_loss: 1.9953 - val_accuracy: 0.5121\n","\n","Epoch 00387: val_loss did not improve from 0.22847\n","Epoch 388/1000\n"," - 5s - loss: 0.0301 - accuracy: 0.9910 - val_loss: 1.7263 - val_accuracy: 0.5022\n","\n","Epoch 00388: val_loss did not improve from 0.22847\n","Epoch 389/1000\n"," - 5s - loss: 0.0312 - accuracy: 0.9901 - val_loss: 3.2706 - val_accuracy: 0.5071\n","\n","Epoch 00389: val_loss did not improve from 0.22847\n","Epoch 390/1000\n"," - 5s - loss: 0.0313 - accuracy: 0.9915 - val_loss: 2.7593 - val_accuracy: 0.5071\n","\n","Epoch 00390: val_loss did not improve from 0.22847\n","Epoch 391/1000\n"," - 5s - loss: 0.0291 - accuracy: 0.9931 - val_loss: 4.4664 - val_accuracy: 0.5007\n","\n","Epoch 00391: val_loss did not improve from 0.22847\n","Epoch 392/1000\n"," - 5s - loss: 0.0311 - accuracy: 0.9920 - val_loss: 5.1113 - val_accuracy: 0.5052\n","\n","Epoch 00392: val_loss did not improve from 0.22847\n","Epoch 393/1000\n"," - 5s - loss: 0.0311 - accuracy: 0.9910 - val_loss: 1.1331 - val_accuracy: 0.4988\n","\n","Epoch 00393: val_loss did not improve from 0.22847\n","Epoch 394/1000\n"," - 5s - loss: 0.0275 - accuracy: 0.9928 - val_loss: 2.4866 - val_accuracy: 0.4968\n","\n","Epoch 00394: val_loss did not improve from 0.22847\n","Epoch 395/1000\n"," - 5s - loss: 0.0308 - accuracy: 0.9924 - val_loss: 1.7143 - val_accuracy: 0.5086\n","\n","Epoch 00395: val_loss did not improve from 0.22847\n","Epoch 396/1000\n"," - 5s - loss: 0.0294 - accuracy: 0.9923 - val_loss: 2.1015 - val_accuracy: 0.5071\n","\n","Epoch 00396: val_loss did not improve from 0.22847\n","Epoch 397/1000\n"," - 5s - loss: 0.0266 - accuracy: 0.9934 - val_loss: 6.0900 - val_accuracy: 0.5130\n","\n","Epoch 00397: val_loss did not improve from 0.22847\n","Epoch 398/1000\n"," - 5s - loss: 0.0289 - accuracy: 0.9933 - val_loss: 3.5819 - val_accuracy: 0.5170\n","\n","Epoch 00398: val_loss did not improve from 0.22847\n","Epoch 399/1000\n"," - 5s - loss: 0.0284 - accuracy: 0.9928 - val_loss: 3.5707 - val_accuracy: 0.5047\n","\n","Epoch 00399: val_loss did not improve from 0.22847\n","Epoch 400/1000\n"," - 5s - loss: 0.0279 - accuracy: 0.9916 - val_loss: 4.4095 - val_accuracy: 0.5066\n","\n","Epoch 00400: val_loss did not improve from 0.22847\n","Epoch 401/1000\n"," - 5s - loss: 0.0294 - accuracy: 0.9915 - val_loss: 6.3789 - val_accuracy: 0.5121\n","\n","Epoch 00401: val_loss did not improve from 0.22847\n","Epoch 402/1000\n"," - 5s - loss: 0.0297 - accuracy: 0.9918 - val_loss: 5.0220 - val_accuracy: 0.5057\n","\n","Epoch 00402: val_loss did not improve from 0.22847\n","Epoch 403/1000\n"," - 5s - loss: 0.0257 - accuracy: 0.9933 - val_loss: 1.5842 - val_accuracy: 0.4998\n","\n","Epoch 00403: val_loss did not improve from 0.22847\n","Epoch 404/1000\n"," - 5s - loss: 0.0316 - accuracy: 0.9905 - val_loss: 2.8649 - val_accuracy: 0.5096\n","\n","Epoch 00404: val_loss did not improve from 0.22847\n","Epoch 405/1000\n"," - 5s - loss: 0.0309 - accuracy: 0.9911 - val_loss: 5.1356 - val_accuracy: 0.5081\n","\n","Epoch 00405: val_loss did not improve from 0.22847\n","Epoch 406/1000\n"," - 5s - loss: 0.0298 - accuracy: 0.9923 - val_loss: 2.6393 - val_accuracy: 0.5042\n","\n","Epoch 00406: val_loss did not improve from 0.22847\n","Epoch 407/1000\n"," - 5s - loss: 0.0268 - accuracy: 0.9934 - val_loss: 4.0279 - val_accuracy: 0.5017\n","\n","Epoch 00407: val_loss did not improve from 0.22847\n","Epoch 408/1000\n"," - 5s - loss: 0.0284 - accuracy: 0.9924 - val_loss: 2.7728 - val_accuracy: 0.5066\n","\n","Epoch 00408: val_loss did not improve from 0.22847\n","Epoch 409/1000\n"," - 5s - loss: 0.0271 - accuracy: 0.9934 - val_loss: 7.0583 - val_accuracy: 0.5057\n","\n","Epoch 00409: val_loss did not improve from 0.22847\n","Epoch 410/1000\n"," - 5s - loss: 0.0297 - accuracy: 0.9926 - val_loss: 4.9857 - val_accuracy: 0.5101\n","\n","Epoch 00410: val_loss did not improve from 0.22847\n","Epoch 411/1000\n"," - 5s - loss: 0.0261 - accuracy: 0.9946 - val_loss: 7.2360 - val_accuracy: 0.5057\n","\n","Epoch 00411: val_loss did not improve from 0.22847\n","Epoch 412/1000\n"," - 5s - loss: 0.0271 - accuracy: 0.9924 - val_loss: 5.3256 - val_accuracy: 0.5175\n","\n","Epoch 00412: val_loss did not improve from 0.22847\n","Epoch 413/1000\n"," - 5s - loss: 0.0266 - accuracy: 0.9933 - val_loss: 3.4370 - val_accuracy: 0.5027\n","\n","Epoch 00413: val_loss did not improve from 0.22847\n","Epoch 414/1000\n"," - 5s - loss: 0.0289 - accuracy: 0.9915 - val_loss: 4.6501 - val_accuracy: 0.4958\n","\n","Epoch 00414: val_loss did not improve from 0.22847\n","Epoch 415/1000\n"," - 5s - loss: 0.0294 - accuracy: 0.9915 - val_loss: 4.7518 - val_accuracy: 0.5135\n","\n","Epoch 00415: val_loss did not improve from 0.22847\n","Epoch 416/1000\n"," - 5s - loss: 0.0284 - accuracy: 0.9923 - val_loss: 3.6076 - val_accuracy: 0.5017\n","\n","Epoch 00416: val_loss did not improve from 0.22847\n","Epoch 417/1000\n"," - 5s - loss: 0.0261 - accuracy: 0.9931 - val_loss: 5.3281 - val_accuracy: 0.5121\n","\n","Epoch 00417: val_loss did not improve from 0.22847\n","Epoch 418/1000\n"," - 5s - loss: 0.0269 - accuracy: 0.9944 - val_loss: 5.1032 - val_accuracy: 0.5101\n","\n","Epoch 00418: val_loss did not improve from 0.22847\n","Epoch 419/1000\n"," - 5s - loss: 0.0238 - accuracy: 0.9949 - val_loss: 3.7764 - val_accuracy: 0.5047\n","\n","Epoch 00419: val_loss did not improve from 0.22847\n","Epoch 420/1000\n"," - 5s - loss: 0.0256 - accuracy: 0.9939 - val_loss: 3.9510 - val_accuracy: 0.5017\n","\n","Epoch 00420: val_loss did not improve from 0.22847\n","Epoch 421/1000\n"," - 5s - loss: 0.0258 - accuracy: 0.9938 - val_loss: 4.2004 - val_accuracy: 0.5081\n","\n","Epoch 00421: val_loss did not improve from 0.22847\n","Epoch 422/1000\n"," - 5s - loss: 0.0265 - accuracy: 0.9933 - val_loss: 3.0516 - val_accuracy: 0.5121\n","\n","Epoch 00422: val_loss did not improve from 0.22847\n","Epoch 423/1000\n"," - 5s - loss: 0.0297 - accuracy: 0.9933 - val_loss: 3.9884 - val_accuracy: 0.4978\n","\n","Epoch 00423: val_loss did not improve from 0.22847\n","Epoch 424/1000\n"," - 5s - loss: 0.0277 - accuracy: 0.9931 - val_loss: 0.6668 - val_accuracy: 0.5106\n","\n","Epoch 00424: val_loss did not improve from 0.22847\n","Epoch 425/1000\n"," - 5s - loss: 0.0276 - accuracy: 0.9929 - val_loss: 0.9457 - val_accuracy: 0.5012\n","\n","Epoch 00425: val_loss did not improve from 0.22847\n","Epoch 426/1000\n"," - 5s - loss: 0.0242 - accuracy: 0.9929 - val_loss: 5.9408 - val_accuracy: 0.5155\n","\n","Epoch 00426: val_loss did not improve from 0.22847\n","Epoch 427/1000\n"," - 5s - loss: 0.0257 - accuracy: 0.9938 - val_loss: 2.7850 - val_accuracy: 0.5096\n","\n","Epoch 00427: val_loss did not improve from 0.22847\n","Epoch 428/1000\n"," - 5s - loss: 0.0263 - accuracy: 0.9928 - val_loss: 5.7458 - val_accuracy: 0.5081\n","\n","Epoch 00428: val_loss did not improve from 0.22847\n","Epoch 429/1000\n"," - 5s - loss: 0.0264 - accuracy: 0.9938 - val_loss: 4.8037 - val_accuracy: 0.5027\n","\n","Epoch 00429: val_loss did not improve from 0.22847\n","Epoch 430/1000\n"," - 5s - loss: 0.0273 - accuracy: 0.9929 - val_loss: 3.2831 - val_accuracy: 0.5086\n","\n","Epoch 00430: val_loss did not improve from 0.22847\n","Epoch 431/1000\n"," - 5s - loss: 0.0252 - accuracy: 0.9931 - val_loss: 4.0746 - val_accuracy: 0.4993\n","\n","Epoch 00431: val_loss did not improve from 0.22847\n","Epoch 432/1000\n"," - 5s - loss: 0.0257 - accuracy: 0.9924 - val_loss: 2.5526 - val_accuracy: 0.4924\n","\n","Epoch 00432: val_loss did not improve from 0.22847\n","Epoch 433/1000\n"," - 5s - loss: 0.0208 - accuracy: 0.9956 - val_loss: 5.1487 - val_accuracy: 0.5037\n","\n","Epoch 00433: val_loss did not improve from 0.22847\n","Epoch 434/1000\n"," - 5s - loss: 0.0265 - accuracy: 0.9941 - val_loss: 2.2039 - val_accuracy: 0.5086\n","\n","Epoch 00434: val_loss did not improve from 0.22847\n","Epoch 435/1000\n"," - 5s - loss: 0.0248 - accuracy: 0.9941 - val_loss: 1.2535 - val_accuracy: 0.5106\n","\n","Epoch 00435: val_loss did not improve from 0.22847\n","Epoch 436/1000\n"," - 5s - loss: 0.0261 - accuracy: 0.9934 - val_loss: 5.9601 - val_accuracy: 0.5086\n","\n","Epoch 00436: val_loss did not improve from 0.22847\n","Epoch 437/1000\n"," - 5s - loss: 0.0217 - accuracy: 0.9959 - val_loss: 2.3227 - val_accuracy: 0.4998\n","\n","Epoch 00437: val_loss did not improve from 0.22847\n","Epoch 438/1000\n"," - 5s - loss: 0.0214 - accuracy: 0.9957 - val_loss: 3.5955 - val_accuracy: 0.5062\n","\n","Epoch 00438: val_loss did not improve from 0.22847\n","Epoch 439/1000\n"," - 5s - loss: 0.0280 - accuracy: 0.9920 - val_loss: 5.7712 - val_accuracy: 0.5121\n","\n","Epoch 00439: val_loss did not improve from 0.22847\n","Epoch 440/1000\n"," - 5s - loss: 0.0254 - accuracy: 0.9936 - val_loss: 4.7793 - val_accuracy: 0.5062\n","\n","Epoch 00440: val_loss did not improve from 0.22847\n","Epoch 441/1000\n"," - 5s - loss: 0.0256 - accuracy: 0.9926 - val_loss: 4.6701 - val_accuracy: 0.4983\n","\n","Epoch 00441: val_loss did not improve from 0.22847\n","Epoch 442/1000\n"," - 5s - loss: 0.0269 - accuracy: 0.9928 - val_loss: 4.3658 - val_accuracy: 0.4953\n","\n","Epoch 00442: val_loss did not improve from 0.22847\n","Epoch 443/1000\n"," - 5s - loss: 0.0239 - accuracy: 0.9931 - val_loss: 3.2805 - val_accuracy: 0.5022\n","\n","Epoch 00443: val_loss did not improve from 0.22847\n","Epoch 444/1000\n"," - 5s - loss: 0.0238 - accuracy: 0.9944 - val_loss: 5.4319 - val_accuracy: 0.4934\n","\n","Epoch 00444: val_loss did not improve from 0.22847\n","Epoch 445/1000\n"," - 5s - loss: 0.0273 - accuracy: 0.9918 - val_loss: 3.4677 - val_accuracy: 0.4973\n","\n","Epoch 00445: val_loss did not improve from 0.22847\n","Epoch 446/1000\n"," - 5s - loss: 0.0218 - accuracy: 0.9951 - val_loss: 3.5693 - val_accuracy: 0.5052\n","\n","Epoch 00446: val_loss did not improve from 0.22847\n","Epoch 447/1000\n"," - 5s - loss: 0.0253 - accuracy: 0.9929 - val_loss: 5.0794 - val_accuracy: 0.5052\n","\n","Epoch 00447: val_loss did not improve from 0.22847\n","Epoch 448/1000\n"," - 5s - loss: 0.0255 - accuracy: 0.9933 - val_loss: 3.8822 - val_accuracy: 0.4993\n","\n","Epoch 00448: val_loss did not improve from 0.22847\n","Epoch 449/1000\n"," - 5s - loss: 0.0221 - accuracy: 0.9941 - val_loss: 5.4955 - val_accuracy: 0.5017\n","\n","Epoch 00449: val_loss did not improve from 0.22847\n","Epoch 450/1000\n"," - 5s - loss: 0.0207 - accuracy: 0.9954 - val_loss: 4.2259 - val_accuracy: 0.4993\n","\n","Epoch 00450: val_loss did not improve from 0.22847\n","Epoch 451/1000\n"," - 5s - loss: 0.0272 - accuracy: 0.9929 - val_loss: 2.4730 - val_accuracy: 0.5042\n","\n","Epoch 00451: val_loss did not improve from 0.22847\n","Epoch 452/1000\n"," - 5s - loss: 0.0224 - accuracy: 0.9947 - val_loss: 2.0597 - val_accuracy: 0.5022\n","\n","Epoch 00452: val_loss did not improve from 0.22847\n","Epoch 453/1000\n"," - 5s - loss: 0.0245 - accuracy: 0.9936 - val_loss: 2.6331 - val_accuracy: 0.5052\n","\n","Epoch 00453: val_loss did not improve from 0.22847\n","Epoch 454/1000\n"," - 5s - loss: 0.0196 - accuracy: 0.9954 - val_loss: 3.9956 - val_accuracy: 0.5032\n","\n","Epoch 00454: val_loss did not improve from 0.22847\n","Epoch 455/1000\n"," - 5s - loss: 0.0218 - accuracy: 0.9952 - val_loss: 3.3981 - val_accuracy: 0.5086\n","\n","Epoch 00455: val_loss did not improve from 0.22847\n","Epoch 456/1000\n"," - 5s - loss: 0.0224 - accuracy: 0.9944 - val_loss: 1.9437 - val_accuracy: 0.5096\n","\n","Epoch 00456: val_loss did not improve from 0.22847\n","Epoch 457/1000\n"," - 5s - loss: 0.0238 - accuracy: 0.9954 - val_loss: 3.9795 - val_accuracy: 0.5057\n","\n","Epoch 00457: val_loss did not improve from 0.22847\n","Epoch 458/1000\n"," - 5s - loss: 0.0238 - accuracy: 0.9939 - val_loss: 2.0942 - val_accuracy: 0.4998\n","\n","Epoch 00458: val_loss did not improve from 0.22847\n","Epoch 459/1000\n"," - 5s - loss: 0.0243 - accuracy: 0.9944 - val_loss: 2.6251 - val_accuracy: 0.5130\n","\n","Epoch 00459: val_loss did not improve from 0.22847\n","Epoch 460/1000\n"," - 5s - loss: 0.0221 - accuracy: 0.9957 - val_loss: 4.9118 - val_accuracy: 0.5106\n","\n","Epoch 00460: val_loss did not improve from 0.22847\n","Epoch 461/1000\n"," - 5s - loss: 0.0239 - accuracy: 0.9934 - val_loss: 5.6549 - val_accuracy: 0.5076\n","\n","Epoch 00461: val_loss did not improve from 0.22847\n","Epoch 462/1000\n"," - 5s - loss: 0.0209 - accuracy: 0.9947 - val_loss: 5.3282 - val_accuracy: 0.5062\n","\n","Epoch 00462: val_loss did not improve from 0.22847\n","Epoch 463/1000\n"," - 5s - loss: 0.0196 - accuracy: 0.9957 - val_loss: 4.2164 - val_accuracy: 0.4978\n","\n","Epoch 00463: val_loss did not improve from 0.22847\n","Epoch 464/1000\n"," - 5s - loss: 0.0226 - accuracy: 0.9949 - val_loss: 2.0690 - val_accuracy: 0.5111\n","\n","Epoch 00464: val_loss did not improve from 0.22847\n","Epoch 465/1000\n"," - 5s - loss: 0.0240 - accuracy: 0.9943 - val_loss: 3.2729 - val_accuracy: 0.4963\n","\n","Epoch 00465: val_loss did not improve from 0.22847\n","Epoch 466/1000\n"," - 5s - loss: 0.0220 - accuracy: 0.9949 - val_loss: 2.0418 - val_accuracy: 0.4993\n","\n","Epoch 00466: val_loss did not improve from 0.22847\n","Epoch 467/1000\n"," - 5s - loss: 0.0229 - accuracy: 0.9939 - val_loss: 2.1206 - val_accuracy: 0.5091\n","\n","Epoch 00467: val_loss did not improve from 0.22847\n","Epoch 468/1000\n"," - 5s - loss: 0.0178 - accuracy: 0.9969 - val_loss: 3.3589 - val_accuracy: 0.5027\n","\n","Epoch 00468: val_loss did not improve from 0.22847\n","Epoch 469/1000\n"," - 5s - loss: 0.0247 - accuracy: 0.9931 - val_loss: 8.2565 - val_accuracy: 0.5062\n","\n","Epoch 00469: val_loss did not improve from 0.22847\n","Epoch 470/1000\n"," - 5s - loss: 0.0241 - accuracy: 0.9936 - val_loss: 2.9819 - val_accuracy: 0.4973\n","\n","Epoch 00470: val_loss did not improve from 0.22847\n","Epoch 471/1000\n"," - 5s - loss: 0.0256 - accuracy: 0.9933 - val_loss: 3.1909 - val_accuracy: 0.5076\n","\n","Epoch 00471: val_loss did not improve from 0.22847\n","Epoch 472/1000\n"," - 5s - loss: 0.0224 - accuracy: 0.9944 - val_loss: 4.8928 - val_accuracy: 0.5052\n","\n","Epoch 00472: val_loss did not improve from 0.22847\n","Epoch 473/1000\n"," - 5s - loss: 0.0188 - accuracy: 0.9954 - val_loss: 2.4207 - val_accuracy: 0.5086\n","\n","Epoch 00473: val_loss did not improve from 0.22847\n","Epoch 474/1000\n"," - 5s - loss: 0.0236 - accuracy: 0.9933 - val_loss: 2.5560 - val_accuracy: 0.4998\n","\n","Epoch 00474: val_loss did not improve from 0.22847\n","Epoch 475/1000\n"," - 5s - loss: 0.0210 - accuracy: 0.9944 - val_loss: 4.3078 - val_accuracy: 0.4998\n","\n","Epoch 00475: val_loss did not improve from 0.22847\n","Epoch 476/1000\n"," - 5s - loss: 0.0213 - accuracy: 0.9946 - val_loss: 5.0810 - val_accuracy: 0.5062\n","\n","Epoch 00476: val_loss did not improve from 0.22847\n","Epoch 477/1000\n"," - 5s - loss: 0.0211 - accuracy: 0.9947 - val_loss: 4.1906 - val_accuracy: 0.5042\n","\n","Epoch 00477: val_loss did not improve from 0.22847\n","Epoch 478/1000\n"," - 5s - loss: 0.0206 - accuracy: 0.9946 - val_loss: 5.5786 - val_accuracy: 0.4948\n","\n","Epoch 00478: val_loss did not improve from 0.22847\n","Epoch 479/1000\n"," - 5s - loss: 0.0271 - accuracy: 0.9918 - val_loss: 4.4119 - val_accuracy: 0.4973\n","\n","Epoch 00479: val_loss did not improve from 0.22847\n","Epoch 480/1000\n"," - 5s - loss: 0.0225 - accuracy: 0.9951 - val_loss: 5.5597 - val_accuracy: 0.4998\n","\n","Epoch 00480: val_loss did not improve from 0.22847\n","Epoch 481/1000\n"," - 5s - loss: 0.0237 - accuracy: 0.9936 - val_loss: 6.2145 - val_accuracy: 0.5096\n","\n","Epoch 00481: val_loss did not improve from 0.22847\n","Epoch 482/1000\n"," - 5s - loss: 0.0223 - accuracy: 0.9944 - val_loss: 3.2036 - val_accuracy: 0.5111\n","\n","Epoch 00482: val_loss did not improve from 0.22847\n","Epoch 483/1000\n"," - 5s - loss: 0.0238 - accuracy: 0.9941 - val_loss: 4.9641 - val_accuracy: 0.4958\n","\n","Epoch 00483: val_loss did not improve from 0.22847\n","Epoch 484/1000\n"," - 5s - loss: 0.0196 - accuracy: 0.9957 - val_loss: 6.3572 - val_accuracy: 0.5037\n","\n","Epoch 00484: val_loss did not improve from 0.22847\n","Epoch 485/1000\n"," - 5s - loss: 0.0173 - accuracy: 0.9962 - val_loss: 2.1440 - val_accuracy: 0.5007\n","\n","Epoch 00485: val_loss did not improve from 0.22847\n","Epoch 486/1000\n"," - 5s - loss: 0.0217 - accuracy: 0.9939 - val_loss: 5.8507 - val_accuracy: 0.5032\n","\n","Epoch 00486: val_loss did not improve from 0.22847\n","Epoch 487/1000\n"," - 5s - loss: 0.0218 - accuracy: 0.9941 - val_loss: 6.6265 - val_accuracy: 0.5047\n","\n","Epoch 00487: val_loss did not improve from 0.22847\n","Epoch 488/1000\n"," - 5s - loss: 0.0208 - accuracy: 0.9951 - val_loss: 6.9952 - val_accuracy: 0.5066\n","\n","Epoch 00488: val_loss did not improve from 0.22847\n","Epoch 489/1000\n"," - 5s - loss: 0.0210 - accuracy: 0.9944 - val_loss: 2.2520 - val_accuracy: 0.4983\n","\n","Epoch 00489: val_loss did not improve from 0.22847\n","Epoch 490/1000\n"," - 5s - loss: 0.0195 - accuracy: 0.9956 - val_loss: 2.9431 - val_accuracy: 0.4998\n","\n","Epoch 00490: val_loss did not improve from 0.22847\n","Epoch 491/1000\n"," - 5s - loss: 0.0188 - accuracy: 0.9947 - val_loss: 3.4520 - val_accuracy: 0.5076\n","\n","Epoch 00491: val_loss did not improve from 0.22847\n","Epoch 492/1000\n"," - 5s - loss: 0.0188 - accuracy: 0.9959 - val_loss: 2.9235 - val_accuracy: 0.4943\n","\n","Epoch 00492: val_loss did not improve from 0.22847\n","Epoch 493/1000\n"," - 5s - loss: 0.0229 - accuracy: 0.9938 - val_loss: 3.7334 - val_accuracy: 0.5047\n","\n","Epoch 00493: val_loss did not improve from 0.22847\n","Epoch 494/1000\n"," - 5s - loss: 0.0223 - accuracy: 0.9954 - val_loss: 5.3186 - val_accuracy: 0.5042\n","\n","Epoch 00494: val_loss did not improve from 0.22847\n","Epoch 495/1000\n"," - 5s - loss: 0.0222 - accuracy: 0.9938 - val_loss: 4.2162 - val_accuracy: 0.4963\n","\n","Epoch 00495: val_loss did not improve from 0.22847\n","Epoch 496/1000\n"," - 5s - loss: 0.0210 - accuracy: 0.9952 - val_loss: 4.4626 - val_accuracy: 0.4958\n","\n","Epoch 00496: val_loss did not improve from 0.22847\n","Epoch 497/1000\n"," - 5s - loss: 0.0234 - accuracy: 0.9936 - val_loss: 3.5573 - val_accuracy: 0.5135\n","\n","Epoch 00497: val_loss did not improve from 0.22847\n","Epoch 498/1000\n"," - 5s - loss: 0.0176 - accuracy: 0.9954 - val_loss: 3.2541 - val_accuracy: 0.5101\n","\n","Epoch 00498: val_loss did not improve from 0.22847\n","Epoch 499/1000\n"," - 5s - loss: 0.0186 - accuracy: 0.9949 - val_loss: 4.0070 - val_accuracy: 0.5027\n","\n","Epoch 00499: val_loss did not improve from 0.22847\n","Epoch 500/1000\n"," - 5s - loss: 0.0202 - accuracy: 0.9957 - val_loss: 5.0311 - val_accuracy: 0.5047\n","\n","Epoch 00500: val_loss did not improve from 0.22847\n","Epoch 501/1000\n"," - 5s - loss: 0.0269 - accuracy: 0.9920 - val_loss: 5.3196 - val_accuracy: 0.4938\n","\n","Epoch 00501: val_loss did not improve from 0.22847\n","Epoch 502/1000\n"," - 5s - loss: 0.0182 - accuracy: 0.9961 - val_loss: 6.0380 - val_accuracy: 0.4934\n","\n","Epoch 00502: val_loss did not improve from 0.22847\n","Epoch 503/1000\n"," - 5s - loss: 0.0157 - accuracy: 0.9966 - val_loss: 4.4136 - val_accuracy: 0.4943\n","\n","Epoch 00503: val_loss did not improve from 0.22847\n","Epoch 504/1000\n"," - 5s - loss: 0.0198 - accuracy: 0.9957 - val_loss: 4.8122 - val_accuracy: 0.4934\n","\n","Epoch 00504: val_loss did not improve from 0.22847\n","Epoch 505/1000\n"," - 5s - loss: 0.0162 - accuracy: 0.9969 - val_loss: 2.9102 - val_accuracy: 0.5012\n","\n","Epoch 00505: val_loss did not improve from 0.22847\n","Epoch 506/1000\n"," - 5s - loss: 0.0188 - accuracy: 0.9956 - val_loss: 5.9927 - val_accuracy: 0.5121\n","\n","Epoch 00506: val_loss did not improve from 0.22847\n","Epoch 507/1000\n"," - 5s - loss: 0.0209 - accuracy: 0.9946 - val_loss: 2.8443 - val_accuracy: 0.5022\n","\n","Epoch 00507: val_loss did not improve from 0.22847\n","Epoch 508/1000\n"," - 5s - loss: 0.0185 - accuracy: 0.9957 - val_loss: 3.7984 - val_accuracy: 0.5007\n","\n","Epoch 00508: val_loss did not improve from 0.22847\n","Epoch 509/1000\n"," - 5s - loss: 0.0164 - accuracy: 0.9967 - val_loss: 3.0732 - val_accuracy: 0.4919\n","\n","Epoch 00509: val_loss did not improve from 0.22847\n","Epoch 510/1000\n"," - 5s - loss: 0.0194 - accuracy: 0.9947 - val_loss: 4.0740 - val_accuracy: 0.5012\n","\n","Epoch 00510: val_loss did not improve from 0.22847\n","Epoch 511/1000\n"," - 5s - loss: 0.0197 - accuracy: 0.9951 - val_loss: 3.4960 - val_accuracy: 0.4973\n","\n","Epoch 00511: val_loss did not improve from 0.22847\n","Epoch 512/1000\n"," - 5s - loss: 0.0205 - accuracy: 0.9947 - val_loss: 5.1597 - val_accuracy: 0.5002\n","\n","Epoch 00512: val_loss did not improve from 0.22847\n","Epoch 513/1000\n"," - 5s - loss: 0.0171 - accuracy: 0.9974 - val_loss: 3.2736 - val_accuracy: 0.4909\n","\n","Epoch 00513: val_loss did not improve from 0.22847\n","Epoch 514/1000\n"," - 5s - loss: 0.0168 - accuracy: 0.9962 - val_loss: 2.4525 - val_accuracy: 0.5057\n","\n","Epoch 00514: val_loss did not improve from 0.22847\n","Epoch 515/1000\n"," - 5s - loss: 0.0214 - accuracy: 0.9946 - val_loss: 4.2572 - val_accuracy: 0.5007\n","\n","Epoch 00515: val_loss did not improve from 0.22847\n","Epoch 516/1000\n"," - 5s - loss: 0.0192 - accuracy: 0.9947 - val_loss: 1.3153 - val_accuracy: 0.4934\n","\n","Epoch 00516: val_loss did not improve from 0.22847\n","Epoch 517/1000\n"," - 5s - loss: 0.0191 - accuracy: 0.9951 - val_loss: 2.6180 - val_accuracy: 0.5032\n","\n","Epoch 00517: val_loss did not improve from 0.22847\n","Epoch 518/1000\n"," - 5s - loss: 0.0202 - accuracy: 0.9947 - val_loss: 5.9551 - val_accuracy: 0.5007\n","\n","Epoch 00518: val_loss did not improve from 0.22847\n","Epoch 519/1000\n"," - 5s - loss: 0.0187 - accuracy: 0.9962 - val_loss: 5.7187 - val_accuracy: 0.5022\n","\n","Epoch 00519: val_loss did not improve from 0.22847\n","Epoch 520/1000\n"," - 5s - loss: 0.0185 - accuracy: 0.9947 - val_loss: 7.2524 - val_accuracy: 0.5066\n","\n","Epoch 00520: val_loss did not improve from 0.22847\n","Epoch 521/1000\n"," - 5s - loss: 0.0178 - accuracy: 0.9956 - val_loss: 2.9750 - val_accuracy: 0.5037\n","\n","Epoch 00521: val_loss did not improve from 0.22847\n","Epoch 522/1000\n"," - 5s - loss: 0.0196 - accuracy: 0.9947 - val_loss: 4.1478 - val_accuracy: 0.4899\n","\n","Epoch 00522: val_loss did not improve from 0.22847\n","Epoch 523/1000\n"," - 5s - loss: 0.0154 - accuracy: 0.9969 - val_loss: 4.3288 - val_accuracy: 0.5052\n","\n","Epoch 00523: val_loss did not improve from 0.22847\n","Epoch 524/1000\n"," - 5s - loss: 0.0159 - accuracy: 0.9967 - val_loss: 5.3452 - val_accuracy: 0.5002\n","\n","Epoch 00524: val_loss did not improve from 0.22847\n","Epoch 525/1000\n"," - 5s - loss: 0.0158 - accuracy: 0.9970 - val_loss: 4.4751 - val_accuracy: 0.5052\n","\n","Epoch 00525: val_loss did not improve from 0.22847\n","Epoch 526/1000\n"," - 5s - loss: 0.0193 - accuracy: 0.9946 - val_loss: 3.1455 - val_accuracy: 0.5106\n","\n","Epoch 00526: val_loss did not improve from 0.22847\n","Epoch 527/1000\n"," - 5s - loss: 0.0163 - accuracy: 0.9962 - val_loss: 1.8627 - val_accuracy: 0.5106\n","\n","Epoch 00527: val_loss did not improve from 0.22847\n","Epoch 528/1000\n"," - 5s - loss: 0.0207 - accuracy: 0.9946 - val_loss: 3.2275 - val_accuracy: 0.5165\n","\n","Epoch 00528: val_loss did not improve from 0.22847\n","Epoch 529/1000\n"," - 5s - loss: 0.0190 - accuracy: 0.9946 - val_loss: 4.1876 - val_accuracy: 0.5037\n","\n","Epoch 00529: val_loss did not improve from 0.22847\n","Epoch 530/1000\n"," - 5s - loss: 0.0197 - accuracy: 0.9952 - val_loss: 7.2503 - val_accuracy: 0.5012\n","\n","Epoch 00530: val_loss did not improve from 0.22847\n","Epoch 531/1000\n"," - 5s - loss: 0.0165 - accuracy: 0.9959 - val_loss: 5.8751 - val_accuracy: 0.5047\n","\n","Epoch 00531: val_loss did not improve from 0.22847\n","Epoch 532/1000\n"," - 5s - loss: 0.0199 - accuracy: 0.9949 - val_loss: 1.4456 - val_accuracy: 0.5042\n","\n","Epoch 00532: val_loss did not improve from 0.22847\n","Epoch 533/1000\n"," - 5s - loss: 0.0201 - accuracy: 0.9949 - val_loss: 3.3498 - val_accuracy: 0.4963\n","\n","Epoch 00533: val_loss did not improve from 0.22847\n","Epoch 534/1000\n"," - 5s - loss: 0.0189 - accuracy: 0.9941 - val_loss: 7.6788 - val_accuracy: 0.5017\n","\n","Epoch 00534: val_loss did not improve from 0.22847\n","Epoch 535/1000\n"," - 5s - loss: 0.0175 - accuracy: 0.9954 - val_loss: 5.6789 - val_accuracy: 0.4983\n","\n","Epoch 00535: val_loss did not improve from 0.22847\n","Epoch 536/1000\n"," - 5s - loss: 0.0162 - accuracy: 0.9974 - val_loss: 2.8780 - val_accuracy: 0.5057\n","\n","Epoch 00536: val_loss did not improve from 0.22847\n","Epoch 537/1000\n"," - 5s - loss: 0.0173 - accuracy: 0.9961 - val_loss: 2.3801 - val_accuracy: 0.5081\n","\n","Epoch 00537: val_loss did not improve from 0.22847\n","Epoch 538/1000\n"," - 5s - loss: 0.0183 - accuracy: 0.9959 - val_loss: 5.1959 - val_accuracy: 0.4953\n","\n","Epoch 00538: val_loss did not improve from 0.22847\n","Epoch 539/1000\n"," - 5s - loss: 0.0183 - accuracy: 0.9951 - val_loss: 4.7861 - val_accuracy: 0.4993\n","\n","Epoch 00539: val_loss did not improve from 0.22847\n","Epoch 540/1000\n"," - 5s - loss: 0.0148 - accuracy: 0.9972 - val_loss: 2.8843 - val_accuracy: 0.4983\n","\n","Epoch 00540: val_loss did not improve from 0.22847\n","Epoch 541/1000\n"," - 5s - loss: 0.0166 - accuracy: 0.9967 - val_loss: 7.0018 - val_accuracy: 0.5032\n","\n","Epoch 00541: val_loss did not improve from 0.22847\n","Epoch 542/1000\n"," - 5s - loss: 0.0157 - accuracy: 0.9970 - val_loss: 4.1138 - val_accuracy: 0.5022\n","\n","Epoch 00542: val_loss did not improve from 0.22847\n","Epoch 543/1000\n"," - 5s - loss: 0.0148 - accuracy: 0.9970 - val_loss: 1.1706 - val_accuracy: 0.5012\n","\n","Epoch 00543: val_loss did not improve from 0.22847\n","Epoch 544/1000\n"," - 5s - loss: 0.0218 - accuracy: 0.9938 - val_loss: 4.0100 - val_accuracy: 0.5121\n","\n","Epoch 00544: val_loss did not improve from 0.22847\n","Epoch 545/1000\n"," - 5s - loss: 0.0178 - accuracy: 0.9962 - val_loss: 3.7119 - val_accuracy: 0.5027\n","\n","Epoch 00545: val_loss did not improve from 0.22847\n","Epoch 546/1000\n"," - 5s - loss: 0.0156 - accuracy: 0.9975 - val_loss: 5.0104 - val_accuracy: 0.5062\n","\n","Epoch 00546: val_loss did not improve from 0.22847\n","Epoch 547/1000\n"," - 5s - loss: 0.0143 - accuracy: 0.9972 - val_loss: 2.8645 - val_accuracy: 0.4978\n","\n","Epoch 00547: val_loss did not improve from 0.22847\n","Epoch 548/1000\n"," - 5s - loss: 0.0140 - accuracy: 0.9972 - val_loss: 4.2379 - val_accuracy: 0.4953\n","\n","Epoch 00548: val_loss did not improve from 0.22847\n","Epoch 549/1000\n"," - 5s - loss: 0.0141 - accuracy: 0.9977 - val_loss: 8.0906 - val_accuracy: 0.5111\n","\n","Epoch 00549: val_loss did not improve from 0.22847\n","Epoch 550/1000\n"," - 5s - loss: 0.0175 - accuracy: 0.9949 - val_loss: 6.0687 - val_accuracy: 0.5022\n","\n","Epoch 00550: val_loss did not improve from 0.22847\n","Epoch 551/1000\n"," - 5s - loss: 0.0179 - accuracy: 0.9949 - val_loss: 4.9120 - val_accuracy: 0.5042\n","\n","Epoch 00551: val_loss did not improve from 0.22847\n","Epoch 552/1000\n"," - 5s - loss: 0.0155 - accuracy: 0.9974 - val_loss: 1.5997 - val_accuracy: 0.5071\n","\n","Epoch 00552: val_loss did not improve from 0.22847\n","Epoch 553/1000\n"," - 5s - loss: 0.0151 - accuracy: 0.9970 - val_loss: 4.1133 - val_accuracy: 0.5027\n","\n","Epoch 00553: val_loss did not improve from 0.22847\n","Epoch 554/1000\n"," - 5s - loss: 0.0216 - accuracy: 0.9938 - val_loss: 4.9562 - val_accuracy: 0.5017\n","\n","Epoch 00554: val_loss did not improve from 0.22847\n","Epoch 555/1000\n"," - 5s - loss: 0.0151 - accuracy: 0.9964 - val_loss: 4.1501 - val_accuracy: 0.5111\n","\n","Epoch 00555: val_loss did not improve from 0.22847\n","Epoch 556/1000\n"," - 5s - loss: 0.0184 - accuracy: 0.9959 - val_loss: 2.2034 - val_accuracy: 0.5047\n","\n","Epoch 00556: val_loss did not improve from 0.22847\n","Epoch 557/1000\n"," - 5s - loss: 0.0164 - accuracy: 0.9952 - val_loss: 4.7195 - val_accuracy: 0.4993\n","\n","Epoch 00557: val_loss did not improve from 0.22847\n","Epoch 558/1000\n"," - 5s - loss: 0.0146 - accuracy: 0.9972 - val_loss: 2.4362 - val_accuracy: 0.5037\n","\n","Epoch 00558: val_loss did not improve from 0.22847\n","Epoch 559/1000\n"," - 5s - loss: 0.0147 - accuracy: 0.9974 - val_loss: 4.2330 - val_accuracy: 0.5145\n","\n","Epoch 00559: val_loss did not improve from 0.22847\n","Epoch 560/1000\n"," - 5s - loss: 0.0148 - accuracy: 0.9974 - val_loss: 10.5415 - val_accuracy: 0.4993\n","\n","Epoch 00560: val_loss did not improve from 0.22847\n","Epoch 561/1000\n"," - 5s - loss: 0.0169 - accuracy: 0.9962 - val_loss: 3.3481 - val_accuracy: 0.5057\n","\n","Epoch 00561: val_loss did not improve from 0.22847\n","Epoch 562/1000\n"," - 5s - loss: 0.0153 - accuracy: 0.9966 - val_loss: 4.6942 - val_accuracy: 0.5022\n","\n","Epoch 00562: val_loss did not improve from 0.22847\n","Epoch 563/1000\n"," - 5s - loss: 0.0159 - accuracy: 0.9970 - val_loss: 4.5035 - val_accuracy: 0.4988\n","\n","Epoch 00563: val_loss did not improve from 0.22847\n","Epoch 564/1000\n"," - 5s - loss: 0.0142 - accuracy: 0.9959 - val_loss: 4.1284 - val_accuracy: 0.4998\n","\n","Epoch 00564: val_loss did not improve from 0.22847\n","Epoch 565/1000\n"," - 5s - loss: 0.0170 - accuracy: 0.9962 - val_loss: 3.2227 - val_accuracy: 0.5062\n","\n","Epoch 00565: val_loss did not improve from 0.22847\n","Epoch 566/1000\n"," - 5s - loss: 0.0159 - accuracy: 0.9966 - val_loss: 6.3828 - val_accuracy: 0.4938\n","\n","Epoch 00566: val_loss did not improve from 0.22847\n","Epoch 567/1000\n"," - 5s - loss: 0.0144 - accuracy: 0.9961 - val_loss: 5.7716 - val_accuracy: 0.5076\n","\n","Epoch 00567: val_loss did not improve from 0.22847\n","Epoch 568/1000\n"," - 5s - loss: 0.0135 - accuracy: 0.9967 - val_loss: 3.6701 - val_accuracy: 0.5140\n","\n","Epoch 00568: val_loss did not improve from 0.22847\n","Epoch 569/1000\n"," - 5s - loss: 0.0122 - accuracy: 0.9980 - val_loss: 7.9564 - val_accuracy: 0.4983\n","\n","Epoch 00569: val_loss did not improve from 0.22847\n","Epoch 570/1000\n"," - 5s - loss: 0.0150 - accuracy: 0.9964 - val_loss: 4.9704 - val_accuracy: 0.5062\n","\n","Epoch 00570: val_loss did not improve from 0.22847\n","Epoch 571/1000\n"," - 5s - loss: 0.0144 - accuracy: 0.9974 - val_loss: 4.3989 - val_accuracy: 0.5062\n","\n","Epoch 00571: val_loss did not improve from 0.22847\n","Epoch 572/1000\n"," - 5s - loss: 0.0159 - accuracy: 0.9964 - val_loss: 5.5467 - val_accuracy: 0.5057\n","\n","Epoch 00572: val_loss did not improve from 0.22847\n","Epoch 573/1000\n"," - 5s - loss: 0.0194 - accuracy: 0.9939 - val_loss: 4.5748 - val_accuracy: 0.5096\n","\n","Epoch 00573: val_loss did not improve from 0.22847\n","Epoch 574/1000\n"," - 5s - loss: 0.0155 - accuracy: 0.9964 - val_loss: 3.5442 - val_accuracy: 0.5081\n","\n","Epoch 00574: val_loss did not improve from 0.22847\n","Epoch 575/1000\n"," - 5s - loss: 0.0144 - accuracy: 0.9969 - val_loss: 7.2236 - val_accuracy: 0.5047\n","\n","Epoch 00575: val_loss did not improve from 0.22847\n","Epoch 576/1000\n"," - 5s - loss: 0.0145 - accuracy: 0.9967 - val_loss: 3.4135 - val_accuracy: 0.5052\n","\n","Epoch 00576: val_loss did not improve from 0.22847\n","Epoch 577/1000\n"," - 5s - loss: 0.0148 - accuracy: 0.9967 - val_loss: 8.9381 - val_accuracy: 0.4973\n","\n","Epoch 00577: val_loss did not improve from 0.22847\n","Epoch 578/1000\n"," - 5s - loss: 0.0180 - accuracy: 0.9956 - val_loss: 5.0626 - val_accuracy: 0.5076\n","\n","Epoch 00578: val_loss did not improve from 0.22847\n","Epoch 579/1000\n"," - 5s - loss: 0.0173 - accuracy: 0.9954 - val_loss: 6.3685 - val_accuracy: 0.5076\n","\n","Epoch 00579: val_loss did not improve from 0.22847\n","Epoch 580/1000\n"," - 5s - loss: 0.0127 - accuracy: 0.9977 - val_loss: 2.9127 - val_accuracy: 0.5121\n","\n","Epoch 00580: val_loss did not improve from 0.22847\n","Epoch 581/1000\n"," - 5s - loss: 0.0142 - accuracy: 0.9969 - val_loss: 5.2256 - val_accuracy: 0.5037\n","\n","Epoch 00581: val_loss did not improve from 0.22847\n","Epoch 582/1000\n"," - 5s - loss: 0.0146 - accuracy: 0.9975 - val_loss: 4.7651 - val_accuracy: 0.5071\n","\n","Epoch 00582: val_loss did not improve from 0.22847\n","Epoch 583/1000\n"," - 5s - loss: 0.0137 - accuracy: 0.9970 - val_loss: 4.0396 - val_accuracy: 0.5037\n","\n","Epoch 00583: val_loss did not improve from 0.22847\n","Epoch 584/1000\n"," - 5s - loss: 0.0140 - accuracy: 0.9975 - val_loss: 4.3962 - val_accuracy: 0.4943\n","\n","Epoch 00584: val_loss did not improve from 0.22847\n","Epoch 585/1000\n"," - 5s - loss: 0.0176 - accuracy: 0.9954 - val_loss: 4.6266 - val_accuracy: 0.5017\n","\n","Epoch 00585: val_loss did not improve from 0.22847\n","Epoch 586/1000\n"," - 5s - loss: 0.0161 - accuracy: 0.9961 - val_loss: 1.8725 - val_accuracy: 0.5062\n","\n","Epoch 00586: val_loss did not improve from 0.22847\n","Epoch 587/1000\n"," - 5s - loss: 0.0143 - accuracy: 0.9970 - val_loss: 4.3310 - val_accuracy: 0.5057\n","\n","Epoch 00587: val_loss did not improve from 0.22847\n","Epoch 588/1000\n"," - 5s - loss: 0.0149 - accuracy: 0.9969 - val_loss: 3.0739 - val_accuracy: 0.5071\n","\n","Epoch 00588: val_loss did not improve from 0.22847\n","Epoch 589/1000\n"," - 5s - loss: 0.0142 - accuracy: 0.9972 - val_loss: 6.0469 - val_accuracy: 0.5140\n","\n","Epoch 00589: val_loss did not improve from 0.22847\n","Epoch 590/1000\n"," - 5s - loss: 0.0150 - accuracy: 0.9959 - val_loss: 2.9786 - val_accuracy: 0.5012\n","\n","Epoch 00590: val_loss did not improve from 0.22847\n","Epoch 591/1000\n"," - 5s - loss: 0.0148 - accuracy: 0.9970 - val_loss: 8.6523 - val_accuracy: 0.4998\n","\n","Epoch 00591: val_loss did not improve from 0.22847\n","Epoch 592/1000\n"," - 5s - loss: 0.0137 - accuracy: 0.9967 - val_loss: 4.5059 - val_accuracy: 0.4958\n","\n","Epoch 00592: val_loss did not improve from 0.22847\n","Epoch 593/1000\n"," - 5s - loss: 0.0124 - accuracy: 0.9980 - val_loss: 6.3407 - val_accuracy: 0.4978\n","\n","Epoch 00593: val_loss did not improve from 0.22847\n","Epoch 594/1000\n"," - 5s - loss: 0.0148 - accuracy: 0.9966 - val_loss: 5.5442 - val_accuracy: 0.5022\n","\n","Epoch 00594: val_loss did not improve from 0.22847\n","Epoch 595/1000\n"," - 5s - loss: 0.0146 - accuracy: 0.9959 - val_loss: 3.4797 - val_accuracy: 0.5037\n","\n","Epoch 00595: val_loss did not improve from 0.22847\n","Epoch 596/1000\n"," - 5s - loss: 0.0144 - accuracy: 0.9969 - val_loss: 4.6625 - val_accuracy: 0.5066\n","\n","Epoch 00596: val_loss did not improve from 0.22847\n","Epoch 597/1000\n"," - 5s - loss: 0.0161 - accuracy: 0.9959 - val_loss: 1.6537 - val_accuracy: 0.5007\n","\n","Epoch 00597: val_loss did not improve from 0.22847\n","Epoch 598/1000\n"," - 5s - loss: 0.0110 - accuracy: 0.9982 - val_loss: 2.4080 - val_accuracy: 0.4993\n","\n","Epoch 00598: val_loss did not improve from 0.22847\n","Epoch 599/1000\n"," - 5s - loss: 0.0120 - accuracy: 0.9984 - val_loss: 5.8189 - val_accuracy: 0.5027\n","\n","Epoch 00599: val_loss did not improve from 0.22847\n","Epoch 600/1000\n"," - 5s - loss: 0.0191 - accuracy: 0.9951 - val_loss: 6.3873 - val_accuracy: 0.5145\n","\n","Epoch 00600: val_loss did not improve from 0.22847\n","Epoch 601/1000\n"," - 5s - loss: 0.0125 - accuracy: 0.9975 - val_loss: 6.4042 - val_accuracy: 0.5096\n","\n","Epoch 00601: val_loss did not improve from 0.22847\n","Epoch 602/1000\n"," - 5s - loss: 0.0115 - accuracy: 0.9979 - val_loss: 2.1738 - val_accuracy: 0.5096\n","\n","Epoch 00602: val_loss did not improve from 0.22847\n","Epoch 603/1000\n"," - 5s - loss: 0.0125 - accuracy: 0.9967 - val_loss: 4.8199 - val_accuracy: 0.5022\n","\n","Epoch 00603: val_loss did not improve from 0.22847\n","Epoch 604/1000\n"," - 5s - loss: 0.0126 - accuracy: 0.9980 - val_loss: 2.9443 - val_accuracy: 0.5066\n","\n","Epoch 00604: val_loss did not improve from 0.22847\n","Epoch 605/1000\n"," - 5s - loss: 0.0118 - accuracy: 0.9980 - val_loss: 2.8922 - val_accuracy: 0.5002\n","\n","Epoch 00605: val_loss did not improve from 0.22847\n","Epoch 606/1000\n"," - 5s - loss: 0.0137 - accuracy: 0.9964 - val_loss: 5.7858 - val_accuracy: 0.5057\n","\n","Epoch 00606: val_loss did not improve from 0.22847\n","Epoch 607/1000\n"," - 5s - loss: 0.0132 - accuracy: 0.9975 - val_loss: 4.9173 - val_accuracy: 0.5106\n","\n","Epoch 00607: val_loss did not improve from 0.22847\n","Epoch 608/1000\n"," - 5s - loss: 0.0131 - accuracy: 0.9979 - val_loss: 8.4253 - val_accuracy: 0.5042\n","\n","Epoch 00608: val_loss did not improve from 0.22847\n","Epoch 609/1000\n"," - 5s - loss: 0.0123 - accuracy: 0.9972 - val_loss: 4.8361 - val_accuracy: 0.4983\n","\n","Epoch 00609: val_loss did not improve from 0.22847\n","Epoch 610/1000\n"," - 5s - loss: 0.0139 - accuracy: 0.9966 - val_loss: 4.9762 - val_accuracy: 0.5106\n","\n","Epoch 00610: val_loss did not improve from 0.22847\n","Epoch 611/1000\n"," - 5s - loss: 0.0135 - accuracy: 0.9967 - val_loss: 4.5559 - val_accuracy: 0.5076\n","\n","Epoch 00611: val_loss did not improve from 0.22847\n","Epoch 612/1000\n"," - 5s - loss: 0.0142 - accuracy: 0.9966 - val_loss: 4.2760 - val_accuracy: 0.5022\n","\n","Epoch 00612: val_loss did not improve from 0.22847\n","Epoch 613/1000\n"," - 5s - loss: 0.0128 - accuracy: 0.9969 - val_loss: 5.9333 - val_accuracy: 0.5081\n","\n","Epoch 00613: val_loss did not improve from 0.22847\n","Epoch 614/1000\n"," - 5s - loss: 0.0162 - accuracy: 0.9956 - val_loss: 2.5366 - val_accuracy: 0.5062\n","\n","Epoch 00614: val_loss did not improve from 0.22847\n","Epoch 615/1000\n"," - 5s - loss: 0.0170 - accuracy: 0.9966 - val_loss: 4.2048 - val_accuracy: 0.5081\n","\n","Epoch 00615: val_loss did not improve from 0.22847\n","Epoch 616/1000\n"," - 5s - loss: 0.0129 - accuracy: 0.9974 - val_loss: 3.6587 - val_accuracy: 0.5096\n","\n","Epoch 00616: val_loss did not improve from 0.22847\n","Epoch 617/1000\n"," - 5s - loss: 0.0141 - accuracy: 0.9954 - val_loss: 5.4961 - val_accuracy: 0.5106\n","\n","Epoch 00617: val_loss did not improve from 0.22847\n","Epoch 618/1000\n"," - 5s - loss: 0.0121 - accuracy: 0.9975 - val_loss: 3.1740 - val_accuracy: 0.5032\n","\n","Epoch 00618: val_loss did not improve from 0.22847\n","Epoch 619/1000\n"," - 6s - loss: 0.0112 - accuracy: 0.9975 - val_loss: 2.8144 - val_accuracy: 0.5086\n","\n","Epoch 00619: val_loss did not improve from 0.22847\n","Epoch 620/1000\n"," - 5s - loss: 0.0121 - accuracy: 0.9979 - val_loss: 3.5470 - val_accuracy: 0.5052\n","\n","Epoch 00620: val_loss did not improve from 0.22847\n","Epoch 621/1000\n"," - 5s - loss: 0.0150 - accuracy: 0.9954 - val_loss: 7.1473 - val_accuracy: 0.5017\n","\n","Epoch 00621: val_loss did not improve from 0.22847\n","Epoch 622/1000\n"," - 5s - loss: 0.0163 - accuracy: 0.9954 - val_loss: 3.4879 - val_accuracy: 0.5022\n","\n","Epoch 00622: val_loss did not improve from 0.22847\n","Epoch 623/1000\n"," - 5s - loss: 0.0140 - accuracy: 0.9970 - val_loss: 8.8101 - val_accuracy: 0.5057\n","\n","Epoch 00623: val_loss did not improve from 0.22847\n","Epoch 624/1000\n"," - 5s - loss: 0.0140 - accuracy: 0.9966 - val_loss: 5.0708 - val_accuracy: 0.5057\n","\n","Epoch 00624: val_loss did not improve from 0.22847\n","Epoch 625/1000\n"," - 5s - loss: 0.0131 - accuracy: 0.9964 - val_loss: 3.1321 - val_accuracy: 0.5027\n","\n","Epoch 00625: val_loss did not improve from 0.22847\n","Epoch 626/1000\n"," - 5s - loss: 0.0143 - accuracy: 0.9966 - val_loss: 6.1384 - val_accuracy: 0.5096\n","\n","Epoch 00626: val_loss did not improve from 0.22847\n","Epoch 627/1000\n"," - 5s - loss: 0.0123 - accuracy: 0.9975 - val_loss: 1.5216 - val_accuracy: 0.4983\n","\n","Epoch 00627: val_loss did not improve from 0.22847\n","Epoch 628/1000\n"," - 5s - loss: 0.0131 - accuracy: 0.9969 - val_loss: 0.3359 - val_accuracy: 0.4983\n","\n","Epoch 00628: val_loss did not improve from 0.22847\n","Epoch 629/1000\n"," - 5s - loss: 0.0158 - accuracy: 0.9954 - val_loss: 5.3461 - val_accuracy: 0.4978\n","\n","Epoch 00629: val_loss did not improve from 0.22847\n","Epoch 630/1000\n"," - 5s - loss: 0.0111 - accuracy: 0.9975 - val_loss: 4.4933 - val_accuracy: 0.5057\n","\n","Epoch 00630: val_loss did not improve from 0.22847\n","Epoch 631/1000\n"," - 5s - loss: 0.0153 - accuracy: 0.9966 - val_loss: 4.0827 - val_accuracy: 0.5101\n","\n","Epoch 00631: val_loss did not improve from 0.22847\n","Epoch 632/1000\n"," - 5s - loss: 0.0115 - accuracy: 0.9972 - val_loss: 3.6083 - val_accuracy: 0.5150\n","\n","Epoch 00632: val_loss did not improve from 0.22847\n","Epoch 633/1000\n"," - 5s - loss: 0.0123 - accuracy: 0.9974 - val_loss: 6.2051 - val_accuracy: 0.5096\n","\n","Epoch 00633: val_loss did not improve from 0.22847\n","Epoch 634/1000\n"," - 5s - loss: 0.0123 - accuracy: 0.9979 - val_loss: 6.2681 - val_accuracy: 0.5037\n","\n","Epoch 00634: val_loss did not improve from 0.22847\n","Epoch 635/1000\n"," - 5s - loss: 0.0148 - accuracy: 0.9966 - val_loss: 7.2783 - val_accuracy: 0.5052\n","\n","Epoch 00635: val_loss did not improve from 0.22847\n","Epoch 636/1000\n"," - 5s - loss: 0.0139 - accuracy: 0.9969 - val_loss: 5.6677 - val_accuracy: 0.5062\n","\n","Epoch 00636: val_loss did not improve from 0.22847\n","Epoch 637/1000\n"," - 5s - loss: 0.0117 - accuracy: 0.9974 - val_loss: 4.6434 - val_accuracy: 0.5032\n","\n","Epoch 00637: val_loss did not improve from 0.22847\n","Epoch 638/1000\n"," - 5s - loss: 0.0149 - accuracy: 0.9962 - val_loss: 7.4832 - val_accuracy: 0.5042\n","\n","Epoch 00638: val_loss did not improve from 0.22847\n","Epoch 639/1000\n"," - 5s - loss: 0.0133 - accuracy: 0.9970 - val_loss: 5.6885 - val_accuracy: 0.5066\n","\n","Epoch 00639: val_loss did not improve from 0.22847\n","Epoch 640/1000\n"," - 5s - loss: 0.0128 - accuracy: 0.9975 - val_loss: 5.8152 - val_accuracy: 0.5007\n","\n","Epoch 00640: val_loss did not improve from 0.22847\n","Epoch 641/1000\n"," - 5s - loss: 0.0095 - accuracy: 0.9987 - val_loss: 3.6537 - val_accuracy: 0.4958\n","\n","Epoch 00641: val_loss did not improve from 0.22847\n","Epoch 642/1000\n"," - 5s - loss: 0.0096 - accuracy: 0.9979 - val_loss: 5.4655 - val_accuracy: 0.4978\n","\n","Epoch 00642: val_loss did not improve from 0.22847\n","Epoch 643/1000\n"," - 5s - loss: 0.0109 - accuracy: 0.9982 - val_loss: 2.1621 - val_accuracy: 0.5027\n","\n","Epoch 00643: val_loss did not improve from 0.22847\n","Epoch 644/1000\n"," - 5s - loss: 0.0145 - accuracy: 0.9966 - val_loss: 3.3513 - val_accuracy: 0.5140\n","\n","Epoch 00644: val_loss did not improve from 0.22847\n","Epoch 645/1000\n"," - 5s - loss: 0.0119 - accuracy: 0.9974 - val_loss: 5.7284 - val_accuracy: 0.5071\n","\n","Epoch 00645: val_loss did not improve from 0.22847\n","Epoch 646/1000\n"," - 5s - loss: 0.0148 - accuracy: 0.9957 - val_loss: 5.0136 - val_accuracy: 0.5052\n","\n","Epoch 00646: val_loss did not improve from 0.22847\n","Epoch 647/1000\n"," - 5s - loss: 0.0140 - accuracy: 0.9967 - val_loss: 6.0238 - val_accuracy: 0.5145\n","\n","Epoch 00647: val_loss did not improve from 0.22847\n","Epoch 648/1000\n"," - 6s - loss: 0.0115 - accuracy: 0.9975 - val_loss: 5.2499 - val_accuracy: 0.5047\n","\n","Epoch 00648: val_loss did not improve from 0.22847\n","Epoch 649/1000\n"," - 5s - loss: 0.0133 - accuracy: 0.9972 - val_loss: 6.6525 - val_accuracy: 0.5022\n","\n","Epoch 00649: val_loss did not improve from 0.22847\n","Epoch 650/1000\n"," - 5s - loss: 0.0106 - accuracy: 0.9980 - val_loss: 2.5627 - val_accuracy: 0.5012\n","\n","Epoch 00650: val_loss did not improve from 0.22847\n","Epoch 651/1000\n"," - 5s - loss: 0.0107 - accuracy: 0.9972 - val_loss: 3.0904 - val_accuracy: 0.5071\n","\n","Epoch 00651: val_loss did not improve from 0.22847\n","Epoch 652/1000\n"," - 5s - loss: 0.0125 - accuracy: 0.9964 - val_loss: 5.0392 - val_accuracy: 0.5012\n","\n","Epoch 00652: val_loss did not improve from 0.22847\n","Epoch 653/1000\n"," - 5s - loss: 0.0126 - accuracy: 0.9977 - val_loss: 4.4248 - val_accuracy: 0.5066\n","\n","Epoch 00653: val_loss did not improve from 0.22847\n","Epoch 654/1000\n"," - 5s - loss: 0.0123 - accuracy: 0.9970 - val_loss: 3.8426 - val_accuracy: 0.5052\n","\n","Epoch 00654: val_loss did not improve from 0.22847\n","Epoch 655/1000\n"," - 5s - loss: 0.0116 - accuracy: 0.9982 - val_loss: 7.3953 - val_accuracy: 0.5086\n","\n","Epoch 00655: val_loss did not improve from 0.22847\n","Epoch 656/1000\n"," - 5s - loss: 0.0096 - accuracy: 0.9985 - val_loss: 6.6580 - val_accuracy: 0.5076\n","\n","Epoch 00656: val_loss did not improve from 0.22847\n","Epoch 657/1000\n"," - 5s - loss: 0.0105 - accuracy: 0.9972 - val_loss: 8.8855 - val_accuracy: 0.5022\n","\n","Epoch 00657: val_loss did not improve from 0.22847\n","Epoch 658/1000\n"," - 5s - loss: 0.0133 - accuracy: 0.9970 - val_loss: 7.4757 - val_accuracy: 0.5116\n","\n","Epoch 00658: val_loss did not improve from 0.22847\n","Epoch 659/1000\n"," - 5s - loss: 0.0111 - accuracy: 0.9975 - val_loss: 4.6406 - val_accuracy: 0.5076\n","\n","Epoch 00659: val_loss did not improve from 0.22847\n","Epoch 660/1000\n"," - 5s - loss: 0.0107 - accuracy: 0.9977 - val_loss: 2.1164 - val_accuracy: 0.5101\n","\n","Epoch 00660: val_loss did not improve from 0.22847\n","Epoch 661/1000\n"," - 5s - loss: 0.0105 - accuracy: 0.9980 - val_loss: 4.4029 - val_accuracy: 0.5047\n","\n","Epoch 00661: val_loss did not improve from 0.22847\n","Epoch 662/1000\n"," - 5s - loss: 0.0116 - accuracy: 0.9977 - val_loss: 9.4305 - val_accuracy: 0.5057\n","\n","Epoch 00662: val_loss did not improve from 0.22847\n","Epoch 663/1000\n"," - 5s - loss: 0.0105 - accuracy: 0.9980 - val_loss: 7.5844 - val_accuracy: 0.5002\n","\n","Epoch 00663: val_loss did not improve from 0.22847\n","Epoch 664/1000\n"," - 5s - loss: 0.0133 - accuracy: 0.9961 - val_loss: 9.8519 - val_accuracy: 0.5066\n","\n","Epoch 00664: val_loss did not improve from 0.22847\n","Epoch 665/1000\n"," - 5s - loss: 0.0121 - accuracy: 0.9974 - val_loss: 3.5241 - val_accuracy: 0.5032\n","\n","Epoch 00665: val_loss did not improve from 0.22847\n","Epoch 666/1000\n"," - 5s - loss: 0.0131 - accuracy: 0.9962 - val_loss: 3.2614 - val_accuracy: 0.5116\n","\n","Epoch 00666: val_loss did not improve from 0.22847\n","Epoch 667/1000\n"," - 5s - loss: 0.0098 - accuracy: 0.9982 - val_loss: 5.5648 - val_accuracy: 0.5121\n","\n","Epoch 00667: val_loss did not improve from 0.22847\n","Epoch 668/1000\n"," - 5s - loss: 0.0122 - accuracy: 0.9972 - val_loss: 5.1591 - val_accuracy: 0.5057\n","\n","Epoch 00668: val_loss did not improve from 0.22847\n","Epoch 669/1000\n"," - 5s - loss: 0.0110 - accuracy: 0.9979 - val_loss: 9.0198 - val_accuracy: 0.5012\n","\n","Epoch 00669: val_loss did not improve from 0.22847\n","Epoch 670/1000\n"," - 5s - loss: 0.0117 - accuracy: 0.9977 - val_loss: 4.3308 - val_accuracy: 0.5027\n","\n","Epoch 00670: val_loss did not improve from 0.22847\n","Epoch 671/1000\n"," - 5s - loss: 0.0104 - accuracy: 0.9979 - val_loss: 4.0917 - val_accuracy: 0.4978\n","\n","Epoch 00671: val_loss did not improve from 0.22847\n","Epoch 672/1000\n"," - 5s - loss: 0.0095 - accuracy: 0.9979 - val_loss: 2.3597 - val_accuracy: 0.5047\n","\n","Epoch 00672: val_loss did not improve from 0.22847\n","Epoch 673/1000\n"," - 5s - loss: 0.0112 - accuracy: 0.9984 - val_loss: 4.0209 - val_accuracy: 0.5071\n","\n","Epoch 00673: val_loss did not improve from 0.22847\n","Epoch 674/1000\n"," - 5s - loss: 0.0110 - accuracy: 0.9970 - val_loss: 9.9178 - val_accuracy: 0.5022\n","\n","Epoch 00674: val_loss did not improve from 0.22847\n","Epoch 675/1000\n"," - 5s - loss: 0.0107 - accuracy: 0.9980 - val_loss: 6.4431 - val_accuracy: 0.5032\n","\n","Epoch 00675: val_loss did not improve from 0.22847\n","Epoch 676/1000\n"," - 5s - loss: 0.0128 - accuracy: 0.9964 - val_loss: 2.3927 - val_accuracy: 0.5096\n","\n","Epoch 00676: val_loss did not improve from 0.22847\n","Epoch 677/1000\n"," - 5s - loss: 0.0103 - accuracy: 0.9982 - val_loss: 2.5417 - val_accuracy: 0.5066\n","\n","Epoch 00677: val_loss did not improve from 0.22847\n","Epoch 678/1000\n"," - 5s - loss: 0.0116 - accuracy: 0.9974 - val_loss: 3.7385 - val_accuracy: 0.5081\n","\n","Epoch 00678: val_loss did not improve from 0.22847\n","Epoch 679/1000\n"," - 5s - loss: 0.0097 - accuracy: 0.9980 - val_loss: 4.9634 - val_accuracy: 0.5037\n","\n","Epoch 00679: val_loss did not improve from 0.22847\n","Epoch 680/1000\n"," - 5s - loss: 0.0125 - accuracy: 0.9966 - val_loss: 6.7154 - val_accuracy: 0.5027\n","\n","Epoch 00680: val_loss did not improve from 0.22847\n","Epoch 681/1000\n"," - 5s - loss: 0.0106 - accuracy: 0.9980 - val_loss: 6.4601 - val_accuracy: 0.4948\n","\n","Epoch 00681: val_loss did not improve from 0.22847\n","Epoch 682/1000\n"," - 5s - loss: 0.0120 - accuracy: 0.9966 - val_loss: 3.9407 - val_accuracy: 0.5042\n","\n","Epoch 00682: val_loss did not improve from 0.22847\n","Epoch 683/1000\n"," - 5s - loss: 0.0101 - accuracy: 0.9984 - val_loss: 5.0298 - val_accuracy: 0.5135\n","\n","Epoch 00683: val_loss did not improve from 0.22847\n","Epoch 684/1000\n"," - 5s - loss: 0.0091 - accuracy: 0.9989 - val_loss: 3.3941 - val_accuracy: 0.5111\n","\n","Epoch 00684: val_loss did not improve from 0.22847\n","Epoch 685/1000\n"," - 5s - loss: 0.0139 - accuracy: 0.9969 - val_loss: 3.9634 - val_accuracy: 0.5017\n","\n","Epoch 00685: val_loss did not improve from 0.22847\n","Epoch 686/1000\n"," - 5s - loss: 0.0090 - accuracy: 0.9989 - val_loss: 3.0292 - val_accuracy: 0.5066\n","\n","Epoch 00686: val_loss did not improve from 0.22847\n","Epoch 687/1000\n"," - 5s - loss: 0.0126 - accuracy: 0.9967 - val_loss: 5.0532 - val_accuracy: 0.5066\n","\n","Epoch 00687: val_loss did not improve from 0.22847\n","Epoch 688/1000\n"," - 5s - loss: 0.0133 - accuracy: 0.9972 - val_loss: 4.6781 - val_accuracy: 0.5052\n","\n","Epoch 00688: val_loss did not improve from 0.22847\n","Epoch 689/1000\n"," - 5s - loss: 0.0129 - accuracy: 0.9962 - val_loss: 5.0572 - val_accuracy: 0.5012\n","\n","Epoch 00689: val_loss did not improve from 0.22847\n","Epoch 690/1000\n"," - 5s - loss: 0.0097 - accuracy: 0.9982 - val_loss: 6.4595 - val_accuracy: 0.5086\n","\n","Epoch 00690: val_loss did not improve from 0.22847\n","Epoch 691/1000\n"," - 5s - loss: 0.0079 - accuracy: 0.9990 - val_loss: 4.1201 - val_accuracy: 0.5081\n","\n","Epoch 00691: val_loss did not improve from 0.22847\n","Epoch 692/1000\n"," - 5s - loss: 0.0081 - accuracy: 0.9985 - val_loss: 3.8255 - val_accuracy: 0.5032\n","\n","Epoch 00692: val_loss did not improve from 0.22847\n","Epoch 693/1000\n"," - 5s - loss: 0.0093 - accuracy: 0.9992 - val_loss: 3.0284 - val_accuracy: 0.5037\n","\n","Epoch 00693: val_loss did not improve from 0.22847\n","Epoch 694/1000\n"," - 5s - loss: 0.0107 - accuracy: 0.9979 - val_loss: 3.5407 - val_accuracy: 0.5081\n","\n","Epoch 00694: val_loss did not improve from 0.22847\n","Epoch 695/1000\n"," - 5s - loss: 0.0115 - accuracy: 0.9984 - val_loss: 2.6435 - val_accuracy: 0.5081\n","\n","Epoch 00695: val_loss did not improve from 0.22847\n","Epoch 696/1000\n"," - 5s - loss: 0.0095 - accuracy: 0.9984 - val_loss: 3.1559 - val_accuracy: 0.4983\n","\n","Epoch 00696: val_loss did not improve from 0.22847\n","Epoch 697/1000\n"," - 5s - loss: 0.0083 - accuracy: 0.9989 - val_loss: 2.2703 - val_accuracy: 0.5032\n","\n","Epoch 00697: val_loss did not improve from 0.22847\n","Epoch 698/1000\n"," - 5s - loss: 0.0129 - accuracy: 0.9962 - val_loss: 4.6313 - val_accuracy: 0.5022\n","\n","Epoch 00698: val_loss did not improve from 0.22847\n","Epoch 699/1000\n"," - 5s - loss: 0.0122 - accuracy: 0.9969 - val_loss: 3.5937 - val_accuracy: 0.5091\n","\n","Epoch 00699: val_loss did not improve from 0.22847\n","Epoch 700/1000\n"," - 5s - loss: 0.0091 - accuracy: 0.9985 - val_loss: 6.7418 - val_accuracy: 0.5052\n","\n","Epoch 00700: val_loss did not improve from 0.22847\n","Epoch 701/1000\n"," - 5s - loss: 0.0083 - accuracy: 0.9987 - val_loss: 0.8792 - val_accuracy: 0.5062\n","\n","Epoch 00701: val_loss did not improve from 0.22847\n","Epoch 702/1000\n"," - 5s - loss: 0.0097 - accuracy: 0.9982 - val_loss: 3.5931 - val_accuracy: 0.5076\n","\n","Epoch 00702: val_loss did not improve from 0.22847\n","Epoch 703/1000\n"," - 5s - loss: 0.0114 - accuracy: 0.9975 - val_loss: 5.5532 - val_accuracy: 0.5096\n","\n","Epoch 00703: val_loss did not improve from 0.22847\n","Epoch 704/1000\n"," - 5s - loss: 0.0151 - accuracy: 0.9957 - val_loss: 2.4113 - val_accuracy: 0.5047\n","\n","Epoch 00704: val_loss did not improve from 0.22847\n","Epoch 705/1000\n"," - 5s - loss: 0.0131 - accuracy: 0.9961 - val_loss: 9.1645 - val_accuracy: 0.5086\n","\n","Epoch 00705: val_loss did not improve from 0.22847\n","Epoch 706/1000\n"," - 5s - loss: 0.0093 - accuracy: 0.9985 - val_loss: 2.6462 - val_accuracy: 0.5007\n","\n","Epoch 00706: val_loss did not improve from 0.22847\n","Epoch 707/1000\n"," - 5s - loss: 0.0101 - accuracy: 0.9979 - val_loss: 3.8219 - val_accuracy: 0.5052\n","\n","Epoch 00707: val_loss did not improve from 0.22847\n","Epoch 708/1000\n"," - 5s - loss: 0.0096 - accuracy: 0.9980 - val_loss: 4.9780 - val_accuracy: 0.5096\n","\n","Epoch 00708: val_loss did not improve from 0.22847\n","Epoch 709/1000\n"," - 5s - loss: 0.0079 - accuracy: 0.9987 - val_loss: 5.0662 - val_accuracy: 0.5027\n","\n","Epoch 00709: val_loss did not improve from 0.22847\n","Epoch 710/1000\n"," - 5s - loss: 0.0100 - accuracy: 0.9974 - val_loss: 5.9355 - val_accuracy: 0.5037\n","\n","Epoch 00710: val_loss did not improve from 0.22847\n","Epoch 711/1000\n"," - 5s - loss: 0.0100 - accuracy: 0.9980 - val_loss: 2.3643 - val_accuracy: 0.5057\n","\n","Epoch 00711: val_loss did not improve from 0.22847\n","Epoch 712/1000\n"," - 5s - loss: 0.0112 - accuracy: 0.9979 - val_loss: 4.8459 - val_accuracy: 0.5052\n","\n","Epoch 00712: val_loss did not improve from 0.22847\n","Epoch 713/1000\n"," - 5s - loss: 0.0092 - accuracy: 0.9979 - val_loss: 4.1052 - val_accuracy: 0.4988\n","\n","Epoch 00713: val_loss did not improve from 0.22847\n","Epoch 714/1000\n"," - 5s - loss: 0.0105 - accuracy: 0.9970 - val_loss: 5.7084 - val_accuracy: 0.4943\n","\n","Epoch 00714: val_loss did not improve from 0.22847\n","Epoch 715/1000\n"," - 5s - loss: 0.0120 - accuracy: 0.9964 - val_loss: 4.3545 - val_accuracy: 0.4983\n","\n","Epoch 00715: val_loss did not improve from 0.22847\n","Epoch 716/1000\n"," - 5s - loss: 0.0117 - accuracy: 0.9970 - val_loss: 3.9097 - val_accuracy: 0.5086\n","\n","Epoch 00716: val_loss did not improve from 0.22847\n","Epoch 717/1000\n"," - 5s - loss: 0.0113 - accuracy: 0.9977 - val_loss: 1.9767 - val_accuracy: 0.4929\n","\n","Epoch 00717: val_loss did not improve from 0.22847\n","Epoch 718/1000\n"," - 5s - loss: 0.0088 - accuracy: 0.9984 - val_loss: 5.8514 - val_accuracy: 0.5111\n","\n","Epoch 00718: val_loss did not improve from 0.22847\n","Epoch 719/1000\n"," - 5s - loss: 0.0113 - accuracy: 0.9970 - val_loss: 3.3443 - val_accuracy: 0.5116\n","\n","Epoch 00719: val_loss did not improve from 0.22847\n","Epoch 720/1000\n"," - 5s - loss: 0.0087 - accuracy: 0.9982 - val_loss: 4.2015 - val_accuracy: 0.5066\n","\n","Epoch 00720: val_loss did not improve from 0.22847\n","Epoch 721/1000\n"," - 5s - loss: 0.0065 - accuracy: 0.9997 - val_loss: 4.3240 - val_accuracy: 0.5017\n","\n","Epoch 00721: val_loss did not improve from 0.22847\n","Epoch 722/1000\n"," - 5s - loss: 0.0074 - accuracy: 0.9985 - val_loss: 3.7651 - val_accuracy: 0.4978\n","\n","Epoch 00722: val_loss did not improve from 0.22847\n","Epoch 723/1000\n"," - 5s - loss: 0.0091 - accuracy: 0.9982 - val_loss: 6.0919 - val_accuracy: 0.5037\n","\n","Epoch 00723: val_loss did not improve from 0.22847\n","Epoch 724/1000\n"," - 5s - loss: 0.0104 - accuracy: 0.9970 - val_loss: 8.8291 - val_accuracy: 0.5012\n","\n","Epoch 00724: val_loss did not improve from 0.22847\n","Epoch 725/1000\n"," - 5s - loss: 0.0108 - accuracy: 0.9977 - val_loss: 6.4044 - val_accuracy: 0.5057\n","\n","Epoch 00725: val_loss did not improve from 0.22847\n","Epoch 726/1000\n"," - 5s - loss: 0.0088 - accuracy: 0.9987 - val_loss: 5.8903 - val_accuracy: 0.5007\n","\n","Epoch 00726: val_loss did not improve from 0.22847\n","Epoch 727/1000\n"," - 5s - loss: 0.0100 - accuracy: 0.9982 - val_loss: 4.8476 - val_accuracy: 0.5052\n","\n","Epoch 00727: val_loss did not improve from 0.22847\n","Epoch 728/1000\n"," - 5s - loss: 0.0088 - accuracy: 0.9984 - val_loss: 5.4335 - val_accuracy: 0.5057\n","\n","Epoch 00728: val_loss did not improve from 0.22847\n","Epoch 729/1000\n"," - 5s - loss: 0.0071 - accuracy: 0.9993 - val_loss: 8.0905 - val_accuracy: 0.5037\n","\n","Epoch 00729: val_loss did not improve from 0.22847\n","Epoch 730/1000\n"," - 5s - loss: 0.0095 - accuracy: 0.9979 - val_loss: 5.6826 - val_accuracy: 0.5012\n","\n","Epoch 00730: val_loss did not improve from 0.22847\n","Epoch 731/1000\n"," - 5s - loss: 0.0110 - accuracy: 0.9974 - val_loss: 3.2277 - val_accuracy: 0.5101\n","\n","Epoch 00731: val_loss did not improve from 0.22847\n","Epoch 732/1000\n"," - 5s - loss: 0.0116 - accuracy: 0.9974 - val_loss: 4.9098 - val_accuracy: 0.4998\n","\n","Epoch 00732: val_loss did not improve from 0.22847\n","Epoch 733/1000\n"," - 5s - loss: 0.0101 - accuracy: 0.9974 - val_loss: 4.6718 - val_accuracy: 0.5081\n","\n","Epoch 00733: val_loss did not improve from 0.22847\n","Epoch 734/1000\n"," - 5s - loss: 0.0085 - accuracy: 0.9989 - val_loss: 1.2510 - val_accuracy: 0.5012\n","\n","Epoch 00734: val_loss did not improve from 0.22847\n","Epoch 735/1000\n"," - 5s - loss: 0.0088 - accuracy: 0.9985 - val_loss: 3.1034 - val_accuracy: 0.4993\n","\n","Epoch 00735: val_loss did not improve from 0.22847\n","Epoch 736/1000\n"," - 5s - loss: 0.0085 - accuracy: 0.9984 - val_loss: 4.4099 - val_accuracy: 0.5027\n","\n","Epoch 00736: val_loss did not improve from 0.22847\n","Epoch 737/1000\n"," - 5s - loss: 0.0097 - accuracy: 0.9977 - val_loss: 1.9896 - val_accuracy: 0.5111\n","\n","Epoch 00737: val_loss did not improve from 0.22847\n","Epoch 738/1000\n"," - 5s - loss: 0.0091 - accuracy: 0.9979 - val_loss: 3.8511 - val_accuracy: 0.5126\n","\n","Epoch 00738: val_loss did not improve from 0.22847\n","Epoch 739/1000\n"," - 5s - loss: 0.0091 - accuracy: 0.9979 - val_loss: 4.5004 - val_accuracy: 0.5047\n","\n","Epoch 00739: val_loss did not improve from 0.22847\n","Epoch 740/1000\n"," - 5s - loss: 0.0119 - accuracy: 0.9970 - val_loss: 5.5074 - val_accuracy: 0.5086\n","\n","Epoch 00740: val_loss did not improve from 0.22847\n","Epoch 741/1000\n"," - 5s - loss: 0.0095 - accuracy: 0.9977 - val_loss: 3.1429 - val_accuracy: 0.4978\n","\n","Epoch 00741: val_loss did not improve from 0.22847\n","Epoch 742/1000\n"," - 5s - loss: 0.0076 - accuracy: 0.9989 - val_loss: 3.6556 - val_accuracy: 0.5086\n","\n","Epoch 00742: val_loss did not improve from 0.22847\n","Epoch 743/1000\n"," - 5s - loss: 0.0081 - accuracy: 0.9984 - val_loss: 1.7930 - val_accuracy: 0.5150\n","\n","Epoch 00743: val_loss did not improve from 0.22847\n","Epoch 744/1000\n"," - 5s - loss: 0.0073 - accuracy: 0.9990 - val_loss: 5.4605 - val_accuracy: 0.5091\n","\n","Epoch 00744: val_loss did not improve from 0.22847\n","Epoch 745/1000\n"," - 5s - loss: 0.0107 - accuracy: 0.9974 - val_loss: 4.0668 - val_accuracy: 0.5071\n","\n","Epoch 00745: val_loss did not improve from 0.22847\n","Epoch 746/1000\n"," - 5s - loss: 0.0079 - accuracy: 0.9990 - val_loss: 3.1169 - val_accuracy: 0.5076\n","\n","Epoch 00746: val_loss did not improve from 0.22847\n","Epoch 747/1000\n"," - 5s - loss: 0.0066 - accuracy: 0.9990 - val_loss: 2.5048 - val_accuracy: 0.5037\n","\n","Epoch 00747: val_loss did not improve from 0.22847\n","Epoch 748/1000\n"," - 5s - loss: 0.0087 - accuracy: 0.9984 - val_loss: 5.1774 - val_accuracy: 0.5042\n","\n","Epoch 00748: val_loss did not improve from 0.22847\n","Epoch 749/1000\n"," - 5s - loss: 0.0082 - accuracy: 0.9982 - val_loss: 3.9508 - val_accuracy: 0.5012\n","\n","Epoch 00749: val_loss did not improve from 0.22847\n","Epoch 750/1000\n"," - 5s - loss: 0.0115 - accuracy: 0.9966 - val_loss: 7.8295 - val_accuracy: 0.5091\n","\n","Epoch 00750: val_loss did not improve from 0.22847\n","Epoch 751/1000\n"," - 5s - loss: 0.0091 - accuracy: 0.9975 - val_loss: 1.7937 - val_accuracy: 0.5052\n","\n","Epoch 00751: val_loss did not improve from 0.22847\n","Epoch 752/1000\n"," - 5s - loss: 0.0078 - accuracy: 0.9990 - val_loss: 2.9390 - val_accuracy: 0.5076\n","\n","Epoch 00752: val_loss did not improve from 0.22847\n","Epoch 753/1000\n"," - 5s - loss: 0.0084 - accuracy: 0.9982 - val_loss: 4.5255 - val_accuracy: 0.5027\n","\n","Epoch 00753: val_loss did not improve from 0.22847\n","Epoch 754/1000\n"," - 5s - loss: 0.0091 - accuracy: 0.9984 - val_loss: 5.6203 - val_accuracy: 0.5022\n","\n","Epoch 00754: val_loss did not improve from 0.22847\n","Epoch 755/1000\n"," - 5s - loss: 0.0066 - accuracy: 0.9990 - val_loss: 5.8443 - val_accuracy: 0.5022\n","\n","Epoch 00755: val_loss did not improve from 0.22847\n","Epoch 756/1000\n"," - 5s - loss: 0.0084 - accuracy: 0.9984 - val_loss: 3.2378 - val_accuracy: 0.5042\n","\n","Epoch 00756: val_loss did not improve from 0.22847\n","Epoch 757/1000\n"," - 5s - loss: 0.0098 - accuracy: 0.9979 - val_loss: 6.2065 - val_accuracy: 0.5101\n","\n","Epoch 00757: val_loss did not improve from 0.22847\n","Epoch 758/1000\n"," - 5s - loss: 0.0086 - accuracy: 0.9982 - val_loss: 3.7028 - val_accuracy: 0.5027\n","\n","Epoch 00758: val_loss did not improve from 0.22847\n","Epoch 759/1000\n"," - 5s - loss: 0.0083 - accuracy: 0.9985 - val_loss: 5.1526 - val_accuracy: 0.5057\n","\n","Epoch 00759: val_loss did not improve from 0.22847\n","Epoch 760/1000\n"," - 5s - loss: 0.0084 - accuracy: 0.9980 - val_loss: 3.6938 - val_accuracy: 0.5007\n","\n","Epoch 00760: val_loss did not improve from 0.22847\n","Epoch 761/1000\n"," - 5s - loss: 0.0091 - accuracy: 0.9979 - val_loss: 6.5398 - val_accuracy: 0.5022\n","\n","Epoch 00761: val_loss did not improve from 0.22847\n","Epoch 762/1000\n"," - 5s - loss: 0.0071 - accuracy: 0.9990 - val_loss: 5.1582 - val_accuracy: 0.5047\n","\n","Epoch 00762: val_loss did not improve from 0.22847\n","Epoch 763/1000\n"," - 5s - loss: 0.0083 - accuracy: 0.9985 - val_loss: 8.3668 - val_accuracy: 0.5022\n","\n","Epoch 00763: val_loss did not improve from 0.22847\n","Epoch 764/1000\n"," - 5s - loss: 0.0072 - accuracy: 0.9990 - val_loss: 4.6162 - val_accuracy: 0.4948\n","\n","Epoch 00764: val_loss did not improve from 0.22847\n","Epoch 765/1000\n"," - 5s - loss: 0.0066 - accuracy: 0.9992 - val_loss: 7.1681 - val_accuracy: 0.4988\n","\n","Epoch 00765: val_loss did not improve from 0.22847\n","Epoch 766/1000\n"," - 5s - loss: 0.0078 - accuracy: 0.9982 - val_loss: 4.8598 - val_accuracy: 0.4938\n","\n","Epoch 00766: val_loss did not improve from 0.22847\n","Epoch 767/1000\n"," - 5s - loss: 0.0095 - accuracy: 0.9977 - val_loss: 8.9468 - val_accuracy: 0.5066\n","\n","Epoch 00767: val_loss did not improve from 0.22847\n","Epoch 768/1000\n"," - 5s - loss: 0.0143 - accuracy: 0.9961 - val_loss: 2.5366 - val_accuracy: 0.4958\n","\n","Epoch 00768: val_loss did not improve from 0.22847\n","Epoch 769/1000\n"," - 5s - loss: 0.0089 - accuracy: 0.9980 - val_loss: 4.0888 - val_accuracy: 0.4998\n","\n","Epoch 00769: val_loss did not improve from 0.22847\n","Epoch 770/1000\n"," - 5s - loss: 0.0098 - accuracy: 0.9977 - val_loss: 4.0829 - val_accuracy: 0.4983\n","\n","Epoch 00770: val_loss did not improve from 0.22847\n","Epoch 771/1000\n"," - 5s - loss: 0.0093 - accuracy: 0.9977 - val_loss: 4.6750 - val_accuracy: 0.4988\n","\n","Epoch 00771: val_loss did not improve from 0.22847\n","Epoch 772/1000\n"," - 5s - loss: 0.0077 - accuracy: 0.9984 - val_loss: 9.8726 - val_accuracy: 0.4953\n","\n","Epoch 00772: val_loss did not improve from 0.22847\n","Epoch 773/1000\n"," - 5s - loss: 0.0080 - accuracy: 0.9985 - val_loss: 5.9216 - val_accuracy: 0.4953\n","\n","Epoch 00773: val_loss did not improve from 0.22847\n","Epoch 774/1000\n"," - 5s - loss: 0.0065 - accuracy: 0.9993 - val_loss: 3.1674 - val_accuracy: 0.5032\n","\n","Epoch 00774: val_loss did not improve from 0.22847\n","Epoch 775/1000\n"," - 5s - loss: 0.0092 - accuracy: 0.9979 - val_loss: 2.7284 - val_accuracy: 0.5027\n","\n","Epoch 00775: val_loss did not improve from 0.22847\n","Epoch 776/1000\n"," - 5s - loss: 0.0099 - accuracy: 0.9977 - val_loss: 7.7056 - val_accuracy: 0.5057\n","\n","Epoch 00776: val_loss did not improve from 0.22847\n","Epoch 777/1000\n"," - 5s - loss: 0.0127 - accuracy: 0.9966 - val_loss: 4.8613 - val_accuracy: 0.5002\n","\n","Epoch 00777: val_loss did not improve from 0.22847\n","Epoch 778/1000\n"," - 5s - loss: 0.0078 - accuracy: 0.9990 - val_loss: 8.1975 - val_accuracy: 0.4983\n","\n","Epoch 00778: val_loss did not improve from 0.22847\n","Epoch 779/1000\n"," - 5s - loss: 0.0089 - accuracy: 0.9977 - val_loss: 6.0532 - val_accuracy: 0.5086\n","\n","Epoch 00779: val_loss did not improve from 0.22847\n","Epoch 780/1000\n"," - 5s - loss: 0.0091 - accuracy: 0.9974 - val_loss: 4.5472 - val_accuracy: 0.4973\n","\n","Epoch 00780: val_loss did not improve from 0.22847\n","Epoch 781/1000\n"," - 5s - loss: 0.0104 - accuracy: 0.9974 - val_loss: 4.6147 - val_accuracy: 0.5042\n","\n","Epoch 00781: val_loss did not improve from 0.22847\n","Epoch 782/1000\n"," - 5s - loss: 0.0090 - accuracy: 0.9977 - val_loss: 4.6789 - val_accuracy: 0.5037\n","\n","Epoch 00782: val_loss did not improve from 0.22847\n","Epoch 783/1000\n"," - 5s - loss: 0.0072 - accuracy: 0.9989 - val_loss: 4.3073 - val_accuracy: 0.4993\n","\n","Epoch 00783: val_loss did not improve from 0.22847\n","Epoch 784/1000\n"," - 5s - loss: 0.0076 - accuracy: 0.9982 - val_loss: 6.1936 - val_accuracy: 0.5027\n","\n","Epoch 00784: val_loss did not improve from 0.22847\n","Epoch 785/1000\n"," - 5s - loss: 0.0069 - accuracy: 0.9992 - val_loss: 5.0971 - val_accuracy: 0.5042\n","\n","Epoch 00785: val_loss did not improve from 0.22847\n","Epoch 786/1000\n"," - 5s - loss: 0.0088 - accuracy: 0.9980 - val_loss: 1.0880 - val_accuracy: 0.4978\n","\n","Epoch 00786: val_loss did not improve from 0.22847\n","Epoch 787/1000\n"," - 5s - loss: 0.0123 - accuracy: 0.9961 - val_loss: 3.8123 - val_accuracy: 0.5012\n","\n","Epoch 00787: val_loss did not improve from 0.22847\n","Epoch 788/1000\n"," - 5s - loss: 0.0099 - accuracy: 0.9974 - val_loss: 4.6722 - val_accuracy: 0.4998\n","\n","Epoch 00788: val_loss did not improve from 0.22847\n","Epoch 789/1000\n"," - 5s - loss: 0.0075 - accuracy: 0.9984 - val_loss: 4.2251 - val_accuracy: 0.5007\n","\n","Epoch 00789: val_loss did not improve from 0.22847\n","Epoch 790/1000\n"," - 5s - loss: 0.0113 - accuracy: 0.9972 - val_loss: 7.9915 - val_accuracy: 0.4968\n","\n","Epoch 00790: val_loss did not improve from 0.22847\n","Epoch 791/1000\n"," - 5s - loss: 0.0090 - accuracy: 0.9985 - val_loss: 7.1223 - val_accuracy: 0.4958\n","\n","Epoch 00791: val_loss did not improve from 0.22847\n","Epoch 792/1000\n"," - 5s - loss: 0.0069 - accuracy: 0.9992 - val_loss: 2.6445 - val_accuracy: 0.4973\n","\n","Epoch 00792: val_loss did not improve from 0.22847\n","Epoch 793/1000\n"," - 5s - loss: 0.0064 - accuracy: 0.9987 - val_loss: 3.3620 - val_accuracy: 0.4963\n","\n","Epoch 00793: val_loss did not improve from 0.22847\n","Epoch 794/1000\n"," - 5s - loss: 0.0103 - accuracy: 0.9977 - val_loss: 3.8246 - val_accuracy: 0.5047\n","\n","Epoch 00794: val_loss did not improve from 0.22847\n","Epoch 795/1000\n"," - 5s - loss: 0.0086 - accuracy: 0.9987 - val_loss: 1.9450 - val_accuracy: 0.5032\n","\n","Epoch 00795: val_loss did not improve from 0.22847\n","Epoch 796/1000\n"," - 5s - loss: 0.0065 - accuracy: 0.9992 - val_loss: 6.6341 - val_accuracy: 0.5027\n","\n","Epoch 00796: val_loss did not improve from 0.22847\n","Epoch 797/1000\n"," - 5s - loss: 0.0075 - accuracy: 0.9989 - val_loss: 5.7770 - val_accuracy: 0.5027\n","\n","Epoch 00797: val_loss did not improve from 0.22847\n","Epoch 798/1000\n"," - 5s - loss: 0.0057 - accuracy: 0.9992 - val_loss: 3.2816 - val_accuracy: 0.4998\n","\n","Epoch 00798: val_loss did not improve from 0.22847\n","Epoch 799/1000\n"," - 5s - loss: 0.0064 - accuracy: 0.9992 - val_loss: 10.1158 - val_accuracy: 0.5017\n","\n","Epoch 00799: val_loss did not improve from 0.22847\n","Epoch 800/1000\n"," - 5s - loss: 0.0087 - accuracy: 0.9987 - val_loss: 5.3376 - val_accuracy: 0.5022\n","\n","Epoch 00800: val_loss did not improve from 0.22847\n","Epoch 801/1000\n"," - 5s - loss: 0.0094 - accuracy: 0.9980 - val_loss: 2.8702 - val_accuracy: 0.5042\n","\n","Epoch 00801: val_loss did not improve from 0.22847\n","Epoch 802/1000\n"," - 5s - loss: 0.0060 - accuracy: 0.9990 - val_loss: 5.2125 - val_accuracy: 0.5096\n","\n","Epoch 00802: val_loss did not improve from 0.22847\n","Epoch 803/1000\n"," - 5s - loss: 0.0057 - accuracy: 0.9995 - val_loss: 5.6626 - val_accuracy: 0.5066\n","\n","Epoch 00803: val_loss did not improve from 0.22847\n","Epoch 804/1000\n"," - 5s - loss: 0.0063 - accuracy: 0.9989 - val_loss: 8.5787 - val_accuracy: 0.5027\n","\n","Epoch 00804: val_loss did not improve from 0.22847\n","Epoch 805/1000\n"," - 5s - loss: 0.0076 - accuracy: 0.9984 - val_loss: 6.7324 - val_accuracy: 0.5032\n","\n","Epoch 00805: val_loss did not improve from 0.22847\n","Epoch 806/1000\n"," - 5s - loss: 0.0076 - accuracy: 0.9989 - val_loss: 3.9903 - val_accuracy: 0.4958\n","\n","Epoch 00806: val_loss did not improve from 0.22847\n","Epoch 807/1000\n"," - 5s - loss: 0.0086 - accuracy: 0.9980 - val_loss: 5.2219 - val_accuracy: 0.5032\n","\n","Epoch 00807: val_loss did not improve from 0.22847\n","Epoch 808/1000\n"," - 5s - loss: 0.0086 - accuracy: 0.9989 - val_loss: 1.5585 - val_accuracy: 0.5012\n","\n","Epoch 00808: val_loss did not improve from 0.22847\n","Epoch 809/1000\n"," - 5s - loss: 0.0100 - accuracy: 0.9979 - val_loss: 6.3706 - val_accuracy: 0.4978\n","\n","Epoch 00809: val_loss did not improve from 0.22847\n","Epoch 810/1000\n"," - 5s - loss: 0.0086 - accuracy: 0.9982 - val_loss: 2.4528 - val_accuracy: 0.4973\n","\n","Epoch 00810: val_loss did not improve from 0.22847\n","Epoch 811/1000\n"," - 5s - loss: 0.0061 - accuracy: 0.9993 - val_loss: 8.2216 - val_accuracy: 0.5037\n","\n","Epoch 00811: val_loss did not improve from 0.22847\n","Epoch 812/1000\n"," - 5s - loss: 0.0083 - accuracy: 0.9979 - val_loss: 6.1192 - val_accuracy: 0.4998\n","\n","Epoch 00812: val_loss did not improve from 0.22847\n","Epoch 813/1000\n"," - 5s - loss: 0.0075 - accuracy: 0.9987 - val_loss: 2.9145 - val_accuracy: 0.5071\n","\n","Epoch 00813: val_loss did not improve from 0.22847\n","Epoch 814/1000\n"," - 5s - loss: 0.0066 - accuracy: 0.9990 - val_loss: 1.7112 - val_accuracy: 0.4948\n","\n","Epoch 00814: val_loss did not improve from 0.22847\n","Epoch 815/1000\n"," - 5s - loss: 0.0062 - accuracy: 0.9987 - val_loss: 3.1278 - val_accuracy: 0.5047\n","\n","Epoch 00815: val_loss did not improve from 0.22847\n","Epoch 816/1000\n"," - 5s - loss: 0.0082 - accuracy: 0.9979 - val_loss: 4.3533 - val_accuracy: 0.5042\n","\n","Epoch 00816: val_loss did not improve from 0.22847\n","Epoch 817/1000\n"," - 5s - loss: 0.0103 - accuracy: 0.9979 - val_loss: 7.0544 - val_accuracy: 0.5062\n","\n","Epoch 00817: val_loss did not improve from 0.22847\n","Epoch 818/1000\n"," - 5s - loss: 0.0066 - accuracy: 0.9992 - val_loss: 3.1920 - val_accuracy: 0.5086\n","\n","Epoch 00818: val_loss did not improve from 0.22847\n","Epoch 819/1000\n"," - 5s - loss: 0.0088 - accuracy: 0.9984 - val_loss: 10.0263 - val_accuracy: 0.5037\n","\n","Epoch 00819: val_loss did not improve from 0.22847\n","Epoch 820/1000\n"," - 5s - loss: 0.0112 - accuracy: 0.9975 - val_loss: 3.5310 - val_accuracy: 0.5086\n","\n","Epoch 00820: val_loss did not improve from 0.22847\n","Epoch 821/1000\n"," - 5s - loss: 0.0066 - accuracy: 0.9984 - val_loss: 4.3726 - val_accuracy: 0.5081\n","\n","Epoch 00821: val_loss did not improve from 0.22847\n","Epoch 822/1000\n"," - 5s - loss: 0.0058 - accuracy: 0.9993 - val_loss: 2.8680 - val_accuracy: 0.5032\n","\n","Epoch 00822: val_loss did not improve from 0.22847\n","Epoch 823/1000\n"," - 5s - loss: 0.0040 - accuracy: 0.9998 - val_loss: 6.5159 - val_accuracy: 0.4998\n","\n","Epoch 00823: val_loss did not improve from 0.22847\n","Epoch 824/1000\n"," - 5s - loss: 0.0050 - accuracy: 0.9995 - val_loss: 5.5235 - val_accuracy: 0.5052\n","\n","Epoch 00824: val_loss did not improve from 0.22847\n","Epoch 825/1000\n"," - 5s - loss: 0.0089 - accuracy: 0.9982 - val_loss: 5.2965 - val_accuracy: 0.5106\n","\n","Epoch 00825: val_loss did not improve from 0.22847\n","Epoch 826/1000\n"," - 5s - loss: 0.0088 - accuracy: 0.9979 - val_loss: 2.3560 - val_accuracy: 0.4978\n","\n","Epoch 00826: val_loss did not improve from 0.22847\n","Epoch 827/1000\n"," - 5s - loss: 0.0074 - accuracy: 0.9979 - val_loss: 4.6575 - val_accuracy: 0.5032\n","\n","Epoch 00827: val_loss did not improve from 0.22847\n","Epoch 828/1000\n"," - 5s - loss: 0.0106 - accuracy: 0.9972 - val_loss: 5.3484 - val_accuracy: 0.4993\n","\n","Epoch 00828: val_loss did not improve from 0.22847\n","Epoch 829/1000\n"," - 5s - loss: 0.0055 - accuracy: 0.9992 - val_loss: 5.6352 - val_accuracy: 0.5047\n","\n","Epoch 00829: val_loss did not improve from 0.22847\n","Epoch 830/1000\n"," - 5s - loss: 0.0105 - accuracy: 0.9977 - val_loss: 3.1976 - val_accuracy: 0.5057\n","\n","Epoch 00830: val_loss did not improve from 0.22847\n","Epoch 831/1000\n"," - 5s - loss: 0.0071 - accuracy: 0.9992 - val_loss: 6.1570 - val_accuracy: 0.5116\n","\n","Epoch 00831: val_loss did not improve from 0.22847\n","Epoch 832/1000\n"," - 5s - loss: 0.0070 - accuracy: 0.9990 - val_loss: 7.2366 - val_accuracy: 0.5027\n","\n","Epoch 00832: val_loss did not improve from 0.22847\n","Epoch 833/1000\n"," - 5s - loss: 0.0052 - accuracy: 0.9995 - val_loss: 6.8513 - val_accuracy: 0.4968\n","\n","Epoch 00833: val_loss did not improve from 0.22847\n","Epoch 834/1000\n"," - 5s - loss: 0.0062 - accuracy: 0.9992 - val_loss: 2.4431 - val_accuracy: 0.5037\n","\n","Epoch 00834: val_loss did not improve from 0.22847\n","Epoch 835/1000\n"," - 5s - loss: 0.0069 - accuracy: 0.9989 - val_loss: 8.4930 - val_accuracy: 0.5086\n","\n","Epoch 00835: val_loss did not improve from 0.22847\n","Epoch 836/1000\n"," - 5s - loss: 0.0063 - accuracy: 0.9995 - val_loss: 8.5293 - val_accuracy: 0.5062\n","\n","Epoch 00836: val_loss did not improve from 0.22847\n","Epoch 837/1000\n"," - 5s - loss: 0.0067 - accuracy: 0.9992 - val_loss: 7.2872 - val_accuracy: 0.5057\n","\n","Epoch 00837: val_loss did not improve from 0.22847\n","Epoch 838/1000\n"," - 5s - loss: 0.0071 - accuracy: 0.9985 - val_loss: 3.5128 - val_accuracy: 0.5066\n","\n","Epoch 00838: val_loss did not improve from 0.22847\n","Epoch 839/1000\n"," - 5s - loss: 0.0070 - accuracy: 0.9992 - val_loss: 2.7285 - val_accuracy: 0.4988\n","\n","Epoch 00839: val_loss did not improve from 0.22847\n","Epoch 840/1000\n"," - 5s - loss: 0.0054 - accuracy: 0.9990 - val_loss: 3.6366 - val_accuracy: 0.5126\n","\n","Epoch 00840: val_loss did not improve from 0.22847\n","Epoch 841/1000\n"," - 5s - loss: 0.0064 - accuracy: 0.9990 - val_loss: 2.2648 - val_accuracy: 0.5116\n","\n","Epoch 00841: val_loss did not improve from 0.22847\n","Epoch 842/1000\n"," - 5s - loss: 0.0058 - accuracy: 0.9997 - val_loss: 4.4601 - val_accuracy: 0.5022\n","\n","Epoch 00842: val_loss did not improve from 0.22847\n","Epoch 843/1000\n"," - 5s - loss: 0.0064 - accuracy: 0.9993 - val_loss: 4.4926 - val_accuracy: 0.4993\n","\n","Epoch 00843: val_loss did not improve from 0.22847\n","Epoch 844/1000\n"," - 5s - loss: 0.0071 - accuracy: 0.9984 - val_loss: 7.4078 - val_accuracy: 0.4953\n","\n","Epoch 00844: val_loss did not improve from 0.22847\n","Epoch 845/1000\n"," - 5s - loss: 0.0077 - accuracy: 0.9987 - val_loss: 6.5766 - val_accuracy: 0.5062\n","\n","Epoch 00845: val_loss did not improve from 0.22847\n","Epoch 846/1000\n"," - 5s - loss: 0.0067 - accuracy: 0.9989 - val_loss: 4.5646 - val_accuracy: 0.5066\n","\n","Epoch 00846: val_loss did not improve from 0.22847\n","Epoch 847/1000\n"," - 5s - loss: 0.0075 - accuracy: 0.9982 - val_loss: 5.6830 - val_accuracy: 0.4998\n","\n","Epoch 00847: val_loss did not improve from 0.22847\n","Epoch 848/1000\n"," - 5s - loss: 0.0062 - accuracy: 0.9990 - val_loss: 8.5019 - val_accuracy: 0.5027\n","\n","Epoch 00848: val_loss did not improve from 0.22847\n","Epoch 849/1000\n"," - 5s - loss: 0.0074 - accuracy: 0.9985 - val_loss: 8.5871 - val_accuracy: 0.5057\n","\n","Epoch 00849: val_loss did not improve from 0.22847\n","Epoch 850/1000\n"," - 5s - loss: 0.0078 - accuracy: 0.9984 - val_loss: 6.6055 - val_accuracy: 0.5047\n","\n","Epoch 00850: val_loss did not improve from 0.22847\n","Epoch 851/1000\n"," - 5s - loss: 0.0075 - accuracy: 0.9980 - val_loss: 3.7905 - val_accuracy: 0.4973\n","\n","Epoch 00851: val_loss did not improve from 0.22847\n","Epoch 852/1000\n"," - 5s - loss: 0.0068 - accuracy: 0.9985 - val_loss: 2.4036 - val_accuracy: 0.4919\n","\n","Epoch 00852: val_loss did not improve from 0.22847\n","Epoch 853/1000\n"," - 5s - loss: 0.0067 - accuracy: 0.9987 - val_loss: 5.1434 - val_accuracy: 0.4973\n","\n","Epoch 00853: val_loss did not improve from 0.22847\n","Epoch 854/1000\n"," - 5s - loss: 0.0066 - accuracy: 0.9989 - val_loss: 1.7279 - val_accuracy: 0.4963\n","\n","Epoch 00854: val_loss did not improve from 0.22847\n","Epoch 855/1000\n"," - 5s - loss: 0.0073 - accuracy: 0.9990 - val_loss: 9.2228 - val_accuracy: 0.5022\n","\n","Epoch 00855: val_loss did not improve from 0.22847\n","Epoch 856/1000\n"," - 5s - loss: 0.0054 - accuracy: 0.9995 - val_loss: 5.9692 - val_accuracy: 0.4983\n","\n","Epoch 00856: val_loss did not improve from 0.22847\n","Epoch 857/1000\n"," - 5s - loss: 0.0063 - accuracy: 0.9990 - val_loss: 6.5501 - val_accuracy: 0.4870\n","\n","Epoch 00857: val_loss did not improve from 0.22847\n","Epoch 858/1000\n"," - 5s - loss: 0.0108 - accuracy: 0.9972 - val_loss: 3.8143 - val_accuracy: 0.4938\n","\n","Epoch 00858: val_loss did not improve from 0.22847\n","Epoch 859/1000\n"," - 5s - loss: 0.0091 - accuracy: 0.9977 - val_loss: 8.8273 - val_accuracy: 0.4978\n","\n","Epoch 00859: val_loss did not improve from 0.22847\n","Epoch 860/1000\n"," - 5s - loss: 0.0095 - accuracy: 0.9972 - val_loss: 4.8517 - val_accuracy: 0.5017\n","\n","Epoch 00860: val_loss did not improve from 0.22847\n","Epoch 861/1000\n"," - 5s - loss: 0.0078 - accuracy: 0.9987 - val_loss: 10.2857 - val_accuracy: 0.5012\n","\n","Epoch 00861: val_loss did not improve from 0.22847\n","Epoch 862/1000\n"," - 5s - loss: 0.0055 - accuracy: 0.9993 - val_loss: 8.2307 - val_accuracy: 0.4978\n","\n","Epoch 00862: val_loss did not improve from 0.22847\n","Epoch 863/1000\n"," - 5s - loss: 0.0062 - accuracy: 0.9990 - val_loss: 5.2277 - val_accuracy: 0.5032\n","\n","Epoch 00863: val_loss did not improve from 0.22847\n","Epoch 864/1000\n"," - 5s - loss: 0.0055 - accuracy: 0.9989 - val_loss: 2.6395 - val_accuracy: 0.5047\n","\n","Epoch 00864: val_loss did not improve from 0.22847\n","Epoch 865/1000\n"," - 5s - loss: 0.0063 - accuracy: 0.9990 - val_loss: 3.3227 - val_accuracy: 0.5091\n","\n","Epoch 00865: val_loss did not improve from 0.22847\n","Epoch 866/1000\n"," - 5s - loss: 0.0118 - accuracy: 0.9966 - val_loss: 7.1846 - val_accuracy: 0.5027\n","\n","Epoch 00866: val_loss did not improve from 0.22847\n","Epoch 867/1000\n"," - 5s - loss: 0.0069 - accuracy: 0.9987 - val_loss: 4.5439 - val_accuracy: 0.5032\n","\n","Epoch 00867: val_loss did not improve from 0.22847\n","Epoch 868/1000\n"," - 5s - loss: 0.0055 - accuracy: 0.9992 - val_loss: 5.6407 - val_accuracy: 0.4998\n","\n","Epoch 00868: val_loss did not improve from 0.22847\n","Epoch 869/1000\n"," - 5s - loss: 0.0050 - accuracy: 0.9990 - val_loss: 5.3697 - val_accuracy: 0.5017\n","\n","Epoch 00869: val_loss did not improve from 0.22847\n","Epoch 870/1000\n"," - 5s - loss: 0.0050 - accuracy: 0.9995 - val_loss: 8.5772 - val_accuracy: 0.4983\n","\n","Epoch 00870: val_loss did not improve from 0.22847\n","Epoch 871/1000\n"],"name":"stdout"},{"output_type":"error","ename":"KeyboardInterrupt","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-21-90a845b8dd2a>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     40\u001b[0m                     \u001b[0mvalidation_data\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mval_flow\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     41\u001b[0m                     \u001b[0mvalidation_steps\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx_val\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m/\u001b[0m \u001b[0mbatch_size\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 42\u001b[0;31m                     shuffle=False)\n\u001b[0m","\u001b[0;32m/tensorflow-1.15.2/python3.7/keras/legacy/interfaces.py\u001b[0m in \u001b[0;36mwrapper\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m     89\u001b[0m                 warnings.warn('Update your `' + object_name + '` call to the ' +\n\u001b[1;32m     90\u001b[0m                               'Keras 2 API: ' + signature, stacklevel=2)\n\u001b[0;32m---> 91\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     92\u001b[0m         \u001b[0mwrapper\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_original_function\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     93\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mwrapper\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/tensorflow-1.15.2/python3.7/keras/engine/training.py\u001b[0m in \u001b[0;36mfit_generator\u001b[0;34m(self, generator, steps_per_epoch, epochs, verbose, callbacks, validation_data, validation_steps, validation_freq, class_weight, max_queue_size, workers, use_multiprocessing, shuffle, initial_epoch)\u001b[0m\n\u001b[1;32m   1730\u001b[0m             \u001b[0muse_multiprocessing\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0muse_multiprocessing\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1731\u001b[0m             \u001b[0mshuffle\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mshuffle\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1732\u001b[0;31m             initial_epoch=initial_epoch)\n\u001b[0m\u001b[1;32m   1733\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1734\u001b[0m     \u001b[0;34m@\u001b[0m\u001b[0minterfaces\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlegacy_generator_methods_support\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/tensorflow-1.15.2/python3.7/keras/engine/training_generator.py\u001b[0m in \u001b[0;36mfit_generator\u001b[0;34m(model, generator, steps_per_epoch, epochs, verbose, callbacks, validation_data, validation_steps, validation_freq, class_weight, max_queue_size, workers, use_multiprocessing, shuffle, initial_epoch)\u001b[0m\n\u001b[1;32m    218\u001b[0m                                             \u001b[0msample_weight\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0msample_weight\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    219\u001b[0m                                             \u001b[0mclass_weight\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mclass_weight\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 220\u001b[0;31m                                             reset_metrics=False)\n\u001b[0m\u001b[1;32m    221\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    222\u001b[0m                 \u001b[0mouts\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mto_list\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mouts\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/tensorflow-1.15.2/python3.7/keras/engine/training.py\u001b[0m in \u001b[0;36mtrain_on_batch\u001b[0;34m(self, x, y, sample_weight, class_weight, reset_metrics)\u001b[0m\n\u001b[1;32m   1512\u001b[0m             \u001b[0mins\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mx\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0my\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0msample_weights\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1513\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_make_train_function\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1514\u001b[0;31m         \u001b[0moutputs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtrain_function\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mins\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1515\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1516\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mreset_metrics\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/tensorflow-1.15.2/python3.7/tensorflow_core/python/keras/backend.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, inputs)\u001b[0m\n\u001b[1;32m   3474\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3475\u001b[0m     fetched = self._callable_fn(*array_vals,\n\u001b[0;32m-> 3476\u001b[0;31m                                 run_metadata=self.run_metadata)\n\u001b[0m\u001b[1;32m   3477\u001b[0m     \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_call_fetch_callbacks\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfetched\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_fetches\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3478\u001b[0m     output_structure = nest.pack_sequence_as(\n","\u001b[0;32m/tensorflow-1.15.2/python3.7/tensorflow_core/python/client/session.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1470\u001b[0m         ret = tf_session.TF_SessionRunCallable(self._session._session,\n\u001b[1;32m   1471\u001b[0m                                                \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_handle\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1472\u001b[0;31m                                                run_metadata_ptr)\n\u001b[0m\u001b[1;32m   1473\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mrun_metadata\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1474\u001b[0m           \u001b[0mproto_data\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtf_session\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mTF_GetBuffer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrun_metadata_ptr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}]},{"cell_type":"code","metadata":{"id":"pfPMGMvm0rGu","colab":{"base_uri":"https://localhost:8080/","height":208},"executionInfo":{"status":"error","timestamp":1619345552258,"user_tz":-540,"elapsed":31546,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"}},"outputId":"7a383d3c-5dee-4f15-de58-af367d412e6b"},"source":["ckpt_path = current_path + 'ckpt/'\n","board_path = current_path + 'graph/'\n","# model_name = 'classifier_45_close_updown_pr_theta_non_shuffle_ex_02008.h5'\n","# model_name = 'classifier_45_close_updown_pr_theta.h5'\n","# model_name = 'classifier_45_close_updown_pr_theta_non_shuffle_0002.h5'\n","\n","model = keras.models.load_model(ckpt_path + model_name)"],"execution_count":null,"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-2-0aa29495aa07>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;31m# model_name = 'classifier_45_close_updown_pr_theta_non_shuffle_0002.h5'\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 7\u001b[0;31m \u001b[0mmodel\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mkeras\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmodels\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mload_model\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mckpt_path\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mmodel_name\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mNameError\u001b[0m: name 'keras' is not defined"]}]},{"cell_type":"code","metadata":{"id":"QlxBTT1tEKkB"},"source":["org_x_test = x_test\n","org_y_test = y_test\n","org_pr_test = pr_test"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"_JS3iA80ExQ6"},"source":["x_test = org_x_test\n","y_test = org_y_test\n","pr_test = org_pr_test"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"d3NzZSrbFgrB"},"source":["concat_x = np.vstack((org_x_test, new_input_x))\n","concat_y = np.vstack((org_y_test, np.where(new_input_pr > 1, 1, 0)))\n","concat_pr = np.vstack((org_pr_test, new_input_pr))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"zhRu2BIK792m"},"source":["# x_test = new_input_x\n","# y_test = np.where(new_input_pr > 1, 1, 0)\n","# pr_test = new_input_pr\n","\n","# x_test = org_x_test\n","# y_test = org_y_test\n","# pr_test = org_pr_test\n","\n","# x_test = x_train\n","# y_test = y_train\n","# pr_test = pr_train\n","\n","# x_test = x_val\n","# y_test = y_val\n","# pr_test = pr_val\n","\n","# x_test = concat_x\n","# y_test = np.where(concat_pr > 1, 1, 0)\n","# pr_test = concat_pr\n","\n","test_result = model.predict(x_test)\n","# test_result = model.predict(test_set)\n","\n","print('test_result.shape :', test_result.shape)\n","print('pr_val.shape :', pr_val.shape)\n","\n","y_score = test_result[:, [1]]\n","print('y_test[:5] :', y_test.reshape(-1,)[:5])\n","# print('np.unique(y_test) :', np.unique(y_test, return_counts=True))\n","print('y_score[:5] :', y_score[:5])\n","# print('np.unique(y_score) :', np.unique(y_score, return_counts=True))\n","\n","print('y_test.shape :', y_test.shape)\n","print('y_score.shape :', y_score.shape)\n","\n","print('len(y_test) :', len(y_test))\n","\n","#     precision recall curve   #\n","precision, recall, threshold = precision_recall_curve(y_test, y_score)\n","precision, recall = precision[:-1], recall[:-1]\n","\n","plt.plot(threshold, precision, label='precision')\n","plt.plot(threshold, recall, label='recall')\n","plt.legend()\n","plt.title('precision recall')\n","plt.show()\n","# print(y_pred)\n","\n","\n","threshold = [0.65]\n","# print('threshold :', threshold)\n","# break\n","\n","acc_pr_bythr = []\n","new_thresh = []\n","\n","for thresh in threshold:\n","  \n","  if thresh < 0.6:\n","      continue\n","\n","  y_pred = np.where(y_score[:, -1] > thresh, 1, 0)\n","  print('y_pred.shape :', y_pred.shape)\n","  # print('y_pred :', y_pred)\n","\n","  #     compare precision     #\n","\n","  print('precision :', precision_score(y_test, y_pred))\n","  print('recall :', recall_score(y_test, y_pred))\n","  print()\n","\n","  print('np.isnan(np.sum(x_test)) :', np.isnan(np.sum(x_test)))\n","  print('np.isnan(np.sum(y_test)) :', np.isnan(np.sum(y_test)))\n","\n","  # plot_confusion_matrix(best_model, x_test, y_test, normalize=None)\n","  # plt.show()  \n","  print()\n","\n","  #     check win-ratio improvement     #\n","  cmat = confusion_matrix(y_test, y_pred)\n","  # print(cmat)\n","  # print(np.sum(cmat, axis=1))\n","\n","  test_size = len(y_test)\n","  test_pr_list = pr_test\n","  print('origin ac_pr :', np.cumprod(test_pr_list)[-1])\n","\n","  org_wr = np.sum(cmat, axis=1)[-1] / sum(np.sum(cmat, axis=1))\n","  ml_wr = cmat[1][1] / np.sum(cmat, axis=0)[-1]\n","  print('win ratio improvement %.2f --> %.2f' % (org_wr, ml_wr))\n","\n","  # print('pr_test.shape :', pr_test.shape)\n","\n","  # print(y_pred)\n","  # print(test_pr_list)\n","  pred_pr_list = np.where(y_pred == 1, test_pr_list.reshape(-1, ), 1.0)\n","  # print('pred_pr_list.shape :', pred_pr_list.shape)\n","\n","  if np.cumprod(test_pr_list)[-1] < np.cumprod(pred_pr_list)[-1]:\n","    print('accum_pr increased ! : %.3f --> %.3f' % (np.cumprod(test_pr_list)[-1], np.cumprod(pred_pr_list)[-1]))\n","    print('thresh :', thresh)\n","    \n","  # if len(threshold) == 1:\n","    plt.figure(figsize=(10, 5))\n","    plt.subplot(121)\n","    plt.plot(np.cumprod(test_pr_list))\n","    plt.title('%.3f' % (np.cumprod(test_pr_list)[-1]))\n","  # plt.show()\n","\n","    plt.subplot(122)\n","    plt.plot(np.cumprod(pred_pr_list))\n","    plt.title('%.3f' % (np.cumprod(pred_pr_list)[-1]))\n","    plt.axvline(len(org_pr_test), linestyle='--', color='r')\n","    plt.show()\n","\n","\n","  acc_pr_bythr.append(np.cumprod(pred_pr_list)[-1])\n","  new_thresh.append(thresh)\n","\n","\n","print('acc_pr_bythr :', acc_pr_bythr)\n","\n","plt.figure(figsize=(10, 5))\n","plt.subplot(121)\n","plt.plot(threshold, precision, label='precision')\n","plt.plot(threshold, recall, label='recall')\n","plt.legend()\n","plt.title('precision recall')\n","# plt.show()\n","plt.subplot(122)\n","plt.plot(new_thresh, acc_pr_bythr)\n","plt.axhline(np.cumprod(test_pr_list)[-1], linestyle='--', color='r')\n","plt.show()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":199},"id":"TP6lH9u8PXPY","executionInfo":{"status":"ok","timestamp":1619160755603,"user_tz":-540,"elapsed":1235,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"}},"outputId":"f4ac5c0d-dcbf-4700-cc38-9e08e2a839de"},"source":["plt.figure(figsize=(50, 5))\n","plt.plot(np.cumprod(pred_pr_list)[len(org_pr_test):len(org_pr_test) + 10])\n","# plt.plot(np.cumprod(pred_pr_list)[len(org_pr_test) - 10:len(org_pr_test) + 10])\n","plt.title('%.3f' % (np.cumprod(pred_pr_list)[-1]))\n","# plt.axvline(len(org_pr_test), linestyle='--', color='r')\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 3600x360 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":276},"id":"yWU2mDnQMVlB","executionInfo":{"status":"ok","timestamp":1619105976180,"user_tz":-540,"elapsed":808,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"}},"outputId":"886f8c79-9b60-45ad-a67c-25183b813779"},"source":["# plt.show()\n","# plt.subplot(122)\n","plt.plot(new_thresh, acc_pr_bythr)\n","plt.axhline(np.cumprod(test_pr_list)[-1], linestyle='--', color='r')\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"-jo3k5MdhFyg"},"source":["#### **clustering output**"]},{"cell_type":"code","metadata":{"id":"njxxm-TJ-RP-"},"source":["# x_train_for_k = test_result.flatten().reshape(-1, 1)\n","x_train_for_k = test_result\n","print(x_train_for_k[:10])\n","# x_train_for_k = test_result[:, [1]]\n","pr_train = pr_test\n","\n","print('x_train_for_k.shape :', x_train_for_k.shape)\n","print('pr_train.shape :', pr_train.shape)\n","\n","K = range(2, 10)\n","s_dist = []\n","sil = []\n","for k in K:\n","  # if cen_data.shape[0] < k:\n","  #   break\n","\n","  km = KMeans(n_clusters=k)\n","  km = km.fit(x_train_for_k)\n","\n","  labels = km.labels_\n","  # print('len(labels) :', len(labels))\n","  # print('labels[:10] :', labels[:10])\n","  sil.append(silhouette_score(x_train_for_k, labels, metric='euclidean'))\n","\n","  # inertia = km.inertia_\n","  # s_dist.append(inertia)\n","\n","best_k = K[np.argmax(np.array(sil))]\n","\n","plt.figure(figsize=(10, 5))\n","plt.plot(K, sil)\n","plt.axvline(best_k, linestyle='--')\n","# plt.plot(K, s_dist)\n","plt.show()\n","\n","\n","\n","\n","\n","#   with best_k, label 별 pr_list 확인\n","km = KMeans(n_clusters=best_k)\n","km = km.fit(x_train_for_k)\n","\n","labels = km.labels_\n","\n","print(km.score(x_train_for_k))\n","print(len(labels), len(pr_train))\n","\n","\n","\n","\n","\n","#   label 별로 profit 을 저장, 승률을 확인한다\n","label_types = np.unique(labels, return_counts=False)\n","\n","label_pr_dict = {}\n","#   init dict   #\n","for label in label_types:\n","  label_pr_dict[label] = []\n","print(label_pr_dict)\n","# break\n","\n","for i, (label, pr) in enumerate(zip(labels, pr_train)):\n","  label_pr_dict[label].append(pr[0])\n","\n","  \n","# for label in label_types:\n","print(label_pr_dict)\n","\n","\n","\n","\n","\n","def win_ratio(list_x):\n","\n","  win_cnt = np.sum(np.array(list_x) > 1)\n","  return win_cnt / len(list_x)\n","\n","\n","def acc_pr(list_x):\n","\n","  return np.cumprod(np.array(list_x))[-1]\n","\n","\n","for key in label_pr_dict:\n","  \n","  print(key, ':', 'win_ratio : %.2f' % (win_ratio(label_pr_dict[key])), 'acc_pr : %.2f' % (acc_pr(label_pr_dict[key])))\n","\n","\n","\n","\n","\n","#     predict test && test 의 라벨에 따른 win_ratio 확인\n","# test_labels = km.predict(x_test)\n","# # print(test_labels)\n","\n","# label_pr_dict = {}\n","# #   init dict   #\n","# for label in label_types:\n","#   label_pr_dict[label] = []\n","# print(label_pr_dict)\n","# # break\n","\n","# for i, (label, pr) in enumerate(zip(test_labels, pr_test)):\n","#   label_pr_dict[label].append(pr[0])\n","\n","# for key in label_pr_dict:\n","\n","#   print(key, ':', 'win_ratio : %.2f' % (win_ratio(label_pr_dict[key])), 'acc_pr : %.2f' % (acc_pr(label_pr_dict[key])))\n","\n"],"execution_count":null,"outputs":[]}]}