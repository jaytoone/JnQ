{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"nbasicv2.0a_backi2_vsurvey_liqd(081920_epplot_modi).ipynb","provenance":[{"file_id":"1z4z_KLPzc6RWsxo3X_dHbpByxUAgjoMJ","timestamp":1583754134002}],"collapsed_sections":["Ci_jUnNTZbm9","EiXxraeZCj0c","ZnrBE3etCpIA","A4jHXvtbDSez","KdDz-s7ZwrC3","qkzeUFAyeJXK","2gxvme1PC6ha","FxJ1y8v2fkCR"],"toc_visible":true},"kernelspec":{"display_name":"Python [conda env:tensorflow2_p36]","language":"python","name":"conda-env-tensorflow2_p36-py"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.6.5"},"widgets":{"application/vnd.jupyter.widget-state+json":{"157aa7b9806b41fca291ba361ce34f93":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_view_name":"HBoxView","_dom_classes":[],"_model_name":"HBoxModel","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.5.0","box_style":"","layout":"IPY_MODEL_fe16ca1644f74186a6fa6b22df6fea08","_model_module":"@jupyter-widgets/controls","children":["IPY_MODEL_bbb96b2f1951479cb6036e4d0e44fddb","IPY_MODEL_eccc109855e34acdb98c6a6ca071a2dd"]}},"fe16ca1644f74186a6fa6b22df6fea08":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"bbb96b2f1951479cb6036e4d0e44fddb":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_view_name":"ProgressView","style":"IPY_MODEL_a694ee6bb546450eb4912c3d3cc93c37","_dom_classes":[],"description":" 54%","_model_name":"FloatProgressModel","bar_style":"danger","max":134,"_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":73,"_view_count":null,"_view_module_version":"1.5.0","orientation":"horizontal","min":0,"description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_b825406cccfe4825bb1351c241de5fed"}},"eccc109855e34acdb98c6a6ca071a2dd":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_view_name":"HTMLView","style":"IPY_MODEL_0ccf69f845064d5c8d608d5e0661f698","_dom_classes":[],"description":"","_model_name":"HTMLModel","placeholder":"​","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":" 73/134 [5:56:46&lt;6:05:25, 359.44s/it]","_view_count":null,"_view_module_version":"1.5.0","description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_712c37ef49ff446fa6e24f0e9b589e62"}},"a694ee6bb546450eb4912c3d3cc93c37":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_view_name":"StyleView","_model_name":"ProgressStyleModel","description_width":"initial","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","bar_color":null,"_model_module":"@jupyter-widgets/controls"}},"b825406cccfe4825bb1351c241de5fed":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"0ccf69f845064d5c8d608d5e0661f698":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_view_name":"StyleView","_model_name":"DescriptionStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"712c37ef49ff446fa6e24f0e9b589e62":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}}}}},"cells":[{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"AK9FjWwLOyay","executionInfo":{"status":"ok","timestamp":1629416980905,"user_tz":-540,"elapsed":19910,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"}},"outputId":"6e4db53c-7e65-4b11-f0aa-5c391a6cdc8e"},"source":["from google.colab import drive\n","drive.mount('/content/drive')\n","\n","import os, sys\n","\n","current_path = '/content/drive/My Drive/Colab Notebooks/JnQ/'\n","\n","os.chdir(current_path)"],"execution_count":1,"outputs":[{"output_type":"stream","text":["Mounted at /content/drive\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"8uqYv5StTazo"},"source":["# requirements"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9qGt60DKTZmf","executionInfo":{"status":"ok","timestamp":1629417001122,"user_tz":-540,"elapsed":20221,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"}},"outputId":"cb656f9e-1331-4093-ed38-1a893bab5e78"},"source":["!pip install mpl_finance\n","\n","import matplotlib.pyplot as plt\n","from matplotlib import gridspec\n","from tqdm.notebook import tqdm\n","from funcs_indicator import *\n","from funcs_for_trade import *\n","\n","import mpl_finance as mf\n","import os\n","import datetime\n","\n","import IPython\n","import IPython.display\n","import matplotlib as mpl\n","\n","import numpy as np\n","import pandas as pd\n","import seaborn as sns\n","import tensorflow as tf\n","\n","import pickle\n","\n","mpl.rcParams['figure.figsize'] = (8, 6)\n","mpl.rcParams['axes.grid'] = False"],"execution_count":2,"outputs":[{"output_type":"stream","text":["Collecting mpl_finance\n","  Downloading mpl_finance-0.10.1-py3-none-any.whl (8.4 kB)\n","Requirement already satisfied: matplotlib in /usr/local/lib/python3.7/dist-packages (from mpl_finance) (3.2.2)\n","Requirement already satisfied: python-dateutil>=2.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib->mpl_finance) (2.8.2)\n","Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.7/dist-packages (from matplotlib->mpl_finance) (0.10.0)\n","Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib->mpl_finance) (1.3.1)\n","Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,>=2.0.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib->mpl_finance) (2.4.7)\n","Requirement already satisfied: numpy>=1.11 in /usr/local/lib/python3.7/dist-packages (from matplotlib->mpl_finance) (1.19.5)\n","Requirement already satisfied: six in /usr/local/lib/python3.7/dist-packages (from cycler>=0.10->matplotlib->mpl_finance) (1.15.0)\n","Installing collected packages: mpl-finance\n","Successfully installed mpl-finance-0.10.1\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"Ci_jUnNTZbm9"},"source":["# load data"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_bXyS2yrZYC6","executionInfo":{"status":"ok","timestamp":1628634125735,"user_tz":-540,"elapsed":7922,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"}},"outputId":"19c0a1f1-0748-4cd0-fd7e-80430b170af0"},"source":["# interval = '30m'\n","interval = '1m'\n","\n","date_path = './candlestick_concated/%s/quant_v2/' % interval\n","file_list = os.listdir(date_path)\n","print((file_list))\n","\n","interval2 = '3m'\n","date_path2 = './candlestick_concated/%s/quant_v2/' % interval2\n","file_list2 = os.listdir(date_path2)\n","print((file_list2))\n","\n","interval3 = '5m'\n","date_path3 = './candlestick_concated/%s/quant_v2/' % interval3\n","file_list3 = os.listdir(date_path3)\n","print((file_list3))\n","\n","interval4 = '15m'\n","date_path4 = './candlestick_concated/%s/quant_v2/' % interval4\n","file_list4 = os.listdir(date_path4)\n","print((file_list4))\n","\n","interval5 = '30m'\n","date_path5 = './candlestick_concated/%s/quant_v2/' % interval5\n","file_list5 = os.listdir(date_path5)\n","print((file_list5))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["['2021-05-30 ETHUSDT.xlsx', '2021-04-30 ETHUSDT.xlsx', '2021-07-03 ETHUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx']\n","['2021-05-30 ETHUSDT.xlsx', '2021-04-30 ETHUSDT.xlsx', '2021-07-03 ETHUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx']\n","['2021-05-30 ETHUSDT.xlsx', '2021-04-30 ETHUSDT.xlsx', '2021-07-03 ETHUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx']\n","['2021-07-03 ETHUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx']\n","['2021-07-03 ETHUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx']\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"EiXxraeZCj0c"},"source":["# basic_func"]},{"cell_type":"code","metadata":{"id":"mi8H188MCiaH"},"source":["def sync_check(df, second_df, third_df, fourth_df, fifth_df):\n","\n","    #           supertrend          #\n","    ha_second_df = heikinashi(second_df)\n","    # ha_third_df = heikinashi(third_df)\n","    # print(ha_second_df.tail(10))\n","    # quit()\n","\n","    second_df['minor_ST1_Up'], second_df['minor_ST1_Down'], second_df['minor_ST1_Trend'] = supertrend(second_df, 10, 2)\n","    second_df['minor_ST2_Up'], second_df['minor_ST2_Down'], second_df['minor_ST2_Trend'] = supertrend(ha_second_df, 7,\n","                                                                                                      2)\n","    second_df['minor_ST3_Up'], second_df['minor_ST3_Down'], second_df['minor_ST3_Trend'] = supertrend(ha_second_df, 7,\n","                                                                                                      2.5)\n","    # print(df.head(20))\n","    # quit()\n","\n","    # startTime = time.time()\n","\n","    df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, second_df, [i for i in range(-9, 0, 1)]),\n","                              columns=['minor_ST1_Up', 'minor_ST1_Down', 'minor_ST1_Trend'\n","                                  , 'minor_ST2_Up', 'minor_ST2_Down', 'minor_ST2_Trend'\n","                                  , 'minor_ST3_Up', 'minor_ST3_Down', 'minor_ST3_Trend']))\n","\n","    # print(df[[\"minor_ST1_Up\", \"minor_ST2_Up\", \"minor_ST3_Up\"]].tail())\n","    # min_upper = np.minimum(df[\"minor_ST1_Up\"], df[\"minor_ST2_Up\"], df[\"minor_ST3_Up\"])\n","    # max_lower = np.maximum(df[\"minor_ST1_Down\"], df[\"minor_ST2_Down\"], df[\"minor_ST3_Down\"])\n","    min_upper = np.min(df[[\"minor_ST1_Up\", \"minor_ST2_Up\", \"minor_ST3_Up\"]], axis=1)\n","    max_lower = np.max(df[[\"minor_ST1_Down\", \"minor_ST2_Down\", \"minor_ST3_Down\"]], axis=1)\n","\n","    df['middle_line'] = (min_upper + max_lower) / 2\n","\n","    print(\"supertrend phase done\")\n","\n","\n","    #           lucid sar              #\n","    df['sar1'] = lucid_sar(df)\n","\n","    second_df['sar'] = lucid_sar(second_df)\n","    df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, second_df, [-1]), columns=['sar2']))\n","\n","    third_df['sar'] = lucid_sar(third_df)\n","    df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, third_df, [-1]), columns=['sar3']))\n","\n","    fourth_df['sar'] = lucid_sar(fourth_df)\n","    df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, fourth_df, [-1]), columns=['sar4']))\n","\n","    fifth_df['sar'] = lucid_sar(fifth_df)\n","    df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, fifth_df, [-1]), columns=['sar5']))\n","\n","    # print(df[['sar1', 'sar2']].tail(20))\n","    # print(df[['minor_ST1_Up', 'minor_ST1_Trend']].tail(20))\n","    # quit()\n","\n","    print(\"sar phase done\")\n","\n","\n","    \n","    #           ichimoku            #\n","    df['senkou_a1'], df['senkou_b1'] = ichimoku(df)\n","    \n","    second_df['senkou_a'], second_df['senkou_b'] = ichimoku(second_df)\n","    df = df.join( pd.DataFrame(index=df.index, data=to_lower_tf(df, second_df, [-2, -1]), columns=['senkou_a2', 'senkou_b2']))\n","    \n","    third_df['senkou_a'], third_df['senkou_b'] = ichimoku(third_df)\n","    df = df.join( pd.DataFrame(index=df.index, data=to_lower_tf(df, third_df, [-2, -1]), columns=['senkou_a3', 'senkou_b3']))\n","    \n","    fourth_df['senkou_a'], fourth_df['senkou_b'] = ichimoku(fourth_df)\n","    df = df.join( pd.DataFrame(index=df.index, data=to_lower_tf(df, fourth_df, [-2, -1]), columns=['senkou_a4', 'senkou_b4']))\n","    \n","    fifth_df['senkou_a'], fifth_df['senkou_b'] = ichimoku(fifth_df)\n","    df = df.join( pd.DataFrame(index=df.index, data=to_lower_tf(df, fifth_df, [-2, -1]), columns=['senkou_a5', 'senkou_b5']))\n","\n","\n","    #           1-2. displacement           #\n","    # df['senkou_a1'] = df['senkou_a1'].shift(26 - 1)\n","    # df['senkou_b1'] = df['senkou_b1'].shift(26 - 1)\n","    df.iloc[:, -10:] = df.iloc[:, -10:].shift(26 - 1)\n","\n","    print(\"cloud phase done\")\n","\n","    \n","    #           macd            #\n","    df['macd_hist1'] = macd(df)\n","    \n","    second_df['macd_hist'] = macd(second_df)\n","    df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, second_df, [-1]), columns=['macd_hist2']))\n","\n","    third_df['macd_hist'] = macd(third_df)\n","    df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, third_df, [-1]), columns=['macd_hist3']))\n","\n","    fourth_df['macd_hist'] = macd(fourth_df)\n","    df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, fourth_df, [-1]), columns=['macd_hist4']))\n","\n","    fifth_df['macd_hist'] = macd(fifth_df)\n","    df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, fifth_df, [-1]), columns=['macd_hist5']))\n","\n","\n","    print(\"macd phase done\")\n","\n","\n","    #         trix        #\n","    df['trix1'] = trix_hist(df, 14, 1, 5)\n","    \n","    second_df['trix'] = trix_hist(second_df, 14, 1, 5)\n","    df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, second_df, [-1]), columns=['trix2']))\n","\n","    third_df['trix'] = trix_hist(third_df, 14, 1, 5)\n","    df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, third_df, [-1]), columns=['trix3']))\n","\n","    fourth_df['trix'] = trix_hist(fourth_df, 14, 1, 5)\n","    df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, fourth_df, [-1]), columns=['trix4']))\n","\n","    fifth_df['trix'] = trix_hist(fifth_df, 14, 1, 5)\n","    df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, fifth_df, [-1]), columns=['trix5']))\n","\n","\n","    #       stochastic      #\n","    df['stoch'] = stoch(df, 5, 3, 3)\n","    print(\"stochastic phase done\")\n","\n","    #       fisher      #\n","    df['fisher30'] = fisher(df, 30)\n","    df['fisher60'] = fisher(df, 60)\n","    df['fisher120'] = fisher(df, 120)\n","    print(\"fisher phase done\")\n","\n","    #       cctbbo      #\n","    df['cctbbo'], _ = cct_bbo(df, 21, 13)\n","    print(\"cctbbo phase done\")\n","\n","    \n","    #          add for ep           #\n","    df['min_upper'] = min_upper\n","    df['max_lower'] = max_lower\n","  \n","\n","    return df\n"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"ZnrBE3etCpIA"},"source":["# make & save res_df"]},{"cell_type":"code","metadata":{"id":"X1g9vGP0UnTT","colab":{"base_uri":"https://localhost:8080/","height":1000,"referenced_widgets":["157aa7b9806b41fca291ba361ce34f93","fe16ca1644f74186a6fa6b22df6fea08","bbb96b2f1951479cb6036e4d0e44fddb","eccc109855e34acdb98c6a6ca071a2dd","a694ee6bb546450eb4912c3d3cc93c37","b825406cccfe4825bb1351c241de5fed","0ccf69f845064d5c8d608d5e0661f698","712c37ef49ff446fa6e24f0e9b589e62"]},"executionInfo":{"status":"error","timestamp":1628430088456,"user_tz":-540,"elapsed":21408991,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"}},"outputId":"0466d3b5-4a9d-4162-b071-ebb431a22bf9"},"source":["pd.set_option('display.max_rows', 500)\n","pd.set_option('display.max_columns', 500)\n","pd.set_option('display.width', 1000)\n","\n","\n","save_path = './candlestick_concated/res_df/'\n","\n","exist_list = os.listdir(save_path)\n","\n","\n","for i in tqdm(range(len(file_list))):\n","\n","  keys = [file_list[i]]\n","\n","  # if 'neo'.upper() not in file_list[i]:\n","    # continue\n","  \n","  # if 'btc'.upper() not in file_list[i]:\n","  #   continue\n","\n","  # if '2021-04-30'.upper() not in file_list[i]:\n","  # if '2021-05-30'.upper() not in file_list[i]:\n","  if '2021-06-30'.upper() not in file_list[i]:\n","  # if '2021-07-03'.upper() not in file_list[i]:\n","  # if '2021-07-01'.upper() not in file_list[i]:\n","    continue\n","\n","  \n","\n","  # if 'eth'.upper() in file_list[i]:\n","  # # if '2021-07-03'.upper() not in file_list[i]:\n","  # # if '2021-07-01'.upper() not in file_list[i]:\n","  #   continue\n","\n","  for key in keys:  \n","\n","    excel_name = key.replace(\".xlsx\", \"_fisher_backi2.xlsx\")\n","    excel_path = save_path + excel_name\n","\n","    if excel_name in exist_list:\n","      print(excel_name, \"already exist !\")\n","      continue\n","    \n","    df = pd.read_excel(date_path + key, index_col=0)\n","    second_df = pd.read_excel(date_path2 + key, index_col=0)\n","    third_df = pd.read_excel(date_path3 + key, index_col=0)\n","    fourth_df = pd.read_excel(date_path4 + key, index_col=0)\n","    fifth_df = pd.read_excel(date_path5 + key, index_col=0)\n","\n","    print(df.index[:2])\n","    print(second_df.index[:2])\n","    print(third_df.index[:2])\n","    print(fourth_df.index[:2])\n","    print(fifth_df.index[:2])\n","\n","    res_df = sync_check(df, second_df, third_df, fourth_df, fifth_df)\n","\n","\n","    res_df.to_excel(excel_path)\n","    print(\"res_df saved succesfully !\")"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"application/vnd.jupyter.widget-view+json":{"model_id":"157aa7b9806b41fca291ba361ce34f93","version_minor":0,"version_major":2},"text/plain":["HBox(children=(FloatProgress(value=0.0, max=134.0), HTML(value='')))"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["DatetimeIndex(['2021-06-01 00:00:59.999000', '2021-06-01 00:01:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:02:59.999000', '2021-05-31 00:05:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:04:59.999000', '2021-05-31 00:09:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:14:59.999000', '2021-05-31 00:29:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:29:59.999000', '2021-05-31 00:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","backing_i : -2\n","supertrend phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","sar phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","cloud phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","macd phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","stochastic phase done\n","fisher phase done\n","cctbbo phase done\n","res_df saved succesfully !\n","DatetimeIndex(['2021-06-01 00:00:59.999000', '2021-06-01 00:01:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:02:59.999000', '2021-05-31 00:05:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:04:59.999000', '2021-05-31 00:09:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:14:59.999000', '2021-05-31 00:29:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:29:59.999000', '2021-05-31 00:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","backing_i : -2\n","supertrend phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","sar phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","cloud phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","macd phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","stochastic phase done\n","fisher phase done\n","cctbbo phase done\n","res_df saved succesfully !\n","DatetimeIndex(['2021-06-01 00:00:59.999000', '2021-06-01 00:01:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:02:59.999000', '2021-05-31 00:05:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:04:59.999000', '2021-05-31 00:09:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:14:59.999000', '2021-05-31 00:29:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:29:59.999000', '2021-05-31 00:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","backing_i : -2\n","supertrend phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","sar phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","cloud phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","macd phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","stochastic phase done\n","fisher phase done\n","cctbbo phase done\n","res_df saved succesfully !\n","DatetimeIndex(['2021-06-01 00:00:59.999000', '2021-06-01 00:01:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:02:59.999000', '2021-05-31 00:05:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:04:59.999000', '2021-05-31 00:09:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:14:59.999000', '2021-05-31 00:29:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:29:59.999000', '2021-05-31 00:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","backing_i : -2\n","supertrend phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","sar phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","cloud phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","macd phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","stochastic phase done\n","fisher phase done\n","cctbbo phase done\n","res_df saved succesfully !\n","DatetimeIndex(['2021-06-01 00:00:59.999000', '2021-06-01 00:01:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:02:59.999000', '2021-05-31 00:05:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:04:59.999000', '2021-05-31 00:09:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:14:59.999000', '2021-05-31 00:29:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:29:59.999000', '2021-05-31 00:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","backing_i : -2\n","supertrend phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","sar phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","cloud phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","macd phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","stochastic phase done\n","fisher phase done\n","cctbbo phase done\n","res_df saved succesfully !\n","DatetimeIndex(['2021-06-01 00:00:59.999000', '2021-06-01 00:01:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:02:59.999000', '2021-05-31 00:05:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:04:59.999000', '2021-05-31 00:09:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:14:59.999000', '2021-05-31 00:29:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:29:59.999000', '2021-05-31 00:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","backing_i : -2\n","supertrend phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","sar phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","cloud phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","macd phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","stochastic phase done\n","fisher phase done\n","cctbbo phase done\n","res_df saved succesfully !\n","DatetimeIndex(['2021-06-01 00:00:59.999000', '2021-06-01 00:01:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:02:59.999000', '2021-05-31 00:05:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:04:59.999000', '2021-05-31 00:09:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:14:59.999000', '2021-05-31 00:29:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:29:59.999000', '2021-05-31 00:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","backing_i : -2\n","supertrend phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","sar phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","cloud phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","macd phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","stochastic phase done\n","fisher phase done\n","cctbbo phase done\n","res_df saved succesfully !\n","DatetimeIndex(['2021-06-01 00:00:59.999000', '2021-06-01 00:01:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:02:59.999000', '2021-05-31 00:05:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:04:59.999000', '2021-05-31 00:09:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:14:59.999000', '2021-05-31 00:29:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:29:59.999000', '2021-05-31 00:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","backing_i : -2\n","supertrend phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","sar phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","cloud phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","macd phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","stochastic phase done\n","fisher phase done\n","cctbbo phase done\n","res_df saved succesfully !\n","DatetimeIndex(['2021-06-01 00:00:59.999000', '2021-06-01 00:01:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:02:59.999000', '2021-05-31 00:05:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:04:59.999000', '2021-05-31 00:09:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:14:59.999000', '2021-05-31 00:29:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:29:59.999000', '2021-05-31 00:59:59.999000'], dtype='datetime64[ns]', freq=None)\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:670: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  iloc._setitem_with_indexer(indexer, value)\n"],"name":"stderr"},{"output_type":"stream","text":["backing_i : -2\n","supertrend phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","sar phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","cloud phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","macd phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","stochastic phase done\n","fisher phase done\n","cctbbo phase done\n","res_df saved succesfully !\n","DatetimeIndex(['2021-06-01 00:00:59.999000', '2021-06-01 00:01:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:02:59.999000', '2021-05-31 00:05:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:04:59.999000', '2021-05-31 00:09:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:14:59.999000', '2021-05-31 00:29:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:29:59.999000', '2021-05-31 00:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","backing_i : -2\n","supertrend phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","sar phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","cloud phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","macd phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","stochastic phase done\n","fisher phase done\n","cctbbo phase done\n","res_df saved succesfully !\n","DatetimeIndex(['2021-06-01 00:00:59.999000', '2021-06-01 00:01:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:02:59.999000', '2021-05-31 00:05:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:04:59.999000', '2021-05-31 00:09:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:14:59.999000', '2021-05-31 00:29:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:29:59.999000', '2021-05-31 00:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","backing_i : -2\n","supertrend phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","sar phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","cloud phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","macd phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","stochastic phase done\n","fisher phase done\n","cctbbo phase done\n","res_df saved succesfully !\n","DatetimeIndex(['2021-06-01 00:00:59.999000', '2021-06-01 00:01:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:02:59.999000', '2021-05-31 00:05:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:04:59.999000', '2021-05-31 00:09:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:14:59.999000', '2021-05-31 00:29:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:29:59.999000', '2021-05-31 00:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","backing_i : -2\n","supertrend phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","sar phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","cloud phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","macd phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","stochastic phase done\n","fisher phase done\n","cctbbo phase done\n","res_df saved succesfully !\n","DatetimeIndex(['2021-06-01 00:00:59.999000', '2021-06-01 00:01:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:02:59.999000', '2021-05-31 00:05:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:04:59.999000', '2021-05-31 00:09:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:14:59.999000', '2021-05-31 00:29:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:29:59.999000', '2021-05-31 00:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","backing_i : -2\n","supertrend phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","sar phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","cloud phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","macd phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","stochastic phase done\n","fisher phase done\n","cctbbo phase done\n","res_df saved succesfully !\n","DatetimeIndex(['2021-06-01 00:00:59.999000', '2021-06-01 00:01:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:02:59.999000', '2021-05-31 00:05:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:04:59.999000', '2021-05-31 00:09:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:14:59.999000', '2021-05-31 00:29:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:29:59.999000', '2021-05-31 00:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","backing_i : -2\n","supertrend phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","sar phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","cloud phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","macd phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","stochastic phase done\n","fisher phase done\n","cctbbo phase done\n","res_df saved succesfully !\n","DatetimeIndex(['2021-06-01 00:00:59.999000', '2021-06-01 00:01:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:02:59.999000', '2021-05-31 00:05:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:04:59.999000', '2021-05-31 00:09:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:14:59.999000', '2021-05-31 00:29:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:29:59.999000', '2021-05-31 00:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","backing_i : -2\n","supertrend phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","sar phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","cloud phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","macd phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","stochastic phase done\n","fisher phase done\n","cctbbo phase done\n","res_df saved succesfully !\n","DatetimeIndex(['2021-06-01 00:00:59.999000', '2021-06-01 00:01:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:02:59.999000', '2021-05-31 00:05:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:04:59.999000', '2021-05-31 00:09:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:14:59.999000', '2021-05-31 00:29:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:29:59.999000', '2021-05-31 00:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","backing_i : -2\n","supertrend phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","sar phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","cloud phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","macd phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","stochastic phase done\n","fisher phase done\n","cctbbo phase done\n","res_df saved succesfully !\n","DatetimeIndex(['2021-06-01 00:00:59.999000', '2021-06-01 00:01:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:02:59.999000', '2021-05-31 00:05:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:04:59.999000', '2021-05-31 00:09:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:14:59.999000', '2021-05-31 00:29:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:29:59.999000', '2021-05-31 00:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","backing_i : -2\n","supertrend phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","sar phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","cloud phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","macd phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","stochastic phase done\n","fisher phase done\n","cctbbo phase done\n","res_df saved succesfully !\n","DatetimeIndex(['2021-06-01 00:00:59.999000', '2021-06-01 00:01:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:02:59.999000', '2021-05-31 00:05:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:04:59.999000', '2021-05-31 00:09:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:14:59.999000', '2021-05-31 00:29:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:29:59.999000', '2021-05-31 00:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","backing_i : -2\n","supertrend phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","sar phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","cloud phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","macd phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","stochastic phase done\n","fisher phase done\n","cctbbo phase done\n","res_df saved succesfully !\n","DatetimeIndex(['2021-06-01 00:00:59.999000', '2021-06-01 00:01:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:02:59.999000', '2021-05-31 00:05:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:04:59.999000', '2021-05-31 00:09:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:14:59.999000', '2021-05-31 00:29:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:29:59.999000', '2021-05-31 00:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","backing_i : -2\n","supertrend phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","sar phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","cloud phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","macd phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","stochastic phase done\n","fisher phase done\n","cctbbo phase done\n","res_df saved succesfully !\n","DatetimeIndex(['2021-06-01 00:00:59.999000', '2021-06-01 00:01:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:02:59.999000', '2021-05-31 00:05:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:04:59.999000', '2021-05-31 00:09:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:14:59.999000', '2021-05-31 00:29:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:29:59.999000', '2021-05-31 00:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","backing_i : -2\n","supertrend phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","sar phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","cloud phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","macd phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","stochastic phase done\n","fisher phase done\n","cctbbo phase done\n","res_df saved succesfully !\n","DatetimeIndex(['2021-06-01 00:00:59.999000', '2021-06-01 00:01:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:02:59.999000', '2021-05-31 00:05:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:04:59.999000', '2021-05-31 00:09:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:14:59.999000', '2021-05-31 00:29:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:29:59.999000', '2021-05-31 00:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","backing_i : -2\n","supertrend phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","sar phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","cloud phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","macd phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","stochastic phase done\n","fisher phase done\n","cctbbo phase done\n","res_df saved succesfully !\n","DatetimeIndex(['2021-06-01 00:00:59.999000', '2021-06-01 00:01:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:02:59.999000', '2021-05-31 00:05:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:04:59.999000', '2021-05-31 00:09:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:14:59.999000', '2021-05-31 00:29:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:29:59.999000', '2021-05-31 00:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","backing_i : -2\n","supertrend phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","sar phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","cloud phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","macd phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","stochastic phase done\n","fisher phase done\n","cctbbo phase done\n","res_df saved succesfully !\n","DatetimeIndex(['2021-06-01 00:00:59.999000', '2021-06-01 00:01:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:02:59.999000', '2021-05-31 00:05:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:04:59.999000', '2021-05-31 00:09:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:14:59.999000', '2021-05-31 00:29:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:29:59.999000', '2021-05-31 00:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","backing_i : -2\n","supertrend phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","sar phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","cloud phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","macd phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","stochastic phase done\n","fisher phase done\n","cctbbo phase done\n","res_df saved succesfully !\n","DatetimeIndex(['2021-06-01 00:00:59.999000', '2021-06-01 00:01:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:02:59.999000', '2021-05-31 00:05:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:04:59.999000', '2021-05-31 00:09:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:14:59.999000', '2021-05-31 00:29:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:29:59.999000', '2021-05-31 00:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","backing_i : -2\n","supertrend phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","sar phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","cloud phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","macd phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","stochastic phase done\n","fisher phase done\n","cctbbo phase done\n","res_df saved succesfully !\n","DatetimeIndex(['2021-06-01 00:00:59.999000', '2021-06-01 00:01:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:02:59.999000', '2021-05-31 00:05:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:04:59.999000', '2021-05-31 00:09:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:14:59.999000', '2021-05-31 00:29:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:29:59.999000', '2021-05-31 00:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","backing_i : -2\n","supertrend phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","sar phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","cloud phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","macd phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","stochastic phase done\n","fisher phase done\n","cctbbo phase done\n","res_df saved succesfully !\n","DatetimeIndex(['2021-06-01 00:00:59.999000', '2021-06-01 00:01:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:02:59.999000', '2021-05-31 00:05:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:04:59.999000', '2021-05-31 00:09:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:14:59.999000', '2021-05-31 00:29:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:29:59.999000', '2021-05-31 00:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","backing_i : -2\n","supertrend phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","sar phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","cloud phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","macd phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","stochastic phase done\n","fisher phase done\n","cctbbo phase done\n","res_df saved succesfully !\n","DatetimeIndex(['2021-06-01 00:00:59.999000', '2021-06-01 00:01:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:02:59.999000', '2021-05-31 00:05:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:04:59.999000', '2021-05-31 00:09:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:14:59.999000', '2021-05-31 00:29:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:29:59.999000', '2021-05-31 00:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","backing_i : -2\n","supertrend phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","sar phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","cloud phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","macd phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","stochastic phase done\n","fisher phase done\n","cctbbo phase done\n","res_df saved succesfully !\n","DatetimeIndex(['2021-06-01 00:00:59.999000', '2021-06-01 00:01:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:02:59.999000', '2021-05-31 00:05:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:04:59.999000', '2021-05-31 00:09:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:14:59.999000', '2021-05-31 00:29:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:29:59.999000', '2021-05-31 00:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","backing_i : -2\n","supertrend phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","sar phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","cloud phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","macd phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","stochastic phase done\n","fisher phase done\n","cctbbo phase done\n","res_df saved succesfully !\n","DatetimeIndex(['2021-06-01 00:00:59.999000', '2021-06-01 00:01:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:02:59.999000', '2021-05-31 00:05:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:04:59.999000', '2021-05-31 00:09:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:14:59.999000', '2021-05-31 00:29:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:29:59.999000', '2021-05-31 00:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","backing_i : -2\n","supertrend phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","sar phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","cloud phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","macd phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","stochastic phase done\n","fisher phase done\n","cctbbo phase done\n","res_df saved succesfully !\n","DatetimeIndex(['2021-06-01 00:00:59.999000', '2021-06-01 00:01:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:02:59.999000', '2021-05-31 00:05:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:04:59.999000', '2021-05-31 00:09:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:14:59.999000', '2021-05-31 00:29:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:29:59.999000', '2021-05-31 00:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","backing_i : -2\n","supertrend phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","sar phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","cloud phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","macd phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","stochastic phase done\n","fisher phase done\n","cctbbo phase done\n","res_df saved succesfully !\n","DatetimeIndex(['2021-06-01 00:00:59.999000', '2021-06-01 00:01:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:02:59.999000', '2021-05-31 00:05:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:04:59.999000', '2021-05-31 00:09:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:14:59.999000', '2021-05-31 00:29:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:29:59.999000', '2021-05-31 00:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","backing_i : -2\n","supertrend phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","sar phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","cloud phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","macd phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","stochastic phase done\n","fisher phase done\n","cctbbo phase done\n","res_df saved succesfully !\n","DatetimeIndex(['2021-06-01 00:00:59.999000', '2021-06-01 00:01:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:02:59.999000', '2021-05-31 00:05:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:04:59.999000', '2021-05-31 00:09:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:14:59.999000', '2021-05-31 00:29:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:29:59.999000', '2021-05-31 00:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","backing_i : -2\n","supertrend phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","sar phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","cloud phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","macd phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","stochastic phase done\n","fisher phase done\n","cctbbo phase done\n","res_df saved succesfully !\n","DatetimeIndex(['2021-06-01 00:00:59.999000', '2021-06-01 00:01:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:02:59.999000', '2021-05-31 00:05:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:04:59.999000', '2021-05-31 00:09:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:14:59.999000', '2021-05-31 00:29:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:29:59.999000', '2021-05-31 00:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","backing_i : -2\n","supertrend phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","sar phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","cloud phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","macd phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","stochastic phase done\n","fisher phase done\n","cctbbo phase done\n","res_df saved succesfully !\n","DatetimeIndex(['2021-06-01 00:00:59.999000', '2021-06-01 00:01:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:02:59.999000', '2021-05-31 00:05:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:04:59.999000', '2021-05-31 00:09:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:14:59.999000', '2021-05-31 00:29:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:29:59.999000', '2021-05-31 00:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","backing_i : -2\n","supertrend phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","sar phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","cloud phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","macd phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","stochastic phase done\n","fisher phase done\n","cctbbo phase done\n","res_df saved succesfully !\n","DatetimeIndex(['2021-06-01 00:00:59.999000', '2021-06-01 00:01:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:02:59.999000', '2021-05-31 00:05:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:04:59.999000', '2021-05-31 00:09:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:14:59.999000', '2021-05-31 00:29:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:29:59.999000', '2021-05-31 00:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","backing_i : -2\n","supertrend phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","sar phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","cloud phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","macd phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","stochastic phase done\n","fisher phase done\n","cctbbo phase done\n","res_df saved succesfully !\n","DatetimeIndex(['2021-06-01 00:00:59.999000', '2021-06-01 00:01:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:02:59.999000', '2021-05-31 00:05:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:04:59.999000', '2021-05-31 00:09:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:14:59.999000', '2021-05-31 00:29:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:29:59.999000', '2021-05-31 00:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","backing_i : -2\n","supertrend phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","sar phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","cloud phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","macd phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","stochastic phase done\n","fisher phase done\n","cctbbo phase done\n","res_df saved succesfully !\n","DatetimeIndex(['2021-06-01 00:00:59.999000', '2021-06-01 00:01:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:02:59.999000', '2021-05-31 00:05:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:04:59.999000', '2021-05-31 00:09:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:14:59.999000', '2021-05-31 00:29:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:29:59.999000', '2021-05-31 00:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","backing_i : -2\n","supertrend phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","sar phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","cloud phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","macd phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","stochastic phase done\n","fisher phase done\n","cctbbo phase done\n","res_df saved succesfully !\n","DatetimeIndex(['2021-06-01 00:00:59.999000', '2021-06-01 00:01:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:02:59.999000', '2021-05-31 00:05:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:04:59.999000', '2021-05-31 00:09:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:14:59.999000', '2021-05-31 00:29:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:29:59.999000', '2021-05-31 00:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","backing_i : -2\n","supertrend phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","sar phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","cloud phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","macd phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","stochastic phase done\n","fisher phase done\n","cctbbo phase done\n","res_df saved succesfully !\n","DatetimeIndex(['2021-06-01 00:00:59.999000', '2021-06-01 00:01:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:02:59.999000', '2021-05-31 00:05:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:04:59.999000', '2021-05-31 00:09:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:14:59.999000', '2021-05-31 00:29:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:29:59.999000', '2021-05-31 00:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","backing_i : -2\n","supertrend phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","sar phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","cloud phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","macd phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","stochastic phase done\n","fisher phase done\n","cctbbo phase done\n","res_df saved succesfully !\n","DatetimeIndex(['2021-06-01 00:00:59.999000', '2021-06-01 00:01:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:02:59.999000', '2021-05-31 00:05:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:04:59.999000', '2021-05-31 00:09:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:14:59.999000', '2021-05-31 00:29:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:29:59.999000', '2021-05-31 00:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","backing_i : -2\n","supertrend phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","sar phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","cloud phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","macd phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","stochastic phase done\n","fisher phase done\n","cctbbo phase done\n","res_df saved succesfully !\n","DatetimeIndex(['2021-06-01 00:00:59.999000', '2021-06-01 00:01:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:02:59.999000', '2021-05-31 00:05:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:04:59.999000', '2021-05-31 00:09:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:14:59.999000', '2021-05-31 00:29:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:29:59.999000', '2021-05-31 00:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","backing_i : -2\n","supertrend phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","sar phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","cloud phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","macd phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","stochastic phase done\n","fisher phase done\n","cctbbo phase done\n","res_df saved succesfully !\n","DatetimeIndex(['2021-06-01 00:00:59.999000', '2021-06-01 00:01:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:02:59.999000', '2021-05-31 00:05:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:04:59.999000', '2021-05-31 00:09:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:14:59.999000', '2021-05-31 00:29:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:29:59.999000', '2021-05-31 00:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","backing_i : -2\n","supertrend phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","sar phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","cloud phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","macd phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","stochastic phase done\n","fisher phase done\n","cctbbo phase done\n","res_df saved succesfully !\n","DatetimeIndex(['2021-06-01 00:00:59.999000', '2021-06-01 00:01:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:02:59.999000', '2021-05-31 00:05:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:04:59.999000', '2021-05-31 00:09:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:14:59.999000', '2021-05-31 00:29:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:29:59.999000', '2021-05-31 00:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","backing_i : -2\n","supertrend phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","sar phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","cloud phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","macd phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","stochastic phase done\n","fisher phase done\n","cctbbo phase done\n","res_df saved succesfully !\n","DatetimeIndex(['2021-06-01 00:00:59.999000', '2021-06-01 00:01:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:02:59.999000', '2021-05-31 00:05:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:04:59.999000', '2021-05-31 00:09:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:14:59.999000', '2021-05-31 00:29:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:29:59.999000', '2021-05-31 00:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","backing_i : -2\n","supertrend phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","sar phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","cloud phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","macd phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","stochastic phase done\n","fisher phase done\n","cctbbo phase done\n","res_df saved succesfully !\n","DatetimeIndex(['2021-06-01 00:00:59.999000', '2021-06-01 00:01:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:02:59.999000', '2021-05-31 00:05:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:04:59.999000', '2021-05-31 00:09:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:14:59.999000', '2021-05-31 00:29:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:29:59.999000', '2021-05-31 00:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","backing_i : -2\n","supertrend phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","sar phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","cloud phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","macd phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","stochastic phase done\n","fisher phase done\n","cctbbo phase done\n","res_df saved succesfully !\n","DatetimeIndex(['2021-06-01 00:00:59.999000', '2021-06-01 00:01:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:02:59.999000', '2021-05-31 00:05:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:04:59.999000', '2021-05-31 00:09:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:14:59.999000', '2021-05-31 00:29:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:29:59.999000', '2021-05-31 00:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","backing_i : -2\n","supertrend phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","sar phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","cloud phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","macd phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","stochastic phase done\n","fisher phase done\n","cctbbo phase done\n","res_df saved succesfully !\n","DatetimeIndex(['2021-06-01 00:00:59.999000', '2021-06-01 00:01:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:02:59.999000', '2021-05-31 00:05:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:04:59.999000', '2021-05-31 00:09:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:14:59.999000', '2021-05-31 00:29:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:29:59.999000', '2021-05-31 00:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","backing_i : -2\n","supertrend phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","sar phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","cloud phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","macd phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","stochastic phase done\n","fisher phase done\n","cctbbo phase done\n","res_df saved succesfully !\n","DatetimeIndex(['2021-06-01 00:00:59.999000', '2021-06-01 00:01:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:02:59.999000', '2021-05-31 00:05:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:04:59.999000', '2021-05-31 00:09:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:14:59.999000', '2021-05-31 00:29:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:29:59.999000', '2021-05-31 00:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","backing_i : -2\n","supertrend phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","sar phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","cloud phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","macd phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","stochastic phase done\n","fisher phase done\n","cctbbo phase done\n","res_df saved succesfully !\n","DatetimeIndex(['2021-06-01 00:00:59.999000', '2021-06-01 00:01:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:02:59.999000', '2021-05-31 00:05:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:04:59.999000', '2021-05-31 00:09:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:14:59.999000', '2021-05-31 00:29:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:29:59.999000', '2021-05-31 00:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","backing_i : -2\n","supertrend phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","sar phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","cloud phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","macd phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","stochastic phase done\n","fisher phase done\n","cctbbo phase done\n","res_df saved succesfully !\n","DatetimeIndex(['2021-06-01 00:00:59.999000', '2021-06-01 00:01:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:02:59.999000', '2021-05-31 00:05:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:04:59.999000', '2021-05-31 00:09:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:14:59.999000', '2021-05-31 00:29:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:29:59.999000', '2021-05-31 00:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","backing_i : -2\n","supertrend phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","sar phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","cloud phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","macd phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","stochastic phase done\n","fisher phase done\n","cctbbo phase done\n","res_df saved succesfully !\n","DatetimeIndex(['2021-06-01 00:00:59.999000', '2021-06-01 00:01:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:02:59.999000', '2021-05-31 00:05:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:04:59.999000', '2021-05-31 00:09:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:14:59.999000', '2021-05-31 00:29:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:29:59.999000', '2021-05-31 00:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","backing_i : -2\n","supertrend phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","sar phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","cloud phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","macd phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","stochastic phase done\n","fisher phase done\n","cctbbo phase done\n","res_df saved succesfully !\n","DatetimeIndex(['2021-06-01 00:00:59.999000', '2021-06-01 00:01:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:02:59.999000', '2021-05-31 00:05:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:04:59.999000', '2021-05-31 00:09:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:14:59.999000', '2021-05-31 00:29:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:29:59.999000', '2021-05-31 00:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","backing_i : -2\n","supertrend phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","sar phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","cloud phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","macd phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","stochastic phase done\n","fisher phase done\n","cctbbo phase done\n","res_df saved succesfully !\n","DatetimeIndex(['2021-06-01 00:00:59.999000', '2021-06-01 00:01:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:02:59.999000', '2021-05-31 00:05:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:04:59.999000', '2021-05-31 00:09:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:14:59.999000', '2021-05-31 00:29:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:29:59.999000', '2021-05-31 00:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","backing_i : -2\n","supertrend phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","sar phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","cloud phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","macd phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","stochastic phase done\n","fisher phase done\n","cctbbo phase done\n","res_df saved succesfully !\n","DatetimeIndex(['2021-06-01 00:00:59.999000', '2021-06-01 00:01:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:02:59.999000', '2021-05-31 00:05:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:04:59.999000', '2021-05-31 00:09:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:14:59.999000', '2021-05-31 00:29:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:29:59.999000', '2021-05-31 00:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","backing_i : -2\n","supertrend phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","sar phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","cloud phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","macd phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","stochastic phase done\n","fisher phase done\n","cctbbo phase done\n","res_df saved succesfully !\n","DatetimeIndex(['2021-06-01 00:00:59.999000', '2021-06-01 00:01:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:02:59.999000', '2021-05-31 00:05:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:04:59.999000', '2021-05-31 00:09:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:14:59.999000', '2021-05-31 00:29:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:29:59.999000', '2021-05-31 00:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","backing_i : -2\n","supertrend phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","sar phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","cloud phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","macd phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","stochastic phase done\n","fisher phase done\n","cctbbo phase done\n","res_df saved succesfully !\n","DatetimeIndex(['2021-06-01 00:00:59.999000', '2021-06-01 00:01:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:02:59.999000', '2021-05-31 00:05:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:04:59.999000', '2021-05-31 00:09:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:14:59.999000', '2021-05-31 00:29:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:29:59.999000', '2021-05-31 00:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","backing_i : -2\n","supertrend phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","sar phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","cloud phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","macd phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","stochastic phase done\n","fisher phase done\n","cctbbo phase done\n","res_df saved succesfully !\n","DatetimeIndex(['2021-06-01 00:00:59.999000', '2021-06-01 00:01:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:02:59.999000', '2021-05-31 00:05:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:04:59.999000', '2021-05-31 00:09:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:14:59.999000', '2021-05-31 00:29:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:29:59.999000', '2021-05-31 00:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","backing_i : -2\n","supertrend phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","sar phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","cloud phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","macd phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","stochastic phase done\n","fisher phase done\n","cctbbo phase done\n","res_df saved succesfully !\n","DatetimeIndex(['2021-06-01 00:00:59.999000', '2021-06-01 00:01:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:02:59.999000', '2021-05-31 00:05:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:04:59.999000', '2021-05-31 00:09:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:14:59.999000', '2021-05-31 00:29:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:29:59.999000', '2021-05-31 00:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","backing_i : -2\n","supertrend phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","sar phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","cloud phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","macd phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","stochastic phase done\n","fisher phase done\n","cctbbo phase done\n","res_df saved succesfully !\n","DatetimeIndex(['2021-06-01 00:00:59.999000', '2021-06-01 00:01:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:02:59.999000', '2021-05-31 00:05:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:04:59.999000', '2021-05-31 00:09:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:14:59.999000', '2021-05-31 00:29:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:29:59.999000', '2021-05-31 00:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","backing_i : -2\n","supertrend phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","sar phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","cloud phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","macd phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","stochastic phase done\n","fisher phase done\n","cctbbo phase done\n","res_df saved succesfully !\n","DatetimeIndex(['2021-06-01 00:00:59.999000', '2021-06-01 00:01:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:02:59.999000', '2021-05-31 00:05:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:04:59.999000', '2021-05-31 00:09:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:14:59.999000', '2021-05-31 00:29:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:29:59.999000', '2021-05-31 00:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","backing_i : -2\n","supertrend phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","sar phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","cloud phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","macd phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","stochastic phase done\n","fisher phase done\n","cctbbo phase done\n","res_df saved succesfully !\n","DatetimeIndex(['2021-06-18 12:31:59.999000', '2021-06-18 12:32:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-18 12:32:59.999000', '2021-06-18 12:35:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-18 12:34:59.999000', '2021-06-18 12:39:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-18 12:44:59.999000', '2021-06-18 12:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-18 12:59:59.999000', '2021-06-18 13:29:59.999000'], dtype='datetime64[ns]', freq=None)\n","backing_i : -2\n"],"name":"stdout"},{"output_type":"error","ename":"IndexError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mIndexError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-5-dba01bb4fdbe>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     54\u001b[0m     \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfifth_df\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mindex\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     55\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 56\u001b[0;31m     \u001b[0mres_df\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msync_check\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msecond_df\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mthird_df\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfourth_df\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfifth_df\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     57\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     58\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-4-85fed81a2590>\u001b[0m in \u001b[0;36msync_check\u001b[0;34m(df, second_df, third_df, fourth_df, fifth_df)\u001b[0m\n\u001b[1;32m     17\u001b[0m     \u001b[0;31m# startTime = time.time()\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     18\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 19\u001b[0;31m     df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, second_df, [i for i in range(-9, 0, 1)]),\n\u001b[0m\u001b[1;32m     20\u001b[0m                               columns=['minor_ST1_Up', 'minor_ST1_Down', 'minor_ST1_Trend'\n\u001b[1;32m     21\u001b[0m                                   \u001b[0;34m,\u001b[0m \u001b[0;34m'minor_ST2_Up'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'minor_ST2_Down'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'minor_ST2_Trend'\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/content/drive/My Drive/Colab Notebooks/JnQ/funcs_for_trade.py\u001b[0m in \u001b[0;36mto_lower_tf\u001b[0;34m(ltf_df, htf_df, column, show_info, backing_i)\u001b[0m\n\u001b[1;32m    425\u001b[0m         \u001b[0;31m# temp_list = [htf_df[column].iloc[backing_i]] * interval\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    426\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 427\u001b[0;31m         \u001b[0mtemp_list\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mhtf_df\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0miloc\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mbacking_i\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcolumn\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    428\u001b[0m         \u001b[0mtemp_list\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtile\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtemp_list\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0minterval\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    429\u001b[0m         \u001b[0mvalue_list\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvstack\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtemp_list\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalue_list\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m    871\u001b[0m                     \u001b[0;31m# AttributeError for IntervalTree get_value\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    872\u001b[0m                     \u001b[0;32mpass\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 873\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_getitem_tuple\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    874\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    875\u001b[0m             \u001b[0;31m# we by definition only have the 0th axis\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m_getitem_tuple\u001b[0;34m(self, tup)\u001b[0m\n\u001b[1;32m   1441\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_getitem_tuple\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtup\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mTuple\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1442\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1443\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_has_valid_tuple\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtup\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1444\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1445\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_getitem_lowerdim\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtup\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m_has_valid_tuple\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m    700\u001b[0m                 \u001b[0;32mraise\u001b[0m \u001b[0mIndexingError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Too many indexers\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    701\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 702\u001b[0;31m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_validate_key\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mk\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mi\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    703\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mValueError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0merr\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    704\u001b[0m                 raise ValueError(\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m_validate_key\u001b[0;34m(self, key, axis)\u001b[0m\n\u001b[1;32m   1365\u001b[0m             \u001b[0;31m# check that the key does not exceed the maximum size of the index\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1366\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marr\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0marr\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmax\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m>=\u001b[0m \u001b[0mlen_axis\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0marr\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m<\u001b[0m \u001b[0;34m-\u001b[0m\u001b[0mlen_axis\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1367\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mIndexError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"positional indexers are out-of-bounds\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1368\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1369\u001b[0m             \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"Can only index by location with a [{self._valid_types}]\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mIndexError\u001b[0m: positional indexers are out-of-bounds"]}]},{"cell_type":"markdown","metadata":{"id":"A4jHXvtbDSez"},"source":["# load res_df"]},{"cell_type":"code","metadata":{"id":"uH88bMlZDWc3"},"source":["save_path = './candlestick_concated/res_df/'\n","\n","# key = '2021-07-03 ETHUSDT.xlsx'\n","# key = '2021-07-01 ETHUSDT.xlsx'\n","key = '2021-07-01 ETHUSDT_backi2.xlsx'\n","# key = '2021-06-30 ETHUSDT_backi2.xlsx'\n","# key = '2021-06-30 BTCUSDT_backi2.xlsx'\n","# key = '2021-06-30 XRPUSDT_backi2.xlsx'\n","# key = '2021-06-30 ETHUSDT_backi1.xlsx'\n","res_df = pd.read_excel(save_path + key, index_col=0)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"KdDz-s7ZwrC3"},"source":["# sync check"]},{"cell_type":"code","metadata":{"id":"4r4H4DAovfsi"},"source":["plot_size = 300\n","\n","\n","#         select plot columns       #\n","basic_cols = [0, 1, 2, 3, 5, 6, 8, 9, 11, 12, 14] # you don't need to touch\n","\n","sar_cols = [15, 18] # 15 ~ 19\n","ichimoku_cols = [20, 21]  # 20 ~ 29\n","macd_cols = [30]  # 30 ~ 34\n","\n","input_cols = basic_cols + sar_cols + ichimoku_cols + macd_cols\n","\n","\n","\n","#         do plot       #\n","plot_df = res_df.iloc[-plot_size:, input_cols]\n","\n","fig = plt.figure(figsize=(8, 6))\n","ax = fig.add_subplot(111)\n","\n","# fig.show()\n","# fig.canvas.draw()\n","\n","temp_ohlc = plot_df.values[:, :4]\n","index = np.arange(len(temp_ohlc))\n","candle = np.hstack((np.reshape(index, (-1, 1)), temp_ohlc))\n","mf.candlestick_ohlc(ax, candle, width=0.5, colorup='r', colordown='b')\n","\n","# print(plot_df.values[:, 4:])\n","plt.plot(plot_df.values[:, [4, 6, 8]], 'r', alpha=1)  # upper\n","plt.plot(plot_df.values[:, [5, 7, 9]], 'b', alpha=1)  # lower\n","plt.plot(plot_df.values[:, [10]], 'g', alpha=1)  # middle\n","\n","plt.plot(plot_df.values[:, [11]], 'c*', alpha=1, markersize=5)  # sar mic\n","plt.plot(plot_df.values[:, [12]], 'co', alpha=1, markersize=7)  # sar mac\n","\n","plt.fill_between(np.arange(len(plot_df)), plot_df.values[:, 13], plot_df.values[:, 14],\n","                  where=plot_df.values[:, 13] >= plot_df.values[:, 14], facecolor='g', alpha=0.5) # ichimoku\n","plt.fill_between(np.arange(len(plot_df)), plot_df.values[:, 13], plot_df.values[:, 14],\n","                  where=plot_df.values[:, 13] <= plot_df.values[:, 14], facecolor='r', alpha=0.5)\n","\n","\n","\n","plt.show()\n","# plt.draw()\n","plt.close()\n","# plt.pause(1e-3)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"qNGeuYuGDXfv"},"source":["# pr check with strategy"]},{"cell_type":"markdown","metadata":{"id":"qkzeUFAyeJXK"},"source":["### save sample res_dfs"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"dIL0k_VEeL6B","executionInfo":{"status":"ok","timestamp":1628489290709,"user_tz":-540,"elapsed":310678,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"}},"outputId":"630f2687-e959-4fe4-f4e7-abf22c4bbc74"},"source":["save_path = './candlestick_concated/res_df/'\n","res_df_files = os.listdir(save_path)\n","\n","print(res_df_files)\n","\n","res_df_dict = {}\n","\n","\n","sample_cnt = 15\n","\n","for k_i, key in enumerate(res_df_files):\n","  # if '2021-04-30'.upper() not in key:\n","  # if '2021-05-30'.upper() not in key:\n","  if '2021-06-30'.upper() not in key:\n","  # if '2021-07-03'.upper() not in key:\n","  # if '2021-07-01'.upper() not in key:\n","    continue\n","\n","  # if \"link\".upper() not in key:\n","  # if \"eth\".upper() not in key:\n","  #   continue\n","\n","  if \"_fisher_backi2\" not in key:\n","    continue\n","\n","  if sample_cnt == 15:\n","    dict_name = \"%s_res_dfs.pkl\" % key.split(\".\")[0]\n","    print(\"dict_name :\", dict_name)\n","\n","  res_df = pd.read_excel(save_path + key, index_col=0)  \n","\n","  res_df_dict[key] = res_df\n","  print(key, \"saved to dict !\")\n","\n","  #     save with pickle    #\n","  with open(save_path + dict_name, 'wb') as f:\n","    pickle.dump(res_df_dict, f)\n","\n","  sample_cnt -= 1\n","\n","  if sample_cnt < 0:\n","    break\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["['2021-07-03 ETHUSDT.xlsx_backup', '2021-07-03 ETHUSDT.xlsx', '2021-06-30 ETHUSDT_question.xlsx', '2021-06-30 ETHUSDT_backi1.xlsx', '2021-06-30 ETHUSDT_backi2.xlsx', '2021-07-01 ETHUSDT_backi1.xlsx', '2021-07-01 ETHUSDT_backi2.xlsx', '2021-06-30 BTCUSDT_backi2.xlsx', '2021-06-30 XRPUSDT_backi2.xlsx', '2021-06-30 LINKUSDT_backi2.xlsx', '2021-06-30 ADAUSDT_backi2.xlsx', '2021-06-30 ETCUSDT_backi2.xlsx', '2021-06-30 LTCUSDT_backi2.xlsx', '2021-06-30 EOSUSDT_backi2.xlsx', '2021-06-30 BCHUSDT_backi2.xlsx', '2021-06-30 XLMUSDT_backi2.xlsx', '2021-07-01 BTCUSDT_backi2.xlsx', '2021-07-01 BCHUSDT_backi2.xlsx', '2021-07-01 XRPUSDT_backi2.xlsx', '2021-07-01 EOSUSDT_backi2.xlsx', '2021-07-01 LTCUSDT_backi2.xlsx', '2021-07-01 ETCUSDT_backi2.xlsx', '2021-07-01 LINKUSDT_backi2.xlsx', '2021-07-01 XLMUSDT_backi2.xlsx', '2021-07-01 ADAUSDT_backi2.xlsx', '2021-06-30 ETHUSDTmacd5355_backi2.xlsx', '2021-06-30 BTCUSDTmacd5355_backi2.xlsx', '2021-06-30 BCHUSDTmacd5355_backi2.xlsx', '2021-06-30 XRPUSDTmacd5355_backi2.xlsx', '2021-06-30 EOSUSDTmacd5355_backi2.xlsx', '2021-06-30 LTCUSDTmacd5355_backi2.xlsx', '2021-06-30 ETCUSDTmacd5355_backi2.xlsx', '2021-06-30 LINKUSDTmacd5355_backi2.xlsx', '2021-06-30 XLMUSDTmacd5355_backi2.xlsx', '2021-06-30 ADAUSDTmacd5355_backi2.xlsx', '2021-06-30 BTCUSDT_trix_backi2.xlsx', '2021-06-30 BCHUSDT_trix_backi2.xlsx', '2021-06-30 XRPUSDT_trix_backi2.xlsx', '2021-06-30 EOSUSDT_trix_backi2.xlsx', '2021-06-30 LTCUSDT_trix_backi2.xlsx', '2021-06-30 ETCUSDT_trix_backi2.xlsx', '2021-06-30 LINKUSDT_trix_backi2.xlsx', '2021-06-30 XLMUSDT_trix_backi2.xlsx', '2021-06-30 ADAUSDT_trix_backi2.xlsx', '2021-06-30 ETHUSDT_trix_backi2.xlsx', '2021-06-30 SUSHIUSDT_trix_backi2.xlsx', '2021-06-30 CVCUSDT_trix_backi2.xlsx', '2021-06-30 BTSUSDT_trix_backi2.xlsx', '2021-06-30 HOTUSDT_trix_backi2.xlsx', '2021-06-30 ZRXUSDT_trix_backi2.xlsx', '2021-06-30 QTUMUSDT_trix_backi2.xlsx', '2021-06-30 IOTAUSDT_trix_backi2.xlsx', '2021-06-30 BTCBUSD_trix_backi2.xlsx', '2021-06-30 WAVESUSDT_trix_backi2.xlsx', '2021-06-30 LITUSDT_trix_backi2.xlsx', '2021-06-30 XTZUSDT_trix_backi2.xlsx', '2021-06-30 BNBUSDT_trix_backi2.xlsx', '2021-06-30 AKROUSDT_trix_backi2.xlsx', '2021-06-30 HNTUSDT_trix_backi2.xlsx', '2021-06-30 XMRUSDT_trix_backi2.xlsx', '2021-06-30 YFIUSDT_trix_backi2.xlsx', '2021-06-30 ALICEUSDT_trix_backi2.xlsx', '2021-06-30 ALPHAUSDT_trix_backi2.xlsx', '2021-06-30 SFPUSDT_trix_backi2.xlsx', '2021-06-30 REEFUSDT_trix_backi2.xlsx', '2021-06-30 BATUSDT_trix_backi2.xlsx', '2021-06-30 DOGEUSDT_trix_backi2.xlsx', '2021-06-30 TRXUSDT_trix_backi2.xlsx', '2021-06-30 RLCUSDT_trix_backi2.xlsx', '2021-06-30 BTCSTUSDT_trix_backi2.xlsx', '2021-06-30 STORJUSDT_trix_backi2.xlsx', '2021-06-30 SNXUSDT_trix_backi2.xlsx', '2021-06-30 NEOUSDT_trix_backi2.xlsx', '2021-06-30 UNFIUSDT_trix_backi2.xlsx', '2021-06-30 SANDUSDT_trix_backi2.xlsx', '2021-06-30 DASHUSDT_trix_backi2.xlsx', '2021-06-30 ETHUSDT_cctbbo_backi2.xlsx', '2021-06-30 BTCUSDT_cctbbo_backi2.xlsx', '2021-06-30 BCHUSDT_cctbbo_backi2.xlsx', '2021-06-30 XRPUSDT_cctbbo_backi2.xlsx', '2021-06-30 EOSUSDT_cctbbo_backi2.xlsx', '2021-06-30 LTCUSDT_cctbbo_backi2.xlsx', '2021-06-30 ETCUSDT_cctbbo_backi2.xlsx', '2021-06-30 LINKUSDT_cctbbo_backi2.xlsx', '2021-06-30 XLMUSDT_cctbbo_backi2.xlsx', '2021-06-30 ADAUSDT_cctbbo_backi2.xlsx', '2021-06-30 SUSHIUSDT_cctbbo_backi2.xlsx', '2021-06-30 CVCUSDT_cctbbo_backi2.xlsx', '2021-06-30 BTSUSDT_cctbbo_backi2.xlsx', '2021-06-30 HOTUSDT_cctbbo_backi2.xlsx', '2021-06-30 ZRXUSDT_cctbbo_backi2.xlsx', '2021-06-30 QTUMUSDT_cctbbo_backi2.xlsx', '2021-06-30 IOTAUSDT_cctbbo_backi2.xlsx', '2021-06-30 BTCBUSD_cctbbo_backi2.xlsx', '2021-06-30 WAVESUSDT_cctbbo_backi2.xlsx', '2021-06-30 LITUSDT_cctbbo_backi2.xlsx', '2021-06-30 XTZUSDT_cctbbo_backi2.xlsx', '2021-06-30 BNBUSDT_cctbbo_backi2.xlsx', '2021-06-30 AKROUSDT_cctbbo_backi2.xlsx', '2021-06-30 HNTUSDT_cctbbo_backi2.xlsx', '2021-06-30 XMRUSDT_cctbbo_backi2.xlsx', '2021-06-30 YFIUSDT_cctbbo_backi2.xlsx', '2021-06-30 ALICEUSDT_cctbbo_backi2.xlsx', '2021-06-30 ALPHAUSDT_cctbbo_backi2.xlsx', '2021-06-30 SFPUSDT_cctbbo_backi2.xlsx', '2021-06-30 REEFUSDT_cctbbo_backi2.xlsx', '2021-06-30 BATUSDT_cctbbo_backi2.xlsx', '2021-06-30 DOGEUSDT_cctbbo_backi2.xlsx', '2021-06-30 TRXUSDT_cctbbo_backi2.xlsx', '2021-06-30 RLCUSDT_cctbbo_backi2.xlsx', '2021-06-30 BTCSTUSDT_cctbbo_backi2.xlsx', '2021-06-30 ETHUSDT_cctbbo_backi2_res_dfs.pkl', '2021-06-30 ETHUSDT_533_cctbbo_backi2.xlsx', '2021-06-30 BTCUSDT_533_cctbbo_backi2.xlsx', '2021-06-30 BCHUSDT_533_cctbbo_backi2.xlsx', '2021-06-30 XRPUSDT_533_cctbbo_backi2.xlsx', '2021-06-30 EOSUSDT_533_cctbbo_backi2.xlsx', '2021-06-30 LTCUSDT_533_cctbbo_backi2.xlsx', '2021-06-30 ETCUSDT_533_cctbbo_backi2.xlsx', '2021-06-30 LINKUSDT_533_cctbbo_backi2.xlsx', '2021-06-30 XLMUSDT_533_cctbbo_backi2.xlsx', '2021-06-30 ADAUSDT_533_cctbbo_backi2.xlsx', '2021-06-30 SUSHIUSDT_533_cctbbo_backi2.xlsx', '2021-06-30 CVCUSDT_533_cctbbo_backi2.xlsx', '2021-06-30 BTSUSDT_533_cctbbo_backi2.xlsx', '2021-06-30 HOTUSDT_533_cctbbo_backi2.xlsx', '2021-06-30 ZRXUSDT_533_cctbbo_backi2.xlsx', '2021-06-30 QTUMUSDT_533_cctbbo_backi2.xlsx', '2021-06-30 IOTAUSDT_533_cctbbo_backi2.xlsx', '2021-06-30 BTCBUSD_533_cctbbo_backi2.xlsx', '2021-06-30 WAVESUSDT_533_cctbbo_backi2.xlsx', '2021-06-30 LITUSDT_533_cctbbo_backi2.xlsx', '2021-06-30 XTZUSDT_533_cctbbo_backi2.xlsx', '2021-06-30 ETHUSDT_533_cctbbo_backi2_res_dfs.pkl', '2021-07-01 ETHUSDT_backi2_res_dfs.pkl', '2021-06-30 ETHUSDT_fisher_backi2.xlsx', '2021-06-30 BTCUSDT_fisher_backi2.xlsx', '2021-06-30 BCHUSDT_fisher_backi2.xlsx', '2021-06-30 XRPUSDT_fisher_backi2.xlsx', '2021-06-30 EOSUSDT_fisher_backi2.xlsx', '2021-06-30 LTCUSDT_fisher_backi2.xlsx', '2021-06-30 ETCUSDT_fisher_backi2.xlsx', '2021-06-30 LINKUSDT_fisher_backi2.xlsx', '2021-06-30 XLMUSDT_fisher_backi2.xlsx', '2021-06-30 ADAUSDT_fisher_backi2.xlsx', '2021-06-30 SUSHIUSDT_fisher_backi2.xlsx', '2021-06-30 CVCUSDT_fisher_backi2.xlsx', '2021-06-30 BTSUSDT_fisher_backi2.xlsx', '2021-06-30 HOTUSDT_fisher_backi2.xlsx', '2021-06-30 ZRXUSDT_fisher_backi2.xlsx', '2021-06-30 QTUMUSDT_fisher_backi2.xlsx', '2021-06-30 IOTAUSDT_fisher_backi2.xlsx', '2021-06-30 BTCBUSD_fisher_backi2.xlsx', '2021-06-30 WAVESUSDT_fisher_backi2.xlsx', '2021-06-30 LITUSDT_fisher_backi2.xlsx', '2021-06-30 XTZUSDT_fisher_backi2.xlsx', '2021-06-30 BNBUSDT_fisher_backi2.xlsx', '2021-06-30 AKROUSDT_fisher_backi2.xlsx', '2021-06-30 HNTUSDT_fisher_backi2.xlsx', '2021-06-30 XMRUSDT_fisher_backi2.xlsx', '2021-06-30 YFIUSDT_fisher_backi2.xlsx', '2021-06-30 ALICEUSDT_fisher_backi2.xlsx', '2021-06-30 ALPHAUSDT_fisher_backi2.xlsx', '2021-06-30 SFPUSDT_fisher_backi2.xlsx', '2021-06-30 REEFUSDT_fisher_backi2.xlsx', '2021-06-30 BATUSDT_fisher_backi2.xlsx', '2021-06-30 DOGEUSDT_fisher_backi2.xlsx', '2021-06-30 TRXUSDT_fisher_backi2.xlsx', '2021-06-30 RLCUSDT_fisher_backi2.xlsx', '2021-06-30 BTCSTUSDT_fisher_backi2.xlsx', '2021-06-30 STORJUSDT_fisher_backi2.xlsx', '2021-06-30 SNXUSDT_fisher_backi2.xlsx', '2021-06-30 NEOUSDT_fisher_backi2.xlsx', '2021-06-30 UNFIUSDT_fisher_backi2.xlsx', '2021-06-30 SANDUSDT_fisher_backi2.xlsx', '2021-06-30 DASHUSDT_fisher_backi2.xlsx', '2021-06-30 KAVAUSDT_fisher_backi2.xlsx', '2021-06-30 RUNEUSDT_fisher_backi2.xlsx', '2021-06-30 CTKUSDT_fisher_backi2.xlsx', '2021-06-30 CELRUSDT_fisher_backi2.xlsx', '2021-06-30 RSRUSDT_fisher_backi2.xlsx', '2021-06-30 DGBUSDT_fisher_backi2.xlsx', '2021-06-30 SKLUSDT_fisher_backi2.xlsx', '2021-06-30 RENUSDT_fisher_backi2.xlsx', '2021-06-30 TOMOUSDT_fisher_backi2.xlsx', '2021-06-30 MTLUSDT_fisher_backi2.xlsx', '2021-06-30 DODOUSDT_fisher_backi2.xlsx', '2021-06-30 EGLDUSDT_fisher_backi2.xlsx', '2021-06-30 KSMUSDT_fisher_backi2.xlsx', '2021-06-30 ONTUSDT_fisher_backi2.xlsx', '2021-06-30 VETUSDT_fisher_backi2.xlsx', '2021-06-30 TRBUSDT_fisher_backi2.xlsx', '2021-06-30 MANAUSDT_fisher_backi2.xlsx', '2021-06-30 COTIUSDT_fisher_backi2.xlsx', '2021-06-30 CHRUSDT_fisher_backi2.xlsx']\n","dict_name : 2021-06-30 ETHUSDT_fisher_backi2_res_dfs.pkl\n","2021-06-30 ETHUSDT_fisher_backi2.xlsx saved to dict !\n","2021-06-30 BTCUSDT_fisher_backi2.xlsx saved to dict !\n","2021-06-30 BCHUSDT_fisher_backi2.xlsx saved to dict !\n","2021-06-30 XRPUSDT_fisher_backi2.xlsx saved to dict !\n","2021-06-30 EOSUSDT_fisher_backi2.xlsx saved to dict !\n","2021-06-30 LTCUSDT_fisher_backi2.xlsx saved to dict !\n","2021-06-30 ETCUSDT_fisher_backi2.xlsx saved to dict !\n","2021-06-30 LINKUSDT_fisher_backi2.xlsx saved to dict !\n","2021-06-30 XLMUSDT_fisher_backi2.xlsx saved to dict !\n","2021-06-30 ADAUSDT_fisher_backi2.xlsx saved to dict !\n","2021-06-30 SUSHIUSDT_fisher_backi2.xlsx saved to dict !\n","2021-06-30 CVCUSDT_fisher_backi2.xlsx saved to dict !\n","2021-06-30 BTSUSDT_fisher_backi2.xlsx saved to dict !\n","2021-06-30 HOTUSDT_fisher_backi2.xlsx saved to dict !\n","2021-06-30 ZRXUSDT_fisher_backi2.xlsx saved to dict !\n","2021-06-30 QTUMUSDT_fisher_backi2.xlsx saved to dict !\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"6HOjnZjSgzk1"},"source":["## load res_df_dict"]},{"cell_type":"code","metadata":{"id":"7FPBG5Qqg2jB","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1629418189999,"user_tz":-540,"elapsed":17783,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"}},"outputId":"7ae8505a-fb62-4082-97e6-edbad5ed85cb"},"source":["save_path = './candlestick_concated/res_df/'\n","dict_name = \"2021-06-30 ETHUSDT_fisher_backi2_res_dfs.pkl\"\n","dict_name = \"2021-07-01 ETHUSDT_backi2_res_dfs.pkl\"\n","\n","\n","#     load with pickle    #\n","with open(save_path + dict_name, 'rb') as f:\n","  res_df_dict = pickle.load(f)\n","\n","print(\"res_df_dict loaded !\")"],"execution_count":6,"outputs":[{"output_type":"stream","text":["res_df_dict loaded !\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"tApzvz_gK9lR"},"source":["## basic strategy"]},{"cell_type":"code","metadata":{"id":"a8aYsjEgQnGF"},"source":["org_res_df = res_df.copy()"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"FaRGwR4NEop2"},"source":["### shifting"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"RF3RM2G2RCb1","executionInfo":{"elapsed":291,"status":"ok","timestamp":1626515312874,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"},"user_tz":-540},"outputId":"ba8f6a75-d4df-4f85-cd0f-190935341f7a"},"source":["#         refresh res_df      #\n","res_df = org_res_df.copy()\n","print(org_res_df.tail(5))\n","\n","# break\n","\n","\n","shift_size = -4\n","# shift_size = -1\n","# shift_size = -7\n","# shift_size = +3\n","\n","res_df['min_upper'] = res_df['min_upper'].shift(shift_size)\n","res_df['max_lower'] = res_df['max_lower'].shift(shift_size)\n","res_df['minor_ST1_Trend'] = res_df['minor_ST1_Trend'].shift(shift_size)\n","res_df['minor_ST2_Trend'] = res_df['minor_ST2_Trend'].shift(shift_size)\n","res_df['minor_ST3_Trend'] = res_df['minor_ST3_Trend'].shift(shift_size)\n","res_df['middle_line'] = res_df['middle_line'].shift(shift_size)\n","\n","print(res_df.tail(5))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["                            open     high  ...  min_upper  max_lower\n","2021-06-30 23:55:59.999  0.27223  0.27281  ...   0.272145    0.27005\n","2021-06-30 23:56:59.999  0.27274  0.27290  ...   0.272145    0.27005\n","2021-06-30 23:57:59.999  0.27246  0.27257  ...   0.272523    0.27021\n","2021-06-30 23:58:59.999  0.27166  0.27183  ...   0.272523    0.27021\n","2021-06-30 23:59:59.999  0.27144  0.27211  ...   0.272523    0.27021\n","\n","[5 rows x 37 columns]\n","                            open     high  ...  min_upper  max_lower\n","2021-06-30 23:55:59.999  0.27223  0.27281  ...   0.272523    0.27021\n","2021-06-30 23:56:59.999  0.27274  0.27290  ...        NaN        NaN\n","2021-06-30 23:57:59.999  0.27246  0.27257  ...        NaN        NaN\n","2021-06-30 23:58:59.999  0.27166  0.27183  ...        NaN        NaN\n","2021-06-30 23:59:59.999  0.27144  0.27211  ...        NaN        NaN\n","\n","[5 rows x 37 columns]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"2gxvme1PC6ha"},"source":["### load model"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"dtYdAuSsC72_","executionInfo":{"status":"ok","timestamp":1628862368878,"user_tz":-540,"elapsed":5831,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"}},"outputId":"e8dccc53-aaa7-4bab-ed8d-753f634c08d6"},"source":["# model_name = 'inner_tick_cnnreg_lscalemm_prefee_gpu_%s_%s_%s_%s_%s.h5'\n","\n","# model = tf.keras.models.load_model(ckpt_path + model_name)\n","\n","from tensorflow.keras.applications.resnet50 import ResNet50\n","\n","model = ResNet50(weights='imagenet', include_top=False)\n","# model.summary()\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Downloading data from https://storage.googleapis.com/tensorflow/keras-applications/resnet/resnet50_weights_tf_dim_ordering_tf_kernels_notop.h5\n","94773248/94765736 [==============================] - 1s 0us/step\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"5la6usMOFzkX"},"source":["#### gen selected vector"]},{"cell_type":"code","metadata":{"id":"oQk3-jbKF8FB"},"source":["def min_max_scale(npy_x):\n","\n","  return (npy_x - np.min(npy_x)) / (np.max(npy_x) - np.min(npy_x))\n","\n","def expand_dims(npy_x):\n","\n","  row, col = npy_x.shape\n","  npy_x2 = np.array(npy_x).reshape(-1, row, col, 1).astype(np.float32)\n","  # input_x = np.array(data_x).reshape(-1, row, col).astype(np.float32)\n","\n","  #     1c to 3c    #\n","  npy_x3 = npy_x2 * np.ones(3, dtype=np.float32)[None, None, None, :]\n","\n","  return npy_x3\n","\n","\n","def vector_dist(f1, f2):\n","  return np.linalg.norm(f1-f2)\n","\n","\n","\n","# ------------------------ params ------------------------  #\n","selected_i = 500\n","input_size = 100\n","\n","\n","\n","#   1. 선택된 인덱스를 입력받았을 때, input generating 형태만 만들어놓고,     #\n","#   1-1. input cols 필요함    #\n","\n","basic_list = ['open', 'high', 'low', 'close', 'minor_ST1_Up', 'minor_ST1_Down',\n","       'minor_ST2_Up', 'minor_ST2_Down', 'minor_ST3_Up', 'minor_ST3_Down',\n","       'middle_line', 'min_upper', 'max_lower']\n","# senkoua_list = ['senkou_a1', 'senkou_a2', 'senkou_a3', 'senkou_a4', 'senkou_a5']\n","# senkoub_list = ['senkou_b1', 'senkou_b2', 'senkou_b3', 'senkou_b4', 'senkou_b5']\n","senkoua_list = ['senkou_a1', 'senkou_a2', 'senkou_a3']\n","senkoub_list = ['senkou_b1', 'senkou_b2', 'senkou_b3']\n","# sar_list = ['sar1', 'sar2', 'sar3', 'sar4', 'sar5']\n","# sar_list = ['sar1', 'sar2', 'sar3', 'sar4', 'sar5']\n","sar_list = ['sar1', 'sar2', 'sar3']\n","sar_list = ['sar1', 'sar2', 'sar3']\n","\n","sma_list = ['sma']\n","\n","#     -------------- outer price phase --------------    #\n","macd_list = ['macd_hist1', 'macd_hist2', 'macd_hist3', 'macd_hist4', 'macd_hist5']\n","trix_list = ['trix1', 'trix2', 'trix3', 'trix4', 'trix5']\n","stoch_list = ['stoch']\n","fisher_list = ['fisher30', 'fisher60', 'fisher120']\n","cctbbo_list = ['cctbbo']\n","\n","selected_price_colname = basic_list + senkoua_list + senkoub_list + sar_list\n","selected_outprice_colname = [macd_list]\n","\n","\n","#         global scaling for outer price data       #\n","#         1. nan 처리       #\n","\n","# # print((np.isnan(df.values)))\n","# print(\"np.sum(np.isnan(df.values), axis=0) :\", np.sum(np.isnan(df.values), axis=0))\n","\n","# max_nan = np.max(np.sum(np.isnan(df.values), axis=0))\n","# # print(max_nan)\n","\n","# df = df.iloc[max_nan:-max_nan]\n","\n","# total_gdata = []\n","# for g_col in selected_outprice_colname:\n","\n","#   temp_data = min_max_scale(res_df[g_col])\n","#   total_gdata.append(temp_data)\n","\n","\n","\n","#   1-2. cols 에 따른, scaling method 구분함    #\n","onprice_input_x = min_max_scale(res_df[selected_price_colname].iloc[selected_i - input_size:selected_i].values)\n","print(onprice_input_x.shape)\n","\n","\n","#   2. plot_check 에서 본인이 원하는 shape 의 인덱스를 선택   #\n","#   3. vertorize, \n","#   3-1. input generator 를 이용해 entry signal 발생할 때마다 dist 비교 진행    #\n","re_onprice_input_x = expand_dims(onprice_input_x)\n","print(re_onprice_input_x.shape)\n","      \n","# break\n","\n","selected_vector = model.predict(re_onprice_input_x, verbose=1)\n","print(selected_vector.shape)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"5duWn8t4BRyv"},"source":["### lastest platform"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":825},"id":"TdAn2bHHBWMF","executionInfo":{"status":"ok","timestamp":1629418489898,"user_tz":-540,"elapsed":30690,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"}},"outputId":"fe8a1bf3-e42a-4d55-9ef0-e3f415cd3f4e"},"source":["fee = 0.0004\n","lvrg = 5\n","# lvrg = 2\n","\n","# gap = 0.0002\n","# gap = 0.0001\n","gap = 0.00005\n","\n","p_qty_divider = 1.5\n","\n","# ------- ep set ------- #\n","entry_type = 'limit'\n","# entry_type = 'market'\n","# ep_gap = 0.0005\n","ep_gap = 0.001\n","# ep_gap = 0.0001\n","# ep_gap = 0.00005\n","\n","# ------- tp set ------- #\n","exit_type = 'limit'\n","# exit_type = 'market'\n","static_tp = 0\n","\n","static_lvrg = 1\n","target_pct = 0.02\n","hl_lookback = 10\n","\n","inversion = 0\n","\n","if inversion:\n","  short_entry = [1, 2]\n","  long_entry = [-1, -2]\n","else:\n","  short_entry = [-1, -2]\n","  long_entry = [1, 2]\n","\n","  \n","tp_cut_ratio = 0.7\n","\n","fdist_thresh = 1\n","\n","# ----------------- indicator ----------------- #\n","# ------- shift_size ------- #\n","cloud_shift_size = 1\n","sma_shift_size = 1\n","close_shift_size = 1\n","\n","\n","# ------- lb ------- #\n","cloud_lookback = 69\n","# cloud_lookback = 10\n","\n","sma_lookback = 100\n","# sma_lookback = 100\n","\n","sar_lookback = 5\n","\n","\n","# ------- indi. params ------- #\n","sma = 'sma4'\n","\n","# sma_period = 250\n","sma_period = 100\n","\n","fisher_upper = 1.5\n","fisher_lower = -1.5\n","\n","stoch_upper = 63\n","stoch_lower = 37\n","\n","senkoua_list = ['senkou_a1', 'senkou_a2', 'senkou_a3', 'senkou_a4', 'senkou_a5']\n","senkoub_list = ['senkou_b1', 'senkou_b2', 'senkou_b3', 'senkou_b4', 'senkou_b5']\n","\n","\n","for key, res_df in res_df_dict.items():\n","\n","  # res_df = pd.read_excel(save_path + key, index_col=0)\n","  # fourth_df = pd.read_excel(date_path4 + key.replace(\"_4h1d_backi2\", \"\"), index_col=0)\n","\n","  print(key, \"loaded !\")\n","  # break\n","\n","  # if 'eos'.upper() in key:\n","  #   pass\n","  # else:\n","  #   continue\n","\n","  for senkou_a, senkou_b in zip(senkoua_list, senkoub_list): \n","  # for sma4_period in range(5, 30, 2):\n","  # for sma4_period in range(13, 14, 2):\n","\n","    # print(\"sma4_period :\", sma4_period)\n","\n","    # senkou_a, senkou_b = 'senkou_a1', 'senkou_b1'\n","    \n","    cloud_top = np.max(res_df[[senkou_a, senkou_b]], axis=1)\n","    cloud_bottom = np.min(res_df[[senkou_a, senkou_b]], axis=1)\n","\n","    under_top = res_df['close'].shift(cloud_shift_size) <= cloud_top.shift(cloud_shift_size)\n","    over_top = res_df['close'].shift(cloud_shift_size) >= cloud_top.shift(cloud_shift_size)\n","\n","    over_bottom = res_df['close'].shift(cloud_shift_size) >= cloud_bottom.shift(cloud_shift_size)\n","    under_bottom = res_df['close'].shift(cloud_shift_size) >= cloud_bottom.shift(cloud_shift_size)\n","\n","    \n","    upper_middle = (res_df['middle_line'] + res_df['min_upper']) / 2\n","    lower_middle = (res_df['middle_line'] + res_df['max_lower']) / 2\n","\n","        \n","    # --------------- st ep --------------- #    \n","    # short_ep = res_df['middle_line']\n","    # long_ep = res_df['middle_line']\n","\n","    # short_ep = res_df['middle_line'] * (1 - gap)\n","    # long_ep = res_df['middle_line'] * (1 + gap)\n","    \n","    short_ep = res_df['min_upper'] * (1 - gap)\n","    long_ep = res_df['max_lower'] * (1 + gap)\n","\n","    # --------------- sar ep --------------- #    \n","    # short_ep = res_df['sar1'].shift(1)\n","    # long_ep = res_df['sar1'].shift(1)\n","\n","    \n","    # print(\"under_top :\", under_top)\n","    # break\n","\n","    # sma = res_df['close'].rolling(300).mean()\n","    # res_df['sma'] = res_df['close'].rolling(sma_period).mean()  \n","    # # print(res_df['sma5'].tail())\n","\n","    # if \"sma4\" in res_df.columns:\n","    #   res_df.drop(\"sma4\", axis=1, inplace=True)\n","\n","    # fourth_df['sma'] = fourth_df['close'].rolling(sma4_period).mean()\n","    # res_df = res_df.join(pd.DataFrame(index=res_df.index, data=to_lower_tf(res_df, fourth_df, [-1]), columns=['sma4']))\n","    \n","    #       short = -1      #\n","    # --------------- st entry --------------- #\n","    entry = np.where((res_df['close'].shift(1) <= short_ep) & \n","                          (res_df['high'] >= short_ep)\n","                          , -1, 0) \n","    \n","    entry = np.where((res_df['close'].shift(1) > short_ep)\n","                      , -2, entry) \n","    \n","    # entry = np.where((res_df['close'].shift(1) >= short_ep) & \n","    #                 # (long_ep <= res_df['high']) & \n","    #                 (res_df['close'] <= short_ep)\n","    #                 , -1, 0) \n","\n","    # --------------- sar entry --------------- #\n","    # # entry = np.where((res_df['close'] <= res_df['sar2']) & \n","    # #                   (res_df['close'].shift(1) > res_df['sar2'].shift(1))\n","    # #                   , -1, 0) \n","    # entry = np.where((res_df['close'] <= res_df['sar2']) &\n","    #                  (res_df['low'].shift(1) > res_df['sar2'].shift(1)) &\n","    #                  (res_df['low'].shift(2) > res_df['sar2'].shift(2))\n","    #                   , -1, 0) \n","    # entry = np.where((res_df['sar1'].shift(1) > res_df['low']) & \n","    #                  (res_df['sar1'].shift(2) <= res_df['low'].shift(1))\n","    #                   , -1, 0) \n","    \n","    # --------------- fisher entry --------------- #    \n","    # entry = np.where((res_df['fisher30'].shift(1) >= res_df['fisher30']) & \n","    #                   (res_df['fisher30'].shift(2) <= res_df['fisher30']).shift(1) &\n","    #                   (res_df['fisher30'].shift(1) >= fisher_upper)\n","    #                   , -1, 0) \n","\n","    # --------------- cloud entry --------------- #\n","    # cloud_bottom = np.min(res_df[[senkou_a, senkou_b]], axis=1)\n","\n","    # entry = np.where((res_df['close'] < cloud_bottom) & \n","    #                   (res_df['close'].shift(1) >= cloud_bottom.shift(1))\n","    #                   , -1, 0) \n","\n","\n","\n","    #       long = 1     #\n","    # --------------- st entry --------------- #    \n","    entry = np.where((res_df['close'].shift(1) >= long_ep) & \n","                      (res_df['low'] <= long_ep)\n","                      , 1, entry) \n","\n","    entry = np.where((res_df['close'].shift(1) < long_ep)\n","                      , 2, entry) \n","      \n","    # entry = np.where((res_df['close'].shift(1) <= long_ep) & \n","    #                   # (long_ep <= res_df['high']) & \n","    #                   (res_df['close'] >= long_ep)\n","    #                   , 1, entry) \n","\n","    # --------------- sar entry --------------- #\n","    # # entry = np.where((res_df['close'] >= res_df['sar2']) & \n","    # #                   (res_df['close'].shift(1) < res_df['sar2'].shift(1))\n","    # #                   , 1, entry)    \n","\n","    # #       lb sar 이 high 보다 커야함      #     \n","    # entry = np.where((res_df['close'] >= res_df['sar2']) & \n","    #                  (res_df['high'].shift(1) < res_df['sar2'].shift(1)) & \n","    #                  (res_df['high'].shift(2) < res_df['sar2'].shift(2))\n","    #                   , 1, entry)\n","    # entry = np.where((res_df['sar1'].shift(1) < res_df['high']) &\n","    #                  (res_df['sar1'].shift(2) >= res_df['high'].shift(1))\n","    #                   , 1, entry) \n","    \n","    # --------------- fisher entry --------------- #        \n","    #       long = 1     #\n","    # entry = np.where((res_df['fisher30'].shift(1) <= res_df['fisher30']) & \n","    #                   (res_df['fisher30'].shift(2) >= res_df['fisher30']).shift(1) &\n","    #                   (res_df['fisher30'].shift(1) <= fisher_lower)\n","    #                   , 1, entry)\n","  \n","    # --------------- cloud entry --------------- #\n","    # cloud_top = np.max(res_df[[senkou_a, senkou_b]], axis=1)\n","\n","    # entry = np.where((res_df['close'] > cloud_top) & \n","    #                   (res_df['close'].shift(1) <= cloud_top.shift(1))\n","    #                   , 1, entry)\n","    \n","\n","\n","\n","\n","    #       1-2. tp line = middle line 조금 이내         #    \n","    # --------------- gap range tp --------------- #\n","    # gap_range = 0.5\n","    # gap_range = 1\n","\n","    # short_cut = res_df['high'].rolling(hl_lookback).max()\n","    # long_cut = res_df['low'].rolling(hl_lookback).min()\n","\n","    # short_tp = res_df['close'] - gap_range * (short_cut - res_df['close'])\n","    # long_tp = res_df['close'] + gap_range * (res_df['close'] - long_cut)\n","\n","    # --------------- st limit tp --------------- #\n","\n","    # short_tp = res_df['middle_line'] * (1 + gap)\n","    # long_tp = res_df['middle_line'] * (1 - gap)\n","    \n","    short_tp = lower_middle * (1 + gap)\n","    long_tp = upper_middle * (1 - gap)\n","    \n","    # short_tp = (res_df['middle_line'] + res_df['min_upper']) / 2\n","    # long_tp = (res_df['middle_line'] + res_df['max_lower']) / 2\n","\n","    # short_tp = res_df['close'] - (res_df['middle_line'] - res_df['close']) * tp_cut_ratio\n","    # long_tp = res_df['close'] + (res_df['close'] - res_df['middle_line']) * tp_cut_ratio\n","    \n","\n","    # --------------- sar limit tp --------------- #\n","    # short_tp = res_df['sar2']\n","    # long_tp = res_df['sar2']\n","\n","    # short_tp2 = res_df['middle_line'] * (1 + gap)\n","    # long_tp2 = res_df['middle_line'] * (1 - gap)\n","\n","\n","\n","    #       trading : 여기도 체결 결과에 대해 묘사함       #\n","    trade_list = []\n","    h_trade_list = []\n","    lvrg_list = []\n","\n","    liqd_list = []\n","    short_liqd_list = []\n","    long_liqd_list = []\n","\n","    nontp_liqd_list = []\n","    nontp_short_liqd_list = []\n","    nontp_long_liqd_list = []\n","\n","    nontp_pr_list = []\n","    nontp_short_pr_list = []\n","    nontp_long_pr_list = []\n","\n","    nontp_short_indexs = []\n","    nontp_long_indexs = []\n","\n","    nontp_short_ep_list = []\n","    nontp_long_ep_list = []\n","\n","    pr_list = []\n","    long_list = []\n","    short_list = []\n","\n","    h_pr_list = []\n","    h_long_list = []\n","    h_short_list = []\n","\n","    ep_tp_list = []\n","    h_ep_tp_list = []\n","    tp_state_list = []\n","\n","    i = 0\n","    while 1:\n","    # for i in range(len(res_df)):        \n","\n","      if entry[i] in short_entry: \n","\n","        initial_i = i\n","\n","\n","        # -------------- ep scheduling -------------- #\n","        # if  (res_df['close'].iloc[i] <= lower_middle.iloc[i]):\n","        # if abs((res_df['close'].iloc[i] - short_ep.iloc[i]) / short_ep.iloc[i]) < ep_gap:\n","        #   pass\n","        # else:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","        # -------------- distance protection -------------- #\n","        # tp_dist = (res_df['close'].iloc[i] - short_tp.iloc[i])\n","        # cut_dist = (res_df['middle_line'].iloc[i] - res_df['close'].iloc[i])\n","        # if tp_dist / cut_dist >= tp_cut_ratio:\n","        #   pass\n","        # else:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","        # -------------- feature dist const. -------------- #\n","        # if initial_i < input_size:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","        # entry_input_x = min_max_scale(res_df[selected_price_colname].iloc[initial_i - input_size:initial_i].values)\n","       \n","        # re_entry_input_x = expand_dims(entry_input_x)\n","\n","        # entry_vector = model.predict(re_entry_input_x, verbose=0)\n","        # # print(test_result.shape)\n","\n","        # f_dist = vector_dist(entry_vector, selected_vector)\n","        # print(\"f_dist :\", f_dist)\n","\n","        # if f_dist < fdist_thresh:\n","        #   pass\n","        # else:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","\n","\n","        # -------------- sma const. -------------- #\n","        # if res_df['close'].iloc[i] <= res_df['sma'].iloc[i]:\n","        # if short_ep.iloc[i] <= res_df['sma'].iloc[i - 1]:\n","        # under_sma = short_ep <= res_df['sma'].shift(sma_shift_size)\n","        # if np.sum(under_sma.iloc[i + 1 - sma_lookback:i + 1]) == sma_lookback:\n","        #   pass\n","        # else:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","        # -------------- 1d sma const. -------------- #\n","        # if res_df[sma].iloc[i] >= res_df['close'].iloc[i]:\n","        #   pass\n","        # else:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","\n","        # -------------- cloud lb const.-------------- #   \n","        if i < cloud_lookback:\n","          i += 1\n","          if i >= len(res_df):\n","            break\n","          continue\n","\n","        if np.sum(under_top.iloc[i + 1 - cloud_lookback:i + 1]) == cloud_lookback:\n","        # if np.sum(over_top.iloc[i + 1 - cloud_lookback:i + 1]) == cloud_lookback:\n","        # if np.sum(under_top.iloc[i - cloud_lookback:i]) == cloud_lookback:\n","          pass\n","\n","        else:\n","          i += 1\n","          if i >= len(res_df):\n","            break\n","          continue\n","\n","\n","        # -------------- cloud color const.-------------- #\n","        #               1. senkou_a1 < senkou_b1            #\n","        #               1-1. mutli clouds color 충분히 고려               #        \n","        # if i < cloud_lookback:        \n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","        # # if res_df[senkou_a].shift(cloud_shift_size).iloc[i] <= res_df[senkou_b].shift(cloud_shift_size).iloc[i]:\n","        # if np.sum(res_df[senkou_a].shift(cloud_shift_size).iloc[i + 1 - cloud_lookback:i + 1] <= res_df[senkou_b].shift(cloud_shift_size).iloc[i + 1 - cloud_lookback:i + 1]) == cloud_lookback and \\\n","        #   np.sum(res_df[\"senkou_a2\"].shift(0).iloc[i + 1 - cloud_lookback:i + 1] <= res_df[\"senkou_b2\"].shift(0).iloc[i + 1 - cloud_lookback:i + 1]) == cloud_lookback and \\\n","        #   np.sum(res_df[\"senkou_a3\"].shift(0).iloc[i + 1 - cloud_lookback:i + 1] <= res_df[\"senkou_b3\"].shift(0).iloc[i + 1 - cloud_lookback:i + 1]) == cloud_lookback: # and \\\n","        #   # np.sum(res_df[\"senkou_a4\"].shift(0).iloc[i + 1 - cloud_lookback:i + 1] <= res_df[\"senkou_b4\"].shift(0).iloc[i + 1 - cloud_lookback:i + 1]) == cloud_lookback:\n","        #   # np.sum(res_df[\"senkou_a5\"].shift(0).iloc[i + 1 - cloud_lookback:i + 1] <= res_df[\"senkou_b5\"].shift(0).iloc[i + 1 - cloud_lookback:i + 1]) == cloud_lookback:\n","        #   pass\n","        # else:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","\n","\n","        # -------------- st color const.-------------- #\n","        # if np.sum(res_df[['minor_ST1_Trend', 'minor_ST2_Trend', 'minor_ST3_Trend']].iloc[i]) <= -1:\n","        #   pass\n","        # else:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","        # -------------- 3rd st const. : st should have 2, 3 or more -------------- #\n","        # if np.sum(res_df[['minor_ST2_Trend', 'minor_ST3_Trend']].iloc[i]) <= -2:\n","        #   pass\n","        # else:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","        # -------------- sar const. -------------- #\n","        # if res_df['sar2'].iloc[i] > res_df['high'].iloc[i] and res_df['sar3'].iloc[i] > res_df['high'].iloc[i]:\n","        # if res_df['sar2'].iloc[i] > res_df['high'].iloc[i]: # and \\\n","        # if  res_df['sar3'].iloc[i] > res_df['high'].iloc[i]:\n","        #   pass\n","        # else:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","\n","        # -------------- limit waiting const. -------------- #\n","        # entry_done = False\n","        # for e_j in range(i + 1, len(res_df)):\n","\n","        #   #             Todo            #\n","        #   #             1. ep 설정\n","        #   #             2. limit 대기 시간 설정\n","        #   if res_df['high'].iloc[e_j] >= short_ep.iloc[initial_i]:\n","        #     entry_done = True\n","        #     # print(\"e_j :\", e_j)\n","        #     break\n","\n","        #   if res_df['close'].iloc[e_j] > res_df['middle_line'].iloc[e_j]:\n","        #     break\n","\n","        # i = e_j\n","        # # print(\"i = e_j :\", i)\n","\n","\n","        # if entry_done:\n","        #   pass\n","        # else:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","        \n","        if entry_type is 'market':\n","          ep_list = [res_df['close'].iloc[initial_i]]\n","        else:          \n","          if entry[initial_i] == -1:\n","            ep_list = [short_ep.iloc[initial_i]]\n","          else:\n","            ep_list = [res_df['open'].iloc[initial_i]]\n","\n","        if not static_lvrg:\n","          lvrg = target_pct / (res_df['high'].rolling(hl_lookback).max().iloc[initial_i] / res_df['close'].iloc[initial_i] - 1)\n","          lvrg = int(min(50, lvrg))\n","          lvrg_list.append(lvrg)\n","\n","        ep_idx_list = [initial_i]\n","        tp_list = []\n","        tp_idx_list = []\n","\n","        remain_tp = 2\n","        hedge_cnt = 1\n","\n","        h_ep, h_tp = None, None\n","        h_i, h_j = None, None\n","        \n","        trade_done = False\n","        \n","        for j in range(i + 1, len(res_df)):\n","          \n","          if static_tp:\n","            tp_j = initial_i\n","          else:\n","            tp_j = j\n","\n","\n","          # -------------- sub ep -------------- #\n","          # if res_df['high'].iloc[j - 1] <= res_df['sar2'].iloc[j - 1] and res_df['high'].iloc[j] > res_df['sar2'].iloc[j]:\n","            \n","          #   sub_ep = res_df['sar2'].iloc[j - 1]\n","\n","          #   if sub_ep < ep_list[-1]:\n","          #     ep_list.append(sub_ep)\n","          #     ep_idx_list.append(j)\n","\n","          \n","          # -------------- hedge only once -------------- #\n","          #             일단, h_quantity 는 초기 진입과 동일하게 설정         #\n","          # if res_df['high'].iloc[j] >= res_df['minor_ST2_Up'].iloc[j] and hedge_cnt == 1:\n","          # if res_df['close'].iloc[j] >= res_df['minor_ST2_Up'].iloc[j] and hedge_cnt == 1:\n","          # if res_df['close'].iloc[j] >= res_df['minor_ST3_Up'].iloc[j] and hedge_cnt == 1:\n","\n","          #   h_ep = res_df['close'].iloc[j]\n","          #   hedge_cnt -= 1\n","          #   h_i = j\n","\n","\n","          # -------------- sub tp -------------- #\n","          # if res_df['low'].iloc[j] <= short_tp2.iloc[j] and remain_tp == 2:\n","          # # if res_df['low'].iloc[j] <= short_tp2.iloc[j] <= res_df['high'].iloc[j]: --> 이건 잘못되었음\n","\n","          #   # trade_done = True # <-- sub tp 에는 trade_done 을 주지 않음 !\n","          #   remain_tp -= 1\n","\n","          #   #         dynamic tp        #\n","          #   if short_tp2.iloc[j] != short_tp2.iloc[j - 1]:\n","\n","          #     #   tp limit 이 불가한 경우 = open 이 이미, tp 를 넘은 경우 # \n","          #     if res_df['open'].iloc[j] < short_tp2.iloc[j]:\n","\n","          #       # tp = short_tp2.iloc[j]\n","          #       tp = res_df['open'].iloc[j]\n","          #       # tp_state_list.append(\"d-open\")\n","\n","          #     #   tp limit 이 가능한 경우 = open 이 아직, tp 를 넘지 않은 경우 # \n","          #     else:\n","\n","          #       tp = short_tp2.iloc[j]\n","          #       # tp = res_df['open'].iloc[j]\n","          #       # tp_state_list.append(\"d-short_tp2\")\n","\n","          #   #         static tp         #\n","          #   else:\n","              \n","          #     #   tp limit 이 불가한 경우 = open 이 이미, tp 를 넘은 경우 # \n","          #     #   non_inversion 의 경우, short_tp2 가 가능함   #\n","\n","          #     if res_df['open'].iloc[j] < short_tp2.iloc[j]:\n","\n","          #       tp = short_tp2.iloc[j]\n","          #       # tp = res_df['open'].iloc[j]\n","          #       # tp_state_list.append(\"s-short_tp2\")\n","\n","          #     #   tp limit 이 가능한 경우 = open 이 아직, tp 를 넘지 않은 경우 # \n","          #     else:\n","\n","          #       tp = short_tp2.iloc[j]\n","          #       # tp = res_df['open'].iloc[j]\n","          #       # tp_state_list.append(\"s-short_tp2\")   \n","\n","          #   tp_list.append(tp)  \n","\n","\n","          # -------------- ultimate limit tp -------------- #\n","          #               1. by price line             #\n","          if exit_type != 'market':\n","\n","            if res_df['low'].iloc[j] <= short_tp.iloc[tp_j]: # we use static tp now\n","            # if res_df['low'].iloc[j] <= short_tp.iloc[j]:\n","            # if res_df['low'].iloc[j] <= short_tp.iloc[j] <= res_df['high'].iloc[j]: --> 이건 잘못되었음\n","\n","              trade_done = True\n","\n","              #         dynamic tp        #\n","              # if 0:\n","              if short_tp.iloc[j] != short_tp.iloc[j - 1] and not static_tp:\n","\n","                #   tp limit 이 불가한 경우 = open 이 이미, tp 를 넘은 경우 # \n","                # if res_df['open'].iloc[j] < short_tp.iloc[initial_i]:\n","                if res_df['open'].iloc[j] < short_tp.iloc[j]:\n","\n","                  # tp = short_tp.iloc[initial_i]\n","                  tp = res_df['open'].iloc[j]\n","                  tp_state_list.append(\"d-short_open\")\n","\n","                #   tp limit 이 가능한 경우 = open 이 아직, tp 를 넘지 않은 경우 # \n","                else:\n","\n","                  # tp = short_tp.iloc[initial_i]\n","                  tp = short_tp.iloc[j]\n","                  # tp = res_df['open'].iloc[j]\n","                  tp_state_list.append(\"d-short_tp\")\n","\n","              #         static tp         #\n","              else:\n","                \n","                #   tp limit 이 불가한 경우 = open 이 이미, tp 를 넘은 경우 # \n","                #   non_inversion 의 경우, short_tp 가 가능함   #              \n","\n","                # if res_df['open'].iloc[j] < short_tp.iloc[initial_i]:\n","                if res_df['open'].iloc[j] < short_tp.iloc[tp_j]:\n","\n","                  # tp = short_tp.iloc[initial_i]\n","                  tp = short_tp.iloc[tp_j]\n","\n","                  # tp = res_df['open'].iloc[j]\n","                  tp_state_list.append(\"s-short_tp\")\n","\n","                #   tp limit 이 가능한 경우 = open 이 아직, tp 를 넘지 않은 경우 # \n","                else:\n","\n","                  # tp = short_tp.iloc[initial_i]\n","                  tp = short_tp.iloc[tp_j]\n","\n","                  # tp = res_df['open'].iloc[j]\n","                  tp_state_list.append(\"s-short_tp\")   \n","\n","              tp_list.append(tp)     \n","              tp_idx_list.append(j)\n","\n","          #           2. by signal        #\n","          else:\n","\n","            # -------------- sar tp -------------- #\n","            # if (res_df['high'].iloc[j] >= res_df['sar2'].iloc[j]) & \\\n","            #   (res_df['high'].iloc[j - 1] < res_df['sar2'].iloc[j - 1]) & \\\n","            #   (res_df['high'].iloc[j - 2] < res_df['sar2'].iloc[j - 2]):\n","\n","            #       inversion     #\n","            # if (res_df['low'].iloc[j] <= res_df['sar2'].iloc[j]) & \\\n","            #   (res_df['low'].iloc[j - 1] > res_df['sar2'].iloc[j - 1]) & \\\n","            #   (res_df['low'].iloc[j - 2] > res_df['sar2'].iloc[j - 2]):\n","\n","            # -------------- st tp -------------- #\n","            # if res_df['close'].iloc[j] > res_df['middle_line'].iloc[j]:       \n","\n","            # -------------- fisher tp -------------- #            \n","            if entry[j] == 1:\n","              \n","              tp = res_df['close'].iloc[j]\n","              # tp = res_df['open'].iloc[j]\n","              tp_state_list.append(\"short close tp\")\n","              trade_done = True\n","\n","              tp_list.append(tp) \n","              tp_idx_list.append(j)\n","\n","                  \n","          # -------------- cut -------------- #\n","          # if not trade_done:\n","\n","          #   # if res_df['macd_hist3'].iloc[j] > 0:  #  macd cut\n","          #   # if res_df['macd_hist3'].iloc[i] < 0 and res_df['macd_hist3'].iloc[j] > 0:\n","          #   # if res_df['close'].iloc[j] > res_df['middle_line'].iloc[j]:    \n","          #   # if res_df['close'].iloc[j] > res_df[sma].iloc[j]:\n","\n","          #   if res_df['close'].iloc[j] > res_df['minor_ST3_Up'].iloc[j]:\n","          #   # if res_df['close'].iloc[j] > res_df['minor_ST3_Up'].iloc[j] \\\n","          #   #   or res_df['sar2'].iloc[j] <= res_df['high'].iloc[j]:\n","            \n","          #   # if res_df['close'].iloc[j] > upper_middle.iloc[j]:\n","\n","            # if res_df['close'].iloc[j] > short_cut.iloc[tp_j]:\n","\n","            #   tp = res_df['close'].iloc[j]\n","            #   # tp = res_df['open'].iloc[j]\n","            #   tp_state_list.append(\"short close_cut\")\n","            #   trade_done = True\n","\n","            #   tp_list.append(tp) \n","            #   tp_idx_list.append(j)\n","\n","\n","          # -------------- non tp -------------- #\n","          if j == len(res_df) - 1:\n","            trade_done = True\n","            tp = res_df['close'].iloc[j]\n","            tp_list.append(tp) \n","            tp_idx_list.append(j)\n","          \n","\n","\n","          # -------------- append trade data -------------- #\n","          if trade_done:\n","\n","            # if entry[initial_i] == -1:\n","            #   # ep = res_df['close'].iloc[initial_i]\n","            #   # ep = short_ep.iloc[initial_i]\n","            #   # ep_list[0] = short_ep.iloc[initial_i]\n","            #   pass\n","            # else:\n","            #   # ep = res_df['open'].iloc[initial_i]\n","            #   ep_list[0] = res_df['open'].iloc[initial_i]\n","\n","              # ep = short_ep.iloc[initial_i]\n","              # ep = res_df['close'].iloc[initial_i - 1]     \n","\n","            # -------------------- partial tp -------------------- #\n","            #        1. len(tp_list) 에 대응하는 qty_list 를 만들어야함    #\n","            #        2. temp_pr_list 를 만들어 총합 + 1 을 pr_list 에 저장      #\n","            #        2-1. temp_pr = sum((ep / tp_list[i] - fee - 1) * qty_list[i])   #\n","            #        3. temp_pr_list 의 첫 tp 에는 r_qty 를 할당함        #\n","            qty_list = []\n","            temp_pr_list = []\n","            r_qty = 1\n","            for q_i in range(len(tp_list) - 1, -1, -1):\n","\n","              if len(tp_list) == 1:\n","                temp_qty = r_qty\n","              else:\n","                if q_i !=0:\n","                  temp_qty = r_qty / p_qty_divider\n","                else:\n","                  temp_qty = r_qty\n","\n","              temp_pr = (ep_list[0] / tp_list[q_i] - fee - 1) * temp_qty * lvrg\n","              # temp_pr = (ep_list[0] / tp_list[q_i] - fee - 1) * temp_qty\n","              r_qty -= temp_qty\n","\n","              temp_pr_list.append(temp_pr)\n","              qty_list.append(temp_qty)\n","\n","            # if len(temp_pr_list) == 1:\n","            #   print(\"qty_list :\", qty_list)\n","            #   print(\"temp_pr_list :\", temp_pr_list)\n","\n","            temp_pr = sum(temp_pr_list) + 1\n","\n","            # -------------------- sub ep -> pr calc -------------------- #\n","            if len(ep_list) > 1:\n","            \n","              p_ep_pr = []\n","              for sub_ep_ in ep_list:\n","                sub_pr = (sub_ep_ / tp - fee - 1) * lvrg\n","                p_ep_pr.append(sub_pr)\n","\n","              temp_pr = sum(p_ep_pr) + 1\n","\n","              print(\"temp_pr :\", temp_pr)\n","\n","            # ------------ hedge + non_hedge pr summation ------------ #\n","            #         hedge pr direction is opposite to the origin       #\n","            hedge_pr = 1\n","            if hedge_cnt == 0:\n","\n","              #       hedge tp      #\n","              h_tp = res_df['close'].iloc[j]\n","              hedge_pr = (h_tp / h_ep - fee - 1) * lvrg  # hedge long\n","              temp_pr += hedge_pr\n","              h_j = j\n","\n","            \n","            hh = max(res_df['high'].iloc[i:j + 1])\n","            short_liq = (ep_list[0] / hh - fee - 1) * lvrg + 1\n","\n","            if j != len(res_df) - 1:\n","\n","              # ep_tp_list.append((ep, tp_list))  \n","              ep_tp_list.append((ep_list, tp_list))  \n","              # trade_list.append([initial_i, i, j])\n","              trade_list.append((ep_idx_list, tp_idx_list))\n","\n","              liqd_list.append(short_liq)\n","              short_liqd_list.append(short_liq)\n","\n","              h_ep_tp_list.append((h_ep, h_tp))        \n","              h_trade_list.append([initial_i, h_i, h_j])                \n","\n","              pr_list.append(temp_pr)\n","              short_list.append(temp_pr)\n","\n","              h_pr_list.append(hedge_pr)\n","              h_short_list.append(hedge_pr)\n","\n","              i = j\n","              break\n","\n","            else:\n","          \n","              #         tp 미체결 survey        #\n","              nontp_liqd_list.append(short_liq)\n","              nontp_short_liqd_list.append(short_liq)\n","              nontp_short_indexs.append(i)\n","              nontp_short_ep_list.append(ep_list[0])\n","\n","              nontp_short_pr = (ep_list[0] / tp - fee - 1) * lvrg + 1\n","              nontp_pr_list.append(nontp_short_pr)\n","              nontp_short_pr_list.append(nontp_short_pr)\n","\n","\n","\n","      #                  long  phase                #\n","      elif entry[i] in long_entry: # inversion\n","      \n","\n","        initial_i = i\n","\n","        # -------------- ep scheduling -------------- #\n","        # if res_df['close'].iloc[i] >= upper_middle.iloc[i]:\n","        # if abs((res_df['close'].iloc[i] - long_ep.iloc[i]) / long_ep.iloc[i]) < ep_gap:\n","        #   pass\n","        # else:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","\n","        # -------------- distance protection -------------- #\n","        # tp_dist = (long_tp.iloc[i] - res_df['close'].iloc[i])\n","        # cut_dist = (res_df['close'].iloc[i] - res_df['middle_line'].iloc[i])\n","        # if tp_dist / cut_dist >= tp_cut_ratio:\n","        #   pass\n","        # else:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","        # -------------- feature dist const. -------------- #\n","        # if initial_i < input_size:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","          \n","        # entry_input_x = min_max_scale(res_df[selected_price_colname].iloc[initial_i - input_size:initial_i].values)\n","       \n","        # re_entry_input_x = expand_dims(entry_input_x)\n","\n","        # entry_vector = model.predict(re_entry_input_x, verbose=0)\n","        # # print(test_result.shape)\n","\n","        # f_dist = vector_dist(entry_vector, selected_vector)\n","        # print(\"f_dist :\", f_dist)\n","\n","        # if f_dist < fdist_thresh:\n","        #   pass\n","        # else:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","        # -------------- sma const. -------------- #\n","        # if res_df['close'].iloc[i] > res_df['sma'].iloc[i]:\n","        # if long_ep.iloc[i] >= res_df['sma'].iloc[i - 1]:\n","        # upper_sma = long_ep >= res_df['sma'].shift(sma_shift_size)\n","        # if np.sum(upper_sma.iloc[i + 1 - sma_lookback:i + 1]) == sma_lookback:\n","        #   pass\n","        # else:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","        # -------------- 1d sma const. -------------- #\n","        # if res_df[sma].iloc[i] <= res_df['close'].iloc[i]:\n","        #   pass\n","        # else:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","\n","        # -------------- cloud const. -------------- #     \n","        if i < cloud_lookback:\n","          i += 1\n","          if i >= len(res_df):\n","            break\n","          continue\n","        \n","        # if np.sum(under_bottom.iloc[i + 1 - cloud_lookback:i + 1]) == cloud_lookback:\n","        # if np.sum(under_top.iloc[i + 1 - cloud_lookback:i + 1]) == cloud_lookback:\n","        if np.sum(over_bottom.iloc[i + 1 - cloud_lookback:i + 1]) == cloud_lookback:\n","        # if np.sum(over_bottom.iloc[i - cloud_lookback:i]) == cloud_lookback:\n","         pass\n","\n","        else:\n","          i += 1\n","          if i >= len(res_df):\n","            break\n","          continue  \n","\n","\n","        # -------------- cloud color const. -------------- #\n","        #               1. senkou_a1 >= senkou_b1            #\n","        #               1-1. mutli clouds color 충분히 고려               #\n","        # if i < cloud_lookback:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","        # if np.sum(res_df[senkou_a].shift(cloud_shift_size).iloc[i + 1 - cloud_lookback:i + 1] >= res_df[senkou_b].shift(cloud_shift_size).iloc[i + 1 - cloud_lookback:i + 1]) == cloud_lookback and  \\\n","        #   np.sum(res_df[\"senkou_a2\"].shift(0).iloc[i + 1 - cloud_lookback:i + 1] >= res_df[\"senkou_b2\"].shift(0).iloc[i + 1 - cloud_lookback:i + 1]) == cloud_lookback and \\\n","        #   np.sum(res_df[\"senkou_a3\"].shift(0).iloc[i + 1 - cloud_lookback:i + 1] >= res_df[\"senkou_b3\"].shift(0).iloc[i + 1 - cloud_lookback:i + 1]) == cloud_lookback: # and \\\n","        #   # np.sum(res_df[\"senkou_a4\"].shift(0).iloc[i + 1 - cloud_lookback:i + 1] >= res_df[\"senkou_b4\"].shift(0).iloc[i + 1 - cloud_lookback:i + 1]) == cloud_lookback: # and \\\n","        #   # np.sum(res_df[\"senkou_a5\"].shift(0).iloc[i + 1 - cloud_lookback:i + 1] >= res_df[\"senkou_b5\"].shift(0).iloc[i + 1 - cloud_lookback:i + 1]) == cloud_lookback:\n","        #   pass\n","        # else:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","\n","        # -------------- st color const. -------------- #\n","        # if np.sum(res_df[['minor_ST1_Trend', 'minor_ST2_Trend', 'minor_ST3_Trend']].iloc[i]) >= 1:\n","        #   pass\n","        # else:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","        # -------------- 3rd st const. : st should have 2, 3 or more -------------- #\n","        # if np.sum(res_df[['minor_ST2_Trend', 'minor_ST3_Trend']].iloc[i]) >= 2:\n","        #   pass\n","        # else:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","        # -------------- sar const. -------------- #\n","        # # if res_df['sar2'].iloc[i] < res_df['low'].iloc[i] and res_df['sar3'].iloc[i] < res_df['low'].iloc[i]:\n","        # if res_df['sar2'].iloc[i] < res_df['low'].iloc[i]: # and \\\n","        # if  res_df['sar3'].iloc[i] < res_df['low'].iloc[i]:\n","        #   pass\n","        # else:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","        # -------------- limit waiting const. -------------- #\n","        # entry_done = False\n","        # for e_j in range(i + 1, len(res_df)):\n","\n","        #   #             Todo            #\n","        #   #             1. ep 설정\n","        #   #             2. limit 대기 시간 설정\n","        #   if res_df['low'].iloc[e_j] <= short_ep.iloc[initial_i]:\n","        #     entry_done = True\n","        #     break\n","\n","        #   if res_df['close'].iloc[e_j] < res_df['middle_line'].iloc[e_j]:     \n","        #     break\n","\n","        # i = e_j\n","\n","\n","        # if entry_done:\n","        #   pass\n","        # else:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","        if entry_type is 'market':\n","          ep_list = [res_df['close'].iloc[initial_i]]\n","        else:\n","          if entry[initial_i] == 1:\n","            ep_list = [long_ep.iloc[initial_i]]\n","          else:\n","            ep_list = [res_df['open'].iloc[initial_i]]\n","\n","        if not static_lvrg:\n","          lvrg = target_pct / (res_df['close'].iloc[initial_i] / res_df['low'].rolling(hl_lookback).min().iloc[initial_i] - 1)\n","          lvrg = int(min(50, lvrg))\n","          lvrg_list.append(lvrg)\n","          \n","        ep_idx_list = [initial_i]\n","        tp_list = []\n","        tp_idx_list = []\n","\n","        remain_tp = 2\n","        hedge_cnt = 1\n","\n","        h_ep, h_tp = None, None        \n","        h_i, h_j = None, None      \n","\n","        trade_done = False\n","\n","        for j in range(i + 1, len(res_df)):     \n","          \n","          if static_tp:\n","            tp_j = initial_i\n","          else:\n","            tp_j = j   \n","\n","          # -------------- hedge only once -------------- #\n","          #             일단, h_quantity 는 초기 진입과 동일하게 설정         #\n","          # if res_df['low'].iloc[j] <= res_df['minor_ST2_Down'].iloc[j] and hedge_cnt == 1:\n","          # if res_df['close'].iloc[j] <= res_df['minor_ST2_Down'].iloc[j] and hedge_cnt == 1:\n","          # if res_df['close'].iloc[j] <= res_df['minor_ST3_Down'].iloc[j] and hedge_cnt == 1:\n","\n","          #   h_ep = res_df['close'].iloc[j]\n","          #   hedge_cnt -= 1\n","          #   h_i = j\n","\n","          # -------------- sub ep -------------- #\n","          # if res_df['low'].iloc[j - 1] >= res_df['sar2'].iloc[j - 1] and res_df['low'].iloc[j] < res_df['sar2'].iloc[j]:\n","            \n","          #   sub_ep = res_df['sar2'].iloc[j - 1]\n","\n","          #   if sub_ep > ep_list[-1]:\n","          #     ep_list.append(sub_ep)\n","          #     ep_idx_list.append(j)\n","\n","\n","          # -------------- sub tp --------------  #\n","          # if res_df['high'].iloc[j] >= long_tp2.iloc[j] and remain_tp == 2:\n","\n","          #   # trade_done = True\n","          #   remain_tp -= 1\n","\n","          #   #         dynamic tp        #\n","          #   if long_tp2.iloc[j] != long_tp2.iloc[j - 1]:\n","\n","          #     #   tp limit 이 불가한 경우 = open 이 이미, tp 를 넘은 경우 # \n","          #     if res_df['open'].iloc[j] >= long_tp2.iloc[j]:\n","\n","          #       # tp = long_tp2.iloc[j]\n","          #       tp = res_df['open'].iloc[j]\n","          #       # tp_state_list.append(\"d-open\")\n","\n","              \n","          #     #   tp limit 이 가능한 경우 = open 이 아직, tp 를 넘지 않은 경우 # \n","          #     else:\n","                \n","          #       tp = long_tp2.iloc[j]\n","          #       # tp = res_df['open'].iloc[j]\n","          #       # tp_state_list.append(\"d-long_tp2\")\n","\n","          #   #         static tp         #\n","          #   else:\n","\n","          #     #   tp limit 이 불가한 경우 = open 이 이미, tp 를 넘은 경우 # \n","          #     #   non_inversion 의 경우, short_tp 가 가능함   #\n","\n","          #     if res_df['open'].iloc[j] >= long_tp2.iloc[j]:\n","\n","          #       tp = long_tp2.iloc[j]\n","          #       # tp = res_df['open'].iloc[j]\n","          #       # tp_state_list.append(\"s-long_tp2\")\n","\n","              \n","          #     #   tp limit 이 가능한 경우 = open 이 아직, tp 를 넘지 않은 경우 # \n","          #     else:\n","                \n","          #       tp = long_tp2.iloc[j]\n","          #       # tp = res_df['open'].iloc[j]\n","          #       # tp_state_list.append(\"s-long_tp2\")       \n","            \n","          #   tp_list.append(tp)  \n","\n","\n","          # -------------- ultimate tp -------------- #\n","          #            1. by price line            #\n","          if exit_type != 'market':\n","\n","            if res_df['high'].iloc[j] >= long_tp.iloc[tp_j]:\n","            # if res_df['high'].iloc[j] >= long_tp.iloc[j]:\n","\n","              trade_done = True\n","\n","              #         dynamic tp        #\n","              # if 0:\n","              if long_tp.iloc[j] != long_tp.iloc[j - 1] and not static_tp:\n","\n","                #   tp limit 이 불가한 경우 = open 이 이미, tp 를 넘은 경우 # \n","                # if res_df['open'].iloc[j] >= long_tp.iloc[initial_i]:\n","                if res_df['open'].iloc[j] >= long_tp.iloc[j]:\n","\n","                  # tp = long_tp.iloc[initial_i]\n","                  tp = res_df['open'].iloc[j]\n","                  tp_state_list.append(\"d-long_open\")\n","\n","                \n","                #   tp limit 이 가능한 경우 = open 이 아직, tp 를 넘지 않은 경우 # \n","                else:\n","                  \n","                  # tp = long_tp.iloc[initial_i]\n","                  tp = long_tp.iloc[j]\n","                  # tp = res_df['open'].iloc[j]\n","                  tp_state_list.append(\"d-long_tp\")\n","\n","              #         static tp         #\n","              else:\n","\n","                #   tp limit 이 불가한 경우 = open 이 이미, tp 를 넘은 경우 # \n","                #   non_inversion 의 경우, short_tp 가 가능함   #\n","\n","                if res_df['open'].iloc[j] >= long_tp.iloc[tp_j]:\n","                # if res_df['open'].iloc[j] >= long_tp.iloc[initial_i]:\n","\n","                  # tp = long_tp.iloc[initial_i]\n","                  tp = long_tp.iloc[tp_j]\n","\n","                  # tp = res_df['open'].iloc[j]\n","                  tp_state_list.append(\"s-long_tp\")\n","\n","                \n","                #   tp limit 이 가능한 경우 = open 이 아직, tp 를 넘지 않은 경우 # \n","                else:\n","                  \n","                  # tp = long_tp.iloc[initial_i]\n","                  tp = long_tp.iloc[tp_j]\n","\n","                  # tp = res_df['open'].iloc[j]\n","                  tp_state_list.append(\"s-long_tp\")         \n","              \n","              tp_list.append(tp)\n","              tp_idx_list.append(j)\n","\n","          #           2. by signal        #\n","          else:\n","\n","            # -------------- sar tp -------------- #\n","            # if (res_df['low'].iloc[j] <= res_df['sar2'].iloc[j]) & \\\n","            #   (res_df['low'].iloc[j - 1] > res_df['sar2'].iloc[j - 1]) & \\\n","            #   (res_df['low'].iloc[j - 2] > res_df['sar2'].iloc[j - 2]):\n","            \n","            #       inversion     #\n","            # if (res_df['high'].iloc[j] >= res_df['sar2'].iloc[j]) & \\\n","            #   (res_df['high'].iloc[j - 1] < res_df['sar2'].iloc[j - 1]) & \\\n","            #   (res_df['high'].iloc[j - 2] < res_df['sar2'].iloc[j - 2]):\n","\n","            # -------------- st tp -------------- #\n","            # if res_df['close'].iloc[j] < res_df['middle_line'].iloc[j]:\n","\n","            # -------------- fisher tp -------------- #\n","            if entry[j] == -1:\n","              \n","              tp = res_df['close'].iloc[j]\n","              # tp = res_df['open'].iloc[j]\n","              tp_state_list.append(\"long close tp\")\n","              trade_done = True\n","\n","              tp_list.append(tp) \n","              tp_idx_list.append(j)\n","\n","\n","\n","          # -------------- cut -------------- #\n","          # if not trade_done:\n","              \n","          #   # if res_df['macd_hist3'].iloc[j] < 0:\n","          #   # # if res_df['macd_hist3'].iloc[i] > 0 and res_df['macd_hist3'].iloc[j] < 0:\n","          #   # if res_df['close'].iloc[j] < res_df['middle_line'].iloc[j]:\n","          #   # if res_df['close'].iloc[j] < res_df[sma].iloc[j]:            \n","          #   if res_df['close'].iloc[j] < res_df['minor_ST3_Down'].iloc[j]:\n","          #   # if res_df['close'].iloc[j] < res_df['minor_ST3_Down'].iloc[j] \\\n","          #   #   or res_df['sar2'].iloc[j] >= res_df['low'].iloc[j]:\n","\n","          #   # if res_df['close'].iloc[j] < lower_middle.iloc[j]:\n","            \n","            # if res_df['close'].iloc[j] < long_cut.iloc[tp_j]:\n","\n","            #   tp = res_df['close'].iloc[j]\n","            #   # tp = res_df['open'].iloc[j]\n","            #   tp_state_list.append(\"long close_cut\")\n","            #   trade_done = True\n","\n","            #   tp_list.append(tp)\n","            #   tp_idx_list.append(j)\n","\n","          \n","          # -------------- non tp -------------- #\n","          if j == len(res_df) - 1:\n","            trade_done = True\n","            tp = res_df['close'].iloc[j]\n","            tp_list.append(tp) \n","            tp_idx_list.append(j)\n","\n","\n","          if trade_done:\n","\n","            # if entry[initial_i] == 1:\n","            #   # ep = res_df['close'].iloc[initial_i]\n","            #   # ep_list[0] = long_ep.iloc[initial_i]\n","            #   pass\n","            # else:\n","            #   # ep = long_ep.iloc[i]\n","            #   ep_list[0] = res_df['open'].iloc[initial_i]\n","            #   # ep = res_df['close'].iloc[initial_i - 1]\n","\n","            qty_list = []\n","            temp_pr_list = []\n","            r_qty = 1\n","            for q_i in range(len(tp_list) - 1, -1, -1):\n","\n","              if len(tp_list) == 1:\n","                temp_qty = r_qty\n","              else:\n","                if q_i !=0:\n","                  temp_qty = r_qty / p_qty_divider\n","                else:\n","                  temp_qty = r_qty\n","\n","              # temp_pr = (tp_list[q_i] / ep_list[0] - fee - 1) * temp_qty\n","              temp_pr = (tp_list[q_i] / ep_list[0] - fee - 1) * temp_qty * lvrg\n","              r_qty -= temp_qty\n","\n","              temp_pr_list.append(temp_pr)\n","\n","            temp_pr = sum(temp_pr_list) + 1\n","\n","            # -------------------- sub ep -> pr calc -------------------- #\n","            if len(ep_list) > 1:\n","            \n","              p_ep_pr = []\n","              for sub_ep_ in ep_list:\n","                sub_pr = (tp / sub_ep_ - fee - 1) * lvrg\n","                p_ep_pr.append(sub_pr)\n","\n","              temp_pr = sum(p_ep_pr) + 1\n","\n","              print(\"temp_pr :\", temp_pr)\n","\n","            # ------------ hedge + non_hedge pr summation ------------ #\n","            #         hedge pr direction is opposite to the origin       #\n","            hedge_pr = 1\n","            if hedge_cnt == 0:\n","\n","              #       hedge tp      #\n","              h_tp = res_df['close'].iloc[j]\n","              hedge_pr = (h_ep / h_tp - fee - 1) * lvrg  # hedge short\n","              temp_pr += hedge_pr\n","              h_j = j\n","\n","\n","            ll = min(res_df['low'].iloc[i:j + 1])\n","            long_liq = (ll / ep_list[0] - fee - 1) * lvrg + 1\n","\n","            if j != len(res_df) - 1:\n","\n","              ep_tp_list.append((ep_list, tp_list))\n","              trade_list.append((ep_idx_list, tp_idx_list))\n","\n","              liqd_list.append(long_liq)\n","              long_liqd_list.append(long_liq)\n","\n","              h_ep_tp_list.append((h_ep, h_tp))        \n","              h_trade_list.append([initial_i, h_i, h_j])                \n","\n","              pr_list.append(temp_pr)\n","              long_list.append(temp_pr)\n","\n","              h_pr_list.append(hedge_pr)\n","              h_long_list.append(hedge_pr)                    \n","\n","              i = j\n","              break\n","            \n","            else:\n","          \n","              #         tp 미체결 survey        #\n","              nontp_liqd_list.append(long_liq)\n","              nontp_long_liqd_list.append(long_liq)\n","              nontp_long_indexs.append(i)\n","              nontp_long_ep_list.append(ep_list[0])\n","              \n","              nontp_long_pr = (tp / ep_list[0] - fee - 1) * lvrg + 1\n","              nontp_pr_list.append(nontp_long_pr)\n","              nontp_long_pr_list.append(nontp_long_pr)\n","\n","\n","      i += 1\n","      if i >= len(res_df):\n","        break\n","\n","\n","\n","    # -------------------- result analysis -------------------- #\n","    try:\n","      plt.figure(figsize=(16, 12))\n","      plt.suptitle(key)\n","\n","      np_pr = np.array(pr_list)\n","      # np_pr = (np.array(pr_list) - 1) * lvrg + 1\n","\n","      total_pr = np.cumprod(np_pr)\n","      wr = len(np_pr[np_pr > 1]) / len(np_pr[np_pr != 1])\n","\n","      # plt.subplot(121)\n","      plt.subplot(231)\n","      plt.plot(total_pr)\n","      if len(nontp_liqd_list) != 0:\n","        plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\\nliqd : %.2f\\nnontp_liqd_cnt : %s\\nnontp_liqd : %.2f\\nontp_liqd_pr : %.2f\" \n","                  % (wr, np.min(np_pr), total_pr[-1], lvrg, min(liqd_list), len(nontp_liqd_list), min(nontp_liqd_list), min(nontp_pr_list)))\n","      else:\n","        plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\\nliqd : %.2f\\nnontp_liqd_cnt : %s\" \n","                  % (wr, np.min(np_pr), total_pr[-1], lvrg, min(liqd_list), len(nontp_liqd_list)))\n","      # plt.show()\n","\n","      #         short only      #\n","      np_short_pr = np.array(short_list)\n","\n","      total_short_pr = np.cumprod(np_short_pr)\n","      short_wr = len(np_short_pr[np_short_pr > 1]) / len(np_short_pr[np_short_pr != 1])\n","      \n","      plt.subplot(232)\n","      plt.plot(total_short_pr)\n","      if len(nontp_short_liqd_list) != 0:   \n","\n","        max_nontp_short_term = len(res_df) - nontp_short_indexs[0]\n","        \n","        plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\\nliqd : %.2f\\nnontp_short_liqd_cnt : %s\\nnontp_short_liqd : %.2f\\nontp_short_liqd_pr : %.2f\\nmax_nontp_short_term : %s\"  \n","                  % (short_wr, np.min(np_short_pr), total_short_pr[-1], lvrg, min(short_liqd_list), \n","                     len(nontp_short_liqd_list), min(nontp_short_liqd_list), min(nontp_short_pr_list), max_nontp_short_term))\n","      else:\n","        plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\\nliqd : %.2f\\nnontp_short_liqd_cnt : %s\"  \n","                  % (short_wr, np.min(np_short_pr), total_short_pr[-1], lvrg, min(short_liqd_list), len(nontp_short_liqd_list)))\n","\n","      #         long only      #\n","      np_long_pr = np.array(long_list)\n","      # np_long_pr = (np.array(long_list) - 1) * lvrg + 1\n","\n","      total_long_pr = np.cumprod(np_long_pr)\n","      long_wr = len(np_long_pr[np_long_pr > 1]) / len(np_long_pr[np_long_pr != 1])\n","      \n","      plt.subplot(233)\n","      plt.plot(total_long_pr)\n","      if len(nontp_long_liqd_list) != 0:\n","\n","        max_nontp_long_term = len(res_df) - nontp_long_indexs[0]\n","\n","        plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\\nliqd : %.2f\\nnontp_long_liqd_cnt : %s\\nnontp_long_liqd : %.2f\\nontp_long_liqd_pr : %.2f\\nmax_nontp_long_term : %s\"   \n","                  % (long_wr, np.min(np_long_pr), total_long_pr[-1], lvrg, min(long_liqd_list), \n","                     len(nontp_long_liqd_list), min(nontp_long_liqd_list), min(nontp_long_pr_list), max_nontp_long_term))\n","      else:\n","        plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\\nliqd : %.2f\\nnontp_long_liqd_cnt : %s\"   \n","                  % (long_wr, np.min(np_long_pr), total_long_pr[-1], lvrg, min(long_liqd_list), len(nontp_long_liqd_list)))\n","\n","\n","      #     reversion adjustment      #\n","      # rev_np_pr = 1 / (np.array(pr_list) + fee) - fee\n","      rev_np_pr = (1 / ((np.array(pr_list) - 1) / lvrg + fee + 1) - fee - 1) * lvrg + 1\n","      # rev_np_pr = (1 / (np.array(pr_list) + fee) - fee - 1) * lvrg + 1\n","          \n","      rev_total_pr = np.cumprod(rev_np_pr)\n","      rev_wr = len(rev_np_pr[rev_np_pr > 1]) / len(rev_np_pr[rev_np_pr != 1])\n","\n","      # plt.subplot(122)\n","      plt.subplot(234)\n","      plt.plot(rev_total_pr)\n","      plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\" % (rev_wr, np.min(rev_np_pr), rev_total_pr[-1], lvrg))\n","\n","      #         short       #\n","      # rev_np_short_pr = 1 / (np.array(short_list) + fee) - fee\n","      rev_np_short_pr = (1 / ((np.array(short_list) - 1) / lvrg + fee + 1) - fee - 1) * lvrg + 1\n","      # rev_np_short_pr = (1 / (np.array(short_list) + fee) - fee - 1) * lvrg + 1\n","          \n","      rev_total_short_pr = np.cumprod(rev_np_short_pr)\n","      rev_short_wr = len(rev_np_short_pr[rev_np_short_pr > 1]) / len(rev_np_short_pr[rev_np_short_pr != 1])\n","\n","      # plt.subplot(122)\n","      plt.subplot(235)\n","      plt.plot(rev_total_short_pr)\n","      plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\" % (rev_short_wr, np.min(rev_np_short_pr), rev_total_short_pr[-1], lvrg))\n","\n","      #         long       #\n","      # rev_np_long_pr = 1 / (np.array(long_list) + fee) - fee\n","      rev_np_long_pr = (1 / ((np.array(long_list) - 1) / lvrg + fee + 1) - fee - 1) * lvrg + 1\n","          \n","      rev_total_long_pr = np.cumprod(rev_np_long_pr)\n","      rev_long_wr = len(rev_np_long_pr[rev_np_long_pr > 1]) / len(rev_np_long_pr[rev_np_long_pr != 1])\n","\n","      # plt.subplot(122)\n","      plt.subplot(236)\n","      plt.plot(rev_total_long_pr)\n","      plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\" % (rev_long_wr, np.min(rev_np_long_pr), rev_total_long_pr[-1], lvrg))\n","      \n","      plt.show()\n","\n","      h_np_pr = np.array(h_pr_list)\n","      # h_rev_np_pr = 1 / (np.array(h_pr_list) + fee) - fee    # define, for plot_check below cell\n","      h_rev_np_pr = (1 / ((np.array(h_pr_list) - 1) / lvrg + fee + 1) - fee - 1) * lvrg + 1\n","\n","      # --------------------- h pr plot --------------------- #\n","      if len(h_np_pr[h_np_pr != 1]) != 0:\n","\n","        plt.figure(figsize=(16, 12))\n","        plt.suptitle(key + \" hedge\")\n","\n","        h_total_pr = np.cumprod(h_np_pr)\n","        h_wr = len(h_np_pr[h_np_pr > 1]) / len(h_np_pr[h_np_pr != 1])\n","\n","        # plt.subplot(121)\n","        plt.subplot(231)\n","        plt.plot(h_total_pr)\n","        plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\" % (h_wr, np.min(h_np_pr), h_total_pr[-1], lvrg))\n","        # plt.show()\n","\n","        #         short only      #\n","        h_np_short_pr = np.array(h_short_list)\n","\n","        h_total_short_pr = np.cumprod(h_np_short_pr)\n","        h_short_wr = len(h_np_short_pr[h_np_short_pr > 1]) / len(h_np_short_pr[h_np_short_pr != 1])\n","        \n","        plt.subplot(232)\n","        plt.plot(h_total_short_pr)\n","        plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\" % (h_short_wr, np.min(h_np_short_pr), h_total_short_pr[-1], lvrg))\n","\n","        #         long only      #\n","        h_np_long_pr = np.array(h_long_list)\n","\n","        h_total_long_pr = np.cumprod(h_np_long_pr)\n","        h_long_wr = len(h_np_long_pr[h_np_long_pr > 1]) / len(h_np_long_pr[h_np_long_pr != 1])\n","        \n","        plt.subplot(233)\n","        plt.plot(h_total_long_pr)\n","        plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\" % (h_long_wr, np.min(h_np_long_pr), h_total_long_pr[-1], lvrg))\n","\n","\n","        #     reversion adjustment      #\n","            \n","        h_rev_total_pr = np.cumprod(h_rev_np_pr)\n","        h_rev_wr = len(h_rev_np_pr[h_rev_np_pr > 1]) / len(h_rev_np_pr[h_rev_np_pr != 1])\n","\n","        # plt.subplot(122)\n","        plt.subplot(234)\n","        plt.plot(h_rev_total_pr)\n","        plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\" % (h_rev_wr, np.min(h_rev_np_pr), h_rev_total_pr[-1], lvrg))\n","\n","        #         short       #\n","        # h_rev_np_short_pr = 1 / (np.array(h_short_list) + fee) - fee\n","        h_rev_np_short_pr =  (1 / ((np.array(h_short_list) - 1) / lvrg + fee + 1) - fee - 1) * lvrg + 1\n","           \n","        h_rev_total_short_pr = np.cumprod(h_rev_np_short_pr)\n","        h_rev_short_wr = len(h_rev_np_short_pr[h_rev_np_short_pr > 1]) / len(h_rev_np_short_pr[h_rev_np_short_pr != 1])\n","\n","        # plt.subplot(122)\n","        plt.subplot(235)\n","        plt.plot(h_rev_total_short_pr)\n","        plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\" % (h_rev_short_wr, np.min(h_rev_np_short_pr), h_rev_total_short_pr[-1], lvrg))\n","\n","        #         long       #\n","        # h_rev_np_long_pr = 1 / (np.array(h_long_list) + fee) - fee\n","        h_rev_np_short_pr =  (1 / ((np.array(h_long_list) - 1) / lvrg + fee + 1) - fee - 1) * lvrg + 1\n","            \n","        h_rev_total_long_pr = np.cumprod(h_rev_np_long_pr)\n","        h_rev_long_wr = len(h_rev_np_long_pr[h_rev_np_long_pr > 1]) / len(h_rev_np_long_pr[h_rev_np_long_pr != 1])\n","\n","        # plt.subplot(122)\n","        plt.subplot(236)\n","        plt.plot(h_rev_total_long_pr)\n","        plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\" % (h_rev_long_wr, np.min(h_rev_np_long_pr), h_rev_total_long_pr[-1], lvrg))\n","        \n","        plt.show()\n","          \n","    except Exception as e:\n","      print('error in pr plot :', e)   \n","    \n","\n","    print()\n","\n","    break # indi. loop\n","  break # pair loop"],"execution_count":8,"outputs":[{"output_type":"stream","text":["2021-07-01 ETHUSDT_backi2.xlsx loaded !\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1152x864 with 6 Axes>"]},"metadata":{"needs_background":"light"}},{"output_type":"stream","text":["\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"-IbP_Z3Dlwk4"},"source":["### nontp survey"]},{"cell_type":"markdown","metadata":{"id":"FxJ1y8v2fkCR"},"source":["##### term & liqd"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":614},"id":"-qIWa48pl1GO","executionInfo":{"status":"ok","timestamp":1628300788555,"user_tz":-540,"elapsed":8,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"}},"outputId":"b2687c93-e070-4d45-8a67-4cc783fd78f1"},"source":["# print(nontp_long_indexs)\n","\n","plot_size = 100\n","\n","for s_i in range(plot_size, len(trade_list), plot_size):\n","\n","  slice_trade_list = trade_list[s_i - plot_size:s_i]\n","  slice_liqd_list = liqd_list[s_i - plot_size:s_i]\n","\n","  # print(len(slice_trade_list))\n","  np_trade = np.array(slice_trade_list)\n","  trade_term = np_trade[:, [2]] - np_trade[:, [1]]\n","\n","  plt.figure(figsize=(5, 10))\n","  plt.subplot(211)\n","  plt.bar(np.arange(len(trade_term)), trade_term.reshape(-1,), width=1, color='b')\n","\n","  # plt.plot(trade_term.reshape(-1,))\n","  plt.ylim(0, 1000)\n","  # plt.show()\n","  # print()\n","\n","  plt.subplot(212)\n","  # print(len(liqd_list))\n","  # plt.bar(np.arange(len(liqd_list)), liqd_list)\n","  plt.bar(np.arange(len(slice_liqd_list)), np.array(slice_liqd_list), width=1, color='r')\n","  # plt.plot(slice_liqd_list)\n","  plt.show()\n","\n","print()"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 360x720 with 2 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}},{"output_type":"stream","text":["\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"VBwVaUkvfnOd"},"source":["##### check nontp index"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"mRCMBOU4frNY","executionInfo":{"status":"ok","timestamp":1628220543161,"user_tz":-540,"elapsed":454,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"}},"outputId":"ce4a9c9b-3589-40b3-8a19-4be03d5b9a1e"},"source":["# np_nontp_short_indexs = np.array(nontp_short_indexs)\n","# np_nontp_long_indexs = np.array(nontp_long_indexs)\n","\n","# short_til_term = len(res_df) - np_nontp_short_indexs\n","# long_til_term = len(res_df) - np_nontp_long_indexs\n","\n","max_nontp_short_term = len(res_df) - nontp_short_indexs[0]\n","max_nontp_long_term = len(res_df) - nontp_long_indexs[0]\n","\n","print(max_nontp_long_term)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["32747\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"JNQxkb06ZdTe"},"source":["# traded section plot"]},{"cell_type":"markdown","metadata":{"id":"UmH_Pb5BZUtm"},"source":["## plot with off-color st with dash"]},{"cell_type":"markdown","metadata":{"id":"59nW2aKYzkN8"},"source":["### plot all indicator (stepline ver.)"]},{"cell_type":"code","metadata":{"id":"JDH4rXgNzno6","colab":{"base_uri":"https://localhost:8080/","height":1000,"output_embedded_package_id":"1SF4TTuWoywT-KX-p09n_CtPLR3OJ8fXA"},"executionInfo":{"status":"ok","timestamp":1629372394221,"user_tz":-540,"elapsed":29780,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"}},"outputId":"8b9faa72-e21d-443a-d87f-a0cd0ced0db4"},"source":["prev_plotsize = 50\n","post_plotsize = 10\n","\n","# inversion = True\n","inversion = False\n","\n","# hedge = True\n","# hedge = False\n","\n","\n","if inversion:  \n","\n","    plot_pr_list = rev_np_pr\n","    h_plot_pr_list = h_rev_np_pr  # hedge\n","\n","else:\n","\n","    plot_pr_list = np_pr\n","    h_plot_pr_list = h_np_pr\n","\n","\n","\n","#         select plot columns       #\n","basic_list = ['open', 'high', 'low', 'close', 'minor_ST1_Up', 'minor_ST1_Down',\n","       'minor_ST2_Up', 'minor_ST2_Down', 'minor_ST3_Up', 'minor_ST3_Down',\n","       'middle_line', 'min_upper', 'max_lower']\n","senkoua_list = ['senkou_a1', 'senkou_a2', 'senkou_a3', 'senkou_a4', 'senkou_a5']\n","senkoub_list = ['senkou_b1', 'senkou_b2', 'senkou_b3', 'senkou_b4', 'senkou_b5']\n","senkoua_list = ['senkou_a1', 'senkou_a2', 'senkou_a3']\n","senkoub_list = ['senkou_b1', 'senkou_b2', 'senkou_b3']\n","# sar_list = ['sar1', 'sar2', 'sar3', 'sar4', 'sar5']\n","# sar_list = ['sar1', 'sar2', 'sar3', 'sar4', 'sar5']\n","sar_list = ['sar1', 'sar2', 'sar3']\n","sar_list = ['sar1', 'sar2', 'sar3']\n","\n","sma_list = ['sma', 'sma4']\n","\n","\n","#     -------------- under price phase --------------    #\n","macd_list = ['macd_hist1', 'macd_hist2', 'macd_hist3', 'macd_hist4', 'macd_hist5']\n","# macd_list = ['macd_hist1', 'macd_hist2', 'macd_hist3']\n","# trix_list = ['trix1', 'trix2', 'trix3', 'trix4', 'trix5']\n","trix_list = ['trix1', 'trix2', 'trix3']\n","stoch_list = ['stoch']\n","fisher_list = ['fisher30', 'fisher60', 'fisher120']\n","cctbbo_list = ['cctbbo']\n","\n","\n","#       \n","# input_cols = basic_cols + sar_cols + ichimoku_cols + macd_cols + ichimoku_cols2\n","# input_colname = basic_list + senkoua_list + senkoub_list + sar_list + macd_list + trix_list\n","input_colname = basic_list + senkoua_list + senkoub_list + sar_list + macd_list + stoch_list + fisher_list + cctbbo_list\n","price_colname = basic_list + senkoua_list + senkoub_list + sar_list\n","# input_cols = basic_cols + sar_cols + ichimoku_cols + macd_cols\n","\n","\n","\n","\n","# for t_i, (initial_i, i, j) in enumerate(trade_list):\n","for t_i, (ep_idx_list_, tp_idx_list_) in enumerate(trade_list):\n","  # print(i, j)\n","\n","  if not(i >= prev_plotsize):\n","    continue\n","\n","  # if i <= 4860:\n","  # if i == 1536:\n","  # # if 1800 < i < 1860:\n","  #   pass\n","  # else:\n","  #   continue\n","\n","  # if tp_state_list[t_i] != 'd-open':\n","  #   continue\n","\n","  # if (entry[i] == -1) and res_df['close'].iloc[i - 1] > short_ep.iloc[i]:\n","  #   pass\n","  # else:\n","  #   continue\n","\n","  # if plot_pr_list[t_i] > 0.5:\n","  if plot_pr_list[t_i] > 1.0:\n","  # if plot_pr_list[t_i] < 1.0:\n","    continue\n","\n","  # plot_df = res_df.iloc[i - prev_plotsize:j + post_plotsize, input_cols]\n","  plot_df = res_df.iloc[ep_idx_list_[0] - prev_plotsize:tp_idx_list_[-1] + post_plotsize][input_colname]\n","\n","\n","  #       keep off-color st with another variable         #\n","  st_trend_plot_df = res_df.iloc[ep_idx_list_[0] - prev_plotsize:tp_idx_list_[-1] + post_plotsize, [7, 10, 13]]\n","\n","  # y_max = np.max(plot_df.iloc[:, [4, 6, 8]])\n","  # y_min = np.min(plot_df.iloc[:, [5, 7, 9]])\n","  # print(\"y_max, y_min :\", y_max, y_min)\n","  \n","  # y_max = max(np.max(plot_df.iloc[:, [4, 6, 8]]))\n","  # y_min = min(np.min(plot_df.iloc[:, [5, 7, 9]]))\n","  \n","  y_max = max(np.max(plot_df[price_colname]))\n","  y_min = min(np.min(plot_df[price_colname]))\n","\n","  if np.isnan(y_max) or np.isnan(y_min):\n","    continue\n","  # print(\"y_max, y_min :\", y_max, y_min)\n","  # break\n","\n","  plot_df[\"off_color_upper_st1\"] = np.where(st_trend_plot_df.iloc[:, [0]] == 1, plot_df.iloc[:, [4]], np.nan)\n","  plot_df[\"off_color_upper_st2\"] = np.where(st_trend_plot_df.iloc[:, [1]] == 1, plot_df.iloc[:, [6]], np.nan)\n","  plot_df[\"off_color_upper_st3\"] = np.where(st_trend_plot_df.iloc[:, [2]] == 1, plot_df.iloc[:, [8]], np.nan)\n","  plot_df[\"off_color_lower_st1\"] = np.where(st_trend_plot_df.iloc[:, [0]] == -1, plot_df.iloc[:, [5]], np.nan)\n","  plot_df[\"off_color_lower_st2\"] = np.where(st_trend_plot_df.iloc[:, [1]] == -1, plot_df.iloc[:, [7]], np.nan)\n","  plot_df[\"off_color_lower_st3\"] = np.where(st_trend_plot_df.iloc[:, [2]] == -1, plot_df.iloc[:, [9]], np.nan)\n","\n","\n","  #       replace st values with np.nan, using st trend     #\n","  plot_df.iloc[:, [4]] = np.where(st_trend_plot_df.iloc[:, [0]] == 1, np.nan, plot_df.iloc[:, [4]])\n","  plot_df.iloc[:, [6]] = np.where(st_trend_plot_df.iloc[:, [1]] == 1, np.nan, plot_df.iloc[:, [6]])\n","  plot_df.iloc[:, [8]] = np.where(st_trend_plot_df.iloc[:, [2]] == 1, np.nan, plot_df.iloc[:, [8]])\n","  plot_df.iloc[:, [5]] = np.where(st_trend_plot_df.iloc[:, [0]] == -1, np.nan, plot_df.iloc[:, [5]])\n","  plot_df.iloc[:, [7]] = np.where(st_trend_plot_df.iloc[:, [1]] == -1, np.nan, plot_df.iloc[:, [7]])\n","  plot_df.iloc[:, [9]] = np.where(st_trend_plot_df.iloc[:, [2]] == -1, np.nan, plot_df.iloc[:, [9]])\n","\n","\n","  plot_short_ep = short_ep.iloc[ep_idx_list_[0] - prev_plotsize:tp_idx_list_[-1] + post_plotsize]\n","  plot_long_ep = long_ep.iloc[ep_idx_list_[0] - prev_plotsize:tp_idx_list_[-1] + post_plotsize]\n","\n","  plot_upper_middle = (plot_df['middle_line'] + plot_df['min_upper']) / 2\n","  plot_lower_middle = (plot_df['middle_line'] + plot_df['max_lower']) / 2\n","\n","  plot_short_tp = short_tp.iloc[ep_idx_list_[0] - prev_plotsize:tp_idx_list_[-1] + post_plotsize]\n","  plot_long_tp = long_tp.iloc[ep_idx_list_[0] - prev_plotsize:tp_idx_list_[-1] + post_plotsize]  \n","\n","\n","\n","  # fig = plt.figure(figsize=(12, 16))\n","  fig = plt.figure(figsize=(12, 16))\n","  \n","  gs = gridspec.GridSpec(nrows=3, # row 몇 개 \n","                       ncols=1, # col 몇 개 \n","                       height_ratios=[3, 1, 1]\n","                      )\n","  \n","  # fig = plt.figure(figsize=(8, 12))\n","  # ax = fig.add_subplot(111)\n","  # ax = fig.add_subplot(311)\n","  ax = fig.add_subplot(gs[0])\n","\n","  # fig.show()\n","  # fig.canvas.draw()\n","\n","  temp_ohlc = plot_df.values[:, :4]\n","  index = np.arange(len(temp_ohlc))\n","  candle = np.hstack((np.reshape(index, (-1, 1)), temp_ohlc))\n","  mf.candlestick_ohlc(ax, candle, width=0.5, colorup='r', colordown='b')\n","\n","  # print(plot_df.values[:, 4:])\n","  plt.step(plot_df.values[:, [4, 6, 8]], 'r', alpha=1)  # upper on color\n","  # plt.plot(plot_df.values[:, [4, 6, 8]], 'r', alpha=1)  # upper on color\n","  plt.step(plot_df.values[:, [5, 7, 9]], 'b', alpha=1)  # lower on color\n","  plt.step(plot_df.values[:, [10]], 'fuchsia', alpha=1)  # middle\n","  \n","  plt.step(plot_df.values[:, -6:-3], 'r', alpha=1, linestyle=':')  # upper off color\n","  plt.step(plot_df.values[:, -3:], 'b', alpha=1, linestyle=':')  # lower off color\n","\n","\n","\n","  # plt.step(np.arange(len(plot_df)), plot_short_ep.values, alpha=1, linestyle='--', color='y')  # ep\n","  # plt.step(np.arange(len(plot_df)),plot_long_ep.values, alpha=1, linestyle='--', color='y')  # ep\n","\n","  plt.step(np.arange(len(plot_df)), plot_upper_middle.values, alpha=1, linestyle='--', color='g')  # 2nd middle\n","  plt.step(np.arange(len(plot_df)), plot_lower_middle.values, alpha=1, linestyle='--', color='g')  # 2nd middle\n","\n","  # plt.step(np.arange(len(plot_df)), plot_short_tp.values, alpha=1, linestyle=':', color='y')  # tp\n","  # plt.step(np.arange(len(plot_df)), plot_long_tp.values, alpha=1, linestyle=':', color='y')  # tp\n","\n","\n","\n","  # ---------------------- on price indicator part ---------------------- #\n","\n","  # alpha = 1\n","  # for sm_i, sma in enumerate(sma_list):\n","  #   if sm_i > 0:\n","  #     lw = 5\n","  #   else:\n","  #     lw = 2\n","  #   plt.plot(plot_df[sma].values, alpha=alpha, color='black', linewidth=lw)\n","  #   alpha -= 0.2\n","  \n","  #               sar               #\n","  alpha = 1\n","  markersize = 5\n","  for sar in sar_list:\n","    plt.step(plot_df[sar].values, 'c*', alpha=alpha, markersize=markersize, color='dodgerblue')  # sar mic\n","    markersize += 1\n","    alpha -= 0.1\n","\n","  # plt.step(plot_df.values[:, [12]], 'co', alpha=1, markersize=7)  # sar mac\n","\n","  #               cloud               #\n","  alpha = 0.7\n","  for senkoua, senkoub in zip(senkoua_list, senkoub_list):\n","    plt.fill_between(np.arange(len(plot_df)), plot_df[senkoua].values, plot_df[senkoub].values, # ichimoku\n","                      where=plot_df[senkoua].values >= plot_df[senkoub].values, facecolor='g', alpha=alpha) # ichimoku\n","    plt.fill_between(np.arange(len(plot_df)), plot_df[senkoua].values, plot_df[senkoub].values,\n","                      where=plot_df[senkoua].values <= plot_df[senkoub].values, facecolor='r', alpha=alpha)  \n","    alpha -= 0.05\n","  \n","  # ------------------------------------------------------------- #\n","\n","\n","  #       ep & tp     #\n","  # if i != initial_i:\n","  # if len(ep_idx_list_) > 1:\n","  for ep_i in range(len(ep_idx_list_)):\n","    plt.axvline(prev_plotsize - (ep_idx_list_[ep_i] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","\n","  # plt.axvline(prev_plotsize, alpha=0.5, linestyle='--')\n","  plt.axhline(ep_tp_list[t_i][0], linestyle='-', xmin=0.75, xmax=1, linewidth=3, color='lime')  # ep line axhline\n","\n","  for sub_i in range(len(ep_tp_list[t_i][1])):\n","    plt.axhline(ep_tp_list[t_i][1][sub_i], linestyle='-', xmin=0.75 + 0.05 * (sub_i + 1) , xmax=1, linewidth=3, color='lime')  # tp line axhline\n","    # plt.axhline(ep_tp_list[t_i][1], linestyle='-', xmin=0.9, xmax=1, linewidth=3)  # tp line axhline  \n","  plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","\n","\n","  #         hedge ep & tp         #\n","  h_i = h_trade_list[t_i][1]\n","  if h_i is not None:\n","    plt.axvline(prev_plotsize + (h_i - ep_idx_list_[0]), linestyle='--')\n","    plt.axhline(h_ep_tp_list[t_i][0], linestyle='-', xmin=0.75, xmax=1, linewidth=3, color='magenta')  # ep line axhline\n","    plt.axhline(h_ep_tp_list[t_i][1], linestyle='-', xmin=0.85, xmax=1, linewidth=3, color='magenta')  # tp line axhline\n","\n","  \n","  #         check pr        #\n","  if not static_lvrg:\n","    plt.title(\"%s ~ %s -> %.5f\\n %s\\n h_pr : %.5f\\nlvrg : %s\" % (ep_idx_list_[0], tp_idx_list_[-1], plot_pr_list[t_i], tp_state_list[t_i], h_plot_pr_list[t_i], lvrg_list[t_i]))\n","  else:\n","    plt.title(\"%s ~ %s -> %.5f\\n %s\\n h_pr : %.5f\" % (ep_idx_list_[0], tp_idx_list_[-1], plot_pr_list[t_i], tp_state_list[t_i], h_plot_pr_list[t_i]))\n","\n","  print(\"short real pr :\", (ep_tp_list[t_i][0] / ep_tp_list[t_i][1][sub_i] - fee - 1) * lvrg + 1)\n","  print(\"long real pr :\", (ep_tp_list[t_i][1][sub_i] / ep_tp_list[t_i][0] - fee - 1) * lvrg + 1)\n","\n","  #           y lim         #\n","  plt.ylim(y_min, y_max)\n","\n","\n","  # ---------------------- outer price indi. ---------------------- #\n","  #           macd          #\n","  # plt.subplot(312)\n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for macd in macd_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[macd].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","\n","  # plt.axhline(0, linestyle='--')\n","\n","  \n","  # #           trix          #  \n","  # # plt.subplot(313)\n","  # plt.subplot(gs[2])\n","  # alpha = 1\n","  # for trix in trix_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[trix].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","\n","  # plt.axhline(0, linestyle='--')\n","\n","  \n","  #           fisher          #  \n","  # plt.subplot(313)\n","  plt.subplot(gs[1])\n","  alpha = 1\n","  for fisher in fisher_list:\n","    plt.step(np.arange(len(plot_df)), plot_df[fisher].values, 'g', alpha=alpha)\n","    # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","    alpha -= 0.2\n","    \n","  plt.axvline(prev_plotsize, linestyle='--')\n","  plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","\n","  plt.axhline(0, linestyle='--')\n","  plt.axhline(fisher_upper, linestyle='--')\n","  plt.axhline(fisher_lower, linestyle='--')\n","\n","  #           stoch          #  \n","  # # plt.subplot(313)\n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for stoch in stoch_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[stoch].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axhline(50, linestyle='--')\n","  # plt.axhline(stoch_upper, linestyle='--')\n","  # plt.axhline(stoch_lower, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","\n","\n","\n","  # ---------------------- plot ---------------------- #\n","\n","  plt.show()\n","  # plt.draw()\n","  plt.close()\n","  print()\n","\n","  # break\n"],"execution_count":13,"outputs":[{"output_type":"display_data","data":{"text/plain":"Output hidden; open in https://colab.research.google.com to view."},"metadata":{}}]},{"cell_type":"markdown","metadata":{"id":"cj9X6S1jJjER"},"source":["### plot nontp case"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000,"output_embedded_package_id":"1dHUk1pGrUHlPNEF1BNYHFo70iOYuc0d-"},"id":"Gb1jGrS4Jl8A","executionInfo":{"status":"ok","timestamp":1628239204133,"user_tz":-540,"elapsed":5201438,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"}},"outputId":"3c9e8485-f381-43e9-ecd6-49126078bdd7"},"source":["prev_plotsize = 50\n","\n","# inversion = True\n","inversion = False\n","\n","# hedge = True\n","# hedge = False\n","\n","short_ver = False\n","\n","\n","if inversion:  \n","\n","    plot_pr_list = rev_np_pr\n","    h_plot_pr_list = h_rev_np_pr  # hedge\n","\n","else:\n","\n","    plot_pr_list = np_pr\n","    h_plot_pr_list = h_np_pr\n","\n","\n","\n","#         select plot columns       #\n","# basic_cols = [0, 1, 2, 3, 5, 6, 8, 9, 11, 12, 14] # you don't need to touch\n","\n","# sar_cols = [15, 18] # 15 ~ 19\n","# ichimoku_cols = [20, 21]  # 20 ~ 29\n","# # ichimoku_cols = [22, 23]  # 20 ~ 29\n","# ichimoku_cols2 = [22, 23]  # 20 ~ 29\n","# macd_cols = [30]  # 30 ~ 34\n","\n","# print(res_df.columns[basic_cols])\n","# break\n","\n","basic_list = ['open', 'high', 'low', 'close', 'minor_ST1_Up', 'minor_ST1_Down',\n","       'minor_ST2_Up', 'minor_ST2_Down', 'minor_ST3_Up', 'minor_ST3_Down',\n","       'middle_line', 'min_upper', 'max_lower']\n","# senkoua_list = ['senkou_a1', 'senkou_a2', 'senkou_a3', 'senkou_a4', 'senkou_a5']\n","# senkoub_list = ['senkou_b1', 'senkou_b2', 'senkou_b3', 'senkou_b4', 'senkou_b5']\n","senkoua_list = ['senkou_a1', 'senkou_a2', 'senkou_a3']\n","senkoub_list = ['senkou_b1', 'senkou_b2', 'senkou_b3']\n","# sar_list = ['sar1', 'sar2', 'sar3', 'sar4', 'sar5']\n","# sar_list = ['sar1', 'sar2', 'sar3', 'sar4', 'sar5']\n","sar_list = ['sar1', 'sar2', 'sar3']\n","sar_list = ['sar1', 'sar2', 'sar3']\n","\n","#     -------------- under price phase --------------    #\n","macd_list = ['macd_hist1', 'macd_hist2', 'macd_hist3', 'macd_hist4', 'macd_hist5']\n","trix_list = ['trix1', 'trix2', 'trix3', 'trix4', 'trix5']\n","stoch_list = ['stoch']\n","fisher_list = ['fisher']\n","cctbbo_list = ['cctbbo']\n","\n","\n","#       \n","# input_cols = basic_cols + sar_cols + ichimoku_cols + macd_cols + ichimoku_cols2\n","# input_colname = basic_list + senkoua_list + senkoub_list + sar_list + macd_list + trix_list\n","input_colname = basic_list + senkoua_list + senkoub_list + sar_list + macd_list + stoch_list + fisher_list + cctbbo_list\n","price_colname = basic_list + senkoua_list + senkoub_list + sar_list \n","# input_cols = basic_cols + sar_cols + ichimoku_cols + macd_cols\n","\n","\n","if short_ver:\n","  nontp_indexs = nontp_short_indexs\n","  nontp_liqd_list = nontp_short_liqd_list\n","  nontp_pr_list = nontp_short_pr_list\n","  nontp_ep = nontp_short_ep_list\n","else:\n","  nontp_indexs = nontp_long_indexs\n","  nontp_liqd_list = nontp_long_liqd_list\n","  nontp_pr_list = nontp_long_pr_list\n","  nontp_ep = nontp_long_ep_list\n","\n","\n","for t_i, i in enumerate(nontp_indexs):\n","\n","  j = len(res_df) - 1\n","\n","  # print(i, j)\n","\n","  if not(i >= prev_plotsize):\n","    continue\n","\n","  # if i <= 4860:\n","  # if i == 1536:\n","  # # if 1800 < i < 1860:\n","  #   pass\n","  # else:\n","  #   continue\n","\n","  # if tp_state_list[t_i] != 'd-open':\n","  #   continue\n","\n","  # if (entry[i] == -1) and res_df['close'].iloc[i - 1] > upper_ep.iloc[i]:\n","  #   pass\n","  # else:\n","  #   continue\n","\n","  # if plot_pr_list[t_i] > 0.5:\n","  # if plot_pr_list[t_i] > 1.0:\n","  # # if plot_pr_list[t_i] < 1.0:\n","  #   continue\n","\n","  # plot_df = res_df.iloc[i - prev_plotsize:j + 1, input_cols]\n","  plot_df = res_df.iloc[i - prev_plotsize:j + 1][input_colname]\n","\n","\n","  #       keep off-color st with another variable         #\n","  st_trend_plot_df = res_df.iloc[i - prev_plotsize:j + 1, [7, 10, 13]]\n","\n","  # y_max = np.max(plot_df.iloc[:, [4, 6, 8]])\n","  # y_min = np.min(plot_df.iloc[:, [5, 7, 9]])\n","  # print(\"y_max, y_min :\", y_max, y_min)\n","  \n","  # y_max = max(np.max(plot_df.iloc[:, [4, 6, 8]]))\n","  # y_min = min(np.min(plot_df.iloc[:, [5, 7, 9]]))\n","  \n","  y_max = max(np.max(plot_df[price_colname]))\n","  y_min = min(np.min(plot_df[price_colname]))\n","  # print(\"y_max, y_min :\", y_max, y_min)\n","  # break\n","\n","  plot_df[\"off_color_upper_st1\"] = np.where(st_trend_plot_df.iloc[:, [0]] == 1, plot_df.iloc[:, [4]], np.nan)\n","  plot_df[\"off_color_upper_st2\"] = np.where(st_trend_plot_df.iloc[:, [1]] == 1, plot_df.iloc[:, [6]], np.nan)\n","  plot_df[\"off_color_upper_st3\"] = np.where(st_trend_plot_df.iloc[:, [2]] == 1, plot_df.iloc[:, [8]], np.nan)\n","  plot_df[\"off_color_lower_st1\"] = np.where(st_trend_plot_df.iloc[:, [0]] == -1, plot_df.iloc[:, [5]], np.nan)\n","  plot_df[\"off_color_lower_st2\"] = np.where(st_trend_plot_df.iloc[:, [1]] == -1, plot_df.iloc[:, [7]], np.nan)\n","  plot_df[\"off_color_lower_st3\"] = np.where(st_trend_plot_df.iloc[:, [2]] == -1, plot_df.iloc[:, [9]], np.nan)\n","\n","\n","  #       replace st values with np.nan, using st trend     #\n","  plot_df.iloc[:, [4]] = np.where(st_trend_plot_df.iloc[:, [0]] == 1, np.nan, plot_df.iloc[:, [4]])\n","  plot_df.iloc[:, [6]] = np.where(st_trend_plot_df.iloc[:, [1]] == 1, np.nan, plot_df.iloc[:, [6]])\n","  plot_df.iloc[:, [8]] = np.where(st_trend_plot_df.iloc[:, [2]] == 1, np.nan, plot_df.iloc[:, [8]])\n","  plot_df.iloc[:, [5]] = np.where(st_trend_plot_df.iloc[:, [0]] == -1, np.nan, plot_df.iloc[:, [5]])\n","  plot_df.iloc[:, [7]] = np.where(st_trend_plot_df.iloc[:, [1]] == -1, np.nan, plot_df.iloc[:, [7]])\n","  plot_df.iloc[:, [9]] = np.where(st_trend_plot_df.iloc[:, [2]] == -1, np.nan, plot_df.iloc[:, [9]])\n","\n","\n","  plot_upper_ep = upper_ep.iloc[i - prev_plotsize:j + 1]\n","  plot_lower_ep = lower_ep.iloc[i - prev_plotsize:j + 1]\n","\n","  plot_upper_middle = (plot_df['middle_line'] + plot_df['min_upper']) / 2\n","  plot_lower_middle = (plot_df['middle_line'] + plot_df['max_lower']) / 2\n","\n","  plot_short_tp = short_tp.iloc[i - prev_plotsize:j + 1]\n","  plot_long_tp = long_tp.iloc[i - prev_plotsize:j + 1]  \n","\n","\n","\n","  # fig = plt.figure(figsize=(12, 16))\n","  fig = plt.figure(figsize=(12, 16))\n","  \n","  gs = gridspec.GridSpec(nrows=3, # row 몇 개 \n","                       ncols=1, # col 몇 개 \n","                       height_ratios=[3, 1, 1]\n","                      )\n","  \n","  # fig = plt.figure(figsize=(8, 12))\n","  # ax = fig.add_subplot(111)\n","  # ax = fig.add_subplot(311)\n","  ax = fig.add_subplot(gs[0])\n","\n","  # fig.show()\n","  # fig.canvas.draw()\n","\n","  temp_ohlc = plot_df.values[:, :4]\n","  index = np.arange(len(temp_ohlc))\n","  candle = np.hstack((np.reshape(index, (-1, 1)), temp_ohlc))\n","  mf.candlestick_ohlc(ax, candle, width=0.5, colorup='r', colordown='b')\n","\n","  # print(plot_df.values[:, 4:])\n","  plt.step(plot_df.values[:, [4, 6, 8]], 'r', alpha=1)  # upper on color\n","  # plt.plot(plot_df.values[:, [4, 6, 8]], 'r', alpha=1)  # upper on color\n","  plt.step(plot_df.values[:, [5, 7, 9]], 'b', alpha=1)  # lower on color\n","  plt.step(plot_df.values[:, [10]], 'fuchsia', alpha=1)  # middle\n","  \n","  plt.step(plot_df.values[:, -6:-3], 'r', alpha=1, linestyle=':')  # upper off color\n","  plt.step(plot_df.values[:, -3:], 'b', alpha=1, linestyle=':')  # lower off color\n","\n","\n","\n","  # plt.step(np.arange(len(plot_df)), plot_upper_ep.values, alpha=1, linestyle='--', color='y')  # ep\n","  # plt.step(np.arange(len(plot_df)),plot_lower_ep.values, alpha=1, linestyle='--', color='y')  # ep\n","\n","  plt.step(np.arange(len(plot_df)), plot_upper_middle.values, alpha=1, linestyle='--', color='g')  # 2nd middle\n","  plt.step(np.arange(len(plot_df)), plot_lower_middle.values, alpha=1, linestyle='--', color='g')  # 2nd middle\n","\n","  # plt.step(np.arange(len(plot_df)), plot_short_tp.values, alpha=1, linestyle=':', color='y')  # tp\n","  # plt.step(np.arange(len(plot_df)), plot_long_tp.values, alpha=1, linestyle=':', color='y')  # tp\n","\n","\n","\n","  # ---------------------- indicator part ---------------------- #\n","  \n","  #               sar               #\n","  alpha = 1\n","  markersize = 5\n","  for sar in sar_list:\n","    plt.step(plot_df[sar].values, 'c*', alpha=alpha, markersize=markersize, color='dodgerblue')  # sar mic\n","    markersize += 1\n","    alpha -= 0.1\n","\n","  # plt.step(plot_df.values[:, [12]], 'co', alpha=1, markersize=7)  # sar mac\n","\n","  #               cloud               #\n","  alpha = 0.7\n","  for senkoua, senkoub in zip(senkoua_list, senkoub_list):\n","    plt.fill_between(np.arange(len(plot_df)), plot_df[senkoua].values, plot_df[senkoub].values, # ichimoku\n","                      where=plot_df[senkoua].values >= plot_df[senkoub].values, facecolor='g', alpha=alpha) # ichimoku\n","    plt.fill_between(np.arange(len(plot_df)), plot_df[senkoua].values, plot_df[senkoub].values,\n","                      where=plot_df[senkoua].values <= plot_df[senkoub].values, facecolor='r', alpha=alpha)  \n","    alpha -= 0.05\n","  \n","  # ------------------------------------------------------------- #\n","\n","\n","  #       ep & tp     #\n","  if i != initial_i:\n","    plt.axvline(prev_plotsize - (i - initial_i), alpha=0.5, linestyle='--')\n","  plt.axvline(prev_plotsize, alpha=0.5, linestyle='--')\n","  plt.axhline(nontp_ep[t_i], linestyle='-', xmin=0.75, xmax=1, linewidth=3, color='lime')  # ep line axhline\n","\n","  # for sub_i in range(len(ep_tp_list[t_i][1])):\n","  #   plt.axhline(ep_tp_list[t_i][1][sub_i], linestyle='-', xmin=0.75 + 0.05 * (sub_i + 1) , xmax=1, linewidth=3, color='lime')  # tp line axhline\n","    # plt.axhline(ep_tp_list[t_i][1], linestyle='-', xmin=0.9, xmax=1, linewidth=3)  # tp line axhline    \n","\n","  #         hedge ep & tp         #\n","  # h_i = h_trade_list[t_i][1]\n","  # if h_i is not None:\n","  #   plt.axvline(prev_plotsize + (h_i - i), linestyle='--')\n","  #   plt.axhline(h_ep_tp_list[t_i][0], linestyle='-', xmin=0.75, xmax=1, linewidth=3, color='magenta')  # ep line axhline\n","  #   plt.axhline(h_ep_tp_list[t_i][1], linestyle='-', xmin=0.85, xmax=1, linewidth=3, color='magenta')  # tp line axhline\n","\n","  \n","  #         check pr        #\n","  plt.title(\"%s ~ %s -> liqd : %.2f\\npr : %.2f\" % (i, j, nontp_liqd_list[t_i], nontp_pr_list[t_i]))\n","\n","  #           y lim         #\n","  plt.ylim(y_min, y_max)\n","\n","\n","  # #           macd          #\n","  # # plt.subplot(312)\n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for macd in macd_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[macd].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axhline(0, linestyle='--')\n","\n","  \n","  # #           trix          #  \n","  # # plt.subplot(313)\n","  # plt.subplot(gs[2])\n","  # alpha = 1\n","  # for trix in trix_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[trix].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axhline(0, linestyle='--')\n","\n","  \n","  #           fisher          #  \n","  # # plt.subplot(313)\n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for fisher in fisher_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[fisher].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axhline(0, linestyle='--')\n","  # plt.axhline(fisher_upper, linestyle='--')\n","  # plt.axhline(fisher_lower, linestyle='--')\n","\n","  #           stoch          #  \n","  # plt.subplot(313)\n","  plt.subplot(gs[1])\n","  alpha = 1\n","  for stoch in stoch_list:\n","    plt.step(np.arange(len(plot_df)), plot_df[stoch].values, 'g', alpha=alpha)\n","    # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","    alpha -= 0.2\n","  plt.axvline(prev_plotsize, linestyle='--')\n","  plt.axhline(50, linestyle='--')\n","  plt.axhline(stoch_upper, linestyle='--')\n","  plt.axhline(stoch_lower, linestyle='--')\n","\n","\n","\n","  # ---------------------- plot ---------------------- #\n","\n","  plt.show()\n","  # plt.draw()\n","  plt.close()\n","  print()\n","\n","  # break\n"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":"Output hidden; open in https://colab.research.google.com to view."},"metadata":{}}]},{"cell_type":"markdown","metadata":{"id":"wXqR5bwGzqDW"},"source":["### specific plot v1"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":594},"id":"UiCTTXJpZX1i","executionInfo":{"elapsed":630,"status":"error","timestamp":1626564536389,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"},"user_tz":-540},"outputId":"7eadc90e-ed0c-4951-859e-fc5fa135d6ff"},"source":["prev_plotsize = 50\n","\n","# inversion = True\n","inversion = False\n","\n","if inversion:\n","  plot_pr_list = rev_np_pr\n","else:\n","  plot_pr_list = np_pr\n","\n","\n","\n","#         select plot columns       #\n","basic_cols = [0, 1, 2, 3, 5, 6, 8, 9, 11, 12, 14] # you don't need to touch\n","\n","sar_cols = [15, 18] # 15 ~ 19\n","ichimoku_cols = [20, 21]  # 20 ~ 29\n","# ichimoku_cols = [22, 23]  # 20 ~ 29\n","ichimoku_cols2 = [22, 23]  # 20 ~ 29\n","macd_cols = [30]  # 30 ~ 34\n","\n","\n","senkoua_list = ['senkou_a1', 'senkou_a2', 'senkou_a3', 'senkou_a4', 'senkou_a5']\n","senkoub_list = ['senkou_b1', 'senkou_b2', 'senkou_b3', 'senkou_b4', 'senkou_b5']\n","sar_list = ['sar1', 'sar2', 'sar3', 'sar4', 'sar5']\n","macd_list = ['macd_hist1', 'macd_hist2', 'macd_hist3', 'macd_hist4', 'macd_hist5']\n","\n","input_cols = basic_cols + sar_cols + ichimoku_cols + macd_cols + ichimoku_cols2\n","# input_cols = basic_cols + sar_cols + ichimoku_cols + macd_cols\n","\n","\n","\n","\n","for t_i, (i, j) in enumerate(trade_list):\n","  # print(i, j)\n","\n","  if not(i >= prev_plotsize):\n","    continue\n","\n","  # if i <= 4860:\n","  # if i != 257:\n","  #   continue\n","\n","  # if tp_state_list[t_i] != 'd-open':\n","  #   continue\n","\n","\n","  if plot_pr_list[t_i] > 1.0:\n","  # if plot_pr_list[t_i] < 1.0:\n","    continue\n","\n","  plot_df = res_df.iloc[i - prev_plotsize:j + 1, input_cols]\n","\n","\n","  #       keep off-color st with another variable         #\n","  st_trend_plot_df = res_df.iloc[i - prev_plotsize:j + 1, [7, 10, 13]]\n","\n","  plot_df[\"off_color_upper_st1\"] = np.where(st_trend_plot_df.iloc[:, [0]] == 1, plot_df.iloc[:, [4]], np.nan)\n","  plot_df[\"off_color_upper_st2\"] = np.where(st_trend_plot_df.iloc[:, [1]] == 1, plot_df.iloc[:, [6]], np.nan)\n","  plot_df[\"off_color_upper_st3\"] = np.where(st_trend_plot_df.iloc[:, [2]] == 1, plot_df.iloc[:, [8]], np.nan)\n","  plot_df[\"off_color_lower_st1\"] = np.where(st_trend_plot_df.iloc[:, [0]] == -1, plot_df.iloc[:, [5]], np.nan)\n","  plot_df[\"off_color_lower_st2\"] = np.where(st_trend_plot_df.iloc[:, [1]] == -1, plot_df.iloc[:, [7]], np.nan)\n","  plot_df[\"off_color_lower_st3\"] = np.where(st_trend_plot_df.iloc[:, [2]] == -1, plot_df.iloc[:, [9]], np.nan)\n","\n","\n","  #       replace st values with np.nan, using st trend     #\n","  plot_df.iloc[:, [4]] = np.where(st_trend_plot_df.iloc[:, [0]] == 1, np.nan, plot_df.iloc[:, [4]])\n","  plot_df.iloc[:, [6]] = np.where(st_trend_plot_df.iloc[:, [1]] == 1, np.nan, plot_df.iloc[:, [6]])\n","  plot_df.iloc[:, [8]] = np.where(st_trend_plot_df.iloc[:, [2]] == 1, np.nan, plot_df.iloc[:, [8]])\n","  plot_df.iloc[:, [5]] = np.where(st_trend_plot_df.iloc[:, [0]] == -1, np.nan, plot_df.iloc[:, [5]])\n","  plot_df.iloc[:, [7]] = np.where(st_trend_plot_df.iloc[:, [1]] == -1, np.nan, plot_df.iloc[:, [7]])\n","  plot_df.iloc[:, [9]] = np.where(st_trend_plot_df.iloc[:, [2]] == -1, np.nan, plot_df.iloc[:, [9]])\n","\n","\n","  plot_upper_ep = upper_ep.iloc[i - prev_plotsize:j + 1]\n","  plot_lower_ep = lower_ep.iloc[i - prev_plotsize:j + 1]\n","\n","  plot_upper_middle = (plot_df['middle_line'] + plot_df['min_upper']) / 2\n","  plot_lower_middle = (plot_df['middle_line'] + plot_df['max_lower']) / 2\n","\n","  plot_short_tp = short_tp.iloc[i - prev_plotsize:j + 1]\n","  plot_long_tp = long_tp.iloc[i - prev_plotsize:j + 1]  \n","\n","\n","\n","  fig = plt.figure(figsize=(12, 16))\n","  # fig = plt.figure(figsize=(8, 12))\n","  # ax = fig.add_subplot(111)\n","  ax = fig.add_subplot(211)\n","\n","  # fig.show()\n","  # fig.canvas.draw()\n","\n","  temp_ohlc = plot_df.values[:, :4]\n","  index = np.arange(len(temp_ohlc))\n","  candle = np.hstack((np.reshape(index, (-1, 1)), temp_ohlc))\n","  mf.candlestick_ohlc(ax, candle, width=0.5, colorup='r', colordown='b')\n","\n","  # print(plot_df.values[:, 4:])\n","  plt.plot(plot_df.values[:, [4, 6, 8]], 'r', alpha=1)  # upper on color\n","  plt.plot(plot_df.values[:, [5, 7, 9]], 'b', alpha=1)  # lower on color\n","  plt.plot(plot_df.values[:, [10]], 'g', alpha=1)  # middle\n","  \n","  plt.plot(plot_df.values[:, -6:-3], 'r', alpha=1, linestyle=':')  # upper off color\n","  plt.plot(plot_df.values[:, -3:], 'b', alpha=1, linestyle=':')  # lower off color\n","\n","  plt.plot(plot_df.values[:, [11]], 'c*', alpha=1, markersize=5)  # sar mic\n","  # plt.plot(plot_df.values[:, [12]], 'co', alpha=1, markersize=7)  # sar mac\n","\n","  plt.plot(plot_upper_ep.values, alpha=1, linestyle='--')  # ep\n","  plt.plot(plot_lower_ep.values, alpha=1, linestyle='--')  # ep\n","\n","  plt.plot(plot_upper_middle.values, alpha=1, linestyle='--')  # middle\n","  plt.plot(plot_lower_middle.values, alpha=1, linestyle='--')  # middle\n","\n","  plt.plot(plot_short_tp.values, alpha=1, linestyle=':')  # tp\n","  plt.plot(plot_long_tp.values, alpha=1, linestyle=':')  # tp\n","\n","  plt.fill_between(np.arange(len(plot_df)), plot_df.values[:, 13], plot_df.values[:, 14], # ichimoku\n","                    where=plot_df.values[:, 13] >= plot_df.values[:, 14], facecolor='g', alpha=0.5) # ichimoku\n","  plt.fill_between(np.arange(len(plot_df)), plot_df.values[:, 13], plot_df.values[:, 14],\n","                    where=plot_df.values[:, 13] <= plot_df.values[:, 14], facecolor='r', alpha=0.5)  \n","  \n","  plt.fill_between(np.arange(len(plot_df)), plot_df.values[:, 16], plot_df.values[:, 17], # ichimoku\n","                    where=plot_df.values[:, 16] >= plot_df.values[:, 17], facecolor='g', alpha=0.3) # ichimoku\n","  plt.fill_between(np.arange(len(plot_df)), plot_df.values[:, 16], plot_df.values[:, 17],\n","                    where=plot_df.values[:, 16] <= plot_df.values[:, 17], facecolor='r', alpha=0.3)\n","\n","  plt.axvline(prev_plotsize, linestyle='--')\n","  plt.axhline(ep_tp_list[t_i][1], linestyle='-')  # tp line axhline\n","  plt.title(\"%s ~ %s -> %.5f\\n %s\" % (i, j, plot_pr_list[t_i], tp_state_list[t_i]))\n","\n","\n","  plt.subplot(212)\n","  plt.plot(plot_df.values[:, [15]], 'g', alpha=1)  # middle\n","  plt.axvline(prev_plotsize, linestyle='--')\n","  plt.axhline(0, linestyle='--')\n","\n","  plt.show()\n","  # plt.draw()\n","  plt.close()\n","  print()\n","\n"],"execution_count":null,"outputs":[{"output_type":"error","ename":"KeyError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36mget_loc\u001b[0;34m(self, key, method, tolerance)\u001b[0m\n\u001b[1;32m   2897\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2898\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcasted_key\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2899\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mKeyError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0merr\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32mpandas/_libs/index.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n","\u001b[0;32mpandas/_libs/index.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n","\u001b[0;32mpandas/_libs/hashtable_class_helper.pxi\u001b[0m in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[0;34m()\u001b[0m\n","\u001b[0;32mpandas/_libs/hashtable_class_helper.pxi\u001b[0m in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[0;34m()\u001b[0m\n","\u001b[0;31mKeyError\u001b[0m: 'min_upper'","\nThe above exception was the direct cause of the following exception:\n","\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)","\u001b[0;32m<ipython-input-11-9a4f23889388>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     76\u001b[0m   \u001b[0mplot_lower_ep\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlower_ep\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0miloc\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0mprev_plotsize\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0mj\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     77\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 78\u001b[0;31m   \u001b[0mplot_upper_middle\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mplot_df\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'middle_line'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mplot_df\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'min_upper'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m/\u001b[0m \u001b[0;36m2\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     79\u001b[0m   \u001b[0mplot_lower_middle\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mplot_df\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'middle_line'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mplot_df\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'max_lower'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m/\u001b[0m \u001b[0;36m2\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     80\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36m__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   2904\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnlevels\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2905\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_getitem_multilevel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2906\u001b[0;31m             \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2907\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mis_integer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2908\u001b[0m                 \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36mget_loc\u001b[0;34m(self, key, method, tolerance)\u001b[0m\n\u001b[1;32m   2898\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcasted_key\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2899\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mKeyError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0merr\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2900\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0merr\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2901\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2902\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mtolerance\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyError\u001b[0m: 'min_upper'"]}]},{"cell_type":"markdown","metadata":{"id":"-g7YY5BvMcLS"},"source":["### show detail values"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5TxQ3rDnKMa7","executionInfo":{"elapsed":255,"status":"ok","timestamp":1625228960601,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"},"user_tz":-540},"outputId":"422ac214-8c88-4f39-ec3a-7c823574f6da"},"source":["i, j = 27267, 27268\n","print(\"upper_ep.iloc[i] :\", upper_ep.iloc[i])\n","print(\"short_tp.iloc[j] :\", short_tp.iloc[j])"],"execution_count":null,"outputs":[{"output_type":"stream","text":["upper_ep.iloc[i] : 2348.266954813089\n","short_tp.iloc[j] : 2205.609333246829\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"7AIl6EBuZNOL"},"source":["## none plot off-color st"]},{"cell_type":"code","metadata":{"id":"yaVxrNGzZgrF"},"source":["prev_plotsize = 50\n","\n","for t_i, (i, j) in enumerate(trade_list):\n","  # print(i, j)\n","\n","  if not(i >= prev_plotsize):\n","    continue\n","\n","  # if pr_list[t_i] >= 1:\n","  #   continue\n","\n","  plot_df = res_df.iloc[i - prev_plotsize:j + 1, [0, 1, 2, 3, 5, 6, 8, 9, 11, 12, 14, 15, 16]]\n","\n","  #       replace st values with np.nan, using st trend     #\n","  st_trend_plot_df = res_df.iloc[i - prev_plotsize:j + 1, [7, 10, 13]]\n","  plot_df.iloc[:, [4]] = np.where(st_trend_plot_df.iloc[:, [0]] == 1, np.nan, plot_df.iloc[:, [4]])\n","  plot_df.iloc[:, [6]] = np.where(st_trend_plot_df.iloc[:, [1]] == 1, np.nan, plot_df.iloc[:, [6]])\n","  plot_df.iloc[:, [8]] = np.where(st_trend_plot_df.iloc[:, [2]] == 1, np.nan, plot_df.iloc[:, [8]])\n","  plot_df.iloc[:, [5]] = np.where(st_trend_plot_df.iloc[:, [0]] == -1, np.nan, plot_df.iloc[:, [5]])\n","  plot_df.iloc[:, [7]] = np.where(st_trend_plot_df.iloc[:, [1]] == -1, np.nan, plot_df.iloc[:, [7]])\n","  plot_df.iloc[:, [9]] = np.where(st_trend_plot_df.iloc[:, [2]] == -1, np.nan, plot_df.iloc[:, [9]])\n","\n","\n","  plot_upper_ep = upper_ep.iloc[i - prev_plotsize:j + 1]\n","  plot_lower_ep = lower_ep.iloc[i - prev_plotsize:j + 1]\n","\n","  fig = plt.figure(figsize=(8, 6))\n","  ax = fig.add_subplot(111)\n","\n","  # fig.show()\n","  # fig.canvas.draw()\n","\n","  temp_ohlc = plot_df.values[:, :4]\n","  index = np.arange(len(temp_ohlc))\n","  candle = np.hstack((np.reshape(index, (-1, 1)), temp_ohlc))\n","  mf.candlestick_ohlc(ax, candle, width=0.5, colorup='r', colordown='b')\n","\n","  # print(plot_df.values[:, 4:])\n","  plt.plot(plot_df.values[:, [4, 6, 8]], 'r', alpha=1)  # upper\n","  plt.plot(plot_df.values[:, [5, 7, 9]], 'b', alpha=1)  # lower\n","  plt.plot(plot_df.values[:, [10]], 'g', alpha=1)  # middle\n","\n","  plt.plot(plot_df.values[:, [11]], 'c*', alpha=1, markersize=5)  # sar mic\n","  plt.plot(plot_df.values[:, [12]], 'co', alpha=1, markersize=7)  # sar mac\n","\n","  plt.plot(plot_upper_ep.values, alpha=1, linestyle='--')  # ep\n","  plt.plot(plot_lower_ep.values, alpha=1, linestyle='--')  # ep\n","\n","  plt.axvline(prev_plotsize, linestyle='--')\n","\n","  plt.title(\"%s ~ %s -> %.5f\" % (i, j, pr_list[t_i]))\n","  plt.show()\n","  # plt.draw()\n","  plt.close()"],"execution_count":null,"outputs":[]}]}