{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"JnQ4v1.0_backi2_vsurvey_liqd(0913_epoutgap).ipynb","provenance":[{"file_id":"1z4z_KLPzc6RWsxo3X_dHbpByxUAgjoMJ","timestamp":1583754134002}],"collapsed_sections":["Ci_jUnNTZbm9","EiXxraeZCj0c","ZnrBE3etCpIA","A4jHXvtbDSez","KdDz-s7ZwrC3","qkzeUFAyeJXK","2gxvme1PC6ha","FxJ1y8v2fkCR","VBwVaUkvfnOd"],"toc_visible":true},"kernelspec":{"display_name":"Python [conda env:tensorflow2_p36]","language":"python","name":"conda-env-tensorflow2_p36-py"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.6.5"},"accelerator":"GPU","widgets":{"application/vnd.jupyter.widget-state+json":{"541dd82dcb5741d48781a8c636a372a0":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_view_name":"HBoxView","_dom_classes":[],"_model_name":"HBoxModel","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.5.0","box_style":"","layout":"IPY_MODEL_5c46eab4f57246d59dfeb07bc25a51b9","_model_module":"@jupyter-widgets/controls","children":["IPY_MODEL_86d43e6e72484a15b7c6245599415683","IPY_MODEL_f2daa14b7c6d4f82bd6933a42aa38847","IPY_MODEL_39503b4ecf764b79a82736ac14f4283e"]}},"5c46eab4f57246d59dfeb07bc25a51b9":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"86d43e6e72484a15b7c6245599415683":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_view_name":"HTMLView","style":"IPY_MODEL_31f88f573db744a19d98085205a1faba","_dom_classes":[],"description":"","_model_name":"HTMLModel","placeholder":"​","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":"  0%","_view_count":null,"_view_module_version":"1.5.0","description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_673523eba6d044d4903d28212cf61db4"}},"f2daa14b7c6d4f82bd6933a42aa38847":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_view_name":"ProgressView","style":"IPY_MODEL_fd0fea58bd90471188c78ad49112aeae","_dom_classes":[],"description":"","_model_name":"FloatProgressModel","bar_style":"danger","max":432000,"_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":0,"_view_count":null,"_view_module_version":"1.5.0","orientation":"horizontal","min":0,"description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_ea7e377735ed45b6a1d6488c1ff99e5d"}},"39503b4ecf764b79a82736ac14f4283e":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_view_name":"HTMLView","style":"IPY_MODEL_982e3c8a535e43e1a7a8b70562e3c4ee","_dom_classes":[],"description":"","_model_name":"HTMLModel","placeholder":"​","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":" 0/432000 [00:00&lt;?, ?it/s]","_view_count":null,"_view_module_version":"1.5.0","description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_98e260dad9214f68b5ea9e6b76f36fe4"}},"31f88f573db744a19d98085205a1faba":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_view_name":"StyleView","_model_name":"DescriptionStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"673523eba6d044d4903d28212cf61db4":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"fd0fea58bd90471188c78ad49112aeae":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_view_name":"StyleView","_model_name":"ProgressStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","bar_color":null,"_model_module":"@jupyter-widgets/controls"}},"ea7e377735ed45b6a1d6488c1ff99e5d":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"982e3c8a535e43e1a7a8b70562e3c4ee":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_view_name":"StyleView","_model_name":"DescriptionStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"98e260dad9214f68b5ea9e6b76f36fe4":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"66f3db03a61c45d997e682c7cad5d1ba":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_view_name":"HBoxView","_dom_classes":[],"_model_name":"HBoxModel","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.5.0","box_style":"","layout":"IPY_MODEL_e049d175868a40f894961429a67614c0","_model_module":"@jupyter-widgets/controls","children":["IPY_MODEL_c83ced7d50624d718fc4672fb7c78b22","IPY_MODEL_587a572adf224a03b06190f2ec5459a6","IPY_MODEL_ae1232fc9c2a43dba86a9f03e9c65da9"]}},"e049d175868a40f894961429a67614c0":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"c83ced7d50624d718fc4672fb7c78b22":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_view_name":"HTMLView","style":"IPY_MODEL_1f4229da1e234b1d9a3b00e7c7c0acd3","_dom_classes":[],"description":"","_model_name":"HTMLModel","placeholder":"​","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":"  0%","_view_count":null,"_view_module_version":"1.5.0","description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_a2a168593a054e3dad1d1fa425b69c30"}},"587a572adf224a03b06190f2ec5459a6":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_view_name":"ProgressView","style":"IPY_MODEL_6095003f270645a6aac66370e444b483","_dom_classes":[],"description":"","_model_name":"FloatProgressModel","bar_style":"danger","max":432000,"_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":0,"_view_count":null,"_view_module_version":"1.5.0","orientation":"horizontal","min":0,"description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_69da1dc47a614c518dc64153a0ce7fa1"}},"ae1232fc9c2a43dba86a9f03e9c65da9":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_view_name":"HTMLView","style":"IPY_MODEL_c2ed438816084815950b5d457e9ae203","_dom_classes":[],"description":"","_model_name":"HTMLModel","placeholder":"​","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":" 0/432000 [00:00&lt;?, ?it/s]","_view_count":null,"_view_module_version":"1.5.0","description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_163989804b8b4abb86d76deda0580b4d"}},"1f4229da1e234b1d9a3b00e7c7c0acd3":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_view_name":"StyleView","_model_name":"DescriptionStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"a2a168593a054e3dad1d1fa425b69c30":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"6095003f270645a6aac66370e444b483":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_view_name":"StyleView","_model_name":"ProgressStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","bar_color":null,"_model_module":"@jupyter-widgets/controls"}},"69da1dc47a614c518dc64153a0ce7fa1":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"c2ed438816084815950b5d457e9ae203":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_view_name":"StyleView","_model_name":"DescriptionStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"163989804b8b4abb86d76deda0580b4d":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}}}}},"cells":[{"cell_type":"code","metadata":{"id":"AK9FjWwLOyay"},"source":["from google.colab import drive\n","drive.mount('/content/drive')\n","\n","import os, sys\n","\n","current_path = '/content/drive/My Drive/Colab Notebooks/JnQ/'\n","\n","os.chdir(current_path)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"8uqYv5StTazo"},"source":["# requirements"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9qGt60DKTZmf","executionInfo":{"status":"ok","timestamp":1631524708770,"user_tz":-540,"elapsed":8831,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"42aaa60f-c067-4daf-ee5c-03efcf5f4723"},"source":["!pip install mpl_finance\n","!pip install findiff\n","\n","import matplotlib.pyplot as plt\n","from matplotlib import gridspec\n","from tqdm.notebook import tqdm\n","from funcs_indicator import *\n","from funcs_for_trade import *\n","\n","import mpl_finance as mf\n","import os\n","import datetime\n","\n","import IPython\n","import IPython.display\n","import matplotlib as mpl\n","\n","import numpy as np\n","import pandas as pd\n","import seaborn as sns\n","import tensorflow as tf\n","\n","import pickle\n","import shutil\n","from trendln import trendln\n","\n","mpl.rcParams['figure.figsize'] = (8, 6)\n","mpl.rcParams['axes.grid'] = False"],"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: mpl_finance in /usr/local/lib/python3.7/dist-packages (0.10.1)\n","Requirement already satisfied: matplotlib in /usr/local/lib/python3.7/dist-packages (from mpl_finance) (3.2.2)\n","Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,>=2.0.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib->mpl_finance) (2.4.7)\n","Requirement already satisfied: numpy>=1.11 in /usr/local/lib/python3.7/dist-packages (from matplotlib->mpl_finance) (1.19.5)\n","Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.7/dist-packages (from matplotlib->mpl_finance) (0.10.0)\n","Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib->mpl_finance) (1.3.1)\n","Requirement already satisfied: python-dateutil>=2.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib->mpl_finance) (2.8.2)\n","Requirement already satisfied: six in /usr/local/lib/python3.7/dist-packages (from cycler>=0.10->matplotlib->mpl_finance) (1.15.0)\n","Requirement already satisfied: findiff in /usr/local/lib/python3.7/dist-packages (0.8.9)\n","Requirement already satisfied: sympy in /usr/local/lib/python3.7/dist-packages (from findiff) (1.7.1)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.7/dist-packages (from findiff) (1.19.5)\n","Requirement already satisfied: scipy in /usr/local/lib/python3.7/dist-packages (from findiff) (1.4.1)\n","Requirement already satisfied: mpmath>=0.19 in /usr/local/lib/python3.7/dist-packages (from sympy->findiff) (1.2.1)\n"]}]},{"cell_type":"markdown","metadata":{"id":"Ci_jUnNTZbm9"},"source":["# load data"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_bXyS2yrZYC6","executionInfo":{"status":"ok","timestamp":1631251996389,"user_tz":-540,"elapsed":9589,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"554f7e56-a045-4873-e2fc-41b14bcde384"},"source":["# interval = '30m'\n","interval = '1m'\n","\n","date_path = './candlestick_concated/%s/quant_v2/' % interval\n","file_list = os.listdir(date_path)\n","print((file_list))\n","\n","interval2 = '3m'\n","date_path2 = './candlestick_concated/%s/quant_v2/' % interval2\n","file_list2 = os.listdir(date_path2)\n","print((file_list2))\n","\n","interval3 = '5m'\n","date_path3 = './candlestick_concated/%s/quant_v2/' % interval3\n","file_list3 = os.listdir(date_path3)\n","print((file_list3))\n","\n","interval4 = '15m'\n","date_path4 = './candlestick_concated/%s/quant_v2/' % interval4\n","file_list4 = os.listdir(date_path4)\n","print((file_list4))\n","\n","interval5 = '30m'\n","date_path5 = './candlestick_concated/%s/quant_v2/' % interval5\n","file_list5 = os.listdir(date_path5)\n","print((file_list5))\n","\n","interval6 = '4h'\n","date_path6 = './candlestick_concated/%s/quant_v2/' % interval6\n","file_list6 = os.listdir(date_path6)\n","print((file_list6))\n","\n","interval7 = '1d'\n","date_path7 = './candlestick_concated/%s/quant_v2/' % interval7\n","file_list7 = os.listdir(date_path7)\n","print((file_list7))"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["['2021-05-30 ETHUSDT.xlsx', '2021-04-30 ETHUSDT.xlsx', '2021-07-03 ETHUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx']\n","['2021-05-30 ETHUSDT.xlsx', '2021-04-30 ETHUSDT.xlsx', '2021-07-03 ETHUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx']\n","['2021-05-30 ETHUSDT.xlsx', '2021-04-30 ETHUSDT.xlsx', '2021-07-03 ETHUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx']\n","['2021-07-03 ETHUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx']\n","['2021-07-03 ETHUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-08-31 SUSHIUSDT.xlsx', '2021-08-31 CVCUSDT.xlsx', '2021-08-31 BTSUSDT.xlsx', '2021-08-31 HOTUSDT.xlsx', '2021-08-31 ZRXUSDT.xlsx', '2021-08-31 QTUMUSDT.xlsx', '2021-08-31 IOTAUSDT.xlsx', '2021-08-31 BTCBUSD.xlsx', '2021-08-31 WAVESUSDT.xlsx', '2021-08-31 ADAUSDT.xlsx', '2021-08-31 LITUSDT.xlsx', '2021-08-31 XTZUSDT.xlsx', '2021-08-31 BNBUSDT.xlsx', '2021-08-31 AKROUSDT.xlsx', '2021-08-31 HNTUSDT.xlsx', '2021-08-31 ETCUSDT.xlsx', '2021-08-31 XMRUSDT.xlsx', '2021-08-31 YFIUSDT.xlsx', '2021-08-31 ETHUSDT.xlsx', '2021-08-31 ALICEUSDT.xlsx', '2021-08-31 ALPHAUSDT.xlsx', '2021-08-31 SFPUSDT.xlsx', '2021-08-31 REEFUSDT.xlsx', '2021-08-31 BATUSDT.xlsx', '2021-08-31 DOGEUSDT.xlsx', '2021-08-31 TRXUSDT.xlsx', '2021-08-31 RLCUSDT.xlsx', '2021-08-31 BTCSTUSDT.xlsx', '2021-08-31 STORJUSDT.xlsx', '2021-08-31 SNXUSDT.xlsx', '2021-08-31 XLMUSDT.xlsx', '2021-08-31 NEOUSDT.xlsx', '2021-08-31 UNFIUSDT.xlsx', '2021-08-31 SANDUSDT.xlsx', '2021-08-31 DASHUSDT.xlsx', '2021-08-31 KAVAUSDT.xlsx', '2021-08-31 RUNEUSDT.xlsx', '2021-08-31 CTKUSDT.xlsx', '2021-08-31 LINKUSDT.xlsx', '2021-08-31 CELRUSDT.xlsx', '2021-08-31 RSRUSDT.xlsx', '2021-08-31 DGBUSDT.xlsx', '2021-08-31 SKLUSDT.xlsx', '2021-08-31 RENUSDT.xlsx', '2021-08-31 TOMOUSDT.xlsx', '2021-08-31 MTLUSDT.xlsx', '2021-08-31 LTCUSDT.xlsx', '2021-08-31 DODOUSDT.xlsx', '2021-08-31 EGLDUSDT.xlsx', '2021-08-31 KSMUSDT.xlsx', '2021-08-31 ONTUSDT.xlsx', '2021-08-31 VETUSDT.xlsx', '2021-08-31 TRBUSDT.xlsx', '2021-08-31 MANAUSDT.xlsx', '2021-08-31 COTIUSDT.xlsx', '2021-08-31 CHRUSDT.xlsx', '2021-08-31 ETHUSDT_210924.xlsx', '2021-08-31 BAKEUSDT.xlsx', '2021-08-31 GRTUSDT.xlsx', '2021-08-31 FLMUSDT.xlsx', '2021-08-31 EOSUSDT.xlsx', '2021-08-31 OGNUSDT.xlsx', '2021-08-31 SCUSDT.xlsx', '2021-08-31 BALUSDT.xlsx', '2021-08-31 STMXUSDT.xlsx', '2021-08-31 BTTUSDT.xlsx', '2021-08-31 LUNAUSDT.xlsx', '2021-08-31 DENTUSDT.xlsx', '2021-08-31 KNCUSDT.xlsx', '2021-08-31 SRMUSDT.xlsx', '2021-08-31 ENJUSDT.xlsx', '2021-08-31 ZENUSDT.xlsx', '2021-08-31 ATOMUSDT.xlsx', '2021-08-31 NEARUSDT.xlsx', '2021-08-31 BCHUSDT.xlsx', '2021-08-31 IOSTUSDT.xlsx', '2021-08-31 HBARUSDT.xlsx', '2021-08-31 ZECUSDT.xlsx', '2021-08-31 1000SHIBUSDT.xlsx', '2021-08-31 TLMUSDT.xlsx', '2021-08-31 BZRXUSDT.xlsx', '2021-08-31 ETHBUSD.xlsx', '2021-08-31 AAVEUSDT.xlsx', '2021-08-31 GTCUSDT.xlsx', '2021-08-31 ALGOUSDT.xlsx', '2021-08-31 ICPUSDT.xlsx', '2021-08-31 BTCUSDT_210924.xlsx', '2021-08-31 LRCUSDT.xlsx', '2021-08-31 AVAXUSDT.xlsx', '2021-08-31 MATICUSDT.xlsx', '2021-08-31 1INCHUSDT.xlsx', '2021-08-31 MKRUSDT.xlsx', '2021-08-31 THETAUSDT.xlsx', '2021-08-31 UNIUSDT.xlsx', '2021-08-31 LINAUSDT.xlsx', '2021-08-31 RVNUSDT.xlsx', '2021-08-31 FILUSDT.xlsx', '2021-08-31 NKNUSDT.xlsx', '2021-08-31 DEFIUSDT.xlsx', '2021-08-31 COMPUSDT.xlsx', '2021-08-31 BTCDOMUSDT.xlsx', '2021-08-31 SOLUSDT.xlsx', '2021-08-31 BTCUSDT.xlsx', '2021-08-31 OMGUSDT.xlsx', '2021-08-31 ICXUSDT.xlsx', '2021-08-31 BLZUSDT.xlsx', '2021-08-31 FTMUSDT.xlsx', '2021-08-31 YFIIUSDT.xlsx', '2021-08-31 KEEPUSDT.xlsx', '2021-08-31 BANDUSDT.xlsx', '2021-08-31 XRPUSDT.xlsx', '2021-08-31 SXPUSDT.xlsx', '2021-08-31 CRVUSDT.xlsx', '2021-08-31 BELUSDT.xlsx', '2021-08-31 DOTUSDT.xlsx', '2021-08-31 XEMUSDT.xlsx', '2021-08-31 ONEUSDT.xlsx', '2021-08-31 ZILUSDT.xlsx', '2021-08-31 AXSUSDT.xlsx', '2021-08-31 OCEANUSDT.xlsx', '2021-08-31 CHZUSDT.xlsx', '2021-08-31 ANKRUSDT.xlsx', '2021-08-31 SUSHIUSDT_res_dfs.pkl']\n","['2021-02-07 BTC.xlsx', '2021-02-07 ETH.xlsx', '2021-02-11 BCHUSDT.xlsx', '2021-02-11 XRPUSDT.xlsx', '2021-02-11 EOSUSDT.xlsx', '2021-02-11 LTCUSDT.xlsx', '2021-02-11 ETCUSDT.xlsx', '2021-02-11 LINKUSDT.xlsx', '2021-02-11 XLMUSDT.xlsx', '2021-02-11 ADAUSDT.xlsx', '2021-02-11 XMRUSDT.xlsx', '2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx']\n","['2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx']\n"]}]},{"cell_type":"markdown","metadata":{"id":"EiXxraeZCj0c"},"source":["# basic_func"]},{"cell_type":"code","metadata":{"id":"mi8H188MCiaH"},"source":["def sync_check(df, second_df, third_df, fourth_df, fifth_df, sixth_df=None, seventh_df=None):\n","\n","    #           supertrend          #\n","    ha_second_df = heikinashi(second_df)\n","    ha_fifth_df = heikinashi(fifth_df)\n","    # print(ha_second_df.tail(10))\n","    # quit()\n","\n","    second_df['minor_ST1_Up'], second_df['minor_ST1_Down'], second_df['minor_ST1_Trend'] = supertrend(second_df, 10, 2)\n","    second_df['minor_ST2_Up'], second_df['minor_ST2_Down'], second_df['minor_ST2_Trend'] = supertrend(ha_second_df, 7,\n","                                                                                                      2)\n","    second_df['minor_ST3_Up'], second_df['minor_ST3_Down'], second_df['minor_ST3_Trend'] = supertrend(ha_second_df, 7,\n","                                                                                                      2.5)\n","    # print(df.head(20))\n","    # quit()\n","\n","    # startTime = time.time()\n","\n","    df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, second_df, [i for i in range(-9, 0, 1)]),\n","                              columns=['minor_ST1_Up', 'minor_ST1_Down', 'minor_ST1_Trend'\n","                                  , 'minor_ST2_Up', 'minor_ST2_Down', 'minor_ST2_Trend'\n","                                  , 'minor_ST3_Up', 'minor_ST3_Down', 'minor_ST3_Trend']))\n","\n","    fifth_df['major_ST1_Up'], fifth_df['major_ST1_Down'], fifth_df['major_ST1_Trend'] = supertrend(fifth_df, 10, 2)\n","    fifth_df['major_ST2_Up'], fifth_df['major_ST2_Down'], fifth_df['major_ST2_Trend'] = supertrend(ha_fifth_df, 7,\n","                                                                                                      2)\n","    fifth_df['major_ST3_Up'], fifth_df['major_ST3_Down'], fifth_df['major_ST3_Trend'] = supertrend(ha_fifth_df, 7,\n","                                                                                                      2.5)\n","    # print(df.head(20))\n","    # quit()\n","\n","    # startTime = time.time()\n","\n","    df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, fifth_df, [i for i in range(-9, 0, 1)]),\n","                              columns=['major_ST1_Up', 'major_ST1_Down', 'major_ST1_Trend'\n","                                  , 'major_ST2_Up', 'major_ST2_Down', 'major_ST2_Trend'\n","                                  , 'major_ST3_Up', 'major_ST3_Down', 'major_ST3_Trend']))\n","    \n","    # print(df[[\"minor_ST1_Up\", \"minor_ST2_Up\", \"minor_ST3_Up\"]].tail())\n","    # min_upper = np.minimum(df[\"minor_ST1_Up\"], df[\"minor_ST2_Up\"], df[\"minor_ST3_Up\"])\n","    # max_lower = np.maximum(df[\"minor_ST1_Down\"], df[\"minor_ST2_Down\"], df[\"minor_ST3_Down\"])\n","    min_upper = np.min(df[[\"minor_ST1_Up\", \"minor_ST2_Up\", \"minor_ST3_Up\"]], axis=1)\n","    max_lower = np.max(df[[\"minor_ST1_Down\", \"minor_ST2_Down\", \"minor_ST3_Down\"]], axis=1)\n","\n","    df['middle_line'] = (min_upper + max_lower) / 2\n","    \n","    #          add for ep           #\n","    df['min_upper'] = min_upper\n","    df['max_lower'] = max_lower\n","\n","    print(\"supertrend phase done\")\n","\n","\n","    #           lucid sar              #\n","    df['sar1'], df['sar1_uptrend'] = lucid_sar(df, return_uptrend=True)\n","\n","    second_df['sar'], second_df['sar_uptrend'] = lucid_sar(second_df, return_uptrend=True)\n","    df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, second_df, [-2, -1]), columns=['sar2', 'sar2_uptrend']))\n","\n","    third_df['sar'], third_df['sar_uptrend'] = lucid_sar(third_df, return_uptrend=True)\n","    df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, third_df, [-2, -1]), columns=['sar3', 'sar3_uptrend']))\n","\n","    fourth_df['sar'], fourth_df['sar_uptrend'] = lucid_sar(fourth_df, return_uptrend=True)\n","    df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, fourth_df, [-2, -1]), columns=['sar4', 'sar4_uptrend']))\n","\n","    fifth_df['sar'], fifth_df['sar_uptrend'] = lucid_sar(fifth_df, return_uptrend=True)\n","    df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, fifth_df, [-2, -1]), columns=['sar5', 'sar5_uptrend']))\n","    \n","    if sixth_df is not None:\n","      sixth_df['sar'], sixth_df['sar_uptrend'] = lucid_sar(sixth_df, return_uptrend=True)\n","      df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, sixth_df, [-2, -1]), columns=['sar6', 'sar6_uptrend']))\n","    \n","    if seventh_df is not None:\n","      seventh_df['sar'], seventh_df['sar_uptrend'] = lucid_sar(seventh_df, return_uptrend=True)\n","      df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, seventh_df, [-2, -1]), columns=['sar7', 'sar7_uptrend']))\n","\n","    # print(df[['sar1', 'sar2']].tail(20))\n","    # print(df[['minor_ST1_Up', 'minor_ST1_Trend']].tail(20))\n","    # quit()\n","\n","    print(\"sar phase done\")\n","\n","\n","    \n","    #           ichimoku            #\n","    df['senkou_a1'], df['senkou_b1'] = ichimoku(df)\n","    \n","    second_df['senkou_a'], second_df['senkou_b'] = ichimoku(second_df)\n","    df = df.join( pd.DataFrame(index=df.index, data=to_lower_tf(df, second_df, [-2, -1]), columns=['senkou_a2', 'senkou_b2']))\n","    \n","    third_df['senkou_a'], third_df['senkou_b'] = ichimoku(third_df)\n","    df = df.join( pd.DataFrame(index=df.index, data=to_lower_tf(df, third_df, [-2, -1]), columns=['senkou_a3', 'senkou_b3']))\n","    \n","    fourth_df['senkou_a'], fourth_df['senkou_b'] = ichimoku(fourth_df)\n","    df = df.join( pd.DataFrame(index=df.index, data=to_lower_tf(df, fourth_df, [-2, -1]), columns=['senkou_a4', 'senkou_b4']))\n","    \n","    fifth_df['senkou_a'], fifth_df['senkou_b'] = ichimoku(fifth_df)\n","    df = df.join( pd.DataFrame(index=df.index, data=to_lower_tf(df, fifth_df, [-2, -1]), columns=['senkou_a5', 'senkou_b5']))\n","\n","    if sixth_df is not None:\n","      sixth_df['senkou_a'], sixth_df['senkou_b'] = ichimoku(sixth_df)\n","      df = df.join( pd.DataFrame(index=df.index, data=to_lower_tf(df, sixth_df, [-2, -1]), columns=['senkou_a6', 'senkou_b6']))\n","\n","    if seventh_df is not None:\n","      seventh_df['senkou_a'], seventh_df['senkou_b'] = ichimoku(seventh_df)\n","      df = df.join( pd.DataFrame(index=df.index, data=to_lower_tf(df, seventh_df, [-2, -1]), columns=['senkou_a7', 'senkou_b7']))\n","\n","\n","    #           1-2. displacement           #\n","    cloud_cnt = 0\n","    for col_n in df.columns:\n","      if 'senkou' in col_n:\n","        cloud_cnt += 1\n","    print(cloud_cnt)\n","\n","    # df['senkou_a1'] = df['senkou_a1'].shift(26 - 1)\n","    # df['senkou_b1'] = df['senkou_b1'].shift(26 - 1)\n","    # # df.iloc[:, -10:] = df.iloc[:, -10:].shift(26 - 1)\n","    # # df.iloc[:, -14:] = df.iloc[:, -14:].shift(26 - 1)\n","    df.iloc[:, -cloud_cnt:] = df.iloc[:, -cloud_cnt:].shift(26 - 1)\n","\n","    print(\"cloud phase done\")\n","\n","    \n","    #           macd            #\n","    df['macd_hist1'] = macd(df)\n","    \n","    second_df['macd_hist'] = macd(second_df)\n","    df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, second_df, [-1]), columns=['macd_hist2']))\n","\n","    third_df['macd_hist'] = macd(third_df)\n","    df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, third_df, [-1]), columns=['macd_hist3']))\n","\n","    fourth_df['macd_hist'] = macd(fourth_df)\n","    df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, fourth_df, [-1]), columns=['macd_hist4']))\n","\n","    fifth_df['macd_hist'] = macd(fifth_df)\n","    df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, fifth_df, [-1]), columns=['macd_hist5']))\n","    \n","    if sixth_df is not None:\n","      sixth_df['macd_hist'] = macd(sixth_df)\n","      df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, sixth_df, [-1]), columns=['macd_hist6']))\n","    \n","    if seventh_df is not None:\n","      seventh_df['macd_hist'] = macd(seventh_df)\n","      df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, seventh_df, [-1]), columns=['macd_hist7']))\n","\n","\n","    print(\"macd phase done\")\n","\n","\n","    #         trix        #\n","    df['trix1'] = trix_hist(df, 14, 1, 5)\n","    \n","    second_df['trix'] = trix_hist(second_df, 14, 1, 5)\n","    df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, second_df, [-1]), columns=['trix2']))\n","\n","    third_df['trix'] = trix_hist(third_df, 14, 1, 5)\n","    df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, third_df, [-1]), columns=['trix3']))\n","\n","    fourth_df['trix'] = trix_hist(fourth_df, 14, 1, 5)\n","    df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, fourth_df, [-1]), columns=['trix4']))\n","\n","    fifth_df['trix'] = trix_hist(fifth_df, 14, 1, 5)\n","    df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, fifth_df, [-1]), columns=['trix5']))\n","\n","    if sixth_df is not None:\n","      sixth_df['trix'] = trix_hist(sixth_df, 14, 1, 5)\n","      df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, sixth_df, [-1]), columns=['trix6']))\n","\n","    if seventh_df is not None:\n","      seventh_df['trix'] = trix_hist(seventh_df, 14, 1, 5)\n","      df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, seventh_df, [-1]), columns=['trix7']))\n","\n","\n","    #       stochastic      #\n","    df['stoch'] = stoch(df, 5, 3, 3)\n","    print(\"stochastic phase done\")\n","\n","    #       fisher      #\n","    df['fisher30'] = fisher(df, 30)\n","    df['fisher60'] = fisher(df, 60)\n","    df['fisher120'] = fisher(df, 120)\n","    print(\"fisher phase done\")\n","\n","    #       cctbbo      #\n","    df['cctbbo'], _ = cct_bbo(df, 21, 13)\n","    print(\"cctbbo phase done\")\n","  \n","\n","    return df\n"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"ZnrBE3etCpIA"},"source":["# make & save res_df"]},{"cell_type":"code","metadata":{"id":"X1g9vGP0UnTT"},"source":["pd.set_option('display.max_rows', 500)\n","pd.set_option('display.max_columns', 500)\n","pd.set_option('display.width', 1000)\n","\n","\n","save_path = './candlestick_concated/res_df/'\n","\n","exist_list = os.listdir(save_path)\n","\n","\n","for i in tqdm(range(len(file_list))):\n","\n","  keys = [file_list[i]]\n","\n","  # if 'neo'.upper() not in file_list[i]:\n","    # continue\n","  \n","  # if 'btc'.upper() not in file_list[i]:\n","  #   continue\n","\n","  # if '2021-04-30'.upper() not in file_list[i]:\n","  # if '2021-05-30'.upper() not in file_list[i]:\n","  # if '2021-06-30'.upper() not in file_list[i]:\n","  # if '2021-07-03'.upper() not in file_list[i]:\n","  if '2021-07-01'.upper() not in file_list[i]:\n","    continue\n","\n","  \n","\n","  # if 'eth'.upper() in file_list[i]:\n","  # # if '2021-07-03'.upper() not in file_list[i]:\n","  # # if '2021-07-01'.upper() not in file_list[i]:\n","  #   continue\n","\n","  for key in keys:  \n","\n","    excel_name = key.replace(\".xlsx\", \"_majorst_backi2.xlsx\")\n","    excel_path = save_path + excel_name\n","\n","    if excel_name in exist_list:\n","      print(excel_name, \"already exist !\")\n","      continue\n","    \n","    \n","    df = pd.read_excel(date_path + key, index_col=0)\n","    second_df = pd.read_excel(date_path2 + key, index_col=0)\n","    third_df = pd.read_excel(date_path3 + key, index_col=0)\n","    fourth_df = pd.read_excel(date_path4 + key, index_col=0)\n","    fifth_df = pd.read_excel(date_path5 + key, index_col=0)\n","    \n","    print(df.index[[0, -1]])\n","    print(second_df.index[[0, -1]])\n","    print(third_df.index[[0, -1]])\n","    print(fourth_df.index[[0, -1]])\n","    print(fifth_df.index[[0, -1]])\n","    \n","    try:\n","      sixth_df = pd.read_excel(date_path6 + key, index_col=0)\n","      seventh_df = pd.read_excel(date_path7 + key, index_col=0)\n","      print(sixth_df.index[[0, -1]])\n","      print(seventh_df.index[[0, -1]])\n","    except Exception as e:\n","      print(e)\n","\n","\n","    res_df = sync_check(df, second_df, third_df, fourth_df, fifth_df)\n","    # res_df = sync_check(df, second_df, third_df, fourth_df, fifth_df, sixth_df, seventh_df)\n","\n","    res_df.to_excel(excel_path)\n","    print(excel_name, \"saved succesfully !\")"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"A4jHXvtbDSez"},"source":["# load res_df"]},{"cell_type":"code","metadata":{"id":"uH88bMlZDWc3"},"source":["save_path = './candlestick_concated/res_df/'\n","\n","# key = '2021-07-03 ETHUSDT.xlsx'\n","# key = '2021-07-01 ETHUSDT.xlsx'\n","key = '2021-07-01 ETHUSDT_backi2.xlsx'\n","# key = '2021-06-30 ETHUSDT_backi2.xlsx'\n","# key = '2021-06-30 BTCUSDT_backi2.xlsx'\n","# key = '2021-06-30 XRPUSDT_backi2.xlsx'\n","# key = '2021-06-30 ETHUSDT_backi1.xlsx'\n","res_df = pd.read_excel(save_path + key, index_col=0)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"KdDz-s7ZwrC3"},"source":["# sync check"]},{"cell_type":"code","metadata":{"id":"4r4H4DAovfsi"},"source":["plot_size = 300\n","\n","\n","#         select plot columns       #\n","basic_cols = [0, 1, 2, 3, 5, 6, 8, 9, 11, 12, 14] # you don't need to touch\n","\n","sar_cols = [15, 18] # 15 ~ 19\n","ichimoku_cols = [20, 21]  # 20 ~ 29\n","macd_cols = [30]  # 30 ~ 34\n","\n","input_cols = basic_cols + sar_cols + ichimoku_cols + macd_cols\n","\n","\n","\n","#         do plot       #\n","plot_df = res_df.iloc[-plot_size:, input_cols]\n","\n","fig = plt.figure(figsize=(8, 6))\n","ax = fig.add_subplot(111)\n","\n","# fig.show()\n","# fig.canvas.draw()\n","\n","temp_ohlc = plot_df.values[:, :4]\n","index = np.arange(len(temp_ohlc))\n","candle = np.hstack((np.reshape(index, (-1, 1)), temp_ohlc))\n","mf.candlestick_ohlc(ax, candle, width=0.5, colorup='r', colordown='b')\n","\n","# print(plot_df.values[:, 4:])\n","plt.plot(plot_df.values[:, [4, 6, 8]], 'r', alpha=1)  # upper\n","plt.plot(plot_df.values[:, [5, 7, 9]], 'b', alpha=1)  # lower\n","plt.plot(plot_df.values[:, [10]], 'g', alpha=1)  # middle\n","\n","plt.plot(plot_df.values[:, [11]], 'c*', alpha=1, markersize=5)  # sar mic\n","plt.plot(plot_df.values[:, [12]], 'co', alpha=1, markersize=7)  # sar mac\n","\n","plt.fill_between(np.arange(len(plot_df)), plot_df.values[:, 13], plot_df.values[:, 14],\n","                  where=plot_df.values[:, 13] >= plot_df.values[:, 14], facecolor='g', alpha=0.5) # ichimoku\n","plt.fill_between(np.arange(len(plot_df)), plot_df.values[:, 13], plot_df.values[:, 14],\n","                  where=plot_df.values[:, 13] <= plot_df.values[:, 14], facecolor='r', alpha=0.5)\n","\n","\n","\n","plt.show()\n","# plt.draw()\n","plt.close()\n","# plt.pause(1e-3)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"qNGeuYuGDXfv"},"source":["# pr check with strategy"]},{"cell_type":"markdown","metadata":{"id":"qkzeUFAyeJXK"},"source":["### save sample res_dfs"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"dIL0k_VEeL6B","executionInfo":{"status":"ok","timestamp":1630368688309,"user_tz":-540,"elapsed":2352474,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"}},"outputId":"61f0b2c1-378b-4afc-b0b8-5e99e6e40376"},"source":["save_path = './candlestick_concated/res_df/'\n","res_df_files = os.listdir(save_path)\n","\n","print(res_df_files)\n","\n","res_df_dict = {}\n","\n","max_cnt = 10\n","sample_cnt = max_cnt\n","\n","for k_i, key in enumerate(res_df_files):\n","  # if '2021-04-30'.upper() not in key:\n","  # if '2021-05-30'.upper() not in key:\n","  # if '2021-06-30'.upper() not in key:\n","  # if '2021-07-03'.upper() not in key:\n","  if '2021-07-01'.upper() not in key:\n","    continue\n","\n","  # if \"link\".upper() not in key:\n","  # if \"eth\".upper() not in key:\n","  #   continue\n","\n","  if \"_majorst_backi2\" not in key:\n","    continue\n","\n","  if sample_cnt == max_cnt:\n","    dict_name = \"%s_res_dfs.pkl\" % key.split(\".\")[0]\n","    print(\"dict_name :\", dict_name)\n","\n","  res_df = pd.read_excel(save_path + key, index_col=0)  \n","\n","  res_df_dict[key] = res_df\n","  print(key, \"saved to dict !\")\n","\n","  #     save with pickle    #\n","  with open(save_path + dict_name, 'wb') as f:\n","    pickle.dump(res_df_dict, f)\n","\n","  sample_cnt -= 1\n","\n","  if sample_cnt <= 0:\n","    break\n"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["['2021-07-03 ETHUSDT.xlsx_backup', '2021-07-03 ETHUSDT.xlsx', '2021-06-30 ETHUSDT_question.xlsx', '2021-06-30 ETHUSDT_backi1.xlsx', '2021-06-30 ETHUSDT_backi2.xlsx', '2021-07-01 ETHUSDT_backi1.xlsx', '2021-07-01 ETHUSDT_backi2.xlsx', '2021-06-30 BTCUSDT_backi2.xlsx', '2021-06-30 XRPUSDT_backi2.xlsx', '2021-06-30 LINKUSDT_backi2.xlsx', '2021-06-30 ADAUSDT_backi2.xlsx', '2021-06-30 ETCUSDT_backi2.xlsx', '2021-06-30 LTCUSDT_backi2.xlsx', '2021-06-30 EOSUSDT_backi2.xlsx', '2021-06-30 BCHUSDT_backi2.xlsx', '2021-06-30 XLMUSDT_backi2.xlsx', '2021-07-01 BTCUSDT_backi2.xlsx', '2021-07-01 BCHUSDT_backi2.xlsx', '2021-07-01 XRPUSDT_backi2.xlsx', '2021-07-01 EOSUSDT_backi2.xlsx', '2021-07-01 LTCUSDT_backi2.xlsx', '2021-07-01 ETCUSDT_backi2.xlsx', '2021-07-01 LINKUSDT_backi2.xlsx', '2021-07-01 XLMUSDT_backi2.xlsx', '2021-07-01 ADAUSDT_backi2.xlsx', '2021-06-30 ETHUSDTmacd5355_backi2.xlsx', '2021-06-30 BTCUSDTmacd5355_backi2.xlsx', '2021-06-30 BCHUSDTmacd5355_backi2.xlsx', '2021-06-30 XRPUSDTmacd5355_backi2.xlsx', '2021-06-30 EOSUSDTmacd5355_backi2.xlsx', '2021-06-30 LTCUSDTmacd5355_backi2.xlsx', '2021-06-30 ETCUSDTmacd5355_backi2.xlsx', '2021-06-30 LINKUSDTmacd5355_backi2.xlsx', '2021-06-30 XLMUSDTmacd5355_backi2.xlsx', '2021-06-30 ADAUSDTmacd5355_backi2.xlsx', '2021-06-30 BTCUSDT_trix_backi2.xlsx', '2021-06-30 BCHUSDT_trix_backi2.xlsx', '2021-06-30 XRPUSDT_trix_backi2.xlsx', '2021-06-30 EOSUSDT_trix_backi2.xlsx', '2021-06-30 LTCUSDT_trix_backi2.xlsx', '2021-06-30 ETCUSDT_trix_backi2.xlsx', '2021-06-30 LINKUSDT_trix_backi2.xlsx', '2021-06-30 XLMUSDT_trix_backi2.xlsx', '2021-06-30 ADAUSDT_trix_backi2.xlsx', '2021-06-30 ETHUSDT_trix_backi2.xlsx', '2021-06-30 SUSHIUSDT_trix_backi2.xlsx', '2021-06-30 CVCUSDT_trix_backi2.xlsx', '2021-06-30 BTSUSDT_trix_backi2.xlsx', '2021-06-30 HOTUSDT_trix_backi2.xlsx', '2021-06-30 ZRXUSDT_trix_backi2.xlsx', '2021-06-30 QTUMUSDT_trix_backi2.xlsx', '2021-06-30 IOTAUSDT_trix_backi2.xlsx', '2021-06-30 BTCBUSD_trix_backi2.xlsx', '2021-06-30 WAVESUSDT_trix_backi2.xlsx', '2021-06-30 LITUSDT_trix_backi2.xlsx', '2021-06-30 XTZUSDT_trix_backi2.xlsx', '2021-06-30 BNBUSDT_trix_backi2.xlsx', '2021-06-30 AKROUSDT_trix_backi2.xlsx', '2021-06-30 HNTUSDT_trix_backi2.xlsx', '2021-06-30 XMRUSDT_trix_backi2.xlsx', '2021-06-30 YFIUSDT_trix_backi2.xlsx', '2021-06-30 ALICEUSDT_trix_backi2.xlsx', '2021-06-30 ALPHAUSDT_trix_backi2.xlsx', '2021-06-30 SFPUSDT_trix_backi2.xlsx', '2021-06-30 REEFUSDT_trix_backi2.xlsx', '2021-06-30 BATUSDT_trix_backi2.xlsx', '2021-06-30 DOGEUSDT_trix_backi2.xlsx', '2021-06-30 TRXUSDT_trix_backi2.xlsx', '2021-06-30 RLCUSDT_trix_backi2.xlsx', '2021-06-30 BTCSTUSDT_trix_backi2.xlsx', '2021-06-30 STORJUSDT_trix_backi2.xlsx', '2021-06-30 SNXUSDT_trix_backi2.xlsx', '2021-06-30 NEOUSDT_trix_backi2.xlsx', '2021-06-30 UNFIUSDT_trix_backi2.xlsx', '2021-06-30 SANDUSDT_trix_backi2.xlsx', '2021-06-30 DASHUSDT_trix_backi2.xlsx', '2021-06-30 ETHUSDT_cctbbo_backi2.xlsx', '2021-06-30 BTCUSDT_cctbbo_backi2.xlsx', '2021-06-30 BCHUSDT_cctbbo_backi2.xlsx', '2021-06-30 XRPUSDT_cctbbo_backi2.xlsx', '2021-06-30 EOSUSDT_cctbbo_backi2.xlsx', '2021-06-30 LTCUSDT_cctbbo_backi2.xlsx', '2021-06-30 ETCUSDT_cctbbo_backi2.xlsx', '2021-06-30 LINKUSDT_cctbbo_backi2.xlsx', '2021-06-30 XLMUSDT_cctbbo_backi2.xlsx', '2021-06-30 ADAUSDT_cctbbo_backi2.xlsx', '2021-06-30 SUSHIUSDT_cctbbo_backi2.xlsx', '2021-06-30 CVCUSDT_cctbbo_backi2.xlsx', '2021-06-30 BTSUSDT_cctbbo_backi2.xlsx', '2021-06-30 HOTUSDT_cctbbo_backi2.xlsx', '2021-06-30 ZRXUSDT_cctbbo_backi2.xlsx', '2021-06-30 QTUMUSDT_cctbbo_backi2.xlsx', '2021-06-30 IOTAUSDT_cctbbo_backi2.xlsx', '2021-06-30 BTCBUSD_cctbbo_backi2.xlsx', '2021-06-30 WAVESUSDT_cctbbo_backi2.xlsx', '2021-06-30 LITUSDT_cctbbo_backi2.xlsx', '2021-06-30 XTZUSDT_cctbbo_backi2.xlsx', '2021-06-30 BNBUSDT_cctbbo_backi2.xlsx', '2021-06-30 AKROUSDT_cctbbo_backi2.xlsx', '2021-06-30 HNTUSDT_cctbbo_backi2.xlsx', '2021-06-30 XMRUSDT_cctbbo_backi2.xlsx', '2021-06-30 YFIUSDT_cctbbo_backi2.xlsx', '2021-06-30 ALICEUSDT_cctbbo_backi2.xlsx', '2021-06-30 ALPHAUSDT_cctbbo_backi2.xlsx', '2021-06-30 SFPUSDT_cctbbo_backi2.xlsx', '2021-06-30 REEFUSDT_cctbbo_backi2.xlsx', '2021-06-30 BATUSDT_cctbbo_backi2.xlsx', '2021-06-30 DOGEUSDT_cctbbo_backi2.xlsx', '2021-06-30 TRXUSDT_cctbbo_backi2.xlsx', '2021-06-30 RLCUSDT_cctbbo_backi2.xlsx', '2021-06-30 BTCSTUSDT_cctbbo_backi2.xlsx', '2021-06-30 ETHUSDT_cctbbo_backi2_res_dfs.pkl', '2021-06-30 ETHUSDT_533_cctbbo_backi2.xlsx', '2021-06-30 BTCUSDT_533_cctbbo_backi2.xlsx', '2021-06-30 BCHUSDT_533_cctbbo_backi2.xlsx', '2021-06-30 XRPUSDT_533_cctbbo_backi2.xlsx', '2021-06-30 EOSUSDT_533_cctbbo_backi2.xlsx', '2021-06-30 LTCUSDT_533_cctbbo_backi2.xlsx', '2021-06-30 ETCUSDT_533_cctbbo_backi2.xlsx', '2021-06-30 LINKUSDT_533_cctbbo_backi2.xlsx', '2021-06-30 XLMUSDT_533_cctbbo_backi2.xlsx', '2021-06-30 ADAUSDT_533_cctbbo_backi2.xlsx', '2021-06-30 SUSHIUSDT_533_cctbbo_backi2.xlsx', '2021-06-30 CVCUSDT_533_cctbbo_backi2.xlsx', '2021-06-30 BTSUSDT_533_cctbbo_backi2.xlsx', '2021-06-30 HOTUSDT_533_cctbbo_backi2.xlsx', '2021-06-30 ZRXUSDT_533_cctbbo_backi2.xlsx', '2021-06-30 QTUMUSDT_533_cctbbo_backi2.xlsx', '2021-06-30 IOTAUSDT_533_cctbbo_backi2.xlsx', '2021-06-30 BTCBUSD_533_cctbbo_backi2.xlsx', '2021-06-30 WAVESUSDT_533_cctbbo_backi2.xlsx', '2021-06-30 LITUSDT_533_cctbbo_backi2.xlsx', '2021-06-30 XTZUSDT_533_cctbbo_backi2.xlsx', '2021-06-30 ETHUSDT_533_cctbbo_backi2_res_dfs.pkl', '2021-07-01 ETHUSDT_backi2_res_dfs.pkl', '2021-06-30 ETHUSDT_fisher_backi2.xlsx', '2021-06-30 BTCUSDT_fisher_backi2.xlsx', '2021-06-30 BCHUSDT_fisher_backi2.xlsx', '2021-06-30 XRPUSDT_fisher_backi2.xlsx', '2021-06-30 EOSUSDT_fisher_backi2.xlsx', '2021-06-30 LTCUSDT_fisher_backi2.xlsx', '2021-06-30 ETCUSDT_fisher_backi2.xlsx', '2021-06-30 LINKUSDT_fisher_backi2.xlsx', '2021-06-30 XLMUSDT_fisher_backi2.xlsx', '2021-06-30 ADAUSDT_fisher_backi2.xlsx', '2021-06-30 SUSHIUSDT_fisher_backi2.xlsx', '2021-06-30 CVCUSDT_fisher_backi2.xlsx', '2021-06-30 BTSUSDT_fisher_backi2.xlsx', '2021-06-30 HOTUSDT_fisher_backi2.xlsx', '2021-06-30 ZRXUSDT_fisher_backi2.xlsx', '2021-06-30 QTUMUSDT_fisher_backi2.xlsx', '2021-06-30 IOTAUSDT_fisher_backi2.xlsx', '2021-06-30 BTCBUSD_fisher_backi2.xlsx', '2021-06-30 WAVESUSDT_fisher_backi2.xlsx', '2021-06-30 LITUSDT_fisher_backi2.xlsx', '2021-06-30 XTZUSDT_fisher_backi2.xlsx', '2021-06-30 BNBUSDT_fisher_backi2.xlsx', '2021-06-30 AKROUSDT_fisher_backi2.xlsx', '2021-06-30 HNTUSDT_fisher_backi2.xlsx', '2021-06-30 XMRUSDT_fisher_backi2.xlsx', '2021-06-30 YFIUSDT_fisher_backi2.xlsx', '2021-06-30 ALICEUSDT_fisher_backi2.xlsx', '2021-06-30 ALPHAUSDT_fisher_backi2.xlsx', '2021-06-30 SFPUSDT_fisher_backi2.xlsx', '2021-06-30 REEFUSDT_fisher_backi2.xlsx', '2021-06-30 BATUSDT_fisher_backi2.xlsx', '2021-06-30 DOGEUSDT_fisher_backi2.xlsx', '2021-06-30 TRXUSDT_fisher_backi2.xlsx', '2021-06-30 RLCUSDT_fisher_backi2.xlsx', '2021-06-30 BTCSTUSDT_fisher_backi2.xlsx', '2021-06-30 STORJUSDT_fisher_backi2.xlsx', '2021-06-30 SNXUSDT_fisher_backi2.xlsx', '2021-06-30 NEOUSDT_fisher_backi2.xlsx', '2021-06-30 UNFIUSDT_fisher_backi2.xlsx', '2021-06-30 SANDUSDT_fisher_backi2.xlsx', '2021-06-30 DASHUSDT_fisher_backi2.xlsx', '2021-06-30 KAVAUSDT_fisher_backi2.xlsx', '2021-06-30 RUNEUSDT_fisher_backi2.xlsx', '2021-06-30 CTKUSDT_fisher_backi2.xlsx', '2021-06-30 CELRUSDT_fisher_backi2.xlsx', '2021-06-30 RSRUSDT_fisher_backi2.xlsx', '2021-06-30 DGBUSDT_fisher_backi2.xlsx', '2021-06-30 SKLUSDT_fisher_backi2.xlsx', '2021-06-30 RENUSDT_fisher_backi2.xlsx', '2021-06-30 TOMOUSDT_fisher_backi2.xlsx', '2021-06-30 MTLUSDT_fisher_backi2.xlsx', '2021-06-30 DODOUSDT_fisher_backi2.xlsx', '2021-06-30 EGLDUSDT_fisher_backi2.xlsx', '2021-06-30 KSMUSDT_fisher_backi2.xlsx', '2021-06-30 ONTUSDT_fisher_backi2.xlsx', '2021-06-30 VETUSDT_fisher_backi2.xlsx', '2021-06-30 TRBUSDT_fisher_backi2.xlsx', '2021-06-30 MANAUSDT_fisher_backi2.xlsx', '2021-06-30 COTIUSDT_fisher_backi2.xlsx', '2021-06-30 CHRUSDT_fisher_backi2.xlsx', '2021-06-30 ETHUSDT_fisher_backi2_res_dfs.pkl', '2021-06-30 BTCUSDT_4h1d_backi2.xlsx', '2021-06-30 BCHUSDT_4h1d_backi2.xlsx', '2021-06-30 XRPUSDT_4h1d_backi2.xlsx', '2021-06-30 EOSUSDT_4h1d_backi2.xlsx', '2021-06-30 LTCUSDT_4h1d_backi2.xlsx', '2021-06-30 ETCUSDT_4h1d_backi2.xlsx', '2021-06-30 LINKUSDT_4h1d_backi2.xlsx', '2021-06-30 XLMUSDT_4h1d_backi2.xlsx', '2021-06-30 ETHUSDT_4h1d_backi2_res_dfs.pkl', '2021-06-30 BTCUSDT_4h1d_backi2_res_dfs.pkl', '2021-06-30 ADAUSDT_4h1d_backi2.xlsx', '2021-06-30 SUSHIUSDT_4h1d_backi2.xlsx', '2021-06-30 CVCUSDT_4h1d_backi2.xlsx', '2021-06-30 BTSUSDT_4h1d_backi2.xlsx', '2021-06-30 HOTUSDT_4h1d_backi2.xlsx', '2021-06-30 ZRXUSDT_4h1d_backi2.xlsx', '2021-06-30 QTUMUSDT_4h1d_backi2.xlsx', '2021-06-30 IOTAUSDT_4h1d_backi2.xlsx', '2021-06-30 BTCBUSD_4h1d_backi2.xlsx', '2021-06-30 WAVESUSDT_4h1d_backi2.xlsx', '2021-06-30 LITUSDT_4h1d_backi2.xlsx', '2021-06-30 XTZUSDT_4h1d_backi2.xlsx', '2021-06-30 BNBUSDT_4h1d_backi2.xlsx', '2021-06-30 AKROUSDT_4h1d_backi2.xlsx', '2021-06-30 HNTUSDT_4h1d_backi2.xlsx', '2021-06-30 XMRUSDT_4h1d_backi2.xlsx', '2021-06-30 YFIUSDT_4h1d_backi2.xlsx', '2021-06-30 ALICEUSDT_4h1d_backi2.xlsx', '2021-06-30 ALPHAUSDT_4h1d_backi2.xlsx', '2021-06-30 SFPUSDT_4h1d_backi2.xlsx', '2021-06-30 REEFUSDT_4h1d_backi2.xlsx', '2021-06-30 BATUSDT_4h1d_backi2.xlsx', '2021-06-30 DOGEUSDT_4h1d_backi2.xlsx', '2021-06-30 TRXUSDT_4h1d_backi2.xlsx', '2021-06-30 ETHUSDT_7tf_backi2.xlsx', '2021-06-30 BTCUSDT_7tf_backi2.xlsx', '2021-06-30 BCHUSDT_7tf_backi2.xlsx', '2021-06-30 XRPUSDT_7tf_backi2.xlsx', '2021-06-30 EOSUSDT_7tf_backi2.xlsx', '2021-06-30 LTCUSDT_7tf_backi2.xlsx', '2021-06-30 ETCUSDT_7tf_backi2.xlsx', '2021-06-30 LINKUSDT_7tf_backi2.xlsx', '2021-06-30 XLMUSDT_7tf_backi2.xlsx', '2021-06-30 ADAUSDT_7tf_backi2.xlsx', '2021-06-30 SUSHIUSDT_7tf_backi2.xlsx', '2021-06-30 CVCUSDT_7tf_backi2.xlsx', '2021-06-30 BTSUSDT_7tf_backi2.xlsx', '2021-06-30 HOTUSDT_7tf_backi2.xlsx', '2021-06-30 ZRXUSDT_7tf_backi2.xlsx', '2021-06-30 QTUMUSDT_7tf_backi2.xlsx', '2021-06-30 IOTAUSDT_7tf_backi2.xlsx', '2021-06-30 BTCBUSD_7tf_backi2.xlsx', '2021-06-30 WAVESUSDT_7tf_backi2.xlsx', '2021-06-30 LITUSDT_7tf_backi2.xlsx', '2021-06-30 XTZUSDT_7tf_backi2.xlsx', '2021-06-30 BNBUSDT_7tf_backi2.xlsx', '2021-06-30 AKROUSDT_7tf_backi2.xlsx', '2021-06-30 HNTUSDT_7tf_backi2.xlsx', '2021-06-30 XMRUSDT_7tf_backi2.xlsx', '2021-06-30 YFIUSDT_7tf_backi2.xlsx', '2021-06-30 ALICEUSDT_7tf_backi2.xlsx', '2021-06-30 ALPHAUSDT_7tf_backi2.xlsx', '2021-06-30 SFPUSDT_7tf_backi2.xlsx', '2021-06-30 REEFUSDT_7tf_backi2.xlsx', '2021-06-30 BATUSDT_7tf_backi2.xlsx', '2021-06-30 DOGEUSDT_7tf_backi2.xlsx', '2021-06-30 TRXUSDT_7tf_backi2.xlsx', '2021-06-30 RLCUSDT_7tf_backi2.xlsx', '2021-06-30 BTCSTUSDT_7tf_backi2.xlsx', '2021-06-30 STORJUSDT_7tf_backi2.xlsx', '2021-06-30 SNXUSDT_7tf_backi2.xlsx', '2021-06-30 NEOUSDT_7tf_backi2.xlsx', '2021-06-30 UNFIUSDT_7tf_backi2.xlsx', '2021-06-30 SANDUSDT_7tf_backi2.xlsx', '2021-06-30 DASHUSDT_7tf_backi2.xlsx', '2021-06-30 KAVAUSDT_7tf_backi2.xlsx', '2021-06-30 RUNEUSDT_7tf_backi2.xlsx', '2021-06-30 CTKUSDT_7tf_backi2.xlsx', '2021-06-30 CELRUSDT_7tf_backi2.xlsx', '2021-06-30 RSRUSDT_7tf_backi2.xlsx', '2021-06-30 DGBUSDT_7tf_backi2.xlsx', '2021-06-30 SKLUSDT_7tf_backi2.xlsx', '2021-06-30 RENUSDT_7tf_backi2.xlsx', '2021-06-30 TOMOUSDT_7tf_backi2.xlsx', '2021-06-30 MTLUSDT_7tf_backi2.xlsx', '2021-06-30 DODOUSDT_7tf_backi2.xlsx', '2021-06-30 EGLDUSDT_7tf_backi2.xlsx', '2021-06-30 KSMUSDT_7tf_backi2.xlsx', '2021-06-30 ONTUSDT_7tf_backi2.xlsx', '2021-06-30 VETUSDT_7tf_backi2.xlsx', '2021-06-30 TRBUSDT_7tf_backi2.xlsx', '2021-06-30 MANAUSDT_7tf_backi2.xlsx', '2021-06-30 COTIUSDT_7tf_backi2.xlsx', '2021-06-30 CHRUSDT_7tf_backi2.xlsx', '2021-06-30 ETHUSDT_sartrend_backi2.xlsx', '2021-06-30 BTCUSDT_sartrend_backi2.xlsx', '2021-06-30 BCHUSDT_sartrend_backi2.xlsx', '2021-06-30 XRPUSDT_sartrend_backi2.xlsx', '2021-06-30 EOSUSDT_sartrend_backi2.xlsx', '2021-06-30 LTCUSDT_sartrend_backi2.xlsx', '2021-06-30 ETCUSDT_sartrend_backi2.xlsx', '2021-06-30 LINKUSDT_sartrend_backi2.xlsx', '2021-06-30 XLMUSDT_sartrend_backi2.xlsx', '2021-06-30 ADAUSDT_sartrend_backi2.xlsx', '2021-06-30 SUSHIUSDT_sartrend_backi2.xlsx', '2021-06-30 CVCUSDT_sartrend_backi2.xlsx', '2021-06-30 BTSUSDT_sartrend_backi2.xlsx', '2021-06-30 HOTUSDT_sartrend_backi2.xlsx', '2021-06-30 ZRXUSDT_sartrend_backi2.xlsx', '2021-06-30 QTUMUSDT_sartrend_backi2.xlsx', '2021-06-30 IOTAUSDT_sartrend_backi2.xlsx', '2021-06-30 BTCBUSD_sartrend_backi2.xlsx', '2021-06-30 WAVESUSDT_sartrend_backi2.xlsx', '2021-06-30 LITUSDT_sartrend_backi2.xlsx', '2021-06-30 XTZUSDT_sartrend_backi2.xlsx', '2021-06-30 BNBUSDT_sartrend_backi2.xlsx', '2021-06-30 AKROUSDT_sartrend_backi2.xlsx', '2021-06-30 HNTUSDT_sartrend_backi2.xlsx', '2021-06-30 XMRUSDT_sartrend_backi2.xlsx', '2021-06-30 YFIUSDT_sartrend_backi2.xlsx', '2021-06-30 ALICEUSDT_sartrend_backi2.xlsx', '2021-06-30 ALPHAUSDT_sartrend_backi2.xlsx', '2021-06-30 SFPUSDT_sartrend_backi2.xlsx', '2021-06-30 REEFUSDT_sartrend_backi2.xlsx', '2021-06-30 BATUSDT_sartrend_backi2.xlsx', '2021-06-30 DOGEUSDT_sartrend_backi2.xlsx', '2021-06-30 TRXUSDT_sartrend_backi2.xlsx', '2021-06-30 RLCUSDT_sartrend_backi2.xlsx', '2021-06-30 BTCSTUSDT_sartrend_backi2.xlsx', '2021-06-30 STORJUSDT_sartrend_backi2.xlsx', '2021-06-30 SNXUSDT_sartrend_backi2.xlsx', '2021-06-30 NEOUSDT_sartrend_backi2.xlsx', '2021-06-30 UNFIUSDT_sartrend_backi2.xlsx', '2021-06-30 SANDUSDT_sartrend_backi2.xlsx', '2021-06-30 DASHUSDT_sartrend_backi2.xlsx', '2021-06-30 KAVAUSDT_sartrend_backi2.xlsx', '2021-06-30 RUNEUSDT_sartrend_backi2.xlsx', '2021-06-30 CTKUSDT_sartrend_backi2.xlsx', '2021-06-30 CELRUSDT_sartrend_backi2.xlsx', '2021-06-30 RSRUSDT_sartrend_backi2.xlsx', '2021-06-30 DGBUSDT_sartrend_backi2.xlsx', '2021-06-30 SKLUSDT_sartrend_backi2.xlsx', '2021-06-30 RENUSDT_sartrend_backi2.xlsx', '2021-06-30 TOMOUSDT_sartrend_backi2.xlsx', '2021-06-30 MTLUSDT_sartrend_backi2.xlsx', '2021-06-30 DODOUSDT_sartrend_backi2.xlsx', '2021-06-30 EGLDUSDT_sartrend_backi2.xlsx', '2021-06-30 KSMUSDT_sartrend_backi2.xlsx', '2021-06-30 ONTUSDT_sartrend_backi2.xlsx', '2021-06-30 VETUSDT_sartrend_backi2.xlsx', '2021-06-30 TRBUSDT_sartrend_backi2.xlsx', '2021-06-30 MANAUSDT_sartrend_backi2.xlsx', '2021-06-30 COTIUSDT_sartrend_backi2.xlsx', '2021-06-30 CHRUSDT_sartrend_backi2.xlsx', '2021-06-30 ETHUSDT_sartrend_backi2_res_dfs.pkl', '2021-08-29 ETHUSDT_sartrend_backi2.xlsx', '2021-08-29 ETHUSDT_sartrend_backi2_res_dfs.pkl', '2021-07-01 BTCUSDT_majorst_on30_backi2.xlsx', '2021-07-01 BCHUSDT_majorst_on30_backi2.xlsx', '2021-07-01 XRPUSDT_majorst_on30_backi2.xlsx', '2021-07-01 EOSUSDT_majorst_on30_backi2.xlsx', '2021-07-01 LTCUSDT_majorst_on30_backi2.xlsx', '2021-07-01 ETCUSDT_majorst_on30_backi2.xlsx', '2021-07-01 LINKUSDT_majorst_on30_backi2.xlsx', '2021-07-01 XLMUSDT_majorst_on30_backi2.xlsx', '2021-07-01 ADAUSDT_majorst_on30_backi2.xlsx', '2021-07-01 ETHUSDT_majorst_on30_backi2.xlsx', '2021-07-01 BTCUSDT_majorst_on30_backi2_res_dfs.pkl', '2021-07-01 BTCUSDT_majorst_backi2.xlsx', '2021-07-01 BCHUSDT_majorst_backi2.xlsx', '2021-07-01 XRPUSDT_majorst_backi2.xlsx', '2021-07-01 EOSUSDT_majorst_backi2.xlsx', '2021-07-01 LTCUSDT_majorst_backi2.xlsx', '2021-07-01 ETCUSDT_majorst_backi2.xlsx', '2021-07-01 LINKUSDT_majorst_backi2.xlsx', '2021-07-01 XLMUSDT_majorst_backi2.xlsx', '2021-07-01 ADAUSDT_majorst_backi2.xlsx', '2021-07-01 ETHUSDT_majorst_backi2.xlsx']\n","dict_name : 2021-07-01 BTCUSDT_majorst_backi2_res_dfs.pkl\n","2021-07-01 BTCUSDT_majorst_backi2.xlsx saved to dict !\n","2021-07-01 BCHUSDT_majorst_backi2.xlsx saved to dict !\n","2021-07-01 XRPUSDT_majorst_backi2.xlsx saved to dict !\n","2021-07-01 EOSUSDT_majorst_backi2.xlsx saved to dict !\n","2021-07-01 LTCUSDT_majorst_backi2.xlsx saved to dict !\n","2021-07-01 ETCUSDT_majorst_backi2.xlsx saved to dict !\n","2021-07-01 LINKUSDT_majorst_backi2.xlsx saved to dict !\n","2021-07-01 XLMUSDT_majorst_backi2.xlsx saved to dict !\n","2021-07-01 ADAUSDT_majorst_backi2.xlsx saved to dict !\n","2021-07-01 ETHUSDT_majorst_backi2.xlsx saved to dict !\n"]}]},{"cell_type":"markdown","metadata":{"id":"6HOjnZjSgzk1"},"source":["## load res_df_dict"]},{"cell_type":"code","metadata":{"id":"7FPBG5Qqg2jB","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1631524716068,"user_tz":-540,"elapsed":7301,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"f25c5863-240e-40d9-c1d1-2d9a58c2e317"},"source":["save_path = './candlestick_concated/res_df/'\n","dict_name = \"2021-06-30 ETHUSDT_sartrend_backi2_res_dfs.pkl\"\n","dict_name = \"2021-07-01 ETHUSDT_backi2_res_dfs.pkl\"\n","dict_name = \"2021-07-01 BTCUSDT_majorst_backi2_res_dfs.pkl\"\n","\n","\n","#     load with pickle    #\n","with open(save_path + dict_name, 'rb') as f:\n","  res_df_dict = pickle.load(f)\n","\n","print(dict_name, \"loaded !\")"],"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["2021-07-01 BTCUSDT_majorst_backi2_res_dfs.pkl loaded !\n"]}]},{"cell_type":"markdown","metadata":{"id":"tApzvz_gK9lR"},"source":["## basic strategy"]},{"cell_type":"code","metadata":{"id":"a8aYsjEgQnGF"},"source":["org_res_df = res_df.copy()"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"FaRGwR4NEop2"},"source":["### shifting"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"RF3RM2G2RCb1","executionInfo":{"elapsed":291,"status":"ok","timestamp":1626515312874,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"},"user_tz":-540},"outputId":"ba8f6a75-d4df-4f85-cd0f-190935341f7a"},"source":["#         refresh res_df      #\n","res_df = org_res_df.copy()\n","print(org_res_df.tail(5))\n","\n","# break\n","\n","\n","shift_size = -4\n","# shift_size = -1\n","# shift_size = -7\n","# shift_size = +3\n","\n","res_df['min_upper'] = res_df['min_upper'].shift(shift_size)\n","res_df['max_lower'] = res_df['max_lower'].shift(shift_size)\n","res_df['minor_ST1_Trend'] = res_df['minor_ST1_Trend'].shift(shift_size)\n","res_df['minor_ST2_Trend'] = res_df['minor_ST2_Trend'].shift(shift_size)\n","res_df['minor_ST3_Trend'] = res_df['minor_ST3_Trend'].shift(shift_size)\n","res_df['middle_line'] = res_df['middle_line'].shift(shift_size)\n","\n","print(res_df.tail(5))"],"execution_count":null,"outputs":[{"name":"stdout","output_type":"stream","text":["                            open     high  ...  min_upper  max_lower\n","2021-06-30 23:55:59.999  0.27223  0.27281  ...   0.272145    0.27005\n","2021-06-30 23:56:59.999  0.27274  0.27290  ...   0.272145    0.27005\n","2021-06-30 23:57:59.999  0.27246  0.27257  ...   0.272523    0.27021\n","2021-06-30 23:58:59.999  0.27166  0.27183  ...   0.272523    0.27021\n","2021-06-30 23:59:59.999  0.27144  0.27211  ...   0.272523    0.27021\n","\n","[5 rows x 37 columns]\n","                            open     high  ...  min_upper  max_lower\n","2021-06-30 23:55:59.999  0.27223  0.27281  ...   0.272523    0.27021\n","2021-06-30 23:56:59.999  0.27274  0.27290  ...        NaN        NaN\n","2021-06-30 23:57:59.999  0.27246  0.27257  ...        NaN        NaN\n","2021-06-30 23:58:59.999  0.27166  0.27183  ...        NaN        NaN\n","2021-06-30 23:59:59.999  0.27144  0.27211  ...        NaN        NaN\n","\n","[5 rows x 37 columns]\n"]}]},{"cell_type":"markdown","metadata":{"id":"2gxvme1PC6ha"},"source":["### load model"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"dtYdAuSsC72_","executionInfo":{"elapsed":5831,"status":"ok","timestamp":1628862368878,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"},"user_tz":-540},"outputId":"e8dccc53-aaa7-4bab-ed8d-753f634c08d6"},"source":["# model_name = 'inner_tick_cnnreg_lscalemm_prefee_gpu_%s_%s_%s_%s_%s.h5'\n","\n","# model = tf.keras.models.load_model(ckpt_path + model_name)\n","\n","from tensorflow.keras.applications.resnet50 import ResNet50\n","\n","model = ResNet50(weights='imagenet', include_top=False)\n","# model.summary()\n"],"execution_count":null,"outputs":[{"name":"stdout","output_type":"stream","text":["Downloading data from https://storage.googleapis.com/tensorflow/keras-applications/resnet/resnet50_weights_tf_dim_ordering_tf_kernels_notop.h5\n","94773248/94765736 [==============================] - 1s 0us/step\n"]}]},{"cell_type":"markdown","metadata":{"id":"5la6usMOFzkX"},"source":["#### gen selected vector"]},{"cell_type":"code","metadata":{"id":"oQk3-jbKF8FB"},"source":["def min_max_scale(npy_x):\n","\n","  return (npy_x - np.min(npy_x)) / (np.max(npy_x) - np.min(npy_x))\n","\n","def expand_dims(npy_x):\n","\n","  row, col = npy_x.shape\n","  npy_x2 = np.array(npy_x).reshape(-1, row, col, 1).astype(np.float32)\n","  # input_x = np.array(data_x).reshape(-1, row, col).astype(np.float32)\n","\n","  #     1c to 3c    #\n","  npy_x3 = npy_x2 * np.ones(3, dtype=np.float32)[None, None, None, :]\n","\n","  return npy_x3\n","\n","\n","def vector_dist(f1, f2):\n","  return np.linalg.norm(f1-f2)\n","\n","\n","\n","# ------------------------ params ------------------------  #\n","selected_i = 500\n","input_size = 100\n","\n","\n","\n","#   1. 선택된 인덱스를 입력받았을 때, input generating 형태만 만들어놓고,     #\n","#   1-1. input cols 필요함    #\n","\n","basic_list = ['open', 'high', 'low', 'close', 'minor_ST1_Up', 'minor_ST1_Down',\n","       'minor_ST2_Up', 'minor_ST2_Down', 'minor_ST3_Up', 'minor_ST3_Down',\n","       'middle_line', 'min_upper', 'max_lower']\n","# senkoua_list = ['senkou_a1', 'senkou_a2', 'senkou_a3', 'senkou_a4', 'senkou_a5']\n","# senkoub_list = ['senkou_b1', 'senkou_b2', 'senkou_b3', 'senkou_b4', 'senkou_b5']\n","senkoua_list = ['senkou_a1', 'senkou_a2', 'senkou_a3']\n","senkoub_list = ['senkou_b1', 'senkou_b2', 'senkou_b3']\n","# sar_list = ['sar1', 'sar2', 'sar3', 'sar4', 'sar5']\n","# sar_list = ['sar1', 'sar2', 'sar3', 'sar4', 'sar5']\n","sar_list = ['sar1', 'sar2', 'sar3']\n","sar_list = ['sar1', 'sar2', 'sar3']\n","\n","sma_list = ['sma']\n","\n","#     -------------- outer price phase --------------    #\n","macd_list = ['macd_hist1', 'macd_hist2', 'macd_hist3', 'macd_hist4', 'macd_hist5']\n","trix_list = ['trix1', 'trix2', 'trix3', 'trix4', 'trix5']\n","stoch_list = ['stoch']\n","fisher_list = ['fisher30', 'fisher60', 'fisher120']\n","cctbbo_list = ['cctbbo']\n","\n","selected_price_colname = basic_list + senkoua_list + senkoub_list + sar_list\n","selected_outprice_colname = [macd_list]\n","\n","\n","#         global scaling for outer price data       #\n","#         1. nan 처리       #\n","\n","# # print((np.isnan(df.values)))\n","# print(\"np.sum(np.isnan(df.values), axis=0) :\", np.sum(np.isnan(df.values), axis=0))\n","\n","# max_nan = np.max(np.sum(np.isnan(df.values), axis=0))\n","# # print(max_nan)\n","\n","# df = df.iloc[max_nan:-max_nan]\n","\n","# total_gdata = []\n","# for g_col in selected_outprice_colname:\n","\n","#   temp_data = min_max_scale(res_df[g_col])\n","#   total_gdata.append(temp_data)\n","\n","\n","\n","#   1-2. cols 에 따른, scaling method 구분함    #\n","onprice_input_x = min_max_scale(res_df[selected_price_colname].iloc[selected_i - input_size:selected_i].values)\n","print(onprice_input_x.shape)\n","\n","\n","#   2. plot_check 에서 본인이 원하는 shape 의 인덱스를 선택   #\n","#   3. vertorize, \n","#   3-1. input generator 를 이용해 entry signal 발생할 때마다 dist 비교 진행    #\n","re_onprice_input_x = expand_dims(onprice_input_x)\n","print(re_onprice_input_x.shape)\n","      \n","# break\n","\n","selected_vector = model.predict(re_onprice_input_x, verbose=1)\n","print(selected_vector.shape)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"5duWn8t4BRyv"},"source":["### lastest platform"]},{"cell_type":"code","metadata":{"id":"TdAn2bHHBWMF","colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"status":"ok","timestamp":1631529002704,"user_tz":-540,"elapsed":421503,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"a9487c5e-9f99-4126-c140-4685aa776b88"},"source":["fee = 0.0004\n","lvrg = 5\n","# lvrg = 2\n","\n","show_log = 0\n","\n","\n","# ------- ep set ------- #\n","entry_type = 'limit'\n","# entry_type = 'market'\n","\n","ep_gap = 1 / 4  # st_gap is critera\n","ep_gap = 0  # st_gap is critera\n","\n","ep_out_gap = 1 / 2\n","\n","ep_protect_gap = 1 / 4\n","\n","# ------- out set ------- #\n","price_protect = 1\n","\n","use_out = 1\n","static_out = 0\n","\n","# ------- tp set ------- #\n","non_tp = 0 # without tp set\n","\n","exit_type = 'limit'\n","# exit_type = 'market'\n","static_tp = 1\n","\n","tp_gap = 1 / 4  # st_gap is critera\n","tp_gap = 0  # st_gap is critera\n","\n","p_qty_divider = 1.5\n","\n","# ------- lvrg set ------- #\n","\n","static_lvrg = 1\n","target_pct = 0.05\n","\n","hl_lookback = 10\n","\n","\n","# ------- inversion set ------- #\n","inversion = 0\n","\n","if inversion:\n","  short_entry = [1, 2]\n","  long_entry = [-1, -2]\n","else:\n","  short_entry = [-1, -2]\n","  long_entry = [1, 2]\n","\n","  \n","tp_out_ratio = 0.7\n","\n","fdist_thresh = 1\n","\n","# ----------------- indicator ----------------- #\n","# ------- shift_size ------- #\n","cloud_shift_size = 1\n","sma_shift_size = 1\n","close_shift_size = 1\n","\n","\n","# ------- lb ------- #\n","# cloud_lookback = 30\n","cloud_lookback = 69\n","# cloud_lookback = 150\n","# cloud_lookback = 10\n","\n","sma_lookback = 100\n","# sma_lookback = 100\n","\n","sar_lookback = 5\n","\n","\n","# ------- indi. params ------- #\n","sma = 'sma1'\n","\n","# sma_period = 250\n","sma_period = 100\n","\n","fisher_upper = 1.5\n","fisher_lower = -1.5\n","\n","stoch_upper = 67\n","stoch_lower = 33\n","\n","cctbbo_upper = 80\n","cctbbo_lower = 20\n","\n","senkoua_list = ['senkou_a1', 'senkou_a2', 'senkou_a3', 'senkou_a4', 'senkou_a5']\n","senkoub_list = ['senkou_b1', 'senkou_b2', 'senkou_b3', 'senkou_b4', 'senkou_b5']\n","\n","pd.set_option('display.max_rows', 500)\n","pd.set_option('display.max_columns', 500)\n","pd.set_option('display.width', 1000)\n","\n","for key, res_df in res_df_dict.items():\n","\n","  print(key, \"loaded !\")\n","  # print(\"res_df.columns :\", res_df.columns)  \n","  # print(res_df.tail(100))\n","  # print(\"res_df.index[0] :\", res_df.index[0])\n","  # # print(\"intmin(res_df.index[0]) :\", intmin(res_df.index[0]))\n","  # break\n","\n","  # if 'eth'.upper() in key:\n","  #   pass\n","  # else:\n","  #   continue\n","\n","  # ------------------------- price lines ------------------------- #    \n","\n","  # --------------- 2nd middle --------------- #    \n","  res_df['upper_middle'] = (res_df['middle_line'] + res_df['min_upper']) / 2\n","  res_df['lower_middle'] = (res_df['middle_line'] + res_df['max_lower']) / 2\n","\n","  # --------------- outest middle --------------- #\n","  res_df['max_upper'] = np.max(res_df[[\"minor_ST1_Up\", \"minor_ST2_Up\", \"minor_ST3_Up\"]], axis=1)\n","  res_df['min_lower'] = np.min(res_df[[\"minor_ST1_Down\", \"minor_ST2_Down\", \"minor_ST3_Down\"]], axis=1)\n","\n","  # --------------- major middle --------------- #\n","  res_df['major_min_upper'] = np.min(res_df[[\"major_ST1_Up\", \"major_ST2_Up\", \"major_ST3_Up\"]], axis=1)\n","  res_df['major_max_lower'] = np.max(res_df[[\"major_ST1_Down\", \"major_ST2_Down\", \"major_ST3_Down\"]], axis=1)\n","\n","  res_df['major_middle_line'] = (res_df['major_min_upper'] + res_df['major_max_lower']) / 2\n","\n","  # --------------- major 2nd middle --------------- #    \n","  res_df['major_upper_middle'] = (res_df['major_middle_line'] + res_df['major_min_upper']) / 2\n","  res_df['major_lower_middle'] = (res_df['major_middle_line'] + res_df['major_max_lower']) / 2\n","\n","  res_df['st_gap'] = res_df['upper_middle'] - res_df['middle_line']\n","\n","\n","\n","  # --------------- nearest open & close ep --------------- #    \n","  # oc_max = np.max(res_df[['open', 'close']], axis=1)\n","  # oc_min = np.min(res_df[['open', 'close']], axis=1)\n","\n","  #   #      1. oc 와 비교할 대상 리스트 : mtf st lines (on & off)\n","  # comp_target_lines = ['minor_ST1_Up', 'minor_ST1_Down',\n","  #     'minor_ST2_Up', 'minor_ST2_Down', 'minor_ST3_Up', 'minor_ST3_Down',\n","  #     'middle_line', 'upper_middle', 'lower_middle']\n","\n","  #   #      2. short_ep -> oc 보다 크고 gap 은 최소인 line\n","  #   #      2-2 그런 ep 가 없을경우 진입하지 않음\n","  # short_col_values = res_df[comp_target_lines].values - oc_max.values.reshape(-1, 1) # target_lines cols 중, 양수 중 최소 index 찾기\n","  # short_ep = oc_max.copy()\n","\n","  # copy_short_col_values = short_col_values.copy()\n","  # for row_i in tqdm(range(len(short_col_values))):\n","\n","  #   if show_log:\n","  #     print(\"short_col_values[row_i] :\", short_col_values[row_i])\n","  #   copy_short_col_values[row_i] = np.where(short_col_values[row_i] < 0, np.inf, short_col_values[row_i])\n","    \n","  #   min_idx = np.argmin(copy_short_col_values[row_i])\n","  #   min_value = copy_short_col_values[row_i][min_idx]\n","  #   if show_log:\n","  #     print(\"copy_short_col_values[row_i] :\", copy_short_col_values[row_i])\n","  #     print(\"min_value :\", min_value)\n","  #     print()\n","    \n","  #   short_ep.iloc[row_i] = short_ep.iloc[row_i] + min_value\n","\n","  # long_col_values = oc_min.values.reshape(-1, 1) - res_df[comp_target_lines].values # target_lines cols 중, 양수 중 최소 index 찾기\n","  # long_ep = oc_min.copy()\n","\n","  # copy_long_col_values = long_col_values.copy()\n","  # for row_i in tqdm(range(len(long_col_values))):\n","\n","  #   if show_log:\n","  #     print(\"long_col_values[row_i] :\", long_col_values[row_i])\n","  #   copy_long_col_values[row_i] = np.where(long_col_values[row_i] < 0, np.inf, long_col_values[row_i])\n","    \n","  #   min_idx = np.argmin(copy_long_col_values[row_i])\n","  #   min_value = copy_long_col_values[row_i][min_idx]\n","  #   if show_log:\n","  #     print(\"copy_long_col_values[row_i] :\", copy_long_col_values[row_i])\n","  #     print(\"min_value :\", min_value)\n","  #     print()\n","    \n","  #   long_ep.iloc[row_i] = long_ep.iloc[row_i] - min_value\n","\n","  \n","  # --------------- st ep --------------- #    \n","  short_ep = res_df['middle_line']\n","  long_ep = res_df['middle_line']\n","\n","  # short_ep = res_df['middle_line'] - ep_gap * res_df['st_gap']\n","  # long_ep = res_df['middle_line'] + ep_gap * res_df['st_gap']\n","  \n","  # short_ep = res_df['min_upper'] - ep_gap * res_df['st_gap']\n","  # long_ep = res_df['max_lower'] + ep_gap * res_df['st_gap']\n","\n","\n","  # --------------- sar ep --------------- #    \n","  # short_ep = res_df['sar1'].shift(1)\n","  # long_ep = res_df['sar1'].shift(1)\n","\n","  # short_ep = (res_df['sar2'].shift(1) + res_df['sar2']) * 0.5\n","  # long_ep = (res_df['sar2'].shift(1) + res_df['sar2']) * 0.5\n","\n","\n","  # --------------- open close ep --------------- #    \n","  # short_ep = res_df['open'] * (1.037)\n","  # long_ep = res_df['open'] * (1 / 1.037)\n","\n","\n","\n","  for senkou_a, senkou_b in zip(senkoua_list, senkoub_list): \n","  # for sma4_period in range(5, 30, 2):\n","  # for sma4_period in range(13, 14, 2):\n","  # for cloud_lookback in np.arange(5, 100, 3):\n","\n","    # print(\"sma4_period :\", sma4_period)\n","    print(\"cloud_lookback :\", cloud_lookback)\n","\n","    # -------------------- additional indicators -------------------- #    \n","    senkou_a, senkou_b = 'senkou_a1', 'senkou_b1'\n","    \n","    cloud_top = np.max(res_df[[senkou_a, senkou_b]], axis=1)\n","    cloud_bottom = np.min(res_df[[senkou_a, senkou_b]], axis=1)\n","\n","    under_top = res_df['close'].shift(cloud_shift_size) <= cloud_top.shift(cloud_shift_size)\n","    over_top = res_df['close'].shift(cloud_shift_size) >= cloud_top.shift(cloud_shift_size)\n","\n","    over_bottom = res_df['close'].shift(cloud_shift_size) >= cloud_bottom.shift(cloud_shift_size)\n","    under_bottom = res_df['close'].shift(cloud_shift_size) >= cloud_bottom.shift(cloud_shift_size)\n","    \n","    # --------------- sma --------------- #    \n","    res_df['sma1'] = res_df['close'].rolling(sma_period).mean()  \n","\n","\n","    # --------------- stoch modification --------------- #    \n","    # res_df['stoch'] = stoch(res_df)\n","\n","    res_df['ema_roc'] = ema_roc(res_df['close'], 13, 9)\n","\n","    # # print(res_df['sma5'].tail())\n","\n","    # ------------------------------ htf data ------------------------------ #    \n","\n","    # fourth_df = pd.read_excel(date_path4 + key.replace(\"_4h1d_backi2\", \"\"), index_col=0)\n","    # fifth_df = pd.read_excel(date_path5 + key.replace(\"_majorst_backi2\", \"\"), index_col=0)\n","\n","    # --------------- htf sma --------------- #    \n","    # if \"sma4\" in res_df.columns:\n","    #   res_df.drop(\"sma4\", axis=1, inplace=True)\n","\n","    # fourth_df['sma'] = fourth_df['close'].rolling(sma4_period).mean()\n","    # res_df = res_df.join(pd.DataFrame(index=res_df.index, data=to_lower_tf(res_df, fourth_df, [-1]), columns=['sma4']))\n","\n","    # --------------- htf ema --------------- #    \n","    # fifth_df['ema'] = ema(fifth_df['close'], 4)\n","    # res_df = res_df.join(pd.DataFrame(index=res_df.index, data=to_lower_tf(res_df, fifth_df, [-1]), columns=['ema5']))\n","    \n","    \n","    # ---------------------------------------- short = -1 ---------------------------------------- #\n","\n","    # --------------- timestamp entry --------------- #    \n","    # entry = np.where((intmin(res_df.index) in [0, 30])\n","    #                       , -1, 0) \n","\n","    # --------------- ema_roc entry --------------- #\n","    entry = np.where((res_df['ema_roc'].shift(1) >= 0) & \n","                          (res_df['ema_roc'] < 0)\n","                          , -1, 0) \n","    \n","\n","    # --------------- st entry --------------- #\n","    # entry = np.where((res_df['close'].shift(1) <= short_ep) & \n","    #                       (res_df['high'] >= short_ep)\n","    #                       , -1, 0) \n","    # # entry = np.where((res_df['high'].shift(1) <= upper_middle) & \n","    # # entry = np.where((res_df['high'].shift(1) <= res_df['middle_line']) & \n","    # #                     (res_df['high'] >= short_ep)\n","    # #                     , -1, 0) \n","    \n","    # entry = np.where((res_df['close'].shift(1) > short_ep)\n","    #                   , -2, entry) \n","    \n","    # entry = np.where((res_df['close'].shift(1) >= short_ep) & \n","    #                 # (long_ep <= res_df['high']) & \n","    #                 (res_df['close'] <= short_ep)\n","    #                 , -1, 0) \n","\n","    # --------------- sar entry --------------- #\n","    # # entry = np.where((res_df['close'] <= res_df['sar2']) & \n","    # #                   (res_df['close'].shift(1) > res_df['sar2'].shift(1))\n","    # #                   , -1, 0) \n","    # entry = np.where((res_df['close'] <= res_df['sar2']) &\n","    #                  (res_df['low'].shift(1) > res_df['sar2'].shift(1)) &\n","    #                  (res_df['low'].shift(2) > res_df['sar2'].shift(2))\n","    #                   , -1, 0) \n","    # entry = np.where((res_df['sar1'].shift(1) > res_df['low']) & \n","    #                  (res_df['sar1'].shift(2) <= res_df['low'].shift(1))\n","    #                   , -1, 0) \n","      \n","      # --------------- sar pb line : 정확한 진입시점은 아니지만 pb line 의 기준이 댐 --------------- #\n","    # entry = np.where((res_df['sar2_uptrend'].shift(1) == 1) & \n","    #                  (res_df['sar2_uptrend'] == 0)\n","    #                   , -1, 0) \n","    # entry = np.where((res_df['sar2_uptrend'].shift(1) != res_df['sar2_uptrend']) & \n","    #                  (res_df['close'].shift(1) <= res_df['sma1'].shift(1)) &\n","    #                  (res_df['close'].shift(1) <= short_ep)   # close control\n","    #                   , -1, 0) \n","    \n","    # --------------- fisher entry --------------- #    \n","    # entry = np.where((res_df['fisher30'].shift(1) >= res_df['fisher30']) & \n","    #                   (res_df['fisher30'].shift(2) <= res_df['fisher30']).shift(1) &\n","    #                   (res_df['fisher30'].shift(1) >= fisher_upper)\n","    #                   , -1, 0) \n","\n","    # --------------- stoch entry --------------- #    \n","    # entry = np.where((res_df['stoch'].shift(1) <= stoch_upper) &\n","    #                   (res_df['stoch'] > stoch_upper)\n","    #                   , -1, 0) \n","\n","    # --------------- cctbbo entry --------------- #    \n","    # entry = np.where((res_df['cctbbo'].shift(1) >= res_df['cctbbo']) & \n","    #                   (res_df['cctbbo'].shift(2) <= res_df['cctbbo']).shift(1) &\n","    #                   (res_df['cctbbo'].shift(1) >= cctbbo_upper)\n","    #                   , -1, 0) \n","\n","    # --------------- cloud entry --------------- #\n","    # cloud_bottom = np.min(res_df[[senkou_a, senkou_b]], axis=1)\n","\n","    # entry = np.where((res_df['close'] < cloud_bottom) & \n","    #                   (res_df['close'].shift(1) >= cloud_bottom.shift(1))\n","    #                   , -1, 0) \n","\n","\n","\n","    # ---------------------------------------- long = 1 ---------------------------------------- #\n","    \n","    # --------------- timestamp entry --------------- #    \n","    # entry = np.where((np.array(intmin(res_df.index)) in [0, 30])\n","    \n","    # int_min_ts = np.array(list(map(lambda x :intmin(x), res_df.index)))\n","    # # entry = np.where((intmin(res_df.index) == 0)\n","    # entry = np.where((int_min_ts == 0) | (int_min_ts == 30)\n","    #                       , 1, 0)\n","\n","    # print(\"int_min_ts :\", int_min_ts)\n","    # print(\"entry :\", entry)\n","    # break\n","\n","    \n","    # --------------- ema_roc entry --------------- #\n","    entry = np.where((res_df['ema_roc'].shift(1) <= 0) & \n","                          (res_df['ema_roc'] > 0)\n","                          , 1, entry) \n","    \n","    \n","    # --------------- st entry --------------- #    \n","    # entry = np.where((res_df['close'].shift(1) >= long_ep) & \n","    #                   (res_df['low'] <= long_ep)\n","    #                   , 1, entry) \n","    # # entry = np.where((res_df['low'].shift(1) >= lower_middle) & \n","    # # entry = np.where((res_df['low'].shift(1) >= res_df['middle_line']) & \n","    # #                   (res_df['low'] <= long_ep)\n","    # #                   , 1, entry) \n","\n","    # entry = np.where((res_df['close'].shift(1) < long_ep)\n","    #                   , 2, entry) \n","      \n","    # entry = np.where((res_df['close'].shift(1) <= long_ep) & \n","    #                   # (long_ep <= res_df['high']) & \n","    #                   (res_df['close'] >= long_ep)\n","    #                   , 1, entry) \n","\n","    # --------------- sar entry --------------- #\n","    # # entry = np.where((res_df['close'] >= res_df['sar2']) & \n","    # #                   (res_df['close'].shift(1) < res_df['sar2'].shift(1))\n","    # #                   , 1, entry) \n","    # --------------- sar pb line : 정확한 진입시점은 아니지만 pb line 의 기준이 댐 --------------- #\n","    # entry = np.where((res_df['sar2_uptrend'].shift(1) == 0) & \n","    #                  (res_df['sar2_uptrend'] == 1)\n","    #                   , 1, entry) \n","    # entry = np.where((res_df['sar2_uptrend'].shift(1) != res_df['sar2_uptrend']) & \n","    #                  (res_df['close'].shift(1) >= res_df['sma1'].shift(1)) &\n","    #                  (res_df['close'].shift(1) >= long_ep)   # close control\n","    #                   , 1, entry) \n","\n","    # #       lb sar 이 high 보다 커야함      #     \n","    # entry = np.where((res_df['close'] >= res_df['sar2']) & \n","    #                  (res_df['high'].shift(1) < res_df['sar2'].shift(1)) & \n","    #                  (res_df['high'].shift(2) < res_df['sar2'].shift(2))\n","    #                   , 1, entry)\n","    # entry = np.where((res_df['sar1'].shift(1) < res_df['high']) &\n","    #                  (res_df['sar1'].shift(2) >= res_df['high'].shift(1))\n","    #                   , 1, entry) \n","    \n","    # --------------- fisher entry --------------- #        \n","    # entry = np.where((res_df['fisher30'].shift(1) <= res_df['fisher30']) & \n","    #                   (res_df['fisher30'].shift(2) >= res_df['fisher30']).shift(1) &\n","    #                   (res_df['fisher30'].shift(1) <= fisher_lower)\n","    #                   , 1, entry)\n","\n","    \n","    # --------------- stoch entry --------------- #    \n","    # entry = np.where((res_df['stoch'].shift(1) >= stoch_lower) &\n","    #                   (res_df['stoch'] < stoch_lower)\n","    #                  , 1, entry)\n","  \n","    # --------------- cctbbo entry --------------- #        \n","    # entry = np.where((res_df['cctbbo'].shift(1) <= res_df['cctbbo']) & \n","    #                   (res_df['cctbbo'].shift(2) >= res_df['cctbbo']).shift(1) &\n","    #                   (res_df['cctbbo'].shift(1) <= cctbbo_lower)\n","    #                   , 1, entry)\n","\n","\n","    # --------------- cloud entry --------------- #\n","    # cloud_top = np.max(res_df[[senkou_a, senkou_b]], axis=1)\n","\n","    # entry = np.where((res_df['close'] > cloud_top) & \n","    #                   (res_df['close'].shift(1) <= cloud_top.shift(1))\n","    #                   , 1, entry)\n","\n","    # print(\"len(entry) :\", len(entry))\n","    # print(\"np.sum(entry == -1) :\", np.sum(entry == -1))\n","    # print(\"np.sum(entry == 1) :\", np.sum(entry == 1))\n","    # break\n","    \n","\n","\n","\n","    #       1-2. tp line = middle line 조금 이내         #    \n","    # --------------- gap range tp --------------- #\n","    # gap_range = 0.5\n","    # gap_range = 1\n","\n","    # short_out = res_df['high'].rolling(hl_lookback).max()\n","    # long_out = res_df['low'].rolling(hl_lookback).min()\n","\n","    # short_tp = res_df['close'] - gap_range * (short_out - res_df['close'])\n","    # long_tp = res_df['close'] + gap_range * (res_df['close'] - long_out)\n","\n","    # --------------- st limit tp & out --------------- #\n","\n","    # short_tp = res_df['middle_line'] - tp_gap * res_df['st_gap']\n","    # long_tp = res_df['middle_line'] + tp_gap * res_df['st_gap']\n","    \n","    # short_tp = res_df['middle_line']\n","    # long_tp = res_df['middle_line']\n","    \n","    # short_tp = res_df['lower_middle'] - tp_gap * res_df['st_gap']\n","    # long_tp = res_df['upper_middle'] + tp_gap * res_df['st_gap']\n","    \n","    short_tp = res_df['min_lower']\n","    long_tp = res_df['max_upper']\n","\n","    # short_tp = res_df['close'] - (res_df['middle_line'] - res_df['close']) * tp_out_ratio\n","    # long_tp = res_df['close'] + (res_df['close'] - res_df['middle_line']) * tp_out_ratio\n","    \n","    # short_tp2 = res_df['middle_line'] - tp_gap * res_df['st_gap']\n","    # long_tp2 = res_df['middle_line'] + tp_gap * res_df['st_gap']\n","\n","    short_out = res_df['upper_middle']\n","    long_out = res_df['lower_middle']\n","    \n","    # short_out = short_ep + res_df['st_gap']\n","    # long_out = long_ep - res_df['st_gap']\n","\n","    # --------------- sar limit tp & out --------------- #\n","    # short_tp = res_df['sar2'].shift(1) - abs(res_df['sar2'] - res_df['sar2'].shift(1)) * 0.5\n","    # long_tp = res_df['sar2'].shift(1) + abs(res_df['sar2'] - res_df['sar2'].shift(1)) * 0.5\n","\n","    # short_tp2 = res_df['sar2'].shift(1)\n","    # long_tp2 = res_df['sar2'].shift(1)\n","\n","    # short_tp = short_ep - abs(res_df['sar2'] - res_df['sar2'].shift(1)) * 0.5\n","    # long_tp = long_ep + abs(res_df['sar2'] - res_df['sar2'].shift(1)) * 0.5\n","\n","    # short_out = res_df['sar2']\n","    # long_out = res_df['sar2']\n","\n","    # short_out = short_ep + abs(res_df['sar2'] - res_df['sar2'].shift(1)) * 0.5\n","    # long_out = long_ep - abs(res_df['sar2'] - res_df['sar2'].shift(1)) * 0.5\n","    \n","\n","    # --------------- set partial tp --------------- #\n","\n","    short_tps = [short_tp]\n","    long_tps = [long_tp]\n","\n","    # short_tps = [short_tp2]\n","    # long_tps = [long_tp2]\n","\n","    # short_tps = [short_tp2, short_tp] # org\n","    # long_tps = [long_tp2, long_tp]\n","    \n","    # short_tps = [short_tp, short_tp2]\n","    # long_tps = [long_tp, long_tp2]\n","\n","\n","\n","    #       trading : 여기도 체결 결과에 대해 묘사함       #\n","    trade_list = []\n","    h_trade_list = []\n","    lvrg_list = []\n","    open_list = []\n","\n","    tp_ratio_list = []\n","    short_tp_ratio_list = []\n","    long_tp_ratio_list = []\n","\n","    liqd_list = []\n","    short_liqd_list = []\n","    long_liqd_list = []\n","\n","    nontp_liqd_list = []\n","    nontp_short_liqd_list = []\n","    nontp_long_liqd_list = []\n","\n","    nontp_pr_list = []\n","    nontp_short_pr_list = []\n","    nontp_long_pr_list = []\n","\n","    nontp_short_indexs = []\n","    nontp_long_indexs = []\n","\n","    nontp_short_ep_list = []\n","    nontp_long_ep_list = []\n","\n","    pr_list = []\n","    long_list = []\n","    short_list = []\n","\n","    h_pr_list = []\n","    h_long_list = []\n","    h_short_list = []\n","\n","    ep_tp_list = []\n","    h_ep_tp_list = []\n","    tp_state_list = []\n","\n","    i = 0\n","    while 1:\n","    # for i in range(len(res_df)):        \n","\n","      if entry[i] in short_entry: \n","\n","        initial_i = i\n","\n","\n","        # -------------- ep scheduling -------------- #\n","        # # if  (res_df['close'].iloc[i] <= lower_middle.iloc[i]):\n","        # if abs(res_df['close'].iloc[i] - short_ep.iloc[i]) < ep_protect_gap * res_df['st_gap'].iloc[i]:\n","        # if res_df['close'].iloc[i] > short_ep.iloc[i] + ep_protect_gap * 3 * res_df['st_gap'].iloc[i]:\n","        # # if abs((res_df['close'].iloc[i] - upper_middle.iloc[i]) / upper_middle.iloc[i]) < ep_protect_gap:\n","        # # if abs((res_df['close'].iloc[i] - res_df['middle_line'].iloc[i]) / res_df['middle_line'].iloc[i]) < ep_protect_gap:\n","        #   pass\n","        # else:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","        # -------------- distance protection -------------- #\n","        # tp_dist = (res_df['close'].iloc[i] - short_tp.iloc[i])\n","        # out_dist = (res_df['middle_line'].iloc[i] - res_df['close'].iloc[i])\n","        # if tp_dist / out_dist >= tp_out_ratio:\n","        #   pass\n","        # else:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","        # -------------- feature dist const. -------------- #\n","        # if initial_i < input_size:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","        # entry_input_x = min_max_scale(res_df[selected_price_colname].iloc[initial_i - input_size:initial_i].values)\n","       \n","        # re_entry_input_x = expand_dims(entry_input_x)\n","\n","        # entry_vector = model.predict(re_entry_input_x, verbose=0)\n","        # # print(test_result.shape)\n","\n","        # f_dist = vector_dist(entry_vector, selected_vector)\n","        # print(\"f_dist :\", f_dist)\n","\n","        # if f_dist < fdist_thresh:\n","        #   pass\n","        # else:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","        # -------------- htf data const. -------------- #\n","        # i_min = intmin(res_df.index[i]) # 2020-09-05 00:00:59.999000\n","        # if i_min >= 30:\n","        #   htf_ts = str(res_df.index[i])[:-12] + \"59:59.999000\"\n","        # else:\n","        #   htf_ts = str(res_df.index[i])[:-12] + \"29:59.999000\"\n","          \n","        #   # -------------- ema -------------- #\n","        # if fifth_df['close'].shift(1).loc[htf_ts] < fifth_df['ema'].shift(1).loc[htf_ts]:\n","        #   pass\n","        # else:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue         \n","        \n","\n","\n","        # -------------- fisher const. -------------- #\n","        # if res_df['fisher30'].shift(1).iloc[i] < 0:\n","        # if res_df['fisher60'].shift(1).iloc[i] < 0:\n","        # if res_df['fisher120'].shift(1).iloc[i] < 0:\n","        #   pass\n","        # else:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","\n","        # -------------- ma const. -------------- #\n","        # ------- ema const. ------- #\n","        # if res_df['close'].shift(0).iloc[i] < res_df['ema5'].shift(0).iloc[i]: # and \\\n","        # if res_df['close'].shift(1).iloc[i] < res_df['ema5'].shift(1).iloc[i]: # and \\\n","        # if res_df['close'].shift(1).iloc[i] < res_df['ema5'].shift(0).iloc[i]: # and \\\n","        # if short_ep.iloc[i] < res_df['ema5'].shift(0).iloc[i]: # and \\\n","\n","        # ------- sma const. ------- #\n","        # # if res_df['close'].iloc[i] < res_df[sma].iloc[i]: # and \\\n","        # if res_df['close'].shift(1).iloc[i] < res_df['sma1'].shift(1).iloc[i]: # and \\\n","        # #   short_ep.iloc[i] <= res_df['sma1'].shift(sma_shift_size).iloc[i]:\n","        # # # under_sma = short_ep <= res_df['sma'].shift(sma_shift_size)\n","        # # # if np.sum(under_sma.iloc[i + 1 - sma_lookback:i + 1]) == sma_lookback:\n","        #   pass\n","        # else:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","        # -------------- 1d sma const. -------------- #\n","        # if res_df[sma].iloc[i] >= res_df['close'].iloc[i]:\n","        #   pass\n","        # else:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","\n","        # -------------- cloud lb const.-------------- #   \n","        # if i < cloud_lookback:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","        # if np.sum(under_top.iloc[i + 1 - cloud_lookback:i + 1]) == cloud_lookback:\n","        # # if np.sum(under_bottom.iloc[i + 1 - cloud_lookback:i + 1]) == cloud_lookback:\n","        # # if np.sum(over_top.iloc[i + 1 - cloud_lookback:i + 1]) == cloud_lookback:\n","        # # if np.sum(under_top.iloc[i - cloud_lookback:i]) == cloud_lookback:\n","        #   pass\n","\n","        # else:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","\n","        # -------------- cloud color const.-------------- #\n","        #               1. senkou_a1 < senkou_b1            #\n","        #               1-1. mutli clouds color 충분히 고려               #        \n","        # if i < cloud_lookback:        \n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","        # if np.sum(res_df[senkou_a].shift(cloud_shift_size).iloc[i + 1 - cloud_lookback:i + 1] <= res_df[senkou_b].shift(cloud_shift_size).iloc[i + 1 - cloud_lookback:i + 1]) == cloud_lookback and \\\n","        #   np.sum(res_df[\"senkou_a2\"].shift(0).iloc[i + 1 - cloud_lookback:i + 1] <= res_df[\"senkou_b2\"].shift(0).iloc[i + 1 - cloud_lookback:i + 1]) == cloud_lookback: # and \\\n","        #   # np.sum(res_df[\"senkou_a3\"].shift(0).iloc[i + 1 - cloud_lookback:i + 1] <= res_df[\"senkou_b3\"].shift(0).iloc[i + 1 - cloud_lookback:i + 1]) == cloud_lookback and \\\n","        #   # np.sum(res_df[\"senkou_a4\"].shift(0).iloc[i + 1 - cloud_lookback:i + 1] <= res_df[\"senkou_b4\"].shift(0).iloc[i + 1 - cloud_lookback:i + 1]) == cloud_lookback and \\\n","        #   # np.sum(res_df[\"senkou_a5\"].shift(0).iloc[i + 1 - cloud_lookback:i + 1] <= res_df[\"senkou_b5\"].shift(0).iloc[i + 1 - cloud_lookback:i + 1]) == cloud_lookback:\n","        #   pass\n","        # else:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","\n","\n","        # -------------- st color const.-------------- #\n","        # if np.sum(res_df[['minor_ST1_Trend', 'minor_ST2_Trend', 'minor_ST3_Trend']].iloc[i]) <= -1:\n","        # if np.sum(res_df[['minor_ST1_Trend', 'minor_ST2_Trend', 'minor_ST3_Trend']].iloc[i]) <= -3:\n","        #   pass\n","        # else:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","        # -------------- htf st color const.-------------- #\n","        # if np.sum(res_df[['major_ST1_Trend', 'major_ST2_Trend', 'major_ST3_Trend']].iloc[i]) <= -1:\n","        # # if np.sum(res_df[['major_ST1_Trend', 'major_ST2_Trend', 'major_ST3_Trend']].iloc[i]) <= -3:\n","        #   pass\n","        # else:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","        # -------------- 3rd st const. : st should have 2, 3 or more -------------- #\n","        # if np.sum(res_df[['minor_ST2_Trend', 'minor_ST3_Trend']].iloc[i]) <= -2:\n","        #   pass\n","        # else:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","        # -------------- sar const. -------------- #\n","        # if res_df['sar1'].iloc[i] > res_df['high'].iloc[i]:\n","        # # if res_df['sar2'].iloc[i] > res_df['high'].iloc[i] and res_df['sar3'].iloc[i] > res_df['high'].iloc[i]:\n","        # # if res_df['sar2'].iloc[i] > res_df['high'].iloc[i]: # and \\\n","        # # if  res_df['sar3'].iloc[i] > res_df['high'].iloc[i]:\n","        #   pass\n","        # else:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","\n","        # -------------- limit waiting const. -------------- #\n","        entry_done = False\n","        prev_sar = None\n","        # for e_j in range(i, len(res_df)):\n","        for e_j in range(i + 1, len(res_df)): # entry signal이 close 기준 일 경우\n","\n","          #             Todo            #\n","          #             1. ep 설정 \n","\n","          # -------------- np.inf ep -------------- #\n","          # if short_ep.iloc[initial_i] == np.inf:\n","          #   break\n","\n","          #             1-1. close 가 sar_change 이전 sar 을 cross 한 경우만 진입\n","\n","          #             1-0. ep touch, entry_done       #\n","          # if res_df['high'].iloc[e_j] >= short_ep.iloc[initial_i] and res_df['close'].shift(1).iloc[e_j] <= short_ep.iloc[initial_i]:\n","          if res_df['high'].iloc[e_j] >= short_ep.iloc[initial_i] and res_df['close'].shift(1).iloc[e_j] >= short_out.iloc[initial_i] - res_df['st_gap'].iloc[initial_i] * ep_out_gap:\n","          # if res_df['high'].iloc[e_j] >= short_ep.iloc[initial_i] and res_df['close'].shift(1).iloc[e_j] <= short_out.iloc[initial_i] - res_df['st_gap'].iloc[initial_i] * ep_out_gap: # --> 이게 의도한거자나\n","          # if res_df['high'].iloc[e_j] >= short_ep.iloc[initial_i]:\n","            entry_done = True\n","            # print(\"res_df['high'].iloc[e_j] :\", res_df['high'].iloc[e_j])\n","            # print(\"e_j :\", e_j)\n","\n","            #     이미, e_j open 이 ep 보다 높은 경우, entry[initial_i] => -2 로 변경   #\n","            if res_df['open'].iloc[e_j] >= short_ep.iloc[initial_i]:\n","              entry[initial_i] = -2\n","\n","            break\n","\n","          #             2. limit 대기 시간 설정\n","          #             2-1. tp 조건이 성립되는 경우 limit 취소\n","          # -------------- st tp -------------- #\n","          if res_df['low'].iloc[e_j] <= short_tp.iloc[initial_i]:\n","            break\n","\n","\n","          # -------------- period fishing -------------- #\n","          # if intmin(res_df.index[e_j]) in [29, 59]:\n","          #   break\n","          \n","          # -------------- sar pbline -------------- #\n","          # if res_df['low'].iloc[e_j] <= short_tp.iloc[initial_i]:          \n","          #   break\n","\n","          #             2-2. out 조건이 성립되는 경우 limit 취소   \n","          # -------------- st out -------------- #\n","          if res_df['close'].iloc[e_j] > short_out.iloc[e_j]:\n","            break\n","\n","          # -------------- roc out -------------- #\n","          # if entry[e_j] == 1:\n","          #   break\n","          \n","\n","          # -------------- stoch -------------- #\n","          # if res_df['stoch'].iloc[e_j - 2] >= res_df['stoch'].iloc[e_j - 1] and \\\n","          #   res_df['stoch'].iloc[e_j - 1] < res_df['stoch'].iloc[e_j] and \\\n","          #   res_df['stoch'].iloc[e_j - 1] <= stoch_lower:\n","          #   break\n","\n","          # -------------- sar out -------------- #\n","          # if res_df['close'].iloc[e_j] > res_df['middle_line'].iloc[e_j]:\n","          # if res_df['close'].iloc[e_j] > short_out.iloc[initial_i]:\n","          #   break\n","          \n","          # -------------- sar prevsar out -------------- #\n","          # if res_df['sar2_uptrend'].iloc[e_j] == 1:\n","\n","          #   if prev_sar is None:\n","          #     prev_sar = res_df['sar2'].iloc[e_j - 1]\n","            \n","          #   if res_df['close'].iloc[e_j] > prev_sar:\n","          #     break\n","\n","          # else:\n","          #   if res_df['close'].iloc[e_j] > res_df['sar2'].iloc[e_j]:\n","          #     break\n","            \n","          # if res_df['close'].iloc[e_j] > res_df['middle_line'].iloc[e_j]:\n","          # if res_df['close'].iloc[e_j] > short_out.iloc[initial_i]: # or \\\n","          #   # res_df['sar2_uptrend'].iloc[e_j] == 1: # or \\\n","\n","          # # if res_df['close'].iloc[e_j] > res_df['sar2'].iloc[e_j]:\n","          #   break\n","\n","        i = e_j\n","        # print(\"i = e_j :\", i)\n","\n","        if entry_done:\n","          pass\n","        else:\n","          i += 1\n","          if i >= len(res_df):\n","            break\n","          continue\n","\n","        # ----------------- end wait ----------------- #\n","\n","        # print(\"initial_i :\", initial_i)\n","        # print()\n","\n","        open_list.append(initial_i)\n","        \n","        if entry_type is 'market':\n","          try:\n","            ep_list = [res_df['close'].iloc[e_j]]\n","          except Exception as e:\n","            # print('error in ep_list (initial) :', e)\n","            ep_list = [res_df['close'].iloc[initial_i]]\n","        else:          \n","          if entry[initial_i] == -1:\n","            ep_list = [short_ep.iloc[initial_i]]\n","          else:\n","            #   e_j 가 있는 경우, \n","            try:\n","              ep_list = [res_df['open'].iloc[e_j]]\n","            except Exception as e:\n","              ep_list = [res_df['open'].iloc[initial_i]]\n","\n","        if not static_lvrg:\n","          # lvrg = target_pct / (res_df['high'].rolling(hl_lookback).max().iloc[initial_i] / res_df['close'].iloc[initial_i] - 1)\n","          lvrg = target_pct / (short_out.iloc[initial_i] / short_ep.iloc[initial_i] - 1 - fee)\n","          lvrg = int(min(50, lvrg))\n","          lvrg = max(lvrg, 1)\n","          lvrg_list.append(lvrg)\n","\n","        try:\n","          ep_idx_list = [e_j]\n","        except Exception as e:\n","          # print('error in ep_idx_list :', e)        \n","          ep_idx_list = [initial_i]\n","\n","        tp_list = []\n","        tp_idx_list = []\n","\n","        partial_tp_cnt = 0\n","        hedge_cnt = 1\n","\n","        h_ep, h_tp = None, None\n","        h_i, h_j = None, None\n","        \n","        trade_done = False\n","        \n","        for j in range(i + 1, len(res_df)):\n","        # for j in range(i, len(res_df)):\n","          \n","          if static_tp:\n","            tp_j = initial_i\n","          else:\n","            tp_j = j\n","\n","          if static_out:\n","            out_j = initial_i\n","          else:\n","            out_j = j\n","\n","\n","          # -------------- sub ep -------------- #\n","          # if res_df['high'].iloc[j - 1] <= res_df['sar2'].iloc[j - 1] and res_df['high'].iloc[j] > res_df['sar2'].iloc[j]:\n","            \n","          #   sub_ep = res_df['sar2'].iloc[j - 1]\n","\n","          #   if sub_ep < ep_list[-1]:\n","          #     ep_list.append(sub_ep)\n","          #     ep_idx_list.append(j)\n","\n","          \n","          # -------------- hedge only once -------------- #\n","          #             일단, h_quantity 는 초기 진입과 동일하게 설정         #\n","          # if res_df['high'].iloc[j] >= res_df['minor_ST2_Up'].iloc[j] and hedge_cnt == 1:\n","          # if res_df['close'].iloc[j] >= res_df['minor_ST2_Up'].iloc[j] and hedge_cnt == 1:\n","          # if res_df['close'].iloc[j] >= res_df['minor_ST3_Up'].iloc[j] and hedge_cnt == 1:\n","\n","          #   h_ep = res_df['close'].iloc[j]\n","          #   hedge_cnt -= 1\n","          #   h_i = j\n","\n","\n","          # -------------- ultimate limit tp -------------- #\n","          if not non_tp:\n","\n","            #               1. by price line             #\n","            if exit_type != 'market':\n","\n","              for s_i, short_tp_ in enumerate(short_tps):\n","\n","                if res_df['low'].iloc[j] <= short_tp_.iloc[tp_j] and partial_tp_cnt == s_i: # we use static tp now\n","                # if res_df['low'].iloc[j] <= short_tp_.iloc[j]:\n","                # if res_df['low'].iloc[j] <= short_tp_.iloc[j] <= res_df['high'].iloc[j]: --> 이건 잘못되었음\n","\n","                  if s_i == len(short_tps) - 1:\n","                    trade_done = True\n","                  \n","                  partial_tp_cnt += 1\n","\n","                  #         dynamic tp        #\n","                  # if 0:\n","                  if short_tp_.iloc[j] != short_tp_.iloc[j - 1] and not static_tp:\n","\n","                    #   tp limit 이 불가한 경우 = open 이 이미, tp 를 넘은 경우 # \n","                    # if res_df['open'].iloc[j] < short_tp_.iloc[initial_i]:\n","                    if res_df['open'].iloc[j] < short_tp_.iloc[j]:\n","\n","                      # tp = short_tp_.iloc[initial_i]\n","                      tp = res_df['open'].iloc[j]\n","\n","                      if trade_done:\n","                        tp_state_list.append(\"d-short_open\")\n","\n","                    #   tp limit 이 가능한 경우 = open 이 아직, tp 를 넘지 않은 경우 # \n","                    else:\n","\n","                      # tp = short_tp_.iloc[initial_i]\n","                      tp = short_tp_.iloc[j]\n","                      # tp = res_df['open'].iloc[j]\n","\n","                      if trade_done:\n","                        tp_state_list.append(\"d-short_tp\")\n","\n","                  #         static tp         #\n","                  else:\n","                    \n","                    #   tp limit 이 불가한 경우 = open 이 이미, tp 를 넘은 경우 # \n","                    #   non_inversion 의 경우, short_tp 가 가능함   #              \n","\n","                    # if res_df['open'].iloc[j] < short_tp_.iloc[initial_i]:\n","                    if res_df['open'].iloc[j] < short_tp_.iloc[tp_j]:\n","\n","                      # tp = short_tp_.iloc[initial_i]\n","                      tp = short_tp_.iloc[tp_j]\n","\n","                      # tp = res_df['open'].iloc[j]\n","\n","                      if trade_done:\n","                        tp_state_list.append(\"s-short_tp\")\n","\n","                    #   tp limit 이 가능한 경우 = open 이 아직, tp 를 넘지 않은 경우 # \n","                    else:\n","\n","                      # tp = short_tp_.iloc[initial_i]\n","                      tp = short_tp_.iloc[tp_j]\n","\n","                      # tp = res_df['open'].iloc[j]\n","\n","                      if trade_done:\n","                        tp_state_list.append(\"s-short_tp\")   \n","\n","                  tp_list.append(tp)     \n","                  tp_idx_list.append(j)\n","\n","            #           2. by signal        #\n","            else:\n","\n","              # -------------- sar tp -------------- #\n","              # if (res_df['high'].iloc[j] >= res_df['sar2'].iloc[j]) & \\\n","              #   (res_df['high'].iloc[j - 1] < res_df['sar2'].iloc[j - 1]) & \\\n","              #   (res_df['high'].iloc[j - 2] < res_df['sar2'].iloc[j - 2]):\n","\n","              #       inversion     #\n","              # if (res_df['low'].iloc[j] <= res_df['sar2'].iloc[j]) & \\\n","              #   (res_df['low'].iloc[j - 1] > res_df['sar2'].iloc[j - 1]) & \\\n","              #   (res_df['low'].iloc[j - 2] > res_df['sar2'].iloc[j - 2]):\n","              \n","              # -------------- sar pb tp -------------- #\n","              if res_df['low'].iloc[j] <= short_tp.iloc[initial_i]:\n","\n","              # -------------- st tp -------------- #\n","              # if res_df['close'].iloc[j] > res_df['middle_line'].iloc[j]:       \n","\n","              # -------------- fisher tp -------------- #            \n","              # if entry[j] == 1:\n","\n","              # -------------- timestamp tp -------------- #            \n","              # if intmin(res_df.index[j]) in [29, 59]:\n","                \n","                tp = res_df['close'].iloc[j]\n","                # tp = res_df['open'].iloc[j]\n","                trade_done = True\n","\n","                if trade_done:\n","                  tp_state_list.append(\"short close tp\")\n","\n","                tp_list.append(tp) \n","                tp_idx_list.append(j)\n","\n","                  \n","          # -------------- out -------------- #\n","          if not trade_done and use_out:\n","            out = False\n","\n","            # -------------- macd -------------- #\n","            # if res_df['macd_hist3'].iloc[j] > 0:  #  macd out\n","            # if res_df['macd_hist3'].iloc[i] < 0 and res_df['macd_hist3'].iloc[j] > 0:\n","\n","            # -------------- st -------------- #\n","            # if res_df['close'].iloc[j] > res_df['middle_line'].iloc[j]:    \n","            # if res_df['close'].iloc[j] > res_df['minor_ST3_Up'].iloc[j]:\n","            # if res_df['close'].iloc[j] > upper_middle.iloc[j]:\n","            # if res_df['close'].iloc[j] > res_df['minor_ST1_Up'].iloc[j]:\n","            if res_df['close'].iloc[j] > short_out.iloc[out_j]:\n","              out = True\n","\n","            # -------------- sma -------------- #\n","            # if res_df['close'].iloc[j] > res_df[sma].iloc[j]:\n","\n","            # -------------- sar -------------- #\n","            # if res_df['close'].iloc[j] > res_df['minor_ST3_Up'].iloc[j] \\\n","            #   or res_df['sar2'].iloc[j] <= res_df['high'].iloc[j]:\n","            # if res_df['close'].iloc[j] > short_out.iloc[initial_i]: # or \\\n","            #   out = True\n","              # res_df['sar2_uptrend'].iloc[j] == 1: # or \\\n","\n","            # if res_df['sar2_uptrend'].iloc[j] == 1:\n","\n","            #   if prev_sar is None:\n","            #     prev_sar = res_df['sar2'].iloc[j - 1]\n","              \n","            #   if res_df['close'].iloc[j] > prev_sar:\n","            #     out = True\n","\n","            # else:\n","            #   if res_df['close'].iloc[j] > res_df['sar2'].iloc[j]:\n","            #     out = True\n","              \n","            # -------------- hl -------------- #\n","            # if res_df['close'].iloc[j] > short_out.iloc[tp_j]:\n","            \n","            # -------------- stoch -------------- #\n","            # if res_df['stoch'].iloc[j - 2] >= res_df['stoch'].iloc[j - 1] and \\\n","            #   res_df['stoch'].iloc[j - 1] < res_df['stoch'].iloc[j] and \\\n","            #   res_df['stoch'].iloc[j - 1] <= stoch_lower:\n","            #   out = True\n","\n","            if out:\n","\n","              if price_protect:\n","                tp = short_out.iloc[out_j]\n","              else:\n","                tp = res_df['close'].iloc[j]\n","\n","              # tp = res_df['open'].iloc[j]\n","              trade_done = True\n","              tp_state_list.append(\"short close_out\")\n","            \n","\n","              tp_list.append(tp) \n","              tp_idx_list.append(j)\n","\n","\n","          # -------------- non tp -------------- #\n","          if j == len(res_df) - 1:\n","            trade_done = True\n","            tp = res_df['close'].iloc[j]\n","            tp_list.append(tp) \n","            tp_idx_list.append(j)\n","          \n","\n","\n","          # -------------- append trade data -------------- #\n","          if trade_done:\n","\n","            # --------------- tp_ratio info --------------- #\n","            #         Todo        #\n","            #          short_out 에 대한 정보는 존재함,\n","            #          short_tp 에 대한 정보는 존재함,\n","            #       => initial_i 기준으로 ,dynamic | static set 을 tp 와 out 에 각각 적용\n","            #          lvrg 는 initial_i 기준으로 적용되니까\n","            #          적용된 tp & out 으로 abs((tp - ep) / (ep - out)) 계산\n","            try:\n","              done_tp = short_tp.iloc[initial_i]\n","              done_out = short_out.iloc[initial_i]\n","\n","              if done_out <= ep_list[0]: # loss > 1\n","                tp_ratio = np.nan\n","              else:\n","                tp_ratio = abs((ep_list[0] - done_tp) / (ep_list[0] - done_out))\n","\n","              tp_ratio_list.append(tp_ratio)\n","              short_tp_ratio_list.append(tp_ratio)\n","\n","            except Exception as e:\n","              pass            \n","\n","\n","            # -------------------- partial tp -------------------- #\n","            #        1. len(tp_list) 에 대응하는 qty_list 를 만들어야함    #\n","            #        2. temp_pr_list 를 만들어 총합 + 1 을 pr_list 에 저장      #\n","            #        2-1. temp_pr = sum((ep / tp_list[i] - fee - 1) * qty_list[i])   #\n","            #        3. temp_pr_list 의 첫 tp 에는 r_qty 를 할당함        #\n","            qty_list = []\n","            temp_pr_list = []\n","            r_qty = 1\n","            for q_i in range(len(tp_list) - 1, -1, -1):\n","\n","              if len(tp_list) == 1:\n","                temp_qty = r_qty\n","              else:\n","                if q_i !=0:\n","                  temp_qty = r_qty / p_qty_divider\n","                else:\n","                  temp_qty = r_qty\n","\n","              temp_pr = (ep_list[0] / tp_list[q_i] - fee - 1) * temp_qty * lvrg\n","              # temp_pr = (ep_list[0] / tp_list[q_i] - fee - 1) * temp_qty\n","              r_qty -= temp_qty\n","\n","              temp_pr_list.append(temp_pr)\n","              qty_list.append(temp_qty)\n","\n","            # if len(temp_pr_list) == 1:\n","            #   print(\"qty_list :\", qty_list)\n","            #   print(\"temp_pr_list :\", temp_pr_list)\n","\n","            temp_pr = sum(temp_pr_list) + 1\n","\n","            # -------------------- sub ep -> pr calc -------------------- #\n","            if len(ep_list) > 1:\n","            \n","              p_ep_pr = []\n","              for sub_ep_ in ep_list:\n","                sub_pr = (sub_ep_ / tp - fee - 1) * lvrg\n","                p_ep_pr.append(sub_pr)\n","\n","              temp_pr = sum(p_ep_pr) + 1\n","\n","              print(\"temp_pr :\", temp_pr)\n","\n","            # ------------ hedge + non_hedge pr summation ------------ #\n","            #         hedge pr direction is opposite to the origin       #\n","            hedge_pr = 1\n","            if hedge_cnt == 0:\n","\n","              #       hedge tp      #\n","              h_tp = res_df['close'].iloc[j]\n","              hedge_pr = (h_tp / h_ep - fee - 1) * lvrg  # hedge long\n","              temp_pr += hedge_pr\n","              h_j = j\n","\n","            \n","            hh = max(res_df['high'].iloc[i:j + 1])\n","            short_liq = (ep_list[0] / hh - fee - 1) * lvrg + 1\n","\n","            if j != len(res_df) - 1:\n","\n","              # ep_tp_list.append((ep, tp_list))  \n","              ep_tp_list.append((ep_list, tp_list))  \n","              # trade_list.append([initial_i, i, j])\n","              trade_list.append((ep_idx_list, tp_idx_list))\n","\n","              liqd_list.append(short_liq)\n","              short_liqd_list.append(short_liq)\n","\n","              h_ep_tp_list.append((h_ep, h_tp))        \n","              h_trade_list.append([initial_i, h_i, h_j])                \n","\n","              pr_list.append(temp_pr)\n","              short_list.append(temp_pr)\n","\n","              h_pr_list.append(hedge_pr)\n","              h_short_list.append(hedge_pr)\n","\n","              i = j\n","              break\n","\n","            else:\n","          \n","              #         tp 미체결 survey        #\n","              nontp_liqd_list.append(short_liq)\n","              nontp_short_liqd_list.append(short_liq)\n","              nontp_short_indexs.append(i)\n","              nontp_short_ep_list.append(ep_list[0])\n","\n","              nontp_short_pr = (ep_list[0] / tp - fee - 1) * lvrg + 1\n","              nontp_pr_list.append(nontp_short_pr)\n","              nontp_short_pr_list.append(nontp_short_pr)\n","\n","\n","\n","      #                  long  phase                #\n","      elif entry[i] in long_entry: # inversion\n","      \n","\n","        initial_i = i\n","\n","        # -------------- ep scheduling -------------- #\n","        # # if res_df['close'].iloc[i] >= upper_middle.iloc[i]:\n","        # if abs(res_df['close'].iloc[i] - long_ep.iloc[i]) < ep_protect_gap * res_df['st_gap'].iloc[i]:\n","        # if res_df['close'].iloc[i] < long_ep.iloc[i]:\n","        # # if abs((res_df['close'].iloc[i] - lower_middle.iloc[i]) / lower_middle.iloc[i]) < ep_protect_gap:\n","        # # if abs((res_df['close'].iloc[i] - res_df['middle_line'].iloc[i]) / res_df['middle_line'].iloc[i]) < ep_protect_gap:\n","        #   pass\n","        # else:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","\n","        # -------------- distance protection -------------- #\n","        # tp_dist = (long_tp.iloc[i] - res_df['close'].iloc[i])\n","        # out_dist = (res_df['close'].iloc[i] - res_df['middle_line'].iloc[i])\n","        # if tp_dist / out_dist >= tp_out_ratio:\n","        #   pass\n","        # else:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","        # -------------- feature dist const. -------------- #\n","        # if initial_i < input_size:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","          \n","        # entry_input_x = min_max_scale(res_df[selected_price_colname].iloc[initial_i - input_size:initial_i].values)\n","       \n","        # re_entry_input_x = expand_dims(entry_input_x)\n","\n","        # entry_vector = model.predict(re_entry_input_x, verbose=0)\n","        # # print(test_result.shape)\n","\n","        # f_dist = vector_dist(entry_vector, selected_vector)\n","        # print(\"f_dist :\", f_dist)\n","\n","        # if f_dist < fdist_thresh:\n","        #   pass\n","        # else:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","\n","        # -------------- htf data const. -------------- #\n","        # i_min = intmin(res_df.index[i]) # 2020-09-05 00:00:59.999000        \n","        # if i_min >= 30:\n","        #   htf_ts = str(res_df.index[i])[:-12] + \"59:59.999000\"\n","        # else:\n","        #   htf_ts = str(res_df.index[i])[:-12] + \"29:59.999000\"\n","          \n","        #   # -------------- ema -------------- #\n","        # if fifth_df['close'].shift(1).loc[htf_ts] > fifth_df['ema'].shift(1).loc[htf_ts]:\n","        #   pass\n","        # else:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue    \n","        \n","        # -------------- fisher const. -------------- #\n","        # # if res_df['fisher30'].shift(1).iloc[i] > 0:\n","        # # if res_df['fisher60'].shift(1).iloc[i] > 0:\n","        # if res_df['fisher120'].shift(1).iloc[i] > 0:\n","        #   pass\n","        # else:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","        # -------------- ma const. -------------- #\n","        # ------- ema const. ------- #\n","        # if res_df['close'].shift(0).iloc[i] > res_df['ema5'].shift(0).iloc[i]: # and \\\n","        # if res_df['close'].shift(1).iloc[i] > res_df['ema5'].shift(1).iloc[i]: # and \\\n","        # if res_df['close'].shift(1).iloc[i] > res_df['ema5'].shift(0).iloc[i]: # and \\\n","        # if long_ep.iloc[i] > res_df['ema5'].shift(0).iloc[i]: # and \\\n","\n","        # ------- sma const. ------- #\n","        # if res_df['close'].iloc[i] > res_df[sma].iloc[i]: # and \\\n","        # if res_df['close'].shift(1).iloc[i] > res_df['sma1'].shift(1).iloc[i]: # and \\\n","        # #   long_ep.iloc[i] >= res_df['sma1'].shift(sma_shift_size).iloc[i]:\n","        # # # upper_sma = long_ep >= res_df['sma'].shift(sma_shift_size)\n","        # # # if np.sum(upper_sma.iloc[i + 1 - sma_lookback:i + 1]) == sma_lookback:\n","        #   pass\n","        # else:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","        # -------------- 1d sma const. -------------- #\n","        # if res_df[sma].iloc[i] <= res_df['close'].iloc[i]:\n","        #   pass\n","        # else:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","\n","        # -------------- cloud const. -------------- #     \n","        # if i < cloud_lookback:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","        \n","        # # if np.sum(under_bottom.iloc[i + 1 - cloud_lookback:i + 1]) == cloud_lookback:\n","        # # if np.sum(under_top.iloc[i + 1 - cloud_lookback:i + 1]) == cloud_lookback:\n","        # if np.sum(over_bottom.iloc[i + 1 - cloud_lookback:i + 1]) == cloud_lookback:\n","        # # if np.sum(over_top.iloc[i + 1 - cloud_lookback:i + 1]) == cloud_lookback:\n","        #  pass\n","\n","        # else:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue  \n","\n","\n","        # -------------- cloud color const. -------------- #\n","        #               1. senkou_a1 >= senkou_b1            #\n","        #               1-1. mutli clouds color 충분히 고려               #\n","        # if i < cloud_lookback:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","        # if np.sum(res_df[senkou_a].shift(cloud_shift_size).iloc[i + 1 - cloud_lookback:i + 1] >= res_df[senkou_b].shift(cloud_shift_size).iloc[i + 1 - cloud_lookback:i + 1]) == cloud_lookback and \\\n","        #   np.sum(res_df[\"senkou_a2\"].shift(0).iloc[i + 1 - cloud_lookback:i + 1] >= res_df[\"senkou_b2\"].shift(0).iloc[i + 1 - cloud_lookback:i + 1]) == cloud_lookback: # and \\\n","        #   # np.sum(res_df[\"senkou_a3\"].shift(0).iloc[i + 1 - cloud_lookback:i + 1] >= res_df[\"senkou_b3\"].shift(0).iloc[i + 1 - cloud_lookback:i + 1]) == cloud_lookback and \\\n","        #   # np.sum(res_df[\"senkou_a4\"].shift(0).iloc[i + 1 - cloud_lookback:i + 1] >= res_df[\"senkou_b4\"].shift(0).iloc[i + 1 - cloud_lookback:i + 1]) == cloud_lookback and \\\n","        #   # np.sum(res_df[\"senkou_a5\"].shift(0).iloc[i + 1 - cloud_lookback:i + 1] >= res_df[\"senkou_b5\"].shift(0).iloc[i + 1 - cloud_lookback:i + 1]) == cloud_lookback:\n","        #   pass\n","        # else:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","\n","        # -------------- st color const. -------------- #\n","        # if np.sum(res_df[['minor_ST1_Trend', 'minor_ST2_Trend', 'minor_ST3_Trend']].iloc[i]) >= 1:\n","        # if np.sum(res_df[['minor_ST1_Trend', 'minor_ST2_Trend', 'minor_ST3_Trend']].iloc[i]) >= 3:\n","        #   pass\n","        # else:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","        # -------------- htf st color const. -------------- #\n","        # if np.sum(res_df[['major_ST1_Trend', 'major_ST2_Trend', 'major_ST3_Trend']].iloc[i]) >= 1:\n","        # # if np.sum(res_df[['major_ST1_Trend', 'major_ST2_Trend', 'major_ST3_Trend']].iloc[i]) >= 3:\n","        #   pass\n","        # else:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","        # -------------- 3rd st const. : st should have 2, 3 or more -------------- #\n","        # if np.sum(res_df[['minor_ST2_Trend', 'minor_ST3_Trend']].iloc[i]) >= 2:\n","        #   pass\n","        # else:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","        # -------------- sar const. -------------- #\n","        # # if res_df['sar2'].iloc[i] < res_df['low'].iloc[i] and res_df['sar3'].iloc[i] < res_df['low'].iloc[i]:\n","        # if res_df['sar1'].iloc[i] < res_df['low'].iloc[i]:\n","        # # if res_df['sar2'].iloc[i] < res_df['low'].iloc[i]: # and \\\n","        # # if  res_df['sar3'].iloc[i] < res_df['low'].iloc[i]:\n","        #   pass\n","        # else:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","        # -------------- limit waiting const. -------------- #\n","        entry_done = False\n","        prev_sar = None\n","        # for e_j in range(i, len(res_df)):\n","        for e_j in range(i + 1, len(res_df)):\n","\n","          #             Todo            #\n","          #             1. ep 설정\n","          \n","          # -------------- np.inf ep -------------- #\n","          # if long_ep.iloc[initial_i] == np.inf:\n","          #   break\n","\n","          #             1-1. close 가 sar_change 이전 sar 을 cross 한 경우만 진입\n","          \n","          # if res_df['low'].iloc[e_j] <= long_ep.iloc[initial_i] and res_df['close'].shift(1).iloc[e_j] >= long_ep.iloc[initial_i]:\n","          if res_df['low'].iloc[e_j] <= long_ep.iloc[initial_i] and res_df['close'].shift(1).iloc[e_j] <= long_out.iloc[initial_i] + res_df['st_gap'].iloc[initial_i] * ep_out_gap:\n","          # if res_df['low'].iloc[e_j] <= long_ep.iloc[initial_i] and res_df['close'].shift(1).iloc[e_j] >= long_out.iloc[initial_i] + res_df['st_gap'].iloc[initial_i] * ep_out_gap:\n","          # if res_df['low'].iloc[e_j] <= long_ep.iloc[initial_i]:\n","            entry_done = True\n","            # print(\"e_j :\", e_j)\n","            \n","            #     이미, e_j open 이 ep 보다 낮은 경우, entry[initial_i] => -2 로 변경   #\n","            if res_df['open'].iloc[e_j] <= long_ep.iloc[initial_i]:\n","              entry[initial_i] = -2\n","\n","            break\n","\n","          #             2. limit 대기 시간 설정\n","          #             2-1. tp 하거나, out 조건이 성립되는 경우 limit 취소\n","          #             2-1-1. timestamp = 29 or 59\n","          # -------------- st tp -------------- #\n","          if res_df['high'].iloc[e_j] >= long_tp.iloc[initial_i]:\n","            break\n","\n","          # -------------- period fishing -------------- #\n","          # if intmin(res_df.index[e_j]) in [29, 59]:\n","          #   break\n","          \n","          # -------------- sar pbline -------------- #\n","          # if res_df['high'].iloc[e_j] >= long_tp.iloc[initial_i]:\n","            # break\n","\n","          #             2-2. out 조건이 성립되는 경우 limit 취소\n","          # -------------- st out -------------- #\n","          if res_df['close'].iloc[e_j] < long_out.iloc[e_j]:\n","            break\n","          \n","          # -------------- roc out -------------- #\n","          # if entry[e_j] == -1:\n","          #   break\n","              \n","          # -------------- stoch -------------- #\n","          # if res_df['stoch'].iloc[e_j - 2] <= res_df['stoch'].iloc[e_j - 1] and \\\n","          #   res_df['stoch'].iloc[e_j - 1] > res_df['stoch'].iloc[e_j] and \\\n","          #   res_df['stoch'].iloc[e_j - 1] >= stoch_upper:\n","          #   break\n","\n","          # -------------- sar out -------------- #\n","          # if res_df['close'].iloc[e_j] < long_out.iloc[initial_i]: # or \\\n","          #   break\n","          \n","          # -------------- sar prevsar out -------------- #\n","\n","          # if res_df['sar2_uptrend'].iloc[e_j] == 0:\n","\n","          #     if prev_sar is None:\n","          #       prev_sar = res_df['sar2'].iloc[e_j - 1]\n","              \n","          #     if res_df['close'].iloc[j] < prev_sar:\n","          #       break\n","\n","          # else:\n","          #   if res_df['close'].iloc[e_j] < res_df['sar2'].iloc[e_j]:\n","          #     break\n","\n","        i = e_j\n","        # print(\"i = e_j :\", i)\n","\n","        if entry_done:\n","          pass\n","        else:\n","          i += 1\n","          if i >= len(res_df):\n","            break\n","          continue\n","\n","        # ---------------- end wait ---------------- #\n","\n","        open_list.append(initial_i)\n","\n","        if entry_type is 'market':\n","          try:\n","            ep_list = [res_df['close'].iloc[e_j]]\n","          except Exception as e:\n","            # print('error in ep_list (initial) :', e)\n","            ep_list = [res_df['close'].iloc[initial_i]]\n","        else:\n","          if entry[initial_i] == 1:\n","            ep_list = [long_ep.iloc[initial_i]]\n","          else:\n","            try:\n","              ep_list = [res_df['open'].iloc[e_j]]\n","            except Exception as e:\n","              ep_list = [res_df['open'].iloc[initial_i]]\n","\n","        if not static_lvrg:\n","          # lvrg = target_pct / (res_df['close'].iloc[initial_i] / res_df['low'].rolling(hl_lookback).min().iloc[initial_i] - 1)\n","          lvrg = target_pct / (long_ep.iloc[initial_i] / long_out.iloc[initial_i] - 1 - fee)\n","          lvrg = int(min(50, lvrg))\n","          lvrg = max(1, lvrg)\n","          lvrg_list.append(lvrg)\n","          \n","        try:\n","          ep_idx_list = [e_j]\n","        except Exception as e:\n","          # print('error in ep_idx_list :', e)\n","          ep_idx_list = [initial_i]\n","\n","        tp_list = []\n","        tp_idx_list = []\n","\n","        partial_tp_cnt = 0\n","        hedge_cnt = 1\n","\n","        h_ep, h_tp = None, None        \n","        h_i, h_j = None, None      \n","\n","        trade_done = False\n","\n","        for j in range(i + 1, len(res_df)):     \n","        # for j in range(i, len(res_df)):     \n","          \n","          if static_tp:\n","            tp_j = initial_i\n","          else:\n","            tp_j = j   \n","          \n","          if static_out:\n","            out_j = initial_i\n","          else:\n","            out_j = j\n","\n","          # -------------- hedge only once -------------- #\n","          #             일단, h_quantity 는 초기 진입과 동일하게 설정         #\n","          # if res_df['low'].iloc[j] <= res_df['minor_ST2_Down'].iloc[j] and hedge_cnt == 1:\n","          # if res_df['close'].iloc[j] <= res_df['minor_ST2_Down'].iloc[j] and hedge_cnt == 1:\n","          # if res_df['close'].iloc[j] <= res_df['minor_ST3_Down'].iloc[j] and hedge_cnt == 1:\n","\n","          #   h_ep = res_df['close'].iloc[j]\n","          #   hedge_cnt -= 1\n","          #   h_i = j\n","\n","          # -------------- sub ep -------------- #\n","          # if res_df['low'].iloc[j - 1] >= res_df['sar2'].iloc[j - 1] and res_df['low'].iloc[j] < res_df['sar2'].iloc[j]:\n","            \n","          #   sub_ep = res_df['sar2'].iloc[j - 1]\n","\n","          #   if sub_ep > ep_list[-1]:\n","          #     ep_list.append(sub_ep)\n","          #     ep_idx_list.append(j)\n","\n","\n","          # -------------- ultimate tp -------------- #\n","          if not non_tp:\n","            #            1. by price line            #\n","            if exit_type != 'market':\n","\n","              for l_i, long_tp_ in enumerate(long_tps):\n","\n","                if res_df['high'].iloc[j] >= long_tp_.iloc[tp_j] and partial_tp_cnt == l_i:\n","                # if res_df['high'].iloc[j] >= long_tp.iloc[j]:\n","\n","                  if l_i == len(long_tps) - 1:\n","                    trade_done = True\n","\n","                  partial_tp_cnt += 1\n","\n","                  #         dynamic tp        #\n","                  # if 0:\n","                  if long_tp_.iloc[j] != long_tp_.iloc[j - 1] and not static_tp:\n","\n","                    #   tp limit 이 불가한 경우 = open 이 이미, tp 를 넘은 경우 # \n","                    # if res_df['open'].iloc[j] >= long_tp_.iloc[initial_i]:\n","                    if res_df['open'].iloc[j] >= long_tp_.iloc[j]:\n","\n","                      # tp = long_tp_.iloc[initial_i]\n","                      tp = res_df['open'].iloc[j]\n","\n","                      if trade_done:\n","                        tp_state_list.append(\"d-long_open\")\n","\n","                    \n","                    #   tp limit 이 가능한 경우 = open 이 아직, tp 를 넘지 않은 경우 # \n","                    else:\n","                      \n","                      # tp = long_tp_.iloc[initial_i]\n","                      tp = long_tp_.iloc[j]\n","                      # tp = res_df['open'].iloc[j]\n","                      \n","                      if trade_done:\n","                        tp_state_list.append(\"d-long_tp\")\n","\n","                  #         static tp         #\n","                  else:\n","\n","                    #   tp limit 이 불가한 경우 = open 이 이미, tp 를 넘은 경우 # \n","                    #   non_inversion 의 경우, short_tp 가 가능함   #\n","\n","                    if res_df['open'].iloc[j] >= long_tp_.iloc[tp_j]:\n","                    # if res_df['open'].iloc[j] >= long_tp_.iloc[initial_i]:\n","\n","                      # tp = long_tp_.iloc[initial_i]\n","                      tp = long_tp_.iloc[tp_j]\n","\n","                      # tp = res_df['open'].iloc[j]\n","\n","                      if trade_done:\n","                        tp_state_list.append(\"s-long_tp\")\n","\n","                    \n","                    #   tp limit 이 가능한 경우 = open 이 아직, tp 를 넘지 않은 경우 # \n","                    else:\n","                      \n","                      # tp = long_tp_.iloc[initial_i]\n","                      tp = long_tp_.iloc[tp_j]\n","\n","                      # tp = res_df['open'].iloc[j]\n","\n","                      if trade_done:\n","                        tp_state_list.append(\"s-long_tp\")         \n","                  \n","                  tp_list.append(tp)\n","                  tp_idx_list.append(j)\n","\n","            #           2. by signal        #\n","            else:\n","\n","              # -------------- sar tp -------------- #\n","              # if (res_df['low'].iloc[j] <= res_df['sar2'].iloc[j]) & \\\n","              #   (res_df['low'].iloc[j - 1] > res_df['sar2'].iloc[j - 1]) & \\\n","              #   (res_df['low'].iloc[j - 2] > res_df['sar2'].iloc[j - 2]):\n","              \n","              #       inversion     #\n","              # if (res_df['high'].iloc[j] >= res_df['sar2'].iloc[j]) & \\\n","              #   (res_df['high'].iloc[j - 1] < res_df['sar2'].iloc[j - 1]) & \\\n","              #   (res_df['high'].iloc[j - 2] < res_df['sar2'].iloc[j - 2]):\n","\n","              # -------------- sar pb tp -------------- #\n","              if res_df['high'].iloc[j] >= long_tp.iloc[initial_i]:\n","\n","              # -------------- st tp -------------- #\n","              # if res_df['close'].iloc[j] < res_df['middle_line'].iloc[j]:\n","\n","              # -------------- fisher tp -------------- #\n","              # if entry[j] == -1:\n","\n","              # -------------- timestamp tp -------------- #\n","              # if intmin(res_df.index[j]) in [29, 59]:\n","                \n","                tp = res_df['close'].iloc[j]\n","                # tp = res_df['open'].iloc[j]\n","                trade_done = True\n","\n","                if trade_done:\n","                  tp_state_list.append(\"long close tp\")\n","\n","                tp_list.append(tp) \n","                tp_idx_list.append(j)\n","\n","\n","\n","          # -------------- out -------------- #\n","          if not trade_done and use_out:              \n","\n","            out = False            \n","\n","            # -------------- macd -------------- #\n","            # if res_df['macd_hist3'].iloc[j] < 0:\n","            # # if res_df['macd_hist3'].iloc[i] > 0 and res_df['macd_hist3'].iloc[j] < 0:\n","\n","            # -------------- st -------------- #\n","            # if res_df['close'].iloc[j] < res_df['middle_line'].iloc[j]:\n","            # if res_df['close'].iloc[j] < res_df['minor_ST3_Down'].iloc[j]:\n","            # if res_df['close'].iloc[j] < lower_middle.iloc[j]:\n","            # if res_df['close'].iloc[j] < res_df['minor_ST1_Down'].iloc[j]:\n","            if res_df['close'].iloc[j] < long_out.iloc[out_j]:\n","              out = True\n","\n","            # -------------- sma -------------- #\n","            # if res_df['close'].iloc[j] < res_df[sma].iloc[j]:\n","\n","            # -------------- sar -------------- #\n","            # if res_df['close'].iloc[j] < res_df['minor_ST3_Down'].iloc[j] \\\n","            #   or res_df['sar2'].iloc[j] >= res_df['low'].iloc[j]:\n","            # if res_df['close'].iloc[j] < long_out.iloc[initial_i]: # or \\\n","            #   #  res_df['close'].iloc[j] < res_df['sar2'].iloc[j]:\n","            #   #  res_df['sar2_uptrend'].iloc[j] == 0 or \\\n","            #   out = True\n","            \n","            # if res_df['sar2_uptrend'].iloc[j] == 0:\n","\n","            #     if prev_sar is None:\n","            #       prev_sar = res_df['sar2'].iloc[j - 1]\n","                \n","            #     if res_df['close'].iloc[j] < prev_sar:\n","            #       out = True\n","\n","            # else:\n","            #   if res_df['close'].iloc[j] < res_df['sar2'].iloc[j]:\n","            #     out = True\n","\n","            # -------------- hl -------------- #\n","            # if res_df['close'].iloc[j] < long_out.iloc[tp_j]:\n","\n","            # -------------- stoch -------------- #\n","            # if res_df['stoch'].iloc[j - 2] <= res_df['stoch'].iloc[j - 1] and \\\n","            #   res_df['stoch'].iloc[j - 1] > res_df['stoch'].iloc[j] and \\\n","            #   res_df['stoch'].iloc[j - 1] >= stoch_upper:\n","            #   out = True\n","\n","            \n","            if out:\n","\n","              if price_protect:\n","                tp = long_out.iloc[out_j]\n","              else:\n","                tp = res_df['close'].iloc[j]\n","\n","              # tp = res_df['open'].iloc[j]\n","              tp_state_list.append(\"long close_out\")\n","              trade_done = True\n","\n","              tp_list.append(tp)\n","              tp_idx_list.append(j)\n","\n","          \n","          # -------------- non tp -------------- #\n","          if j == len(res_df) - 1:\n","            trade_done = True\n","            tp = res_df['close'].iloc[j]\n","            tp_list.append(tp) \n","            tp_idx_list.append(j)\n","\n","\n","          if trade_done:\n","\n","            # --------------- tp_ratio info --------------- #\n","            try:\n","              done_tp = long_tp.iloc[initial_i]\n","              done_out = long_out.iloc[initial_i]\n","\n","              if done_out >= ep_list[0]: # loss >= 1\n","                tp_ratio = np.nan\n","              else:\n","                tp_ratio = abs((ep_list[0] - done_tp) / (ep_list[0] - done_out))\n","                \n","              tp_ratio_list.append(tp_ratio)\n","              long_tp_ratio_list.append(tp_ratio)\n","\n","            except Exception as e:\n","              pass \n","\n","\n","            qty_list = []\n","            temp_pr_list = []\n","            r_qty = 1\n","            for q_i in range(len(tp_list) - 1, -1, -1):\n","\n","              if len(tp_list) == 1:\n","                temp_qty = r_qty\n","              else:\n","                if q_i !=0:\n","                  temp_qty = r_qty / p_qty_divider\n","                else:\n","                  temp_qty = r_qty\n","\n","              # temp_pr = (tp_list[q_i] / ep_list[0] - fee - 1) * temp_qty\n","              temp_pr = (tp_list[q_i] / ep_list[0] - fee - 1) * temp_qty * lvrg\n","              r_qty -= temp_qty\n","\n","              temp_pr_list.append(temp_pr)\n","\n","            temp_pr = sum(temp_pr_list) + 1\n","\n","            # -------------------- sub ep -> pr calc -------------------- #\n","            if len(ep_list) > 1:\n","            \n","              p_ep_pr = []\n","              for sub_ep_ in ep_list:\n","                sub_pr = (tp / sub_ep_ - fee - 1) * lvrg\n","                p_ep_pr.append(sub_pr)\n","\n","              temp_pr = sum(p_ep_pr) + 1\n","\n","              print(\"temp_pr :\", temp_pr)\n","\n","            # ------------ hedge + non_hedge pr summation ------------ #\n","            #         hedge pr direction is opposite to the origin       #\n","            hedge_pr = 1\n","            if hedge_cnt == 0:\n","\n","              #       hedge tp      #\n","              h_tp = res_df['close'].iloc[j]\n","              hedge_pr = (h_ep / h_tp - fee - 1) * lvrg  # hedge short\n","              temp_pr += hedge_pr\n","              h_j = j\n","\n","\n","            ll = min(res_df['low'].iloc[i:j + 1])\n","            long_liq = (ll / ep_list[0] - fee - 1) * lvrg + 1\n","\n","            if j != len(res_df) - 1:\n","\n","              ep_tp_list.append((ep_list, tp_list))\n","              trade_list.append((ep_idx_list, tp_idx_list))\n","\n","              liqd_list.append(long_liq)\n","              long_liqd_list.append(long_liq)\n","\n","              h_ep_tp_list.append((h_ep, h_tp))        \n","              h_trade_list.append([initial_i, h_i, h_j])                \n","\n","              pr_list.append(temp_pr)\n","              long_list.append(temp_pr)\n","\n","              h_pr_list.append(hedge_pr)\n","              h_long_list.append(hedge_pr)                    \n","\n","              i = j\n","              break\n","            \n","            else:\n","          \n","              #         tp 미체결 survey        #\n","              nontp_liqd_list.append(long_liq)\n","              nontp_long_liqd_list.append(long_liq)\n","              nontp_long_indexs.append(i)\n","              nontp_long_ep_list.append(ep_list[0])\n","              \n","              nontp_long_pr = (tp / ep_list[0] - fee - 1) * lvrg + 1\n","              nontp_pr_list.append(nontp_long_pr)\n","              nontp_long_pr_list.append(nontp_long_pr)\n","\n","\n","      i += 1\n","      if i >= len(res_df):\n","        break\n","\n","\n","\n","    # -------------------- result analysis -------------------- #\n","    try:\n","      plt.figure(figsize=(16, 12))\n","      plt.suptitle(key)\n","\n","      np_pr = np.array(pr_list)\n","      # np_pr = (np.array(pr_list) - 1) * lvrg + 1\n","\n","      total_pr = np.cumprod(np_pr)\n","      wr = len(np_pr[np_pr > 1]) / len(np_pr[np_pr != 1])\n","\n","      np_tp_ratio_list = np.array(tp_ratio_list)\n","      mean_tr = np.mean(np_tp_ratio_list[np.isnan(np_tp_ratio_list) == 0])\n","\n","      # plt.subplot(121)\n","      plt.subplot(231)\n","      plt.plot(total_pr)\n","      if len(nontp_liqd_list) != 0:\n","        plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\\nliqd : %.2f\\nmean_tr : %.2f\\nnontp_liqd_cnt : %s\\nnontp_liqd : %.2f\\nontp_liqd_pr : %.2f\" \n","                  % (wr, np.min(np_pr), total_pr[-1], lvrg, min(liqd_list), mean_tr, len(nontp_liqd_list), min(nontp_liqd_list), min(nontp_pr_list)))\n","      else:\n","        plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\\nliqd : %.2f\\nmean_tr : %.2f\\nnontp_liqd_cnt : %s\" \n","                  % (wr, np.min(np_pr), total_pr[-1], lvrg, min(liqd_list), mean_tr, len(nontp_liqd_list)))\n","      # plt.show()\n","\n","      #         short only      #\n","      np_short_pr = np.array(short_list)\n","\n","      total_short_pr = np.cumprod(np_short_pr)\n","      short_wr = len(np_short_pr[np_short_pr > 1]) / len(np_short_pr[np_short_pr != 1])\n","\n","      np_short_tp_ratio_list = np.array(short_tp_ratio_list)\n","      mean_short_tr = np.mean(np_short_tp_ratio_list[np.isnan(np_short_tp_ratio_list) == 0])\n","      \n","      plt.subplot(232)\n","      plt.plot(total_short_pr)\n","      if len(nontp_short_liqd_list) != 0:   \n","\n","        max_nontp_short_term = len(res_df) - nontp_short_indexs[0]\n","        \n","        plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\\nliqd : %.2f\\nmean_tr : %.2f\\nnontp_short_liqd_cnt : %s\\nnontp_short_liqd : %.2f\\nontp_short_liqd_pr : %.2f\\nmax_nontp_short_term : %s\"  \n","                  % (short_wr, np.min(np_short_pr), total_short_pr[-1], lvrg, min(short_liqd_list), mean_short_tr, \n","                     len(nontp_short_liqd_list), min(nontp_short_liqd_list), min(nontp_short_pr_list), max_nontp_short_term))\n","      else:\n","        plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\\nliqd : %.2f\\nmean_tr : %.2f\\nnontp_short_liqd_cnt : %s\"  \n","                  % (short_wr, np.min(np_short_pr), total_short_pr[-1], lvrg, min(short_liqd_list), mean_short_tr, len(nontp_short_liqd_list)))\n","\n","      #         long only      #\n","      np_long_pr = np.array(long_list)\n","      # np_long_pr = (np.array(long_list) - 1) * lvrg + 1\n","\n","      total_long_pr = np.cumprod(np_long_pr)\n","      long_wr = len(np_long_pr[np_long_pr > 1]) / len(np_long_pr[np_long_pr != 1])\n","\n","      np_long_tp_ratio_list = np.array(long_tp_ratio_list)\n","      mean_long_tr = np.mean(np_long_tp_ratio_list[np.isnan(np_long_tp_ratio_list) == 0])\n","      \n","      plt.subplot(233)\n","      plt.plot(total_long_pr)\n","      if len(nontp_long_liqd_list) != 0:\n","\n","        max_nontp_long_term = len(res_df) - nontp_long_indexs[0]\n","\n","        plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\\nliqd : %.2f\\nmean_tr : %.2f\\nnontp_long_liqd_cnt : %s\\nnontp_long_liqd : %.2f\\nontp_long_liqd_pr : %.2f\\nmax_nontp_long_term : %s\"   \n","                  % (long_wr, np.min(np_long_pr), total_long_pr[-1], lvrg, min(long_liqd_list), mean_long_tr, \n","                     len(nontp_long_liqd_list), min(nontp_long_liqd_list), min(nontp_long_pr_list), max_nontp_long_term))\n","      else:\n","        plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\\nliqd : %.2f\\nmean_tr : %.2f\\nnontp_long_liqd_cnt : %s\"   \n","                  % (long_wr, np.min(np_long_pr), total_long_pr[-1], lvrg, min(long_liqd_list), mean_long_tr, len(nontp_long_liqd_list)))\n","\n","\n","      #     reversion adjustment      #\n","      # rev_np_pr = 1 / (np.array(pr_list) + fee) - fee\n","      rev_np_pr = (1 / ((np.array(pr_list) - 1) / lvrg + fee + 1) - fee - 1) * lvrg + 1\n","      # rev_np_pr = (1 / (np.array(pr_list) + fee) - fee - 1) * lvrg + 1\n","          \n","      rev_total_pr = np.cumprod(rev_np_pr)\n","      rev_wr = len(rev_np_pr[rev_np_pr > 1]) / len(rev_np_pr[rev_np_pr != 1])\n","\n","      # plt.subplot(122)\n","      plt.subplot(234)\n","      plt.plot(rev_total_pr)\n","      plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\" % (rev_wr, np.min(rev_np_pr), rev_total_pr[-1], lvrg))\n","\n","      #         short       #\n","      # rev_np_short_pr = 1 / (np.array(short_list) + fee) - fee\n","      rev_np_short_pr = (1 / ((np.array(short_list) - 1) / lvrg + fee + 1) - fee - 1) * lvrg + 1\n","      # rev_np_short_pr = (1 / (np.array(short_list) + fee) - fee - 1) * lvrg + 1\n","          \n","      rev_total_short_pr = np.cumprod(rev_np_short_pr)\n","      rev_short_wr = len(rev_np_short_pr[rev_np_short_pr > 1]) / len(rev_np_short_pr[rev_np_short_pr != 1])\n","\n","      # plt.subplot(122)\n","      plt.subplot(235)\n","      plt.plot(rev_total_short_pr)\n","      plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\" % (rev_short_wr, np.min(rev_np_short_pr), rev_total_short_pr[-1], lvrg))\n","\n","      #         long       #\n","      # rev_np_long_pr = 1 / (np.array(long_list) + fee) - fee\n","      rev_np_long_pr = (1 / ((np.array(long_list) - 1) / lvrg + fee + 1) - fee - 1) * lvrg + 1\n","          \n","      rev_total_long_pr = np.cumprod(rev_np_long_pr)\n","      rev_long_wr = len(rev_np_long_pr[rev_np_long_pr > 1]) / len(rev_np_long_pr[rev_np_long_pr != 1])\n","\n","      # plt.subplot(122)\n","      plt.subplot(236)\n","      plt.plot(rev_total_long_pr)\n","      plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\" % (rev_long_wr, np.min(rev_np_long_pr), rev_total_long_pr[-1], lvrg))\n","      \n","      plt.show()\n","\n","      h_np_pr = np.array(h_pr_list)\n","      # h_rev_np_pr = 1 / (np.array(h_pr_list) + fee) - fee    # define, for plot_check below cell\n","      h_rev_np_pr = (1 / ((np.array(h_pr_list) - 1) / lvrg + fee + 1) - fee - 1) * lvrg + 1\n","\n","      # --------------------- h pr plot --------------------- #\n","      if len(h_np_pr[h_np_pr != 1]) != 0:\n","\n","        plt.figure(figsize=(16, 12))\n","        plt.suptitle(key + \" hedge\")\n","\n","        h_total_pr = np.cumprod(h_np_pr)\n","        h_wr = len(h_np_pr[h_np_pr > 1]) / len(h_np_pr[h_np_pr != 1])\n","\n","        # plt.subplot(121)\n","        plt.subplot(231)\n","        plt.plot(h_total_pr)\n","        plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\" % (h_wr, np.min(h_np_pr), h_total_pr[-1], lvrg))\n","        # plt.show()\n","\n","        #         short only      #\n","        h_np_short_pr = np.array(h_short_list)\n","\n","        h_total_short_pr = np.cumprod(h_np_short_pr)\n","        h_short_wr = len(h_np_short_pr[h_np_short_pr > 1]) / len(h_np_short_pr[h_np_short_pr != 1])\n","        \n","        plt.subplot(232)\n","        plt.plot(h_total_short_pr)\n","        plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\" % (h_short_wr, np.min(h_np_short_pr), h_total_short_pr[-1], lvrg))\n","\n","        #         long only      #\n","        h_np_long_pr = np.array(h_long_list)\n","\n","        h_total_long_pr = np.cumprod(h_np_long_pr)\n","        h_long_wr = len(h_np_long_pr[h_np_long_pr > 1]) / len(h_np_long_pr[h_np_long_pr != 1])\n","        \n","        plt.subplot(233)\n","        plt.plot(h_total_long_pr)\n","        plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\" % (h_long_wr, np.min(h_np_long_pr), h_total_long_pr[-1], lvrg))\n","\n","\n","        #     reversion adjustment      #\n","            \n","        h_rev_total_pr = np.cumprod(h_rev_np_pr)\n","        h_rev_wr = len(h_rev_np_pr[h_rev_np_pr > 1]) / len(h_rev_np_pr[h_rev_np_pr != 1])\n","\n","        # plt.subplot(122)\n","        plt.subplot(234)\n","        plt.plot(h_rev_total_pr)\n","        plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\" % (h_rev_wr, np.min(h_rev_np_pr), h_rev_total_pr[-1], lvrg))\n","\n","        #         short       #\n","        # h_rev_np_short_pr = 1 / (np.array(h_short_list) + fee) - fee\n","        h_rev_np_short_pr =  (1 / ((np.array(h_short_list) - 1) / lvrg + fee + 1) - fee - 1) * lvrg + 1\n","           \n","        h_rev_total_short_pr = np.cumprod(h_rev_np_short_pr)\n","        h_rev_short_wr = len(h_rev_np_short_pr[h_rev_np_short_pr > 1]) / len(h_rev_np_short_pr[h_rev_np_short_pr != 1])\n","\n","        # plt.subplot(122)\n","        plt.subplot(235)\n","        plt.plot(h_rev_total_short_pr)\n","        plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\" % (h_rev_short_wr, np.min(h_rev_np_short_pr), h_rev_total_short_pr[-1], lvrg))\n","\n","        #         long       #\n","        # h_rev_np_long_pr = 1 / (np.array(h_long_list) + fee) - fee\n","        h_rev_np_long_pr =  (1 / ((np.array(h_long_list) - 1) / lvrg + fee + 1) - fee - 1) * lvrg + 1\n","            \n","        h_rev_total_long_pr = np.cumprod(h_rev_np_long_pr)\n","        h_rev_long_wr = len(h_rev_np_long_pr[h_rev_np_long_pr > 1]) / len(h_rev_np_long_pr[h_rev_np_long_pr != 1])\n","\n","        # plt.subplot(122)\n","        plt.subplot(236)\n","        plt.plot(h_rev_total_long_pr)\n","        plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\" % (h_rev_long_wr, np.min(h_rev_np_long_pr), h_rev_total_long_pr[-1], lvrg))\n","        \n","        plt.show()\n","          \n","    except Exception as e:\n","      print('error in pr plot :', e)   \n","    \n","\n","    print()\n","\n","    break # indi. loop\n","  # break # pair loop"],"execution_count":26,"outputs":[{"output_type":"stream","name":"stdout","text":["2021-07-01 BTCUSDT_majorst_backi2.xlsx loaded !\n","cloud_lookback : 69\n"]},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1152x864 with 6 Axes>"]},"metadata":{"needs_background":"light"}},{"output_type":"stream","name":"stdout","text":["\n","2021-07-01 BCHUSDT_majorst_backi2.xlsx loaded !\n","cloud_lookback : 69\n"]},{"output_type":"display_data","data":{"image/png":"iVBORw0KGgoAAAANSUhEUgAAA7cAAAMVCAYAAACssAPmAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAAgAElEQVR4nOzdd7hcVb3G8e9LGpAQShLpEGkqoKKgFAG5IgIqomABEQKKiMpFvTZEuXRBrBdREOlSpIg0QUV6ETAgAqGGEpJAIL0nJDm/+8daE3YmM6dlzpmZM+/neeY5M3vtvfbak3N+2WuvpojAzMzMzMzMrJmtVO8CmJmZmZmZma0oV27NzMzMzMys6blya2ZmZmZmZk3PlVszMzMzMzNreq7cmpmZmZmZWdNz5dbMzMzMzMyaniu3ZmZmZmZm1vRcubU+T9Lukp6WNE/SHZI2rrLfWyRdIekVSTMl3Sdp+0L6xyTdK2mGpEmSzpO0Wu9diZlZdY51ZtYKHOusPa7cWtOQ1L8bxwwHrgWOA9YCRgNXVtl9CPAvYNu878XAXyQNyemrA6cA6wHvANYHftrVMpmZtcexzsxagWOd9QRFRL3LYC1G0mHAfhGxT/78HPBoRHwmfx4P7BMRj0oK4Cjgm0D/iHhrF891BHBoROyUPw8GpgDviYinO3H8LOC/IuLhCmn7ASdGxDu7UiYzaw2OdWbWChzrrJG45dbq4S5gF0krSVoPGAjsCCBpE9KTtscK+38S2B7YslJmkh6T9Pkq59oK+E/pQ0TMBZ7P29slaZtctrFVdtkVGNNRPmbWshzrzKwVONZZw+hydwCzFRURL0iaDWwDbAH8DdhG0ttJwfCeiGgrHHJaRExrJ793tXO6IcDksm0zgXbHVEgaCvyB9ARvZoX0PYBRpOBsZrYcxzozawWOddZIXLm1erkL2A3YLL+fAXyQFATvKtt3/AqcZw4wtGzbUGB2tQMkrQLcCDwQEadVSN8BuBz4dEQ8uwJlM7O+z7HOzFqBY501BHdLtnopBcFd8vu7SEHwgywfBFdkYPgY4N2lD3lsxqZU6XYiaRBwHTAB+EqF9PcANwBfjIjbVqBcZtYaHOvMrBU41llD8IRSVheStgAeBl6LiM1yd5GXSL0J1oyIJXm/ADaPiGrjIzo6zwjS2IovAn8BTgQ+GBE7VNh3AGkGviWkp3eLy9K3Bm4Djo6IajPzmZkt5VhnZq3Asc4ahVturS5yt485wD358yzgBeC+UgDsLEljJB1U5TyTgf2BU4HppLEUBxSOPUfSOfnjTsDHgY8AMyTNya9dcvq3gRHA+YU0TzxgZlU51plZK3Css0bhllszMzMzMzNrem65NTMzMzMzs6bnyq2ZmZmZmZk1PVduzczMzMzMrOm5cmtmZmZmZmZNz5Vb6zWSNsoz0fWrd1nMzHqS452ZtQLHOms0rtxar4mIlyNiSFenhO9tkgZJukDSLEmTJP1PO/ueU5g+fo6khZJmF9KPkjQ6b7+oVy7AzOquj8a7QZJ+KekVSdMl/TavI1lKv1PSgkI8fKZ3rsLM6qWPxjrf2zWx/vUugFlPktS/fNHuTjgB2BzYGFgHuEPSkxHx1/IdI+JI4MjC+S4C2gq7vAKcAuwJrNLFcpiZdVpPxzvgGGA7YGugH3Aj8CPg+MI+R0XEeV0tu5lZZ/neztrjlltbIZJekvRdSY9JmivpfElrS7pF0mxJ/5C0Zt53pKSQ1D9/vlPSyZLuy/v+XdLwDs5XyuOI3HrwqqTvFNJPkHSNpEslzQIO7cZljQJOjojpEfEU8PvO5CNpMGlh8YtL2yLi2oi4DpjajXKYWQNxvGMf4MyImBYRk4EzgS9245xm1sAc65Ypm+/tmowrt1YL+wN7AFuQbn5uAY4FRpB+x45u59jPA4cBbwEGAt9pZ9+i/yI9gfsI8H1JHy6k7QtcA6wBXFZ+oKTPS3qsUqY5WK8L/Kew+T/AVp0o0/7AZODuzlyAmTWlVo93Knu/gaTVC9tOkzQl39ju1k4+ZtbYWj3Wlfjersm4cmu18OuIeC0iJgL3AA9GxL8jYgHwZ+A97Rx7YUQ8GxHzgauAbTp5zhMjYm5EPA5cCBxYSPtnRFwXEW0532VExOUR8a4q+Q7JP2cWts0EVutEmUYBl0REdGJfM2tOfTHe3VPY1l68+yvwDUkjJK3Dmze3q+af3wc2AdYHzgVulLRpRxeXW2Uu7Wi/rsqtTx+ukjamJyrfufVps1rna1YHfTHW+d6uBbhya7XwWuH9/Aqfh1DdpML7eR3sWzS+8H4csF6VtK6ak38OLWwbCsyusO9SkjYCdgMuWYFzW4tTmvDifEnjcneuRyXtXbbP7pKeljRP0h2SNi6k/UzSc/nYpyUdUnbsuZKekdQm6dBOlGcbSQ/ncz0saZtC2i1adsKNNyQ93k5ekvQTSVPz6yeSVEjvdNkkXZTPNydf68OSPli2z/sl3SxphqRpkh6SdFhO203ShAr53inp8Pz+UEn3Vjj9zwsVJgEfzC2VM0ljUjfPaRvknzMkzQF2Aj4jaY+8fR6wR+H7a5M0v/D5oMI5ezre7VzY1l68OxX4N/AocD9wHbCIHPMj4sGImB0RC3M5BwAfXYHy9ZiI2Coi7gSQNCr/Ds2SNEHSGaUulmYtzPd2vrdrSq7cWrPasPB+I9Lg/pJuP12LiOnAq8C7C5vfDYzp4NCDgfsi4oXuntuMNMnfeOCDwOqkyXqukjQSII9buhY4DlgLGA1cWTh+Lqn72Oqkp83/J2mnQvp/gK8Bj3RUEEkDgeuBS4E1SeONrs/biYi98wyZQyJiCKmyc3U7WR4BfJL09/SuXM6vdKds2Rn5vEOBs4FrlZeikLQjcDtwF7AZMAz4KrB3lby6aydgFmmCkmHAecAbZfsMy+UcDTwJ/LlQef9n4ft7Gdin8J0Wu901RLyLiPkRcVRErB8RmwDTgIcjoq3S/pnaSWsUqwLfBIYD2wO70/lulGZWOw0R6wp8b9eEXLm1ZnWcpFUlbUUa13FlRwd0wSXAjyStKentwJeBizo45pBK+0jqL2ll0syi/SSt7BYBqyZ3xzohIl7KXa9uAl4Ets277AeMiYirc9ewE4B3599TIuL4iHg6H/sgqSvZjoX8fxMRtwELOlGc3UiV7V9FxMKIOJNUUflQ+Y658r0L7T/dHgX8PCIm5G5uP6cwmUcXy7ZU7ip2Oamyv3be/FPg4oj4SURMieThiPhsV/LuhGHAo/nfbTHpwUS1CUbeAG4j/Zv9hK5V+srj3UBJV5N+Hz4n6XFJW0j6gaTXJY2X9JHSwZIOk/RUbuV+QVLxocKdwE2FePdVYMvc4j1G0icK+Vwl6eLcIj4fODkf+2TOe4qkYyQNBf4ODCKNwZ0jqdgCU8nKkq7M+TwiaelNaM7z+Zz2pKRPFQ+U9OXC9T0p6b3lmUt6h6QXJR2YPy/tshwRZ0fEPRHxRv7dvAz4QKVCSvpczmdo/ry30rIiIyrs+9HCdzNReYIcSd+X9KDenIDnq/m7XrmD78isr/O9na0wV26tWd0FjCXdLP4sIv7e2QMlHSSpvad1xwPPk7rE3AX8tDRVvN5crHyjQn47krogVmq1+hGp+84xwBfy+x91tqzW2iStTZrMo/T7uhWFCTEiYi7pd3W5STEkrQK8j46fTFezFfBY2Tijxyqdi3QDcE9EvNRBft2ZzKNdubX2ENJDgNckrUqq0F+zonl3whTgo5IOKMaEDlxLmmRlnS6cZ5l4R/o334f0HV5F6ir8N9L/6esDJwG/gxTvSBXqj5NauQ8DflmoAF4ILObNeCfgj7mMJ5Na63fL+65Gasn4EKml+XvAUaQW+E3ytuPyz7HAlIgYnFuiiy0wlexLiqFrkR5WXKc319B9nvTwZHXgROBSSevm6/tMvr5D8vV9grIHDPla/wb8d0Rc0UE5AHaleuv1laReCmdKGgacDxyeZ48udz7wlYhYjbR80u15+0+BhaQb7c2BHwNfyA+szFqZ7+1sxUWEX341zQsYSeqa0r/eZfHLr558kcYr/gP4XWHb+cDpZfvdBxxa4fiLSRMAqULavZWOKdvnOOCPZdsuA06osO/YTuS3BHh74fPm+W9Z3SjbRaQW3hmkm4oFwEE5bf2c79vbOX430pqFM8pei0kVFUityvdWOPYl4MP5/ZrA6aSK0BLSWNT35bSKsQpYOW//QLV8C9uq5XECcGvh8z6kMWX98ufV8nFrVLn+64BvFL6LCfn9LqSxcisV9r2i9G+ev/dLyvJ6mVS5HVrhO57Qyd/1E4AHCp9XInUh3KXK/o8C++b3fytdS5V/qxOBCcBuHX3fefsX8/7D2ynvGvm6H6fw95nTAtisve+m8G87DXgK+EFnvie//Oqrr2qxzi+/uvNyy62ZWYORtBLwB1JX1qMKSXNYdkIMqDAphqSfklqKPhsRnRqnpGUnh9qoC+famdQKeU1h27GFvM6pUvahwJzOlq+Cn0XEGqTxktsBP1WafGs6qeK6bgfHvxIRaxRfpIp1yWLSA4ZyA0iTKBFpvcRjImIrUpfoR0ktju11OV4//5zWQfk6Uj65y5SIWFL4DHkSl9x19gGlibVmkCZ5qrTu5HrA+Fh2DO24Qplh+Uld9s/5jZN0V27t6I6l+ebzT8jlQdIhSpOrzcjl37pQ/g1JrTHVHAncH3nyqPZI+iRwGrB3REyptl9EzCC15mxN6l5fTdXvJlIvhztIN/W/6ahsZmbWOa7cWsPJXUvmVHh1t3ulWdPIFaPzSZWl/SNiUSF5DIUJMZQWl9+UQhdKSSeSJk76SETM6ux5ozA5VES8nPN8V1lF7V0s311zFHBtRMwp5PXjQl5HVio7nZvMozPljoh4gtSC/bGImAf8k1SxWBEvAxsVrz93eX4LqcJXXo4ppC7D65G61lbzKeB14Jmc50FKsylvRFo6p6bxTtIg4E+5bGvnSvzNVB7z+wqwYX64UrIRMLHweZmHERHxr4jYl/S9XEfqJr3cfp2wdCKZfP4NgFeUZgP/Pekhz7Bc/icK5R9P+huo5kjSv+Mv2zu5pL3yefaJtAxJe/tuQ2rhvQI4s9p+7Xw3SPoYqfv8baRuymZ9mu/trLe4cmsNJyIuK7vRLr22ijTRjiJN3mLWF50NvIN0k12+lt+fga0l7Z8ns/hf0rjYpwEk/QD4PKm75XITG0kamI8TMCBPglHt/4E7SV1tj1ZaoqjUglwaN1ga1/tZOp6UA9JkHv8jaX2lyYW+XTyui2Urv663k5azKd0kfQ84VNJ387hIJL1b0h87k1/2IKm78zG5LINJXZBHkyu3SssZbZ0nF1mNNBnT2Crf/dr5Ozye1A21Dd6Mdyw/W3Kt4t1A0sROk4HFuXX7I1X2fZC0bMf3JA3IY233IY3BXU7+NztI0ur5IcwsUqs5pJblYZJW72Q5t5W0n9KkLN8kjUl9ABhMqihPzuc8jNRiWnIe8B1J2yrZTIXlsUg9DfYCdpV0epXr+BCpy/3+EfFQe4XMv6OXAseSxi+vL+lrFfar+t0ozXp+HnA46eHQPpIacskks1rxvZ31FlduzcwaRL4p/wppwftJKlvzNNKkNfuT1hudTlq25IBCFj8mtbSNLRx7bCH976QuqzsB5+b3u1YqS0S8QVq65xDSeNQvAp/M20s+mdPu6MTl/Q64kTRO8QngL3lbl8uWfS9f39x87IWl/CLiftKkRx8CXpA0Led5cyfKSc5jIfAx8thR4AVSq2yxq/eqpAcOM3L6xqQJjYpm5DI+Tuqi+pmIuKCz5VhRETEbOJrUajid9PDjhir7vkGqzO5Nmizrt8AhpYcnVRwMvCRpFqmVtPS7+jSpZfOF3J24o9mSrwc+l8t4MLBfRCyKiCdJXX//Saowv5PUSl8q89Wkv4fLSRXZ6yhrOc/diPcA9pZ0coVzH0earOrmwt/NLaVEpTWdS39Hp5G6bp+df0e+AJyiNDFUp74b0u/i9RFxc34Q8iXgvNKDGDMz6z51f7iTmZmZNbPcanlepHVrzczMmppbbq2pSXqLpCskvSJppqT7JG1fts/nJY2TNFfSdZLWKqRdKulVSbMkPSvp8EJa+fiQeZJC0rY5/b8k3ZHP+1KV8n1DaU3EuUrrMG5RZb81lNaPfD2/TihL30bSPflcEyQd1/1vzcz6Or25tEXxFZK+ndMl6YekicA2kvRH5bVby/JZS9JkSfeWp5Xtt4mkm/Tmerdn5O2DJJ2fY/BspYmh9u6Jazaz1tPRfaCk3SS1lcXCUWV5HJDv0eYqram9S5VzHSDpmXye1/N929BCennMXSLp1z139VaJK7fWMPLNVld/J4cA/wK2JXVFuxj4i6TSLKFbkboqHkyaoGceqatdyWnAyIgorY94SqnyWj4+BPgaqevhI/nYucAFwHerXM/hpO5mH8vl/Dipq18lvyR1cRwJvB84WGlsWcnlwN35Gj8IfE1SefdHM+sjclfYSpOvHNvx0RARL5fFr3eSxnz+Ke9yCGnc8xxSjFoFqHQT9hPScjXtlXUgcCtpPPY6pMmgLs3J/UmTPr1IGk/9NlL337lduR4z6/t64j4we6VsnO/FhXPuQYpzh5GWUduVdK9XyX2kZdxWJ63t3R84pZRYFnPXIQ2vqbROrvUgV25blKRj8tOp2ZKelPSpsvQv56dYpfT35u0bSro2P8mfKumsDs5zaH6KdlZ+0vW0pN0L6XdKOlXSfaSKZ5e6xkXECxHxi4h4NSKWRMS5pAlU3pZ3OQi4MSLuzrO5HgfspzT5CxExJo+bgjRpSVB95s1RpDUeIx/7UET8gQpBMAfn44FvRcSTeUbX5yOi2vIf+wBnRMS8vETE+aQxjiUjgcvyNT5PWrJkq46+HzPrmkaJjaTK5v8B/wH6Advkm6Yfd/PSDgHuzvEFUsw5LSI2ioi/kW7uPqc0I3SpjDuRJm+6sIO8DyXdPP4iIuZGxIKIeAwgfz4hInbL5V+FNP74kBW8HjNbAY0S63rhPrAjJwInRcQDEdEWERMjYmKlHSNifCy7TNgSYLMq+e5Pmhn/nk6Ww2rEldvW9TywC2kSjROBSyWtCyDpM8AJpJuhUovmVEn9gJtIM4WOJK192JnZR7fP5xtOqvBdq0LXYFKr6hGkJ2bLLbEh6beSflu+vRKlJRoGAmPzpq1IN4cA5IrhG8AWhWN+K2ke8DTwKhUmnVGa6GdX0oyvnbFBfm0tabxS1+QTO3giqbL3xRlBfwUcojSD6dtIS0j8o5NlMbPO63OxUZJymS8uTyp7PwjYPB/TDziLtARPR5Nz7ECaOOkWpS7Jd0p6Z5WyrE2Kv17+w6y++lysy/uW3wcCvEXSa/le7JdKs9+X4tx2wAhJY5WGfZ2ltBJAtfx3ljSTNIHd/qT7s0qWaRCxXhQRfvkF8Ciwb37/N+AbFfbZkbQcQ/8u5Hsoae1EFbY9BByc399JemJWi2sYSmoR+EFh223AkWX7TQR2K9vWj7SUyI+AARXyPg64s8p5Pwy8VLZtJ9IN4V+ANUj/CTwLfLlKHpcC15IC+2ak/wQWluU3Flic8z2x3r8zfvnVCq8+Eht3IXU/HlLYdniOSSNJN7c35NiyY07/FnB2oaz3tpP/34FFpFmWB5KGarwADCzbbwDpodzv6v3v6pdffi376iOxrtJ94DrAlqQGvbeShnj9Lqetl+PeaGBdUuX7PuDUTpxrfdIDgC0qpG1MatV9a73/XVvx5ZbbFiXpEKWJPWZImkFqJRyekzckVa7KbQiMi66vQzYx8l97No4UUErGdzG/5eSnbDcCD0TEaYWkOaRgVzSU9MRtqUhdWe4ltbZ+tcIpKrV6tKe0PukZETEjUlfA35GWAqnk6HzMc6QlMa4gLT9Cfrr5V+AkYGXSv8OeqrC2opmtmL4WG7NRwJ8iDc0ouYAUZ+4ktaKWlnOaoLRsz9HADzuZ/3xS5feWSMsJ/QwYRlqvGVg6VOMPpJ4zR1XMxcx6TV+LddXuAyNiUqThYW0R8SJpHfT9c3LpXu3Xkbo1TwF+QfV7taUidV3+K5Vbrg8mxcQXu39F1l2u3Lag3MX296QbjGERsQZp3clSF7XxVB53Op40q2b/Lp5y/dwtrmQj0lO8khXqsiFpEGltwwmkNUKLxgDvLuy7Canr3bNVsutP2bVL+gApCF/ThWI9Q7qJK15b1euMiGkRcVBErBMRW5H+Nh/KyZsASyLikohYHBETSMG0w+BrZp3X12IjLL3h+wxlD+fyjd7xETEyIjYgxcqJ+fV+UivGk5Imkcb+vl/SpNyNr9xj7ZU1X+P5pEn99o+IRSt6XWbWfX0t1nVwH1guyPWfiJiej+nUvVoFy90zZl1tELEacuW2NQ0m/fFOBlCalbc4vvM84DuStlWyWQ6ED5HGpJ4uabCklXPFryNvAY7O40U/Q3qav9y41u6QNIBU6ZwPjIqItrJdLgP2kbRLHmNxEnBtRMxWmj7+AElDJPWTtCdwIKkrc1Gp1WOZ1l5JK0lamdTVTvn7GAgQEfOAK4HvSVpN0gak8SQ3VbmOTSUNy+XYO+9bmoHv2Zz/5/M51wE+R7qhNLPa6TOxseBTwHTebJkFli7xs2m+ji1JrRUn5Rh6C6m78jb59b/Av0mTWi2pcI5LgR0kfThXfr9Jmhm+NMvy2fna9omI+RWON7Pe1WdiXUf3gUrLNm6cr2ND4HRSD7mSC4H/zveEa5KGZFS7VztI0kb5/cbAqZTdMypNxLc+niW5bly5bUER8STwc+CfwGukJSLuK6RfTfqDvZzUffc6YK18U7MPaUzoy6SnXZ/rxCkfJE1SMiXn++mImNrZ8ko6R9I5VZJ3Ii2x8xFght5cLmOXfC1jgCNJldzXSWNaS915g9QFeQLp5u9nwDcj4obCuVcGPkvlJ3C7koLpzaSnkPNJY89KjiJ1i36F9F1fTuoKSK5sF7sIbksaJzKbtDzRQbnsRMQsYD9SwJ1OGhfzBIXp581sxfWx2FgyCvhDWZdASN0PbyYtaXYLcEGkWUaJiIW5K9+kiJgEzAQW5ffFNXQ3yvs/A3wBOIcUo/YFPhERb+QbwK+QKsmTCjH6oM5ep5nVVh+Lde3eBwLvAe4nxbr7SfdaRxeOP5m0lNCzpAdy/85lXC7Wkcbu3i9pLun7egb4cll5RpEbUTp7fVZbWv7/O7PakXQocHhE7FzvspiZNQrHRjNrBY511tvccmtmZmZmZmZNz5VbW2G5u8icCq+OusuZmfVZjo1m1goc66yRuFuymZmZmZmZNT233JqZmZmZmVnTc+XWGp6kkLRZvcthZtaTHOvMrBU41llPcuXWLJM0Mgfc4niR4+pdLjOzWnKsM7NW4FjXmvrXuwBmPUVS/4hY3I1D1+jmcWZmvc6xzsxagWOddYZbbq1pSNpe0iRJ/QrbPiXpsfz+BEnXSLpU0izgUElvlXS3pNmS/iHpN5IurdtFmJl1wLHOzFqBY531BFdurWlExIPAXOBDhc2fBy4vfN4XuAZYA7gspz0EDANOAA7uxKnGSZog6UJJw2tQdDOzTnOsM7NW4FhnPcGVW2s2VwAHAkhaDfho3lbyz4i4LiLagBHA+4D/jYg3IuJe4IZ28p6S998Y2BZYjRRIzcx6m2OdmbUCxzqrKVdurdlcDuwnaRCwH/BIRIwrpI8vvF8PmBYR86qkLyMi5kTE6IhYHBGvAUcBH8nB1sysNznWmVkrcKyzmnLl1ppKRDwJjAP2ZvmuKwBReP8qsJakVQvbNuzK6fJP/52YWa9yrDOzVuBYZ7Xmf1xrRpcD3wB2Ba6utlN+8jcaOEHSQEk7AvtU2z9PbPA2SStJGgacCdwZETNrW3wzs05xrDOzVuBYZzXjyq01oyuADwK3R8SUDvY9CNgRmAqcAlwJLKyy7ybAX4HZwBN5vwNrUWAzs25wrDOzVuBYZzWjiOh4L7M+QtKVwNMRcXy9y2Jm1lMc68ysFTjWWTm33FqfJul9kjbNXVL2Ik0pf129y2VmVkuOdWbWChzrrCP9610Asx62DnAtaT20CcBXI+Lf9S2SmVnNOdaZWStwrLN2uVuymZmZmZmZNT13SzYzMzMzM7Om58qt9QpJL0n6cH5/rKTzupnPbpIm1LZ0Zma14VhnZq3Asc4alSu31usi4scRcXg9zi1pG0kPS5qXf27Twf4HSHpK0lxJz0vaJW/fQdKtkqZJmizpaknr9s5VmFkzaJZYJ2mkpJslTZc0SdJZkvoX0vtJOkXSK5JmS/q3pDV650rMrNE1S6zL+/u+ro9z5dZahqSBwPXApcCawMXA9Xl7pf33AH4CHAasRlpc/IWcvCZwLjAS2Ji0htqFPVh8M7NO6WqsA34LvA6sC2xDWm/ya4X0E4GdSGtLDgUOBhb0SOHNzDrJ93VWiSu31usknSDp0sLngyWNkzRV0g/LurqsIumi3KLwJPC+FTj1bqQZwn8VEQsj4kxAwIeq7H8icFJEPBARbRExMSImAkTELRFxdUTMioh5wFnAB1agbGbWxzRRrHsrcFVELIiIScBfga1yudYEvgl8OSLGRfJERLhya2ZAU8U639e1AFdura4kbQmcTWoJWI80tfsGhV2OBzbNrz2BUR3kd5OkY6okbwU8FstOEf5Y3l6eTz9gO2CEpLGSJuSueqtUyXtXYEx7ZTOz1tWosS77FXCApFUlrQ/sTargArwTWAx8OndZflbS19srm5m1rkaNdb6vax2u3Fq9fRq4KSLujoiFwHFAWyH9s8CpETEtIsYDZ7aXWUR8PCJOr5I8BJhZtm0mqWtKubWBAbl8u5C66r0H+FH5jpLeBfwv8N32ymZmLa1RYx3A3aSbwVmkdSNHA9fltA2A1YEtSC28nwZOyN37zMzKNWqs831di3Dl1uptPWB86UNEzAWmVksHxq3AueaQxosVDSWNqyg3P//8dUS8GhFTgF8AHy3uJGkz4BbgGxFxzwqUzcz6toaMdZJWIrXSXgsMBoaTxp79JO9SioUnRcT8iHgM+CNlsdDMLGvIWIfv61qGK7dWb68CG5Y+SFqV1IWlYjqw0QqcawzwLkkqbHsXFbqdRMR0UgtGsatL8T2SNgb+ASTlWg4AACAASURBVJwcEX9YgXKZWd/XkLEOWCuf66w8Zm0qaRKV0g3fY/ln1VhoZlbQkLHO93Wtw5Vbq7drgI9L2jnPbncSy/5eXgX8QNKakjYA/nsFznUnsAQ4WtIgSUfl7bdX2f9C4L8lvSVPqvIt4CaAPC7tdtIN4TkrUCYzaw0NGety68WLwFcl9c9L/IwiV2oj4nngHuCHOa93AAeQY6GZWZmGjHWZ7+tagCu3VlcRMQb4OnA56Wle6clayYmkLisvAn8H2n2SJukWScdWOdcbwCeBQ4AZwBeBT+btpUXIbykccjLwL+BZ4Cng38CpOe1wYBPS2LM5pVdnr9vMWkuDx7r9gL2AycBYYBHppq/kQNLSGFOBvwDHRcRtHV+1mbWaBo91vq9rAVp2gjGz+pP0EnB4RPyj3mUxM+spjnVm1goc66w3ueXWzMzMzMzMmp4rt2ZmZmZmZtb03C3ZzMzMzMzMmp5bbs3MzMzMzKzpuXJrZmZmZmZmTc+VWzMzMzMzM2t6rtxaU5N0kaRTapzncEn3SZoqaYakf0r6QCH9AEnPSJop6XVJF0sa2k5+/SSdIukVSbMl/VvSGjltlKSHJc2SNEHSGZL61/J6zKz51SPW5X02kXRTjl1TJJ3RTn77SHoirw95v6QtC2nnFNeOlLRQ0uxaXo+Z9Q11jHffkjQp35NdIGlQlbx2kHSrpGmSJku6WtK6hfTv5lg4W9KLkr5by2ux9rlya31aNyuKc0gLgY8A1gR+AtxYyOs+4AMRsTppwe/+QHtB+ERgJ2BHYChwMLAgp60KfBMYDmwP7A58pxtlNrMW1hOxTtJA4FbgdmAdYAPg0irn3xy4DDgSWAO4EbihlFdEHBkRQ0ov4Arg6m6U2cxaXA/Fuz2BY0j3YRuT7u9OrJLXmsC5wMi872zgwmIRgUPyfnsBR0k6oBtltm5w5dbaJeml/ATqMUlzJZ0vaW1Jt+QnUv+QtGZh/x3yE/sZkv4jabdC2mGSnsrHvSDpK4W03XLL5bdza+irkg7roGxHAAcB38stATcWyvx9SY8Bc7saBCNiQUQ8ExFtpAC1hBSg1srp4yNiSuGQJcBmVcq4Jqny+uWIGBfJExGxIOd1dkTcExFvRMRE0s3hByrlZWY9x7Fu+VgHHAq8EhG/iIi5ef/HqmS3J3BPRNwbEYtJN47rAx+scD2Dgf2Bi7tSXjOrDce7ivFuFHB+RIyJiOnAyaQYWCmvWyLi6oiYFRHzgLMo3LtFxBkR8UhELI6IZ4Dr8b1dr3Hl1jpjf2APYAtgH+AW4FjS06+VgKMBJK0P/IXUirkWqQXyT5JG5HxeBz5Oar08DPilpPcWzrMOsDrphuhLwG+KwbVcRJxLqgyekVsD9ikkHwh8DFgj32gtQ6mb3THtXXQOoAuAG4DzIuL1QtrOkmaSntbtD/yqSjbvBBYDn1bq6vKspK+3c9pdgTHtlcvMeoxj3bKxbgfgpXzDO0XSnZLe2V5WZe8FbF1hv/2BycDd7ZXLzHqU492y8W4r4D+FXf8DrC1pWHv5ZVXv3SQJ2KVautWex/ZZZ/w6Il4DkHQP8HpE/Dt//jOpCwfAF4CbI+Lm/PlWSaOBjwIXR8RfCnneJenvpD/4R/K2RcBJOWDdLGkO8DbggW6U+cyIGF8tMSI+3lEGEfEuSSsDnwIGlqXdC6yeg/6XgZeqZLMBKahvAbwV2By4TdKzEXFrcUdJXwS2Aw7vqGxm1iMc65aNdRsA/wV8ArgN+AZwvaS3R8QbZdn8A/hJbtG5H/h+zmvVCqccBVwSEdFR2cysxzjeLRvvhgAzC59L71cDplbLT9K7gP8F9q2yywmkhwUXVkm3GnPLrXXGa4X38yt8HpLfbwx8JndbmSFpBrAzsC6ApL0lPaA0AH8GKTAOL+Q1texJ3LxC3l1VNfh1Re7GcgVwjKR3V0ifCPwV+GOVLObnnydFxPzcpe+PpGtfStIngdOAvcu6PJtZ73GsWzbWzQfuzV3w3gB+BgwD3lHh+KdJldazgFdJ1/skMKG4n6SNgN2AS2pRbjPrNse7ZePdHFLrc0npfdWJ7yRtRmrx/kZE3FMh/SjS2NuPRcTCWpTdOubKrdXSeOAPEbFG4TU4Ik5XmnHuT6Sbo7UjYg3gZpbtxtYd1Z7817pFYABpcoFK+gObVkkrjU8rlmeZsknaC/g9sE9EPL4ihTSzXtEqse6xruQfEddExNYRMQw4njTZyr/KdjsYuC8iXqhBWc2s57VKvBsDFBsx3g28FhEVW20lbUzqsXJyRPyhQvoXyRNURcSE8nTrOa7cWi1dCuwjaU+l5W9WzpMJbEDq+jGINM5qsaS9gY/U4JyvUb3S2S154oSdJQ2UtIqk7wNrAw/m9INy60MpuJ1K6rK3nIh4HrgH+KGkQZLeARwA3JSP/xBpbMn+EfFQLa/DzHpMS8Q60nXuIOnDkvqRJsebAjxVJb9t8/cxgjST6A25RbfoEOCiWl6HmfWoVol3lwBfkrSl0nKNP6JKrMpD0m4HzoqIcyqkHwT8GNjDD/J6nyu3VjN5HMS+pAkJJpOe9n0XWCkiZpMmJ7gKmA58njSYf0WdD2yZu8pc19mD8gQpx1ZJHgT8hjTGYiKpi83HIuKVnL4lcL+kuaRlgZ4hjbutlveBpG49U0mTMhwXEaXK8HGkMbk36831H2/p7HWYWe9rlViXZ/n8AnAO6Vr2BT5RGm9bIe//A2aQYuJ0CnEx778jaRyvlwAyaxItFO/+CpwB3AG8DIwj9UAp5T0mV1ohzY2yCXBC4d5tTuFcp5CGcPyrkL5cJdh6hjyfg5mZmZmZmTU7t9yamZmZmZlZ03Pl1hpe7goyp8LroI6PNjNrDo51ZtYqHO+sp7hbspmZmZmZmTU9t9xaU5EUeV0xJJ0j6bhu5nOopHtrWzozs+VJukjSKXU6t2OmmfWYYoypw7lH5vP3z59vkTSqm3mdIOnS2pbQ6sGVW+txPXVTFBFHRsTJtc63FiS9JOnDK5jH5yWNkzRX0nWS1qpV+cwsacZKm6Q7JR3e1eMcM80MmjPudUZE7B0RF9e7HJXU4iGApG9JmiRplqQLlNYZtjKu3Jo1IElbAb8DDiatwzYP+G1dC2VmdaXE/29X4JhpZn2ZpD2BY4DdSctLbgKcWNdCNSj/J2lL5Sfn35H0mKSZkq6UtHIh/cuSxkqaJukGSesV0kLSkZKey+uS/SbfiL2DtEbijnmigBl5/4tyF7lbJc2WdJekjbtY3mW6+kn6rqRXJb0i6Ytl3fGG5TLPkvQQsGknz7FVLuM0Sa8pr5+Wu69cJemSXP4xkrbLaX8ANgJuzNf8va5cV3YQcGNE3B0Rc0jr4e4nabVu5GXW9Bo9PuX8finp9RxnHpe0dWGXNSX9Jef3oKRNC8fuJOlf+br+JWmnQtqdkk6VdB+pwvYHYBfgrFzms7rwHTpmmjWRRo97Fcq7ev4bn6zUi+JHyg/klFuLJf1M0nRJL0rau3DsWyXdnc/9j1zeLnUTVqFXi6R++VxTJL0g6etatgvzW/M1zpZ0KzC8k+fYWdL9+TsdL+nQvP2iXObl4ryku/Ph/8nf+ee6cl3ZKOD8iBgTEdOBk4FDu5FP3xcRfvlFRAC8BDwErAesBTwFHJnTPgRMAd5LWgj718DdhWMDuAlYg3STMhnYK6cdCtxbdq6LgNnArjm//yvfp0oZA9iskMcp+f1ewGvA1sBg4PKyff9IWmR8cN5nYkfnA1YDXgW+DaycP2+f004AFpAWAe8HnAY8UPZdfriD/GcAO1dJux74ftm2OcC29f498cuverwaPT4BewIP53MIeAewbiG/qcD7gf7AZcAfc9pawHRSi2N/4MD8eVhOvxN4Gdgqpw/I2w7v5PfmmNkAv79++dWdV6PHvcJ5SnHjkvy3uBowEngW+FLhnIuAL+cY8FXgFd6c3PafwM+AgcDOwCzg0g7OPTKfv3/+vDQ2AkcCTwMb5u/ujrJ9/wn8Il/rrvnaOzrfxnm/A0mxeBiwTeH7qxjny7+nKnlvlGPcRlXS/wN8rvB5eM5zWL1/Txvt5ZZbK3dmRLwSEdOAG4Ft8vaDgAsi4pGIWAj8gPTUb2Th2NMjYkZEvEwKItvQvr9Eesq+EPhhzm/Dbpb7s8CFEfFERMwl3UgB6ekdsD/wvxExNyKeADozJuPjwKSI+HlELIiI2RHxYCH93oi4OSKWkFpT3t2VAkfEGhFRbczLEGBm2baZpP8wzFpVI8enRaS/z7eTbtaeiohXC+l/joiHImIx6aandP6PAc9FxB8iYnFEXEG6IduncOxFkZ7WL46IRR2Uu7McM82aQyPHvaVy3DgA+EH+238J+DnpwV3JuIj4fY4BFwPrAmtL2gh4HynmvJH/zm/ozHnb8VngVxExPn93pxXKWjrfcRGxMCLuJn23Hfk88I+IuCIiFkXE1Ih4tJBeLc53KCJezjHu5Sq7lMe40nvHuDKu3Fq5SYX380h/TJCeGo4rJUTq9jUVWL8Tx1Yzviy/afk83bFeMb9iWYERpKdo1dKr2RB4vp308utdudTdpQbmAEPLtg0lPTE0a1UNG58i4nbgLOA3wOuSzpVU/BvuVNmzcWVlH0/tOWaaNYeGjXtlhpNaM4uxojyWLS1PRMzLb4fkc0wrbFumLN3UXoxbD5ieH+xVSq+mqzGuo++7K8pjXOm9Y1wZV26ts14hdccAQNJgUneMiZ04ttpiykufBkoaQuo28ko3y/dqMT9S946SycDidtKrGU8asN8dK7qA9BgKrRqSNiF1nXl2BfM164saIj5FxJkRsS2wJbAF8N1OnH+ZsmcbsWzZy8tYiwXqHTPNmltDxL2CKaQeLMV4Vh7LqnkVWEvSqpXK0k3txbhXSfMgDK6SXs14Ojn/QA9YJsbl969FxNQ6ladhuXJrnXUFcJikbZSmHv8x8GDudtKR14ANJA0s2/7RPDB/IGlg/AMR0d0ndVcBh0raMgfH40sJufvLtcAJklaVtCVpYH5HbgLWlfRNSYMkrSZp+06W5zW6f5MHqTvLPpJ2ycH3JODaiPATOrPl1T0+SXqfpO0lDQDmksaXtnXi/DcDWygtY9M/TzSyJSn+tFfmFYkv4Jhp1uzqHveKcty4Cjg1/+1vDPwP0OGkUBExDhhNijkDJe3IskMzuuMq4GhJG0hakzTTcPn5Tszn27mT57sM+LCkz+Z4PUxSZ7ser2iMuwT4Uo7ZawA/Io3ztTKu3FqnRMQ/SLNP/on0xGtT0tiKzrid9MRpkqQphe2Xk26opgHbAl9YgfLdAvwqn2ts/ll0FKl7yCRSMLiwE3nOBvYgBbxJwHPAf3WySKcBP8qz6X2n0g55xrxdqpx7DGkyhMuA10ljKr7WyXObtZQGiU9Dgd+TJoMaR+oe+NNOlH0qaazqt/Mx3wM+HhFT2jns/4BPK804emZH56hyXsdMsybWIHGv3H+THu69ANyb87ugk8ceBOxIioOnAFcCC7t4/qLfA38jTcT0COmBXdHnge1J13o8qfLYrjwe9qOkeD0NeJTOzx1wAnBxjnGfLU+UtFGOcRVbkCPir8AZpLHTL5P+nzm+0r6trjRDmVmvknQRMCEiftSD5whg84gY21PnMLO+pzfiUyNyzDRrXY0W9yRdCTwdETWpwOWJtl4EBuQJn6yPcsutmZmZmZnVTR7asamklSTtBewLXFfvclnzceXWGkoeLzWn0qsvnM/MmlcjxgvHTDPrSb34N78OaZ3aOcCZwFcj4t+SDqpy/jE1Pj8AvX0+qz13SzYzMzMzM7Om55ZbMzMzMzMza3q1Wjy9YQwfPjxGjhxZ72KYWYN5+OGHp0TEiHqXo1Yc68ysEsc6M2sF1WJdn6vcjhw5ktGjR9e7GGbWYCSNq3cZasmxzswqcawzs1ZQLda5W7KZmZmZmZk1PVduzczMzMzMrOm5cmtmZmZmZmZNz5VbMzMzMzMza3qu3JqZmZmZmVnTc+XWzMzMzMzMmp4rt2ZmZmZmZtb0XLk1M+sBkr4laYykJyRdIWllSW+V9KCksZKulDQw7zsofx6b00fWt/RmZmZmzceVWzOzGpO0PnA0sF1EbA30Aw4AfgL8MiI2A6YDX8qHfAmYnrf/Mu9nZmZmZl3gyq2ZWc/oD6wiqT+wKvAq8CHgmpx+MfDJ/H7f/Jmcvrsk9WJZzczMzJqeK7dmZjUWEROBnwEvkyq1M4GHgRkRsTjvNgFYP79fHxifj12c9x9Wnq+kIySNljR68uTJPXsRZmZmZk3GlVszayrjp83jiEtGM/+NJfUuSlWS1iS1xr4VWA8YDOy1ovlGxLkRsV1EbDdixIgVzc7MGtiCRUvY59f38qeHJ9S7KGZmPebEG8dw73NTapafK7dm1lR+fPNT/P3J17j96dfrXZT2fBh4MSImR8Qi4FrgA8AauZsywAbAxPx+IrAhQE5fHZjau0U2s0ayuC14fOJMps5dWO+imJn1mAvve4kvnP9gzfJz5dbMmsrA/ilsLVzcuC23pO7IO0haNY+d3R14ErgD+HTeZxRwfX5/Q/5MTr89IqIXy2tmDaYth4CVPPzezKzTXLk1s6YyeXZqxbj+0VfqXJLqIuJB0sRQjwCPk2LtucD3gf+RNJY0pvb8fMj5wLC8/X+AY3q90GbWUKIt/XTl1sys8/p3vIuZWeMo3ecN6t/Yz+Yi4njg+LLNLwDvr7DvAuAzvVEuM2sOS3LLbb+VXLk1s76pra32ndQ6vDuUtKGkOyQ9KWmMpG/k7WtJulXSc/nnmnm7JJ0paaykxyS9t5DXqLz/c5JGFbZvK+nxfMyZpSUwqp3DzFrXJ969HgDf2mOLOpfEzKznvNktuc4FMTPrIW2FEVi1quh2puljMfDtiNgS2AH4uqQtSd3mbouIzYHbeLMb3d7A5vl1BHA2pIoqqRVje1LLxfGFyurZwJcLx5VmFa12DjNrUf1WSmFr8EB3PDGzvqt0o7eSa7dm1kcV67Mz5y+qSZ4dVm4j4tWIeCS/nw08RVqTcV/g4rzbxcAn8/t9gUsieYA0O+i6wJ7ArRExLSKmA7cCe+W0oRHxQJ5A5ZKyvCqdw8xaVGmeJQ9DM7O+rHTT5zG3ZtZXFVtue61yWyRpJPAe4EFg7Yh4NSdNAtbO79cHxhcOm5C3tbd9QoXttHMOM2tRnkLYzFqBuyWbWV83d+Hipe97vXIraQjwJ+CbETGrmJZbXHv0nrO9c0g6QtJoSaMnT57ck8Uws3ortWb4js/M+rAlbV4KyMz6tk/99v6l73u1citpAKlie1lEXJs3v5a7FJN/vp63TwQ2LBy+Qd7W3vYNKmxv7xzLiIhzI2K7iNhuxIgRnbkkM2tSE6bPA8C3e2bWl4W7JZtZH/fytHlL359+y9M1ybMzsyWLtAbjUxHxi0LSDUBpxuNRwPWF7YfkWZN3AGbmrsV/Az4iac08kdRHgL/ltFmSdsjnOqQsr0rnMLMWdebtYwGPuTWzvq3NSwGZWQtZsHhJTfLpzHSjHwAOBh6X9GjedixwOnCVpC8B44DP5rSbgY8CY4F5wGEAETFN0snAv/J+J0XEtPz+a8BFwCrALflFO+cwsxa3pAfWRjMzaxRLPHmembWQC0a9ryb5dFi5jYh7qd4DcPcK+wfw9Sp5XQBcUGH7aGDrCtunVjqHmdmCRW31LoKZWY+J8JhbM2sN+71nfUYOH1yTvLo0W7KZWaNYeYDDl5n1XQsXpwd4/Ru4W7KkDSXdIelJSWMkfSNvP0HSREmP5tdHC8f8QNJYSc9I2rN+pTezelt1YD8Aps97o2Z5+u7QzJrKLpsPB2CDNVetc0nMzHrOpJkLAFhn9ZXrXJJ2LQa+HRFbAjsAX5e0ZU77ZURsk183A+S0A4CtgL2A30rqV4+Cm1n9rZvj2/Ahg2qWpyu3ZtZUBvZbia3WG1rvYpiZ9ahFS1K35EH9G7fuFxGvRsQj+f1s4Clg/XYO2Rf4Y0QsjIgXSfOzvL/nS2pmjeht66wGwAmf2Kpmebpya2ZNJfAYNDPr+5pttmRJI4H3AA/mTUdJekzSBXmVDEgV3/GFwyZQoTIs6QhJoyWNnjx5cg+W2szqqa0N3rb2agwe1Jk5jjvHlVszayoTp89n1oLaLPRtZtaoSjPC92uCOzVJQ4A/Ad+MiFnA2cCmwDbAq8DPu5JfRJwbEdtFxHYjRoyoeXnNrDG0RdR8RvjaVZPNzHrBM6/NrncRzMx6XKly2+g9VSQNIFVsL4uIawEi4rVC+u+Bm/LHicCGhcM3yNvMrAUFoBrHuCZ4HmhmZmbWWkqV2/4rNe6tmtJd6fnAUxHxi8L2dQu7fQp4Ir+/AThA0iBJbwU2Bx7qrfKaWWOJCGo98sItt2ZmZmYNZklpndvGrdsCfAA4GHhc0qN527HAgZK2ITXMvAR8BSAixki6CniSNNPy1yNiSa+X2swaQlvUvneKK7dm1lQG9V+JPbdap97FMDPrUW+OuW3cbskRcS9QqYA3t3PMqcCpPVYoM2sabT3QctvYzwPNzMqsMrAfa646oN7FMDPrUfPfSA2a/Rp8zK2ZWXe1pUG3Nc3TLbdm1lQWLwn6N8P0oWZmK+Ckm54Eaj/ZiplZI3hh8hzufrb2S335DtHMmsritjb6N3A3PTOzWhpSw/UfzcwawRuL2/jQz+/qkbxduTWzprKkLRp6DJqZ2YoYP20e46bO5aDtN2L4kIGsMrBfvYtkZlZTCxb33DxyfhxoZk1jSVuwaEkwf5En1zSzvmmXM+4A4ID3begHeWbWJy1eEj2Wt1tuzaxp/H3MJAAuvO+l+hbEzKyHLVoSDb3GrZlZdy1e0rb0/e5vf0tN83bUNLOmUVr30cysr/vTIxPccmtmfdLitjfv576w48Y1zduVWzNrGs0ysYqkt0l6tPCaJembktaSdKuk5/LPNfP+knSmpLGSHpP03npfg5nV36JC64aZWV/hbslmZsDwIYMAOG2/d9a5JO2LiGciYpuI2AbYFpgH/Bk4BrgtIjYHbsufAfYGNs+vI4Cze7/UZtZoXp25oN5FMDOruUVtbz64mzV/UU3zduXWzJpGqVfyiFzJbRK7A89HxDhgX+DivP1i4JP5/b7AJZE8AKwhad3eL6qZmZlZz1pS6JY805VbM2tVj06YAYCaaxjaAcAV+f3aEfFqfj8JWDu/Xx8YXzhmQt62DElHSBotafTkybVf+NzMGstbVmuqB3lmZp1SGnIxdOX+7PfeDWqatyu3ZtY0jrvuCaB5KreSBgKfAK4uT4uIALo06CQizo2I7SJiuxEjRtSolGbWSFYrzC3w+uyFdSyJmVnPKI25/dUB29R8PhVXbs2s6Ygmqd2msbSPRMRr+fNrpe7G+efreftEYMPCcRvkbWbWYoauMmDp+3esO7SOJTEz6xml2ZL79cByZ67cmlnTaaIZRA/kzS7JADcAo/L7UcD1he2H5FmTdwBmFrovm1kLWW3lN1sxLjt8+zqWxMysZ5TWuR3QA8udNce6GmZmBfMXLal3ETokaTCwB/CVwubTgaskfQkYB3w2b78Z+CgwljSz8mG9WFQzayCD+qd2h09vuwFrDR5Y59KYmdVeqeW2f7/at7O6cmtmTWfeG41fuY2IucCwsm1TSbMnl+8bwNd7qWhm1sAC2HGTYfxk/3fVuyhmZj3izW7JtW+5dbdkM2s6zVC5NTPrjrYIVhnYr0du+szMGsHSbsn9XLk1M2P+G4vrXQQzsx4RQfNMmWdm1g2Llrjl1syM9ddYBYCdNhte55KYmXXfzPmLOPbPjzN34fIP6iKaZ7kzM7PuWJK7JQ/ogTG3rtyaWVN4eeo8tlxvKJuOGMx7N1qz3sUxM+u2S+5/icsffJkL7n1xubQA5NqtmfVhi9tSt+T+ni3ZzFrR/DeWsOtP7wBgs7cMqXNpzMxWzOBB6fZr8pyFy6VFhLslm1mfVuqW3N/r3JpZKyo94QOPRTOz5lda4mfqnDeWS3O3ZDPr60oTSvX3hFJm1oqi8P651+fUrRxmZrXw4IvTAJg6N7XcRsTSMWhBsJJrt2bWh725zq0rt2bWgiI63sfMrFlc8dDLAMzJE0oddN6DvP24WwBoc8utmfVxS1tue6Bbssfcmlnjc+XWzPqg+XnN7vufnwpAW1vkMbeu3ZpZ3+WWWzNraW1uujWzPmSXzdNyZuXdjyfOmJ+e5blua2Z9WKlyO8ATSplZK3LV1sz6ktL42okz5tPWFgwe2A+AsZPnQCxf6TUz60vOuyctg9avB5YCcuXWzBpeuOXWzPqQRXm82bw3lvDKzPmMHD4YgBcmz6XNSwGZWR83JS+DNsDdks2sFbW5bmtmTWrRkjauGj1+aWvtBfe+yL9emr40/fXZCxm68gAATr7pSV6aOs8TSplZS1APBDtXbs2s4UWhY/LOmw2vY0nMzLrm8gdf5nvXPMblD44D4KSbngRgnaErAzBl9sLljnHd1sz6ogWLlnD6LU/36DlcuTWzxldouV0lj00zM2sGj0+cCcDYsjW6h682EIDJcxaypGzoRf9+vj0zs77n6tHjOeeu53v0HI6eZtbwit2ST/zEVvUriJlZF13z8AQAJkyfv8z2BYvSuNsps9/wvAJm1hJWGfjmKrRDBvXMirSu3JpZwyt2S15j1QF1LImZWdeUlv0pH1o2cfp8Vl9lAFPnLlw6Hrdk7sLFvVU8M7Nes9bgN+/hjt59sx45hyu3ZtbwSo0ae2+9DqsO7JknfWZmtfb4hJnc89wUACbOWADAuqunsbbzFy3h/9m78zi5qjL/45+nqnrvdGfrdPY9gbCFJYZVQBDFgIIbAzKaQcb4U3R00N+IzvhDBxecGcdxRRFQcETEhTEOiEZARQhLwp4FErKv3elOOr3Xcs/vj7pVXZ3uTrqT6rpV1d/365VX33vuqeon+uLmPvec85xx1aU0tUX7DP0nfgAAIABJREFUFM1r7GcdrohIoQtn7Gv7141Nw/I7lNyKSN7z/Oz2TcdNCDgSEZHBe+zVhvTxtqZ2nHNE/K0v7vngYsZXl7GvrZuDnbFen9t5oPcUZhGRYuBlLMGYMrpiWH6HklsRyXupe6G2xxCRQjImYxlFezRBU3sUz4N3nz6V8+fXMb66lH1t3Wza197rc8dNHJXrUEVEhp2XMU3l7984a1h+h+b3iUje60luld2KSOHInIIHsK25A+ccIf9WNnVMJQ+9vCd9fcutl7F210Gmjh2eEQ0RkSBlLsEYU1k6LL9Dya2I5L1UQSmltiJSSD73wMu9zrc1dZBwjpD/oq6uuqzPZ06YXJOT2EREci1VPO/cueN6zWzJJk1LFpG8lxq5DemOJSIFygy2NnXgOQj5Q7dLTpkUcFQiIrmT2vbsXy47Ydhm4+lRUUTyXqoAgWnsVkQK0I+vewMTa8rZ2tzea1py/aiekdtLTqgPKDoRkdxITUsOh4bveU7TkkUk76WWaGjJrYgUkqljKlg8cywXHjeB3S1d/Pq5nQDpacmRcM8Yw9+dMzOIEEVEcibhD1YMY26rkVsRyX+FWFDKzEab2S/NbL2ZrTOzs81srJmtMLMN/s8xfl8zs2+Z2UYze8nMTg86fhE5dvFEz9Y/mSMV/Y1aDOdIhohIEC771uO87ZuPp8+b25J7eIeG8XlOya2I5D3nCrKg1DeBh51zxwMLgXXATcAjzrl5wCP+OcDbgHn+n2XAbbkPV0SyLe556dHZhz/xxn77lPjJb6QAk1szm2Zmj5nZWjNbY2af8Nv1Ik9EWLPrIOt2H0yff+G3awEltyIywhXatGQzqwXOB+4EcM5FnXMHgCuAu/1udwNX+sdXAPe4pKeA0WamSjMiBS6WcJT4SeucumrKIsnHrlRCC1BREgYKduQ2DnzKOXcCcBZwg5mdgF7kiUiGeMLrfe55A/Q8dkpuRSTvpaslF0p2C7OARuBHZva8md1hZlVAvXNut99nD5CqIDMF2J7x+R1+Wy9mtszMVpnZqsbGxmEMX0SyIZ7oGbkNhYxZ46uA3vvfVpcly59ECrAcvHNut3PuOf+4leQMlSnoRZ6IZNjbmpyOfO7ccUDyZd9wKbw7qYiMOF7hTUuOAKcDtznnTgPa6Rm5AMAl51q7fj47IOfc7c65Rc65RXV1dVkLVkSGR9xzvaYbL5iU3MM2c+R26phKAA50RnMbXJaZ2UzgNOBp9CJPRDK0dsUAqCyNcPzEUcNaQ0XJrYjkvZ6CUsHGMQQ7gB3Ouaf981+STHb3pkYp/J8N/vWdwLSMz0/120SkgMW9noJSAPPrRwHQEU2k2754xYmcPKWWU6eNznl82WJm1cCvgE865w5mXtOLPBFp64rjnCOe8CgJD2/6qeRWRPKe85+LCqVasnNuD7DdzI7zmy4G1gLLgaV+21LgN/7xcuADfrGVs4CWjFEPESlAzjkSnus13bi+JrmvbaM/RQ+So7m//fh5jCovyXmM2WBmJSQT2586537tN+tFnoiktXbHeeO/PcZjrzby8s6WYf1dR0xuzewuM2sws1cy2r5gZjvN7AX/z5KMa5/1q+C9amZvzWi/1G/baGY3ZbTPMrOn/fafm1mp317mn2/0r8/M1l9aRApLeuQ22DCG6uPAT83sJeBU4CvArcAlZrYBeLN/DvAQsAnYCPwQ+GjuwxWRbIolkjeuzCnIdaP6JreFzJJvHO8E1jnn/jPjkl7kiUh6WcZ1P3qWHfs7c/M7B9Hnx8B3gHsOaf+Gc+4/Mhv8CnlXAycCk4E/mtl8//J3gUtITtd71syWO+fWAl/zv+s+M/s+cD3J6nnXA/udc3PN7Gq/398cxd9RRApcIe5z65x7AVjUz6WL++nrgBuGPSgRyZlUNdBIOHPkthyAhDekWbr57Fzg/cDLZvaC3/Y5ki/u7jez64GtwFX+tYeAJSRf5HUA1+U2XBHJpaqyCC2dsZz+ziMmt865vwxh1PQK4D7nXDew2cw2Aov9axudc5sAzOw+4AozWwdcBLzP73M38AWSye0V/jEk16t9x8zMpTa8FJERIzUtuTB3yhCRkSg1cptZUGrehGr+6dLjeMfCyUGFlVXOub8y8KQavcgTGaE6owmWv7iTipJwn+T2gvnDu47+WNbcfszfgPuu1ObcDFwFb6D2ccAB51z8kPZe3+Vfb/H796GqeiLFzSu8glIiMsKl9nXMLJ5iZnz0wrnpCskiIsXoric285lfvcyeg119rsUSw7fHLRx9cnsbMIfkOrLdwNezFtFRUFU9keKWmrBRSNOSRWRkS009DmvKiYiMMFWl4QGvNQxzzYGjSm6dc3udcwnnnEey+Elq6vFAVfAGam8iuYF35JD2Xt/lX6/1+4vICOMVZkEpERnBYl7fglIiIiPBmKrSAa8N9wrTo0puU+Xdfe8EUpWUlwNX+5WOZwHzgGeAZ4F5fmXkUpJFp5b7ay8eA97jf/7QinqpSnvvAR7VeluRkUojtyJSWFLTkjO3AhIRGQniif5TtlFlEX74gf5qbWbPEQtKmdnPgAuB8Wa2A7gZuNDMTiX5xLkF+DCAc26Nmd1Pcj/HOHCDcy7hf8/HgN8DYeAu59wa/1d8BrjPzL4EPE+ypDz+z5/4RamaSSbEIjICpV5raXafiBSKpzYlJ5vpnZyIFKOG1i6ica9PDYGWzhif+sWL/X7muvNmMbuueljjGky15Gv6ab6zn7ZU/y8DX+6n/SGSJeAPbd9Ez7TmzPYu4L1Hik9Eil/PtGQ9JYpIYfjMr14GYHtzbvZ2FBHJpfO+9hjRuMeWWy9Lt93x+Ca+9OC6AT/T0E+BqWzTXBkRyXs9BaUCDkREZJAm1yb3tC2J6MYlIsUnGk8uvcisfvy1h9cf9jM7Dwz/yz4ltyKS9xJOVUdFpLBc7u9l+8FzZwUciYjI8Nna1J4+nui/1BtIW3f8sNez4YjTkkVEgqYtNUSk0ETjHjXlEcpLBt4SQ0SkUJVFQnTHPV7ZeZBZ46sJh4zWrv6T15WfvYj7ntnOFadOHva4NHIrInkvldyGNC9ZRArEjv2dTKg5/CiGiEihmjKmAoBP/vwFPv2LF+mOJzjQEeu376TaCv7xkvnDXkwKNHIrIgXA07RkESkw3fEENeV6zBKR4jSqrOf+9sDzO1m762Cv65Nry9nVMvwFpA6lu66I5L1UrYKIklsRKRDxhNMetyJStF7c0dLr/NW9rVSXRThhcg2l4RB3LF3Ejfe/wPnz6nIal5JbEcl7CS+Z3WpasogUioTnNNtEREaUtu44p00bzWeXLADge9eekfMY9EpRRPJeauRWD4oiUijinkckrHuWiIwsQT+rKbkVkbzXsxVQwIGIiAySRm5FpFg5/7ks5cLjeqYeB72ETI+KIpL3fvviLgDCWr8mIgXgov/4Ey/uaGFPAMVURESGWyyRTG4rS5NbnR1XP4pz5owDIJpwA34uF/SkKCJ5K57wuO5Hz7Bi7V4AwlpzKyIFYNO+dgDW72kNOBIRkeyL+7VQJtUmtzvbe7CL9y6aCsD2/R2BxQUqKCUieWzd7lYee7Uxfa6BWxEREZFgxb3k6OySkyfxu1f2sOz8OTiSbfMnjAoyNCW3IpK/ykp6Z7NavyYiheRzS44POgQRkayLxZMjt+OqSvnjjRcAyXW4v/rI2SyYVBNkaEpuRSR/VZSEe51rWrKIFJKqMj1miUjx2e3XExhXXZZuMzPOmDE2qJDSNMlPRApGahqMiEg+q/aT2nefPjXgSEREsq8rlgCgtqIk4Ej6UnIrInnrkErzVJVqFERE8p8B1507k/JDZp+IiBSD1FhDPi4XU3IrInnLy8huv/E3C6mtzL83hCIih0o4F/hejyIiwyXhZ7f5uFpMya2I5I3X9rYy86YHWb21GYC7V24BYNn5s3nnaZreJyL5zTnH+j0H6YgmCCm5FZEi5fzBh3yshaI5fiKSN57cuA+A5S/s4owZY/nRE1sAmDehOsCojo6ZbQFagQQQd84tMrOxwM+BmcAW4Crn3H4zM+CbwBKgA/g759xzQcQtIkdne3MHb/y3x9Ln+fjQJyKSDQk/uc3Hl3gauRWRvFHpr6lt6070am/tigcRTja8yTl3qnNukX9+E/CIc24e8Ih/DvA2YJ7/ZxlwW84jFZFjsq25o9d5SMmtiBSp1LTkfLzPKbkVkbzQ1h3n3//wKgAHu2K9rkUTXhAhDYcrgLv947uBKzPa73FJTwGjzWxSEAGKyNE5tGro1kOSXRGRYhBLeNz5182ACkqJiAzoW49soLG1G4CWzhh7/D3UAJ7e1BRUWMfCAX8ws9Vmtsxvq3fO7faP9wD1/vEUYHvGZ3f4bb2Y2TIzW2VmqxobG4crbhE5Ct4h5d2PnzgqoEhERIbPL1fv4PENyWVkeZjbKrkVkfxw+182pY8Pdsb4nxd2ps8nj64IIqRjdZ5z7nSSU45vMLPzMy+6ZDWGIW3c65y73Tm3yDm3qK6uLouhisixSmTsw338xFF8+PzZAUYjInLsPM9x489f4H9f2sUXlq8hGvfYdaAzfT0fpyWroJSI5J2WzhhjMrb9ueWKkwKM5ug453b6PxvM7AFgMbDXzCY553b7044b/O47gWkZH5/qt4lIgcjIbYl7jkhY4wciUrg8z/FPv3qJXz+/k18/n3wkOWVqLd9+dGO6Tz4mt7rzikjeae+O91q/lo/V+A7HzKrMbFTqGHgL8AqwHFjqd1sK/MY/Xg58wJLOAloypi+LSAHInJa8saEtwEhERI7dtx/dyC9X7+jV9npj73tbPq651citiOSFaWMr2N6cnOrSFfMoi4QDjuiY1AMPJHf4IQLc65x72MyeBe43s+uBrcBVfv+HSG4DtJHkVkDX5T5kERmqprZuPAd1o8p6TUsWESl03/jja33aNjW29zpv64716RM0Jbcikhfm1FWnk9towsMNbTlqXnHObQIW9tPeBFzcT7sDbshBaCKSJc9t28+7vvckAEvPnsGCSTXpa+87c3pQYYmIHLOOaP9bMGYmt8dPHMWJk2tzFdKgKbkVkbxw6KiH5+/+89/XnxlANCIih5eq7g5w98qtva61dOTfaIaIyGBde8fT/bZnTkv+z6tOpbwk/2bZac2tiOSFeKJ3crv8xV0AjK4s6a+7iEigSsIDrzX7yIVzchiJiEj23Pv0Np7fdqDfa/GMgYgFk/JzuzMltyKSFw4duU0lt65wZyeLSBFLeP233/V3izhpSv5N1RMRGYzVW/f3Ot9y62V9+vzDRXOxPKyUDEpuRSQPfPoXL/LMluZ+r7XmYbECERFvgDdvoytLcxyJiEj2nDSlp37At685rd8+3/vT67kKZ8iU3IpI4A4tNZ+pozuRw0hERAbHG6A68unTx+Q4EhGR7MmcSfe2kyYC8NinL+Tzl5+Qbp85virncQ2WklsRyWsXHFcXdAgiIn30l9vm4ZaPIiJDkkpuP3zBbCLhZKo4a3wV1583K93n0285LpDYBkPVkkUkb00fW0lJWO/gRCT/JPxpydPHVrKtuYMbL5nPuXPHBRyViMix+dkz2wC48ZL5A/aJ5PGbPCW3IpK3wnl88xSRkc35ye0P3n8GpZEQc+qqA45IROTYtHbF2NLUAUAk1HdwoTQcIprwCB+mWnzQNCQiIoEbX10GJKf0XXJCfbpdua2I5KvU1L2KkrASWxEpCrGMbRn7ewar9bdnDOdppWRQcisiAdjfHuX+Z7enz8dVJauLeg7+zwWz0+2hPL55isjIllpzO5LvU2Z2l5k1mNkrGW1fMLOdZvaC/2dJxrXPmtlGM3vVzN4aTNQiMpB4xh5n/W31M8ZPbjUtWUQkw2m3rADgpCm1nDC5htH+zRKguqzn+PXGtpzHJiIyGKmtgPqZuTeS/Bj4DnDPIe3fcM79R2aDmZ0AXA2cCEwG/mhm851zKokvkieiA23g7UttddZ/rfj8MLJvySKScy2dPfvWNrZ1Az0jH19+50lUl/e8cxtgpw0RkcCltgIaySO3zrm/AP1vUt7XFcB9zrlu59xmYCOweNiCE5FB8zzH1x5ez479nQB8/KK5/fZLzbTb3xHNWWxDpeRWRHJq9dae56Cldz0DJEdAzpw1lmvPnMGkmnLm12v9mojkt9TLNxW+69fHzOwlf9pyauPfKcD2jD47/LY+zGyZma0ys1WNjY3DHavIiPfq3lZu+9PrXH37UwDMrx/Vb7/UPt5VZfk7+VfJrYjk1DdWbOjT5lzP6EcoZHzt3afkOiwRkSF5eWcLoOS2H7cBc4BTgd3A14f6Bc65251zi5xzi+rqtNe5yHArLwn3Oh9oG8brz5vFvR86kwvn5+9/l0puRSSnUg+EmRLO9Vq3VlNR0qePiEi+WLf7YHovyLKIHqUyOef2OucSzjkP+CE9U493AtMyuk7120QkYIlD1oGVDLDVTyhknDNnfL/FpvKF7sgiEqh5//wQa3a19Fq3Vusnt+UlukWJSP751P0vpo/LIuHD9Bx5zGxSxuk7gVQl5eXA1WZWZmazgHnAM7mOT0T6enpzU6/zyAAjt4UgfydMi0hRevvCyfz2xV3p81jCEUs4Ht+wL91WU55Mbrtih6/aJyKSa6u2NLN298H0+UAjHCOBmf0MuBAYb2Y7gJuBC83sVJIFVbcAHwZwzq0xs/uBtUAcuEGVkkXywz8/8Eqv80K+rym5FZGcKo+EmFRbzjlzxvOr53b026c0EiIcMj79luNyHJ2ISP+icY9YwuPm5WvSbRfMr8vr6XnDzTl3TT/Ndx6m/5eBLw9fRCKSDQOtuS0ESm5FJKcSzhEy45rF0wZMbgFe/8qSHEYlInJ4S+96hpWbmnjnaVNYsys5cvvj694QcFQiItl3MGPbxkJTuGm5iBQkz3OEQ8bCaaN7tb/rtH53hBARyQsrNyXXpEXjPcslRvKorYgUn/P9KsgDbQVUCDRyKyI5FfcckZD1mfLSHdf6WhHJf89t2x90CCIiWVVdFqGtO85X3nkSU8dUBh3OMdHIrYjklOccoX72hXzw5d0BRCMiMjhnzBgDwO6WLiC536OISDGYNraSS06oL/jEFpTcikiOJTxH2J/Kd88HF6fb33pifVAhiYgc1jObm3udj6ks4fOXnxBQNCIi2eV5jn7GHQqSpiWLSE4l/DW3kFzbseXWy2g42MXYqtKAIxMR6aszmuCqH6zs1ba/o3CLrYiIHMpzPc9mhU7JrYjkVGZymzKhpjygaEREBtbeHWfZT1YFHYaIyLCIJzye334Az7miKZCnackiklMJR79rbouRmYXN7Hkz+1//fJaZPW1mG83s52ZW6reX+ecb/eszg4xbRJIe39DIExubgg5DRGRY/Pq5nbz3+yt5vbGdkJJbEZGhS3gekRGS3AKfANZlnH8N+IZzbi6wH7jeb78e2O+3f8PvJyIBqxtV1m/70rNn5DgSEZHsa+2Op4+L5dFMya2I5FRmQaliZmZTgcuAO/xzAy4Cful3uRu40j++wj/Hv36xFcv8IJGC1vs/w3FVpYyvLuO6c1UpWUQK37iMeifF8mymNbciklOeB6GR8Vrtv4B/AlI7oY8DDjjnUq9JdwBT/OMpwHYA51zczFr8/vsyv9DMlgHLAKZPnz6swYtIsshKppqKEh779IXBBCMikmVxz/V7XMiO+IhpZneZWYOZvZLRNtbMVpjZBv/nGL/dzOxb/rqxl8zs9IzPLPX7bzCzpRntZ5jZy/5nvpUarRjod4hIYUs4R6TIs1szuxxocM6tzub3Oudud84tcs4tqqury+ZXi0g/EhkPe9VlEb77vtMP01tEpLAkPC99vPzFXQFGkj2DecL8MXDpIW03AY845+YBj/jnAG8D5vl/lgG3QTJRBW4GzgQWAzdnJKu3AR/K+NylR/gdIlKgGlu7Wb11P6/sagk6lOF2LvAOM9sC3EdyOvI3gdFmlpoxMxXY6R/vBKYB+NdrAVWxEQlY5sjte86YygmTawKMRkQku4pltDbTEZNb59xfgOZDmjPXhx26buwel/QUyQe5ScBbgRXOuWbn3H5gBXCpf63GOfeUc84B99D/GrTM3yEiBSjhOd7w5T8CcKDI94h0zn3WOTfVOTcTuBp41Dl3LfAY8B6/21LgN/7xcv8c//qj/j1RRAKUMajBu0+fGlwgIiLDIHN2yqzxVQFGkj1HOzew3jm32z/eA9T7x+l1Y77UmrLDte/op/1wv0NEClBbRkW+EewzwI1mtpHkmto7/fY7gXF++41opopIXkiN3P7qI2dz8tTagKMREcmueKInuT2xSGamHHNBKeecM7NhHWE40u9QkRWR/OcV4dSXwXDO/Qn4k3+8ieTSjEP7dAHvzWlgInJECT+5VfFyESlGmSO3S8+ZGVwgWXS0I7d7/SnF+D8b/Pb0ujFfak3Z4dqn9tN+uN/Rh4qsiOS/zHUd9/79mQFGIiIyOKnVAcWyRYaISKbUs9n6Wy7lDTPHBhxNdhxtcpu5PuzQdWMf8KsmnwW0+FOLfw+8xczG+IWk3gL83r920MzO8qskf4D+16Bl/g4RKUDxjMVrp0wbHWAkIiKDk/BvWyEltyJSZDbva+drD68HIBIqnnvcEaclm9nPgAuB8Wa2g2TV41uB+83semArcJXf/SFgCbAR6ACuA3DONZvZLcCzfr9/dc6lilR9lGRF5grgd/4fDvM7RKQAReM9yW0R3UNFpIilpuwV+e5lIjICrdrSUy84XEQPZkdMbp1z1wxw6eJ++jrghgG+5y7grn7aVwEn9dPe1N/vEJHC9J8rXgOSe0VWlIQDjkZE5MjS05KL6MFPRASgvqY8fVxMdQX0LlJEcuKJjfsAuOzkSUV1ExWR4pUqKKVpySJSbIr1tqbkVkRy4vz5db1+iojku1QdPCW3IlJs4kW6i4WSWxHJiTl11QC8+YQJAUciIjI4qS3MNCtZRIpNIqHkVkTkqKUKs0RUmUVECkTqvqU1tyJSbKIJ78idCpCeMkUkJ+IaARGRAuNpza2IFKH1ew7y0Z8+B8Af/vH8gKPJLiW3IpITCc8jHDIVkxKRgpFObvVWTkSKyKX/9Xj6uCuWCDCS7FNyKyI5kfA0tU9ECkuq3kpYL+VEpEgtmFQTdAhZpeRWRHIi4XlElNyKSAFJaDmFiBSxmeMqKQkXVzpYXH8bEclbcc9p9ENECorTtGQRKWLFuFRMya2I5ETCc4TDxXcTFZHi1TNyq3uXiBSf1q540CFknZJbEcmJpzY1caAjFnQYIiKDltCaWxEpYgc7i++5TMmtiOTEa3vbgg5BRGRIeqYlBxyIiMgwKMa9bnW7FhEREemHpiWLSLHZe7Ar6BCGlZJbERl2T27cF3QIIiJDlt4KSAWlRKRIfPoXLwYdwrBScisiw+59dzwNwDsWTg44EhGR/nXFErze2Hv5hOdPS9bArYgUi+5Y8U1FzqTkVkRypjueCDoEEZF+ffG3a7j463+mqa073ZaalqyCUiJSLGorS4IOYVhFgg5AREaO36/ZG3QIIiL9WrPrIABbmjoYV11GdzyRHrnVmlsRKRZnzBjDirV7+eON51NTUXyJrkZuRWTYza6rCjoEEZHDmlxbAcCuA528sP0Ax/3Lw/zltUYAQlpzKyJFIvXSbuqYSiaMKg84muzTyK2IDLuxlaVsop1HPnVB0KGIiPRr8uie5LYjGgfguW0HVExKRIqKn9sW7YwUjdyKSFa1dMZo6473aoslPC48ro45ddUBRSUicnijypPv+3cd6GRCTc9ohnJbESkmPVucBRzIMNHIrYhk1cIv/oHK0jBXLZrGnLoqrjhtCi/uaGHRjDFBhyYiMiDnD2fs2N8JrqfdinR0Q0RGptS05GKdlaLkVkSyriOa4MdPbgGgoTVZeXTV1v0BRpRbZlYO/AUoI3mf/aVz7mYzmwXcB4wDVgPvd85FzawMuAc4A2gC/sY5tyWQ4EVGqNSetjv2d6ZHNgCi8eLeNkNERhbPS21xVpzJraYli8iw+vajG4MOIQjdwEXOuYXAqcClZnYW8DXgG865ucB+4Hq///XAfr/9G34/EcmhhD+asX1/B/GM5FYGZmZ3mVmDmb2S0TbWzFaY2Qb/5xi/3czsW2a20cxeMrPTg4tcZOTyXPGO2oKSWxGRrHNJbf5pif/HARcBv/Tb7wau9I+v8M/xr19sxfpKVSRPpUYzOqIJduzvCDiagvFj4NJD2m4CHnHOzQMe8c8B3gbM8/8sA27LUYwikiHhXNGutwUltyKSZdPHVgYdQl4ws7CZvQA0ACuA14EDzrlUta0dwBT/eAqwHcC/3kJy6vKh37nMzFaZ2arGxsbh/iuIjCipdWgAX3pwXYCRFA7n3F+A5kOaM1/WHfoS7x7/5d9TwGgzm5SbSEUk5c6/biaWKN7ZKVpzKyI5ccuVJwUdQk455xLAqWY2GngAOD4L33k7cDvAokWLivdfJpEAJPpZWvv19y6kK57IfTCFrd45t9s/3gPU+8fpl3i+1Au+3RzCzJaRHN1l+vTpwxepyAhU7HUENHIrIlmVGGCt2nvPmJrjSPKDc+4A8BhwNsmRitRLxanATv94JzANwL9eS7KwlIjkSObIbcqimWO49swZAURTHFyyBPWQX8Q55253zi1yzi2qq6sbhshEpFgpuRWRrOrvARGgvCSc40iCY2Z1/ogtZlYBXAKsI5nkvsfvthT4jX+83D/Hv/6ocwP8Dykiw8JzjtGVJZw3d3y6LaSl70djb2q6sf+zwW9Pv8TzZb7gE5EcufC4Ok6ZWht0GMNGya2IZNVAI7cjzCTgMTN7CXgWWOGc+1/gM8CNZraR5JraO/3+dwLj/PYb6SnAIiI5EvcckZAxpqo03RYJK7k9Cpkv6w59ifcBv2ryWUBLxvRlEcmRhOeK+sWd1tyKSNbc8fgmGlq7mTW+is372vnlVltjAAAgAElEQVTA2TO4Z+VWLjtlZNUMcc69BJzWT/smYHE/7V3Ae3MQmogMIJ7wiIRCjK/uSW7DRfwAmA1m9jPgQmC8me0AbgZuBe43s+uBrcBVfveHgCXARqADuC7nAYsIrsi3AlJyKyJZk6ow2toVZ/NXl/Do+gbuWbmV7lhxFy8QkcIXSzgiYWN8dVm6LVTED4DZ4Jy7ZoBLF/fT1wE3DG9EIiPXytebmDqmgmlH2LUiOXKbo6ACoORWRLLCy5iOvK+tGzPj/Pl1XLN4Oh+7aG6AkYmIHF5jazcPPJ9c/jlrfFW6PVLMT4AiUlSu+eFTAGy59bLD9kvuc1u89zYltyKSFe/5/pPp4y++40QASsIhvvquk4MKSURkUDY0tKaPF04bnT7WyK2IFBvnHJFw8ZZdKt6/mYjk1HPbDqSPl54zM7hARESGKHMUY3JtefpYI7ciUmhih2za/ZOntvLV361Lnze3R4kXcfFPJbcicswefEkFL0WkcGUuq7CMRLeYp+6JSHHa1tzR6/zz//MKP/jzpvT5643tPLO5Oddh5YySWxE5Zjfc+1zQIYiIHLX/+8uXALhv2Vm92ou5oqiIFKeNDW39tnfFEjmOJBhKbkXkmM0Y11OZ76nP9imSKSKSt5xz7DzQCSTrBGTSVkAiUmgGSm63HzKiW6yU3IrIMTstowDLxIz1aiIi+S5z6VlqpPYzlx5PaTikglIiUjBKI8m0bqDk9tDpysVK1ZJF5JgVcV0CESlyiYwbWGqk9iMXzuEjF84JKiQRkUFr647zi1XbicaThaQ2NfYkt6k2gK1NPcnttWdOz12AOaaRWxE5ZnEvefP88AWzA45ERGRoMpPbhNObOhEpLL9YtZ0v/nZt+nxTYzvOv5f94M+vp9tTI7eRkDG6siS3QeaQklsROWaxhOP4iaP47NsWBB2KiMiQZCa0maMcIiL56vXGNr784Fo8z/VKVEdXltDaHaexrRuAhtbu9LU9LV0AeM4VdSV4Jbcickw272tnxdq9rN/TGnQoIiJDljlyq+RWRArBp+5/kR8+vpn1e1rxMm5b8+tHAbBxb3Jqck1FzwrUDr9asud6b3lWbJTcishRe27b/l5TXkRECk1mcltVFg4wEhGRwakuSyatDa1dve5hU0ZXAPDa3uSAw/Sxyd0syiIhnHPp6crFXCtPBaVE5Ki963tPBh2CiMhRa2rr5r+f2gbAmxdM4LTpYwKOSETkyCaMKgOS045jGUO3zjlqK0p4raGNK7/7BOv3HARgfHWyfyoPNoo3u1VyKyJHpb07HnQIIiLH5GfPbOMbf3wNgLNmjws4GhGRwamrSSare1u6eGZLMwBLTp7IP14yn63NHfxy9Y5eyyxKwoankVsRkYFde8fTvc4/c+nxAUUiInJ0GjOKrTS1RwOMRERk8CpLkinc11e8lm776jtPobayhGljKnl+24Fe/cMhwzmI+0O3xbyHt9bcishReWF77xvnNYunBRSJiMjQvba3lbtXbk2ff/yiuQFGIyIyeAmvb/G7cDiZsM6vr+5zLRIK8eTrTRz/+YcBKOJ6UkpuRWToXD97QYaL+C2giBSf5oyR2kc+dQGVpZrMJiL566GXd6cLRf3mxV19rqeKTJ05iCUWBzpi2Q0uj+hOLiJD5vXNbZXcikhBqSztqYycqigqIpKPDnRE+ehPnwNg81eXsLWpo9f1qxZNTR+fNm10+rg0Eup3i7MNe4t3+0aN3IrIkHX5e6VlioR0OxGRwpG5fUZEL+dEJI+95u9bC/Dslv3p4zNmJCu8r9ra0xYJ9zyP/eGT5/Mvly2gNNL7Ga2ls3hHbvU0KiJD9sDzO9PHL978Fu5bdlafG6eISD7LTG6tmBegiUjB27G/Z6T2F6u29xx/+GzevGAC/7xkQa/+X33XyZw3dzwzx1fx92+c3et+B9AV6zuaWyw0LVlEhmx8dSkA1yyeTm1FibbQEJGCE+9vfYWISB668f4XAZgxrpI/rN1LeUmIrphHKGTcsfQNffpfs3g61yyenj73+qmVUqw01CIiQ1biT3lRhWQRKVTrdx8E4P4Pnx1wJCIiA2to7Uofv/+sGbR0xuiKeVx2yqRBf8ehye33rj09a/HlGyW3IjJksURyOovW2YpIofrCb9cCKoYnIvnt679P7mV77txxvH3h5HR7aXjwz2CHTlSZOb4qK7HlIz2ZisiQ/fTpbQCURvRQKCKF7WBX8RZWEZHCN9ZfCvaD9y+ivqacD547C4B1/uyTwdjY0HbkTkVCya2IDNnjG/YBPdOTpTczm2Zmj5nZWjNbY2af8NvHmtkKM9vg/xzjt5uZfcvMNprZS2ZWvPOFRPJARzSePj5rlmoGiEj+iic8KkvD6X1sP3bRXKD3Xt2D9eYFE3joH96Y1fjyjQpKichRU3I7oDjwKefcc2Y2ClhtZiuAvwMecc7damY3ATcBnwHeBszz/5wJ3Ob/FJFh8O+/fxWAK0+dTEXGfrciIvnmpR0tdER7tmAcW1XK5y8/gcUzxw75u77yrpOZMKo8m+HlnWN6MjWzLWb2spm9YGar/LYhj0yY2VK//wYzW5rRfob//Rv9z2oOpEgeUXLbP+fcbufcc/5xK7AOmAJcAdztd7sbuNI/vgK4xyU9BYw2s8FXihCRIXl1TysAbz6hPuBIREQO7+nNzX3arj9vFidPrR3yd4VHQCqVjSfTNznnTnXOLfLPbyI5MjEPeMQ/h94jE8tIjkxgZmOBm0mOUiwGbk4lxH6fD2V87tIsxCsiWaJCLEdmZjOB04CngXrn3G7/0h4g9WQ9Bdie8bEdftuh37XMzFaZ2arGxsZhi1mk2D35ehMAl58y+Qg9RUSCNXdCNcdPHJWV7xoJz23DMewy1JGJtwIrnHPNzrn9wArgUv9ajXPuKeecA+7J+C4RCdj46lLGVpUGHUZeM7Nq4FfAJ51zvSo/+Pe1IW0855y73Tm3yDm3qK6uLouRiowcnva3FZEC4jnHnAnVWfmukJLbI3LAH8xstZkt89uGOjJxuPYd/bT3odEMkdx735kzgg4hr5lZCcnE9qfOuV/7zXtT0439nw1++04gc9PgqX6biGRZatR2BMzOE5EC9ci6vXzxt2sA6OhOUJWl2gAjYVrysRaUOs85t9PMJgArzGx95kXnnDOzYX9F6py7HbgdYNGiRXolKzKMUqMe3fHEEXqOXH59gDuBdc65/8y4tBxYCtzq//xNRvvHzOw+kks0WjJeEopIFn3qFy8A8DeLph2hp4hIbjnneM/3V7J6634Arj1zBu3ROFVl2akBrGnJR+Cc2+n/bAAeILlmdqgjE4drn9pPu4gEaN2e5OzaH/x5U8CR5LVzgfcDF/kF914wsyUkk9pLzGwD8Gb/HOAhYBOwEfgh8NEAYhYZEaaNqQTg9BljjtBTRCS3ogkvndgCLLtnFW3dcapKs5PchjRyOzAzqwJCzrlW//gtwL8yxJEJM/s98JWMIlJvAT7rnGs2s4NmdhbJQiwfAL59tPGKSHakKiQvO392wJHkL+fcX4GB/gW5uJ/+DrhhWIMSEQDqa8qZOqaC954x9cidRURyqDvu9TrftK8dgMqyLE1LHgEjt8fyGqAeeMDfnScC3Ouce9jMngXuN7Prga3AVX7/h4AlJEcmOoDrAPwk9hbgWb/fvzrnUjWvPwr8GKgAfuf/EZEA7T3YBcBp00YHHImIyNDFEh7VZRG0u6CI5JtoRnJ7+SmT+N+XkiuUEonsrLocAbnt0Se3zrlNwMJ+2psY4siEc+4u4K5+2lcBJx1tjCKSfZ+4L7lerUtrbkWkAMUSHqUR7dEtIvknNXL7b+8+haveMI2Ljt/Bjfe/yJgs7U4xEl7qZWcCt4iMGM3tUQB27u8MOBIRkaGLJRyRkTB8ISIFpzuWHDgoK0m+gHvX6VM5ddpopo+tDDKsgqJXlyIyJFctSq5Tu2bx9IAjEREZuljCIxLW44+I5J9oIjlyW5pxj5pdV33M96zffeKNfOHtJxzTdxQKjdyKyJBUlISprShhXHVZ0KGIiAxZwnPpURERkXzSHUsmt9m+Ry2YVMOCSTVZ/c58pbu7iAxJwrkRUW1PRIpTzHOEQ3r8EZH88+yWZE3diO5RR03/y4nIkCS8kbFPmogUp4TnUaIXdCKSZ7piCb704DoAKkuzs/XPSKTkVkSGxPMcWq4mIoUqntDsExHJPxsb2tLHZ8wYE2AkhU1rbkVkSBLOEdbIrYgUqLjnKNEbumFnZluAViABxJ1zi8xsLPBzYCawBbjKObc/qBhF8knCS+5l+82rTx0RW/YMF93dRWTQDnREWbWlmZBGPUSkQCU8jdzm0Jucc6c65xb55zcBjzjn5gGP+OciI95z2/ZzxXefAGBslva0HamU3IrIoH321y+zpamDlo5Y0KGIiByV5FZASm4DcgVwt398N3BlgLGI5I3fvbw7fayZJcdG/+uJyKD97pU9ALR2xwOORETk6CQ8R0Qjt7nggD+Y2WozW+a31TvnUk/xe4D6YEITyS+TR1ekj0v08u2YaM2tiIiIjBhxzxHRyEgunOec22lmE4AVZrY+86JzzpmZ6++DfjK8DGD69OnDH6lIwDqiifRxRYnSs2Ohu7uIDEpHVKO1IlL44glPI7c54Jzb6f9sAB4AFgN7zWwSgP+zYYDP3u6cW+ScW1RXV5erkEVy6pWdLcy86UE2NrTxzT9uAOBXHzmHEybXBBxZYVNyKyKD8pWH1qWPH/joOQFGIiJy9OIqKDXszKzKzEaljoG3AK8Ay4GlfrelwG+CiVAkeH9+rRGAn6zcQjThAdoCKBs07i0ig9LY2g3A7PFVnDZdN18RKUzxhLYCyoF64AF/O5MIcK9z7mEzexa438yuB7YCVwUYo0igJo8uB+CJ15sCjqS4KLkVkUGZOa4KgJOn1gYciYjI4D2zuZnWrhjnzRtPLOHojCWIJ/pd6ilZ4pzbBCzsp70JuDj3EYnkF89zfPnB5Iy4jQ1tALzvTK0vzwYltyIyKDUVJQB84e0nBhyJiMjgXfWDlQAsnFrLiztagORaNxGRoOxq6WRfW7RXW4mWS2SF5uWIyKBE48n1ILV+kisiku92HuhMH6cSW4CPvGlOEOGIiADQlrGl4mUnTwKg23/OkmOj5FZEBuWxV5NFLUN6sygiBeLcWx/tt/3kKVpeISLB2bA3ORV5fn01179xFgBrdh0MMqSioWnJIjIoL+3QND4RKXyXnzKJcVWlQYchIiPYx3/2PABfe/cpnDptNMvOn81bT5wYcFTFQSO3InJEew92BR2CiMiQzZtQzcSach791AXptu+873T8Kr4iIjm3bnfPCO3k0RWYGZ9bskDbAGWJRm5F5IjuemJz0CGIiAxZNOFx1uyxzK6r5l8uW6CaASISuD+u3QtAVWmY+prygKMpPkpuReSIpo6pBOCN88YHHImIyODc9qfX2drUwTlzxgHw92+cHXBEIiKw258Nt+LGC47QU46GpiWLyBE9u7kZgM9ffkLAkYiIDM7XHl4PQMPB7oAjERFJ2nmgk3uf3gYkpyRL9im5FZEjWv7iLgBUKHlwzOwuM2sws1cy2saa2Qoz2+D/HOO3m5l9y8w2mtlLZnZ6cJGLFI+5E6oB2Nem5FZE8sMuf3uy8dUqajdclNyKyKCVRcJBh1AofgxcekjbTcAjzrl5wCP+OcDbgHn+n2XAbTmKUaQoNbdHWfLNx9nYkNxq45tXnxZwRCIiSVff/hQA//U3ui8NFyW3InJYnufSx9PGVgYYSeFwzv0FaD6k+Qrgbv/4buDKjPZ7XNJTwGgzm5SbSEUK37amDv799+tp6YgB8OyWZtb61Uinjqlg5viqIMMTEWFrUzszb3qQhP9MNbFWhaSGiwpKichhxTwv6BCKRb1zbrd/vAeo94+nANsz+u3w23ZzCDNbRnJ0l+nTpw9fpCJ5KpbweOD5nbx5QT37O6K8tOMA//jzFwF4busBvn7VQp7buj/df1x1WVChisgItb25gwee38njGxq5+e0nsmBSDRf8+5/S169ZPD29bEKyT8mtiAyopSPGwn/9Q9BhFB3nnDMzd+SefT53O3A7wKJFi4b8eZFC9/d3r+LPrzX2e23lpibOufXR9PnEmnK+fOVJuQpNREa4tu44lSVhrvzuEzS1RwG4/Nt/TW9BVhYJ8ZuPncuMsZpNMpyU3IpIH89uaea931/JxIz9165ZPC3AiIrCXjOb5Jzb7U87bvDbdwKZ/+NO9dtE5BArNzX12/7UZy/m92v2cPPyNem233/yfGorta+tiGTPyztamF1XRUVJmK3NHUyqLacrlmDzvnbe+b0ne/WdWFPOnoNdtHQml0zc/PYTOX5iTRBhjyhKbkWkjxX+BuN7/L3YADqjiaDCKRbLgaXArf7P32S0f8zM7gPOBFoypi+LSIb6mjKOq6/hj+v2Mrm2nOryCN+79gwm1paz9JyZvPuMqTS3Rdmxv0OJrYhk1ReWr+HHT26hoiTMDW+aw3/84bUB+7779Kl8/aqFrFi7lw/ds4qr3zCNd5w6OYfRjlxKbkWkj90tXX3atjR1BBBJYTKznwEXAuPNbAdwM8mk9n4zux7YClzld38IWAJsBDqA63IesEiBaO9OMLG2jDVffCulkRAl4d51MavLIlSXRZg+TsXvRCR7Nuxt5cdPbgGgM5boN7G98Lg6zpkzDufgQ2+cDcAlJ9Tz6pcu1W4TOaTkVkR6iSU8fuvva5upNKzi6oPlnLtmgEsX99PXATcMb0Qihc05x479nTS3R6kqi1BVpscXERl+Da1d/Gl9I//0q5cA+OI7TqQkHOJzD7zMuKpSln/8PKaMrjjsdyixzS396yAivXz/T6/3afviO07k0pMmBhCNiAj8ZcM+lt71DACRkAUcjYiMFB/+yWqe33YAgPn11Sw9ZyYAk0aXM6oscsTEVnJPya2I9PL1FX2n2qRu5iIiQXh2c8+20efOGR9gJCIyEjjn+O+nt6UT23kTqvnZh85KX3/TcROCCk2OQMmtiBzWLVecGHQIIjKCJTzHdx7bCMDzn7+EMVWlAUckIoVuf3uUaMKjPmNXiJTOaIK/vfNpVvt7Zv/6o+dw+vQxuQ5RjpKSWxE5rMtPUXU/EQnOtuaeYnZKbEXkWEXjHm/6+p840BHjY2+ay4xxlexp6eJjF83FzLj3mW3pxPbaM6crsS0wSm5FJO3R9cktgD564Ry+56+9LStRISkRCc6fXk1uCf25JccHHImIFIPrfvwMBzqSe8+mZoUA7NjfyZffeRK3/O9aIDlz7erF0wOJUY6eklsRAeB/nt/JJ3/+AgCtXfF0u6oki0iQHn5lD5DcN1JE5Git3trM643tPLGxCYB/XrIAM/jSg+sIGfx81XZ+vmp7uv/7z54ZUKRyLJTcigiPvdqQTmwBPOfSxxEltyISoNS2P2M1JVlEjoJzjnuf2cbXfreeg/7L+9Omj+ZD5yf3or3qDdOoKo3wtYfXc/tfNgHwxxvPDyxeOTZKbkWE6370bPr4/g+fzXETR/HTp7cFGJGICHTHEzy6Pjkt2UxbAInI4Kze2szs8dWMqSrlydeb+OcHXul1/RMXz0sf15SXAPC5JQv4wNkzqBtVpr1pC5iSWxHpZfGssUGHICICwOXf+isA46s1aisig9NwsIt337YSgNuuPZ2P/PQ5AKpKw/z7exdy3MRRzB5f1e9np46pzFmcMjyU3IoINeURFk4bzXevPT3d9sRNF7E9o0qpiEiubWhoA+CHH1gUcCQiUgjW7GrhMv+lGJBObAFe/sJbCYU0A6TYaTGdiBBNeJwwqSY9NQdgyugKzpo9LsCoRGSkaGztxvNcr7ZntzQD8PaFkzl12uggwhKRApMqQDdtbAW/+D9nA8nCmL//5PlKbEcIjdyKjFCtXTH+7y9e4qQpNXTHPUojetclIrn3emMbF3/9z4ypLGF/R4zZdVWcP6+Ojf6o7XvOmKr1tiIyKN9+NLm1z2OfupBIOMSWWy8LOCLJNSW3IiNQQ2sXi7/8CAAPr0m+5dSjo4gE4eP3Pg/Afn/fyU2N7WxqbE9fv2B+XSBxiUjh0k4PI5eSW5ERxjmXTmwzdcYSAUQjIiNJVyzBM5ub6YwluGB+HS/vbGHt7oMArPniW9nQ0Mak2nK+8+hG/vvprbxj4eSAIxaRfNfSEWPNrhbed8fTACzUMoYRTcmtyAjz/juf6XV+89tP4FfP7eBjF80b4BMiIsdu9db9vPu2J9PnY6tKaW6PAvAvly2gqiySXlt7y5UnccuVJwUSp4gUlhvufY6/btyXPj+uvjrAaCRoSm5FRpDVW5vT/wD827tP4ao3TAPgunNnBRmWiOQ5z3PEPUd7d5y1uw/yi1Xb+cuGfcytq+YtJ9bzjlMnM76qjCu++wQv72yhtqKE1q4Yl58ymVnjq1i5qYlnNjenv+8dCyezu6WT5vYoCybVcP15ugeJyOC8sP0AbV1xzps3nmjcSz/XXHvmdD755vmMKld6M5Lp/32REeJ/nt/JJ3/+AgALJtWkE1sRkSM559ZH2XOwq0/7K7EWntnSzFceWkdmseODXTFqK0pY/uKuXv0/fP5sPrtkAZBcIrF6634mja5QwSgROaJ4wmPNroNc+d0n+lz70pUn8bdnzQggKsk3Sm5FitT+9ii/fWkXdz+5hctOnsS3/AqCAD/6uzcEGJmI5JPVW5t5920rmTmukl0tXbznjKlMGFXGgY4YBztjPPjybrrjXrr/pNpy3jBzLP/2nlMoLwnzemMb9z+7nXuf3pb8vs9fkq6+Hk94bGhooyQcYu6E3lMFzYxFM8fm7i8qIgWrO57gI//9HI+ub+jVXhoJURoO8c7TpgQUmeQbJbciRaAjGqckHKIjmqC2oqRXNWSgV2L7vx8/j4m15UGEKSJ54smN+3hu237uXrmVxtZuALY0dQCkk9RDPf25i6mv6XvvmFNXzWeXLEiPyGaKhEMsmFSTxchFZCRo747z6t5WvvPoRipLwzhHOrE9d+447vngmYQMzfqQPpTcihS4e1Zu4f/9Zk2/16aMruBH172Bpzc10dgW5cZL5uc2OBEJXFcswcIv/oFxVaVcetIkQgZ3/HVzrz43XjKff7h4Hk1t3VSVRXjy9X0kPDh5Si0ANRURKkv1yCAi2dcdT/CtRzZQURJmdl01o8oj/GTlVv6wdm+fvr//5PkcN3FUAFFKodC/VCIFbuXrTf22X3HqZL559WkAzK/XPwQiI0VnNMHOAx2Mry7jvme3c+vv1gOwq6WLu57oSWr/9YoTqa8p5y0n1KdHP8ZVlwFw0fH1uQ9cREaErliCOx7fxB1/3cyCiTWs3NT/cwwki8/937cex4q1e5kzoVqJrRyRkluRAtXcHuWS//wzTe1RLj5+AncsXaTpOSIjTDTu8d3HNvLL1Tsoi4Q4fcYYfrl6R59+bzmhnq+862T+9GojkZBRX1PO2XPGBRCxiBS7rliCNbtaOHXaGJ7e1MRTm5uZMbaSnz2zjfrach58aXe6byqxnTuhmlvfdTLrdh+kobWbkBlXL57GpNoKAD6oiuoySEpuRQqQ5zlOv2VF+vwfL5mvxFakyG1qbOOlHS2sfL2J/3lhJ7PGV2FmrNt9EAAz2LSvPd3/b8+aTk15CW87aRInT01OL37PGVMDiV1ERoZdBzq57FuPs78j1u/1kP+oMrGmnLs/uJjjJo7C8xwh/4KKzMmxUnIrUkC6Ygmu+9GzvabwvPD/LmF0ZWmAUYnI0WrrjvPyjhY2NrQSTTi27GunsjTMmKpSqkrDPPjybva1Rdl1oJOOaKLXZztjyfO/O2cmn7n0eCpKw8QTHjv2dzJjXKVeeIlIzqzfc5BL/+vx9Pn8+moWzRzLhr2tfPTCudRWltDeHee8ueM52BWntqIk3TeV2IpkQ94nt2Z2KfBNIAzc4Zy7NeCQRIZdLOGxast+ogmPzY1ttHTG2Xmgg/tX9Z5uuP6WSykvCQcUpYgczuqtzTy1qZkZ4ypxDjY2tBFNeHRGE4RDRk15CT95aiv72rp7fa40EiKasfUOwNKzZ1AaCXHR8fXMnVBNaThEbWUJh4qEQ8wcXzWsfy8RkUP9/d2rAJg1voqvvutkzpo98LKHzMRWJNvyOrk1szDwXeASYAfwrJktd86tDTYyGQmcc3REE3TFEnTFPTzPEQ4ZITNiCY/SSIiuWIJo3KOxrZvuuEdjazcNB7voiCbS+0KWRUJEQkZjWzed0QShkFESChH3HCVho7G1m9caWoknHFVlETzn2NHcSTTR++G2NJzcN3LCqDIe+sQbGe8XfpHioBd5hc85x/bmTlq7Y+xp6eJ6/2EvU0k4eQ8JmaVHXt+8oJ6b3nY8ZZEQU0ZXYJYclW1ujzKqvISa8ohGYaWo6H53bFL3moRzjK9OztzyHBzsjGEGzsHBruS04O64R3t3nIqSMOUlYQ50xPBc8nnGDDwPwiGjNGJEQiEOdMY40BFlyugKdrd0sa05uUVYVyxBRWmYju4E6/ccpDSS3H5wT0sXLZ0xdrd0MWt8FY99+sKg/mcRAfI8uQUWAxudc5sAzOw+4AogK8nti9sP9NqYPl8553qO020Z1+l10qvfQH1d34/0+3t6f2fG9czP9/s7Dx8z/XzXkWLOvOY5h3OQ8Fz62HOOhHN4DhIJj7jX0x5LeHTGEsQTjrjniMaT553RBAc6o3THPLriCTwvWZL+QEeM1q54nwRzsCIhozQSwkj+wxL3HKPKI4ytKvVj8AiZkfCSCe2MsVVMGFWWfqBdNGMMp04bw4xxlVSWhjl+Yg0VpRqhLVbD/SJv7a6DHOyK9fpvJaX3f5eH/LdP7/+WB+x3mP9eU7/Dy/jv1rm+vTJTt548rqfVc46E1/e7M3O+hOeIJRxtXTHao8kXT91xj65Yot/PJZPM5E8MOsa43GEAACAASURBVLqTL7PiXvKe0dwe5UBHjLKSEM7B7pbk1ODU3yH1uUjIiIRDdMcSHOyK9/o9t1x5EotnjqUjGmfqmErqRvW8lIonPKIJr98tdipLtfWOFKfhvN81tXXzlw2NNLVF/eeD5L2jvTtONO7hueS/8bGEh2EM9M4olkh+piOWwDlHWSScTv5KwiFKwkZJOEQkbJSGQ4RDRlt3HEv+/QiZ4TlHU3uUtq4Ycc8RT/j3sIx7RiRkhEN2yM9kuxnsa0sWVgqHjJbOGOGQ4VxyCvC+tuix/s911CbWlFNZFiYa9xhdWcKk2nLKIiEe+Og5gcUkkpLv/3JOAbZnnO8AzszWl3/8Z8+n30hJ8cv8x6M0EqKyNEJZSYia8hIqSsLUVJQQMqMsEqKmIjlaMqaqlIqSMGWREKGQ4VwyOS4Nh4gmPErCIcpLwoyrKqWiNMzYylL+P3t3HibXVR5o/P2qqhe1dlmyJFuSF9nGC14RNo7B7AQ7gz1gJmAIWzI4E3BIIMkEQtjDkIQkMyFAiEmAAGGxWZ3EYLOZxcHGwhveLa+SLMuSrV1q9Xbmj3tbLre7pZa6um9V3ff3PP2o6tbtW9+t7v50vnvOPWfxnG66ak8uRFNK9rxobyb1Qt77Lr+V6x/Y1IhDtZxaJejprD7p7y8NF9lkDd+hlBgagp6uKj0d1azRWQ1mdNVYPLubvsEh+geHOGv5fGblw+lqlWCw7iLbwNAQ1UqwfMEMFs+eRletwpK50zh6L8twZe9TmeyPQGo2k5bv/uiym7n6rg1P2V6tZP+3VyPoqFXorFZGvRC3Z/8IZnTXmNZZI4CNA330Dw4xMDhE/2B28WtgKNE/MET/0NCekVdZT2hWVFcCZnTVWDCzK297VKjkf+59A0Ps7BvMc0dicGgo/zftuQA+OJSY29NJtRJ7LpBDlm/OXD6fow+ewcJZXWzdlV1Qi4BZ3Vl+6h8a4qDp2YW0jmows7sjG4XWP0h3R5WezmrWEZCPSBvIz6F/cIiU4OBZXTy+o4/e/kHOOOIgerqqVCLY2TfIjK4aVe+RVRNr9uJ2XCLiIuAigGXLlo37+/7vq06mt7/5e27hyb0aw0+ibmt93RR7tu3r9acedLT96o81eu/KE7GMVb/FvmIe5zkNq1TiSb0u2fPscQR0VLJitJpvz/5jK67n08JW+zCuC3kHmuve89+OZ3vvwJ6/m7zDse64T3mnEe87+nFHyxFP/e7McGNoz/vHE3/vo40KGTl6o1oJqvHknpaRI1AqkfWi9HRVmdXdQa0STlQiNZ9J67j405ceyztefAxL5/bQ1VHZ0zvbVav4/3ADzJ7mxTg1v2YvbtcCS+ueL8m3PUlK6RLgEoAVK1aMfSluhGcc5nTjklrHgea6k5bMmbSYJKnRDvRC3nGLZ01WSJJaRLNfgrkeODoijoiITuDVwOUFxyRJjTauC3mS1Ab2me9SSpeklFaklFYsWLBgSoOT1NqaurhNKQ0AFwNXAncAl6aUbis2KklqOC/kSSoL852kSdPsw5JJKV0BXFF0HJI0WVJKAxExfCGvCnzGC3mS2pH5TtJkavriVpLKwAt5ksrCfCdpsjT1sGRJkiRJksbD4laSJEmS1PIsbiVJkiRJLc/iVpIkSZLU8ixuJUmSJEktz+JWkiRJktTyLG4lSZIkSS0vUkpFx9BQEbEBeHA/vmU+sHGSwmkFZTj/mcAyoBPYATwA9NW9PtpnMAN4GrAOeLhue2d+rJnAEPAYsGYygp5CZfgdADgspbSg6CAaxVy338pw/nvLdWOdf1lyXRl+/sPMdeX5WY+l3T8D23X71u6/AzBGrmu74nZ/RcTKlNKKouMoSiudf0TUUkoD+/k984F7gf8J/DvwIeA5KaVn1e3zpM8gIjqA64Fe4PsppT/Pt3cCdwCfAP4JGASOSSndMqETK1gr/Q7owJX959xK5z8ZuW608y9Trmuln78mxp9163wGtusmT6v8DkwGhyVrykXEmyLi3+ue3xMRl9U9Xx0Rp+SPU0S8NSLuAe45gLd7BXBbSumylFIv8H7g5Ig4di/f80fAVcCdI7a/EXg4pfR3KaUdKaXedkiAkiaHuU5SGZjr1EwsblWEHwPPiYhKRBxCNiTkTICIOJJs6Eh9cvnvwBnA8aMdLCJuiYjXjPFeJwA3Dz9JKe0gu+J3whjHOgz4beCDo7z8LOCBiPhORGyMiKsj4sSxT1NSyZnrJJWBuU5No1Z0AE3gkqIDKNiUn39K6b6I2AacAhwDXAmckl91OxP4aUppqO5bPpJSenwvxztpL283A9gwYtsWsnsrhtV/Bh8D3pNS2h4RI4+1BHg+cB7wA+APgG9HxLEppb6RO7eQsv8NlEXZf85lz3Ujz79sua7sv/9l4s96ij+DJst1YLsOSvx3UPqe25RSaX/4UOj5/xh4HnB2/vhq4Ln5149H7Lt6Au+zHZg1YtssYNvwk+HPICJeBsxMKX11jGPtAn6WUvpOnvT+BjgIOG4C8RWu7H8DZVH2n3PZc139+Zcx15X9979M/FkX9hk0Ra4D23VQ7r+D0he3KsxwEnxO/vjHjJ0EJzLr2W3AycNPImI6sDzfPtILgRUR8UhEPAK8CvjDiPh2/votE4xFUvmY6ySVgblOTaH0syWrGBFxDPBLYH1K6aiImEU2lXsNmJtSGsz3S8DRKaVVB/g+C4BVZPdb/CfwAeC59bPq1e07E5het+nvyaaL/1BK6fGIeBpwI9nwlR8BbwMuBo5rg+ErkiaBuU5SGZjr1CxK23MbES+NiLsiYlVEvLPoeBopIj4TEY9GxK112+ZFxPfyGey+FxFz8+0RER/LP4dbIuK0uu95Q77/PRHxhkbGmFK6m2xoyU/z51uB+4BrhhPgeEXEbRHx2rrnSyPiRxFxO9mwmC8CHwY2AW8GFg5/BhHxqfzrY2QJ7irgkJTSI2TDVZYD1+Wz+j0L+C3gU/mxzgfOa7YEGBHdEfGLiLg5/2w+kG8/IiKuy3/WX41sCnwioit/vip//fC6Y70r335XRPx6MWekiWjnXFcvIh6IiF9FxE0RsTLftt95r9EmOdftyfUppQ3ABcBHyNZ9/H2gv+6cP5V/PquAa8jzXJ7rDgHeQJbr3pBSuovWyHWj/V/3/ohYm/8e3BQR59a9Nmo+K8vfSBmU5WfZjPluMnNdvu0zEfEoWRF6ASVq1w0z541TSql0X0CVbGa1I8lmdLsZOL7ouBp4fmcDpwG31m37a+Cd+eN3An+VPz4X+A4QZH/k1+Xb55ElpXnA3Pzx3KLPbZznvxg4LX88E7ibbEa+UnwG+XnMyB93ANfl53Up8Op8+6eA38sfvwX4VP741cBX88fH538bXcAR+d9Mtejz82u/fhfaOteNONcHgPkjtu3X33yrfZnrRz3/9wN/PMq+o+azMv2NtPtXmX6W5rsDO+dWznd7+QzMeSO+ytpzezqwKqV0X8quznyF7GpNW0gp/QQYOQvd+cC/5o//lWwa9uHtn0+Za4E5EbEY+HXgeymlx1NKm4DvAS+d/OgnLqW0LqV0Q/54G9kC3YdSks8gP4/t+dOO/CsBLwC+lm8fef7Dn8vXgBdGROTbv5JS2p1Sup9sGNDpU3AKapy2znXjsL9/8y3FXD/q+Y9lrHxW9r+RdlL2n6X5ro3zHZjzxqusxe2hPHmmtjX5tna2MKW0Ln/8CLAwfzzWZ9EWn1E+xPZUst7L0nwGEVGNiJuAR8mS973A5pTSQL5L/bnsOc/89S1kswW27PlrjzL9DBNwVUT8MiIuyrft7998OyhNntuLi/Phl58ZHppJuc6/rMr0szTfZcx3GXNenbIWt6WWsvEKbT+TWETMAL4O/GHK7v3Yo90/g5TSYErpFLI13E4Hji04JGmyPTuldBpwDvDWiDi7/sV2/5sfTRnPGfhHsnvqTgHWAX9bbDjSpDDfjVDGc86Z80Yoa3G7Flha93xJvq2drR8ehpL/+2i+fazPoqU/o4joICts/y2l9I18c6k+A4CU0mayyRfOJBuWU8tfqj+XPeeZvz4beIw2OH+V52eYUlqb//so8E2yizr7+zffDkqX5+qllNbnF/eGgE/zxK0UpTj/kivNz9J8t0ep8x2Y80ZT1uL2euDoyGaP7SSbROfygmOabJeTzYZJ/u+367a/Pp9N71nAlnyIx5XAS/KZ5+YCL8m3HbCIWBYR2yOiOpHjjON9AvgX4I6U0t/VvVT4ZzAVImJBRMzJH08DXkx23/GPgFfmu408/+HP5ZXAD/MroJcDr45sNuUjgKOBX0zNWahBSpHrImJ6ZEs+DK95+BLgVvb/b76RMU1JvhtFKfLcWEbcS/hyst8DGDufleJvpCRK8bNstnxXYK6Dkuc7MOeNaiKzUbXyF9lManeT3Yv47qLjafC5fZlsaEI/2Vj63yG7h/IHwD3A94F5+b4BfCL/HH4FrKg7zm+T3YC+CnhT0ee1H+f/bLKhKbcAN+Vf5+7HZ3Am8BlgK9n9pxvH+gzIZh3eXve1G9g2Yp9XkxWXO/L3eM4kn/9JZNPf30KW5N6bbz+SLLGtAi4DuvLt3fnzVfnrR9Yd6915zHcB5xT9s/XrgH4f2jbX1Z3jkWQzPt4M3DZ8ngeS91rpqxG5nmwmzZ8CQ8AA8OW9vN9e892I17YDg8A/TPH5fyE/v1vIGmyL6/YfNZ+V4W+kLF9l+Fma7w4s3+W57jNkywENkLXtRm3b7ivX5ftMadtuL5+BOW/EV+QnKbWliKilJyZRGu/3fISsQD4PWETW4/nGlNJ3x/G9nwOGUkq/nT9/MfDPwKvICsfF8MSQIklqlKLz3YjXZpBN8HJuymb4lKSGKDrX2bZrbmUdlqwGiWwh8T/JZ2nbERH/EhELI+I7EbEtIr4fTywkfnhEpOH7PiPi6oj4UERck+97VUTM38f7DR/jooh4OCLWRcQf173+/oj4WkR8MSK2Am88gNN6A/ChlNKmlNIdZPcw7PM4+fCgC3hiWnqADwAfTCldm1IaSimtNflJrcl896TYRst39S4gu//tpwcQk6QCmeueFJttuxZjcatGuIDsvs5jgJeRLZz9Z8ACst+xt+3le18DvAk4mGwx6T/ey771nk92/8BLgD+NiBfVvXY+2Xqtc4B/G/mNEfGaiLhltIPmyXox2XCfYTcDJ4wjpguADcBP8mNVyYbCLIiIVRGxJiI+Htl9sJJak/ku86R8N4o3kK8zOY5jSWo+5rqMbbsWY3GrRviHlM3WtpbsKv11KaUbU0q9ZLP4nbqX7/1sSunulNIu4FKyqczH4wMppR0ppV8BnwUurHvt5ymlb+VX03aN/MaU0pdSSieNcdwZ+b9b6rZtAWaOI6aRjbmFQAfZJE3PITu3U4E/H8exJDUn811mzOI1Ig4DnsvYvbqSmp+5LmPbrsVY3KoR1tc93jXK8xmM7ZG6xzv3sW+9+gWoHwQOGeO1/bU9/3dW3bZZwLa9fVNELAOeB3y+bvNw8v2HlNK6lNJG4O/IbuSX1JrMd6Pnu3qvA36WUrp/ArFJKpa5zrZdS7K4VauqX6NrGfBw3fMDHgaXUtpENhPdyXWbTyabkXBvXgdck1K6b8Sx1oyIxyF6kvZX0+e7EV6PvbaS9l/T5zrbds3P4lat6j0R0RMRJ5Dd1/HVBh7788CfR7YO2rHAm4HP7eN7Xj/GPp8Ffj8iDs7v+Xg78B8NjFVS+2uVfEdE/BpwKNnyYpK0P1ol19m2a2IWt2pVPyZbl/UHwN+klK4a7zdGxGsjYm9X695HtvbXg/n7fHR4qvh4YrHyZXXHOxNYwuiNuQ+RLZh9N9l6aDcCHx5vrJJE6+Q7yO5P+0ZKaa/D/SRpFK2S62zbNTHXuVVLiYjDgfuBjv1d40ySWon5TlIZmOvUSPbcSpIkSZJansWtmk4+tGT7KF/7uvFfklqK+U5SGZjrNFUclixJkiRJann23EqSJEmSWp7FrSRJkiSp5VncSiNExOER8aOI2BkRd0bEi/ayb1dEfCYitkbEIxHxjhGvvzA/xs78mIdN/hlI0r6Z6ySVgbmuXCxu1bYicyC/418mW7PsIODdwNciYsEY+74fOBo4DHg+8L8j4qX5+88HvgG8B5gHrKSxC5JLkrlOUimY6zQeFrdqiIh4Z0TcGxHbIuL2iHj5iNffHBF31L1+Wr59aUR8IyI2RMRjEfHxfbzPGyPimoj4eERsya+evbDu9asj4sMRcQ2wEzhyP8/jGOA04H0ppV0ppa8DvwIuGONb3gB8KKW0KaV0B/Bp4I35a68AbkspXZZS6iVLmCdHxLH7E5Ok5mGuM9dJZWCuM9e1KotbNcq9wHOA2cAHgC9GxGKAiPgfZAng9cAs4DzgsYioAv8BPAgcDhwKfGUc73VG/n7zgfcB34iIeXWvvw64CJiZH/tJIuKTEfHJMY59AnBfSmlb3bab8+0jjzMXWJy/Ptq+J9S/llLakcf9lGNJahnmuqfua66T2o+57qn7mutagMWtGiK/ivVwSmkopfRV4B7g9Pzl/wn8dUrp+pRZlVJ6MH/9EOBPUko7Ukq9KaWfjePtHgX+X0qpP3+vu4DfqHv9cyml21JKAyml/lFifUtK6S1jHHsGsGXEti1kCXW0fYdfH23f/TmWpBZgrht1X3Od1GbMdaPua65rARa3aoiIeH1E3BQRmyNiM/B0sitwAEvJrmyNtBR4MKU0sJ9vtzY9eYHmB8mS6bDV+3m8etvJrkLWmwVsG2Pf4ddH23d/jiWpBZjrRt3XXCe1GXPdqPua61qAxa0mLLKZ4j4NXAwclFKaA9wKRL7LamD5KN+6GlgWEbX9fMtDIyLqni8DHq57njhwtwFHRkT9VbiT8+1PklLaBKzLXx9t39vqX4uI6WSfw1OOJan5mevMdVIZmOvMda3M4laNMJ0s8WwAiIg3kV3hG/bPwB9HxDMic1SeOH9BlkT+MiKmR0R3RJw1jvc7GHhbRHTk930cB1zRiBNJKd0N3AS8L4/n5cBJwNfH+JbPA38eEXPzCQXeDHwuf+2bwNMj4oKI6AbeC9ySUrqzEbFKmnLmOnOdVAbmOnNdy7K41YSllG4H/hb4ObAeOBG4pu71y4APA18iG7rxLWBeSmkQeBlwFPAQsAZ41Tje8jqyado35sd9ZUrpsfHGGxGfiohP7WWXVwMrgE3AX+bHH07wr42I+it07yMbmvMg8GPgoyml7wLk33NBHuMmsgkTXj3eOCU1F3OduU4qA3Odua6VxZOHuEvNLSLeCPzPlNKzi45FkiaLuU5SGZjr1Gj23EqSJEmSWp7FrZpOPrxk+yhfextyIkktxVwnqQzMdZpKDkuWJEmSJLU8e24lSZIkSS3P4lZNLyJSRBxVdBySNJnMdZLKwFynyWRxK+Ui4vA84dbfD/KeouOSpEYy10kqA3NdOdWKDkCaLBFRSykNHMC3zjnA75OkKWeuk1QG5jqNhz23ahkRcUZEPBIR1bptL4+IW/LH74+Ir0XEFyNiK/DGiDgiIn4SEdsi4vsR8YmI+GJhJyFJ+2Cuk1QG5jpNBotbtYyU0nXADuAFdZtfA3yp7vn5wNeAOcC/5a/9AjgIeD/wunG81YMRsSYiPhsR8xsQuiSNm7lOUhmY6zQZLG7Var4MXAgQETOBc/Ntw36eUvpWSmkIWAA8E3hvSqkvpfQz4PK9HHtjvv9hwDOAmWSJVJKmmrlOUhmY69RQFrdqNV8CXhERXcArgBtSSg/Wvb667vEhwOMppZ1jvP4kKaXtKaWVKaWBlNJ64GLgJXmylaSpZK6TVAbmOjWUxa1aSkrpduBB4ByeOnQFINU9XgfMi4ieum1L9+ft8n/9O5E0pcx1ksrAXKdG84erVvQl4A+As4HLxtopv/K3Enh/RHRGxJnAy8baP5/Y4GkRUYmIg4CPAVenlLY0NnxJGhdznaQyMNepYSxu1Yq+DDwX+GFKaeM+9n0tcCbwGPAXwFeB3WPseyTwXWAbcGu+34WNCFiSDoC5TlIZmOvUMJFS2vdeUpuIiK8Cd6aU3ld0LJI0Wcx1ksrAXKeR7LlVW4uIZ0bE8nxIykvJppT/VtFxSVIjmesklYG5TvtSKzoAaZItAr5Bth7aGuD3Uko3FhuSJDWcuU5SGZjrtFcOS5YkSZIktTyHJUuSJEmSWl7bDUueP39+Ovzww4sOQ1KT+eUvf7kxpbSg6DgaxVwnaTTmOkllMFaua7vi9vDDD2flypVFhyGpyUTEg0XH0EjmOkmjMddJKoOxcp3DkiVJkiRJLc/iVpIkSZLU8ixuJUmSJEktz+JWkiRJktTyLG4lSZIkSS3P4laSJEmS1PIsbiVJkiRJLc/iVpImUUR8JiIejYhbx3g9IuJjEbEqIm6JiNOmOkZJkqR2YHErSZPrc8BL9/L6OcDR+ddFwD9OQUySJEltx+JWkiZRSuknwON72eV84PMpcy0wJyIWT010kiRJ7cPiVpKKdSiwuu75mnybJEmS9kNhxW0z3If2vI/+iD+69OZGH1aSJkVEXBQRKyNi5YYNG8b9fa/6p5/zW/983SRGJqnsmqFd97Yv38iL/+7HjT6spBZSZM/t5yj4PrTBlBhKqdGHlaT9sRZYWvd8Sb7tKVJKl6SUVqSUVixYsGDcb5CAgaGhCQUpSfvwOQpu1w2lxOCQ7TqpzAorbpvhPrQgSBa3kop1OfD6vFfjWcCWlNK6Rr5BJcD2nqTJ1BTtughMdVK51YoOYC/Gug/tKY2+iLiI7Cogy5YtG/cbRGASlDSpIuLLwPOA+RGxBngf0AGQUvoUcAVwLrAK2Am8qdExVCIYtOdWUrEmv10HdlpIJdfMxe24pZQuAS4BWLFixbizWpYEJysqSYKU0oX7eD0Bb53MGCoR9txKahkH3K6z00IqvWaeLXnc96EdKIevSCqDCJxfQFLRJr9dh50WUtk1c3E76fehOXxFUhnYcyupCUx+uy6CZLeFVGqFDUtuhvvQcPiKpBKohBfyJE2uZmjX2XMrqbDithnuQwuwupXU9rKeW5OdpMnTDO06wuJWKrtmHpY86Ry+IqkMIoJBJ0uW1OYi67aQVGLlLm7xCp+k9letOCxZUvsLb8GQSq/cxa3DVySVQCWCLbv66e0fLDoUSZo0gXebSWVX7uIWhyVLan+VCNZt6eXln/yvokORpEkTjkqWSq/cxa09t5JKYLjBd8e6rcUGIkmTzHadVG6lLm7B4SuS2t/AoJlOUvtzRJ6kUhe3EeEVPklt745H7LGV1P4ckSep3MUtYN+tpHa3s++JiaQefGxHgZFI0uSJsFUnlV25i1uv8EkqgX990+kcu2gmAPdtsLiV1K4ckSeVncVt0UFI0iQ7/pBZfPSVJwMwMGTWk9SessnzzHFSmZW7uCVc7FtSKVQr2Y0Ygxa3ktpU4Ig8qezKXdzacyupJGpVi1tJ7c12naRyF7d4hU9SOVTyxW4HhoYKjkSSJocj8iSVurglwit8kkqh5rBkSW3OnltJpS5us55b06Ck9uc9t5LanSPyJJW7uI2iI5CkqTF8z+23b3q44EgkaXKEDTup9Mpd3OIVPknlUKtk6f5nqzYWHIkkTR5H5EnlVu7iNoLk3RmSSmDBzK6iQ5CkSWerTiq3WtEBFMmeW0ll8pLjF/LQ4zuLDkOSJkUEVrdSyZW859biVlJ5VCvhhFKS2lbgKhhS2ZW7uMVhyZLKo1IJBr2iJ6lNZZ0W5jipzEpd3GLPraQSqUYwZM+tpDblqGRJpS5uTYKSyqRqz62kNubtZpJKXdxKUplUIhgaKjoKSZocroIhqdTFrbPqSSqTSsCQ3RqS2lhv/xBX3fZI0WFIKki5i1snlJJUIs6WLKmdbdnZD8Dvf/nGgiORVJRyF7femyGpRCqV4LEdfUWHIUmTYv22XgB6OqsFRyKpKBa3RQchSVMkJRgcSjywcUfRoUhSww0MZq26g2Z0FRyJpKKUu7glXA9NUmm87OTFANzz6PaCI5GkxnvL85YDcOyimQVHIqko5S5u7bmVVCLHLMwafGs27Sw4EklqvF87aj5Hzp9edBiSClTq4ha851ZSeczr6aSjGqzfurvoUCRpUlQq4azwUomVurjN1kOTpHKoVIJZ3R1s7e0vOhRJmhTVcFZ4qczKXdyCXbeSSmVaZ5VdfYNFhyFJk6JSCQaHio5CUlHKXdx6z62kkunprLKzb6DoMCRpUtQqweCQ1a1UVuUubrHjVlK5TOussavfhp+k9lSpBIO27aTSKndxG8Gv1m7hwcdc81FSOXRVK9zrUkCS2lQ1YMh7bqXSKnVxu703G5r3un/5RcGRSNLUuO3hLazdvIsf3rm+6FAkqeGqlaDPm26l0ip1cds7kE2qss2ZQyWVxCdeexoAd6zbVnAkktR43R1VHtnSW3QYkgpS6uJ2x+6s57ZaKfXHIKlEzj56AQD99mxIakOLZnXTN2B+k8qq1FXdznw5jFolCo5EkqZGpRLUKmFxK6kt1arBoLOFSqVV6uL2iZ5bi1tJ5VGrBv1OJyqpDVUiSBa3UmmVurjdmk8otXbzroIjkaSp01Gt2HMrqS1VIhh0tmSptEpd3A6b0VUrOgRJbSwiXhoRd0XEqoh45yivL4uIH0XEjRFxS0ScO5nxdFrcSmpT1UpgbSuVV6mL20t/90wAjj9kVsGRSGpXEVEFPgGcAxwPXBgRx4/Y7c+BS1NKpwKvBj45mTHVqkH/gK0/Se0nAoYcliyVVqHFbdG9GacfMY+zjjrIxb4lTabTgVUppftSSn3AV4DzR+yTgOGrbLOBhyczoI5qhf4he24lNVbR7TrIhiXbrpPKq7Ditll6MyoRDJgEJU2eQ4HVdc/X5NvqvR/4rYhYA1wB/P5oB4qIiyJiZUSs3LBhwwEHlA1LNu9Japxmadc5LFkqtyJ7bpuiNyNLgmZBSYW6EPhcSmkJGXcHfgAAIABJREFUcC7whYh4Sn5OKV2SUlqRUlqxYMGCA36zgaHEv9/88J4Z4yWpAZqiXReBSwFJJVZkcduw3oyJqFWcVU/SpFoLLK17viTfVu93gEsBUko/B7qB+ZMV0EOP7wTgPd+6dbLeQlL5NEW7rupSQFKpNfuEUuPqzZjIUD2njJc0ya4Hjo6IIyKik2wo3uUj9nkIeCFARBxHVtwe+LjjfXjawpmAk65ImnK26yRNqiKL24b1ZkxkqF7VnltJkyilNABcDFwJ3EF2v9ltEfHBiDgv3+2PgDdHxM3Al4E3pknserjy7WdzzMIZ9PY7qZSkhmmKdl3Fe26lUiuyuG2K3oxqJbw3Q9KkSildkVI6JqW0PKX04Xzbe1NKl+ePb08pnZVSOjmldEpK6arJjqm7o0rvwOBkv42k8miKdl0lsn//1xd+6fBkqYQKK26bpTeju6PKhm27G3lISWp623cPcPVdG2z8SWqIZmnXHTJnGgDfve0RdvR5AU8qm1qRb55SuoJsQoH6be+te3w7cNZkxnDI7G629Q6QUiIiJvOtJKlpHLdoFvdt2MHgUKJWNfdJmrhmaNe98rQlfO2Xa/jF/Y8z6JJnUuk0+4RSk65ayT4C78+QVCYnLpkN4Hq3ktpKpRL8xomLAZcEksqo9MXtcI+Fk0pJKpOOapb++wadVEpSe6nmN94ODJnfpLIpfXFbCYtbSeXTmV/Y6xuw8SepvQwXt7btpPIpfXGbd144dEVSqQz33K7f2ltwJJLUWBa3UnlZ3Ob33JoAJZXJ0QtnAPDf/uFn3P7w1oKjkaTGqToqTyoti9t8klAToKQyecZh8/jds48E4O1fvangaCSpcYbnUxmwbSeVjsVt1Z5bSeX0rnOPo6ezyl3rt7Hq0e1FhyNJDTE8LHnH7oGCI5E01SxuHboiqcTe9sKjAdjVN1hwJJLUGMsXZLddfO/29QVHImmqWdw6oZSkEjsmv/d2yBwoqU0ct3gWc3s62LSzr+hQJE0xi9t8Qqkhe24lldBwDvTeNEntpFatOCpPKiGL2/wTsGEnqYxq+b1pA4OudyupfXRUgv5B23ZS2ZS+uK14z62kEnM9SEntqFateNFOKqHSF7c117mVVGIdLpkhqQ3VqkG/eU0qndIXt3smlDIBSiqh4Xtu+wbs4ZDUPrb3DnDTQ5uLDkPSFLO4HZ5QyplCJZXQgpldANyyxkagpPaxZO401m7exc4+17qVysTi1gmlJJXYoXOmMXtaB5t39RcdiiQ1zLknLgZgW6/FrVQmpS9unVBKUtl1VCvOKiqprcye1gF4y4VUNqUvbocnlPqnH99bcCSSVIyOajirqKS20lnL2nf95japVEpf3A7PFHrV7esLjkSSilGrhrdmSGorHdXh4tbcJpVJ6YvbFYfPA+Ccpy8qOBJJKkZHpWLvhqS2MlzcfsqReVKplL64rVaChbO69tybIUllc9/GHfzHLesYsvdWUptYNq8HgG/euJbkihhSaZS+uAWohkPyJOk/f7Wu6BAkqSGetmjmnsdX37WhwEgkTSWLW6BaDXssJJXWLe9/CXN7OrjkJ/cVHYokNcylv3smAOu39hYciaSpYnFLNmOyPbeSympWdwfPOGwej+/oKzoUSWqYw+dnQ5P7beNJpWFxS3bfrevcSiqzRbO7WLt5V9FhSFLDdOTLPbrUmVQeFrfAus27uOfRbUWHIUmFGb7Ad+NDmwqORJIao5Yv9zjgckBSaVjcAjv6Brl7/Xbvu5VUWq98xlIA7lm/veBIJKkxhpcD6rPnVioNi1vg3BOzNW77h0x+ksrpiPnTAdjZN1BwJJLUGMPF7cd+cE/BkUiaKha3wMlL5gB4362k0urprAJw1e3rC45EkhqjWsmGJe8eGGL3wGDB0UiaCha3PJH8nDFZUll1d1Q5eGaX96ZJaivvPvc4ICtwJbU/i1ueKG6951ZSmR23eBa7vTdNUhvprGVN3X6LW6kULG6x51aSALpqFXb3O3RPUvsYLm6dVEoqB4tb7LmVJICujip3PrKNPns4JLWJznxSqd395jWpDCxugZo9t5LEmUceBMAXrn2w4EgkqTGWzusB4KbVmwuORNJUsLgFKpEVt86WLKnMXnPGMqqV4LHtu4sORZIa4piFMwDYtLOv4EgkTQWLW6BWzYrbLbv6C45EkorVUQ0v9ElqG8Nr3fZ7z61UCha3wFELZgJw9/ptBUciScWqVSr0uxyQpDbxRHFrXpPKwOIWWDynG4DtuwcKjkSSilWrBoND9nBIag8d+eg817mVysHilmz5C8AZQiWVXq0STq4nqW1EPq/Kj+96tOBIJE0Fi1ugq1YFvKonSdWK99xKaj9zp3cWHYKkKWBxyxNDVjY7k56kktu0s5/LfrmGlCxwJbWHU5bOwWt2UjlY3PLEkJVP//T+giORpGL1DQwxOJS4/oFNRYciSQ3RVauwu3+w6DAkTQGL2zqHzO4uOgRJKtQ/v34FAD+5e0PBkUhSY3R1VFm/tdcRKVIJWNzmTj98HssO6ik6DEltKCJeGhF3RcSqiHjnGPv8ZkTcHhG3RcSXpjrGYS86fiHzpneyeZe3aUhqD2ccMY8HHtvpiBSpBCxuc5UKuPqFpEaLiCrwCeAc4Hjgwog4fsQ+RwPvAs5KKZ0A/OGUB1pneleV7b0ujSapPZx74mIAbnjI4lZqd4UWt83Um1GtBIMOV5HUeKcDq1JK96WU+oCvAOeP2OfNwCdSSpsAUkqFrlkxvbPG9t3enyZp/zRTu67e7GkdAPzld+6cireTVKBaUW9c15vxYmANcH1EXJ5Sur1un/rejE0RcfBkxbNpRz+3r9s6WYeXVF6HAqvrnq8BzhixzzEAEXENUAXen1L67sgDRcRFwEUAy5Ytm5RgAWZ01djW2z9px5fUfpqtXVdvXt0yQFt7+5nV3TEVbyupAEX23DZVb8bBs7oA6HU2PUlTrwYcDTwPuBD4dETMGblTSumSlNKKlNKKBQsWTFowC2d1c939j/PZa5xBXtK4NVW7biw7dnvLhdTOiixuR+vNOHTEPscAx0TENRFxbUS8dLQDRcRFEbEyIlZu2HBgM3yetXw+YHErqeHWAkvrni/Jt9VbA1yeUupPKd0P3E1W7Bbifz13OQB/8Z930D/oZASSxqWp2nUj/dm5xwIwMOgtaFI7a/YJpaasN2NaZxWAPhtykhrreuDoiDgiIjqBVwOXj9jnW2R5joiYT9YAvG8qg6x34pLZfPSVJzE4lPjxXS4JJKlhChulsmBmNkJvcMjiVmpnRRa3TdWb0VnNPop+r+hJaqCU0gBwMXAlcAdwaUrptoj4YEScl+92JfBYRNwO/Aj4k5TSY8VEnDnjiIMA2LzLe28ljUtTtetGqlaydt6Axa3U1oosbpuqN6OjFgD0D9hzK6mxUkpXpJSOSSktTyl9ON/23pTS5fnjlFJ6R0rp+JTSiSmlrxQbMXR3Zv897PJWDUnj01TtupFqlaydN+C6j1JbK6y4bbbejI49PbcmPUnq7shu1bjTWeQljUOztetG2lPcOkJPamuFLQUEWW8GcMWIbe+te5yAd+Rfk2q4uPWeW0mCmV3Zfw82BCWNVzO160aqVbPidou3WkhtrdknlJoyw/fc9jksWZKICA4/qId7Ht1WdCiSNGFzerK1bl/7z9exs8/lgKR2ZXGbG76Sd+nK1fvYU5LKYWAoccNDm3nh315ddCiSNCGnLp3DyUtmA/DIlt6Co5E0WSxuc88/9mAAls2bXnAkktQc3n3ucQDcu2FHwZFI0sRExJ41vHc7Sk9qWxa3uZ58ndsB77mVJADOOXExf/DCbJUOJ9uT1OqGJ8qzuJXal8VtbngWvfXbHKoiScPmz8juU/v6L9cUHIkkTUxXLWv29rrEmdS2LG5zEVlx+8VrHyo4EklqHi86fiEA7/zGr9i+20lYJLWuro6s2WvPrdS+LG5Hcd+G7UWHIElNYfHsabzjxccAcPGXbig4Gkk6cF21fFiyPbdS27K4rfOSvIfiwcd3FhyJJDWPt73waM47+RB+es9Gh/NJalndec/tXY+4xJnUrixu6/ze87JZ9EjFxiFJzeaUpXMYHEoWt5Ja1nDP7d9+7+6CI5E0WSxu69Qq2ccxOGR1K0n1OvOJWPq8V01Si1oyd1rRIUiaZBa3dfLalgGLW0l6kj3FrUsCSWpRw2vdDuczSe3Hv+461Xw5oPs2OqGUJNXrrGb/Xezqc1iypNaVSPQNDLHa+VWktmRxW2fJ3B4ABgftuZWkems37wLgp/dsLDgSSTpwh87Jhia/99u3FhyJpMlgcVtnRleNjmqw0wlTJOlJnnP0fAAWze4uOBJJOnCvOX0ZRy6YzkP23EptyeJ2hP7BxH/c8nDRYUhSU+npzGYZdU4CSa2sVq1w6tK59PY7f4DUjixuR7Folj0TklRveDb5ASeUktTiujsqrN28i4fz2y0ktQ+L2xFOXjKbns5a0WFIUlOpVbMJ9wack0BSi3vhcQcD8NXrVxcciaRGs7gdobNW4ZEtvUWHIUlNpSOfLbl/yJ5bSa3tBccu5Ij50/n7H9zjaBSpzVjcjtDbP8Rd67dZ4EpSnVq+VNq7v3krj+/oKzgaSZqY+zfuALKcJql9WNyO8MpnLAGeSHqSJJjZ3bHn8T/88J4CI5GkifvSm88A4Ipb1zHkRHlS27C4HeH4Q2YBMGiik6Q9OmsV7v/IuQDs2D1QcDSSNDG/tnw+/+9Vp7Ctd4CPfOeOosOR1CAWtyNUIht61+89GJL0JBHBsnk99DuplKQ28BsnLQbg5tVbCo5EUqNY3I4we1o2U/IXr32w4Egkqfl0VIM+L/5JagMd1QrPf9oCfvHA49y8enPR4UhqAIvbEY46eCYAjzlhiiQ9RUe1Qv+Axa2k9vDfTz0UgH/9rweKDURSQ1jcjuK5xyzAQXeS9FRdHVU2bt9ddBiS1BDnn3Io3R2VPWt5S2ptFrej6KhW6LNnQpKe4swjD+LG1ZvZ1TdYdCiS1BADg4lLV65hu5PlSS3P4nYUXbUKfQM23CRppCPnTycleGyHvbeS2sOZyw8C4LyP/6zgSCRNlMXtKDprFSdMkaRRdHdWAejtN0dKag+feeMzAbhvww7XvJVanMXtKDodlixJo5rWkRW3Dt+T1C46qhX+7NxjAdjZ78g9qZVZ3I6is1Zht8WtJD3FwlldAHzg329jwBEuktrExu3ZKhlv+bcb7L2VWpjF7SgWze5m885+frXGRb0lqd5JS+bw7nOP48aHNnPHum1FhyNJDfH6Mw8D4Cd3b+CKW9cVHI2kA2VxO4rXnL4MgGvu3VhwJJLUfJ5/7MEAvOzjP3N4sqS2sGRuDze/7yUAPLKlt+BoJB0oi9tRzOnpAOCq2x4pOBJJaj6HHdSz5/EXfv5ggZFIUuP05BPmudSZ1LosbkcRkS3kfcNDmwuORJKaT0e1wg3veTGLZ3fzXS8CSmoTHdUKtUqwtbe/6FAkHaBa0QE0q6cfOotaxdpfkkYzb3onv7Z8Pj+9ZwMppT0XBSWplR0yZxoPPb6z6DAkHSCrtzHM7eksOgRJamonHjqLR7ft5mYn35PUJub0dLhihtTCLG7H0FVzrVtJ2ptzT1oMwHX3PVZwJJLUGF21Crv7bf9JrcphyWP4/h2PFh2CJDW1g6Zna97udPIVSW2iq1ZlZ5+zwEutyp7bMRy7aCYA/YNevZOk0VQr2X22f/+De9iyywlYJLW+rlrFYclSC7O4HcMFpy0BoLffHglJGsvLTz0UgMtWri44EkmauK4Oi1uplVncjqGrI/toTHCSNLb/+6pT6Oms8ssHNxUdiiRNWHetyu4BOzakVmVxO4bOavbRbNy+u+BIJKm5/foJi/je7esZHEpFhyJJE9LVUWH147tIyXwmtSKL2zHct3EHAH9y2S0FRyJJze2Zh89jYCjx8R+uKjoUSZqQ4TW773l0e8GRSDoQFrdjePHxCwFYOKur4EgktbqIeGlE3BURqyLinXvZ74KISBGxYirjm6jzTzmE05bN4f9+/27+6rt3Fh2OJB2w4fbfjt3OmCy1okKL22Zu8D3z8Hl0VIPlB8+YqreU1IYiogp8AjgHOB64MCKOH2W/mcAfANdNbYQTN72rxpfe/CwA/vHqewuORlJRmrldN15d+W1pfc65IrWkworbVmjwddeqDAx6z4WkCTkdWJVSui+l1Ad8BTh/lP0+BPwV0DuVwTVKd0eV33n2EUzvrBYdiqQCtEK7bjycUFRqbUX23DZ9g69WDde5lTRRhwL16+SsybftERGnAUtTSv+5twNFxEURsTIiVm7YsKHxkU5Qd0eFXhuEUlk1fbtuPDqr2QW6TTv7Co5E0oEosrht+gbf5l39fP7nDzbseJI0UkRUgL8D/mhf+6aULkkprUgprViwYMHkB7efumtVBoeSFwWlcmr6dt14LD94OgtndfHRK+9iyBngpZbTtBNKNUODb/GsbgC27Oxv2DEllc5aYGnd8yX5tmEzgacDV0fEA8CzgMub8V60fenuyHo8dvW7RqSkJ2uGdt149HTW+O2zjmDNpl388M5Hp/S9JU1ckcVt0zf4Ln7B0QDs7HfGPEkH7Hrg6Ig4IiI6gVcDlw+/mFLaklKan1I6PKV0OHAtcF5KaWUx4R647vx+216LW6mMmr5dN17nn5J1OG/YvrvgSCTtryKL26Zv8E3rzD6e3n6H2Ek6MCmlAeBi4ErgDuDSlNJtEfHBiDiv2Ogaq7uW5cxHt9oglEqo6dt149XTlV2oW7tpV8GRSNpfhRW3rdDg66plyW33gL0Qkg5cSumKlNIxKaXlKaUP59vem1K6fJR9n9eMjb3xOHTuNAD++yeu4YaHNhUcjaSp1ArtuvGa0Vlj3vROrrr9kaJDkbSfakW+eUrpCuCKEdveO8a+z5uKmOp1d9hzK0njdeaRB/FXF5zIn379V1x33+Octmxu0SFJmkLN3q4br0ol+PUTFnHVbRa3Uqtp2gmlmkElAoBv37R2H3tKkiKC31yxlGol2L7bifgkta6Z3TV29DnnitRqLG734oRDZgNw57ptBUciSa0hIpjRVWN7r41CSa2rp7NKb/8Qgy4HJLUUi9u9WDCzi1ndNaZ3FTp6W5JaypZd/fziAe+5ldS6pndmbb+d9t5KLcXidh+29g7w/TvW0zfgfbeSNB4LZnZxx7qtrN3sTKOSWtPwjMm7+pxUVGolFrf7cNHZRwLwq7VbCo5EklrD216YrRHuMhqSWtVwz+0Oi1uppVjc7sOLj18IOCxFksbr+MUzAdjVb6NQUmvq6cx6bjdud91uqZVY3O5Dd77WrcsBSdL4dHdkefOylasLjkSSDszwfCv/41M/5/9ccQcDg7YDpVZgcbsP0zqzj+hSG2mSNC7HLMx6blc6qZSkFvWMw55Yp/uSn9zn7WlSi7C43YfDDpoOwIOP7Sg4EklqDR3VCm953nIe2drrMhqSWlJ3R5ULT1+65/mtD28lJfOZ1Owsbveho1rhmYfPZf1W77mQpPGa09MBeN+tpNb1kVecxG0f+HWOnD+d93zrVj559b1FhyRpHyxux2HR7GlUougoJKl1VCJLmg9sdNSLpNY1vavGN99yFgC3r9tacDSS9sXidhwOntnFpp39bN/tjMmSNB5H5/fdPr6jr+BIJGliZvd0cPKS2ax+fGfRoUjaB4vbcXj20fMBuPymhwuORJJaw8JZXQD8172PFRyJJE3cisPnccuaLVx916NFhyJpLyxux+F5xyygq1Zh1aPbiw5FklrC8gUzALjqtkcKjkSSJu4dLz4GgLd/9Sb6BlwWSGpWFrfjEBHM7K7RN+jEKJI0Hh3VCscumsl9G3fwun+5ruhwJGlCpnfVeNrCmWza2c/T33clH/z324sOSdIoLG7HqVoJBgadAl6SxuvbF5/Fsnk9/PSejfQ6a7KkFnfZ753Jb5y4mL7BIT5zzf189fqHig5J0ggWt+O0vXeA1ZucSECSxqurVuXNzzkCgG29TsgnqbXN6u7gE689jWvf9UJOOGQWf/r1X/H0913Jx394T9GhScpZ3I7Tjr5Brln1GDev3lx0KJLUMmZ2Z+vdbuvtLzgSSWqMRbO7+dZbz+JlJx/C9t0D/M1VdxcdkqScxe04/e5zjwTgO7c6OYokjdeMrhpgz62k9tJRrfAPF57KH78km2jKSaak5mBxO07vOuc4jjp4BvdvdMZkSRqv2T1Zz+2Fn76W792+vuBoJKmxpnVmF/C+68zwUlOwuN0Py+b1sPrxXUWHIUkt4+Qlc/iTX38aPZ1V3vz5lfxqzZaiQ5Kkhnn+0xYAcOe6rQVHIgksbvfLotndrH58J9t3O7xOksajs1bhrc8/ii+9+VkA3PPotoIjkqTGOXLBDOb2dHjrhdQkLG73wzlPX8S23QN8/Zdrig5FklrKghldANz1iMWtpPYya1oHW500T2oKFrf74cwjDwLgfZffRv+gEwdI0njN6elgydxp3OSM85LazMzuGt++6eGiw5CExe1+qVUrnHHEPAA2bt9dcDSS1DoiguMWz+K6+x8npVR0OJLUMNPzSaV29Q0WHIkki9v99JozlgFw3X2PFxyJJLWW+fnQ5A1eHJTURl5+6qEA/OBOZ4SXimZxu5+e97SDARxaJ0n76WUnLQbgq79YXXAkktQ4LzlhEQAXf+lGPv7DewqORio3i9v9NHtaB4fOmebEAZK0n05eOgeA+zfuKDgSSWqcedM7ueR1z6BWCf7mqru59r7Hig5JKi2L2wPQUQ2+ccNaNu3oKzoUSWoZ07tqHH3wDHoHvC9NUnt5yQmL+O4fnk1XrcJb/u0GhoacW0AqgsXtATht2VwA/uI/7yg4EklqPVf86hGXBJLUdo46eAbvP+8EHt/Rx9rNu4oORyoli9sD8NH/cTIAX7/B9W4laX8cs3AmYP6U1J6WL5gBwL0bthcciVROFrcHoFqJPY97+x1eJ0nj9bELT2X+jE5v65DUlo5cMB2An3vfrVQIi9sDdMnrngHAB//j9oIjkaTWUa0EC2Z2uxyQpLZ00PROjl88i89e80DRoUilZHF7gF58/ELOPXER375xbdGhSFJLmT+jk3vWO2RPUvuJCI5ZOIO+gSFX1pAKYHF7gLLkNZMdfYMMOiOeJI3b8gUzWLt5FymZOyW1n1c9cxkA7/jqzeY5aYpZ3E7AvOmdADy6rbfgSCSpdSyc1Q3AH112c8GRSFLjnbn8IP7Xc5fz/TvWs3mnvbfSVLK4nYC5PVlxu713oOBIJKl1/NazlnHqsjl844a1PPTYTna77q2kNnPsomxm+E07nTxPmkoWtxMwraMKwC5nTJakcZvZ3cHvPPsIAM7+6I94xoe+zzbvTZPURrrzNmJv/1DBkUjlYnE7AT2dWeLa2WdxK0n74wXHHrzn8fbdAzz42M4Co5GkxuqsZctG9g9a3EpTyeJ2Aqblxe3Xfrmm4EgkqbX0dNa44m3P4a3PXw7A1Xc9yhevfdC1wyW1hY5q1sS2uJWmlsXtBBx18AwALr/5YWdMlqT9dPwhs7j4+UcD8DdX3c2ff+tWvunyapLawHBx22dxK00pi9sJmNndwZ//xnH0DQyxfbeTSknS/prWWeUjrziRFx2XDVO+e/22giOSpInrqGbDknfudjSKNJUsbidoZncNwOJWkg7Qhacv45/f8EwOP6iHb9ywliFHwkhqccMravxs1caCI5HKxeJ2gmZ0dQCww+JWkibkd5+7nC27+rll7ZaiQ5GkCTlyQXbr2uf+6wEe3dpbcDRSeVjcTtCMvOf28R2uYyZpdBHx0oi4KyJWRcQ7R3n9HRFxe0TcEhE/iIjDioizaM8+aj5dtQrvuPQm7tuwvehwJGlCTl02B4BLV64uOBKpPAotbtuhwTe81u2qR22ISXqqiKgCnwDOAY4HLoyI40fsdiOwIqV0EvA14K+nNsrmsHReD//4W6dx34YdvPnzK3nPt27ljnVbiw5L0ji1Q7uukT752tOAbMK8hzfvKjgaqRwKK27bpcG3aFY38MRi3ZI0wunAqpTSfSmlPuArwPn1O6SUfpRSGl7o9VpgyRTH2DRecOxCjl00k3s37OAL1z7IBf/4X0WHJGkc2qVd10iLZ0/jGYfNBeCiL6wsOBqpHIrsuW2LBl9PV1bUfvTKO0nJSVAkPcWhQP2YtDX5trH8DvCd0V6IiIsiYmVErNywYUMDQ2wu3774LC6/+CwAjl00s+BoJI1TW7TrGu3Lb34WbzrrcO5+ZLvtRGkKFFnctkWDb/6MLg6Z3c36rbtZ+eCmKX1vSe0lIn4LWAF8dLTXU0qXpJRWpJRWLFiwYGqDm0JdtSonLZnDGUfMo1ZxagipRbRFu67ROmsVls7toW9wiE07+4sOR2p7LdFqaPYG37+88ZkArNm0cx97SiqhtcDSuudL8m1PEhEvAt4NnJdS2j1FsTW1GV01l1mT2lCzt+sabem8HgD+6Sf3FhyJ1P6KLG7bpsE3f0YXANt7bYRJeorrgaMj4oiI6AReDVxev0NEnAr8E1mee7SAGJtSAm5ft5UN25oy9Ut6srZp1zXa2cfM57jFs/i3ax8qOhSp7RVZ3LZNg29mvhzQZoebSBohpTQAXAxcCdwBXJpSui0iPhgR5+W7fRSYAVwWETdFxOVjHK5UluW9HZ+8elXBkUgah7Zp1zVaV63KOU9fxPbdA/zBV24sOhyprRVW3LZTg6+rVmHZvB5uWbul6FAkNaGU0hUppWNSSstTSh/Ot703pXR5/vhFKaWFKaVT8q/z9n7Ecnjr848C4LPXPMA3blhTcDSS9qad2nWT4TlHzwfg2zc9zM6+ASeXkiZJrcg3TyldAVwxYtt76x6/aMqDOgARwVEHz+CWNZtJKRERRYckSS1vwcwuPvzyp/Pub97KOy69mVd+Qb0wAAAZHklEQVSc1vYTq0otrV3adZPh1GVz+fhrTuXiL93IM//i+wwlmDWtxp+dexznn7K3ebck7Y+WmFCqFZy8ZA7rt+5m6y7vu5WkRnnN6cv2PLanQ1Ire9FxC/nNFUs47bC5nH/KIQTBn379Fh7bXopbj6UpYXHbIMctztZivOLWdQVHIkntIyJ41znHAvDQ485IL6l1dXdU+etXnswXfucM/vKCk/jLC06kt3+I/3PFnUWHJrUNi9sGedFxC6lVgrse2VZ0KJLUVk5ZOgeAr1y/eh97SlLrOHP5Qcyb3sm/3/xw0aFIbcPitkEqlWBgKPGl65zmXZIa6YwjDwLgH6++l007+gqORpIao6tW5S3PW07f4BA/uXtD0eFIbcHitsH6Boc46y9/aANMkhroJccvBOCcv/8p7/rGLVy60l5cSa3v1fm8Aq//zC94w2d+wbotu9ja69KS0oGyuG2gj77yJADWbt7F1122QpIa5m9/82SetnAmG7bv5su/WM3//tot7B4YLDosSZqQGV01/uCFR3PUwTP48d0bOPMjP+Tsv/4Rg0NOoCcdCIvbBrrgtCVc/+4XsWBmF9+59RFn9pSkBpnZ3cGVbz+be//Pubzx1w4H4J7124sNSpIa4O0vPobvvf3sPc837+znuvsfKzAiqXVZ3DZQpRIsmNnFa05fxi8f3MS3b3KCAElqtBccezAAvf323EpqDxHBn770WKZ3VgF4zaev4++uuqvgqKTWY3E7CS44bQkA/7+9Ow+Tor7zOP7+9jU3c8CAMNyIKCgCQSUrHhEvXFeMmsTs4+pjSNzExN1kzW48dk3M8USTNc+ajYmbRJNITEJiYkISjRJEvLnkUJBjADmGYwaGGZiBubp/+0cXk2YYxhlppqa7Pq+Hfrr6V9U931/V1Jf6TlX9+uEFG32OREQk++R5B3/Ltu73ORIRkfT5zMVjePv+K3j4xkkALN5S63NEIplHxe1JMLx/PrOnj2LL3kZWbNPBl4hIOpUX5gDwwLPrmLt0G/GE020gIpIVzIxZkyo4d1SZ36GIZCQVtyfJ5y8dSzhkPPT8Br9DERHJKiMHFHDHJacC8KXfvsWYe57hxy9v8TkqEZH0yY2G2by3kefX7PY7FJGMouL2JCnKjTLzzFN4pXIvn3piGdUHmvwOSUQka9x5+bj2S/cA5uqrgUQkixTlRqg52Mxtc5azRJcni3SbituT6MHrJ3LTtOHMX7uH3yzXVwOJiKTT1ROH8MKdFzG8LJ/K6gYWvLPH75BERNLiritP54YPJMdw+ej/va7vvhXpJhW3J1FBToSvX3sWhTkR3tpR73c4IiJZJRwyRpcXMnv6KACeXlHlc0QiIukxrCyf//7I2dw0bTgA9z79ts8RiWQGFbe9oKIkj7+s2c23/rLO71BERLLOLX83krxomD+t3sWPX97sdzgiImnztVlnMrJ/PlX7D/kdikhGUHHbC56YfS6nDSrk+y9u4u0qncEVEUm3r86aAMCCd6p9jkREJH3MjCnDS3lzWx2X/PeLGmBK5D2ouO0Fg/rl8tgt5wBw9f++Qm1ji88RiYhkl49MHUY4ZLy+eZ/foYiIpNW1kyu4bPwgdtU3cduc5br/VqQLKm57ybCyfK6eOBiAh55f73M0IiLZZ/KwEgAam9t8jkREJH0uPK2cH908lc9cPAaAR1/c5HNEIn2Xitte9OD1EwF4cvE2nyMREck+F4wtB+C677/mcyQiIun32Q8lv9+7+mCzz5GI9F0qbntRQU6EC8YOAGBfgxKTiEg6XTp+IADr9xzEOedzNCIi6RUOGeMGFfHU8h0aw0XkOFTc9rJPXjAagBXb6nyOREQku0wYUszXvIGlanRmQ0Sy0FlDiwGYu3S7z5GI9E0qbnvZGYOLAFiwTiN6ioik29CyfAC262szRCQLffuGiZQX5VB3WINKiXRGxW0vG1iUS7/cCL9csk2jJouIpNmw0mRx+9KGvT5HIiKSfmZGRUkedYd0DCnSGRW3Prj3788AYMrX5rN8636foxERyR5DS/MIGTy8YCMvbajxOxwRkbQryY9Sd0hnbkU6o+LWBx87ZziP3TIVgPv/uIbmtrjPEYmIZIfcaJif3HouADc/vsTnaERE0i8SMt6qqmdTTQP1h1uZv3aPBtET8ai49cmMMwbxD2cPYfWOej7z8zf9DkdEJGtcdFo5Q4pzAfjt8h0+RyMikl5DvdsvZjy0iLPvf55PPbGMd3Yd9Dkqkb5Bxa2PvnvjJD5+7jBeWFfNqu0aPVlEJF2emJ08e6sRRUUk23zxinHHtH3jmbU+RCLS96i49ZGZ8YVLTyMWDnHfvDXEE7qkREQkHU4dWMToAQUsebeWNTv1fZAikj0KcyLcNfN0vnbtmVR+YyanDSrk1cp9fPYXuhJQRMWtzwb2y+VfLx3Lqu11/O5NXT4nIpIuD94wEYCXN2rkZBHJLp++aAz/NG0EkXCIB69P5ro/r97F1f/7MptrGnyOTsQ/Km77gNnTRwHw70+t9jkSEZHsMXVEKZGQ8cCz6/jIo6/x+xVVNDS3+R2WiEhaTR5eyqM3TQHg7aoDXPLQIn0bhwSWits+IDca5rLxgwCoPtDkczQiItnBzPjyNRMAWPrufj4/dyVTvjpfBa6IZJ0rzxzMiv+6jJs/OAKA255YxvKttRpFWQJHxW0fcfXEwQC8tmmfz5GIiGSPf5o2gi3fvIq1X72CUQMKaIknuPw7i/jBi5v4yatb2F57yO8QRUTSorQgxv3XTGBE/3z2NbZw/Q9e59LvLNKYLhIoKm77iAvGlgPw3Rc2+hyJiEh2MTPyYxH+/C/Tue3C0RxsauPBv6zj/j+u5YJvLWT2T5eyZIvOcIhI5jMzFt55MfM+dz4FsTCbahr5wtyV/PjlzSzaUENCha5kuYjfAUhSWUGMMeUFbKppZNb3XuEXn5pGQY42j4hIuuTHItxz1RncPfN0DrfG+f2Knfzo5c0sWFfNgnXVTBlewu9uP9/vMEVETkgoZEwcWsKqL1/OrT9dyp9W72Teqp0ADC3N45UvXeJzhCInj87c9iE/vfVcRg8oYNWOeu7/4xq/wxERyUpHzuT+43nDWfjFi3n69r8D4M1tdfxhZZXP0YmIpEckHGLO7POo/MZVLLl3BmUFMXbsP8wnf7aURxZWsq+h2e8QRdLOsu0yrKlTp7ply5b5Hcb7lkg4Zj3yKm9V1XNWRTHnjCzjsvGDOLOiH0W5Ub/DE8lYZrbcOTfV7zjSJdNzXV+zu76Jad9cAMCZFf144LqJnFlR7HNUIj2nXCfHs7+xhX+es5x3dh/gYFNyYL1xg4r40sxxDC7OI55wTBjSDzPzOVKR93a8XKfitg/a39jCDY++xqaaxqPa7555Ov980RifohLJbDrgk/fy/Jrd3DZnefvr5f95Kf0Lc3yMSKTnlOukO97YvI/HX9nC82v3HNVeUZLHD2/+ACP6F9DUGmeAcqD0USpuM1BLW4I1O+t5ffM+fvdmFZXVDVw54RS+87GzyY/pflyRntABn3RHIuF4ZGElD83fAMDK+y6jJD/mc1Qi3adcJz2xvfYQb1XVs6m6gScXb2N3yldShgwW3HkxowYU+BihSOeOl+t0z20fFouEmDy8lNsvPpU/3TGdD0+u4C9rdjP+vucYedefWbKl1u8QRUSySihk3DFjLLMmDQHgm8+sY8veRrbtO6TRlEUk6wwry+eqswZzx4yxvHHPDK6bXMHo8gKum1xBwsGn5yzncEvc7zBFuk1nbjPMwvXVLFpfw09fexeAwcW5/PGO6bpsROQ96GyG9IRzjlF3P3NU203ThvP1a8/yKSKR7lGuk3RwznHhtxeyvfYwAEOKczlnVBmnlhfyiemj9I0e4rvj5Tr9ZmaYD40byIfGDeSU4lweeHYdu+qbmPr1v3L9lKHcccmpjNSlIyIiJ8zMeOyWqWysbmBb7SF+sXgbP39jGxUl+VwzaQgVJXl+hygictKYGS/9+4eYu3Q7izbUsGJbHX9Ymfw6oe+/uIkvXTmOoaX5XDp+kM+RihxNZ24z3JOLt/LEa1tZv+cgAEU5Ef5650UM6pfrc2QifYvOZsiJeHrFDr4wd1X766LcCOMH9+MDI0oBaI0nuHjcQM4/dYBfIYoAynVy8tQcbOZ7L2zkZ69vbW+LhIxLzxhERWke9151BqGQRlqW3qEBpbLcc2t2c8cvV9DSlqAgFuacUWVMGlbCNWcPYXR5od/hifhOB3xyoiqrG3hlYw0bqxtYub2OjXsaaIknMIMj/5WeN6qMX35qmg7wxDfKdXKy7aw7TG1jCz9/Yyu/XradhJf/fnTzVC7TmVzpJSpuA+LF9dU89soWdtc3sbG6AYBpo8t48pPTaI0nyI2GfY5QxB864JN0iyccbYkEsXCIFdvruO77rwEQC4e48LQBXD7hFD46dZjPUUrQKNdJb9tVf5gPfvMFKkryePWuS/wORwKiT46WbGZXmtl6M6s0s7s6mZ9jZnO9+YvNbGTvR5lZLh43kDmzz2P+v13EE584lwGFMd7YXMuYe55hwpef43O/eJO1Ow9o1E+RXqRcl53CISMnEsbMmDK8lCX3zOAT54/i7GHF/PWdav7jqdW8WrnX7zBFeo1yXTANLs5jxukDqao7zJX/8xL/t2gTG/YcZGfdYRqa23TMKb3KtzO3ZhYGNgCXATuApcDHnXNrU5a5HZjonPu0md0IfNg597GuPld/4TtaU2ucB55dB8BbVfUs37ofgLxomNMHFzGxopgR/QsozotSlBuhKDfKgMIYebEwsUiInEiYnEiIWDiky+wko/l1NkO5Lpi27TvEhd9eCMDYgYVEwyEG9cuhJD9GaX6M/FiYhHPkx8JMG92f8qIc8qJhcqJhomEjEgoRCZnyrvSYcp34YXvtIe789SpqGprZsrfxqHnlRTmU5EUpLYhRnBelMCfCoH659C+IUV6UQywSoig3Qr/cKCEzQiHIiYTolxulOD9KTkRXHcqx+uJoyecClc65zQBm9itgFrA2ZZlZwFe86aeA75mZOf0JqNtyo2G+cs2E9tfbaw+xaEMNm2oaWLGtjt8s38Ghbn5/WSwcojA3Qr/cCNFwiFgk1P4ca39txCLJg7MjRXE0HCIaSR6ohUNG2Ixw2JIHbmaYvffBW3cO77rxMZJFLjytnDGZcT+5cl0ADe+fz/98bBJ/WFlFXixMS1uCHfsPU1nTwN6DLbTEE4QMWuNdb+KQQSQcIhqy5PORwjdsRMPJvBppfzai3ry/vcc6fX84ZETDxxbP1iHbdsyr1uW87r+34wId5/Xks9/zvV3853CifTg6jq7fe+zP7l7/p44o46yhxV1/WN+gXBdgw8ry+fWnPwjA2p0HWLvrAG3xBLsPNLGpppG2eIKag81srz1EQ3Mbu+qbiCe6t9lDBjmRMLnR5HFoNJw8voyEjVg4eSImeUIm2WYY3j/MzHtOflZqW3KZ5AxrXz7ZZpa6H9ox849+T+rrTj4v5ed5n9bl55ES8/E+rz0y6/rz6GQd9FXjB/fjvNH9T/hz/CxuK4DtKa93AOcdbxnnXJuZ1QP9gaOu8zKz24DbAIYPH36y4s0Kw8ryuWnaiPbX8YSj7lALB5vaONjUxoGmVvY1ttDUGqe5LUFLW4LmtjjNrQma2xIcaGqloamN1nhyXov3fKiljbrDCVrbXHtbSzzRvlxrPEE84ehmHhN5Tw/fOClTilvluoC6dnIF106u6HKZ3fVNrNi2n8aWOE2tyUdbwtEWT9Aad8QTjtZEgra41+bNa4u79unWePLe33jCtefcxpZ4ynKdvD/haIs7Eik1xTHp2XV8mbLsMfM6vO6wwLHzu1wtkuLumadnSnGrXCcAjB/Sj/FD+nW5jHOO+sOt1Da20Bp37Gtspqk1TjyRPDZtiSc4cLiVukMtNLUmjykPt8Q52NRKazyZ69oSjua2ePI49FAbzW3JNue8bOWSuedIPkpOJ3OZc0fnoSPvSZ2f+h6OvKezz0v5eX9rP/7nkRpDJz8/qG49f2TGF7dp45z7IfBDSF6+4nM4GSUcMvoX5tC/MKdXfl4i4Yi75AFbcjCWbmyubi2izR40ebHgXaakXJd9TinOZeZZg/0Oo085pjDuopDuaRHdVYF+bBzHf2/H+SdU3L/HzwniQJDKddnPzCjJj1GSH/NainyNp69xrmOBfXSxDH/LI0cV7KnvP7KMy4zj5FgkPUNB+VncVgGpw0gO9do6W2aHmUWAYmBf74QnJ0MoZIQwAvh/tQSXcp1ID3S8jLjrS+n6+HV2waJcJ5ImZtYh9ynXdZefoyUvBcaa2SgziwE3AvM6LDMPuMWbvgF4QfdliEiGUa4TkSBQrhMR3/l25ta71+JzwHNAGHjcObfGzL4KLHPOzQMeA+aYWSVQSzJRiohkDOU6EQkC5ToR6Qt8vefWOfcM8EyHtvtSppuAj/R2XCIi6aRcJyJBoFwnIn7z87JkERERERERkbRQcSsiIiIiIiIZT8WtiIiIiIiIZDwVtyIiIiIiIpLxVNyKiIiIiIhIxlNxKyIiIiIiIhlPxa2IiIiIiIhkPBW3IiIiIiIikvHMOed3DGllZjXA1h68ZQCw9ySFkwmC3n/QOghK/0c458r9DiJdlOt6TP1X/4PSf+W64Gzr4wn6Ogh6/yEY66DTXJd1xW1Pmdky59xUv+PwS9D7D1oHQe9/UAR9O6v/6n+Q+x8k2tZaB0HvPwR7HeiyZBEREREREcl4Km5FREREREQk46m4hR/6HYDPgt5/0DoIev+DIujbWf0PtqD3P0i0rbUOgt5/CPA6CPw9tyIiIiIiIpL5dOZWREREREREMp6KWxEREREREcl4gS1uzexKM1tvZpVmdpff8aSTmT1uZtVm9nZKW5mZzTezjd5zqdduZvZdbz2sNrMpKe+5xVt+o5nd4kdf3g8zG2ZmC81srZmtMbN/9doDsQ7MLNfMlpjZKq//93vto8xssdfPuWYW89pzvNeV3vyRKZ91t9e+3syu8KdHciKyOdelMrN3zewtM1tpZsu8th7v85lEub7T/n/FzKq834OVZnZVyrxO81lQ9pEgCMq2VL5rbwtMvgPlvG5zzgXuAYSBTcBoIAasAsb7HVca+3chMAV4O6XtW8Bd3vRdwIPe9FXAs4AB04DFXnsZsNl7LvWmS/3uWzf7PxiY4k0XARuA8UFZB14/Cr3pKLDY69evgRu99keBz3jTtwOPetM3AnO96fHevpEDjPL2mbDf/dOjR78LWZ3rOvT1XWBAh7Ye7fOZ9lCu77T/XwG+2MmyneazIO0j2f4I0rZUvnt/fc7kfNfFOlDO6/AI6pnbc4FK59xm51wL8Ctgls8xpY1z7iWgtkPzLOBn3vTPgGtT2p9wSW8AJWY2GLgCmO+cq3XO7QfmA1ee/OhPnHNul3PuTW/6IPAOUEFA1oHXjwbvZdR7OOAS4CmvvWP/j6yXp4AZZmZe+6+cc83OuS1AJcl9RzJHVue6bujpPp9RlOs77f/xHC+fBX0fySZB35bKd1mc70A5r7uCWtxWANtTXu/w2rLZIOfcLm96NzDImz7eusiKdeRdYjuZ5NnLwKwDMwub2UqgmmTy3gTUOefavEVS+9LeT29+PdCfDO6/tAvSNnTA82a23Mxu89p6us9ng8DkuS58zrsU8fEjlykSrP4HVZC2pfJdkvJdknJeiqAWt4HmktcrZP13QJlZIfBb4PPOuQOp87J9HTjn4s65ScBQkn+lO93nkEROtunOuSnATOCzZnZh6sxs3+c7E8Q+Az8AxgCTgF3AQ/6GI3JSKN91EMQ+e5TzOghqcVsFDEt5PdRry2Z7jlyG4j1Xe+3HWxcZvY7MLEqysH3SOfc7rzlQ6wDAOVcHLAQ+SPKynIg3K7Uv7f305hcD+8iC/ktwtqFzrsp7rgaeJvlHnZ7u89kgcHkulXNuj/fHvQTwI/52K0Ug+h9wgdmWynftAp3vQDmvM0EtbpcCYy05emyM5CA683yO6WSbBxwZFe4W4A8p7Td7I8tNA+q9SzyeAy43s1LvEofLvbY+z7tf9DHgHefcd1JmBWIdmFm5mZV403nAZSTvO14I3OAt1rH/R9bLDcAL3l9A5wE3WnI05VHAWGBJ7/RC0iQQuc7MCsys6Mg0yX31bXq+z2eDQOS54+lwL+GHSf4ewPHzWSD2kYAIxLZUvjtKoPMdKOd16kRGo8rkB8mR1DaQvBfxXr/jSXPffkny0oRWktfSzyZ5D+UCYCPwV6DMW9aAR7z18BYwNeVzPkHyBvRK4Fa/+9WD/k8neWnKamCl97gqKOsAmAis8Pr/NnCf1z6aZGKrBH4D5Hjtud7rSm/+6JTPutdbL+uBmX73TY/39fuQtbkupY+jSY74uApYc6Sf72efz6SHcn2n/Z/j9W81yQO2wSnLd5rPgrCPBOURhG2pfBfMfNfFOlDO6/Awr5MiIiIiIiIiGSuolyWLiIiIiIhIFlFxKyIiIiIiIhlPxa2IiIiIiIhkPBW3IiIiIiIikvFU3IqIiIiIiEjGU3ErIiIiIiIiGU/FrYiIiIiIiGS8/wdF9WhRWqQORQAAAABJRU5ErkJggg==\n","text/plain":["<Figure size 1152x864 with 6 Axes>"]},"metadata":{"needs_background":"light"}},{"output_type":"stream","name":"stdout","text":["\n","2021-07-01 XRPUSDT_majorst_backi2.xlsx loaded !\n","cloud_lookback : 69\n"]},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1152x864 with 6 Axes>"]},"metadata":{"needs_background":"light"}},{"output_type":"stream","name":"stdout","text":["\n","2021-07-01 EOSUSDT_majorst_backi2.xlsx loaded !\n","cloud_lookback : 69\n"]},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1152x864 with 6 Axes>"]},"metadata":{"needs_background":"light"}},{"output_type":"stream","name":"stdout","text":["\n","2021-07-01 LTCUSDT_majorst_backi2.xlsx loaded !\n","cloud_lookback : 69\n"]},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1152x864 with 6 Axes>"]},"metadata":{"needs_background":"light"}},{"output_type":"stream","name":"stdout","text":["\n","2021-07-01 ETCUSDT_majorst_backi2.xlsx loaded !\n","cloud_lookback : 69\n"]},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1152x864 with 6 Axes>"]},"metadata":{"needs_background":"light"}},{"output_type":"stream","name":"stdout","text":["\n","2021-07-01 LINKUSDT_majorst_backi2.xlsx loaded !\n","cloud_lookback : 69\n"]},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1152x864 with 6 Axes>"]},"metadata":{"needs_background":"light"}},{"output_type":"stream","name":"stdout","text":["\n","2021-07-01 XLMUSDT_majorst_backi2.xlsx loaded !\n","cloud_lookback : 69\n"]},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1152x864 with 6 Axes>"]},"metadata":{"needs_background":"light"}},{"output_type":"stream","name":"stdout","text":["\n","2021-07-01 ADAUSDT_majorst_backi2.xlsx loaded !\n","cloud_lookback : 69\n"]},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1152x864 with 6 Axes>"]},"metadata":{"needs_background":"light"}},{"output_type":"stream","name":"stdout","text":["\n","2021-07-01 ETHUSDT_majorst_backi2.xlsx loaded !\n","cloud_lookback : 69\n"]},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1152x864 with 6 Axes>"]},"metadata":{"needs_background":"light"}},{"output_type":"stream","name":"stdout","text":["\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_QWCSc0fqOm4","executionInfo":{"status":"ok","timestamp":1631528424596,"user_tz":-540,"elapsed":252,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"fae57cd4-29b9-484d-f3e3-b68031f752c8"},"source":["np_long_tp_ratio_list = np.array(long_tp_ratio_list)\n","print(np.mean(np_long_tp_ratio_list[np.isnan(np_long_tp_ratio_list) == 0]))"],"execution_count":25,"outputs":[{"output_type":"stream","name":"stdout","text":["35.13251404098008\n"]}]},{"cell_type":"markdown","metadata":{"id":"NRe3-Cm6WTX8"},"source":["##### temp test bed"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":202,"referenced_widgets":["541dd82dcb5741d48781a8c636a372a0","5c46eab4f57246d59dfeb07bc25a51b9","86d43e6e72484a15b7c6245599415683","f2daa14b7c6d4f82bd6933a42aa38847","39503b4ecf764b79a82736ac14f4283e","31f88f573db744a19d98085205a1faba","673523eba6d044d4903d28212cf61db4","fd0fea58bd90471188c78ad49112aeae","ea7e377735ed45b6a1d6488c1ff99e5d","982e3c8a535e43e1a7a8b70562e3c4ee","98e260dad9214f68b5ea9e6b76f36fe4"]},"id":"sH8QDdwROp1S","executionInfo":{"status":"ok","timestamp":1630802938683,"user_tz":-540,"elapsed":298,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"}},"outputId":"a91aacfc-5d0b-4576-b758-efec8930818f"},"source":["# short_col_values = res_df[comp_target_lines].values - oc_max.values.reshape(-1, 1) # target_lines cols 중, 양수 중 최소 index 찾기\n","print(short_col_values.shape)\n","# short_candi_cols = np.argwhere(short_col_values > 0) # -> 여기서 얻고 싶은 건 조건에 해당되는 axis=1 의 col idx\n","# 1. 음수 value 를 모두 해당 axis=1 내의 최대값으로 변경하고, \n","# 2. 변경된 value 내에서 최소값을 찾는다\n","# 3. broad cast issue 로, col 내에서 for loop 로 수정해야할 것\n","\n","# short_col_max = np.max(short_col_values, axis=1)\n","# short_candi_cols = np.where(short_col_values < 0, short_col_max, short_col_values)\n","\n","# for col_idx in range(short_col_values.shape[1]):\n","#   print(\"short_col_values[:, [col_idx]].shape :\", short_col_values[:, [col_idx]].shape)\n","#   short_col_values[:, [col_idx]] = np.where(short_col_values[:, [col_idx]] < 0, short_col_max, short_col_values[:, [col_idx]])\n","\n","short_col_values = res_df[comp_target_lines].values - oc_max.values.reshape(-1, 1) # target_lines cols 중, 양수 중 최소 index 찾기\n","short_ep = oc_max.copy()\n","\n","copy_short_col_values = short_col_values.copy()\n","show_log = 1\n","for row_i in tqdm(range(len(short_col_values))):\n","\n","  if show_log:\n","    print(\"short_col_values[row_i] :\", short_col_values[row_i])\n","  copy_short_col_values[row_i] = np.where(short_col_values[row_i] < 0, np.inf, short_col_values[row_i])\n","  \n","  min_idx = np.argmin(copy_short_col_values[row_i])\n","  min_value = copy_short_col_values[row_i][min_idx]\n","  if show_log:\n","    print(\"copy_short_col_values[row_i] :\", copy_short_col_values[row_i])\n","    print(\"min_value :\", min_value)\n","    print()\n","\n","  print(\"short_ep.iloc[row_i] :\", short_ep.iloc[row_i])\n","  short_ep.iloc[row_i] = short_ep.iloc[row_i] + min_value\n","  print(\"short_ep.iloc[row_i] :\", short_ep.iloc[row_i])\n","  print()\n","\n","  break"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["(432000, 9)\n"]},{"output_type":"display_data","data":{"application/vnd.jupyter.widget-view+json":{"model_id":"541dd82dcb5741d48781a8c636a372a0","version_minor":0,"version_major":2},"text/plain":["  0%|          | 0/432000 [00:00<?, ?it/s]"]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["short_col_values[row_i] : [ -8.19276289 -18.29741206  -3.77833901 -22.13875895  -0.47899232\n"," -16.20746905 -12.20011597 -10.19643943 -14.20379251]\n","copy_short_col_values[row_i] : [inf inf inf inf inf inf inf inf inf]\n","min_value : inf\n","\n","short_ep.iloc[row_i] : 383.27\n","short_ep.iloc[row_i] : inf\n","\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":185,"referenced_widgets":["66f3db03a61c45d997e682c7cad5d1ba","e049d175868a40f894961429a67614c0","c83ced7d50624d718fc4672fb7c78b22","587a572adf224a03b06190f2ec5459a6","ae1232fc9c2a43dba86a9f03e9c65da9","1f4229da1e234b1d9a3b00e7c7c0acd3","a2a168593a054e3dad1d1fa425b69c30","6095003f270645a6aac66370e444b483","69da1dc47a614c518dc64153a0ce7fa1","c2ed438816084815950b5d457e9ae203","163989804b8b4abb86d76deda0580b4d"]},"id":"PvJrwx9acP7U","executionInfo":{"status":"ok","timestamp":1630803162807,"user_tz":-540,"elapsed":293,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"}},"outputId":"ac263184-4e8e-409a-8f01-8b627a0377df"},"source":["long_col_values = oc_min.values.reshape(-1, 1) - res_df[comp_target_lines].values # target_lines cols 중, 양수 중 최소 index 찾기\n","long_ep = oc_min.copy()\n","\n","copy_long_col_values = long_col_values.copy()\n","for row_i in tqdm(range(len(long_col_values))):\n","\n","  if show_log:\n","    print(\"long_col_values[row_i] :\", long_col_values[row_i])\n","  copy_long_col_values[row_i] = np.where(long_col_values[row_i] < 0, np.inf, long_col_values[row_i])\n","  \n","  min_idx = np.argmin(copy_long_col_values[row_i])\n","  min_value = copy_long_col_values[row_i][min_idx]\n","  if show_log:\n","    print(\"copy_long_col_values[row_i] :\", copy_long_col_values[row_i])\n","    print(\"min_value :\", min_value)\n","    print()\n","  \n","  print(\"long_ep.iloc[row_i] :\", long_ep.iloc[row_i])\n","  long_ep.iloc[row_i] = long_ep.iloc[row_i] - min_value\n","  print(\"long_ep.iloc[row_i] :\", long_ep.iloc[row_i])\n","  break"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"application/vnd.jupyter.widget-view+json":{"model_id":"66f3db03a61c45d997e682c7cad5d1ba","version_minor":0,"version_major":2},"text/plain":["  0%|          | 0/432000 [00:00<?, ?it/s]"]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["long_col_values[row_i] : [ 2.56276289 12.66741206 -1.85166099 16.50875895 -5.15100768 10.57746905\n","  6.57011597  4.56643943  8.57379251]\n","copy_long_col_values[row_i] : [ 2.56276289 12.66741206         inf 16.50875895         inf 10.57746905\n","  6.57011597  4.56643943  8.57379251]\n","min_value : 2.562762892256103\n","\n","long_ep.iloc[row_i] : 377.64\n","long_ep.iloc[row_i] : 375.0772371077439\n"]}]},{"cell_type":"markdown","metadata":{"id":"-IbP_Z3Dlwk4"},"source":["### nontp survey"]},{"cell_type":"markdown","metadata":{"id":"FxJ1y8v2fkCR"},"source":["##### term & liqd"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":614},"id":"-qIWa48pl1GO","executionInfo":{"elapsed":8,"status":"ok","timestamp":1628300788555,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"},"user_tz":-540},"outputId":"b2687c93-e070-4d45-8a67-4cc783fd78f1"},"source":["# print(nontp_long_indexs)\n","\n","plot_size = 100\n","\n","for s_i in range(plot_size, len(trade_list), plot_size):\n","\n","  slice_trade_list = trade_list[s_i - plot_size:s_i]\n","  slice_liqd_list = liqd_list[s_i - plot_size:s_i]\n","\n","  # print(len(slice_trade_list))\n","  np_trade = np.array(slice_trade_list)\n","  trade_term = np_trade[:, [2]] - np_trade[:, [1]]\n","\n","  plt.figure(figsize=(5, 10))\n","  plt.subplot(211)\n","  plt.bar(np.arange(len(trade_term)), trade_term.reshape(-1,), width=1, color='b')\n","\n","  # plt.plot(trade_term.reshape(-1,))\n","  plt.ylim(0, 1000)\n","  # plt.show()\n","  # print()\n","\n","  plt.subplot(212)\n","  # print(len(liqd_list))\n","  # plt.bar(np.arange(len(liqd_list)), liqd_list)\n","  plt.bar(np.arange(len(slice_liqd_list)), np.array(slice_liqd_list), width=1, color='r')\n","  # plt.plot(slice_liqd_list)\n","  plt.show()\n","\n","print()"],"execution_count":null,"outputs":[{"data":{"image/png":"\n","text/plain":["<Figure size 360x720 with 2 Axes>"]},"metadata":{"tags":[]},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["\n"]}]},{"cell_type":"markdown","metadata":{"id":"VBwVaUkvfnOd"},"source":["##### check nontp index"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"mRCMBOU4frNY","executionInfo":{"elapsed":454,"status":"ok","timestamp":1628220543161,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"},"user_tz":-540},"outputId":"ce4a9c9b-3589-40b3-8a19-4be03d5b9a1e"},"source":["# np_nontp_short_indexs = np.array(nontp_short_indexs)\n","# np_nontp_long_indexs = np.array(nontp_long_indexs)\n","\n","# short_til_term = len(res_df) - np_nontp_short_indexs\n","# long_til_term = len(res_df) - np_nontp_long_indexs\n","\n","max_nontp_short_term = len(res_df) - nontp_short_indexs[0]\n","max_nontp_long_term = len(res_df) - nontp_long_indexs[0]\n","\n","print(max_nontp_long_term)"],"execution_count":null,"outputs":[{"name":"stdout","output_type":"stream","text":["32747\n"]}]},{"cell_type":"markdown","metadata":{"id":"JNQxkb06ZdTe"},"source":["# traded section plot"]},{"cell_type":"markdown","metadata":{"id":"UmH_Pb5BZUtm"},"source":["## plot with off-color st with dash"]},{"cell_type":"markdown","metadata":{"id":"59nW2aKYzkN8"},"source":["### plot all indicator (stepline ver.)"]},{"cell_type":"code","metadata":{"id":"JDH4rXgNzno6","colab":{"base_uri":"https://localhost:8080/","height":1000,"output_embedded_package_id":"1_WRxqG0-t8-eYA4sfy65nGZlZc0StOfU"},"executionInfo":{"status":"error","timestamp":1631527812542,"user_tz":-540,"elapsed":82242,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"10d195b0-c3a0-44a9-91f5-b924d6d007fa"},"source":["save_plot = False\n","\n","\n","if save_plot:\n","  plot_check_dir = current_path + \"plot_check/\" +  key.replace(\".xlsx\", \"\")\n","  try:\n","    os.mkdir(plot_check_dir)\n","  except:\n","\n","    #     remove existing dir   #\n","    shutil.rmtree(plot_check_dir)\n","    print(plot_check_dir, 'removed !')\n","    os.mkdir(plot_check_dir)\n","    # pass\n","    \n","prev_plotsize = 120\n","post_plotsize = 20\n","\n","# inversion = True\n","inversion = False\n","\n","# hedge = True\n","# hedge = False\n","\n","\n","if inversion:  \n","\n","    plot_pr_list = rev_np_pr\n","    h_plot_pr_list = h_rev_np_pr  # hedge\n","\n","else:\n","\n","    plot_pr_list = np_pr\n","    try:\n","      h_plot_pr_list = h_np_pr\n","    except Exception as e:\n","      print(\"error in h_plot_pr :\", e)\n","      h_plot_pr_list = np_pr\n","\n","\n","#         select plot columns       #\n","major_st_list = ['major_ST1_Up', 'major_ST1_Down', 'major_ST2_Up', 'major_ST2_Down', 'major_ST3_Up', 'major_ST3_Down',\n","                 'major_middle_line', 'major_upper_middle', 'major_lower_middle']\n","\n","basic_list = ['open', 'high', 'low', 'close', 'minor_ST1_Up', 'minor_ST1_Down',\n","       'minor_ST2_Up', 'minor_ST2_Down', 'minor_ST3_Up', 'minor_ST3_Down',\n","       'middle_line', 'min_upper', 'max_lower'] # + major_st_list\n","\n","\n","senkoua_list = ['senkou_a1', 'senkou_a2', 'senkou_a3', 'senkou_a4', 'senkou_a5']\n","senkoub_list = ['senkou_b1', 'senkou_b2', 'senkou_b3', 'senkou_b4', 'senkou_b5']\n","senkoua_list = ['senkou_a1',  'senkou_a2']\n","senkoub_list = ['senkou_b1',  'senkou_b2']\n","\n","# sar_list = ['sar1', 'sar2', 'sar3', 'sar4', 'sar5']\n","sar_list = ['sar1']\n","\n","# ma_list = ['sma1', 'sma4']\n","ma_list = ['ema5']\n","\n","\n","#     -------------- under price phase --------------    #\n","macd_list = ['macd_hist1', 'macd_hist2', 'macd_hist3', 'macd_hist4', 'macd_hist5']\n","# macd_list = ['macd_hist1', 'macd_hist2', 'macd_hist3']\n","# trix_list = ['trix1', 'trix2', 'trix3', 'trix4', 'trix5']\n","trix_list = ['trix1', 'trix2', 'trix3']\n","stoch_list = ['stoch']\n","fisher_list = ['fisher30', 'fisher60', 'fisher120']\n","cctbbo_list = ['cctbbo']\n","emaroc_list = ['ema_roc']\n","\n","\n","#       \n","# input_cols = basic_cols + sar_cols + ichimoku_cols + macd_cols + ichimoku_cols2\n","# input_colname = basic_list + senkoua_list + senkoub_list + sar_list + macd_list + trix_list\n","# input_colname = basic_list + senkoua_list + senkoub_list + sar_list + macd_list\n","# input_colname = basic_list + senkoua_list + senkoub_list + sar_list + macd_list + ma_list\n","# input_colname = basic_list + senkoua_list + senkoub_list + sar_list + ma_list + macd_list + stoch_list + fisher_list + cctbbo_list\n","input_colname = basic_list + major_st_list + senkoua_list + senkoub_list + sar_list + stoch_list + fisher_list + emaroc_list\n","price_colname = basic_list + senkoua_list + senkoub_list + sar_list # currently just used for ymin, ymax\n","# input_cols = basic_cols + sar_cols + ichimoku_cols + macd_cols\n","\n","\n","\n","\n","# for t_i, (initial_i, i, j) in enumerate(trade_list):\n","for t_i, (ep_idx_list_, tp_idx_list_) in enumerate(trade_list):\n","  # print(i, j)\n","\n","  if not(i >= prev_plotsize):\n","    continue\n","\n","  # if i <= 4860:\n","  # if i == 1536:\n","  # if 100 < i < 1860:\n","  #   pass\n","  # else:\n","  #   continue\n","\n","  # if tp_state_list[t_i] != 'd-open':\n","  #   continue\n","\n","  # if (entry[i] == -1) and res_df['close'].iloc[i - 1] > short_ep.iloc[i]:\n","  #   pass\n","  # else:\n","  #   continue\n","\n","  # if plot_pr_list[t_i] > 0.5:\n","  if plot_pr_list[t_i] > 1.0:\n","  # if plot_pr_list[t_i] < 1.0:\n","    continue\n","\n","  # plot_df = res_df.iloc[i - prev_plotsize:j + post_plotsize, input_cols]\n","  plot_df = res_df.iloc[ep_idx_list_[0] - prev_plotsize:tp_idx_list_[-1] + post_plotsize][input_colname]\n","\n","\n","  #       keep off-color st with another variable         #\n","  # st_trend_plot_df = res_df.iloc[ep_idx_list_[0] - prev_plotsize:tp_idx_list_[-1] + post_plotsize, [7, 10, 13]]\n","  # st_trend_plot_df = res_df[['minor_ST1_Trend', 'minor_ST2_Trend', 'minor_ST3_Trend']].iloc[ep_idx_list_[0] - prev_plotsize:tp_idx_list_[-1] + post_plotsize]\n","  st_trend_plot_df = res_df[['minor_ST1_Trend', 'minor_ST2_Trend', 'minor_ST3_Trend', 'major_ST1_Trend', 'major_ST2_Trend', 'major_ST3_Trend']].iloc[ep_idx_list_[0] - prev_plotsize:tp_idx_list_[-1] + post_plotsize]\n","  # htf_st_trend_plot_df = res_df[['major_ST1_Trend', 'major_ST2_Trend', 'major_ST3_Trend']].iloc[ep_idx_list_[0] - prev_plotsize:tp_idx_list_[-1] + post_plotsize]\n","\n","  # y_max = np.max(plot_df.iloc[:, [4, 6, 8]])\n","  # y_min = np.min(plot_df.iloc[:, [5, 7, 9]])\n","  # print(\"y_max, y_min :\", y_max, y_min)\n","  \n","  # y_max = max(np.max(plot_df.iloc[:, [4, 6, 8]]))\n","  # y_min = min(np.min(plot_df.iloc[:, [5, 7, 9]]))\n","  \n","  y_max = max(np.max(plot_df[price_colname]))\n","  y_min = min(np.min(plot_df[price_colname]))\n","\n","  if np.isnan(y_max) or np.isnan(y_min):\n","    continue\n","  # print(\"y_max, y_min :\", y_max, y_min)\n","  # break\n","  \n","  plot_df[\"off_color_upper_st1\"] = np.where(st_trend_plot_df['minor_ST1_Trend'] == 1, plot_df['minor_ST1_Up'], np.nan)\n","  plot_df[\"off_color_upper_st2\"] = np.where(st_trend_plot_df['minor_ST2_Trend'] == 1, plot_df['minor_ST2_Up'], np.nan)\n","  plot_df[\"off_color_upper_st3\"] = np.where(st_trend_plot_df['minor_ST3_Trend'] == 1, plot_df['minor_ST3_Up'], np.nan)\n","  plot_df[\"off_color_lower_st1\"] = np.where(st_trend_plot_df['minor_ST1_Trend'] == -1, plot_df['minor_ST1_Down'], np.nan)\n","  plot_df[\"off_color_lower_st2\"] = np.where(st_trend_plot_df['minor_ST2_Trend'] == -1, plot_df['minor_ST2_Down'], np.nan)\n","  plot_df[\"off_color_lower_st3\"] = np.where(st_trend_plot_df['minor_ST3_Trend'] == -1, plot_df['minor_ST3_Down'], np.nan)\n","\n","  plot_df[\"off_color_upper_hst1\"] = np.where(st_trend_plot_df['major_ST1_Trend'] == 1, plot_df['major_ST1_Up'], np.nan)\n","  plot_df[\"off_color_upper_hst2\"] = np.where(st_trend_plot_df['major_ST2_Trend'] == 1, plot_df['major_ST2_Up'], np.nan)\n","  plot_df[\"off_color_upper_hst3\"] = np.where(st_trend_plot_df['major_ST3_Trend'] == 1, plot_df['major_ST3_Up'], np.nan)\n","  plot_df[\"off_color_lower_hst1\"] = np.where(st_trend_plot_df['major_ST1_Trend'] == -1, plot_df['major_ST1_Down'], np.nan)\n","  plot_df[\"off_color_lower_hst2\"] = np.where(st_trend_plot_df['major_ST2_Trend'] == -1, plot_df['major_ST2_Down'], np.nan)\n","  plot_df[\"off_color_lower_hst3\"] = np.where(st_trend_plot_df['major_ST3_Trend'] == -1, plot_df['major_ST3_Down'], np.nan)\n","\n","\n","  #       replace st values with np.nan, using st trend     #\n","  plot_df['minor_ST1_Up'] = np.where(st_trend_plot_df['minor_ST1_Trend'] == 1, np.nan, plot_df['minor_ST1_Up'])\n","  plot_df['minor_ST2_Up'] = np.where(st_trend_plot_df['minor_ST2_Trend'] == 1, np.nan, plot_df['minor_ST2_Up'])\n","  plot_df['minor_ST3_Up'] = np.where(st_trend_plot_df['minor_ST3_Trend'] == 1, np.nan, plot_df['minor_ST3_Up'])\n","  plot_df['minor_ST1_Down'] = np.where(st_trend_plot_df['minor_ST1_Trend'] == -1, np.nan, plot_df['minor_ST1_Down'])\n","  plot_df['minor_ST2_Down'] = np.where(st_trend_plot_df['minor_ST2_Trend'] == -1, np.nan, plot_df['minor_ST2_Down'])\n","  plot_df['minor_ST3_Down'] = np.where(st_trend_plot_df['minor_ST3_Trend'] == -1, np.nan, plot_df['minor_ST3_Down'])\n","\n","  plot_df['major_ST1_Up'] = np.where(st_trend_plot_df['major_ST1_Trend'] == 1, np.nan, plot_df['major_ST1_Up'])\n","  plot_df['major_ST2_Up'] = np.where(st_trend_plot_df['major_ST2_Trend'] == 1, np.nan, plot_df['major_ST2_Up'])\n","  plot_df['major_ST3_Up'] = np.where(st_trend_plot_df['major_ST3_Trend'] == 1, np.nan, plot_df['major_ST3_Up'])\n","  plot_df['major_ST1_Down'] = np.where(st_trend_plot_df['major_ST1_Trend'] == -1, np.nan, plot_df['major_ST1_Down'])\n","  plot_df['major_ST2_Down'] = np.where(st_trend_plot_df['major_ST2_Trend'] == -1, np.nan, plot_df['major_ST2_Down'])\n","  plot_df['major_ST3_Down'] = np.where(st_trend_plot_df['major_ST3_Trend'] == -1, np.nan, plot_df['major_ST3_Down'])\n","\n","\n","  plot_short_ep = short_ep.iloc[ep_idx_list_[0] - prev_plotsize:tp_idx_list_[-1] + post_plotsize]\n","  plot_long_ep = long_ep.iloc[ep_idx_list_[0] - prev_plotsize:tp_idx_list_[-1] + post_plotsize]\n","\n","  plot_upper_middle = (plot_df['middle_line'] + plot_df['min_upper']) / 2\n","  plot_lower_middle = (plot_df['middle_line'] + plot_df['max_lower']) / 2\n","\n","  plot_short_tp = short_tp.iloc[ep_idx_list_[0] - prev_plotsize:tp_idx_list_[-1] + post_plotsize]\n","  plot_long_tp = long_tp.iloc[ep_idx_list_[0] - prev_plotsize:tp_idx_list_[-1] + post_plotsize]  \n","\n","\n","  # fig = trendln.plot_support_resistance(plot_df['close'], accuracy=8, fromwindows=False, numbest=1,  window=30) # requires matplotlib - pip install matplotlib\n","\n","  fig = plt.figure(figsize=(12, 16))\n","  \n","  gs = gridspec.GridSpec(nrows=3, # row 몇 개 \n","                       ncols=1, # col 몇 개 \n","                       height_ratios=[3, 1, 1]\n","                      )\n","  \n","  # fig = plt.figure(figsize=(8, 12))\n","  # ax = fig.add_subplot(111)\n","  # ax = fig.add_subplot(311)\n","  ax = fig.add_subplot(gs[0])\n","\n","  # fig.show()\n","  # fig.canvas.draw()\n","\n","  temp_ohlc = plot_df.values[:, :4]\n","  index = np.arange(len(temp_ohlc))\n","  candle = np.hstack((np.reshape(index, (-1, 1)), temp_ohlc))\n","  mf.candlestick_ohlc(ax, candle, width=0.5, colorup='r', colordown='b')\n","\n","  plt.step(plot_df[['minor_ST1_Up', 'minor_ST2_Up', 'minor_ST3_Up']].values, 'r', alpha=1)  # upper on color\n","  plt.step(plot_df[['minor_ST1_Down', 'minor_ST2_Down', 'minor_ST3_Down']].values, 'b', alpha=1)  # lower on color\n","  \n","  plt.step(plot_df[['major_ST1_Up', 'major_ST2_Up', 'major_ST3_Up']].values, 'r', alpha=1, linewidth=3)  # major upper on color\n","  plt.step(plot_df[['major_ST1_Down', 'major_ST2_Down', 'major_ST3_Down']].values, 'b', alpha=1, linewidth=3)  # major lower on color\n","\n","  plt.step(plot_df[['middle_line']].values, 'fuchsia', alpha=1)  # middle \n","  plt.step(plot_df[['major_middle_line']].values, 'fuchsia', alpha=1, linewidth=3)  # major_middle \n","  \n","  plt.step(plot_df[['off_color_upper_st1', 'off_color_upper_st2', 'off_color_upper_st3']].values, 'r', alpha=1, linestyle=':')  # upper off color\n","  plt.step(plot_df[['off_color_lower_st1', 'off_color_lower_st2', 'off_color_lower_st3']].values, 'b', alpha=1, linestyle=':')  # lower off color\n","  \n","  plt.step(plot_df[['off_color_upper_hst1', 'off_color_upper_hst2', 'off_color_upper_hst3']].values, 'r', alpha=1, linestyle=':', linewidth=3)  # major upper off color\n","  plt.step(plot_df[['off_color_lower_hst1', 'off_color_lower_hst2', 'off_color_lower_hst3']].values, 'b', alpha=1, linestyle=':', linewidth=3)  # major lower off color\n","\n","\n","  # plt.step(np.arange(len(plot_df)), plot_short_ep.values, alpha=1, linestyle='--', color='y')  # ep\n","  # plt.step(np.arange(len(plot_df)),plot_long_ep.values, alpha=1, linestyle='--', color='y')  # ep\n","\n","  plt.step(np.arange(len(plot_df)), plot_upper_middle.values, alpha=1, linestyle='--', color='g')  # 2nd middle\n","  plt.step(np.arange(len(plot_df)), plot_lower_middle.values, alpha=1, linestyle='--', color='g')  # 2nd middle\n","\n","  plt.step(plot_df[['major_upper_middle']].values, 'g', linestyle='--', alpha=1, linewidth=3)  # major_middle \n","  plt.step(plot_df[['major_lower_middle']].values, 'g', linestyle='--', alpha=1, linewidth=3)  # major_middle \n","  \n","\n","  # plt.step(np.arange(len(plot_df)), plot_short_tp.values, alpha=1, linestyle=':', color='y')  # tp\n","  # plt.step(np.arange(len(plot_df)), plot_long_tp.values, alpha=1, linestyle=':', color='y')  # tp\n","\n","\n","\n","  # ---------------------- on price indicator part ---------------------- #\n","\n","  # ---------------------- sma ---------------------- #\n","  # alpha = 1\n","  # for sm_i, sma in enumerate(ma_list):\n","  #   if sm_i > 0:\n","  #     lw = 5\n","  #   else:\n","  #     lw = 2\n","  #   plt.step(np.arange(len(plot_df)), plot_df[sma].values, alpha=alpha, color='black', linewidth=lw)\n","  #   alpha -= 0.2\n","  \n","  #               sar               #\n","  alpha = 1\n","  markersize = 5\n","  for sar in sar_list:\n","    plt.step(plot_df[sar].values, 'c*', alpha=alpha, markersize=markersize, color='dodgerblue')  # sar mic\n","    markersize += 1\n","    alpha -= 0.1\n","\n","  # plt.step(plot_df.values[:, [12]], 'co', alpha=1, markersize=7)  # sar mac\n","\n","  #               cloud               #\n","  alpha = 0.7\n","  for senkoua, senkoub in zip(senkoua_list, senkoub_list):\n","    plt.fill_between(np.arange(len(plot_df)), plot_df[senkoua].values, plot_df[senkoub].values, # ichimoku\n","                      where=plot_df[senkoua].values >= plot_df[senkoub].values, facecolor='g', alpha=alpha) # ichimoku\n","    plt.fill_between(np.arange(len(plot_df)), plot_df[senkoua].values, plot_df[senkoub].values,\n","                      where=plot_df[senkoua].values <= plot_df[senkoub].values, facecolor='r', alpha=alpha)  \n","    alpha -= 0.05\n","  \n","  # ------------------------------------------------------------- #\n","\n","\n","  #       ep & tp     #\n","  # if i != initial_i:\n","  # if len(ep_idx_list_) > 1:\n","  \n","  # ------------- initial order ------------- #\n","  plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_list[t_i]), alpha=0.5, linestyle='--', color='lime')\n","\n","  for ep_i in range(len(ep_idx_list_)):\n","    plt.axvline(prev_plotsize - (ep_idx_list_[ep_i] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","\n","  # plt.axvline(prev_plotsize, alpha=0.5, linestyle='--')\n","  plt.axhline(ep_tp_list[t_i][0], linestyle='-', xmin=0.75, xmax=1, linewidth=3, color='lime')  # ep line axhline\n","\n","  for sub_i in range(len(ep_tp_list[t_i][1])):\n","    plt.axhline(ep_tp_list[t_i][1][sub_i], linestyle='-', xmin=0.75 + 0.05 * (sub_i + 1) , xmax=1, linewidth=3, color='lime')  # tp line axhline\n","    # plt.axhline(ep_tp_list[t_i][1], linestyle='-', xmin=0.9, xmax=1, linewidth=3)  # tp line axhline  \n","    plt.axvline(prev_plotsize + (tp_idx_list_[sub_i] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","\n","\n","  #         hedge ep & tp         #\n","  h_i = h_trade_list[t_i][1]\n","  if h_i is not None:\n","    plt.axvline(prev_plotsize + (h_i - ep_idx_list_[0]), linestyle='--')\n","    plt.axhline(h_ep_tp_list[t_i][0], linestyle='-', xmin=0.75, xmax=1, linewidth=3, color='magenta')  # ep line axhline\n","    plt.axhline(h_ep_tp_list[t_i][1], linestyle='-', xmin=0.85, xmax=1, linewidth=3, color='magenta')  # tp line axhline\n","\n","  \n","  #         check pr        #\n","  if not static_lvrg:\n","    plt.title(\"%s ~ %s -> %.5f\\n %s\\n h_pr : %.5f\\nlvrg : %s\\ntp_ratio : %.2f\" % (ep_idx_list_[0], tp_idx_list_[-1], plot_pr_list[t_i], tp_state_list[t_i], h_plot_pr_list[t_i], lvrg_list[t_i], tp_ratio_list[t_i]))\n","  else:\n","    plt.title(\"%s ~ %s -> %.5f\\n %s\\n h_pr : %.5f\\ntp_ratio : %.2f\" % (ep_idx_list_[0], tp_idx_list_[-1], plot_pr_list[t_i], tp_state_list[t_i], h_plot_pr_list[t_i], tp_ratio_list[t_i]))\n","\n","  print(\"short real pr :\", (ep_tp_list[t_i][0] / ep_tp_list[t_i][1][sub_i] - fee - 1) * lvrg + 1)\n","  print(\"long real pr :\", (ep_tp_list[t_i][1][sub_i] / ep_tp_list[t_i][0] - fee - 1) * lvrg + 1)\n","\n","  #           y lim         #\n","  plt.ylim(y_min, y_max)\n","\n","\n","  # ---------------------- outer price indi. ---------------------- #\n","  #           macd          #\n","  # plt.subplot(312)\n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for macd in macd_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[macd].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_list[t_i]), alpha=0.5, linestyle='--', color='lime')\n","\n","  # plt.axhline(0, linestyle='--')\n","\n","  \n","  # #           trix          #  \n","  # # plt.subplot(313)\n","  # plt.subplot(gs[2])\n","  # alpha = 1\n","  # for trix in trix_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[trix].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_list[t_i]), alpha=0.5, linestyle='--', color='lime')\n","  # plt.axhline(0, linestyle='--')\n","\n","  \n","  #           fisher          #  \n","  # plt.subplot(313)\n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for fisher in fisher_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[fisher].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","    \n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_list[t_i]), alpha=0.5, linestyle='--', color='lime')\n","\n","  # plt.axhline(0, linestyle='--')\n","  # plt.axhline(fisher_upper, linestyle='--')\n","  # plt.axhline(fisher_lower, linestyle='--')\n","\n","  #           stoch          #  \n","  # # plt.subplot(313)\n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for stoch in stoch_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[stoch].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axhline(50, linestyle='--')\n","  # plt.axhline(stoch_upper, linestyle='--')\n","  # plt.axhline(stoch_lower, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_list[t_i]), alpha=0.5, linestyle='--', color='lime')\n","\n","  # ---------- cctbbo ---------- #  \n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for cctbbo in cctbbo_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[cctbbo].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axhline(50, linestyle='--')\n","  # plt.axhline(cctbbo_upper, linestyle='--')\n","  # plt.axhline(cctbbo_lower, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_list[t_i]), alpha=0.5, linestyle='--', color='lime')\n","\n","  # ---------- ema_roc ---------- #  \n","  plt.subplot(gs[1])\n","  alpha = 1\n","  for emaroc in emaroc_list:\n","    plt.step(np.arange(len(plot_df)), plot_df[emaroc].values, 'g', alpha=alpha)\n","    # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","    alpha -= 0.2\n","  plt.axvline(prev_plotsize, linestyle='--')\n","  plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_list[t_i]), alpha=0.5, linestyle='--', color='lime')\n","  plt.axhline(0, linestyle='--')\n","\n","\n","\n","\n","\n","  # ---------------------- plot ---------------------- #\n","\n","  if not save_plot:\n","    plt.show()\n","  \n","  else:\n","    # ---------- save mode ---------- #\n","    fig_name = plot_check_dir +  \"/%s.png\" % t_i\n","    plt.savefig(fig_name)\n","    print(fig_name, \"saved !\")\n","\n","  \n","  plt.close()\n","  print()\n","\n","  # break\n"],"execution_count":16,"outputs":[{"output_type":"display_data","data":{"text/plain":"Output hidden; open in https://colab.research.google.com to view."},"metadata":{}}]},{"cell_type":"code","metadata":{"id":"KGuJu2j4Aby9"},"source":["# print()\n","for item in os.listdir(current_path + \"plot_check/\"):\n","  if item.endswith('png'):\n","    os.remove(current_path + \"plot_check/\" + item)\n","    print(current_path + \"plot_check/\" + item, \"removed !\")"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"cj9X6S1jJjER"},"source":["### plot nontp case"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000,"output_embedded_package_id":"1dHUk1pGrUHlPNEF1BNYHFo70iOYuc0d-"},"id":"Gb1jGrS4Jl8A","executionInfo":{"elapsed":5201438,"status":"ok","timestamp":1628239204133,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"},"user_tz":-540},"outputId":"3c9e8485-f381-43e9-ecd6-49126078bdd7"},"source":["prev_plotsize = 50\n","\n","# inversion = True\n","inversion = False\n","\n","# hedge = True\n","# hedge = False\n","\n","short_ver = False\n","\n","\n","if inversion:  \n","\n","    plot_pr_list = rev_np_pr\n","    h_plot_pr_list = h_rev_np_pr  # hedge\n","\n","else:\n","\n","    plot_pr_list = np_pr\n","    h_plot_pr_list = h_np_pr\n","\n","\n","\n","#         select plot columns       #\n","# basic_cols = [0, 1, 2, 3, 5, 6, 8, 9, 11, 12, 14] # you don't need to touch\n","\n","# sar_cols = [15, 18] # 15 ~ 19\n","# ichimoku_cols = [20, 21]  # 20 ~ 29\n","# # ichimoku_cols = [22, 23]  # 20 ~ 29\n","# ichimoku_cols2 = [22, 23]  # 20 ~ 29\n","# macd_cols = [30]  # 30 ~ 34\n","\n","# print(res_df.columns[basic_cols])\n","# break\n","\n","basic_list = ['open', 'high', 'low', 'close', 'minor_ST1_Up', 'minor_ST1_Down',\n","       'minor_ST2_Up', 'minor_ST2_Down', 'minor_ST3_Up', 'minor_ST3_Down',\n","       'middle_line', 'min_upper', 'max_lower']\n","# senkoua_list = ['senkou_a1', 'senkou_a2', 'senkou_a3', 'senkou_a4', 'senkou_a5']\n","# senkoub_list = ['senkou_b1', 'senkou_b2', 'senkou_b3', 'senkou_b4', 'senkou_b5']\n","senkoua_list = ['senkou_a1', 'senkou_a2', 'senkou_a3']\n","senkoub_list = ['senkou_b1', 'senkou_b2', 'senkou_b3']\n","# sar_list = ['sar1', 'sar2', 'sar3', 'sar4', 'sar5']\n","# sar_list = ['sar1', 'sar2', 'sar3', 'sar4', 'sar5']\n","sar_list = ['sar1', 'sar2', 'sar3']\n","sar_list = ['sar1', 'sar2', 'sar3']\n","\n","#     -------------- under price phase --------------    #\n","macd_list = ['macd_hist1', 'macd_hist2', 'macd_hist3', 'macd_hist4', 'macd_hist5']\n","trix_list = ['trix1', 'trix2', 'trix3', 'trix4', 'trix5']\n","stoch_list = ['stoch']\n","fisher_list = ['fisher']\n","cctbbo_list = ['cctbbo']\n","\n","\n","#       \n","# input_cols = basic_cols + sar_cols + ichimoku_cols + macd_cols + ichimoku_cols2\n","# input_colname = basic_list + senkoua_list + senkoub_list + sar_list + macd_list + trix_list\n","input_colname = basic_list + senkoua_list + senkoub_list + sar_list + macd_list + stoch_list + fisher_list + cctbbo_list\n","price_colname = basic_list + senkoua_list + senkoub_list + sar_list \n","# input_cols = basic_cols + sar_cols + ichimoku_cols + macd_cols\n","\n","\n","if short_ver:\n","  nontp_indexs = nontp_short_indexs\n","  nontp_liqd_list = nontp_short_liqd_list\n","  nontp_pr_list = nontp_short_pr_list\n","  nontp_ep = nontp_short_ep_list\n","else:\n","  nontp_indexs = nontp_long_indexs\n","  nontp_liqd_list = nontp_long_liqd_list\n","  nontp_pr_list = nontp_long_pr_list\n","  nontp_ep = nontp_long_ep_list\n","\n","\n","for t_i, i in enumerate(nontp_indexs):\n","\n","  j = len(res_df) - 1\n","\n","  # print(i, j)\n","\n","  if not(i >= prev_plotsize):\n","    continue\n","\n","  # if i <= 4860:\n","  # if i == 1536:\n","  # # if 1800 < i < 1860:\n","  #   pass\n","  # else:\n","  #   continue\n","\n","  # if tp_state_list[t_i] != 'd-open':\n","  #   continue\n","\n","  # if (entry[i] == -1) and res_df['close'].iloc[i - 1] > upper_ep.iloc[i]:\n","  #   pass\n","  # else:\n","  #   continue\n","\n","  # if plot_pr_list[t_i] > 0.5:\n","  # if plot_pr_list[t_i] > 1.0:\n","  # # if plot_pr_list[t_i] < 1.0:\n","  #   continue\n","\n","  # plot_df = res_df.iloc[i - prev_plotsize:j + 1, input_cols]\n","  plot_df = res_df.iloc[i - prev_plotsize:j + 1][input_colname]\n","\n","\n","  #       keep off-color st with another variable         #\n","  st_trend_plot_df = res_df.iloc[i - prev_plotsize:j + 1, [7, 10, 13]]\n","\n","  # y_max = np.max(plot_df.iloc[:, [4, 6, 8]])\n","  # y_min = np.min(plot_df.iloc[:, [5, 7, 9]])\n","  # print(\"y_max, y_min :\", y_max, y_min)\n","  \n","  # y_max = max(np.max(plot_df.iloc[:, [4, 6, 8]]))\n","  # y_min = min(np.min(plot_df.iloc[:, [5, 7, 9]]))\n","  \n","  y_max = max(np.max(plot_df[price_colname]))\n","  y_min = min(np.min(plot_df[price_colname]))\n","  # print(\"y_max, y_min :\", y_max, y_min)\n","  # break\n","\n","  plot_df[\"off_color_upper_st1\"] = np.where(st_trend_plot_df.iloc[:, [0]] == 1, plot_df.iloc[:, [4]], np.nan)\n","  plot_df[\"off_color_upper_st2\"] = np.where(st_trend_plot_df.iloc[:, [1]] == 1, plot_df.iloc[:, [6]], np.nan)\n","  plot_df[\"off_color_upper_st3\"] = np.where(st_trend_plot_df.iloc[:, [2]] == 1, plot_df.iloc[:, [8]], np.nan)\n","  plot_df[\"off_color_lower_st1\"] = np.where(st_trend_plot_df.iloc[:, [0]] == -1, plot_df.iloc[:, [5]], np.nan)\n","  plot_df[\"off_color_lower_st2\"] = np.where(st_trend_plot_df.iloc[:, [1]] == -1, plot_df.iloc[:, [7]], np.nan)\n","  plot_df[\"off_color_lower_st3\"] = np.where(st_trend_plot_df.iloc[:, [2]] == -1, plot_df.iloc[:, [9]], np.nan)\n","\n","\n","  #       replace st values with np.nan, using st trend     #\n","  plot_df.iloc[:, [4]] = np.where(st_trend_plot_df.iloc[:, [0]] == 1, np.nan, plot_df.iloc[:, [4]])\n","  plot_df.iloc[:, [6]] = np.where(st_trend_plot_df.iloc[:, [1]] == 1, np.nan, plot_df.iloc[:, [6]])\n","  plot_df.iloc[:, [8]] = np.where(st_trend_plot_df.iloc[:, [2]] == 1, np.nan, plot_df.iloc[:, [8]])\n","  plot_df.iloc[:, [5]] = np.where(st_trend_plot_df.iloc[:, [0]] == -1, np.nan, plot_df.iloc[:, [5]])\n","  plot_df.iloc[:, [7]] = np.where(st_trend_plot_df.iloc[:, [1]] == -1, np.nan, plot_df.iloc[:, [7]])\n","  plot_df.iloc[:, [9]] = np.where(st_trend_plot_df.iloc[:, [2]] == -1, np.nan, plot_df.iloc[:, [9]])\n","\n","\n","  plot_upper_ep = upper_ep.iloc[i - prev_plotsize:j + 1]\n","  plot_lower_ep = lower_ep.iloc[i - prev_plotsize:j + 1]\n","\n","  plot_upper_middle = (plot_df['middle_line'] + plot_df['min_upper']) / 2\n","  plot_lower_middle = (plot_df['middle_line'] + plot_df['max_lower']) / 2\n","\n","  plot_short_tp = short_tp.iloc[i - prev_plotsize:j + 1]\n","  plot_long_tp = long_tp.iloc[i - prev_plotsize:j + 1]  \n","\n","\n","\n","  # fig = plt.figure(figsize=(12, 16))\n","  fig = plt.figure(figsize=(12, 16))\n","  \n","  gs = gridspec.GridSpec(nrows=3, # row 몇 개 \n","                       ncols=1, # col 몇 개 \n","                       height_ratios=[3, 1, 1]\n","                      )\n","  \n","  # fig = plt.figure(figsize=(8, 12))\n","  # ax = fig.add_subplot(111)\n","  # ax = fig.add_subplot(311)\n","  ax = fig.add_subplot(gs[0])\n","\n","  # fig.show()\n","  # fig.canvas.draw()\n","\n","  temp_ohlc = plot_df.values[:, :4]\n","  index = np.arange(len(temp_ohlc))\n","  candle = np.hstack((np.reshape(index, (-1, 1)), temp_ohlc))\n","  mf.candlestick_ohlc(ax, candle, width=0.5, colorup='r', colordown='b')\n","\n","  # print(plot_df.values[:, 4:])\n","  plt.step(plot_df.values[:, [4, 6, 8]], 'r', alpha=1)  # upper on color\n","  # plt.plot(plot_df.values[:, [4, 6, 8]], 'r', alpha=1)  # upper on color\n","  plt.step(plot_df.values[:, [5, 7, 9]], 'b', alpha=1)  # lower on color\n","  plt.step(plot_df.values[:, [10]], 'fuchsia', alpha=1)  # middle\n","  \n","  plt.step(plot_df.values[:, -6:-3], 'r', alpha=1, linestyle=':')  # upper off color\n","  plt.step(plot_df.values[:, -3:], 'b', alpha=1, linestyle=':')  # lower off color\n","\n","\n","\n","  # plt.step(np.arange(len(plot_df)), plot_upper_ep.values, alpha=1, linestyle='--', color='y')  # ep\n","  # plt.step(np.arange(len(plot_df)),plot_lower_ep.values, alpha=1, linestyle='--', color='y')  # ep\n","\n","  plt.step(np.arange(len(plot_df)), plot_upper_middle.values, alpha=1, linestyle='--', color='g')  # 2nd middle\n","  plt.step(np.arange(len(plot_df)), plot_lower_middle.values, alpha=1, linestyle='--', color='g')  # 2nd middle\n","\n","  # plt.step(np.arange(len(plot_df)), plot_short_tp.values, alpha=1, linestyle=':', color='y')  # tp\n","  # plt.step(np.arange(len(plot_df)), plot_long_tp.values, alpha=1, linestyle=':', color='y')  # tp\n","\n","\n","\n","  # ---------------------- indicator part ---------------------- #\n","  \n","  #               sar               #\n","  alpha = 1\n","  markersize = 5\n","  for sar in sar_list:\n","    plt.step(plot_df[sar].values, 'c*', alpha=alpha, markersize=markersize, color='dodgerblue')  # sar mic\n","    markersize += 1\n","    alpha -= 0.1\n","\n","  # plt.step(plot_df.values[:, [12]], 'co', alpha=1, markersize=7)  # sar mac\n","\n","  #               cloud               #\n","  alpha = 0.7\n","  for senkoua, senkoub in zip(senkoua_list, senkoub_list):\n","    plt.fill_between(np.arange(len(plot_df)), plot_df[senkoua].values, plot_df[senkoub].values, # ichimoku\n","                      where=plot_df[senkoua].values >= plot_df[senkoub].values, facecolor='g', alpha=alpha) # ichimoku\n","    plt.fill_between(np.arange(len(plot_df)), plot_df[senkoua].values, plot_df[senkoub].values,\n","                      where=plot_df[senkoua].values <= plot_df[senkoub].values, facecolor='r', alpha=alpha)  \n","    alpha -= 0.05\n","  \n","  # ------------------------------------------------------------- #\n","\n","\n","  #       ep & tp     #\n","  if i != initial_i:\n","    plt.axvline(prev_plotsize - (i - initial_i), alpha=0.5, linestyle='--')\n","  plt.axvline(prev_plotsize, alpha=0.5, linestyle='--')\n","  plt.axhline(nontp_ep[t_i], linestyle='-', xmin=0.75, xmax=1, linewidth=3, color='lime')  # ep line axhline\n","\n","  # for sub_i in range(len(ep_tp_list[t_i][1])):\n","  #   plt.axhline(ep_tp_list[t_i][1][sub_i], linestyle='-', xmin=0.75 + 0.05 * (sub_i + 1) , xmax=1, linewidth=3, color='lime')  # tp line axhline\n","    # plt.axhline(ep_tp_list[t_i][1], linestyle='-', xmin=0.9, xmax=1, linewidth=3)  # tp line axhline    \n","\n","  #         hedge ep & tp         #\n","  # h_i = h_trade_list[t_i][1]\n","  # if h_i is not None:\n","  #   plt.axvline(prev_plotsize + (h_i - i), linestyle='--')\n","  #   plt.axhline(h_ep_tp_list[t_i][0], linestyle='-', xmin=0.75, xmax=1, linewidth=3, color='magenta')  # ep line axhline\n","  #   plt.axhline(h_ep_tp_list[t_i][1], linestyle='-', xmin=0.85, xmax=1, linewidth=3, color='magenta')  # tp line axhline\n","\n","  \n","  #         check pr        #\n","  plt.title(\"%s ~ %s -> liqd : %.2f\\npr : %.2f\" % (i, j, nontp_liqd_list[t_i], nontp_pr_list[t_i]))\n","\n","  #           y lim         #\n","  plt.ylim(y_min, y_max)\n","\n","\n","  # #           macd          #\n","  # # plt.subplot(312)\n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for macd in macd_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[macd].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axhline(0, linestyle='--')\n","\n","  \n","  # #           trix          #  \n","  # # plt.subplot(313)\n","  # plt.subplot(gs[2])\n","  # alpha = 1\n","  # for trix in trix_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[trix].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axhline(0, linestyle='--')\n","\n","  \n","  #           fisher          #  \n","  # # plt.subplot(313)\n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for fisher in fisher_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[fisher].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axhline(0, linestyle='--')\n","  # plt.axhline(fisher_upper, linestyle='--')\n","  # plt.axhline(fisher_lower, linestyle='--')\n","\n","  #           stoch          #  \n","  # plt.subplot(313)\n","  plt.subplot(gs[1])\n","  alpha = 1\n","  for stoch in stoch_list:\n","    plt.step(np.arange(len(plot_df)), plot_df[stoch].values, 'g', alpha=alpha)\n","    # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","    alpha -= 0.2\n","  plt.axvline(prev_plotsize, linestyle='--')\n","  plt.axhline(50, linestyle='--')\n","  plt.axhline(stoch_upper, linestyle='--')\n","  plt.axhline(stoch_lower, linestyle='--')\n","\n","\n","\n","  # ---------------------- plot ---------------------- #\n","\n","  plt.show()\n","  # plt.draw()\n","  plt.close()\n","  print()\n","\n","  # break\n"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":"Output hidden; open in https://colab.research.google.com to view."},"metadata":{}}]},{"cell_type":"markdown","metadata":{"id":"wXqR5bwGzqDW"},"source":["### specific plot v1"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":594},"id":"UiCTTXJpZX1i","executionInfo":{"elapsed":630,"status":"error","timestamp":1626564536389,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"},"user_tz":-540},"outputId":"7eadc90e-ed0c-4951-859e-fc5fa135d6ff"},"source":["prev_plotsize = 50\n","\n","# inversion = True\n","inversion = False\n","\n","if inversion:\n","  plot_pr_list = rev_np_pr\n","else:\n","  plot_pr_list = np_pr\n","\n","\n","\n","#         select plot columns       #\n","basic_cols = [0, 1, 2, 3, 5, 6, 8, 9, 11, 12, 14] # you don't need to touch\n","\n","sar_cols = [15, 18] # 15 ~ 19\n","ichimoku_cols = [20, 21]  # 20 ~ 29\n","# ichimoku_cols = [22, 23]  # 20 ~ 29\n","ichimoku_cols2 = [22, 23]  # 20 ~ 29\n","macd_cols = [30]  # 30 ~ 34\n","\n","\n","senkoua_list = ['senkou_a1', 'senkou_a2', 'senkou_a3', 'senkou_a4', 'senkou_a5']\n","senkoub_list = ['senkou_b1', 'senkou_b2', 'senkou_b3', 'senkou_b4', 'senkou_b5']\n","sar_list = ['sar1', 'sar2', 'sar3', 'sar4', 'sar5']\n","macd_list = ['macd_hist1', 'macd_hist2', 'macd_hist3', 'macd_hist4', 'macd_hist5']\n","\n","input_cols = basic_cols + sar_cols + ichimoku_cols + macd_cols + ichimoku_cols2\n","# input_cols = basic_cols + sar_cols + ichimoku_cols + macd_cols\n","\n","\n","\n","\n","for t_i, (i, j) in enumerate(trade_list):\n","  # print(i, j)\n","\n","  if not(i >= prev_plotsize):\n","    continue\n","\n","  # if i <= 4860:\n","  # if i != 257:\n","  #   continue\n","\n","  # if tp_state_list[t_i] != 'd-open':\n","  #   continue\n","\n","\n","  if plot_pr_list[t_i] > 1.0:\n","  # if plot_pr_list[t_i] < 1.0:\n","    continue\n","\n","  plot_df = res_df.iloc[i - prev_plotsize:j + 1, input_cols]\n","\n","\n","  #       keep off-color st with another variable         #\n","  st_trend_plot_df = res_df.iloc[i - prev_plotsize:j + 1, [7, 10, 13]]\n","\n","  plot_df[\"off_color_upper_st1\"] = np.where(st_trend_plot_df.iloc[:, [0]] == 1, plot_df.iloc[:, [4]], np.nan)\n","  plot_df[\"off_color_upper_st2\"] = np.where(st_trend_plot_df.iloc[:, [1]] == 1, plot_df.iloc[:, [6]], np.nan)\n","  plot_df[\"off_color_upper_st3\"] = np.where(st_trend_plot_df.iloc[:, [2]] == 1, plot_df.iloc[:, [8]], np.nan)\n","  plot_df[\"off_color_lower_st1\"] = np.where(st_trend_plot_df.iloc[:, [0]] == -1, plot_df.iloc[:, [5]], np.nan)\n","  plot_df[\"off_color_lower_st2\"] = np.where(st_trend_plot_df.iloc[:, [1]] == -1, plot_df.iloc[:, [7]], np.nan)\n","  plot_df[\"off_color_lower_st3\"] = np.where(st_trend_plot_df.iloc[:, [2]] == -1, plot_df.iloc[:, [9]], np.nan)\n","\n","\n","  #       replace st values with np.nan, using st trend     #\n","  plot_df.iloc[:, [4]] = np.where(st_trend_plot_df.iloc[:, [0]] == 1, np.nan, plot_df.iloc[:, [4]])\n","  plot_df.iloc[:, [6]] = np.where(st_trend_plot_df.iloc[:, [1]] == 1, np.nan, plot_df.iloc[:, [6]])\n","  plot_df.iloc[:, [8]] = np.where(st_trend_plot_df.iloc[:, [2]] == 1, np.nan, plot_df.iloc[:, [8]])\n","  plot_df.iloc[:, [5]] = np.where(st_trend_plot_df.iloc[:, [0]] == -1, np.nan, plot_df.iloc[:, [5]])\n","  plot_df.iloc[:, [7]] = np.where(st_trend_plot_df.iloc[:, [1]] == -1, np.nan, plot_df.iloc[:, [7]])\n","  plot_df.iloc[:, [9]] = np.where(st_trend_plot_df.iloc[:, [2]] == -1, np.nan, plot_df.iloc[:, [9]])\n","\n","\n","  plot_upper_ep = upper_ep.iloc[i - prev_plotsize:j + 1]\n","  plot_lower_ep = lower_ep.iloc[i - prev_plotsize:j + 1]\n","\n","  plot_upper_middle = (plot_df['middle_line'] + plot_df['min_upper']) / 2\n","  plot_lower_middle = (plot_df['middle_line'] + plot_df['max_lower']) / 2\n","\n","  plot_short_tp = short_tp.iloc[i - prev_plotsize:j + 1]\n","  plot_long_tp = long_tp.iloc[i - prev_plotsize:j + 1]  \n","\n","\n","\n","  fig = plt.figure(figsize=(12, 16))\n","  # fig = plt.figure(figsize=(8, 12))\n","  # ax = fig.add_subplot(111)\n","  ax = fig.add_subplot(211)\n","\n","  # fig.show()\n","  # fig.canvas.draw()\n","\n","  temp_ohlc = plot_df.values[:, :4]\n","  index = np.arange(len(temp_ohlc))\n","  candle = np.hstack((np.reshape(index, (-1, 1)), temp_ohlc))\n","  mf.candlestick_ohlc(ax, candle, width=0.5, colorup='r', colordown='b')\n","\n","  # print(plot_df.values[:, 4:])\n","  plt.plot(plot_df.values[:, [4, 6, 8]], 'r', alpha=1)  # upper on color\n","  plt.plot(plot_df.values[:, [5, 7, 9]], 'b', alpha=1)  # lower on color\n","  plt.plot(plot_df.values[:, [10]], 'g', alpha=1)  # middle\n","  \n","  plt.plot(plot_df.values[:, -6:-3], 'r', alpha=1, linestyle=':')  # upper off color\n","  plt.plot(plot_df.values[:, -3:], 'b', alpha=1, linestyle=':')  # lower off color\n","\n","  plt.plot(plot_df.values[:, [11]], 'c*', alpha=1, markersize=5)  # sar mic\n","  # plt.plot(plot_df.values[:, [12]], 'co', alpha=1, markersize=7)  # sar mac\n","\n","  plt.plot(plot_upper_ep.values, alpha=1, linestyle='--')  # ep\n","  plt.plot(plot_lower_ep.values, alpha=1, linestyle='--')  # ep\n","\n","  plt.plot(plot_upper_middle.values, alpha=1, linestyle='--')  # middle\n","  plt.plot(plot_lower_middle.values, alpha=1, linestyle='--')  # middle\n","\n","  plt.plot(plot_short_tp.values, alpha=1, linestyle=':')  # tp\n","  plt.plot(plot_long_tp.values, alpha=1, linestyle=':')  # tp\n","\n","  plt.fill_between(np.arange(len(plot_df)), plot_df.values[:, 13], plot_df.values[:, 14], # ichimoku\n","                    where=plot_df.values[:, 13] >= plot_df.values[:, 14], facecolor='g', alpha=0.5) # ichimoku\n","  plt.fill_between(np.arange(len(plot_df)), plot_df.values[:, 13], plot_df.values[:, 14],\n","                    where=plot_df.values[:, 13] <= plot_df.values[:, 14], facecolor='r', alpha=0.5)  \n","  \n","  plt.fill_between(np.arange(len(plot_df)), plot_df.values[:, 16], plot_df.values[:, 17], # ichimoku\n","                    where=plot_df.values[:, 16] >= plot_df.values[:, 17], facecolor='g', alpha=0.3) # ichimoku\n","  plt.fill_between(np.arange(len(plot_df)), plot_df.values[:, 16], plot_df.values[:, 17],\n","                    where=plot_df.values[:, 16] <= plot_df.values[:, 17], facecolor='r', alpha=0.3)\n","\n","  plt.axvline(prev_plotsize, linestyle='--')\n","  plt.axhline(ep_tp_list[t_i][1], linestyle='-')  # tp line axhline\n","  plt.title(\"%s ~ %s -> %.5f\\n %s\" % (i, j, plot_pr_list[t_i], tp_state_list[t_i]))\n","\n","\n","  plt.subplot(212)\n","  plt.plot(plot_df.values[:, [15]], 'g', alpha=1)  # middle\n","  plt.axvline(prev_plotsize, linestyle='--')\n","  plt.axhline(0, linestyle='--')\n","\n","  plt.show()\n","  # plt.draw()\n","  plt.close()\n","  print()\n","\n"],"execution_count":null,"outputs":[{"ename":"KeyError","evalue":"ignored","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36mget_loc\u001b[0;34m(self, key, method, tolerance)\u001b[0m\n\u001b[1;32m   2897\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2898\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcasted_key\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2899\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mKeyError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0merr\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32mpandas/_libs/index.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n","\u001b[0;32mpandas/_libs/index.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n","\u001b[0;32mpandas/_libs/hashtable_class_helper.pxi\u001b[0m in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[0;34m()\u001b[0m\n","\u001b[0;32mpandas/_libs/hashtable_class_helper.pxi\u001b[0m in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[0;34m()\u001b[0m\n","\u001b[0;31mKeyError\u001b[0m: 'min_upper'","\nThe above exception was the direct cause of the following exception:\n","\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)","\u001b[0;32m<ipython-input-11-9a4f23889388>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     76\u001b[0m   \u001b[0mplot_lower_ep\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlower_ep\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0miloc\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0mprev_plotsize\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0mj\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     77\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 78\u001b[0;31m   \u001b[0mplot_upper_middle\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mplot_df\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'middle_line'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mplot_df\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'min_upper'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m/\u001b[0m \u001b[0;36m2\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     79\u001b[0m   \u001b[0mplot_lower_middle\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mplot_df\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'middle_line'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mplot_df\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'max_lower'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m/\u001b[0m \u001b[0;36m2\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     80\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36m__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   2904\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnlevels\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2905\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_getitem_multilevel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2906\u001b[0;31m             \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2907\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mis_integer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2908\u001b[0m                 \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36mget_loc\u001b[0;34m(self, key, method, tolerance)\u001b[0m\n\u001b[1;32m   2898\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcasted_key\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2899\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mKeyError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0merr\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2900\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0merr\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2901\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2902\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mtolerance\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyError\u001b[0m: 'min_upper'"]}]},{"cell_type":"markdown","metadata":{"id":"-g7YY5BvMcLS"},"source":["### show detail values"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5TxQ3rDnKMa7","executionInfo":{"elapsed":255,"status":"ok","timestamp":1625228960601,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"},"user_tz":-540},"outputId":"422ac214-8c88-4f39-ec3a-7c823574f6da"},"source":["i, j = 27267, 27268\n","print(\"upper_ep.iloc[i] :\", upper_ep.iloc[i])\n","print(\"short_tp.iloc[j] :\", short_tp.iloc[j])"],"execution_count":null,"outputs":[{"name":"stdout","output_type":"stream","text":["upper_ep.iloc[i] : 2348.266954813089\n","short_tp.iloc[j] : 2205.609333246829\n"]}]},{"cell_type":"markdown","metadata":{"id":"7AIl6EBuZNOL"},"source":["## none plot off-color st"]},{"cell_type":"code","metadata":{"id":"yaVxrNGzZgrF"},"source":["prev_plotsize = 50\n","\n","for t_i, (i, j) in enumerate(trade_list):\n","  # print(i, j)\n","\n","  if not(i >= prev_plotsize):\n","    continue\n","\n","  # if pr_list[t_i] >= 1:\n","  #   continue\n","\n","  plot_df = res_df.iloc[i - prev_plotsize:j + 1, [0, 1, 2, 3, 5, 6, 8, 9, 11, 12, 14, 15, 16]]\n","\n","  #       replace st values with np.nan, using st trend     #\n","  st_trend_plot_df = res_df.iloc[i - prev_plotsize:j + 1, [7, 10, 13]]\n","  plot_df.iloc[:, [4]] = np.where(st_trend_plot_df.iloc[:, [0]] == 1, np.nan, plot_df.iloc[:, [4]])\n","  plot_df.iloc[:, [6]] = np.where(st_trend_plot_df.iloc[:, [1]] == 1, np.nan, plot_df.iloc[:, [6]])\n","  plot_df.iloc[:, [8]] = np.where(st_trend_plot_df.iloc[:, [2]] == 1, np.nan, plot_df.iloc[:, [8]])\n","  plot_df.iloc[:, [5]] = np.where(st_trend_plot_df.iloc[:, [0]] == -1, np.nan, plot_df.iloc[:, [5]])\n","  plot_df.iloc[:, [7]] = np.where(st_trend_plot_df.iloc[:, [1]] == -1, np.nan, plot_df.iloc[:, [7]])\n","  plot_df.iloc[:, [9]] = np.where(st_trend_plot_df.iloc[:, [2]] == -1, np.nan, plot_df.iloc[:, [9]])\n","\n","\n","  plot_upper_ep = upper_ep.iloc[i - prev_plotsize:j + 1]\n","  plot_lower_ep = lower_ep.iloc[i - prev_plotsize:j + 1]\n","\n","  fig = plt.figure(figsize=(8, 6))\n","  ax = fig.add_subplot(111)\n","\n","  # fig.show()\n","  # fig.canvas.draw()\n","\n","  temp_ohlc = plot_df.values[:, :4]\n","  index = np.arange(len(temp_ohlc))\n","  candle = np.hstack((np.reshape(index, (-1, 1)), temp_ohlc))\n","  mf.candlestick_ohlc(ax, candle, width=0.5, colorup='r', colordown='b')\n","\n","  # print(plot_df.values[:, 4:])\n","  plt.plot(plot_df.values[:, [4, 6, 8]], 'r', alpha=1)  # upper\n","  plt.plot(plot_df.values[:, [5, 7, 9]], 'b', alpha=1)  # lower\n","  plt.plot(plot_df.values[:, [10]], 'g', alpha=1)  # middle\n","\n","  plt.plot(plot_df.values[:, [11]], 'c*', alpha=1, markersize=5)  # sar mic\n","  plt.plot(plot_df.values[:, [12]], 'co', alpha=1, markersize=7)  # sar mac\n","\n","  plt.plot(plot_upper_ep.values, alpha=1, linestyle='--')  # ep\n","  plt.plot(plot_lower_ep.values, alpha=1, linestyle='--')  # ep\n","\n","  plt.axvline(prev_plotsize, linestyle='--')\n","\n","  plt.title(\"%s ~ %s -> %.5f\" % (i, j, pr_list[t_i]))\n","  plt.show()\n","  # plt.draw()\n","  plt.close()"],"execution_count":null,"outputs":[]}]}