{"nbformat":4,"nbformat_minor":0,"metadata":{"accelerator":"GPU","colab":{"name":"AT_v2_backi2(1123_limit_short).ipynb","provenance":[{"file_id":"1z4z_KLPzc6RWsxo3X_dHbpByxUAgjoMJ","timestamp":1583754134002}],"collapsed_sections":["Iy76iO7gztne","Ic1mfmwWCIBu","u6HJnX16i36D","aAzRBq67tBno","yBMOMttNKQmU","9Lbr-ZsJjzIT","XHtKmKvEj2TU","ShvMpmWtC_Uv","yvrNFdxrnVjt","JcKfLZ7QnYcK","o-XjNS1L31YB","FxJ1y8v2fkCR","VBwVaUkvfnOd","tApzvz_gK9lR","5la6usMOFzkX","OJqkmkpsLCYC","59nW2aKYzkN8","cj9X6S1jJjER","-g7YY5BvMcLS","7AIl6EBuZNOL"],"toc_visible":true},"kernelspec":{"display_name":"Python [conda env:tensorflow2_p36]","language":"python","name":"conda-env-tensorflow2_p36-py"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.6.5"},"widgets":{"application/vnd.jupyter.widget-state+json":{"be2b848dbcb14a079a2b7bd605af6435":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_view_name":"HBoxView","_dom_classes":[],"_model_name":"HBoxModel","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.5.0","box_style":"","layout":"IPY_MODEL_2c7696db44fa402eafb2540c7a72d68c","_model_module":"@jupyter-widgets/controls","children":["IPY_MODEL_502ec9042bab443e9407803d9ada1031","IPY_MODEL_75511cdf82714fb7be5b8688e396f69b","IPY_MODEL_b54d2eb7584d43e2916f69174d6e391d"]}},"2c7696db44fa402eafb2540c7a72d68c":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"502ec9042bab443e9407803d9ada1031":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_view_name":"HTMLView","style":"IPY_MODEL_7abd42b3c95c48ac910b581b74ba9b57","_dom_classes":[],"description":"","_model_name":"HTMLModel","placeholder":"​","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":" 88%","_view_count":null,"_view_module_version":"1.5.0","description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_a742f61210f24d949aeb1b9f5cd1f6a5"}},"75511cdf82714fb7be5b8688e396f69b":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_view_name":"ProgressView","style":"IPY_MODEL_2ff55a21df7742519b138ca795ec3f6d","_dom_classes":[],"description":"","_model_name":"FloatProgressModel","bar_style":"","max":156,"_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":137,"_view_count":null,"_view_module_version":"1.5.0","orientation":"horizontal","min":0,"description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_9e7f44d996a341a19bf22f806da4756d"}},"b54d2eb7584d43e2916f69174d6e391d":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_view_name":"HTMLView","style":"IPY_MODEL_5552df18053d4d1294ea6a4185afee6e","_dom_classes":[],"description":"","_model_name":"HTMLModel","placeholder":"​","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":" 137/156 [00:30&lt;00:05,  3.67it/s]","_view_count":null,"_view_module_version":"1.5.0","description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_196b72f68ba948ef96093981fbcd195f"}},"7abd42b3c95c48ac910b581b74ba9b57":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_view_name":"StyleView","_model_name":"DescriptionStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"a742f61210f24d949aeb1b9f5cd1f6a5":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"2ff55a21df7742519b138ca795ec3f6d":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_view_name":"StyleView","_model_name":"ProgressStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","bar_color":null,"_model_module":"@jupyter-widgets/controls"}},"9e7f44d996a341a19bf22f806da4756d":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"5552df18053d4d1294ea6a4185afee6e":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_view_name":"StyleView","_model_name":"DescriptionStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"196b72f68ba948ef96093981fbcd195f":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"4b9fd28b1ae746ce9ca1f8036d4a1b21":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_view_name":"HBoxView","_dom_classes":[],"_model_name":"HBoxModel","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.5.0","box_style":"","layout":"IPY_MODEL_c4e566ca55694d5f8d4bc2d5d36db779","_model_module":"@jupyter-widgets/controls","children":["IPY_MODEL_430c63e35e084967b02132c770e6f992","IPY_MODEL_d66fb6f54fbd4b35925c8158eaa9cd56","IPY_MODEL_38c2994d13cf497eb819621ee975b1a3"]}},"c4e566ca55694d5f8d4bc2d5d36db779":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"430c63e35e084967b02132c770e6f992":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_view_name":"HTMLView","style":"IPY_MODEL_0803835fd2b74e7ab47f3377a070e54c","_dom_classes":[],"description":"","_model_name":"HTMLModel","placeholder":"​","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":"100%","_view_count":null,"_view_module_version":"1.5.0","description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_16eb81859ced4750bdd70c42bb110b35"}},"d66fb6f54fbd4b35925c8158eaa9cd56":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_view_name":"ProgressView","style":"IPY_MODEL_2a7d21d5873a427a856d5c9333f7f2e7","_dom_classes":[],"description":"","_model_name":"FloatProgressModel","bar_style":"success","max":175,"_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":175,"_view_count":null,"_view_module_version":"1.5.0","orientation":"horizontal","min":0,"description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_456aa8c516c54b55850057c62a69664f"}},"38c2994d13cf497eb819621ee975b1a3":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_view_name":"HTMLView","style":"IPY_MODEL_1b1522effd6c4ff68a3f3eb465b3a292","_dom_classes":[],"description":"","_model_name":"HTMLModel","placeholder":"​","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":" 175/175 [00:29&lt;00:00,  3.24it/s]","_view_count":null,"_view_module_version":"1.5.0","description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_4c873b8879684e4b93d0d4a878a7ba93"}},"0803835fd2b74e7ab47f3377a070e54c":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_view_name":"StyleView","_model_name":"DescriptionStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"16eb81859ced4750bdd70c42bb110b35":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"2a7d21d5873a427a856d5c9333f7f2e7":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_view_name":"StyleView","_model_name":"ProgressStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","bar_color":null,"_model_module":"@jupyter-widgets/controls"}},"456aa8c516c54b55850057c62a69664f":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"1b1522effd6c4ff68a3f3eb465b3a292":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_view_name":"StyleView","_model_name":"DescriptionStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"4c873b8879684e4b93d0d4a878a7ba93":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"dd5aa9407ba0400f8ebd7b536e99e41d":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_view_name":"HBoxView","_dom_classes":[],"_model_name":"HBoxModel","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.5.0","box_style":"","layout":"IPY_MODEL_eb89fa881707405a8753d647759c222d","_model_module":"@jupyter-widgets/controls","children":["IPY_MODEL_f8236b1cb3514e1c8dba594c11a0a136","IPY_MODEL_19fae5bcc113405fbcdf691b90f8cb6d","IPY_MODEL_10385e0b2cb04fb697bc4c63f0c2caab"]}},"eb89fa881707405a8753d647759c222d":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"f8236b1cb3514e1c8dba594c11a0a136":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_view_name":"HTMLView","style":"IPY_MODEL_3aed8c6b0be84178a1da80d93320d9e2","_dom_classes":[],"description":"","_model_name":"HTMLModel","placeholder":"​","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":"100%","_view_count":null,"_view_module_version":"1.5.0","description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_fe3dabdafa30486d917355ed075f9ab4"}},"19fae5bcc113405fbcdf691b90f8cb6d":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_view_name":"ProgressView","style":"IPY_MODEL_9722fd3b77c2439abafda4d2caa88587","_dom_classes":[],"description":"","_model_name":"FloatProgressModel","bar_style":"success","max":70,"_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":70,"_view_count":null,"_view_module_version":"1.5.0","orientation":"horizontal","min":0,"description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_48374af091fb434fb8f322a9fe9a89e5"}},"10385e0b2cb04fb697bc4c63f0c2caab":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_view_name":"HTMLView","style":"IPY_MODEL_c4bdd6bc81cf480b85b23768e767d0a0","_dom_classes":[],"description":"","_model_name":"HTMLModel","placeholder":"​","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":" 70/70 [39:37&lt;00:00, 247.87s/it]","_view_count":null,"_view_module_version":"1.5.0","description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_6688d832367144dbadbddfab022c8424"}},"3aed8c6b0be84178a1da80d93320d9e2":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_view_name":"StyleView","_model_name":"DescriptionStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"fe3dabdafa30486d917355ed075f9ab4":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"9722fd3b77c2439abafda4d2caa88587":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_view_name":"StyleView","_model_name":"ProgressStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","bar_color":null,"_model_module":"@jupyter-widgets/controls"}},"48374af091fb434fb8f322a9fe9a89e5":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"c4bdd6bc81cf480b85b23768e767d0a0":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_view_name":"StyleView","_model_name":"DescriptionStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"6688d832367144dbadbddfab022c8424":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}}}}},"cells":[{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"AK9FjWwLOyay","executionInfo":{"status":"ok","timestamp":1637666452555,"user_tz":-540,"elapsed":28588,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"12697704-d251-4d9f-dd07-32565f78e97a"},"source":["from google.colab import drive\n","drive.mount('/content/drive')\n","\n","import os, sys\n","\n","current_path = '/content/drive/My Drive/Colab Notebooks/JnQ/'\n","\n","os.chdir(current_path)"],"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"markdown","metadata":{"id":"8uqYv5StTazo"},"source":["# requirements"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9qGt60DKTZmf","executionInfo":{"status":"ok","timestamp":1637666475611,"user_tz":-540,"elapsed":23060,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"de4e0811-82d5-4634-b8ea-415b0985b454"},"source":["!pip install mpl_finance\n","# !pip install findiff\n","\n","import matplotlib.pyplot as plt\n","from matplotlib import gridspec\n","from tqdm.notebook import tqdm\n","from funcs_indicator import *\n","from funcs_for_trade import *\n","\n","import mpl_finance as mf\n","import os\n","import datetime\n","\n","import IPython\n","import IPython.display\n","import matplotlib as mpl\n","\n","import numpy as np\n","# import jax.numpy as np\n","import pandas as pd\n","import seaborn as sns\n","# import tensorflow as tf\n","\n","import pickle\n","import shutil\n","# import json\n","from easydict import EasyDict\n","\n","# from trendln import trendln\n","\n","from datetime import datetime\n","import random\n","import time\n","\n","# mpl.rcParams['figure.figsize'] = (8, 6)\n","# mpl.rcParams['axes.grid'] = False\n","\n","pd.set_option('display.max_rows', 500)\n","pd.set_option('display.max_columns', 500)\n","pd.set_option('display.width', 1000)"],"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting mpl_finance\n","  Downloading mpl_finance-0.10.1-py3-none-any.whl (8.4 kB)\n","Requirement already satisfied: matplotlib in /usr/local/lib/python3.7/dist-packages (from mpl_finance) (3.2.2)\n","Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,>=2.0.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib->mpl_finance) (3.0.6)\n","Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib->mpl_finance) (1.3.2)\n","Requirement already satisfied: python-dateutil>=2.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib->mpl_finance) (2.8.2)\n","Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.7/dist-packages (from matplotlib->mpl_finance) (0.11.0)\n","Requirement already satisfied: numpy>=1.11 in /usr/local/lib/python3.7/dist-packages (from matplotlib->mpl_finance) (1.19.5)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.7/dist-packages (from python-dateutil>=2.1->matplotlib->mpl_finance) (1.15.0)\n","Installing collected packages: mpl-finance\n","Successfully installed mpl-finance-0.10.1\n"]}]},{"cell_type":"markdown","metadata":{"id":"Iy76iO7gztne"},"source":["## move legacy files"]},{"cell_type":"code","metadata":{"id":"hMRht32Czwry"},"source":["# print()\n","cur_dir_list = os.listdir('.')\n","for f in cur_dir_list:\n","  if 'legacy' in f :\n","    # print(f)\n","    if os.path.isdir(current_path + f,):\n","      continue\n","\n","    shutil.move(current_path + f, current_path + 'legacy/' + f)\n","    print(\"moved to\" + current_path + 'legacy/' +  f)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Ic1mfmwWCIBu"},"source":["# makeset"]},{"cell_type":"markdown","metadata":{"id":"Ci_jUnNTZbm9"},"source":["## load data"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_bXyS2yrZYC6","executionInfo":{"status":"ok","timestamp":1637110068179,"user_tz":-540,"elapsed":14354,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"7758911d-2ae4-4529-9d40-e78ad5d4bade"},"source":["interval = '1m'\n","date_path = './candlestick_concated/%s/quant_v2/' % interval\n","file_list = os.listdir(date_path)\n","print((file_list))\n","\n","interval2 = '3m'\n","date_path2 = './candlestick_concated/%s/quant_v2/' % interval2\n","file_list2 = os.listdir(date_path2)\n","print((file_list2))\n","\n","interval3 = '5m'\n","date_path3 = './candlestick_concated/%s/quant_v2/' % interval3\n","file_list3 = os.listdir(date_path3)\n","print((file_list3))\n","\n","interval4 = '15m'\n","date_path4 = './candlestick_concated/%s/quant_v2/' % interval4\n","file_list4 = os.listdir(date_path4)\n","print((file_list4))\n","\n","interval5 = '30m'\n","date_path5 = './candlestick_concated/%s/quant_v2/' % interval5\n","file_list5 = os.listdir(date_path5)\n","print((file_list5))\n","\n","interval6 = '1h'\n","date_path6 = './candlestick_concated/%s/quant_v2/' % interval6\n","file_list6 = os.listdir(date_path6)\n","print((file_list6))\n","\n","interval7 = '4h'\n","date_path7 = './candlestick_concated/%s/quant_v2/' % interval7\n","file_list7 = os.listdir(date_path7)\n","print((file_list7))\n","\n","interval8 = '1d'\n","date_path8 = './candlestick_concated/%s/quant_v2/' % interval8\n","file_list8 = os.listdir(date_path8)\n","print((file_list8))"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["['2021-05-30 ETHUSDT.xlsx', '2021-04-30 ETHUSDT.xlsx', '2021-07-03 ETHUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-10-10 ETCUSDT.xlsx', '2021-10-10 BTCUSDT.xlsx', '2021-10-10 ETHUSDT.xlsx', '2021-10-10 ADAUSDT.xlsx', '2021-10-10 XLMUSDT.xlsx', '2021-10-10 LINKUSDT.xlsx', '2021-10-10 LTCUSDT.xlsx', '2021-10-10 EOSUSDT.xlsx', '2021-10-10 XRPUSDT.xlsx', '2021-10-10 BCHUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr', '2021-10-10 ETCUSDT.ftr', '2021-10-10 BTCUSDT.ftr', '2021-10-10 ETHUSDT.ftr', '2021-10-10 ADAUSDT.ftr', '2021-10-10 XLMUSDT.ftr', '2021-10-10 LINKUSDT.ftr', '2021-10-10 LTCUSDT.ftr', '2021-10-10 EOSUSDT.ftr', '2021-10-10 XRPUSDT.ftr', '2021-10-10 BCHUSDT.ftr', '2021-11-16 EOSUSDT.ftr', '2021-11-16 LTCUSDT.ftr', '2021-11-16 LINKUSDT.ftr', '2021-11-16 XLMUSDT.ftr', '2021-11-16 ADAUSDT.ftr', '2021-11-16 ETCUSDT.ftr', '2021-11-16 BTCUSDT.ftr', '2021-11-16 ETHUSDT.ftr', '2021-11-16 BCHUSDT.ftr', '2021-11-16 XRPUSDT.ftr']\n","['2021-05-30 ETHUSDT.xlsx', '2021-04-30 ETHUSDT.xlsx', '2021-07-03 ETHUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-10-10 ETCUSDT.xlsx', '2021-10-10 BTCUSDT.xlsx', '2021-10-10 ETHUSDT.xlsx', '2021-10-10 ADAUSDT.xlsx', '2021-10-10 XLMUSDT.xlsx', '2021-10-10 LINKUSDT.xlsx', '2021-10-10 LTCUSDT.xlsx', '2021-10-10 EOSUSDT.xlsx', '2021-10-10 XRPUSDT.xlsx', '2021-10-10 BCHUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr', '2021-10-10 ETCUSDT.ftr', '2021-10-10 BTCUSDT.ftr', '2021-10-10 ETHUSDT.ftr', '2021-10-10 ADAUSDT.ftr', '2021-10-10 XLMUSDT.ftr', '2021-10-10 LINKUSDT.ftr', '2021-10-10 LTCUSDT.ftr', '2021-10-10 EOSUSDT.ftr', '2021-10-10 XRPUSDT.ftr', '2021-10-10 BCHUSDT.ftr', '2021-11-16 LINKUSDT.ftr', '2021-11-16 ADAUSDT.ftr', '2021-11-16 ETCUSDT.ftr', '2021-11-16 XLMUSDT.ftr', '2021-11-16 XRPUSDT.ftr', '2021-11-16 EOSUSDT.ftr', '2021-11-16 BTCUSDT.ftr', '2021-11-16 BCHUSDT.ftr', '2021-11-16 ETHUSDT.ftr', '2021-11-16 LTCUSDT.ftr']\n","['2021-05-30 ETHUSDT.xlsx', '2021-04-30 ETHUSDT.xlsx', '2021-07-03 ETHUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-10-10 ETCUSDT.xlsx', '2021-10-10 BTCUSDT.xlsx', '2021-10-10 ETHUSDT.xlsx', '2021-10-10 ADAUSDT.xlsx', '2021-10-10 XLMUSDT.xlsx', '2021-10-10 LINKUSDT.xlsx', '2021-10-10 LTCUSDT.xlsx', '2021-10-10 EOSUSDT.xlsx', '2021-10-10 XRPUSDT.xlsx', '2021-10-10 BCHUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr', '2021-10-10 ETCUSDT.ftr', '2021-10-10 BTCUSDT.ftr', '2021-10-10 ETHUSDT.ftr', '2021-10-10 ADAUSDT.ftr', '2021-10-10 XLMUSDT.ftr', '2021-10-10 LINKUSDT.ftr', '2021-10-10 LTCUSDT.ftr', '2021-10-10 EOSUSDT.ftr', '2021-10-10 XRPUSDT.ftr', '2021-10-10 BCHUSDT.ftr', '2021-11-16 LINKUSDT.ftr', '2021-11-16 XLMUSDT.ftr', '2021-11-16 ADAUSDT.ftr', '2021-11-16 ETCUSDT.ftr', '2021-11-16 BTCUSDT.ftr', '2021-11-16 BCHUSDT.ftr', '2021-11-16 XRPUSDT.ftr', '2021-11-16 LTCUSDT.ftr', '2021-11-16 EOSUSDT.ftr', '2021-11-16 ETHUSDT.ftr']\n","['2021-07-03 ETHUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-10-10 ETCUSDT.xlsx', '2021-10-10 BTCUSDT.xlsx', '2021-10-10 ETHUSDT.xlsx', '2021-10-10 ADAUSDT.xlsx', '2021-10-10 XLMUSDT.xlsx', '2021-10-10 LINKUSDT.xlsx', '2021-10-10 LTCUSDT.xlsx', '2021-10-10 EOSUSDT.xlsx', '2021-10-10 XRPUSDT.xlsx', '2021-10-10 BCHUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr', '2021-10-10 ETCUSDT.ftr', '2021-10-10 BTCUSDT.ftr', '2021-10-10 ETHUSDT.ftr', '2021-10-10 ADAUSDT.ftr', '2021-10-10 XLMUSDT.ftr', '2021-10-10 LINKUSDT.ftr', '2021-10-10 LTCUSDT.ftr', '2021-10-10 EOSUSDT.ftr', '2021-10-10 XRPUSDT.ftr', '2021-10-10 BCHUSDT.ftr', '2021-11-16 XLMUSDT.ftr', '2021-11-16 ADAUSDT.ftr', '2021-11-16 ETCUSDT.ftr', '2021-11-16 BTCUSDT.ftr', '2021-11-16 ETHUSDT.ftr', '2021-11-16 BCHUSDT.ftr', '2021-11-16 XRPUSDT.ftr', '2021-11-16 EOSUSDT.ftr', '2021-11-16 LTCUSDT.ftr', '2021-11-16 LINKUSDT.ftr']\n","['2021-07-03 ETHUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-08-31 SUSHIUSDT.xlsx', '2021-08-31 CVCUSDT.xlsx', '2021-08-31 BTSUSDT.xlsx', '2021-08-31 HOTUSDT.xlsx', '2021-08-31 ZRXUSDT.xlsx', '2021-08-31 QTUMUSDT.xlsx', '2021-08-31 IOTAUSDT.xlsx', '2021-08-31 BTCBUSD.xlsx', '2021-08-31 WAVESUSDT.xlsx', '2021-08-31 ADAUSDT.xlsx', '2021-08-31 LITUSDT.xlsx', '2021-08-31 XTZUSDT.xlsx', '2021-08-31 BNBUSDT.xlsx', '2021-08-31 AKROUSDT.xlsx', '2021-08-31 HNTUSDT.xlsx', '2021-08-31 ETCUSDT.xlsx', '2021-08-31 XMRUSDT.xlsx', '2021-08-31 YFIUSDT.xlsx', '2021-08-31 ETHUSDT.xlsx', '2021-08-31 ALICEUSDT.xlsx', '2021-08-31 ALPHAUSDT.xlsx', '2021-08-31 SFPUSDT.xlsx', '2021-08-31 REEFUSDT.xlsx', '2021-08-31 BATUSDT.xlsx', '2021-08-31 DOGEUSDT.xlsx', '2021-08-31 TRXUSDT.xlsx', '2021-08-31 RLCUSDT.xlsx', '2021-08-31 BTCSTUSDT.xlsx', '2021-08-31 STORJUSDT.xlsx', '2021-08-31 SNXUSDT.xlsx', '2021-08-31 XLMUSDT.xlsx', '2021-08-31 NEOUSDT.xlsx', '2021-08-31 UNFIUSDT.xlsx', '2021-08-31 SANDUSDT.xlsx', '2021-08-31 DASHUSDT.xlsx', '2021-08-31 KAVAUSDT.xlsx', '2021-08-31 RUNEUSDT.xlsx', '2021-08-31 CTKUSDT.xlsx', '2021-08-31 LINKUSDT.xlsx', '2021-08-31 CELRUSDT.xlsx', '2021-08-31 RSRUSDT.xlsx', '2021-08-31 DGBUSDT.xlsx', '2021-08-31 SKLUSDT.xlsx', '2021-08-31 RENUSDT.xlsx', '2021-08-31 TOMOUSDT.xlsx', '2021-08-31 MTLUSDT.xlsx', '2021-08-31 LTCUSDT.xlsx', '2021-08-31 DODOUSDT.xlsx', '2021-08-31 EGLDUSDT.xlsx', '2021-08-31 KSMUSDT.xlsx', '2021-08-31 ONTUSDT.xlsx', '2021-08-31 VETUSDT.xlsx', '2021-08-31 TRBUSDT.xlsx', '2021-08-31 MANAUSDT.xlsx', '2021-08-31 COTIUSDT.xlsx', '2021-08-31 CHRUSDT.xlsx', '2021-08-31 ETHUSDT_210924.xlsx', '2021-08-31 BAKEUSDT.xlsx', '2021-08-31 GRTUSDT.xlsx', '2021-08-31 FLMUSDT.xlsx', '2021-08-31 EOSUSDT.xlsx', '2021-08-31 OGNUSDT.xlsx', '2021-08-31 SCUSDT.xlsx', '2021-08-31 BALUSDT.xlsx', '2021-08-31 STMXUSDT.xlsx', '2021-08-31 BTTUSDT.xlsx', '2021-08-31 LUNAUSDT.xlsx', '2021-08-31 DENTUSDT.xlsx', '2021-08-31 KNCUSDT.xlsx', '2021-08-31 SRMUSDT.xlsx', '2021-08-31 ENJUSDT.xlsx', '2021-08-31 ZENUSDT.xlsx', '2021-08-31 ATOMUSDT.xlsx', '2021-08-31 NEARUSDT.xlsx', '2021-08-31 BCHUSDT.xlsx', '2021-08-31 IOSTUSDT.xlsx', '2021-08-31 HBARUSDT.xlsx', '2021-08-31 ZECUSDT.xlsx', '2021-08-31 1000SHIBUSDT.xlsx', '2021-08-31 TLMUSDT.xlsx', '2021-08-31 BZRXUSDT.xlsx', '2021-08-31 ETHBUSD.xlsx', '2021-08-31 AAVEUSDT.xlsx', '2021-08-31 GTCUSDT.xlsx', '2021-08-31 ALGOUSDT.xlsx', '2021-08-31 ICPUSDT.xlsx', '2021-08-31 BTCUSDT_210924.xlsx', '2021-08-31 LRCUSDT.xlsx', '2021-08-31 AVAXUSDT.xlsx', '2021-08-31 MATICUSDT.xlsx', '2021-08-31 1INCHUSDT.xlsx', '2021-08-31 MKRUSDT.xlsx', '2021-08-31 THETAUSDT.xlsx', '2021-08-31 UNIUSDT.xlsx', '2021-08-31 LINAUSDT.xlsx', '2021-08-31 RVNUSDT.xlsx', '2021-08-31 FILUSDT.xlsx', '2021-08-31 NKNUSDT.xlsx', '2021-08-31 DEFIUSDT.xlsx', '2021-08-31 COMPUSDT.xlsx', '2021-08-31 BTCDOMUSDT.xlsx', '2021-08-31 SOLUSDT.xlsx', '2021-08-31 BTCUSDT.xlsx', '2021-08-31 OMGUSDT.xlsx', '2021-08-31 ICXUSDT.xlsx', '2021-08-31 BLZUSDT.xlsx', '2021-08-31 FTMUSDT.xlsx', '2021-08-31 YFIIUSDT.xlsx', '2021-08-31 KEEPUSDT.xlsx', '2021-08-31 BANDUSDT.xlsx', '2021-08-31 XRPUSDT.xlsx', '2021-08-31 SXPUSDT.xlsx', '2021-08-31 CRVUSDT.xlsx', '2021-08-31 BELUSDT.xlsx', '2021-08-31 DOTUSDT.xlsx', '2021-08-31 XEMUSDT.xlsx', '2021-08-31 ONEUSDT.xlsx', '2021-08-31 ZILUSDT.xlsx', '2021-08-31 AXSUSDT.xlsx', '2021-08-31 OCEANUSDT.xlsx', '2021-08-31 CHZUSDT.xlsx', '2021-08-31 ANKRUSDT.xlsx', '2021-08-31 SUSHIUSDT_res_dfs.pkl', '2021-07-01 ADAUSDT.xlsx', '2021-10-10 ETCUSDT.xlsx', '2021-10-10 BTCUSDT.xlsx', '2021-10-10 ETHUSDT.xlsx', '2021-10-10 ADAUSDT.xlsx', '2021-10-10 XLMUSDT.xlsx', '2021-10-10 LINKUSDT.xlsx', '2021-10-10 LTCUSDT.xlsx', '2021-10-10 EOSUSDT.xlsx', '2021-10-10 XRPUSDT.xlsx', '2021-10-10 BCHUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr', '2021-10-10 ETCUSDT.ftr', '2021-10-10 BTCUSDT.ftr', '2021-10-10 ETHUSDT.ftr', '2021-10-10 ADAUSDT.ftr', '2021-10-10 XLMUSDT.ftr', '2021-10-10 LINKUSDT.ftr', '2021-10-10 LTCUSDT.ftr', '2021-10-10 EOSUSDT.ftr', '2021-10-10 XRPUSDT.ftr', '2021-10-10 BCHUSDT.ftr', '2021-11-16 EOSUSDT.ftr', '2021-11-16 LTCUSDT.ftr', '2021-11-16 LINKUSDT.ftr', '2021-11-16 XLMUSDT.ftr', '2021-11-16 ADAUSDT.ftr', '2021-11-16 ETCUSDT.ftr', '2021-11-16 BTCUSDT.ftr', '2021-11-16 ETHUSDT.ftr', '2021-11-16 BCHUSDT.ftr', '2021-11-16 XRPUSDT.ftr']\n","['2021-07-01 BTCUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr', '2021-10-10 LTCUSDT.xlsx', '2021-10-10 LINKUSDT.xlsx', '2021-10-10 XLMUSDT.xlsx', '2021-10-10 ADAUSDT.xlsx', '2021-10-10 ETCUSDT.xlsx', '2021-10-10 BTCUSDT.xlsx', '2021-10-10 ETHUSDT.xlsx', '2021-10-10 BCHUSDT.xlsx', '2021-10-10 XRPUSDT.xlsx', '2021-10-10 EOSUSDT.xlsx', '2021-10-10 ETCUSDT.ftr', '2021-10-10 BTCUSDT.ftr', '2021-10-10 ETHUSDT.ftr', '2021-10-10 ADAUSDT.ftr', '2021-10-10 XLMUSDT.ftr', '2021-10-10 LINKUSDT.ftr', '2021-10-10 LTCUSDT.ftr', '2021-10-10 EOSUSDT.ftr', '2021-10-10 XRPUSDT.ftr', '2021-10-10 BCHUSDT.ftr', '2021-11-16 XLMUSDT.ftr', '2021-11-16 ADAUSDT.ftr', '2021-11-16 ETCUSDT.ftr', '2021-11-16 BTCUSDT.ftr', '2021-11-16 ETHUSDT.ftr', '2021-11-16 BCHUSDT.ftr', '2021-11-16 XRPUSDT.ftr', '2021-11-16 EOSUSDT.ftr', '2021-11-16 LTCUSDT.ftr', '2021-11-16 LINKUSDT.ftr']\n","['2021-02-07 BTC.xlsx', '2021-02-07 ETH.xlsx', '2021-02-11 BCHUSDT.xlsx', '2021-02-11 XRPUSDT.xlsx', '2021-02-11 EOSUSDT.xlsx', '2021-02-11 LTCUSDT.xlsx', '2021-02-11 ETCUSDT.xlsx', '2021-02-11 LINKUSDT.xlsx', '2021-02-11 XLMUSDT.xlsx', '2021-02-11 ADAUSDT.xlsx', '2021-02-11 XMRUSDT.xlsx', '2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr', '2021-10-10 ETCUSDT.xlsx', '2021-10-10 XLMUSDT.xlsx', '2021-10-10 BCHUSDT.xlsx', '2021-10-10 ADAUSDT.xlsx', '2021-10-10 XRPUSDT.xlsx', '2021-10-10 BTCUSDT.xlsx', '2021-10-10 EOSUSDT.xlsx', '2021-10-10 ETHUSDT.xlsx', '2021-10-10 LTCUSDT.xlsx', '2021-10-10 LINKUSDT.xlsx', '2021-10-10 ETCUSDT.ftr', '2021-10-10 BTCUSDT.ftr', '2021-10-10 ETHUSDT.ftr', '2021-10-10 ADAUSDT.ftr', '2021-10-10 XLMUSDT.ftr', '2021-10-10 LINKUSDT.ftr', '2021-10-10 LTCUSDT.ftr', '2021-10-10 EOSUSDT.ftr', '2021-10-10 XRPUSDT.ftr', '2021-10-10 BCHUSDT.ftr', '2021-11-16 LTCUSDT.ftr', '2021-11-16 LINKUSDT.ftr', '2021-11-16 XLMUSDT.ftr', '2021-11-16 ADAUSDT.ftr', '2021-11-16 ETCUSDT.ftr', '2021-11-16 BTCUSDT.ftr', '2021-11-16 ETHUSDT.ftr', '2021-11-16 XRPUSDT.ftr', '2021-11-16 BCHUSDT.ftr', '2021-11-16 EOSUSDT.ftr']\n","['2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx']\n"]}]},{"cell_type":"markdown","metadata":{"id":"EiXxraeZCj0c"},"source":["## basic_func"]},{"cell_type":"code","metadata":{"id":"mi8H188MCiaH"},"source":["def sync_check(df, second_df, third_df, fourth_df, fifth_df, sixth_df=None, seventh_df=None, eighth_df=None):\n","\n","    #           supertrend          #\n","    # df = st_price_line(df, second_df, '3m')\n","    # # print(df.head(100))\n","    # # return\n","\n","    # df = st_price_line(df, third_df, '5m')\n","    # df = st_price_line(df, fourth_df, '15m')\n","    # df = st_price_line(df, fifth_df, '30m')\n","    # df = st_price_line(df, sixth_df, '1h')\n","    # df = st_price_line(df, seventh_df, '4h')\n","\n","    # print(\"supertrend phase done\")\n","\n","    # --------------- dc --------------- #  \n","    df = dc_line(df, None, '1m', dc_period=20)\n","    df = dc_line(df, second_df, '3m', dc_period=20)\n","    df = dc_line(df, third_df, '5m', dc_period=20)\n","    df = dc_line(df, fourth_df, '15m', dc_period=20)\n","    df = dc_line(df, fifth_df, '30m', dc_period=20)\n","    df = dc_line(df, sixth_df, '1h', dc_period=20)\n","    df = dc_line(df, seventh_df, '4h', dc_period=20)\n","\n","    print(\"dc phase done\")\n","    \n","    # --------------- bband --------------- #  \n","    df = bb_line(df, None, '1m')\n","    df = bb_line(df, second_df, '3m')\n","    df = bb_line(df, third_df, '5m')\n","    df = bb_line(df, fourth_df, '15m')\n","    df = bb_line(df, fifth_df, '30m')\n","    df = bb_line(df, sixth_df, '1h')\n","    df = bb_line(df, seventh_df, '4h')\n","\n","    print(\"bband phase done\")\n","\n","    # --------------- cbline --------------- #    \n","    # second_df['cloud_bline_3m'] = cloud_bline(second_df, 26)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, second_df, [-1]), columns=['cloud_bline_3m']))\n","    # third_df['cloud_bline_5m'] = cloud_bline(third_df, 26)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, third_df, [-1]), columns=['cloud_bline_5m']))\n","    # fourth_df['cloud_bline_15m'] = cloud_bline(fourth_df, 26)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, fourth_df, [-1]), columns=['cloud_bline_15m']))\n","    # fifth_df['cloud_bline_30m'] = cloud_bline(fifth_df, 26)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, fifth_df, [-1]), columns=['cloud_bline_30m']))\n","    # sixth_df['cloud_bline_1h'] = cloud_bline(sixth_df, 26)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, sixth_df, [-1]), columns=['cloud_bline_1h']))\n","    # seventh_df['cloud_bline_4h'] = cloud_bline(seventh_df, 26)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, seventh_df, [-1]), columns=['cloud_bline_4h']))\n","\n","    # print(\"cbline phase done\")\n","    \n","\n","    #           lucid sar              #\n","    # df['sar_1m'], df['sar_uptrend_1m'] = lucid_sar(df, return_uptrend=True)\n","\n","    # third_df['sar_5m'], third_df['sar_uptrend_5m'] = lucid_sar(third_df, return_uptrend=True)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, third_df, [-2, -1], backing_i=-1), columns=['sar_5m', 'sar_uptrend_5m']))\n","\n","    # fourth_df['sar_15m'], fourth_df['sar_uptrend_15m'] = lucid_sar(fourth_df, return_uptrend=True)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, fourth_df, [-2, -1], backing_i=-1), columns=['sar_15m', 'sar_uptrend_15m']))\n","\n","    # seventh_df['sar_4h'], seventh_df['sar_uptrend_4h'] = lucid_sar(seventh_df, return_uptrend=True)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, seventh_df, [-2, -1], backing_i=-1), columns=['sar_4h', 'sar_uptrend_4h']))\n","    \n","    # print(\"sar phase done\")\n","\n","    \n","    #           stochastic              #\n","    # df['stoch_1m'] = stoch(df, 13, 3, 3)\n","\n","    # third_df['stoch'] = stoch(third_df, 13, 3, 3)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, third_df, [-1], backing_i=-1), columns=['stoch_5m']))\n","\n","    # print(\"stoch phase done\")\n","\n","\n","    return df\n"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"ZnrBE3etCpIA"},"source":["## make & save res_df (concat 생각하면, timeindex sync 맞춰야함)"]},{"cell_type":"markdown","metadata":{"id":"u6HJnX16i36D"},"source":["### old (xlsx)"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"X1g9vGP0UnTT","executionInfo":{"elapsed":11,"status":"error","timestamp":1636201718856,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"outputId":"02bf2c60-f298-4fe9-e6bb-78230ac1348c"},"source":["pd.set_option('display.max_rows', 500)\n","pd.set_option('display.max_columns', 500)\n","pd.set_option('display.width', 1000)\n","\n","\n","save_path = './candlestick_concated/res_df/'\n","\n","exist_list = os.listdir(save_path)\n","\n","\n","a_day = 3600 * 24\n","\n","for i in tqdm(range(len(file_list))):\n","\n","  keys = [file_list[i]]\n","\n","  # if 'neo'.upper() not in file_list[i]:\n","    # continue\n","\n","  # if '2021-04-30'.upper() not in file_list[i]:\n","  if '2021-07-01'.upper() not in file_list[i]:\n","  # if '2021-10-10'.upper() not in file_list[i]:\n","    continue\n","\n","\n","  for key in keys:      \n","\n","    # if 'eth'.upper() not in key:\n","    #   continue\n","\n","    excel_name = key.replace(\".xlsx\", \"_st1h_backi2.xlsx\")\n","    excel_path = save_path + excel_name\n","\n","    if excel_name in exist_list:\n","      print(excel_name, \"already exist !\")\n","      continue\n","    \n","    open_indexes = []\n","    \n","    df = pd.read_excel(date_path + key, index_col=0)\n","    second_df = pd.read_excel(date_path2 + key, index_col=0)\n","    third_df = pd.read_excel(date_path3 + key, index_col=0)\n","    fourth_df = pd.read_excel(date_path4 + key, index_col=0)\n","    fifth_df = pd.read_excel(date_path5 + key, index_col=0)\n","    \n","    print(df.index[[0, -1]])\n","    print(second_df.index[[0, -1]])\n","    print(third_df.index[[0, -1]])\n","    print(fourth_df.index[[0, -1]])\n","    print(fifth_df.index[[0, -1]])\n","\n","    open_indexes.append(df.index[0])\n","    open_indexes.append(second_df.index[0])\n","    open_indexes.append(third_df.index[0])\n","    open_indexes.append(fourth_df.index[0])\n","    open_indexes.append(fifth_df.index[0])\n","    \n","    try:\n","      #     Todo    #\n","      #      1. 1m 마지막 timeindex 의 date 기준, 08:59:59.999000 를 last timestamp 로 설정\n","      #      2. 시작 timestamp 는 모든 tf 의 가장 최근 시작 index,\n","      #       a. 1m 의 시작 timeindex 는 최소, htf 의 시작 timeindex 보다 interval 만큼 앞서야함\n","      #         i. 따라서 1m open_index, latest_open_index + 1d 를 하면 댐\n","      #           1. timestamp 으로 변환후 1day 를 더하고 datetime 으로 변환\n","      sixth_df = pd.read_excel(date_path6 + key, index_col=0)\n","      seventh_df = pd.read_excel(date_path7 + key, index_col=0)\n","\n","      print(sixth_df.index[[0, -1]])\n","      print(seventh_df.index[[0, -1]])\n","      print()\n","\n","      open_indexes.append(sixth_df.index[0])\n","      open_indexes.append(seventh_df.index[0])\n","\n","    except Exception as e:\n","      print(e)\n","\n","    latest_open_index = sorted(open_indexes)[-1]\n","    \n","    open_ts = datetime.timestamp(latest_open_index)\n","    latest_open_index_1m = datetime.fromtimestamp(open_ts + a_day)\n","\n","    #   str 로 만들어 접근하면 불가함  #\n","    end_index = pd.to_datetime(str(df.index[-1]).split(\" \")[0] + \" 08:59:59.999000\")\n","    # break\n","\n","    sliced_df = df.loc[latest_open_index_1m:end_index] # to_lower_tf 의 기준 ltf\n","    sliced_second_df = second_df.loc[latest_open_index:end_index]\n","    sliced_third_df = third_df.loc[latest_open_index:end_index]\n","    sliced_fourth_df = fourth_df.loc[latest_open_index:end_index]\n","    sliced_fifth_df = fifth_df.loc[latest_open_index:end_index]\n","\n","    print(\"sliced index\")\n","    print(sliced_df.index[[0, -1]])\n","    print(sliced_second_df.index[[0, -1]])\n","    print(sliced_third_df.index[[0, -1]])\n","    print(sliced_fourth_df.index[[0, -1]])\n","    print(sliced_fifth_df.index[[0, -1]])\n","\n","    try:\n","      sliced_sixth_df = sixth_df.loc[latest_open_index:end_index]\n","      sliced_seventh_df = seventh_df.loc[latest_open_index:end_index]\n","\n","      print(sliced_sixth_df.index[[0, -1]])\n","      print(sliced_seventh_df.index[[0, -1]])\n","\n","      res_df = sync_check(sliced_df, sliced_second_df, sliced_third_df, sliced_fourth_df, sliced_fifth_df, sliced_sixth_df, sliced_seventh_df)\n","    \n","    except:\n","      res_df = sync_check(sliced_df, sliced_second_df, sliced_third_df, sliced_fourth_df, sliced_fifth_df)\n","\n","\n","\n","    res_df.to_excel(excel_path)\n","    print(excel_name, \"saved succesfully !\")"],"execution_count":null,"outputs":[{"ename":"NameError","evalue":"ignored","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-5-ee034491b257>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     11\u001b[0m \u001b[0ma_day\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m3600\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0;36m24\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     12\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 13\u001b[0;31m \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mtqdm\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfile_list\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     14\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     15\u001b[0m   \u001b[0mkeys\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mfile_list\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'file_list' is not defined"]}]},{"cell_type":"markdown","metadata":{"id":"aAzRBq67tBno"},"source":["### xlsx to feather"]},{"cell_type":"code","metadata":{"id":"YJtFAah_tE0S","colab":{"base_uri":"https://localhost:8080/","height":355,"referenced_widgets":["be2b848dbcb14a079a2b7bd605af6435","2c7696db44fa402eafb2540c7a72d68c","502ec9042bab443e9407803d9ada1031","75511cdf82714fb7be5b8688e396f69b","b54d2eb7584d43e2916f69174d6e391d","7abd42b3c95c48ac910b581b74ba9b57","a742f61210f24d949aeb1b9f5cd1f6a5","2ff55a21df7742519b138ca795ec3f6d","9e7f44d996a341a19bf22f806da4756d","5552df18053d4d1294ea6a4185afee6e","196b72f68ba948ef96093981fbcd195f"]},"outputId":"f6f3b55d-ec2c-4b2c-d62e-3de7c0384dc4"},"source":["pd.set_option('display.max_rows', 500)\n","pd.set_option('display.max_columns', 500)\n","pd.set_option('display.width', 1000)\n","\n","\n","save_path = './candlestick_concated/res_df/'\n","\n","exist_list = os.listdir(save_path)\n","\n","\n","a_day = 3600 * 24\n","\n","for i in tqdm(range(len(file_list))):\n","\n","  keys = [file_list[i]]\n","\n","  # if 'neo'.upper() not in file_list[i]:\n","    # continue\n","\n","  # if '2021-04-30'.upper() not in file_list[i]:\n","  # if '2021-07-01'.upper() not in file_list[i]:\n","  if '2021-10-10'.upper() not in file_list[i]:\n","    continue\n","\n","\n","  for key in keys:      \n","\n","    # if 'eth'.upper() not in key:\n","    #   continue\n","\n","    feather_name = key.replace(\".xlsx\", \".ftr\")\n","    # feather_path = save_path + feather_name\n","\n","    if feather_name in exist_list:\n","      print(feather_name, \"already exist !\")\n","      continue\n","    \n","    open_indexes = []\n","    \n","    df = pd.read_excel(date_path + key, index_col=0)\n","    second_df = pd.read_excel(date_path2 + key, index_col=0)\n","    third_df = pd.read_excel(date_path3 + key, index_col=0)\n","    fourth_df = pd.read_excel(date_path4 + key, index_col=0)\n","    fifth_df = pd.read_excel(date_path5 + key, index_col=0)\n","    \n","    print(df.index[[0, -1]])\n","    print(second_df.index[[0, -1]])\n","    print(third_df.index[[0, -1]])\n","    print(fourth_df.index[[0, -1]])\n","    print(fifth_df.index[[0, -1]])\n","\n","    open_indexes.append(df.index[0])\n","    open_indexes.append(second_df.index[0])\n","    open_indexes.append(third_df.index[0])\n","    open_indexes.append(fourth_df.index[0])\n","    open_indexes.append(fifth_df.index[0])\n","    \n","    try:\n","      #     Todo    #\n","      #      1. 1m 마지막 timeindex 의 date 기준, 08:59:59.999000 를 last timestamp 로 설정\n","      #      2. 시작 timestamp 는 모든 tf 의 가장 최근 시작 index,\n","      #       a. 1m 의 시작 timeindex 는 최소, htf 의 시작 timeindex 보다 interval 만큼 앞서야함\n","      #         i. 따라서 1m open_index, latest_open_index + 1d 를 하면 댐\n","      #           1. timestamp 으로 변환후 1day 를 더하고 datetime 으로 변환\n","      sixth_df = pd.read_excel(date_path6 + key, index_col=0)\n","      seventh_df = pd.read_excel(date_path7 + key, index_col=0)\n","\n","      print(sixth_df.index[[0, -1]])\n","      print(seventh_df.index[[0, -1]])\n","      print()\n","\n","      open_indexes.append(sixth_df.index[0])\n","      open_indexes.append(seventh_df.index[0])\n","\n","    except Exception as e:\n","      print(e)\n","\n","\n","    df.reset_index().to_feather(date_path + feather_name, compression='lz4')\n","    second_df.reset_index().to_feather(date_path2 + feather_name, compression='lz4')\n","    third_df.reset_index().to_feather(date_path3 + feather_name, compression='lz4')\n","    fourth_df.reset_index().to_feather(date_path4 + feather_name, compression='lz4')\n","    fifth_df.reset_index().to_feather(date_path5 + feather_name, compression='lz4')\n","    sixth_df.reset_index().to_feather(date_path6 + feather_name, compression='lz4')\n","    seventh_df.reset_index().to_feather(date_path7 + feather_name, compression='lz4')\n","\n","    print(\"xlsx converted to feather !\")\n","    "],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"application/vnd.jupyter.widget-view+json":{"model_id":"be2b848dbcb14a079a2b7bd605af6435","version_minor":0,"version_major":2},"text/plain":["  0%|          | 0/156 [00:00<?, ?it/s]"]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["DatetimeIndex(['2021-06-28 00:00:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:02:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:04:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:14:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:29:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-09-14 03:59:59.999000', '2021-11-15 14:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-03-10 20:59:59.999000', '2021-11-15 16:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","\n","xlsx converted to feather !\n","DatetimeIndex(['2021-06-28 00:00:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:02:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:04:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:14:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:29:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-09-14 03:59:59.999000', '2021-11-15 14:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-03-10 20:59:59.999000', '2021-11-15 16:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","\n","xlsx converted to feather !\n"]}]},{"cell_type":"markdown","metadata":{"id":"yBMOMttNKQmU"},"source":["### add itv_name to ftr"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","referenced_widgets":["4b9fd28b1ae746ce9ca1f8036d4a1b21","c4e566ca55694d5f8d4bc2d5d36db779","430c63e35e084967b02132c770e6f992","d66fb6f54fbd4b35925c8158eaa9cd56","38c2994d13cf497eb819621ee975b1a3","0803835fd2b74e7ab47f3377a070e54c","16eb81859ced4750bdd70c42bb110b35","2a7d21d5873a427a856d5c9333f7f2e7","456aa8c516c54b55850057c62a69664f","1b1522effd6c4ff68a3f3eb465b3a292","4c873b8879684e4b93d0d4a878a7ba93"]},"id":"ihQzcsJkKd0K","executionInfo":{"status":"ok","timestamp":1637074788128,"user_tz":-540,"elapsed":29938,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"08e49ba1-0a82-44f5-8c73-4ea3c925d0a4"},"source":["save_path = './candlestick_concated/res_df/'\n","db_path = './candlestick_concated/database/'\n","\n","dir_path = \"bbdc3m_backi2\"\n","date = '2021-11-16'\n","os.makedirs(os.path.join(save_path, dir_path), exist_ok=True)\n","\n","exist_list = os.listdir(os.path.join(save_path, dir_path))\n","# break\n","\n","\n","a_day = 3600 * 24\n","\n","for i in tqdm(range(len(file_list))):\n","\n","  keys = [file_list[i]]\n","\n","  # if 'neo'.upper() not in file_list[i]:\n","    # continue\n","\n","  if date not in file_list[i]:\n","    continue\n","\n","\n","  for key in keys:      \n","\n","    # if 'eth'.upper() not in key:\n","    #   continue\n","    # print(key)\n","    \n","    if \".ftr\" not in key:\n","      continue\n","        \n","    df = shutil.copy(date_path + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval))\n","    second_df = shutil.copy(date_path2 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval2))\n","    third_df = shutil.copy(date_path3 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval3))\n","    fourth_df = shutil.copy(date_path4 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval4))\n","    fifth_df = shutil.copy(date_path5 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval5))\n","    sixth_df = shutil.copy(date_path6 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval6))\n","    seventh_df = shutil.copy(date_path7 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval7))\n","\n","    print(\"copied to\" + db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval))\n"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"application/vnd.jupyter.widget-view+json":{"model_id":"4b9fd28b1ae746ce9ca1f8036d4a1b21","version_minor":0,"version_major":2},"text/plain":["  0%|          | 0/175 [00:00<?, ?it/s]"]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["copied to./candlestick_concated/database/2021-11-16 ETCUSDT_1m.ftr\n","copied to./candlestick_concated/database/2021-11-16 BTCUSDT_1m.ftr\n","copied to./candlestick_concated/database/2021-11-16 ETHUSDT_1m.ftr\n","copied to./candlestick_concated/database/2021-11-16 ADAUSDT_1m.ftr\n","copied to./candlestick_concated/database/2021-11-16 XLMUSDT_1m.ftr\n","copied to./candlestick_concated/database/2021-11-16 LINKUSDT_1m.ftr\n","copied to./candlestick_concated/database/2021-11-16 LTCUSDT_1m.ftr\n","copied to./candlestick_concated/database/2021-11-16 EOSUSDT_1m.ftr\n","copied to./candlestick_concated/database/2021-11-16 XRPUSDT_1m.ftr\n","copied to./candlestick_concated/database/2021-11-16 BCHUSDT_1m.ftr\n"]}]},{"cell_type":"markdown","metadata":{"id":"QtiavGJOi8NV"},"source":["### feather ver."]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":3585,"referenced_widgets":["dd5aa9407ba0400f8ebd7b536e99e41d","eb89fa881707405a8753d647759c222d","f8236b1cb3514e1c8dba594c11a0a136","19fae5bcc113405fbcdf691b90f8cb6d","10385e0b2cb04fb697bc4c63f0c2caab","3aed8c6b0be84178a1da80d93320d9e2","fe3dabdafa30486d917355ed075f9ab4","9722fd3b77c2439abafda4d2caa88587","48374af091fb434fb8f322a9fe9a89e5","c4bdd6bc81cf480b85b23768e767d0a0","6688d832367144dbadbddfab022c8424"]},"id":"0g2fXaCmi9zN","executionInfo":{"status":"ok","timestamp":1637112492942,"user_tz":-540,"elapsed":2378901,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"019388f1-107d-4a01-dc67-276ef6425a70"},"source":["save_path = './candlestick_concated/res_df/'\n","\n","db_path = './candlestick_concated/database/'\n","\n","dir_path = \"bbdc3m_backi2\"\n","date = '2021-11-17'\n","os.makedirs(os.path.join(save_path, dir_path), exist_ok=True)\n","\n","file_list = os.listdir(db_path)\n","exist_list = os.listdir(os.path.join(save_path, dir_path))\n","# break\n","\n","\n","a_day = 3600 * 24\n","\n","for i in tqdm(range(len(file_list))):\n","\n","  keys = [file_list[i]]\n","\n","  # if 'neo'.upper() not in file_list[i]:\n","    # continue\n","\n","  if date not in file_list[i]:\n","    continue\n","\n","\n","  for key in keys:      \n","\n","    # if 'eth'.upper() not in key:\n","    #   continue\n","    # print(key)\n","    \n","    if \".ftr\" not in key:\n","      continue\n","\n","    if \"_1m\" not in key:\n","      continue\n","\n","    # feather_name = key.replace(\".ftr\", \"_%.ftr\" % dir_path)\n","    feather_name = key.replace(\"_1m\", \"\")\n","    feather_path = os.path.join(save_path, dir_path, feather_name)\n","\n","    if feather_name in exist_list:\n","      print(feather_name, \"already exist !\")\n","      continue\n","    \n","    open_indexes = []\n","    \n","    df = pd.read_feather(db_path + key, columns=None, use_threads=True).set_index(\"index\")\n","    second_df = pd.read_feather(db_path + key.replace(interval, interval2), columns=None, use_threads=True).set_index(\"index\")\n","    third_df = pd.read_feather(db_path + key.replace(interval, interval3), columns=None, use_threads=True).set_index(\"index\")\n","    fourth_df = pd.read_feather(db_path + key.replace(interval, interval4), columns=None, use_threads=True).set_index(\"index\")\n","    fifth_df = pd.read_feather(db_path + key.replace(interval, interval5), columns=None, use_threads=True).set_index(\"index\")\n","        \n","    print(df.index[[0, -1]])\n","    print(second_df.index[[0, -1]])\n","    print(third_df.index[[0, -1]])\n","    print(fourth_df.index[[0, -1]])\n","    print(fifth_df.index[[0, -1]])\n","\n","    open_indexes.append(df.index[0])\n","    open_indexes.append(second_df.index[0])\n","    open_indexes.append(third_df.index[0])\n","    open_indexes.append(fourth_df.index[0])\n","    open_indexes.append(fifth_df.index[0])\n","    \n","    try:\n","      #     Todo    #\n","      #      1. 1m 마지막 timeindex 의 date 기준, 08:59:59.999000 를 last timestamp 로 설정\n","      #      2. 시작 timestamp 는 모든 tf 의 가장 최근 시작 index,\n","      #       a. 1m 의 시작 timeindex 는 최소, htf 의 시작 timeindex 보다 interval 만큼 앞서야함\n","      #         i. 따라서 1m open_index, latest_open_index + 1d 를 하면 댐\n","      #           1. timestamp 으로 변환후 1day 를 더하고 datetime 으로 변환\n","      sixth_df = pd.read_feather(db_path + key.replace(interval, interval6), columns=None, use_threads=True).set_index(\"index\")\n","      seventh_df = pd.read_feather(db_path + key.replace(interval, interval7), columns=None, use_threads=True).set_index(\"index\")\n","\n","      print(sixth_df.index[[0, -1]])\n","      print(seventh_df.index[[0, -1]])\n","      print()\n","\n","      open_indexes.append(sixth_df.index[0])\n","      open_indexes.append(seventh_df.index[0])\n","\n","    except Exception as e:\n","      print(e)\n","\n","    latest_open_index = sorted(open_indexes)[-1]\n","    \n","    open_ts = datetime.timestamp(latest_open_index)\n","    latest_open_index_1m = datetime.fromtimestamp(open_ts + a_day)\n","\n","    #   str 로 만들어 접근하면 불가함  #\n","    end_index = pd.to_datetime(str(df.index[-1]).split(\" \")[0] + \" 08:59:59.999000\")\n","    # break\n","\n","    sliced_df = df.loc[latest_open_index_1m:end_index] # to_lower_tf 의 기준 ltf\n","    sliced_second_df = second_df.loc[latest_open_index:end_index]\n","    sliced_third_df = third_df.loc[latest_open_index:end_index]\n","    sliced_fourth_df = fourth_df.loc[latest_open_index:end_index]\n","    sliced_fifth_df = fifth_df.loc[latest_open_index:end_index]\n","\n","    print(\"sliced index\")\n","    print(sliced_df.index[[0, -1]])\n","    print(sliced_second_df.index[[0, -1]])\n","    print(sliced_third_df.index[[0, -1]])\n","    print(sliced_fourth_df.index[[0, -1]])\n","    print(sliced_fifth_df.index[[0, -1]])\n","\n","    try:\n","      sliced_sixth_df = sixth_df.loc[latest_open_index:end_index]\n","      sliced_seventh_df = seventh_df.loc[latest_open_index:end_index]\n","\n","      print(sliced_sixth_df.index[[0, -1]])\n","      print(sliced_seventh_df.index[[0, -1]])\n","\n","      res_df = sync_check(sliced_df, sliced_second_df, sliced_third_df, sliced_fourth_df, sliced_fifth_df, sliced_sixth_df, sliced_seventh_df)\n","    \n","    except:\n","      res_df = sync_check(sliced_df, sliced_second_df, sliced_third_df, sliced_fourth_df, sliced_fifth_df)\n","\n","\n","\n","    # res_df.to_feather(feather_path)\n","    res_df.reset_index().to_feather(feather_path, compression='lz4')\n","    print(feather_name, \"saved succesfully !\")"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"application/vnd.jupyter.widget-view+json":{"model_id":"dd5aa9407ba0400f8ebd7b536e99e41d","version_minor":0,"version_major":2},"text/plain":["  0%|          | 0/70 [00:00<?, ?it/s]"]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["DatetimeIndex(['2021-10-04 00:00:59.999000', '2021-11-17 00:47:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2021-10-04 00:02:59.999000', '2021-11-17 00:53:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2021-10-04 00:04:59.999000', '2021-11-17 00:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2021-10-04 00:14:59.999000', '2021-11-17 01:14:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2021-10-04 00:29:59.999000', '2021-11-17 01:29:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2021-10-04 00:59:59.999000', '2021-11-17 01:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2021-10-04 04:59:59.999000', '2021-11-17 04:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","\n","sliced index\n","DatetimeIndex(['2021-10-05 04:59:59.999000', '2021-11-17 00:47:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2021-10-04 04:59:59.999000', '2021-11-17 00:53:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2021-10-04 04:59:59.999000', '2021-11-17 00:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2021-10-04 04:59:59.999000', '2021-11-17 01:14:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2021-10-04 04:59:59.999000', '2021-11-17 01:29:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2021-10-04 04:59:59.999000', '2021-11-17 01:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2021-10-04 04:59:59.999000', '2021-11-17 04:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n"]},{"output_type":"stream","name":"stderr","text":["/content/drive/My Drive/Colab Notebooks/JnQ/funcs_indicator.py:234: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  ltf_df[dc_upper], ltf_df[dc_lower], ltf_df[dc_base] = donchian_channel(ltf_df, dc_period)\n","/content/drive/My Drive/Colab Notebooks/JnQ/funcs_indicator.py:229: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  htf_df[dc_upper], htf_df[dc_lower], htf_df[dc_base] = donchian_channel(htf_df, dc_period)\n"]},{"output_type":"stream","name":"stdout","text":["dc phase done\n"]},{"output_type":"stream","name":"stderr","text":["/content/drive/My Drive/Colab Notebooks/JnQ/funcs_indicator.py:270: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  htf_df[bb_upper], htf_df[bb_lower], _ = bb_width(htf_df, 20, 1)\n"]},{"output_type":"stream","name":"stdout","text":["bband phase done\n","2021-11-17 ETHUSDT.ftr saved succesfully !\n","DatetimeIndex(['2021-10-04 00:00:59.999000', '2021-11-17 00:47:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2021-10-04 00:02:59.999000', '2021-11-17 00:53:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2021-10-04 00:04:59.999000', '2021-11-17 00:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2021-10-04 00:14:59.999000', '2021-11-17 01:14:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2021-10-04 00:29:59.999000', '2021-11-17 01:29:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2021-10-04 00:59:59.999000', '2021-11-17 01:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2021-10-04 04:59:59.999000', '2021-11-17 04:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","\n","sliced index\n","DatetimeIndex(['2021-10-05 04:59:59.999000', '2021-11-17 00:47:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2021-10-04 04:59:59.999000', '2021-11-17 00:53:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2021-10-04 04:59:59.999000', '2021-11-17 00:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2021-10-04 04:59:59.999000', '2021-11-17 01:14:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2021-10-04 04:59:59.999000', '2021-11-17 01:29:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2021-10-04 04:59:59.999000', '2021-11-17 01:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2021-10-04 04:59:59.999000', '2021-11-17 04:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","dc phase done\n","bband phase done\n","2021-11-17 BTCUSDT.ftr saved succesfully !\n","DatetimeIndex(['2021-10-04 00:00:59.999000', '2021-11-17 00:47:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2021-10-04 00:02:59.999000', '2021-11-17 00:53:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2021-10-04 00:04:59.999000', '2021-11-17 00:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2021-10-04 00:14:59.999000', '2021-11-17 01:14:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2021-10-04 00:29:59.999000', '2021-11-17 01:29:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2021-10-04 00:59:59.999000', '2021-11-17 01:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2021-10-04 04:59:59.999000', '2021-11-17 04:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","\n","sliced index\n","DatetimeIndex(['2021-10-05 04:59:59.999000', '2021-11-17 00:47:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2021-10-04 04:59:59.999000', '2021-11-17 00:53:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2021-10-04 04:59:59.999000', '2021-11-17 00:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2021-10-04 04:59:59.999000', '2021-11-17 01:14:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2021-10-04 04:59:59.999000', '2021-11-17 01:29:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2021-10-04 04:59:59.999000', '2021-11-17 01:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2021-10-04 04:59:59.999000', '2021-11-17 04:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","dc phase done\n","bband phase done\n","2021-11-17 ETCUSDT.ftr saved succesfully !\n","DatetimeIndex(['2021-10-04 00:00:59.999000', '2021-11-17 00:48:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2021-10-04 00:02:59.999000', '2021-11-17 00:53:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2021-10-04 00:04:59.999000', '2021-11-17 00:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2021-10-04 00:14:59.999000', '2021-11-17 01:14:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2021-10-04 00:29:59.999000', '2021-11-17 01:29:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2021-10-04 00:59:59.999000', '2021-11-17 01:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2021-10-04 04:59:59.999000', '2021-11-17 04:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","\n","sliced index\n","DatetimeIndex(['2021-10-05 04:59:59.999000', '2021-11-17 00:48:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2021-10-04 04:59:59.999000', '2021-11-17 00:53:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2021-10-04 04:59:59.999000', '2021-11-17 00:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2021-10-04 04:59:59.999000', '2021-11-17 01:14:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2021-10-04 04:59:59.999000', '2021-11-17 01:29:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2021-10-04 04:59:59.999000', '2021-11-17 01:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2021-10-04 04:59:59.999000', '2021-11-17 04:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","dc phase done\n","bband phase done\n","2021-11-17 ADAUSDT.ftr saved succesfully !\n","DatetimeIndex(['2021-10-04 00:00:59.999000', '2021-11-17 00:48:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2021-10-04 00:02:59.999000', '2021-11-17 00:53:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2021-10-04 00:04:59.999000', '2021-11-17 00:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2021-10-04 00:14:59.999000', '2021-11-17 01:14:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2021-10-04 00:29:59.999000', '2021-11-17 01:29:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2021-10-04 00:59:59.999000', '2021-11-17 01:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2021-10-04 04:59:59.999000', '2021-11-17 04:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","\n","sliced index\n","DatetimeIndex(['2021-10-05 04:59:59.999000', '2021-11-17 00:48:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2021-10-04 04:59:59.999000', '2021-11-17 00:53:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2021-10-04 04:59:59.999000', '2021-11-17 00:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2021-10-04 04:59:59.999000', '2021-11-17 01:14:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2021-10-04 04:59:59.999000', '2021-11-17 01:29:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2021-10-04 04:59:59.999000', '2021-11-17 01:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2021-10-04 04:59:59.999000', '2021-11-17 04:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","dc phase done\n","bband phase done\n","2021-11-17 XLMUSDT.ftr saved succesfully !\n","DatetimeIndex(['2021-10-04 00:00:59.999000', '2021-11-17 00:49:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2021-10-04 00:02:59.999000', '2021-11-17 00:53:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2021-10-04 00:04:59.999000', '2021-11-17 00:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2021-10-04 00:14:59.999000', '2021-11-17 01:14:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2021-10-04 00:29:59.999000', '2021-11-17 01:29:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2021-10-04 00:59:59.999000', '2021-11-17 01:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2021-10-04 04:59:59.999000', '2021-11-17 04:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","\n","sliced index\n","DatetimeIndex(['2021-10-05 04:59:59.999000', '2021-11-17 00:49:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2021-10-04 04:59:59.999000', '2021-11-17 00:53:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2021-10-04 04:59:59.999000', '2021-11-17 00:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2021-10-04 04:59:59.999000', '2021-11-17 01:14:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2021-10-04 04:59:59.999000', '2021-11-17 01:29:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2021-10-04 04:59:59.999000', '2021-11-17 01:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2021-10-04 04:59:59.999000', '2021-11-17 04:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","dc phase done\n","bband phase done\n","2021-11-17 LINKUSDT.ftr saved succesfully !\n","DatetimeIndex(['2021-10-04 00:00:59.999000', '2021-11-17 00:49:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2021-10-04 00:02:59.999000', '2021-11-17 00:56:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2021-10-04 00:04:59.999000', '2021-11-17 00:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2021-10-04 00:14:59.999000', '2021-11-17 01:14:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2021-10-04 00:29:59.999000', '2021-11-17 01:29:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2021-10-04 00:59:59.999000', '2021-11-17 01:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2021-10-04 04:59:59.999000', '2021-11-17 04:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","\n","sliced index\n","DatetimeIndex(['2021-10-05 04:59:59.999000', '2021-11-17 00:49:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2021-10-04 04:59:59.999000', '2021-11-17 00:56:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2021-10-04 04:59:59.999000', '2021-11-17 00:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2021-10-04 04:59:59.999000', '2021-11-17 01:14:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2021-10-04 04:59:59.999000', '2021-11-17 01:29:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2021-10-04 04:59:59.999000', '2021-11-17 01:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2021-10-04 04:59:59.999000', '2021-11-17 04:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","dc phase done\n","bband phase done\n","2021-11-17 LTCUSDT.ftr saved succesfully !\n","DatetimeIndex(['2021-10-04 00:00:59.999000', '2021-11-17 00:50:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2021-10-04 00:02:59.999000', '2021-11-17 00:56:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2021-10-04 00:04:59.999000', '2021-11-17 00:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2021-10-04 00:14:59.999000', '2021-11-17 01:14:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2021-10-04 00:29:59.999000', '2021-11-17 01:29:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2021-10-04 00:59:59.999000', '2021-11-17 01:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2021-10-04 04:59:59.999000', '2021-11-17 04:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","\n","sliced index\n","DatetimeIndex(['2021-10-05 04:59:59.999000', '2021-11-17 00:50:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2021-10-04 04:59:59.999000', '2021-11-17 00:56:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2021-10-04 04:59:59.999000', '2021-11-17 00:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2021-10-04 04:59:59.999000', '2021-11-17 01:14:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2021-10-04 04:59:59.999000', '2021-11-17 01:29:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2021-10-04 04:59:59.999000', '2021-11-17 01:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2021-10-04 04:59:59.999000', '2021-11-17 04:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","dc phase done\n","bband phase done\n","2021-11-17 EOSUSDT.ftr saved succesfully !\n","DatetimeIndex(['2021-10-04 00:00:59.999000', '2021-11-17 00:50:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2021-10-04 00:02:59.999000', '2021-11-17 00:56:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2021-10-04 00:04:59.999000', '2021-11-17 00:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2021-10-04 00:14:59.999000', '2021-11-17 01:14:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2021-10-04 00:29:59.999000', '2021-11-17 01:29:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2021-10-04 00:59:59.999000', '2021-11-17 01:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2021-10-04 04:59:59.999000', '2021-11-17 04:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","\n","sliced index\n","DatetimeIndex(['2021-10-05 04:59:59.999000', '2021-11-17 00:50:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2021-10-04 04:59:59.999000', '2021-11-17 00:56:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2021-10-04 04:59:59.999000', '2021-11-17 00:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2021-10-04 04:59:59.999000', '2021-11-17 01:14:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2021-10-04 04:59:59.999000', '2021-11-17 01:29:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2021-10-04 04:59:59.999000', '2021-11-17 01:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2021-10-04 04:59:59.999000', '2021-11-17 04:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","dc phase done\n","bband phase done\n","2021-11-17 XRPUSDT.ftr saved succesfully !\n","DatetimeIndex(['2021-10-04 00:00:59.999000', '2021-11-17 00:51:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2021-10-04 00:02:59.999000', '2021-11-17 00:56:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2021-10-04 00:04:59.999000', '2021-11-17 00:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2021-10-04 00:14:59.999000', '2021-11-17 01:14:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2021-10-04 00:29:59.999000', '2021-11-17 01:29:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2021-10-04 00:59:59.999000', '2021-11-17 01:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2021-10-04 04:59:59.999000', '2021-11-17 04:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","\n","sliced index\n","DatetimeIndex(['2021-10-05 04:59:59.999000', '2021-11-17 00:51:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2021-10-04 04:59:59.999000', '2021-11-17 00:56:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2021-10-04 04:59:59.999000', '2021-11-17 00:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2021-10-04 04:59:59.999000', '2021-11-17 01:14:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2021-10-04 04:59:59.999000', '2021-11-17 01:29:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2021-10-04 04:59:59.999000', '2021-11-17 01:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2021-10-04 04:59:59.999000', '2021-11-17 04:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","dc phase done\n","bband phase done\n","2021-11-17 BCHUSDT.ftr saved succesfully !\n"]}]},{"cell_type":"markdown","metadata":{"id":"NYqoJuPowqHq"},"source":["## concat & save new res_df"]},{"cell_type":"markdown","metadata":{"id":"9Lbr-ZsJjzIT"},"source":["### old (xlsx)"]},{"cell_type":"code","metadata":{"id":"TRXKKMr0wwKF"},"source":["save_path = './candlestick_concated/res_df/'\n","\n","dict_name = \"2021-07-01 ETHUSDT_bb15m_backi2_res_dfs.pkl\"\n","\n","#     load with pickle    #\n","with open(save_path + dict_name, 'rb') as f:\n","  saved_res_df_dict = pickle.load(f)\n","\n","print(dict_name, \"loaded !\")\n","res_df_files = os.listdir(save_path)\n","res_df_files.reverse()\n","\n","print(res_df_files)\n","\n","res_df_dict = {}\n","\n","base_postfix = '_bb15m_backi2.xlsx'\n","new_postfix = '_st1h_backi2.xlsx'\n","\n","max_cnt = 10\n","sample_cnt = max_cnt\n","\n","for k_i, key in enumerate(res_df_files):\n","\n","  if '2021-07-01'.upper() not in key:\n","  # if '2021-10-10'.upper() not in key:\n","    continue\n","\n","  # if \"link\".upper() not in key:\n","  # if \"btc\".upper() not in key:\n","  #   continue\n","\n","  if new_postfix not in key:\n","    continue\n","\n","  # if key in \n","\n","  if sample_cnt == max_cnt:\n","    dict_name = \"%s_res_dfs.pkl\" % key.split(\".\")[0]\n","    print(\"dict_name :\", dict_name)\n","\n","  base_df = saved_res_df_dict[key.replace(new_postfix, base_postfix)]\n","  # base_df = pd.read_excel(save_path + key.replace(new_postfix, base_postfix), index_col=0)  \n","  res_df = pd.read_excel(save_path + key, index_col=0)  \n","\n","  # print(base_df.head())\n","  # print(res_df.head())\n","  # break\n","\n","  new_res_df = pd.concat([base_df, res_df], axis=1) # df_tot.drop_duplicates()\n","  # new_res_df.head()\n","\n","  droped_new_res_df = new_res_df.loc[:,~new_res_df.columns.duplicated(keep='last')]\n","  droped_new_res_df.head()\n","  # break\n","\n","  # res_df_dict[key] = res_df\n","  res_df_dict[key] = droped_new_res_df\n","  print(key, \"saved to dict !\")\n","\n","  #     save with pickle    #\n","  with open(save_path + dict_name, 'wb') as f:\n","    pickle.dump(res_df_dict, f)\n","\n","  sample_cnt -= 1\n","\n","  if sample_cnt <= 0:\n","    break\n"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"XHtKmKvEj2TU"},"source":["### feather ver. (col concat)"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"TswTadFXj35X","executionInfo":{"elapsed":48426,"status":"ok","timestamp":1636609438589,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"outputId":"4d48788f-2dbd-401a-c50e-cbf8e0d407e1"},"source":["save_path = './candlestick_concated/res_df/'\n","\n","concat_dir = \"concat\"\n","\n","dir_path = \"bbdc3m_backi2\"\n","base_dir_path = \"sar15m4h_backi2\"\n","\n","\n","#     save to (new) concat dir    #\n","#      1. if dir. not exists, makedir\n","os.makedirs(os.path.join(save_path, dir_path, concat_dir), exist_ok=True)\n","\n","\n","#     load ftr list    #\n","ftr_list = [s for s in os.listdir(os.path.join(save_path, dir_path)) if \"ftr\" in s]\n","print(ftr_list)\n","# break\n","\n","# dict_name = \"2021-07-01 ETHUSDT_bb15m_backi2_res_dfs.pkl\"\n","\n","# #     load with pickle    #\n","# with open(save_path + dict_name, 'rb') as f:\n","#   saved_res_df_dict = pickle.load(f)\n","\n","# print(dict_name, \"loaded !\")\n","# res_df_files = os.listdir(save_path)\n","# res_df_files.reverse()\n","\n","# print(res_df_files)\n","\n","# res_df_dict = {}\n","\n","max_cnt = 10\n","sample_cnt = max_cnt\n","\n","for key in ftr_list:\n","\n","  if '2021-07-01'.upper() not in key:\n","  # if '2021-10-10'.upper() not in key:\n","    continue\n","\n","\n","  # if sample_cnt == max_cnt:\n","  #   dict_name = \"%s_res_dfs.pkl\" % key.split(\".\")[0]\n","  #   print(\"dict_name :\", dict_name)\n","\n","  # base_df = saved_res_df_dict[key.replace(new_postfix, base_postfix)]\n","  #       read from base postfix's directory    #\n","  base_df = pd.read_feather(os.path.join(save_path, base_dir_path, concat_dir, key), columns=None, use_threads=True).set_index(\"index\")\n","  # base_df = pd.read_excel(save_path + key.replace(new_postfix, base_postfix), index_col=0)  \n","  res_df = pd.read_feather(os.path.join(save_path, dir_path, key), columns=None, use_threads=True).set_index(\"index\")\n","\n","  # print(base_df.head())\n","  # print(res_df.head())\n","  # break\n","\n","  new_res_df = pd.concat([base_df, res_df], axis=1) # df_tot.drop_duplicates()\n","  # new_res_df.head()\n","\n","  droped_new_res_df = new_res_df.loc[:,~new_res_df.columns.duplicated(keep='last')]\n","  # droped_new_res_df.head()\n","  # break\n","\n","  droped_new_res_df.reset_index().to_feather(os.path.join(save_path, dir_path, concat_dir, key), compression='lz4')\n","\n","  # res_df_dict[key] = res_df\n","  # res_df_dict[key] = droped_new_res_df\n","  print(key, \"saved !\")\n","\n","  # #     save with pickle    #\n","  # with open(save_path + dict_name, 'wb') as f:\n","  #   pickle.dump(res_df_dict, f)\n","\n","  sample_cnt -= 1\n","\n","  if sample_cnt <= 0:\n","    break\n"],"execution_count":null,"outputs":[{"name":"stdout","output_type":"stream","text":["['2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr']\n","2021-07-01 BTCUSDT.ftr saved !\n","2021-07-01 BCHUSDT.ftr saved !\n","2021-07-01 XRPUSDT.ftr saved !\n","2021-07-01 EOSUSDT.ftr saved !\n","2021-07-01 LTCUSDT.ftr saved !\n","2021-07-01 ETCUSDT.ftr saved !\n","2021-07-01 LINKUSDT.ftr saved !\n","2021-07-01 XLMUSDT.ftr saved !\n","2021-07-01 ADAUSDT.ftr saved !\n","2021-07-01 ETHUSDT.ftr saved !\n"]}]},{"cell_type":"code","metadata":{"id":"WNLIzxy8ZED5"},"source":["print(base_df['dc_upper_5m'].tail(50))\n","print(res_df['dc_upper_5m'].tail(50))\n","# droped_new_res_df.tail()\n","# new_res_df = pd.concat([base_df, res_df], axis=1) # df_tot.drop_duplicates()\n","#   # new_res_df.head()\n","\n","# droped_new_res_df = new_res_df.loc[:,~new_res_df.columns.duplicated(keep='last')]\n","# droped_new_res_df.head()\n","# break"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"dOTNQDDy_XZj"},"source":["### feather ver. (row concat)"]},{"cell_type":"code","metadata":{"id":"uWpjGgdq_Zvh","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1637112633813,"user_tz":-540,"elapsed":15131,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"764f7ab6-7da8-4056-e446-9c40d5874e1c"},"source":["save_path = './candlestick_concated/res_df/'\n","\n","concat_dir = \"concat\"\n","\n","dir_path = \"bbdc3m_backi2\"\n","\n","new_date = '2021-11-17'\n","old_date = '2021-10-10'\n","\n","# base_dir_path = \"sar15m4h_backi2\"\n","\n","\n","#     save to (new) concat dir    #\n","#      1. if dir. not exists, makedir\n","os.makedirs(os.path.join(save_path, dir_path, concat_dir), exist_ok=True)\n","\n","\n","#     load ftr list    #\n","ftr_list = [s for s in os.listdir(os.path.join(save_path, dir_path)) if \"ftr\" in s]\n","print(ftr_list)\n","# break\n","\n","# dict_name = \"2021-07-01 ETHUSDT_bb15m_backi2_res_dfs.pkl\"\n","\n","# #     load with pickle    #\n","# with open(save_path + dict_name, 'rb') as f:\n","#   saved_res_df_dict = pickle.load(f)\n","\n","# print(dict_name, \"loaded !\")\n","# res_df_files = os.listdir(save_path)\n","# res_df_files.reverse()\n","\n","# print(res_df_files)\n","\n","# res_df_dict = {}\n","\n","max_cnt = 10\n","sample_cnt = max_cnt\n","\n","for key in ftr_list:\n","\n","  if new_date not in key:\n","    continue\n","\n","\n","  #       read from base postfix's directory    #\n","  base_df = pd.read_feather(os.path.join(save_path, dir_path, concat_dir, key.replace(new_date, old_date)), columns=None, use_threads=True).set_index(\"index\")\n","  # base_df = pd.read_excel(save_path + key.replace(new_postfix, base_postfix), index_col=0)  \n","  res_df = pd.read_feather(os.path.join(save_path, dir_path, key), columns=None, use_threads=True).set_index(\"index\")\n","\n","  # print(base_df.head())\n","  # print(res_df.head())\n","  # break\n","\n","  new_res_df = pd.concat([base_df, res_df], axis=0) # df_tot.drop_duplicates()\n","  # new_res_df.head()\n","\n","  intersection_cols = res_df.columns.intersection(base_df.columns)\n","\n","  droped_new_res_df = new_res_df.loc[~new_res_df.index.duplicated(keep='last'),intersection_cols]\n","  # droped_new_res_df = new_res_df.loc[:,~new_res_df.columns.duplicated(keep='last')]\n","  # droped_new_res_df = new_res_df.loc[:,~new_res_df.index.duplicated(keep='last')]\n","  # droped_new_res_df.head()\n","  # break\n","\n","  droped_new_res_df.reset_index().to_feather(os.path.join(save_path, dir_path, concat_dir, key), compression='lz4')\n","\n","  # res_df_dict[key] = res_df\n","  # res_df_dict[key] = droped_new_res_df\n","  print(key, \"saved !\")\n","\n","  # #     save with pickle    #\n","  # with open(save_path + dict_name, 'wb') as f:\n","  #   pickle.dump(res_df_dict, f)\n","\n","  sample_cnt -= 1\n","\n","  if sample_cnt <= 0:\n","    break\n"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["['2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr', '2021-10-10 ETCUSDT.ftr', '2021-10-10 BTCUSDT.ftr', '2021-10-10 ETHUSDT.ftr', '2021-10-10 ADAUSDT.ftr', '2021-10-10 XLMUSDT.ftr', '2021-10-10 LINKUSDT.ftr', '2021-10-10 LTCUSDT.ftr', '2021-10-10 EOSUSDT.ftr', '2021-10-10 XRPUSDT.ftr', '2021-10-10 BCHUSDT.ftr', '2021-11-16 ETCUSDT.ftr', '2021-11-16 BTCUSDT.ftr', '2021-11-16 ETHUSDT.ftr', '2021-11-16 ADAUSDT.ftr', '2021-11-16 XLMUSDT.ftr', '2021-11-16 LINKUSDT.ftr', '2021-11-16 LTCUSDT.ftr', '2021-11-16 EOSUSDT.ftr', '2021-11-16 XRPUSDT.ftr', '2021-11-16 BCHUSDT.ftr', '2021-11-17 ETHUSDT.ftr', '2021-11-17 BTCUSDT.ftr', '2021-11-17 ETCUSDT.ftr', '2021-11-17 ADAUSDT.ftr', '2021-11-17 XLMUSDT.ftr', '2021-11-17 LINKUSDT.ftr', '2021-11-17 LTCUSDT.ftr', '2021-11-17 EOSUSDT.ftr', '2021-11-17 XRPUSDT.ftr', '2021-11-17 BCHUSDT.ftr']\n","2021-11-17 ETHUSDT.ftr saved !\n","2021-11-17 BTCUSDT.ftr saved !\n","2021-11-17 ETCUSDT.ftr saved !\n","2021-11-17 ADAUSDT.ftr saved !\n","2021-11-17 XLMUSDT.ftr saved !\n","2021-11-17 LINKUSDT.ftr saved !\n","2021-11-17 LTCUSDT.ftr saved !\n","2021-11-17 EOSUSDT.ftr saved !\n","2021-11-17 XRPUSDT.ftr saved !\n","2021-11-17 BCHUSDT.ftr saved !\n"]}]},{"cell_type":"markdown","metadata":{"id":"gta7LLcranqj"},"source":["#### check continuity"]},{"cell_type":"code","metadata":{"id":"v2CQWaiGZ9Cx"},"source":["\n","print(droped_new_res_df.columns)\n","print()\n","# break\n","\n","print(base_df.tail().iloc[:, 0])\n","print(droped_new_res_df.iloc[len(base_df) - 1:len(base_df) + 100, 0].head())\n","\n","\n","#     check deserialized ts_idex    #\n","ts_index = pd.Series(list(map(lambda x : datetime.timestamp(x), droped_new_res_df.index)))\n","\n","for i in range(1, len(ts_index)):\n","  if ts_index[i - 1] > ts_index[i]:\n","    print(ts_index[i - 1] , ts_index[i])\n","\n"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"ShvMpmWtC_Uv"},"source":["## modify colname"]},{"cell_type":"markdown","metadata":{"id":"yvrNFdxrnVjt"},"source":["### old (xlsx)"]},{"cell_type":"code","metadata":{"id":"3SvktSAzDDrk"},"source":["pd.set_option('display.max_seq_items', None)\n","\n","save_path = './candlestick_concated/res_df/'\n","\n","dict_name = \"2021-07-01 ETHUSDT_sarstoch_backi2_res_dfs.pkl\"\n","# new_dict_name = \"2021-07-01 ETHUSDT_bbline_backi2_res_dfs_colmod.pkl\"\n","\n","new_colname = ['open', 'high', 'low', 'close', 'volume', 'ST1_Up_3m', 'ST1_Down_3m',\n","       'ST1_Trend_3m', 'ST2_Up_3m', 'ST2_Down_3m', 'ST2_Trend_3m', 'ST3_Up_3m',\n","       'ST3_Down_3m', 'ST3_Trend_3m', 'min_upper_3m', 'max_lower_3m', 'middle_line_3m',\n","       'upper_middle_3m', 'lower_middle_3m', 'st_gap_3m', 'ST1_Up_30m', 'ST1_Down_30m',\n","       'ST1_Trend_30m', 'ST2_Up_30m', 'ST2_Down_30m', 'ST2_Trend_30m', 'ST3_Up_30m',\n","       'ST3_Down_30m', 'ST3_Trend_30m', 'min_upper_30m', 'max_lower_30m', 'middle_line_30m',\n","       'upper_middle_30m', 'lower_middle_30m', 'st_gap_30m', 'ST1_Up_4h', 'ST1_Down_4h',\n","       'ST1_Trend_4h', 'ST2_Up_4h', 'ST2_Down_4h', 'ST2_Trend_4h', 'ST3_Up_4h',\n","       'ST3_Down_4h', 'ST3_Trend_4h', 'min_upper_4h', 'max_lower_4h', 'middle_line_4h',\n","       'upper_middle_4h', 'lower_middle_4h', 'st_gap_4h', 'ST1_Up_1d', 'ST1_Down_1d',\n","       'ST1_Trend_1d', 'ST2_Up_1d', 'ST2_Down_1d', 'ST2_Trend_1d', 'ST3_Up_1d',\n","       'ST3_Down_1d', 'ST3_Trend_1d', 'min_upper_1d', 'max_lower_1d', 'middle_line_1d',\n","       'upper_middle_1d', 'lower_middle_1d', 'st_gap_1d', 'mmh_st1_1m', 'mmh_st2_1m',\n","       'norm_st_up_1m', 'norm_st_down_1m', 'norm_st_trend_1m', 'ST1_Up_5m', 'ST1_Down_5m',\n","       'ST1_Trend_5m', 'ST2_Up_5m', 'ST2_Down_5m', 'ST2_Trend_5m', 'ST3_Up_5m',\n","       'ST3_Down_5m', 'ST3_Trend_5m', 'min_upper_5m', 'max_lower_5m', 'middle_line_5m',\n","       'upper_middle_5m', 'lower_middle_5m', 'st_gap_5m',\n","       'bb_upper_1m', 'bb_lower_1m', 'bb_base_1m', 'bb_upper2_1m',\n","       'bb_upper3_1m', 'bb_lower2_1m', 'bb_lower3_1m', 'bb_upper_30m',\n","       'bb_lower_30m', 'bb_base_30m', 'bb_upper2_30m', 'bb_upper3_30m',\n","       'bb_lower2_30m', 'bb_lower3_30m']\n","\n","#     load with pickle    #\n","with open(save_path + dict_name, 'rb') as f:\n","  saved_res_df_dict = pickle.load(f)\n","\n","for key, res_df in saved_res_df_dict.items():\n","\n","  # if '_stline15_backi2' not in key:\n","  #   continue\n","\n","  # print(res_df.columns)\n","\n","  try:\n","\n","    #     rename whole cols   #\n","    # res_df.columns = new_colname\n","\n","    #     rename specific cols   #\n","    res_df.rename(columns={\"stoch5\" : \"stoch_30m\"}, inplace=True)\n","\n","\n","    #     drop cols   #\n","    # res_df.drop(['bb_upper', 'bb_lower'], axis=1, inplace=True)\n","    # break\n","\n","  except Exception as e:\n","    print(e)\n","\n","  \n","  # res_df_dict[key] = res_df\n","  saved_res_df_dict[key] = res_df\n","  print(key, \"modified & saved to dict !\")\n","\n","  #     save with pickle    #\n","  with open(save_path + dict_name, 'wb') as f:\n","    pickle.dump(saved_res_df_dict, f)\n","\n","# res_df.tail()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"0-wuP0cHSwvC"},"source":["# print(res_df.tail()) # 35215.568620 35182.644944\n","res_df.tail() # 35215.568620 35182.644944"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"JcKfLZ7QnYcK"},"source":["### feather ver."]},{"cell_type":"code","metadata":{"id":"qcltRDX8nZ4e"},"source":["pd.set_option('display.max_seq_items', None)\n","\n","save_path = './candlestick_concated/res_df/'\n","\n","dir_path = \"dc_backi2\"\n","concat_dir = \"concat\"\n","\n","#     load ftr list    #\n","ftr_list = [s for s in os.listdir(os.path.join(save_path, dir_path, concat_dir)) if \"ftr\" in s]\n","print(ftr_list)\n","\n","# dict_name = \"2021-07-01 ETHUSDT_sarstoch_backi2_res_dfs.pkl\"\n","\n","new_colname = ['open', 'high', 'low', 'close', 'volume', 'ST1_Up_3m', 'ST1_Down_3m',\n","       'ST1_Trend_3m', 'ST2_Up_3m', 'ST2_Down_3m', 'ST2_Trend_3m', 'ST3_Up_3m',\n","       'ST3_Down_3m', 'ST3_Trend_3m', 'min_upper_3m', 'max_lower_3m', 'middle_line_3m',\n","       'upper_middle_3m', 'lower_middle_3m', 'st_gap_3m', 'ST1_Up_30m', 'ST1_Down_30m',\n","       'ST1_Trend_30m', 'ST2_Up_30m', 'ST2_Down_30m', 'ST2_Trend_30m', 'ST3_Up_30m',\n","       'ST3_Down_30m', 'ST3_Trend_30m', 'min_upper_30m', 'max_lower_30m', 'middle_line_30m',\n","       'upper_middle_30m', 'lower_middle_30m', 'st_gap_30m', 'ST1_Up_4h', 'ST1_Down_4h',\n","       'ST1_Trend_4h', 'ST2_Up_4h', 'ST2_Down_4h', 'ST2_Trend_4h', 'ST3_Up_4h',\n","       'ST3_Down_4h', 'ST3_Trend_4h', 'min_upper_4h', 'max_lower_4h', 'middle_line_4h',\n","       'upper_middle_4h', 'lower_middle_4h', 'st_gap_4h', 'ST1_Up_1d', 'ST1_Down_1d',\n","       'ST1_Trend_1d', 'ST2_Up_1d', 'ST2_Down_1d', 'ST2_Trend_1d', 'ST3_Up_1d',\n","       'ST3_Down_1d', 'ST3_Trend_1d', 'min_upper_1d', 'max_lower_1d', 'middle_line_1d',\n","       'upper_middle_1d', 'lower_middle_1d', 'st_gap_1d', 'mmh_st1_1m', 'mmh_st2_1m',\n","       'norm_st_up_1m', 'norm_st_down_1m', 'norm_st_trend_1m', 'ST1_Up_5m', 'ST1_Down_5m',\n","       'ST1_Trend_5m', 'ST2_Up_5m', 'ST2_Down_5m', 'ST2_Trend_5m', 'ST3_Up_5m',\n","       'ST3_Down_5m', 'ST3_Trend_5m', 'min_upper_5m', 'max_lower_5m', 'middle_line_5m',\n","       'upper_middle_5m', 'lower_middle_5m', 'st_gap_5m',\n","       'bb_upper_1m', 'bb_lower_1m', 'bb_base_1m', 'bb_upper2_1m',\n","       'bb_upper3_1m', 'bb_lower2_1m', 'bb_lower3_1m', 'bb_upper_30m',\n","       'bb_lower_30m', 'bb_base_30m', 'bb_upper2_30m', 'bb_upper3_30m',\n","       'bb_lower2_30m', 'bb_lower3_30m']\n","\n","# #     load with pickle    #\n","# with open(save_path + dict_name, 'rb') as f:\n","#   saved_res_df_dict = pickle.load(f)\n","\n","for key in ftr_list:\n","\n","  res_df = pd.read_feather(os.path.join(save_path, dir_path, concat_dir, key), columns=None, use_threads=True).set_index(\"index\")\n","\n","  try:\n","\n","    #     rename whole cols   #\n","    # res_df.columns = new_colname\n","\n","    #     rename specific cols   #\n","    res_df.rename(columns={\"stoch5\" : \"stoch_30m\"}, inplace=True)\n","\n","\n","    #     drop cols   #\n","    # res_df.drop(['bb_upper', 'bb_lower'], axis=1, inplace=True)\n","    # break\n","\n","  except Exception as e:\n","    print(e)\n","\n","  \n","  res_df.reset_index().to_feather(os.path.join(save_path, dir_path, concat_dir, key), compression='lz4')\n","\n","  # res_df_dict[key] = res_df\n","  # saved_res_df_dict[key] = res_df\n","  print(key, \"modified & saved !\")\n","\n","  # #     save with pickle    #\n","  # with open(save_path + dict_name, 'wb') as f:\n","  #   pickle.dump(saved_res_df_dict, f)\n","\n","# res_df.tail()"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"qNGeuYuGDXfv"},"source":["# pr check with strategy"]},{"cell_type":"markdown","metadata":{"id":"6HOjnZjSgzk1"},"source":["## load ftr_list"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7FPBG5Qqg2jB","executionInfo":{"status":"ok","timestamp":1637666477939,"user_tz":-540,"elapsed":2332,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"bacf4e26-cd58-4985-ea80-da5e742efb54"},"source":["save_path = './candlestick_concated/res_df/'\n","\n","dir_path = \"bbdc3m_backi2\"\n","# dir_path = \"sar15m4h_backi2\"\n","\n","date = \"11-17\"\n","# date = \"07-01\"\n","\n","#     load ftr list    #\n","ftr_list = [s for s in os.listdir(os.path.join(save_path, dir_path, \"concat\")) if \"ftr\" in s if date in s]\n","print(ftr_list)"],"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["['2021-11-17 ETCUSDT.ftr', '2021-11-17 ADAUSDT.ftr', '2021-11-17 ETHUSDT.ftr', '2021-11-17 XLMUSDT.ftr', '2021-11-17 LINKUSDT.ftr', '2021-11-17 LTCUSDT.ftr', '2021-11-17 BTCUSDT.ftr', '2021-11-17 EOSUSDT.ftr', '2021-11-17 BCHUSDT.ftr', '2021-11-17 XRPUSDT.ftr']\n"]}]},{"cell_type":"markdown","metadata":{"id":"5duWn8t4BRyv"},"source":["## hvp platform"]},{"cell_type":"markdown","metadata":{"id":"wmnyUTS-yjF1"},"source":["##### config"]},{"cell_type":"code","metadata":{"id":"q_4E-zH02WJy","executionInfo":{"status":"ok","timestamp":1637673380265,"user_tz":-540,"elapsed":565,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}}},"source":["#     caution : MARKET / LIMIT spelling   #\n","#      json doesn't support single quotes     #\n","\n","param_dict = \\\n","{\n","  \"init_set\": {\n","    \"run\": 1,\n","    \"df_log\": 0,\n","    \"bar_close_second\": 59,\n","    \"realtime_term\": 0.01,\n","    \"last_index\": -2,\n","    \"limit_fee\": 0.0002,\n","    \"market_fee\": 0.0004,\n","    \"initial_asset\": 1000,\n","    \"asset_changed\" : 1,\n","    \"symbol\": \"ETHUSDT\",\n","    \"symbol_changed\": 0,\n","    \"interval_list\": [\n","      \"1m\",\n","      \"5m\",\n","      \"15m\"\n","    ],\n","    \"row_list\": [\n","      200,\n","      100,\n","      100\n","    ],\n","    \"api_retry_term\": 3,\n","    \"save_stacked_df\": 0,\n","    \"stacked_df_exist\": 1\n","  },\n","  \"loc_set\": {\n","    \"exp_itv\": \"5m\",\n","    \"tpg_itv\": \"5m\",\n","    \"outg_itv\": \"5m\",\n","    \"outg_dc_period\": \"None\",\n","    \"dtk_itv\": \"5m\",\n","    \"dtk_dc_itv\": \"None\",\n","    \"dt_k\": 0.49,\n","    \"dc_period\": 90,\n","    \"ei_k\": 0.36,\n","    \"use_dtk_line\": 0,\n","    \"spread\": 0.95,    \n","    \"spread_ep_gap\": 0.083,\n","    \"bbz_itv\": \"30m\",\n","    \"zone_dt_k\": 0.4,\n","    \"zone_dc_period\": 135\n","  },\n","  \"tr_set\": {\n","    \"ep_gap\": 0.083,\n","    \"tp_gap\": 0.36,\n","    \"out_gap\": -0.5,\n","    \"c_ep_gap\": 0.083,\n","    \"t_out_gap\": -0.5\n","  },\n","  \"ep_set\": {\n","    \"short_entry_score\": -2,\n","    \"dr_error\": 0.1,\n","    \"bbwp_thresh\": 0.5,\n","    \"entry_incycle\": 5,\n","    \"tf_entry\": 5,\n","    \"htf_entry\": 15,\n","    \"entry_type\": \"LIMIT\",\n","    \"static_ep\": 1,\n","    \"tpout_onexec\": 0,\n","    \"max_eplim_pct\": 0.05,\n","    \"min_eplim_pct\": 0.013,\n","    \"short_inversion\": 0,\n","    \"long_inversion\": 0,\n","    \"check_entry_sec\": 10,\n","    \"entry_execution_wait\": 60,\n","    \"breakout_qty_ratio\": 0.97,\n","    \"qty_check_term\": 30\n","  },\n","  \"out_set\": {\n","    \"out_type\": \"MARKET\",\n","    \"exit_execution_wait\": 60,\n","    \"close_complete_term\": 5,\n","    \"use_out\": 1,\n","    \"static_out\": 1,\n","    \"hl_out\": 1,\n","    \"price_restoration\": 0,\n","    \"retouch\": 0,\n","    \"retouch_out_period\": 500,\n","    \"second_out\": 0,\n","    \"approval_st_gap\": 1.5,\n","    \"second_out_gap\": 0.5\n","  },\n","  \"tp_set\": {\n","    \"non_tp\": 0,\n","    \"tp_type\": \"LIMIT\",\n","    \"static_tp\": 1,\n","    \"partial_num\": 1,\n","    \"partial_qty_divider\": 1.5\n","  },\n","  \"lvrg_set\": {\n","    \"leverage\": 2,\n","    \"static_lvrg\": 0,\n","    \"allow_float\": 0,\n","    \"target_pct\": 0.1,\n","    \"lvrg_rejection\": 0\n","  }\n","}\n","\n","config = EasyDict(param_dict)\n","# param_json = json.dumps(param_dict, indent=2)"],"execution_count":38,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"rrIGjmUzqU-D"},"source":["##### sync_funcs"]},{"cell_type":"code","metadata":{"id":"nzOYWA2kqZ0d","executionInfo":{"status":"ok","timestamp":1637671302648,"user_tz":-540,"elapsed":1786,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}}},"source":["\n","class OrderSide:\n","    BUY = \"BUY\"\n","    SELL = \"SELL\"\n","    INVALID = None\n","\n","\n","def enlist_rtc(res_df, config):\n","\n","    res_df = bb_level(res_df, '5m', 1)\n","    res_df = dc_level(res_df, '5m', 1)\n","    res_df = bb_level(res_df, '15m', 1)\n","    res_df = dc_level(res_df, '15m', 1)\n","    res_df = bb_level(res_df, '30m', 1)\n","    res_df = dc_level(res_df, '30m', 1)\n","\n","    res_df['short_rtc_1'] = res_df['bb_lower_%s' % config.loc_set.tpg_itv]\n","    res_df['short_rtc_0'] = res_df['dc_upper_%s' % config.loc_set.outg_itv]\n","    res_df['short_rtc_gap'] = res_df['short_rtc_0'] - res_df['short_rtc_1']\n","\n","    res_df['h_short_rtc_1'] = res_df['bb_lower_%s' % config.loc_set.tpg_itv]\n","    res_df['h_short_rtc_0'] = res_df['dc_upper_%s' % config.loc_set.tpg_itv]\n","    res_df['h_short_rtc_gap'] = res_df['h_short_rtc_0'] - res_df['h_short_rtc_1']\n","\n","    res_df['long_rtc_1'] = res_df['bb_upper_%s' % config.loc_set.tpg_itv]\n","    res_df['long_rtc_0'] = res_df['dc_lower_%s' % config.loc_set.outg_itv]\n","    res_df['long_rtc_gap'] = res_df['long_rtc_1'] - res_df['long_rtc_0']\n","\n","    res_df['h_long_rtc_1'] = res_df['bb_upper_%s' % config.loc_set.tpg_itv]\n","    res_df['h_long_rtc_0'] = res_df['dc_lower_%s' % config.loc_set.tpg_itv]\n","    res_df['h_long_rtc_gap'] = res_df['h_long_rtc_1'] - res_df['h_long_rtc_0']\n","\n","    res_df['short_dtk_1'] = res_df['bb_lower_%s' % config.loc_set.dtk_itv]\n","    res_df['short_dtk_0'] = res_df['dc_upper_%s' % config.loc_set.dtk_itv]\n","    res_df['short_dtk_gap'] = res_df['short_dtk_0'] - res_df['short_dtk_1']\n","\n","    res_df['long_dtk_1'] = res_df['bb_upper_%s' % config.loc_set.dtk_itv]\n","    res_df['long_dtk_0'] = res_df['dc_lower_%s' % config.loc_set.dtk_itv]\n","    res_df['long_dtk_gap'] = res_df['long_dtk_1'] - res_df['long_dtk_0']\n","\n","    res_df = dtk_plot(res_df, dtk_itv2='15m', hhtf_entry=15, use_dtk_line=config.loc_set.use_dtk_line)\n","\n","    return res_df\n","\n","\n","\n","def enlist_tr(res_df, config, np_timeidx):\n","\n","\n","    res_df['entry'] = np.zeros(len(res_df))\n","    res_df['h_entry'] = np.zeros(len(res_df))\n","\n","    # -------- set ep level -------- #\n","\n","    #       limit ver.     #\n","    #        bb ep         #\n","    res_df['short_ep'] = res_df['h_short_rtc_1'] + res_df['h_short_rtc_gap'] * config.tr_set.ep_gap\n","    res_df['long_ep'] = res_df['h_long_rtc_1'] - res_df['h_long_rtc_gap'] * config.tr_set.ep_gap\n","\n","    if config.tr_set.c_ep_gap != \"None\":\n","        res_df['short_ep_org'] = res_df['short_ep'].copy()\n","        res_df['long_ep_org'] = res_df['long_ep'].copy()\n","\n","        res_df['short_ep2'] = res_df['h_short_rtc_1'] + res_df['h_short_rtc_gap'] * config.tr_set.c_ep_gap\n","        res_df['long_ep2'] = res_df['h_long_rtc_1'] - res_df['h_long_rtc_gap'] * config.tr_set.c_ep_gap\n","\n","    res_df['short_tr_ep'] = res_df['h_short_rtc_1'] + res_df['h_short_rtc_gap'] * config.loc_set.spread_ep_gap\n","    res_df['long_tr_ep'] = res_df['h_long_rtc_1'] - res_df['h_long_rtc_gap'] * config.loc_set.spread_ep_gap\n","\n","    #       market ver.     #\n","    if config.ep_set.entry_type == \"MARKET\":\n","        res_df['short_ep'] = res_df['close']\n","        res_df['long_ep'] = res_df['close']\n","\n","    # ---------------------------------------- short = -1 ---------------------------------------- #\n","    # ---------------- ep_time  ---------------- #\n","    #        bb level entry      #\n","    # res_df['entry'] = np.where((res_df['close'].shift(config.ep_set.tf_entry * 1) >= res_df['bb_lower_%s' % config.loc_set.exp_itv]) &\n","    res_df['entry'] = np.where((res_df['open'] >= res_df['bb_lower_%s' % config.loc_set.exp_itv]) &\n","                               # (res_df['close'].shift(config.ep_set.tf_entry * 1) >= res_df['bb_lower_%s' % config.loc_set.exp_itv]) &\n","                               (res_df['close'] < res_df['bb_lower_%s' % config.loc_set.exp_itv])\n","                               , res_df['entry'] - 1, res_df['entry'])\n","\n","    res_df['entry'] = np.where((res_df['entry'] < 0) &\n","                               (np_timeidx % config.ep_set.tf_entry == (config.ep_set.tf_entry - 1))\n","                               , res_df['entry'] - 1, res_df['entry'])\n","\n","    # res_df['entry'] = np.where((res_df['open'] >= res_df['cloud_bline_%s' % cb_itv]) &\n","    #                 # (res_df['close'].shift(config.ep_set.tf_entry * 1) <= res_df['cloud_bline_%s' % cb_itv]) &\n","    #                 (res_df['close'] < res_df['cloud_bline_%s' % cb_itv])\n","    #                 , res_df['entry'] - 1, res_df['entry'])\n","\n","    # res_df['entry'] = np.where((res_df['open'] >= res_df['bb_lower_1m']) &\n","    #                 # (res_df['close'].shift(config.ep_set.tf_entry * 1) <= res_df['bb_lower_1m']) &\n","    #                 (res_df['close'] < res_df['bb_lower_1m'])\n","    #                 , res_df['entry'] - 1, res_df['entry'])\n","\n","    res_df['h_entry'] = np.where(  # (res_df['open'] >= res_df['bb_lower_%s' % config.loc_set.dtk_itv]) &\n","        (res_df['close'].shift(config.ep_set.htf_entry * 1) >= res_df['bb_lower_%s' % config.loc_set.dtk_itv]) &\n","        (res_df['close'] < res_df['bb_lower_%s' % config.loc_set.dtk_itv]) &\n","        (np_timeidx % config.ep_set.htf_entry == (config.ep_set.htf_entry - 1))\n","        , res_df['h_entry'] - 1, res_df['h_entry'])\n","\n","    # ---------------------------------------- long = 1 ---------------------------------------- #\n","    # ---------------------- ep_time ---------------------- #\n","\n","    #      bb level entry      #\n","    # res_df['entry'] = np.where((res_df['close'].shift(config.ep_set.tf_entry * 1) <= res_df['bb_upper_%s' % config.loc_set.exp_itv]) &\n","    res_df['entry'] = np.where((res_df['open'] <= res_df['bb_upper_%s' % config.loc_set.exp_itv]) &\n","                               # (res_df['close'].shift(config.ep_set.tf_entry * 1) <= res_df['bb_upper_%s' % config.loc_set.exp_itv]) &\n","                               (res_df['close'] > res_df['bb_upper_%s' % config.loc_set.exp_itv])\n","                               , res_df['entry'] + 1, res_df['entry'])\n","\n","    res_df['entry'] = np.where((res_df['entry'] > 0) &\n","                               (np_timeidx % config.ep_set.tf_entry == (config.ep_set.tf_entry - 1))\n","                               , res_df['entry'] + 1, res_df['entry'])\n","\n","    # res_df['entry'] = np.where((res_df['open'] <= res_df['cloud_bline_%s' % cb_itv]) &\n","    #                   # (res_df['close'].shift(config.ep_set.tf_entry * 1) >= res_df['cloud_bline_%s' % cb_itv]) &\n","    #                   (res_df['close'] > res_df['cloud_bline_%s' % cb_itv])\n","    #                 , res_df['entry'] + 1, res_df['entry'])\n","\n","    # res_df['entry'] = np.where((res_df['open'] <= res_df['bb_upper_1m']) &\n","    #                   # (res_df['close'].shift(config.ep_set.tf_entry * 1) >= res_df['bb_upper_1m']) &\n","    #                   (res_df['close'] > res_df['bb_upper_1m'])\n","    #                 , res_df['entry'] + 1, res_df['entry'])\n","\n","    res_df['h_entry'] = np.where(  # (res_df['open'] <= res_df['bb_upper_%s' % config.loc_set.dtk_itv]) &\n","        (res_df['close'].shift(config.ep_set.htf_entry * 1) <= res_df['bb_upper_%s' % config.loc_set.dtk_itv]) &\n","        (res_df['close'] > res_df['bb_upper_%s' % config.loc_set.dtk_itv]) &\n","        (np_timeidx % config.ep_set.htf_entry == (config.ep_set.htf_entry - 1))\n","        , res_df['h_entry'] + 1, res_df['h_entry'])\n","\n","    # ------------------------------ rtc tp & out ------------------------------ #\n","    # --------------- bb rtc out --------------- #\n","\n","    if config.loc_set.outg_dc_period != \"None\":\n","        res_df['short_rtc_0'] = res_df['high'].rolling(config.loc_set.outg_dc_period).max()\n","        res_df['long_rtc_0'] = res_df['low'].rolling(config.loc_set.outg_dc_period).min()\n","\n","    res_df['short_out'] = res_df['short_rtc_0'] + res_df['short_rtc_gap'] * config.tr_set.out_gap\n","    res_df['long_out'] = res_df['long_rtc_0'] - res_df['long_rtc_gap'] * config.tr_set.out_gap\n","\n","    if config.tr_set.t_out_gap != \"None\":\n","        res_df['short_out_org'] = res_df['short_out'].copy()\n","        res_df['long_out_org'] = res_df['long_out'].copy()\n","\n","        res_df['short_out2'] = res_df['short_rtc_0'] + res_df['short_rtc_gap'] * config.tr_set.t_out_gap\n","        res_df['long_out2'] = res_df['long_rtc_0'] - res_df['long_rtc_gap'] * config.tr_set.t_out_gap\n","\n","    # ------------------------------ tp ------------------------------ #\n","    # --------------- bb rtc tp --------------- #\n","    res_df['short_tp'] = res_df['h_short_rtc_1'] - res_df['h_short_rtc_gap'] * config.tr_set.tp_gap\n","    res_df['long_tp'] = res_df['h_long_rtc_1'] + res_df['h_long_rtc_gap'] * config.tr_set.tp_gap\n","\n","    # --------------- set tp_line / dtk_line --------------- #\n","    # res_df['short_tp_1'] = np.where(res_df['h_entry'] == -1, res_df['short_rtc_1'], np.nan)\n","    # res_df['short_tp_1'] = ffill(res_df['short_tp_1'].values.reshape(1, -1)).reshape(-1, 1)\n","    # res_df['short_tp_gap'] = np.where(res_df['h_entry'] == -1, res_df['h_short_rtc_gap'], np.nan)  # ltf_gap 은 out 을 위한 gap 임\n","    # res_df['short_tp_gap'] = ffill(res_df['short_tp_gap'].values.reshape(1, -1)).reshape(-1, 1)\n","\n","    # res_df['long_tp_1'] = np.where(res_df['h_entry'] == 1, res_df['long_rtc_1'], np.nan)\n","    # res_df['long_tp_1'] = ffill(res_df['long_tp_1'].values.reshape(1, -1)).reshape(-1, 1)\n","    # res_df['long_tp_gap'] = np.where(res_df['h_entry'] == 1, res_df['h_long_rtc_gap'], np.nan)\n","    # res_df['long_tp_gap'] = ffill(res_df['long_tp_gap'].values.reshape(1, -1)).reshape(-1, 1)\n","\n","    # res_df['h_short_tp_1'] = np.where(res_df['h_entry'] == -1, res_df['h_short_rtc_1'], np.nan)\n","    # res_df['h_short_tp_1'] = ffill(res_df['h_short_tp_1'].values.reshape(1, -1)).reshape(-1, 1)\n","    # res_df['h_short_tp_gap'] = np.where(res_df['h_entry'] == -1, res_df['h_short_rtc_gap'], np.nan)\n","    # res_df['h_short_tp_gap'] = ffill(res_df['h_short_tp_gap'].values.reshape(1, -1)).reshape(-1, 1)\n","\n","    # res_df['h_long_tp_1'] = np.where(res_df['h_entry'] == 1, res_df['h_long_rtc_1'], np.nan)\n","    # res_df['h_long_tp_1'] = ffill(res_df['h_long_tp_1'].values.reshape(1, -1)).reshape(-1, 1)\n","    # res_df['h_long_tp_gap'] = np.where(res_df['h_entry'] == 1, res_df['h_long_rtc_gap'], np.nan)\n","    # res_df['h_long_tp_gap'] = ffill(res_df['h_long_tp_gap'].values.reshape(1, -1)).reshape(-1, 1)\n","\n","    if config.loc_set.use_dtk_line:\n","        res_df['short_dtk_1'] = np.where(res_df['h_entry'] == -1, res_df['short_dtk_1'], np.nan)\n","        res_df['short_dtk_1'] = ffill(res_df['short_dtk_1'].values.reshape(1, -1)).reshape(-1, 1)\n","        res_df['short_dtk_gap'] = np.where(res_df['h_entry'] == -1, res_df['short_dtk_gap'], np.nan)\n","        res_df['short_dtk_gap'] = ffill(res_df['short_dtk_gap'].values.reshape(1, -1)).reshape(-1, 1)\n","\n","        res_df['long_dtk_1'] = np.where(res_df['h_entry'] == 1, res_df['long_dtk_1'], np.nan)\n","        res_df['long_dtk_1'] = ffill(res_df['long_dtk_1'].values.reshape(1, -1)).reshape(-1, 1)\n","        res_df['long_dtk_gap'] = np.where(res_df['h_entry'] == 1, res_df['long_dtk_gap'], np.nan)\n","        res_df['long_dtk_gap'] = ffill(res_df['long_dtk_gap'].values.reshape(1, -1)).reshape(-1, 1)\n","\n","    res_df['dc_upper_v2'] = res_df['high'].rolling(config.loc_set.dc_period).max()\n","    res_df['dc_lower_v2'] = res_df['low'].rolling(config.loc_set.dc_period).min()\n","    \n","    res_df['zone_dc_upper_v2'] = res_df['high'].rolling(config.loc_set.zone_dc_period).max()\n","    res_df['zone_dc_lower_v2'] = res_df['low'].rolling(config.loc_set.zone_dc_period).min()\n","\n","    return res_df\n","\n","\n","\n","def short_ep_loc(res_df, config, i):\n","\n","    # ------- param init ------- #\n","    open_side = None\n","\n","    mr_const_cnt = 0\n","    mr_score = 0\n","    zone = 'n'\n","\n","\n","    if config.ep_set.entry_type == 'MARKET':\n","        if config.tp_set.tp_type == 'LIMIT':\n","            tp_fee = config.init_set.market_fee + config.init_set.limit_fee\n","        else:\n","            tp_fee = config.init_set.market_fee + config.init_set.market_fee\n","        out_fee = config.init_set.market_fee + config.init_set.market_fee\n","    else:\n","        if config.tp_set.tp_type == 'LIMIT':\n","            tp_fee = config.init_set.limit_fee + config.init_set.limit_fee\n","        else:\n","            tp_fee = config.init_set.limit_fee + config.init_set.market_fee\n","        out_fee = config.init_set.limit_fee + config.init_set.market_fee\n","\n","\n","    # -------------- tr scheduling -------------- #\n","    if config.loc_set.spread != \"None\":\n","        mr_const_cnt += 1\n","\n","        if config.loc_set.spread_ep_gap != \"None\":\n","            if (res_df['short_tr_ep'].iloc[i] - res_df['short_tp'].iloc[i] - tp_fee * res_df['short_tr_ep'].iloc[\n","                i]) / (res_df['short_out'].iloc[i] - res_df['short_tr_ep'].iloc[i] + out_fee *\n","                       res_df['short_tr_ep'].iloc[i]) >= config.loc_set.spread:\n","                      #  res_df['short_tr_ep'].iloc[i]) <= config.loc_set.spread:\n","                mr_score += 1\n","\n","        else:\n","            if (res_df['short_ep'].iloc[i] - res_df['short_tp'].iloc[i] - tp_fee * res_df['short_ep'].iloc[i]) / (\n","                    res_df['short_out'].iloc[i] - res_df['short_ep'].iloc[i] + out_fee * res_df['short_ep'].iloc[\n","                i]) >= config.loc_set.spread:\n","                # if (res_df['short_ep'].iloc[i] - res_df['short_tp'].iloc[i] - tp_fee * res_df['short_ep'].iloc[i]) / (res_df['short_out'].iloc[i] - res_df['short_ep'].iloc[i] + tp_fee * res_df['short_ep'].iloc[i]) >= config.loc_set.spread:\n","                # if (res_df['short_ep'].iloc[i] - res_df['short_tp'].iloc[i] - tp_fee * res_df['short_ep'].iloc[i]) / (res_df['short_out'].iloc[i] - res_df['short_ep'].iloc[i] + out_fee * res_df['short_ep'].iloc[i]) == config.loc_set.spread:\n","                # if (res_df['short_ep'].iloc[i] - res_df['short_tp'].iloc[i] - out_fee * res_df['short_ep'].iloc[i]) / (res_df['short_out'].iloc[i] - res_df['short_ep'].iloc[i] + out_fee * res_df['short_ep'].iloc[i]) >= config.loc_set.spread:\n","                mr_score += 1\n","\n","    # -------------- dtk -------------- #\n","    if config.loc_set.dt_k != \"None\":\n","        mr_const_cnt += 1\n","        # if res_df['dc_lower_%s' % config.loc_set.dtk_dc_itv].iloc[i] >= res_df['short_rtc_1'].iloc[i] - res_df['h_short_rtc_gap'].iloc[i] * config.loc_set.dt_k:\n","        #     dtk_v1 & v2 platform     #\n","        if config.loc_set.dtk_dc_itv != \"None\":\n","            if res_df['dc_lower_%s' % config.loc_set.dtk_dc_itv].iloc[i] >= res_df['short_dtk_1'].iloc[i] - \\\n","                    res_df['short_dtk_gap'].iloc[i] * config.loc_set.dt_k:\n","                mr_score += 1\n","\n","                #     dc_v2   #\n","        else:\n","            if res_df['dc_lower_v2'].iloc[i] >= res_df['short_dtk_1'].iloc[i] - res_df['short_dtk_gap'].iloc[   # org\n","            # if res_df['dc_lower_v2'].iloc[i] <= res_df['short_dtk_1'].iloc[i] - res_df['short_dtk_gap'].iloc[\n","                i] * config.loc_set.dt_k:\n","                # if res_df['dc_lower_v2'].iloc[i] >= res_df['short_dtk_1'].iloc[i] - res_df['short_dtk_gap'].iloc[i] * config.loc_set.dt_k and \\\n","                # res_df['dc_upper_v2'].iloc[i] <= res_df['long_dtk_1'].iloc[i] + res_df['long_dtk_gap'].iloc[i] * config.loc_set.dt_k:\n","\n","                mr_score += 1\n","\n","    # -------------- zone rejection  -------------- #\n","    if config.loc_set.bbz_itv != \"None\":\n","      mr_const_cnt += 1\n","\n","        #       by bb       # \n","      # if res_df['close'].iloc[i] < res_df['bb_lower_%s' % config.loc_set.bbz_itv].iloc[i]:   \n","      if res_df['close'].iloc[i] > res_df['bb_lower_%s' % config.loc_set.bbz_itv].iloc[i]:  # inv\n","      # if res_df['close'].iloc[i] > res_df['bb_upper_%s' % config.loc_set.bbz_itv].iloc[i]:    \n","      # if res_df['close'].iloc[i] > res_df['bb_lower2_%s' % config.loc_set.bbz_itv].iloc[i]:\n","\n","        #       by zone_dtk       #\n","      # if res_df['zone_dc_upper_v2'].iloc[i] > res_df['long_dtk_plot_1'].iloc[i] + res_df['long_dtk_plot_gap'].iloc[\n","      # if res_df['zone_dc_upper_v2'].iloc[i] < res_df['long_dtk_plot_1'].iloc[i] + res_df['long_dtk_plot_gap'].iloc[\n","      #     i] * config.loc_set.zone_dt_k:\n","\n","        mr_score += 1\n","\n","\n","    # -------------- zoning -------------- #\n","    if config.tr_set.c_ep_gap != \"None\":\n","\n","        #       by bb       # \n","        # if res_df['close'].iloc[i] > res_df['bb_lower_%s' % config.loc_set.bbz_itv].iloc[i]:\n","\n","        #       by zone_dtk       #\n","\n","          #         c_zone        #\n","        if res_df['zone_dc_upper_v2'].iloc[i] > res_df['long_dtk_plot_1'].iloc[i] + res_df['long_dtk_plot_gap'].iloc[\n","            i] * config.loc_set.zone_dt_k:\n","\n","            if config.ep_set.static_ep:\n","              res_df['short_ep'].iloc[i] = res_df['short_ep2'].iloc[i]\n","            else:\n","              res_df['short_ep'] = res_df['short_ep2']\n","              \n","            if config.out_set.static_out:\n","              res_df['short_out'].iloc[i] = res_df['short_out_org'].iloc[i]\n","            else:\n","              res_df['short_out'] = res_df['short_out_org']\n","\n","            zone = 'c'\n","\n","          #         t_zone        #\n","        else:\n","            if config.ep_set.static_ep:\n","              res_df['short_ep'].iloc[i] = res_df['short_ep_org'].iloc[i]\n","            else:\n","              res_df['short_ep'] = res_df['short_ep_org']\n","\n","            if config.out_set.static_out:\n","              res_df['short_out'].iloc[i] = res_df['short_out2'].iloc[i]\n","            else:\n","              res_df['short_out'] = res_df['short_out2']\n","\n","            zone = 't'\n","\n","    if mr_const_cnt == mr_score:\n","        open_side = OrderSide.SELL\n","\n","    return res_df, open_side, zone\n","\n","\n","\n","def long_ep_loc(res_df, config, i):\n","\n","    # ------- param init ------- #\n","    open_side = None\n","\n","    mr_const_cnt = 0\n","    mr_score = 0\n","    zone = 'n'\n","\n","\n","    if config.ep_set.entry_type == 'MARKET':\n","        if config.tp_set.tp_type == 'LIMIT':\n","            tp_fee = config.init_set.market_fee + config.init_set.limit_fee\n","        else:\n","            tp_fee = config.init_set.market_fee + config.init_set.market_fee\n","        out_fee = config.init_set.market_fee + config.init_set.market_fee\n","    else:\n","        if config.tp_set.tp_type == 'LIMIT':\n","            tp_fee = config.init_set.limit_fee + config.init_set.limit_fee\n","        else:\n","            tp_fee = config.init_set.limit_fee + config.init_set.market_fee\n","        out_fee = config.init_set.limit_fee + config.init_set.market_fee\n","\n","\n","    # -------------- tr scheduling -------------- #       \n","    if config.loc_set.spread != \"None\":   \n","\n","      mr_const_cnt += 1\n","      if config.loc_set.spread_ep_gap != \"None\":\n","        if (res_df['long_tp'].iloc[i] - res_df['long_tr_ep'].iloc[i] - tp_fee * res_df['long_tr_ep'].iloc[\n","          i]) / (res_df['long_tr_ep'].iloc[i] - res_df['long_out'].iloc[i] + out_fee * \n","                 res_df['long_tr_ep'].iloc[i]) >= config.loc_set.spread:\n","                #  res_df['long_tr_ep'].iloc[i]) <= config.loc_set.spread:\n","          mr_score += 1\n","\n","      else:\n","        if (res_df['long_tp'].iloc[i] - res_df['long_ep'].iloc[i] - tp_fee * \n","            res_df['long_ep'].iloc[i]) / (res_df['long_ep'].iloc[i] - res_df['long_out'].iloc[i] + out_fee * \n","                                          res_df['long_ep'].iloc[i]) >= config.loc_set.spread:\n","      # if (res_df['long_tp'].iloc[i] - res_df['long_ep'].iloc[i] - tp_fee * res_df['long_ep'].iloc[i]) / (res_df['long_ep'].iloc[i] - res_df['long_out'].iloc[i] + tp_fee * res_df['long_ep'].iloc[i]) >= config.loc_set.spread:\n","      # if (res_df['long_tp'].iloc[i] - res_df['long_ep'].iloc[i] - tp_fee * res_df['long_ep'].iloc[i]) / (res_df['long_ep'].iloc[i] - res_df['long_out'].iloc[i] + out_fee * res_df['long_ep'].iloc[i]) == config.loc_set.spread:\n","      # if (res_df['long_tp'].iloc[i] - res_df['long_ep'].iloc[i] - out_fee * res_df['long_ep'].iloc[i]) / (res_df['long_ep'].iloc[i] - res_df['long_out'].iloc[i] + out_fee * res_df['long_ep'].iloc[i]) >= config.loc_set.spread:\n","          mr_score += 1\n","    \n","\n","    # -------------- dtk -------------- #\n","    if config.loc_set.dt_k != \"None\":  \n","\n","      mr_const_cnt += 1\n","      # if res_df['dc_upper_%s' % config.loc_set.dtk_dc_itv].iloc[i] <= res_df['long_rtc_1'].iloc[i] + res_df['long_rtc_gap'].iloc[i] * config.loc_set.dt_k:          \n","          #     dtk_v1 & v2 platform    #\n","      if config.loc_set.dtk_dc_itv != \"None\":\n","        if res_df['dc_upper_%s' % config.loc_set.dtk_dc_itv].iloc[i] <= res_df['long_dtk_1'].iloc[i] + res_df['long_dtk_gap'].iloc[i] * config.loc_set.dt_k:  \n","          mr_score += 1  \n","\n","      else:\n","          #     dc_v2     #\n","        if res_df['dc_upper_v2'].iloc[i] <= res_df['long_dtk_1'].iloc[i] + res_df['long_dtk_gap'].iloc[i] * config.loc_set.dt_k:  # org\n","        # if res_df['dc_upper_v2'].iloc[i] >= res_df['long_dtk_1'].iloc[i] + res_df['long_dtk_gap'].iloc[i] * config.loc_set.dt_k:\n","\n","        # if res_df['dc_upper_v2'].iloc[i] <= res_df['long_dtk_1'].iloc[i] + res_df['long_dtk_gap'].iloc[i] * config.loc_set.dt_k and \\\n","        #   res_df['dc_lower_v2'].iloc[i] >= res_df['short_dtk_1'].iloc[i] - res_df['short_dtk_gap'].iloc[i] * config.loc_set.dt_k:\n","\n","          mr_score += 1  \n","\n","    \n","    # -------------- zone rejection  -------------- #\n","    if config.loc_set.bbz_itv != \"None\":\n","      mr_const_cnt += 1\n","\n","        #       by bb       #       \n","      # if res_df['close'].iloc[i] > res_df['bb_upper_%s' % config.loc_set.bbz_itv].iloc[i]:\n","      if res_df['close'].iloc[i] < res_df['bb_upper_%s' % config.loc_set.bbz_itv].iloc[i]:  # inv\n","      # if res_df['close'].iloc[i] < res_df['bb_lower_%s' % config.loc_set.bbz_itv].iloc[i]:\n","      # if res_df['close'].iloc[i] < res_df['bb_upper2_%s' % config.loc_set.bbz_itv].iloc[i]:\n","\n","        #       by zone_dtk       #\n","      # if res_df['zone_dc_lower_v2'].iloc[i] < res_df['short_dtk_plot_1'].iloc[i] - res_df['short_dtk_plot_gap'].iloc[i] * config.loc_set.zone_dt_k:\n","      # if res_df['zone_dc_lower_v2'].iloc[i] > res_df['short_dtk_plot_1'].iloc[i] - res_df['short_dtk_plot_gap'].iloc[i] * config.loc_set.zone_dt_k:\n","      \n","        mr_score += 1                   \n","\n","\n","    # -------------- zoning -------------- #\n","    if config.tr_set.c_ep_gap != \"None\":\n","        #       by bb       # \n","      # if res_df['close'].iloc[i] < res_df['bb_upper_%s' % config.loc_set.bbz_itv].iloc[i]:\n","\n","        #       by zone_dtk       #\n","\n","          #         c_zone        #\n","      if res_df['zone_dc_lower_v2'].iloc[i] < res_df['short_dtk_plot_1'].iloc[i] - res_df['short_dtk_plot_gap'].iloc[i] * config.loc_set.zone_dt_k:\n","        \n","        if config.ep_set.static_ep:\n","          res_df['long_ep'].iloc[i] = res_df['long_ep2'].iloc[i]\n","        else:\n","          res_df['long_ep'] = res_df['long_ep2']\n","          \n","        if config.out_set.static_out:\n","          res_df['long_out'].iloc[i] = res_df['long_out_org'].iloc[i]\n","        else:\n","          res_df['long_out'] = res_df['long_out_org']\n","\n","        zone = 'c'\n","\n","        # mr_const_cnt += 1\n","        # dc_lb_period = 100\n","        # if np.sum((res_df['dc_upper_15m'] > res_df['dc_upper_15m'].shift(15)).iloc[i - dc_lb_period:i]) == 0:\n","        #   mr_score += 1\n","        \n","\n","          #         t_zone        #\n","      else:\n","\n","        if config.ep_set.static_ep:\n","          res_df['long_ep'].iloc[i] = res_df['long_ep_org'].iloc[i]\n","        else:\n","          res_df['long_ep'] = res_df['long_ep_org']\n","\n","        if config.out_set.static_out:\n","          res_df['long_out'].iloc[i] = res_df['long_out2'].iloc[i]\n","        else:\n","          res_df['long_out'] = res_df['long_out2']\n","\n","        zone = 't'\n","\n","\n","    if mr_const_cnt == mr_score:\n","        open_side = OrderSide.BUY\n","\n","    return res_df, open_side, zone"],"execution_count":29,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"rLI8unIyroiC"},"source":["##### run"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000,"output_embedded_package_id":"1fNQNvWorhRj4go6DZJb_Zyoit_8uEljc"},"id":"TdAn2bHHBWMF","executionInfo":{"status":"ok","timestamp":1637674078862,"user_tz":-540,"elapsed":541524,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"d3201c4a-0903-4d93-b501-291f75bf8d36"},"source":["# ------- tp / out fee calc ------- #\n","if config.ep_set.entry_type == 'MARKET':\n","  if config.tp_set.tp_type == 'LIMIT':\n","    tp_fee = config.init_set.market_fee + config.init_set.limit_fee\n","  else:\n","    tp_fee = config.init_set.market_fee + config.init_set.market_fee\n","  out_fee = config.init_set.market_fee + config.init_set.market_fee\n","else:\n","  if config.tp_set.tp_type == 'LIMIT':\n","    tp_fee = config.init_set.limit_fee + config.init_set.limit_fee\n","  else:\n","    tp_fee = config.init_set.limit_fee + config.init_set.market_fee\n","  out_fee = config.init_set.limit_fee + config.init_set.market_fee\n","  \n","\n","# ------- inversion set ------- #\n","inversion = 0\n","fdist_thresh = 1\n","\n","show_plot = 1\n","title_position = (0.30, 1)\n","\n","for key in ftr_list:\n","\n","  if config.init_set.symbol in key:\n","    pass\n","  else:\n","    continue\n","\n","  # break\n","\n","  res_df = pd.read_feather(os.path.join(save_path, dir_path, \"concat\", key), columns=None, use_threads=True).set_index(\"index\")#.loc[pd.to_datetime(\"2021-07-10 04:59:59.999000\"):]\n","  print(key, \"loaded !\")\n","  \n","  # print(\"res_df.columns :\", res_df.columns)  \n","  # print(res_df.tail(100))\n","  # print(\"res_df.index[0] :\", res_df.index[0])\n","  # # print(\"intmin(res_df.index[0]) :\", intmin(res_df.index[0]))\n","  # break\n","\n","  # -------------------- additional indi. -------------------- #    \n","  np_timeidx = np.array(list(map(lambda x : intmin(x), res_df.index)))\n","  \n","  res_df = enlist_rtc(res_df, config)\n","\n","  itv_num_list = [1, 3, 5, 15]\n","\n","  # itv_list = ['15m', '30m', '1h', '4h']\n","  itv_list = ['3m', '5m', '15m', '30m', '1h', '4h']\n","\n","  x_val_list = np.arange(0.083, 0.0, -0.002)\n","\n","  y_val_cols = [\"wr\", \"frq\", \"min_pr\", \"acc_pr\", \"sum_pr\", \"liqd\", \"tr\", \"dr\"]\n","  y_rev_val_cols = [\"wr\", \"min_pr\", \"acc_pr\", \"sum_pr\"]\n","\n","  survey_df = pd.DataFrame(index=x_val_list, columns=y_val_cols)\n","  short_survey_df = pd.DataFrame(index=x_val_list, columns=y_val_cols)\n","  long_survey_df = pd.DataFrame(index=x_val_list, columns=y_val_cols)\n","  rev_survey_df = pd.DataFrame(index=x_val_list, columns=y_rev_val_cols)\n","  rev_short_survey_df = pd.DataFrame(index=x_val_list, columns=y_rev_val_cols)\n","  rev_long_survey_df = pd.DataFrame(index=x_val_list, columns=y_rev_val_cols)\n","\n","  # for survey_i, just_loop in enumerate(range(1)):\n","  # for survey_i, config.loc_set.dt_k in enumerate(x_val_list):\n","  # for survey_i, config.loc_set.dc_period in enumerate(x_val_list):\n","  # for survey_i, config.loc_set.ei_k in enumerate(x_val_list):    \n","  # for survey_i, config.loc_set.spread in enumerate(x_val_list): \n","  # for survey_i, config.loc_set.bbz_itv in enumerate(itv_list):\n","  # for survey_i, config.loc_set.open_shift in enumerate(x_val_list):\n","  for survey_i, config.tr_set.ep_gap in enumerate(x_val_list): \n","  # for survey_i, config.tr_set.out_gap in enumerate(x_val_list): \n","  # for survey_i, config.tr_set.tp_gap in enumerate(x_val_list): \n","  # for survey_i, config.ep_set.tf_entry in enumerate(x_val_list):\n","  # for survey_i, config.ep_set.dr_error in enumerate(x_val_list): \n","  # for survey_i, config.lvrg_set.leverage in enumerate(x_val_list):\n","  # for survey_i, config.lvrg_set.target_pct in enumerate(x_val_list): \n","  # for survey_i, outg_dc_itv_num in enumerate(x_val_list): \n","  # for survey_i, exp_itv in enumerate(itv_list): \n","  # for survey_i, zone_dt_k in enumerate(x_val_list): \n","  # for survey_i, t_out_gap in enumerate(x_val_list): \n","  # for survey_i, zone_dc_period in enumerate(x_val_list): \n","  \n","    start_0 = time.time()\n","\n","    print(\"config.loc_set.exp_itv :\", config.loc_set.exp_itv)    \n","    print(\"config.loc_set.tpg_itv :\", config.loc_set.tpg_itv)    \n","    print(\"config.loc_set.outg_itv :\", config.loc_set.outg_itv)    \n","    print(\"config.loc_set.dtk_itv :\", config.loc_set.dtk_itv)    \n","    # print(\"dtk_dc_itv :\", dtk_dc_itv)    \n","    # print(\"config.loc_set.dtk_dc_itv_num :\", config.loc_set.dtk_dc_itv_num)        \n","    print(\"config.loc_set.dt_k :\", config.loc_set.dt_k)\n","    print(\"config.loc_set.ei_k :\", config.loc_set.ei_k)   \n","    print(\"config.loc_set.dc_period :\", config.loc_set.dc_period)    \n","    print(\"config.loc_set.use_dtk_line :\", config.loc_set.use_dtk_line)    \n","    print(\"config.loc_set.bbz_itv :\", config.loc_set.bbz_itv)    \n","    # print(\"config.loc_set.dtk_itv2 :\", config.loc_set.dtk_itv2)    \n","    \n","    # tp_lb_period = 100\n","    # res_df['low_lb'] = res_df['low'].rolling(tp_lb_period).min()\n","    # res_df['high_lb'] = res_df['high'].rolling(tp_lb_period).max()\n","    # config.tr_set.out_gap = config.tr_set.tp_gap / config.loc_set.spread\n","         \n","    print(\"config.loc_set.spread :\", config.loc_set.spread)\n","    # print(\"config.ep_set.dr_error :\", config.ep_set.dr_error)\n","    print(\"config.ep_set.tf_entry :\", config.ep_set.tf_entry)\n","    print(\"config.ep_set.htf_entry :\", config.ep_set.htf_entry)\n","    print(\"config.tr_set.ep_gap :\", config.tr_set.ep_gap)\n","    print(\"config.tr_set.out_gap :\", config.tr_set.out_gap)\n","    print(\"config.tr_set.tp_gap :\", config.tr_set.tp_gap)\n","    print(\"config.lvrg_set.leverage :\", config.lvrg_set.leverage)\n","    print(\"config.lvrg_set.target_pct :\", config.lvrg_set.target_pct)\n","    \n","    print(\"config.loc_set.outg_dc_period :\", config.loc_set.outg_dc_period)\n","    print(\"config.loc_set.spread_ep_gap :\", config.loc_set.spread_ep_gap)\n","    print(\"config.loc_set.zone_dt_k :\", config.loc_set.zone_dt_k)\n","    print(\"config.loc_set.zone_dc_period :\", config.loc_set.zone_dc_period)\n","    # print(\"config.loc_set.open_shift :\", config.loc_set.open_shift)\n","    print(\"config.tr_set.c_ep_gap :\", config.tr_set.c_ep_gap)\n","    print(\"config.tr_set.t_out_gap :\", config.tr_set.t_out_gap)\n","\n","    # res_df['sma_1m'] = res_df['close'].rolling(sma_period).mean()  \n","    # res_df = bb_level(res_df, '5m', bbg)\n","    \n","    res_df = enlist_tr(res_df, config, np_timeidx)\n","\n","    # --------------- set partial tp --------------- #\n","    short_tps = [res_df['short_tp']]\n","    long_tps = [res_df['long_tp']]\n","\n","    # short_tps = [short_tp2]\n","    # long_tps = [long_tp2]\n","\n","    # short_tps = [short_tp2, short_tp] # org\n","    # long_tps = [long_tp2, long_tp]\n","    \n","    # short_tps = [short_tp, short_tp2]\n","    # long_tps = [long_tp, long_tp2]\n","\n","\n","\n","    #       trading : 여기도 체결 결과에 대해 묘사함       #\n","    trade_list = []\n","    h_trade_list = []\n","    leverage_list = []\n","    fee_list = []\n","    short_fee_list = []\n","    long_fee_list = []\n","    open_list = []\n","    zone_list = []\n","    side_list = []\n","\n","    tp_ratio_list = []\n","    short_tp_ratio_list = []\n","    long_tp_ratio_list = []\n","\n","    dr_list = []\n","    short_dr_list = []\n","    long_dr_list = []\n","\n","    liqd_list = []\n","    short_liqd_list = []\n","    long_liqd_list = []\n","\n","    nontp_liqd_list = []\n","    nontp_short_liqd_list = []\n","    nontp_long_liqd_list = []\n","\n","    nontp_pr_list = []\n","    nontp_short_pr_list = []\n","    nontp_long_pr_list = []\n","\n","    nontp_short_indexs = []\n","    nontp_long_indexs = []\n","\n","    nontp_short_ep_list = []\n","    nontp_long_ep_list = []\n","\n","    pr_list = []\n","    long_list = []\n","    short_list = []\n","\n","    h_pr_list = []\n","    h_long_list = []\n","    h_short_list = []\n","\n","    ep_tp_list = []\n","    h_ep_tp_list = []\n","    tp_state_list = []\n","\n","    i = 0\n","    while 1:\n","    # for i in range(len(res_df)):  \n","    \n","      # ------- fee init ------- #\n","      if config.ep_set.entry_type == 'LIMIT':\n","        fee = config.init_set.limit_fee\n","      else:\n","        fee = config.init_set.market_fee\n","\n","\n","      if res_df['entry'][i] == config.ep_set.short_entry_score: \n","\n","        # print(\"i in short :\", i)\n","\n","        initial_i = i\n","\n","        if config.out_set.static_out:\n","          p_i = initial_i\n","        else:\n","          p_i = i\n","\n","\n","        res_df, open_side_str, zone = short_ep_loc(res_df, config, i)\n","\n","\n","        # -------------- mr_score summation -------------- #\n","        if open_side_str is not None:          \n","          pass\n","\n","        else:\n","          i += 1\n","          if i >= len(res_df):\n","            break\n","          continue\n","\n","\n","        ep_j = initial_i # dynamic ep 를 위한 var.\n","\n","        # -------------- limit waiting : limit_out -------------- #\n","\n","        if config.ep_set.entry_type == \"LIMIT\":\n","\n","          entry_done = 0\n","          entry_open = 0\n","          prev_sar = None\n","\n","          # for e_j in range(i, len(res_df)): # entry_signal 이 open 기준 (해당 bar 에서 체결 가능함)\n","          if i + 1 >= len(res_df):  # i should be checked if e_j starts from i+1\n","            break\n","          for e_j in range(i + 1, len(res_df)): # entry signal이 close 기준 일 경우\n","        \n","            if not config.ep_set.static_ep:\n","              ep_j = e_j\n","\n","            if config.tp_set.static_tp:\n","              # if config.ep_set.tpout_onexec:\n","              #   tp_j = e_j\n","              # else:\n","                tp_j = initial_i\n","            else:\n","              tp_j = e_j  \n","\n","            #             1. ep 설정 \n","            # -------------- np.inf ep -------------- #\n","            # if short_ep.iloc[initial_i] == np.inf:\n","            #   break\n","\n","\n","            #             1. check ep_out      #\n","            if config.loc_set.ei_k != \"None\":\n","              if res_df['low'].iloc[e_j] <= res_df['h_short_rtc_1'].iloc[tp_j] - res_df['h_short_rtc_gap'].iloc[tp_j] * config.loc_set.ei_k:\n","              # if res_df['low'].iloc[e_j] <= res_df['short_tp'].iloc[tp_j]: # ep_out : tp_done\n","              # if np_timeidx[e_j] % config.ep_set.tf_entry == config.ep_set.tf_entry - 1:\n","                break\n","\n","            #             2. check ep_in       #\n","            if res_df['high'].iloc[e_j] >= res_df['short_ep'].iloc[ep_j]:\n","              entry_done = 1\n","              # print(\"res_df['high'].iloc[e_j] :\", res_df['high'].iloc[e_j])\n","              # print(\"e_j :\", e_j)\n","\n","              #     이미, e_j open 이 ep 보다 높은 경우, entry[ep_j] => -2 로 변경   #\n","              if res_df['open'].iloc[e_j] >= res_df['short_ep'].iloc[ep_j]:\n","                entry_open = 1\n","\n","              break\n","\n","\n","          i = e_j\n","          # print(\"i = e_j :\", i)\n","\n","          if entry_done:      \n","            pass\n","\n","          else:\n","            i += 1\n","            if i >= len(res_df):\n","              break\n","            continue\n","\n","        # ----------------- end wait ----------------- #\n","\n","        # if e_j - initial_i >= 200:\n","        #   print(\"e_j, initial_i :\", e_j, initial_i)\n","        # print(\"e_j - initial_i :\", e_j - initial_i)\n","        # print()\n","\n","        open_list.append(initial_i)\n","        zone_list.append(zone)\n","        side_list.append('s')\n","        \n","        if config.ep_set.entry_type is 'MARKET':\n","          try:\n","            ep_list = [res_df['close'].iloc[e_j]]\n","          except Exception as e:\n","            # print('error in ep_list (initial) :', e)\n","            ep_list = [res_df['close'].iloc[ep_j]]\n","\n","        else:          \n","          if not entry_open:\n","            ep_list = [res_df['short_ep'].iloc[ep_j]]\n","          \n","          #     Todo    #\n","          #      1. entry_score version 으로 재정의해야함\n","          #      2. below phase exists for open_price entry\n","          else:\n","            #   e_j 가 있는 경우, \n","            try:\n","              ep_list = [res_df['open'].iloc[e_j]]\n","            except Exception as e:\n","              ep_list = [res_df['open'].iloc[ep_j]]\n","\n","        if not config.lvrg_set.static_lvrg:\n","          config.lvrg_set.leverage = config.lvrg_set.target_pct / (res_df['short_out'].iloc[ep_j] / res_df['short_ep'].iloc[ep_j] - 1 - (fee + config.init_set.market_fee))\n","          # config.lvrg_set.leverage = config.lvrg_set.target_pct / (res_df['short_out'].iloc[ep_j] / res_df['short_ep_org'].iloc[ep_j] - 1 - (fee + config.init_set.market_fee))\n","\n","          # config.lvrg_set.leverage = config.lvrg_set.target_pct / abs(res_df['short_ep'].iloc[ep_j] / res_df['short_out'].iloc[ep_j] - 1 - (fee + config.init_set.market_fee))\n","          # config.lvrg_set.leverage = config.lvrg_set.target_pct / abs(res_df['short_ep_org'].iloc[ep_j] / res_df['short_out'].iloc[ep_j] - 1 - (fee + config.init_set.market_fee))\n","          \n","          if not config.lvrg_set.allow_float:\n","            config.lvrg_set.leverage = int(config.lvrg_set.leverage)\n","\n","          # -------------- leverage rejection -------------- #\n","          if config.lvrg_set.leverage < 1 and config.lvrg_set.lvrg_rejection:\n","            open_list.pop()\n","            zone_list.pop()\n","            side_list.pop()\n","            i += 1\n","            if i >= len(res_df):\n","              break\n","            continue\n","\n","          config.lvrg_set.leverage = max(config.lvrg_set.leverage, 1)\n","          leverage_list.append(config.lvrg_set.leverage)\n","        \n","        config.lvrg_set.leverage = min(50, config.lvrg_set.leverage)\n","\n","\n","        try:\n","          ep_idx_list = [e_j]\n","        except Exception as e:\n","          # print('error in ep_idx_list :', e)        \n","          ep_idx_list = [ep_j]\n","\n","        tp_list = []\n","        tp_idx_list = []\n","\n","        partial_tp_cnt = 0\n","        hedge_cnt = 1\n","\n","        h_ep, h_tp = None, None\n","        h_i, h_j = None, None\n","        \n","        trade_done = False\n","        out = False\n","        # config.out_set.retouch\n","\n","        #     Todo    #\n","        #      1. future_work : 상단의 retouch 와 겹침 \n","        config.out_set.retouch = False\n","        \n","\n","        if i == len(res_df) - 1: # if j start from i + 1 \n","          open_list.pop()       \n","          zone_list.pop()       \n","          side_list.pop()       \n","        for j in range(i + 1, len(res_df)):\n","\n","        # for j in range(i, len(res_df)):\n","\n","          if config.tp_set.static_tp:\n","            if not config.ep_set.static_ep and config.ep_set.entry_type == \"LIMIT\" and config.ep_set.tpout_onexec:\n","              tp_j = e_j\n","            else:\n","              tp_j = initial_i\n","          else:\n","            tp_j = j\n","\n","          if config.out_set.static_out:\n","            if not config.ep_set.static_ep and config.ep_set.entry_type == \"LIMIT\" and config.ep_set.tpout_onexec:\n","              out_j = e_j\n","            else:           \n","              out_j = initial_i\n","          else:\n","            out_j = j\n","\n","\n","          # -------------- sub ep -------------- #\n","          # if res_df['high'].iloc[j - 1] <= res_df['sar2'].iloc[j - 1] and res_df['high'].iloc[j] > res_df['sar2'].iloc[j]:\n","            \n","          #   sub_ep = res_df['sar2'].iloc[j - 1]\n","\n","          #   if sub_ep < ep_list[-1]:\n","          #     ep_list.append(sub_ep)\n","          #     ep_idx_list.append(j)\n","\n","          \n","          # -------------- hedge only once -------------- #\n","          #             일단, h_quantity 는 초기 진입과 동일하게 설정         #\n","          # if res_df['high'].iloc[j] >= res_df['minor_ST2_Up'].iloc[j] and hedge_cnt == 1:\n","          # if res_df['close'].iloc[j] >= res_df['minor_ST2_Up'].iloc[j] and hedge_cnt == 1:\n","          # if res_df['close'].iloc[j] >= res_df['minor_ST3_Up'].iloc[j] and hedge_cnt == 1:\n","\n","          #   h_ep = res_df['close'].iloc[j]\n","          #   hedge_cnt -= 1\n","          #   h_i = j\n","\n","\n","          # -------------- ultimate limit tp -------------- #\n","          if not config.tp_set.non_tp:\n","\n","            #               1. by price line             #\n","            if config.tp_set.tp_type != 'MARKET':\n","\n","              for s_i, short_tp_ in enumerate(short_tps):\n","\n","                if res_df['low'].iloc[j] <= short_tp_.iloc[tp_j] and partial_tp_cnt == s_i: # we use static tp now\n","                # if res_df['low'].iloc[j] <= short_tp_.iloc[j]:\n","                # if res_df['low'].iloc[j] <= short_tp_.iloc[j] <= res_df['high'].iloc[j]: --> 이건 잘못되었음\n","\n","                  if s_i == len(short_tps) - 1:\n","                    trade_done = 1\n","                  \n","                  partial_tp_cnt += 1\n","\n","                  #         dynamic tp        #\n","                  # if 0:\n","                  if short_tp_.iloc[j] != short_tp_.iloc[j - 1] and not config.tp_set.static_tp:\n","\n","                    #   tp limit 이 불가한 경우 = open 이 이미, tp 를 넘은 경우 # \n","                    # if res_df['open'].iloc[j] < short_tp_.iloc[initial_i]:\n","                    if res_df['open'].iloc[j] < short_tp_.iloc[j]:\n","\n","                      # tp = short_tp_.iloc[initial_i]\n","                      tp = res_df['open'].iloc[j]\n","\n","                      if trade_done:\n","                        tp_state_list.append(\"d-short_open\")\n","\n","                    #   tp limit 이 가능한 경우 = open 이 아직, tp 를 넘지 않은 경우 # \n","                    else:\n","\n","                      # tp = short_tp_.iloc[initial_i]\n","                      tp = short_tp_.iloc[j]\n","                      # tp = res_df['open'].iloc[j]\n","\n","                      if trade_done:\n","                        tp_state_list.append(\"d-short_tp\")\n","\n","                  #         static tp         #\n","                  else:\n","                    \n","                    #   tp limit 이 불가한 경우 = open 이 이미, tp 를 넘은 경우 # \n","                    #   non_inversion 의 경우, short_tp 가 가능함   #              \n","\n","                    # if res_df['open'].iloc[j] < short_tp_.iloc[initial_i]:\n","                    if res_df['open'].iloc[j] < short_tp_.iloc[tp_j]:\n","\n","                      # tp = short_tp_.iloc[initial_i]\n","                      tp = short_tp_.iloc[tp_j]\n","\n","                      # tp = res_df['open'].iloc[j]\n","\n","                      if trade_done:\n","                        tp_state_list.append(\"s-short_tp\")\n","\n","                    #   tp limit 이 가능한 경우 = open 이 아직, tp 를 넘지 않은 경우 # \n","                    else:\n","\n","                      # tp = short_tp_.iloc[initial_i]\n","                      tp = short_tp_.iloc[tp_j]\n","\n","                      # tp = res_df['open'].iloc[j]\n","\n","                      if trade_done:\n","                        tp_state_list.append(\"s-short_tp\")   \n","\n","                  tp_list.append(tp)     \n","                  tp_idx_list.append(j)\n","                  fee += config.init_set.limit_fee\n","\n","\n","            #           2. by signal        #\n","            else:\n","\n","\n","              # -------------- sar tp -------------- #\n","              # if (res_df['high'].iloc[j] >= res_df['sar2'].iloc[j]) & \\\n","              #   (res_df['high'].iloc[j - 1] < res_df['sar2'].iloc[j - 1]) & \\\n","              #   (res_df['high'].iloc[j - 2] < res_df['sar2'].iloc[j - 2]):\n","\n","              #       inversion     #\n","              # if (res_df['low'].iloc[j] <= res_df['sar2'].iloc[j]) & \\\n","              #   (res_df['low'].iloc[j - 1] > res_df['sar2'].iloc[j - 1]) & \\\n","              #   (res_df['low'].iloc[j - 2] > res_df['sar2'].iloc[j - 2]):\n","              \n","              # ----------- st short ----------- #\n","              # if res_df['close'].iloc[j] <= res_df['short_tp'].iloc[tp_j]:\n","              \n","              # -------------- sar pb tp -------------- #\n","              # if res_df['low'].iloc[j] <= res_df['short_tp'].iloc[initial_i]:\n","\n","              # -------------- st tp -------------- #\n","              # if res_df['close'].iloc[j] > res_df['middle_line'].iloc[j]:       \n","\n","              # -------------- fisher tp -------------- #            \n","              # if entry[j] == 1:\n","\n","              \n","              # -------------- timestamp -------------- #\n","              if np_timeidx[j] % config.ep_set.tf_entry == config.ep_set.tf_entry - 1:                  \n","                \n","                tp = res_df['close'].iloc[j]\n","                # tp = res_df['open'].iloc[j]\n","                trade_done = 1\n","\n","                if trade_done:\n","                  tp_state_list.append(\"short close tp\")\n","\n","                tp_list.append(tp) \n","                tp_idx_list.append(j)\n","                fee += config.init_set.market_fee\n","\n","\n","                  \n","          # -------------- out -------------- #\n","          if not trade_done and config.out_set.use_out and j != len(res_df) - 1:\n","\n","            # -------------- macd -------------- #\n","            # if res_df['macd_hist3'].iloc[j] > 0:  #  macd out\n","            # if res_df['macd_hist3'].iloc[i] < 0 and res_df['macd_hist3'].iloc[j] > 0:\n","\n","            # -------------- st config.out_set.retouch -------------- #\n","            # out = 1 상태면 동일 tick 에서 config.out_set.retouch 를 조사할 거기 때문에, 먼저 검사함\n","            # 그리고, out 기준이 close 라 이게 맞음 \n","            # close 가 short_out 보다 올라가있는 상태일테니 low 를 조사하는게 맞음           \n","            # if out and res_df['low'].iloc[j] <= short_out.iloc[out_j]:\n","            #   config.out_set.retouch = 1\n","\n","            \n","             # ------- 일정시간 이상, dynamic_out 적용 ------ #\n","            try:\n","              if j - out_idx >= config.out_set.retouch_out_period:\n","                static_short_out = res_df['short_out'].iloc[j]\n","            \n","            except Exception as e:\n","              pass\n","\n","              # ------- static out ------ #\n","            try:\n","              if out and res_df['low'].iloc[j] <= static_short_out:\n","                config.out_set.retouch = 1\n","            except Exception as e:\n","              pass\n","\n","            \n","              # ------- config.out_set.retouch out ------ #\n","            # if out and res_df['low'].iloc[j] <= short_out2.iloc[out_j]:\n","            #   config.out_set.retouch = 1\n","\n","\n","            # -------------- st -------------- #\n","            # if res_df['close'].iloc[j] > res_df['middle_line'].iloc[j]:    \n","            # if res_df['close'].iloc[j] > res_df['minor_ST3_Up'].iloc[j]:\n","            # if res_df['close'].iloc[j] > upper_middle.iloc[j]:\n","            # if res_df['close'].iloc[j] > res_df['minor_ST1_Up'].iloc[j]:\n","            if out == 0:              \n","              if config.out_set.hl_out:\n","                if res_df['high'].iloc[j] >= res_df['short_out'].iloc[out_j]: # check out only once\n","                  out = 1\n","\n","              else:\n","                if res_df['close'].iloc[j] >= res_df['short_out'].iloc[out_j]: # check out only once\n","                  out = 1\n","\n","              # out_idx = j\n","              # static_short_out = short_out.iloc[out_j]\n","              # if config.out_set.second_out:              \n","                # static_short_out = short_out.iloc[out_j] + res_df['st_gap'].iloc[out_j] * config.out_set.second_out_gap\n","            \n","            # if out == 0 and res_df['high'].iloc[j] >= short_out.iloc[out_j]: # check out only once\n","            #   out = 1\n","             \n","\n","            # -------------- sma -------------- #\n","            # if res_df['close'].iloc[j] > res_df[sma].iloc[j]:\n","\n","            # -------------- sar -------------- #\n","            # if res_df['close'].iloc[j] > res_df['minor_ST3_Up'].iloc[j] \\\n","            #   or res_df['sar2'].iloc[j] <= res_df['high'].iloc[j]:\n","            # if res_df['close'].iloc[j] > short_out.iloc[initial_i]: # or \\\n","            #   out = 1\n","              # res_df['sar2_uptrend'].iloc[j] == 1: # or \\\n","\n","            # if res_df['sar2_uptrend'].iloc[j] == 1:\n","\n","            #   if prev_sar is None:\n","            #     prev_sar = res_df['sar2'].iloc[j - 1]\n","              \n","            #   if res_df['close'].iloc[j] > prev_sar:\n","            #     out = 1\n","\n","            # else:\n","            #   if res_df['close'].iloc[j] > res_df['sar2'].iloc[j]:\n","            #     out = 1\n","              \n","            # -------------- hl -------------- #\n","            # if res_df['close'].iloc[j] > short_out.iloc[tp_j]:\n","            \n","            # -------------- stoch -------------- #\n","            # if res_df['stoch'].iloc[j - 2] >= res_df['stoch'].iloc[j - 1] and \\\n","            #   res_df['stoch'].iloc[j - 1] < res_df['stoch'].iloc[j] and \\\n","            #   res_df['stoch'].iloc[j - 1] <= stoch_lower:\n","            #   out = 1\n","\n","            # config.out_set.retouch 1 경우, config.out_set.retouch 조건도 있어야함\n","            if out:\n","              if config.out_set.retouch:\n","                if config.out_set.retouch:\n","                  pass\n","                else:\n","                    continue\n","\n","              else:\n","                pass\n","\n","              if config.out_set.price_restoration:\n","                tp = res_df['short_out'].iloc[out_j]\n","                if config.out_set.second_out:\n","                  tp = res_df['short_out2'].iloc[out_j]\n","                \n","                # if res_df['close'].iloc[j] > tp: # 이 경우를 protect 하는건 insane 임\n","                #   tp = res_df['close'].iloc[j]\n","\n","              else:\n","                \n","                if res_df['open'].iloc[j] >= res_df['short_out'].iloc[out_j]:\n","                  tp = res_df['open'].iloc[j]\n","                else:\n","                  if config.out_set.hl_out:\n","                    tp = res_df['short_out'].iloc[out_j]\n","                  else:\n","                    tp = res_df['close'].iloc[j]\n","                \n","                # if not config.out_set.static_out:\n","                #   if res_df['open'].iloc[j] >= res_df['short_out'].iloc[out_j]: # close 기준이라 이런 조건을 못씀, 차라리 j 를 i 부터 시작\n","                #     tp = res_df['open'].iloc[j]\n","                #   else:\n","                #     tp = res_df['close'].iloc[j]\n","\n","                # else:\n","                #   tp = res_df['close'].iloc[j]\n","\n","              \n","              if config.out_set.retouch: # out 과 open 비교\n","                if config.out_set.second_out:\n","                  if res_df['open'].iloc[j] <= res_df['short_out2'].iloc[out_j]:\n","                    tp = res_df['open'].iloc[j]\n","                else:\n","                  if res_df['open'].iloc[j] <= res_df['short_out'].iloc[out_j]:\n","                    tp = res_df['open'].iloc[j]\n","\n","                try: # static_short_out 인 경우, open 도 고려한 tp set\n","                  if res_df['open'].iloc[j] <= static_short_out:\n","                    tp = res_df['open'].iloc[j]\n","                  else:\n","                    tp = static_short_out\n","                except Exception as e:\n","                  pass\n","\n","              trade_done = 1\n","              tp_state_list.append(\"short close_out\")\n","            \n","\n","              tp_list.append(tp) \n","              tp_idx_list.append(j)\n","              fee += config.init_set.market_fee\n","\n","\n","          # -------------- non tp -------------- #\n","          if j == len(res_df) - 1:\n","            trade_done = 1\n","            tp = res_df['close'].iloc[j]\n","            tp_list.append(tp) \n","            tp_idx_list.append(j)\n","            fee += config.init_set.market_fee\n","          \n","\n","\n","          # -------------- append trade data -------------- #\n","          if trade_done:\n","\n","            # --------------- tp_ratio info --------------- #\n","            #         Todo        #\n","            #          short_out 에 대한 정보는 존재함,\n","            #          short_tp 에 대한 정보는 존재함,\n","            #       => initial_i 기준으로 ,dynamic | static set 을 tp 와 out 에 각각 적용\n","            #          config.lvrg_set.leverage 는 initial_i 기준으로 적용되니까\n","            #          적용된 tp & out 으로 abs((tp - ep) / (ep - out)) 계산\n","            try:\n","              done_tp = res_df['short_tp'].iloc[ep_j]\n","              done_out = res_df['short_out'].iloc[ep_j]\n","\n","              if done_out <= ep_list[0]: # loss > 1\n","                dr = np.nan\n","                tp_ratio = np.nan\n","              else:                \n","                dr = ((ep_list[0] - done_tp) / (done_out - ep_list[0]))\n","                tp_ratio = ((ep_list[0] - done_tp - tp_fee * ep_list[0]) / (done_out - ep_list[0] + out_fee * ep_list[0]))\n","\n","            except Exception as e:\n","              # pass    \n","              tp_ratio = np.nan  \n","            \n","            tp_ratio_list.append(tp_ratio)\n","            short_tp_ratio_list.append(tp_ratio)     \n","            dr_list.append(dr)\n","            short_dr_list.append(dr)   \n","\n","\n","            # -------------------- partial tp -------------------- #\n","            #        1. len(tp_list) 에 대응하는 qty_list 를 만들어야함    #\n","            #        2. temp_pr_list 를 만들어 총합 + 1 을 pr_list 에 저장      #\n","            #        2-1. temp_pr = sum((ep / tp_list[i] - fee - 1) * qty_list[i])   #\n","            #        3. temp_pr_list 의 첫 tp 에는 r_qty 를 할당함        #\n","            qty_list = []\n","            temp_pr_list = []\n","            r_qty = 1\n","            for q_i in range(len(tp_list) - 1, -1, -1):\n","\n","              if len(tp_list) == 1:\n","                temp_qty = r_qty\n","              else:\n","                if q_i !=0:\n","                  temp_qty = r_qty / config.tp_set.partial_qty_divider\n","                else:\n","                  temp_qty = r_qty\n","\n","              temp_pr = (ep_list[0] / tp_list[q_i] - fee - 1) * temp_qty * config.lvrg_set.leverage\n","              # temp_pr = (ep_list[0] / tp_list[q_i] - fee - 1) * temp_qty\n","              r_qty -= temp_qty\n","\n","              temp_pr_list.append(temp_pr)\n","              qty_list.append(temp_qty)\n","\n","            # if len(temp_pr_list) == 1:\n","            #   print(\"qty_list :\", qty_list)\n","            #   print(\"temp_pr_list :\", temp_pr_list)\n","\n","            temp_pr = sum(temp_pr_list) + 1\n","\n","            # -------------------- sub ep -> pr calc -------------------- #\n","            if len(ep_list) > 1:\n","            \n","              p_ep_pr = []\n","              for sub_ep_ in ep_list:\n","                sub_pr = (sub_ep_ / tp - fee - 1) * config.lvrg_set.leverage\n","                p_ep_pr.append(sub_pr)\n","\n","              temp_pr = sum(p_ep_pr) + 1\n","\n","              print(\"temp_pr :\", temp_pr)\n","\n","            # ------------ hedge + non_hedge pr summation ------------ #\n","            #         hedge pr direction is opposite to the origin       #\n","            hedge_pr = 1\n","            if hedge_cnt == 0:\n","\n","              #       hedge tp      #\n","              h_tp = res_df['close'].iloc[j]\n","              hedge_pr = (h_tp / h_ep - fee - 1) * config.lvrg_set.leverage  # hedge long\n","              temp_pr += hedge_pr\n","              h_j = j\n","\n","            \n","            hh = max(res_df['high'].iloc[i:j + 1])\n","            short_liq = (ep_list[0] / hh - fee - 1) * config.lvrg_set.leverage + 1\n","\n","            if j != len(res_df) - 1:\n","\n","              # ep_tp_list.append((ep, tp_list))  \n","              ep_tp_list.append((ep_list, tp_list))  \n","              # trade_list.append([initial_i, i, j])\n","              trade_list.append((ep_idx_list, tp_idx_list))\n","\n","              liqd_list.append(short_liq)\n","              short_liqd_list.append(short_liq)\n","\n","              h_ep_tp_list.append((h_ep, h_tp))      # hedge 도 ep_tp_list 처럼 변경해주어야하는데 아직 안건드림, 딱히 사용할 일이 없어보여   \n","              h_trade_list.append([initial_i, h_i, h_j])                \n","\n","              pr_list.append(temp_pr)\n","              fee_list.append(fee)\n","              short_list.append(temp_pr)\n","              short_fee_list.append(fee)\n","\n","              h_pr_list.append(hedge_pr)\n","              h_short_list.append(hedge_pr)\n","\n","              i = j\n","              break\n","\n","            else:\n","\n","              # ep_tp_list.append((ep_list, tp_list))\n","              # trade_list.append((ep_idx_list, tp_idx_list))\n","              # plot_check 때문에, pr_list 까지 하게되면 acc_pr eval 이 꼬이게댐\n","          \n","              # pr_list 를 넣지 않을거니까, open_list 에서 해당 idx 는 pop\n","              open_list.pop()\n","              zone_list.pop()\n","              side_list.pop()\n","              \n","              #         tp 미체결 survey        #\n","              nontp_liqd_list.append(short_liq)\n","              nontp_short_liqd_list.append(short_liq)\n","              nontp_short_indexs.append(i)\n","              nontp_short_ep_list.append(ep_list[0])\n","\n","              nontp_short_pr = (ep_list[0] / tp - fee - 1) * config.lvrg_set.leverage + 1\n","              nontp_pr_list.append(nontp_short_pr)\n","              nontp_short_pr_list.append(nontp_short_pr)\n","\n","\n","      #                  long  phase                #\n","      elif res_df['entry'][i] == -config.ep_set.short_entry_score: \n","      \n","\n","        initial_i = i\n","\n","        if config.out_set.static_out:\n","          p_i = initial_i\n","        else:\n","          p_i = i\n","\n","        \n","        res_df, open_side_str, zone = long_ep_loc(res_df, config, i)\n","\n","\n","        # -------------- mr_score summation -------------- #\n","        if open_side_str is not None:        \n","          pass\n","        \n","        else:\n","          i += 1\n","          if i >= len(res_df):\n","            break\n","          continue\n","\n","        # print(\"i after mrcheck :\", i)\n","\n","\n","        ep_j = initial_i\n","      \n","        # -------------- limit waiting const. -------------- #      \n","        if config.ep_set.entry_type == \"LIMIT\":\n","\n","          entry_done = 0\n","          entry_open = 0\n","          prev_sar = None\n","\n","          # for e_j in range(i, len(res_df)):   \n","\n","          if i + 1 >= len(res_df):  # i should be checked if e_j starts from i+1\n","            break\n","          for e_j in range(i + 1, len(res_df)):  # entry 가 close 기준일 경우 사용 (open 기준일 경우 i 부터 시작해도 무방함)\n","            \n","            if not config.ep_set.static_ep:\n","              ep_j = e_j  \n","            \n","            if config.tp_set.static_tp:\n","              # if config.ep_set.tpout_onexec:\n","              #   tp_j = e_j\n","              # else:\n","                tp_j = initial_i\n","            else:\n","              tp_j = e_j  \n","\n","            \n","            #          np.inf ep         #\n","            # if long_ep.iloc[initial_i] == np.inf:\n","            #   break\n","            \n","            #          1. check ep_out          #\n","            if config.loc_set.ei_k != \"None\":\n","              if res_df['high'].iloc[e_j] >= res_df['h_long_rtc_1'].iloc[tp_j] + res_df['h_long_rtc_gap'].iloc[tp_j] * config.loc_set.ei_k:\n","              # if res_df['high'].iloc[e_j] >= res_df['long_tp'].iloc[tp_j]:                \n","              # if np_timeidx[e_j] % config.ep_set.tf_entry == config.ep_set.tf_entry - 1:\n","                break\n","\n","            #          2. check ep_in          #\n","            if res_df['low'].iloc[e_j] <= res_df['long_ep'].iloc[ep_j]:\n","              entry_done = 1\n","              # print(\"e_j :\", e_j)\n","              \n","              #     이미, e_j open 이 ep 보다 낮은 경우, entry[initial_i] => -2 로 변경   #\n","              if res_df['open'].iloc[e_j] <= res_df['long_ep'].iloc[ep_j]:\n","                entry_open = 1\n","\n","              break\n","\n","\n","          i = e_j\n","          # print(\"i = e_j :\", i)\n","\n","          if entry_done:      \n","            pass\n","            # print(\"i, entry_done :\", i, entry_done)\n","\n","          else:\n","            i += 1\n","            if i >= len(res_df):\n","              # print(\"i :\", i)\n","              break\n","\n","            # print(\"i in continue :\", i)          \n","            continue\n","\n","\n","        # ---------------- end wait ---------------- #\n","        # if e_j - initial_i >= 200:\n","        #   print(\"e_j, initial_i :\", e_j, initial_i)\n","        \n","        # print(i)\n","\n","        open_list.append(initial_i)\n","        zone_list.append(zone)\n","        side_list.append('l')\n","\n","        if config.ep_set.entry_type is 'MARKET':\n","          try:\n","            ep_list = [res_df['close'].iloc[e_j]]\n","          except Exception as e:\n","            # print('error in ep_list (initial) :', e)\n","            ep_list = [res_df['close'].iloc[ep_j]]\n","        else:\n","          if not entry_open:\n","            ep_list = [res_df['long_ep'].iloc[ep_j]]\n","          else:\n","            try:\n","              ep_list = [res_df['open'].iloc[e_j]]\n","            except Exception as e:\n","              ep_list = [res_df['open'].iloc[ep_j]]\n","\n","        if not config.lvrg_set.static_lvrg:\n","          config.lvrg_set.leverage = config.lvrg_set.target_pct / (res_df['long_ep'].iloc[ep_j] / res_df['long_out'].iloc[ep_j] - 1 - (fee + config.init_set.market_fee))\n","          # config.lvrg_set.leverage = config.lvrg_set.target_pct / (res_df['long_ep_org'].iloc[ep_j] / res_df['long_out'].iloc[ep_j] - 1 - (fee + config.init_set.market_fee))\n","\n","          # config.lvrg_set.leverage = config.lvrg_set.target_pct / abs(res_df['long_out'].iloc[ep_j] / res_df['long_ep'].iloc[ep_j] - 1 - (fee + config.init_set.market_fee))\n","          # config.lvrg_set.leverage = config.lvrg_set.target_pct / abs(res_df['long_out'].iloc[ep_j] / res_df['long_ep_org'].iloc[ep_j] - 1 - (fee + config.init_set.market_fee))\n","          \n","          if not config.lvrg_set.allow_float:\n","            config.lvrg_set.leverage = int(config.lvrg_set.leverage)\n","\n","          # -------------- leverage rejection -------------- #\n","          if config.lvrg_set.leverage < 1 and config.lvrg_set.lvrg_rejection:\n","            open_list.pop()\n","            zone_list.pop()\n","            side_list.pop()\n","            i += 1\n","            if i >= len(res_df):\n","              break\n","            continue\n","\n","          config.lvrg_set.leverage = max(config.lvrg_set.leverage, 1)\n","          leverage_list.append(config.lvrg_set.leverage)\n","\n","        config.lvrg_set.leverage = min(50, config.lvrg_set.leverage)        \n","          \n","        try:\n","          ep_idx_list = [e_j]\n","        except Exception as e:\n","          # print('error in ep_idx_list :', e)\n","          ep_idx_list = [ep_j]\n","\n","        tp_list = []\n","        tp_idx_list = []\n","\n","        partial_tp_cnt = 0\n","        hedge_cnt = 1\n","\n","        h_ep, h_tp = None, None        \n","        h_i, h_j = None, None      \n","\n","        trade_done = False\n","        out = False          \n","        config.out_set.retouch = False\n","\n","\n","        if i == len(res_df) - 1: # if j start from i + 1 \n","          open_list.pop()\n","          zone_list.pop()\n","          side_list.pop()\n","\n","        for j in range(i + 1, len(res_df)):\n","\n","        # for j in range(i, len(res_df)):  \n","          \n","          if config.tp_set.static_tp:\n","            if not config.ep_set.static_ep and config.ep_set.entry_type == \"LIMIT\" and config.ep_set.tpout_onexec:\n","              tp_j = e_j\n","            else:\n","              tp_j = initial_i\n","          else:\n","            tp_j = j\n","\n","          if config.out_set.static_out:\n","            if not config.ep_set.static_ep and config.ep_set.entry_type == \"LIMIT\" and config.ep_set.tpout_onexec:\n","              out_j = e_j\n","            else:           \n","              out_j = initial_i\n","          else:\n","            out_j = j   \n","\n","          # -------------- hedge only once -------------- #\n","          #             일단, h_quantity 는 초기 진입과 동일하게 설정         #\n","          # if res_df['low'].iloc[j] <= res_df['minor_ST2_Down'].iloc[j] and hedge_cnt == 1:\n","          # if res_df['close'].iloc[j] <= res_df['minor_ST2_Down'].iloc[j] and hedge_cnt == 1:\n","          # if res_df['close'].iloc[j] <= res_df['minor_ST3_Down'].iloc[j] and hedge_cnt == 1:\n","\n","          #   h_ep = res_df['close'].iloc[j]\n","          #   hedge_cnt -= 1\n","          #   h_i = j\n","\n","          # -------------- sub ep -------------- #\n","          # if res_df['low'].iloc[j - 1] >= res_df['sar2'].iloc[j - 1] and res_df['low'].iloc[j] < res_df['sar2'].iloc[j]:\n","            \n","          #   sub_ep = res_df['sar2'].iloc[j - 1]\n","\n","          #   if sub_ep > ep_list[-1]:\n","          #     ep_list.append(sub_ep)\n","          #     ep_idx_list.append(j)\n","\n","\n","          # -------------- ultimate tp -------------- #\n","          if not config.tp_set.non_tp:\n","            #            1. by level          #\n","            if config.tp_set.tp_type != 'MARKET':\n","\n","              for l_i, long_tp_ in enumerate(long_tps):\n","\n","                if res_df['high'].iloc[j] >= long_tp_.iloc[tp_j] and partial_tp_cnt == l_i:\n","                # if res_df['high'].iloc[j] >= long_tp.iloc[j]:\n","\n","                  if l_i == len(long_tps) - 1:\n","                    trade_done = 1\n","\n","                  partial_tp_cnt += 1\n","\n","                  #         dynamic tp        #\n","                  # if 0:\n","                  if long_tp_.iloc[j] != long_tp_.iloc[j - 1] and not config.tp_set.static_tp:\n","\n","                    #   tp limit 이 불가한 경우 = open 이 이미, tp 를 넘은 경우 # \n","                    # if res_df['open'].iloc[j] >= long_tp_.iloc[initial_i]:\n","                    if res_df['open'].iloc[j] >= long_tp_.iloc[j]:\n","\n","                      # tp = long_tp_.iloc[initial_i]\n","                      tp = res_df['open'].iloc[j]\n","\n","                      if trade_done:\n","                        tp_state_list.append(\"d-long_open\")\n","\n","                    \n","                    #   tp limit 이 가능한 경우 = open 이 아직, tp 를 넘지 않은 경우 # \n","                    else:\n","                      \n","                      # tp = long_tp_.iloc[initial_i]\n","                      tp = long_tp_.iloc[j]\n","                      # tp = res_df['open'].iloc[j]\n","                      \n","                      if trade_done:\n","                        tp_state_list.append(\"d-long_tp\")\n","\n","                  #         static tp         #\n","                  else:\n","\n","                    #   tp limit 이 불가한 경우 = open 이 이미, tp 를 넘은 경우 # \n","                    #   non_inversion 의 경우, short_tp 가 가능함   #\n","\n","                    if res_df['open'].iloc[j] >= long_tp_.iloc[tp_j]:\n","                    # if res_df['open'].iloc[j] >= long_tp_.iloc[initial_i]:\n","\n","                      # tp = long_tp_.iloc[initial_i]\n","                      tp = long_tp_.iloc[tp_j]\n","\n","                      # tp = res_df['open'].iloc[j]\n","\n","                      if trade_done:\n","                        tp_state_list.append(\"s-long_tp\")\n","\n","                    \n","                    #   tp limit 이 가능한 경우 = open 이 아직, tp 를 넘지 않은 경우 # \n","                    else:\n","                      \n","                      # tp = long_tp_.iloc[initial_i]\n","                      tp = long_tp_.iloc[tp_j]\n","\n","                      # tp = res_df['open'].iloc[j]\n","\n","                      if trade_done:\n","                        tp_state_list.append(\"s-long_tp\")         \n","                  \n","                  tp_list.append(tp)\n","                  tp_idx_list.append(j)\n","                  fee += config.init_set.limit_fee\n","\n","            #           2. by time        #\n","            else:\n","\n","              # -------------- sar tp -------------- #\n","              # if (res_df['low'].iloc[j] <= res_df['sar2'].iloc[j]) & \\\n","              #   (res_df['low'].iloc[j - 1] > res_df['sar2'].iloc[j - 1]) & \\\n","              #   (res_df['low'].iloc[j - 2] > res_df['sar2'].iloc[j - 2]):\n","              \n","              #       inversion     #\n","              # if (res_df['high'].iloc[j] >= res_df['sar2'].iloc[j]) & \\\n","              #   (res_df['high'].iloc[j - 1] < res_df['sar2'].iloc[j - 1]) & \\\n","              #   (res_df['high'].iloc[j - 2] < res_df['sar2'].iloc[j - 2]):\n","\n","\n","              # ----------- st long ----------- #\n","              # if res_df['close'].iloc[j] >= res_df['long_tp'].iloc[tp_j]:\n","\n","              # -------------- sar pb tp -------------- #\n","              # if res_df['high'].iloc[j] >= res_df['long_tp'].iloc[initial_i]:\n","\n","              # -------------- st tp -------------- #\n","              # if res_df['close'].iloc[j] < res_df['middle_line'].iloc[j]:\n","\n","              # -------------- fisher tp -------------- #\n","              # if entry[j] == -1:\n","              \n","              # -------------- timestamp -------------- #\n","              if np_timeidx[j] % config.ep_set.tf_entry == config.ep_set.tf_entry - 1:\n","                \n","                tp = res_df['close'].iloc[j]\n","                # tp = res_df['open'].iloc[j]\n","                trade_done = 1\n","\n","                if trade_done:\n","                  tp_state_list.append(\"long close tp\")\n","\n","                tp_list.append(tp) \n","                tp_idx_list.append(j)\n","                fee += config.init_set.market_fee\n","\n","\n","\n","          # -------------- out -------------- #\n","          if not trade_done and config.out_set.use_out and j != len(res_df) - 1:              \n","\n","            # -------------- macd -------------- #\n","            # if res_df['macd_hist3'].iloc[j] < 0:\n","            # # if res_df['macd_hist3'].iloc[i] > 0 and res_df['macd_hist3'].iloc[j] < 0:\n","\n","            # -------------- st config.out_set.retouch -------------- #\n","            # out = 1 상태면 동일 tick 에서 config.out_set.retouch 를 조사할 거기 때문에, 먼저 검사함\n","            # 그리고, out 기준이 close 라 이게 맞음 \n","            # close 가 long_out 보다 내려가있는 상태일테니 high 를 조사하는게 맞음           \n","            # if out and res_df['high'].iloc[j] >= long_out.iloc[out_j]:\n","            #   config.out_set.retouch = 1\n","\n","            \n","            # ------- 일정시간 이상, dynamic_out 적용 ------ #\n","            try:\n","              if j - out_idx >= config.out_set.retouch_out_period:\n","                static_long_out = res_df['long_out'].iloc[j]\n","            \n","            except Exception as e:\n","              pass\n","\n","              # ------- static out ------ #\n","            try:\n","              if out and res_df['high'].iloc[j] >= static_long_out:\n","                config.out_set.retouch = 1\n","            except Exception as e:\n","              pass\n","\n","              # ------- config.out_set.retouch out ------ #\n","            # if out and res_df['high'].iloc[j] >= long_out2.iloc[out_j]:\n","            #   config.out_set.retouch = 1\n","\n","\n","\n","            # -------------- st -------------- #\n","            # if res_df['close'].iloc[j] < res_df['middle_line'].iloc[j]:\n","            # if res_df['close'].iloc[j] < res_df['minor_ST3_Down'].iloc[j]:\n","            # if res_df['close'].iloc[j] < lower_middle.iloc[j]:\n","            # if res_df['close'].iloc[j] < res_df['minor_ST1_Down'].iloc[j]:\n","            if out == 0:\n","              if config.out_set.hl_out:\n","                if res_df['low'].iloc[j] <= res_df['long_out'].iloc[out_j]: # check out only once\n","                  out = 1\n","\n","              else:\n","                if res_df['close'].iloc[j] <= res_df['long_out'].iloc[out_j]: # check out only once\n","                  out = 1\n","\n","              # out_idx = j\n","              # static_long_out = long_out.iloc[out_j]\n","              # if config.out_set.second_out:\n","              # static_long_out = long_out.iloc[out_j] - res_df['st_gap'].iloc[out_j] * config.out_set.second_out_gap\n","\n","            # if out == 0 and res_df['low'].iloc[j] <= long_out.iloc[out_j]: # check out only once\n","            #   out = 1            \n","            \n","\n","\n","            # -------------- sma -------------- #\n","            # if res_df['close'].iloc[j] < res_df[sma].iloc[j]:\n","\n","            # -------------- sar -------------- #\n","            # if res_df['close'].iloc[j] < res_df['minor_ST3_Down'].iloc[j] \\\n","            #   or res_df['sar2'].iloc[j] >= res_df['low'].iloc[j]:\n","            # if res_df['close'].iloc[j] < long_out.iloc[initial_i]: # or \\\n","            #   #  res_df['close'].iloc[j] < res_df['sar2'].iloc[j]:\n","            #   #  res_df['sar2_uptrend'].iloc[j] == 0 or \\\n","            #   out = 1\n","            \n","            # if res_df['sar2_uptrend'].iloc[j] == 0:\n","\n","            #     if prev_sar is None:\n","            #       prev_sar = res_df['sar2'].iloc[j - 1]\n","                \n","            #     if res_df['close'].iloc[j] < prev_sar:\n","            #       out = 1\n","\n","            # else:\n","            #   if res_df['close'].iloc[j] < res_df['sar2'].iloc[j]:\n","            #     out = 1\n","\n","            # -------------- hl -------------- #\n","            # if res_df['close'].iloc[j] < long_out.iloc[tp_j]:\n","\n","            # -------------- stoch -------------- #\n","            # if res_df['stoch'].iloc[j - 2] <= res_df['stoch'].iloc[j - 1] and \\\n","            #   res_df['stoch'].iloc[j - 1] > res_df['stoch'].iloc[j] and \\\n","            #   res_df['stoch'].iloc[j - 1] >= stoch_upper:\n","            #   out = 1\n","\n","            # config.out_set.retouch 1 경우, config.out_set.retouch 조건도 있어야함\n","            if out:\n","              if config.out_set.retouch:\n","                if config.out_set.retouch:\n","                  pass\n","                else:\n","                    continue\n","\n","              else:\n","                pass\n","\n","              if config.out_set.price_restoration:\n","                tp = res_df['long_out'].iloc[out_j]\n","                if config.out_set.second_out:\n","                  tp = res_df['long_out2'].iloc[out_j]\n","\n","                # if res_df['close'].iloc[j] < tp: # 이 경우를 protect 하는건 insane 임\n","                # # if res_df['high'].iloc[j] < tp: # --> config.out_set.hl_out 사용시 이 조건은 valid 함\n","                #   tp = res_df['close'].iloc[j]\n","\n","              else:\n","\n","                if res_df['open'].iloc[j] <= res_df['long_out'].iloc[out_j]:\n","                  tp = res_df['open'].iloc[j]\n","                else:\n","                  if config.out_set.hl_out:\n","                    tp = res_df['long_out'].iloc[out_j]\n","                  else:\n","                    tp = res_df['close'].iloc[j]\n","\n","                # if not config.out_set.static_out:\n","                #   if res_df['open'].iloc[j] <= res_df['long_out'].iloc[out_j]: # dynamic close out 의 open 고려\n","                #     tp = res_df['open'].iloc[j]\n","                #   else:\n","                #     tp = res_df['close'].iloc[j]\n","\n","                # else:\n","                #   tp = res_df['close'].iloc[j]\n","\n","              if config.out_set.retouch: # out 과 open 비교\n","                if config.out_set.second_out:  # long_out = sell\n","                # config.out_set.second_out 은 기본적으로 limit 이라 이 구조가 가능함\n","                  if res_df['open'].iloc[j] >= res_df['long_out2'].iloc[out_j]: # dynamic_out 일 경우 고려해야함\n","                    tp = res_df['open'].iloc[j]\n","                else:\n","                  if res_df['open'].iloc[j] >= res_df['long_out'].iloc[out_j]: # dynamic_out 일 경우 고려해야함\n","                    tp = res_df['open'].iloc[j]\n","\n","                try:\n","                  if res_df['open'].iloc[j] >= static_long_out:\n","                    tp = res_df['open'].iloc[j]\n","                  else:\n","                    tp = static_long_out\n","                except Exception as e:\n","                  pass\n","\n","              # tp = res_df['open'].iloc[j]\n","              tp_state_list.append(\"long close_out\")\n","              trade_done = 1\n","\n","              tp_list.append(tp)\n","              tp_idx_list.append(j)\n","              fee += config.init_set.market_fee\n","\n","          \n","          # -------------- non tp -------------- #\n","          if j == len(res_df) - 1:\n","            trade_done = 1\n","            tp = res_df['close'].iloc[j]\n","            tp_list.append(tp) \n","            tp_idx_list.append(j)\n","            fee += config.init_set.market_fee\n","\n","\n","          if trade_done:\n","\n","            # --------------- tp_ratio info --------------- #\n","            try:\n","              done_tp = res_df['long_tp'].iloc[ep_j]\n","              done_out = res_df['long_out'].iloc[ep_j]\n","\n","              if done_out >= ep_list[0]: # loss >= 1\n","                tp_ratio = np.nan\n","                dr = np.nan\n","              else:\n","                tp_ratio = ((done_tp - ep_list[0] - tp_fee * ep_list[0]) / (ep_list[0] - done_out + out_fee * ep_list[0]))                \n","                dr = ((done_tp - ep_list[0]) / (ep_list[0] - done_out))                \n","\n","            except Exception as e:\n","              # pass \n","              tp_ratio = np.nan\n","            \n","            tp_ratio_list.append(tp_ratio)\n","            long_tp_ratio_list.append(tp_ratio)\n","            dr_list.append(dr)\n","            long_dr_list.append(dr)\n","\n","\n","            qty_list = []\n","            temp_pr_list = []\n","            r_qty = 1\n","            for q_i in range(len(tp_list) - 1, -1, -1):\n","\n","              if len(tp_list) == 1:\n","                temp_qty = r_qty\n","              else:\n","                if q_i !=0:\n","                  temp_qty = r_qty / config.tp_set.partial_qty_divider\n","                else:\n","                  temp_qty = r_qty\n","\n","              # temp_pr = (tp_list[q_i] / ep_list[0] - fee - 1) * temp_qty\n","              temp_pr = (tp_list[q_i] / ep_list[0] - fee - 1) * temp_qty * config.lvrg_set.leverage\n","              r_qty -= temp_qty\n","\n","              temp_pr_list.append(temp_pr)\n","\n","            temp_pr = sum(temp_pr_list) + 1\n","\n","            # -------------------- sub ep -> pr calc -------------------- #\n","            if len(ep_list) > 1:\n","            \n","              p_ep_pr = []\n","              for sub_ep_ in ep_list:\n","                sub_pr = (tp / sub_ep_ - fee - 1) * config.lvrg_set.leverage\n","                p_ep_pr.append(sub_pr)\n","\n","              temp_pr = sum(p_ep_pr) + 1\n","\n","              print(\"temp_pr :\", temp_pr)\n","\n","            # ------------ hedge + non_hedge pr summation ------------ #\n","            #         hedge pr direction is opposite to the origin       #\n","            hedge_pr = 1\n","            if hedge_cnt == 0:\n","\n","              #       hedge tp      #\n","              h_tp = res_df['close'].iloc[j]\n","              hedge_pr = (h_ep / h_tp - fee - 1) * config.lvrg_set.leverage  # hedge short\n","              temp_pr += hedge_pr\n","              h_j = j\n","\n","\n","            ll = min(res_df['low'].iloc[i:j + 1])\n","            long_liq = (ll / ep_list[0] - fee - 1) * config.lvrg_set.leverage + 1\n","\n","            if j != len(res_df) - 1:\n","\n","              ep_tp_list.append((ep_list, tp_list))\n","              trade_list.append((ep_idx_list, tp_idx_list))\n","\n","              liqd_list.append(long_liq)\n","              long_liqd_list.append(long_liq)\n","\n","              h_ep_tp_list.append((h_ep, h_tp))        \n","              h_trade_list.append([initial_i, h_i, h_j])                \n","\n","              pr_list.append(temp_pr)\n","              fee_list.append(fee)\n","              long_list.append(temp_pr)\n","              long_fee_list.append(fee)\n","\n","              h_pr_list.append(hedge_pr)\n","              h_long_list.append(hedge_pr)                    \n","\n","              i = j\n","              break\n","            \n","            else:\n","\n","              # ep_tp_list.append((ep_list, tp_list))\n","              # trade_list.append((ep_idx_list, tp_idx_list))\n","              \n","              # pr_list 를 넣지 않을거니까, open_list 에서 해당 idx 는 pop\n","              open_list.pop()\n","              zone_list.pop()\n","              side_list.pop()\n","          \n","              #         tp 미체결 survey        #\n","              nontp_liqd_list.append(long_liq)\n","              nontp_long_liqd_list.append(long_liq)\n","              nontp_long_indexs.append(i)\n","              nontp_long_ep_list.append(ep_list[0])\n","              \n","              nontp_long_pr = (tp / ep_list[0] - fee - 1) * config.lvrg_set.leverage + 1\n","              nontp_pr_list.append(nontp_long_pr)\n","              nontp_long_pr_list.append(nontp_long_pr)\n","\n","            if len(open_list) > len(trade_list):\n","              print('debug from index :', i)\n","              print(len(open_list), len(trade_list))\n","              print(\"len(res_df) :\", len(res_df))\n","              assert len(open_list) == len(trade_list), 'stopped'\n","      \n","      i += 1  # if entry starts with prev trade's close, do not use it ! \n","      # print(\"i in end :\", i)\n","      if i >= len(res_df):\n","        break\n","\n","\n","\n","    # -------------------- result analysis -------------------- #\n","    # try:\n","    print(\"elapsed_time :\", time.time() - start_0)\n","\n","    plt.style.use('default')\n","    # mpl.rcParams.update(mpl.rcParamsDefault)\n","\n","    plt.figure(figsize=(16, 12))\n","    # plt.figure(figsize=(12, 8))\n","    # plt.figure(figsize=(10, 6))\n","    plt.suptitle(key)\n","\n","    try:\n","      np_pr = np.array(pr_list)\n","      np_zone_list = np.array(zone_list)\n","      # np_pr_list = np.array(pr_list)\n","      np_side_list = np.array(side_list)\n","\n","      t_w = np.sum(np.where((np_zone_list == 't') & (np_pr > 1), 1, 0))\n","      c_w = np.sum(np.where((np_zone_list == 'c') & (np_pr > 1), 1, 0))\n","      t_ls = np.sum(np.where((np_zone_list == 't') & (np_pr < 1), 1, 0))\n","      c_ls = np.sum(np.where((np_zone_list == 'c') & (np_pr < 1), 1, 0))\n","\n","      # np_pr = (np.array(pr_list) - 1) * config.lvrg_set.leverage + 1\n","\n","      # ----- fake_pr ----- #\n","      # np_pr = np.where(np_pr > 1, 1 + (np_pr - 1) * 3, np_pr)\n","\n","      total_pr = np.cumprod(np_pr)\n","\n","      for_sum_pr = np_pr - 1\n","      for_sum_pr[0] = 1\n","      sum_pr = np.cumsum(for_sum_pr)\n","      sum_pr = np.where(sum_pr < 0, 0, sum_pr)\n","\n","      wr = len(np_pr[np_pr > 1]) / len(np_pr[np_pr != 1])\n","\n","      # mean_profit = np.mean(np_pr[np_pr > 1])\n","      # mean_loss = np.mean(np_pr[np_pr < 1])\n","      # cumprod_profit = np.cumprod(np_pr[np_pr > 1])[-1]\n","      # cumprod_loss = np.cumprod(np_pr[np_pr < 1])[-1]\n","      # pr_tr = cumprod_profit * cumprod_loss\n","\n","      np_tp_ratio_list = np.array(tp_ratio_list) # 초기에 tr 을 정하는거라 mean 사용하는게 맞음\n","      mean_tr = np.mean(np_tp_ratio_list[np.isnan(np_tp_ratio_list) == 0])\n","\n","      np_dr_list = np.array(dr_list) # 초기에 tr 을 정하는거라 mean 사용하는게 맞음\n","      mean_dr = np.mean(np_dr_list[np.isnan(np_dr_list) == 0])\n","\n","\n","      # pr_gap = (np_pr - 1) / config.lvrg_set.leverage + fee\n","      # tp_gap_ = pr_gap[pr_gap > 0]\n","      # # mean_config.tr_set.tp_gap = np.mean(pr_gap[pr_gap > 0])\n","      # mean_ls_gap = np.mean(pr_gap[pr_gap < 0])\n","\n","      # ---- profit fee ratio ---- #\n","      # mean_pgfr = np.mean((tp_gap_ - fee) / abs(tp_gap_ + fee))\n","\n","      # plt.subplot(121)\n","      plt.subplot(231)\n","      plt.plot(total_pr)\n","      plt.plot(sum_pr, color='gold')\n","      if len(nontp_liqd_list) != 0:\n","        plt.title(\"wr : %.3f\\nlen(td) : %s\\nmin_pr : %.3f\\nacc_pr : %.3f\\n sum_pr : %.3f\"\n","                  % (wr, len(np_pr[np_pr != 1]), np.min(np_pr), total_pr[-1], sum_pr[-1]) + \\\n","                  \"\\n leverage %s\\nliqd : %.3f\\nmean_tr : %.3f\\n mean_dr : %.3f\\n nontp_liqd_cnt : %s\\nnontp_liqd : %.3f\\nontp_liqd_pr : %.3f\\n tw cw tls cls : %s %s %s %s\" \n","                  % (config.lvrg_set.leverage, min(liqd_list), mean_tr, mean_dr, len(nontp_liqd_list), \n","                     min(nontp_liqd_list), min(nontp_pr_list), t_w, c_w, t_ls, c_ls),\n","                  position=title_position)\n","      else:\n","        plt.title(\"wr : %.3f\\nlen(td) : %s\\nmin_pr : %.3f\\nacc_pr : %.3f\\n sum_pr : %.3f\" \n","                  % (wr, len(np_pr[np_pr != 1]), np.min(np_pr), total_pr[-1], sum_pr[-1]) + \\\n","                  \"\\n leverage %s\\nliqd : %.3f\\nmean_tr : %.3f\\n mean_dr : %.3f\\n nontp_liqd_cnt : %s\\n tw cw tls cls : %s %s %s %s\"\n","                  % (config.lvrg_set.leverage, min(liqd_list), mean_tr, mean_dr, len(nontp_liqd_list), t_w, c_w, t_ls, c_ls), \n","                  position=title_position)\n","      # plt.show()\n","\n","      survey_df.iloc[survey_i] = wr, len(np_pr[np_pr != 1]), np.min(np_pr), total_pr[-1], sum_pr[-1], min(liqd_list), mean_tr, mean_dr     \n","\n","      print('supblot231 passed')\n","\n","    except Exception as e:\n","      print(\"error in 231 :\", e)\n","\n","\n","    try:\n","      #         short only      #\n","      short_np_pr = np.array(short_list)\n","\n","      total_short_pr = np.cumprod(short_np_pr)\n","      \n","      short_for_sum_pr = short_np_pr - 1\n","      short_for_sum_pr[0] = 1\n","      short_sum_pr = np.cumsum(short_for_sum_pr)\n","      short_sum_pr = np.where(short_sum_pr < 0, 0, short_sum_pr)\n","\n","      short_wr = len(short_np_pr[short_np_pr > 1]) / len(short_np_pr[short_np_pr != 1])\n","      \n","      t_w_s = np.sum(np.where((np_zone_list == 't') & (np_pr > 1) & (np_side_list == 's'), 1, 0))\n","      c_w_s = np.sum(np.where((np_zone_list == 'c') & (np_pr > 1) & (np_side_list == 's'), 1, 0))\n","      t_ls_s = np.sum(np.where((np_zone_list == 't') & (np_pr < 1) & (np_side_list == 's'), 1, 0))\n","      c_ls_s = np.sum(np.where((np_zone_list == 'c') & (np_pr < 1) & (np_side_list == 's'), 1, 0))\n","      # short_cumprod_profit = np.cumprod(short_np_pr[short_np_pr > 1])[-1]\n","      # short_cumprod_loss = np.cumprod(short_np_pr[short_np_pr < 1])[-1]\n","      # short_pr_tr = short_cumprod_profit * short_cumprod_loss\n","\n","      np_short_tp_ratio_list = np.array(short_tp_ratio_list)\n","      mean_short_tr = np.mean(np_short_tp_ratio_list[np.isnan(np_short_tp_ratio_list) == 0])\n","      \n","      np_short_dr_list = np.array(short_dr_list)\n","      mean_short_dr = np.mean(np_short_dr_list[np.isnan(np_short_dr_list) == 0])\n","      \n","      # short_pr_gap = (short_np_pr - 1) / config.lvrg_set.leverage + fee\n","      # short_tp_gap = short_pr_gap[short_pr_gap > 0]\n","      # # mean_short_tp_gap = np.mean(short_pr_gap[short_pr_gap > 0])\n","      # # mean_short_ls_gap = np.mean(short_pr_gap[short_pr_gap < 0])\n","\n","      # mean_short_pgfr = np.mean((short_tp_gap - fee) / abs(short_tp_gap + fee))\n","      \n","      plt.subplot(232)\n","      plt.plot(total_short_pr)\n","      plt.plot(short_sum_pr, color='gold')\n","      if len(nontp_short_liqd_list) != 0:   \n","\n","        max_nontp_short_term = len(res_df) - nontp_short_indexs[0]\n","        \n","        plt.title(\"wr : %.3f\\nlen(short_td) : %s\\nmin_pr : %.3f\\nacc_pr : %.3f\\n sum_pr : %.3f\"\n","                  % (short_wr, len(short_np_pr[short_np_pr != 1]), np.min(short_np_pr), total_short_pr[-1], short_sum_pr[-1]) + \\\n","                  \"\\n leverage %s\\nliqd : %.3f\\nmean_tr : %.3f\\n mean_dr : %.3f\\n nontp_short_liqd_cnt : %s\\nnontp_short_liqd : %.3f\\nontp_short_liqd_pr : %.3f\\nmax_nontp_short_term : %s\\n tw cw tls cls : %s %s %s %s\"\n","                  % (config.lvrg_set.leverage, min(short_liqd_list), mean_short_tr, mean_short_dr, \n","                     len(nontp_short_liqd_list), min(nontp_short_liqd_list), min(nontp_short_pr_list), max_nontp_short_term, t_w_s, c_w_s, t_ls_s, c_ls_s),\n","                  position=title_position)\n","      else:\n","        plt.title(\"wr : %.3f\\nlen(short_td) : %s\\nmin_pr : %.3f\\nacc_pr : %.3f\\n sum_pr : %.3f\"\n","                  % (short_wr, len(short_np_pr[short_np_pr != 1]), np.min(short_np_pr), total_short_pr[-1], short_sum_pr[-1]) + \\\n","                  \"\\n leverage %s\\nliqd : %.3f\\nmean_tr : %.3f\\n mean_dr : %.3f\\n nontp_short_liqd_cnt : %s\\n tw cw tls cls : %s %s %s %s\" \n","                  % (config.lvrg_set.leverage, min(short_liqd_list), mean_short_tr, mean_short_dr, len(nontp_short_liqd_list), t_w_s, c_w_s, t_ls_s, c_ls_s),\n","                  position=title_position)\n","\n","      short_survey_df.iloc[survey_i] = short_wr, len(short_np_pr[short_np_pr != 1]), np.min(short_np_pr), total_short_pr[-1], short_sum_pr[-1], min(short_liqd_list), mean_short_tr, mean_short_dr     \n","\n","      print('supblot232 passed')\n","    \n","    except Exception as e:\n","      print(\"error in 232 :\", e)\n","\n","    try:\n","      #         long only      #\n","      long_np_pr = np.array(long_list)\n","      # long_np_pr = (np.array(long_list) - 1) * config.lvrg_set.leverage + 1\n","\n","      total_long_pr = np.cumprod(long_np_pr)\n","      \n","      long_for_sum_pr = long_np_pr - 1\n","      long_for_sum_pr[0] = 1\n","      long_sum_pr = np.cumsum(long_for_sum_pr)\n","      long_sum_pr = np.where(long_sum_pr < 0, 0, long_sum_pr)\n","\n","      long_wr = len(long_np_pr[long_np_pr > 1]) / len(long_np_pr[long_np_pr != 1])\n","\n","      t_w_l = np.sum(np.where((np_zone_list == 't') & (np_pr > 1) & (np_side_list == 'l'), 1, 0))\n","      c_w_l = np.sum(np.where((np_zone_list == 'c') & (np_pr > 1) & (np_side_list == 'l'), 1, 0))\n","      t_ls_l = np.sum(np.where((np_zone_list == 't') & (np_pr < 1) & (np_side_list == 'l'), 1, 0))\n","      c_ls_l = np.sum(np.where((np_zone_list == 'c') & (np_pr < 1) & (np_side_list == 'l'), 1, 0))\n","      # long_cumprod_profit = np.cumprod(long_np_pr[long_np_pr > 1])[-1]\n","      # long_cumprod_loss = np.cumprod(long_np_pr[long_np_pr < 1])[-1]\n","      # long_pr_tr = long_cumprod_profit * long_cumprod_loss\n","\n","      np_long_tp_ratio_list = np.array(long_tp_ratio_list)\n","      mean_long_tr = np.mean(np_long_tp_ratio_list[np.isnan(np_long_tp_ratio_list) == 0])\n","      \n","      np_long_dr_list = np.array(long_dr_list)\n","      mean_long_dr = np.mean(np_long_dr_list[np.isnan(np_long_dr_list) == 0])\n","\n","      # long_pr_gap = (long_np_pr - 1) / config.lvrg_set.leverage + fee\n","      # long_tp_gap = long_pr_gap[long_pr_gap > 0]\n","      # # mean_long_tp_gap = np.mean(long_pr_gap[long_pr_gap > 0])\n","      # # mean_long_ls_gap = np.mean(long_pr_gap[long_pr_gap < 0])\n","\n","      # mean_long_pgfr = np.mean((long_tp_gap - fee) / abs(long_tp_gap + fee))\n","\n","      plt.subplot(233)\n","      plt.plot(total_long_pr)\n","      plt.plot(long_sum_pr, color='gold')\n","      if len(nontp_long_liqd_list) != 0:\n","\n","        max_nontp_long_term = len(res_df) - nontp_long_indexs[0]\n","\n","        plt.title(\"wr : %.3f\\nlen(long_td) : %s\\nmin_pr : %.3f\\nacc_pr : %.3f\\n sum_pr : %.3f\"\n","                  % (long_wr, len(long_np_pr[long_np_pr != 1]), np.min(long_np_pr), total_long_pr[-1], long_sum_pr[-1]) + \\\n","                  \"\\n leverage %s\\nliqd : %.3f\\nmean_tr : %.3f\\n mean_dr : %.3f\\n nontp_long_liqd_cnt : %s\\nnontp_long_liqd : %.3f\\nontp_long_liqd_pr : %.3f\\nmax_nontp_long_term : %s\\n tw cw tls cls : %s %s %s %s\"\n","                  % (config.lvrg_set.leverage, min(long_liqd_list), mean_long_tr, mean_long_dr, \n","                     len(nontp_long_liqd_list), min(nontp_long_liqd_list), min(nontp_long_pr_list), max_nontp_long_term, t_w_l, c_w_l, t_ls_l, c_ls_l),\n","                  position=title_position)\n","      else:\n","        plt.title(\"wr : %.3f\\nlen(long_td) : %s\\nmin_pr : %.3f\\nacc_pr : %.3f\\n sum_pr : %.3f\"\n","                  % (long_wr, len(long_np_pr[long_np_pr != 1]), np.min(long_np_pr), total_long_pr[-1], long_sum_pr[-1]) + \\\n","                  \"\\n leverage %s\\nliqd : %.3f\\nmean_tr : %.3f\\n mean_dr : %.3f\\n nontp_long_liqd_cnt : %s\\n tw cw tls cls : %s %s %s %s\" \n","                  % (config.lvrg_set.leverage, min(long_liqd_list), mean_long_tr, mean_long_dr, len(nontp_long_liqd_list), t_w_l, c_w_l, t_ls_l, c_ls_l),\n","                  position=title_position)\n","\n","      long_survey_df.iloc[survey_i] = long_wr, len(long_np_pr[long_np_pr != 1]), np.min(long_np_pr), total_long_pr[-1], long_sum_pr[-1], min(long_liqd_list), mean_long_tr, mean_long_dr     \n","\n","      print('supblot233 passed')\n","\n","    except Exception as e:\n","      print(\"error in 233 :\", e)\n","\n","\n","    try:\n","      #     reversion adjustment      #\n","      # rev_np_pr = 1 / (np.array(pr_list) + fee) - fee\n","      rev_fee = tp_fee + out_fee - np.array(fee_list)\n","      rev_np_pr = (1 / ((np.array(pr_list) - 1) / config.lvrg_set.leverage + np.array(fee_list) + 1) - rev_fee - 1) * config.lvrg_set.leverage + 1\n","      # rev_np_pr = (1 / (np.array(pr_list) + fee) - fee - 1) * config.lvrg_set.leverage + 1\n","          \n","      rev_total_pr = np.cumprod(rev_np_pr)\n","      rev_wr = len(rev_np_pr[rev_np_pr > 1]) / len(rev_np_pr[rev_np_pr != 1])\n","\n","      rev_total_for_sum_pr = rev_np_pr - 1\n","      rev_total_for_sum_pr[0] = 1\n","      rev_total_sum_pr = np.cumsum(rev_total_for_sum_pr)\n","      rev_total_sum_pr = np.where(rev_total_sum_pr < 0, 0, rev_total_sum_pr)\n","\n","      # plt.subplot(122)\n","      plt.subplot(234)\n","      plt.plot(rev_total_pr)\n","      plt.plot(rev_total_sum_pr, color='gold')\n","\n","      plt.title(\"wr : %.3f\\nmin_pr : %.3f\\nacc_pr : %.3f\\n sum_pr : %.3f\" % (rev_wr, np.min(rev_np_pr), rev_total_pr[-1], rev_total_sum_pr[-1]))\n","      \n","      rev_survey_df.iloc[survey_i] = rev_wr, np.min(rev_np_pr), rev_total_pr[-1], rev_total_sum_pr[-1]\n","\n","    except Exception as e:\n","      print(\"error in 234 :\", e)\n","\n","    try:\n","      #         short       #\n","      # rev_short_np_pr = 1 / (np.array(short_list) + fee) - fee\n","      rev_short_fee = tp_fee + out_fee - np.array(short_fee_list)\n","      rev_short_np_pr = (1 / ((np.array(short_list) - 1) / config.lvrg_set.leverage + np.array(short_fee_list) + 1) - rev_short_fee - 1) * config.lvrg_set.leverage + 1\n","      # rev_short_np_pr = (1 / (np.array(short_list) + fee) - fee - 1) * config.lvrg_set.leverage + 1\n","          \n","      rev_total_short_pr = np.cumprod(rev_short_np_pr)\n","      rev_short_wr = len(rev_short_np_pr[rev_short_np_pr > 1]) / len(rev_short_np_pr[rev_short_np_pr != 1])\n","\n","      rev_short_for_sum_pr = rev_short_np_pr - 1\n","      rev_short_for_sum_pr[0] = 1\n","      rev_short_sum_pr = np.cumsum(rev_short_for_sum_pr)\n","      rev_short_sum_pr = np.where(rev_short_sum_pr < 0, 0, rev_short_sum_pr)\n","\n","      # plt.subplot(122)\n","      plt.subplot(235)\n","      plt.plot(rev_total_short_pr)\n","      plt.plot(rev_short_sum_pr, color='gold')\n","\n","      plt.title(\"wr : %.3f\\nmin_pr : %.3f\\nacc_pr : %.3f\\n sum_pr : %.3f\" % (rev_short_wr, np.min(rev_short_np_pr), rev_total_short_pr[-1], rev_short_sum_pr[-1]))\n","\n","      rev_short_survey_df.iloc[survey_i] = rev_short_wr, np.min(rev_short_np_pr), rev_total_short_pr[-1], rev_short_sum_pr[-1]\n","\n","    except Exception as e:\n","      print(\"error in 235 :\", e)\n","\n","    try:\n","      #         long       #\n","      # rev_long_np_pr = 1 / (np.array(long_list) + fee) - fee\n","      rev_long_fee = tp_fee + out_fee - np.array(long_fee_list)\n","      rev_long_np_pr = (1 / ((np.array(long_list) - 1) / config.lvrg_set.leverage + np.array(long_fee_list) + 1) - rev_long_fee - 1) * config.lvrg_set.leverage + 1\n","          \n","      rev_total_long_pr = np.cumprod(rev_long_np_pr)\n","      rev_long_wr = len(rev_long_np_pr[rev_long_np_pr > 1]) / len(rev_long_np_pr[rev_long_np_pr != 1])\n","\n","      rev_long_for_sum_pr = rev_long_np_pr - 1\n","      rev_long_for_sum_pr[0] = 1\n","      rev_long_sum_pr = np.cumsum(rev_long_for_sum_pr)\n","      rev_long_sum_pr = np.where(rev_long_sum_pr < 0, 0, rev_long_sum_pr)\n","\n","      # plt.subplot(122)\n","      plt.subplot(236)\n","      plt.plot(rev_total_long_pr)\n","      plt.plot(rev_long_sum_pr, color='gold')\n","\n","      plt.title(\"wr : %.3f\\nmin_pr : %.3f\\nacc_pr : %.3f\\n sum_pr : %.3f\" % (rev_long_wr, np.min(rev_long_np_pr), rev_total_long_pr[-1], rev_long_sum_pr[-1]))\n","      \n","      rev_long_survey_df.iloc[survey_i] = rev_long_wr, np.min(rev_long_np_pr), rev_total_long_pr[-1], rev_long_sum_pr[-1]\n","      \n","    except Exception as e:\n","      print(\"error in 236 :\", e)\n","\n","    if show_plot:\n","      plt.show()\n","    \n","\n","    try:\n","\n","      h_np_pr = np.array(h_pr_list)\n","      # h_rev_np_pr = 1 / (np.array(h_pr_list) + fee) - fee    # define, for plot_check below cell\n","      h_rev_np_pr = (1 / ((np.array(h_pr_list) - 1) / config.lvrg_set.leverage + np.array(fee_list) + 1) - np.array(fee_list) - 1) * config.lvrg_set.leverage + 1\n","\n","      # --------------------- h pr plot --------------------- #\n","      if len(h_np_pr[h_np_pr != 1]) != 0:\n","\n","        plt.figure(figsize=(16, 12))\n","        plt.suptitle(key + \" hedge\")\n","\n","        h_total_pr = np.cumprod(h_np_pr)\n","        h_wr = len(h_np_pr[h_np_pr > 1]) / len(h_np_pr[h_np_pr != 1])\n","\n","        # plt.subplot(121)\n","        plt.subplot(231)\n","        plt.plot(h_total_pr)\n","        plt.title(\"wr : %.3f\\nmin_pr : %.3f\\nacc_pr : %.3f\\n leverage %s\" % (h_wr, np.min(h_np_pr), h_total_pr[-1], config.lvrg_set.leverage))\n","        # plt.show()\n","\n","        #         short only      #\n","        h_short_np_pr = np.array(h_short_list)\n","\n","        h_total_short_pr = np.cumprod(h_short_np_pr)\n","        h_short_wr = len(h_short_np_pr[h_short_np_pr > 1]) / len(h_short_np_pr[h_short_np_pr != 1])\n","        \n","        plt.subplot(232)\n","        plt.plot(h_total_short_pr)\n","        plt.title(\"wr : %.3f\\nmin_pr : %.3f\\nacc_pr : %.3f\\n leverage %s\" % (h_short_wr, np.min(h_short_np_pr), h_total_short_pr[-1], config.lvrg_set.leverage))\n","\n","        #         long only      #\n","        h_long_np_pr = np.array(h_long_list)\n","\n","        h_total_long_pr = np.cumprod(h_long_np_pr)\n","        h_long_wr = len(h_long_np_pr[h_long_np_pr > 1]) / len(h_long_np_pr[h_long_np_pr != 1])\n","        \n","        plt.subplot(233)\n","        plt.plot(h_total_long_pr)\n","        plt.title(\"wr : %.3f\\nmin_pr : %.3f\\nacc_pr : %.3f\\n leverage %s\" % (h_long_wr, np.min(h_long_np_pr), h_total_long_pr[-1], config.lvrg_set.leverage))\n","\n","\n","        #     reversion adjustment      #\n","            \n","        h_rev_total_pr = np.cumprod(h_rev_np_pr)\n","        h_rev_wr = len(h_rev_np_pr[h_rev_np_pr > 1]) / len(h_rev_np_pr[h_rev_np_pr != 1])\n","\n","        # plt.subplot(122)\n","        plt.subplot(234)\n","        plt.plot(h_rev_total_pr)\n","        plt.title(\"wr : %.3f\\nmin_pr : %.3f\\nacc_pr : %.3f\\n leverage %s\" % (h_rev_wr, np.min(h_rev_np_pr), h_rev_total_pr[-1], config.lvrg_set.leverage))\n","\n","        #         short       #\n","        # h_rev_short_np_pr = 1 / (np.array(h_short_list) + fee) - fee\n","        h_rev_short_np_pr =  (1 / ((np.array(h_short_list) - 1) / config.lvrg_set.leverage + np.array(short_fee_list) + 1) - np.array(short_fee_list) - 1) * config.lvrg_set.leverage + 1\n","           \n","        h_rev_total_short_pr = np.cumprod(h_rev_short_np_pr)\n","        h_rev_short_wr = len(h_rev_short_np_pr[h_rev_short_np_pr > 1]) / len(h_rev_short_np_pr[h_rev_short_np_pr != 1])\n","\n","        # plt.subplot(122)\n","        plt.subplot(235)\n","        plt.plot(h_rev_total_short_pr)\n","        plt.title(\"wr : %.3f\\nmin_pr : %.3f\\nacc_pr : %.3f\\n leverage %s\" % (h_rev_short_wr, np.min(h_rev_short_np_pr), h_rev_total_short_pr[-1], config.lvrg_set.leverage))\n","\n","        #         long       #\n","        # h_rev_long_np_pr = 1 / (np.array(h_long_list) + fee) - fee\n","        h_rev_long_np_pr =  (1 / ((np.array(h_long_list) - 1) / config.lvrg_set.leverage + np.array(long_fee_list) + 1) - np.array(long_fee_list) - 1) * config.lvrg_set.leverage + 1\n","            \n","        h_rev_total_long_pr = np.cumprod(h_rev_long_np_pr)\n","        h_rev_long_wr = len(h_rev_long_np_pr[h_rev_long_np_pr > 1]) / len(h_rev_long_np_pr[h_rev_long_np_pr != 1])\n","\n","        # plt.subplot(122)\n","        plt.subplot(236)\n","        plt.plot(h_rev_total_long_pr)\n","        plt.title(\"wr : %.3f\\nmin_pr : %.3f\\nacc_pr : %.3f\\n leverage %s\" % (h_rev_long_wr, np.min(h_rev_long_np_pr), h_rev_total_long_pr[-1], config.lvrg_set.leverage))\n","        \n","        if show_plot:\n","          plt.show()\n","          \n","    except Exception as e:\n","      print('error in h_pr plot :', e)   \n","    \n","    print()\n","\n","\n","  # break # pair loop"],"execution_count":40,"outputs":[{"output_type":"display_data","data":{"text/plain":"Output hidden; open in https://colab.research.google.com to view."},"metadata":{}}]},{"cell_type":"markdown","metadata":{"id":"MteLY9PS2ZeK"},"source":["##### check statistical significance"]},{"cell_type":"code","metadata":{"id":"NzbWuwSw2jaj","colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"status":"ok","timestamp":1637674481914,"user_tz":-540,"elapsed":5586,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"2f2b536f-a17b-4739-a87b-6c29ebe7bc6d"},"source":["# print(survey_df)\n","\n","plt.style.use('dark_background')\n","\n","title_name_list = [[\"total\", \"short\", \"long\"], [\"rev_total\", \"rev_short\", \"rev_long\"]]\n","survey_dfs_list = [[survey_df, short_survey_df, long_survey_df], [rev_survey_df, rev_short_survey_df, rev_long_survey_df]]\n","# title_name = \n","# survey_df_list = \n","\n","space_ = \" \" * 140\n","\n","for d_idx, (title_name, survey_dfs) in enumerate(zip(title_name_list, survey_dfs_list)):\n","\n","  fig = plt.figure(figsize=(30, 10))\n","\n","  gs = gridspec.GridSpec(nrows=1, # row 몇 개 \n","                          ncols=3, # col 몇 개 \n","                          # height_ratios=[1, 1, 1]\n","                        )\n","\n","  # gs = fig.add_gridspec(1, 3, wspace=0, hspace=0)\n","\n","  if d_idx == 0:\n","    nrows, ncols, h_r = 3, 3, [1, 1, 1]\n","  else:\n","    nrows, ncols, h_r = 2, 2, [1, 1]\n","\n","  for gs_idx, (title, s_df) in enumerate(zip(title_name, survey_dfs)):  \n","\n","\n","    inner_gs = gs[gs_idx].subgridspec(nrows=nrows, # row 몇 개 \n","                          ncols=ncols, # col 몇 개 \n","                          height_ratios=h_r\n","                        )\n","\n","    for col_idx, s_cols in enumerate(s_df.columns):\n","      plt.subplot(inner_gs[col_idx])\n","      plt.plot(s_df[s_cols])\n","      plt.title(s_cols)\n","\n","  # plt.suptitle(\"total\" + \" \" * 140 + \"short\" + \" \" * 140 + \"long\")\n","  plt.suptitle(space_.join(title_name))\n","  plt.show()\n","  print(\"\\n\")"],"execution_count":41,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 3000x1000 with 24 Axes>"]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\n","\n"]},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 3000x1000 with 12 Axes>"]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\n","\n"]}]},{"cell_type":"markdown","metadata":{"id":"GZ0y_x9ugOUD"},"source":["##### check dent_detph"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":676},"id":"ETgm1avml0fE","executionInfo":{"status":"ok","timestamp":1637297839515,"user_tz":-540,"elapsed":593,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"9df7a819-691a-4fdc-93bb-d6489812419b"},"source":["target_pr = total_long_pr\n","\n","plt.figure(figsize=(4, 8))\n","gs = gridspec.GridSpec(nrows=2,\n","                        ncols=1,\n","                        height_ratios=[1, 1]\n","                      )\n","\n","plt.subplot(gs[0])\n","plt.plot(target_pr)\n","h_roll = pd.Series(target_pr).rolling(10).max()\n","plt.plot(h_roll)\n","# plt.show()\n","# print()\n","\n","plt.subplot(gs[1])\n","dent_depth = target_pr / h_roll\n","plt.plot(dent_depth)\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 400x800 with 2 Axes>"]},"metadata":{}}]},{"cell_type":"markdown","metadata":{"id":"v2Gjv019AEz8"},"source":["##### check frequency "]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":464},"id":"atdBjod9-e21","executionInfo":{"status":"ok","timestamp":1636862363013,"user_tz":-540,"elapsed":720,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"5925d52a-da23-40cd-a9b3-6c0323024bc0"},"source":["total_len = np.zeros(len(res_df))\n","print(total_len)\n","np_trade_list = np.array(trade_list)\n","# print(np_trade_list.shape)\n","print(np_trade_list[:, [0], [0]].shape)\n","total_len[np_trade_list[:, [0], [0]]] = 1\n","\n","plt.plot(total_len)\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[0. 0. 0. ... 0. 0. 0.]\n","(70, 1)\n"]},{"output_type":"display_data","data":{"image/png":"iVBORw0KGgoAAAANSUhEUgAAAiMAAAGdCAYAAADAAnMpAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAAPYQAAD2EBqD+naQAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAAgAElEQVR4nO3de3RU5b3/8U8SSAJiAhZJAGOD1YpUuQglJ15au0yNyqG1l1UOuoRDLa0Kv6XmHC94Aamt4XiUYluQKqX0nFUF9QhqQSyNBgQiSCAIcpOb4ZaEWy4ESCCzf39Exkwy98zOs/fwfq2VtZI9z372dz/P3pPv7JnZ3wTLsiwBAAAYkmg6AAAAcH4jGQEAAEaRjAAAAKNIRgAAgFEkIwAAwCiSEQAAYBTJCAAAMIpkBAAAGNXJdADh8Hg8OnjwoC688EIlJCSYDgcAAITBsizV1dWpT58+SkwMfP3DFcnIwYMHlZWVZToMAAAQhX379umSSy4J+LgrkpELL7xQUvPOpKWlGY4GAACEo7a2VllZWd7/44G4Ihk599ZMWloayQgAAC4T6iMWfIAVAAAYRTICAACMIhkBAABGkYwAAACjSEYAAIBRJCMAAMAokhEAAGAUyQgAADCKZAQAABgVcTKyYsUKjRw5Un369FFCQoIWLVoUcp3i4mJde+21SklJ0eWXX6558+ZFEysAAIhDEScj9fX1GjRokGbOnBlW+z179mjEiBH63ve+p7KyMj344IP6xS9+offffz/iYAEAQPyJuDbNbbfdpttuuy3s9rNnz1a/fv30wgsvSJKuuuoqrVy5Ur/73e+Un58f6eYBAECcsf0zIyUlJcrLy/NZlp+fr5KSkoDrNDQ0qLa21uenox2oPqXZy3ep5tSZmPddWXtas5fv0vH6xpj37QavrS3Xmt1HY9rn0RMNmr18l6rqTuvDbVX60axV+vW7W1S8vUqStGLHYS3csD+svuobzupPy3fpi6P1MYuv8axHcz7are0VdUHbLdtSqSWbDgV8/MSXse07dtJn+do9x/TqmnJJ0ueVdfp/r23Qyyt2yeOxtPvwCc345w49vnCTJr31qarqTmvOR7u1raLteXX6TJNeKt6lJxZu0paDtTrT1Bz3pv01mvPRbu2obI5/66Fazflot840eSIdipA+2FapdzYe9P69vvy4hj6zTHM+2q3Fn341NpZl6W9rvtC6vce0+/AJvbxil06faWrT38Z91Zq3ao88Hsu7bP7act303x+q4Wxz+12HT+jOVz7W6+v2tVl/Q/lx/XX1XlmW1eYxSXpr/X6t2HE46v2N1LsbD6poa6VqT5/Rn5bv0v7jJwO23VFZpzkf7da8VXv0yd5jYfUbreqTjZq9fJcqak7r/0r366PPD8vjsfSXVXu0aX+NJGnzgRoNfWaZPq8Mfh6s3nnEZy5eXVOuW2esUN3p5ufjoq2VevfLY6Sipvn5tPpk4OfTj3cf1fy15TpUc8rbtvzoSf1p+S6daDjrbffhtiq9XXYgYD+b9tfowfkbNG/VHpXtq9Yzf9+ip9/5TNP/sV1zV+7Rys+PBFx3yaZDWraleXxrTp3R7OW7NHv5Ln2wLfiY7z/eHGft6eD/i47XN+pX/7tOz7+/XZZlyeOxNG/VHm3cV+1t42+ZU9hetbeiokIZGRk+yzIyMlRbW6tTp06pS5cubdYpLCzU1KlT7Q4tqJ/MWq2K2tP6dH+1Zt01NKZ93zVnjXZWndCqnUf0v/fkxLRvp/tk7zFNemuTJGnvtBEx6/e+v63X2j3H9O7Gg/rsYPM/2Q3l1Zq7ao/2ThuhMXPXSpIGZ/VQv54XBO1r2nvb9L8ff6Hn/7Fdn//29pjEN3fVHk17b5ukrQH3u/GsR+P/Z50kqWzy99W9a3KbNs+8u0UL1u3T74s+12e/vtW7/Gd/ak7uL7v4Av3byx9Lav7nkpGWqgfml/n08drar57kW8fyYtHneql4lyTpb2vK9cTtV+m3S7Z+1WBxc/y3vfiRJCkxIUE/v6FfOEMQtp/Pax6DnH4XKSMtVT+etVqS9JvFzXHkfuP7uuiCZK3ceURPLNzss+7RE42adPtVPst+OHOVJKnHBcn64eC+kqTHvjwG73xljf7vvut08wvLJUmrdx3Vd664WJnpqd71f/Tl9ntdmKLbrunt0/fuwydU8PpGSbE9ngOpqj2t//faBknSDwf30dtlBzV7+S5tmHyL3/a3/G6Fz9+BYqyq+6rf3c/ersTE4BVW/XloQZk+3H74y+O82XM/Haip727xbvtf/7BSkvT9360IOl53zlkjSRrQO01X903X4wub52vM3LVaeP/1uuevXx0j//ZyifYePam1e45p7r9/229/586Jcz7Zc0yrdx3VqTNN2nu0XoU/HihJGjfvE0nSt7MvUp/ubf83jfxjc/yLyg62eewcf/tVfbJR9/9tvSRpx29u0+NvbdLiFi86go3FD/+4SkfrG7XlUK1e/LchAds99HqZircf1vufVWpwVnfVN57V0y3GXpL+vulQm2VO4chv00yaNEk1NTXen3372r5asVtF7WlJ0kdBMt1o7aw6YVvfTld+NPCruPZYu6f5Vd+5RCSQqi/nNZy+zjT5fyUcjXOvDIM56/nqKkPd6bN+25R8eUWpvrHtFQCp7fh+Xnki3BAlSeu/OO7z96cHgse9+WDo/YpW9Un/rwRPfDk2e4+0vXJV2ir+lvyNhb/2xwO8wj533rZ0uK4h4Pbs0PJK7epdzcfC8QDjFInaGFwBXu7n6lCoK4GhHKg+5fP3hnLfV/Q1p85o75fHvL/tB7Li88M69eVVtI93t71idCzGV61bns9NHksrd4b/3H/0y1hW7Qx+Nbnl/u8+csJ7FbOlUFekTLL9ykhmZqYqK30vQ1VWViotLc3vVRFJSklJUUpKit2hAQAAB7D9ykhubq6Kiop8li1btky5ubl2bxoAALhAxMnIiRMnVFZWprKy5veh9+zZo7KyMpWXN394btKkSRozZoy3/b333qvdu3frkUce0bZt2zRr1iy9/vrreuihh2K0CwAAwM0iTkbWrVunIUOGaMiQ5g/SFBQUaMiQIZo8ebIk6dChQ97ERJL69eunxYsXa9myZRo0aJBeeOEFzZkzh6/1AgAASVF8ZuSmm24K+BU3SX7vrnrTTTdpw4YNkW4KAACcBxz5bRoAAHD+IBkBAABGkYwAAACjSEYAAIBRJCMAAMAokpFQYndHcDhAvE+n1WoPW/9twwZt7Np/58H2KVg44Y5FoC8Lxvuxc46T9jPIFzebH/dpG37kLZtGsl4sRH9ORrd/bkEygg6VEHn9rQ5nS4xh9JkQRiO7x691/46eLgccTAkdHIN9m2t/x/7GwvwMOUOb88qGgWndpb/nEyfPB8kIAAAwimQEAAAYRTICAACMIhkBAABGkYwAAACjSEYAAIBRJCMAAMAokhEAAGAUyQgAADCKZAQAABhFMhKCC2/xjyDcUrMh2jhbr2f3/trZfcAaMUE2GqzOSLhjEbAmjkuOnfbq6FotwQWPxafGTJS9+lvPziHw13c4Yx5JTE6awXCRjKBDOaCciBGx2m27h691PQsnz5cTQuv48bFng7HYD39dOPn46Uit6/bYUv4qnMF28ISQjAAO4eDnCQAu47bnE5IRAABgFMkIAAAwimQEAAAYRTICAACMIhkBAABGkYwAAACjSEYAAIBRJCMAAMAokhEAAGAUyUgIzqrTgPYKVHfEaaKNs/Vadu+tnedHwNo0wdaJ8rHwtuuOY6e9nLSXoQ6vlnMSUe0WK/h6ds51tLVwIqq946RJDBPJCDpU69onThRWjQdDfdoRm2//rf62dWvt44TbXXd0CHbtcyy69Reb3cerW7QeBVueY2LUxhSSEQAA4oyTEw9/SEYAAIBRJCMAAMAokhEAAGAUyQgAADCKZAQAABhFMgIAAIwiGQEAAEaRjAAAAKNIRgAAgFEkIyG48Bb/CMYlExptbYnW69ldo8LO7gPVBwlWDyfY/rZ3LNxY7yMaTtrPUKFEfZ74/N62EzvHwN/xG87mIqkD5cY6SiQj6FBuKFVhR4ix6tPu4WtTm8bBE+aEOkcdPTwJAX5vd78x2BF/82F+hpyhI2o+hTOFDj6dSUYAwI3c99oXCIxkBHAIJ79qAeAyLntCIRkBAABGkYwAAACjSEYAAIBRJCMAAMAokhEAAGAUyQgAADCKZAQAABhFMgIAAIwiGQnBSXUa0H5umc5o42xdk8LuGhX21vAIsDzYOkEfCy/YaLYbT5xU1yTU8RWLGk7++rC35pKfZWHsSCQxufH/FskI0IodNy6MWZ8231SxdX0RJ9/D0Rk3mOzYIFrWkIlpbRq7OnHEHJnX5ryy4zkmjMF2Qj2nQEhGAMCFXPjiFwiIZARwCCe/agHgLm57NokqGZk5c6ays7OVmpqqnJwcrV27Nmj7GTNm6Morr1SXLl2UlZWlhx56SKdPn44qYAAAEF8iTkYWLFiggoICTZkyRevXr9egQYOUn5+vqqoqv+1fffVVPfbYY5oyZYq2bt2qP//5z1qwYIEef/zxdgcPAADcL+JkZPr06Ro/frzGjRunAQMGaPbs2eratavmzp3rt/3q1at1/fXX684771R2drZuueUWjR49OuTVFAAAcH6IKBlpbGxUaWmp8vLyvuogMVF5eXkqKSnxu851112n0tJSb/Kxe/duLVmyRLfffnvA7TQ0NKi2ttbnBwAAxKdOkTQ+cuSImpqalJGR4bM8IyND27Zt87vOnXfeqSNHjuiGG26QZVk6e/as7r333qBv0xQWFmrq1KmRhAYAAFzK9m/TFBcX69lnn9WsWbO0fv16vfXWW1q8eLGeeeaZgOtMmjRJNTU13p99+/bZHSYAADAkoisjPXv2VFJSkiorK32WV1ZWKjMz0+86Tz31lO6++2794he/kCRdc801qq+v1y9/+Us98cQTSkxsmw+lpKQoJSUlktAAAIBLRXRlJDk5WUOHDlVRUZF3mcfjUVFRkXJzc/2uc/LkyTYJR1JSkqTwboELAADiW0RXRiSpoKBAY8eO1bBhwzR8+HDNmDFD9fX1GjdunCRpzJgx6tu3rwoLCyVJI0eO1PTp0zVkyBDl5ORo586deuqppzRy5EhvUuJkTqrTgPZzS/4bbaLeZjWb99fEcAYdmmAPhhlswHPeLQdPOzlpN0M9/8bi+dlvbRobByHaWjhOmhc7RJyMjBo1SocPH9bkyZNVUVGhwYMHa+nSpd4PtZaXl/tcCXnyySeVkJCgJ598UgcOHNDFF1+skSNH6re//W3s9gKukeCMgiJB2VM3wln9BOy/9QYcPF1OCK2jD+eEAL+3u98YdOa/NI0TZsm8tuNr5knGyU+/EScjkjRx4kRNnDjR72PFxcW+G+jUSVOmTNGUKVOi2RQAwI84f6GM8wy1aQAAgFEkIwAAxBknvyXjD8kIAAAwimQEAAAYRTICAACMIhkBAABGkYwAAACjSEYAAIBRJCMAAMAokpEQ4r0ewPmgZZ0Jt9QaijbKDi5N0+E1PL58JPA6wfpr53bdceTEl1CHl12Hn61z7bcWThirRbCzbixCSzKCDuWG+/DYUU8jVjV5Orq2j5Nrizjhpk4dHULLfY5pbZoY9OZvPpwwR07QpuSTofpXTp4OkhEAAGAUyQgAuJD7LsQDgZGMAAAQZ5z8Fqs/JCMAAMAokhEAAGAUyQgAADCKZAQAABhFMgIAAIwiGQEAAEaRjAAAAKNIRkLgxkLu17JMg1tKNkQdZ6sV7a5RYWfvgeoIBdul4I+FF22gVm45dtrLSfvZEaH4Oy7sHAN/x3U4NbMiCclJcxgukhF0KDfUqjBVN6Ij+wnYf6udd/J8OeGmTiZrBcW0Nk0MOvM3H+ZnyCESgv4Zm02E0amTz2eSEQAAYBTJCAC4kAuvxAMBkYwAAACjSEYAAIgzTv58iD8kIwAAwCiSEQAAYBTJCAAAMIpkBAAAGEUyAgAAjCIZAQAARpGMhMKdhVzPCvC7s0UXaeu1bK9RYWcNjwB9B9tksBof4Y5FoBo24dQPiQdO2s9Q9YRicXwHmm27+Is5rP2IICTnzGD4SEbQoZxQTyQUWyKMUad23zugdfeOni0HBNfRIbScfwfsvg9/x6bb7nVhl9bPe/bUvwrdaUfXUooEyQgAADCKZAQAABhFMgIALuTGzwUAgZCMAAAQZ5z76RD/SEYAAIBRJCMAAMAokhEAAGAUyQgAADCKZAQAABhFMgIAAIwiGQnBSXUaEJ2W9S1C1bpwimjDbL2e/aVpbKzhEWh5kE0GfczG7cYTN+1nLI6/qGvFRLu9DljPTXN4DskIOpSDSyN8xYYgY1WTx+7aPq133cnz5YTQTI5PLDcdi/3w14UbalF1hDbnlQ3j4uRzNRwkIwAAwCiSEQAAYBTJCAC4kAs/FgAERDICAECccdtnSEhGAACAUSQjAADAKJIRAABgFMkIAAAwimQEAAAYFVUyMnPmTGVnZys1NVU5OTlau3Zt0PbV1dWaMGGCevfurZSUFH3zm9/UkiVLogoYAADEl06RrrBgwQIVFBRo9uzZysnJ0YwZM5Sfn6/t27erV69ebdo3Njbq+9//vnr16qU333xTffv21RdffKHu3bvHZAfs5sZ7/MOXFeB3J4u6fkWrA9bu49fWGh4BOg9WjyTaujXhtAu1umVZSnDb9yn9cNI5EmrOYnH8+Tue7BwDf8d1OPsRSV2t5n1y17EYcTIyffp0jR8/XuPGjZMkzZ49W4sXL9bcuXP12GOPtWk/d+5cHTt2TKtXr1bnzp0lSdnZ2e2LGq7lhtPDjhhj9T/K7v91rbt3cm0RJ/zj7+jxabnLsa1N0/7e/PXhgClyhDbnlQ3jEk6XTp6PiN6maWxsVGlpqfLy8r7qIDFReXl5Kikp8bvOO++8o9zcXE2YMEEZGRm6+uqr9eyzz6qpqSngdhoaGlRbW+vzAwAA4lNEyciRI0fU1NSkjIwMn+UZGRmqqKjwu87u3bv15ptvqqmpSUuWLNFTTz2lF154Qb/5zW8CbqewsFDp6enen6ysrEjCBAAALmL7t2k8Ho969eqll19+WUOHDtWoUaP0xBNPaPbs2QHXmTRpkmpqarw/+/btsztMAHAVJ322A2iviD4z0rNnTyUlJamystJneWVlpTIzM/2u07t3b3Xu3FlJSUneZVdddZUqKirU2Nio5OTkNuukpKQoJSUlktAAAIBLRXRlJDk5WUOHDlVRUZF3mcfjUVFRkXJzc/2uc/3112vnzp3yeDzeZTt27FDv3r39JiIAAKB9nPAB70hE/DZNQUGBXnnlFf31r3/V1q1bdd9996m+vt777ZoxY8Zo0qRJ3vb33Xefjh07pgceeEA7duzQ4sWL9eyzz2rChAmx2wsAAOBaEX+1d9SoUTp8+LAmT56siooKDR48WEuXLvV+qLW8vFyJiV/lOFlZWXr//ff10EMPaeDAgerbt68eeOABPfroo7HbCwAA4FoRJyOSNHHiRE2cONHvY8XFxW2W5ebm6uOPP45mUwAAIM5RmwYAABhFMgIAAIwiGQmB7/K7n+XC4jTR1txovVqwOi6xYGttmii2GSyc8MciQE2cDqiT4gSR1ECxW6g5i0Wk/na3o4/rcI7NSEJy0BSGjWQEHcoN3zYzVTfCCVp/HdDJ8+WE0Dp6fFrOT0xr09jUhxPmyAnanFcdsA2/bRw8IyQjAADAKJIRAABgFMkIAAAwimQEAFzIhZ9RBAIiGQEAAEaRjAAAAKNIRgAAgFEkIwAAwCiSEQAAYBTJSAhOujUyotPyVst23x49VqKNs/Xhavfha+d4Boo96O3ggzwY7lgE3G4H3JrcCWK5H+3tK/Qt+Nsfrd/bs9t44kR7+/lIQnLjsUgyAgAAjCIZQQdzbm2Ec+ypGxGrfuwdv9a9O7o2jYNjs0tCgN/b3a9NxWnOwynyq+15FfuRCadHJ58zJCMAAMAokhEAAGAUyQgAADCKZAQAXMiN35gAAiEZAQAARpGMAAAQZ5z8zRl/SEYAAIBRJCMAAMAokhEAAGAUyUgIfGLd/VrWdHBLqaFo4+zo3bN3PP13bnd9oYC9d0CdFCeI5W7YXpumnf0H2oadM+nv+A1nexEd9y48FklGAACAUSQj6FBu+IS3PXUjYtOn3cPXdtedO2FOOJY6OoaW24tpbZoY9OavBwdMkSN0yHESxjacPB8kIwAAwCiSEQAAYBTJCAAAMIpkBAAAGEUyAgAu5L4vbwKBkYwAABBnYvUNvo5CMgIAAIwiGQEAAEaRjAAAAKNIRkJw4S3+EYRb5jPq2jStVrS7XoqtNTwCdB5sl4I/Fl60Abcbar2wencBJ9WmCfV4TGL1UyumHf2GPM781cIJY4ORxOTGY5FkBAAAGEUygg5l1+e7Y1n7wY4YYxWf/TUufDfghPovgTjh2wIdHUPL7cW0Nk0MOvNX08n8DDlD6+PEjvMqnC6dfD6TjAAAAKNIRgAAgFEkIwAAwCiSEQAAYBTJCAC4kBu/vgkEQjICAACMIhkBACDOOPlrvP6QjAAAAKNIRgAAgFEkI4h7LWs6uOVDf1aMIrV7f+0sfRNN18HGLdz+AtUJCVU/xC11j0KJ1bHX3Fc71w85qO2P1d8m2jMGUZSmCWtrkUTkxmORZAQAABhFMoIO5a9+RUz6jWVfdtSNcEltmtb9O/kzcE74gF5Hx9ByezE95mPRh59OHDBFztD6vLLlOSZ0p06o5xQIyQgAADCKZAQAABhFMgIAAIwiGQEAAEZFlYzMnDlT2dnZSk1NVU5OjtauXRvWevPnz1dCQoLuuOOOaDYLAPiSC7+9CQQUcTKyYMECFRQUaMqUKVq/fr0GDRqk/Px8VVVVBV1v7969+s///E/deOONUQcLAADiT8TJyPTp0zV+/HiNGzdOAwYM0OzZs9W1a1fNnTs34DpNTU266667NHXqVF122WXtChgAAATn3C/x+hdRMtLY2KjS0lLl5eV91UFiovLy8lRSUhJwvV//+tfq1auX7rnnnrC209DQoNraWp8fAAAQnyJKRo4cOaKmpiZlZGT4LM/IyFBFRYXfdVauXKk///nPeuWVV8LeTmFhodLT070/WVlZkYQJAABcxNZv09TV1enuu+/WK6+8op49e4a93qRJk1RTU+P92bdvn41RIt61rDMRutaFM0QbZuv17N9d+zYQKPZg+xTtYz7tolw/ljVdTIrlMdPu2jShHo9BrH67aEe/0cQc1n5EEJMbj8VOkTTu2bOnkpKSVFlZ6bO8srJSmZmZbdrv2rVLe/fu1ciRI73LPB5P84Y7ddL27dv1jW98o816KSkpSklJiSQ0AADgUhFdGUlOTtbQoUNVVFTkXebxeFRUVKTc3Nw27fv3769NmzaprKzM+/ODH/xA3/ve91RWVsbbL+chuz5UFcuaN/bUb4hNn3bXlmjduxPqvzhZh9emCfB7TDuOYRccPv7ZcR6Hcyw6+XyO6MqIJBUUFGjs2LEaNmyYhg8frhkzZqi+vl7jxo2TJI0ZM0Z9+/ZVYWGhUlNTdfXVV/us3717d0lqsxwAAJyfIk5GRo0apcOHD2vy5MmqqKjQ4MGDtXTpUu+HWsvLy5WYyI1dAQBAeCJORiRp4sSJmjhxot/HiouLg647b968aDYJAADiFJcwAACAUSQjAADAKJIRAHAh991JAgiMZAQAABhFMgIAQJxx8j1F/CEZAQAARpGMIO61rPsQ7++zt65JYXeNCjtr3wSqIxRsn4KFE+5YBKyJE+V6bhPL3Wh3XyHrAbWfv+OsPf2Gqn/l9zgMY4ORnMtuPBZJRgAAgFEkI+hQdr2P6bQ6HW26jFGfdr8P3Lp/u2vhtEcs6xFFHUNHj0+C319j0G37e/M3H+ZnyJnsOHTdPtYkIwAAwCiSEQAAYBTJCAAAMIpkBAAAGEUyAgAAjCIZAQAXcuGtJICASEYAAIBRJCMAAMQZJ98jyB+SEQAAYBTJCOJey/fW3VKzIdo4W69n9/7a2X2gvoPtU7C6IOGORaAaIG45dtorVG2ViPpq9/oh6rzEIFR/XbSn32hqGIVTdyaSmNx4qJKMAAAAo0hG0KFsq00Tw37tCDFWfdr9LnDr95kdUP4lICeE1tHj03J+YlqbJgad+evCCXPkRLY8x4QxiU6o5xQIyQgAADCKZAQAABhFMgIAAIwiGQEAAEaRjAAAAKNIRgAAgFEkIwDgQm68sRUQCMkIAABxxsG3FPGLZAQAABhFMoK451trwx0Xt8OpVeF/veB/x1os65i07TvA8mDrRPlYOA07ok6KE8RyN9pdmyZEB7E4/qKtFRNJf759R75OoPWijcGJSEYAAIBRJCPoUK1rnzixXzvea41Znza/Edy6eye/7eyE98Q7OoSW+xzT2jSx6MNPJw6YIkeyo0ZMOD06eT5IRgAAgFEkIwAAwCiSEQAAYBTJCAAAMIpkBAAAGEUyAgAAjCIZAQAXcuF9rYCASEYAAIBRJCMAAMAokhHEPZ/KNC65th1tnK3Xs3t/7ew+UH2QoPVIgj0UZrCBmoWuOeKSgyuEWB4z7a5NY3P/kv/jqT1jELqGkZ/thdNvBEG58VgkGQEAAEaRjKBj2VUcIYb92lE/J1Z92l1bok1tGicUgAnArjpHEcXQwSEkBPjdGdpG5LwYncGOcQnnWHTw6UwyAgAAzCIZAQAARpGMAAAAo0hGAACAUSQjAADAKJIRAABgFMkIAAAwimQEAFzIfffYBAIjGQEAIM44+YaF/pCMIO61LOnglleT0cbZtiaFvXtsa+2bAH0H22SIqiDhbTZGdYHcKpZ1TdpdmyZUPaAYhOqvi/Z0G03M4dSdiSgmFx6LJCMAAMCoqJKRmTNnKjs7W6mpqcrJydHatWsDtn3llVd04403qkePHurRo4fy8vKCtkd8c0FpGlvqN8SqT7uvvDqh3ku4nHEV2lwQjtj9FvzNh9NidAxbBiZ0p06ej4iTkQULFqigoEBTpkzR+vXrNWjQIOXn56uqqspv++LiYo0ePVoffvihSkpKlJWVpVtuuUUHDhxod/AAAMD9Ik5Gpk+frvHjx8AnlWkAABZfSURBVGvcuHEaMGCAZs+era5du2ru3Ll+2//tb3/T/fffr8GDB6t///6aM2eOPB6PioqK2h08AABwv4iSkcbGRpWWliovL++rDhITlZeXp5KSkrD6OHnypM6cOaOLLrooYJuGhgbV1tb6/AAAgPgUUTJy5MgRNTU1KSMjw2d5RkaGKioqwurj0UcfVZ8+fXwSmtYKCwuVnp7u/cnKyookTAAA4CId+m2aadOmaf78+Vq4cKFSU1MDtps0aZJqamq8P/v27evAKAEAQEfqFEnjnj17KikpSZWVlT7LKysrlZmZGXTd559/XtOmTdM///lPDRw4MGjblJQUpaSkRBIaAABwqYiujCQnJ2vo0KE+Hz4992HU3NzcgOs999xzeuaZZ7R06VINGzYs+mgBAEDciejKiCQVFBRo7NixGjZsmIYPH64ZM2aovr5e48aNkySNGTNGffv2VWFhoSTpv/7rvzR58mS9+uqrys7O9n62pFu3burWrVsMdwUAzh8uvMkmEFDEycioUaN0+PBhTZ48WRUVFRo8eLCWLl3q/VBreXm5EhO/uuDy0ksvqbGxUT/96U99+pkyZYqefvrp9kUPAABcL+JkRJImTpyoiRMn+n2suLjY5++9e/dGswkgdlrWpnHJy8lwalX4Xy/437FmoDRN0H0KNm7hjkWg2iyh5sQlh1ZoMdyRdtemCVltyJ7iNNGefzEMoW2bCEKy5Oy7rfpDbRoAAGAUyQg6lF1lrWPZrS21aRzWT7gbcEb9F/+cEJrJ8XHC/rfkLx6nxegUdoxLOMeiXc+/sUAyAgAAjCIZAQAARpGMAAAAo0hGAACAUSQjAADAKJIRAABgFMkIAAAwimQEAFwobu74CohkBAAAGEYygrjXsn5FTGpZdIBYRWl7bRobNxC46yD1Z6LqL7x2oVbv6HomdonlXrS7Nk3IQW/nBgJ00Z5uQ8Xs7/FYHzqWZTn67sn+kIwAAACjSEbQoexK1hNi2HMs+/L2GaOXKXbXlmjdux1jEStOeOVnMgQH7L4Pf/PhtBidwo7zOJwenXDOBEIyAgAAjCIZAQAARpGMAAAAo0hGAACAUSQjAADAKJIRAABgFMkIAAAwimQEAAAYRTICAC4UHzefB5qRjCDutaz74JbyIdHG2bo+iltq8fgTKPZgYxP0sTDHIlCrkDVHwurd+WJ5jrS7No3N/UsBagq1o+NQx5m/x2N9nrrlea4lkhEAAOKMg+/87hfJCDqUXbURYtmvk+s32B1a65oZTh4LJzzd2l0rKOi2jW3ZP391jJwWo1PYMS7hHIpOng+SEQAAYBTJCAAAMIpkBAAAGEUyAgAAjCIZAQAARpGMAAAAo0hGAACAUSQjAADAKJIRAHAhF97xGwiIZARxzwrwu7NFF2nrmhR216iws/9AfQfbZLAaH+HG6rdWSYi+I+nf6WJZJ6XdPYUY1FiMub8u2jMGIWsY+d9gTLnxUCQZAQAgzpgsVRANkhF0KH/1K2LTr7PF6nnB7ueX1t07eVyd8FxrMgQH7L4Pf/PhtBidwo5jN6znViecNAGQjAAAAKNIRgAAgFEkIwAAwCiSEQAAYBTJCAAAMIpkBAAAGEUyAgAAjCIZAQAARpGMAAAAo0hGYEygGiB2bqejttle0YbZejW79zaWdUza9h1geZBNBn3Mxu1GtIEYsWtzsTxF2ttV6CFvf7D+9rc9YxDNYRLruXTJ05wPkhEAAGAUyQg6lF2lEWJZFMqOAlOxqsljV20fb/8Jwf92EieEZnJ8nLD/LfmLx2kxOoUd53E4566T54NkBAAAGEUyAgAAjCIZAQAARpGMAAAAo0hGAACAUSQjAADAqKiSkZkzZyo7O1upqanKycnR2rVrg7Z/44031L9/f6Wmpuqaa67RkiVLogoWAADEn4iTkQULFqigoEBTpkzR+vXrNWjQIOXn56uqqspv+9WrV2v06NG65557tGHDBt1xxx264447tHnz5nYHDwAA3C/iZGT69OkaP368xo0bpwEDBmj27Nnq2rWr5s6d67f9iy++qFtvvVUPP/ywrrrqKj3zzDO69tpr9cc//rHdwQMAAPfrFEnjxsZGlZaWatKkSd5liYmJysvLU0lJid91SkpKVFBQ4LMsPz9fixYtCridhoYGNTQ0eP+ura2NJMyw/XnlHu0/fjJku6nvfmbL9u3u24l2Vp3w/j713S0xu4PliYazAR97/h/bvb/PXbVXZfuqg/a1Ysdh7++xmp83S/eH7NPj+aqgxKziXfr61w61abN277Gg/by2ttzn70UbDgSNq3Ufb5cd9Pn7jRZx+1tn1c6jth3DL6/YpeLtba+4vlS8U+9tvkCfHWj7vLD/+KmA8SzacEAXprZ9ymvd/uXlu32OgXP+b/1+JXfyff1Wc/KM9/f/en+bUjrZ+zG802eavL9X1X31HBnuHARq17Lf3y3boW5+ximUgzWn2ywLdtyHE/P/lHyhPUfqA673p+W7I+6ztVNnmtqs98pHu7Vy55GI+5Kkae9tVeck3+Og8azH+/uL/9yh7ZV1Po9P/8cOdU1JCtl3sP071GL83yjdp4y01Dbrrd55NGhfP7++n7Iu6hoyDjskWBFUDjt48KD69u2r1atXKzc317v8kUce0fLly7VmzZo26yQnJ+uvf/2rRo8e7V02a9YsTZ06VZWVlX638/TTT2vq1KltltfU1CgtLS3ccEP68axVWl8e/B8TAADng7fuv07XXtojpn3W1tYqPT095P/vyNPfDjBp0iSfqym1tbXKysqK+XZ+MvQS5X7ja34fqz11Vks2HdLIQX10QRgZayTqG5r07saDuv2a3krr4sgpsFXR1ir17JaiQVnpMevzVKNH72w8oO8PyNSB6lNaseOwuiYnaUDvNOVcdpE+O1irA8dP6ZZvZYTsq8kjvbV+v66/vKf6dE8N2T4cltV81WFQVrr69bwgYLsN5dWqPnlG3+t/sd/Hz3osvbX+gG68oqd6p38V286qE9p6qE4jB/VWZW2D3izdr57dkvWzYVk6eqJR/9xaqZpTZ3TWY2lM7tdVtLVKAy9J12UX+8ZiWdJb6w+oova0bv1Wpr7R6wIt2nBQAy9J18Z91Rry9R7K/lpXHao+rZU7j+jH116ipBhfDPh0f40O1zXo5qt6SZIOVp/Wwg0HdNnFFyi1U5LP2PxzS5Uy0lPVOy1VRdsq9aMhfdtcvSg/dkqf7DmmH1/b13sl7uPdx1T6xXH96juXqVNSgg7XNej1dft1Wc8LdNs1mT7r7z16Uhu+OK47hvT1eyVv5c6jSk5K0PB+F8V2IAJYs/uYmixLw7Mv0lsbDui737xYGWkpfttW1jaoePthde/aWb3TUzXwksDn3Jrdx3TWY+n6y/0/J4bScMajRWUHdHP/DG2rqFVKpyR9u18PLf70kC7vdaGuzOymqtoGvVG6XyMH9dGlF3UJ2Nf2ijrtPlzvnYvVu45qQ3m1/v26bF2QkuRzjJw4fVaLNx3S7df09nvlS5I+rzyh7ZV1+u43L9biTw9pxMDeOuux9I/PKvSDQX3VJbn5mPl0f42qahuUN6CX3372HTuldzYeVO/0VA39eg/9c2ulPJbUKTFBmemp6tktRd/O9v/P/JM9x9Vwtkk3XNFTZ5qaz+MuyYnq2S1F1wX4PyRJNafOaOnmCv3rwOD/ixrOeDRn5R6ldErUPTf0U0KC9N6mCl128QW6MvNCb7v3NlWoX88L1L/3hW36aHk1paNFdGWksbFRXbt21Ztvvqk77rjDu3zs2LGqrq7W22+/3WadSy+9VAUFBXrwwQe9y6ZMmaJFixZp48aNYW033MwKAAA4R7j/vyN6TZOcnKyhQ4eqqKjIu8zj8aioqMjnbZuWcnNzfdpL0rJlywK2BwAA55eI3yMoKCjQ2LFjNWzYMA0fPlwzZsxQfX29xo0bJ0kaM2aM+vbtq8LCQknSAw88oO9+97t64YUXNGLECM2fP1/r1q3Tyy+/HNs9AQAArhRxMjJq1CgdPnxYkydPVkVFhQYPHqylS5cqI6P5vfjy8nIlJn51weW6667Tq6++qieffFKPP/64rrjiCi1atEhXX3117PYCAAC4VkSfGTGFz4wAAOA+tnxmBAAAINZIRgAAgFEkIwAAwCiSEQAAYBTJCAAAMIpkBAAAGEUyAgAAjCIZAQAARpGMAAAAo1xRv/7cTWJra2sNRwIAAMJ17v92qJu9uyIZqaurkyRlZWUZjgQAAESqrq5O6enpAR93RW0aj8ejgwcP6sILL1RCQkLM+q2trVVWVpb27dtHzRuHYo6cjzlyPubI+eJ1jizLUl1dnfr06eNTRLc1V1wZSUxM1CWXXGJb/2lpaXE1+fGIOXI+5sj5mCPni8c5CnZF5Bw+wAoAAIwiGQEAAEYlPf3000+bDsKkpKQk3XTTTerUyRXvWJ2XmCPnY46cjzlyvvN5jlzxAVYAABC/eJsGAAAYRTICAACMIhkBAABGkYwAAACjzutkZObMmcrOzlZqaqpycnK0du1a0yG50ooVKzRy5Ej16dNHCQkJWrRokc/jlmVp8uTJ6t27t7p06aK8vDx9/vnnPm2OHTumu+66S2lpaerevbvuuecenThxwqfNp59+qhtvvFGpqanKysrSc8891yaWN954Q/3791dqaqquueYaLVmyJOJY4k1hYaG+/e1v68ILL1SvXr10xx13aPv27T5tTp8+rQkTJuhrX/uaunXrpp/85CeqrKz0aVNeXq4RI0aoa9eu6tWrlx5++GGdPXvWp01xcbGuvfZapaSk6PLLL9e8efPaxBPqvAsnlnjz0ksvaeDAgd4bXuXm5uq9997zPs78OM+0adOUkJCgBx980LuMeWoH6zw1f/58Kzk52Zo7d6712WefWePHj7e6d+9uVVZWmg7NdZYsWWI98cQT1ltvvWVJshYuXOjz+LRp06z09HRr0aJF1saNG60f/OAHVr9+/axTp05529x6663WoEGDrI8//tj66KOPrMsvv9waPXq09/GamhorIyPDuuuuu6zNmzdbr732mtWlSxfrT3/6k7fNqlWrrKSkJOu5556ztmzZYj355JNW586drU2bNkUUS7zJz8+3/vKXv1ibN2+2ysrKrNtvv9269NJLrRMnTnjb3HvvvVZWVpZVVFRkrVu3zvqXf/kX67rrrvM+fvbsWevqq6+28vLyrA0bNlhLliyxevbsaU2aNMnbZvfu3VbXrl2tgoICa8uWLdYf/vAHKykpyVq6dKm3TTjnXahY4tE777xjLV682NqxY4e1fft26/HHH7c6d+5sbd682bIs5sdp1q5da2VnZ1sDBw60HnjgAe9y5il6520yMnz4cGvChAnev5uamqw+ffpYhYWFBqNyv9bJiMfjsTIzM63//u//9i6rrq62UlJSrNdee82yLMvasmWLJcn65JNPvG3ee+89KyEhwTpw4IBlWZY1a9Ysq0ePHlZDQ4O3zaOPPmpdeeWV3r9/9rOfWSNGjPCJJycnx/rVr34Vdizng6qqKkuStXz5csuymsegc+fO1htvvOFts3XrVkuSVVJSYllWc8KZmJhoVVRUeNu89NJLVlpamndOHnnkEetb3/qWz7ZGjRpl5efne/8Odd6FE8v5okePHtacOXOYH4epq6uzrrjiCmvZsmXWd7/7XW8ywjy1z3n5Nk1jY6NKS0uVl5fnXZaYmKi8vDyVlJQYjCz+7NmzRxUVFT5jnZ6erpycHO9Yl5SUqHv37ho2bJi3TV5enhITE7VmzRpvm+985ztKTk72tsnPz9f27dt1/Phxb5uW2znX5tx2wonlfFBTUyNJuuiiiyRJpaWlOnPmjM+49O/fX5deeqnPHF1zzTXKyMjwtsnPz1dtba0+++wzb5tg4x/OeRdOLPGuqalJ8+fPV319vXJzc5kfh5kwYYJGjBjRZiyZp/Y5/27zJunIkSNqamryOSAkKSMjQ9u2bTMUVXyqqKiQJL9jfe6xiooK9erVy+fxTp066aKLLvJp069fvzZ9nHusR48eqqioCLmdULHEO4/HowcffFDXX3+9rr76aknN45KcnKzu3bv7tG09dv7G7dxjwdrU1tbq1KlTOn78eMjzLpxY4tWmTZuUm5ur06dPq1u3blq4cKEGDBigsrIy5sch5s+fr/Xr1+uTTz5p8xjnUfucl8kIcL6aMGGCNm/erJUrV5oOBa1ceeWVKisrU01Njd58802NHTtWy5cvNx0WvrRv3z498MADWrZsmVJTU02HE3fOy7dpevbsqaSkpDafLK6srFRmZqahqOLTufEMNtaZmZmqqqryefzs2bM6duyYTxt/fbTcRqA2LR8PFUs8mzhxov7+97/rww8/1CWXXOJdnpmZqcbGRlVXV/u0bz120Y5/WlqaunTpEtZ5F04s8So5OVmXX365hg4dqsLCQg0aNEgvvvgi8+MQpaWlqqqq0rXXXqtOnTqpU6dOWr58uX7/+9+rU6dOysjIYJ7a4bxMRpKTkzV06FAVFRV5l3k8HhUVFSk3N9dgZPGnX79+yszM9Bnr2tparVmzxjvWubm5qq6uVmlpqbfNBx98II/Ho5ycHG+bFStW6MyZM942y5Yt05VXXqkePXp427Tczrk257YTTizxyLIsTZw4UQsXLtQHH3zQ5u2uoUOHqnPnzj7jsn37dpWXl/vM0aZNm3ySxmXLliktLU0DBgzwtgk2/uGcd+HEcr7weDxqaGhgfhzi5ptv1qZNm1RWVub9GTZsmO666y7v78xTO5j+BK0p8+fPt1JSUqx58+ZZW7ZssX75y19a3bt39/mUM8JTV1dnbdiwwdqwYYMlyZo+fbq1YcMG64svvrAsq/nrtN27d7fefvtt69NPP7V++MMf+v1q75AhQ6w1a9ZYK1eutK644gqfr/ZWV1dbGRkZ1t13321t3rzZmj9/vtW1a9c2X+3t1KmT9fzzz1tbt261pkyZ4vervaFiiTf33XeflZ6ebhUXF1uHDh3y/pw8edLb5t5777UuvfRS64MPPrDWrVtn5ebmWrm5ud7Hz30l8ZZbbrHKysqspUuXWhdffLHfryQ+/PDD1tatW62ZM2f6/UpiqPMuVCzx6LHHHrOWL19u7dmzx/r000+txx57zEpISLD+8Y9/WJbF/DhVy2/TWBbz1B7nbTJiWZb1hz/8wbr00kut5ORka/jw4dbHH39sOiRX+vDDDy1JbX7Gjh1rWVbzV2qfeuopKyMjw0pJSbFuvvlma/v27T59HD161Bo9erTVrVs3Ky0tzRo3bpxVV1fn02bjxo3WDTfcYKWkpFh9+/a1pk2b1iaW119/3frmN79pJScnW9/61resxYsX+zweTizxxt/cSLL+8pe/eNucOnXKuv/++60ePXpYXbt2tX70ox9Zhw4d8uln79691m233WZ16dLF6tmzp/Uf//Ef1pkzZ3zafPjhh9bgwYOt5ORk67LLLvPZxjmhzrtwYok3P//5z62vf/3rVnJysnXxxRdbN998szcRsSzmx6laJyPMU/QSLMuyzFyTAQAAOE8/MwIAAJyDZAQAABhFMgIAAIwiGQEAAEaRjAAAAKNIRgAAgFEkIwAAwCiSEQAAYBTJCAAAMIpkBAAAGEUyAgAAjCIZAQAARv1/fjwMj05kxxAAAAAASUVORK5CYII=\n","text/plain":["<Figure size 640x480 with 1 Axes>"]},"metadata":{}}]},{"cell_type":"markdown","metadata":{"id":"o-XjNS1L31YB"},"source":["##### ep const. legacy"]},{"cell_type":"code","metadata":{"id":"taB2j7kT33iN"},"source":["\n","   # --------------- ema --------------- #   \n","  # res_df['ema5_1m'] = ema(res_df['close'], 5).shift(1)\n","\n","  #   # --------------- cloud bline --------------- #   \n","  # res_df['cloud_bline_1m'] = cloud_bline(res_df, 26).shift(1)\n","  \n","    #       stochastic      #\n","  # res_df['stoch'] = stoch(res_df, 5, 3, 3)\n","\n","    #       fisher      #\n","  # res_df['fisher30'] = fisher(res_df, 30)\n","  # res_df['fisher60'] = fisher(res_df, 60)\n","  # res_df['fisher120'] = fisher(res_df, 120)\n","\n","    #       cctbbo      #\n","  # res_df['cctbbo'], _ = cct_bbo(res_df, 21, 13)\n","\n","    #       ema_roc      #\n","  # res_df['ema_roc'] = ema_roc(res_df['close'], 13, 9)\n","\n","\n","   # ------------------------------ htf data ------------------------------ #    \n","\n","  #             Todo              #\n","  # htf_df = pd.read_excel(date_path2 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","  # htf_df = pd.read_excel(date_path3 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","  # # htf_df = pd.read_excel(date_path4 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","  # # # htf_df = pd.read_excel(date_path5 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","  # # # # # # htf_df = pd.read_excel(date_path6 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","\n","  # # ---- htf index slicing ---- #\n","  # htf_df = htf_df.loc[:res_df.index[-1]]\n","  \n","  # print(\"res_df.index[-1] :\", res_df.index[-1])\n","  # print(\"htf_df.index[-1] :\", htf_df.index[-1])\n","\n","  # res_df = dc_line(res_df, htf_df, '5m')\n","  # res_df = dc_level(res_df, '5m', 1)\n","\n","\n","  # # # if \"sma4\" in res_df.columns:\n","  # # #   res_df.drop(\"sma4\", axis=1, inplace=1)\n","\n","  # # htf_df['sma'] = htf_df['close'].rolling(60).mean()\n","  # # res_df = res_df.join(pd.DataFrame(index=res_df.index, data=to_lower_tf(res_df, htf_df, [-1]), columns=['sma_30m']))\n","  \n","  # htf_df['stoch'] = stoch(htf_df, 13, 3, 3)\n","  # res_df = res_df.join(pd.DataFrame(index=res_df.index, data=to_lower_tf(res_df, htf_df, [-1], backing_i=-1), columns=['stoch_5m']))\n","\n","   \n","  # fifth_df['ema'] = ema(fifth_df['close'], 5)\n","  # res_df = res_df.join(pd.DataFrame(index=res_df.index, data=to_lower_tf(res_df, fifth_df, [-1]), columns=['ema5']))\n","\n","        # -------------- dr scheduling -------------- #\n","        # if config.ep_set.entry_type == 'MARKET':\n","        #   mr_const_cnt += 1\n","        #   if (res_df['close'].iloc[i] - res_df['short_tp'].iloc[i]) / (res_df['short_out'].iloc[i] - res_df['close'].iloc[i]) <= config.ep_set.tr_thresh * (1 + config.ep_set.dr_error):  \n","        #     mr_score += 1\n","\n","           \n","        # ------- entry once ------- #   \n","        # prev_entry_cnt = 0\n","        # for back_i in range(i - 1, 0, -1):\n","        #   if res_df['entry'][back_i] == 1:\n","        #     break\n","\n","        #   elif res_df['entry'][back_i] == -1:\n","        #     prev_entry_cnt += 1          \n","        # # # print(\"prev_entry_cnt :\", prev_entry_cnt)\n","\n","        # mr_const_cnt += 1\n","        # # if prev_entry_cnt <= config.ep_set.entry_incycle:\n","        # # if prev_entry_cnt == config.ep_set.entry_incycle:\n","        # if prev_entry_cnt >= config.ep_set.entry_incycle:\n","        #   mr_score += 1\n","\n","        # ------- htf zoning ------- #   \n","        # mr_const_cnt += 1\n","        #   #       bb zone     #\n","        # if res_df['close'].iloc[i] < res_df['bb_lower_%s' % bbz_interval].iloc[i]:\n","        # # if res_df['close'].iloc[i] < res_df['bb_lower2_1h'].iloc[i]:\n","        # # if res_df['close'].iloc[i] < res_df['bb_base_1h'].iloc[i]:\n","\n","        #   #       cbline zone     #\n","        # # if res_df['close'].iloc[i] < res_df['cloud_bline_%s' % cb_interval].iloc[i]:\n","\n","        #   mr_score += 1\n","\n","  \n","        # ------- ben ep_in's tp done ------- #   \n","        # mr_const_cnt += 1\n","        # if res_df['low'].iloc[i] > res_df['short_tp'].iloc[i]:\n","        #   mr_score += 1\n","\n","\n","        # -------------- feature dist const. -------------- #\n","        # if initial_i < input_size:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","        # entry_input_x = min_max_scale(res_df[selected_price_colname].iloc[initial_i - input_size:initial_i].values)\n","       \n","        # re_entry_input_x = expand_dims(entry_input_x)\n","\n","        # entry_vector = model.predict(re_entry_input_x, verbose=0)\n","        # # print(test_result.shape)\n","\n","        # f_dist = vector_dist(entry_vector, selected_vector)\n","        # print(\"f_dist :\", f_dist)\n","\n","        # if f_dist < fdist_thresh:\n","          # mr_score += 1\n","\n","\n","\n","          \n","\n","        # -------------- dr scheduling -------------- #\n","        # if config.ep_set.entry_type == \"MARKET\":\n","          # mr_const_cnt += 1        \n","          # if (res_df['long_tp'].iloc[i] - res_df['close'].iloc[i]) / (res_df['close'].iloc[i] - res_df['long_out'].iloc[i]) <= config.ep_set.tr_thresh * (1 + config.ep_set.dr_error): # 일반적으로 dr 상에서 tp 비율이 더 커짐 (tr 보다)\n","          #   mr_score += 1\n","\n","        # -------------- ep limit -------------- #    \n","        # mr_const_cnt += 1\n","        # # if (res_df['open'].iloc[i] - res_df['long_ep'].iloc[i]) / res_df['open'].iloc[i] < config.ep_set.max_eplim_pct:\n","        # if config.ep_set.min_eplim_pct < (res_df['open'].iloc[i] - res_df['long_ep'].iloc[i]) / res_df['open'].iloc[i] < config.ep_set.max_eplim_pct:\n","        # # if 0 < (res_df['open'].iloc[i] - res_df['long_ep'].iloc[i]) / res_df['open'].iloc[i] < config.ep_set.max_eplim_pct:\n","        #   # if res_df['st_gap_15m'].iloc[i] / res_df['open'].iloc[i] < 0:\n","        #   #   print(\"i, res_df['st_gap_15m'].iloc[i] :\", i, res_df['st_gap_15m'].iloc[i])\n","        #   mr_score += 1\n","\n","\n","        # -------------- entry once -------------- #    \n","        # prev_entry_cnt = 0\n","        # for back_i in range(i - 1, 0, -1):\n","        #   if res_df['entry'][back_i] == -1:\n","        #     break\n","\n","        #   elif res_df['entry'][back_i] == 1:\n","        #     prev_entry_cnt += 1\n","          \n","        # mr_const_cnt += 1\n","        # # if prev_entry_cnt <= config.ep_set.entry_incycle:\n","        # # if prev_entry_cnt == config.ep_set.entry_incycle:\n","        # if prev_entry_cnt >= config.ep_set.entry_incycle:\n","        #   mr_score += 1\n","\n","\n","        # ------- htf zoning ------- #   \n","        # mr_const_cnt += 1\n","          \n","        #   #       bb zone     #\n","        # if res_df['close'].iloc[i] > res_df['bb_upper_%s' % bbz_interval].iloc[i]:\n","        # # if res_df['close'].iloc[i] > res_df['bb_upper2_1h'].iloc[i]:\n","        # # if res_df['close'].iloc[i] > res_df['bb_base_1h'].iloc[i]:\n","        \n","        #   #       cbline zone     #\n","        # # if res_df['close'].iloc[i] > res_df['cloud_bline_%s' % cb_interval].iloc[i]:\n","\n","        #   mr_score += 1\n","\n","\n","        # ------- ben ep_in's tp done ------- #   \n","        # mr_const_cnt += 1\n","        # if res_df['high'].iloc[i] < res_df['long_tp'].iloc[i]:\n","        #   mr_score += 1\n","\n","\n","        # -------------- feature dist const. -------------- #\n","        # if initial_i < input_size:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","          \n","        # entry_input_x = min_max_scale(res_df[selected_price_colname].iloc[initial_i - input_size:initial_i].values)\n","       \n","        # re_entry_input_x = expand_dims(entry_input_x)\n","\n","        # entry_vector = model.predict(re_entry_input_x, verbose=0)\n","        # # print(test_result.shape)\n","\n","        # f_dist = vector_dist(entry_vector, selected_vector)\n","        # print(\"f_dist :\", f_dist)\n","\n","        # if f_dist < fdist_thresh:\n","          # mr_score += 1"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"-IbP_Z3Dlwk4"},"source":["### nontp survey"]},{"cell_type":"markdown","metadata":{"id":"FxJ1y8v2fkCR"},"source":["##### term & liqd"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":614},"id":"-qIWa48pl1GO","executionInfo":{"elapsed":8,"status":"ok","timestamp":1628300788555,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"},"user_tz":-540},"outputId":"b2687c93-e070-4d45-8a67-4cc783fd78f1"},"source":["# print(nontp_long_indexs)\n","\n","plot_size = 100\n","\n","for s_i in range(plot_size, len(trade_list), plot_size):\n","\n","  slice_trade_list = trade_list[s_i - plot_size:s_i]\n","  slice_liqd_list = liqd_list[s_i - plot_size:s_i]\n","\n","  # print(len(slice_trade_list))\n","  np_trade = np.array(slice_trade_list)\n","  trade_term = np_trade[:, [2]] - np_trade[:, [1]]\n","\n","  plt.figure(figsize=(5, 10))\n","  plt.subplot(211)\n","  plt.bar(np.arange(len(trade_term)), trade_term.reshape(-1,), width=1, color='b')\n","\n","  # plt.plot(trade_term.reshape(-1,))\n","  plt.ylim(0, 1000)\n","  # plt.show()\n","  # print()\n","\n","  plt.subplot(212)\n","  # print(len(liqd_list))\n","  # plt.bar(np.arange(len(liqd_list)), liqd_list)\n","  plt.bar(np.arange(len(slice_liqd_list)), np.array(slice_liqd_list), width=1, color='r')\n","  # plt.plot(slice_liqd_list)\n","  plt.show()\n","\n","print()"],"execution_count":null,"outputs":[{"data":{"image/png":"\n","text/plain":["<Figure size 360x720 with 2 Axes>"]},"metadata":{"tags":[]},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["\n"]}]},{"cell_type":"markdown","metadata":{"id":"VBwVaUkvfnOd"},"source":["##### check nontp index"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"mRCMBOU4frNY","executionInfo":{"elapsed":454,"status":"ok","timestamp":1628220543161,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"},"user_tz":-540},"outputId":"ce4a9c9b-3589-40b3-8a19-4be03d5b9a1e"},"source":["# np_nontp_short_indexs = np.array(nontp_short_indexs)\n","# np_nontp_long_indexs = np.array(nontp_long_indexs)\n","\n","# short_til_term = len(res_df) - np_nontp_short_indexs\n","# long_til_term = len(res_df) - np_nontp_long_indexs\n","\n","max_nontp_short_term = len(res_df) - nontp_short_indexs[0]\n","max_nontp_long_term = len(res_df) - nontp_long_indexs[0]\n","\n","print(max_nontp_long_term)"],"execution_count":null,"outputs":[{"name":"stdout","output_type":"stream","text":["32747\n"]}]},{"cell_type":"markdown","metadata":{"id":"tApzvz_gK9lR"},"source":["## basic strategy"]},{"cell_type":"markdown","metadata":{"id":"FaRGwR4NEop2"},"source":["### shifting"]},{"cell_type":"code","metadata":{"id":"a8aYsjEgQnGF"},"source":["org_res_df = res_df.copy()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"RF3RM2G2RCb1","executionInfo":{"elapsed":291,"status":"ok","timestamp":1626515312874,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"},"user_tz":-540},"outputId":"ba8f6a75-d4df-4f85-cd0f-190935341f7a"},"source":["#         refresh res_df      #\n","res_df = org_res_df.copy()\n","print(org_res_df.tail(5))\n","\n","# break\n","\n","\n","shift_size = -4\n","# shift_size = -1\n","# shift_size = -7\n","# shift_size = +3\n","\n","res_df['min_upper'] = res_df['min_upper'].shift(shift_size)\n","res_df['max_lower'] = res_df['max_lower'].shift(shift_size)\n","res_df['minor_ST1_Trend'] = res_df['minor_ST1_Trend'].shift(shift_size)\n","res_df['minor_ST2_Trend'] = res_df['minor_ST2_Trend'].shift(shift_size)\n","res_df['minor_ST3_Trend'] = res_df['minor_ST3_Trend'].shift(shift_size)\n","res_df['middle_line'] = res_df['middle_line'].shift(shift_size)\n","\n","print(res_df.tail(5))"],"execution_count":null,"outputs":[{"name":"stdout","output_type":"stream","text":["                            open     high  ...  min_upper  max_lower\n","2021-06-30 23:55:59.999  0.27223  0.27281  ...   0.272145    0.27005\n","2021-06-30 23:56:59.999  0.27274  0.27290  ...   0.272145    0.27005\n","2021-06-30 23:57:59.999  0.27246  0.27257  ...   0.272523    0.27021\n","2021-06-30 23:58:59.999  0.27166  0.27183  ...   0.272523    0.27021\n","2021-06-30 23:59:59.999  0.27144  0.27211  ...   0.272523    0.27021\n","\n","[5 rows x 37 columns]\n","                            open     high  ...  min_upper  max_lower\n","2021-06-30 23:55:59.999  0.27223  0.27281  ...   0.272523    0.27021\n","2021-06-30 23:56:59.999  0.27274  0.27290  ...        NaN        NaN\n","2021-06-30 23:57:59.999  0.27246  0.27257  ...        NaN        NaN\n","2021-06-30 23:58:59.999  0.27166  0.27183  ...        NaN        NaN\n","2021-06-30 23:59:59.999  0.27144  0.27211  ...        NaN        NaN\n","\n","[5 rows x 37 columns]\n"]}]},{"cell_type":"markdown","metadata":{"id":"2gxvme1PC6ha"},"source":["### load model"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"dtYdAuSsC72_","executionInfo":{"elapsed":5831,"status":"ok","timestamp":1628862368878,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"},"user_tz":-540},"outputId":"e8dccc53-aaa7-4bab-ed8d-753f634c08d6"},"source":["# model_name = 'inner_tick_cnnreg_lscalemm_prefee_gpu_%s_%s_%s_%s_%s.h5'\n","\n","# model = tf.keras.models.load_model(ckpt_path + model_name)\n","\n","from tensorflow.keras.applications.resnet50 import ResNet50\n","\n","model = ResNet50(weights='imagenet', include_top=False)\n","# model.summary()\n"],"execution_count":null,"outputs":[{"name":"stdout","output_type":"stream","text":["Downloading data from https://storage.googleapis.com/tensorflow/keras-applications/resnet/resnet50_weights_tf_dim_ordering_tf_kernels_notop.h5\n","94773248/94765736 [==============================] - 1s 0us/step\n"]}]},{"cell_type":"markdown","metadata":{"id":"5la6usMOFzkX"},"source":["#### gen selected vector"]},{"cell_type":"code","metadata":{"id":"oQk3-jbKF8FB"},"source":["def min_max_scale(npy_x):\n","\n","  return (npy_x - np.min(npy_x)) / (np.max(npy_x) - np.min(npy_x))\n","\n","def expand_dims(npy_x):\n","\n","  row, col = npy_x.shape\n","  npy_x2 = np.array(npy_x).reshape(-1, row, col, 1).astype(np.float32)\n","  # input_x = np.array(data_x).reshape(-1, row, col).astype(np.float32)\n","\n","  #     1c to 3c    #\n","  npy_x3 = npy_x2 * np.ones(3, dtype=np.float32)[None, None, None, :]\n","\n","  return npy_x3\n","\n","\n","def vector_dist(f1, f2):\n","  return np.linalg.norm(f1-f2)\n","\n","\n","\n","# ------------------------ params ------------------------  #\n","selected_i = 500\n","input_size = 100\n","\n","\n","\n","#   1. 선택된 인덱스를 입력받았을 때, input generating 형태만 만들어놓고,     #\n","#   1-1. input cols 필요함    #\n","\n","basic_list = ['open', 'high', 'low', 'close', 'minor_ST1_Up', 'minor_ST1_Down',\n","       'minor_ST2_Up', 'minor_ST2_Down', 'minor_ST3_Up', 'minor_ST3_Down',\n","       'middle_line', 'min_upper', 'max_lower']\n","# senkoua_list = ['senkou_a1', 'senkou_a2', 'senkou_a3', 'senkou_a4', 'senkou_a5']\n","# senkoub_list = ['senkou_b1', 'senkou_b2', 'senkou_b3', 'senkou_b4', 'senkou_b5']\n","senkoua_list = ['senkou_a1', 'senkou_a2', 'senkou_a3']\n","senkoub_list = ['senkou_b1', 'senkou_b2', 'senkou_b3']\n","# sar_list = ['sar1', 'sar2', 'sar3', 'sar4', 'sar5']\n","# sar_list = ['sar1', 'sar2', 'sar3', 'sar4', 'sar5']\n","sar_list = ['sar1', 'sar2', 'sar3']\n","sar_list = ['sar1', 'sar2', 'sar3']\n","\n","sma_list = ['sma']\n","\n","#     -------------- outer price phase --------------    #\n","macd_list = ['macd_hist1', 'macd_hist2', 'macd_hist3', 'macd_hist4', 'macd_hist5']\n","trix_list = ['trix1', 'trix2', 'trix3', 'trix4', 'trix5']\n","stoch_list = ['stoch']\n","fisher_list = ['fisher30', 'fisher60', 'fisher120']\n","cctbbo_list = ['cctbbo']\n","\n","selected_price_colname = basic_list + senkoua_list + senkoub_list + sar_list\n","selected_outprice_colname = [macd_list]\n","\n","\n","#         global scaling for outer price data       #\n","#         1. nan 처리       #\n","\n","# # print((np.isnan(df.values)))\n","# print(\"np.sum(np.isnan(df.values), axis=0) :\", np.sum(np.isnan(df.values), axis=0))\n","\n","# max_nan = np.max(np.sum(np.isnan(df.values), axis=0))\n","# # print(max_nan)\n","\n","# df = df.iloc[max_nan:-max_nan]\n","\n","# total_gdata = []\n","# for g_col in selected_outprice_colname:\n","\n","#   temp_data = min_max_scale(res_df[g_col])\n","#   total_gdata.append(temp_data)\n","\n","\n","\n","#   1-2. cols 에 따른, scaling method 구분함    #\n","onprice_input_x = min_max_scale(res_df[selected_price_colname].iloc[selected_i - input_size:selected_i].values)\n","print(onprice_input_x.shape)\n","\n","\n","#   2. plot_check 에서 본인이 원하는 shape 의 인덱스를 선택   #\n","#   3. vertorize, \n","#   3-1. input generator 를 이용해 entry signal 발생할 때마다 dist 비교 진행    #\n","re_onprice_input_x = expand_dims(onprice_input_x)\n","print(re_onprice_input_x.shape)\n","      \n","# break\n","\n","selected_vector = model.predict(re_onprice_input_x, verbose=1)\n","print(selected_vector.shape)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"OJqkmkpsLCYC"},"source":["### tr_tresh calc"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gcpo4MGd9Wm4","executionInfo":{"elapsed":446,"status":"ok","timestamp":1636015063790,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"outputId":"434b56b3-3a3c-45c1-f559-42681fea5f05"},"source":["res_wr = 0.6\n","# tr_thresh = 1\n","# tr_thresh = ((1 - res_wr) / res_wr) ** 0.5\n","tr_thresh = ((1 - res_wr) / res_wr) + 0.01\n","# tr_thresh = 2.6\n","print(\"res_wr :\", res_wr)\n","print(\"tr_thresh :\", tr_thresh)\n","\n","\n","#   단리    #\n","trade_num = 1000\n","asset = 1 # thousand USDT\n","test_loss_gap = 0.95  # fee adjusted\n","test_pr_gap = 1 + (1 - test_loss_gap) * tr_thresh\n","\n","test_loss_cnt = trade_num * (1 - res_wr)\n","test_pr_cnt = trade_num * res_wr\n","\n","test_trade_list = [test_pr_gap] * int(test_pr_cnt) + [test_loss_gap] * int(test_loss_cnt)\n","random.shuffle(test_trade_list)\n","# print(\"len(test_trade_list) :\", len(test_trade_list))\n","print(test_trade_list[:10])\n","print()\n","\n","# print(\"%.5f\" % np.cumprod(test_trade_list)[-1])\n","for tr_thresh_ in np.arange(1, 3, 0.2):\n","  if (1 + (1 - test_loss_gap) * tr_thresh_) ** test_pr_cnt * test_loss_gap ** test_loss_cnt > 1:\n","    break\n","print(\"복리를 위한 tr_thresh_ :\", tr_thresh_)\n","# print(\"tr_thresh :\", tr_thresh)\n","print(\"np.cumprod(test_trade_list)[-1] :\", np.cumprod(test_trade_list)[-1])\n","print(\"total_pr : \", np.cumprod(test_trade_list)[-1])\n","print()\n","#   복리 tr_thresh  #\n","#   1. trade_num 에 영향 받지 않음\n","#   2. loss_gap 에 비례함\n","\n","for tr_thresh_ in np.arange(1, 3, 0.01):\n","  if ((1 - test_loss_gap) * tr_thresh_) * test_pr_cnt + (test_loss_gap - 1) * test_loss_cnt > 0:\n","    break\n","np_test_trade = np.array(test_trade_list) - 1\n","print(np_test_trade[:10])\n","# print(\"%.3f\" % )\n","print(\"단리를 위한 tr_thresh_ :\", tr_thresh_)\n","# print(\"tr_thresh :\", tr_thresh)\n","print(\"np.cumsum(np_test_trade)[-1] :\", np.cumsum(np_test_trade)[-1])\n","print(\"total_pr : \", 1 + np.cumsum(np_test_trade)[-1])\n"],"execution_count":null,"outputs":[{"name":"stdout","output_type":"stream","text":["res_wr : 0.6\n","tr_thresh : 0.6766666666666667\n","[0.95, 1.0338333333333334, 0.95, 0.95, 1.0338333333333334, 0.95, 0.95, 1.0338333333333334, 0.95, 1.0338333333333334]\n","\n","복리를 위한 tr_thresh_ : 1.0\n","np.cumprod(test_trade_list)[-1] : 0.5751227991397774\n","total_pr :  0.5751227991397774\n","\n","[-0.05        0.03383333 -0.05       -0.05        0.03383333 -0.05\n"," -0.05        0.03383333 -0.05        0.03383333]\n","단리를 위한 tr_thresh_ : 1.0\n","np.cumsum(np_test_trade)[-1] : 0.30000000000001137\n","total_pr :  1.3000000000000114\n"]}]},{"cell_type":"markdown","metadata":{"id":"JNQxkb06ZdTe"},"source":["# traded section plot"]},{"cell_type":"markdown","metadata":{"id":"UmH_Pb5BZUtm"},"source":["## plot with off-color st with dash"]},{"cell_type":"markdown","metadata":{"id":"5z4L3MMYmUI0"},"source":["### sorted plot_check"]},{"cell_type":"code","metadata":{"id":"L9LdjV2uUWnp"},"source":["# plot_pr_list[:100]\n","\n","plt.plot(np_pr)\n","plt.axhline(1)\n","plt.show()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Qv1MM2MemZnF","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1637641686967,"user_tz":-540,"elapsed":308633,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"6667d7a3-7a37-4f93-bf82-4e554f48216b"},"source":["assert len(open_list) == len(trade_list), \"len(open_list) != len(trade_list)\"\n","\n","save_plot = 1\n","pr_sort = 0\n","pr_descend = 1\n","case = 0\n","position = config.ep_set.short_entry_score  \n","# position = 0\n","\n","inversion = 0\n","hedge = 0\n","\n","if save_plot:\n","  plot_check_dir = current_path + \"plot_check/\" +  key.replace(\".ftr\", \"\")\n","  try:\n","    os.mkdir(plot_check_dir)\n","  except:\n","\n","    #     remove existing dir   #\n","    shutil.rmtree(plot_check_dir)\n","    print(plot_check_dir, 'removed !')\n","    os.mkdir(plot_check_dir)\n","    # pass\n","    \n","\n","prev_plotsize = 300\n","post_plotsize = 200\n","\n","\n","\n","if inversion:  \n","\n","    plot_pr_list = rev_np_pr\n","    h_plot_pr_list = h_rev_np_pr  # hedge\n","\n","else:\n","\n","    plot_pr_list = np_pr\n","    try:\n","      h_plot_pr_list = h_np_pr\n","    except Exception as e:\n","      print(\"error in h_plot_pr :\", e)\n","      h_plot_pr_list = np_pr\n","\n","\n","h_candle_intv1 = 5\n","h_candle_intv2 = 15\n","res_df = h_candle(res_df, h_candle_intv1)\n","res_df = h_candle(res_df, h_candle_intv2)\n","\n","\n","res_df = dtk_plot(res_df, dtk_itv2='15m', hhtf_entry=15, use_dtk_line=config.loc_set.use_dtk_line)\n","# res_df = dtk_plot(res_df, dtk_itv2='15m', hhtf_entry=1, use_dtk_line=1)\n","# break\n","\n","rtc_list = [\"short_tp_1\", \"short_tp_gap\", \"long_tp_1\", \"long_tp_gap\"]\n","# h_rtc_list = [\"h_short_tp_1\", \"h_short_tp_gap\", \"h_long_tp_1\", \"h_long_tp_gap\"]\n","dtk_list = [\"short_dtk_1\", \"short_dtk_gap\", \"long_dtk_1\", \"long_dtk_gap\",\n","            # \"short_dtk_1_line\", \"short_dtk_gap_line\", \"long_dtk_1_line\", \"long_dtk_gap_line\",\n","            \"short_dtk_plot_1\", \"short_dtk_plot_gap\", \"long_dtk_plot_1\", \"long_dtk_plot_gap\"]\n","dc_v2_list = ['dc_upper_v2', 'dc_lower_v2']\n","\n","\n","ohlc_list = ['open', 'high', 'low', 'close'] # + basic_st_list\n","hcandle_list = ['hopen_%s' % h_candle_intv1, 'hclose_%s' % h_candle_intv1, 'hopen_%s' % h_candle_intv2, 'hclose_%s' % h_candle_intv2]\n","\n","# --------------------- dc & bb level --------------------- #\n","dc_interval = '1m'\n","hdc_interval = '5m'\n","hhdc_interval = '30m'\n","\n","dc_list = ['dc_upper_%s' % dc_interval, 'dc_lower_%s' % dc_interval]\n","hdc_list = ['dc_upper_%s' % hdc_interval, 'dc_lower_%s' % hdc_interval]\n","hhdc_list = ['dc_upper_%s' % hhdc_interval, 'dc_lower_%s' % hhdc_interval]\n","\n","bb_interval = dc_interval\n","hbb_interval = hdc_interval\n","hhbb_interval = hhdc_interval\n","\n","bb_list = ['bb_upper_%s' % bb_interval, 'bb_lower_%s' % bb_interval]\n","hbb_list = ['bb_upper_%s' % hbb_interval, 'bb_lower_%s' % hbb_interval]\n","hhbb_list = ['bb_upper_%s' % hhbb_interval, 'bb_lower_%s' % hhbb_interval]\n","\n","bbwp_list = ['bbwp', 'bbwp_ma']\n","\n","\n","senkoua_list = ['senkou_a1', 'senkou_a2', 'senkou_a3', 'senkou_a4', 'senkou_a5']\n","senkoub_list = ['senkou_b1', 'senkou_b2', 'senkou_b3', 'senkou_b4', 'senkou_b5']\n","senkoua_list = ['senkou_a1']\n","senkoub_list = ['senkou_b1']\n","\n","sar_list = ['sar_15m']\n","\n","# ma_list = ['sma1', 'sma4']\n","sma_list = ['sma_1m']\n","\n","# -------------- price rolling indi. -------------- #\n","ema_list = ['ema5_1m']\n","# cb_list = ['cloud_bline_1m']\n","cb_list = ['cloud_bline_30m']\n","# cb_list = ['cloud_bline_5m']\n","\n","\n","\n","# -------------- under price phase -------------- #\n","# macd_list = ['macd_hist1', 'macd_hist2', 'macd_hist3', 'macd_hist4', 'macd_hist%s' % basic_st_interval]\n","# macd_list = ['macd_hist1', 'macd_hist2', 'macd_hist3']\n","# trix_list = ['trix1', 'trix2', 'trix3', 'trix4', 'trix%s' % basic_st_interval]\n","trix_list = ['trix1', 'trix2', 'trix3']\n","stoch_list = ['stoch_5m']\n","fisher_list = ['fisher30', 'fisher60', 'fisher120']\n","cctbbo_list = ['cctbbo']\n","emaroc_list = ['ema_roc']\n","\n","\n","# -------------- summation -------------- #\n","# input_colname = ohlc_list + basic_st_list + pline_list + bb_list + hbb_list + sma_list + cb_list + stoch_list + sar_list + dc_list\n","input_colname = ohlc_list + hcandle_list + bb_list + hbb_list + hhbb_list + dc_list + hdc_list + hhdc_list + dtk_list + dc_v2_list #+ rtc_list #+ h_rtc_list\n","\n","# yrange_colname = ohlc_list + basic_st_list + pline_list # currently just used for ymin, ymax\n","yrange_colname = ohlc_list + hcandle_list + bb_list + hbb_list + hhbb_list + dc_list + hdc_list + hhdc_list + dc_v2_list # currently just used for ymin, ymax\n","\n","\n","# aggr_obj = dict(zip(plot_pr_list, open_list, enumerate(trade_list)))\n","aggr_obj = dict(zip(plot_pr_list, zip(open_list, enumerate(trade_list))))\n","\n","sorted_obj = sorted(aggr_obj.items(), key=(lambda x: x[0]), reverse=pr_descend)\n","# print(aggr_obj)\n","# print(sorted_obj)\n","\n","if pr_sort:\n","  iter_obj = sorted_obj\n","else:\n","  iter_obj = aggr_obj.items()\n","\n","for temp_pr, (open_idx, (t_i, (ep_idx_list_, tp_idx_list_))) in iter_obj:  # 0.699700153073042, (291402, (3014, ([370012], [370014])))\n","\n","\n","  if not(i >= prev_plotsize):\n","    continue\n","\n","  if case == 1:\n","    if plot_pr_list[t_i] < 1.0:\n","      continue  \n","  \n","  elif case == -1:\n","    if plot_pr_list[t_i] > 1.0:\n","      continue  \n","  \n","  #   open size indexing by open_idx    #\n","  open_side = res_df['entry'].iloc[open_idx]\n","  print(\"open_side :\", open_side)\n","\n","\n","  # ---------- const. zone ---------- #\n","\n","  if position != 0:\n","    if open_side == -position:\n","      continue\n","\n","  # if open_idx == 63901:\n","  #   pass\n","  # else:\n","  #   continue\n","\n","  # if tp_state_list[t_i] != 'd-open':\n","\n","  # if tp_ratio_list[t_i] > 0.4:\n","  #   continue\n","\n"," \n","  # print(\"open_idx :\", open_idx)\n","  print(\"np_timeidx[open_idx] :\", np_timeidx[open_idx])\n","\n","\n","  plot_df = res_df.iloc[open_idx - prev_plotsize:tp_idx_list_[-1] + post_plotsize][input_colname]\n","\n","\n","  #       keep off-color st with another variable         #\n","  # st_trend_plot_df = res_df[['ST1_Trend%s' % basic_st_interval, 'ST2_Trend%s' % basic_st_interval, 'ST3_Trend%s' % basic_st_interval]].iloc[ep_idx_list_[0] - prev_plotsize:tp_idx_list_[-1] + post_plotsize]\n","\n","  # fig = trendln.plot_support_resistance(plot_df['close'], accuracy=8, fromwindows=0, numbest=1,  window=30) # requires matplotlib - pip install matplotlib\n","  \n","  plt.style.use('dark_background')\n","\n","  fig = plt.figure(figsize=(14, 18))\n","  \n","  gs = gridspec.GridSpec(nrows=3, # row 몇 개 \n","                       ncols=1, # col 몇 개 \n","                       height_ratios=[3, 1, 1]\n","                      )\n","  \n","  ax = fig.add_subplot(gs[0])\n","\n","  # fig.show()\n","  # fig.canvas.draw()\n","\n","  temp_ohlc = plot_df.values[:, :4]\n","  index = np.arange(len(temp_ohlc))\n","  candle = np.hstack((np.reshape(index, (-1, 1)), temp_ohlc))\n","  mf.candlestick_ohlc(ax, candle, width=0.5, colorup='#26a69a', colordown='#ef5350')\n","\n","  # ---------- h_candle ---------- #\n","  alpha = 1\n","  lw = 0.5\n","  for cd_i, candle in enumerate(hcandle_list):\n","\n","    if cd_i == 2:\n","      lw = 2      \n","    plt.step(np.arange(len(plot_df)), plot_df[candle].values, alpha=alpha, color='#ffffff', linewidth=lw)\n","\n","  # alpha = 0.1\n","  # plt.fill_between(np.arange(len(plot_df)), plot_df['hclose_60'].values, plot_df['hopen_60'].values, \n","  #                     where=1, facecolor='#ffffff', alpha=alpha)  \n","  \n","\n","  \n","  # ---------------------- dc_v2 ---------------------- #\n","  alpha = 1\n","  lw = 2\n","  for sm_i, item in enumerate(dc_v2_list):\n","      plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#ffeb3b', linewidth=lw)\n","\n","  # ---------------------- dc ---------------------- #\n","  # alpha = 1\n","  # lw = 2\n","  # for sm_i, item in enumerate(dc_list):\n","  #     plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#ffeb3b', linewidth=lw)\n","\n","  # ---------------------- hdc ---------------------- #\n","  alpha = 1\n","  lw = 2\n","  for sm_i, item in enumerate(hdc_list):\n","      plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#e65100', linewidth=lw)\n","\n","  # ---------------------- hhdc ---------------------- #\n","  alpha = 1\n","  lw = 4\n","  for sm_i, item in enumerate(hhdc_list):\n","      plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#c2185b', linewidth=lw)\n","\n","\n","  # ---------------------- bb ---------------------- #\n","  alpha = 1\n","  lw = 1\n","  for sm_i, item in enumerate(bb_list):\n","    plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#ffffff', linewidth=lw)\n","\n","  alpha = 0.2\n","  plt.fill_between(np.arange(len(plot_df)), plot_df['bb_upper_%s' % bb_interval].values, plot_df['bb_lower_%s' % bb_interval].values, \n","                      where=plot_df['bb_upper_%s' % bb_interval].values >= plot_df['bb_lower_%s' % bb_interval].values, facecolor='#ffffff', alpha=alpha)   \n","\n","  # ---------------------- hbb ---------------------- #\n","  alpha = 1\n","  lw = 2\n","  for sm_i, item in enumerate(hbb_list):\n","    plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#ff00ff', linewidth=lw)\n","  \n","  alpha = 0.2\n","  plt.fill_between(np.arange(len(plot_df)), plot_df['bb_upper_%s' % hbb_interval].values, plot_df['bb_lower_%s' % hbb_interval].values, \n","                      where=plot_df['bb_upper_%s' % hbb_interval].values >= plot_df['bb_lower_%s' % hbb_interval].values, facecolor='#ff00ff', alpha=alpha) \n","  \n","  # ---------------------- hhbb ---------------------- #\n","\n","  alpha = 1\n","  lw = 4\n","  for sm_i, item in enumerate(hhbb_list):\n","    plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#3179f5', linewidth=lw)\n","  \n","  alpha = 0.2\n","  plt.fill_between(np.arange(len(plot_df)), plot_df['bb_upper_%s' % hhbb_interval].values, plot_df['bb_lower_%s' % hhbb_interval].values, \n","                      where=plot_df['bb_upper_%s' % hhbb_interval].values >= plot_df['bb_lower_%s' % hhbb_interval].values, facecolor='#3179f5', alpha=alpha) \n","  \n","  # ------------------- dtk_line (old, tp_line) ------------------- #\n","  \n","  alpha = 1\n","  lw = 2\n","  rtc_ratio_list = [config.loc_set.dt_k]\n","  \n","  for rtc_k in rtc_ratio_list:    \n","    # plt.step(np.arange(len(plot_df)), plot_df['short_dtk_1_line'].values - plot_df['short_dtk_gap_line'].values * rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","    # plt.step(np.arange(len(plot_df)), plot_df['long_dtk_1_line'].values + plot_df['long_dtk_gap_line'].values * rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","    plt.step(np.arange(len(plot_df)), plot_df['short_dtk_1'].values - plot_df['short_dtk_gap'].values * rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","    plt.step(np.arange(len(plot_df)), plot_df['long_dtk_1'].values + plot_df['long_dtk_gap'].values * rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","\n","  hy_min = np.min(plot_df['short_dtk_1'].values - plot_df['short_dtk_gap'].values * rtc_k)\n","  hy_max = np.max(plot_df['long_dtk_1'].values + plot_df['long_dtk_gap'].values * rtc_k)  \n","\n","  alpha = 1\n","  lw = 4\n","  # h_rtc_ratio_list = [config.loc_set.dt_k]\n","  h_rtc_ratio_list = [config.loc_set.zone_dt_k]\n","  # h_rtc_ratio_list = [0.272, 0.36, 0.4, 0.5]\n","  \n","  for h_rtc_k in h_rtc_ratio_list:\n","    plt.step(np.arange(len(plot_df)), plot_df['short_dtk_plot_1'].values - plot_df['short_dtk_plot_gap'].values * h_rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","    plt.step(np.arange(len(plot_df)), plot_df['long_dtk_plot_1'].values + plot_df['long_dtk_plot_gap'].values * h_rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","    # plt.step(np.arange(len(plot_df)), plot_df['h_short_tp_1'].values - plot_df['h_short_tp_gap'].values * h_rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","    # plt.step(np.arange(len(plot_df)), plot_df['h_long_tp_1'].values + plot_df['h_long_tp_gap'].values * h_rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","\n","  # hy_min = np.min(plot_df['short_dtk_plot_1'].values - plot_df['short_dtk_plot_gap'].values * h_rtc_k)\n","  # hy_max = np.max(plot_df['long_dtk_plot_1'].values + plot_df['long_dtk_plot_gap'].values * h_rtc_k)  \n","\n","  # ------------------------------------------------------------- #\n","\n","\n","  # ------------- ep ------------- #\n","  # if i != initial_i:\n","  # if len(ep_idx_list_) > 1:\n","  \n","    #        initial order         #\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='#ffeb3b')\n","  plt.axvline(prev_plotsize, alpha=0.5, linestyle='--', color='#ffeb3b')\n","\n","  for ep_i in range(len(ep_idx_list_)):\n","    # plt.axvline(prev_plotsize + (ep_idx_list_[ep_i] - ep_idx_list_[0]), alpha=0.7, linestyle='--', color='#ffeb3b')\n","    plt.axvline(prev_plotsize + (ep_idx_list_[ep_i] - open_idx), alpha=0.7, linestyle='--', color='#ffeb3b')\n","\n","  # plt.axvline(prev_plotsize, alpha=0.5, linestyle='--')\n","\n","  x0,x1 = plt.gca().get_xlim()\n","\n","  # ep_xmin = (prev_plotsize + (ep_idx_list_[ep_i] - ep_idx_list_[0])) / x1\n","  ep_xmin = (prev_plotsize + (ep_idx_list_[ep_i] - open_idx)) / x1\n","  plt.axhline(ep_tp_list[t_i][0], linestyle='--', xmin=ep_xmin, xmax=1, alpha=1, color='lime')  # ep line axhline  \n","  plt.text(x1, ep_tp_list[t_i][0][0], ' ep :\\n %s' % ep_tp_list[t_i][0][0], ha='left', va='center', fontweight='bold') # ep line label\n","\n","  \n","  # ------------- tp ------------- #\n","  for sub_i in range(len(ep_tp_list[t_i][1])):\n","\n","    # tp_xmin = (prev_plotsize + (tp_idx_list_[sub_i] - ep_idx_list_[0])) / x1\n","    tp_xmin = (prev_plotsize + (tp_idx_list_[sub_i] - open_idx)) / x1\n","    plt.axhline(ep_tp_list[t_i][1][sub_i], linestyle='--', xmin=tp_xmin , xmax=1, alpha=1, color='lime')  # tp line axhline\n","    plt.text(x1, ep_tp_list[t_i][1][sub_i], ' tp :\\n %s' % ep_tp_list[t_i][1][sub_i], ha='left', va='center', fontweight='bold') # tp line label\n","     \n","    # plt.axvline(prev_plotsize + (tp_idx_list_[sub_i] - ep_idx_list_[0]), alpha=1., linestyle='--', color='#ffeb3b', zorder=2)\n","    plt.axvline(prev_plotsize + (tp_idx_list_[sub_i] - open_idx), alpha=1., linestyle='--', color='#ffeb3b', zorder=2)\n","\n","\n","  # ------------- rtc horizontal range ------------- #\n","  # rtc_ratio_list = [-0.5, 0.272, 0.36, 0.4, 0.5]\n","  rtc_ratio_list = [0.272, 0.36, 0.4, 0.5]\n","  if open_side == config.ep_set.short_entry_score:\n","    # plt.axhline(res_df['short_rtc_1'].iloc[open_idx], linewidth=.5, linestyle='-', alpha=1, color='#ffffff')\n","    # plt.axhline(res_df['short_rtc_0'].iloc[open_idx], linewidth=.5, linestyle='-', alpha=1, color='#ffffff')\n","    plt.axhline(res_df['short_out'].iloc[open_idx], linewidth=.5, linestyle='-', alpha=1, color='#ffffff')\n","    plt.text(x0, res_df['short_out'].iloc[open_idx], ' %s' % config.tr_set.out_gap, ha='left', va='center', fontweight='bold')\n","\n","    for rtc_k in rtc_ratio_list:\n","      plt.axhline(res_df['h_short_rtc_1'].iloc[open_idx] - res_df['h_short_rtc_gap'].iloc[open_idx] * rtc_k, linewidth=.5, linestyle='-', alpha=1, color='#ffffff')\n","      plt.text(x0, res_df['h_short_rtc_1'].iloc[open_idx] - res_df['h_short_rtc_gap'].iloc[open_idx] * rtc_k, ' %s' % rtc_k, ha='left', va='center', fontweight='bold')\n","      \n","    y_max = res_df['h_short_rtc_0'].iloc[open_idx]\n","    y_min = res_df['h_short_rtc_1'].iloc[open_idx] - res_df['h_short_rtc_gap'].iloc[open_idx] * rtc_k\n","\n","    print(\"short_tp :\", res_df['short_tp'].iloc[open_idx])\n","    print(\"short_out :\", res_df['short_out'].iloc[open_idx])\n","\n","  else:\n","    # plt.axhline(res_df['long_rtc_1'].iloc[open_idx], linewidth=.5, linestyle='-', alpha=1, color='#ffffff')\n","    # plt.axhline(res_df['long_rtc_0'].iloc[open_idx], linewidth=.5, linestyle='-', alpha=1, color='#ffffff') \n","    plt.axhline(res_df['long_out'].iloc[open_idx], linewidth=.5, linestyle='-', alpha=1, color='#ffffff')\n","    plt.text(x0, res_df['long_out'].iloc[open_idx], ' %s' % config.tr_set.out_gap, ha='left', va='center', fontweight='bold')\n","\n","    for rtc_k in rtc_ratio_list:\n","      plt.axhline(res_df['h_long_rtc_1'].iloc[open_idx] + res_df['h_long_rtc_gap'].iloc[open_idx] * rtc_k, linewidth=.5, linestyle='-', alpha=1, color='#ffffff')\n","      plt.text(x0, res_df['h_long_rtc_1'].iloc[open_idx] + res_df['h_long_rtc_gap'].iloc[open_idx] * rtc_k, ' %s' % rtc_k, ha='left', va='center', fontweight='bold')\n","\n","    y_max = res_df['h_long_rtc_1'].iloc[open_idx] + res_df['h_long_rtc_gap'].iloc[open_idx] * rtc_k\n","    y_min = res_df['h_long_rtc_0'].iloc[open_idx]\n","\n","    print(\"long_tp :\", res_df['long_tp'].iloc[open_idx])\n","    print(\"long_out :\", res_df['long_out'].iloc[open_idx])\n","  \n","    # t_tr = ((res_df['long_tp'].iloc[open_idx] - res_df['close'].iloc[open_idx] - tp_fee * res_df['close'].iloc[open_idx]) / (res_df['close'].iloc[open_idx] - res_df['long_out'].iloc[open_idx] + out_fee * res_df['close'].iloc[open_idx]))\n","    # t_dr = ((res_df['long_tp'].iloc[open_idx] - res_df['close'].iloc[open_idx]) / (res_df['close'].iloc[open_idx] - res_df['long_out'].iloc[open_idx]))     \n","    # print(\"t_tr :\", t_tr)\n","    # print(\"t_dr :\", t_dr)\n","\n","  #         hedge ep & tp         #\n","  h_i = h_trade_list[t_i][1]\n","  if h_i is not None:\n","    # plt.axvline(prev_plotsize + (h_i - ep_idx_list_[0]), linestyle='--')\n","    plt.axvline(prev_plotsize + (h_i - open_idx), linestyle='--')\n","    plt.axhline(h_ep_tp_list[t_i][0], linestyle='-', xmin=0.75, xmax=1, linewidth=3, color='magenta')  # ep line axhline\n","    plt.axhline(h_ep_tp_list[t_i][1], linestyle='-', xmin=0.85, xmax=1, linewidth=3, color='magenta')  # tp line axhline\n","\n","  \n","  temp_pr = plot_pr_list[t_i]\n","  # if temp_pr > 1:\n","  #   temp_pr_gap = (temp_pr - 1) / lvrg + fee\n","  #   pgfr = (temp_pr_gap - fee) / abs(temp_pr_gap + fee)\n","  # else:\n","  #   pgfr = np.nan\n","\n","  #         check pr        #\n","  if not config.lvrg_set.static_lvrg:\n","    plt.title(\"%s ~ %s -> %.5f\\n %s\\n h_pr : %.5f\\n lvrg : %s\\ntp_ratio : %.3f\\n dr : %.3f\\n fee : %.4f\" % (ep_idx_list_[0], tp_idx_list_[-1], plot_pr_list[t_i], tp_state_list[t_i], \n","                                                                                                h_plot_pr_list[t_i], leverage_list[t_i], tp_ratio_list[t_i], dr_list[t_i], fee_list[t_i]))\n","\n","    print(\"short real pr :\", (ep_tp_list[t_i][0] / ep_tp_list[t_i][1][sub_i] - fee_list[t_i] - 1) * leverage_list[t_i] + 1)\n","    print(\"long real pr :\", (ep_tp_list[t_i][1][sub_i] / ep_tp_list[t_i][0] - fee_list[t_i] - 1) * leverage_list[t_i] + 1)    \n","\n","  else:\n","    plt.title(\"%s ~ %s -> %.5f\\n %s\\n h_pr : %.5f\\n tp_ratio : %.3f\\n dr : %.3f\\n fee : %.4f\" % (ep_idx_list_[0], tp_idx_list_[-1], plot_pr_list[t_i], tp_state_list[t_i], \n","                                                                                     h_plot_pr_list[t_i], tp_ratio_list[t_i], dr_list[t_i], fee_list[t_i]))\n","\n","    print(\"short real pr :\", (ep_tp_list[t_i][0] / ep_tp_list[t_i][1][sub_i] - fee_list[t_i] - 1) * config.lvrg_set.leverage + 1)\n","    print(\"long real pr :\", (ep_tp_list[t_i][1][sub_i] / ep_tp_list[t_i][0] - fee_list[t_i] - 1) * config.lvrg_set.leverage + 1)\n","  \n","  #           y lim           #  \n","  y_max_ = max(np.max(plot_df[yrange_colname]))\n","  y_min_ = min(np.min(plot_df[yrange_colname]))\n","  y_max = max(y_max, y_max_, hy_max)\n","  y_min = min(y_min, y_min_, hy_min)\n","\n","  if np.isnan(y_max) or np.isnan(y_min):\n","    print('continued in yminmax')\n","    continue\n","  # print(\"y_max, y_min :\", y_max, y_min)\n","  # break\n","  \n","\n","  plt.ylim(y_min, y_max)\n","\n","  # ---------------------- plot ---------------------- #\n","\n","  if not save_plot:\n","    plt.show()\n","  \n","  else:\n","    # ---------- save mode ---------- #\n","    fig_name = plot_check_dir +  \"/%s.png\" % t_i\n","    plt.savefig(fig_name)\n","    print(fig_name, \"saved !\")\n","\n","  \n","  plt.close()\n","  print()\n","\n","  # break\n"],"execution_count":89,"outputs":[{"output_type":"stream","name":"stdout","text":["/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT removed !\n","open_side : 2.0\n","open_side : -2.0\n","np_timeidx[open_idx] : 34\n","short_tp : 345.6790545410752\n","short_out : 353.7864171106894\n","short real pr : [1.10513123]\n","long real pr : [0.8889667]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/1.png saved !\n","\n","open_side : 2.0\n","open_side : -2.0\n","np_timeidx[open_idx] : 54\n","short_tp : 343.8007460697024\n","short_out : 347.9674801726847\n","short real pr : [1.11101725]\n","long real pr : [0.87451869]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/3.png saved !\n","\n","open_side : -2.0\n","np_timeidx[open_idx] : 34\n","short_tp : 346.9023758932132\n","short_out : 353.07896172544605\n","short real pr : [0.89101226]\n","long real pr : [1.09545853]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/4.png saved !\n","\n","open_side : 2.0\n","open_side : 2.0\n","open_side : 2.0\n","open_side : -2.0\n","np_timeidx[open_idx] : 24\n","short_tp : 360.9766035690764\n","short_out : 366.51183954745454\n","short real pr : [0.88907878]\n","long real pr : [1.09487752]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/8.png saved !\n","\n","open_side : -2.0\n","np_timeidx[open_idx] : 44\n","short_tp : 361.3489624652581\n","short_out : 365.61800090634495\n","short real pr : [0.88102937]\n","long real pr : [1.09678312]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/9.png saved !\n","\n","open_side : -2.0\n","np_timeidx[open_idx] : 24\n","short_tp : 363.9289727721698\n","short_out : 369.83579881329774\n","short real pr : [1.10348915]\n","long real pr : [0.88701204]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/10.png saved !\n","\n","open_side : 2.0\n","open_side : 2.0\n","open_side : 2.0\n","open_side : -2.0\n","np_timeidx[open_idx] : 44\n","short_tp : 363.9569347156503\n","short_out : 368.30946129251845\n","short real pr : [1.10944431]\n","long real pr : [0.87607229]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/14.png saved !\n","\n","open_side : -2.0\n","np_timeidx[open_idx] : 44\n","short_tp : 375.270305630148\n","short_out : 380.6071711875544\n","short real pr : [0.88161553]\n","long real pr : [1.09992916]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/15.png saved !\n","\n","open_side : -2.0\n","np_timeidx[open_idx] : 29\n","short_tp : 384.14728460034416\n","short_out : 389.3848840442442\n","short real pr : [1.10597243]\n","long real pr : [0.88201129]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/16.png saved !\n","\n","open_side : 2.0\n","open_side : 2.0\n","open_side : 2.0\n","open_side : 2.0\n","open_side : -2.0\n","np_timeidx[open_idx] : 44\n","short_tp : 361.67131427683734\n","short_out : 365.9578361311902\n","short real pr : [1.10839783]\n","long real pr : [0.87710606]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/21.png saved !\n","\n","open_side : -2.0\n","np_timeidx[open_idx] : 14\n","short_tp : 383.8684685743992\n","short_out : 390.641936975882\n","short real pr : [1.10427248]\n","long real pr : [0.88710999]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/22.png saved !\n","\n","open_side : 2.0\n","open_side : 2.0\n","open_side : 2.0\n","open_side : -2.0\n","np_timeidx[open_idx] : 34\n","short_tp : 428.1810847156777\n","short_out : 437.27995761605797\n","short real pr : [1.10546251]\n","long real pr : [0.88772272]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/26.png saved !\n","\n","open_side : -2.0\n","np_timeidx[open_idx] : 9\n","short_tp : 426.8997381701466\n","short_out : 433.4826978566715\n","short real pr : [0.88851035]\n","long real pr : [1.09545439]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/27.png saved !\n","\n","open_side : 2.0\n","open_side : 2.0\n","open_side : 2.0\n","open_side : 2.0\n","open_side : -2.0\n","np_timeidx[open_idx] : 14\n","short_tp : 449.21341643506946\n","short_out : 455.9711089834814\n","short real pr : [1.11023643]\n","long real pr : [0.87865738]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/32.png saved !\n","\n","open_side : 2.0\n","open_side : 2.0\n","open_side : 2.0\n","open_side : 2.0\n","open_side : 2.0\n","open_side : 2.0\n","open_side : 2.0\n","open_side : 2.0\n","open_side : 2.0\n","open_side : -2.0\n","np_timeidx[open_idx] : 39\n","short_tp : 545.7565096939401\n","short_out : 554.1310697404192\n","short real pr : [0.88900761]\n","long real pr : [1.09494974]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/42.png saved !\n","\n","open_side : 2.0\n","open_side : -2.0\n","np_timeidx[open_idx] : 29\n","short_tp : 602.1480769719401\n","short_out : 612.5325282985075\n","short real pr : [0.88533503]\n","long real pr : [1.09995072]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/44.png saved !\n","\n","open_side : 2.0\n","open_side : 2.0\n","open_side : 2.0\n","open_side : -2.0\n","np_timeidx[open_idx] : 59\n","short_tp : 592.9571506188505\n","short_out : 601.1289524334009\n","short real pr : [0.88493514]\n","long real pr : [1.09656465]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/48.png saved !\n","\n","open_side : 2.0\n","open_side : -2.0\n","np_timeidx[open_idx] : 14\n","short_tp : 605.351398322694\n","short_out : 617.5865435009905\n","short real pr : [0.8979386]\n","long real pr : [1.09099313]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/50.png saved !\n","\n","open_side : 2.0\n","open_side : 2.0\n","open_side : 2.0\n","open_side : 2.0\n","open_side : 2.0\n","open_side : 2.0\n","open_side : 2.0\n","open_side : 2.0\n","open_side : 2.0\n","open_side : 2.0\n","open_side : 2.0\n","open_side : 2.0\n","open_side : 2.0\n","open_side : 2.0\n","open_side : 2.0\n","open_side : -2.0\n","np_timeidx[open_idx] : 34\n","short_tp : 640.3293247032898\n","short_out : 648.9107811409153\n","short real pr : [0.88079095]\n","long real pr : [1.09951256]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/66.png saved !\n","\n","open_side : 2.0\n","open_side : -2.0\n","np_timeidx[open_idx] : 4\n","short_tp : 726.2001657404272\n","short_out : 736.6338844633924\n","short real pr : [0.88798125]\n","long real pr : [1.09473117]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/68.png saved !\n","\n","open_side : -2.0\n","np_timeidx[open_idx] : 59\n","short_tp : 730.7312579110302\n","short_out : 739.747815408467\n","short real pr : [1.10720917]\n","long real pr : [0.87911342]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/69.png saved !\n","\n","open_side : 2.0\n","open_side : 2.0\n","open_side : 2.0\n","open_side : -2.0\n","np_timeidx[open_idx] : 44\n","short_tp : 976.5437074583541\n","short_out : 1023.107833624395\n","short real pr : [0.90932705]\n","long real pr : [1.08786494]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/73.png saved !\n","\n","open_side : 2.0\n","open_side : -2.0\n","np_timeidx[open_idx] : 59\n","short_tp : 1071.0182827584326\n","short_out : 1101.992015720012\n","short real pr : [1.10147975]\n","long real pr : [0.89445091]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/75.png saved !\n","\n","open_side : 2.0\n","open_side : -2.0\n","np_timeidx[open_idx] : 4\n","short_tp : 1017.5075864026852\n","short_out : 1039.59720088334\n","short real pr : [0.89097073]\n","long real pr : [1.09810183]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/77.png saved !\n","\n","open_side : -2.0\n","np_timeidx[open_idx] : 24\n","short_tp : 1076.9873567092977\n","short_out : 1109.8903517313595\n","short real pr : [0.89517845]\n","long real pr : [1.09788903]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/78.png saved !\n","\n","open_side : -2.0\n","np_timeidx[open_idx] : 44\n","short_tp : 1068.8865395797725\n","short_out : 1101.2082866102105\n","short real pr : [1.10623515]\n","long real pr : [0.88983718]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/79.png saved !\n","\n","open_side : -2.0\n","np_timeidx[open_idx] : 19\n","short_tp : 1091.90581099737\n","short_out : 1113.8890481607978\n","short real pr : [0.88813597]\n","long real pr : [1.09968108]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/80.png saved !\n","\n","open_side : -2.0\n","np_timeidx[open_idx] : 9\n","short_tp : 1124.7490287630342\n","short_out : 1143.675966456998\n","short real pr : [0.88788223]\n","long real pr : [1.09736164]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/81.png saved !\n","\n","open_side : 2.0\n","open_side : 2.0\n","open_side : 2.0\n","open_side : 2.0\n","open_side : 2.0\n","open_side : -2.0\n","np_timeidx[open_idx] : 34\n","short_tp : 1227.8022388180566\n","short_out : 1260.2152348595796\n","short real pr : [0.89542952]\n","long real pr : [1.09623046]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/87.png saved !\n","\n","open_side : 2.0\n","open_side : 2.0\n","open_side : 2.0\n","open_side : 2.0\n","open_side : 2.0\n","open_side : -2.0\n","np_timeidx[open_idx] : 4\n","short_tp : 1083.5380169428006\n","short_out : 1102.301182699559\n","short real pr : [1.10224059]\n","long real pr : [0.88910578]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/93.png saved !\n","\n","open_side : 2.0\n","open_side : -2.0\n","np_timeidx[open_idx] : 34\n","short_tp : 1216.4254333536007\n","short_out : 1234.1911152035295\n","short real pr : [1.10684775]\n","long real pr : [0.88199488]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/95.png saved !\n","\n","open_side : -2.0\n","np_timeidx[open_idx] : 29\n","short_tp : 1204.300690925565\n","short_out : 1230.391136369693\n","short real pr : [1.10759682]\n","long real pr : [0.88563482]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/96.png saved !\n","\n","open_side : 2.0\n","open_side : -2.0\n","np_timeidx[open_idx] : 29\n","short_tp : 1173.4944830475772\n","short_out : 1190.0150305321974\n","short real pr : [1.10962956]\n","long real pr : [0.87840581]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/98.png saved !\n","\n","open_side : -2.0\n","np_timeidx[open_idx] : 54\n","short_tp : 1244.3002859365256\n","short_out : 1277.239369829605\n","short real pr : [1.10588915]\n","long real pr : [0.88917839]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/99.png saved !\n","\n","open_side : 2.0\n","open_side : 2.0\n","open_side : 2.0\n","open_side : -2.0\n","np_timeidx[open_idx] : 29\n","short_tp : 1195.7315365140043\n","short_out : 1216.8321825419134\n","short real pr : [0.89190168]\n","long real pr : [1.09455388]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/103.png saved !\n","\n","open_side : 2.0\n","open_side : 2.0\n","open_side : 2.0\n","open_side : 2.0\n","open_side : 2.0\n","open_side : 2.0\n","open_side : 2.0\n","open_side : 2.0\n","open_side : 2.0\n","open_side : 2.0\n","open_side : 2.0\n","open_side : -2.0\n","np_timeidx[open_idx] : 54\n","short_tp : 1216.6212586856104\n","short_out : 1232.6695803991215\n","short real pr : [0.88248277]\n","long real pr : [1.09779901]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/115.png saved !\n","\n","open_side : -2.0\n","np_timeidx[open_idx] : 49\n","short_tp : 1239.7404431974603\n","short_out : 1259.943839410831\n","short real pr : [1.10392952]\n","long real pr : [0.88657895]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/116.png saved !\n","\n","open_side : 2.0\n","open_side : -2.0\n","np_timeidx[open_idx] : 49\n","short_tp : 1231.3724702961324\n","short_out : 1247.6034081971075\n","short real pr : [1.10862726]\n","long real pr : [0.87855119]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/118.png saved !\n","\n","open_side : 2.0\n","open_side : 2.0\n","open_side : -2.0\n","np_timeidx[open_idx] : 39\n","short_tp : 1406.6359275250989\n","short_out : 1432.0211498254039\n","short real pr : [1.10675416]\n","long real pr : [0.88467331]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/121.png saved !\n","\n","open_side : -2.0\n","np_timeidx[open_idx] : 59\n","short_tp : 1343.8699516913946\n","short_out : 1366.400717533601\n","short real pr : [1.10707093]\n","long real pr : [0.88349036]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/122.png saved !\n","\n","open_side : -2.0\n","np_timeidx[open_idx] : 14\n","short_tp : 1306.1730073855872\n","short_out : 1332.799488009407\n","short real pr : [1.10100702]\n","long real pr : [0.89208417]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/123.png saved !\n","\n","open_side : -2.0\n","np_timeidx[open_idx] : 19\n","short_tp : 1322.937161174018\n","short_out : 1349.3523386669185\n","short real pr : [0.88898607]\n","long real pr : [1.09881455]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/124.png saved !\n","\n","open_side : -2.0\n","np_timeidx[open_idx] : 4\n","short_tp : 1315.4992031216336\n","short_out : 1343.1777952653065\n","short real pr : [1.10438238]\n","long real pr : [0.8887797]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/125.png saved !\n","\n","open_side : -2.0\n","np_timeidx[open_idx] : 29\n","short_tp : 1234.6080706467428\n","short_out : 1273.353555384832\n","short real pr : [1.09459481]\n","long real pr : [0.90214824]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/126.png saved !\n","\n","open_side : 2.0\n","open_side : -2.0\n","np_timeidx[open_idx] : 24\n","short_tp : 1270.0422481792755\n","short_out : 1284.831561830616\n","short real pr : [0.88255431]\n","long real pr : [1.09524089]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/128.png saved !\n","\n","open_side : -2.0\n","np_timeidx[open_idx] : 54\n","short_tp : 1326.3550860299106\n","short_out : 1343.109222805114\n","short real pr : [0.88032684]\n","long real pr : [1.09873569]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/129.png saved !\n","\n","open_side : 2.0\n","open_side : -2.0\n","np_timeidx[open_idx] : 4\n","short_tp : 1368.221519670166\n","short_out : 1394.2292351728552\n","short real pr : [1.10330696]\n","long real pr : [0.88893744]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/131.png saved !\n","\n","open_side : 2.0\n","open_side : 2.0\n","open_side : 2.0\n","open_side : -2.0\n","np_timeidx[open_idx] : 54\n","short_tp : 1367.4856426138233\n","short_out : 1398.5053097844939\n","short real pr : [1.1015628]\n","long real pr : [0.89245181]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/135.png saved !\n","\n","open_side : 2.0\n","open_side : -2.0\n","np_timeidx[open_idx] : 54\n","short_tp : 1414.0346059181115\n","short_out : 1437.4097815875411\n","short real pr : [0.88969259]\n","long real pr : [1.09552212]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/137.png saved !\n","\n","open_side : 2.0\n","open_side : 2.0\n","open_side : 2.0\n","open_side : 2.0\n","open_side : -2.0\n","np_timeidx[open_idx] : 44\n","short_tp : 1637.1954954353023\n","short_out : 1662.3849615570964\n","short real pr : [0.88873847]\n","long real pr : [1.09522288]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/142.png saved !\n","\n","open_side : -2.0\n","np_timeidx[open_idx] : 54\n","short_tp : 1628.7339080089912\n","short_out : 1659.274083826835\n","short real pr : [1.10184766]\n","long real pr : [0.89036876]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/143.png saved !\n","\n","open_side : -2.0\n","np_timeidx[open_idx] : 44\n","short_tp : 1606.198839836803\n","short_out : 1642.749573469413\n","short real pr : [1.10189808]\n","long real pr : [0.89212424]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/144.png saved !\n","\n","open_side : 2.0\n","open_side : -2.0\n","np_timeidx[open_idx] : 19\n","short_tp : 1643.353871398087\n","short_out : 1662.6950997787085\n","short real pr : [0.88143261]\n","long real pr : [1.09637528]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/146.png saved !\n","\n","open_side : 2.0\n","open_side : 2.0\n","open_side : 2.0\n","open_side : 2.0\n","open_side : 2.0\n","open_side : 2.0\n","open_side : -2.0\n","np_timeidx[open_idx] : 19\n","short_tp : 1699.4288885578026\n","short_out : 1751.9591502050744\n","short real pr : [1.10865765]\n","long real pr : [0.88748922]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/153.png saved !\n","\n","open_side : -2.0\n","np_timeidx[open_idx] : 19\n","short_tp : 1717.8388115857067\n","short_out : 1750.4626513182745\n","short real pr : [1.1032095]\n","long real pr : [0.88903301]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/154.png saved !\n","\n","open_side : 2.0\n","open_side : -2.0\n","np_timeidx[open_idx] : 29\n","short_tp : 1755.0937267541574\n","short_out : 1775.2065171890285\n","short real pr : [1.11006123]\n","long real pr : [0.87463161]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/156.png saved !\n","\n","open_side : -2.0\n","np_timeidx[open_idx] : 19\n","short_tp : 1795.879266711023\n","short_out : 1828.837965702582\n","short real pr : [1.10864345]\n","long real pr : [0.88281895]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/157.png saved !\n","\n","open_side : -2.0\n","np_timeidx[open_idx] : 49\n","short_tp : 1794.3199143253357\n","short_out : 1828.2646743843147\n","short real pr : [1.10279409]\n","long real pr : [0.88944043]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/158.png saved !\n","\n","open_side : 2.0\n","open_side : 2.0\n","open_side : -2.0\n","np_timeidx[open_idx] : 24\n","short_tp : 1835.5922113218887\n","short_out : 1859.1586071036354\n","short real pr : [1.10562714]\n","long real pr : [0.8815115]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/161.png saved !\n","\n","open_side : 2.0\n","open_side : 2.0\n","open_side : 2.0\n","open_side : 2.0\n","open_side : 2.0\n","open_side : 2.0\n","open_side : 2.0\n","open_side : 2.0\n","open_side : 2.0\n","open_side : 2.0\n","open_side : 2.0\n","open_side : 2.0\n","open_side : 2.0\n","open_side : 2.0\n","open_side : -2.0\n","np_timeidx[open_idx] : 24\n","short_tp : 1506.0785123634744\n","short_out : 1549.0162177806892\n","short real pr : [1.10000034]\n","long real pr : [0.89588751]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/176.png saved !\n","\n","open_side : -2.0\n","np_timeidx[open_idx] : 9\n","short_tp : 1484.6926013490151\n","short_out : 1541.1537504959615\n","short real pr : [1.09594639]\n","long real pr : [0.90193544]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/177.png saved !\n","\n","open_side : -2.0\n","np_timeidx[open_idx] : 39\n","short_tp : 1609.8028470097574\n","short_out : 1638.250605518293\n","short real pr : [0.89176158]\n","long real pr : [1.09469638]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/178.png saved !\n","\n","open_side : -2.0\n","np_timeidx[open_idx] : 49\n","short_tp : 1589.256297217752\n","short_out : 1611.5554033888793\n","short real pr : [0.88305056]\n","long real pr : [1.09847455]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/179.png saved !\n","\n","open_side : 2.0\n","open_side : -2.0\n","np_timeidx[open_idx] : 59\n","short_tp : 1624.1786358261998\n","short_out : 1649.0436161125735\n","short real pr : [1.10480472]\n","long real pr : [0.88485913]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/181.png saved !\n","\n","open_side : 2.0\n","open_side : 2.0\n","open_side : 2.0\n","open_side : -2.0\n","np_timeidx[open_idx] : 54\n","short_tp : 1480.5021496972818\n","short_out : 1505.0234373887065\n","short real pr : [0.88949751]\n","long real pr : [1.09572032]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/185.png saved !\n","\n","open_side : -2.0\n","np_timeidx[open_idx] : 59\n","short_tp : 1486.015839994754\n","short_out : 1507.0505294098361\n","short real pr : [0.8821156]\n","long real pr : [1.09942223]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/186.png saved !\n","\n","open_side : 2.0\n","open_side : 2.0\n","open_side : 2.0\n","open_side : -2.0\n","np_timeidx[open_idx] : 59\n","short_tp : 1350.0681393918962\n","short_out : 1372.4672571293736\n","short real pr : [1.10590251]\n","long real pr : [0.88463897]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/190.png saved !\n","\n","open_side : -2.0\n","np_timeidx[open_idx] : 29\n","short_tp : 1346.0318991330967\n","short_out : 1368.4665805636384\n","short real pr : [1.10641259]\n","long real pr : [0.88413751]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/191.png saved !\n","\n","open_side : 2.0\n","open_side : -2.0\n","np_timeidx[open_idx] : 54\n","short_tp : 1398.1127218348145\n","short_out : 1426.8261477333876\n","short real pr : [0.89642208]\n","long real pr : [1.09253945]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/193.png saved !\n","\n","open_side : 2.0\n","open_side : -2.0\n","np_timeidx[open_idx] : 9\n","short_tp : 1530.2139764282363\n","short_out : 1552.805432510381\n","short real pr : [1.10807451]\n","long real pr : [0.88078648]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/195.png saved !\n","\n","open_side : -2.0\n","np_timeidx[open_idx] : 44\n","short_tp : 1513.667181728537\n","short_out : 1537.091316811962\n","short real pr : [1.10600059]\n","long real pr : [0.883682]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/196.png saved !\n","\n","open_side : 2.0\n","open_side : 2.0\n","open_side : -2.0\n","np_timeidx[open_idx] : 59\n","short_tp : 1531.014394366555\n","short_out : 1564.5579391053511\n","short real pr : [0.89004272]\n","long real pr : [1.09904934]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/199.png saved !\n","\n","open_side : -2.0\n","np_timeidx[open_idx] : 54\n","short_tp : 1560.681775145236\n","short_out : 1582.1996232151605\n","short real pr : [1.10723438]\n","long real pr : [0.88076698]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/200.png saved !\n","\n","open_side : -2.0\n","np_timeidx[open_idx] : 44\n","short_tp : 1590.4262646404304\n","short_out : 1636.9508325883935\n","short real pr : [1.10268049]\n","long real pr : [0.89328537]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/201.png saved !\n","\n","open_side : -2.0\n","np_timeidx[open_idx] : 44\n","short_tp : 1583.6967509394742\n","short_out : 1604.1301290218655\n","short real pr : [0.88480053]\n","long real pr : [1.09545202]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/202.png saved !\n","\n","open_side : 2.0\n","open_side : 2.0\n","open_side : 2.0\n","open_side : 2.0\n","open_side : 2.0\n","open_side : 2.0\n","open_side : 2.0\n","open_side : 2.0\n","open_side : -2.0\n","np_timeidx[open_idx] : 4\n","short_tp : 1722.6626075258202\n","short_out : 1742.1753704139046\n","short real pr : [0.87938383]\n","long real pr : [1.09720927]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/211.png saved !\n","\n","open_side : -2.0\n","np_timeidx[open_idx] : 4\n","short_tp : 1812.6330290585954\n","short_out : 1833.25846656566\n","short real pr : [0.87889439]\n","long real pr : [1.09770407]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/212.png saved !\n","\n","open_side : 2.0\n","open_side : 2.0\n","open_side : 2.0\n","open_side : 2.0\n","open_side : -2.0\n","np_timeidx[open_idx] : 9\n","short_tp : 1901.5130231377639\n","short_out : 1929.9353761535897\n","short real pr : [0.88388603]\n","long real pr : [1.09888437]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/217.png saved !\n","\n","open_side : 2.0\n","open_side : 2.0\n","open_side : 2.0\n","open_side : 2.0\n","open_side : 2.0\n","open_side : -2.0\n","np_timeidx[open_idx] : 4\n","short_tp : 1811.1486740750838\n","short_out : 1832.1246595864277\n","short real pr : [0.87697138]\n","long real pr : [1.09964843]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/223.png saved !\n","\n","open_side : -2.0\n","np_timeidx[open_idx] : 14\n","short_tp : 1832.2535305757558\n","short_out : 1858.550856829322\n","short real pr : [0.888088]\n","long real pr : [1.09462293]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/224.png saved !\n","\n","open_side : 2.0\n","open_side : 2.0\n","open_side : -2.0\n","np_timeidx[open_idx] : 44\n","short_tp : 1560.3339498243463\n","short_out : 1599.6701286118919\n","short real pr : [0.89981297]\n","long real pr : [1.09173809]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/227.png saved !\n","\n","open_side : -2.0\n","np_timeidx[open_idx] : 34\n","short_tp : 2045.173177736822\n","short_out : 2071.496021226773\n","short real pr : [1.10590856]\n","long real pr : [0.88123376]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/228.png saved !\n","\n","open_side : 2.0\n","open_side : 2.0\n","open_side : 2.0\n","open_side : 2.0\n","open_side : 2.0\n","open_side : 2.0\n","open_side : 2.0\n","open_side : 2.0\n","open_side : -2.0\n","np_timeidx[open_idx] : 24\n","short_tp : 2415.2644911502452\n","short_out : 2446.7970923346493\n","short real pr : [0.88356971]\n","long real pr : [1.09669828]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/237.png saved !\n","\n","open_side : 2.0\n","open_side : 2.0\n","open_side : -2.0\n","np_timeidx[open_idx] : 24\n","short_tp : 2134.584634938558\n","short_out : 2162.1333216685875\n","short real pr : [0.88477203]\n","long real pr : [1.09548087]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/240.png saved !\n","\n","open_side : 2.0\n","open_side : 2.0\n","open_side : 2.0\n","open_side : 2.0\n","open_side : 2.0\n","open_side : -2.0\n","np_timeidx[open_idx] : 19\n","short_tp : 2397.496346886594\n","short_out : 2429.698068708307\n","short real pr : [1.11081842]\n","long real pr : [0.87638976]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/246.png saved !\n","\n","open_side : 2.0\n","open_side : -2.0\n","np_timeidx[open_idx] : 14\n","short_tp : 2521.506497878889\n","short_out : 2599.2312124554737\n","short real pr : [1.10834818]\n","long real pr : [0.88778908]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/248.png saved !\n","\n","open_side : 2.0\n","open_side : 2.0\n","open_side : 2.0\n","open_side : 2.0\n","open_side : 2.0\n","open_side : 2.0\n","open_side : 2.0\n","open_side : 2.0\n","open_side : -2.0\n","np_timeidx[open_idx] : 39\n","short_tp : 2457.9329202104636\n","short_out : 2502.0756324303175\n","short real pr : [0.89014563]\n","long real pr : [1.0963401]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/257.png saved !\n","\n","open_side : -2.0\n","np_timeidx[open_idx] : 44\n","short_tp : 2498.1166255263265\n","short_out : 2530.8999358552674\n","short real pr : [0.88302628]\n","long real pr : [1.09724858]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/258.png saved !\n","\n","open_side : -2.0\n","np_timeidx[open_idx] : 4\n","short_tp : 2621.327970395821\n","short_out : 2651.6821949984633\n","short real pr : [1.11129797]\n","long real pr : [0.87340941]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/259.png saved !\n","\n","open_side : -2.0\n","np_timeidx[open_idx] : 49\n","short_tp : 2622.882243907349\n","short_out : 2674.4555308482904\n","short real pr : [1.10701508]\n","long real pr : [0.88530209]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/260.png saved !\n","\n","open_side : -2.0\n","np_timeidx[open_idx] : 44\n","short_tp : 2696.3224034631417\n","short_out : 2737.917060096743\n","short real pr : [0.8884705]\n","long real pr : [1.09549483]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/261.png saved !\n","\n","open_side : 2.0\n","open_side : -2.0\n","np_timeidx[open_idx] : 24\n","short_tp : 3344.257875299528\n","short_out : 3385.4823070954144\n","short real pr : [1.10709644]\n","long real pr : [0.87922474]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/263.png saved !\n","\n","open_side : 2.0\n","open_side : -2.0\n","np_timeidx[open_idx] : 4\n","short_tp : 3346.694786485217\n","short_out : 3398.7407303254477\n","short real pr : [1.10655124]\n","long real pr : [0.88314004]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/265.png saved !\n","\n","open_side : -2.0\n","np_timeidx[open_idx] : 44\n","short_tp : 3288.1943344208794\n","short_out : 3353.1595347135585\n","short real pr : [1.10754927]\n","long real pr : [0.88477858]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/266.png saved !\n","\n","open_side : 2.0\n","open_side : -2.0\n","np_timeidx[open_idx] : 34\n","short_tp : 3464.39578495252\n","short_out : 3511.4202150560736\n","short real pr : [1.10547197]\n","long real pr : [0.8825048]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/268.png saved !\n","\n","open_side : 2.0\n","open_side : 2.0\n","open_side : -2.0\n","np_timeidx[open_idx] : 24\n","short_tp : 3412.6538907280246\n","short_out : 3455.2404010029504\n","short real pr : [0.88162685]\n","long real pr : [1.0974199]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/271.png saved !\n","\n","open_side : 2.0\n","open_side : -2.0\n","np_timeidx[open_idx] : 44\n","short_tp : 3511.97593212309\n","short_out : 3551.5258573981946\n","short real pr : [1.10801908]\n","long real pr : [0.87665006]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/273.png saved !\n","\n","open_side : -2.0\n","np_timeidx[open_idx] : 9\n","short_tp : 3521.947004617952\n","short_out : 3561.559486991894\n","short real pr : [1.1078736]\n","long real pr : [0.87679386]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/274.png saved !\n","\n","open_side : -2.0\n","np_timeidx[open_idx] : 24\n","short_tp : 3836.730442594926\n","short_out : 3917.7345744834283\n","short real pr : [1.10475548]\n","long real pr : [0.88841457]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/275.png saved !\n","\n","open_side : 2.0\n","open_side : -2.0\n","np_timeidx[open_idx] : 34\n","short_tp : 3833.558112998855\n","short_out : 3916.094012131932\n","short real pr : [0.89180553]\n","long real pr : [1.09724962]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/277.png saved !\n","\n","open_side : 2.0\n","open_side : 2.0\n","open_side : 2.0\n","open_side : -2.0\n","np_timeidx[open_idx] : 14\n","short_tp : 3901.869530139208\n","short_out : 3996.1220331394147\n","short real pr : [1.10838708]\n","long real pr : [0.88578925]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/281.png saved !\n","\n","open_side : -2.0\n","np_timeidx[open_idx] : 9\n","short_tp : 4286.5293833738\n","short_out : 4342.474038005073\n","short real pr : [1.10748967]\n","long real pr : [0.87967356]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/282.png saved !\n","\n","open_side : 2.0\n","open_side : 2.0\n","open_side : 2.0\n","open_side : 2.0\n","open_side : 2.0\n","open_side : 2.0\n","open_side : -2.0\n","np_timeidx[open_idx] : 34\n","short_tp : 3617.2730231973164\n","short_out : 3719.541552646072\n","short real pr : [0.9024771]\n","long real pr : [1.09038388]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/289.png saved !\n","\n","open_side : -2.0\n","np_timeidx[open_idx] : 4\n","short_tp : 3775.441844851189\n","short_out : 3854.2065606070546\n","short real pr : [1.10346553]\n","long real pr : [0.88967707]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/290.png saved !\n","\n","open_side : -2.0\n","np_timeidx[open_idx] : 49\n","short_tp : 3958.692591339968\n","short_out : 4005.0803644632238\n","short real pr : [0.88189531]\n","long real pr : [1.09590733]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/291.png saved !\n","\n","open_side : -2.0\n","np_timeidx[open_idx] : 54\n","short_tp : 4077.3179601437523\n","short_out : 4136.62130887638\n","short real pr : [1.10638314]\n","long real pr : [0.88245259]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/292.png saved !\n","\n","open_side : 2.0\n","open_side : 2.0\n","open_side : 2.0\n","open_side : 2.0\n","open_side : 2.0\n","open_side : 2.0\n","open_side : -2.0\n","np_timeidx[open_idx] : 44\n","short_tp : 3463.1063101542613\n","short_out : 3521.632908144949\n","short real pr : [1.10797124]\n","long real pr : [0.88260546]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/299.png saved !\n","\n","open_side : 2.0\n","open_side : 2.0\n","open_side : 2.0\n","open_side : 2.0\n","open_side : -2.0\n","np_timeidx[open_idx] : 34\n","short_tp : 2518.1773853536956\n","short_out : 2707.771097556506\n","short real pr : [0.93089847]\n","long real pr : [1.06908786]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/304.png saved !\n","\n","open_side : 2.0\n","open_side : 2.0\n","open_side : 2.0\n","open_side : 2.0\n","open_side : 2.0\n","open_side : 2.0\n","open_side : -2.0\n","np_timeidx[open_idx] : 4\n","short_tp : 2381.7235788158564\n","short_out : 2427.9526392705357\n","short real pr : [0.8918441]\n","long real pr : [1.09590223]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/311.png saved !\n","\n","open_side : -2.0\n","np_timeidx[open_idx] : 14\n","short_tp : 2374.7549714176403\n","short_out : 2447.40918066825\n","short real pr : [1.10751772]\n","long real pr : [0.88859387]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/312.png saved !\n","\n","open_side : 2.0\n","open_side : 2.0\n","open_side : -2.0\n","np_timeidx[open_idx] : 24\n","short_tp : 2067.660198867466\n","short_out : 2150.485661348333\n","short real pr : [0.90362407]\n","long real pr : [1.09215293]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/315.png saved !\n","\n","open_side : 2.0\n","open_side : -2.0\n","np_timeidx[open_idx] : 19\n","short_tp : 2373.946902058279\n","short_out : 2491.59812575672\n","short real pr : [0.90601675]\n","long real pr : [1.09132926]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/317.png saved !\n","\n","open_side : 2.0\n","open_side : -2.0\n","np_timeidx[open_idx] : 24\n","short_tp : 2536.4524212866454\n","short_out : 2603.398096061267\n","short real pr : [1.10556548]\n","long real pr : [0.88949343]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/319.png saved !\n","\n","open_side : 2.0\n","open_side : -2.0\n","np_timeidx[open_idx] : 59\n","short_tp : 2819.145212599299\n","short_out : 2878.4945634556248\n","short real pr : [1.10444357]\n","long real pr : [0.88871982]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/321.png saved !\n","\n","open_side : 2.0\n","open_side : -2.0\n","np_timeidx[open_idx] : 19\n","short_tp : 2804.7682167418116\n","short_out : 2860.580814978607\n","short real pr : [1.10835433]\n","long real pr : [0.88398972]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/323.png saved !\n","\n","open_side : -2.0\n","np_timeidx[open_idx] : 59\n","short_tp : 2784.0392894136326\n","short_out : 2852.9598858138356\n","short real pr : [1.09881615]\n","long real pr : [0.89606838]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/324.png saved !\n","\n","open_side : -2.0\n","np_timeidx[open_idx] : 29\n","short_tp : 2765.6125811744932\n","short_out : 2822.4468313141515\n","short real pr : [1.10185809]\n","long real pr : [0.89125076]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/325.png saved !\n","\n","open_side : 2.0\n","open_side : 2.0\n","open_side : -2.0\n","np_timeidx[open_idx] : 9\n","short_tp : 2535.073322710542\n","short_out : 2579.601515702405\n","short real pr : [0.89236125]\n","long real pr : [1.09408651]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/328.png saved !\n","\n","open_side : 2.0\n","open_side : 2.0\n","open_side : -2.0\n","np_timeidx[open_idx] : 9\n","short_tp : 2416.264265438137\n","short_out : 2444.553038764021\n","short real pr : [1.10698521]\n","long real pr : [0.87850169]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/331.png saved !\n","\n","open_side : 2.0\n","open_side : 2.0\n","open_side : -2.0\n","np_timeidx[open_idx] : 4\n","short_tp : 2521.421599536239\n","short_out : 2562.719558653029\n","short real pr : [0.89061994]\n","long real pr : [1.09458004]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/334.png saved !\n","\n","open_side : -2.0\n","np_timeidx[open_idx] : 44\n","short_tp : 2513.986895735241\n","short_out : 2559.0060646085444\n","short real pr : [1.10589321]\n","long real pr : [0.88551854]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/335.png saved !\n","\n","open_side : -2.0\n","np_timeidx[open_idx] : 34\n","short_tp : 2587.8191826257516\n","short_out : 2625.0652877300554\n","short real pr : [0.8878024]\n","long real pr : [1.09491251]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/336.png saved !\n","\n","open_side : -2.0\n","np_timeidx[open_idx] : 9\n","short_tp : 2611.8866473048233\n","short_out : 2653.693620332656\n","short real pr : [0.88465424]\n","long real pr : [1.09936901]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/337.png saved !\n","\n","open_side : 2.0\n","open_side : -2.0\n","np_timeidx[open_idx] : 59\n","short_tp : 2635.709919651541\n","short_out : 2687.7652645777725\n","short real pr : [1.10750917]\n","long real pr : [0.88481788]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/339.png saved !\n","\n","open_side : 2.0\n","open_side : 2.0\n","open_side : -2.0\n","np_timeidx[open_idx] : 59\n","short_tp : 2674.0319909725963\n","short_out : 2705.1677907987487\n","short real pr : [1.10635996]\n","long real pr : [0.87911948]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/342.png saved !\n","\n","open_side : 2.0\n","open_side : -2.0\n","np_timeidx[open_idx] : 54\n","short_tp : 2769.189330079361\n","short_out : 2817.065194882118\n","short real pr : [1.10206869]\n","long real pr : [0.88927465]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/344.png saved !\n","\n","open_side : 2.0\n","open_side : 2.0\n","open_side : 2.0\n","open_side : 2.0\n","open_side : 2.0\n","open_side : -2.0\n","np_timeidx[open_idx] : 54\n","short_tp : 2648.9877232228428\n","short_out : 2687.0568100083983\n","short real pr : [0.88795558]\n","long real pr : [1.09475719]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/350.png saved !\n","\n","open_side : -2.0\n","np_timeidx[open_idx] : 24\n","short_tp : 2794.1731396922114\n","short_out : 2829.2540954750775\n","short real pr : [1.1092115]\n","long real pr : [0.87713653]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/351.png saved !\n","\n","open_side : -2.0\n","np_timeidx[open_idx] : 39\n","short_tp : 2792.9195022964063\n","short_out : 2828.793199373679\n","short real pr : [1.10567912]\n","long real pr : [0.8814602]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/352.png saved !\n","\n","open_side : 2.0\n","open_side : 2.0\n","open_side : 2.0\n","open_side : 2.0\n","open_side : 2.0\n","open_side : 2.0\n","open_side : 2.0\n","open_side : -2.0\n","np_timeidx[open_idx] : 29\n","short_tp : 2545.466110895631\n","short_out : 2590.3972466528057\n","short real pr : [0.89187474]\n","long real pr : [1.09458129]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/360.png saved !\n","\n","open_side : -2.0\n","np_timeidx[open_idx] : 44\n","short_tp : 2556.1224214268905\n","short_out : 2587.0303019951803\n","short real pr : [0.87853255]\n","long real pr : [1.09930879]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/361.png saved !\n","\n","open_side : 2.0\n","open_side : 2.0\n","open_side : 2.0\n","open_side : 2.0\n","open_side : 2.0\n","open_side : 2.0\n","open_side : -2.0\n","np_timeidx[open_idx] : 34\n","short_tp : 2568.7903595199123\n","short_out : 2603.8667498234972\n","short real pr : [1.10614119]\n","long real pr : [0.88184488]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/368.png saved !\n","\n","open_side : 2.0\n","open_side : 2.0\n","open_side : 2.0\n","open_side : 2.0\n","open_side : -2.0\n","np_timeidx[open_idx] : 54\n","short_tp : 2206.531401306327\n","short_out : 2252.989485774385\n","short real pr : [0.89401387]\n","long real pr : [1.09499594]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/373.png saved !\n","\n","open_side : 2.0\n","open_side : 2.0\n","open_side : -2.0\n","np_timeidx[open_idx] : 54\n","short_tp : 2201.358614010197\n","short_out : 2227.8930198566904\n","short real pr : [1.11037159]\n","long real pr : [0.87515638]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/376.png saved !\n","\n","open_side : -2.0\n","np_timeidx[open_idx] : 54\n","short_tp : 1960.700035714938\n","short_out : 1999.988101365786\n","short real pr : [1.10913962]\n","long real pr : [0.88322034]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/377.png saved !\n","\n","open_side : -2.0\n","np_timeidx[open_idx] : 29\n","short_tp : 1878.5488785984526\n","short_out : 1926.1151759553136\n","short real pr : [0.89940459]\n","long real pr : [1.0921564]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/378.png saved !\n","\n","open_side : -2.0\n","np_timeidx[open_idx] : 34\n","short_tp : 1850.5891295215433\n","short_out : 1903.738944677038\n","short real pr : [1.10076072]\n","long real pr : [0.89514906]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/379.png saved !\n","\n","open_side : -2.0\n","np_timeidx[open_idx] : 54\n","short_tp : 1845.1835761323018\n","short_out : 1880.7954324015816\n","short real pr : [0.89240884]\n","long real pr : [1.09532695]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/380.png saved !\n","\n","open_side : 2.0\n","open_side : 2.0\n","open_side : 2.0\n","open_side : 2.0\n","open_side : 2.0\n","open_side : -2.0\n","np_timeidx[open_idx] : 19\n","short_tp : 1846.278162114766\n","short_out : 1869.7080007774875\n","short real pr : [0.87982813]\n","long real pr : [1.0992405]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/386.png saved !\n","\n","open_side : -2.0\n","np_timeidx[open_idx] : 4\n","short_tp : 1957.46566716444\n","short_out : 1981.8329658692794\n","short real pr : [0.88188747]\n","long real pr : [1.09715615]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/387.png saved !\n","\n","open_side : -2.0\n","np_timeidx[open_idx] : 19\n","short_tp : 1968.6334452824576\n","short_out : 2023.1843548832567\n","short real pr : [0.90428291]\n","long real pr : [1.08852942]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/388.png saved !\n","\n","open_side : -2.0\n","np_timeidx[open_idx] : 14\n","short_tp : 2073.086616428414\n","short_out : 2100.880667804564\n","short real pr : [0.88074716]\n","long real pr : [1.09955692]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/389.png saved !\n","\n","open_side : -2.0\n","np_timeidx[open_idx] : 54\n","short_tp : 2076.5960233313326\n","short_out : 2115.867655636519\n","short real pr : [1.10275807]\n","long real pr : [0.88947575]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/390.png saved !\n","\n","open_side : -2.0\n","np_timeidx[open_idx] : 29\n","short_tp : 2185.348300073343\n","short_out : 2213.2171691446115\n","short real pr : [0.87929804]\n","long real pr : [1.0997771]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/391.png saved !\n","\n","open_side : 2.0\n","open_side : 2.0\n","open_side : 2.0\n","open_side : -2.0\n","np_timeidx[open_idx] : 54\n","short_tp : 2023.6600141648487\n","short_out : 2058.654416972371\n","short real pr : [1.10209258]\n","long real pr : [0.88925118]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/395.png saved !\n","\n","open_side : -2.0\n","np_timeidx[open_idx] : 9\n","short_tp : 2238.284890645879\n","short_out : 2308.8776803845144\n","short real pr : [0.90744952]\n","long real pr : [1.08668902]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/396.png saved !\n","\n","open_side : 2.0\n","open_side : 2.0\n","open_side : -2.0\n","np_timeidx[open_idx] : 9\n","short_tp : 2083.4620480067006\n","short_out : 2108.5398705906987\n","short real pr : [1.11020483]\n","long real pr : [0.87532109]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/399.png saved !\n","\n","open_side : 2.0\n","open_side : 2.0\n","open_side : 2.0\n","open_side : 2.0\n","open_side : 2.0\n","open_side : 2.0\n","open_side : -2.0\n","np_timeidx[open_idx] : 19\n","short_tp : 1732.6377461138861\n","short_out : 1753.0831419536346\n","short real pr : [1.1078906]\n","long real pr : [0.87760717]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/406.png saved !\n","\n","open_side : 2.0\n","open_side : -2.0\n","np_timeidx[open_idx] : 4\n","short_tp : 1935.386752804532\n","short_out : 2000.2745414722544\n","short real pr : [1.10122194]\n","long real pr : [0.89573726]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/408.png saved !\n","\n","open_side : -2.0\n","np_timeidx[open_idx] : 9\n","short_tp : 1968.0046120194945\n","short_out : 2003.0909603012847\n","short real pr : [1.10540431]\n","long real pr : [0.88599856]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/409.png saved !\n","\n","open_side : -2.0\n","np_timeidx[open_idx] : 59\n","short_tp : 1971.4262672130758\n","short_out : 2001.0037747106896\n","short real pr : [1.10992512]\n","long real pr : [0.87896391]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/410.png saved !\n","\n","open_side : 2.0\n","open_side : 2.0\n","open_side : -2.0\n","np_timeidx[open_idx] : 24\n","short_tp : 2302.389735341511\n","short_out : 2352.244608581438\n","short real pr : [0.89123086]\n","long real pr : [1.09783626]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/413.png saved !\n","\n","open_side : 2.0\n","open_side : -2.0\n","np_timeidx[open_idx] : 24\n","short_tp : 2208.327239824026\n","short_out : 2256.4573675823626\n","short real pr : [1.10826874]\n","long real pr : [0.88497769]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/415.png saved !\n","\n","open_side : 2.0\n","open_side : -2.0\n","np_timeidx[open_idx] : 59\n","short_tp : 2271.6601100432504\n","short_out : 2312.105334574724\n","short real pr : [1.10525516]\n","long real pr : [0.88614501]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/417.png saved !\n","\n","open_side : -2.0\n","np_timeidx[open_idx] : 49\n","short_tp : 2287.083670326581\n","short_out : 2313.4757611494783\n","short real pr : [1.11088499]\n","long real pr : [0.87381752]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/418.png saved !\n","\n","open_side : 2.0\n","open_side : 2.0\n","open_side : -2.0\n","np_timeidx[open_idx] : 44\n","short_tp : 2476.865480893784\n","short_out : 2506.728044446244\n","short real pr : [1.11040042]\n","long real pr : [0.87512791]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/421.png saved !\n","\n","open_side : -2.0\n","np_timeidx[open_idx] : 4\n","short_tp : 2690.5990134689696\n","short_out : 2744.008166716533\n","short real pr : [0.88958489]\n","long real pr : [1.09820423]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/422.png saved !\n","\n","open_side : 2.0\n","open_side : 2.0\n","open_side : 2.0\n","open_side : -2.0\n","np_timeidx[open_idx] : 9\n","short_tp : 2782.8156506697837\n","short_out : 2815.4098715697737\n","short real pr : [0.8819428]\n","long real pr : [1.0958593]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/426.png saved !\n","\n","open_side : -2.0\n","np_timeidx[open_idx] : 29\n","short_tp : 2767.393691359062\n","short_out : 2817.4990041761257\n","short real pr : [1.10711785]\n","long real pr : [0.88431631]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/427.png saved !\n","\n","open_side : 2.0\n","open_side : -2.0\n","np_timeidx[open_idx] : 54\n","short_tp : 3045.0249110221334\n","short_out : 3127.8473937581375\n","short real pr : [0.89248585]\n","long real pr : [1.09925008]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/429.png saved !\n","\n","open_side : 2.0\n","open_side : 2.0\n","open_side : -2.0\n","np_timeidx[open_idx] : 54\n","short_tp : 3119.592110574305\n","short_out : 3163.305334769965\n","short real pr : [1.10908891]\n","long real pr : [0.87893872]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/432.png saved !\n","\n","open_side : -2.0\n","np_timeidx[open_idx] : 4\n","short_tp : 3005.9099411850702\n","short_out : 3043.7879195533346\n","short real pr : [1.10963921]\n","long real pr : [0.87671431]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/433.png saved !\n","\n","open_side : 2.0\n","open_side : -2.0\n","np_timeidx[open_idx] : 4\n","short_tp : 3098.8717537152806\n","short_out : 3187.5644682776765\n","short real pr : [1.10040189]\n","long real pr : [0.89549752]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/435.png saved !\n","\n","open_side : 2.0\n","open_side : -2.0\n","np_timeidx[open_idx] : 49\n","short_tp : 3125.4870244661515\n","short_out : 3167.3000825243207\n","short real pr : [0.88097987]\n","long real pr : [1.0993212]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/437.png saved !\n","\n","open_side : 2.0\n","open_side : 2.0\n","open_side : 2.0\n","open_side : -2.0\n","np_timeidx[open_idx] : 49\n","short_tp : 3138.5540790843866\n","short_out : 3176.340911428083\n","short real pr : [1.11023376]\n","long real pr : [0.87529251]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/441.png saved !\n","\n","open_side : 2.0\n","open_side : 2.0\n","open_side : 2.0\n","open_side : -2.0\n","np_timeidx[open_idx] : 44\n","short_tp : 3014.0178874269964\n","short_out : 3053.3642233187484\n","short real pr : [0.88357855]\n","long real pr : [1.09668932]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/445.png saved !\n","\n","open_side : 2.0\n","open_side : 2.0\n","open_side : 2.0\n","open_side : 2.0\n","open_side : 2.0\n","open_side : -2.0\n","np_timeidx[open_idx] : 29\n","short_tp : 3387.529948087069\n","short_out : 3444.738951502599\n","short real pr : [1.10789147]\n","long real pr : [0.88268386]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/451.png saved !\n","\n","open_side : -2.0\n","np_timeidx[open_idx] : 9\n","short_tp : 3756.872760346844\n","short_out : 3815.129691303987\n","short real pr : [1.106229]\n","long real pr : [0.88345719]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/452.png saved !\n","\n","open_side : 2.0\n","open_side : 2.0\n","open_side : 2.0\n","open_side : 2.0\n","open_side : -2.0\n","np_timeidx[open_idx] : 4\n","short_tp : 3360.4429953992444\n","short_out : 3415.942718896781\n","short real pr : [0.88978556]\n","long real pr : [1.09542767]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/457.png saved !\n","\n","open_side : -2.0\n","np_timeidx[open_idx] : 59\n","short_tp : 3446.289443957288\n","short_out : 3508.0770014548852\n","short real pr : [1.1060245]\n","long real pr : [0.88538964]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/458.png saved !\n","\n","open_side : 2.0\n","open_side : 2.0\n","open_side : 2.0\n","open_side : -2.0\n","np_timeidx[open_idx] : 49\n","short_tp : 3408.9493027868825\n","short_out : 3450.685037789295\n","short real pr : [1.10631815]\n","long real pr : [0.87999327]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/462.png saved !\n","\n","open_side : 2.0\n","open_side : -2.0\n","np_timeidx[open_idx] : 54\n","short_tp : 3304.7888032724723\n","short_out : 3342.2311776737033\n","short real pr : [0.87935881]\n","long real pr : [1.09723455]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/464.png saved !\n","\n","open_side : -2.0\n","np_timeidx[open_idx] : 59\n","short_tp : 3525.36175849276\n","short_out : 3573.4953523870445\n","short real pr : [0.88590087]\n","long real pr : [1.09558612]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/465.png saved !\n","\n","open_side : 2.0\n","open_side : 2.0\n","open_side : 2.0\n","open_side : 2.0\n","open_side : -2.0\n","np_timeidx[open_idx] : 54\n","short_tp : 2965.7763029160647\n","short_out : 3002.334964307377\n","short real pr : [1.10709564]\n","long real pr : [0.87922553]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/470.png saved !\n","\n","open_side : 2.0\n","open_side : -2.0\n","np_timeidx[open_idx] : 4\n","short_tp : 2989.9254209361566\n","short_out : 3048.7687576971166\n","short real pr : [0.89045551]\n","long real pr : [1.097317]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/472.png saved !\n","\n","open_side : -2.0\n","np_timeidx[open_idx] : 29\n","short_tp : 3025.3610806651186\n","short_out : 3071.136426715117\n","short real pr : [0.89041919]\n","long real pr : [1.09351739]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/473.png saved !\n","\n","open_side : -2.0\n","np_timeidx[open_idx] : 29\n","short_tp : 3075.0305242125373\n","short_out : 3117.2397515487273\n","short real pr : [0.88535031]\n","long real pr : [1.09614397]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/474.png saved !\n","\n","open_side : 2.0\n","open_side : 2.0\n","open_side : 2.0\n","open_side : 2.0\n","open_side : -2.0\n","np_timeidx[open_idx] : 49\n","short_tp : 2886.0847742110222\n","short_out : 2937.454108165817\n","short real pr : [0.89104595]\n","long real pr : [1.09542425]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/479.png saved !\n","\n","open_side : -2.0\n","np_timeidx[open_idx] : 59\n","short_tp : 2890.9339818825542\n","short_out : 2924.4019051038804\n","short real pr : [1.11126853]\n","long real pr : [0.8734385]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/480.png saved !\n","\n","open_side : -2.0\n","np_timeidx[open_idx] : 39\n","short_tp : 3005.125183569433\n","short_out : 3075.7683763122914\n","short real pr : [0.89437021]\n","long real pr : [1.09595858]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/481.png saved !\n","\n","open_side : -2.0\n","np_timeidx[open_idx] : 54\n","short_tp : 3069.1151694935706\n","short_out : 3119.50410643146\n","short real pr : [0.89038059]\n","long real pr : [1.09482319]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/482.png saved !\n","\n","open_side : 2.0\n","open_side : 2.0\n","open_side : 2.0\n","open_side : 2.0\n","open_side : -2.0\n","np_timeidx[open_idx] : 34\n","short_tp : 2893.184389642686\n","short_out : 2927.9863197215755\n","short real pr : [0.87909713]\n","long real pr : [1.09873762]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/487.png saved !\n","\n","open_side : -2.0\n","np_timeidx[open_idx] : 39\n","short_tp : 2955.6131541213736\n","short_out : 2992.0093948975637\n","short real pr : [0.88302954]\n","long real pr : [1.0960004]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/488.png saved !\n","\n","open_side : 2.0\n","open_side : -2.0\n","np_timeidx[open_idx] : 24\n","short_tp : 2960.9039848206476\n","short_out : 2994.4794061840616\n","short real pr : [0.87926541]\n","long real pr : [1.09732899]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/490.png saved !\n","\n","open_side : -2.0\n","np_timeidx[open_idx] : 54\n","short_tp : 2988.5397213029446\n","short_out : 3025.5072504790237\n","short real pr : [1.1074936]\n","long real pr : [0.87883259]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/491.png saved !\n","\n","open_side : 2.0\n","open_side : -2.0\n","np_timeidx[open_idx] : 19\n","short_tp : 3597.2262932652043\n","short_out : 3640.000990171031\n","short real pr : [0.88033785]\n","long real pr : [1.09748256]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/493.png saved !\n","\n","open_side : 2.0\n","open_side : 2.0\n","open_side : 2.0\n","open_side : 2.0\n","open_side : 2.0\n","open_side : -2.0\n","np_timeidx[open_idx] : 29\n","short_tp : 3835.248234634279\n","short_out : 3885.6794980273085\n","short real pr : [1.1083491]\n","long real pr : [0.87882561]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/499.png saved !\n","\n","open_side : -2.0\n","np_timeidx[open_idx] : 19\n","short_tp : 3882.15344052563\n","short_out : 3944.0270001932463\n","short real pr : [1.10933855]\n","long real pr : [0.8803974]\n","/content/drive/My Drive/Colab Notebooks/JnQ/plot_check/2021-11-17 XRPUSDT/500.png saved !\n","\n","open_side : 2.0\n","open_side : 2.0\n","open_side : 2.0\n","open_side : 2.0\n","open_side : 2.0\n","open_side : 2.0\n","open_side : 2.0\n","open_side : 2.0\n","open_side : 2.0\n","open_side : 2.0\n","open_side : 2.0\n"]}]},{"cell_type":"markdown","metadata":{"id":"TBE0l6dHRYrE"},"source":["### whole pr & chart sync"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":877},"id":"-txULkhXRbz5","executionInfo":{"elapsed":1436,"status":"ok","timestamp":1636355589887,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"outputId":"7cda9fc7-4a4e-4c52-ffa3-a974b5f7c66f"},"source":["#     chunky survey 필요함    #\n","chunk_size = 50000\n","\n","sync_pr = np.ones(len(res_df))\n","sync_tr = np.zeros(len(res_df))\n","# sync_tr = np.empty(len(res_df))\n","# sync_tr[:] = np.nan\n","\n","max_tr = np.max(tp_ratio_list)\n","min_tr = np.min(tp_ratio_list)\n","\n","for ck_i in range(0, len(res_df), chunk_size):\n","\n","  chunked_df = res_df.iloc[ck_i:ck_i + chunk_size]\n","  # break\n","\n","  for pr_, eptp_idx, tr_ in zip(pr_list[ck_i:ck_i + chunk_size], trade_list[ck_i:ck_i + chunk_size], tp_ratio_list[ck_i:ck_i + chunk_size]):\n","    # print(pr_, eptp_idx)\n","    sync_pr[eptp_idx[-1][0]] = pr_\n","    sync_tr[eptp_idx[-1][0]] = tr_\n","    # break\n","\n","  chunked_pr = sync_pr[ck_i:ck_i + chunk_size]\n","  chunked_tr = sync_tr[ck_i:ck_i + chunk_size]\n","  chunked_tr = np.where(np.isnan(chunked_tr), pd.Series(chunked_tr).shift(1), chunked_tr)\n","\n","  # plt.figure(figsize=(8, 6))\n","\n","  plt.subplot(311)\n","  plt.plot(np.arange(len(chunked_df)), chunked_df['close'])\n","  # plt.show()\n","\n","  plt.subplot(312)\n","  plt.plot(np.cumprod(chunked_pr))\n","  \n","  plt.subplot(313)\n","  plt.plot(chunked_tr)\n","  plt.ylim(min_tr + 0.5 * (max_tr - min_tr), max_tr)\n","  \n","  plt.show()\n","  print()\n"],"execution_count":null,"outputs":[{"data":{"image/png":"\n","text/plain":["<Figure size 640x480 with 3 Axes>"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["\n"]},{"data":{"image/png":"\n","text/plain":["<Figure size 640x480 with 3 Axes>"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["\n"]}]},{"cell_type":"markdown","metadata":{"id":"Qys2Bw5Ou3u9"},"source":["### plot indi. legacy"]},{"cell_type":"code","metadata":{"id":"pi5ntOOVu6JT"},"source":["\n","  # ---------------------- ma ---------------------- #\n","   # --------- ema --------- #\n","  # alpha = 1\n","  # for sm_i, item in enumerate(ema_list):\n","  #   if sm_i > 0:\n","  #     lw = 5\n","  #   else:\n","  #     lw = 2\n","  #   plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#03ed30', linewidth=lw)\n","  #   alpha -= 0.2\n","\n","  #   # --------- sma --------- #\n","  # alpha = 1\n","  # for sm_i, sma in enumerate(sma_list):\n","  #   if sm_i > 0:\n","  #     lw = 5\n","  #   else:\n","  #     lw = 4\n","  #   plt.step(np.arange(len(plot_df)), plot_df[sma].values, alpha=alpha, color='#e91e63', linewidth=lw)\n","  #   alpha -= 0.2\n","\n","  \n","  # ---------------------- cb ---------------------- #\n","  # alpha = 1\n","  # for sm_i, item in enumerate(cb_list):\n","  #   if sm_i > 0:\n","  #     lw = 5\n","  #   else:\n","  #     lw = 2\n","  #   plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#5b9cf6', linewidth=lw)\n","  #   alpha -= 0.2\n","\n","\n","  \n","  #               sar               #\n","  # alpha = 1\n","  # markersize = 5\n","  # for sar in sar_list:\n","  #   plt.step(plot_df[sar].values, 'c*', alpha=alpha, markersize=markersize, color='dodgerblue')  # sar mic\n","  #   markersize += 1\n","  #   alpha -= 0.1\n","\n","  # plt.step(plot_df.values[:, [12]], 'co', alpha=1, markersize=7)  # sar mac\n","\n","  #               cloud               #\n","  # alpha = 0.7\n","  # for senkoua, senkoub in zip(senkoua_list, senkoub_list):\n","  #   plt.fill_between(np.arange(len(plot_df)), plot_df[senkoua].values, plot_df[senkoub].values, # ichimoku\n","  #                     where=plot_df[senkoua].values >= plot_df[senkoub].values, facecolor='g', alpha=alpha) # ichimoku\n","  #   plt.fill_between(np.arange(len(plot_df)), plot_df[senkoua].values, plot_df[senkoub].values,\n","  #                     where=plot_df[senkoua].values <= plot_df[senkoub].values, facecolor='r', alpha=alpha)  \n","  #   alpha -= 0.05\n","  \n","\n","\n","  # ---------------------- outer price indi. ---------------------- #\n","  #           macd          #\n","  # plt.subplot(312)\n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for macd in macd_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[macd].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","\n","  # plt.axhline(0, linestyle='--')\n","\n","  \n","  # #           trix          #  \n","  # # plt.subplot(313)\n","  # plt.subplot(gs[2])\n","  # alpha = 1\n","  # for trix in trix_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[trix].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","  # plt.axhline(0, linestyle='--')\n","\n","  \n","  #           fisher          #  \n","  # plt.subplot(313)\n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for fisher in fisher_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[fisher].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","    \n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","\n","  # plt.axhline(0, linestyle='--')\n","  # plt.axhline(fisher_upper, linestyle='--')\n","  # plt.axhline(fisher_lower, linestyle='--')\n","\n","  #           stoch          #  \n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for stoch_ in stoch_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[stoch_].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axhline(50, linestyle='--')\n","  # plt.axhline(stoch_upper, linestyle='--')\n","  # plt.axhline(stoch_lower, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","\n","  # ---------- cctbbo ---------- #  \n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for cctbbo in cctbbo_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[cctbbo].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axhline(50, linestyle='--')\n","  # plt.axhline(cctbbo_upper, linestyle='--')\n","  # plt.axhline(cctbbo_lower, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","\n","  # ---------- ema_roc ---------- #  \n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for emaroc in emaroc_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[emaroc].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","  # plt.axhline(0, linestyle='--')\n","  \n","  # ---------- bbw ---------- #  \n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for bbwp_ in bbwp_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[bbwp_].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","  # plt.axhline(bbwp_thresh, linestyle='--')\n","\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","\n"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"59nW2aKYzkN8"},"source":["### plot all indicator (stepline ver.)"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":828},"id":"JDH4rXgNzno6","executionInfo":{"elapsed":3326,"status":"ok","timestamp":1631665238032,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"outputId":"3ee8589d-27d7-4433-ed78-7bb1233cf175"},"source":["save_plot = False\n","\n","\n","if save_plot:\n","  plot_check_dir = current_path + \"plot_check/\" +  key.replace(\".xlsx\", \"\")\n","  try:\n","    os.mkdir(plot_check_dir)\n","  except:\n","\n","    #     remove existing dir   #\n","    shutil.rmtree(plot_check_dir)\n","    print(plot_check_dir, 'removed !')\n","    os.mkdir(plot_check_dir)\n","    # pass\n","    \n","# prev_plotsize = 120\n","prev_plotsize = 150\n","post_plotsize = 20\n","\n","# inversion = True\n","inversion = False\n","\n","# hedge = True\n","# hedge = False\n","\n","\n","if inversion:  \n","\n","    plot_pr_list = rev_np_pr\n","    h_plot_pr_list = h_rev_np_pr  # hedge\n","\n","else:\n","\n","    plot_pr_list = np_pr\n","    try:\n","      h_plot_pr_list = h_np_pr\n","    except Exception as e:\n","      print(\"error in h_plot_pr :\", e)\n","      h_plot_pr_list = np_pr\n","\n","\n","#         select plot columns       #\n","major_st_list = ['major_ST1_Up', 'major_ST1_Down', 'major_ST2_Up', 'major_ST2_Down', 'major_ST3_Up', 'major_ST3_Down',\n","                 'major_middle_line', 'major_upper_middle', 'major_lower_middle']\n","\n","basic_list = ['open', 'high', 'low', 'close', 'minor_ST1_Up', 'minor_ST1_Down',\n","       'minor_ST2_Up', 'minor_ST2_Down', 'minor_ST3_Up', 'minor_ST3_Down',\n","       'middle_line', 'min_upper', 'max_lower'] # + major_st_list\n","\n","\n","senkoua_list = ['senkou_a1', 'senkou_a2', 'senkou_a3', 'senkou_a4', 'senkou_a5']\n","senkoub_list = ['senkou_b1', 'senkou_b2', 'senkou_b3', 'senkou_b4', 'senkou_b5']\n","senkoua_list = ['senkou_a1',  'senkou_a2']\n","senkoub_list = ['senkou_b1',  'senkou_b2']\n","\n","# sar_list = ['sar1', 'sar2', 'sar3', 'sar4', 'sar5']\n","sar_list = ['sar1']\n","\n","# ma_list = ['sma1', 'sma4']\n","ma_list = ['ema5']\n","\n","\n","#     -------------- under price phase --------------    #\n","macd_list = ['macd_hist1', 'macd_hist2', 'macd_hist3', 'macd_hist4', 'macd_hist5']\n","# macd_list = ['macd_hist1', 'macd_hist2', 'macd_hist3']\n","# trix_list = ['trix1', 'trix2', 'trix3', 'trix4', 'trix5']\n","trix_list = ['trix1', 'trix2', 'trix3']\n","stoch_list = ['stoch']\n","fisher_list = ['fisher30', 'fisher60', 'fisher120']\n","cctbbo_list = ['cctbbo']\n","emaroc_list = ['ema_roc']\n","\n","\n","#       \n","# input_cols = basic_cols + sar_cols + ichimoku_cols + macd_cols + ichimoku_cols2\n","# input_colname = basic_list + senkoua_list + senkoub_list + sar_list + macd_list + trix_list\n","# input_colname = basic_list + senkoua_list + senkoub_list + sar_list + macd_list\n","# input_colname = basic_list + senkoua_list + senkoub_list + sar_list + macd_list + ma_list\n","# input_colname = basic_list + senkoua_list + senkoub_list + sar_list + ma_list + macd_list + stoch_list + fisher_list + cctbbo_list\n","input_colname = basic_list + major_st_list + senkoua_list + senkoub_list + sar_list + stoch_list + fisher_list + emaroc_list\n","price_colname = basic_list + senkoua_list + senkoub_list + sar_list # currently just used for ymin, ymax\n","# input_cols = basic_cols + sar_cols + ichimoku_cols + macd_cols\n","\n","\n","\n","\n","# for t_i, (initial_i, i, j) in enumerate(trade_list):\n","for t_i, (ep_idx_list_, tp_idx_list_) in enumerate(trade_list):\n","  # print(i, j)\n","\n","  if not(i >= prev_plotsize):\n","    continue\n","\n","  # if i <= 4860:\n","  # if i == 1536:\n","  # if 100 < i < 1860:\n","  if ep_idx_list_[0] == 370530:\n","    pass\n","  else:\n","    continue\n","\n","  # if tp_state_list[t_i] != 'd-open':\n","  #   continue\n","\n","  # if (entry[i] == -1) and res_df['close'].iloc[i - 1] > short_ep.iloc[i]:\n","  #   pass\n","  # else:\n","  #   continue\n","\n","  # if plot_pr_list[t_i] > 0.5:\n","  # if plot_pr_list[t_i] > 1.0:\n","  # # if plot_pr_list[t_i] < 1.0:\n","  #   continue\n","\n","  # plot_df = res_df.iloc[i - prev_plotsize:j + post_plotsize, input_cols]\n","  plot_df = res_df.iloc[ep_idx_list_[0] - prev_plotsize:tp_idx_list_[-1] + post_plotsize][input_colname]\n","\n","\n","  #       keep off-color st with another variable         #\n","  # st_trend_plot_df = res_df.iloc[ep_idx_list_[0] - prev_plotsize:tp_idx_list_[-1] + post_plotsize, [7, 10, 13]]\n","  # st_trend_plot_df = res_df[['minor_ST1_Trend', 'minor_ST2_Trend', 'minor_ST3_Trend']].iloc[ep_idx_list_[0] - prev_plotsize:tp_idx_list_[-1] + post_plotsize]\n","  st_trend_plot_df = res_df[['minor_ST1_Trend', 'minor_ST2_Trend', 'minor_ST3_Trend', 'major_ST1_Trend', 'major_ST2_Trend', 'major_ST3_Trend']].iloc[ep_idx_list_[0] - prev_plotsize:tp_idx_list_[-1] + post_plotsize]\n","  # htf_st_trend_plot_df = res_df[['major_ST1_Trend', 'major_ST2_Trend', 'major_ST3_Trend']].iloc[ep_idx_list_[0] - prev_plotsize:tp_idx_list_[-1] + post_plotsize]\n","\n","  # y_max = np.max(plot_df.iloc[:, [4, 6, 8]])\n","  # y_min = np.min(plot_df.iloc[:, [5, 7, 9]])\n","  # print(\"y_max, y_min :\", y_max, y_min)\n","  \n","  # y_max = max(np.max(plot_df.iloc[:, [4, 6, 8]]))\n","  # y_min = min(np.min(plot_df.iloc[:, [5, 7, 9]]))\n","  \n","  y_max = max(np.max(plot_df[price_colname]))\n","  y_min = min(np.min(plot_df[price_colname]))\n","\n","  if np.isnan(y_max) or np.isnan(y_min):\n","    continue\n","  # print(\"y_max, y_min :\", y_max, y_min)\n","  # break\n","  \n","  plot_df[\"off_color_upper_st1\"] = np.where(st_trend_plot_df['minor_ST1_Trend'] == 1, plot_df['minor_ST1_Up'], np.nan)\n","  plot_df[\"off_color_upper_st2\"] = np.where(st_trend_plot_df['minor_ST2_Trend'] == 1, plot_df['minor_ST2_Up'], np.nan)\n","  plot_df[\"off_color_upper_st3\"] = np.where(st_trend_plot_df['minor_ST3_Trend'] == 1, plot_df['minor_ST3_Up'], np.nan)\n","  plot_df[\"off_color_lower_st1\"] = np.where(st_trend_plot_df['minor_ST1_Trend'] == -1, plot_df['minor_ST1_Down'], np.nan)\n","  plot_df[\"off_color_lower_st2\"] = np.where(st_trend_plot_df['minor_ST2_Trend'] == -1, plot_df['minor_ST2_Down'], np.nan)\n","  plot_df[\"off_color_lower_st3\"] = np.where(st_trend_plot_df['minor_ST3_Trend'] == -1, plot_df['minor_ST3_Down'], np.nan)\n","\n","  plot_df[\"off_color_upper_hst1\"] = np.where(st_trend_plot_df['major_ST1_Trend'] == 1, plot_df['major_ST1_Up'], np.nan)\n","  plot_df[\"off_color_upper_hst2\"] = np.where(st_trend_plot_df['major_ST2_Trend'] == 1, plot_df['major_ST2_Up'], np.nan)\n","  plot_df[\"off_color_upper_hst3\"] = np.where(st_trend_plot_df['major_ST3_Trend'] == 1, plot_df['major_ST3_Up'], np.nan)\n","  plot_df[\"off_color_lower_hst1\"] = np.where(st_trend_plot_df['major_ST1_Trend'] == -1, plot_df['major_ST1_Down'], np.nan)\n","  plot_df[\"off_color_lower_hst2\"] = np.where(st_trend_plot_df['major_ST2_Trend'] == -1, plot_df['major_ST2_Down'], np.nan)\n","  plot_df[\"off_color_lower_hst3\"] = np.where(st_trend_plot_df['major_ST3_Trend'] == -1, plot_df['major_ST3_Down'], np.nan)\n","\n","\n","  #       replace st values with np.nan, using st trend     #\n","  plot_df['minor_ST1_Up'] = np.where(st_trend_plot_df['minor_ST1_Trend'] == 1, np.nan, plot_df['minor_ST1_Up'])\n","  plot_df['minor_ST2_Up'] = np.where(st_trend_plot_df['minor_ST2_Trend'] == 1, np.nan, plot_df['minor_ST2_Up'])\n","  plot_df['minor_ST3_Up'] = np.where(st_trend_plot_df['minor_ST3_Trend'] == 1, np.nan, plot_df['minor_ST3_Up'])\n","  plot_df['minor_ST1_Down'] = np.where(st_trend_plot_df['minor_ST1_Trend'] == -1, np.nan, plot_df['minor_ST1_Down'])\n","  plot_df['minor_ST2_Down'] = np.where(st_trend_plot_df['minor_ST2_Trend'] == -1, np.nan, plot_df['minor_ST2_Down'])\n","  plot_df['minor_ST3_Down'] = np.where(st_trend_plot_df['minor_ST3_Trend'] == -1, np.nan, plot_df['minor_ST3_Down'])\n","\n","  plot_df['major_ST1_Up'] = np.where(st_trend_plot_df['major_ST1_Trend'] == 1, np.nan, plot_df['major_ST1_Up'])\n","  plot_df['major_ST2_Up'] = np.where(st_trend_plot_df['major_ST2_Trend'] == 1, np.nan, plot_df['major_ST2_Up'])\n","  plot_df['major_ST3_Up'] = np.where(st_trend_plot_df['major_ST3_Trend'] == 1, np.nan, plot_df['major_ST3_Up'])\n","  plot_df['major_ST1_Down'] = np.where(st_trend_plot_df['major_ST1_Trend'] == -1, np.nan, plot_df['major_ST1_Down'])\n","  plot_df['major_ST2_Down'] = np.where(st_trend_plot_df['major_ST2_Trend'] == -1, np.nan, plot_df['major_ST2_Down'])\n","  plot_df['major_ST3_Down'] = np.where(st_trend_plot_df['major_ST3_Trend'] == -1, np.nan, plot_df['major_ST3_Down'])\n","\n","\n","  plot_short_ep = short_ep.iloc[ep_idx_list_[0] - prev_plotsize:tp_idx_list_[-1] + post_plotsize]\n","  plot_long_ep = long_ep.iloc[ep_idx_list_[0] - prev_plotsize:tp_idx_list_[-1] + post_plotsize]\n","\n","  plot_upper_middle = (plot_df['middle_line'] + plot_df['min_upper']) / 2\n","  plot_lower_middle = (plot_df['middle_line'] + plot_df['max_lower']) / 2\n","\n","  plot_short_tp = short_tp.iloc[ep_idx_list_[0] - prev_plotsize:tp_idx_list_[-1] + post_plotsize]\n","  plot_long_tp = long_tp.iloc[ep_idx_list_[0] - prev_plotsize:tp_idx_list_[-1] + post_plotsize]  \n","\n","\n","  # fig = trendln.plot_support_resistance(plot_df['close'], accuracy=8, fromwindows=False, numbest=1,  window=30) # requires matplotlib - pip install matplotlib\n","\n","  fig = plt.figure(figsize=(12, 16))\n","  \n","  gs = gridspec.GridSpec(nrows=3, # row 몇 개 \n","                       ncols=1, # col 몇 개 \n","                       height_ratios=[3, 1, 1]\n","                      )\n","  \n","  # fig = plt.figure(figsize=(8, 12))\n","  # ax = fig.add_subplot(111)\n","  # ax = fig.add_subplot(311)\n","  ax = fig.add_subplot(gs[0])\n","\n","  # fig.show()\n","  # fig.canvas.draw()\n","\n","  temp_ohlc = plot_df.values[:, :4]\n","  index = np.arange(len(temp_ohlc))\n","  candle = np.hstack((np.reshape(index, (-1, 1)), temp_ohlc))\n","  mf.candlestick_ohlc(ax, candle, width=0.5, colorup='r', colordown='b')\n","\n","  plt.step(plot_df[['minor_ST1_Up', 'minor_ST2_Up', 'minor_ST3_Up']].values, 'r', alpha=1)  # upper on color\n","  plt.step(plot_df[['minor_ST1_Down', 'minor_ST2_Down', 'minor_ST3_Down']].values, 'b', alpha=1)  # lower on color\n","  \n","  plt.step(plot_df[['major_ST1_Up', 'major_ST2_Up', 'major_ST3_Up']].values, 'r', alpha=1, linewidth=3)  # major upper on color\n","  plt.step(plot_df[['major_ST1_Down', 'major_ST2_Down', 'major_ST3_Down']].values, 'b', alpha=1, linewidth=3)  # major lower on color\n","\n","  plt.step(plot_df[['middle_line']].values, 'fuchsia', alpha=1)  # middle \n","  plt.step(plot_df[['major_middle_line']].values, 'fuchsia', alpha=1, linewidth=3)  # major_middle \n","  \n","  plt.step(plot_df[['off_color_upper_st1', 'off_color_upper_st2', 'off_color_upper_st3']].values, 'r', alpha=1, linestyle=':')  # upper off color\n","  plt.step(plot_df[['off_color_lower_st1', 'off_color_lower_st2', 'off_color_lower_st3']].values, 'b', alpha=1, linestyle=':')  # lower off color\n","  \n","  plt.step(plot_df[['off_color_upper_hst1', 'off_color_upper_hst2', 'off_color_upper_hst3']].values, 'r', alpha=1, linestyle=':', linewidth=3)  # major upper off color\n","  plt.step(plot_df[['off_color_lower_hst1', 'off_color_lower_hst2', 'off_color_lower_hst3']].values, 'b', alpha=1, linestyle=':', linewidth=3)  # major lower off color\n","\n","\n","  # plt.step(np.arange(len(plot_df)), plot_short_ep.values, alpha=1, linestyle='--', color='y')  # ep\n","  # plt.step(np.arange(len(plot_df)),plot_long_ep.values, alpha=1, linestyle='--', color='y')  # ep\n","\n","  plt.step(np.arange(len(plot_df)), plot_upper_middle.values, alpha=1, linestyle='--', color='g')  # 2nd middle\n","  plt.step(np.arange(len(plot_df)), plot_lower_middle.values, alpha=1, linestyle='--', color='g')  # 2nd middle\n","\n","  plt.step(plot_df[['major_upper_middle']].values, 'g', linestyle='--', alpha=1, linewidth=3)  # major_middle \n","  plt.step(plot_df[['major_lower_middle']].values, 'g', linestyle='--', alpha=1, linewidth=3)  # major_middle \n","  \n","\n","  # plt.step(np.arange(len(plot_df)), plot_short_tp.values, alpha=1, linestyle=':', color='y')  # tp\n","  # plt.step(np.arange(len(plot_df)), plot_long_tp.values, alpha=1, linestyle=':', color='y')  # tp\n","\n","\n","\n","  # ---------------------- on price indicator part ---------------------- #\n","\n","  # ---------------------- sma ---------------------- #\n","  # alpha = 1\n","  # for sm_i, sma in enumerate(ma_list):\n","  #   if sm_i > 0:\n","  #     lw = 5\n","  #   else:\n","  #     lw = 2\n","  #   plt.step(np.arange(len(plot_df)), plot_df[sma].values, alpha=alpha, color='black', linewidth=lw)\n","  #   alpha -= 0.2\n","  \n","  #               sar               #\n","  alpha = 1\n","  markersize = 5\n","  for sar in sar_list:\n","    plt.step(plot_df[sar].values, 'c*', alpha=alpha, markersize=markersize, color='dodgerblue')  # sar mic\n","    markersize += 1\n","    alpha -= 0.1\n","\n","  # plt.step(plot_df.values[:, [12]], 'co', alpha=1, markersize=7)  # sar mac\n","\n","  #               cloud               #\n","  alpha = 0.7\n","  for senkoua, senkoub in zip(senkoua_list, senkoub_list):\n","    plt.fill_between(np.arange(len(plot_df)), plot_df[senkoua].values, plot_df[senkoub].values, # ichimoku\n","                      where=plot_df[senkoua].values >= plot_df[senkoub].values, facecolor='g', alpha=alpha) # ichimoku\n","    plt.fill_between(np.arange(len(plot_df)), plot_df[senkoua].values, plot_df[senkoub].values,\n","                      where=plot_df[senkoua].values <= plot_df[senkoub].values, facecolor='r', alpha=alpha)  \n","    alpha -= 0.05\n","  \n","  # ------------------------------------------------------------- #\n","\n","\n","  #       ep & tp     #\n","  # if i != initial_i:\n","  # if len(ep_idx_list_) > 1:\n","  \n","  # ------------- initial order ------------- #\n","  plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_list[t_i]), alpha=0.5, linestyle='--', color='lime')\n","\n","  for ep_i in range(len(ep_idx_list_)):\n","    plt.axvline(prev_plotsize + (ep_idx_list_[ep_i] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","\n","  # plt.axvline(prev_plotsize, alpha=0.5, linestyle='--')\n","  plt.axhline(ep_tp_list[t_i][0], linestyle='-', xmin=0.75, xmax=1, linewidth=3, color='lime')  # ep line axhline\n","\n","  for sub_i in range(len(ep_tp_list[t_i][1])):\n","    plt.axhline(ep_tp_list[t_i][1][sub_i], linestyle='-', xmin=0.75 + 0.05 * (sub_i + 1) , xmax=1, linewidth=3, color='lime')  # tp line axhline\n","    # plt.axhline(ep_tp_list[t_i][1], linestyle='-', xmin=0.9, xmax=1, linewidth=3)  # tp line axhline  \n","    plt.axvline(prev_plotsize + (tp_idx_list_[sub_i] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","\n","\n","  #         hedge ep & tp         #\n","  h_i = h_trade_list[t_i][1]\n","  if h_i is not None:\n","    plt.axvline(prev_plotsize + (h_i - ep_idx_list_[0]), linestyle='--')\n","    plt.axhline(h_ep_tp_list[t_i][0], linestyle='-', xmin=0.75, xmax=1, linewidth=3, color='magenta')  # ep line axhline\n","    plt.axhline(h_ep_tp_list[t_i][1], linestyle='-', xmin=0.85, xmax=1, linewidth=3, color='magenta')  # tp line axhline\n","\n","  \n","  #         check pr        #\n","  if not static_lvrg:\n","    plt.title(\"%s ~ %s -> %.5f\\n %s\\n h_pr : %.5f\\nlvrg : %s\\ntp_ratio : %.2f\" % (ep_idx_list_[0], tp_idx_list_[-1], plot_pr_list[t_i], tp_state_list[t_i], h_plot_pr_list[t_i], lvrg_list[t_i], tp_ratio_list[t_i]))\n","  else:\n","    plt.title(\"%s ~ %s -> %.5f\\n %s\\n h_pr : %.5f\\ntp_ratio : %.2f\" % (ep_idx_list_[0], tp_idx_list_[-1], plot_pr_list[t_i], tp_state_list[t_i], h_plot_pr_list[t_i], tp_ratio_list[t_i]))\n","\n","  print(\"short real pr :\", (ep_tp_list[t_i][0] / ep_tp_list[t_i][1][sub_i] - fee - 1) * lvrg + 1)\n","  print(\"long real pr :\", (ep_tp_list[t_i][1][sub_i] / ep_tp_list[t_i][0] - fee - 1) * lvrg + 1)\n","\n","  #           y lim         #\n","  plt.ylim(y_min, y_max)\n","\n","\n","  # ---------------------- outer price indi. ---------------------- #\n","  #           macd          #\n","  # plt.subplot(312)\n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for macd in macd_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[macd].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_list[t_i]), alpha=0.5, linestyle='--', color='lime')\n","\n","  # plt.axhline(0, linestyle='--')\n","\n","  \n","  # #           trix          #  \n","  # # plt.subplot(313)\n","  # plt.subplot(gs[2])\n","  # alpha = 1\n","  # for trix in trix_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[trix].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_list[t_i]), alpha=0.5, linestyle='--', color='lime')\n","  # plt.axhline(0, linestyle='--')\n","\n","  \n","  #           fisher          #  \n","  # plt.subplot(313)\n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for fisher in fisher_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[fisher].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","    \n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_list[t_i]), alpha=0.5, linestyle='--', color='lime')\n","\n","  # plt.axhline(0, linestyle='--')\n","  # plt.axhline(fisher_upper, linestyle='--')\n","  # plt.axhline(fisher_lower, linestyle='--')\n","\n","  #           stoch          #  \n","  # # plt.subplot(313)\n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for stoch in stoch_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[stoch].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axhline(50, linestyle='--')\n","  # plt.axhline(stoch_upper, linestyle='--')\n","  # plt.axhline(stoch_lower, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_list[t_i]), alpha=0.5, linestyle='--', color='lime')\n","\n","  # ---------- cctbbo ---------- #  \n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for cctbbo in cctbbo_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[cctbbo].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axhline(50, linestyle='--')\n","  # plt.axhline(cctbbo_upper, linestyle='--')\n","  # plt.axhline(cctbbo_lower, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_list[t_i]), alpha=0.5, linestyle='--', color='lime')\n","\n","  # ---------- ema_roc ---------- #  \n","  plt.subplot(gs[1])\n","  alpha = 1\n","  for emaroc in emaroc_list:\n","    plt.step(np.arange(len(plot_df)), plot_df[emaroc].values, 'g', alpha=alpha)\n","    # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","    alpha -= 0.2\n","  plt.axvline(prev_plotsize, linestyle='--')\n","  plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_list[t_i]), alpha=0.5, linestyle='--', color='lime')\n","  plt.axhline(0, linestyle='--')\n","\n","\n","\n","\n","\n","  # ---------------------- plot ---------------------- #\n","\n","  if not save_plot:\n","    plt.show()\n","  \n","  else:\n","    # ---------- save mode ---------- #\n","    fig_name = plot_check_dir +  \"/%s.png\" % t_i\n","    plt.savefig(fig_name)\n","    print(fig_name, \"saved !\")\n","\n","  \n","  plt.close()\n","  print()\n","\n","  # break\n"],"execution_count":null,"outputs":[{"name":"stdout","output_type":"stream","text":["short real pr : [0.95849245]\n","long real pr : [1.0378222]\n"]},{"data":{"image/png":"\n","text/plain":["<Figure size 864x1152 with 2 Axes>"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["\n"]}]},{"cell_type":"code","metadata":{"id":"KGuJu2j4Aby9"},"source":["# print()\n","for item in os.listdir(current_path + \"plot_check/\"):\n","  if item.endswith('png'):\n","    os.remove(current_path + \"plot_check/\" + item)\n","    print(current_path + \"plot_check/\" + item, \"removed !\")"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"cj9X6S1jJjER"},"source":["### plot nontp case"]},{"cell_type":"code","metadata":{"id":"Gb1jGrS4Jl8A"},"source":["prev_plotsize = 50\n","\n","# inversion = True\n","inversion = False\n","\n","# hedge = True\n","# hedge = False\n","\n","short_ver = False\n","\n","\n","if inversion:  \n","\n","    plot_pr_list = rev_np_pr\n","    h_plot_pr_list = h_rev_np_pr  # hedge\n","\n","else:\n","\n","    plot_pr_list = np_pr\n","    h_plot_pr_list = h_np_pr\n","\n","\n","\n","#         select plot columns       #\n","# basic_cols = [0, 1, 2, 3, 5, 6, 8, 9, 11, 12, 14] # you don't need to touch\n","\n","# sar_cols = [15, 18] # 15 ~ 19\n","# ichimoku_cols = [20, 21]  # 20 ~ 29\n","# # ichimoku_cols = [22, 23]  # 20 ~ 29\n","# ichimoku_cols2 = [22, 23]  # 20 ~ 29\n","# macd_cols = [30]  # 30 ~ 34\n","\n","# print(res_df.columns[basic_cols])\n","# break\n","\n","basic_list = ['open', 'high', 'low', 'close', 'minor_ST1_Up', 'minor_ST1_Down',\n","       'minor_ST2_Up', 'minor_ST2_Down', 'minor_ST3_Up', 'minor_ST3_Down',\n","       'middle_line', 'min_upper', 'max_lower']\n","# senkoua_list = ['senkou_a1', 'senkou_a2', 'senkou_a3', 'senkou_a4', 'senkou_a5']\n","# senkoub_list = ['senkou_b1', 'senkou_b2', 'senkou_b3', 'senkou_b4', 'senkou_b5']\n","senkoua_list = ['senkou_a1', 'senkou_a2', 'senkou_a3']\n","senkoub_list = ['senkou_b1', 'senkou_b2', 'senkou_b3']\n","# sar_list = ['sar1', 'sar2', 'sar3', 'sar4', 'sar5']\n","# sar_list = ['sar1', 'sar2', 'sar3', 'sar4', 'sar5']\n","sar_list = ['sar1', 'sar2', 'sar3']\n","sar_list = ['sar1', 'sar2', 'sar3']\n","\n","#     -------------- under price phase --------------    #\n","macd_list = ['macd_hist1', 'macd_hist2', 'macd_hist3', 'macd_hist4', 'macd_hist5']\n","trix_list = ['trix1', 'trix2', 'trix3', 'trix4', 'trix5']\n","stoch_list = ['stoch']\n","fisher_list = ['fisher']\n","cctbbo_list = ['cctbbo']\n","\n","\n","#       \n","# input_cols = basic_cols + sar_cols + ichimoku_cols + macd_cols + ichimoku_cols2\n","# input_colname = basic_list + senkoua_list + senkoub_list + sar_list + macd_list + trix_list\n","input_colname = basic_list + senkoua_list + senkoub_list + sar_list + macd_list + stoch_list + fisher_list + cctbbo_list\n","price_colname = basic_list + senkoua_list + senkoub_list + sar_list \n","# input_cols = basic_cols + sar_cols + ichimoku_cols + macd_cols\n","\n","\n","if short_ver:\n","  nontp_indexs = nontp_short_indexs\n","  nontp_liqd_list = nontp_short_liqd_list\n","  nontp_pr_list = nontp_short_pr_list\n","  nontp_ep = nontp_short_ep_list\n","else:\n","  nontp_indexs = nontp_long_indexs\n","  nontp_liqd_list = nontp_long_liqd_list\n","  nontp_pr_list = nontp_long_pr_list\n","  nontp_ep = nontp_long_ep_list\n","\n","\n","for t_i, i in enumerate(nontp_indexs):\n","\n","  j = len(res_df) - 1\n","\n","  # print(i, j)\n","\n","  if not(i >= prev_plotsize):\n","    continue\n","\n","  # if i <= 4860:\n","  # if i == 1536:\n","  # # if 1800 < i < 1860:\n","  #   pass\n","  # else:\n","  #   continue\n","\n","  # if tp_state_list[t_i] != 'd-open':\n","  #   continue\n","\n","  # if (entry[i] == -1) and res_df['close'].iloc[i - 1] > upper_ep.iloc[i]:\n","  #   pass\n","  # else:\n","  #   continue\n","\n","  # if plot_pr_list[t_i] > 0.5:\n","  # if plot_pr_list[t_i] > 1.0:\n","  # # if plot_pr_list[t_i] < 1.0:\n","  #   continue\n","\n","  # plot_df = res_df.iloc[i - prev_plotsize:j + 1, input_cols]\n","  plot_df = res_df.iloc[i - prev_plotsize:j + 1][input_colname]\n","\n","\n","  #       keep off-color st with another variable         #\n","  st_trend_plot_df = res_df.iloc[i - prev_plotsize:j + 1, [7, 10, 13]]\n","\n","  # y_max = np.max(plot_df.iloc[:, [4, 6, 8]])\n","  # y_min = np.min(plot_df.iloc[:, [5, 7, 9]])\n","  # print(\"y_max, y_min :\", y_max, y_min)\n","  \n","  # y_max = max(np.max(plot_df.iloc[:, [4, 6, 8]]))\n","  # y_min = min(np.min(plot_df.iloc[:, [5, 7, 9]]))\n","  \n","  y_max = max(np.max(plot_df[price_colname]))\n","  y_min = min(np.min(plot_df[price_colname]))\n","  # print(\"y_max, y_min :\", y_max, y_min)\n","  # break\n","\n","  plot_df[\"off_color_upper_st1\"] = np.where(st_trend_plot_df.iloc[:, [0]] == 1, plot_df.iloc[:, [4]], np.nan)\n","  plot_df[\"off_color_upper_st2\"] = np.where(st_trend_plot_df.iloc[:, [1]] == 1, plot_df.iloc[:, [6]], np.nan)\n","  plot_df[\"off_color_upper_st3\"] = np.where(st_trend_plot_df.iloc[:, [2]] == 1, plot_df.iloc[:, [8]], np.nan)\n","  plot_df[\"off_color_lower_st1\"] = np.where(st_trend_plot_df.iloc[:, [0]] == -1, plot_df.iloc[:, [5]], np.nan)\n","  plot_df[\"off_color_lower_st2\"] = np.where(st_trend_plot_df.iloc[:, [1]] == -1, plot_df.iloc[:, [7]], np.nan)\n","  plot_df[\"off_color_lower_st3\"] = np.where(st_trend_plot_df.iloc[:, [2]] == -1, plot_df.iloc[:, [9]], np.nan)\n","\n","\n","  #       replace st values with np.nan, using st trend     #\n","  plot_df.iloc[:, [4]] = np.where(st_trend_plot_df.iloc[:, [0]] == 1, np.nan, plot_df.iloc[:, [4]])\n","  plot_df.iloc[:, [6]] = np.where(st_trend_plot_df.iloc[:, [1]] == 1, np.nan, plot_df.iloc[:, [6]])\n","  plot_df.iloc[:, [8]] = np.where(st_trend_plot_df.iloc[:, [2]] == 1, np.nan, plot_df.iloc[:, [8]])\n","  plot_df.iloc[:, [5]] = np.where(st_trend_plot_df.iloc[:, [0]] == -1, np.nan, plot_df.iloc[:, [5]])\n","  plot_df.iloc[:, [7]] = np.where(st_trend_plot_df.iloc[:, [1]] == -1, np.nan, plot_df.iloc[:, [7]])\n","  plot_df.iloc[:, [9]] = np.where(st_trend_plot_df.iloc[:, [2]] == -1, np.nan, plot_df.iloc[:, [9]])\n","\n","\n","  plot_upper_ep = upper_ep.iloc[i - prev_plotsize:j + 1]\n","  plot_lower_ep = lower_ep.iloc[i - prev_plotsize:j + 1]\n","\n","  plot_upper_middle = (plot_df['middle_line'] + plot_df['min_upper']) / 2\n","  plot_lower_middle = (plot_df['middle_line'] + plot_df['max_lower']) / 2\n","\n","  plot_short_tp = short_tp.iloc[i - prev_plotsize:j + 1]\n","  plot_long_tp = long_tp.iloc[i - prev_plotsize:j + 1]  \n","\n","\n","\n","  # fig = plt.figure(figsize=(12, 16))\n","  fig = plt.figure(figsize=(12, 16))\n","  \n","  gs = gridspec.GridSpec(nrows=3, # row 몇 개 \n","                       ncols=1, # col 몇 개 \n","                       height_ratios=[3, 1, 1]\n","                      )\n","  \n","  # fig = plt.figure(figsize=(8, 12))\n","  # ax = fig.add_subplot(111)\n","  # ax = fig.add_subplot(311)\n","  ax = fig.add_subplot(gs[0])\n","\n","  # fig.show()\n","  # fig.canvas.draw()\n","\n","  temp_ohlc = plot_df.values[:, :4]\n","  index = np.arange(len(temp_ohlc))\n","  candle = np.hstack((np.reshape(index, (-1, 1)), temp_ohlc))\n","  mf.candlestick_ohlc(ax, candle, width=0.5, colorup='r', colordown='b')\n","\n","  # print(plot_df.values[:, 4:])\n","  plt.step(plot_df.values[:, [4, 6, 8]], 'r', alpha=1)  # upper on color\n","  # plt.plot(plot_df.values[:, [4, 6, 8]], 'r', alpha=1)  # upper on color\n","  plt.step(plot_df.values[:, [5, 7, 9]], 'b', alpha=1)  # lower on color\n","  plt.step(plot_df.values[:, [10]], 'fuchsia', alpha=1)  # middle\n","  \n","  plt.step(plot_df.values[:, -6:-3], 'r', alpha=1, linestyle=':')  # upper off color\n","  plt.step(plot_df.values[:, -3:], 'b', alpha=1, linestyle=':')  # lower off color\n","\n","\n","\n","  # plt.step(np.arange(len(plot_df)), plot_upper_ep.values, alpha=1, linestyle='--', color='y')  # ep\n","  # plt.step(np.arange(len(plot_df)),plot_lower_ep.values, alpha=1, linestyle='--', color='y')  # ep\n","\n","  plt.step(np.arange(len(plot_df)), plot_upper_middle.values, alpha=1, linestyle='--', color='g')  # 2nd middle\n","  plt.step(np.arange(len(plot_df)), plot_lower_middle.values, alpha=1, linestyle='--', color='g')  # 2nd middle\n","\n","  # plt.step(np.arange(len(plot_df)), plot_short_tp.values, alpha=1, linestyle=':', color='y')  # tp\n","  # plt.step(np.arange(len(plot_df)), plot_long_tp.values, alpha=1, linestyle=':', color='y')  # tp\n","\n","\n","\n","  # ---------------------- indicator part ---------------------- #\n","  \n","  #               sar               #\n","  alpha = 1\n","  markersize = 5\n","  for sar in sar_list:\n","    plt.step(plot_df[sar].values, 'c*', alpha=alpha, markersize=markersize, color='dodgerblue')  # sar mic\n","    markersize += 1\n","    alpha -= 0.1\n","\n","  # plt.step(plot_df.values[:, [12]], 'co', alpha=1, markersize=7)  # sar mac\n","\n","  #               cloud               #\n","  alpha = 0.7\n","  for senkoua, senkoub in zip(senkoua_list, senkoub_list):\n","    plt.fill_between(np.arange(len(plot_df)), plot_df[senkoua].values, plot_df[senkoub].values, # ichimoku\n","                      where=plot_df[senkoua].values >= plot_df[senkoub].values, facecolor='g', alpha=alpha) # ichimoku\n","    plt.fill_between(np.arange(len(plot_df)), plot_df[senkoua].values, plot_df[senkoub].values,\n","                      where=plot_df[senkoua].values <= plot_df[senkoub].values, facecolor='r', alpha=alpha)  \n","    alpha -= 0.05\n","  \n","  # ------------------------------------------------------------- #\n","\n","\n","  #       ep & tp     #\n","  if i != initial_i:\n","    plt.axvline(prev_plotsize - (i - initial_i), alpha=0.5, linestyle='--')\n","  plt.axvline(prev_plotsize, alpha=0.5, linestyle='--')\n","  plt.axhline(nontp_ep[t_i], linestyle='-', xmin=0.75, xmax=1, linewidth=3, color='lime')  # ep line axhline\n","\n","  # for sub_i in range(len(ep_tp_list[t_i][1])):\n","  #   plt.axhline(ep_tp_list[t_i][1][sub_i], linestyle='-', xmin=0.75 + 0.05 * (sub_i + 1) , xmax=1, linewidth=3, color='lime')  # tp line axhline\n","    # plt.axhline(ep_tp_list[t_i][1], linestyle='-', xmin=0.9, xmax=1, linewidth=3)  # tp line axhline    \n","\n","  #         hedge ep & tp         #\n","  # h_i = h_trade_list[t_i][1]\n","  # if h_i is not None:\n","  #   plt.axvline(prev_plotsize + (h_i - i), linestyle='--')\n","  #   plt.axhline(h_ep_tp_list[t_i][0], linestyle='-', xmin=0.75, xmax=1, linewidth=3, color='magenta')  # ep line axhline\n","  #   plt.axhline(h_ep_tp_list[t_i][1], linestyle='-', xmin=0.85, xmax=1, linewidth=3, color='magenta')  # tp line axhline\n","\n","  \n","  #         check pr        #\n","  plt.title(\"%s ~ %s -> liqd : %.2f\\npr : %.2f\" % (i, j, nontp_liqd_list[t_i], nontp_pr_list[t_i]))\n","\n","  #           y lim         #\n","  plt.ylim(y_min, y_max)\n","\n","\n","  # #           macd          #\n","  # # plt.subplot(312)\n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for macd in macd_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[macd].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axhline(0, linestyle='--')\n","\n","  \n","  # #           trix          #  \n","  # # plt.subplot(313)\n","  # plt.subplot(gs[2])\n","  # alpha = 1\n","  # for trix in trix_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[trix].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axhline(0, linestyle='--')\n","\n","  \n","  #           fisher          #  \n","  # # plt.subplot(313)\n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for fisher in fisher_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[fisher].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axhline(0, linestyle='--')\n","  # plt.axhline(fisher_upper, linestyle='--')\n","  # plt.axhline(fisher_lower, linestyle='--')\n","\n","  #           stoch          #  \n","  # plt.subplot(313)\n","  plt.subplot(gs[1])\n","  alpha = 1\n","  for stoch in stoch_list:\n","    plt.step(np.arange(len(plot_df)), plot_df[stoch].values, 'g', alpha=alpha)\n","    # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","    alpha -= 0.2\n","  plt.axvline(prev_plotsize, linestyle='--')\n","  plt.axhline(50, linestyle='--')\n","  plt.axhline(stoch_upper, linestyle='--')\n","  plt.axhline(stoch_lower, linestyle='--')\n","\n","\n","\n","  # ---------------------- plot ---------------------- #\n","\n","  plt.show()\n","  # plt.draw()\n","  plt.close()\n","  print()\n","\n","  # break\n"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"-g7YY5BvMcLS"},"source":["### show detail values"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5TxQ3rDnKMa7","executionInfo":{"elapsed":255,"status":"ok","timestamp":1625228960601,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"},"user_tz":-540},"outputId":"422ac214-8c88-4f39-ec3a-7c823574f6da"},"source":["i, j = 27267, 27268\n","print(\"upper_ep.iloc[i] :\", upper_ep.iloc[i])\n","print(\"short_tp.iloc[j] :\", short_tp.iloc[j])"],"execution_count":null,"outputs":[{"name":"stdout","output_type":"stream","text":["upper_ep.iloc[i] : 2348.266954813089\n","short_tp.iloc[j] : 2205.609333246829\n"]}]},{"cell_type":"markdown","metadata":{"id":"7AIl6EBuZNOL"},"source":["## none plot off-color st"]},{"cell_type":"code","metadata":{"id":"yaVxrNGzZgrF"},"source":["prev_plotsize = 50\n","\n","for t_i, (i, j) in enumerate(trade_list):\n","  # print(i, j)\n","\n","  if not(i >= prev_plotsize):\n","    continue\n","\n","  # if pr_list[t_i] >= 1:\n","  #   continue\n","\n","  plot_df = res_df.iloc[i - prev_plotsize:j + 1, [0, 1, 2, 3, 5, 6, 8, 9, 11, 12, 14, 15, 16]]\n","\n","  #       replace st values with np.nan, using st trend     #\n","  st_trend_plot_df = res_df.iloc[i - prev_plotsize:j + 1, [7, 10, 13]]\n","  plot_df.iloc[:, [4]] = np.where(st_trend_plot_df.iloc[:, [0]] == 1, np.nan, plot_df.iloc[:, [4]])\n","  plot_df.iloc[:, [6]] = np.where(st_trend_plot_df.iloc[:, [1]] == 1, np.nan, plot_df.iloc[:, [6]])\n","  plot_df.iloc[:, [8]] = np.where(st_trend_plot_df.iloc[:, [2]] == 1, np.nan, plot_df.iloc[:, [8]])\n","  plot_df.iloc[:, [5]] = np.where(st_trend_plot_df.iloc[:, [0]] == -1, np.nan, plot_df.iloc[:, [5]])\n","  plot_df.iloc[:, [7]] = np.where(st_trend_plot_df.iloc[:, [1]] == -1, np.nan, plot_df.iloc[:, [7]])\n","  plot_df.iloc[:, [9]] = np.where(st_trend_plot_df.iloc[:, [2]] == -1, np.nan, plot_df.iloc[:, [9]])\n","\n","\n","  plot_upper_ep = upper_ep.iloc[i - prev_plotsize:j + 1]\n","  plot_lower_ep = lower_ep.iloc[i - prev_plotsize:j + 1]\n","\n","  fig = plt.figure(figsize=(8, 6))\n","  ax = fig.add_subplot(111)\n","\n","  # fig.show()\n","  # fig.canvas.draw()\n","\n","  temp_ohlc = plot_df.values[:, :4]\n","  index = np.arange(len(temp_ohlc))\n","  candle = np.hstack((np.reshape(index, (-1, 1)), temp_ohlc))\n","  mf.candlestick_ohlc(ax, candle, width=0.5, colorup='r', colordown='b')\n","\n","  # print(plot_df.values[:, 4:])\n","  plt.plot(plot_df.values[:, [4, 6, 8]], 'r', alpha=1)  # upper\n","  plt.plot(plot_df.values[:, [5, 7, 9]], 'b', alpha=1)  # lower\n","  plt.plot(plot_df.values[:, [10]], 'g', alpha=1)  # middle\n","\n","  plt.plot(plot_df.values[:, [11]], 'c*', alpha=1, markersize=5)  # sar mic\n","  plt.plot(plot_df.values[:, [12]], 'co', alpha=1, markersize=7)  # sar mac\n","\n","  plt.plot(plot_upper_ep.values, alpha=1, linestyle='--')  # ep\n","  plt.plot(plot_lower_ep.values, alpha=1, linestyle='--')  # ep\n","\n","  plt.axvline(prev_plotsize, linestyle='--')\n","\n","  plt.title(\"%s ~ %s -> %.5f\" % (i, j, pr_list[t_i]))\n","  plt.show()\n","  # plt.draw()\n","  plt.close()"],"execution_count":null,"outputs":[]}]}