{"cells":[{"cell_type":"code","execution_count":1,"metadata":{"id":"6rmQpzEGXfCw","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1649121211965,"user_tz":-540,"elapsed":103555,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"d34a22ae-379d-4809-8e29-3eee86018e1c"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')\n","\n","import os, sys\n","\n","current_path = '/content/drive/My Drive/Colab Notebooks/JnQ/'\n","\n","os.chdir(current_path)\n","\n","strat_pkg = 'IDE'\n","\n","mpl_finance_path = '/content/drive/My Drive/Colab Notebooks/JnQ/mpl_finance'\n","zigzag_path = '/content/drive/My Drive/Colab Notebooks/JnQ/zigzag'\n","\n","if mpl_finance_path not in sys.path:\n","\n","  try:\n","    sys.path.insert(0, '/content/drive/My Drive/Colab Notebooks/JnQ')\n","    sys.path.insert(0, '/content/drive/My Drive/Colab Notebooks/JnQ/{}'.format(strat_pkg))\n","    sys.path.insert(0, '/content/drive/My Drive/Colab Notebooks/JnQ/funcs')\n","    sys.path.insert(0, mpl_finance_path)\n","    sys.path.insert(0, zigzag_path)\n","    \n","  except Exception as e:\n","    print(e)"]},{"cell_type":"markdown","metadata":{"id":"8uqYv5StTazo"},"source":["# requirements"]},{"cell_type":"code","execution_count":2,"metadata":{"id":"9qGt60DKTZmf","executionInfo":{"status":"ok","timestamp":1649123452605,"user_tz":-540,"elapsed":12587,"user":{"displayName":"7th June","userId":"08178289703395036410"}}},"outputs":[],"source":["#!pip install zigzag --target=$'/content/drive/My Drive/Colab Notebooks/JnQ/zigzag'\n","\n","# !pip install findiff\n","# import nvstrings, nvcategory, cudf\n","# import cuml\n","# import cudf\n","\n","import os\n","from funcs.funcs_idep import *\n","from funcs.funcs_duration_v2 import *\n","from funcs.funcs_plot_check import *\n","from funcs.funcs_pairing import *\n","# from funcs.funcs_ide import *\n","# from funcs.funcs_indicator_candlescore import *\n","from funcs.funcs_indicator import *\n","from funcs.funcs_trader import *\n","from ast import literal_eval\n","import logging\n","import importlib\n","\n","import mpl_finance as mf\n","import matplotlib.pyplot as plt\n","from matplotlib import gridspec\n","# from zigzag import *\n","# from tqdm.notebook import tqdm\n","\n","import IPython\n","import IPython.display\n","\n","import numpy as np\n","# import jax.numpy as np\n","import pandas as pd\n","# import seaborn as sns\n","# import tensorflow as tf\n","from scipy import stats, signal\n","\n","import pickle\n","import shutil\n","import json\n","from easydict import EasyDict\n","import copy\n","\n","import datetime\n","from datetime import datetime\n","import random\n","import time\n","# import warnings\n","\n","# warnings.simplefilter(\"ignore\", category=RuntimeWarning)\n","\n","np.seterr(invalid=\"ignore\")\n","np.set_printoptions(suppress=True)\n","np.set_printoptions(linewidth=2000) \n","\n","pd.set_option('mode.chained_assignment',  None)\n","\n","pd.set_option('display.max_rows', 500)\n","pd.set_option('display.max_columns', 500)\n","pd.set_option('display.width', 1000)"]},{"cell_type":"markdown","metadata":{"id":"Ic1mfmwWCIBu"},"source":["# makeset - with to_htf dataframes"]},{"cell_type":"markdown","metadata":{"id":"AUSBU7T8Suzi"},"source":["## sync_check_make"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"QmhLikYlSuzi"},"outputs":[],"source":["def sync_check_make(df):\n","\n","    make_itv_list = ['3T', '5T', '15T', '30T', 'H', '4H', 'D']\n","    offset_list = ['1h', '1h', '1h', '1h', '1h', '1h', '9h']\n","\n","    assert len(make_itv_list) == len(offset_list), \"length of itv & offset_list should be equal\"\n","        \n","    htf_df_list = [to_htf(df, itv_=itv_, offset=offset_) for itv_, offset_ in zip(make_itv_list, offset_list)]\n","\n","    df_3T, df_5T, df_15T, df_30T, df_H, df_4H, df_D = htf_df_list\n","\n","    for htf_df in htf_df_list:\n","      print(\"{} -> \".format(pd.infer_freq(htf_df.index)), htf_df.tail(1))\n","\n","    # heikinashi_v2(res_df_)\n","    # h_candle_v3(res_df, '5T')\n","\n","    # --------------- wave_range --------------- #\n","    # df = wave_range(df, 20, 40, ltf_df=None, touch_lbperiod=50)\n","\n","    # print(\"wave_range phase done\")\n","\n","\n","    # --------------- cbline --------------- #    \n","    # cloud_bline(df_3T, 20)\n","    # df = df.join(to_lower_tf_v2(df, df_3T, [-1]), how='inner')\n","    # # cloud_bline(df_5T, 20)\n","    # # df = df.join(to_lower_tf_v2(df, df_5T, [-1]), how='inner')\n","    # cloud_bline(df_15T, 20)\n","    # df = df.join(to_lower_tf_v2(df, df_15T, [-1]), how='inner')\n","    # cloud_bline(df_30T, 20)\n","    # df = df.join(to_lower_tf_v2(df, df_30T, [-1]), how='inner')\n","    # cloud_bline(df_H, 20)\n","    # df = df.join(to_lower_tf_v2(df, df_H, [-1]), how='inner')\n","    # cloud_bline(df_4H, 20)\n","    # df = df.join(to_lower_tf_v2(df, df_4H, [-1]), how='inner')\n","\n","    # print(\"cbline phase done\")\n","\n","    # --------------- sd_dc --------------- #\n","    # df = sd_dc(df, 20, 40)\n","    # df = sd_dc(df, 20, 20)\n","    # df = sd_dc(df_5T, 20, 40, df)\n","    # df = sd_dc(df_H, 20, 40, df)\n","\n","    # print(\"sd_dc phase done\")\n","\n","    # --------------- imb_ratio --------------- #\n","    # imb_ratio(df, '5T')\n","    # imb_ratio_v3(df, \"5T\")\n","    imb_ratio_v4(df, \"5T\")\n","\n","    # imb_ratio(df, 'H')\n","    # imb_ratio_v2(df, '5T')\n","    \n","    print(\"imb_ratio phase done\")\n","\n","    # --------------- rel_abs_ratio --------------- #\n","    # rel_abs_ratio(df, '5T', norm_period=120)\n","\n","    # --------------- normalize data --------------- #\n","    # itv = 'T'\n","    # lb_period = 15\n","    # target_col = 'close_{}{}'.format(itv, lb_period)\n","    # target_data = df['close'].diff(lb_period).to_numpy()\n","    # norm_data(df, target_data, target_col)    \n","    # print(\"normalize data phase done !\")\n","\n","    # --------------- lucid sar --------------- #\n","    # lucid_sar_v2(df)\n","    # lucid_sar_v2(df_3T)\n","    # df = df.join(to_lower_tf_v2(df, df_3T, [-2, -1]), how='inner')\n","    # lucid_sar_v2(df_5T)\n","    # df = df.join(to_lower_tf_v2(df, df_5T, [-2, -1]), how='inner')\n","    # lucid_sar_v2(df_15T)\n","    # df = df.join(to_lower_tf_v2(df, df_15T, [-2, -1]), how='inner')\n","    # lucid_sar_v2(df_30T)\n","    # df = df.join(to_lower_tf_v2(df, df_30T, [-2, -1]), how='inner')       \n","\n","    # print(\"sar phase done\")\n","\n","    # --------------- supertrend --------------- #\n","    # df = st_price_line(df, df_3T, '3m')\n","    # df = st_price_line(df, df_5T, '5m')\n","    # df = st_price_line(df, df_15T, '15m')\n","    # df = st_price_line(df, df_30T, '30m')\n","    # df = st_price_line(df, df_H, '1h')\n","    # df = st_price_line(df, df_4H, '4h')\n","\n","    # print(\"supertrend phase done\")\n","\n","    # --------------- rsi --------------- #  \n","    # df['rsi_1m'] = rsi(df, 14)    \n","    # df_5T['rsi_5m'] = rsi(df_5T, 14)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf_v2(df, df_5T, [-1]), columns=['rsi_5m']))\n","    \n","    # print(\"rsi phase done\")\n","\n","\n","    # --------------- cci --------------- #  \n","    # df['cci_1m'] = cci(df, 20)\n","\n","    # print(\"cci phase done\")\n","\n","    # --------------- ema --------------- #      \n","    # df_5T['ema_5m'] = ema(df_5T['close'], 195)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf_v2(df, df_5T, [-1]), columns=['ema_5m']))\n","    \n","    # print(\"ema phase done\")\n","    \n","    # # --------------- bband --------------- #  \n","    # df = bb_width_v2(df, period, multiple)\n","\n","    # print(\"bband phase done\")\n","\n","    \n","    # --------------- stochastic --------------- #\n","    # df['stoch_1m'] = stoch(df, 13, 3, 3)\n","\n","    # df_5T['stoch'] = stoch(df_5T, 13, 3, 3)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf_v2(df, df_5T, [-1], backing_i=-1), columns=['stoch_5m']))\n","\n","    # print(\"stoch phase done\")\n","\n","\n","    return df\n"]},{"cell_type":"markdown","metadata":{"id":"mEKyVbHWSuzi"},"source":["## make & save res_df (concat 생각하면, timeindex sync 맞춰야함)"]},{"cell_type":"markdown","metadata":{"id":"VdukVo5-Suzj"},"source":["### old (xlsx)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":11,"status":"error","timestamp":1636201718856,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"khKb9nhlSuzj","outputId":"02bf2c60-f298-4fe9-e6bb-78230ac1348c"},"outputs":[{"ename":"NameError","evalue":"ignored","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-5-ee034491b257>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     11\u001b[0m \u001b[0ma_day\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m3600\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0;36m24\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     12\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 13\u001b[0;31m \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mtqdm\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfile_list\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     14\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     15\u001b[0m   \u001b[0mkeys\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mfile_list\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'file_list' is not defined"]}],"source":["pd.set_option('display.max_rows', 500)\n","pd.set_option('display.max_columns', 500)\n","pd.set_option('display.width', 1000)\n","\n","\n","save_path = './candlestick_concated/res_df/'\n","\n","exist_list = os.listdir(save_path)\n","\n","\n","a_day = 3600 * 24\n","\n","for i in tqdm(range(len(file_list))):\n","\n","  keys = [file_list[i]]\n","\n","  # if 'neo'.upper() not in file_list[i]:\n","    # continue\n","\n","  # if '2021-04-30'.upper() not in file_list[i]:\n","  if '2021-07-01'.upper() not in file_list[i]:\n","  # if '2021-10-10'.upper() not in file_list[i]:\n","    continue\n","\n","\n","  for key in keys:      \n","\n","    # if 'eth'.upper() not in key:\n","    #   continue\n","\n","    excel_name = key.replace(\".xlsx\", \"_st1h_backi2.xlsx\")\n","    excel_path = save_path + excel_name\n","\n","    if excel_name in exist_list:\n","      print(excel_name, \"already exist !\")\n","      continue\n","    \n","    open_indexes = []\n","    \n","    df = pd.read_excel(date_path + key, index_col=0)\n","    second_df = pd.read_excel(date_path2 + key, index_col=0)\n","    third_df = pd.read_excel(date_path3 + key, index_col=0)\n","    fourth_df = pd.read_excel(date_path4 + key, index_col=0)\n","    fifth_df = pd.read_excel(date_path5 + key, index_col=0)\n","    \n","    print(df.index[[0, -1]])\n","    print(second_df.index[[0, -1]])\n","    print(third_df.index[[0, -1]])\n","    print(fourth_df.index[[0, -1]])\n","    print(fifth_df.index[[0, -1]])\n","\n","    open_indexes.append(df.index[0])\n","    open_indexes.append(second_df.index[0])\n","    open_indexes.append(third_df.index[0])\n","    open_indexes.append(fourth_df.index[0])\n","    open_indexes.append(fifth_df.index[0])\n","    \n","    try:\n","      #     Todo    #\n","      #      1. 1m 마지막 timeindex 의 date 기준, 08:59:59.999000 를 last timestamp 로 설정\n","      #      2. 시작 timestamp 는 모든 tf 의 가장 최근 시작 index,\n","      #       a. 1m 의 시작 timeindex 는 최소, htf 의 시작 timeindex 보다 interval 만큼 앞서야함\n","      #         i. 따라서 1m open_index, latest_open_index + 1d 를 하면 댐\n","      #           1. timestamp 으로 변환후 1day 를 더하고 datetime 으로 변환\n","      sixth_df = pd.read_excel(date_path6 + key, index_col=0)\n","      seventh_df = pd.read_excel(date_path7 + key, index_col=0)\n","\n","      print(sixth_df.index[[0, -1]])\n","      print(seventh_df.index[[0, -1]])\n","      print()\n","\n","      open_indexes.append(sixth_df.index[0])\n","      open_indexes.append(seventh_df.index[0])\n","\n","    except Exception as e:\n","      print(e)\n","\n","    latest_open_index = sorted(open_indexes)[-1]\n","    \n","    open_ts = datetime.timestamp(latest_open_index)\n","    latest_open_index_1m = datetime.fromtimestamp(open_ts + a_day)\n","\n","    #   str 로 만들어 접근하면 불가함  #\n","    end_index = pd.to_datetime(str(df.index[-1]).split(\" \")[0] + \" 08:59:59.999000\")\n","    # break\n","\n","    sliced_df = df.loc[latest_open_index_1m:end_index] # to_lower_tf 의 기준 ltf\n","    sliced_second_df = second_df.loc[latest_open_index:end_index]\n","    sliced_third_df = third_df.loc[latest_open_index:end_index]\n","    sliced_fourth_df = fourth_df.loc[latest_open_index:end_index]\n","    sliced_fifth_df = fifth_df.loc[latest_open_index:end_index]\n","\n","    print(\"sliced index\")\n","    print(sliced_df.index[[0, -1]])\n","    print(sliced_second_df.index[[0, -1]])\n","    print(sliced_third_df.index[[0, -1]])\n","    print(sliced_fourth_df.index[[0, -1]])\n","    print(sliced_fifth_df.index[[0, -1]])\n","\n","    try:\n","      sliced_sixth_df = sixth_df.loc[latest_open_index:end_index]\n","      sliced_seventh_df = seventh_df.loc[latest_open_index:end_index]\n","\n","      print(sliced_sixth_df.index[[0, -1]])\n","      print(sliced_seventh_df.index[[0, -1]])\n","\n","      res_df = sync_check(sliced_df, sliced_second_df, sliced_third_df, sliced_fourth_df, sliced_fifth_df, sliced_sixth_df, sliced_seventh_df)\n","    \n","    except:\n","      res_df = sync_check(sliced_df, sliced_second_df, sliced_third_df, sliced_fourth_df, sliced_fifth_df)\n","\n","\n","\n","    res_df.to_excel(excel_path)\n","    print(excel_name, \"saved succesfully !\")"]},{"cell_type":"markdown","metadata":{"id":"Bw5JibDKSuzj"},"source":["### xlsx to feather"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":355,"referenced_widgets":["be2b848dbcb14a079a2b7bd605af6435"]},"id":"VA-_gcA7Suzj","outputId":"f6f3b55d-ec2c-4b2c-d62e-3de7c0384dc4"},"outputs":[{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"be2b848dbcb14a079a2b7bd605af6435","version_major":2,"version_minor":0},"text/plain":["  0%|          | 0/156 [00:00<?, ?it/s]"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["DatetimeIndex(['2021-06-28 00:00:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:02:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:04:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:14:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:29:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-09-14 03:59:59.999000', '2021-11-15 14:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-03-10 20:59:59.999000', '2021-11-15 16:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","\n","xlsx converted to feather !\n","DatetimeIndex(['2021-06-28 00:00:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:02:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:04:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:14:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:29:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-09-14 03:59:59.999000', '2021-11-15 14:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-03-10 20:59:59.999000', '2021-11-15 16:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","\n","xlsx converted to feather !\n"]}],"source":["pd.set_option('display.max_rows', 500)\n","pd.set_option('display.max_columns', 500)\n","pd.set_option('display.width', 1000)\n","\n","\n","save_path = './candlestick_concated/res_df/'\n","\n","exist_list = os.listdir(save_path)\n","\n","\n","a_day = 3600 * 24\n","\n","for i in tqdm(range(len(file_list))):\n","\n","  keys = [file_list[i]]\n","\n","  # if 'neo'.upper() not in file_list[i]:\n","    # continue\n","\n","  # if '2021-04-30'.upper() not in file_list[i]:\n","  # if '2021-07-01'.upper() not in file_list[i]:\n","  if '2021-10-10'.upper() not in file_list[i]:\n","    continue\n","\n","\n","  for key in keys:      \n","\n","    # if 'eth'.upper() not in key:\n","    #   continue\n","\n","    feather_name = key.replace(\".xlsx\", \".ftr\")\n","    # feather_path = save_path + feather_name\n","\n","    if feather_name in exist_list:\n","      print(feather_name, \"already exist !\")\n","      continue\n","    \n","    open_indexes = []\n","    \n","    df = pd.read_excel(date_path + key, index_col=0)\n","    second_df = pd.read_excel(date_path2 + key, index_col=0)\n","    third_df = pd.read_excel(date_path3 + key, index_col=0)\n","    fourth_df = pd.read_excel(date_path4 + key, index_col=0)\n","    fifth_df = pd.read_excel(date_path5 + key, index_col=0)\n","    \n","    print(df.index[[0, -1]])\n","    print(second_df.index[[0, -1]])\n","    print(third_df.index[[0, -1]])\n","    print(fourth_df.index[[0, -1]])\n","    print(fifth_df.index[[0, -1]])\n","\n","    open_indexes.append(df.index[0])\n","    open_indexes.append(second_df.index[0])\n","    open_indexes.append(third_df.index[0])\n","    open_indexes.append(fourth_df.index[0])\n","    open_indexes.append(fifth_df.index[0])\n","    \n","    try:\n","      #     Todo    #\n","      #      1. 1m 마지막 timeindex 의 date 기준, 08:59:59.999000 를 last timestamp 로 설정\n","      #      2. 시작 timestamp 는 모든 tf 의 가장 최근 시작 index,\n","      #       a. 1m 의 시작 timeindex 는 최소, htf 의 시작 timeindex 보다 interval 만큼 앞서야함\n","      #         i. 따라서 1m open_index, latest_open_index + 1d 를 하면 댐\n","      #           1. timestamp 으로 변환후 1day 를 더하고 datetime 으로 변환\n","      sixth_df = pd.read_excel(date_path6 + key, index_col=0)\n","      seventh_df = pd.read_excel(date_path7 + key, index_col=0)\n","\n","      print(sixth_df.index[[0, -1]])\n","      print(seventh_df.index[[0, -1]])\n","      print()\n","\n","      open_indexes.append(sixth_df.index[0])\n","      open_indexes.append(seventh_df.index[0])\n","\n","    except Exception as e:\n","      print(e)\n","\n","\n","    df.reset_index().to_feather(date_path + feather_name, compression='lz4')\n","    second_df.reset_index().to_feather(date_path2 + feather_name, compression='lz4')\n","    third_df.reset_index().to_feather(date_path3 + feather_name, compression='lz4')\n","    fourth_df.reset_index().to_feather(date_path4 + feather_name, compression='lz4')\n","    fifth_df.reset_index().to_feather(date_path5 + feather_name, compression='lz4')\n","    sixth_df.reset_index().to_feather(date_path6 + feather_name, compression='lz4')\n","    seventh_df.reset_index().to_feather(date_path7 + feather_name, compression='lz4')\n","\n","    print(\"xlsx converted to feather !\")\n","    "]},{"cell_type":"markdown","metadata":{"id":"Pe0QpnORSuzk"},"source":["### add itv_name to ftr"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":223,"referenced_widgets":["e3225655da874b8d89cc8b2a381b3fb6"]},"executionInfo":{"elapsed":43664,"status":"ok","timestamp":1638246331122,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"M-gl30KxSuzk","outputId":"1cfcb580-8d25-4bd0-fdd0-213640779ce2"},"outputs":[{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"e3225655da874b8d89cc8b2a381b3fb6","version_major":2,"version_minor":0},"text/plain":["  0%|          | 0/175 [00:00<?, ?it/s]"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 BTCUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 BCHUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 XRPUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 EOSUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 LTCUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 ETCUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 LINKUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 XLMUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 ADAUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 ETHUSDT_1m.ftr\n"]}],"source":["save_path = './candlestick_concated/res_df/'\n","\n","# dir_path = \"bbdc3m_backi2\"\n","# date = '2021-10-10'\n","date = '2021-07-01'\n","\n","db_path = './candlestick_concated/database_bn/non_cum/%s/' % date\n","os.makedirs(os.path.join(db_path), exist_ok=True)\n","\n","# exist_list = os.listdir(os.path.join(save_path, dir_path))\n","# break\n","\n","\n","a_day = 3600 * 24\n","\n","for i in tqdm(range(len(file_list))):\n","\n","  keys = [file_list[i]]\n","\n","  # if 'neo'.upper() not in file_list[i]:\n","    # continue\n","\n","  if date not in file_list[i]:\n","    continue\n","\n","\n","  for key in keys:      \n","\n","    # if 'eth'.upper() not in key:\n","    #   continue\n","    # print(key)\n","    \n","    if \".ftr\" not in key:\n","      continue\n","        \n","    df = shutil.copy(date_path + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval))\n","    second_df = shutil.copy(date_path2 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval2))\n","    third_df = shutil.copy(date_path3 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval3))\n","    fourth_df = shutil.copy(date_path4 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval4))\n","    fifth_df = shutil.copy(date_path5 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval5))\n","    sixth_df = shutil.copy(date_path6 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval6))\n","    seventh_df = shutil.copy(date_path7 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval7))\n","\n","    print(\"copied to\" + db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval))\n"]},{"cell_type":"markdown","metadata":{"id":"4oZ1ohTtSuzk"},"source":["### feather ver. (database to res_df)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"vgVHpnUsSuzk"},"outputs":[],"source":["# db_path = './candlestick_concated/database_ub/' # upbit\n","db_path = './candlestick_concated/database_bn/'   # binance\n","\n","save_path = './candlestick_concated/res_df/'\n","\n","save_dir_path = \"bb1d_backi2\"\n","date = '2022-02-17'\n","\n","# concat_path = 'noncat' # 새로운 cols 를 기존 cum/concat 에 붙이려는 경우\n","concat_path = 'concat'\n","cum_path = \"cum\"\n","# cum_path = \"non_cum\"  # non_cum 으로 진행하는 경우, row concat 용도이기 때문에 noncat -> concat 으로 변경 (base cols 를 모두 담고 있음)\n","\n","load_path = os.path.join(db_path, cum_path, date)\n","save_path = os.path.join(save_path, save_dir_path, concat_path, cum_path, date)\n","\n","os.makedirs(save_path, exist_ok=True)\n","\n","file_list = os.listdir(load_path)\n","exist_list = os.listdir(save_path)\n","# break\n","\n","a_day = 3600 * 24\n","\n","for i in tqdm(range(len(file_list))):\n","\n","  keys = [file_list[i]]\n","\n","  # if 'neo'.upper() not in file_list[i]:\n","    # continue\n","\n","  if date not in file_list[i]:\n","    continue\n","\n","\n","  for key in keys:      \n","\n","    # if 'eth'.upper() not in key:\n","    #   continue\n","    # print(key)\n","    \n","    if \".ftr\" not in key:\n","      continue\n","\n","    if \"_1m\" not in key:\n","      continue\n","\n","    # feather_name = key.replace(\".ftr\", \"_%.ftr\" % save_dir_path)\n","    feather_name = key.replace(\"_1m\", \"\")\n","    feather_path = os.path.join(save_path, feather_name)\n","\n","    if feather_name in exist_list:\n","      print(feather_name, \"already exist !\")\n","      continue\n","    \n","    df = pd.read_feather(os.path.join(load_path, key), columns=None, use_threads=True).set_index(\"index\")\n","\n","    res_df = sync_check_make(df)\n","\n","    res_df.reset_index().to_feather(feather_path, compression='lz4')\n","    print(feather_path, \"saved succesfully !\")"]},{"cell_type":"markdown","source":["#### just add col to loaded df"],"metadata":{"id":"YxCPUzoyidwH"}},{"cell_type":"code","source":["res_df_ = sync_check_make(res_df_)  # suffix duplication 유의"],"metadata":{"id":"odqVwQHpYo1M","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1648807669750,"user_tz":-540,"elapsed":3919,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"ec5b80e3-1094-45b0-9d16-7b68dc24fc99"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["3T ->                          open     high      low    close\n","index                                                  \n","2022-02-17 10:27:00  3148.85  3150.08  3146.38  3146.76\n","5T ->                          open     high      low    close\n","index                                                  \n","2022-02-17 10:25:00  3146.85  3150.08  3145.44  3146.76\n","15T ->                          open    high      low    close\n","index                                                 \n","2022-02-17 10:15:00  3143.99  3151.0  3139.14  3146.76\n","30T ->                         open     high      low    close\n","index                                                 \n","2022-02-17 10:00:00  3148.8  3158.68  3139.14  3146.76\n","H ->                         open     high      low    close\n","index                                                 \n","2022-02-17 10:00:00  3148.8  3158.68  3139.14  3146.76\n","4H ->                         open     high     low    close\n","index                                                \n","2022-02-17 09:00:00  3121.8  3158.68  3120.0  3146.76\n","D ->                         open     high     low    close\n","index                                                \n","2022-02-17 09:00:00  3121.8  3158.68  3120.0  3146.76\n","imb_ratio phase done\n"]}]},{"cell_type":"code","source":["res_df_.tail().iloc[:, -10:]\n","# res_df_.dtypes"],"metadata":{"id":"3SKglsQCj5_x","colab":{"base_uri":"https://localhost:8080/","height":237},"executionInfo":{"status":"ok","timestamp":1648807669751,"user_tz":-540,"elapsed":8,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"5d372ef3-e8bb-4302-dc73-d63015c7db41"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                         long_wave_1_T  long_wave_0_T  long_wave_point_T  short_ir_H  long_ir_H  body_rel_ratio_5T  short_ir3_5T  long_ir3_5T  short_ir4_5T  long_ir4_5T\n","index                                                                                                                                                                   \n","2022-02-17 10:25:59.999        3158.68        3114.98              False   -1.369498        NaN           0.056604    -27.444444          NaN     -1.553459          NaN\n","2022-02-17 10:26:59.999        3158.68        3114.98              False   -1.369498        NaN           0.056604    -27.444444          NaN     -1.553459          NaN\n","2022-02-17 10:27:59.999        3158.68        3114.98              False   -1.369498        NaN           0.056604    -27.444444          NaN     -1.553459          NaN\n","2022-02-17 10:28:59.999        3158.68        3114.98              False   -1.369498        NaN           0.056604    -27.444444          NaN     -1.553459          NaN\n","2022-02-17 10:29:59.999        3158.68        3114.98              False   -1.369498        NaN           0.056604    -27.444444          NaN     -1.553459          NaN"],"text/html":["\n","  <div id=\"df-7599f554-5d7d-4cf6-b40f-734ab64ce1ab\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>long_wave_1_T</th>\n","      <th>long_wave_0_T</th>\n","      <th>long_wave_point_T</th>\n","      <th>short_ir_H</th>\n","      <th>long_ir_H</th>\n","      <th>body_rel_ratio_5T</th>\n","      <th>short_ir3_5T</th>\n","      <th>long_ir3_5T</th>\n","      <th>short_ir4_5T</th>\n","      <th>long_ir4_5T</th>\n","    </tr>\n","    <tr>\n","      <th>index</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2022-02-17 10:25:59.999</th>\n","      <td>3158.68</td>\n","      <td>3114.98</td>\n","      <td>False</td>\n","      <td>-1.369498</td>\n","      <td>NaN</td>\n","      <td>0.056604</td>\n","      <td>-27.444444</td>\n","      <td>NaN</td>\n","      <td>-1.553459</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2022-02-17 10:26:59.999</th>\n","      <td>3158.68</td>\n","      <td>3114.98</td>\n","      <td>False</td>\n","      <td>-1.369498</td>\n","      <td>NaN</td>\n","      <td>0.056604</td>\n","      <td>-27.444444</td>\n","      <td>NaN</td>\n","      <td>-1.553459</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2022-02-17 10:27:59.999</th>\n","      <td>3158.68</td>\n","      <td>3114.98</td>\n","      <td>False</td>\n","      <td>-1.369498</td>\n","      <td>NaN</td>\n","      <td>0.056604</td>\n","      <td>-27.444444</td>\n","      <td>NaN</td>\n","      <td>-1.553459</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2022-02-17 10:28:59.999</th>\n","      <td>3158.68</td>\n","      <td>3114.98</td>\n","      <td>False</td>\n","      <td>-1.369498</td>\n","      <td>NaN</td>\n","      <td>0.056604</td>\n","      <td>-27.444444</td>\n","      <td>NaN</td>\n","      <td>-1.553459</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2022-02-17 10:29:59.999</th>\n","      <td>3158.68</td>\n","      <td>3114.98</td>\n","      <td>False</td>\n","      <td>-1.369498</td>\n","      <td>NaN</td>\n","      <td>0.056604</td>\n","      <td>-27.444444</td>\n","      <td>NaN</td>\n","      <td>-1.553459</td>\n","      <td>NaN</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7599f554-5d7d-4cf6-b40f-734ab64ce1ab')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-7599f554-5d7d-4cf6-b40f-734ab64ce1ab button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-7599f554-5d7d-4cf6-b40f-734ab64ce1ab');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":121}]},{"cell_type":"code","source":["# ------------ save current res_df ------------ #\n","ftr_full_path = os.path.join(ftr_path, key)\n","res_df_.reset_index().to_feather(ftr_full_path, compression='lz4')  # key 잘 확인하고 저장\n","print(ftr_full_path, 'saved !')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"XrgJPQRuisCa","executionInfo":{"status":"ok","timestamp":1648807677144,"user_tz":-540,"elapsed":2144,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"ac54ae29-4979-45ab-b76c-9eb3fb09f113"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["./candlestick_concated/res_df/bb1d_backi2/concat/cum/2022-02-17/2022-02-17 ETHUSDT.ftr saved !\n"]}]},{"cell_type":"markdown","metadata":{"id":"E0n53hflJbnp"},"source":["### htf candle check"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":489,"status":"ok","timestamp":1642148504926,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"6xW0yugCWvGz","outputId":"58106ff9-9709-4a62-bca2-1f6795d13322"},"outputs":[{"name":"stdout","output_type":"stream","text":["itv_ : 3T\n","                        open     high      low    close\n","index                                                  \n","2022-01-10 15:06:00  3169.97  3170.22  3159.51  3161.22\n","2022-01-10 15:09:00  3161.22  3163.98  3161.22  3163.82\n","2022-01-10 15:12:00  3163.82  3163.83  3156.02  3160.49\n","2022-01-10 15:15:00  3160.51  3164.29  3159.01  3162.93\n","2022-01-10 15:18:00  3163.02  3164.29  3162.41  3164.28\n","                            open     high      low    close    volume\n","index                                                                \n","2022-01-10 15:08:59.999  3169.97  3170.22  3159.51  3161.22  4241.449\n","2022-01-10 15:11:59.999  3161.22  3163.98  3161.22  3163.82  1143.874\n","2022-01-10 15:14:59.999  3163.82  3163.83  3156.02  3160.49  2135.292\n","2022-01-10 15:17:59.999  3160.51  3164.29  3159.01  3162.93  1011.598\n","2022-01-10 15:20:59.999  3163.02  3164.29  3162.41  3163.82   466.868\n"]}],"source":["itv_list = ['3T', '5T', '15T', '30T', '1H', '4H']\n","comp_df_list = [second_df, third_df, fourth_df, fifth_df, sixth_df, seventh_df]\n","offset_list = ['1h', '2min', '2min', '2min', '2min', '2min']\n","# itv_list = ['4H']\n","# comp_df_list = [seventh_df]\n","\n","slice_len = 100\n","for itv_, comp_df_, offset in zip(itv_list, comp_df_list, offset_list):\n","\n","  print(\"itv_ :\", itv_)\n","\n","  # df = h_candle_v2(df, '3T')\n","  # end_ts = \n","  h_res_df = df.resample(itv_, offset=offset).agg({\n","          'open': 'first',\n","          'high': 'max',\n","          'low': 'min',\n","          'close': 'last'\n","      })\n","\n","  #   앞은 길이가 다르고, 뒤에서부터 잘라서 비교    #\n","  #   last_row 빼고는 동일, 4h 제외\n","  # print(df.tail())\n","  print(h_res_df.tail())\n","  print(comp_df_.tail())\n","  # # print(h_res_df.head())\n","  # # print(second_df.head())\n","\n","  # print(len(h_res_df))\n","  # print(len(second_df))\n","\n","  # print(h_res_df.values[-slice_len:])\n","  # print(second_df.iloc[:, :4].values[-slice_len:])\n","  # print(np.argwhere(h_res_df.values[-slice_len:] != comp_df_.iloc[:, :4].values[-slice_len:]))\n","  # print()\n","  break"]},{"cell_type":"markdown","metadata":{"id":"jTN3M842Suzl"},"source":["## concat & save new res_df"]},{"cell_type":"markdown","metadata":{"id":"MlFkpO1MSuzl"},"source":["### old (xlsx)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"U-3QkfbFSuzl"},"outputs":[],"source":["save_path = './candlestick_concated/res_df/'\n","\n","dict_name = \"2021-07-01 ETHUSDT_bb15m_backi2_res_dfs.pkl\"\n","\n","#     load with pickle    #\n","with open(save_path + dict_name, 'rb') as f:\n","  saved_res_df_dict = pickle.load(f)\n","\n","print(dict_name, \"loaded !\")\n","res_df_files = os.listdir(save_path)\n","res_df_files.reverse()\n","\n","print(res_df_files)\n","\n","res_df_dict = {}\n","\n","base_postfix = '_bb15m_backi2.xlsx'\n","new_postfix = '_st1h_backi2.xlsx'\n","\n","max_cnt = 10\n","sample_cnt = max_cnt\n","\n","for k_i, key in enumerate(res_df_files):\n","\n","  if '2021-07-01'.upper() not in key:\n","  # if '2021-10-10'.upper() not in key:\n","    continue\n","\n","  # if \"link\".upper() not in key:\n","  # if \"btc\".upper() not in key:\n","  #   continue\n","\n","  if new_postfix not in key:\n","    continue\n","\n","  # if key in \n","\n","  if sample_cnt == max_cnt:\n","    dict_name = \"%s_res_dfs.pkl\" % key.split(\".\")[0]\n","    print(\"dict_name :\", dict_name)\n","\n","  base_df = saved_res_df_dict[key.replace(new_postfix, base_postfix)]\n","  # base_df = pd.read_excel(save_path + key.replace(new_postfix, base_postfix), index_col=0)  \n","  res_df = pd.read_excel(save_path + key, index_col=0)  \n","\n","  # print(base_df.head())\n","  # print(res_df.head())\n","  # break\n","\n","  new_res_df = pd.concat([base_df, res_df], axis=1) # df_tot.drop_duplicates()\n","  # new_res_df.head()\n","\n","  droped_new_res_df = new_res_df.loc[:,~new_res_df.columns.duplicated(keep='last')]\n","  droped_new_res_df.head()\n","  # break\n","\n","  # res_df_dict[key] = res_df\n","  res_df_dict[key] = droped_new_res_df\n","  print(key, \"saved to dict !\")\n","\n","  #     save with pickle    #\n","  with open(save_path + dict_name, 'wb') as f:\n","    pickle.dump(res_df_dict, f)\n","\n","  sample_cnt -= 1\n","\n","  if sample_cnt <= 0:\n","    break\n"]},{"cell_type":"markdown","metadata":{"id":"t1E_eAyPSuzm"},"source":["### new col to latest feather (1m_indi. only)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"xyI5NrM7Suzm"},"outputs":[],"source":["save_path = './candlestick_concated/res_df/'\n","\n","cum_dir = \"cum\"\n","\n","new_dir_path = \"rsi_backi2\"\n","base_dir_path = \"bbdc3m_backi2\"\n","\n","new_date = '2021-11-17'\n","\n","\n","\n","#     load ftr list    #\n","base_save_path = os.path.join(save_path, base_dir_path, \"concat/cum\", new_date)\n","new_save_path = base_save_path.replace(base_dir_path, new_dir_path)\n","\n","#     save to (new) cum dir    #\n","#      1. if dir. not exists, makedir\n","os.makedirs(new_save_path, exist_ok=True)\n","\n","ftr_list = [s for s in os.listdir(base_save_path) if \"ftr\" in s]\n","print(ftr_list)\n","# break\n","\n","\n","max_cnt = 10\n","sample_cnt = max_cnt\n","\n","for key in ftr_list:\n","\n","  if new_date not in key:\n","    continue\n","\n","\n","  #       read from base postfix's directory    #\n","  base_df = pd.read_feather(os.path.join(base_save_path, key), columns=None, use_threads=True).set_index(\"index\")\n","  # print(base_df.head())\n","  # print(res_df.head())\n","  # break\n","\n","  droped_new_res_df = sync_check(base_df)\n","\n","  # new_res_df = pd.concat([base_df, res_df], axis=0) # df_tot.drop_duplicates()\n","  # # new_res_df.head()\n","\n","  # intersection_cols = res_df.columns.intersection(base_df.columns)\n","\n","  # droped_new_res_df = new_res_df.loc[~new_res_df.index.duplicated(keep='last'),intersection_cols]\n","  # droped_new_res_df = new_res_df.loc[:,~new_res_df.columns.duplicated(keep='last')]\n","  # droped_new_res_df = new_res_df.loc[:,~new_res_df.index.duplicated(keep='last')]\n","  # droped_new_res_df.head()\n","  # break\n","\n","  droped_new_res_df.reset_index().to_feather(os.path.join(new_save_path, key), compression='lz4')\n","\n","  print(os.path.join(new_save_path, key), \"saved !\")\n","\n","  # sample_cnt -= 1\n","\n","  # if sample_cnt <= 0:\n","  #   break\n"]},{"cell_type":"markdown","metadata":{"id":"nUs4fjVHSuzl"},"source":["### feather ver. (col concat)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":2001,"status":"ok","timestamp":1642739652513,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"6cu-Y82iSuzl","outputId":"273507b8-0d33-48b5-d9c5-00547688ef73"},"outputs":[{"name":"stdout","output_type":"stream","text":["['2022-01-10 ETHUSDT.ftr']\n","./candlestick_concated/res_df/st3m_backi2/concat/cum/2022-01-10/2022-01-10 ETHUSDT.ftr saved !\n"]}],"source":["new_dir_path = \"st3m_backi2\"\n","base_dir_path = \"bb1d_backi2\"\n","\n","# new_date = \"2021-11-17\"\n","new_date = \"2022-01-10\"\n","\n","#     save to (new) concat dir    #\n","#      1. if dir. not exists, makedir\n","save_path = './candlestick_concated/res_df/'\n","save_path = os.path.join(save_path, new_dir_path, \"concat/cum\", new_date)   \n","# save_path = os.path.join(save_path, new_dir_path, \"concat/non_cum\", new_date)   # row col 하려면 concat 맞음, noncum 사용\n","os.makedirs(save_path, exist_ok=True)\n","\n","\n","#     load ftr list    #\n","# ftr_list = [s for s in os.listdir(os.path.join(save_path, new_dir_path)) if \"ftr\" in s]\n","\n","noncat_path = save_path.replace(\"concat/\", \"noncat/\")\n","ftr_list = [s for s in os.listdir(noncat_path) if \"ftr\" in s]\n","print(ftr_list)\n","# break\n","\n","\n","for key in ftr_list:\n","\n","  if new_date not in key:\n","    continue\n","\n","  try:\n","\n","    #       read from base postfix's directory    #\n","    base_df = pd.read_feather(os.path.join(save_path.replace(new_dir_path, base_dir_path), key), columns=None, use_threads=True).set_index(\"index\")\n","    res_df = pd.read_feather(os.path.join(noncat_path, key), columns=None, use_threads=True).set_index(\"index\")\n","\n","    # print(base_df.head())\n","    # print(res_df.head())\n","    # break\n","\n","    new_res_df = pd.concat([base_df, res_df], axis=1) # df_tot.drop_duplicates()\n","    # new_res_df.head()\n","\n","    droped_new_res_df = new_res_df.loc[:,~new_res_df.columns.duplicated(keep='last')]\n","    # droped_new_res_df.head()\n","    # break\n","\n","    droped_new_res_df.reset_index().to_feather(os.path.join(save_path, key), compression='lz4')\n","\n","    # res_df_dict[key] = res_df\n","    # res_df_dict[key] = droped_new_res_df\n","    print(os.path.join(save_path, key), \"saved !\")\n","  \n","  except Exception as e:\n","    print(\"error occured ! :\", e)\n","  \n","\n","  # sample_cnt -= 1\n","\n","  # if sample_cnt <= 0:\n","  #   break\n"]},{"cell_type":"markdown","metadata":{"id":"WVAKq3i8Suzm"},"source":["### feather ver. (row concat) , database cum 도 호환가능"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":7893,"status":"ok","timestamp":1645188189702,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"XG2p9OhhSuzm","outputId":"e67874ba-0710-4f38-966f-5ea7d42403cb"},"outputs":[{"output_type":"stream","name":"stdout","text":["['2022-02-17 ETHUSDT_1m.ftr']\n","                            open     high     low    close  volume\n","index                                                             \n","2019-11-27 16:45:59.999   146.00   146.00   146.0   146.00   0.010\n","2022-02-17 10:29:59.999  3146.86  3147.22  3146.4  3146.76  26.727\n","continuity checked !\n","./candlestick_concated/database_bn/cum/2022-02-17/2022-02-17 ETHUSDT_1m.ftr saved !\n"]}],"source":["save_path = './candlestick_concated/res_df/'        # cols 추가된 cum db 에 new_row's cols 기준으로 합치는 경우\n","save_path = './candlestick_concated/database_bn/'   # ohlcv cum db 만들 경우\n","\n","base_date = '2022-01-10'\n","new_date = '2022-02-17'\n","\n","#     load ftr list    #\n","if \"database\" in save_path:\n","  base_dir_path = \"\"\n","  new_dir_path = \"\"\n","  concat_dir = \"\"\n","else:\n","  base_dir_path = \"sar_backi2\"\n","  new_dir_path = \"bb4h_backi2\"  # dir_path 가 base / new 서로 달라질 수 있어서 분할함\n","  concat_dir = \"concat\"\n","\n","base_date_path = os.path.join(save_path, base_dir_path, concat_dir, \"cum\", base_date)      # 기존 cum db 와 new_date db 를 cum 진행\n","# base_date_path = os.path.join(save_path, base_dir_path, concat_dir, \"non_cum\", base_date)    # non_cum db 와 new_date db 를 cum 진행\n","\n","# new_date_path = os.path.join(save_path, new_dir_path, concat_dir, \"cum\", new_date)      # 상황별로 직접 선택해야할 듯\n","new_date_path = os.path.join(save_path, new_dir_path, concat_dir, \"non_cum\", new_date)\n","\n","\n","\n","#     save to (new) concat dir    #\n","#      1. if dir. not exists, makedir\n","save_path = new_date_path.replace(\"non_cum\", \"cum\")   # non_cum 아니여도 무관\n","os.makedirs(save_path, exist_ok=True)   # noncat / concat 두가지 경우 존재가능할 것\n","# os.makedirs(os.path.join(save_path, dir_path, \"noncat/cum\", new_date), exist_ok=True)\n","\n","\n","ftr_list = [s for s in os.listdir(new_date_path) if \"ftr\" in s]\n","exist_list = os.listdir(save_path)\n","print(ftr_list)\n","# break\n","\n","\n","for key in ftr_list:\n","\n","  if new_date not in key:   # date rejection\n","    continue\n","  if '1m' not in key:  # itv rejection\n","    continue\n","\n","  # if key in exist_list:\n","  #   print(key, \"already exist !\")\n","  #   continue\n","\n","  #       read from base postfix's directory    #\n","  base_df = pd.read_feather(os.path.join(base_date_path, key.replace(new_date, base_date)), columns=None, use_threads=True).set_index(\"index\")   # key 에 new_date 담겨있음\n","  res_df = pd.read_feather(os.path.join(new_date_path, key), columns=None, use_threads=True).set_index(\"index\")\n","\n","  # print(base_df.head())\n","  # print(res_df.head())\n","  # break\n","\n","  new_res_df = pd.concat([base_df, res_df], axis=0) # df_tot.drop_duplicates()\n","  # new_res_df.head()\n","\n","  intersection_cols = res_df.columns.intersection(base_df.columns)\n","\n","  droped_new_res_df = new_res_df.loc[~new_res_df.index.duplicated(keep='last'),intersection_cols]\n","  # droped_new_res_df = new_res_df.loc[:,~new_res_df.columns.duplicated(keep='last')]\n","  # droped_new_res_df = new_res_df.loc[:,~new_res_df.index.duplicated(keep='last')]\n","  # droped_new_res_df.head()\n","  # break  \n","  \n","  print(droped_new_res_df.iloc[[0, -1]])  \n","\n","  # ------------- verify df continuity directly itv by itv ------------- #\n","  true_continue = True\n","  if \"_\" in key:\n","\n","    interval = key.split(\".\")[0].split(\"_\")[-1] \n","    itv_num = to_itvnum(interval)\n","\n","    # verified_df = consecutive_df(droped_new_res_df, to_itvnum(interval))\n","    # verified_df.reset_index().to_feather(os.path.join(save_path, key), compression='lz4')\n","\n","    # res_df_dict[key] = res_df\n","    # res_df_dict[key] = droped_new_res_df  \n","\n","    np_idx_ts = np.array(list(map(lambda x: datetime.timestamp(x), droped_new_res_df.index)))\n","    ideal_ts_gap = 60 * itv_num\n","\n","    for ts_i in range(len(np_idx_ts)):\n","      \n","      if ts_i != 0:\n","        ts_gap = np_idx_ts[ts_i] - np_idx_ts[ts_i - 1]\n","\n","        if ts_gap > ideal_ts_gap or ts_gap < ideal_ts_gap:\n","        # if ts_gap == ideal_ts_gap:\n","          print(droped_new_res_df.index[ts_i - 1])\n","          print(droped_new_res_df.index[ts_i])\n","          # print(ts_gap)\n","          print(\"------------------ unideal ts_gap ------------------\")\n","          true_continue = False\n","\n","    print(\"continuity checked !\")\n","\n","  if true_continue:\n","    droped_new_res_df.reset_index().to_feather(os.path.join(save_path, key), compression='lz4')\n","\n","  print(os.path.join(save_path, key), \"saved !\")\n","  \n"]},{"cell_type":"markdown","metadata":{"id":"L7l5CTJfSuzn"},"source":["### check continuity"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"nGzMGyC3Suzn","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1643987442996,"user_tz":-540,"elapsed":5408,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"4fface63-62d9-4e2a-e22d-bdd26f428e0e"},"outputs":[{"output_type":"stream","name":"stdout","text":["                             open    high       low     close   volume\n","index                                                                 \n","2020-09-14 16:00:59.999    3.2002    4.91    3.2002    3.2745  11567.0\n","2022-02-04 23:57:59.999  103.7500  103.75  103.6000  103.6000   6427.0\n","[1.60009926e+09 1.60009932e+09 1.60009938e+09 1.60009944e+09\n"," 1.60009950e+09 1.60009956e+09 1.60009962e+09 1.60009968e+09\n"," 1.60009974e+09 1.60009980e+09]\n"]}],"source":["# print(droped_new_res_df.columns)\n","\n","print(droped_new_res_df.iloc[[0, -1]])\n","\n","np_idx_ts = np.array(list(map(lambda x: datetime.timestamp(x), droped_new_res_df.index)))\n","\n","print(np_idx_ts[:10])\n","for ts_i in range(len(np_idx_ts)):\n","  \n","  if ts_i != 0:\n","    ts_gap = np_idx_ts[ts_i] - np_idx_ts[ts_i - 1]\n","\n","    if ts_gap > 60 or ts_gap < 60:\n","\n","      print(\"invalid ts_gap found !\")\n","    # if ts_gap == 60:\n","      print(droped_new_res_df.index[ts_i - 1])\n","      print(droped_new_res_df.index[ts_i])\n","      # print(ts_gap)\n","      print()\n"]},{"cell_type":"markdown","metadata":{"id":"x_XGJqBi8Jex"},"source":["### check length of front missing value + middle_data non_missing validity"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":311,"status":"ok","timestamp":1641887318959,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"yRNwqVeAu8X8","outputId":"fb236bde-4527-4bc7-eac4-4bee42532c5a"},"outputs":[{"name":"stdout","output_type":"stream","text":["2.167361111111111\n","38\n"]}],"source":["#       1. new_date 의 시작 timeidx 와 base_date end timeidx 의 최소 days' gap     #\n","#       2. new_date 의 시작 부분 indi. value 는 np.nan 으로 채워질 거기 때문에 계산해야함    #\n","\n","df_count = droped_new_res_df.count()\n","len_missing = df_count.max() - df_count.min()\n","print(len_missing / 1440)\n","\n","#       3. \n","missing_sliced_df = droped_new_res_df.iloc[len_missing:]\n","df_count2 = missing_sliced_df.count()\n","# print(df_count2)\n","print((df_count2.max() - df_count2.min()))    # this value should be zero !\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"AY7E2_hTBsyM"},"outputs":[],"source":["# df_count2.index[df_count2.argmin()]\n","# missing_sliced_df.head(5)\n","\n","stay_missed = np.sum(pd.isnull(missing_sliced_df), axis=0)\n","print(stay_missed)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"p9yqewOw9g33"},"outputs":[],"source":["stay_missed_cols = stay_missed[stay_missed != 0].index\n","\n","for sm_col in stay_missed_cols:\n","  \n","  row_idx = np.argwhere(pd.isnull(missing_sliced_df[sm_col].values))\n","\n","  plt.figure(figsize=(3,3))\n","  plt.plot(row_idx)\n","  plt.ylim(0, len(missing_sliced_df))\n","  plt.title(sm_col)\n","\n","  plt.show()\n"]},{"cell_type":"markdown","source":["## legacy"],"metadata":{"id":"MSUY4nnku3s9"}},{"cell_type":"markdown","source":["### mv files"],"metadata":{"id":"epgS5Dksu-HX"}},{"cell_type":"code","source":["df_path = './candlestick_concated/survey_df_v2'\n","files_ = os.listdir(df_path)"],"metadata":{"id":"aJcVpEdrslA5"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["dirs = [file_ for file_ in files_ if not file_.endswith('.ftr')]\n","files = [file_ for file_ in files_ if file_.endswith('.ftr')]"],"metadata":{"id":"cEKyEYkotFDy"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["dirs"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"IgM79tcxtPVZ","executionInfo":{"status":"ok","timestamp":1644111921194,"user_tz":-540,"elapsed":4,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"84305b35-eb52-49fc-d5fd-fdbc64cc8679"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['2022-01-10 ETHUSDT', '2022-01-10 ETHUSDT_all', '2022-02-04 SOLUSDT']"]},"metadata":{},"execution_count":6}]},{"cell_type":"code","source":["def move_fn(dir_, file_):\n","  src_path = os.path.join(df_path, file_)\n","  dst_path = os.path.join(df_path, dir_, file_)\n","  shutil.move(src_path, dst_path)\n","  print(\"moved to {}\".format(dst_path))\n","\n","_ = [move_fn('2022-01-10 ETHUSDT_all', file_) for file_ in files if 'eth'.upper() in file_]\n","# sols\n"],"metadata":{"id":"M767iRtwtRQP"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Ci_jUnNTZbm9"},"source":["### load data (old)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":22503,"status":"ok","timestamp":1638246127510,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"_bXyS2yrZYC6","outputId":"b24a8a66-48b1-42b5-aa79-63f5a8542bac"},"outputs":[{"name":"stdout","output_type":"stream","text":["['2021-05-30 ETHUSDT.xlsx', '2021-04-30 ETHUSDT.xlsx', '2021-07-03 ETHUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-10-10 ETCUSDT.xlsx', '2021-10-10 BTCUSDT.xlsx', '2021-10-10 ETHUSDT.xlsx', '2021-10-10 ADAUSDT.xlsx', '2021-10-10 XLMUSDT.xlsx', '2021-10-10 LINKUSDT.xlsx', '2021-10-10 LTCUSDT.xlsx', '2021-10-10 EOSUSDT.xlsx', '2021-10-10 XRPUSDT.xlsx', '2021-10-10 BCHUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr', '2021-10-10 ETCUSDT.ftr', '2021-10-10 BTCUSDT.ftr', '2021-10-10 ETHUSDT.ftr', '2021-10-10 ADAUSDT.ftr', '2021-10-10 XLMUSDT.ftr', '2021-10-10 LINKUSDT.ftr', '2021-10-10 LTCUSDT.ftr', '2021-10-10 EOSUSDT.ftr', '2021-10-10 XRPUSDT.ftr', '2021-10-10 BCHUSDT.ftr', '2021-11-16 EOSUSDT.ftr', '2021-11-16 LTCUSDT.ftr', '2021-11-16 LINKUSDT.ftr', '2021-11-16 XLMUSDT.ftr', '2021-11-16 ADAUSDT.ftr', '2021-11-16 ETCUSDT.ftr', '2021-11-16 BTCUSDT.ftr', '2021-11-16 ETHUSDT.ftr', '2021-11-16 BCHUSDT.ftr', '2021-11-16 XRPUSDT.ftr']\n","['2021-05-30 ETHUSDT.xlsx', '2021-04-30 ETHUSDT.xlsx', '2021-07-03 ETHUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-10-10 ETCUSDT.xlsx', '2021-10-10 BTCUSDT.xlsx', '2021-10-10 ETHUSDT.xlsx', '2021-10-10 ADAUSDT.xlsx', '2021-10-10 XLMUSDT.xlsx', '2021-10-10 LINKUSDT.xlsx', '2021-10-10 LTCUSDT.xlsx', '2021-10-10 EOSUSDT.xlsx', '2021-10-10 XRPUSDT.xlsx', '2021-10-10 BCHUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr', '2021-10-10 ETCUSDT.ftr', '2021-10-10 BTCUSDT.ftr', '2021-10-10 ETHUSDT.ftr', '2021-10-10 ADAUSDT.ftr', '2021-10-10 XLMUSDT.ftr', '2021-10-10 LINKUSDT.ftr', '2021-10-10 LTCUSDT.ftr', '2021-10-10 EOSUSDT.ftr', '2021-10-10 XRPUSDT.ftr', '2021-10-10 BCHUSDT.ftr', '2021-11-16 LINKUSDT.ftr', '2021-11-16 ADAUSDT.ftr', '2021-11-16 ETCUSDT.ftr', '2021-11-16 XLMUSDT.ftr', '2021-11-16 XRPUSDT.ftr', '2021-11-16 EOSUSDT.ftr', '2021-11-16 BTCUSDT.ftr', '2021-11-16 BCHUSDT.ftr', '2021-11-16 ETHUSDT.ftr', '2021-11-16 LTCUSDT.ftr']\n","['2021-05-30 ETHUSDT.xlsx', '2021-04-30 ETHUSDT.xlsx', '2021-07-03 ETHUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-10-10 ETCUSDT.xlsx', '2021-10-10 BTCUSDT.xlsx', '2021-10-10 ETHUSDT.xlsx', '2021-10-10 ADAUSDT.xlsx', '2021-10-10 XLMUSDT.xlsx', '2021-10-10 LINKUSDT.xlsx', '2021-10-10 LTCUSDT.xlsx', '2021-10-10 EOSUSDT.xlsx', '2021-10-10 XRPUSDT.xlsx', '2021-10-10 BCHUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr', '2021-10-10 ETCUSDT.ftr', '2021-10-10 BTCUSDT.ftr', '2021-10-10 ETHUSDT.ftr', '2021-10-10 ADAUSDT.ftr', '2021-10-10 XLMUSDT.ftr', '2021-10-10 LINKUSDT.ftr', '2021-10-10 LTCUSDT.ftr', '2021-10-10 EOSUSDT.ftr', '2021-10-10 XRPUSDT.ftr', '2021-10-10 BCHUSDT.ftr', '2021-11-16 LINKUSDT.ftr', '2021-11-16 XLMUSDT.ftr', '2021-11-16 ADAUSDT.ftr', '2021-11-16 ETCUSDT.ftr', '2021-11-16 BTCUSDT.ftr', '2021-11-16 BCHUSDT.ftr', '2021-11-16 XRPUSDT.ftr', '2021-11-16 LTCUSDT.ftr', '2021-11-16 EOSUSDT.ftr', '2021-11-16 ETHUSDT.ftr']\n","['2021-07-03 ETHUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-10-10 ETCUSDT.xlsx', '2021-10-10 BTCUSDT.xlsx', '2021-10-10 ETHUSDT.xlsx', '2021-10-10 ADAUSDT.xlsx', '2021-10-10 XLMUSDT.xlsx', '2021-10-10 LINKUSDT.xlsx', '2021-10-10 LTCUSDT.xlsx', '2021-10-10 EOSUSDT.xlsx', '2021-10-10 XRPUSDT.xlsx', '2021-10-10 BCHUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr', '2021-10-10 ETCUSDT.ftr', '2021-10-10 BTCUSDT.ftr', '2021-10-10 ETHUSDT.ftr', '2021-10-10 ADAUSDT.ftr', '2021-10-10 XLMUSDT.ftr', '2021-10-10 LINKUSDT.ftr', '2021-10-10 LTCUSDT.ftr', '2021-10-10 EOSUSDT.ftr', '2021-10-10 XRPUSDT.ftr', '2021-10-10 BCHUSDT.ftr', '2021-11-16 XLMUSDT.ftr', '2021-11-16 ADAUSDT.ftr', '2021-11-16 ETCUSDT.ftr', '2021-11-16 BTCUSDT.ftr', '2021-11-16 ETHUSDT.ftr', '2021-11-16 BCHUSDT.ftr', '2021-11-16 XRPUSDT.ftr', '2021-11-16 EOSUSDT.ftr', '2021-11-16 LTCUSDT.ftr', '2021-11-16 LINKUSDT.ftr']\n","['2021-07-03 ETHUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-08-31 SUSHIUSDT.xlsx', '2021-08-31 CVCUSDT.xlsx', '2021-08-31 BTSUSDT.xlsx', '2021-08-31 HOTUSDT.xlsx', '2021-08-31 ZRXUSDT.xlsx', '2021-08-31 QTUMUSDT.xlsx', '2021-08-31 IOTAUSDT.xlsx', '2021-08-31 BTCBUSD.xlsx', '2021-08-31 WAVESUSDT.xlsx', '2021-08-31 ADAUSDT.xlsx', '2021-08-31 LITUSDT.xlsx', '2021-08-31 XTZUSDT.xlsx', '2021-08-31 BNBUSDT.xlsx', '2021-08-31 AKROUSDT.xlsx', '2021-08-31 HNTUSDT.xlsx', '2021-08-31 ETCUSDT.xlsx', '2021-08-31 XMRUSDT.xlsx', '2021-08-31 YFIUSDT.xlsx', '2021-08-31 ETHUSDT.xlsx', '2021-08-31 ALICEUSDT.xlsx', '2021-08-31 ALPHAUSDT.xlsx', '2021-08-31 SFPUSDT.xlsx', '2021-08-31 REEFUSDT.xlsx', '2021-08-31 BATUSDT.xlsx', '2021-08-31 DOGEUSDT.xlsx', '2021-08-31 TRXUSDT.xlsx', '2021-08-31 RLCUSDT.xlsx', '2021-08-31 BTCSTUSDT.xlsx', '2021-08-31 STORJUSDT.xlsx', '2021-08-31 SNXUSDT.xlsx', '2021-08-31 XLMUSDT.xlsx', '2021-08-31 NEOUSDT.xlsx', '2021-08-31 UNFIUSDT.xlsx', '2021-08-31 SANDUSDT.xlsx', '2021-08-31 DASHUSDT.xlsx', '2021-08-31 KAVAUSDT.xlsx', '2021-08-31 RUNEUSDT.xlsx', '2021-08-31 CTKUSDT.xlsx', '2021-08-31 LINKUSDT.xlsx', '2021-08-31 CELRUSDT.xlsx', '2021-08-31 RSRUSDT.xlsx', '2021-08-31 DGBUSDT.xlsx', '2021-08-31 SKLUSDT.xlsx', '2021-08-31 RENUSDT.xlsx', '2021-08-31 TOMOUSDT.xlsx', '2021-08-31 MTLUSDT.xlsx', '2021-08-31 LTCUSDT.xlsx', '2021-08-31 DODOUSDT.xlsx', '2021-08-31 EGLDUSDT.xlsx', '2021-08-31 KSMUSDT.xlsx', '2021-08-31 ONTUSDT.xlsx', '2021-08-31 VETUSDT.xlsx', '2021-08-31 TRBUSDT.xlsx', '2021-08-31 MANAUSDT.xlsx', '2021-08-31 COTIUSDT.xlsx', '2021-08-31 CHRUSDT.xlsx', '2021-08-31 ETHUSDT_210924.xlsx', '2021-08-31 BAKEUSDT.xlsx', '2021-08-31 GRTUSDT.xlsx', '2021-08-31 FLMUSDT.xlsx', '2021-08-31 EOSUSDT.xlsx', '2021-08-31 OGNUSDT.xlsx', '2021-08-31 SCUSDT.xlsx', '2021-08-31 BALUSDT.xlsx', '2021-08-31 STMXUSDT.xlsx', '2021-08-31 BTTUSDT.xlsx', '2021-08-31 LUNAUSDT.xlsx', '2021-08-31 DENTUSDT.xlsx', '2021-08-31 KNCUSDT.xlsx', '2021-08-31 SRMUSDT.xlsx', '2021-08-31 ENJUSDT.xlsx', '2021-08-31 ZENUSDT.xlsx', '2021-08-31 ATOMUSDT.xlsx', '2021-08-31 NEARUSDT.xlsx', '2021-08-31 BCHUSDT.xlsx', '2021-08-31 IOSTUSDT.xlsx', '2021-08-31 HBARUSDT.xlsx', '2021-08-31 ZECUSDT.xlsx', '2021-08-31 1000SHIBUSDT.xlsx', '2021-08-31 TLMUSDT.xlsx', '2021-08-31 BZRXUSDT.xlsx', '2021-08-31 ETHBUSD.xlsx', '2021-08-31 AAVEUSDT.xlsx', '2021-08-31 GTCUSDT.xlsx', '2021-08-31 ALGOUSDT.xlsx', '2021-08-31 ICPUSDT.xlsx', '2021-08-31 BTCUSDT_210924.xlsx', '2021-08-31 LRCUSDT.xlsx', '2021-08-31 AVAXUSDT.xlsx', '2021-08-31 MATICUSDT.xlsx', '2021-08-31 1INCHUSDT.xlsx', '2021-08-31 MKRUSDT.xlsx', '2021-08-31 THETAUSDT.xlsx', '2021-08-31 UNIUSDT.xlsx', '2021-08-31 LINAUSDT.xlsx', '2021-08-31 RVNUSDT.xlsx', '2021-08-31 FILUSDT.xlsx', '2021-08-31 NKNUSDT.xlsx', '2021-08-31 DEFIUSDT.xlsx', '2021-08-31 COMPUSDT.xlsx', '2021-08-31 BTCDOMUSDT.xlsx', '2021-08-31 SOLUSDT.xlsx', '2021-08-31 BTCUSDT.xlsx', '2021-08-31 OMGUSDT.xlsx', '2021-08-31 ICXUSDT.xlsx', '2021-08-31 BLZUSDT.xlsx', '2021-08-31 FTMUSDT.xlsx', '2021-08-31 YFIIUSDT.xlsx', '2021-08-31 KEEPUSDT.xlsx', '2021-08-31 BANDUSDT.xlsx', '2021-08-31 XRPUSDT.xlsx', '2021-08-31 SXPUSDT.xlsx', '2021-08-31 CRVUSDT.xlsx', '2021-08-31 BELUSDT.xlsx', '2021-08-31 DOTUSDT.xlsx', '2021-08-31 XEMUSDT.xlsx', '2021-08-31 ONEUSDT.xlsx', '2021-08-31 ZILUSDT.xlsx', '2021-08-31 AXSUSDT.xlsx', '2021-08-31 OCEANUSDT.xlsx', '2021-08-31 CHZUSDT.xlsx', '2021-08-31 ANKRUSDT.xlsx', '2021-08-31 SUSHIUSDT_res_dfs.pkl', '2021-07-01 ADAUSDT.xlsx', '2021-10-10 ETCUSDT.xlsx', '2021-10-10 BTCUSDT.xlsx', '2021-10-10 ETHUSDT.xlsx', '2021-10-10 ADAUSDT.xlsx', '2021-10-10 XLMUSDT.xlsx', '2021-10-10 LINKUSDT.xlsx', '2021-10-10 LTCUSDT.xlsx', '2021-10-10 EOSUSDT.xlsx', '2021-10-10 XRPUSDT.xlsx', '2021-10-10 BCHUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr', '2021-10-10 ETCUSDT.ftr', '2021-10-10 BTCUSDT.ftr', '2021-10-10 ETHUSDT.ftr', '2021-10-10 ADAUSDT.ftr', '2021-10-10 XLMUSDT.ftr', '2021-10-10 LINKUSDT.ftr', '2021-10-10 LTCUSDT.ftr', '2021-10-10 EOSUSDT.ftr', '2021-10-10 XRPUSDT.ftr', '2021-10-10 BCHUSDT.ftr', '2021-11-16 EOSUSDT.ftr', '2021-11-16 LTCUSDT.ftr', '2021-11-16 LINKUSDT.ftr', '2021-11-16 XLMUSDT.ftr', '2021-11-16 ADAUSDT.ftr', '2021-11-16 ETCUSDT.ftr', '2021-11-16 BTCUSDT.ftr', '2021-11-16 ETHUSDT.ftr', '2021-11-16 BCHUSDT.ftr', '2021-11-16 XRPUSDT.ftr']\n","['2021-07-01 BTCUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr', '2021-10-10 LTCUSDT.xlsx', '2021-10-10 LINKUSDT.xlsx', '2021-10-10 XLMUSDT.xlsx', '2021-10-10 ADAUSDT.xlsx', '2021-10-10 ETCUSDT.xlsx', '2021-10-10 BTCUSDT.xlsx', '2021-10-10 ETHUSDT.xlsx', '2021-10-10 BCHUSDT.xlsx', '2021-10-10 XRPUSDT.xlsx', '2021-10-10 EOSUSDT.xlsx', '2021-10-10 ETCUSDT.ftr', '2021-10-10 BTCUSDT.ftr', '2021-10-10 ETHUSDT.ftr', '2021-10-10 ADAUSDT.ftr', '2021-10-10 XLMUSDT.ftr', '2021-10-10 LINKUSDT.ftr', '2021-10-10 LTCUSDT.ftr', '2021-10-10 EOSUSDT.ftr', '2021-10-10 XRPUSDT.ftr', '2021-10-10 BCHUSDT.ftr', '2021-11-16 XLMUSDT.ftr', '2021-11-16 ADAUSDT.ftr', '2021-11-16 ETCUSDT.ftr', '2021-11-16 BTCUSDT.ftr', '2021-11-16 ETHUSDT.ftr', '2021-11-16 BCHUSDT.ftr', '2021-11-16 XRPUSDT.ftr', '2021-11-16 EOSUSDT.ftr', '2021-11-16 LTCUSDT.ftr', '2021-11-16 LINKUSDT.ftr']\n","['2021-02-07 BTC.xlsx', '2021-02-07 ETH.xlsx', '2021-02-11 BCHUSDT.xlsx', '2021-02-11 XRPUSDT.xlsx', '2021-02-11 EOSUSDT.xlsx', '2021-02-11 LTCUSDT.xlsx', '2021-02-11 ETCUSDT.xlsx', '2021-02-11 LINKUSDT.xlsx', '2021-02-11 XLMUSDT.xlsx', '2021-02-11 ADAUSDT.xlsx', '2021-02-11 XMRUSDT.xlsx', '2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr', '2021-10-10 ETCUSDT.xlsx', '2021-10-10 XLMUSDT.xlsx', '2021-10-10 BCHUSDT.xlsx', '2021-10-10 ADAUSDT.xlsx', '2021-10-10 XRPUSDT.xlsx', '2021-10-10 BTCUSDT.xlsx', '2021-10-10 EOSUSDT.xlsx', '2021-10-10 ETHUSDT.xlsx', '2021-10-10 LTCUSDT.xlsx', '2021-10-10 LINKUSDT.xlsx', '2021-10-10 ETCUSDT.ftr', '2021-10-10 BTCUSDT.ftr', '2021-10-10 ETHUSDT.ftr', '2021-10-10 ADAUSDT.ftr', '2021-10-10 XLMUSDT.ftr', '2021-10-10 LINKUSDT.ftr', '2021-10-10 LTCUSDT.ftr', '2021-10-10 EOSUSDT.ftr', '2021-10-10 XRPUSDT.ftr', '2021-10-10 BCHUSDT.ftr', '2021-11-16 LTCUSDT.ftr', '2021-11-16 LINKUSDT.ftr', '2021-11-16 XLMUSDT.ftr', '2021-11-16 ADAUSDT.ftr', '2021-11-16 ETCUSDT.ftr', '2021-11-16 BTCUSDT.ftr', '2021-11-16 ETHUSDT.ftr', '2021-11-16 XRPUSDT.ftr', '2021-11-16 BCHUSDT.ftr', '2021-11-16 EOSUSDT.ftr']\n","['2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx']\n"]}],"source":["interval = '1m'\n","date_path = './candlestick_concated/%s/quant_v2/' % interval\n","file_list = os.listdir(date_path)\n","print((file_list))\n","\n","interval2 = '3m'\n","date_path2 = './candlestick_concated/%s/quant_v2/' % interval2\n","file_list2 = os.listdir(date_path2)\n","print((file_list2))\n","\n","interval3 = '5m'\n","date_path3 = './candlestick_concated/%s/quant_v2/' % interval3\n","file_list3 = os.listdir(date_path3)\n","print((file_list3))\n","\n","interval4 = '15m'\n","date_path4 = './candlestick_concated/%s/quant_v2/' % interval4\n","file_list4 = os.listdir(date_path4)\n","print((file_list4))\n","\n","interval5 = '30m'\n","date_path5 = './candlestick_concated/%s/quant_v2/' % interval5\n","file_list5 = os.listdir(date_path5)\n","print((file_list5))\n","\n","interval6 = '1h'\n","date_path6 = './candlestick_concated/%s/quant_v2/' % interval6\n","file_list6 = os.listdir(date_path6)\n","print((file_list6))\n","\n","interval7 = '4h'\n","date_path7 = './candlestick_concated/%s/quant_v2/' % interval7\n","file_list7 = os.listdir(date_path7)\n","print((file_list7))\n","\n","interval8 = '1d'\n","date_path8 = './candlestick_concated/%s/quant_v2/' % interval8\n","file_list8 = os.listdir(date_path8)\n","print((file_list8))"]},{"cell_type":"markdown","metadata":{"id":"M8-EChy0VsDr"},"source":["### cudf"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":414,"status":"ok","timestamp":1638754008241,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"b09qAb1sVtRP","outputId":"3a824202-064a-4544-b791-ffc777bb3f9c"},"outputs":[{"name":"stdout","output_type":"stream","text":["usage: conda [-h] [-V] command ...\n","conda: error: unrecognized arguments: -t=/content/notebooks\n"]}],"source":["# !conda install -c rapidsai-nightly -c nvidia -c numba -c conda-forge \\\n","#     cudf python=3.7 cudatoolkit=11.1 -t=$nb_path"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":413,"status":"ok","timestamp":1638754715310,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"Jnz6i7ZqRnb0","outputId":"207bc57b-a17a-4f67-fb26-24e46e2c6e26"},"outputs":[{"name":"stdout","output_type":"stream","text":["***********************************************************************\n","Woo! Your instance has the right kind of GPU, a Tesla P100-PCIE-16GB!\n","***********************************************************************\n","\n"]}],"source":["# !git clone https://github.com/rapidsai/rapidsai-csp-utils.git\n","!python rapidsai-csp-utils/colab/env-check.py"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"4sKA_9Dbg4s2"},"outputs":[],"source":["# This will update the Colab environment and restart the kernel.  Don't run the next cell until you see the session crash.\n","!bash rapidsai-csp-utils/colab/update_gcc.sh\n","import os\n","os._exit(00)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"d1C4pNiBhYHX"},"outputs":[],"source":["# This will install CondaColab.  This will restart your kernel one last time.  Run this cell by itself and only run the next cell once you see the session crash.\n","import condacolab\n","condacolab.install()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":414,"status":"ok","timestamp":1638754863073,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"iGx3ACTvZqck","outputId":"e8379cc4-c325-4fe0-ac46-5fbbd7d38829"},"outputs":[{"name":"stdout","output_type":"stream","text":["✨🍰✨ Everything looks OK!\n"]}],"source":["# you can now run the rest of the cells as normal\n","import condacolab\n","condacolab.check()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"oR8s7U8c7C28","outputId":"22be2731-fae1-45fc-f310-e48f60774bb2"},"outputs":[{"name":"stdout","output_type":"stream","text":["Installing RAPIDS Stable 21.10\n","Starting the RAPIDS install on Colab.  This will take about 15 minutes.\n","Collecting package metadata (current_repodata.json): ...working... done\n","Solving environment: ...working... WARNING conda.core.solve:_add_specs(611): pinned spec cudatoolkit=11.1 conflicts with explicit specs.  Overriding pinned spec.\n","failed with initial frozen solve. Retrying with flexible solve.\n","Solving environment: ...working... WARNING conda.core.solve:_add_specs(611): pinned spec cudatoolkit=11.1 conflicts with explicit specs.  Overriding pinned spec.\n","failed with repodata from current_repodata.json, will retry with next repodata source.\n","Collecting package metadata (repodata.json): ...working... done\n"]}],"source":["# Installing RAPIDS is now 'python rapidsai-csp-utils/colab/install_rapids.py <release> <packages>'\n","# The <release> options are 'stable' and 'nightly'.  Leaving it blank or adding any other words will default to stable.\n","# The <packages> option are default blank or 'core'.  By default, we install RAPIDSAI and BlazingSQL.  The 'core' option will install only RAPIDSAI and not include BlazingSQL, \n","!python rapidsai-csp-utils/colab/install_rapids.py stable\n","import os\n","os.environ['NUMBAPRO_NVVM'] = '/usr/local/cuda/nvvm/lib64/libnvvm.so'\n","os.environ['NUMBAPRO_LIBDEVICE'] = '/usr/local/cuda/nvvm/libdevice/'\n","os.environ['CONDA_PREFIX'] = '/usr/local'"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"kWsxi4ZpKtGt"},"outputs":[],"source":["import shutil\n","import sys\n","\n","colab_env = \"/usr/lib\"\n","\n","rapids_path = os.path.join(current_path, \"rapidsai-csp-utils/lib\")\n","rapids_libs = os.listdir(rapids_path)\n","print(rapids_libs)\n","# break\n","\n","for lib_ in rapids_libs:\n","  try:\n","    shutil.copy(os.path.join(rapids_path, lib_), os.path.join(colab_env, lib_))\n","    sys.path.append(os.path.join(colab_env, lib_))\n","    print(\"copied to\" + os.path.join(colab_env, lib_))\n","  except Exception as e:\n","    print(e)"]},{"cell_type":"markdown","metadata":{"id":"Iy76iO7gztne"},"source":["### move legacy files"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"hMRht32Czwry"},"outputs":[],"source":["# print()\n","cur_dir_list = os.listdir('.')\n","for f in cur_dir_list:\n","  if 'legacy' in f :\n","    # print(f)\n","    if os.path.isdir(current_path + f,):\n","      continue\n","\n","    shutil.move(current_path + f, current_path + 'legacy/' + f)\n","    print(\"moved to\" + current_path + 'legacy/' +  f)"]},{"cell_type":"markdown","metadata":{"id":"5duWn8t4BRyv"},"source":["# IDE platform\n"]},{"cell_type":"markdown","metadata":{"id":"6HOjnZjSgzk1"},"source":["## load ftr_list"]},{"cell_type":"code","execution_count":3,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":5398,"status":"ok","timestamp":1649123458000,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"7FPBG5Qqg2jB","outputId":"b52e9e84-33d5-4d9a-ad84-5a516b6cf6c6"},"outputs":[{"output_type":"stream","name":"stdout","text":["['2022-02-17 ETHUSDT.ftr']\n","2022-02-17 ETHUSDT.ftr loaded !\n","load res_df_ elapsed time : 3.721158981323242\n"]}],"source":["save_path = './candlestick_concated/res_df/'\n","\n","dir_path = \"bb4h_backi2\"\n","dir_path = \"bb1d_backi2\"\n","date = \"2022-01-10\"\n","date = \"2022-02-17\"\n","\n","ftr_path = os.path.join(save_path, dir_path, \"concat/cum\", date)\n","\n","# ------ load ftr list ------ #\n","ftr_list = [s for s in os.listdir(ftr_path) if \"ftr\" in s if date in s]\n","# ftr_list = [s for s in os.listdir(os.path.join(save_path, dir_path)) if \"ftr\" in s if date in s]\n","print(ftr_list)\n","\n","start_0 = time.time()\n","key = ftr_list[0]  # tempoaray use single key\n","res_df_ = pd.read_feather(os.path.join(ftr_path, key), columns=None, use_threads=True).set_index(\"index\")\n","# print(res_df_.head())\n","print(key, \"loaded !\")\n","print(\"load res_df_ elapsed time :\", time.time() - start_0)"]},{"cell_type":"code","source":["res_df_.dtypes"],"metadata":{"id":"RQH_l4opEh_O"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### edit cols"],"metadata":{"id":"x2yj2SwAXDLp"}},{"cell_type":"code","source":["col_list = list(res_df_.columns)\n","# # [col_ for col_ in col_list if 'score' in col_]\n","\n","# ------ drop ------ #\n","# res_df_.drop([col_ for col_ in col_list if '_T20' in col_], inplace=True, axis=1)\n","# res_df_.drop([col_ for col_ in col_list if '_T40' in col_], inplace=True, axis=1)\n","res_df_.drop([col_ for col_ in col_list if 'base_T' in col_], inplace=True, axis=1)\n","\n","# ------ replace ------ #\n","# for c_i, col_ in enumerate(col_list):\n","#   # if 'eTa_5T' in col_:\n","#   # if col_[-1] in ['m', 'h', 'd', 'H'] and '_' in col_:eTa_5T\n","#   # if col_[0] in ['h'] and '_' in col_:\n","#   if 'bir_' in col_:\n","\n","#     col_list[c_i] = col_.replace('bir_', 'ir_')\n","#     # col_list[c_i] = col_.replace('m', 'T').replace('h', 'H').replace('1T', 'T')\n","#     # col_list[c_i] = col_.replace('1d', 'D')\n","#     # col_list[c_i] = col_.replace('eTa_5T', 'ema_5T')\n","#     # col_list[c_i] = col_list[c_i][1:]\n","#     # print(col_list[c_i][0])\n","# res_df_.columns = col_list\n","# col_list[-2:] = ['resi_T', 'sup_T']"],"metadata":{"id":"x9wkWw15XCAm"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### lab"],"metadata":{"id":"14chOHeXh6JD"}},{"cell_type":"markdown","source":["#### imb."],"metadata":{"id":"c2729DJ6h720"}},{"cell_type":"code","source":["t_df = res_df_.iloc[-120:-100]\n","a_data = t_df.to_numpy()"],"metadata":{"id":"Rucj-iepiR_-"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["plt.style.use(['dark_background', 'fast'])\n","fig = plt.figure(figsize=(15, 9))\n","nrows, ncols = 1, 1\n","gs = gridspec.GridSpec(nrows=nrows,  # row 부터 index 채우고 col 채우는 순서임 (gs_idx)\n","                        ncols=ncols\n","                        # height_ratios=[3, 1]\n","                        )\n","\n","ax = fig.add_subplot(gs[0])\n","\n","# ------ candles ------ #\n","candle_plot(a_data[:, col_idx_dict['ohlc_col_idxs']], ax, alpha=1.0, wickwidth=1.0)\n","_ = [step_col_plot(a_data[:, params[0]], *params[1:]) for params in col_idx_dict['step_col_info']]"],"metadata":{"id":"ktm1aB-Bh7GH","colab":{"base_uri":"https://localhost:8080/","height":537},"executionInfo":{"status":"ok","timestamp":1648801482583,"user_tz":-540,"elapsed":5,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"6aba1d34-3575-486a-9c29-941dc18a00fc"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1080x648 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["def imb_ratio_v4(df, itv):\n","\n","  itv_num = to_itvnum(itv)\n","\n","  close = df['close_{}'.format(itv)].to_numpy()\n","  open = df['open_{}'.format(itv)].to_numpy()\n","\n","  b1_close = df['close_{}'.format(itv)].shift(itv_num).to_numpy()\n","  b1_open = df['open_{}'.format(itv)].shift(itv_num).to_numpy()\n","  b1_high = df['high_{}'.format(itv)].shift(itv_num).to_numpy()\n","  b1_low = df['low_{}'.format(itv)].shift(itv_num).to_numpy()\n","\n","  body_range = abs(close - open)\n","  b1_body_range = abs(b1_close - b1_open)\n","\n","  df['body_rel_ratio_{}'.format(itv)] = body_range / b1_body_range\n","\n","  short_body_range = np.where(close <= b1_low, body_range, b1_body_range)\n","  long_body_range = np.where(close >= b1_high, body_range, b1_body_range)\n","\n","  # 추후에 통계 측정해야함 -> bir 에 따른 개별 trader 의 epout / tpep 이라던가 => short 에 양봉은 취급안함 (why use np.nan)\n","  df['short_ir_{}'.format(itv)] = np.where(close < open, (b1_low - close) / short_body_range, np.nan) # close < open & close < b1_low\n","  df['long_ir_{}'.format(itv)] = np.where(close > open, (close - b1_high) / long_body_range, np.nan) # close > open & close > b1_high\n","\n","  return"],"metadata":{"id":"jMQBhQ1Ljt5Y"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def imb_ratio_v3(df, itv):\n","\n","  itv_num = to_itvnum(itv)\n","\n","  # high = df['high_{}'.format(itv)].to_numpy()\n","  # low = df['low_{}'.format(itv)].to_numpy()\n","  # candle_range = high - low\n","\n","  close = df['close_{}'.format(itv)].to_numpy()\n","  open = df['open_{}'.format(itv)].to_numpy()\n","\n","  b1_close = df['close_{}'.format(itv)].shift(itv_num).to_numpy()\n","  b1_open = df['open_{}'.format(itv)].shift(itv_num).to_numpy()\n","  b1_high = df['high_{}'.format(itv)].shift(itv_num).to_numpy()\n","  b1_low = df['low_{}'.format(itv)].shift(itv_num).to_numpy()\n","\n","  body_range = abs(close - open)\n","  b1_body_range = abs(b1_close - b1_open)\n","\n","  df['body_rel_ratio_{}'.format(itv)] = body_range / b1_body_range\n","\n","  short_body_ratio = np.where(close <= b1_low, body_range, b1_body_range)\n","  long_body_range = np.where(close >= b1_high, body_range, b1_body_range)\n","\n","  # 추후에 통계 측정해야함 -> bir 에 따른 개별 trader 의 epout / tpep 이라던가 => short 에 양봉은 취급안함 (why use np.nan)\n","  df['short_ir_{}'.format(itv)] = np.where(close < open, (b1_low - close) / body_range, np.nan) # close < open & close < b1_low\n","  df['long_ir_{}'.format(itv)] = np.where(close > open, (close - b1_high) / body_range, np.nan) # close > open & close > b1_high\n","\n","  return"],"metadata":{"id":"I1Vq_BiKpY3P"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["imb_ratio(t_df, \"5T\")\n","# imb_ratio_v3(t_df, \"5T\")\n","# imb_ratio_v4(t_df, \"5T\")\n","\n","t_df.tail(100).short_ir_5T  # .461871\n","# t_df.iloc[:, -10:]\n","# t_df.dtypes"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"mtnMUkhwkdrE","executionInfo":{"status":"ok","timestamp":1648807273349,"user_tz":-540,"elapsed":372,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"b7cff2cd-63d3-4109-8753-d2192079e565"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["index\n","2022-02-17 08:30:59.999         NaN\n","2022-02-17 08:31:59.999         NaN\n","2022-02-17 08:32:59.999         NaN\n","2022-02-17 08:33:59.999         NaN\n","2022-02-17 08:34:59.999         NaN\n","2022-02-17 08:35:59.999   -0.022654\n","2022-02-17 08:36:59.999   -0.022654\n","2022-02-17 08:37:59.999   -0.022654\n","2022-02-17 08:38:59.999   -0.022654\n","2022-02-17 08:39:59.999   -0.022654\n","2022-02-17 08:40:59.999    0.559585\n","2022-02-17 08:41:59.999    0.559585\n","2022-02-17 08:42:59.999    0.559585\n","2022-02-17 08:43:59.999    0.559585\n","2022-02-17 08:44:59.999    0.559585\n","2022-02-17 08:45:59.999    0.429719\n","2022-02-17 08:46:59.999    0.429719\n","2022-02-17 08:47:59.999    0.429719\n","2022-02-17 08:48:59.999    0.429719\n","2022-02-17 08:49:59.999    0.429719\n","Name: short_ir_5T, dtype: float64"]},"metadata":{},"execution_count":116}]},{"cell_type":"code","source":["# imb_ratio(t_df, \"5T\")\n","# imb_ratio_v3(t_df, \"5T\")\n","imb_ratio_v4(t_df, \"5T\")\n","\n","t_df.tail(100).short_ir_5T  # .461871\n","# t_df.iloc[:, -10:]\n","# t_df.dtypes"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"RVUs1YE_pgBI","executionInfo":{"status":"ok","timestamp":1648807284664,"user_tz":-540,"elapsed":375,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"0ad635a5-e0b9-40c9-c28f-6ebae5494c7b"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["index\n","2022-02-17 08:30:59.999         NaN\n","2022-02-17 08:31:59.999         NaN\n","2022-02-17 08:32:59.999         NaN\n","2022-02-17 08:33:59.999         NaN\n","2022-02-17 08:34:59.999         NaN\n","2022-02-17 08:35:59.999   -0.030303\n","2022-02-17 08:36:59.999   -0.030303\n","2022-02-17 08:37:59.999   -0.030303\n","2022-02-17 08:38:59.999   -0.030303\n","2022-02-17 08:39:59.999   -0.030303\n","2022-02-17 08:40:59.999    0.621583\n","2022-02-17 08:41:59.999    0.621583\n","2022-02-17 08:42:59.999    0.621583\n","2022-02-17 08:43:59.999    0.621583\n","2022-02-17 08:44:59.999    0.621583\n","2022-02-17 08:45:59.999    1.000000\n","2022-02-17 08:46:59.999    1.000000\n","2022-02-17 08:47:59.999    1.000000\n","2022-02-17 08:48:59.999    1.000000\n","2022-02-17 08:49:59.999    1.000000\n","Name: short_ir_5T, dtype: float64"]},"metadata":{},"execution_count":117}]},{"cell_type":"code","source":["# ------ rtc 1, 0 개념 ------ #\n","# short_rtc_1 = close\n","# short_rtc_0 = b1_low\n","\n","# long_rtc_1 = close\n","# long_rtc_0 = b1_high\n","\n","# rtc 로 활용하려면, col 로 추가해야할 것 -> 추가할만한 col_name 은 아님\n","# 1. h_candle 인 경우 -> ?\n","#   a. h_candle_v3 먹이고, open_{}.shift(num_itv).to_numpy() 진행 -> ex. res_df['close_{}'.format(hc_itv)].shift(itv_num).to_numpy() "],"metadata":{"id":"bieHiKjBkuFL"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# 1. 현재 종가 - 이전 고가 = imb_range (long)\n","long_imb_range = t_df.close - t_df.high.shift(1)\n","# 2. 이전 저가 - 현재 종가 - imb_range (short)\n","short_imb_range = t_df.low.shift(1) - t_df.close"],"metadata":{"id":"3X6bMXJIjPYy"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["#### zigzag"],"metadata":{"id":"LyGnAMvLYvOZ"}},{"cell_type":"code","source":["\n","def get_line(touch_idx, rtc_):\n","  touch_idx_copy = touch_idx.copy()\n","  touch_line = np.full_like(rtc_, np.nan)\n","\n","  nan_idx = np.isnan(touch_idx_copy)\n","  touch_idx_copy[nan_idx] = 0   # for indexing array\n","  touch_line = rtc_[touch_idx_copy.astype(int)]\n","  touch_line[nan_idx] = np.nan   # for true comp.\n","\n","  return touch_line\n","\n","def wave_range_v6(df, period1, period2, ltf_df=None, touch_period=50):  # v2 for period1 only\n","\n","  itv = pd.infer_freq(df.index)\n","\n","  donchian_channel_v2(df, period1) \n","  donchian_channel_v2(df, period2) \n","  dc_lower_, dc_upper_ = df['dc_lower_{}{}'.format(itv, period1)].to_numpy(), df['dc_upper_{}{}'.format(itv, period1)].to_numpy()\n","  dc_lower2_, dc_upper2_ = df['dc_lower_{}{}'.format(itv, period2)].to_numpy(), df['dc_upper_{}{}'.format(itv, period2)].to_numpy()\n","  \n","  short_base = (dc_lower_ + dc_upper2_) / 2\n","  long_base = (dc_upper_ + dc_lower2_) / 2\n","  df['short_base_{}{}{}'.format(itv, period1, period2)] = short_base\n","  df['long_base_{}{}{}'.format(itv, period1, period2)] = long_base\n","\n","  len_df = len(df)   \n","  short_open_res = np.ones(len_df)\n","  long_open_res = np.ones(len_df)\n","  \n","  data_cols = ['open', 'high', 'low']\n","  open, high, low = [df[col_].to_numpy() for col_ in data_cols]\n","\n","  short_a_touch_idx = pd.Series(np.where(high >= dc_upper2_, np.arange(len_df), np.nan)).rolling(touch_period, min_periods=1).max().to_numpy()  # min -> max\n","  short_b_touch_idx = pd.Series(np.where(low <= dc_lower_, np.arange(len_df), np.nan)).rolling(touch_period, min_periods=1).max().to_numpy()   # min 으로 하면 a 이전에 b 있는건 모두 제외하게됨    \n","  short_open_res *= (high >= short_base) & (short_base >= open) & (short_a_touch_idx < short_b_touch_idx)\n","  df['short_a_touch_idx_{}{}{}'.format(itv, period1, period2)] = short_a_touch_idx\n","  df['short_b_touch_idx_{}{}{}'.format(itv, period1, period2)] = short_b_touch_idx\n","  df['short_a_line_{}{}{}'.format(itv, period1, period2)] = get_line(short_a_touch_idx, dc_upper2_)\n","  df['short_b_line_{}{}{}'.format(itv, period1, period2)] = get_line(short_b_touch_idx, dc_lower_)\n","  df['short_wave_point_{}{}{}'.format(itv, period1, period2)] = short_open_res\n","  \n","  long_a_touch_idx = pd.Series(np.where(low <= dc_lower2_, np.arange(len_df), np.nan)).rolling(touch_period, min_periods=1).max().to_numpy()       \n","  long_b_touch_idx = pd.Series(np.where(high >= dc_upper_, np.arange(len_df), np.nan)).rolling(touch_period, min_periods=1).max().to_numpy()    \n","  long_open_res *= (open >= long_base) & (long_base >= low) & (long_a_touch_idx < long_b_touch_idx)\n","  df['long_a_touch_idx_{}{}{}'.format(itv, period1, period2)] = long_a_touch_idx\n","  df['long_b_touch_idx_{}{}{}'.format(itv, period1, period2)] = long_b_touch_idx\n","  df['long_a_line_{}{}{}'.format(itv, period1, period2)] = get_line(long_a_touch_idx, dc_lower2_)\n","  df['long_b_line_{}{}{}'.format(itv, period1, period2)] = get_line(long_b_touch_idx, dc_upper_)\n","  df['long_wave_point_{}{}{}'.format(itv, period1, period2)] = long_open_res\n","\n","  if itv != 'T':\n","    assert ltf_df is not None, \"assert ltf_df is not None\"\n","    join_cols = np.arange(-16, 0 ,1).astype(int)  # points & donchian_channels\n","    ltf_df.drop(df.columns[join_cols], inplace=True, axis=1, errors='ignore')\n","    try:\n","      ltf_df = ltf_df.join(to_lower_tf_v2(ltf_df, df, join_cols), how='inner')\n","    except Exception as e:\n","      print(\"error in wave_range_v5's join() :\", e)\n","  else:\n","    ltf_df = df    \n","\n","  return ltf_df\n","\n","def wave_range_v5(df, period1, period2, ltf_df=None, touch_period=50):  # v2 for period1 only\n","\n","  itv = pd.infer_freq(df.index)\n","\n","  donchian_channel_v2(df, period1) \n","  donchian_channel_v2(df, period2) \n","  dc_lower_, dc_upper_ = df['dc_lower_{}{}'.format(itv, period1)].to_numpy(), df['dc_upper_{}{}'.format(itv, period1)].to_numpy()\n","  dc_lower2_, dc_upper2_ = df['dc_lower_{}{}'.format(itv, period2)].to_numpy(), df['dc_upper_{}{}'.format(itv, period2)].to_numpy()\n","  \n","  short_base = (dc_lower_ + dc_upper2_) / 2\n","  long_base = (dc_upper_ + dc_lower2_) / 2\n","  df['short_base_{}{}{}'.format(itv, period1, period2)] = short_base\n","  df['long_base_{}{}{}'.format(itv, period1, period2)] = long_base\n","\n","  len_df = len(df)   \n","  short_open_res = np.ones(len_df)\n","  long_open_res = np.ones(len_df)\n","  \n","  data_cols = ['open', 'high', 'low']\n","  open, high, low = [df[col_].to_numpy() for col_ in data_cols]\n","\n","  short_a_touch_idx = pd.Series(np.where(high >= dc_upper2_, np.arange(len_df), np.nan)).rolling(touch_period, min_periods=1).max().to_numpy()  # min -> max\n","  short_b_touch_idx = pd.Series(np.where(low <= dc_lower_, np.arange(len_df), np.nan)).rolling(touch_period, min_periods=1).max().to_numpy()   # min 으로 하면 a 이전에 b 있는건 모두 제외하게됨    \n","  short_open_res *= (high >= short_base) & (short_base >= open) & (short_a_touch_idx < short_b_touch_idx)\n","  df['short_a_touch_idx_{}{}{}'.format(itv, period1, period2)] = short_a_touch_idx\n","  df['short_b_touch_idx_{}{}{}'.format(itv, period1, period2)] = short_b_touch_idx\n","  df['short_wave_point_{}{}{}'.format(itv, period1, period2)] = short_open_res\n","  \n","  long_a_touch_idx = pd.Series(np.where(low <= dc_lower2_, np.arange(len_df), np.nan)).rolling(touch_period, min_periods=1).max().to_numpy()       \n","  long_b_touch_idx = pd.Series(np.where(high >= dc_upper_, np.arange(len_df), np.nan)).rolling(touch_period, min_periods=1).max().to_numpy()    \n","  long_open_res *= (open >= long_base) & (long_base >= low) & (long_a_touch_idx < long_b_touch_idx)\n","  df['long_a_touch_idx_{}{}{}'.format(itv, period1, period2)] = long_a_touch_idx\n","  df['long_b_touch_idx_{}{}{}'.format(itv, period1, period2)] = long_b_touch_idx\n","  df['long_wave_point_{}{}{}'.format(itv, period1, period2)] = long_open_res\n","\n","  if itv != 'T':\n","    assert ltf_df is not None, \"assert ltf_df is not None\"\n","    join_cols = np.arange(-12, 0 ,1).astype(int)  # points & donchian_channels\n","    ltf_df.drop(df.columns[join_cols], inplace=True, axis=1, errors='ignore')\n","    try:\n","      ltf_df = ltf_df.join(to_lower_tf_v2(ltf_df, df, join_cols), how='inner')\n","      # ltf_df = ltf_df.merge(to_lower_tf_v2(ltf_df, df, [-7, -6, -5, -4, -3, -2, -1]), how='inner')\n","    except Exception as e:\n","      print(\"error in wave_range_v5's join() :\", e)\n","  else:\n","    ltf_df = df    \n","\n","  return ltf_df\n","\n","def wave_range_v4(df, period1, ltf_df=None, touch_lbperiod=50):  # v2 for period1 only\n","\n","  itv = pd.infer_freq(df.index)\n","\n","  donchian_channel_v2(df, period1) \n","  dc_lower_, dc_upper_ = df['dc_lower_{}{}'.format(itv, period1)].to_numpy(), df['dc_upper_{}{}'.format(itv, period1)].to_numpy()\n","\n","  df['wave_base_{}'.format(itv)] = (dc_lower_ + dc_upper_) / 2  # dc_base touch 사용하면 point 를 좀 더 일찍 잡을 수 있음  \n","  wave_base_ = df['wave_base_{}'.format(itv)].to_numpy()\n","  # short_base_ = df['short_base__{}'.format(itv)].to_numpy()\n","  # long_base_ = df['long_base__{}'.format(itv)].to_numpy()\n","\n","  len_df = len(df)   \n","  short_open_res = np.ones(len_df)\n","  long_open_res = np.ones(len_df)\n","  \n","  data_cols = ['open', 'high', 'low']\n","  open, high, low = [df[col_].to_numpy() for col_ in data_cols]\n","\n","  df['upper_touch_idx_{}{}'.format(itv, period1)] = pd.Series(np.where(high >= dc_upper_, np.arange(len_df), np.nan)).rolling(touch_lbperiod, min_periods=1).max().to_numpy()  # min -> max\n","  df['lower_touch_idx_{}{}'.format(itv, period1)] = pd.Series(np.where(low <= dc_lower_, np.arange(len_df), np.nan)).rolling(touch_lbperiod, min_periods=1).max().to_numpy()   # min 으로 하면 a 이전에 b 있는건 모두 제외하게됨    \n","  \n","  upper_touch_idx_ = df['upper_touch_idx_{}{}'.format(itv, period1)].to_numpy()\n","  lower_touch_idx_ = df['lower_touch_idx_{}{}'.format(itv, period1)].to_numpy()\n","\n","  # df['wave_upper_{}'.format(itv)] = pd.Series(get_line(dc_upper_touch_idx, dc_upper_)).ffill().to_numpy() \n","  # df['wave_lower_{}'.format(itv)] = pd.Series(get_line(dc_lower_touch_idx, dc_lower_)).ffill().to_numpy() \n","\n","  short_open_res *= (high >= wave_base_) & (wave_base_ >= open) & (upper_touch_idx_ < lower_touch_idx_)\n","  df['short_wave_point_{}{}'.format(itv, period1)] = short_open_res\n","\n","  long_open_res *= (open >= wave_base_) & (wave_base_ >= low) & (lower_touch_idx_ < upper_touch_idx_)\n","  df['long_wave_point_{}{}'.format(itv, period1)] = long_open_res\n","\n","  if itv != 'T':\n","    assert ltf_df is not None, \"assert ltf_df is not None\"\n","\n","    join_cols = np.arange(-7, 0 ,1).astype(int)\n","    ltf_df.drop(df.columns[join_cols], inplace=True, axis=1, errors='ignore')\n","    try:\n","      ltf_df = ltf_df.join(to_lower_tf_v2(ltf_df, df, join_cols), how='inner')\n","      # ltf_df = ltf_df.merge(to_lower_tf_v2(ltf_df, df, [-7, -6, -5, -4, -3, -2, -1]), how='inner')\n","    except Exception as e:\n","      print(\"error in wave_range_v4's join() :\", e)\n","  else:\n","    ltf_df = df    \n","\n","  return ltf_df"],"metadata":{"id":"PV-dlAVZfehP","executionInfo":{"status":"ok","timestamp":1649125371571,"user_tz":-540,"elapsed":880,"user":{"displayName":"7th June","userId":"08178289703395036410"}}},"execution_count":83,"outputs":[]},{"cell_type":"code","source":["i = random.randint(0, len(res_df))\n","\n","plot_size = 200\n","t_df = res_df.iloc[i - plot_size:i]\n","a_data = t_df.to_numpy()"],"metadata":{"id":"YqBXjVPzdccC","executionInfo":{"status":"ok","timestamp":1649124168032,"user_tz":-540,"elapsed":349,"user":{"displayName":"7th June","userId":"08178289703395036410"}}},"execution_count":41,"outputs":[]},{"cell_type":"code","source":["plt.style.use(['dark_background', 'fast'])\n","fig = plt.figure(figsize=(15, 9))\n","nrows, ncols = 1, 1\n","gs = gridspec.GridSpec(nrows=nrows,  # row 부터 index 채우고 col 채우는 순서임 (gs_idx)\n","                        ncols=ncols\n","                        # height_ratios=[3, 1]\n","                        )\n","\n","ax = fig.add_subplot(gs[0])\n","\n","# ------ candles ------ #\n","candle_plot(a_data[:, col_idx_dict['ohlc_col_idxs']], ax, alpha=1.0, wickwidth=1.0)\n","# _ = [step_col_plot(a_data[:, params[0]], *params[1:]) for params in col_idx_dict['step_col_info']]\n","\n","itv, period1, period2 = 'T', 20, 20\n","t_df = wave_range_v5(t_df, 20, 20, ltf_df=None, touch_period=50)\n","\n","dc_upper_ = t_df['dc_upper_{}{}'.format(itv, period1)].to_numpy()\n","dc_lower_ = t_df['dc_lower_{}{}'.format(itv, period1)].to_numpy()\n","dc_upper2_ = t_df['dc_upper_{}{}'.format(itv, period2)].to_numpy()\n","dc_lower2_ = t_df['dc_lower_{}{}'.format(itv, period2)].to_numpy()\n","plt.step(np.arange(len(dc_upper_)), dc_upper_, alpha=1.0, color='yellow', linewidth=2)\n","plt.step(np.arange(len(dc_lower_)), dc_lower_, alpha=1.0, color='yellow', linewidth=2)\n","# plt.step(np.arange(len(t_df.dc_base_T40.to_numpy())), t_df.dc_base_T40.to_numpy(), alpha=1.0, color='white', linewidth=1)\n","\n","\n","short_open_plot_idx = t_df['short_wave_point_{}{}{}'.format(itv, period1, period2)].to_numpy().astype(bool)\n","long_open_plot_idx = t_df['long_wave_point_{}{}{}'.format(itv, period1, period2)].to_numpy().astype(bool)\n","short_base_ = t_df['short_base_{}{}{}'.format(itv, period1, period2)].to_numpy()\n","long_base_ = t_df['long_base_{}{}{}'.format(itv, period1, period2)].to_numpy()\n","plt.step(np.arange(len(short_base_))[short_open_plot_idx], short_base_[short_open_plot_idx], \"o\", alpha=1.0, color='#ff00ff', markersize=11)\n","plt.step(np.arange(len(long_base_))[long_open_plot_idx], long_base_[long_open_plot_idx], \"o\", alpha=1.0, color='#ff00ff', markersize=11)\n","\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":537},"id":"-Dr_tTk9csFm","executionInfo":{"status":"ok","timestamp":1649124296856,"user_tz":-540,"elapsed":1657,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"4c495e36-8ff0-4067-eed0-962c24ada307"},"execution_count":50,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1080x648 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["def sd_dc(df, period1, period2, ltf_df=None):\n","    assert period1 <= period2, \"assert period1 <= period2\"\n","    donchian_channel_v2(df, period1)\n","    donchian_channel_v2(df, period2)\n","    itv = pd.infer_freq(df.index)\n","    if itv != 'T':\n","      assert ltf_df is not None, \"assert ltf_df is not None\"\n","      ltf_df = ltf_df.join(to_lower_tf_v2(ltf_df, df, [-4, -3, -2, -1]), how='inner')\n","    else:\n","      ltf_df = df\n","\n","    ltf_df['short_base_{}'.format(itv)] = (ltf_df['dc_lower_{}{}'.format(itv, period1)].to_numpy() + ltf_df['dc_upper_{}{}'.format(itv, period2)].to_numpy()) / 2\n","    ltf_df['long_base_{}'.format(itv)] = (ltf_df['dc_upper_{}{}'.format(itv, period1)].to_numpy() + ltf_df['dc_lower_{}{}'.format(itv, period2)].to_numpy()) / 2\n","\n","    return ltf_df\n","\n","\n","def donchian_channel_v2(df, period):\n","  itv = pd.infer_freq(df.index)\n","  upper_name = 'dc_upper_{}{}'.format(itv, period)\n","  lower_name = 'dc_lower_{}{}'.format(itv, period)\n","\n","  df.drop([upper_name, lower_name], inplace=True, axis=1, errors='ignore')\n","\n","  df[upper_name] = df['high'].rolling(period).max()\n","  df[lower_name] = df['low'].rolling(period).min()\n","\n","  return\n","\n","def wave_range(df, period1, period2, ltf_df=None, touch_lbperiod=50):\n","    assert period1 <= period2, \"assert period1 <= period2\"\n","    donchian_channel_v2(df, period1)\n","    donchian_channel_v2(df, period2)\n","    itv = pd.infer_freq(df.index)\n","    if itv != 'T':\n","      assert ltf_df is not None, \"assert ltf_df is not None\"\n","      ltf_df = ltf_df.join(to_lower_tf_v2(ltf_df, df, [-4, -3, -2, -1]), how='inner')\n","    else:\n","      ltf_df = df\n","\n","    short_tp_1_, short_tp_0_ = ltf_df['dc_lower_{}{}'.format(itv, period1)].to_numpy(), ltf_df['dc_upper_{}{}'.format(itv, period2)].to_numpy()\n","    long_tp_1_, long_tp_0_ = ltf_df['dc_upper_{}{}'.format(itv, period1)].to_numpy(), ltf_df['dc_lower_{}{}'.format(itv, period2)].to_numpy()\n","\n","    ltf_df['short_base_{}'.format(itv)] = (short_tp_1_ + short_tp_0_) / 2  # dc_base touch 사용하면 point 를 좀 더 일찍 잡을 수 있음\n","    ltf_df['long_base_{}'.format(itv)] = (long_tp_1_ + long_tp_0_) / 2\n","    \n","    short_base = ltf_df['short_base_{}'.format(itv)].to_numpy()\n","    long_base = ltf_df['long_base_{}'.format(itv)].to_numpy()\n","\n","    len_df = len(ltf_df)   \n","    short_open_res = np.ones(len_df)\n","    long_open_res = np.ones(len_df)\n","    \n","    data_cols = ['open', 'high', 'low']\n","    open, high, low = [ltf_df[col_].to_numpy() for col_ in data_cols]\n","\n","    short_a_touch_idx = pd.Series(np.where(high >= short_tp_0_, np.arange(len_df), np.nan)).rolling(touch_lbperiod, min_periods=1).max().to_numpy()  # min -> max\n","    short_b_touch_idx = pd.Series(np.where(low <= short_tp_1_, np.arange(len_df), np.nan)).rolling(touch_lbperiod, min_periods=1).max().to_numpy()   # min 으로 하면 a 이전에 b 있는건 모두 제외하게됨    \n","    short_open_res *= (high >= short_base) & (short_base >= open) & (short_a_touch_idx < short_b_touch_idx)\n","\n","    ltf_df['short_wave_1_{}'.format(itv)] = pd.Series(get_line(short_b_touch_idx, short_tp_1_)).ffill().to_numpy()   # ffill() 다음 to_numpy() 안하면 None 값\n","    ltf_df['short_wave_0_{}'.format(itv)] = pd.Series(get_line(short_a_touch_idx, short_tp_0_)).ffill().to_numpy()\n","    ltf_df['short_wave_point_{}'.format(itv)] = short_open_res.astype(bool)\n","\n","    long_a_touch_idx = pd.Series(np.where(low <= long_tp_0_, np.arange(len_df), np.nan)).rolling(touch_lbperiod, min_periods=1).max().to_numpy()       \n","    long_b_touch_idx = pd.Series(np.where(high >= long_tp_1_, np.arange(len_df), np.nan)).rolling(touch_lbperiod, min_periods=1).max().to_numpy()    \n","    long_open_res *= (open >= long_base) & (long_base >= low) & (long_a_touch_idx < long_b_touch_idx)\n","\n","    ltf_df['long_wave_1_{}'.format(itv)] = pd.Series(get_line(long_b_touch_idx, long_tp_1_)).ffill().to_numpy()\n","    ltf_df['long_wave_0_{}'.format(itv)] = pd.Series(get_line(long_a_touch_idx, long_tp_0_)).ffill().to_numpy()\n","    ltf_df['long_wave_point_{}'.format(itv)] = long_open_res.astype(bool)\n","\n","    return ltf_df\n","\n","def wave_range_v2(df, period1, ltf_df=None, touch_lbperiod=50):  # v2 for period1 only\n","\n","  donchian_channel_v2(df, period1) \n","\n","  itv = pd.infer_freq(df.index)\n","  if itv != 'T':\n","    assert ltf_df is not None, \"assert ltf_df is not None\"\n","    try:\n","      ltf_df = ltf_df.join(to_lower_tf_v2(ltf_df, df, [-2, -1]), how='inner')\n","    except Exception as e:\n","      print(\"error in wave_range_v2's join() :\", e)\n","  else:\n","    ltf_df = df    \n","\n","  dc_lower_, dc_upper_ = ltf_df['dc_lower_{}{}'.format(itv, period1)].to_numpy(), ltf_df['dc_upper_{}{}'.format(itv, period1)].to_numpy()\n","\n","  # print(ltf_df.tail().iloc[:, -4:])\n","\n","  ltf_df['wave_base_{}'.format(itv)] = (dc_lower_ + dc_upper_) / 2  # dc_base touch 사용하면 point 를 좀 더 일찍 잡을 수 있음\n","  \n","  wave_base_ = ltf_df['wave_base_{}'.format(itv)].to_numpy()\n","  # short_base_ = ltf_df['short_base__{}'.format(itv)].to_numpy()\n","  # long_base_ = ltf_df['long_base__{}'.format(itv)].to_numpy()\n","\n","  len_df = len(ltf_df)   \n","  short_open_res = np.ones(len_df)\n","  long_open_res = np.ones(len_df)\n","  \n","  data_cols = ['open', 'high', 'low']\n","  open, high, low = [ltf_df[col_].to_numpy() for col_ in data_cols]\n","\n","  dc_upper_touch_idx = pd.Series(np.where(high >= dc_upper_, np.arange(len_df), np.nan)).rolling(touch_lbperiod, min_periods=1).max().to_numpy()  # min -> max\n","  dc_lower_touch_idx = pd.Series(np.where(low <= dc_lower_, np.arange(len_df), np.nan)).rolling(touch_lbperiod, min_periods=1).max().to_numpy()   # min 으로 하면 a 이전에 b 있는건 모두 제외하게됨    \n","  \n","  ltf_df['wave_upper_{}'.format(itv)] = pd.Series(get_line(dc_upper_touch_idx, dc_upper_)).ffill().to_numpy() \n","  ltf_df['wave_lower_{}'.format(itv)] = pd.Series(get_line(dc_lower_touch_idx, dc_lower_)).ffill().to_numpy() \n","\n","  short_open_res *= (high >= wave_base_) & (wave_base_ >= open) & (dc_upper_touch_idx < dc_lower_touch_idx)\n","  ltf_df['short_wave_point_{}'.format(itv)] = short_open_res.astype(bool)\n","\n","  long_open_res *= (open >= wave_base_) & (wave_base_ >= low) & (dc_lower_touch_idx < dc_upper_touch_idx)\n","  ltf_df['long_wave_point_{}'.format(itv)] = long_open_res.astype(bool)\n","\n","  return ltf_df\n","\n","def wave_range_v3(df, period1, ltf_df=None, touch_lbperiod=50):  # v2 for period1 only\n","\n","  itv = pd.infer_freq(df.index)\n","\n","  donchian_channel_v2(df, period1) \n","  dc_lower_, dc_upper_ = df['dc_lower_{}{}'.format(itv, period1)].to_numpy(), df['dc_upper_{}{}'.format(itv, period1)].to_numpy()\n","\n","  df['wave_base_{}'.format(itv)] = (dc_lower_ + dc_upper_) / 2  # dc_base touch 사용하면 point 를 좀 더 일찍 잡을 수 있음  \n","  wave_base_ = df['wave_base_{}'.format(itv)].to_numpy()\n","  # short_base_ = df['short_base__{}'.format(itv)].to_numpy()\n","  # long_base_ = df['long_base__{}'.format(itv)].to_numpy()\n","\n","  len_df = len(df)   \n","  short_open_res = np.ones(len_df)\n","  long_open_res = np.ones(len_df)\n","  \n","  data_cols = ['open', 'high', 'low']\n","  open, high, low = [df[col_].to_numpy() for col_ in data_cols]\n","\n","  dc_upper_touch_idx = pd.Series(np.where(high >= dc_upper_, np.arange(len_df), np.nan)).rolling(touch_lbperiod, min_periods=1).max().to_numpy()  # min -> max\n","  dc_lower_touch_idx = pd.Series(np.where(low <= dc_lower_, np.arange(len_df), np.nan)).rolling(touch_lbperiod, min_periods=1).max().to_numpy()   # min 으로 하면 a 이전에 b 있는건 모두 제외하게됨    \n","  \n","  # df['wave_upper_{}'.format(itv)] = pd.Series(get_line(dc_upper_touch_idx, dc_upper_)).ffill().to_numpy() \n","  # df['wave_lower_{}'.format(itv)] = pd.Series(get_line(dc_lower_touch_idx, dc_lower_)).ffill().to_numpy() \n","\n","  short_open_res *= (high >= wave_base_) & (wave_base_ >= open) & (dc_upper_touch_idx < dc_lower_touch_idx)\n","  df['short_wave_point_{}'.format(itv)] = short_open_res\n","\n","  long_open_res *= (open >= wave_base_) & (wave_base_ >= low) & (dc_lower_touch_idx < dc_upper_touch_idx)\n","  df['long_wave_point_{}'.format(itv)] = long_open_res\n","\n","  if itv != 'T':\n","    assert ltf_df is not None, \"assert ltf_df is not None\"\n","\n","    join_cols = np.arange(-7, 0 ,1).astype(int)\n","    ltf_df.drop(df.columns[join_cols], inplace=True, axis=1, errors='ignore')\n","    try:\n","      ltf_df = ltf_df.join(to_lower_tf_v2(ltf_df, df, join_cols), how='inner')\n","      # ltf_df = ltf_df.merge(to_lower_tf_v2(ltf_df, df, [-7, -6, -5, -4, -3, -2, -1]), how='inner')\n","    except Exception as e:\n","      print(\"error in wave_range_v3's join() :\", e)\n","  else:\n","    ltf_df = df    \n","\n","  return ltf_df\n"],"metadata":{"id":"7_FX0rIP_vyE"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["res = wave_range_v3(to_htf(res_df, '5T', '1h'), 12, ltf_df=res_df, touch_lbperiod=50)\n","# res = wave_range_v3(res_df, 12, ltf_df=None, touch_lbperiod=50)"],"metadata":{"id":"-AmhhMxC-ltr"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print(res.tail(100).iloc[:, -7:])"],"metadata":{"id":"gGDf6iBxFP_s"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["res.dtypes\n","# type(np.arange(-7,0,1).astype(int)[0])"],"metadata":{"id":"ZoS_76wwAXhj"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def to_lower_tf_v2(ltf_df, htf_df, column, backing_i=1, show_info=False):\n","    #       Todo        #\n","    #        1. 현재 downsampled df 만 허용, direct_df 사용시 issue 발생 가능할 것\n","    assert type(column[0]) in [int, np.int64], \"column value should be integer\"\n","    # if not replace_last_idx:\n","    #     assert datetime.timestamp(htf_df.index[-1]) >= datetime.timestamp(\n","    #         ltf_df.index[-1]), \"htf_lastidx should >= ltf_lastidx\"  # data sync confirmation\n","    #   htf idx ts 가 ltf 보다 작을 경우, intersec_idx 를 구할 수 없음\n","\n","    #   downsampled htf_df 만 허용 - 통일성\n","    #   non_resampled df 사용시 \"cannot reindex a non-unique index with a method or limit\" 라는 error_msg 확인\n","\n","    cols = htf_df.columns[column]  # to_lower_tf_v1 의 int col 반영\n","\n","    ltf_itv = pd.infer_freq(ltf_df.index)\n","    assert ltf_itv == 'T', \"currently only -> 'T' allowed..\"\n","\n","    if show_info:\n","        print(\"backing_i :\", backing_i)\n","\n","    #        1. htf last_ts_idx 의 second 가 :00 format (all rows same format)이 아닌 경우, bfill() 시 NaN 발생\n","    #           --> 상관 없음, 다른 윈인임\n","    #        2. single positional indexer is out-of-bounds => 대게 len(data) 부족 문제임 (row 증분)\n","    # iloc 뒤에 붙여야함, 아니면 timeidx 정상 출력 안됨\n","\n","    renamed_last_row = htf_df.rename(index={htf_df.index[-1]: ltf_df.index[-1]}, inplace=False).iloc[[-1]]\n","    if htf_df.index[-1] != renamed_last_row.index[-1]:  # cannot reindex a non-unique index with a method or limit 방지\n","        htf_df = htf_df.append(renamed_last_row)\n","\n","    # print(htf_df.tail())\n","\n","    # downsampled htf 의 freq_offset 기준으로 앞에서 뒤로 채우는게 맞음\n","    # --> hh:mm:00 format 을 사용해서 그럼 (59:999 면 bfill() 이였을 것)\n","    resampled_df = htf_df[cols].shift(backing_i).resample(ltf_itv).ffill()\n","    # print(resampled_df.tail())\n","    # print()\n","\n","    #        2. htf 가 downsampled 된 df 를 default 로 사용하기에, slicing 불필요해짐\n","    #        3. Shape of passed values is (799, 3), indices imply (3000, 3) -> len(ltf_df) > len(resampled_df) 란 의미\n","    #        4. solution => reindexing for inner join   #\n","    #         a. len(resampled_df) > len(ltf_df) 경우 slicing 진행\n","    #           -> ltf_index 를 다가져와도 resampled_indx 를 채울 수 없음 => error\n","    #           i. resampled length 를 ltf length 로 줄임\n","    #               1. 이미 htf_indi. 는 계산된 상태이고, \n","    #                   a. trader - 마지막 index 만 사용, 전혀 무리없음\n","    #                   b. idep - resampled_df.head(itv) 만큼만 소실된 것 -> 큰 무리없음\n","    #         b. len(resampled_df) < len(ltf_df)-> 상관없음 (ltf_index 에서 resampled_df length 만큼만 때가면 되니까)\n","    if len(resampled_df) > len(ltf_df):\n","        resampled_df = resampled_df.iloc[-len(ltf_df):]\n","    # print(\"len(ltf_df) :\", len(ltf_df))\n","    # print(\"len(resampled_df) :\", len(resampled_df))\n","    resampled_df.index = ltf_df.index[-len(resampled_df):]\n","    # assert len(ltf_df) <= len(resampled_df), \"for join method, assert len(ltf_df) <= len(resampled_df)\"\n","\n","    #       check last row's validity       #\n","    assert np.sum(\n","        pd.isnull(resampled_df.iloc[-1].values)) == 0, \"np.nan value occured, more {} rows might be reguired\".format(\n","        cols)\n","\n","    # if datetime.timestamp(htf_df.index[-1]) < datetime.timestamp(ltf_df.index[-1]):\n","    #     # resampled_df.rename(index={resampled_df.index[-1]: ltf_df.index[-1]}, inplace=True)\n","    #     print(resampled_df.tail())\n","    #     print(\"-----------\")\n","\n","    #        1. 필요한 len 계산해서 pre_proc. 진행 --> open_idx 를 동일하게 맞춰놓았고, shift 적용 상태이기 때문에 불필요함\n","\n","    #        1. ltf_df 의 마지막 timeidx 와 sync. 맞춰주어야함\n","    #           a. itv '1T' 가 아닌경우, 교집합 timeidx 가 존재하지 않을 수 있음\n","    # ltf_lastidx = ltf_df.tail(1).resample('1T').asfreq().index\n","    # intersec_idx_arr = np.argwhere(resampled_df.index == ltf_lastidx.item())\n","    # intersec_idx = intersec_idx_arr.item()\n","    # print(\"intersec_idx :\", intersec_idx)\n","    # print(\"len(resampled_df) :\", len(resampled_df))\n","    #\n","    # assert len(intersec_idx_arr) >= 1, \"len(intersec_idx_arr) is zero\"\n","    #\n","    # sliced_resampled_df = resampled_df[:intersec_idx + 1]\n","    # return sliced_resampled_df.values[-len(ltf_df):]\n","\n","    # return resampled_df.values[-len(ltf_df):]\n","    return resampled_df"],"metadata":{"id":"Z7bHV8CvC7eF"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# 1. base_touch_idx 기준으로, 작정한다음, np.nan value 를 ffill() 진행\n","strat_version = config.strat_version\n","len_df = len(res_df)\n","short_open_res = np.ones(len_df)\n","long_open_res = np.ones(len_df)\n","\n","short_tp_1_col, short_tp_0_col, short_tp_gap_col = 'short_tp_1_{}'.format(strat_version), 'short_tp_0_{}'.format(strat_version), 'short_tp_gap_{}'.format(strat_version) \n","long_tp_1_col, long_tp_0_col, long_tp_gap_col = 'long_tp_1_{}'.format(strat_version), 'long_tp_0_{}'.format(strat_version), 'long_tp_gap_{}'.format(strat_version) \n","short_epout_1_col, short_epout_0_col, short_epout_gap_col = 'short_epout_1_{}'.format(strat_version), 'short_epout_0_{}'.format(strat_version), 'short_epout_gap_{}'.format(strat_version) \n","long_epout_1_col, long_epout_0_col, long_epout_gap_col = 'long_epout_1_{}'.format(strat_version), 'long_epout_0_{}'.format(strat_version), 'long_epout_gap_{}'.format(strat_version) \n","\n","data_cols = ['open', 'high', 'low']   # Todo - public_indi 이전에 해야할지도 모름 # 'close', 'haopen', 'hahigh', 'halow', 'haclose'\n","tp_cols = [short_tp_1_col, short_tp_0_col, short_tp_gap_col, long_tp_1_col, long_tp_0_col, long_tp_gap_col]   # Todo - public_indi 이전에 해야할지도 모름\n","epout_cols = [short_epout_1_col, short_epout_0_col, short_epout_gap_col, long_epout_1_col, long_epout_0_col, long_epout_gap_col]   # Todo - public_indi 이전에 해야할지도 모름\n","\n","short_tp_1_, short_tp_0_, short_tp_gap_, long_tp_1_, long_tp_0_, long_tp_gap_ = [res_df[col_].to_numpy() for col_ in tp_cols]\n","short_epout_1_, short_epout_0_, short_epout_gap_, long_epout_1_, long_epout_0_, long_epout_gap_ = [res_df[col_].to_numpy() for col_ in epout_cols]\n","open, high, low = [res_df[col_].to_numpy() for col_ in data_cols]\n","\n","short_base = (short_tp_1_ + short_tp_0_) / 2\n","long_base = (long_tp_1_ + long_tp_0_) / 2\n","\n","touch_period = 50\n","\n","short_a_touch_idx = pd.Series(np.where(high >= short_tp_0_, np.arange(len_df), np.nan)).rolling(touch_period, min_periods=1).max().to_numpy()  # min -> max\n","short_b_touch_idx = pd.Series(np.where(low <= short_tp_1_, np.arange(len_df), np.nan)).rolling(touch_period, min_periods=1).max().to_numpy()   # min 으로 하면 a 이전에 b 있는건 모두 제외하게됨\n","\n","short_en_p = (get_line(short_a_touch_idx, short_tp_0_) + get_line(short_b_touch_idx, short_tp_1_)) / 2\n","short_base_b = get_line(short_b_touch_idx, short_base)   # 현재, en_p == base_b, why ..?\n","short_tp_0_touch = get_line(short_a_touch_idx, short_tp_0_)\n","short_tp_1_touch = get_line(short_b_touch_idx, short_tp_1_)\n","short_tp_gap_b = get_line(short_b_touch_idx, short_tp_gap_)\n","short_open_res *= (high >= short_base) & (short_base >= open) & (short_a_touch_idx < short_b_touch_idx) #& (short_base_b + config.loc_set.point.base_gap * short_tp_gap_b >= short_base)\n","# short_open_res *= (high >= short_base_b) & (short_base_b >= low) & (short_a_touch_idx < short_b_touch_idx) & (short_base_b + config.loc_set.point.base_gap * short_tp_gap_b >= short_base)\n","\n","len_df = len(res_df)\n","long_a_touch_idx = pd.Series(np.where(low <= long_tp_0_, np.arange(len_df), np.nan)).rolling(touch_period, min_periods=1).max().to_numpy()       \n","long_b_touch_idx = pd.Series(np.where(high >= long_tp_1_, np.arange(len_df), np.nan)).rolling(touch_period, min_periods=1).max().to_numpy()\n","\n","long_en_p = (get_line(long_a_touch_idx, long_tp_0_) + get_line(long_b_touch_idx, long_tp_1_)) / 2\n","long_base_b = get_line(long_b_touch_idx, long_base)\n","long_tp_0_touch = get_line(long_a_touch_idx, long_tp_0_)\n","long_tp_1_touch = get_line(long_b_touch_idx, long_tp_1_)\n","long_tp_gap_b = get_line(long_b_touch_idx, long_tp_gap_)\n","long_open_res *= (open >= long_base) & (long_base >= low) & (long_a_touch_idx < long_b_touch_idx) # & (long_base_b - config.loc_set.point.base_gap * long_tp_gap_b <= long_base)\n","# long_open_res *= (open >= long_base) & (long_base >= low) # & (long_a_touch_idx < long_b_touch_idx) # & (long_base_b - config.loc_set.point.base_gap * long_tp_gap_b <= long_base)\n","# long_open_res *= (high >= long_base) & (long_base >= low) & (long_a_touch_idx < long_b_touch_idx) # & (long_base_b - config.loc_set.point.base_gap * long_tp_gap_b <= long_base)\n"],"metadata":{"id":"WA094Xin1FGr"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["i = random.randint(0, len(res_df))\n","\n","plot_size = 200\n","t_df = res_df.iloc[i - plot_size:i]\n","a_data = t_df.to_numpy()"],"metadata":{"id":"t4P2qIYAFiDm"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["plt.style.use(['dark_background', 'fast'])\n","fig = plt.figure(figsize=(15, 9))\n","nrows, ncols = 1, 1\n","gs = gridspec.GridSpec(nrows=nrows,  # row 부터 index 채우고 col 채우는 순서임 (gs_idx)\n","                        ncols=ncols\n","                        # height_ratios=[3, 1]\n","                        )\n","\n","ax = fig.add_subplot(gs[0])\n","\n","# ------ candles ------ #\n","candle_plot(a_data[:, col_idx_dict['ohlc_col_idxs']], ax, alpha=1.0, wickwidth=1.0)\n","# _ = [step_col_plot(a_data[:, params[0]], *params[1:]) for params in col_idx_dict['step_col_info']]\n","\n","# t_df = wave_range(t_df, 20, 20, ltf_df=None, touch_lbperiod=50)\n","t_df = mcp(t_df, 20, ltf_df=None, touch_lbperiod=50)\n","\n","plt.step(np.arange(len(t_df.dc_upper_T40.to_numpy())), t_df.dc_upper_T40.to_numpy(), alpha=1.0, color='yellow', linewidth=2)\n","plt.step(np.arange(len(t_df.dc_lower_T40.to_numpy())), t_df.dc_lower_T40.to_numpy(), alpha=1.0, color='yellow', linewidth=2)\n","plt.step(np.arange(len(t_df.dc_base_T40.to_numpy())), t_df.dc_base_T40.to_numpy(), alpha=1.0, color='white', linewidth=1)\n","\n","short_open_plot_idx = t_df.short_mcp_point_T40.to_numpy().astype(bool)\n","long_open_plot_idx = t_df.long_mcp_point_T40.to_numpy().astype(bool)\n","long_open_plot_idx = t_df.long_mcp_point_T40.to_numpy().astype(bool)\n","plt.step(np.arange(len(t_df.dc_base_T40.to_numpy()))[short_open_plot_idx], t_df.dc_base_T40.to_numpy()[short_open_plot_idx], \"o\", alpha=1.0, color='#ff00ff', markersize=11)\n","plt.step(np.arange(len(t_df.dc_base_T40.to_numpy()))[long_open_plot_idx], t_df.dc_base_T40.to_numpy()[long_open_plot_idx], \"o\", alpha=1.0, color='#ff00ff', markersize=11)\n","\n","plt.show()"],"metadata":{"id":"5SIWeZb24xdl"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["t_df.dc_lower_T40.to_numpy()\n","# t_df.dc_base_T40.to_numpy()[short_open_plot_idx]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xPzel_I-5tdT","executionInfo":{"status":"ok","timestamp":1648963836575,"user_tz":-540,"elapsed":344,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"107a4133-5161-4816-96e4-b57ebb22c1ea"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([    nan,     nan,     nan,     nan,     nan,     nan,     nan,     nan,     nan,     nan,     nan,     nan,     nan,     nan,     nan,     nan,     nan,     nan,     nan,     nan,     nan,     nan,     nan,     nan,     nan,     nan,     nan,     nan,     nan,     nan,     nan,     nan,     nan,     nan,     nan,     nan,     nan,     nan,     nan, 3800.06, 3800.06, 3800.06, 3800.06, 3800.06, 3800.06, 3800.06, 3800.06, 3793.03, 3785.83, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3788.66, 3791.08, 3780.65, 3780.52, 3775.  , 3775.  , 3775.  , 3775.  , 3775.  , 3775.  , 3775.  , 3775.  , 3775.  , 3775.  , 3775.  , 3775.  , 3775.  , 3775.  , 3775.  , 3750.84, 3750.84, 3750.84, 3750.84, 3750.84, 3750.84, 3750.84, 3750.84, 3750.84, 3750.  , 3750.  , 3750.  , 3745.  , 3745.  , 3745.  , 3738.22, 3738.22, 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.91, 3733.44, 3733.44, 3733.44, 3733.44, 3733.44, 3733.44, 3733.44, 3733.44, 3733.44, 3733.44, 3733.44, 3733.44, 3733.44, 3733.44, 3733.44, 3733.44, 3733.44, 3733.44, 3733.44, 3733.44, 3733.44, 3733.44, 3733.44, 3733.44, 3733.44, 3735.  , 3738.25, 3739.3 , 3741.91, 3741.91, 3741.91, 3741.91, 3741.91, 3741.91])"]},"metadata":{},"execution_count":229}]},{"cell_type":"code","source":["plt.style.use(['dark_background', 'fast'])\n","fig = plt.figure(figsize=(15, 9))\n","nrows, ncols = 1, 1\n","gs = gridspec.GridSpec(nrows=nrows,  # row 부터 index 채우고 col 채우는 순서임 (gs_idx)\n","                        ncols=ncols\n","                        # height_ratios=[3, 1]\n","                        )\n","\n","ax = fig.add_subplot(gs[0])\n","\n","# ------ candles ------ #\n","candle_plot(a_data[:, col_idx_dict['ohlc_col_idxs']], ax, alpha=1.0, wickwidth=1.0)\n","_ = [step_col_plot(a_data[:, params[0]], *params[1:]) for params in col_idx_dict['step_col_info']]\n","\n","# t_df = wave_range(t_df, 20, 20, ltf_df=None, touch_lbperiod=50)\n","t_df = mcp(t_df, 40, ltf_df=None, touch_lbperiod=50)\n","\n","plt.step(np.arange(len(t_df.short_wave_1_T.to_numpy())), t_df.short_wave_1_T.to_numpy(), alpha=1.0, color='blue', linewidth=2)\n","plt.step(np.arange(len(t_df.short_wave_0_T.to_numpy())), t_df.short_wave_0_T.to_numpy(), alpha=1.0, color='blue', linewidth=2)\n","plt.step(np.arange(len(t_df.long_wave_1_T.to_numpy())), t_df.long_wave_1_T.to_numpy(), alpha=1.0, color='yellow', linewidth=2)\n","plt.step(np.arange(len(t_df.long_wave_0_T.to_numpy())), t_df.long_wave_0_T.to_numpy(), alpha=1.0, color='yellow', linewidth=2)\n","\n","short_open_plot_idx = t_df.short_wave_point_T\n","long_open_plot_idx = t_df.long_wave_point_T\n","plt.step(np.arange(len(short_base[i - plot_size:i]))[short_open_plot_idx], short_base[i - plot_size:i][short_open_plot_idx], \"o\", alpha=1.0, color='#ff00ff', markersize=11)\n","plt.step(np.arange(len(long_base[i - plot_size:i]))[long_open_plot_idx], long_base[i - plot_size:i][long_open_plot_idx], \"o\", alpha=1.0, color='#00ff00', markersize=11)\n","\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":537},"executionInfo":{"status":"ok","timestamp":1648599806041,"user_tz":-540,"elapsed":977,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"90f467c9-ddb1-4f51-933f-b32de99a8c41","id":"7x80Xlje7j4Q"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1080x648 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["t_df.short_wave_point_T == short_open_res.astype(bool)[i - plot_size:i]\n","t_df.long_wave_point_T[50:] == long_open_res.astype(bool)[i - plot_size:i][50:]\n","\n","# short_open_plot_idx = short_open_res.astype(bool)[i - plot_size:i]\n","# long_open_plot_idx = long_open_res.astype(bool)[i - plot_size:i]\n","\n","# short_open_plot_idx = t_df.short_wave_point_T\n","# # long_open_plot_idx = t_df.long_wave_point_T"],"metadata":{"id":"NXPgF90xMzas"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# long_a_touch_idx[-plot_size:]\n","touch_idx_copy = long_a_touch_idx.copy()\n","# touch_line = long_tp_0_.copy()\n","touch_line = np.full_like(long_tp_0_, np.nan)\n","\n","nan_idx = np.isnan(touch_idx_copy)  # touch_period 동안 touch 이력이 없는 point\n","touch_idx_copy[nan_idx] = 0   # for indexing array\n","\n","int_touch_idx_copy = touch_idx_copy.astype(int)\n","# print(int_touch_idx_copy[-plot_size:])\n","print(touch_line[int_touch_idx_copy])\n","\n","touch_line = long_tp_0_[int_touch_idx_copy]\n","# touch_line[nan_idx] = np.nan   # for true comp.\n","# print(touch_idx_copy[-plot_size:])\n","print(touch_line[int_touch_idx_copy])\n","print(touch_line[-plot_size:])\n","\n","# long_tp_0_[long_a_touch_idx.astype(int)]"],"metadata":{"id":"2OLM9XOI-HO5"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def get_line(touch_idx, rtc_):\n","  touch_idx_copy = touch_idx.copy()\n","  touch_line = np.full_like(rtc_, np.nan)\n","\n","  nan_idx = np.isnan(touch_idx_copy)\n","  touch_idx_copy[nan_idx] = 0   # for indexing array\n","  touch_line = rtc_[touch_idx_copy.astype(int)]\n","  touch_line[nan_idx] = np.nan   # for true comp.\n","\n","  return touch_line"],"metadata":{"id":"3cvi-eFR9Jsm"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# high = t_df.high.to_numpy()\n","# low = t_df.low.to_numpy()\n","\n","# pivot_k = 0.001\n","# high_pivots = peak_valley_pivots(high, pivot_k, -pivot_k)\n","# low_pivots = peak_valley_pivots(low, pivot_k, -pivot_k)\n","# plot_pivots(high, high_pivots)\n","# plot_pivots(low, low_pivots)\n","\n","def plot_pivots(X, pivots):\n","    # plt.xlim(0, len(X))\n","    # plt.ylim(X.min()*0.99, X.max()*1.01)\n","    # plt.plot(np.arange(len(X)), X, 'k:', color='white')\n","    valid_idx = pivots != 0\n","    plt.plot(np.arange(len(X))[valid_idx], X[valid_idx], '-', color='white')\n","    # plt.scatter(np.arange(len(X))[pivots == 1], X[pivots == 1], color='g')\n","    # plt.scatter(np.arange(len(X))[pivots == -1], X[pivots == -1], color='r')"],"metadata":{"id":"1PwSHOShZJNm"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["X = res_df_.close.iloc[-100:].to_numpy()\n","# X = res_df_.close.to_numpy()\n","pivots = peak_valley_pivots(X, 0.0005, -0.0005)\n","pivots = peak_valley_pivots(X, 0.5, -0.5)"],"metadata":{"id":"4lZwODlFYxSL"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["plot_pivots(X, pivots)"],"metadata":{"id":"W_xx9XWXZKJ5"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["t_df = res_df_.iloc[-100:]\n","t_df['date'] = t_df.index\n","data_x = t_df['date'].values\n","data_y = t_df['close'].values\n","peak_indexes = signal.argrelextrema(data_y, np.greater)\n","peak_indexes = peak_indexes[0]\n"," \n","# Find valleys(min).\n","valley_indexes = signal.argrelextrema(data_y, np.less)\n","valley_indexes = valley_indexes[0]\n"," \n","# Instantiate axes.\n","(fig, ax) = plt.subplots()\n"," \n","# Merge peaks and valleys data points using pandas.\n","df_peaks = pd.DataFrame({'date': data_x[peak_indexes], 'zigzag_y': data_y[peak_indexes]})\n","df_valleys = pd.DataFrame({'date': data_x[valley_indexes], 'zigzag_y': data_y[valley_indexes]})\n","df_peaks_valleys = pd.concat([df_peaks, df_valleys], axis=0, ignore_index=True, sort=True)\n"," \n","# Sort peak and valley datapoints by date.\n","df_peaks_valleys = df_peaks_valleys.sort_values(by=['date'])\n"," \n","# Plot zigzag trendline.\n","ax.plot(df_peaks_valleys['date'].values, df_peaks_valleys['zigzag_y'].values, \n","                                                        color='red', label=\"zigzag\")\n"," \n","# Plot close price line.\n","ax.plot(data_x, data_y, linestyle='dashed', color='black', label=\"Close Price\", linewidth=1)\n"," "],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":282},"id":"ZAjpk42XarfY","executionInfo":{"status":"ok","timestamp":1647999471974,"user_tz":-540,"elapsed":935,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"471a5d20-9df5-4b2a-9d04-53cdb0e35c2f"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[<matplotlib.lines.Line2D at 0x7f82b6491790>]"]},"metadata":{},"execution_count":31},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","source":["#### volume_profile"],"metadata":{"id":"EOXQbXixiQcK"}},{"cell_type":"code","source":["session_df = res_df_.iloc[-1440:] # 0.159 -> 0.024 (14400 -> 1440)\n","volume = session_df['volume'].to_numpy()\n","close = session_df['close'].to_numpy()\n","# px.histogram(session_df, x='volume', y='close', nbins=150, orientation='h').show()"],"metadata":{"id":"7pFuazxpgx9B"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["kde_factor = 0.05\n","num_samples = 100\n","\n","start_0 = time.time()\n","kde = stats.gaussian_kde(close,weights=volume,bw_method=kde_factor)\n","kdx = np.linspace(close.min(),close.max(),num_samples)\n","kdy = kde(kdx)\n","ticks_per_sample = (kdx.max() - kdx.min()) / num_samples\n","print(\"ticks_per_sample :\", ticks_per_sample)  # sample 당 가격\n","print(\"kdy elapsed_time :\", time.time() - start_0)"],"metadata":{"id":"SoPJkiyKiXLM","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1647259514394,"user_tz":-540,"elapsed":332,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"2e1d515d-7caf-4f82-b53b-a17f3e1d9ab9"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["ticks_per_sample : 1.3911999999999989\n","kdy elapsed_time : 0.021226167678833008\n"]}]},{"cell_type":"code","source":["peaks,_ = signal.find_peaks(kdy)\n","pkx = kdx[peaks]\n","pky = kdy[peaks]\n","\n","plt.figure(figsize=(10,5))\n","# plt.hist(close, bins=num_samples, weights=volume, alpha=.8, color='#1592e6')\n","# plt.plot(kdx, kdy, color='white')\n","# plt.plot(pkx, pky, 'bo', color='yellow')\n","plt.plot(kdy, kdx, color='white')\n","plt.plot(pky, pkx, 'bo', color='yellow')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":320},"id":"mK2jBddAxJ14","executionInfo":{"status":"ok","timestamp":1647263622450,"user_tz":-540,"elapsed":362,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"74d7a810-1375-4db5-f74e-3cf58e0a0662"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 720x360 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["pkx"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"a8tpQZCy0SO1","executionInfo":{"status":"ok","timestamp":1647260132868,"user_tz":-540,"elapsed":326,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"24ee984e-db8d-4083-97a7-4d3ebb536d38"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([3059.93252525, 3068.3640404 , 3082.41656566, 3093.65858586, 3104.90060606, 3120.35838384, 3130.19515152, 3140.03191919, 3158.30020202, 3168.1369697 , 3176.56848485])"]},"metadata":{},"execution_count":8}]},{"cell_type":"code","source":["# ------ vp 의 indi. 화가 필요함 -> point 설정 ------ #\n","# 1. 4 level 은 미리 만들어놓는게 맞는걸로 보임 -> 추종하는 function 이 많음 (utils_tr, ep_out ...)\n","#   a. 4 level 에 국한하는게 아니라, 모든 peaks 에 대해 levels 설정\n","#   b. 각 session 별로 peak_list 가 주어질 것\n","#     i. prev_data 사용해야하는점 주의 (session vp 는 future_data)"],"metadata":{"id":"gfA946s8UgS0"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["#### legacy"],"metadata":{"id":"1MNVIExLULhJ"}},{"cell_type":"code","source":["from math import floor\n","\n","\n","def _calc_dev(base_price, price):\n","    return 100 * (price - base_price) / base_price\n","\n","\n","def zigzag(highs, lows, depth=10, dev_threshold=5):\n","    def pivots(src_raw, length, isHigh):\n","        src = list(reversed(src_raw))\n","        bar_index = list(range(len(src)))\n","        for start in range(0, len(src)):\n","            if start + 2 * length + 1 > len(src) - 1:\n","                return\n","            p = 0\n","            if length < len(src) - start:\n","                p = src[start + length]\n","            if length == 0:\n","                yield 0, p\n","            else:\n","                isFound = True\n","                for i in range(start, start + length):\n","                    if isHigh and src[i] > p:\n","                        isFound = False\n","                    if not isHigh and src[i] < p:\n","                        isFound = False\n","                for i in range(start + length + 1, start + 2 * length + 1):\n","                    if isHigh and src[i] >= p:\n","                        isFound = False\n","                    c = not isHigh and src[i] <= p\n","                    if c:\n","                        isFound = False\n","                if isFound:\n","                    yield (bar_index[start + length], p)\n","                else:\n","                    yield None, None\n","\n","    data_highs = [x for x in pivots(highs, floor(depth / 2), True) if x[0]]\n","    data_lows = [x for x in pivots(lows, floor(depth / 2), False) if x[0]]\n","\n","    raw_pairs = []\n","\n","    for i, (ind, p) in enumerate(data_highs):\n","        lows_d = sorted([(ind_l, p_l) for ind_l, p_l in data_lows if ind > ind_l], key=lambda x: x[0])\n","        if lows_d:\n","            lows = lows_d[-1]\n","\n","            if abs(_calc_dev(lows[1], p)) >= dev_threshold:\n","                raw_pairs.append(\n","                    ((ind, p),\n","                     (lows[0], lows[1]))\n","                )\n","\n","    result = []\n","\n","    for (i_h, p_h),(i_l, p_l) in raw_pairs:\n","        if not result:\n","            result.append(((i_h, p_h),(i_l, p_l)))\n","            continue\n","\n","        if i_l == result[-1][1][0]:\n","            if p_h > result[-1][0][1]:\n","                result = result[:-1]\n","            else:\n","                continue\n","\n","        result.append(((i_h, p_h),(i_l, p_l)))\n","\n","    return result\n","\n","# highs, lows = t_df.high.to_numpy(), t_df.low.to_numpy()\n","# zigzag(highs, lows, depth=5, dev_threshold=5)"],"metadata":{"id":"q1nEA19v7Qpj"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["t_df = res_df_.iloc[-120:]\n","a_data = t_df.to_numpy()"],"metadata":{"id":"fGlmdyb97j4Q"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# import plotly.express as px\n","# import plotly.graph_objects as go\n","\n","def get_dist_plot(c, v, kx, ky):\n","    fig = go.Figure()\n","    fig.add_trace(go.Histogram(name='Vol Profile', x=c, y=v, nbinsx=150, \n","                               histfunc='sum', histnorm='probability density',\n","                               marker_color='#B0C4DE'))\n","    fig.add_trace(go.Scatter(name='KDE', x=kx, y=ky, mode='lines', marker_color='#D2691E'))    \n","\n","    peaks,_ = signal.find_peaks(kdy)\n","    pkx = kdx[peaks]\n","    pky = kdy[peaks]\n","    pk_marker_args=dict(size=10, color='black')\n","    fig.add_trace(go.Scatter(name=\"Peaks\", x=pkx, y=pky, mode='markers', marker=pk_marker_args))\n","    fig.show()\n","\n","    return fig"],"metadata":{"id":"ropzIp0wUPAA"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["##### prominence_info"],"metadata":{"id":"3T-9FwWFXR4f"}},{"cell_type":"code","source":["start_0 = time.time()\n","min_prom = kdy.max() * 0.0\n","pipsize = 0.01\n","max_width_pips = 20\n","# width_range=(1, max_width_pips * pipsize / ticks_per_sample)\n","width_range= max_width_pips * pipsize / ticks_per_sample\n","peaks, peak_props = signal.find_peaks(kdy, prominence=min_prom, width=width_range)\n","\n","peak_x = kdx[peaks]\n","peak_y = kdy[peaks]\n","# ------ prominence lines ------ #\n","left_base = peak_props['left_bases']\n","right_base = peak_props['right_bases']\n","line_x = peak_x\n","line_y0 = peak_y\n","line_y1 = peak_y # - peak_props['prominences']\n","print(\"prom_line elapsed_time :\", time.time() - start_0)\n","\n","\n","for x, y0, y1 in zip(line_x, line_y0, line_y1):\n","    fig.add_shape(type='line',\n","        xref='x', yref='y',\n","        # x0=x, y0=y0, x1=x, y1=y1,\n","        x0=x, y0=0, x1=x, y1=y1,\n","        line=dict(\n","            color='red',\n","            width=2,\n","        )\n","    )\n","\n","# ------ width ------ #\n","left_ips = peak_props['left_ips']\n","right_ips = peak_props['right_ips']\n","# width_x0 = kdx.min() + (left_ips * ticks_per_sample)\n","# width_x1 = kdx.min() + (right_ips * ticks_per_sample)\n","width_x0 = kdx.min() + (left_base * ticks_per_sample)\n","width_x1 = kdx.min() + (right_base * ticks_per_sample)\n","\n","# int_from = kdx.min() + (left_base * ticks_per_sample)\n","# int_to = kdx.min() + (right_base * ticks_per_sample)\n","# [kde.integrate_box_1d(x0, x1) for x0, x1 in zip(int_from, int_to)]\n","\n","width_y = peak_props['width_heights']\n","\n","for x0, x1, y in zip(width_x0, width_x1, width_y):\n","    fig.add_shape(type='line',\n","        xref='x', yref='y',\n","        x0=x0, y0=y, x1=x1, y1=y,\n","        line=dict(\n","            color='red',\n","            width=2,\n","        )\n","    )\n","fig.show()"],"metadata":{"id":"RmBt2agljClE","colab":{"base_uri":"https://localhost:8080/","height":558},"executionInfo":{"status":"ok","timestamp":1647183981567,"user_tz":-540,"elapsed":781,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"c61b0e13-ab0a-4e56-8a44-8bc480ec31cc"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["prom_line elapsed_time : 0.0005087852478027344\n"]},{"output_type":"display_data","data":{"text/html":["<html>\n","<head><meta charset=\"utf-8\" /></head>\n","<body>\n","    <div>            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"></script><script type=\"text/javascript\">if (window.MathJax) {MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script>                <script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>\n","        <script src=\"https://cdn.plot.ly/plotly-2.8.3.min.js\"></script>                <div id=\"f0efc821-18d5-43b5-ad6e-1133ea0ad873\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"f0efc821-18d5-43b5-ad6e-1133ea0ad873\")) {                    Plotly.newPlot(                        \"f0efc821-18d5-43b5-ad6e-1133ea0ad873\",                        [{\"histfunc\":\"sum\",\"histnorm\":\"probability density\",\"marker\":{\"color\":\"#B0C4DE\"},\"name\":\"Vol Profile\",\"nbinsx\":150,\"x\":[3150.12,3150.91,3150.04,3152.76,3150.22,3148.21,3148.25,3148.3,3142.41,3145.56,3144.02,3145.11,3146.27,3142.97,3140.6,3142.02,3142.8,3141.34,3138.28,3138.09,3137.04,3135.5,3133.32,3134.84,3136.27,3137.1,3137.05,3139.74,3138.4,3138.17,3139.49,3141.68,3142.52,3143.14,3143.12,3142.4,3144.17,3142.7,3140.72,3138.89,3142.1,3140.96,3139.76,3138.51,3140.37,3139.0,3138.84,3138.57,3140.62,3143.09,3141.71,3140.05,3139.85,3139.12,3139.9,3139.24,3139.49,3138.88,3138.14,3136.66,3137.03,3138.04,3140.84,3138.27,3137.31,3139.03,3141.06,3141.5,3139.41,3137.62,3141.5,3142.8,3142.24,3143.42,3142.55,3143.9,3146.54,3146.38,3142.34,3144.01,3145.79,3147.35,3146.06,3146.75,3147.37,3153.62,3152.82,3154.53,3153.41,3154.3,3153.01,3156.01,3157.57,3157.36,3160.43,3159.0,3163.78,3164.2,3163.97,3168.45,3170.03,3169.46,3173.73,3169.48,3168.54,3167.57,3166.99,3164.73,3164.25,3166.33,3162.57,3156.97,3159.44,3159.19,3158.11,3156.97,3158.08,3158.32,3158.99,3157.01,3154.91,3147.89,3146.35,3142.36,3142.62,3138.81,3144.68,3143.32,3140.89,3140.16,3139.74,3140.33,3143.48,3145.12,3145.42,3147.13,3143.31,3144.88,3145.12,3143.89,3144.75,3143.91,3140.69,3141.35,3141.59,3141.62,3141.51,3141.96,3142.09,3140.61,3137.55,3138.18,3140.28,3139.39,3139.2,3139.85,3137.92,3138.08,3136.42,3134.93,3135.14,3133.15,3135.12,3133.37,3134.51,3131.06,3128.0,3126.97,3116.7,3122.46,3122.06,3118.8,3115.48,3119.5,3120.88,3110.75,3109.43,3107.1,3111.54,3107.5,3108.74,3111.3,3113.32,3115.38,3118.54,3115.27,3118.6,3120.1,3119.4,3119.35,3123.69,3123.54,3121.8,3121.82,3119.9,3122.01,3122.29,3119.64,3119.91,3118.67,3118.66,3119.45,3120.43,3122.38,3120.43,3121.94,3123.03,3123.6,3121.88,3123.81,3123.85,3121.51,3121.8,3122.29,3123.76,3127.99,3131.35,3131.12,3131.07,3132.76,3131.57,3131.8,3130.61,3134.68,3134.39,3132.91,3130.4,3129.86,3129.9,3129.38,3128.39,3125.57,3124.03,3123.68,3125.42,3125.98,3128.4,3130.98,3128.95,3129.26,3132.05,3131.17,3128.56,3126.45,3127.34,3128.33,3126.96,3128.84,3128.45,3128.34,3128.84,3126.09,3125.6,3125.95,3124.5,3122.44,3122.97,3128.29,3126.43,3127.98,3131.71,3132.68,3130.7,3129.63,3130.04,3129.68,3129.74,3129.36,3129.78,3128.6,3128.87,3130.34,3129.71,3127.47,3129.81,3129.16,3128.41,3126.57,3125.42,3128.63,3129.77,3130.9,3131.42,3129.66,3132.1,3130.24,3133.36,3138.65,3141.3,3144.9,3140.63,3141.08,3139.72,3142.67,3141.99,3140.43,3139.04,3134.85,3133.34,3133.14,3136.4,3138.89,3139.59,3143.64,3140.9,3140.38,3141.76,3140.14,3140.58,3137.29,3138.28,3138.27,3137.57,3139.11,3138.77,3138.93,3139.13,3139.57,3139.76,3141.02,3138.46,3138.77,3139.38,3135.77,3135.49,3136.19,3134.07,3135.5,3134.59,3134.37,3137.84,3139.81,3140.38,3143.15,3142.58,3143.12,3139.01,3137.68,3137.86,3137.6,3136.3,3136.34,3134.66,3136.0,3135.49,3133.83,3132.57,3127.5,3127.82,3130.61,3132.01,3126.05,3128.08,3127.75,3127.18,3128.5,3128.32,3129.79,3128.02,3129.28,3127.92,3129.56,3130.85,3131.61,3133.9,3133.36,3135.98,3136.89,3136.05,3138.23,3137.59,3139.65,3141.26,3140.09,3139.73,3139.13,3140.0,3138.28,3139.07,3140.15,3140.64,3141.14,3140.89,3141.56,3144.82,3146.11,3146.92,3147.37,3148.01,3148.11,3153.52,3153.63,3152.2,3145.75,3149.2,3150.38,3152.32,3148.33,3149.53,3151.03,3149.0,3148.97,3148.26,3148.09,3149.48,3150.14,3153.62,3154.73,3153.73,3154.58,3156.77,3157.02,3157.56,3159.21,3157.99,3157.28,3158.24,3157.75,3153.62,3156.32,3155.98,3156.09,3153.36,3154.85,3153.7,3153.26,3153.92,3152.18,3154.72,3153.76,3151.32,3147.99,3143.63,3142.84,3142.01,3142.34,3141.19,3144.4,3143.24,3146.07,3146.42,3142.71,3145.16,3144.34,3142.69,3139.69,3137.0,3139.75,3138.36,3137.76,3138.86,3141.21,3141.38,3147.22,3146.36,3145.32,3145.22,3143.33,3142.05,3138.36,3136.89,3138.59,3137.22,3138.73,3140.14,3140.55,3143.65,3142.01,3142.94,3141.82,3142.27,3142.38,3141.33,3139.54,3140.53,3141.91,3143.98,3145.27,3145.56,3145.8,3146.38,3146.33,3146.59,3148.72,3149.48,3149.99,3149.19,3147.89,3145.9,3144.89,3143.99,3144.38,3141.47,3141.26,3134.83,3136.75,3135.49,3137.49,3136.01,3138.03,3137.49,3135.5,3133.94,3131.24,3128.72,3131.32,3129.42,3129.77,3126.83,3127.0,3124.12,3125.0,3127.18,3130.0,3129.72,3129.07,3129.68,3129.97,3129.39,3130.92,3132.75,3132.92,3129.99,3133.15,3130.69,3132.15,3134.37,3132.81,3131.7,3130.61,3128.61,3128.99,3124.84,3116.56,3116.76,3116.92,3118.9,3119.05,3118.74,3118.24,3121.88,3121.41,3120.63,3119.45,3119.16,3117.66,3125.21,3122.01,3122.3,3122.27,3123.6,3123.71,3124.0,3126.14,3128.01,3125.94,3126.44,3128.0,3128.04,3128.5,3131.12,3129.44,3129.36,3130.58,3130.58,3130.74,3129.8,3130.8,3130.21,3130.0,3132.5,3132.77,3130.01,3138.72,3139.25,3138.11,3136.77,3136.71,3134.59,3135.98,3133.81,3131.4,3131.16,3133.29,3130.61,3132.0,3132.44,3133.58,3134.18,3133.44,3133.33,3135.37,3134.42,3132.16,3132.2,3130.93,3131.07,3128.89,3127.34,3129.46,3129.77,3130.33,3131.76,3132.28,3130.06,3132.43,3132.6,3134.33,3138.55,3138.49,3137.34,3135.68,3135.12,3133.0,3133.35,3135.1,3135.72,3135.45,3135.74,3134.31,3135.54,3135.0,3134.0,3135.5,3135.47,3138.57,3137.43,3137.26,3137.68,3134.65,3133.04,3134.23,3134.77,3137.77,3138.53,3137.99,3140.51,3141.66,3137.9,3130.11,3125.74,3126.7,3127.43,3126.03,3120.96,3121.81,3124.17,3124.31,3124.54,3125.11,3125.71,3126.3,3128.36,3129.59,3129.72,3130.19,3131.21,3130.5,3130.07,3129.81,3131.5,3134.35,3133.15,3135.09,3136.18,3132.93,3122.75,3122.1,3122.03,3121.84,3121.06,3118.65,3120.18,3119.31,3112.84,3117.62,3114.39,3114.41,3116.04,3117.45,3119.3,3120.57,3120.72,3121.07,3116.17,3110.8,3111.87,3110.61,3115.47,3117.35,3117.49,3117.32,3114.9,3112.16,3112.35,3108.01,3111.41,3109.76,3113.55,3118.27,3120.49,3119.38,3121.0,3119.82,3119.61,3118.49,3116.15,3116.56,3117.76,3115.36,3117.85,3117.1,3118.16,3118.6,3117.1,3114.79,3114.07,3116.16,3113.75,3112.4,3104.99,3118.68,3114.45,3103.37,3094.09,3103.67,3101.78,3098.48,3101.08,3101.52,3096.14,3095.06,3094.52,3093.74,3089.7,3094.76,3094.28,3082.9,3075.29,3071.6,3066.96,3068.99,3068.43,3072.83,3074.19,3068.47,3066.49,3068.45,3071.08,3072.8,3068.44,3067.71,3073.29,3073.62,3075.79,3074.76,3079.0,3077.27,3072.94,3073.42,3070.62,3070.97,3075.98,3073.64,3070.63,3073.96,3074.48,3076.25,3074.55,3072.14,3068.01,3068.44,3057.23,3061.75,3060.41,3060.23,3055.43,3062.96,3064.42,3063.7,3057.99,3057.97,3065.99,3069.05,3073.19,3068.84,3067.58,3067.45,3064.78,3066.87,3067.5,3068.74,3067.5,3070.61,3059.89,3062.56,3066.56,3065.24,3061.41,3060.9,3053.06,3061.95,3059.49,3056.27,3059.09,3059.6,3056.32,3057.96,3058.97,3061.6,3066.01,3068.68,3068.43,3070.66,3072.53,3070.4,3073.28,3072.86,3070.68,3067.65,3066.0,3066.25,3070.21,3071.52,3068.61,3064.15,3064.26,3063.48,3062.8,3060.3,3059.85,3060.47,3064.84,3065.03,3066.71,3066.55,3066.41,3065.24,3067.81,3066.93,3065.0,3067.85,3060.14,3062.51,3061.39,3064.93,3064.94,3066.09,3066.49,3067.75,3070.38,3067.84,3067.51,3072.07,3071.31,3070.05,3068.95,3068.57,3067.73,3068.88,3067.87,3067.89,3065.01,3066.0,3069.24,3065.3,3063.52,3063.06,3064.11,3064.99,3063.19,3062.69,3066.9,3066.87,3065.42,3058.47,3058.2,3068.7,3065.56,3065.52,3059.04,3060.61,3059.57,3058.08,3055.2,3053.72,3060.26,3055.86,3045.88,3046.6,3051.18,3052.99,3057.9,3056.38,3059.4,3061.48,3061.15,3064.36,3065.77,3066.35,3066.8,3067.68,3068.0,3065.05,3063.01,3066.42,3066.16,3064.8,3067.89,3066.3,3068.58,3064.81,3065.74,3064.23,3065.42,3070.43,3069.65,3070.48,3070.57,3073.44,3078.3,3082.89,3079.01,3080.76,3079.67,3082.0,3081.56,3082.01,3081.24,3078.61,3080.11,3080.95,3080.03,3080.65,3079.97,3078.86,3078.5,3078.6,3077.34,3077.0,3076.39,3076.45,3077.45,3076.23,3072.22,3073.67,3079.31,3077.21,3075.68,3076.91,3078.2,3075.92,3077.67,3076.33,3075.14,3076.47,3077.04,3080.69,3079.8,3080.33,3075.65,3074.66,3073.05,3070.38,3067.96,3068.78,3067.92,3069.26,3069.37,3070.76,3068.12,3069.49,3069.98,3071.78,3070.88,3068.71,3067.04,3069.34,3070.99,3070.39,3069.63,3068.6,3068.89,3070.08,3069.26,3069.57,3069.72,3069.53,3067.99,3069.23,3070.93,3071.33,3068.33,3066.84,3066.23,3066.76,3068.17,3070.0,3072.0,3075.66,3073.9,3073.99,3074.66,3074.0,3076.62,3077.82,3076.01,3076.18,3075.52,3075.42,3075.01,3075.67,3079.55,3078.46,3082.28,3080.74,3081.27,3083.38,3084.49,3086.42,3084.9,3086.53,3085.27,3084.7,3084.08,3084.82,3086.99,3092.0,3089.49,3089.26,3084.07,3084.44,3084.8,3083.55,3082.59,3082.36,3084.65,3086.97,3085.67,3085.43,3088.82,3089.81,3091.81,3093.96,3092.59,3093.58,3093.74,3092.61,3091.64,3091.26,3113.47,3104.88,3092.36,3101.44,3107.88,3113.58,3119.86,3128.34,3133.07,3128.34,3123.1,3129.07,3122.38,3127.43,3126.59,3132.79,3137.33,3143.07,3145.41,3147.86,3148.82,3157.67,3157.57,3160.7,3160.01,3163.6,3172.63,3171.77,3174.38,3176.44,3178.06,3179.99,3185.0,3176.75,3171.53,3179.12,3176.52,3168.9,3168.72,3170.03,3168.15,3165.58,3166.83,3167.56,3161.34,3162.78,3167.67,3162.8,3157.67,3155.79,3157.92,3161.37,3163.06,3165.11,3163.45,3164.45,3166.86,3166.61,3165.0,3167.59,3167.45,3164.59,3167.05,3172.29,3176.49,3170.87,3166.5,3165.51,3165.58,3164.96,3165.19,3161.59,3165.09,3162.72,3163.97,3162.62,3165.19,3165.77,3163.55,3173.99,3171.18,3170.87,3168.34,3169.49,3167.69,3169.72,3166.89,3168.42,3166.68,3168.84,3165.83,3162.55,3159.17,3160.93,3162.0,3160.83,3158.69,3159.99,3159.9,3159.88,3160.02,3158.98,3160.0,3158.01,3159.2,3158.6,3158.71,3156.25,3157.2,3156.77,3156.91,3156.6,3156.55,3153.94,3152.29,3151.49,3151.41,3146.89,3148.18,3147.2,3147.17,3147.89,3149.31,3151.59,3156.4,3153.84,3155.3,3155.23,3156.03,3156.24,3155.61,3158.4,3155.05,3155.38,3152.34,3152.18,3153.34,3152.91,3153.99,3151.52,3149.21,3152.48,3151.63,3150.9,3149.75,3148.0,3148.25,3149.4,3149.7,3148.41,3147.65,3146.06,3147.06,3147.41,3146.72,3145.51,3142.17,3142.8,3140.42,3139.24,3140.69,3140.67,3139.22,3136.44,3139.14,3137.55,3133.96,3131.83,3130.8,3130.95,3129.59,3127.0,3129.85,3133.0,3132.21,3132.15,3130.41,3132.9,3134.57,3139.85,3133.04,3138.13,3135.79,3136.96,3133.26,3129.64,3128.02,3127.75,3130.0,3132.21,3133.06,3132.06,3131.88,3132.99,3134.0,3135.79,3137.68,3136.0,3137.89,3133.88,3133.81,3133.84,3133.71,3138.28,3143.06,3144.0,3143.17,3143.02,3145.34,3144.83,3144.81,3144.61,3146.0,3147.91,3146.69,3145.03,3142.46,3142.5,3141.1,3140.17,3140.11,3141.4,3143.92,3144.66,3146.71,3148.95,3146.13,3135.82,3136.96,3139.34,3134.9,3134.48,3136.76,3137.37,3136.92,3136.99,3133.71,3134.44,3132.38,3135.25,3137.14,3135.07,3136.15,3136.15,3139.87,3138.92,3138.5,3141.6,3144.19,3145.44,3147.36,3147.51,3142.12,3143.94,3142.43,3142.02,3142.21,3144.66,3146.53,3144.3,3145.73,3145.94,3146.56,3145.42,3146.05,3150.58,3154.16,3151.01,3149.76,3150.51,3149.31,3146.43,3146.66,3147.47,3145.75,3146.7,3147.1,3143.28,3146.19,3145.38,3145.25,3140.13,3143.45,3140.18,3138.3,3139.7,3136.88,3132.99,3134.7,3135.09,3135.74,3129.89,3126.61,3123.87,3125.14,3119.64,3123.09,3123.35,3120.16,3121.8,3125.0,3132.0,3126.44,3124.57,3120.75,3125.9,3128.05,3127.12,3124.8,3126.19,3128.65,3130.03,3125.31,3125.8,3126.11,3123.22,3125.03,3126.05,3126.24,3129.98,3130.55,3130.97,3129.1,3129.66,3130.27,3130.36,3131.12,3136.13,3137.65,3133.69,3137.18,3137.25,3138.83,3138.58,3141.52,3139.41,3139.05,3137.7,3139.46,3139.8,3140.98,3139.78,3139.17,3140.0,3141.49,3138.86,3139.52,3140.5,3142.58,3142.34,3142.47,3142.91,3142.89,3144.0,3147.55,3148.71,3151.21,3150.66,3148.5,3148.96,3148.5,3150.32,3152.45,3150.83,3150.29,3151.2,3153.01,3152.48,3149.23,3147.45,3146.68,3157.71,3153.34,3147.37,3143.99,3141.45,3142.66,3146.98,3146.61,3148.46,3149.5,3149.29,3148.18,3145.05,3146.86,3145.76,3148.84,3149.31,3146.86,3146.76],\"y\":[1814.895,1182.023,1511.21,821.059,669.95,594.607,397.261,475.226,1430.563,1351.268,848.732,961.415,677.695,2241.498,771.686,3400.92,457.283,815.311,843.761,1456.898,1147.73,2592.488,939.438,695.06,664.589,839.272,344.224,524.897,1029.553,1257.254,764.586,1618.563,599.314,385.634,340.075,245.402,273.54,932.316,297.465,800.419,470.172,358.191,198.746,398.956,521.275,398.68,250.799,376.615,178.701,1034.812,349.27,365.934,193.939,199.584,148.806,343.965,258.079,238.408,273.382,508.892,455.586,1497.43,603.768,705.325,471.812,358.129,1222.79,447.666,603.433,350.189,684.554,404.765,918.631,713.382,803.374,220.673,1013.652,1757.238,887.223,420.149,422.235,642.444,379.785,126.201,499.773,2342.571,1945.816,1288.743,676.794,392.273,424.757,1084.062,1139.501,790.354,2007.705,1446.953,1842.648,777.958,945.39,2579.427,2955.737,1590.911,1476.864,2861.345,772.493,876.768,1835.01,875.833,585.31,765.122,767.852,1825.83,1060.932,682.04,688.755,737.484,429.945,293.821,300.116,1045.831,712.192,2711.994,2052.2,3340.02,897.035,2391.303,2186.713,1517.988,344.748,771.478,720.502,656.313,530.014,1327.673,508.321,904.994,1152.633,523.227,293.715,229.893,202.519,252.467,601.482,317.28,345.035,575.193,374.831,194.465,270.588,367.969,1280.729,1909.713,774.939,518.596,294.403,337.627,382.69,353.682,534.457,1713.387,360.944,713.113,1393.388,1289.595,610.727,739.131,1619.367,2194.335,8164.046,2879.21,2159.701,2512.548,3579.377,1841.206,2810.677,3893.288,1849.815,5497.891,2407.824,1844.752,1304.788,945.57,2745.772,2050.842,2354.528,1577.291,903.569,1269.654,2703.684,766.884,1965.466,1320.285,1111.835,521.223,822.176,942.413,497.538,499.364,222.856,316.366,355.702,243.842,362.266,593.914,349.424,308.565,540.138,769.079,463.481,163.895,237.299,285.424,466.1,224.654,493.52,1674.225,4063.392,1370.598,472.447,957.289,609.428,338.42,243.509,745.35,1417.319,762.417,553.865,616.945,305.569,511.777,416.061,2007.687,312.874,1760.715,470.299,170.102,514.177,647.315,425.481,274.85,415.924,896.493,396.062,588.357,231.181,273.932,245.847,212.412,116.329,109.858,274.394,323.434,335.066,347.193,459.166,944.41,601.327,889.712,412.644,317.84,986.261,934.932,572.116,181.168,460.876,145.156,108.878,210.202,77.92,295.25,300.008,412.518,463.649,312.424,342.369,602.553,325.602,288.656,458.643,344.168,189.501,378.501,506.806,405.58,266.931,508.179,577.092,1968.061,3128.798,2617.171,810.468,1071.792,482.71,702.007,298.08,1139.23,623.801,1162.914,1203.468,673.113,606.991,499.32,344.082,916.323,1133.798,236.462,323.745,227.404,305.618,859.751,541.196,262.919,221.3,135.795,94.984,185.741,146.342,216.582,150.862,227.198,373.705,332.486,216.229,778.895,1204.286,326.503,380.38,1047.579,257.681,288.363,944.527,1025.858,1888.092,606.18,219.281,573.418,618.131,579.352,643.473,227.201,596.85,266.111,593.418,412.236,518.62,714.492,807.998,1833.123,1485.911,696.152,1044.399,1178.696,682.768,339.908,614.242,333.987,289.083,426.036,434.767,363.008,294.274,249.675,759.092,233.645,259.457,692.772,530.582,751.244,252.918,324.292,565.306,530.138,634.433,621.443,362.445,1462.934,578.493,404.427,432.71,381.631,206.741,803.279,286.361,454.727,989.949,1000.012,534.381,1225.959,2611.002,1238.904,1808.266,2668.663,1734.437,1991.659,1533.497,673.975,1417.797,1002.213,689.714,474.831,775.993,612.321,674.988,586.885,486.539,6750.373,1240.763,1031.138,1064.433,810.097,2543.442,1714.432,1408.587,2076.241,891.454,802.952,990.123,356.49,909.726,969.575,1157.716,408.802,557.485,790.536,760.441,903.066,478.393,406.574,460.658,270.44,397.786,2943.217,4367.234,1259.451,1068.328,966.188,1414.714,579.827,511.738,412.874,654.607,675.654,504.93,356.198,858.616,1158.323,1447.125,787.173,728.954,636.948,628.265,669.612,465.412,1222.997,749.451,462.962,472.928,432.435,342.099,1618.728,2358.947,952.987,460.716,651.763,975.681,444.398,645.867,449.599,193.003,278.721,545.444,842.045,277.826,994.515,588.675,591.108,309.423,892.268,276.425,502.627,968.723,404.031,211.579,444.69,715.557,984.707,1097.859,551.379,692.514,900.106,360.002,948.053,805.637,489.368,1676.558,1304.157,367.592,283.184,1023.029,456.415,763.262,343.508,461.29,879.775,1776.793,1251.296,591.245,573.997,1673.844,1283.242,2767.718,1120.511,657.294,746.819,905.747,599.259,715.33,481.675,327.764,388.74,1256.088,1555.066,601.571,277.709,213.939,322.601,214.083,472.872,296.863,364.37,746.543,378.365,967.733,5140.211,4083.258,1994.542,1976.259,888.817,461.462,437.566,1416.611,716.221,1318.431,481.782,2014.435,936.676,1459.321,855.198,732.281,466.019,450.272,560.57,469.751,622.444,518.498,933.561,1274.182,362.645,417.461,200.685,1204.422,1085.208,437.325,388.368,522.196,414.681,402.1,458.488,176.931,774.455,662.126,617.206,452.137,4865.578,3871.135,1343.329,634.081,483.47,1681.018,514.598,502.913,1322.138,529.723,572.34,348.409,713.894,228.335,215.652,253.718,284.838,694.79,180.093,810.769,563.133,209.468,355.301,1084.715,204.09,893.371,557.044,320.725,236.971,360.995,404.746,202.665,416.594,295.445,369.598,1691.926,445.675,502.376,451.028,754.112,460.168,253.657,293.696,364.866,139.172,187.996,297.765,167.774,288.681,128.716,179.501,428.036,213.013,396.147,290.492,459.26,333.25,604.208,535.843,218.827,379.209,623.314,309.742,1047.188,2658.829,741.273,2765.267,2446.593,900.038,1232.736,817.002,2687.132,3309.465,1746.003,699.151,574.566,262.053,505.975,270.49,1023.427,533.5,488.001,536.457,432.03,945.469,1080.591,611.695,611.907,1095.621,485.481,688.799,375.255,1322.925,2347.935,1281.055,1713.871,563.816,371.289,1137.167,1011.662,433.968,4755.422,2060.545,1118.297,1058.42,991.226,512.798,725.336,476.284,633.408,903.175,644.941,2829.545,1218.33,1149.1,755.961,1252.379,2399.314,350.433,457.851,727.54,748.377,2585.751,4337.831,2453.675,1355.272,2073.169,1425.068,1751.715,901.639,353.899,368.582,636.142,1082.148,271.744,399.517,439.441,377.24,330.026,233.732,285.884,308.136,639.158,734.67,567.183,310.671,995.761,12392.217,5461.011,2988.344,5529.668,2618.77,11929.186,2928.894,5355.073,1533.817,2310.282,2210.125,1805.742,2500.52,3272.782,1332.249,2270.554,2483.668,8790.039,13105.425,16039.554,8317.661,6814.545,3909.444,2716.544,2823.368,2433.446,3042.327,4014.336,2680.476,2166.982,8299.153,2107.079,2585.491,3224.808,2437.339,2865.693,1574.387,2219.401,2214.305,2410.523,1263.301,1232.671,1213.058,1789.33,827.919,1530.653,1732.94,1439.558,1552.842,1345.879,1394.187,3147.626,6162.965,7032.083,1330.471,2505.725,7118.551,2288.653,1286.682,1102.423,3249.307,1670.88,2218.379,2946.052,2525.484,1719.79,1630.798,1474.484,1299.503,434.158,1462.856,1914.008,1336.711,872.552,2661.102,1921.851,1223.061,892.979,1675.459,2747.98,3398.563,4782.692,3130.671,914.08,3275.661,3677.987,1920.096,1582.481,626.202,1699.704,3016.389,2348.542,3936.201,1440.961,2551.41,2929.114,3910.54,1731.929,1423.134,1630.803,823.665,1596.309,1843.181,1446.542,850.694,2297.843,856.543,883.961,501.157,1621.147,856.971,707.791,1351.166,795.198,938.608,485.179,455.671,1061.071,580.457,263.109,715.892,1587.285,993.923,1251.255,2659.143,996.502,853.854,744.677,711.983,3232.026,3662.831,807.0,555.69,1043.709,1292.106,987.334,375.225,316.734,438.411,289.699,537.944,942.885,797.012,1077.267,379.583,611.293,521.083,934.505,1175.247,499.493,1141.633,563.435,872.319,811.753,773.096,1412.344,3620.225,4714.694,669.244,1065.55,1598.224,847.615,1923.708,1020.52,1883.069,3076.446,2134.064,1453.728,11270.233,2936.896,6307.007,2166.477,1551.387,1853.874,1372.167,2298.452,1069.092,896.017,1027.708,1205.234,1794.761,2595.809,890.418,848.032,650.893,1088.28,200.664,502.739,575.785,921.978,808.706,3029.201,602.68,309.435,495.715,959.404,569.062,492.893,686.058,1227.456,2415.351,6515.3,1556.79,953.548,1004.564,1320.414,4557.466,1098.609,911.352,1232.801,1241.033,1343.423,769.908,447.129,647.478,822.26,767.131,569.507,437.851,1190.093,378.865,290.814,440.004,366.664,1587.445,389.51,1948.052,1274.222,418.255,155.696,281.607,310.623,166.909,303.48,700.347,271.28,110.636,520.183,820.569,810.861,1088.369,858.322,1295.596,2094.312,1503.768,1037.796,500.033,559.479,227.634,704.975,702.474,560.973,1364.022,508.316,349.588,640.477,527.515,1470.646,248.411,315.355,194.49,727.557,208.254,329.772,769.204,559.27,220.603,179.101,514.706,337.329,450.668,1473.433,2256.979,539.366,738.786,421.76,808.357,281.104,544.472,1304.849,1022.835,193.211,205.636,773.849,215.729,546.43,625.921,225.712,512.885,292.199,264.804,592.964,1204.967,418.402,742.071,437.497,433.652,1078.844,331.74,1040.031,872.767,1004.157,722.758,430.616,408.399,245.932,484.168,3624.12,976.418,394.652,1682.369,625.343,239.747,380.251,1597.606,848.428,708.537,664.832,371.165,750.007,1026.259,843.009,1023.456,1917.749,952.579,870.347,502.286,1363.581,780.743,1448.612,12431.885,6893.299,8886.959,3907.062,9540.759,4740.252,5895.644,16625.626,6312.555,3615.152,3860.571,2514.261,2760.668,1523.597,1871.628,2528.961,7365.0,8920.169,5768.383,6710.649,3346.652,4463.499,3666.88,6450.55,4832.119,5510.211,8186.365,3537.525,8281.314,10045.157,6383.577,5079.938,3813.839,3660.97,5728.121,7917.184,2421.103,5177.868,3136.173,2217.563,3832.957,1720.129,1543.371,1636.799,8034.61,4788.474,3850.793,1514.508,5392.819,1927.194,1163.751,1585.945,1209.542,1998.829,877.24,823.488,781.809,826.931,913.803,742.025,3002.547,1367.89,1044.189,1100.946,2047.804,2818.993,1017.674,1889.338,1032.258,579.044,748.169,927.378,1345.4,516.194,810.503,845.27,650.086,556.495,716.068,3167.786,1365.503,1120.129,1632.121,494.557,495.811,356.546,271.948,320.235,366.049,349.466,550.775,843.882,2000.798,961.087,470.513,438.616,819.214,594.347,286.774,251.089,602.025,267.413,278.638,425.458,282.646,1696.154,921.061,374.925,625.157,346.19,1447.882,338.668,501.822,996.179,1126.58,967.442,927.906,4074.406,898.707,1271.993,720.906,758.176,506.787,1384.601,2630.754,1180.051,296.364,385.161,594.547,303.281,206.3,1509.706,417.533,430.407,350.638,614.913,217.67,109.158,296.924,307.087,827.106,850.038,562.773,402.213,853.225,619.708,185.33,229.867,207.248,255.341,347.69,914.271,348.17,280.522,461.744,242.677,1689.641,1235.344,943.835,1181.751,733.24,268.104,381.13,818.733,1090.052,548.373,754.94,989.387,773.47,1064.937,1070.959,703.035,2594.209,1302.569,682.392,552.382,309.738,466.737,793.098,2376.261,856.232,754.519,404.143,168.334,1477.862,943.652,711.273,1748.362,1006.485,789.572,594.946,279.75,178.433,290.649,215.983,493.113,338.384,762.448,611.586,1334.322,294.505,303.188,134.407,516.94,1550.403,1126.795,485.425,622.304,1249.031,373.648,346.683,211.699,519.095,1088.352,529.813,523.314,772.507,209.114,687.664,329.146,352.705,444.147,395.78,325.339,513.402,784.247,986.546,1584.942,2185.948,785.321,729.112,453.787,897.861,262.964,404.52,171.003,580.24,118.207,406.641,160.17,743.848,437.773,1369.397,191.219,1229.096,398.903,403.85,322.726,970.586,568.304,478.038,404.745,1239.612,454.913,442.573,288.41,264.373,524.088,130.674,443.39,586.952,167.731,307.728,263.88,311.737,866.873,1745.621,745.983,309.615,328.348,383.704,1118.281,450.373,387.296,188.089,629.117,158.39,829.748,364.026,136.85,324.278,1060.597,707.567,409.192,443.098,510.64,923.325,605.203,716.174,198.6,554.733,1635.338,1598.253,4035.924,1229.607,1608.824,2794.958,636.725,1971.132,1481.98,1093.152,3786.967,1736.518,1289.176,1179.711,677.348,1259.158,841.34,248.067,451.306,413.411,883.511,395.721,304.827,431.303,1106.7,599.37,354.735,747.528,810.7,835.158,481.175,629.481,323.974,608.739,557.978,525.368,1225.958,840.532,1067.311,718.545,716.335,312.894,563.057,1017.419,618.553,512.007,588.984,294.695,278.158,217.027,537.444,269.51,225.5,501.376,691.99,483.791,127.283,709.697,467.43,307.414,507.697,422.858,256.808,1153.716,1055.198,1414.849,1144.706,1064.626,623.477,877.503,444.839,742.027,415.472,677.548,1051.317,655.2,370.676,1077.143,1051.053,784.457,4542.468,1733.555,1213.929,1538.198,2121.016,918.853,882.448,654.86,1728.875,631.103,301.013,661.938,933.172,370.951,202.456,406.614,314.65,592.089,26.727],\"type\":\"histogram\"},{\"marker\":{\"color\":\"#D2691E\"},\"mode\":\"lines\",\"name\":\"KDE\",\"x\":[3045.88,3047.2852525252524,3048.690505050505,3050.0957575757575,3051.5010101010103,3052.9062626262626,3054.3115151515153,3055.7167676767676,3057.1220202020204,3058.5272727272727,3059.9325252525255,3061.337777777778,3062.7430303030305,3064.148282828283,3065.5535353535356,3066.958787878788,3068.3640404040407,3069.769292929293,3071.1745454545458,3072.579797979798,3073.9850505050504,3075.390303030303,3076.7955555555554,3078.200808080808,3079.6060606060605,3081.0113131313133,3082.4165656565656,3083.8218181818183,3085.2270707070707,3086.6323232323234,3088.0375757575757,3089.4428282828285,3090.848080808081,3092.2533333333336,3093.658585858586,3095.0638383838386,3096.469090909091,3097.8743434343437,3099.279595959596,3100.6848484848488,3102.090101010101,3103.4953535353534,3104.900606060606,3106.3058585858585,3107.711111111111,3109.1163636363635,3110.5216161616163,3111.9268686868686,3113.3321212121214,3114.7373737373737,3116.1426262626264,3117.5478787878787,3118.9531313131315,3120.358383838384,3121.7636363636366,3123.168888888889,3124.5741414141416,3125.979393939394,3127.3846464646467,3128.789898989899,3130.1951515151513,3131.600404040404,3133.0056565656564,3134.410909090909,3135.8161616161615,3137.2214141414142,3138.6266666666666,3140.0319191919193,3141.4371717171716,3142.8424242424244,3144.2476767676767,3145.6529292929295,3147.0581818181818,3148.4634343434345,3149.868686868687,3151.2739393939396,3152.679191919192,3154.0844444444447,3155.489696969697,3156.8949494949493,3158.300202020202,3159.7054545454544,3161.110707070707,3162.5159595959594,3163.921212121212,3165.3264646464645,3166.7317171717173,3168.1369696969696,3169.5422222222223,3170.9474747474746,3172.3527272727274,3173.7579797979797,3175.1632323232325,3176.568484848485,3177.9737373737375,3179.37898989899,3180.7842424242426,3182.189494949495,3183.5947474747472,3185.0],\"y\":[0.001832905419240713,0.0015170993773343943,0.0009811990405335794,0.0010910781869862753,0.001662787664619852,0.002276584209048065,0.003017679469815101,0.004091626542089751,0.005452920992053675,0.006818537038424319,0.0076664779747402535,0.007643887894555952,0.007344902200072563,0.00827273925583825,0.011220488982456029,0.01494681923660121,0.016672754263443067,0.015298211710060586,0.013000656836147326,0.01136447782936633,0.009905415113226086,0.007991277793749363,0.005915182769079316,0.004603614839180802,0.004340216581875808,0.004677084159634987,0.004804286094145265,0.003945664227425191,0.0025142257578005694,0.0014727830724446968,0.0011591657181478472,0.0015827815995405762,0.0026670028851318566,0.003810420375174876,0.004026389180218125,0.003107185282237217,0.001940076730122543,0.0013880150787554427,0.0015444989246854268,0.0023609061649200076,0.0037401025635127546,0.005029582983599697,0.005321434602966492,0.004778565138234207,0.004284633110071723,0.004142142333983544,0.004650245486454227,0.005790340541463709,0.0068018904562159735,0.007335214235017366,0.008011875247544532,0.009032977214800161,0.009862320541122151,0.01015891479438546,0.010077897051723251,0.009700191176833918,0.00944402389099212,0.010385374840307136,0.012487699392384763,0.014125807036359036,0.014335489751832464,0.013760773754902053,0.013070724606546664,0.012663567468535765,0.013407581002278695,0.0152918031502357,0.01671953731557649,0.01690758767766308,0.0165814827586469,0.01570664895796692,0.014255369464538745,0.013369278115428072,0.012993378487870194,0.011780241643981209,0.009592167939552232,0.007696976248164002,0.006823155935995189,0.006619023196157732,0.007110669748385475,0.008153180108070628,0.008357004173573936,0.007467120695723313,0.006541623694037697,0.005979030384818917,0.00565790251287167,0.005607397002735248,0.00599245781550611,0.006338445734583271,0.0060092038421343755,0.0053319582929410685,0.004754442260061802,0.004333231721163359,0.004227903631578969,0.004279536987396199,0.003930156107007355,0.0029754130410062354,0.0017041868280610027,0.0007672145372132436,0.0005056108010257643,0.0005155116532610217],\"type\":\"scatter\"},{\"marker\":{\"color\":\"black\",\"size\":10},\"mode\":\"markers\",\"name\":\"Peaks\",\"x\":[3059.9325252525255,3068.3640404040407,3082.4165656565656,3093.658585858586,3104.900606060606,3120.358383838384,3130.1951515151513,3140.0319191919193,3158.300202020202,3168.1369696969696,3176.568484848485],\"y\":[0.0076664779747402535,0.016672754263443067,0.004804286094145265,0.004026389180218125,0.005321434602966492,0.01015891479438546,0.014335489751832464,0.01690758767766308,0.008357004173573936,0.006338445734583271,0.004279536987396199],\"type\":\"scatter\"}],                        {\"template\":{\"data\":{\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"choropleth\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"choropleth\"}],\"contour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"contour\"}],\"contourcarpet\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"contourcarpet\"}],\"heatmap\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmap\"}],\"heatmapgl\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmapgl\"}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"histogram2d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2d\"}],\"histogram2dcontour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2dcontour\"}],\"mesh3d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"mesh3d\"}],\"parcoords\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"parcoords\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}],\"scatter\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter\"}],\"scatter3d\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter3d\"}],\"scattercarpet\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattercarpet\"}],\"scattergeo\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergeo\"}],\"scattergl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergl\"}],\"scattermapbox\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattermapbox\"}],\"scatterpolar\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolar\"}],\"scatterpolargl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolargl\"}],\"scatterternary\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterternary\"}],\"surface\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"surface\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}]},\"layout\":{\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"autotypenumbers\":\"strict\",\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]],\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]},\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"geo\":{\"bgcolor\":\"white\",\"lakecolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"showlakes\":true,\"showland\":true,\"subunitcolor\":\"white\"},\"hoverlabel\":{\"align\":\"left\"},\"hovermode\":\"closest\",\"mapbox\":{\"style\":\"light\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"bgcolor\":\"#E5ECF6\",\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"ternary\":{\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"bgcolor\":\"#E5ECF6\",\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"title\":{\"x\":0.05},\"xaxis\":{\"automargin\":true,\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"zerolinewidth\":2},\"yaxis\":{\"automargin\":true,\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"zerolinewidth\":2}}},\"shapes\":[{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3059.9325252525255,\"x1\":3059.9325252525255,\"xref\":\"x\",\"y0\":0,\"y1\":0.007344902200072563,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3068.3640404040407,\"x1\":3068.3640404040407,\"xref\":\"x\",\"y0\":0,\"y1\":0.001159165718147847,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3082.4165656565656,\"x1\":3082.4165656565656,\"xref\":\"x\",\"y0\":0,\"y1\":0.004340216581875808,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3093.658585858586,\"x1\":3093.658585858586,\"xref\":\"x\",\"y0\":0,\"y1\":0.0013880150787554425,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3104.900606060606,\"x1\":3104.900606060606,\"xref\":\"x\",\"y0\":0,\"y1\":0.004142142333983544,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3120.358383838384,\"x1\":3120.358383838384,\"xref\":\"x\",\"y0\":0,\"y1\":0.00944402389099212,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3130.1951515151513,\"x1\":3130.1951515151513,\"xref\":\"x\",\"y0\":0,\"y1\":0.012663567468535765,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3140.0319191919193,\"x1\":3140.0319191919193,\"xref\":\"x\",\"y0\":0,\"y1\":0.0009811990405335785,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3158.300202020202,\"x1\":3158.300202020202,\"xref\":\"x\",\"y0\":0,\"y1\":0.006619023196157732,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3168.1369696969696,\"x1\":3168.1369696969696,\"xref\":\"x\",\"y0\":0,\"y1\":0.005607397002735248,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3176.568484848485,\"x1\":3176.568484848485,\"xref\":\"x\",\"y0\":0,\"y1\":0.004227903631578969,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3048.6624,\"x1\":3062.5744,\"xref\":\"x\",\"y0\":0.007505690087406408,\"y1\":0.007505690087406408,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3048.6624,\"x1\":3087.616,\"xref\":\"x\",\"y0\":0.008915959990795457,\"y1\":0.008915959990795457,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3079.2688000000003,\"x1\":3087.616,\"xref\":\"x\",\"y0\":0.0045722513380105365,\"y1\":0.0045722513380105365,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3087.616,\"x1\":3097.3544,\"xref\":\"x\",\"y0\":0.002707202129486784,\"y1\":0.002707202129486784,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3087.616,\"x1\":3108.484,\"xref\":\"x\",\"y0\":0.004731788468475018,\"y1\":0.004731788468475018,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3087.616,\"x1\":3123.7872,\"xref\":\"x\",\"y0\":0.00980146934268879,\"y1\":0.00980146934268879,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3087.616,\"x1\":3133.5256,\"xref\":\"x\",\"y0\":0.013499528610184115,\"y1\":0.013499528610184115,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3048.6624,\"x1\":3182.2176,\"xref\":\"x\",\"y0\":0.00894439335909833,\"y1\":0.00894439335909833,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3153.0024,\"x1\":3182.2176,\"xref\":\"x\",\"y0\":0.007488013684865834,\"y1\":0.007488013684865834,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3164.132,\"x1\":3182.2176,\"xref\":\"x\",\"y0\":0.005972921368659259,\"y1\":0.005972921368659259,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3173.8704,\"x1\":3182.2176,\"xref\":\"x\",\"y0\":0.004253720309487584,\"y1\":0.004253720309487584,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3059.9325252525255,\"x1\":3059.9325252525255,\"xref\":\"x\",\"y0\":0,\"y1\":0.0076664779747402535,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3068.3640404040407,\"x1\":3068.3640404040407,\"xref\":\"x\",\"y0\":0,\"y1\":0.016672754263443067,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3082.4165656565656,\"x1\":3082.4165656565656,\"xref\":\"x\",\"y0\":0,\"y1\":0.004804286094145265,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3093.658585858586,\"x1\":3093.658585858586,\"xref\":\"x\",\"y0\":0,\"y1\":0.004026389180218125,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3104.900606060606,\"x1\":3104.900606060606,\"xref\":\"x\",\"y0\":0,\"y1\":0.005321434602966492,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3120.358383838384,\"x1\":3120.358383838384,\"xref\":\"x\",\"y0\":0,\"y1\":0.01015891479438546,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3130.1951515151513,\"x1\":3130.1951515151513,\"xref\":\"x\",\"y0\":0,\"y1\":0.014335489751832464,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3140.0319191919193,\"x1\":3140.0319191919193,\"xref\":\"x\",\"y0\":0,\"y1\":0.01690758767766308,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3158.300202020202,\"x1\":3158.300202020202,\"xref\":\"x\",\"y0\":0,\"y1\":0.008357004173573936,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3168.1369696969696,\"x1\":3168.1369696969696,\"xref\":\"x\",\"y0\":0,\"y1\":0.006338445734583271,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3176.568484848485,\"x1\":3176.568484848485,\"xref\":\"x\",\"y0\":0,\"y1\":0.004279536987396199,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3048.6624,\"x1\":3062.5744,\"xref\":\"x\",\"y0\":0.007505690087406408,\"y1\":0.007505690087406408,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3048.6624,\"x1\":3087.616,\"xref\":\"x\",\"y0\":0.008915959990795457,\"y1\":0.008915959990795457,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3079.2688000000003,\"x1\":3087.616,\"xref\":\"x\",\"y0\":0.0045722513380105365,\"y1\":0.0045722513380105365,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3087.616,\"x1\":3097.3544,\"xref\":\"x\",\"y0\":0.002707202129486784,\"y1\":0.002707202129486784,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3087.616,\"x1\":3108.484,\"xref\":\"x\",\"y0\":0.004731788468475018,\"y1\":0.004731788468475018,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3087.616,\"x1\":3123.7872,\"xref\":\"x\",\"y0\":0.00980146934268879,\"y1\":0.00980146934268879,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3087.616,\"x1\":3133.5256,\"xref\":\"x\",\"y0\":0.013499528610184115,\"y1\":0.013499528610184115,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3048.6624,\"x1\":3182.2176,\"xref\":\"x\",\"y0\":0.00894439335909833,\"y1\":0.00894439335909833,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3153.0024,\"x1\":3182.2176,\"xref\":\"x\",\"y0\":0.007488013684865834,\"y1\":0.007488013684865834,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3164.132,\"x1\":3182.2176,\"xref\":\"x\",\"y0\":0.005972921368659259,\"y1\":0.005972921368659259,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3173.8704,\"x1\":3182.2176,\"xref\":\"x\",\"y0\":0.004253720309487584,\"y1\":0.004253720309487584,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3059.9325252525255,\"x1\":3059.9325252525255,\"xref\":\"x\",\"y0\":0,\"y1\":0.0076664779747402535,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3068.3640404040407,\"x1\":3068.3640404040407,\"xref\":\"x\",\"y0\":0,\"y1\":0.016672754263443067,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3082.4165656565656,\"x1\":3082.4165656565656,\"xref\":\"x\",\"y0\":0,\"y1\":0.004804286094145265,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3093.658585858586,\"x1\":3093.658585858586,\"xref\":\"x\",\"y0\":0,\"y1\":0.004026389180218125,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3104.900606060606,\"x1\":3104.900606060606,\"xref\":\"x\",\"y0\":0,\"y1\":0.005321434602966492,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3120.358383838384,\"x1\":3120.358383838384,\"xref\":\"x\",\"y0\":0,\"y1\":0.01015891479438546,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3130.1951515151513,\"x1\":3130.1951515151513,\"xref\":\"x\",\"y0\":0,\"y1\":0.014335489751832464,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3140.0319191919193,\"x1\":3140.0319191919193,\"xref\":\"x\",\"y0\":0,\"y1\":0.01690758767766308,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3158.300202020202,\"x1\":3158.300202020202,\"xref\":\"x\",\"y0\":0,\"y1\":0.008357004173573936,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3168.1369696969696,\"x1\":3168.1369696969696,\"xref\":\"x\",\"y0\":0,\"y1\":0.006338445734583271,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3176.568484848485,\"x1\":3176.568484848485,\"xref\":\"x\",\"y0\":0,\"y1\":0.004279536987396199,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3048.6624,\"x1\":3062.5744,\"xref\":\"x\",\"y0\":0.007505690087406408,\"y1\":0.007505690087406408,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3048.6624,\"x1\":3087.616,\"xref\":\"x\",\"y0\":0.008915959990795457,\"y1\":0.008915959990795457,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3079.2688000000003,\"x1\":3087.616,\"xref\":\"x\",\"y0\":0.0045722513380105365,\"y1\":0.0045722513380105365,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3087.616,\"x1\":3097.3544,\"xref\":\"x\",\"y0\":0.002707202129486784,\"y1\":0.002707202129486784,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3087.616,\"x1\":3108.484,\"xref\":\"x\",\"y0\":0.004731788468475018,\"y1\":0.004731788468475018,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3087.616,\"x1\":3123.7872,\"xref\":\"x\",\"y0\":0.00980146934268879,\"y1\":0.00980146934268879,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3087.616,\"x1\":3133.5256,\"xref\":\"x\",\"y0\":0.013499528610184115,\"y1\":0.013499528610184115,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3048.6624,\"x1\":3182.2176,\"xref\":\"x\",\"y0\":0.00894439335909833,\"y1\":0.00894439335909833,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3153.0024,\"x1\":3182.2176,\"xref\":\"x\",\"y0\":0.007488013684865834,\"y1\":0.007488013684865834,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3164.132,\"x1\":3182.2176,\"xref\":\"x\",\"y0\":0.005972921368659259,\"y1\":0.005972921368659259,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3173.8704,\"x1\":3182.2176,\"xref\":\"x\",\"y0\":0.004253720309487584,\"y1\":0.004253720309487584,\"yref\":\"y\"}]},                        {\"responsive\": true}                    ).then(function(){\n","                            \n","var gd = document.getElementById('f0efc821-18d5-43b5-ad6e-1133ea0ad873');\n","var x = new MutationObserver(function (mutations, observer) {{\n","        var display = window.getComputedStyle(gd).display;\n","        if (!display || display === 'none') {{\n","            console.log([gd, 'removed!']);\n","            Plotly.purge(gd);\n","            observer.disconnect();\n","        }}\n","}});\n","\n","// Listen for the removal of the full notebook cells\n","var notebookContainer = gd.closest('#notebook-container');\n","if (notebookContainer) {{\n","    x.observe(notebookContainer, {childList: true});\n","}}\n","\n","// Listen for the clearing of the current output cell\n","var outputEl = gd.closest('.output');\n","if (outputEl) {{\n","    x.observe(outputEl, {childList: true});\n","}}\n","\n","                        })                };                            </script>        </div>\n","</body>\n","</html>"]},"metadata":{}}]},{"cell_type":"code","source":["# peaks  # ndarray\n","# kdx  # ndarray\n","# kdy  # ndarray\n","# kdx.min()\n","left_base * ticks_per_sample\n","# volume"],"metadata":{"id":"zqj944n-WzyZ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print(peak_y)\n","print(peak_props['prominences'])\n","peak_props"],"metadata":{"id":"Rvqv0RGojo9h"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["##### dump"],"metadata":{"id":"qsyPhNR8yP1c"}},{"cell_type":"code","source":["\n","def fill_na(arr_, iin, iout, fill_value):\n","  arr_[iin:iout + 1] = fill_value\n","\n","  # 1. cross_point 찾기\n","  #   a. cross_over & cross_under\n","# def wave_range(t_df):\n","tf_entry = 'T'\n","tf_entry_num = to_itvnum(tf_entry)\n","base_shift_size = 3 # 3T used\n","\n","np_timeidx = np.array([intmin_np(date_) for date_ in t_df.index.to_numpy()])\n","\n","close = t_df.close.to_numpy()\n","b1_close = t_df.close.shift(tf_entry_num).to_numpy()  # 일단, 1 로 설정\n","dc_base_3T = t_df.dc_base_3T.to_numpy()\n","b1_dc_base_3T = t_df.dc_base_3T.shift(3).to_numpy()\n","\n","crossover = (close > dc_base_3T) & (b1_dc_base_3T > b1_close) & (np_timeidx % tf_entry_num == tf_entry_num - 1)\n","crossunder = (close < dc_base_3T) & (b1_dc_base_3T < b1_close) & (np_timeidx % tf_entry_num == tf_entry_num - 1)\n","\n","# 1. crossover ~ crossunder's high (over 과 under 의 index 포함해야함)\n","# 2. crossunder ~ crossover's low\n","high = t_df.high.to_numpy()\n","low = t_df.low.to_numpy()\n","\n","# print(np.sum(crossover))\n","# print(np.sum(crossunder))\n","\n","# pairing -> 더 긴 배열의 시작 index 가 더 작음\n","co_idx = np.argwhere(crossover)\n","cu_idx = np.argwhere(crossunder)\n","\n","print(co_idx)\n","print(cu_idx)\n","\n","# 2. 길이가 다른 경우\n","#  a. 길이가 긴 쪽이 먼저\n","if len(co_idx) > len(cu_idx):\n","  upper_zone = np.hstack((co_idx[:-1], cu_idx))  \n","  lower_zone = np.hstack((cu_idx, co_idx[1:]))  \n","elif len(co_idx) < len(cu_idx):\n","  upper_zone = np.hstack((co_idx, cu_idx[1:]))  \n","  lower_zone = np.hstack((cu_idx[:-1], co_idx))  \n","else:\n","  # 1. 길이가 같은 경우\n","  #   뭐가 먼저인지 판단하는 logic\n","  if co_idx[0] < cu_idx[0]:\n","    #   a. co 가 먼저인 경우\n","    upper_zone = np.hstack((co_idx, cu_idx))  \n","    lower_zone = np.hstack((cu_idx[:-1], co_idx[1:]))  \n","  else:\n","    #   b. cu 가 먼저인 경우\n","    upper_zone = np.hstack((co_idx[:-1], cu_idx[1:]))  \n","    lower_zone = np.hstack((cu_idx, co_idx))  \n","\n","# print(upper_zone)\n","# print(lower_zone)\n","\n","# make envelope\n","wave_high = np.full_like(high, np.nan)\n","wave_low = np.full_like(low, np.nan)\n","\n","fill_upper_zone = np.hstack((upper_zone[:-1, [1]], upper_zone[1:, [1]]))\n","fill_lower_zone = np.hstack((lower_zone[:-1, [1]], lower_zone[1:, [1]]))\n","\n","for items in zip(fill_upper_zone, upper_zone):\n","  print(items)\n","\n","[fill_na(wave_high, f_iin, f_iout, high[iin:iout + 1].max()) for (f_iin, f_iout), (iin, iout) in zip(fill_upper_zone, upper_zone)]\n","[fill_na(wave_low, f_iin, f_iout, low[iin:iout + 1].min()) for (f_iin, f_iout), (iin, iout) in zip(fill_lower_zone, lower_zone)]\n","# [high[iin:iout + 1].max() for iin, iout in upper_zone]\n","# [low[iin:iout + 1].min() for iin, iout in lower_zone]\n","\n","# t_df['fill_wave_high'] = pd.Series(wave_high).bfill().to_numpy()\n","# t_df['fill_wave_low'] = pd.Series(wave_low).bfill().to_numpy()\n","# t_df['fill_wave_high'] = pd.Series(wave_high).ffill().to_numpy()\n","# t_df['fill_wave_low'] = pd.Series(wave_low).ffill().to_numpy()\n","t_df['fill_wave_high'] = wave_high\n","t_df['fill_wave_low'] = wave_low\n","\n","  # return "],"metadata":{"id":"9VOxiJB1yUTI"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"xpyP5t8Ht_pE","jp-MarkdownHeadingCollapsed":true,"tags":[]},"source":["### calc recursive indi's min_period"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"N1Hbm4OA4Tkk"},"outputs":[],"source":["ticker_prcn = get_precision_by_price(res_df.close.iloc[-1]) + 2\n","\n","target_len = 300000\n","slice_len_list = list(range(50, 10000, 100))\n","slice_len_list.insert(0, target_len)\n","\n","start_0 = time.time()\n","# prev_int_, prev_pnts_ = None, None\n","offset = 1\n","\n","for sl_idx, sample_len in enumerate(slice_len_list):\n","\n","  sample_df = res_df.iloc[-sample_len -offset:-offset]\n","  sample_len2 = sample_len\n","\n","  # --------- input using indi.s --------- #\n","  # res = ema_v0(sample_df['close'], 190)\n","  res = rsi(sample_df, 14)\n","\n","    #    to_htf()    #\n","  # df_5T = to_htf(sample_df, itv_='5T', offset='1h')\n","  # sample_len2 = len(df_5T)\n","\n","  # # --------- input using htf_indi. --------- #\n","  # res = ema(df_5T['close'], 195)\n","  # -------------------------------------- #\n","\n","  res_last_row = res.iloc[-1]\n","  if pd.isnull(res_last_row):\n","    continue\n","\n","  # print(res_last_row)\n","  # break\n","\n","  # sample_df = sample_df.join(to_lower_tf_v2(sample_df, df_5T, [-1]), how='inner')\n","\n","\n","  #   자리수 분할 계산    #\n","  int_, points_ = str(res_last_row).split('.')\n","  pnts_ = points_[:ticker_prcn]\n","\n","  if sl_idx == 0:\n","    target_int_ = int_\n","    target_pnts_ = pnts_\n","    print(\"target {} ({}) -> {} {}\".format(sample_len, sample_len2, int_, points_))\n","\n","  else:\n","    if target_int_ == int_ and target_pnts_ == pnts_:\n","      # print(sample_len, \"({})\".format(sample_len2), '->', int_, pnts_, end='\\n\\n')\n","      print(\"{} ({}) -> {} {}\\n\".format(sample_len, sample_len2, int_, points_))\n","      break\n","\n","print(time.time() - start_0)  # (1301)(1361)(1301)"]},{"cell_type":"markdown","metadata":{"id":"rrIGjmUzqU-D","tags":[]},"source":["## import utils & config"]},{"cell_type":"code","execution_count":4,"metadata":{"id":"SeJan_0t95yL","executionInfo":{"status":"ok","timestamp":1649123460956,"user_tz":-540,"elapsed":2959,"user":{"displayName":"7th June","userId":"08178289703395036410"}}},"outputs":[],"source":["frame_ver = \"0114_htf\"\n","ID_arr = np.array(['v3', 'v5_2'])\n","\n","utils_public_name = \"{}.utils.{}_utils_public\".format(strat_pkg, frame_ver)\n","utils_public_lib = importlib.import_module(utils_public_name)\n","utils_public = utils_public_lib   # temporary\n","\n","u_name_list = [\"{}.utils.{}_utils_{}\".format(strat_pkg, frame_ver, id_) for id_ in ID_arr]\n","utils_arr = np.array([importlib.import_module(u_name) for u_name in u_name_list])\n","\n","config_name_list = [\"{}_config_{}.json\".format(frame_ver, id_) for id_ in ID_arr]\n","cfg_path_list = [os.path.join(current_path, strat_pkg, \"config\", name_) for name_ in config_name_list]\n","cfg_file_list = [open(cfg_path) for cfg_path in cfg_path_list]\n","config_arr = np.array([EasyDict(json.load(cfg_)) for cfg_ in cfg_file_list])\n","\n","# ------ opened files should be closed --> 닫지 않으면 reopen 시 error occurs ------ #\n","_ = [cfg_.close() for cfg_ in cfg_file_list]\n","show_plot = 1   # idep's var - do not touch"]},{"cell_type":"markdown","metadata":{"id":"leSQlImg4_9L","jp-MarkdownHeadingCollapsed":true,"tags":[]},"source":["### utils_"]},{"cell_type":"code","execution_count":98,"metadata":{"id":"CB2yZdQ95Cdg","executionInfo":{"status":"ok","timestamp":1649126818460,"user_tz":-540,"elapsed":813,"user":{"displayName":"7th June","userId":"08178289703395036410"}}},"outputs":[],"source":["# from funcs.funcs_indicator_candlescore import *\n","# import numpy as np\n","\n","def get_line(touch_idx, rtc_):\n","  touch_idx_copy = touch_idx.copy()\n","  touch_line = np.full_like(rtc_, np.nan)\n","\n","  nan_idx = np.isnan(touch_idx_copy)\n","  touch_idx_copy[nan_idx] = 0   # for indexing array\n","  touch_line = rtc_[touch_idx_copy.astype(int)]\n","  touch_line[nan_idx] = np.nan   # for true comp.\n","\n","  return touch_line\n","\n","\n","def enlist_rtc(res_df, config, np_timeidx):\n","    strat_version = config.strat_version\n","    # ------------ rtc_gap ------------ #    \n","    short_epout_1_, long_epout_1_ = 'short_epout_1_{}'.format(strat_version), 'long_epout_1_{}'.format(strat_version)\n","    short_epout_0_, long_epout_0_ = 'short_epout_0_{}'.format(strat_version), 'long_epout_0_{}'.format(strat_version)\n","    short_tp_1_, long_tp_1_ = 'short_tp_1_{}'.format(strat_version), 'long_tp_1_{}'.format(strat_version)\n","    short_tp_0_, long_tp_0_ = 'short_tp_0_{}'.format(strat_version), 'long_tp_0_{}'.format(strat_version)\n","        \n","    # b1_itv_num = to_itvnum(config.loc_set.point.epout_itv0)\n","    # b2_itv_num = to_itvnum(config.loc_set.point.epout_itv0) * 2  # multi 2 for imb_v2\n","\n","    tp_period1 = config.loc_set.point.tp_period1\n","    tp_period2 = config.loc_set.point.tp_period2\n","    res_df[short_tp_1_] = res_df['dc_lower_{}{}'.format(config.loc_set.point.tp_itv1, tp_period1)]\n","    res_df[short_tp_0_] = res_df['dc_upper_{}{}'.format(config.loc_set.point.tp_itv0, tp_period2)]\n","    res_df[long_tp_1_] = res_df['dc_upper_{}{}'.format(config.loc_set.point.tp_itv1, tp_period1)]\n","    res_df[long_tp_0_] = res_df['dc_lower_{}{}'.format(config.loc_set.point.tp_itv0, tp_period2)]\n","\n","    epout_period1 = config.loc_set.point.epout_period1\n","    epout_period2 = config.loc_set.point.epout_period2\n","    res_df[short_epout_1_] = res_df['dc_lower_{}{}'.format(config.loc_set.point.epout_itv1, epout_period1)]\n","    res_df[short_epout_0_] = res_df['dc_upper_{}{}'.format(config.loc_set.point.epout_itv0, epout_period2)]\n","    res_df[long_epout_1_] = res_df['dc_upper_{}{}'.format(config.loc_set.point.epout_itv1, epout_period1)]\n","    res_df[long_epout_0_] = res_df['dc_lower_{}{}'.format(config.loc_set.point.epout_itv0, epout_period2)]\n","\n","    # ------ inversion ------ #\n","    if config.pos_set.short_inversion or config.pos_set.long_inversion:\n","      res_df.rename({short_tp_1_: long_tp_1_, long_tp_1_: short_tp_1_}, axis=1, inplace=True)\n","      res_df.rename({short_tp_0_: long_tp_0_, long_tp_0_: short_tp_0_}, axis=1, inplace=True)\n","      res_df.rename({short_epout_1_: long_epout_1_, long_epout_1_: short_epout_1_}, axis=1, inplace=True)\n","      res_df.rename({short_epout_0_: long_epout_0_, long_epout_0_: short_epout_0_}, axis=1, inplace=True)\n","\n","    res_df['short_tp_gap_{}'.format(strat_version)] = abs(res_df[short_tp_1_] - res_df[short_tp_0_])\n","    res_df['long_tp_gap_{}'.format(strat_version)] = abs(res_df[long_tp_1_] - res_df[long_tp_0_])\n","    res_df['short_epout_gap_{}'.format(strat_version)] = abs(res_df[short_epout_1_] - res_df[short_epout_0_])\n","    res_df['long_epout_gap_{}'.format(strat_version)] = abs(res_df[long_epout_1_] - res_df[long_epout_0_])\n","    \n","    # ------------ dtk_gap ------------ #\n","    # res_df['short_dtk_1_{}'.format(strat_version)] = res_df['bb_lower_%s' % config.loc_set.zone.dtk_itv]\n","    # res_df['short_dtk_0_{}'.format(strat_version)] = res_df['dc_upper_%s' % config.loc_set.zone.dtk_itv]\n","    # res_df['long_dtk_1_{}'.format(strat_version)] = res_df['bb_upper_%s' % config.loc_set.zone.dtk_itv]\n","    # res_df['long_dtk_0_{}'.format(strat_version)] = res_df['dc_lower_%s' % config.loc_set.zone.dtk_itv]\n","\n","    # res_df['short_dtk_gap_{}'.format(strat_version)] = abs(\n","    #     res_df['short_dtk_0_{}'.format(strat_version)] - res_df['short_dtk_1_{}'.format(strat_version)])\n","    # res_df['long_dtk_gap_{}'.format(strat_version)] = abs(\n","    #     res_df['long_dtk_1_{}'.format(strat_version)] - res_df['long_dtk_0_{}'.format(strat_version)])\n","\n","    return res_df\n","\n","\n","def enlist_tr(res_df, config, np_timeidx, mode='OPEN'):  \n","    strat_version = config.strat_version\n","    len_df = len(res_df)\n","    short_open_res = np.ones(len_df)\n","    long_open_res = np.ones(len_df)\n","    \n","    short_tp_1_col, short_tp_0_col, short_tp_gap_col = 'short_tp_1_{}'.format(strat_version), 'short_tp_0_{}'.format(strat_version), 'short_tp_gap_{}'.format(strat_version) \n","    long_tp_1_col, long_tp_0_col, long_tp_gap_col = 'long_tp_1_{}'.format(strat_version), 'long_tp_0_{}'.format(strat_version), 'long_tp_gap_{}'.format(strat_version) \n","    short_epout_1_col, short_epout_0_col, short_epout_gap_col = 'short_epout_1_{}'.format(strat_version), 'short_epout_0_{}'.format(strat_version), 'short_epout_gap_{}'.format(strat_version) \n","    long_epout_1_col, long_epout_0_col, long_epout_gap_col = 'long_epout_1_{}'.format(strat_version), 'long_epout_0_{}'.format(strat_version), 'long_epout_gap_{}'.format(strat_version) \n","\n","    tp_cols = [short_tp_1_col, short_tp_0_col, short_tp_gap_col, long_tp_1_col, long_tp_0_col, long_tp_gap_col]   # Todo - public_indi 이전에 해야할지도 모름\n","    epout_cols = [short_epout_1_col, short_epout_0_col, short_epout_gap_col, long_epout_1_col, long_epout_0_col, long_epout_gap_col]   # Todo - public_indi 이전에 해야할지도 모름\n","    data_cols = ['open', 'high', 'low']   # Todo - public_indi 이전에 해야할지도 모름 # 'close', 'haopen', 'hahigh', 'halow', 'haclose'\n","\n","    short_tp_1_, short_tp_0_, short_tp_gap_, long_tp_1_, long_tp_0_, long_tp_gap_ = [res_df[col_].to_numpy() for col_ in tp_cols]\n","    short_epout_1_, short_epout_0_, short_epout_gap_, long_epout_1_, long_epout_0_, long_epout_gap_ = [res_df[col_].to_numpy() for col_ in epout_cols]\n","    open, high, low = [res_df[col_].to_numpy() for col_ in data_cols]\n","    \n","    # ---------------- point - support_confirmer---------------- #    \n","    point2_period = 60\n","    tp_itv1 = config.loc_set.point.tp_itv1\n","    tp_period1 = config.loc_set.point.tp_period1\n","    tp_period2 = config.loc_set.point.tp_period2\n","    epout_itv1 = config.loc_set.point.epout_itv1\n","    epout_period1 = config.loc_set.point.epout_period1\n","    epout_period2 = config.loc_set.point.epout_period2\n","\n","    short_point1_on2_idx = pd.Series(np.where(res_df['short_wave_point_{}{}{}'.format(tp_itv1, tp_period1, tp_period2)], np.arange(len_df), np.nan)).rolling(point2_period, min_periods=1).max().to_numpy()  # period 내의 max_point1_idx\n","    long_point1_on2_idx = pd.Series(np.where(res_df['long_wave_point_{}{}{}'.format(tp_itv1, tp_period1, tp_period2)], np.arange(len_df), np.nan)).rolling(point2_period, min_periods=1).max().to_numpy()\n","\n","    short_point2_idx = pd.Series(np.where(res_df['short_wave_point_{}{}{}'.format(epout_itv1, epout_period1, epout_period2)], np.arange(len_df), np.nan)).to_numpy()\n","    long_point2_idx = pd.Series(np.where(res_df['long_wave_point_{}{}{}'.format(epout_itv1, epout_period1, epout_period2)], np.arange(len_df), np.nan)).to_numpy()\n","\n","    # res_df['short_point_idxgap_{}'.format(strat_version)] = 0  # default\n","    # res_df['long_point_idxgap_{}'.format(strat_version)] = 0\n","    res_df['short_point_idxgap_{}'.format(strat_version)] = short_point2_idx - short_point1_on2_idx\n","    res_df['long_point_idxgap_{}'.format(strat_version)] = long_point2_idx - long_point1_on2_idx\n","\n","    # ------ p1 & p2 ------ #\n","    short_open_res *= ~np.isnan(res_df['short_point_idxgap_{}'.format(strat_version)].to_numpy())\n","    long_open_res *= ~np.isnan(res_df['long_point_idxgap_{}'.format(strat_version)].to_numpy())\n","\n","    print(np.sum(long_open_res == 1))\n","\n","    # short_open_res *= res_df['short_wave_point_{}{}'.format(tp_itv1, tp_period1)].rolling(point2_period).max().to_numpy().astype(bool)\n","    # long_open_res *= res_df['long_wave_point_{}{}'.format(tp_itv1, tp_period1)].rolling(point2_period).max().to_numpy().astype(bool)\n","\n","    # short_open_res *= res_df['short_wave_point_{}{}'.format(epout_itv1, epout_period1)].to_numpy().astype(bool)\n","    # long_open_res *= res_df['long_wave_point_{}{}'.format(epout_itv1, epout_period1)].to_numpy().astype(bool)\n","\n","    # ------ p2 amax > p1_idx (long) ------ #\n","    short_open_res *= res_df['short_a_touch_idx_{}{}{}'.format(epout_itv1, epout_period1, epout_period2)].to_numpy() > short_point1_on2_idx\n","    long_open_res *= res_df['long_a_touch_idx_{}{}{}'.format(epout_itv1, epout_period1, epout_period2)].to_numpy() > long_point1_on2_idx\n","\n","    print(np.sum(long_open_res == 1))\n","\n","    # ------ higher low (long) ------ #\n","    # short_a_line1_on2_ = get_line(short_point1_on2_idx, res_df['short_a_line_{}{}{}'.format(tp_itv1, tp_period1, tp_period2)].to_numpy())\n","    # long_a_line1_on2_ = get_line(long_point1_on2_idx, res_df['long_a_line_{}{}{}'.format(tp_itv1, tp_period1, tp_period2)].to_numpy())\n","                                 \n","    # short_a_line2_ = res_df['short_a_line_{}{}{}'.format(epout_itv1, epout_period1, epout_period2)].to_numpy()\n","    # long_a_line2_ = res_df['long_a_line_{}{}{}'.format(epout_itv1, epout_period1, epout_period2)].to_numpy()\n","\n","    # short_open_res *= short_a_line1_on2_ >= short_a_line2_\n","    # long_open_res *= long_a_line1_on2_ <= long_a_line2_\n","\n","    res_df['short_open_{}'.format(strat_version)] = short_open_res    \n","    res_df['long_open_{}'.format(strat_version)] = long_open_res\n","\n","    print(np.sum(long_open_res == 1))\n","\n","    # ------------------ tr_set ------------------ #\n","    # ------------ tpep ------------ #\n","    tpg = config.tr_set.tp_gap\n","    res_df['short_tp_{}'.format(strat_version)] = short_tp_1_ - short_tp_gap_ * tpg\n","    res_df['long_tp_{}'.format(strat_version)] = long_tp_1_ + long_tp_gap_ * tpg\n","\n","    # ------ limit_ep ------ #\n","    if config.ep_set.entry_type == \"LIMIT\":\n","      epg = -0.5 + config.tr_set.ep_gap\n","      res_df['short_ep_{}'.format(strat_version)] = short_epout_0_ + short_epout_gap_ * epg\n","      res_df['long_ep_{}'.format(strat_version)] = long_epout_0_ - long_epout_gap_ * epg\n","    \n","    # ------ market_ep ------ #\n","    else:\n","        res_df['short_ep_{}'.format(strat_version)] = res_df['close']\n","        res_df['long_ep_{}'.format(strat_version)] = res_df['close']\n","\n","    # ------------ out ------------ #\n","    outg = config.tr_set.out_gap\n","    res_df['short_out_{}'.format(strat_version)] = short_epout_0_ + short_epout_gap_ * outg\n","    res_df['long_out_{}'.format(strat_version)] = long_epout_0_ - long_epout_gap_ * outg\n","    # res_df['short_out_{}'.format(strat_version)] = short_tp_0_ + short_tp_gap_ * outg\n","    # res_df['long_out_{}'.format(strat_version)] = long_tp_0_ - long_tp_gap_ * outg\n","\n","    # ------------ point validation ------------ #\n","    short_tp_ = res_df['short_tp_{}'.format(strat_version)].to_numpy()\n","    short_ep_ = res_df['short_ep_{}'.format(strat_version)].to_numpy()\n","    short_out_ = res_df['short_out_{}'.format(strat_version)].to_numpy()\n","    short_open_res *= (short_tp_ < short_ep_) & (short_ep_ < short_out_)\n","    res_df['short_open_{}'.format(strat_version)] = short_open_res\n","\n","    long_tp_ = res_df['long_tp_{}'.format(strat_version)].to_numpy()\n","    long_ep_ = res_df['long_ep_{}'.format(strat_version)].to_numpy()\n","    long_out_ = res_df['long_out_{}'.format(strat_version)].to_numpy()\n","    long_open_res *= (long_tp_ > long_ep_) & (long_ep_ > long_out_) \n","    res_df['long_open_{}'.format(strat_version)] = long_open_res\n","\n","    print(np.sum(long_open_res == 1))\n","\n","    # ------ tr ------ #\n","    res_df['short_tr_{}'.format(strat_version)] = abs((short_ep_ / short_tp_ - config.trader_set.limit_fee - 1) / (short_ep_ / short_out_ - config.trader_set.market_fee - 1))\n","    res_df['long_tr_{}'.format(strat_version)] = abs((long_tp_ / long_ep_ - config.trader_set.limit_fee - 1) / (long_out_ / long_ep_ - config.trader_set.market_fee - 1))\n","\n","    # ------ zoned_ep ------ #\n","    if config.tr_set.c_ep_gap != \"None\":\n","        # res_df['short_ep_org_{}'.format(strat_version)] = res_df['short_ep_{}'.format(strat_version)].copy()\n","        # res_df['long_ep_org_{}'.format(strat_version)] = res_df['long_ep_{}'.format(strat_version)].copy()\n","        res_df['short_ep2_{}'.format(strat_version)] = short_epout_1_ + short_epout_gap_ * config.tr_set.c_ep_gap\n","        res_df['long_ep2_{}'.format(strat_version)] = long_epout_1_ - long_epout_gap_ * config.tr_set.c_ep_gap\n","\n","    # ------ zoned_out ------ #\n","    if config.tr_set.t_out_gap != \"None\":\n","        # res_df['short_out_org_{}'.format(strat_version)] = res_df['short_out_{}'.format(strat_version)].copy()\n","        # res_df['long_out_org_{}'.format(strat_version)] = res_df['long_out_{}'.format(strat_version)].copy()\n","        res_df['short_out2_{}'.format(strat_version)] = res_df['short_epout_0_{}'.format(strat_version)] + res_df['short_epout_gap_{}'.format(strat_version)] * config.tr_set.t_out_gap\n","        res_df['long_out2_{}'.format(strat_version)] = res_df['long_epout_0_{}'.format(strat_version)] - res_df['long_epout_gap_{}'.format(strat_version)] * config.tr_set.t_out_gap\n","\n","    # ------------ bias ------------ #  Todo - 추후, bias_set 독립시키는게 좋지 않을까\n","    bias_info_tick = config.tr_set.bias_info_tick\n","    # ------ bias_info can use future_data ------ #\n","    # res_df['short_bias_info_{}'.format(strat_version)] = res_df['dc_lower_T'].shift(-bias_info_tick)  # open / ep_tick 으로부터 bias_info_tick 만큼\n","    # res_df['long_bias_info_{}'.format(strat_version)] = res_df['dc_upper_T'].shift(-bias_info_tick)\n","    res_df['short_bias_info_{}'.format(strat_version)] = res_df['low'].rolling(bias_info_tick).min().shift(-bias_info_tick)\n","    res_df['long_bias_info_{}'.format(strat_version)] = res_df['high'].rolling(bias_info_tick).max().shift(-bias_info_tick)\n","\n","    # bias_thresh 는 결국 tp 가 될 것\n","    res_df['short_bias_thresh_{}'.format(strat_version)] = res_df['short_tp_{}'.format(strat_version)]\n","    res_df['long_bias_thresh_{}'.format(strat_version)] = res_df['long_tp_{}'.format(strat_version)]\n","    # res_df['short_bias_thresh_{}'.format(strat_version)] = res_df['dc_lower_T'] - res_df['short_tp_gap_{}'.format(strat_version)] * config.tr_set.bias_gap\n","    # res_df['long_bias_thresh_{}'.format(strat_version)] = res_df['dc_upper_T'] + res_df['long_tp_gap_{}'.format(strat_version)] * config.tr_set.bias_gap \n","        \n","    return res_df\n"]},{"cell_type":"markdown","metadata":{"id":"HKdUKKl-483N","jp-MarkdownHeadingCollapsed":true,"tags":[]},"source":["### utils_public"]},{"cell_type":"code","execution_count":90,"metadata":{"id":"nzOYWA2kqZ0d","executionInfo":{"status":"ok","timestamp":1649126587023,"user_tz":-540,"elapsed":1674,"user":{"displayName":"7th June","userId":"08178289703395036410"}}},"outputs":[],"source":["# from funcs.funcs_indicator import *\n","# from funcs.funcs_trader import *\n","# import logging\n","# from ast import literal_eval\n","\n","sys_log = logging.getLogger()\n","\n","\n","class OrderSide:\n","    BUY = \"BUY\"\n","    SELL = \"SELL\"\n","    INVALID = None\n","\n","\n","def lvrg_set(res_df, config, open_side, ep_, out_, fee, limit_leverage=50):\n","    strat_version = config.strat_version\n","    if not pd.isnull(out_) and not config.lvrg_set.static_lvrg:\n","      if strat_version in ['v3']:\n","        if open_side == OrderSide.SELL:\n","          loss = out_ / ep_\n","        else:\n","          loss = ep_ / out_\n","      else:  # 이 phase 가 정석, 윗 phase 는 결과가 수익 극대화라 사용함\n","        if open_side == OrderSide.SELL:\n","          loss = ep_ / out_          \n","        else:\n","          loss = out_ / ep_\n","\n","        config.lvrg_set.leverage = config.lvrg_set.target_pct / abs(loss - 1 - (fee + config.trader_set.market_fee))\n","\n","    if not config.lvrg_set.allow_float:\n","        config.lvrg_set.leverage = int(config.lvrg_set.leverage)\n","\n","    # ------------ leverage rejection ------------ #\n","    # 감당하기 힘든 fluc. 의 경우 진입하지 않음 - dynamic_lvrg 사용 경우\n","    if config.lvrg_set.leverage < 1 and config.lvrg_set.lvrg_rejection:\n","    # if config.lvrg_set.leverage >= 1 and config.lvrg_set.lvrg_rejection:\n","        return None\n","    config.lvrg_set.leverage = min(limit_leverage, max(config.lvrg_set.leverage, 1))\n","\n","    return config.lvrg_set.leverage\n","\n","\n","def sync_check(df_, config, order_side=\"OPEN\", row_slice=True):\n","    try:\n","        make_itv_list = [m_itv.replace('m', 'T') for m_itv in literal_eval(config.trader_set.itv_list)]\n","        row_list = literal_eval(config.trader_set.row_list)\n","        rec_row_list = literal_eval(config.trader_set.rec_row_list)\n","        offset_list = literal_eval(config.trader_set.offset_list)\n","\n","        assert len(make_itv_list) == len(offset_list), \"length of itv & offset_list should be equal\"\n","        htf_df_list = [to_htf(df_, itv_=itv_, offset=offset_) for itv_idx, (itv_, offset_)\n","                       in enumerate(zip(make_itv_list, offset_list)) if itv_idx != 0]  #\n","        htf_df_list.insert(0, df_)\n","\n","        # for htf_df_ in htf_df_list:\n","        #     print(htf_df_.tail())\n","\n","        #       Todo        #\n","        #        1. row_list calc.\n","        #           a. indi. 를 만들기 위한 최소 period 가 존재하고, 그 indi. 를 사용한 lb_period 가 존재함\n","        #           b. => default_period + lb_period\n","        #               i. from sync_check, public_indi, ep_point2, ep_dur 의 tf 별 max lb_period check\n","        #                   1. default_period + max lb_period check\n","        #                       a. 현재까지 lb_period_list\n","        #                           h_prev_idx (open / close) 60\n","        #                           dc_period 135\n","        #                           zone_dc_period 135\n","\n","        # --------- slicing (in trader phase only) --------- #\n","        #               --> latency 영향도가 높은 곳은 이곳\n","        if row_slice:   # recursive 가 아닌 indi. 의 latency 를 고려한 slicing\n","            df, df_5T, df_15T, df_30T, df_4H = [df_s.iloc[-row_list[row_idx]:].copy() for row_idx, df_s in enumerate(htf_df_list)]\n","            rec_df, rec_df_5T, rec_df_15T, rec_df_30T, rec_df_4H = [df_s.iloc[-rec_row_list[row_idx]:].copy() for row_idx, df_s in enumerate(htf_df_list)]\n","        else:\n","            df, df_5T, df_15T, df_30T, df_4H = htf_df_list\n","            rec_df, rec_df_5T, rec_df_15T, rec_df_30T, rec_df_4H = htf_df_list\n","\n","        # --------- add indi. --------- #\n","\n","        #        1. 필요한 indi. 는 enlist_epouttp & mr_check 보면서 삽입\n","        #        2. min use_rows 계산을 위해서, tf 별로 gathering 함        #\n","        start_0 = time.time()\n","\n","        df = dc_line(df, None, '1m', dc_period=20)\n","        df = bb_line(df, None, '1m')\n","        # print(df.tail())\n","\n","        df = dc_line(df, df_5T, '5T')\n","        df = bb_line(df, df_5T, '5T')\n","\n","        df = dc_line(df, df_15T, '15T')\n","        df = bb_line(df, df_15T, '15T')\n","\n","        df = bb_line(df, df_30T, '30T')\n","\n","        # print(time.time() - start_0)\n","\n","        # start_0 = time.time()\n","        df = bb_line(df, df_4H, '4H')\n","        # print(time.time() - start_0)\n","\n","        rec_df['rsi_1m'] = rsi(rec_df, 14)  # Todo - recursive, 250 period\n","        df = df.join(to_lower_tf_v2(df, rec_df.iloc[:, [-1]], [-1], backing_i=0), how='inner')  # <-- join same_tf manual\n","        # print(df.rsi_1m.tail())\n","\n","        if order_side in [\"OPEN\"]:\n","            rec_df_5T['ema_5T'] = ema(rec_df_5T['close'], 195)  # Todo - recursive, 1100 period (5T)\n","            df = df.join(to_lower_tf_v2(df, rec_df_5T, [-1]), how='inner')\n","\n","    except Exception as e:\n","        sys_log.error(\"error in sync_check :\", e)\n","    else:\n","        return df\n","\n","\n","def public_indi(res_df, config, np_timeidx, order_side=\"OPEN\"):\n","\n","    strat_version = config.strat_version\n","\n","    res_df = wave_range_v6(res_df, config.loc_set.point.tp_period1, config.loc_set.point.tp_period2, ltf_df=None, touch_period=50)\n","    res_df = wave_range_v6(res_df, config.loc_set.point.epout_period1, config.loc_set.point.epout_period2, ltf_df=None, touch_period=50)\n","    \n","    # res_df = dc_level(res_df, '5T', 1)\n","    # res_df = bb_level(res_df, '5T', 1)\n","    # res_df = st_level(res_df, '5T', 1)\n","\n","    # res_df = dc_level(res_df, '15T', 1)\n","    # res_df = bb_level(res_df, '15T', 1)\n","    # res_df = dtk_plot(res_df, dtk_itv2='15T', hhtf_entry=15, use_dtk_line=config.loc_set.zone.use_dtk_line, np_timeidx=np_timeidx)\n","\n","    # res_df = st_level(res_df, '15T', 1)\n","\n","    # res_df = dc_level(res_df, '30T', 1)\n","    # res_df = bb_level(res_df, '30T', 1)\n","    # res_df = st_level(res_df, '30T', 1)\n","\n","    # res_df = bb_level(res_df, 'H', 1)\n","\n","    # res_df = bb_level(res_df, '4H', 1)\n","\n","    # res_df['dc_upper_v2'.format(strat_version)] = res_df['high'].rolling(config.loc_set.zone.dc_period).max()\n","    # res_df['dc_lower_v2'.format(strat_version)] = res_df['low'].rolling(config.loc_set.zone.dc_period).min()\n","\n","    # res_df['zone_dc_upper_v2'.format(strat_version)] = res_df['high'].rolling(config.loc_set.zone.zone_dc_period).max()\n","    # res_df['zone_dc_lower_v2'.format(strat_version)] = res_df['low'].rolling(config.loc_set.zone.zone_dc_period).min()\n","\n","    if order_side in [\"OPEN\"]:\n","        h_candle_v3(res_df, '5T')\n","        h_candle_v3(res_df, '15T')\n","        h_candle_v3(res_df, 'H')\n","\n","        # candle_score_v2(res_df, 'T', unsigned=False)\n","\n","        # hc_itv = 'H'\n","        # h_candle_col = ['open_{}'.format(hc_itv), 'high_{}'.format(hc_itv), 'low_{}'.format(hc_itv), 'close_{}'.format(hc_itv)]\n","        # candle_score_v2(res_df, hc_itv, ohlc_col=h_candle_col, unsigned=False)\n","\n","    #     temp indi.    #\n","    # res_df[\"ma30_1m\"] = res_df['close'].rolling(30).mean()\n","    # res_df[\"ma60_1m\"] = res_df['close'].rolling(60).mean()\n","    # res_df = dtk_plot(res_df, dtk_itv2='15T', hhtf_entry=15, use_dtk_line=config.loc_set.zone.use_dtk_line, np_timeidx=np_timeidx)\n","\n","    return res_df\n","\n","def ep_out(res_df, config, op_idx, e_j, tp_j, np_datas, open_side):  \n","  h, l = np_datas\n","  strat_version = config.strat_version\n","  ep_out = 0\n","  \n","  if config.loc_set.zone.ep_out_tick != \"None\":\n","    if e_j - op_idx >= config.loc_set.zone.ep_out_tick:\n","      ep_out = 1\n","  \n","  if config.loc_set.zone.ei_k != \"None\":\n","    if open_side == OrderSide.SELL:      \n","      short_tp_ = res_df['short_tp_{}'.format(strat_version)].to_numpy()  # id 에 따라 dynamic 변수라 이곳에서 numpy 화 진행\n","      short_tp_gap_ = res_df['short_tp_gap_{}'.format(strat_version)].to_numpy()\n","      if l[e_j] <= short_tp_[tp_j] + short_tp_gap_[tp_j] * config.loc_set.zone.ei_k:\n","        ep_out = 1\n","    else:\n","      long_tp_ = res_df['long_tp_{}'.format(strat_version)].to_numpy()  # iloc 이 빠를까, to_numpy() 가 빠를까  # 3.94 ms --> 5.34 ms (iloc)\n","      long_tp_gap_ = res_df['long_tp_gap_{}'.format(strat_version)].to_numpy()\n","      if h[e_j] >= long_tp_[tp_j] - long_tp_gap_[tp_j] * config.loc_set.zone.ei_k:\n","        ep_out = 1\n","  \n","  return ep_out\n","\n","def ep_out_v2(res_df, config, op_idx, e_j, tp_j, np_datas, open_side):  \n","  h, l = np_datas\n","  strat_version = config.strat_version\n","  ep_out = 0\n","  \n","  if config.loc_set.zone.ep_out_tick != \"None\":\n","    if e_j - op_idx >= config.loc_set.zone.ep_out_tick:\n","      ep_out = 1\n","  \n","  if config.loc_set.zone.ei_k != \"None\":\n","    if open_side == OrderSide.SELL:      \n","      short_tp_1_ = res_df['short_tp_1_{}'.format(strat_version)].to_numpy()  # id 에 따라 dynamic 변수라 이곳에서 numpy 화 진행\n","      short_tp_0_ = res_df['short_tp_0_{}'.format(strat_version)].to_numpy()\n","      short_tp_gap_ = res_df['short_tp_gap_{}'.format(strat_version)].to_numpy()\n","      if l[e_j] <= short_tp_1_[tp_j] + short_tp_gap_[tp_j] * config.loc_set.zone.ei_k or h[e_j] >= short_tp_0_[tp_j] - short_tp_gap_[tp_j] * config.loc_set.zone.ei_k:\n","        ep_out = 1\n","    else:\n","      long_tp_1_ = res_df['long_tp_1_{}'.format(strat_version)].to_numpy()\n","      long_tp_0_ = res_df['long_tp_0_{}'.format(strat_version)].to_numpy()\n","      long_tp_gap_ = res_df['long_tp_gap_{}'.format(strat_version)].to_numpy()\n","      if h[e_j] >= long_tp_1_[tp_j] - long_tp_gap_[tp_j] * config.loc_set.zone.ei_k or l[e_j] <= long_tp_0_[tp_j] + long_tp_gap_[tp_j] * config.loc_set.zone.ei_k:\n","        ep_out = 1\n","  \n","  return ep_out\n","\n","def ep_loc_point2(res_df, config, i, out_j, point2_list, side=OrderSide.SELL):\n","  dc_upper_1T, dc_upper_15T, dc_lower_1T, dc_lower_15T, close, resi_T, sup_T, wick_score = point2_list\n","  allow_ep_in = 1\n","  if config.strat_version in ['v5_2']:\n","    if side == OrderSide.SELL:\n","      allow_ep_in *= (dc_upper_1T[i - 1] <= dc_upper_15T[i]) & \\\n","            (dc_upper_15T[i - 1] != dc_upper_15T[i])\n","    else:\n","      allow_ep_in *= (dc_lower_1T[i - 1] >= dc_lower_15T[i]) & \\\n","              (dc_lower_15T[i - 1] != dc_lower_15T[i])\n","\n","  if config.strat_version in ['v3_4']:\n","    wick_score_list = literal_eval(config.ep_set.point2.wick_score_list)\n","    if side == OrderSide.SELL:\n","      allow_ep_in *= close[i] < sup_T[i - 1]\n","      if len(wick_score_list) != 0:\n","        allow_ep_in *= wick_score[i] < -wick_score_list[0]\n","    else:\n","      allow_ep_in *= close[i] > resi_T[i - 1]\n","      if len(wick_score_list) != 0:\n","        allow_ep_in *= wick_score[i] > wick_score_list[0]\n","\n","  if allow_ep_in:\n","    out_j = i\n","  return allow_ep_in, out_j\n","\n","\n","# vectorized calc.\n","def ep_loc_v2(res_df, config, np_timeidx, show_detail=True, ep_loc_side=OrderSide.SELL):\n","    strat_version = config.strat_version\n","\n","    # ------- param init ------- #\n","    open_side = None\n","    len_df = len(res_df)\n","    mr_res = np.ones(len_df)\n","    zone_arr = np.full(len_df, 'n')\n","\n","    # ------ process 한번에 처리해서 param_check 만 ver. 별로 하면 될 것 ------ #\n","    #     => public_indi() 가 될 것\n","    #     1. 사용한 param 정보와 matching 된 data 병렬로 나열 logging 될 것\n","    tp_fee, out_fee = calc_tp_out_fee_v2(config)\n","\n","    # ------------ candle_score ------------ #    \n","    wick_score_list = literal_eval(config.loc_set.point.wick_score_list)\n","    if len(wick_score_list) != 0:\n","      score_itv_list = literal_eval(config.loc_set.point.score_itv_list)\n","      # ------ candle_score_v0 (1m initial tick 기준임) ------ #  Todo - higher timeframe 경우 back_data 사용해야함\n","      for wick_score_, score_itv_ in zip(wick_score_list, score_itv_list):\n","        wick_score = res_df['wick_score_{}'.format(score_itv_)].to_numpy()\n","        if ep_loc_side == OrderSide.SELL:\n","          mr_res *= wick_score <= -wick_score_\n","        else:\n","          mr_res *= wick_score >= wick_score_\n","    \n","    # -------------- tr_thresh -------------- #\n","    if config.loc_set.zone.short_tr_thresh != \"None\":\n","      if ep_loc_side == OrderSide.SELL:\n","        short_tr_ = res_df['short_tr_{}'.format(strat_version)].to_numpy()\n","        mr_res *= short_tr_ >= config.loc_set.zone.short_tr_thresh\n","        # mr_res *= short_tr_ <= config.loc_set.zone.short_tr_thresh\n","      else:\n","        long_tr_ = res_df['long_tr_{}'.format(strat_version)].to_numpy()\n","        mr_res *= long_tr_ >= config.loc_set.zone.long_tr_thresh\n","        # mr_res *= long_tr_ <= config.loc_set.zone.long_tr_thresh\n","\n","    # -------------- spread - independent to tr_set -------------- #\n","    if config.loc_set.zone.short_spread != \"None\":\n","      if strat_version in ['v3']:\n","        if ep_loc_side == OrderSide.SELL:\n","          bb_base_5T = res_df['bb_base_5T'].to_numpy()  # to_numpy() 는 ep_loc 에서 진행됨\n","          bb_lower_5T = res_df['bb_lower_5T'].to_numpy()\n","          mr_res *= (bb_base_5T - bb_lower_5T - tp_fee * bb_base_5T) / (bb_base_5T - bb_lower_5T + out_fee * bb_base_5T) >= config.loc_set.zone.short_spread\n","        else:\n","          bb_upper_5T = res_df['bb_upper_5T'].to_numpy()\n","          dc_lower_5T = res_df['dc_lower_5T'].to_numpy()\n","          # mr_res *= (bb_base_5T - dc_lower_5T - tp_fee * bb_upper_5T) / (bb_base_5T - dc_lower_5T + out_fee * bb_base_5T) >= config.loc_set.zone.long_spread\n","          mr_res *= (bb_upper_5T - dc_lower_5T - tp_fee * bb_upper_5T) / (bb_upper_5T - dc_lower_5T + out_fee * bb_upper_5T) >= config.loc_set.zone.long_spread\n","\n","    # ------------ rtc_zone  ------------ #\n","    # ------ dtk ------ #\n","    if config.loc_set.zone.dt_k != \"None\":\n","      # ------ dc_v2 ------ #\n","      dc_lower_v2 = res_df['dc_lower_v2'.format(strat_version)].to_numpy()\n","      short_dtk_1_ = res_df['short_dtk_1_{}'.format(strat_version)].to_numpy() - \\\n","              res_df['short_dtk_gap_{}'.format(strat_version)].to_numpy() * config.loc_set.zone.dt_k\n","      dc_upper_v2 = res_df['dc_upper_v2'.format(strat_version)].to_numpy()\n","      long_dtk_1_ = res_df['long_dtk_1_{}'.format(strat_version)].to_numpy() + \\\n","              res_df['long_dtk_gap_{}'.format(strat_version)].to_numpy() * config.loc_set.zone.dt_k\n","      if ep_loc_side == OrderSide.SELL:\n","        mr_res *= dc_lower_v2 >= short_dtk_1_\n","      else:\n","        mr_res *= dc_upper_v2 <= long_dtk_1_\n","\n","    # ------------ zone rejection  ------------ #\n","    # config 로 통제할 수 없는 rejection 은 strat_version 으로 조건문을 나눔 (lvrg_set 과 동일)\n","    if config.loc_set.zone.zone_rejection:   \n","     \n","        # ------------------ biaser ------------------ #\n","        # ------------ imbalance_ratio ------------ #\n","        if config.loc_set.zone.ir != \"None\":\n","          itv = config.loc_set.point.tf_entry\n","          itv_num = to_itvnum(itv)\n","          if ep_loc_side == OrderSide.SELL:    \n","            short_ir_ = res_df['short_ir_{}'.format(itv)].to_numpy()\n","            # short_ir_ = res_df['short_ir_{}'.format(itv)].shift(itv_num).to_numpy()\n","\n","            # mr_res *= short_ir_ >= config.loc_set.zone.ir     # greater\n","            mr_res *= short_ir_ <= config.loc_set.zone.ir   # lesser\n","          else:\n","            long_ir_ = res_df['long_ir_{}'.format(itv)].to_numpy()\n","            # long_ir_ = res_df['long_ir_{}'.format(itv)].shift(itv_num).to_numpy()\n","\n","            # mr_res *= long_ir_ >= config.loc_set.zone.ir\n","            mr_res *= long_ir_ <= config.loc_set.zone.ir\n","\n","        # ------------ body_rel_ratio ------------ #\n","        if config.loc_set.zone.brr != \"None\":\n","          body_rel_ratio_ = res_df['body_rel_ratio_{}'.format(config.loc_set.point.tf_entry)].to_numpy()\n","          mr_res *= body_rel_ratio_ >= config.loc_set.zone.brr\n","\n","        # ------ cbline (dc_base) ------ #\n","        # if strat_version in ['v3_5', '4_3', '3_51']:\n","        #   dc_base_3T = res_df['dc_base_3T'].to_numpy()\n","        #   # wave_base_ = res_df['wave_base_{}'.format(config.loc_set.point.tp_itv0)].to_numpy()\n","\n","        #   if ep_loc_side == OrderSide.SELL:\n","        #     short_base_ = res_df['short_base_{}'.format(strat_version)].to_numpy()\n","        #     mr_res *= short_base_ <= dc_base_3T\n","        #     # mr_res *= wave_base_ <= dc_base_3T\n","            \n","        #     dc_base_3T_rollmin = res_df['dc_base_3T'].rolling(config.loc_set.zone.base_roll_period).min().to_numpy()\n","        #     mr_res *= dc_base_3T_rollmin == dc_base_3T\n","        #   else:\n","        #     long_base_ = res_df['long_base_{}'.format(strat_version)].to_numpy()\n","        #     mr_res *= long_base_ >= dc_base_3T\n","        #     # mr_res *= wave_base_ >= dc_base_3T\n","            \n","        #     dc_base_3T_rollmax = res_df['dc_base_3T'].rolling(config.loc_set.zone.base_roll_period).max().to_numpy()\n","        #     mr_res *= dc_base_3T_rollmax == dc_base_3T\n","          \n","        \n","        # ------ dc_base ------ #        \n","        # if strat_version in ['4']:  # 'v3_3', 'v3_4', \n","        #   hc_itv = '5T'\n","        #   dc_itv = '5T'\n","        #   itv_num = to_itvnum(hc_itv)\n","        #   close_ = res_df['close_{}'.format(hc_itv)].shift(itv_num).to_numpy()   # 따라서 future_data 사용시, shifting 필요함\n","        #   if ep_loc_side == OrderSide.SELL:\n","        #     dc_lower_ = res_df['dc_lower_%s' % dc_itv].shift(itv_num).to_numpy()\n","        #     mr_res *= close_ < dc_lower_\n","        #   else:\n","        #     dc_upper_ = res_df['dc_upper_%s' % dc_itv].shift(itv_num).to_numpy()\n","        #     mr_res *= close_ > dc_upper_\n","        \n","        # ------ ema ------ #\n","        # if strat_version in ['v5_2']: # 'v3'\n","        #   ema_5T = res_df['ema_5T'].to_numpy()\n","        #   if ep_loc_side == OrderSide.SELL:\n","        #     mr_res *= close < ema_5T\n","        #   else:\n","        #     mr_res *= close > ema_5T\n","\n","        # ------------------ swing_middle ------------------ #\n","        # ------------ envelope ------------ #\n","        # ep_loc check 기준 idx 가 entry 기준이라는 걸 명심\n","        if strat_version in ['v3_2']:\n","          hc_itv = '15T'\n","          dc_itv = '15T'\n","          shift_num = [0, to_itvnum(hc_itv)]\n","          div_res = [1, 0]\n","          for itv_num, res in zip(shift_num, div_res):\n","            close_ = res_df['close_{}'.format(hc_itv)].shift(itv_num).to_numpy()  # close_bar timein 사용하는 경우, 특수로 shift(0) 사용가능\n","            if ep_loc_side == OrderSide.SELL:\n","              dc_lower_ = res_df['dc_lower_%s' % dc_itv].shift(itv_num).to_numpy()\n","              mr_res *= (close_ < dc_lower_) == res\n","            else:\n","              dc_upper_ = res_df['dc_upper_%s' % dc_itv].shift(itv_num).to_numpy()\n","              mr_res *= (close_ > dc_upper_) == res\n","              \n","        # ------ bb ------ #\n","        # close = res_df['close'].to_numpy()\n","\n","        # if strat_version in ['v3_3']:\n","        #   open = res_df['open'].to_numpy()\n","        #   if ep_loc_side == OrderSide.SELL:\n","        #     bb_lower_1m = res_df['bb_lower_1m'].to_numpy()\n","        #     # mr_res *= close <= bb_lower_1m\n","        #     mr_res *= open <= bb_lower_1m\n","        #   else:\n","        #     bb_upper_1m = res_df['bb_upper_1m'].to_numpy()\n","        #     # mr_res *= close >= bb_upper_1m\n","        #     mr_res *= open >= bb_upper_1m\n","\n","        if strat_version in ['4_1']:\n","          if ep_loc_side == OrderSide.SELL:\n","            bb_lower_15T = res_df['bb_lower_15T'].to_numpy()\n","            short_ep_ = res_df['short_ep_{}'.format(strat_version)].to_numpy()\n","            mr_res *= bb_lower_15T >= short_ep_\n","          else:\n","            bb_upper_15T = res_df['bb_upper_15T'].to_numpy()\n","            long_ep_ = res_df['long_ep_{}'.format(strat_version)].to_numpy()\n","            mr_res *= bb_upper_15T <= long_ep_\n","\n","        # if strat_version in ['v5_2']:\n","        #   bb_upper2_ = res_df['bb_upper2_%s' % config.loc_set.zone.bbz_itv].to_numpy()\n","        #   bb_lower2_ = res_df['bb_lower2_%s' % config.loc_set.zone.bbz_itv].to_numpy()\n","        #   if ep_loc_side == OrderSide.SELL:\n","        #     mr_res *= bb_upper2_ < close\n","        #   else:\n","        #     mr_res *= bb_lower2_ > close\n","\n","        # ------------ degree ------------ #        \n","        # ------ norm_body_ratio ------ #\n","        if config.loc_set.zone.abs_ratio != \"None\":\n","          itv = config.loc_set.point.tf_entry\n","          abs_ratio_ = res_df['abs_ratio_{}'.format(itv)].to_numpy()\n","          mr_res *= abs_ratio_ >= config.loc_set.zone.abs_ratio\n","          # mr_res *= abs_ratio_ <= config.loc_set.zone.abs_ratio\n","          \n","        # degree_list = literal_eval(config.loc_set.zone.degree_list)\n","        # if len(degree_list) != 0:\n","        # # if strat_version in ['v3_3', 'v3_4']:\n","        #   norm_close_15 = res_df['norm_close_15'].to_numpy()   # -> 이거 뭘로 만들었는지 불분명함,,\n","        #   b1_norm_close_15 = res_df['norm_close_15'].shift(15).to_numpy()\n","          \n","        #   if ep_loc_side == OrderSide.SELL:\n","        #     mr_res *= norm_close_15 <= -degree_list[0]\n","        #     # mr_res *= b1_norm_close_15 <= -degree_list[1]\n","        #   else:\n","        #     mr_res *= norm_close_15 >= degree_list[0]\n","        #     # mr_res *= b1_norm_close_15 >= degree_list[1]\n","\n","        # ------ dc ------ #        \n","        # if strat_version in ['v3_3']:\n","        #   if ep_loc_side == OrderSide.SELL:\n","        #     dc_lower_ = res_df['dc_lower_1m'].to_numpy()\n","        #     b1_dc_lower_ = res_df['dc_lower_1m'].shift(1).to_numpy()\n","        #     mr_res *= dc_lower_ < b1_dc_lower_\n","        #   else:\n","        #     dc_upper_ = res_df['dc_upper_1m'].to_numpy()\n","        #     b1_dc_upper_ = res_df['dc_upper_1m'].shift(1).to_numpy()\n","        #     mr_res *= dc_upper_ > b1_dc_upper_\n","\n","        # ------ sar ------ #\n","        # if strat_version in ['v3_3']:\n","          # sar_uptrend_3T = res_df['sar_uptrend_3T'].to_numpy()\n","          # if ep_loc_side == OrderSide.SELL:\n","          #   mr_res *= sar_uptrend_3T == 0\n","          # else:\n","          #   mr_res *= sar_uptrend_3T == 1\n","         \n","    # -------------- zoned tr_set - post_work -------------- #\n","    if config.tr_set.c_ep_gap != \"None\" or config.tr_set.t_out_gap != \"None\":\n","        #       by zone_dtk       #\n","        #         c_zone        #\n","        zone_dc_upper_v2_ = res_df['zone_dc_upper_v2'.format(strat_version)].to_numpy()\n","        long_dtk_plot_1 = res_df['long_dtk_plot_1'].to_numpy() + res_df['long_dtk_plot_gap'].to_numpy() * config.loc_set.zone.zone_dt_k\n","        zone_dc_lower_v2_ = res_df['zone_dc_lower_v2'.format(strat_version)].to_numpy()\n","        short_dtk_plot_1 = res_df['short_dtk_plot_1'].to_numpy() - res_df['short_dtk_plot_gap'].to_numpy() * config.loc_set.zone.zone_dt_k\n","        if ep_loc_side == OrderSide.SELL:\n","          zone_res = zone_dc_upper_v2_ > long_dtk_plot_1  # mr_res 와는 별개임\n","          pos = 'short'\n","        else:\n","          zone_res = zone_dc_lower_v2_ < short_dtk_plot_1\n","          pos = 'long'\n","\n","        # static 여부에 따른 vectorized adj. - dynamic 은 vectorize 불가\n","        if config.ep_set.static_ep and config.tr_set.c_ep_gap != \"None\":\n","          res_df['{}_ep_{}'.format(pos, strat_version)][zone_res] = res_df['{}_ep2_{}'.format(pos, strat_version)][zone_res]\n","        if config.out_set.static_out and config.tr_set.t_out_gap != \"None\":\n","          res_df['{}_out_{}'.format(pos, strat_version)][~zone_res] = res_df['{}_out2_{}'.format(pos, strat_version)][~zone_res]  # t_zone 에 대한 out2 setting \n","        zone_arr = np.where(zone_res == 1, 'c', 't')\n","\n","    return mr_res, zone_arr  # mr_res 의 True idx 가 open signal"]},{"cell_type":"markdown","metadata":{"id":"JjKHyqftzhD7","tags":[]},"source":["### set config (override available)"]},{"cell_type":"code","execution_count":72,"metadata":{"id":"q_4E-zH02WJy","executionInfo":{"status":"ok","timestamp":1649124768126,"user_tz":-540,"elapsed":342,"user":{"displayName":"7th June","userId":"08178289703395036410"}}},"outputs":[],"source":["#     caution : MARKET / LIMIT spelling   #\n","#      json doesn't support single quotes     #\n","\n","param_dict = \\\n","{\n","  \"strat_version\": \"3_51\",\n","  \"trader_set\": {\n","    \"run\": 1,\n","    \"df_log\": 0,\n","    \"open_index\": -1,\n","    \"complete_index\": -2,\n","    \"limit_fee\": 0.0002,\n","    \"market_fee\": 0.0004,\n","    \"initial_asset\": 3500,\n","    \"asset_changed\": 0,\n","    \"symbol\": \"ETHUSDT\",\n","    \"symbol_changed\": 0,\n","    \"itv_list\": \"['T', '5T', '15T', '30T', '4H']\",\n","    \"row_list\": \"[200, 160, 30, 25, 25]\",\n","    \"rec_row_list\": \"[250, 1100, 1, 1, 1]\",\n","    \"offset_list\": \"['1h', '1h', '1h', '1h', '1h']\",\n","    \"bar_close_second\": 59,\n","    \"realtime_term\": 0.01,\n","    \"api_retry_term\": 3,\n","    \"check_entry_sec\": 10,\n","    \"entry_execution_wait\": 60,\n","    \"breakout_qty_ratio\": 0.97,\n","    \"qty_check_term\": 30,\n","    \"exit_execution_wait\": 60,\n","    \"close_complete_term\": 5,\n","    \"save_stacked_df\": 0,\n","    \"stacked_df_exist\": 1\n","  },\n","  \"pos_set\": {\n","    \"short_inversion\": 0,\n","    \"long_inversion\": 0,\n","    \"short_ban\": 1,\n","    \"long_ban\": 0\n","  },\n","  \"loc_set\": {\n","    \"zone\": {\n","      \"short_spread\": \"None\",\n","      \"long_spread\": \"None\",\n","      \"short_tr_thresh\": \"None\",\n","      \"long_tr_thresh\": \"None\",\n","      \"ei_k\": 0.0,\n","      \"ep_out_tick\": \"None\",\n","      \"zone_rejection\": 1,\n","      \"brr\": \"None\",\n","      \"ir\": \"None\",\n","      \"abs_ratio\": \"None\",\n","      \"base_roll_period\": 50,\n","      \"degree_list\": \"[]\",\n","      \"hc_itv\": 60,  \n","      \"dtk_itv\": \"5T\",\n","      \"dt_k\": \"None\",\n","      \"dc_period\": 135,\n","      \"use_dtk_line\": 0,\n","      \"zone_dt_k\": 0.4,\n","      \"zone_dc_period\": 135\n","    },\n","    \"point\": {\n","      \"exp_itv\": \"5T\",\n","      \"tp_itv1\": \"T\",\n","      \"tp_itv0\": \"T\",\n","      \"tp_period1\": 40,\n","      \"tp_period2\": 40,\n","      \"epout_itv1\": \"T\",\n","      \"epout_itv0\": \"T\",\n","      \"epout_period1\": 20,\n","      \"epout_period2\": 40,\n","      \"tf_entry\": \"T\",\n","      \"base_gap\": 0.1,\n","      \"wick_score_list\": \"[]\",\n","      \"body_score_list\": \"[]\",\n","      \"score_itv_list\": \"[]\",      \n","      \"osc_band\": 20\n","    }\n","  },\n","  \"tr_set\": {\n","    \"tp_gap\": 0,\n","    \"decay_gap\": \"None\",\n","    \"ep_gap\": 0,\n","    \"out_gap\": 0,\n","    \"c_ep_gap\": \"None\",\n","    \"t_out_gap\": \"None\",\n","    \"bias_gap\": 0,\n","    \"bias_info_tick\": 240\n","  }, \n","  \"ep_set\": {\n","    \"entry_type\": \"LIMIT\",\n","    \"static_ep\": 1,\n","    \"point2\": {\n","      \"use_point2\": 0,\n","      \"entry_type\": \"MARKET\",\n","      \"wick_score_list\": \"[]\",\n","      \"body_score_list\": \"[]\",\n","      \"score_itv_list\": \"['T']\"\n","    }\n","  },\n","  \"tp_set\": {\n","    \"non_tp\": 0,\n","    \"static_tp\": 1,\n","    \"tp_onexec\": 0,\n","    \"decay_term\": 60,\n","    \"p_ranges\": \"[1]\",\n","    \"p_qty\": \"[1]\"\n","  },\n","  \"out_set\": {\n","    \"hl_out\": 1,\n","    \"static_out\": 1,\n","    \"out_onexec\": 0,\n","    \"tf_exit\": \"None\",\n","    \"rsi_exit\": 0\n","  },\n","  \"lvrg_set\": {\n","    \"leverage\": 2,\n","    \"static_lvrg\": 0,\n","    \"allow_float\": 1,\n","    \"target_pct\": 0.01,\n","    \"lvrg_rejection\": 0\n","  }\n","}\n","\n","config = EasyDict(param_dict)\n","# param_json = json.dumps(param_dict, indent=2)"]},{"cell_type":"markdown","metadata":{"id":"dzla8i9_ysmP","jp-MarkdownHeadingCollapsed":true,"tags":[]},"source":["#### save config"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"FlNGKvW_w2za"},"outputs":[],"source":["config_name = \"config_v5_2.1220_candlejson\"\n","# config_name = \"config_v3.json\"\n","cfg_full_path = os.path.join(current_path, \"config\", config_name)\n","\n","\n","with open(cfg_full_path, 'w') as cfg:\n","    json.dump(config1, cfg, indent=2)\n","    print(\"{} dumped !\".format(cfg_full_path))"]},{"cell_type":"markdown","metadata":{"id":"rLI8unIyroiC","tags":[]},"source":["## run"]},{"cell_type":"code","source":["funcs = [ep_out_v2, ep_loc_point2, lvrg_set]\n","# funcs = [ep_out, ep_loc_point2, lvrg_set]\n","\n","id_idx_list = [0]  # ID_arr 에서 import 할 id_idx 선택\n","public_override = 1\n","utils_override = 1\n","config_override = 1\n","\n","# ------ config_list 와 같은 org_var 에 override 하는거 다시 생각하기 ------ #\n","ID_list = ID_arr[id_idx_list]\n","utils_list = utils_arr[id_idx_list]\n","config_list = config_arr[id_idx_list]\n","\n","if config_override or utils_override:\n","  assert len(config_list) == 1\n","  if config_override:\n","    config_list[0] = config\n","    ID_list[0] = config.strat_version\n","  \n","config = config_list[0]  # base config = config_list[0]\n","tp_fee, out_fee = calc_tp_out_fee_v2(config)   # -> rev_pr 때문에 일단 이곳에도 선언함\n","\n","# ------- inversion set ------- #\n","inversion = 0\n","fdist_thresh = 1\n","# ------- plot param ------- #\n","show_detail = 0\n","# ------- temp param ------- #\n","allow_osc_touch = 0\n","rsi_gap = 5\n","\n","# ------- just printing config ------- #\n","# ['strat_version', 'pos_set', 'loc_set', 'tr_set', 'ep_set', 'tp_set', 'out_set', 'lvrg_set']\n","_ = [print(json.dumps(config[key_], indent=1), end=' ') for key_ in ['strat_version', 'loc_set', 'tr_set', 'ep_set', 'tp_set', 'out_set', 'lvrg_set']]"],"metadata":{"id":"qBJfPsmJzVIr","executionInfo":{"status":"ok","timestamp":1649124770500,"user_tz":-540,"elapsed":349,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"afc01bf2-b648-41a3-f317-759b29a38b91"},"execution_count":73,"outputs":[{"output_type":"stream","name":"stdout","text":["\"3_51\" {\n"," \"zone\": {\n","  \"short_spread\": \"None\",\n","  \"long_spread\": \"None\",\n","  \"short_tr_thresh\": \"None\",\n","  \"long_tr_thresh\": \"None\",\n","  \"ei_k\": 0.0,\n","  \"ep_out_tick\": \"None\",\n","  \"zone_rejection\": 1,\n","  \"brr\": \"None\",\n","  \"ir\": \"None\",\n","  \"abs_ratio\": \"None\",\n","  \"base_roll_period\": 50,\n","  \"degree_list\": \"[]\",\n","  \"hc_itv\": 60,\n","  \"dtk_itv\": \"5T\",\n","  \"dt_k\": \"None\",\n","  \"dc_period\": 135,\n","  \"use_dtk_line\": 0,\n","  \"zone_dt_k\": 0.4,\n","  \"zone_dc_period\": 135\n"," },\n"," \"point\": {\n","  \"exp_itv\": \"5T\",\n","  \"tp_itv1\": \"T\",\n","  \"tp_itv0\": \"T\",\n","  \"tp_period1\": 40,\n","  \"tp_period2\": 40,\n","  \"epout_itv1\": \"T\",\n","  \"epout_itv0\": \"T\",\n","  \"epout_period1\": 20,\n","  \"epout_period2\": 40,\n","  \"tf_entry\": \"T\",\n","  \"base_gap\": 0.1,\n","  \"wick_score_list\": \"[]\",\n","  \"body_score_list\": \"[]\",\n","  \"score_itv_list\": \"[]\",\n","  \"osc_band\": 20\n"," }\n","} {\n"," \"tp_gap\": 0,\n"," \"decay_gap\": \"None\",\n"," \"ep_gap\": 0,\n"," \"out_gap\": 0,\n"," \"c_ep_gap\": \"None\",\n"," \"t_out_gap\": \"None\",\n"," \"bias_gap\": 0,\n"," \"bias_info_tick\": 240\n","} {\n"," \"entry_type\": \"LIMIT\",\n"," \"static_ep\": 1,\n"," \"point2\": {\n","  \"use_point2\": 0,\n","  \"entry_type\": \"MARKET\",\n","  \"wick_score_list\": \"[]\",\n","  \"body_score_list\": \"[]\",\n","  \"score_itv_list\": \"['T']\"\n"," }\n","} {\n"," \"non_tp\": 0,\n"," \"static_tp\": 1,\n"," \"tp_onexec\": 0,\n"," \"decay_term\": 60,\n"," \"p_ranges\": \"[1]\",\n"," \"p_qty\": \"[1]\"\n","} {\n"," \"hl_out\": 1,\n"," \"static_out\": 1,\n"," \"out_onexec\": 0,\n"," \"tf_exit\": \"None\",\n"," \"rsi_exit\": 0\n","} {\n"," \"leverage\": 2,\n"," \"static_lvrg\": 0,\n"," \"allow_float\": 1,\n"," \"target_pct\": 0.01,\n"," \"lvrg_rejection\": 0\n","} "]}]},{"cell_type":"code","source":["# ------ slicing res_df ------ #\n","res_df = res_df_.loc[pd.to_datetime(\"2020-09-05 00:00:59.999\"):] # pd.to_datetime(\"2022-01-10 00:00:59.999\"), pd.to_datetime(\"2021-10-04 02:39:59.999000\")\n","\n","np_timeidx = np.array([intmin_np(date_) for date_ in res_df.index.to_numpy()])\n","\n","# ------------ public_indi ------------ # - 딱히 반복될 이유가 없는 phase - annot. 달때, why 까지 적어주면 좋음\n","start_0 = time.time()\n","if public_override:\n","    res_df = public_indi(res_df, config, np_timeidx)  # 현재 대부분의 시간은 h_candle 에서 소비되고 있음\n","else:\n","    res_df = utils_public.public_indi(res_df, config, np_timeidx)\n","print(\"public_indi elapsed time :\", time.time() - start_0)\n","\n","# ------------ make data_list ------------ # - 반복될 이유가 없는 phase - public_indo 에 종속\n","start_0 = time.time()\n","ohlc_cols = ['open', 'high', 'low', 'close']\n","ohlc_list = [res_df[col_].to_numpy() for col_ in ohlc_cols]\n","point2_cols = ['dc_upper_T', 'dc_upper_15T', 'dc_lower_T', 'dc_lower_15T', 'close', 'resi_T', 'sup_T'] #+ ['wick_score_{}'.format(s_itv) for s_itv in literal_eval(config.ep_set.point2.score_itv_list)]\n","point2_list = [res_df[col_].to_numpy() for col_ in point2_cols]\n","market_data_cols = ['close', 'bb_lower_5T', 'bb_upper_5T', 'rsi_T', 'haopen', 'hahigh', 'halow', 'haclose']   # Todo - public_indi 이전에 해야할지도 모름\n","market_data_list = [res_df[col_].to_numpy() for col_ in market_data_cols]\n","print(\"make data_list elapsed time :\", time.time() - start_0)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"WstWVNihCNH8","executionInfo":{"status":"ok","timestamp":1649126593330,"user_tz":-540,"elapsed":4242,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"d7df37c2-72e4-4c7b-df4d-06d570ab1a42"},"execution_count":91,"outputs":[{"output_type":"stream","name":"stdout","text":["public_indi elapsed time : 3.5564258098602295\n","make data_list elapsed time : 0.0009326934814453125\n"]}]},{"cell_type":"markdown","source":["### idep_plot"],"metadata":{"id":"RqRF1eyZ0xBL"}},{"cell_type":"code","source":["# ------ edit utils config ------ #\n","# config_list[0].loc_set.point.epout_period1 = 20\n","# config_list[0].loc_set.point.epout_period2 = 20\n","# config_list[0].loc_set.point.base_gap = -0.0\n","config_list[0].tr_set.tp_gap = 0.5\n","# config_list[0].tr_set.ep_gap = 0.0\n","config_list[0].tr_set.out_gap = 0\n","# config_list[0].tr_set.bias_gap = 1.5\n","config_list[0].tr_set.bias_info_tick = 240"],"metadata":{"id":"_iYcJk8nK8Yq","executionInfo":{"status":"ok","timestamp":1649124777282,"user_tz":-540,"elapsed":5,"user":{"displayName":"7th June","userId":"08178289703395036410"}}},"execution_count":75,"outputs":[]},{"cell_type":"code","source":["if utils_override:   # 현재, utils_override 하는 경우 1개의 ID 만 허용함 \n","  start_0 = time.time()\n","  res_df = enlist_rtc(res_df, config, np_timeidx)\n","  print(\"enlist_rtc elapsed time :\", time.time() - start_0)\n","  start_0 = time.time()\n","  res_df = enlist_tr(res_df, config, np_timeidx)    # 36995.0 -> 152766.0\n","  print(\"enlist_tr elapsed time :\", time.time() - start_0)\n","else:\n","    start_0 = time.time()\n","    for utils_, config_ in zip(utils_list, config_list):\n","        res_df = utils_.enlist_rtc(res_df, config_, np_timeidx)\n","        res_df = utils_.enlist_tr(res_df, config_, np_timeidx)\n","    print(\"elapsed time :\", time.time() - start_0)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"iI39YI_5GguK","executionInfo":{"status":"ok","timestamp":1649126826526,"user_tz":-540,"elapsed":396,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"516d2b39-fbbb-405a-f19e-95d513b76c59"},"execution_count":99,"outputs":[{"output_type":"stream","name":"stdout","text":["enlist_rtc elapsed time : 0.04233360290527344\n","12061\n","2405\n","2405\n","2405\n","enlist_tr elapsed time : 0.21681809425354004\n"]}]},{"cell_type":"code","source":["# ------ edit loc_set config ------ #\n","# config_list[0].loc_set.zone.brr = 20 # \"None\" 0.8\n","# config_list[0].loc_set.zone.ir = \"None\" # \"None\" 0.8\n","# # config_list[0].loc_set.zone.abs_ratio = \"None\"  # 0.7\n","# config_list[0].loc_set.zone.short_tr_thresh = \"None\" #  0.8 # # 0.7 # tr_thresh 엄청 민감함\n","# config_list[0].loc_set.zone.long_tr_thresh = \"None\"#  0.8 ## 0.7\n","# # config_list[0].loc_set.zone.base_roll_period = 60"],"metadata":{"id":"gfDSOGMd91rE"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["open_info_df = get_open_info_df(ep_loc_v2, res_df, np_timeidx, ID_list, config_list, id_idx_list)  # --> point * dur. 관련 (loc_set) param 에 종속 (open_info 가 변경되는게 아니라면, 재실행할 필요없음)"],"metadata":{"id":"9DPgykxQ92mU","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1649126829506,"user_tz":-540,"elapsed":1362,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"00e1f3f8-2db0-4ba5-98e6-fa88e05d4813"},"execution_count":100,"outputs":[{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9573404788970947\n"]}]},{"cell_type":"code","source":["# ------ edit entry & exit (ep, tp, out, ..) config ------ #\n","# config_list[0].loc_set.zone.ei_k = 0.0\n","# config_list[0].loc_set.zone.ep_out_tick = 10\n","# # config_list[0].ep_set.point2.use_point2 = 1\n","# # config_list[0].ep_set.point2.entry_type = \"LIMIT\"\n","# # config_list[0].ep_set.point2.wick_score_list = str([])\n","# # config_list[0].tp_set.static_tp = 1\n","# # config_list[0].tp_set.non_tp = 0 # 0 1\n","# config_list[0].tp_set.p_ranges = \"[1]\"\n","# config_list[0].tp_set.p_qty = \"[1]\"\n","# # config_list[0].tp_set.p_ranges = \"[0.33, 0.66, 1]\"\n","# # config_list[0].tp_set.p_qty = \"[0.25, 0.25, 0.5]\"\n","# # config_list[0].tp_set.p_ranges = \"[0.2, 1]\"\n","# # config_list[0].tp_set.p_qty = \"[0.2, 0.8]\"\n","# # config_list[0].out_set.hl_out = 1\n","# # config_list[0].out_set.tf_exit = \"None\" # 15 \"None\"\n","# config_list[0].lvrg_set.leverage = 3\n","# config_list[0].lvrg_set.static_lvrg = 0\n","# config_list[0].lvrg_set.target_pct = 0.01\n","# config_list[0].lvrg_set.allow_float = 1\n","# config_list[0].lvrg_set.lvrg_rejection = 1"],"metadata":{"id":"KqVkg236t_f2"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["test_ratio = 0.0\n","short_pr, short_obj, short_lvrg_arr, short_fee_arr, short_tpout_arr, short_bias_arr, short_point1_arr, long_pr, long_obj, long_lvrg_arr, long_fee_arr, long_tpout_arr, long_bias_arr, long_point1_arr = \\\n","get_res_v2(res_df, open_info_df, ohlc_list, point2_list, market_data_list, config_list, np_timeidx, funcs, test_ratio=test_ratio, plot_is=1, signi=False)   # open 이 많을 수록 en_ex_pairing elapsed time : 11.58370590209961"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":625},"id":"HHq6cr9GPBot","outputId":"5287baa2-ad31-4960-e820-8e7043015136","executionInfo":{"status":"ok","timestamp":1649126832012,"user_tz":-540,"elapsed":2507,"user":{"displayName":"7th June","userId":"08178289703395036410"}}},"execution_count":101,"outputs":[{"output_type":"stream","name":"stdout","text":["en_ex_pairing elapsed time : 0.4106106758117676\n","short_obj.shape : (569, 5)\n","long_obj.shape : (469, 5)\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1728x576 with 6 Axes>"],"image/png":"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\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["idep_plot_v9 elapsed time : 1.4502317905426025\n"]}]},{"cell_type":"markdown","source":["### statistics (stem 별로 진행)"],"metadata":{"id":"n6gc7lERC4VE"}},{"cell_type":"code","source":["strat_version = config.strat_version\n","\n","short_open_i = short_obj[-1].astype(int)\n","long_open_i = long_obj[-1].astype(int)\n","\n","short_open_tp_1 = res_df['short_tp_1_{}'.format(strat_version)].to_numpy()[short_open_i]\n","long_open_tp_1 = res_df['long_tp_1_{}'.format(strat_version)].to_numpy()[long_open_i]\n","\n","short_open_tp_gap = res_df['short_tp_gap_{}'.format(strat_version)].to_numpy()[short_open_i]  # use open_i\n","long_open_tp_gap = res_df['long_tp_gap_{}'.format(strat_version)].to_numpy()[long_open_i]\n","\n","short_open_epout_0 = res_df['short_epout_0_{}'.format(strat_version)].to_numpy()[short_open_i]\n","long_open_epout_0 = res_df['long_epout_0_{}'.format(strat_version)].to_numpy()[long_open_i]\n","\n","short_open_epout_gap = res_df['short_epout_gap_{}'.format(strat_version)].to_numpy()[short_open_i]  # use open_i\n","long_open_epout_gap = res_df['long_epout_gap_{}'.format(strat_version)].to_numpy()[long_open_i]\n","\n","# ------ pairing 된 en, ex_idx 기준으로 survey 진행 ------ #\n","# 0. high, low (exit_done 까지의) -> partial (tpg) 과 outg survey 목표\n","#   a. short -> tpg - low, outg - high\n","#   b. long -> tpg - high, outg - low\n","short_max_tpg = get_max_tpg_v2(\"SELL\", ohlc_list, short_pr, short_obj[:4], short_open_tp_1, short_open_tp_gap)\n","long_max_tpg = get_max_tpg_v2(\"BUY\", ohlc_list, long_pr, long_obj[:4], long_open_tp_1, long_open_tp_gap)\n","\n","# ------ 0. tp 까지 도달하는 최소 idx 도출, en_idx 부터 ------ #\n","#   a. bias_info_tick 의 limit 을 정해주지 않으면 굉장히 길어질 수 있다고 봄\n","# short_max_outg, short_outg_open_idx = get_max_outg_v2(\"SELL\", config, ohlc_list, short_obj, short_tpout_arr, short_open_epout_0, short_open_epout_gap)\n","# long_max_outg, long_outg_open_idx = get_max_outg_v2(\"BUY\", config, ohlc_list, long_obj, long_tpout_arr, long_open_epout_0, long_open_epout_gap)\n","short_max_outg, short_open_idx, short_true_open_idxth = get_max_outg_v3(\"SELL\", config, ohlc_list, short_obj, short_tpout_arr, short_open_epout_0, short_open_epout_gap)\n","long_max_outg, long_open_idx, long_true_open_idxth = get_max_outg_v3(\"BUY\", config, ohlc_list, long_obj, long_tpout_arr, long_open_epout_0, long_open_epout_gap)\n","\n","current_tpg= config.tr_set.tp_gap\n","current_outg = config.tr_set.out_gap"],"metadata":{"id":"HHjIdn2MC4VE"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["#### tpg survey for partial"],"metadata":{"id":"Arnb-kXlC4VF"}},{"cell_type":"code","source":["# 1. outg 는 partial 을 위한 histogram 작성 진행\n","# 현재, outg 내부에는 tp 한것과 out 한것이 공존하는 상태\n","titles = ['outg', 'tpg']\n","short_max_datas = [short_max_outg[short_true_open_idxth], short_max_tpg]\n","long_max_datas = [long_max_outg[long_true_open_idxth], long_max_tpg]\n","\n","# titles = ['tpg']\n","# short_max_datas = [short_max_tpg]\n","# long_max_datas = [long_max_tpg]\n","\n","plt.style.use(['dark_background', 'fast'])\n","fig = plt.figure(figsize=(12, 8))\n","nrows, ncols = 2, 1\n","gs = gridspec.GridSpec(nrows=nrows,  # row 부터 index 채우고 col 채우는 순서임 (gs_idx)\n","                        ncols=ncols\n","                        )\n","  \n","for ings_idx, (title, short_max_data, long_max_data) in enumerate(zip(titles, short_max_datas, long_max_datas)):\n","\n","  inner_gs = gs[ings_idx].subgridspec(nrows=1, ncols=2)\n","  if ings_idx == 0:\n","    axvline = current_outg\n","    title_add = 'true_' + title\n","  else:\n","    axvline = current_tpg\n","    title_add = 'false_' + title\n","\n","  print(len(long_max_data))\n","\n","  short_plot_idx = short_max_data <= axvline\n","  long_plot_idx = long_max_data <= axvline\n","\n","  print(np.sum(long_plot_idx))    \n","\n","  short_plot_idx *= ~np.isnan(short_max_data)\n","  long_plot_idx *= ~np.isnan(long_max_data)  # nan 과 inf 때문에 이 방식 채택\n","\n","  print(np.sum(long_plot_idx))\n","\n","  short_plot_idx *= ~np.isinf(short_max_data)\n","  long_plot_idx *= ~np.isinf(long_max_data)  # nan 과 inf 때문에 이 방식 채택\n","  \n","  print(np.sum(long_plot_idx))\n","    \n","  plt.subplot(inner_gs[0])\n","  kde_plot_v2(*np.unique(short_max_data[short_plot_idx], return_counts=True))\n","  plt.title('short_' + title_add)  \n","  plt.axvline(axvline, color='red', linewidth=3)\n","\n","  plt.subplot(inner_gs[1])\n","  kde_plot_v2(*np.unique(long_max_data[long_plot_idx], return_counts=True))\n","  plt.title('long_' + title_add)\n","  plt.axvline(axvline, color='red', linewidth=3)\n","\n","  print()\n","\n","# plt.suptitle(title)\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":742},"executionInfo":{"status":"ok","timestamp":1648961853469,"user_tz":-540,"elapsed":1722,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"80de461f-b275-4691-dff6-29d69e04a9be","id":"jHh0uFkXC4VF"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["298\n","291\n","291\n","291\n","pkx : [-0.36262876  0.30104668  0.7674132   1.01853363]\n","pkx : [-0.3203643   0.42597657  0.82785242  1.05749577  1.24886522]\n","\n","172\n","172\n","172\n","172\n","pkx : [-0.41165768 -0.05867849  0.22598215  0.40816496]\n","pkx : [-0.32345182 -0.00697044  0.19874245  0.37280721]\n","\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 864x576 with 4 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["#### outg survey for precision (eploc vars. dependency)"],"metadata":{"id":"xivLUsSGC4VF"}},{"cell_type":"code","source":["# ------------ dependent vars. ------------ #\n","# res_df 에 존재하는 col 는 모두 사용가능함\n","# ------ 1. 도출한 outg 와 vars. pairing 진행 (by valid_idx) ------ #\n","devided_cols = ['tr_{}'.format(strat_version), 'ir_5T']  # tr has the priority\n","public_cols = ['abs_ratio_5T', 'rel_ratio_5T', 'body_rel_ratio_5T']\n","\n","short_datas = [res_df['short_' + col].to_numpy() for col in devided_cols] + [res_df[col].to_numpy() for col in public_cols]\n","long_datas = [res_df['long_' + col].to_numpy() for col in devided_cols] + [res_df[col].to_numpy() for col in public_cols]\n","\n","titles = devided_cols + public_cols"],"metadata":{"id":"gnSvYKIzC4VF"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["plot_outg_range = (-1, 10)\n","plot_data_range = (-10, 100)\n","\n","plt.style.use(['dark_background', 'fast'])\n","fig = plt.figure(figsize=(12, 18))\n","nrows, ncols = len(short_datas), 1\n","gs = gridspec.GridSpec(nrows=nrows,  # row 부터 index 채우고 col 채우는 순서임 (gs_idx)\n","                        ncols=ncols\n","                        )\n","\n","for ings_idx, (title, short_data, long_data) in enumerate(zip(titles, short_datas, long_datas)):\n","  inner_gs = gs[ings_idx].subgridspec(nrows=1, ncols=2)\n","\n","  print(len(long_max_outg))\n","\n","  short_plot_idx = (plot_outg_range[0] <= short_max_outg) & (short_max_outg <= plot_outg_range[1])\n","  long_plot_idx = (plot_outg_range[0] <= long_max_outg) & (long_max_outg <= plot_outg_range[1])  # nan 과 inf 때문에 이 방식 채택\n","\n","  print(np.sum(long_plot_idx))\n","\n","  short_open_data = short_data[short_open_idx]\n","  long_open_data = long_data[long_open_idx]\n","  \n","  short_plot_idx *= (plot_data_range[0] <= short_open_data) * (short_open_data <= plot_data_range[1])\n","  long_plot_idx *= (plot_data_range[0] <= long_open_data) * (long_open_data <= plot_data_range[1]) # nan 과 inf 때문에 이 방식 채택\n","\n","  short_plot_idx *= ~np.isnan(short_open_data)\n","  long_plot_idx *= ~np.isnan(long_open_data)  # nan 과 inf 때문에 이 방식 채택\n","\n","  print(np.sum(long_plot_idx))\n","\n","  short_plot_idx *= ~np.isinf(short_open_data)\n","  long_plot_idx *= ~np.isinf(long_open_data)  # nan 과 inf 때문에 이 방식 채택\n","\n","  print(np.sum(long_plot_idx))\n","\n","  short_true_idx = short_plot_idx * short_true_open_idxth\n","  long_true_idx = long_plot_idx * long_true_open_idxth\n","  \n","  short_false_idx = short_plot_idx * ~short_true_open_idxth\n","  long_false_idx = long_plot_idx * ~long_true_open_idxth\n","\n","  plt.subplot(inner_gs[0])\n","  # ------ true_bias ------ #\n","  x, y = short_max_outg[short_true_idx].ravel(), short_open_data[short_true_idx].ravel()  \n","  plt.scatter(x, y, color='white', alpha=0.5)\n","  # ------ false_bias ------ #\n","  x, y = short_max_outg[short_false_idx].ravel(), short_open_data[short_false_idx].ravel()\n","  plt.scatter(x, y, color='fuchsia', alpha=0.3)\n","  plt.axvline(current_outg, color='red', linewidth=3)\n","  plt.title(\"{} coef : {:0.3f}\".format(title, np.corrcoef(-x, y)[0, 1]))\n","\n","  plt.subplot(inner_gs[1])    \n","  # ------ true_bias ------ #\n","  x, y = long_max_outg[long_true_idx].ravel(), long_open_data[long_true_idx].ravel()  \n","  plt.scatter(x, y, color='white', alpha=0.5)\n","  # ------ false_bias ------ #\n","  x, y = long_max_outg[long_false_idx].ravel(), long_open_data[long_false_idx].ravel()\n","  plt.scatter(x, y, color='fuchsia', alpha=0.3)\n","  plt.axvline(current_outg, color='red', linewidth=3)\n","  plt.title(\"{} coef : {:0.3f}\".format(title, np.corrcoef(-x, y)[0, 1]))\n","\n","  print()  \n","\n","# plt.suptitle(title)\n","plt.show()\n","# print()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"status":"ok","timestamp":1648975514542,"user_tz":-540,"elapsed":4455,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"df161b9f-c507-4a23-fbb3-6779c72f65ad","id":"nX9TpLcvFu7T"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["3366\n","2370\n","2370\n","2370\n","\n","3366\n","2370\n","1224\n","1224\n","\n","3366\n","2370\n","2370\n","2370\n","\n","3366\n","2370\n","2370\n","2370\n","\n","3366\n","2370\n","2365\n","2365\n","\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 864x1296 with 10 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","metadata":{"jp-MarkdownHeadingCollapsed":true,"tags":[],"id":"EtjwB7Qk-Grj"},"source":["### significance_v3"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"outputId":"a39cdb97-5848-433c-8d77-38a3ed06e2c8","id":"oVifICO4-Grk","executionInfo":{"status":"ok","timestamp":1648958816711,"user_tz":-540,"elapsed":55240,"user":{"displayName":"7th June","userId":"08178289703395036410"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9365532398223877\n","en_ex_pairing elapsed time : 1.2399144172668457\n","short_obj.shape : (625, 5)\n","long_obj.shape : (620, 5)\n","idep_plot_v8 elapsed time : 0.06649255752563477\n","get_open_info_df elapsed time : 0.9137251377105713\n","en_ex_pairing elapsed time : 1.253389835357666\n","short_obj.shape : (624, 5)\n","long_obj.shape : (622, 5)\n","idep_plot_v8 elapsed time : 0.06859445571899414\n","get_open_info_df elapsed time : 0.9187257289886475\n","en_ex_pairing elapsed time : 1.2739830017089844\n","short_obj.shape : (624, 5)\n","long_obj.shape : (618, 5)\n","idep_plot_v8 elapsed time : 0.06598448753356934\n","get_open_info_df elapsed time : 0.915107011795044\n","en_ex_pairing elapsed time : 1.274672508239746\n","short_obj.shape : (623, 5)\n","long_obj.shape : (620, 5)\n","idep_plot_v8 elapsed time : 0.06753754615783691\n","get_open_info_df elapsed time : 0.9499776363372803\n","en_ex_pairing elapsed time : 1.27559494972229\n","short_obj.shape : (625, 5)\n","long_obj.shape : (623, 5)\n","idep_plot_v8 elapsed time : 0.06728625297546387\n","get_open_info_df elapsed time : 0.9140474796295166\n","en_ex_pairing elapsed time : 1.266042709350586\n","short_obj.shape : (623, 5)\n","long_obj.shape : (624, 5)\n","idep_plot_v8 elapsed time : 0.07513761520385742\n","get_open_info_df elapsed time : 0.9196510314941406\n","en_ex_pairing elapsed time : 1.3215289115905762\n","short_obj.shape : (625, 5)\n","long_obj.shape : (626, 5)\n","idep_plot_v8 elapsed time : 0.06602048873901367\n","get_open_info_df elapsed time : 0.9087643623352051\n","en_ex_pairing elapsed time : 1.325789213180542\n","short_obj.shape : (625, 5)\n","long_obj.shape : (624, 5)\n","idep_plot_v8 elapsed time : 0.06941676139831543\n","get_open_info_df elapsed time : 0.9145307540893555\n","en_ex_pairing elapsed time : 1.2819249629974365\n","short_obj.shape : (627, 5)\n","long_obj.shape : (624, 5)\n","idep_plot_v8 elapsed time : 0.06607747077941895\n","get_open_info_df elapsed time : 0.9155371189117432\n","en_ex_pairing elapsed time : 1.3151140213012695\n","short_obj.shape : (625, 5)\n","long_obj.shape : (627, 5)\n","idep_plot_v8 elapsed time : 0.06716775894165039\n","get_open_info_df elapsed time : 0.9286034107208252\n","en_ex_pairing elapsed time : 1.5677604675292969\n","short_obj.shape : (625, 5)\n","long_obj.shape : (625, 5)\n","idep_plot_v8 elapsed time : 0.0672004222869873\n","get_open_info_df elapsed time : 0.9547336101531982\n","en_ex_pairing elapsed time : 1.325855016708374\n","short_obj.shape : (625, 5)\n","long_obj.shape : (627, 5)\n","idep_plot_v8 elapsed time : 0.07309412956237793\n","get_open_info_df elapsed time : 0.9615001678466797\n","en_ex_pairing elapsed time : 1.3334577083587646\n","short_obj.shape : (623, 5)\n","long_obj.shape : (628, 5)\n","idep_plot_v8 elapsed time : 0.07037639617919922\n","get_open_info_df elapsed time : 0.9222204685211182\n","en_ex_pairing elapsed time : 1.3463475704193115\n","short_obj.shape : (623, 5)\n","long_obj.shape : (628, 5)\n","idep_plot_v8 elapsed time : 0.06558609008789062\n","get_open_info_df elapsed time : 0.9100527763366699\n","en_ex_pairing elapsed time : 1.4088802337646484\n","short_obj.shape : (623, 5)\n","long_obj.shape : (627, 5)\n","idep_plot_v8 elapsed time : 0.07866692543029785\n","get_open_info_df elapsed time : 0.9560835361480713\n","en_ex_pairing elapsed time : 1.2978997230529785\n","short_obj.shape : (623, 5)\n","long_obj.shape : (627, 5)\n","idep_plot_v8 elapsed time : 0.06794023513793945\n","get_open_info_df elapsed time : 0.9438843727111816\n","en_ex_pairing elapsed time : 1.306882381439209\n","short_obj.shape : (623, 5)\n","long_obj.shape : (628, 5)\n","idep_plot_v8 elapsed time : 0.06725192070007324\n","get_open_info_df elapsed time : 0.9524247646331787\n","en_ex_pairing elapsed time : 1.3445143699645996\n","short_obj.shape : (624, 5)\n","long_obj.shape : (628, 5)\n","idep_plot_v8 elapsed time : 0.06943869590759277\n","get_open_info_df elapsed time : 0.9644474983215332\n","en_ex_pairing elapsed time : 1.3590984344482422\n","short_obj.shape : (624, 5)\n","long_obj.shape : (628, 5)\n","idep_plot_v8 elapsed time : 0.06768083572387695\n","get_open_info_df elapsed time : 0.9351387023925781\n","en_ex_pairing elapsed time : 1.3340232372283936\n","short_obj.shape : (625, 5)\n","long_obj.shape : (630, 5)\n","idep_plot_v8 elapsed time : 0.06850004196166992\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1728x576 with 36 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["# from google.colab import output\n","# ------------ survey param ------------ #\n","# itv_num_list = [1, 3, 5, 15]\n","# itv_list = ['15m', '30m', '1h', '4h']\n","# itv_list = ['3m', '5m', '15m', '30m', '1h', '4h']\n","val_list = np.arange(0.5, -1.5, -0.1)     # prcn 1\n","# val_list = np.arange(0.0, 1.5, 0.03)  # prcn 2\n","# val_list = np.arange(-0.695, -0.75, -0.005)    # prcn 3\n","# val_list = np.arange(0.944, 0.945, 0.0001)    # prcn 4\n","# val_list = np.arange(70, 80, 1)   # prcn -1\n","# val_list = np.arange(200, 180, -5)   # prcn -2\n","\n","# ------------ get survey_res ------------ #\n","result = []\n","res_shape = (3, 12)  # short, long, both x data\n","config_list_copy = copy.deepcopy(config_list)\n","for set_val in val_list:\n","  # ------------ open 결정 이전의 인자값 ------------ #\n","  # ------ point * mr_res ------ #\n","  # config_list_copy[0].loc_set.zone.degree_list = set_val\n","  # config_list_copy[0].loc_set.point2.wick_score_list = str([set_val])\n","  # config_list_copy[0].loc_set.zone.ir = set_val  \n","  # config_list_copy[0].loc_set.zone.abs_ratio = set_val  \n","\n","  # ------------ open 결정 이후의 인자값 ------------ #\n","  # ------ utils ------ #\n","  # config_list_copy[0].tr_set.out_gap = set_val  \n","  # config_list_copy[0].tr_set.ep_gap = set_val \n","\n","  # ------ entry, exit (ep, tp, out vars.) ------ #\n","  config_list_copy[0].loc_set.zone.ei_k = set_val\n","  # config_list_copy[0].ep_set.ep_out_tick = set_val  \n"," \n","  for utils_, config_ in zip(utils_list, config_list_copy):\n","    # enlist_rtc(res_df, config_, np_timeidx)\n","    enlist_tr(res_df, config_, np_timeidx)\n","  open_info_df = get_open_info_df(ep_loc_v2, res_df, np_timeidx, ID_list, config_list_copy, id_idx_list)   # point * mr_res 이기 때문에 utils_tr & rtc 의 영향을 충분히 받음\n","\n","  try:\n","    result.append(get_res(res_df, open_info_df, ohlc_list, point2_list, market_data_list, config_list_copy, np_timeidx, funcs, test_ratio=test_ratio, plot_is=1, signi=True))\n","  except:\n","    result.append(np.full(res_shape, np.nan))\n","    # pass\n","\n","survey_res_list = [np.array(result)[:, s_i::3] for s_i in range(3)]   # 3 for s, l, b\n","# short_res, long_res, both_res = survey_res_list\n","\n","# ------------ plot survey_res ------------ #\n","title_list = [\"short\", \"long\", \"both\"]\n","sub_title_list = ['prcn', 'rc', 'len_pr', 'dpf', 'wr', 'sr', 'acc_pr', 'sum_pr', 'min_pr', 'liqd', 'acc_mdd', 'sum_mdd']\n","space_ = \" \" * 120\n","\n","fig = plt.figure(figsize=(24, 8))\n","plt.style.use('dark_background')\n","gs = gridspec.GridSpec(nrows=1,\n","                        ncols=3,\n","                        # height_ratios=[1, 1, 1]\n","                      )\n","# nrows, ncols, h_r = 3, 3, [1, 1, 1]\n","nrows, ncols, h_r = 3, 4, [1, 1, 1]\n","# nrows, ncols, h_r = 4, 3, [1, 1, 1, 1]\n","# if d_idx == 0:\n","# else:\n","  # nrows, ncols, h_r = 2, 2, [1, 1]\n","\n","for d_idx, (title_name, survey_res) in enumerate(zip(title_list, survey_res_list)):  \n","  inner_gs = gs[d_idx].subgridspec(nrows=nrows,\n","                        ncols=ncols,\n","                        height_ratios=h_r\n","                      )\n","  for in_idx, (data_, sub_title) in enumerate(zip(survey_res.T, sub_title_list)):\n","    plt.subplot(inner_gs[in_idx])\n","    data = data_.ravel()\n","    valid_idx = ~np.isnan(data)\n","    if np.sum(valid_idx) > 0:\n","      x, y = val_list[valid_idx], data[valid_idx]\n","      plt.plot(x, y)  # 앞에서부터 len(result) 만큼만    \n","      plt.title(sub_title + '_{:.2f}'.format(x[np.argmax(y)]))\n","    else:\n","      plt.title(sub_title)\n","\n","plt.suptitle(space_.join(title_list))\n","plt.show()\n","# print(\"\\n\")"]},{"cell_type":"markdown","source":["### legacy"],"metadata":{"id":"1GVZ03zDyU2N"}},{"cell_type":"markdown","source":["#### main_functions"],"metadata":{"id":"IWO7KkqltMFt"}},{"cell_type":"code","source":["def get_open_info_df(ep_loc_v2, res_df, np_timeidx, ID_list, config_list, id_idx_list):\n","  start_0 = time.time()\n","  # ------ get mr_res, zone_arr ------ #\n","  short_mr_res_obj = np.array([ep_loc_v2(res_df, config_, np_timeidx, show_detail=True, ep_loc_side=OrderSide.SELL) for config_ in config_list])\n","  long_mr_res_obj = np.array([ep_loc_v2(res_df, config_, np_timeidx, show_detail=True, ep_loc_side=OrderSide.BUY) for config_ in config_list])\n","  short_open_idx_list = [np.where(res_df['short_open_{}'.format(id)].to_numpy() * mr_res)[0] for id, mr_res in zip(ID_list, short_mr_res_obj[:, 0].astype(np.float64))]   # \"point * mr_Res\"\n","  long_open_idx_list = [np.where(res_df['long_open_{}'.format(id)].to_numpy() * mr_res)[0] for id, mr_res in zip(ID_list, long_mr_res_obj[:, 0].astype(np.float64))]  # zip 으로 zone (str) 과 묶어서 dtype 변경됨\n","\n","  # ------ open_info_arr ------ #\n","  short_side_list = [np.full(len(list_), OrderSide.SELL) for list_ in short_open_idx_list]\n","  long_side_list = [np.full(len(list_), OrderSide.BUY) for list_ in long_open_idx_list]\n","\n","  short_zone_list = [zone_res[short_open_idx] for zone_res, short_open_idx in zip(short_mr_res_obj[:, 1], short_open_idx_list)]\n","  long_zone_list = [zone_res[long_open_idx] for zone_res, long_open_idx in zip(long_mr_res_obj[:, 1], long_open_idx_list)]\n","\n","  short_id_list = [np.full(len(list_), id) for id, list_ in zip(ID_list, short_open_idx_list)]\n","  long_id_list = [np.full(len(list_), id) for id, list_ in zip(ID_list, long_open_idx_list)]\n","\n","  selected_id_idx = np.arange(len(id_idx_list))\n","  short_id_idx_list = [np.full(len(list_), id) for id, list_ in zip(selected_id_idx, short_open_idx_list)]\n","  long_id_idx_list = [np.full(len(list_), id) for id, list_ in zip(selected_id_idx, long_open_idx_list)]\n","\n","  # ------ get open_info_df ------ #\n","  #   series 만들어서 short / long 끼리 합치고 둘이 합치고, 중복은 우선 순위 정해서 제거\n","  short_open_df_list = [pd.DataFrame(index=index_, data=np.vstack((data_)).T, columns=['side', 'zone', 'id', 'id_idx']) for index_, data_ in zip(short_open_idx_list, zip(short_side_list, short_zone_list, short_id_list, short_id_idx_list))]\n","  long_open_df_list = [pd.DataFrame(index=index_, data=np.vstack((data_)).T, columns=['side', 'zone', 'id', 'id_idx']) for index_, data_ in zip(long_open_idx_list, zip(long_side_list, long_zone_list, long_id_list, long_id_idx_list))]\n","\n","  open_info_df = pd.concat(short_open_df_list + long_open_df_list)\n","  # ------ sorting + unique ------ #\n","  open_info_df.sort_index(inplace=True)\n","  # print(len(open_info_df))\n","  # print(len(open_info_df))\n","  # open_info_df.head()\n","  print(\"get_open_info_df elapsed time :\", time.time() - start_0)\n","  return open_info_df[~open_info_df.index.duplicated(keep='first')]  # 먼저 순서를 우선으로 지정  "],"metadata":{"id":"MY1csdNRLGsk"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def get_res_v2(res_df, open_info_df, ohlc_list, point2_list, market_data_list, config_list, np_timeidx, funcs, test_ratio=0.3, plot_is=True, signi=False):\n","  # ------------ make open_info_list ------------ #\n","  open_idx = open_info_df.index.to_numpy()\n","  len_df = len(res_df)\n","  s_idx = (open_idx < int(len_df * (1 - test_ratio))) == plot_is\n","  s_open_info_df = open_info_df[s_idx]\n","  s_open_idx = open_idx[s_idx]\n","\n","  open_info_list = [s_open_info_df[col_].to_numpy() for col_ in s_open_info_df.columns]\n","  side_arr, zone_arr, id_arr, id_idx_arr = open_info_list\n","\n","  # ------------ get paired_res ------------ #\n","  start_0 = time.time()\n","  paired_res = en_ex_pairing_v3(res_df, s_open_idx, open_info_list, ohlc_list, point2_list, market_data_list, config_list, np_timeidx, funcs)\n","  # valid_openi_arr, pair_idx_arr, pair_price_arr, lvrg_arr, fee_arr, tpout_arr = paired_res\n","  print(\"en_ex_pairing elapsed time :\", time.time() - start_0)  #  0.37 --> 0.3660471439361572 --> 0.21(lesser if)\n","\n","  # ------------ idep_plot ------------ #\n","  start_0 = time.time()\n","  h, l = ohlc_list[1:3]\n","  res = idep_plot_v9(len_df, config_list[0], h, l, s_open_idx, side_arr, paired_res, inversion=False, sample_ratio=1 - test_ratio, signi=signi)\n","  print(\"idep_plot_v9 elapsed time :\", time.time() - start_0)   # 1.40452 (v6) 1.4311 (v5)\n","\n","  return res"],"metadata":{"id":"eiQ36_SLLE3w","executionInfo":{"status":"ok","timestamp":1649123608679,"user_tz":-540,"elapsed":339,"user":{"displayName":"7th June","userId":"08178289703395036410"}}},"execution_count":24,"outputs":[]},{"cell_type":"code","source":["def plot_info_v5(gs, gs_idx, sample_len, tr, prcn, rc, pr, total_pr, cum_pr, liqd, leverage, title_position, fontsize):\n","  try:\n","    plt.subplot(gs[gs_idx])\n","    idep_res_obj = get_res_info_nb_v2(sample_len, pr, total_pr, cum_pr, liqd)\n","    plt.plot(cum_pr)\n","    plt.plot(idep_res_obj[-1], color='gold')\n","    if sample_len is not None:\n","      plt.axvline(sample_len, alpha=1., linestyle='--', color='#ffeb3b')\n","    # title_str = \"prcn : {:.3f} rc : {:.3f}\\n len_pr : {} dpf : {:.3f}\\n wr : {:.3f} sr : {:.3f}\\n acc_pr : {:.3f} sum_pr : {:.3f}\\n\" +\\\n","    #           \"min_pr : {:.3f} liqd : {:.3f}\\n acc_mdd : -{:.3f} sum_mdd : -{:.3f}\\n leverage {}\"\n","    # title_str = \"tr : {:.3f}\\n prcn : {:.3f}\\n rc : {:.3f}\\n len_pr : {}\\n dpf : {:.3f}\\n wr : {:.3f}\\n sr : {:.3f}\\n acc_pr : {:.3f}\\n sum_pr : {:.3f}\\n\" +\\\n","    #           \"min_pr : {:.3f}\\n liqd : {:.3f}\\n acc_mdd : -{:.3f}\\n sum_mdd : -{:.3f}\\n leverage {}\"\n","    title_str = \"tr : {:.3f}\\n prcn : {:.3f}\\n swing_bias : {:.3f}\\n len_pr : {}\\n dpf : {:.3f}\\n wr : {:.3f}\\n sr : {:.3f}\\n acc_pr : {:.3f}\\n sum_pr : {:.3f}\\n\" +\\\n","              \"min_pr : {:.3f}\\n liqd : {:.3f}\\n acc_mdd : -{:.3f}\\n sum_mdd : -{:.3f}\\n leverage {}\"\n","    plt.title(title_str.format(tr, prcn, rc, *idep_res_obj[:-1], leverage), position=title_position, fontsize=fontsize)\n","  except Exception as e:\n","    print(\"error in plot_info :\", e)\n","\n","  return gs_idx + 1"],"metadata":{"id":"8LiKwfiJ4bvM"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def idep_plot_v9(len_df, config, h, l, open_idx, side_arr, paired_res, inversion=False, sample_ratio=0.7, title_position=(0.5, 0.5), fontsize=15, signi=False):\n","    if not signi:\n","        plt.style.use(['dark_background', 'fast'])\n","        fig = plt.figure(figsize=(24, 8))\n","        gs = gridspec.GridSpec(nrows=2,  # row 몇 개\n","                               ncols=3,  # col 몇 개\n","                               height_ratios=[10, 1]\n","                               # height_ratios=[10, 10, 1]\n","                               )\n","    gs_idx = 0\n","    # plt.suptitle(key)\n","    \n","    p_ranges, p_qty = literal_eval(config.tp_set.p_ranges), literal_eval(config.tp_set.p_qty)\n","    assert np.sum(p_qty) == 1.0\n","    assert len(p_ranges) == len(p_qty)\n","\n","    if sample_ratio is not None:\n","      sample_len = int(len_df * sample_ratio)\n","    else:\n","      sample_len = len_df\n","\n","    # ------ short & long data preparation ------ #\n","    # start_0 = time.time()\n","    point1_arr, valid_openi_arr, pair_idx_arr, pair_price_arr, lvrg_arr, fee_arr, tpout_arr, bias_arr, tr_arr = paired_res    \n","    assert len(valid_openi_arr) != 0, \"assert len(valid_openi_arr) != 0\"    \n","    short_valid_openi_idx = np.where(side_arr[valid_openi_arr] == OrderSide.SELL)[0]  # valid_openi_arr 에 대한 idx, # side_arr,\n","    long_valid_openi_idx = np.where(side_arr[valid_openi_arr] == OrderSide.BUY)[0]\n","\n","    valid_open_idx = open_idx[valid_openi_arr].reshape(-1, 1)\n","\n","    short_obj = np.hstack((pair_price_arr, pair_idx_arr, valid_open_idx))[short_valid_openi_idx]\n","    long_obj = np.hstack((pair_price_arr, pair_idx_arr, valid_open_idx))[long_valid_openi_idx]\n","    both_obj = np.vstack((short_obj, long_obj))\n","    print(\"short_obj.shape :\", short_obj.shape)\n","    print(\"long_obj.shape :\", long_obj.shape)\n","\n","    short_obj, long_obj, both_obj = [np.split(obj_, 5, axis=1) for obj_ in [short_obj, long_obj, both_obj]]\n","\n","    short_point1_arr, long_point1_arr = [point1_arr[openi_idx_].reshape(-1, 1) for openi_idx_ in [short_valid_openi_idx, long_valid_openi_idx]]\n","    short_lvrg_arr, long_lvrg_arr = [lvrg_arr[openi_idx_].reshape(-1, 1) for openi_idx_ in [short_valid_openi_idx, long_valid_openi_idx]]\n","    short_fee_arr, long_fee_arr = [fee_arr[openi_idx_].reshape(-1, 1) for openi_idx_ in [short_valid_openi_idx, long_valid_openi_idx]]\n","    short_tpout_arr, long_tpout_arr = [tpout_arr[openi_idx_] for openi_idx_ in [short_valid_openi_idx, long_valid_openi_idx]]\n","    short_bias_arr, long_bias_arr = [bias_arr[openi_idx_] for openi_idx_ in [short_valid_openi_idx, long_valid_openi_idx]]\n","    short_tr_arr, long_tr_arr = [tr_arr[openi_idx_] for openi_idx_ in [short_valid_openi_idx, long_valid_openi_idx]]\n","    # print(\"long_bias_arr.shape :\", long_bias_arr.shape)    \n","    # print(\"elapsed time :\", time.time() - start_0)\n","\n","    short_true_bias_idx = short_bias_arr[:, 0] <= short_bias_arr[:, 1] # info, threshold (등호의 유무가 매우 유의미함)\n","    long_true_bias_idx = long_bias_arr[:, 0] >= long_bias_arr[:, 1]\n","\n","    # ------ plot_data ------ #\n","    try:\n","      # start_0 = time.time()\n","      short_tr = short_tr_arr.mean()\n","      short_pr, short_liqd = get_pr_v3(OrderSide.SELL, h, l, short_obj, short_tpout_arr, short_lvrg_arr, short_fee_arr, p_ranges, p_qty, inversion)\n","      short_total_pr = to_total_pr(len_df, short_pr, short_obj[-2])\n","      short_cum_pr = np.cumprod(short_total_pr)\n","      # short_liqd = liquidation_v2(OrderSide.SELL, h, short_obj[:4], short_lvrg_arr, short_fee_arr)\n","      short_prcn, short_rc = precision(short_pr, short_true_bias_idx), recall(short_true_bias_idx)\n","      if signi:\n","        short_idep_res_obj = (short_prcn, short_rc) + get_res_info_nb_v2(sample_len, short_pr, short_total_pr, short_cum_pr, short_liqd)\n","      else:\n","        gs_idx = plot_info_v5(gs, gs_idx, sample_len, short_tr, short_prcn, short_rc, short_pr, short_total_pr, short_cum_pr, short_liqd, short_lvrg_arr[-1], title_position, fontsize)\n","      # print(\"elapsed time :\", time.time() - start_0)\n","\n","    except Exception as e:\n","      gs_idx += 1\n","      print(\"error in short plot_data :\", e)\n","\n","    try:\n","      # start_0 = time.time()\n","      long_tr = long_tr_arr.mean()\n","      long_pr, long_liqd = get_pr_v3(OrderSide.BUY, h, l, long_obj, long_tpout_arr, long_lvrg_arr, long_fee_arr, p_ranges, p_qty, inversion)\n","      long_total_pr = to_total_pr(len_df, long_pr, long_obj[-2])\n","      long_cum_pr = np.cumprod(long_total_pr)\n","      # long_liqd = liquidation_v2(OrderSide.BUY, l, long_obj[:4], long_lvrg_arr, long_fee_arr)\n","      long_prcn, long_rc = precision(long_pr, long_true_bias_idx), recall(long_true_bias_idx)\n","      if signi:\n","        long_idep_res_obj = (long_prcn, long_rc) + get_res_info_nb_v2(sample_len, long_pr, long_total_pr, long_cum_pr, long_liqd)\n","      else:\n","        gs_idx = plot_info_v5(gs, gs_idx, sample_len, long_tr, long_prcn, long_rc, long_pr, long_total_pr, long_cum_pr, long_liqd, long_lvrg_arr[-1], title_position, fontsize)\n","      # print(\"elapsed time :\", time.time() - start_0)\n","    except Exception as e:\n","      gs_idx += 1\n","      print(\"error in long plot_data :\", e)\n","\n","    try:\n","      # start_0 = time.time()\n","      both_tr = (short_tr + long_tr) / 2\n","      both_pr = np.vstack((short_pr, long_pr))  # for 2d shape, obj 를 1d 로 만들지 않는 이상, pr 은 2d 유지될 것\n","      both_total_pr = to_total_pr(len_df, both_pr, both_obj[-2])\n","      both_cum_pr = np.cumprod(both_total_pr)\n","      both_liqd = min(short_liqd, long_liqd)\n","      both_true_bias_idx = np.hstack((short_true_bias_idx, long_true_bias_idx))  # for 1d shape\n","      both_prcn, both_rc = precision(both_pr, both_true_bias_idx), recall(both_true_bias_idx)\n","      if signi:\n","        both_idep_res_obj = (both_prcn, both_rc) + get_res_info_nb_v2(sample_len, both_pr, both_total_pr, both_cum_pr, both_liqd)\n","      else:\n","        gs_idx = plot_info_v5(gs, gs_idx, sample_len, both_tr, both_prcn, both_rc, both_pr, both_total_pr, both_cum_pr, both_liqd, lvrg_arr[-1], title_position, fontsize)\n","      # print(\"elapsed time :\", time.time() - start_0)\n","    except Exception as e:\n","      gs_idx += 1\n","      print(\"error in both plot_data :\", e)\n","\n","    if not signi:\n","        for obj, cum_pr in zip([short_obj, long_obj, both_obj], [short_cum_pr, long_cum_pr, both_cum_pr]):\n","          try:\n","            # start_0 = time.time()\n","            gs_idx = frq_dev_plot_v3(gs, gs_idx, len_df, sample_len, obj[-2], cum_pr[-1], fontsize)\n","            # print(\"elapsed time :\", time.time() - start_0)          \n","          except Exception as e:\n","            gs_idx += 1\n","            print(\"error in frq_dev_plot_v3 :\", e)\n","\n","        plt.show()\n","        plt.close()\n","        return short_pr, short_obj, short_lvrg_arr, short_fee_arr, short_tpout_arr, short_bias_arr, short_point1_arr, \\\n","        long_pr, long_obj, long_lvrg_arr, long_fee_arr, long_tpout_arr, long_bias_arr, long_point1_arr\n","        \n","    else:\n","        return [short_idep_res_obj[:-1], long_idep_res_obj[:-1], both_idep_res_obj[:-1]]"],"metadata":{"id":"xafHpMLwESKf"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["#### get paired_res function"],"metadata":{"id":"EFyWTuscH8VH"}},{"cell_type":"code","source":["def en_ex_pairing_v3(res_df, open_idx, open_info_list, ohlc_list, point2_list, market_data_list, config_list, np_timeidx, funcs):  # 이미 충분히 줄여놓은 idx 임\n","    side_arr, zone_arr, id_arr, id_idx_arr = open_info_list\n","    id_idx_arr = id_idx_arr.astype(int)\n","\n","    ep_out, ep_loc_point2, lvrg_set = funcs\n","\n","    point1_list, valid_openi_list, pair_idx_list, pair_price_list, lvrg_list, fee_list, tpout_list, bias_list, tr_list = [[] for li in range(9)]\n","    len_df = len(res_df)\n","    len_open_idx = len(open_idx)\n","    i, open_i = 0, -1  # i for total_res_df indexing\n","\n","    while 1:\n","        # ------------ entry phase ------------ #\n","        open_i += 1  # 확인 끝났으면 조기 이탈(+1), 다음 open_idx 조사 진행\n","        if open_i >= len_open_idx:\n","          break\n","          \n","        # ------ ep_loc ------ #\n","        op_idx = open_idx[open_i]  # open_i 는 i 와 별개로 운영\n","        if op_idx < i:  # i = 이전 거래 끝난후의 res_df index - \"거래 종료후 거래 시작\", '<' : 거래 종료시점 진입 가능하다는 의미\n","            continue\n","\n","        # ------ dynamic data by ID ------ #\n","        #     1. 해당 id 로 config 재할당해야함\n","        id_idx = id_idx_arr[open_i]\n","        config = config_list[id_idx]\n","        strat_version = config.strat_version\n","        open_side = side_arr[open_i]\n","\n","        side_pos = 'short' if open_side == OrderSide.SELL else 'long'\n","        tp_arr = res_df['{}_tp_{}'.format(side_pos, strat_version)].to_numpy()  # => eptpout arr_list 만들어서 꺼내 사용하면 될 것\n","        point_idxgap_arr = res_df['{}_point_idxgap_{}'.format(side_pos, strat_version)].to_numpy()\n","        \n","        ep_arr = res_df['{}_ep_{}'.format(side_pos, strat_version)].to_numpy()  # Todo - while loop 내에서 to_numpy() 반복하느니, pd_indexing 이 낫지 않을까\n","        out_arr = res_df['{}_out_{}'.format(side_pos, strat_version)].to_numpy()\n","        bias_info_arr = res_df['{}_bias_info_{}'.format(side_pos, strat_version)].to_numpy()  # ex. rolling(entry ~ end)'s high\n","        bias_thresh_arr = res_df['{}_bias_thresh_{}'.format(side_pos, strat_version)].to_numpy()  # ex. close + dc_T20 * 0.5\n","        tr_arr = res_df['{}_tr_{}'.format(side_pos, strat_version)].to_numpy()\n","\n","        # ------ ei_k & point2 ------ #\n","        i = op_idx + 1  # open_signal 이 close_bar.shift(1) 이라고 가정하고 다음 bar 부터 체결확인한다는 의미\n","        if i >= len_df:  # res_df 의 last_index 까지 돌아야함\n","            break\n","        \n","        # ------ point1 & 2's tp_j ------ #\n","        point_idxgap = point_idxgap_arr[op_idx]\n","        if np.isnan(point_idxgap):\n","          continue\n","        else:\n","          tp_j = int(op_idx - point_idxgap)\n","\n","          # ------ allow point2 only next to point1 ------ #\n","          # open_arr = res_df['{}_open_{}'.format(side_pos, strat_version)].to_numpy()\n","          # if np.sum(open_arr[tp_j:op_idx]) != 0:\n","          #   continue\n","          \n","        exec_j, ep_j, tp_j, out_j, entry_done, en_p, fee = check_eik_point2_exec(res_df, config, op_idx, tp_j, len_df, open_side, [*ohlc_list, ep_arr], point2_list, ep_out, ep_loc_point2)\n","        i = exec_j\n","        \n","        if not entry_done:\n","            continue\n","\n","        # ------ leverage ------ #\n","        out = out_arr[out_j]  # lvrg_set use out on out_j\n","        leverage = lvrg_set(res_df, config, open_side, en_p, out, fee)  # res_df 변수 사용됨 - 주석 처리 된 상태일뿐\n","        if leverage is None:\n","            continue\n","\n","        exit_done, cross_on = 0, 0\n","        # ------ check tpout_onexec ------ #\n","        # if not config.ep_set.static_ep and config.ep_set.entry_type == \"LIMIT\" and config.ep_set.tpout_onexec:\n","        if config.ep_set.entry_type == \"LIMIT\":\n","            if config.tp_set.tp_onexec:  # dynamic 은 tp_onexec 사용하는 의미가 없음\n","                tp_j = exec_j\n","            if config.out_set.out_onexec:  # dynamic 은 out_onexec 사용하는 의미가 없음\n","                out_j = exec_j\n","\n","\n","        while 1:\n","            # ------------ exit phase ------------ #\n","            if not config.tp_set.static_tp:  # 앞으로 왠만하면 static 만 사용할 예정\n","                tp_j = i\n","            if not config.out_set.static_out:\n","                out_j = i\n","\n","            # ------------ tp ------------ #\n","            if not config.tp_set.non_tp and i != exec_j:\n","                exit_done, ex_p, fee = check_limit_tp_exec(res_df, config, open_i, i, tp_j, len_df, fee, open_side, exit_done, [*ohlc_list, [tp_arr]])  # 여기서는 j -> i 로 변경해야함\n","                # if config.tp_set.tp_type in ['LIMIT']:  # 'BOTH' -> 앞으로는, LIMIT 밖에 없을거라 주석처리함\n","                # if not exit_done and config.tp_set.tp_type in ['MARKET', 'BOTH']:\n","\n","            # ------------ out ------------ #\n","            # ------ signal_out ------ #\n","            if not exit_done:\n","              exit_done, cross_on, ex_p, fee = check_market_out_exec(config, open_i, i, len_df, fee, open_side, cross_on, exit_done, [np_timeidx, *market_data_list])\n","            # ------ hl_out ------ #\n","            if config.out_set.hl_out != \"None\":\n","              if not exit_done:  # and i != len_df - 1:                \n","                  exit_done, ex_p, fee = check_out(config, open_i, i, out_j, len_df, fee, open_side, exit_done, [*ohlc_list, out_arr])\n","\n","            if exit_done:  # 이 phase 는 exit_phase 뒤에도 있어야할 것 - entry_done var. 사용은 안하겠지만\n","                # ------ append dynamic vars. ------ #\n","                point1_list.append(tp_j)\n","                valid_openi_list.append(open_i)  # side, zone, start_ver arr 모두 openi_list 로 접근하기 위해 open_i 를 담음\n","                pair_idx_list.append([exec_j, i])  # entry & exit (체결 기준임)\n","                pair_price_list.append([en_p, ex_p])\n","                lvrg_list.append(leverage)\n","                fee_list.append(fee)\n","                tpout_list.append([tp_arr[tp_j], out_arr[out_j]])  # for tpout_line plot_check\n","                # bias_list.append([bias_info_arr[exec_j], bias_thresh_arr[exec_j]])  # backtest 에서만 가능한 future_data 사용\n","                bias_list.append([bias_info_arr[exec_j], tp_arr[tp_j]])  # bias_info 는 entry_idx 부터 & tp = bias_thresh \n","                tr_list.append(tr_arr[op_idx])\n","\n","                # open_i += 1  # 다음 open_idx 조사 진행\n","                break\n","\n","            # 1. 아래있으면, 체결 기준부터 tp, out 허용\n","            # 2. 위에있으면, entry 다음 tick 부터 exit 허용\n","            i += 1\n","            if i >= len_df:  # res_df 의 last_index 까지 돌아야함\n","                break\n","                \n","        if i >= len_df: # or open_i >= len_open_idx:  # res_df 의 last_index 까지 돌아야함\n","            break\n","        else:\n","            continue\n","\n","    return np.array(point1_list), np.array(valid_openi_list), np.array(pair_idx_list), np.array(pair_price_list), np.array(lvrg_list), np.array(fee_list), np.array(tpout_list), np.array(bias_list), np.array(tr_list)\n","\n","\n","def check_eik_point2_exec(res_df, config, op_idx, tp_j, len_df, open_side, np_datas, point2_list, ep_out, ep_loc_point2):\n","    o, h, l, c, ep_arr = np_datas\n","    ep_j = op_idx\n","    # tp_j = op_idx\n","    out_j = op_idx\n","\n","    strat_version = config.strat_version    \n","    allow_ep_in = 0 if config.ep_set.point2.use_point2 else 1\n","    entry_done = 0\n","    ep = None\n","\n","    if config.ep_set.entry_type == \"LIMIT\":\n","        fee = config.trader_set.limit_fee\n","\n","        for e_j in range(op_idx + 1, len_df):\n","            # ------ index setting for dynamic options ------ #\n","            if not config.ep_set.static_ep:\n","                ep_j = e_j  # dynamic_ep 를 위한 ep_index var.\n","                out_j = e_j  # dynamic_out 를 위한 out_index var. - 조건식이 static_ep 와 같이 있는 이유 모름 => dynamic_lvrg 로 사료됨\n","\n","            if not config.tp_set.static_tp:\n","                tp_j = e_j\n","\n","            # ------ ei_k ------ # - limit 사용하면 default 로 ei_k 가 존재해야함\n","            if ep_out(res_df, config, op_idx, e_j, tp_j, [h, l], open_side):\n","              break\n","\n","            # ------ point2 ------ #\n","            if not allow_ep_in:\n","                allow_ep_in, out_j = ep_loc_point2(res_df, config, e_j, out_j, point2_list, side=open_side)\n","                if allow_ep_in:\n","                  if config.ep_set.point2.entry_type == \"LIMIT\":\n","                    ep_j = e_j\n","                    # print(\"e_j in point2 :\", e_j)\n","                    continue\n","\n","            # ------ check ep_exec ------ #\n","            if allow_ep_in:\n","              if config.ep_set.point2.use_point2 and config.ep_set.point2.entry_type == 'MARKET':\n","                entry_done = 1\n","                ep = c[e_j]\n","                break\n","              else:\n","                if open_side == OrderSide.SELL:\n","                    if h[e_j] >= ep_arr[ep_j]:\n","                        entry_done = 1\n","                        ep = ep_arr[ep_j]\n","                        if o[e_j] >= ep_arr[ep_j]:  # open comp 는 결국, 수익률에 얹어주는 logic (반보수) -> 사용 보류\n","                            ep = o[e_j]\n","                        break\n","                else:\n","                    if l[e_j] <= ep_arr[ep_j]:\n","                        entry_done = 1\n","                        ep = ep_arr[ep_j]\n","                        if o[e_j] <= ep_arr[ep_j]:\n","                            ep = o[e_j]\n","                        break\n","\n","    else:  # market entry\n","        e_j = op_idx + 1\n","        entry_done = 1\n","        ep = c[op_idx]\n","        fee = config.trader_set.market_fee\n","\n","    return e_j, ep_j, tp_j, out_j, entry_done, ep, fee  # 다음 start_i <-- e_j 로 변경\n","    #   e_j => 다음 phase 의 시작 index <-> ep_j : ep 의 기준 index\n","    #   ep_j, tp_j, out_j 가 return 되어야함 - exit phase 에서 이어가기 위함\n","\n","\n","def check_limit_tp_exec(res_df, config, open_i, j, tp_j, len_df, fee, open_side, exit_done, np_datas):\n","    o, h, l, c, tps = np_datas\n","    tp = None\n","    strat_version = config.strat_version\n","    len_tps = len(tps)\n","\n","    for tp_i, tp_arr in enumerate(tps):\n","        #     decay adjustment    #\n","        #     tp_j includes dynamic_j - functionalize  #\n","        try:\n","            if config.tr_set.decay_gap != \"None\":\n","                decay_share = (j - open_i) // config.tp_set.decay_term\n","                decay_remain = (j - open_i) % config.tp_set.decay_term\n","                if j != open_i and decay_remain == 0:\n","                    if open_side == OrderSide.SELL:\n","                        tp_arr[tp_j] += res_df['short_tp_gap_{}'.format(strat_version)].iloc[open_i] * config.tr_set.decay_gap * decay_share\n","                    else:\n","                        tp_arr[tp_j] -= res_df['long_tp_gap_{}'.format(strat_version)].iloc[open_i] * config.tr_set.decay_gap * decay_share\n","        except:\n","            pass\n","\n","        if open_side == OrderSide.SELL:\n","            if l[j] <= tp_arr[tp_j]:  # and partial_tp_cnt == tp_i:  # we use static tp now\n","                # if l[j] <= tp_arr[j] <= h[j]: --> 이건 잘못되었음\n","                # partial_tp_cnt += 1 --> partial_tp 보류\n","\n","                # ------ dynamic tp ------ #\n","                if tp_arr[j] != tp_arr[j - 1] and not config.tp_set.static_tp:\n","                    # tp limit 이 불가한 경우 - open 이 이미, tp 를 넘은 경우\n","                    if o[j] < tp_arr[j]:\n","                        tp = o[j]\n","                    # tp limit 이 가능한 경우 - open 이 아직, tp 를 넘지 않은 경우\n","                    else:\n","                        tp = tp_arr[j]\n","                # ------ static tp ------ #\n","                else:\n","                    #   tp limit 이 불가한 경우 - open 이 이미, tp 를 넘은 경우\n","                    if o[j] < tp_arr[tp_j]:  # static 해놓고 decay 사용하면 dynamic 이니까\n","                        if config.tr_set.decay_gap != \"None\" and decay_remain == 0:\n","                            tp = o[j]  # tp_j -> open_i 를 가리키기 때문에 decay 는 한번만 진행되는게 맞음\n","                        else:\n","                            tp = tp_arr[tp_j]\n","                    else:\n","                        tp = tp_arr[tp_j]\n","\n","                if tp_i == len_tps - 1:\n","                    exit_done = 1  # partial 을 고려해 exit_done = 1 상태는 tp_i 가 last_index 로 체결된 경우만 해당\n","\n","        else:\n","            if h[j] >= tp_arr[tp_j]:\n","                # ------ dynamic tp ------ #\n","                if tp_arr[j] != tp_arr[j - 1] and not config.tp_set.static_tp:\n","                    if o[j] > tp_arr[j]:\n","                        tp = o[j]\n","                    else:\n","                        tp = tp_arr[j]\n","\n","                # ------ static tp ------ #\n","                else:\n","                    if o[j] > tp_arr[tp_j]:\n","                        if config.tr_set.decay_gap != \"None\" and decay_remain == 0:\n","                            tp = o[j]\n","                        else:\n","                            tp = tp_arr[tp_j]\n","                    else:\n","                        tp = tp_arr[tp_j]\n","\n","                if tp_i == len_tps - 1:\n","                    exit_done = 1  # partial 을 고려해 exit_done = 1 상태는 tp_i 가 last_index 로 체결된 경우만 해당\n","\n","    if exit_done:\n","        fee += config.trader_set.limit_fee\n","\n","    return exit_done, tp, fee\n","\n","\n","def check_market_out_exec(config, open_i, j, len_df, fee, open_side, cross_on, exit_done, np_datas):\n","    np_timeidx, c, bb_lower_5T, bb_upper_5T, rsi_exit, ha_o, ha_h, ha_l, ha_c = np_datas\n","    ex_p = None\n","    strat_version = config.strat_version\n","\n","    # ------ timestamp ------ #\n","    if config.out_set.tf_exit != \"None\":\n","        if np_timeidx[j] % config.out_set.tf_exit == config.out_set.tf_exit - 1 and j != open_i:\n","            exit_done = 1\n","\n","    # ------ rsi ------ # -> vectorize 가능함 => 추후 적용\n","    if config.out_set.rsi_exit:\n","        if open_side == OrderSide.SELL:\n","            if (rsi_exit[j - 1] >= 50 - config.loc_set.point.osc_band) & (rsi_exit[j] < 50 - config.loc_set.point.osc_band):\n","                exit_done = 1\n","        else:\n","            if (rsi_exit[j - 1] <= 50 + config.loc_set.point.osc_band) & (rsi_exit[j] > 50 + config.loc_set.point.osc_band):\n","                exit_done = 1\n","\n","    # ------ heikin_ashi ------ #\n","    # if strat_version in ['v3_3']:\n","    #     if open_side == OrderSide.SELL:\n","    #       if (ha_o[j] < ha_c[j]):# & (ha_o[j] == ha_l[j]):   # 양봉 출현\n","    #           exit_done = 1\n","    #     else:\n","    #       if (ha_o[j] > ha_c[j]):# & (ha_o[j] == ha_h[j]):  # 음봉 출현\n","    #           exit_done = 1\n","\n","    # ------------ early out ------------ #\n","    # ------ bb ------ # --> cross_on 기능은 ide latency 개선 여부에 해당되지 않음\n","    if strat_version in ['v5_2']:\n","        if open_side == OrderSide.SELL:\n","            if c[j] < bb_lower_5T[j] < c[j - 1]:\n","                cross_on = 1\n","            if cross_on == 1 and c[j] > bb_upper_5T[j] > c[j - 1]:\n","                exit_done = 1\n","        else:\n","            if c[j] > bb_upper_5T[j] > c[j - 1]:\n","                cross_on = 1\n","            if cross_on == 1 and c[j] < bb_lower_5T[j] < c[j - 1]:\n","                exit_done = 1\n","\n","    if exit_done:\n","        ex_p = c[j]\n","        fee += config.trader_set.market_fee\n","\n","    return exit_done, cross_on, ex_p, fee\n","\n","\n","def check_out(config, open_i, j, out_j, len_df, fee, open_side, exit_done, np_datas):\n","    o, h, l, c, out_arr = np_datas\n","    ex_p = None\n","\n","    if config.out_set.hl_out:\n","        if open_side == OrderSide.SELL:\n","            if h[j] >= out_arr[out_j]:  # check out only once\n","                exit_done = 1\n","        else:\n","            if l[j] <= out_arr[out_j]:  # check out only once\n","                exit_done = 1\n","    else:  # close_out\n","        if open_side == OrderSide.SELL:\n","            if c[j] >= out_arr[out_j]:  # check out only once\n","                exit_done = 1\n","        else:\n","            if c[j] <= out_arr[out_j]:  # check out only once\n","                ex_p = c[j]\n","                exit_done = 1\n","\n","    if exit_done:\n","        if config.out_set.hl_out:\n","            ex_p = out_arr[out_j]\n","        else:\n","            ex_p = c[j]\n","\n","        if open_side == OrderSide.SELL:\n","            if o[j] >= out_arr[out_j]:\n","                ex_p = o[j]\n","        else:\n","            if o[j] <= out_arr[out_j]:\n","                ex_p = o[j]\n","\n","        fee += config.trader_set.market_fee\n","\n","    return exit_done, ex_p, fee"],"metadata":{"id":"qfbtFVMR01UJ","executionInfo":{"status":"ok","timestamp":1649123599105,"user_tz":-540,"elapsed":1319,"user":{"displayName":"7th June","userId":"08178289703395036410"}}},"execution_count":23,"outputs":[]},{"cell_type":"markdown","metadata":{"jp-MarkdownHeadingCollapsed":true,"tags":[],"id":"zQ-roiifspcX"},"source":["#### ep_loc.point & zone legacy"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Js5eL87VspcX"},"outputs":[],"source":["\n","    # res_df['entry_{}'.format(strat_version)] = np.where((res_df['open'] >= res_df['cloud_bline_%s' % cb_itv]) &\n","    #                 # (res_df['close'].shift(config.loc_set.point.tf_entry * 1) <= res_df['cloud_bline_%s' % cb_itv]) &\n","    #                 (res_df['close'] < res_df['cloud_bline_%s' % cb_itv])\n","    #                 , res_df['entry_{}'.format(strat_version)] - 1, res_df['entry_{}'.format(strat_version)])\n","\n","    # res_df['entry_{}'.format(strat_version)] = np.where((res_df['open'] >= res_df['bb_lower_1m']) &\n","    #                 # (res_df['close'].shift(config.loc_set.point.tf_entry * 1) <= res_df['bb_lower_1m']) &\n","    #                 (res_df['close'] < res_df['bb_lower_1m'])\n","    #                 , res_df['entry_{}'.format(strat_version)] - 1, res_df['entry_{}'.format(strat_version)])\n","\n","    # res_df['entry_{}'.format(strat_version)] = np.where((res_df['open'] <= res_df['cloud_bline_%s' % cb_itv]) &\n","    #                   # (res_df['close'].shift(config.loc_set.point.tf_entry * 1) >= res_df['cloud_bline_%s' % cb_itv]) &\n","    #                   (res_df['close'] > res_df['cloud_bline_%s' % cb_itv])\n","    #                 , res_df['entry_{}'.format(strat_version)] + 1, res_df['entry_{}'.format(strat_version)])\n","\n","    # res_df['entry_{}'.format(strat_version)] = np.where((res_df['open'] <= res_df['bb_upper_1m']) &\n","    #                   # (res_df['close'].shift(config.loc_set.point.tf_entry * 1) >= res_df['bb_upper_1m']) &\n","    #                   (res_df['close'] > res_df['bb_upper_1m'])\n","    #                 , res_df['entry_{}'.format(strat_version)] + 1, res_df['entry_{}'.format(strat_version)])\n","\n","\n","    \n","   # --------------- ema --------------- #   \n","  # res_df['ema5_1m'] = ema(res_df['close'], 5).shift(1)\n","\n","  #   # --------------- cloud bline --------------- #   \n","  # res_df['cloud_bline_1m'] = cloud_bline(res_df, 26).shift(1)\n","  \n","    #       stochastic      #\n","  # res_df['stoch'] = stoch(res_df, 5, 3, 3)\n","\n","    #       fisher      #\n","  # res_df['fisher30'] = fisher(res_df, 30)\n","  # res_df['fisher60'] = fisher(res_df, 60)\n","  # res_df['fisher120'] = fisher(res_df, 120)\n","\n","    #       cctbbo      #\n","  # res_df['cctbbo'], _ = cct_bbo(res_df, 21, 13)\n","\n","    #       ema_roc      #\n","  # res_df['ema_roc'] = ema_roc(res_df['close'], 13, 9)\n","\n","\n","   # ------------------------------ htf data ------------------------------ #    \n","\n","  #             Todo              #\n","  # htf_df = pd.read_excel(date_path2 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","  # htf_df = pd.read_excel(date_path3 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","  # # htf_df = pd.read_excel(date_path4 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","  # # # htf_df = pd.read_excel(date_path5 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","  # # # # # # htf_df = pd.read_excel(date_path6 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","\n","  # # ---- htf index slicing ---- #\n","  # htf_df = htf_df.loc[:res_df.index[-1]]\n","  \n","  # print(\"res_df.index[-1] :\", res_df.index[-1])\n","  # print(\"htf_df.index[-1] :\", htf_df.index[-1])\n","\n","  # res_df = dc_line(res_df, htf_df, '5m')\n","  # res_df = dc_level(res_df, '5m', 1)\n","\n","\n","  # # # if \"sma4\" in res_df.columns:\n","  # # #   res_df.drop(\"sma4\", axis=1, inplace=1)\n","\n","  # # htf_df['sma'] = htf_df['close'].rolling(60).mean()\n","  # # res_df = res_df.join(pd.DataFrame(index=res_df.index, data=to_lower_tf_v2(res_df, htf_df, [-1]), columns=['sma_30m']))\n","  \n","  # htf_df['stoch'] = stoch(htf_df, 13, 3, 3)\n","  # res_df = res_df.join(pd.DataFrame(index=res_df.index, data=to_lower_tf_v2(res_df, htf_df, [-1], backing_i=-1), columns=['stoch_5m']))\n","\n","   \n","  # fifth_df['ema'] = ema(fifth_df['close'], 5)\n","  # res_df = res_df.join(pd.DataFrame(index=res_df.index, data=to_lower_tf_v2(res_df, fifth_df, [-1]), columns=['ema5']))\n","\n","        # ------------------------------------ short ------------------------------------ # \n","\n","        # --------- by sar --------- # \n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_3m'].iloc[i] == 0:\n","        #   mr_score += 1\n","\n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_5m'].iloc[i] == 0:\n","        #   mr_score += 1          \n","\n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_15m'].iloc[i] == 0:\n","        #   mr_score += 1\n","\n","          #      dc & sar      # \n","        # mr_const_cnt += 1\n","        # # if res_df['dc_upper_1m'].iloc[i] <= res_df['sar_15m'].iloc[i]:\n","        # if res_df['dc_upper_3m'].iloc[i] <= res_df['sar_5m'].iloc[i]:\n","        # # if res_df['dc_upper_5m'].iloc[i] <= res_df['sar_15m'].iloc[i]:\n","        #   mr_score += 1\n","\n","        # -------------- dr scheduling -------------- #\n","        # if config.ep_set.entry_type == 'MARKET':\n","        #   mr_const_cnt += 1\n","        #   if (res_df['close'].iloc[i] - res_df['short_tp'].iloc[i]) / (res_df['short_out'].iloc[i] - res_df['close'].iloc[i]) <= config.ep_set.tr_thresh * (1 + config.ep_set.dr_error):  \n","        #     mr_score += 1\n","\n","           \n","        # ------- entry once ------- #   \n","        # prev_entry_cnt = 0\n","        # for back_i in range(i - 1, 0, -1):\n","        #   if res_df['entry'][back_i] == 1:\n","        #     break\n","\n","        #   elif res_df['entry'][back_i] == -1:\n","        #     prev_entry_cnt += 1          \n","        # # # print(\"prev_entry_cnt :\", prev_entry_cnt)\n","\n","        # mr_const_cnt += 1\n","        # # if prev_entry_cnt <= config.ep_set.entry_incycle:\n","        # # if prev_entry_cnt == config.ep_set.entry_incycle:\n","        # if prev_entry_cnt >= config.ep_set.entry_incycle:\n","        #   mr_score += 1\n","\n","        # ------- htf zoning ------- #   \n","        # mr_const_cnt += 1\n","        #   #       bb zone     #\n","        # if res_df['close'].iloc[i] < res_df['bb_lower_%s' % bbz_interval].iloc[i]:\n","        # # if res_df['close'].iloc[i] < res_df['bb_lower2_1h'].iloc[i]:\n","        # # if res_df['close'].iloc[i] < res_df['bb_base_1h'].iloc[i]:\n","\n","        #   #       cbline zone     #\n","        # # if res_df['close'].iloc[i] < res_df['cloud_bline_%s' % cb_interval].iloc[i]:\n","\n","        #   mr_score += 1\n","\n","  \n","        # ------- ben ep_in's tp done ------- #   \n","        # mr_const_cnt += 1\n","        # if res_df['low'].iloc[i] > res_df['short_tp'].iloc[i]:\n","        #   mr_score += 1\n","\n","\n","        # -------------- feature dist const. -------------- #\n","        # if initial_i < input_size:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","        # entry_input_x = min_max_scale(res_df[selected_price_colname].iloc[initial_i - input_size:initial_i].values)\n","       \n","        # re_entry_input_x = expand_dims(entry_input_x)\n","\n","        # entry_vector = model.predict(re_entry_input_x, verbose=0)\n","        # # print(test_result.shape)\n","\n","        # f_dist = vector_dist(entry_vector, selected_vector)\n","        # print(\"f_dist :\", f_dist)\n","\n","        # if f_dist < fdist_thresh:\n","          # mr_score += 1\n","\n","\n","\n","        # ------------------------------------ long ------------------------------------ # \n","          \n","\n","        # --------- by sar --------- # \n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_3m'].iloc[i] == 1:\n","        #   mr_score += 1   \n","\n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_5m'].iloc[i] == 1:\n","        #   mr_score += 1     \n","\n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_15m'].iloc[i] == 1:\n","          # mr_score += 1\n","\n","          #      dc & sar      # \n","        # mr_const_cnt += 1\n","        # # if res_df['dc_lower_1m'].iloc[i] >= res_df['sar_15m'].iloc[i]:\n","        # if res_df['dc_lower_3m'].iloc[i] >= res_df['sar_5m'].iloc[i]:\n","        # # if res_df['dc_lower_5m'].iloc[i] >= res_df['sar_15m'].iloc[i]:\n","        #   mr_score += 1\n","\n","        # -------------- dr scheduling -------------- #\n","        # if config.ep_set.entry_type == \"MARKET\":\n","          # mr_const_cnt += 1        \n","          # if (res_df['long_tp'].iloc[i] - res_df['close'].iloc[i]) / (res_df['close'].iloc[i] - res_df['long_out'].iloc[i]) <= config.ep_set.tr_thresh * (1 + config.ep_set.dr_error): # 일반적으로 dr 상에서 tp 비율이 더 커짐 (tr 보다)\n","          #   mr_score += 1\n","\n","        # -------------- ep limit -------------- #    \n","        # mr_const_cnt += 1\n","        # # if (res_df['open'].iloc[i] - res_df['long_ep'].iloc[i]) / res_df['open'].iloc[i] < config.ep_set.max_eplim_pct:\n","        # if config.ep_set.min_eplim_pct < (res_df['open'].iloc[i] - res_df['long_ep'].iloc[i]) / res_df['open'].iloc[i] < config.ep_set.max_eplim_pct:\n","        # # if 0 < (res_df['open'].iloc[i] - res_df['long_ep'].iloc[i]) / res_df['open'].iloc[i] < config.ep_set.max_eplim_pct:\n","        #   # if res_df['st_gap_15m'].iloc[i] / res_df['open'].iloc[i] < 0:\n","        #   #   print(\"i, res_df['st_gap_15m'].iloc[i] :\", i, res_df['st_gap_15m'].iloc[i])\n","        #   mr_score += 1\n","\n","\n","        # -------------- entry once -------------- #    \n","        # prev_entry_cnt = 0\n","        # for back_i in range(i - 1, 0, -1):\n","        #   if res_df['entry'][back_i] == -1:\n","        #     break\n","\n","        #   elif res_df['entry'][back_i] == 1:\n","        #     prev_entry_cnt += 1\n","          \n","        # mr_const_cnt += 1\n","        # # if prev_entry_cnt <= config.ep_set.entry_incycle:\n","        # # if prev_entry_cnt == config.ep_set.entry_incycle:\n","        # if prev_entry_cnt >= config.ep_set.entry_incycle:\n","        #   mr_score += 1\n","\n","\n","        # ------- htf zoning ------- #   \n","        # mr_const_cnt += 1\n","          \n","        #   #       bb zone     #\n","        # if res_df['close'].iloc[i] > res_df['bb_upper_%s' % bbz_interval].iloc[i]:\n","        # # if res_df['close'].iloc[i] > res_df['bb_upper2_1h'].iloc[i]:\n","        # # if res_df['close'].iloc[i] > res_df['bb_base_1h'].iloc[i]:\n","        \n","        #   #       cbline zone     #\n","        # # if res_df['close'].iloc[i] > res_df['cloud_bline_%s' % cb_interval].iloc[i]:\n","\n","        #   mr_score += 1\n","\n","\n","        # ------- ben ep_in's tp done ------- #   \n","        # mr_const_cnt += 1\n","        # if res_df['high'].iloc[i] < res_df['long_tp'].iloc[i]:\n","        #   mr_score += 1\n","\n","\n","        # -------------- feature dist const. -------------- #\n","        # if initial_i < input_size:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","          \n","        # entry_input_x = min_max_scale(res_df[selected_price_colname].iloc[initial_i - input_size:initial_i].values)\n","       \n","        # re_entry_input_x = expand_dims(entry_input_x)\n","\n","        # entry_vector = model.predict(re_entry_input_x, verbose=0)\n","        # # print(test_result.shape)\n","\n","        # f_dist = vector_dist(entry_vector, selected_vector)\n","        # print(\"f_dist :\", f_dist)\n","\n","        # if f_dist < fdist_thresh:\n","          # mr_score += 1"]},{"cell_type":"markdown","source":["#### dump"],"metadata":{"id":"_blyFhQJUd5X"}},{"cell_type":"code","source":["def get_max_outg_v3(open_side, config, ohlc_list, obj, tpout_arr, epout_0, out_gap):\n","\n","    h, l = ohlc_list[1:3]\n","\n","    np_obj = np.array(obj).T[0]\n","    assert len(np_obj.shape) == 2\n","\n","    # iin == iout 인 경우 분리\n","    # en_idx = np_obj[:, 2]\n","    # ex_idx = np_obj[:, 3]\n","    # equal_idx = en_idx == ex_idx\n","\n","    \n","    _, _, en_idxs, ex_idxs, open_idxs = obj\n","\n","    if open_side == \"SELL\":\n","      idxgs = [np.argwhere(l[int(en_idx):int(en_idx + config.tr_set.bias_info_tick)] <= tpout_arr[i, 0]) for i, en_idx in enumerate(en_idxs)]\n","    else:\n","      idxgs = [np.argwhere(h[int(en_idx):int(en_idx + config.tr_set.bias_info_tick)] >= tpout_arr[i, 0]) for i, en_idx in enumerate(en_idxs)]\n","\n","    min_idxg = np.array([gaps.min() if len(gaps) != 0 else np.nan for gaps in idxgs])  # get 최소 idx_gap from en_idx\n","    nan_idx = np.isnan(min_idxg) # .astype(int) -> false swing_bias idx\n","    # min_idxg[nan_idx] = 0  # fill na 0, for idex summation below\n","\n","    if open_side == \"SELL\":      \n","      # max_high = np.array([np.max(h[int(en_idx):int(en_idx + idx_gap + 1)]) for en_idx, idx_gap in zip(en_idxs, min_idxg)]).reshape(-1, 1)  # reshape is important in np boradcasting\n","      # max_high = np.array([np.max(h[int(en_idx):int(en_idx + idx_gap + 1)]) if not np.isnan(idx_gap) else np.max(h[int(en_idx):int(ex_idx + 1)])\n","      max_high = np.array([np.max(h[int(en_idx):int(en_idx + idx_gap + 1)]) if not np.isnan(idx_gap) else np.max(h[int(en_idx):int(en_idx + config.tr_set.bias_info_tick)])\n","                          for en_idx, ex_idx, idx_gap in zip(en_idxs, ex_idxs, min_idxg)]).reshape(-1, 1)  # reshape is important in np boradcasting   # outg 라서, iin + 1 이 아님\n","      max_outg = (max_high - epout_0) / out_gap\n","    else:\n","      # min_low = np.array([np.min(l[int(en_idx):int(en_idx + idx_gap + 1)]) for en_idx, idx_gap in zip(en_idxs, min_idxg)]).reshape(-1, 1)\n","      # min_low = np.array([np.min(l[int(en_idx):int(en_idx + idx_gap + 1)]) if not np.isnan(idx_gap) else np.min(l[int(en_idx):int(ex_idx + 1)])\n","      min_low = np.array([np.min(l[int(en_idx):int(en_idx + idx_gap + 1)]) if not np.isnan(idx_gap) else np.min(l[int(en_idx):int(en_idx + config.tr_set.bias_info_tick)])\n","                          for en_idx, ex_idx, idx_gap in zip(en_idxs, ex_idxs, min_idxg)]).reshape(-1, 1)  # outg 라서, iin + 1 이 아님\n","      max_outg = (epout_0 - min_low) / out_gap # out_idx 포함\n","\n","    return max_outg, open_idxs.astype(int), ~nan_idx.astype(bool).reshape(-1, 1)  # true_bias 의 outg data 만 사용\n","\n","\n","def get_max_outg_v2(open_side, config, ohlc_list, obj, tpout_arr, epout_0, out_gap):\n","\n","    h, l = ohlc_list[1:3]\n","    _, _, en_idxs, _, open_idxs = obj\n","\n","    if open_side == \"SELL\":\n","      idxgs = [np.argwhere(l[int(en_idx):int(en_idx + config.tr_set.bias_info_tick)] <= tpout_arr[i, 0]) for i, en_idx in enumerate(en_idxs)]\n","    else:\n","      idxgs = [np.argwhere(h[int(en_idx):int(en_idx + config.tr_set.bias_info_tick)] >= tpout_arr[i, 0]) for i, en_idx in enumerate(en_idxs)]\n","\n","    min_idxg = np.array([gaps.min() if len(gaps) != 0 else np.nan for gaps in idxgs])  # get 최소 idx_gap from en_idx\n","    nan_idx = np.isnan(min_idxg) # .astype(int)\n","    min_idxg[nan_idx] = 0  # fill na 0, for idex summation below\n","\n","    if open_side == \"SELL\":      \n","      max_high = np.array([np.max(h[int(en_idx):int(en_idx + idx_gap + 1)]) for en_idx, idx_gap in zip(en_idxs, min_idxg)]).reshape(-1, 1)  # reshape is important in np boradcasting\n","      max_outg = (max_high - epout_0) / out_gap\n","    else:\n","      max_low = np.array([np.min(l[int(en_idx):int(en_idx + idx_gap + 1)]) for en_idx, idx_gap in zip(en_idxs, min_idxg)]).reshape(-1, 1)\n","      max_outg = (epout_0 - max_low) / out_gap # out_idx 포함\n","\n","    return max_outg[~nan_idx], open_idxs[~nan_idx].astype(int)  # true_bias 의 outg data 만 사용\n","\n","def get_max_tpg_v2(open_side, ohlc_list, pr_, obj, tp_1, tp_gap):  # much faster\n","\n","    h, l = ohlc_list[1:3]\n","\n","    # en_p = obj[0]\n","    # ex_p = obj[1]\n","\n","    np_obj = np.array(obj).T[0]\n","    assert len(np_obj.shape) == 2\n","\n","    # iin == iout 인 경우 분리\n","    en_idx = np_obj[:, 2]\n","    ex_idx = np_obj[:, 3]\n","    equal_idx = en_idx == ex_idx\n","\n","    if open_side == \"SELL\":\n","        min_low = np.full_like(tp_1, np.nan)\n","        # min_low[~equal_idx] = np.array([np.min(l[int(iin + 1):int(iout + 1)]) for _, _, iin, iout in np_obj[~equal_idx, :4]]).reshape(-1, 1)  # start from iin + 1\n","        min_low[~equal_idx] = np.array([np.min(l[int(iin + 1):int(iout + 1)]) for _, _, iin, iout in np_obj[~equal_idx, :4]]).reshape(-1, 1)  # start from iin + 1\n","        max_tpg = (tp_1 - min_low) / tp_gap\n","    else:\n","        max_high = np.full_like(tp_1, np.nan)\n","        # max_high[~equal_idx] = np.array([np.max(h[int(iin + 1):int(iout + 1)]) for _, _, iin, iout in np_obj[~equal_idx, :4]]).reshape(-1, 1)\n","        max_high[~equal_idx] = np.array([np.max(h[int(iin + 1):int(iout + 1)]) for _, _, iin, iout in np_obj[~equal_idx, :4]]).reshape(-1, 1)\n","        max_tpg = (max_high - tp_1) / tp_gap\n","\n","    return max_tpg[pr_ < 1]  # out 된 case 만 tpg 담음\n","    # return max_tpg"],"metadata":{"id":"183hY18cpUBu"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["titles = public_cols +devided_cols\n","max_plot_outg = 10\n","\n","for title, short_data, long_data in zip(titles, short_datas, long_datas):\n","\n","  plt.style.use(['dark_background', 'fast'])\n","  fig = plt.figure(figsize=(12, 5))\n","  nrows, ncols = 1, 2\n","  gs = gridspec.GridSpec(nrows=nrows,  # row 부터 index 채우고 col 채우는 순서임 (gs_idx)\n","                          ncols=ncols\n","                          )\n","    \n","  print(len(long_max_outg))\n","\n","  short_plot_idx = short_max_outg <= max_plot_outg\n","  long_plot_idx = long_max_outg <= max_plot_outg  # nan 과 inf 때문에 이 방식 채택\n","\n","  print(np.sum(long_plot_idx))\n","\n","  short_open_data = short_data[short_outg_open_idx]\n","  long_open_data = long_data[long_outg_open_idx]\n","  \n","  short_plot_idx *= short_open_data <= 10\n","  long_plot_idx *= long_open_data <= 10 # nan 과 inf 때문에 이 방식 채택\n","\n","  short_plot_idx *= ~np.isnan(short_open_data)\n","  long_plot_idx *= ~np.isnan(long_open_data)  # nan 과 inf 때문에 이 방식 채택\n","\n","  print(np.sum(long_plot_idx))\n","\n","  short_plot_idx *= ~np.isinf(short_open_data)\n","  long_plot_idx *= ~np.isinf(long_open_data)  # nan 과 inf 때문에 이 방식 채택\n","  \n","  print(np.sum(long_plot_idx))\n","\n","  plt.subplot(gs[0])\n","  x, y = short_max_outg[short_plot_idx].ravel(), short_open_data[short_plot_idx].ravel()\n","  # plt.bar(x, y, width=0.05)\n","  plt.scatter(x, y)\n","  plt.axvline(0.5, color='red', linewidth=3)\n","  plt.title(\"coef : {:0.3f}\".format(np.corrcoef(-x, y)[0, 1]))\n","  plt.xlim(0, max_plot_outg)\n","\n","  plt.subplot(gs[1])\n","  x, y = long_max_outg[long_plot_idx].ravel(), long_open_data[long_plot_idx].ravel()\n","  # plt.bar(x, y, width=0.05)\n","  plt.scatter(x, y)\n","  plt.axvline(0.5, color='red', linewidth=3)\n","  plt.title(\"coef : {:0.3f}\".format(np.corrcoef(-x, y)[0, 1]))\n","  plt.xlim(0, max_plot_outg)\n","\n","  plt.suptitle(title)\n","  plt.show()\n","\n","  print()"],"metadata":{"id":"eCFQfLGBrwj2"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["short_max_outg, short_outg_open_idx = get_max_outg_v2(\"SELL\", config, ohlc_list, short_obj, short_tpout_arr, short_open_epout_0, short_open_epout_gap)\n"],"metadata":{"id":"nYDgg3XEt116"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["strat_version = config.strat_version\n","len_df = len(res_df)\n","short_open_res = np.ones(len_df)\n","long_open_res = np.ones(len_df)\n","\n","short_tp_1_col, short_tp_0_col, short_tp_gap_col = 'short_tp_1_{}'.format(strat_version), 'short_tp_0_{}'.format(strat_version), 'short_tp_gap_{}'.format(strat_version) \n","long_tp_1_col, long_tp_0_col, long_tp_gap_col = 'long_tp_1_{}'.format(strat_version), 'long_tp_0_{}'.format(strat_version), 'long_tp_gap_{}'.format(strat_version) \n","short_epout_1_col, short_epout_0_col, short_epout_gap_col = 'short_epout_1_{}'.format(strat_version), 'short_epout_0_{}'.format(strat_version), 'short_epout_gap_{}'.format(strat_version) \n","long_epout_1_col, long_epout_0_col, long_epout_gap_col = 'long_epout_1_{}'.format(strat_version), 'long_epout_0_{}'.format(strat_version), 'long_epout_gap_{}'.format(strat_version) \n","\n","data_cols = ['open', 'high', 'low']   # Todo - public_indi 이전에 해야할지도 모름 # 'close', 'haopen', 'hahigh', 'halow', 'haclose'\n","tp_cols = [short_tp_1_col, short_tp_0_col, short_tp_gap_col, long_tp_1_col, long_tp_0_col, long_tp_gap_col]   # Todo - public_indi 이전에 해야할지도 모름\n","epout_cols = [short_epout_1_col, short_epout_0_col, short_epout_gap_col, long_epout_1_col, long_epout_0_col, long_epout_gap_col]   # Todo - public_indi 이전에 해야할지도 모름\n","\n","short_tp_1_, short_tp_0_, short_tp_gap_, long_tp_1_, long_tp_0_, long_tp_gap_ = [res_df[col_].to_numpy() for col_ in tp_cols]\n","short_epout_1_, short_epout_0_, short_epout_gap_, long_epout_1_, long_epout_0_, long_epout_gap_ = [res_df[col_].to_numpy() for col_ in epout_cols]\n","open, high, low = [res_df[col_].to_numpy() for col_ in data_cols]\n","\n","short_base = (short_tp_1_ + short_tp_0_) / 2\n","long_base = (long_tp_1_ + long_tp_0_) / 2\n","\n","touch_period = 50\n","\n","short_a_touch = pd.Series(np.where(high >= short_tp_0_, np.arange(len(res_df)), np.nan)).rolling(touch_period, min_periods=1).max().to_numpy()  # min -> max\n","short_b_touch = pd.Series(np.where(low <= short_tp_1_, np.arange(len(res_df)), np.nan)).rolling(touch_period, min_periods=1).max().to_numpy()   # min 으로 하면 a 이전에 b 있는건 모두 제외하게됨\n","\n","short_en_p = (get_line(short_a_touch, short_tp_0_) + get_line(short_b_touch, short_tp_1_)) / 2\n","short_base_b = get_line(short_b_touch, short_base)\n","short_tp_gap_b = get_line(short_b_touch, short_tp_gap_)\n","short_open_res *= (high >= short_base_b) & (short_base_b >= open) & (short_a_touch < short_b_touch) & (short_base_b + config.loc_set.point.base_gap * short_tp_gap_b >= short_base)\n","\n","long_a_touch = pd.Series(np.where(low <= long_tp_0_, np.arange(len(res_df)), np.nan)).rolling(touch_period, min_periods=1).max().to_numpy()       \n","long_b_touch = pd.Series(np.where(high >= long_tp_1_, np.arange(len(res_df)), np.nan)).rolling(touch_period, min_periods=1).max().to_numpy()\n","\n","long_en_p = (get_line(long_a_touch, long_tp_0_) + get_line(long_b_touch, long_tp_1_)) / 2\n","long_base_b = get_line(long_b_touch, long_base)\n","long_tp_gap_b = get_line(long_b_touch, long_tp_gap_)\n","long_open_res *= (open >= long_base_b) & (long_base_b >= low) & (long_a_touch < long_b_touch) & (long_base_b - config.loc_set.point.base_gap * long_tp_gap_b <= long_base)"],"metadata":{"id":"19_q_5awv_Uu"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print(get_line(long_a_touch, long_tp_0_)[long_open_res.astype(bool)])\n","print(get_line(long_a_touch, long_tp_0_)[long_open_res.astype(bool)])\n","print(get_line(long_b_touch, long_tp_1_)[long_open_res.astype(bool)])\n","print(long_base_b[long_open_res.astype(bool)])\n","np.sum(long_en_p[long_open_res.astype(bool)] != long_base_b[long_open_res.astype(bool)])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5X-3R-rSwFDh","executionInfo":{"status":"ok","timestamp":1648558797859,"user_tz":-540,"elapsed":3,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"2053743d-9468-4bd6-c0e8-c2817b448ec6"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[ 379.67  379.67  387.17 ... 3145.43 3145.43 3126.73]\n","[ 386.14  386.14  391.39 ... 3158.96 3158.96 3150.79]\n","[ 382.905  382.905  389.28  ... 3152.195 3152.195 3138.76 ]\n"]},{"output_type":"execute_result","data":{"text/plain":["0"]},"metadata":{},"execution_count":28}]},{"cell_type":"code","source":["def get_max_tpg(open_side, ohlc_list, pr_, obj_, rtc_gap):  # much faster\n","    if type(obj_) == list:\n","        obj_ = list(zip(*obj_))\n","\n","    h, l = ohlc_list[1:3]\n","\n","    if open_side == \"SELL\":\n","      max_tpg = np.array([ep_ - np.min(l[int(iin):int(iout + 1)]) for ep_, _, iin, iout in obj_]) / rtc_gap # out 포함\n","      # max_outg = np.array([np.max(h[int(iin):int(iout + 1)]) - ep_ for ep_, _, iin, iout in obj_]) / rtc_gap\n","    else:\n","      max_tpg = np.array([np.max(h[int(iin):int(iout + 1)]) - ep_ for ep_, _, iin, iout in obj_]) / rtc_gap\n","      # max_outg = np.array([ep_ - np.min(l[int(iin):int(iout + 1)]) for ep_, _, iin, iout in obj_]) / rtc_gap\n","\n","    return max_tpg[pr_ < 1]  # out 된 case 만 tpg 담음"],"metadata":{"id":"yGm3hwHEJ1va"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["short_max_tpg = get_max_tpg(\"SELL\", ohlc_list, short_pr, short_obj[:4], short_open_rtc_gap)\n","long_max_tpg = get_max_tpg(\"BUY\", ohlc_list, long_pr, long_obj[:4], long_open_rtc_gap)"],"metadata":{"id":"eooryL32-zxp"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["long_max_tpg"],"metadata":{"id":"yOMiuw7cJYmZ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def get_pr_v3(open_side, h, l, obj, tpout, lvrg, fee, p_ranges, p_qty, inversion=False):  # --> 여기서 사용하는 ex_p = ex_p\n","\n","    en_p = obj[0]\n","    # ex_p = obj[1]\n","    tp, out = np.split(tpout, 2, axis=1)\n","    len_p = len(p_ranges)\n","    en_ps, tps, outs, lvrgs, fees = [np.tile(arr_, (1, len_p)) for arr_ in [en_p, tp, out, lvrg, fee]]\n","    \n","    np_obj = np.array(obj).T[0]\n","    assert len(np_obj.shape) == 2\n","    \n","    # iin == iout 인 경우 분리\n","    en_idx = np_obj[:, 2]\n","    ex_idx = np_obj[:, 3]\n","    equal_idx = en_idx == ex_idx\n","        \n","    if open_side == \"SELL\":\n","        p_tps = en_ps - (en_ps - tps) * p_ranges\n","        # min_low = np.array([np.min(l[int(iin):int(iout + 1)]) for _, _, iin, iout in list(zip(*obj[:4]))]).reshape(-1, 1)  # -> deprecated, start from iin + 1\n","        min_low = np.full_like(en_p, np.nan)\n","        min_low[~equal_idx] = np.array([np.min(l[int(iin + 1):int(iout + 1)]) for _, _, iin, iout in np_obj[~equal_idx, :4]]).reshape(-1, 1) # start from iin + 1\n","        tp_idx = np.tile(min_low, (1, len_p)) <= p_tps\n","        \n","        # ------ liquidation ------ #\n","        max_high = np.full_like(en_p, np.nan)\n","        max_high[~equal_idx] = np.array([np.max(h[int(iin):int(iout)]) for _, _, iin, iout in np_obj[~equal_idx, :4]]).reshape(-1, 1)\n","        liqd = np.nanmin((en_p / max_high - fee - 1) * lvrg + 1)\n","    else:\n","        p_tps = en_ps + (tps - en_ps) * p_ranges\n","        # max_high = np.array([np.max(h[int(iin):int(iout + 1)]) for _, _, iin, iout in list(zip(*obj[:4]))]).reshape(-1, 1)\n","        max_high = np.full_like(en_p, np.nan)\n","        max_high[~equal_idx] = np.array([np.max(h[int(iin + 1):int(iout + 1)]) for _, _, iin, iout in np_obj[~equal_idx, :4]]).reshape(-1, 1)\n","        tp_idx = np.tile(max_high, (1, len_p)) >= p_tps\n","        # print(p_tps)\n","        # print(max_high)\n","\n","        # ------ liquidation ------ #\n","        min_low = np.full_like(en_p, np.nan)\n","        min_low[~equal_idx] = np.array([np.min(l[int(iin):int(iout)]) for _, _, iin, iout in np_obj[~equal_idx, :4]]).reshape(-1, 1)\n","        liqd = np.nanmin((min_low / en_p - fee - 1) * lvrg + 1)\n","\n","    ex_ps = outs.copy()\n","    ex_ps[tp_idx] = p_tps[tp_idx]\n","\n","    if open_side == \"SELL\":\n","        if not inversion:\n","            pr = ((en_ps / ex_ps - fees - 1) * lvrgs * p_qty).sum(axis=1) + 1\n","        else:\n","            pr = ((ex_ps / en_ps - fees - 1) * lvrgs * p_qty).sum(axis=1) + 1\n","    else:\n","        if not inversion:\n","            # print(fees)\n","            # print(p_qty)\n","            # print(p_qty * fees)\n","            pr = ((ex_ps / en_ps - fees - 1) * lvrgs * p_qty).sum(axis=1) + 1\n","        else:\n","            pr = ((en_ps / ex_ps - fees - 1) * lvrgs * p_qty).sum(axis=1) + 1\n","\n","    return pr.reshape(-1, 1), liqd"],"metadata":{"id":"SrGNSuOjCyPn"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["p_ranges, p_qty = [0.2, 0.6, 1], [1, 0.0, 0.00]\n","long_pr, long_liqd = get_pr_v3(OrderSide.BUY, h, l, long_obj, long_tpout_arr, long_lvrg_arr, long_fee_arr, p_ranges, p_qty, inversion)"],"metadata":{"id":"b5s3Us9VtlXH"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["long_pr"],"metadata":{"id":"s1O_gGXVtrtz"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def liquidation_v2(open_side, data_, obj_, lvrg, fee):  # v1 is deprecated\n","    if type(obj_) == list:\n","        obj = list(zip(*obj_))\n","\n","    np_obj = np.array(obj_).T[0]\n","    assert len(np_obj.shape) == 2\n","    \n","    en_p = obj_[0]\n","\n","    # iin == iout 인 경우 분리\n","    en_idx = np_obj[:, 2]\n","    ex_idx = np_obj[:, 3]\n","    equal_idx = en_idx == ex_idx\n","\n","    if open_side == \"SELL\":\n","        max_high = np.full_like(en_p, np.nan)\n","        max_high[~equal_idx] = np.array([np.max(data_[int(iin):int(iout)]) for _, _, iin, iout in np_obj[~equal_idx, :4]]).reshape(-1, 1)\n","        return np.nanmin((en_p / max_high - fee - 1) * lvrg + 1)\n","    else:\n","        min_low = np.full_like(en_p, np.nan)\n","        min_low[~equal_idx] = np.array([np.min(data_[int(iin):int(iout)]) for _, _, iin, iout in np_obj[~equal_idx, :4]]).reshape(-1, 1)\n","        return np.nanmin((min_low / en_p - fee - 1) * lvrg + 1)"],"metadata":{"id":"HBFh3FJLpYeZ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["short_liqd = liquidation_v2(OrderSide.SELL, h, short_obj[:4], short_lvrg_arr, short_fee_arr)\n","long_liqd = liquidation_v2(OrderSide.BUY, l, long_obj[:4], long_lvrg_arr, long_fee_arr)\n","\n","print(short_liqd)\n","print(long_liqd)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"GtajcCM49AGr","executionInfo":{"status":"ok","timestamp":1648462727490,"user_tz":-540,"elapsed":527,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"a0c857d5-83db-407c-f0dd-bb906de72f20"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["(2005,)\n","(1724,)\n","0.9338351565411452\n","0.9832121539680836\n"]}]},{"cell_type":"code","source":["def liquidation_v2(open_side, data_, obj_, lvrg, fee):  # much faster\n","\n","    # if type(obj_) == list:\n","    #     obj_ = \n","    # if open_side == \"SELL\":\n","    #     return np.min([(ep_ / np.max(data_[int(iin):int(iout + 1)]) - fee - 1) * lvrg + 1 for ep_, _, iin, iout in obj_])\n","    # else:\n","    #     return np.min([(np.min(data_[int(iin):int(iout + 1)]) / ep_ - fee - 1) * lvrg + 1 for ep_, _, iin, iout in obj_])\n","\n","    np_obj = np.array(obj).T[0]\n","    assert len(np_obj.shape) == 2\n","\n","    en_p = obj_[0]  # 2d\n","\n","    print(np_obj.shape)\n","    \n","    # iin == iout 인 경우 분리\n","    en_idx = np_obj[:, 2]\n","    ex_idx = np_obj[:, 3]\n","    equal_idx = en_idx == ex_idx\n","    print(equal_idx)\n","        \n","    if open_side == \"SELL\":\n","        max_high = en_p.copy()\n","        max_high[~equal_idx] = np.array([np.max(data_[int(iin):int(iout)]) for _, _, iin, iout in np_obj[~equal_idx, :4]]).reshape(-1, 1)  # equal_idx 는 liqd 를 측정하지 않음\n","        return np.min((en_p / max_high - fee - 1) * lvrg + 1)\n","    else:\n","        min_low = en_p.copy()\n","        print(min_low)\n","\n","        # min_low[~equal_idx] = np.array([np.min(data_[int(iin):int(iout)]) for _, _, iin, iout in np_obj[~equal_idx, :4]]).reshape(-1, 1)\n","        print(data_)\n","        # res = np.array([np.min(data_[int(iin):int(iout)]) for _, _, iin, iout in np_obj[~equal_idx, :4]]).reshape(-1, 1)\n","        res = np.min([(np.min(data_[int(iin):int(iout)]) / ep_ - fee - 1) * lvrg + 1 for ep_, _, iin, iout in list(zip(*obj_)) if iin != iout])\n","        # print(min_low[~equal_idx])\n","        print(res)\n","        return np.min((min_low / en_p - fee - 1) * lvrg + 1)"],"metadata":{"id":"eMuRjqo_evR1"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["h, l = ohlc_list[1:3]\n","long_liqd = liquidation_v2(OrderSide.BUY, l, long_obj[:4], long_lvrg_arr, long_fee_arr)"],"metadata":{"id":"uLMEbR_vij3L"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# np.array(long_obj)[:,(en_idx == ex_idx)].shape\n","long_np_obj = np.array(long_obj).T[0]"],"metadata":{"id":"ykrPUuxiXlLG"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["long_np_obj[~equal_idx, :4]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"MZiMIYLln8bB","executionInfo":{"status":"ok","timestamp":1648455838651,"user_tz":-540,"elapsed":401,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"3a2f1100-f1b1-4ad9-da2f-d50708a60ccd"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[   383.005,    381.73 ,     60.   ,     61.   ],\n","       [   386.33 ,    384.9  ,    105.   ,    107.   ],\n","       [   386.43 ,    385.24 ,    240.   ,    243.   ],\n","       ...,\n","       [  3806.905,   3863.8  , 679660.   , 679934.   ],\n","       [  3953.845,   3944.   , 680228.   , 680255.   ],\n","       [  4102.28 ,   4089.18 , 685040.   , 685167.   ]])"]},"metadata":{},"execution_count":507}]},{"cell_type":"code","source":["# for _, _, iin, iout in long_np_obj[~equal_idx, :4]:\n","#   print(iin, iout)"],"metadata":{"id":"r8rHPFeHm1DQ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# long_np_obj.shape\n","# # long_np_obj.T[0]\n","long_np_obj\n","\n","en_idx = long_np_obj[:, 2]\n","ex_idx = long_np_obj[:, 3]\n","\n","# print(en_idx[:5])\n","# print(ex_idx[:5])\n","# np.sum(en_idx == ex_idx)\n","equal_idx = en_idx == ex_idx\n","equal_idx.shape\n","# en_idx"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Uyjsp9EyZ4GF","executionInfo":{"status":"ok","timestamp":1648453058391,"user_tz":-540,"elapsed":390,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"b15069ba-0057-4665-916c-f4417979cb88"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(1724,)"]},"metadata":{},"execution_count":446}]},{"cell_type":"code","source":["# # for items in zip(long_np_obj[:4]):\n","# # for items in list(zip(*long_obj[:4])):\n","# for items in long_np_obj:\n","#   print(items)\n","#   break\n","equal_idx = equal_idx.ravel()"],"metadata":{"id":"_GrZgkaSZC2K"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["min_low = np.full_like(en_idx, np.nan)\n","min_low[~equal_idx] = np.array([np.min(l[int(iin + 1):int(iout + 1)]) for _, _, iin, iout in long_np_obj[~equal_idx, :4]]).reshape(-1, 1)  # reshape for shape match\n","# min_low[equal_idx] = np.array([np.min(l[int(iin + 1):int(iout + 1)]) for _, _, iin, iout in long_np_obj[equal_idx, :4]]).reshape(-1, 1)  # reshape for shape match # np.nan 은 비교에서 무조건 False 즉, out 처리될 것"],"metadata":{"id":"R1YRROdJYWkH"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["long_liqd"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"jFxV8dami0wn","executionInfo":{"status":"ok","timestamp":1648454521907,"user_tz":-540,"elapsed":3,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"896b3188-7179-4f33-c9e5-f259f5458436"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["-1.7472363139317024"]},"metadata":{},"execution_count":483}]},{"cell_type":"code","source":["short_outg_plot_data = short_max_outg[short_max_outg <= max_plot_outg]  # nan 과 inf 때문에 이 방식 채택\n","long_outg_plot_data = long_max_outg[long_max_outg <= max_plot_outg]\n","print(\"len(short_outg_plot_data) :\", len(short_outg_plot_data))\n","print(\"len(long_outg_plot_data) :\", len(long_outg_plot_data))\n","\n","plt.style.use(['dark_background', 'fast'])\n","fig = plt.figure(figsize=(12, 5))\n","nrows, ncols = 1, 2\n","gs = gridspec.GridSpec(nrows=nrows,  # row 부터 index 채우고 col 채우는 순서임 (gs_idx)\n","                        ncols=ncols\n","                        )\n","  \n","plt.subplot(gs[0])\n","kde_plot_v2(*np.unique(short_outg_plot_data, return_counts=True))\n","\n","plt.subplot(gs[1])\n","kde_plot_v2(*np.unique(long_outg_plot_data, return_counts=True))\n","\n","plt.suptitle('outg')\n","plt.show()"],"metadata":{"id":"mMsDJDmO5qNw"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# --- tp > ep > out 검사 --- #\n","long_tp, long_out = np.split(long_tpout_arr, 2, axis=1)\n","long_ep = long_obj[0]"],"metadata":{"id":"BjxCPi96JbfS"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print(np.sum((long_tp <= long_ep)))\n","print(np.sum((long_ep <= long_out)))\n","print(len((long_ep <= long_out)))"],"metadata":{"id":"Q_wH04vCJzYu"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def kde_plot_v2(v, c, kde_factor=0.15, num_samples=100):\n","\n","  # start_0 = time.time()\n","  kde = stats.gaussian_kde(v,weights=c,bw_method=kde_factor)\n","  kdx = np.linspace(v.min(),v.max(),num_samples)\n","  kdy = kde(kdx)\n","  ticks_per_sample = (kdx.max() - kdx.min()) / num_samples\n","  # print(\"ticks_per_sample :\", ticks_per_sample)  # sample 당 가격\n","  # print(\"kdy elapsed_time :\", time.time() - start_0)\n","\n","  peaks,_ = signal.find_peaks(kdy)\n","  pkx = kdx[peaks]\n","  pky = kdy[peaks]\n","  print(\"pkx :\", pkx)\n","\n","  # plt.figure(figsize=(10,5))\n","  plt.hist(v, weights=c, bins=num_samples, alpha=.8, edgecolor='black')\n","  plt.plot(kdx, kdy, color='white')\n","  plt.plot(pkx, pky, 'bo', color='yellow')\n","  # plt.show()\n"],"metadata":{"id":"YlENTUSXhBfa"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def get_max_outg(open_side, config, ohlc_list, obj, tpout_arr, rtc_gap):\n","\n","    h, l = ohlc_list[1:3]    \n","    en_p, _, en_idxs, _, open_idxs = obj\n","\n","    if open_side == \"SELL\":\n","      idxgs = [np.argwhere(l[int(en_idx) : int(en_idx + config.tr_set.bias_info_tick)] <= tpout_arr[i, 0]) for i, en_idx in enumerate(en_idxs)]\n","    else:\n","      idxgs = [np.argwhere(h[int(en_idx) : int(en_idx + config.tr_set.bias_info_tick)] >= tpout_arr[i, 0]) for i, en_idx in enumerate(en_idxs)]\n","\n","    min_idxg = np.array([gaps.min() if len(gaps) != 0 else np.nan for gaps in idxgs])  # get 최소 idx_gap from en_idx\n","    nan_idx = np.isnan(min_idxg) # .astype(int)\n","    min_idxg[nan_idx] = 0  # fill na 0, for idex summation below\n","\n","    if open_side == \"SELL\":\n","      max_outg = np.array([np.max(h[int(en_idx):int(en_idx + idx_gap + 1)]) - ep_ for en_idx, idx_gap, ep_ in zip(en_idxs, min_idxg, en_p)]) / rtc_gap\n","    else:\n","      max_outg = np.array([ep_ - np.min(l[int(en_idx):int(en_idx + idx_gap + 1)]) for en_idx, idx_gap, ep_ in zip(en_idxs, min_idxg, en_p)]) / rtc_gap # out_idx 포함\n","\n","    return max_outg[~nan_idx], open_idxs[~nan_idx].astype(int)  # true_bias 의 outg data 만 사용"],"metadata":{"id":"ZkbuBX1Ygzll"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["strat_version = config.strat_version\n","long_open_res = res_df['long_open_{}'.format(strat_version)].to_numpy().astype(bool)\n","\n","res_df['long_tp_{}'.format(strat_version)].to_numpy()[long_open_res]\n","res_df['long_ep_{}'.format(strat_version)].to_numpy()[long_open_res]\n","# res_df['long_ep_{}'.format(strat_version)].to_numpy()\n","# long_open_res\n","# res_df['long_ep_{}'.format(strat_version)].to_numpy()[long_open_res]\n","# np.sum(res_df['long_tp_{}'.format(strat_version)].to_numpy()[long_open_res] <= res_df['long_ep_{}'.format(strat_version)].to_numpy()[long_open_res])\n","# res = res_df['long_tp_{}'.format(strat_version)].to_numpy()[long_open_res] > res_df['long_ep_{}'.format(strat_version)].to_numpy()[long_open_res]\n","res = res_df['long_tp_{}'.format(strat_version)].to_numpy()[long_open_res] <= res_df['long_ep_{}'.format(strat_version)].to_numpy()[long_open_res]\n","\n","print(res_df['long_tp_{}'.format(strat_version)].to_numpy()[long_open_res][res])\n","print(res_df['long_ep_{}'.format(strat_version)].to_numpy()[long_open_res][res])\n","print(len(res_df['long_ep_{}'.format(strat_version)].to_numpy()[long_open_res][res]))\n","\n","# res = res_df['long_tp_{}'.format(strat_version)].to_numpy() > res_df['long_ep_{}'.format(strat_version)].to_numpy()\n","# res = res_df['long_ep_{}'.format(strat_version)].to_numpy() > res_df['long_out_{}'.format(strat_version)].to_numpy()\n","\n","# print(res_df['long_tp_{}'.format(strat_version)].to_numpy()[res])\n","# print(res_df['long_ep_{}'.format(strat_version)].to_numpy()[res])\n","# print(res_df['long_out_{}'.format(strat_version)].to_numpy()[res])\n","# print(len(res_df['long_ep_{}'.format(strat_version)].to_numpy()[res]))\n","# print(len(res_df['long_out_{}'.format(strat_version)].to_numpy()[res]))\n","\n","# assert np.sum(res_df['long_tp_{}'.format(strat_version)].to_numpy()[long_open_res] <= res_df['long_ep_{}'.format(strat_version)].to_numpy()[long_open_res]) == 0\n","# assert np.sum(res_df['long_ep_{}'.format(strat_version)].to_numpy()[long_open_res] <= res_df['long_out_{}'.format(strat_version)].to_numpy()[long_open_res]) == 0"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"mYQgnD9CgC8b","executionInfo":{"status":"ok","timestamp":1648380698566,"user_tz":-540,"elapsed":479,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"e316919a-0e22-4266-ef24-185284cc8cb5"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[ 390.58  387.91  344.81  346.25  334.7   351.81  366.07  367.09  372.83  372.08  384.92  387.79  374.12  365.82  364.87  359.06  386.58  381.46  384.71  385.    383.9   384.18  381.18  369.86  373.5   374.17  341.4   344.5   345.29  342.93  343.49  340.7   320.3   345.3   349.59  355.    352.    354.    357.96  358.21  355.    352.47  355.18  346.41  347.14  348.54  346.62  348.28  347.38  348.19  351.74  352.98  339.87  339.64  339.99  339.46  349.97  368.    375.85  374.3   367.2   383.8   386.25  385.31  384.97  377.3   377.85  380.28  378.    365.92  366.9   367.9   368.6   369.61  368.48  369.09  372.72  379.    379.17  375.2   379.09  380.52  397.42  417.13  418.05  413.6   412.26  411.7   408.6   406.29  405.5   383.74  388.2   386.95  387.    386.97  387.86  378.69  383.58  459.06  437.    445.    445.99  464.27  463.1   464.96  463.3   456.76  463.89  462.3   458.31  459.37  461.31  470.28  475.    591.54  601.95  619.3   609.46  573.21  512.97  554.39  588.37  593.83  571.43  593.31  589.71  552.62  551.44  563.9   573.    568.68  562.72  556.82  565.49  581.    592.74  651.18  644.2   646.4   607.89  606.5   615.    612.8   614.27  582.76  610.64  704.97  753.49  741.36  736.2   996.   1694.7  1686.52 1859.07 1818.7  1892.84 1930.29 1959.36 1639.28 1565.   1565.   1565.   1565.   1565.   1565.   1565.   1565.   1565.   1565.   1711.55 1783.83 1821.46 1834.   1623.93 1979.92 2062.   2204.69 2527.76 2720.47 3532.96 3890.   2778.64 2600.   2331.29 2175.   2140.   1963.91 1753.24 1969.43 2045.5  2158.   2250.   2280.78 2316.37 3180.   3141.93 3276.   3243.   3271.   3329.56 3236.   3275.94 3184.99 3410.   3963.04 3305.   3260.94 3636.28 3419.99 3400.   3383.32 3558.82 3499.   3503.68 4528.   4579.46 4492.13 4231.98 4373.8  3794.77 4082.93 4055.41 3782.   3745.   3163.98 3227.16 3302.58 3105.25 3078.   2621.06 2548.   2619.76 3116.4 ]\n","[ 390.58  387.91  344.81  346.25  334.7   351.81  366.07  367.09  372.83  372.08  384.92  387.79  374.12  365.82  364.87  359.06  386.58  381.46  384.71  385.    383.9   384.18  381.18  369.86  373.5   374.17  341.4   344.5   345.29  342.93  343.49  340.7   320.3   345.3   349.59  355.    352.    354.    357.96  358.21  355.    352.47  355.18  346.41  347.14  348.54  346.62  348.28  347.38  348.19  351.74  352.98  339.87  339.64  339.99  339.46  349.97  368.    375.85  374.3   367.2   383.8   386.25  385.31  384.97  377.3   377.85  380.28  378.    365.92  366.9   367.9   368.6   369.61  368.48  369.09  372.72  379.    379.17  375.2   379.09  380.52  397.42  417.13  418.05  413.6   412.26  411.7   408.6   406.29  405.5   383.74  388.2   386.95  387.    386.97  387.86  378.69  383.58  459.06  437.    445.    445.99  464.27  463.1   464.96  463.3   456.76  463.89  462.3   458.31  459.37  461.31  470.28  475.    591.54  601.95  619.3   609.46  573.21  512.97  554.39  588.37  593.83  571.43  593.31  589.71  552.62  551.44  563.9   573.    568.68  562.72  556.82  565.49  581.    592.74  651.18  644.2   646.4   607.89  606.5   615.    612.8   614.27  582.76  610.64  704.97  753.49  741.36  736.2   996.   1694.7  1686.52 1859.07 1818.7  1892.84 1930.29 1959.36 1639.28 1565.   1565.   1565.   1565.   1565.   1565.   1565.   1565.   1565.   1565.   1711.55 1783.83 1821.46 1834.   1623.93 1979.92 2062.   2204.69 2527.76 2720.47 3532.96 3890.   2778.64 2600.   2331.29 2175.   2140.   1963.91 1753.24 1969.43 2045.5  2158.   2250.   2280.78 2316.37 3180.   3141.93 3276.   3243.   3271.   3329.56 3236.   3275.94 3184.99 3410.   3963.04 3305.   3260.94 3636.28 3419.99 3400.   3383.32 3558.82 3499.   3503.68 4528.   4579.46 4492.13 4231.98 4373.8  3794.77 4082.93 4055.41 3782.   3745.   3163.98 3227.16 3302.58 3105.25 3078.   2621.06 2548.   2619.76 3116.4 ]\n","234\n"]}]},{"cell_type":"code","source":["# fig, axs=plt.subplots(1,2,sharey=True,tight_layout=True)\n","# axs[0].hist(short_max_outg,bins=100)\n","# axs[1].hist(abs_ratio_5T[short_outg_open_idx],bins=100)\n","# plt.show()"],"metadata":{"id":"57mFruHtCmmh"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def kde_plot(plot_data, kde_factor=0.15, num_samples=100):\n","  v, c = np.unique(plot_data, return_counts=True)  \n","\n","  # start_0 = time.time()\n","  kde = stats.gaussian_kde(v,weights=c,bw_method=kde_factor)\n","  kdx = np.linspace(v.min(),v.max(),num_samples)\n","  kdy = kde(kdx)\n","  ticks_per_sample = (kdx.max() - kdx.min()) / num_samples\n","  # print(\"ticks_per_sample :\", ticks_per_sample)  # sample 당 가격\n","  # print(\"kdy elapsed_time :\", time.time() - start_0)\n","\n","  peaks,_ = signal.find_peaks(kdy)\n","  pkx = kdx[peaks]\n","  pky = kdy[peaks]\n","\n","  # plt.figure(figsize=(10,5))\n","  plt.hist(v, weights=c, bins=num_samples, alpha=.8, edgecolor='black')\n","  plt.plot(kdx, kdy, color='white')\n","  plt.plot(pkx, pky, 'bo', color='yellow')\n","  # plt.show()\n"],"metadata":{"id":"40MdGjCY1YtH"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["v, c = np.unique(long_tpg_plot, return_counts=True)"],"metadata":{"id":"v2k6D7UceIK4"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["kde_factor = 0.15\n","num_samples = 100\n","\n","start_0 = time.time()\n","kde = stats.gaussian_kde(v,weights=c,bw_method=kde_factor)\n","kdx = np.linspace(v.min(),v.max(),num_samples)\n","kdy = kde(kdx)\n","ticks_per_sample = (kdx.max() - kdx.min()) / num_samples\n","print(\"ticks_per_sample :\", ticks_per_sample)  # sample 당 가격\n","print(\"kdy elapsed_time :\", time.time() - start_0)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1648269301273,"user_tz":-540,"elapsed":424,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"991eb570-3633-49b7-9a91-02cb5d4fba43","id":"bJe1fSGFdUcj"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["ticks_per_sample : 0.047098781436344224\n","kdy elapsed_time : 0.013733863830566406\n"]}]},{"cell_type":"code","source":["peaks,_ = signal.find_peaks(kdy)\n","pkx = kdx[peaks]\n","pky = kdy[peaks]\n","\n","plt.figure(figsize=(10,5))\n","plt.hist(v, weights=c, bins=num_samples, alpha=.8, edgecolor='black')\n","plt.plot(kdx, kdy, color='white')\n","plt.plot(pkx, pky, 'bo', color='yellow')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":320},"executionInfo":{"status":"ok","timestamp":1648269365137,"user_tz":-540,"elapsed":954,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"db5fd5b3-4617-42f9-877c-c4b9b82adcef","id":"1Cby5teZdUcj"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 720x360 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["def max_tpout_gap(open_side, ohlc_list, obj_, rtc_gap):  # much faster\n","    if type(obj_) == list:\n","        obj_ = list(zip(*obj_))\n","\n","    h, l = ohlc_list[1:3]\n","\n","    if open_side == \"SELL\":\n","      max_tpg = np.array([ep_ - np.min(l[int(iin):int(iout + 1)]) for ep_, _, iin, iout in obj_]) / rtc_gap # out 포함\n","      max_outg = np.array([np.max(h[int(iin):int(iout + 1)]) - ep_ for ep_, _, iin, iout in obj_]) / rtc_gap\n","    else:\n","      max_tpg = np.array([np.max(h[int(iin):int(iout + 1)]) - ep_ for ep_, _, iin, iout in obj_]) / rtc_gap\n","      max_outg = np.array([ep_ - np.min(l[int(iin):int(iout + 1)]) for ep_, _, iin, iout in obj_]) / rtc_gap\n","\n","    return max_tpg, max_outg"],"metadata":{"id":"CfiSD0uwcNIZ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["short_open_res = np.ones(len(res_df))\n","\n","strat_version = config.strat_version\n","\n","short_rtc_1_col, short_rtc_0_col, short_rtc_gap_col = 'short_rtc_1_{}'.format(strat_version), 'short_rtc_0_{}'.format(strat_version), 'short_rtc_gap_{}'.format(strat_version) \n","long_rtc_1_col, long_rtc_0_col, long_rtc_gap_col = 'long_rtc_1_{}'.format(strat_version), 'long_rtc_0_{}'.format(strat_version), 'long_rtc_gap_{}'.format(strat_version) \n","\n","short_rtc_1_col, short_rtc_0_col, short_rtc_gap_col = 'short_rtc_1_{}'.format(strat_version), 'short_rtc_0_{}'.format(strat_version), 'short_rtc_gap_{}'.format(strat_version) \n","long_rtc_1_col, long_rtc_0_col, long_rtc_gap_col = 'long_rtc_1_{}'.format(strat_version), 'long_rtc_0_{}'.format(strat_version), 'long_rtc_gap_{}'.format(strat_version) \n","\n","data_cols = ['open', 'high', 'low']   # Todo - public_indi 이전에 해야할지도 모름 # 'close', 'haopen', 'hahigh', 'halow', 'haclose'\n","rtc_cols = [short_rtc_1_col, short_rtc_0_col, short_rtc_gap_col, long_rtc_1_col, long_rtc_0_col, long_rtc_gap_col]   # Todo - public_indi 이전에 해야할지도 모름\n","\n","short_rtc_1_, short_rtc_0_, short_rtc_gap_, long_rtc_1_, long_rtc_0_, long_rtc_gap_ = [res_df[col_].to_numpy() for col_ in rtc_cols]\n","open, high, low = [res_df[col_].to_numpy() for col_ in data_cols]\n","short_base = (short_rtc_1_ + short_rtc_0_) / 2\n","long_base = (long_rtc_1_ + long_rtc_0_) / 2\n","# back_ha_o = res_df['haopen'].shift(1).to_numpy()\n","# back_ha_c = res_df['haclose'].shift(1).to_numpy()\n","\n","touch_period = 50\n","# short_open_res *= (back_ha_c >= back_ha_o) & (ha_o > ha_c)\n","# short_open_res *= ha_o == ha_h\n","# short_open_res *= np_timeidx % tf_entry == tf_entry - 1     \n","# short_a_touch = pd.Series(np.where(high >= short_rtc_0_, np.arange(len_df), np.nan)).rolling(touch_period, min_periods=1).max().to_numpy()  # min -> max\n","short_a_touch = pd.Series(np.where((high >= short_base_b) & (short_base_b >= open), np.arange(len_df), np.nan)).rolling(touch_period, min_periods=1).min().to_numpy()   # min 으로 하면 a 이전에 b 있는건 모두 제외하게됨\n","short_b_touch = pd.Series(np.where(low <= short_rtc_1_, np.arange(len_df), np.nan)).rolling(touch_period, min_periods=1).max().to_numpy()   # min 으로 하면 a 이전에 b 있는건 모두 제외하게됨\n","\n","short_a_touch_line = get_line(short_a_touch, short_rtc_0_)\n","short_b_touch_line = get_line(short_b_touch, short_rtc_1_)\n","short_en_p = (short_a_touch_line + short_b_touch_line) / 2\n","short_base_b = get_line(short_b_touch, short_base)\n","short_rtc_gap_b = get_line(short_b_touch, short_rtc_gap_)\n","short_open_res *= (high >= short_base_b) & (short_base_b >= open) & (short_a_touch < short_b_touch) & (short_base_b + config.loc_set.point.base_gap * short_rtc_gap_b >= short_base)\n","\n","res_df['short_open_{}'.format(strat_version)] = short_open_res"],"metadata":{"id":"r82KfqFqi9tp"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# short_en_p == short_base_b\n","print(short_en_p[~np.isnan(short_en_p)])\n","print(short_base_b[~np.isnan(short_en_p)])\n","\n","np.sum((short_en_p[~np.isnan(short_en_p)] == short_base_b[~np.isnan(short_en_p)]) == 0) # => why ..?"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"CgD4-ZKW11MQ","executionInfo":{"status":"ok","timestamp":1647925782107,"user_tz":-540,"elapsed":366,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"c126aabb-cb41-4392-a80c-53971b146c2c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[ 377.545  378.085  379.015 ... 3148.91  3148.91  3148.91 ]\n","[ 377.545  378.085  379.015 ... 3148.91  3148.91  3148.91 ]\n"]},{"output_type":"execute_result","data":{"text/plain":["0"]},"metadata":{},"execution_count":29}]},{"cell_type":"code","source":["true_idx = short_open_res == 1\n","\n","# print(((short_a_touch_line + short_b_touch_line) / 2)[true_idx][-100:])\n","print(short_en_p[true_idx][-100:])\n","# print(short_a_touch_line[true_idx][-100:])\n","\n","print(short_a_touch_line)\n","print(short_a_touch)\n","print(short_rtc_0_)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"AIt9z1NRj5bJ","executionInfo":{"status":"ok","timestamp":1647565975814,"user_tz":-540,"elapsed":310,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"c1b83639-7041-4745-dacd-d9cff49a205d"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[2934.59  2934.59  3028.59  3028.59  3028.59  3026.075 3026.075 3016.09  3014.67  3014.4   3014.4   3014.4   3014.4   3014.4   3014.4   3014.395 3014.315 3014.315 3030.235 3030.235 3030.235 3030.235 3051.18  3051.18  3051.18  3077.275 3076.77  3090.945 3105.1   3105.1   3105.1   3105.1   3105.1   3105.1   3099.205 3099.205 3099.205 3105.495 3105.495 3109.615 3127.43  3123.795 3123.795 3123.795 3112.695 3122.715 3122.715 3122.715 3122.715 3115.2   3114.93  3097.035 3115.31  3115.31  3114.245 3114.15  3114.15  3114.15  3112.2   3110.75  3110.75  3112.16  3112.16  3134.39  3134.39  3134.39  3127.905 3127.905 3127.905 3127.905 3128.595 3128.595 3138.59  3138.59  3147.47  3134.205 3133.04  3134.155 3131.105 3131.105 3131.105 3065.94  3065.94  3065.94  3065.51  3068.    3079.33  3079.33  3079.33  3099.805 3169.595 3169.595 3169.595 3169.04  3140.395 3140.395 3140.395 3148.91  3148.91  3148.91 ]\n","[    nan     nan     nan ... 3158.68 3158.68 3158.68]\n","[    nan     nan     nan ... 763812. 763812. 763812.]\n","[ 388.18  388.18  388.18 ... 3158.68 3158.68 3158.68]\n"]}]},{"cell_type":"code","source":["short_a_touch_line = get_line(short_a_touch, short_rtc_0_)\n","short_b_touch_line = get_line(short_b_touch, short_rtc_1_)\n","short_en_p = (short_a_touch_line + short_b_touch_line) / 2\n","\n","# print(((short_a_touch_line + short_b_touch_line) / 2)[true_idx][-100:])\n","# print(short_en_p[true_idx][-100:])\n","\n","print(short_a_touch_line)\n","print(short_a_touch)\n","print(short_rtc_0_)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"GXbSWec4ik3g","executionInfo":{"status":"ok","timestamp":1647565931392,"user_tz":-540,"elapsed":2,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"547b0fc1-0e35-4387-e891-a3af42c18476"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[    nan     nan     nan ... 3158.68 3158.68 3158.68]\n","[    nan     nan     nan ... 763812. 763812. 763812.]\n","[ 388.18  388.18  388.18 ... 3158.68 3158.68 3158.68]\n"]}]},{"cell_type":"code","source":["def get_line(touch, rtc_):\n","  touch_copy = touch.copy()\n","  touch_line = rtc_.copy()\n","\n","  nan_idx = np.isnan(touch_copy)\n","  touch_copy[nan_idx] = 0   # for indexing array\n","  touch_line[touch_copy.astype(int)]\n","  touch_line[nan_idx] = np.nan   # for true comp.\n","\n","  return touch_line"],"metadata":{"id":"fx4iA-T1k6GS"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# print(short_b_touch[-100:])\n","# print(short_base_b[-100:])\n","true_idx = short_open_res == 1\n","short_a_touch_line = get_line(short_a_touch, short_rtc_0_)\n","short_b_touch_line = get_line(short_b_touch, short_rtc_1_)\n","\n","print(len(short_a_touch_line))\n","print(len(short_b_touch_line))\n","print(((short_a_touch_line + short_b_touch_line) / 2)[true_idx][-100:])\n","\n","print(short_a_touch_line[true_idx][-100:])\n","print(short_b_touch_line[true_idx][-100:])\n","print(short_open_res[true_idx][-100:])\n","print(short_en_p[true_idx][-100:])"],"metadata":{"id":"Pk8i59oM4CFZ"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["##### partial"],"metadata":{"id":"8b4SbvPrAPR1"}},{"cell_type":"code","source":["def get_pr_v2(open_side, h, l, obj, tpout, lvrg, fee, p_ranges, p_qty, inversion=False):  # --> 여기서 사용하는 ex_p = ex_p\n","\n","    en_p = obj[0]\n","    # ex_p = obj[1]\n","    tp, out = np.split(tpout, 2, axis=1)\n","    len_p = len(p_ranges)\n","    en_ps, tps, outs, lvrgs, fees = [np.tile(arr_, (1, len_p)) for arr_ in [en_p, tp, out, lvrg, fee]]\n","    \n","    np_obj = np.array(obj).T[0]\n","    assert len(np_obj.shape) == 2\n","    \n","    # iin == iout 인 경우 분리\n","    en_idx = np_obj[:, 2]\n","    ex_idx = np_obj[:, 3]\n","    equal_idx = en_idx == ex_idx\n","        \n","    if open_side == \"SELL\":\n","        p_tps = en_ps - (en_ps - tps) * p_ranges\n","        # min_low = np.array([np.min(l[int(iin):int(iout + 1)]) for _, _, iin, iout in list(zip(*obj[:4]))]).reshape(-1, 1)  # -> deprecated, start from iin + 1\n","        min_low = np.full_like(en_p, np.nan)\n","        min_low[~equal_idx] = np.array([np.min(l[int(iin + 1):int(iout + 1)]) for _, _, iin, iout in np_obj[~equal_idx, :4]]).reshape(-1, 1)\n","        tp_idx = np.tile(min_low, (1, len_p)) <= p_tps\n","    else:\n","        p_tps = en_ps + (tps - en_ps) * p_ranges\n","        # max_high = np.array([np.max(h[int(iin):int(iout + 1)]) for _, _, iin, iout in list(zip(*obj[:4]))]).reshape(-1, 1)\n","        max_high = np.full_like(en_p, np.nan)\n","        max_high[~equal_idx] = np.array([np.max(h[int(iin + 1):int(iout + 1)]) for _, _, iin, iout in np_obj[~equal_idx, :4]]).reshape(-1, 1)\n","        tp_idx = np.tile(max_high, (1, len_p)) >= p_tps\n","\n","    ex_ps = outs.copy()\n","    ex_ps[tp_idx] = p_tps[tp_idx]\n","\n","    if open_side == \"SELL\":\n","        if not inversion:\n","            pr = ((en_ps / ex_ps - fees - 1) * lvrgs * p_qty).sum(axis=1) + 1\n","        else:\n","            pr = ((ex_ps / en_ps - fees - 1) * lvrgs * p_qty).sum(axis=1) + 1\n","    else:\n","        if not inversion:\n","            pr = ((ex_ps / en_ps - fees - 1) * lvrgs * p_qty).sum(axis=1) + 1\n","        else:\n","            pr = ((en_ps / ex_ps - fees - 1) * lvrgs * p_qty).sum(axis=1) + 1\n","\n","    return pr.reshape(-1, 1)"],"metadata":{"id":"M4MB0mryCiHC"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def get_pr(open_side, en_p, ex_p, lvrg, fee, inversion=False):\n","  assert len(ex_p) == len(en_p)\n","  if open_side == \"SELL\":\n","\n","    if not inversion:\n","      pr = (en_p / ex_p - fee - 1) * lvrg + 1\n","    else:\n","      pr = (ex_p / en_p - fee - 1) * lvrg + 1\n","  else:\n","    if not inversion:\n","      pr = (ex_p / en_p - fee - 1) * lvrg + 1\n","    else:\n","      pr = (en_p / ex_p - fee - 1) * lvrg + 1\n","\n","  return pr\n"],"metadata":{"id":"2QuLj5hrjD9y"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# 0. obj 를 out 과 tp 로 구분해야할 것 - pr 이용\n","# 1. out 을 한 경우\n","#   a. max high (long) 조사 (= max_tpg)\n","#     i. tp 단계별로 \"비교\" 진행, 만족하면 + profit (수정)\n","#     ii. max_gap 과 \n","# 2. tp 를 한 경우\n","#   a. tp 단계별로 + profit (수정)\n","\n","# tp 를 했는데 out 처리 된 경우 (fee 덕분에)\n","tp_idx = (long_pr > 1).ravel()\n","print(long_obj[0][tp_idx])\n","print(long_obj[0][~tp_idx])"],"metadata":{"id":"4whYwQmQ9oY1"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# ex_ps = [en_p + (ex_p - en_p) * p_range for p_range in p_ranges]"],"metadata":{"id":"42V_JP1oGe4c"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# ------ vectorization for partial ------ # \n","en_p = long_obj[0]\n","ex_p = long_obj[1]\n","# tp = long_tpout_arr[:, 0]\n","# out = long_tpout_arr[:, 1]\n","tp, out = np.split(long_tpout_arr, 2, axis=1)\n","# tp = tp.ravel()\n","\n","# print(en_p)\n","# print(tp)\n","# print(out.shape)\n","\n","len_p = len(p_ranges)\n","en_ps = np.tile(en_p, (1, len_p))\n","tps = np.tile(tp, (1, len_p))\n","outs = np.tile(out, (1, len_p))\n","lvrgs = np.tile(long_lvrg_arr, (1, len_p))\n","fees = np.tile(long_fee_arr, (1, len_p))\n","print(lvrgs.shape)\n","print(fees.shape)\n","\n","p_tps = en_ps + (tps - en_ps) * p_ranges\n","\n","max_high = np.array([np.max(h[int(iin):int(iout + 1)]) for _, _, iin, iout in list(zip(*long_obj[:4]))]).reshape(-1, 1) # / rtc_gap\n","res = np.tile(max_high, (1, len_p)) >= p_tps\n","\n","ex_ps = outs.copy()\n","ex_ps[res] = p_tps[res]   # max_high 기준으로 체결된 만큼만 p_tp 로 변환, \"나머지는 outs\"\n","\n","# print(tps[0]))\n","# np.sum(tps1 != tps2)  # 0\n","# print(outs[0])\n","# print(outs)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"joaIDVNLqFqz","executionInfo":{"status":"ok","timestamp":1648451438059,"user_tz":-540,"elapsed":353,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"27ae7b8e-5f4e-4641-a062-746f5307bf7d"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["(1724, 1)\n","(1724, 1)\n"]}]},{"cell_type":"code","source":["h, l = ohlc_list[1:3]    \n","\n","en_idx = long_obj[2]\n","ex_idx = long_obj[3]\n","\n","# print(en_idx[:5])\n","# print(ex_idx[:5])\n","# np.sum(en_idx == ex_idx)\n","equal_idx = en_idx == ex_idx\n","equal_idx"],"metadata":{"id":"QI6uXYjtVWrw"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["p_ranges = [1/3, 2/3, 1]\n","p_qty = [0.25, 0.25, 0.5]\n","p_ranges = [1] # [1/3, 2/3, 1] [1]\n","p_qty =  [1] # [0.25, 0.25, 0.5] [1]\n","# long_ppr[tp_idx] = tp_ppr(OrderSide.BUY, *long_obj[:2], p_ranges, p_qty, long_lvrg_arr, long_fee_arr, inversion)[tp_idx]"],"metadata":{"id":"TO3dF_3yum4s"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# tp_pr = (tps / en_ps - fees - 1) * lvrgs * p_qty\n","# tp_pr.sum(axis=1) + 1\n","\n","# out_pr = (outs / en_ps - fees - 1) * lvrgs * p_qty\n","# # print(out_pr)\n","# print(out_pr.sum(axis=1) + 1)\n","\n","pr = (ex_ps / en_ps - fees - 1) * lvrgs * p_qty\n","print(pr.sum(axis=1) + 1)\n","print(np.sum(pr, axis=1).reshape(-1, 1) + 1)\n","\n","pr = (ex_p / en_p - long_fee_arr - 1) * long_lvrg_arr\n","print((pr + 1).ravel()) \n","\n","print(np.sum((pr + 1).ravel() != (pr.sum(axis=1) + 1)))  # 0\n","get_pr_v2(OrderSide.BUY, h, l, long_obj, long_tpout_arr, long_lvrg_arr, long_fee_arr, p_ranges, p_qty, inversion)\n","get_pr_v2(OrderSide.SELL, h, l, short_obj, short_tpout_arr, short_lvrg_arr, short_fee_arr, p_ranges, p_qty, inversion)"],"metadata":{"id":"8LeNbPlJrIN-"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["pr = get_pr(OrderSide.SELL, *short_obj[:2], short_lvrg_arr, short_fee_arr, inversion)"],"metadata":{"id":"GNm_lN1-kJPW"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print(prs[:10])\n","print(pr[:10])\n","# print(np.sum(prs, axis=0))\n","# print((prs.sum(axis=0)))"],"metadata":{"id":"8il3UnQ6oyjC"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["loss_tp_idx = (~tp_idx) * (res3 > 2)\n","print(len(res3[loss_tp_idx])) # tp 했으나, fee 때문에 out_idx 로 지정된 case 로 예상 - 8\n","\n","print(en_p[loss_tp_idx])\n","print(ex_p[loss_tp_idx])\n","ex_p[loss_tp_idx] / en_p[loss_tp_idx] - long_fee_arr.ravel()[loss_tp_idx]"],"metadata":{"id":"WOEmwtPErNgz"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# ------ 이래서, 함수로 먼저 작성하면 debugging 하기 곤란하구나 ------ #\n","en_p = long_obj[0].ravel()\n","ex_p = long_obj[1].ravel()\n","# tp = long_tpout_arr[:, 0]\n","# out = long_tpout_arr[:, 1]\n","tp, out = np.split(long_tpout_arr, 2, axis=1)\n","tp = tp.ravel()\n","\n","print(en_p)\n","print(tp)\n","# print(out.shape)\n","\n","tps = np.vstack(np.array([en_p + (tp - en_p) * p_range for p_range in p_ranges])).T  # tp_ppr 로 나눌게 아니라, ex_ps 를 tps, replaced_outs 로 채우면 되지 않을까\n","outs = np.tile(out, (1, len(p_ranges)))\n","print(tps[0])\n","print(outs[0])\n","print(outs)"],"metadata":{"id":"A_Jn5zMYCtH0"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["outs2 = outs.copy()\n","outs2[res] = tps[res]"],"metadata":{"id":"g5uLwyYnoApS"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["h, l = ohlc_list[1:3]    \n","# max_high = np.array([np.max(h[int(iin):int(iout + 1)]) - ep_ for ep_, _, iin, iout in list(zip(*long_obj[:4]))]) # / rtc_gap\n","max_high = np.array([np.max(h[int(iin):int(iout + 1)]) for _, _, iin, iout in list(zip(*long_obj[:4]))]).reshape(-1, 1) # / rtc_gap\n","res = np.tile(max_high, (1, 3)) > tps"],"metadata":{"id":"r7koyseNF6J8"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# tps\n","en_ps = np.tile(en_p, (1, len(p_ranges)))\n","print(en_ps.shape)\n","\n","# tps * p_qty"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"swCpmd0Jpfz4","executionInfo":{"status":"ok","timestamp":1648439562545,"user_tz":-540,"elapsed":365,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"6919faf2-a6a6-4adf-ad3f-6a9fbb6c05e2"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["(1, 46536)\n"]}]},{"cell_type":"code","source":["# print(max_high.shape)\n","# print(np.tile(max_high, (1, 3)).shape)\n","# print(tps.shape)\n","# print(res)\n","\n","# print(np.insert(res, 0, np.full_like(max_high, True), axis=1))\n","res2 = np.insert(res, 0, np.array([True]), axis=1)\n","# print(res2)\n","\n","res3 = np.array([np.argwhere(arr_).max() for arr_ in res2])  # 조건에 맞는 최대 index"],"metadata":{"id":"FrldeXRFGUD5"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# res3\n","# tps\n","\n","# # 예로, res3 index = 2, -> 0, 1 까지는 tp + 2 는 out => ex_ps 에 들어있는 ex_p 가\n","# # 즉, outs * p_ranges 만큼의 array 에 res3_index 만틈 tp 로 채움\n","# if not inversion:\n","#   pr = np.array([(ex_p_ / en_p - fee - 1) * lvrg * qty for ex_p_, qty in zip(ex_ps, p_qty)]).sum(axis=0) + 1"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"kPOrz6grkHI-","executionInfo":{"status":"ok","timestamp":1648438048923,"user_tz":-540,"elapsed":354,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"74916754-5f95-45aa-8a9c-1eff7e4639ba"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([1, 1, 3, ..., 1, 0, 1])"]},"metadata":{},"execution_count":153}]},{"cell_type":"code","source":["long_ppr = long_pr.copy()"],"metadata":{"id":"wHnELMNyAc7D"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print(long_pr[tp_idx])\n","print(long_ppr[tp_idx])\n","# print(np.sum(long_ppr[tp_idx] != long_pr[tp_idx]))"],"metadata":{"id":"w1PONy6jCJLQ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["rtc_ranges = [1] # [1/3, 2/3, 1] * "],"metadata":{"id":"4WSFaUgg_jRd"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["test_ratio=0.3\n","plot_is=1\n","\n","open_idx = open_info_df.index.to_numpy()\n","len_df = len(res_df)\n","s_idx = (open_idx < int(len_df * (1 - test_ratio))) == plot_is\n","s_open_info_df = open_info_df[s_idx]\n","s_open_idx = open_idx[s_idx]\n","\n","open_info_list = [s_open_info_df[col_].to_numpy() for col_ in s_open_info_df.columns]\n","side_arr, zone_arr, id_arr, id_idx_arr = open_info_list\n","\n","# ------------ get paired_res ------------ #\n","start_0 = time.time()\n","paired_res = en_ex_pairing(res_df, s_open_idx, open_info_list, ohlc_list, point2_list, market_data_list, config_list, np_timeidx, funcs)\n","# valid_openi_arr, pair_idx_arr, pair_price_arr, lvrg_arr, fee_arr, tpout_arr = paired_res\n","print(\"en_ex_pairing elapsed time :\", time.time() - start_0)  #  0.37 --> 0.3660471439361572 --> 0.21(lesser if)\n","\n","# ------------ idep_plot ------------ #\n","start_0 = time.time()\n","h, l = ohlc_list[1:3]\n","sample_ratio=1 - test_ratio\n","if sample_ratio is not None:\n","  sample_len = int(len_df * sample_ratio)\n","else:\n","  sample_len = len_df\n","\n","# ------ short & long data preparation ------ #\n","# start_0 = time.time()\n","valid_openi_arr, pair_idx_arr, pair_price_arr, lvrg_arr, fee_arr, tpout_arr, bias_arr = paired_res    \n","assert len(valid_openi_arr) != 0, \"assert len(valid_openi_arr) != 0\"    \n","short_valid_openi_idx = np.where(side_arr[valid_openi_arr] == OrderSide.SELL)[0]  # valid_openi_arr 에 대한 idx, # side_arr,\n","long_valid_openi_idx = np.where(side_arr[valid_openi_arr] == OrderSide.BUY)[0]\n","\n","valid_open_idx = open_idx[valid_openi_arr].reshape(-1, 1)\n","\n","short_obj = np.hstack((pair_price_arr, pair_idx_arr, valid_open_idx))[short_valid_openi_idx]\n","long_obj = np.hstack((pair_price_arr, pair_idx_arr, valid_open_idx))[long_valid_openi_idx]\n","both_obj = np.vstack((short_obj, long_obj))\n","print(\"short_obj.shape :\", short_obj.shape)\n","print(\"long_obj.shape :\", long_obj.shape)\n","\n","short_obj, long_obj, both_obj = [np.split(obj_, 5, axis=1) for obj_ in [short_obj, long_obj, both_obj]]\n","\n","short_lvrg_arr, long_lvrg_arr = [lvrg_arr[openi_idx_].reshape(-1, 1) for openi_idx_ in [short_valid_openi_idx, long_valid_openi_idx]]\n","short_fee_arr, long_fee_arr = [fee_arr[openi_idx_].reshape(-1, 1) for openi_idx_ in [short_valid_openi_idx, long_valid_openi_idx]]\n","short_tpout_arr, long_tpout_arr = [tpout_arr[openi_idx_] for openi_idx_ in [short_valid_openi_idx, long_valid_openi_idx]]\n","short_bias_arr, long_bias_arr = [bias_arr[openi_idx_] for openi_idx_ in [short_valid_openi_idx, long_valid_openi_idx]]"],"metadata":{"id":"qjpDlxCoInLJ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print(short_pr.shape)\n","short_total_pr = to_total_pr(len_df, short_pr, short_obj[-2])"],"metadata":{"id":"-sDSxVR91Vit"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["plt.style.use(['dark_background', 'fast'])\n","fig = plt.figure(figsize=(24, 8))\n","gs = gridspec.GridSpec(nrows=2,  # row 몇 개\n","                        ncols=3,  # col 몇 개\n","                        height_ratios=[10, 1]\n","                        # height_ratios=[10, 10, 1]\n","                        )\n","gs_idx = 0\n","signi = 0\n","title_position=(0.5, 0.5)\n","fontsize=15\n","\n","short_true_bias_idx = short_bias_arr[:, 0] <= short_bias_arr[:, 1] # info, threshold (등호의 유무가 매우 유의미함)\n","long_true_bias_idx = long_bias_arr[:, 0] >= long_bias_arr[:, 1]\n","\n","# ------ plot_data ------ #\n","try:\n","  # start_0 = time.time()\n","  short_pr = get_pr_v2(OrderSide.SELL, short_obj, short_tpout_arr, short_lvrg_arr, short_fee_arr, p_ranges, p_qty, inversion)\n","  print(\"get_pr_v2 pass\")\n","  short_total_pr = to_total_pr(len_df, short_pr, short_obj[-2])\n","  print(\"to_total_pr pass\")\n","  short_cum_pr = np.cumprod(short_total_pr)\n","  short_liqd = liquidation(OrderSide.SELL, h, short_obj[:4], short_lvrg_arr, short_fee_arr)\n","  short_prcn, short_rc = precision(short_pr, short_true_bias_idx), recall(short_true_bias_idx)\n","  if signi:\n","    short_idep_res_obj = (short_prcn, short_rc) + get_res_info_nb_v2(sample_len, short_pr, short_total_pr, short_cum_pr, short_liqd)\n","  else:\n","    gs_idx = plot_info_v4(gs, gs_idx, sample_len, short_pr, short_total_pr, short_cum_pr, short_liqd, short_prcn, short_rc, short_lvrg_arr[-1], title_position, fontsize)\n","  # print(\"elapsed time :\", time.time() - start_0)\n","\n","except Exception as e:\n","  gs_idx += 1\n","  print(\"error in short plot_data :\", e)\n","\n","try:\n","  # start_0 = time.time()\n","  long_pr = get_pr_v2(OrderSide.BUY, long_obj, long_tpout_arr, long_lvrg_arr, long_fee_arr, p_ranges, p_qty, inversion)\n","  long_total_pr = to_total_pr(len_df, long_pr, long_obj[-2])\n","  long_cum_pr = np.cumprod(long_total_pr)\n","  long_liqd = liquidation(OrderSide.BUY, l, long_obj[:4], long_lvrg_arr, long_fee_arr)\n","  long_prcn, long_rc = precision(long_pr, long_true_bias_idx), recall(long_true_bias_idx)\n","  if signi:\n","    long_idep_res_obj = (long_prcn, long_rc) + get_res_info_nb_v2(sample_len, long_pr, long_total_pr, long_cum_pr, long_liqd)\n","  else:\n","    gs_idx = plot_info_v4(gs, gs_idx, sample_len, long_pr, long_total_pr, long_cum_pr, long_liqd, long_prcn, long_rc, long_lvrg_arr[-1], title_position, fontsize)\n","  # print(\"elapsed time :\", time.time() - start_0)\n","except Exception as e:\n","  gs_idx += 1\n","  print(\"error in long plot_data :\", e)\n","\n","try:\n","  # start_0 = time.time()\n","  both_pr = np.vstack((short_pr, long_pr))  # for 2d shape, obj 를 1d 로 만들지 않는 이상, pr 은 2d 유지될 것\n","  both_total_pr = to_total_pr(len_df, both_pr, both_obj[-2])\n","  both_cum_pr = np.cumprod(both_total_pr)\n","  both_liqd = min(short_liqd, long_liqd)\n","  both_true_bias_idx = np.hstack((short_true_bias_idx, long_true_bias_idx))  # for 1d shape\n","  both_prcn, both_rc = precision(both_pr, both_true_bias_idx), recall(both_true_bias_idx)\n","  if signi:\n","    both_idep_res_obj = (both_prcn, both_rc) + get_res_info_nb_v2(sample_len, both_pr, both_total_pr, both_cum_pr, both_liqd)\n","  else:\n","    gs_idx = plot_info_v4(gs, gs_idx, sample_len, both_pr, both_total_pr, both_cum_pr, both_liqd, both_prcn, both_rc, lvrg_arr[-1], title_position, fontsize)\n","  # print(\"elapsed time :\", time.time() - start_0)\n","except Exception as e:\n","  gs_idx += 1\n","  print(\"error in both plot_data :\", e)\n"],"metadata":{"id":"Av-_aSFrpmrN"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["if not signi:\n","    for obj, cum_pr in zip([short_obj, long_obj, both_obj], [short_cum_pr, long_cum_pr, both_cum_pr]):\n","      try:\n","        # start_0 = time.time()\n","        gs_idx = frq_dev_plot_v3(gs, gs_idx, len_df, sample_len, obj[-2], cum_pr[-1], fontsize)\n","        # print(\"elapsed time :\", time.time() - start_0)          \n","      except Exception as e:\n","        gs_idx += 1\n","        print(\"error in frq_dev_plot_v3 :\", e)\n","\n","    plt.show()\n","    plt.close()"],"metadata":{"id":"1Fyhq7RppAEj"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["t_list = [1, 2]\n","t_list[:5] # 이게 되는구나.."],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"qxuL0S9wq-ib","executionInfo":{"status":"ok","timestamp":1648121100587,"user_tz":-540,"elapsed":473,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"c1f7ff04-acc0-4d66-90be-8a6870ee8f9a"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[1, 2]"]},"metadata":{},"execution_count":155}]},{"cell_type":"code","source":["def liquidation(open_side, data_, obj_, lvrg, fee):  # # 2.39 s ->  2.42 s per loop, (ep fee lvrg vectorize calc. 진행시)\n","    if type(obj_) == list:\n","        obj_ = list(zip(*obj_))\n","\n","    if open_side == \"SELL\":\n","        return np.min([(ep_ / np.max(data_[int(iin):int(iout + 1)]) - fee - 1) * lvrg + 1 for ep_, _, iin, iout in obj_]) # + 1 for zero-size array to reduction operation\n","    else:\n","        return np.min([(np.min(data_[int(iin):int(iout + 1)]) / ep_ - fee - 1) * lvrg + 1 for ep_, _, iin, iout in obj_])\n","    # if open_side == \"SELL\":\n","    #     return np.min([(ep_ / np.max(data_[int(iin):int(iout)]) - fee - 1) * lvrg + 1 for ep_, _, iin, iout in obj_])\n","    # else:\n","    #     return np.min([(np.min(data_[int(iin):int(iout)]) / ep_ - fee - 1) * lvrg + 1 for ep_, _, iin, iout in obj_])"],"metadata":{"id":"P5NzUYQct8LJ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# short_bias_arr.shape\n","short_true_bias_idx = short_bias_arr[:, 0] < short_bias_arr[:, 1] # info, threshold\n","long_true_bias_idx = long_bias_arr[:, 0] > long_bias_arr[:, 1]"],"metadata":{"id":"r_4qlQjNI_Vl"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# long_true_bias_idx\n","# np.hstack((short_true_bias_idx, long_true_bias_idx))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"nOtoKX7fJUs6","executionInfo":{"status":"ok","timestamp":1646789605507,"user_tz":-540,"elapsed":340,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"b56e0cd9-46fd-4c3e-d85c-570aa18d3b52"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([False, False,  True,  True, False, False,  True,  True, False, False, False,  True, False,  True, False,  True, False,  True,  True,  True, False, False,  True,  True,  True, False, False,  True,  True, False,  True, False, False, False,  True, False, False,  True,  True, False, False,  True, False,  True,  True,  True,  True, False,  True,  True, False,  True,  True,  True, False, False,  True, False, False,  True,  True,  True,  True, False, False,  True, False,  True, False, False,  True, False, False, False,  True,  True,  True, False,  True, False, False,  True,  True, False, False, False,  True,  True, False,  True,  True,  True, False, False, False, False,  True, False, False,  True, False, False,  True,  True, False, False,  True,  True,  True,  True, False,  True, False,  True,  True, False, False,  True, False, False,  True,  True, False, False, False, False,  True,  True,  True, False, False, False,  True,  True, False, False,  True, False, False,  True,  True, False,  True, False, False, False,  True,  True, False,  True, False, False, False,  True,  True, False, False, False, False, False, False,  True, False,  True,  True,  True,  True,  True,  True, False,  True,  True,  True,  True,  True,  True,  True,  True, False,  True,  True, False, False, False, False,  True,  True,  True, False,  True,  True, False, False,  True,  True, False,  True, False, False,  True])"]},"metadata":{},"execution_count":127}]},{"cell_type":"code","source":["# print(len(long_pr))\n","# print(len(long_true_bias_idx))\n","print((long_pr.shape))\n","print((long_bias_arr.shape))\n","# print((long_true_bias_idx.shape))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"70wh4eysKqxw","executionInfo":{"status":"ok","timestamp":1647001266151,"user_tz":-540,"elapsed":436,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"d3e8b24f-e74e-415f-c7a9-20d8617d25c9"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["(9634, 1)\n","(9634, 2)\n"]}]},{"cell_type":"code","source":["print(len(long_pr[long_pr != 1]))\n","len(long_pr[long_pr > 1]) / len(long_pr[long_pr != 1])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"OcR_qrEp7Rnu","executionInfo":{"status":"ok","timestamp":1647001306279,"user_tz":-540,"elapsed":348,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"3e8aa179-237a-48e8-a0d0-af56fa26bc5b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["9634\n"]},{"output_type":"execute_result","data":{"text/plain":["0.37315756695038405"]},"metadata":{},"execution_count":40}]},{"cell_type":"code","source":["print(np.sum(long_pr[long_true_bias_idx] > 1) / np.sum(long_true_bias_idx))\n","print(np.sum(long_true_bias_idx) / len(long_true_bias_idx))\n","# long_true_bias_pr = long_pr[long_true_bias_idx]\n","# len(long_true_bias_pr[long_true_bias_pr > 1])\n","# 30 / 66"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"MkJS3UGONHJ8","executionInfo":{"status":"ok","timestamp":1646810691555,"user_tz":-540,"elapsed":3,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"aa99b628-93b5-4705-c27b-fe6f80f95df0"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["0.39106145251396646\n","0.599163179916318\n"]}]},{"cell_type":"code","source":["print(get_recall(long_true_bias_idx))\n","print(get_precision(long_pr, long_true_bias_idx))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"lvULyeNJKSeP","executionInfo":{"status":"ok","timestamp":1646788110286,"user_tz":-540,"elapsed":5,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"3b10bb5f-238e-4687-f38c-20037f2cded6"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["0.5076923076923077\n","0.45454545454545453\n"]}]},{"cell_type":"code","source":["signi=False\n","if not signi:\n","    plt.style.use(['dark_background', 'fast'])\n","    fig = plt.figure(figsize=(24, 8))\n","    gs = gridspec.GridSpec(nrows=2,  # row 몇 개\n","                            ncols=3,  # col 몇 개\n","                            height_ratios=[10, 1]\n","                            # height_ratios=[10, 10, 1]\n","                            )\n","gs_idx = 0\n","title_position=(0.5, 0.5)\n","fontsize=15"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":33},"id":"Fs1RkHxQKjCX","executionInfo":{"status":"ok","timestamp":1646788777938,"user_tz":-540,"elapsed":349,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"491bcb64-df8e-4b20-a42f-b68e4c670a07"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1728x576 with 0 Axes>"]},"metadata":{}}]},{"cell_type":"code","source":["try:\n","  # start_0 = time.time()\n","  long_pr = get_pr(OrderSide.BUY, *long_obj[:2], long_lvrg_arr, long_fee_arr, inversion)\n","  long_total_pr = to_total_pr(len_df, long_pr, long_obj[-2])\n","  long_cum_pr = np.cumprod(long_total_pr)\n","  long_liqd = liquidation(OrderSide.BUY, l, long_obj[:4], long_lvrg_arr, long_fee_arr)\n","  long_prcn, long_rc = precision(long_pr, long_true_bias_idx), recall(long_true_bias_idx)\n","\n","  if signi:\n","    long_idep_res_obj = (long_prcn, long_rc) + get_res_info_nb_v2(sample_len, long_pr, long_total_pr, long_cum_pr, long_liqd)\n","  else:\n","    gs_idx = plot_info_v4(gs, gs_idx, sample_len, long_pr, long_total_pr, long_cum_pr, long_liqd, long_prcn, long_rc, long_lvrg_arr[-1], title_position, fontsize)\n","  # print(\"elapsed time :\", time.time() - start_0)\n","except Exception as e:\n","  gs_idx += 1\n","  print(e)\n","\n","# plt.show()"],"metadata":{"id":"X69t-H3tKJdm"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def precision(pr_list, true_idx):\n","  true_bias_pr = pr_list[true_idx].ravel()\n","  return np.sum(true_bias_pr > 1) / len(true_bias_pr)  # 차원을 고려한 계산\n","\n","def recall(true_idx):\n","  return np.sum(true_idx) / len(true_idx) #  2.16 µs per loop (len) --> 3.78 µs per loop   # false_idx 중에서 tp 체결된 건을 더해주어야함\n","\n","def plot_info_v4(gs, gs_idx, sample_len, pr, total_pr, cum_pr, liqd, prcn, rc, leverage, title_position, fontsize):\n","  try:\n","    plt.subplot(gs[gs_idx])\n","    idep_res_obj = get_res_info_nb_v2(sample_len, pr, total_pr, cum_pr, liqd)\n","    plt.plot(cum_pr)\n","    plt.plot(idep_res_obj[-1], color='gold')\n","    if sample_len is not None:\n","      plt.axvline(sample_len, alpha=1., linestyle='--', color='#ffeb3b')\n","    # title_str = \"prcn : {:.3f} rc : {:.3f}\\n len_pr : {} dpf : {:.3f}\\n wr : {:.3f} sr : {:.3f}\\n acc_pr : {:.3f} sum_pr : {:.3f}\\n\" +\\\n","    #           \"min_pr : {:.3f} liqd : {:.3f}\\n acc_mdd : -{:.3f} sum_mdd : -{:.3f}\\n leverage {}\"\n","    title_str = \"prcn : {:.3f}\\n rc : {:.3f}\\n len_pr : {}\\n dpf : {:.3f}\\n wr : {:.3f}\\n sr : {:.3f}\\n acc_pr : {:.3f}\\n sum_pr : {:.3f}\\n\" +\\\n","              \"min_pr : {:.3f}\\n liqd : {:.3f}\\n acc_mdd : -{:.3f}\\n sum_mdd : -{:.3f}\\n leverage {}\"\n","    plt.title(title_str.format(prcn, rc, *idep_res_obj[:-1], leverage), position=title_position, fontsize=fontsize)\n","  except Exception as e:\n","    print(\"error in plot_info :\", e)\n","\n","  return gs_idx + 1"],"metadata":{"id":"J2nupeDOPdQI"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"JNQxkb06ZdTe"},"source":["## plot_check_v2"]},{"cell_type":"code","source":["res_df = wave_range_v4(res_df, 20, ltf_df=None, touch_lbperiod=50)"],"metadata":{"id":"hpkqOliMxSIU"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# ------------------ plot_config ------------------ #\n","save_mode = 0\n","front_plot = 4    # 0, 1, 2, 3 (whole, open, ep_tick + a, tp_tick + 0, bias_tick)\n","bias_plot = 1     # = swing_bias -> precision check : 1, recall check : 0\n","pr_descend = 1    # 1 -> 내림차순\n","position = 1      # -1 / 1, 0 (short / long)\n","# tf_plot = 1       # true - false plot\n","# pr_sort = 1     # -> default 1,  이상한 체결 확인하기 좋음\n","# wl_case = 1     # 1 / -1 / 0 (win loss study) --> oid\n","\n","x_max = 500\n","x_margin_mult = 1/30\n","y_margin_mult = 1/30  # 0 \n","\n","prev_plotsize = 100 #  100 20\n","# post_plotsize = 60\n","post_plotsize = config.tr_set.bias_info_tick\n","\n","inversion = 0\n","hedge = 0\n","\n","# ------ show or save ------ #\n","if save_mode:\n","  plot_check_dir = current_path + \"plot_check/\" +  key.replace(\".ftr\", \"\")\n","  shutil.rmtree(plot_check_dir, ignore_errors=True)  # remove existing dir\n","  os.makedirs(plot_check_dir)\n","  print(plot_check_dir)\n","else:\n","  plot_check_dir = None\n","\n","# ------------ 한 방향에 대해 plot_check 함 (by position var.) ------------ #\n","#   obj by position  \n","if position == -1:\n","  pos_str = \"SELL\"\n","  pr_, obj_ = short_pr, short_obj\n","  arr_list = [short_point1_arr, short_lvrg_arr, short_fee_arr, short_tpout_arr, short_bias_arr]\n","else:   # both option currently not supported\n","  pos_str = \"BUY\"\n","  pr_, obj_ = long_pr, long_obj\n","  arr_list = [long_point1_arr, long_lvrg_arr, long_fee_arr, long_tpout_arr, long_bias_arr]\n","pr, obj, [point1_arr, lvrg_arr, fee_arr, tpout_arr, bias_arr] = sort_bypr_v3(pr_, obj_, arr_list, descending=pr_descend)\n","\n","pr_msg = \"%s\\n {} ~ {} -> {:.5f}\\n lvrg : {}\\n fee : {:.4f}\" % (pos_str)  # pos_str 으로 이곳에서 정의함\n","\n","# ------------------ data chunknize ------------------ #\n","np_df = res_df.to_numpy()\n","\n","left_end_idx = obj[2] - prev_plotsize  # left_margin 기준 - entry_idx\n","right_end_idx = obj[3] + post_plotsize\n","invalid_left_end = np.sum(left_end_idx < 0)\n","\n","np_plot_params = np.hstack((left_end_idx, right_end_idx, pr, *obj, point1_arr, lvrg_arr, fee_arr, tpout_arr, bias_arr))[invalid_left_end:]\n","if bias_plot:\n","  bias_arr_ = bias_arr[invalid_left_end:]\n","  if position == -1:\n","    bias_idx = bias_arr_[:, 0] < bias_arr_[:, 1]\n","  else:\n","    bias_idx = bias_arr_[:, 0] > bias_arr_[:, 1]\n","  np_plot_params = np_plot_params[bias_idx]"],"metadata":{"id":"A6QSF9COaHO5","executionInfo":{"status":"ok","timestamp":1649126666066,"user_tz":-540,"elapsed":6183,"user":{"displayName":"7th June","userId":"08178289703395036410"}}},"execution_count":95,"outputs":[]},{"cell_type":"code","source":["strat_version = config.strat_version\n","\n","# ------------ make col_idx_dict config ------------ #\n","nonstep_col_list = []\n","step_col_list = []\n","stepmark_col_list = []\n","# ------ set period ------ #\n","hc_itv1 = '5T'\n","hc_itv2 = 'H'\n","\n","rs_itv = 'T'\n","\n","dc_itv = 'T'\n","hdc_itv = '15T'\n","hhdc_itv = 'H'\n","\n","wave_itv1 = 'T'\n","wave_itv2 = '5T'\n","\n","sd_itv1 = 'T'\n","sd_period1, sd_period2 = 20, 40\n","\n","cbline_itv = 'T'\n","\n","bb_itv = dc_itv\n","hbb_itv = hdc_itv\n","hhbb_itv = hhdc_itv\n","\n","\n","# ------------ nonstep_col_list - add info(col, alpha, color, linewidth) ------------ #\n","# nonstep_col_list.append([['close'], 1, '#ffffff', 2])\n","\n","# ------------ step_col_list - add info(col, alpha, color, linewidth) ------------ #\n","# ------ htf_candle ------ #\n","step_col_list.append([['open_{}'.format(hc_itv1), 'close_{}'.format(hc_itv1)], 1, '#ffffff', 1])\n","# step_col_list.append([['open_{}'.format(hc_itv2), 'close_{}'.format(hc_itv2)], 1, '#ffffff', 2])\n","\n","# ------ resi_sup ------ #\n","# step_col_list.append([['resi_{}'.format(rs_itv), 'sup_{}'.format(rs_itv)], 1, '#ffeb3b', 1])\n","# step_col_list.append([['resi_out_{}'.format(rs_itv), 'sup_out_{}'.format(rs_itv)], 1, 'dodgerblue', 2])\n","\n","# ------ sd - mcp ------ #\n","step_col_list.append([['dc_upper_{}{}'.format(sd_itv1, sd_period1), 'dc_lower_{}{}'.format(sd_itv1, sd_period1)], 1, '#ff00ff', 2])\n","step_col_list.append([['dc_upper_{}{}'.format(sd_itv1, sd_period2), 'dc_lower_{}{}'.format(sd_itv1, sd_period2)], 1, '#ffeb3b', 2])\n","# step_col_list.append([['dc_upper_{}{}'.format(wave_itv2, wave_period2), 'dc_lower_{}{}'.format(wave_itv2, wave_period2)], 1, '#e65100', 2])\n","\n","# ------ wave ------ #\n","# step_col_list.append([['wave_upper_{}'.format(wave_itv1), 'wave_upper_{}'.format(wave_itv1)], 1, '#ffeb3b', 3])\n","# step_col_list.append([['wave_lower_{}'.format(wave_itv1), 'wave_lower_{}'.format(wave_itv1)], 1, '#ffeb3b', 3])\n","# step_col_list.append([['wave_base_{}'.format(wave_itv1)], 1, '#279e2c', 2])\n","\n","# step_col_list.append([['wave_upper_{}'.format(wave_itv2), 'wave_upper_{}'.format(wave_itv2)], 1, '#f7525f', 3])\n","# step_col_list.append([['wave_lower_{}'.format(wave_itv2), 'wave_lower_{}'.format(wave_itv2)], 1, '#f7525f', 3])\n","# step_col_list.append([['wave_base_{}'.format(wave_itv2)], 1, '#279e2c', 2])\n","\n","# ------ dc_base : cbline ------ #\n","# step_col_list.append([['dc_base_{}'.format(cbline_itv)], 1, '#5b9cf6', 2])\n","\n","# ------ ema ------ #\n","# step_col_list.append([['ema_5T'], 1, '#03ed30', 2])\n","\n","# ------ dc ------ #\n","# step_col_list.append([['dc_upper_{}'.format(dc_itv), 'dc_lower_{}'.format(dc_itv)], 1, '#ffeb3b', 2])\n","# step_col_list.append([['dc_upper_{}'.format(hdc_itv), 'dc_lower_{}'.format(hdc_itv)], 1, '#e65100', 2])\n","# step_col_list.append([['dc_upper_{}'.format(hhdc_itv), 'dc_lower_{}'.format(hhdc_itv)], 1, '#c2185b', 4])\n","\n","# ------ bb ------ #\n","# step_col_list.append([['bb_upper_{}'.format(bb_itv), 'bb_lower_{}'.format(bb_itv)], 1, '#ffffff', 1])\n","# step_col_list.append([['bb_upper_{}'.format(hbb_itv), 'bb_lower_{}'.format(hbb_itv)], 1, '#ff00ff', 2])\n","# step_col_list.append([['bb_upper_{}'.format(hhbb_itv), 'bb_lower_{}'.format(hhbb_itv)], 1, '#3179f5', 4])\n","\n","# ------------ stepmark_col_list - add info(col, alpha, color, linewidth) ------------ #\n","# stepmark_col_list.append([['sar_T'], 1, 'dodgerblue', 7])\n","\n","\n","# ------ str to numbcol ------ #\n","nonstep_col_arr = strcol_tonumb(res_df, nonstep_col_list)\n","step_col_arr = strcol_tonumb(res_df, step_col_list)\n","stepmark_col_arr = strcol_tonumb(res_df, stepmark_col_list)\n","\n","col_idx_dict = \\\n","{\n","  \"ohlc_col_idxs\": get_col_idxs(res_df, ['open', 'high', 'low', 'close']),\n","  \"vp_col_idxs\": get_col_idxs(res_df, ['close', 'volume']),\n","  # \"ohlc_col_idxs\": get_col_idxs(res_df, ['haopen', 'hahigh', 'halow', 'haclose']),  # heikin-ashi ver.\n","  \"nonstep_col_info\": nonstep_col_arr,\n","  \"step_col_info\": step_col_arr,\n","  \"stepmark_col_info\": stepmark_col_arr,\n","  \"ylim_col_idxs\": get_col_idxs(res_df, ['open', 'high', 'low', 'close', 'short_out_{}'.format(strat_version), 'long_out_{}'.format(strat_version)])  # , 'dc_upper_H', 'dc_lower_H', 'dc_upper_15T', 'dc_lower_15T'\n","}   # , 'wave_upper_{}'.format(wave_itv2), 'wave_lower_{}'.format(wave_itv2), 'dc_upper_15T', 'dc_lower_15T'"],"metadata":{"id":"FnSydxFXn_f9","executionInfo":{"status":"ok","timestamp":1649126666067,"user_tz":-540,"elapsed":6,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"e81b63e4-0bb9-432d-bd06-1e979fbd94bc"},"execution_count":96,"outputs":[{"output_type":"stream","name":"stderr","text":["/content/drive/My Drive/Colab Notebooks/JnQ/funcs/funcs_plot_check.py:10: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.\n","  step_col_arr = np.array(col_list)\n"]}]},{"cell_type":"markdown","source":["### plot"],"metadata":{"id":"E-VwJkNQbGI4"}},{"cell_type":"code","source":["_ = [plot_check_v4(np_df, config, param_zip, pr_msg, x_max, x_margin_mult, y_margin_mult, front_plot, plot_check_dir, **col_idx_dict) for param_zip in zip(np_plot_params, np_plot_params[::-1])]"],"metadata":{"id":"Roy40BmByyZc","colab":{"base_uri":"https://localhost:8080/","height":1000,"output_embedded_package_id":"1ym8mSkoEch7zmMKKzREMk1OrJG9C6xbI"},"executionInfo":{"status":"error","timestamp":1649126800970,"user_tz":-540,"elapsed":134906,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"7cf6c83a-d727-485d-e01b-ec4298f71152"},"execution_count":97,"outputs":[{"output_type":"display_data","data":{"text/plain":"Output hidden; open in https://colab.research.google.com to view."},"metadata":{}}]},{"cell_type":"markdown","source":["### plot_funcs"],"metadata":{"id":"MQ8w8nWVXlGj"}},{"cell_type":"code","source":["def plot_check_v4(data, config, param_zip, pr_msg, x_max, x_margin_mult, y_margin_mult, front_plot, plot_check_dir=None, **col_idx_dict):\n","  # start_0 = time.time()\n","  plt.style.use(['dark_background', 'fast'])\n","  fig = plt.figure(figsize=(30, 18))\n","  nrows, ncols = 2, 2\n","  gs = gridspec.GridSpec(nrows=nrows,  # row 부터 index 채우고 col 채우는 순서임 (gs_idx)\n","                         ncols=ncols,\n","                         height_ratios=[3, 1]\n","                         )\n","  for gs_idx, params in enumerate(param_zip):\n","    ax = fig.add_subplot(gs[gs_idx])\n","    iin, iout, pr, ep, tp, entry_idx, exit_idx, open_idx, point1_idx, lvrg, fee, tp_line, out_line, bias_info, bias_thresh = params\n","\n","    # if ep > out_line:  # for tp > ep > out plot_check\n","    #   break\n","\n","    # ------------ add_col section ------------ #\n","    a_data = data[int(iin):int(iout + 1)]\n","    # a_data = data[iin:iout]\n","    # ------ candles ------ #\n","    candle_plot(a_data[:, col_idx_dict['ohlc_col_idxs']], ax, alpha=1.0, wickwidth=1.0)\n","\n","    # ------ add cols ------ #\n","    [nonstep_col_plot(a_data[:, params[0]], *params[1:]) for params in col_idx_dict['nonstep_col_info']]\n","    [step_col_plot(a_data[:, params[0]], *params[1:]) for params in col_idx_dict['step_col_info']]\n","    [stepmark_col_plot(a_data[:, params[0]], *params[1:]) for params in col_idx_dict['stepmark_col_info']]\n","\n","    # ------ ep, tp + xlim ------ #\n","    try:\n","      eptp_hvline_v4(config, ep, tp, entry_idx, exit_idx, open_idx, point1_idx, tp_line, out_line, bias_info, bias_thresh,\n","                    front_plot, iin, iout, x_max, x_margin_mult, y_margin_mult, a_data, **col_idx_dict)\n","    except Exception as e:\n","      print(\"error in eptp_hvline_v3 :\", e)\n","\n","    #     Todo    #\n","    #     3. outer_price plot 일 경우, gs_idx + nrows 하면 됨\n","\n","    # ------ trade_info ------ #\n","    plt.title(pr_msg.format(entry_idx, exit_idx, pr, lvrg, fee))\n","\n","  if plot_check_dir is None:\n","    plt.show()\n","    print()\n","  else:\n","    fig_name = plot_check_dir + \"/%s.png\" % int(entry_idx)\n","    plt.savefig(fig_name)\n","    print(fig_name, \"saved !\")\n","  plt.close()\n","  # print(\"elapsed time :\", time.time() - start_0)\n","\n","  return\n","\n","def eptp_hvline_v4(config, en_p, ex_p, entry_idx, exit_idx, open_idx, point1_idx, tp_line, out_line, bias_info, bias_thresh,\n","                   front_plot, iin, iout, x_max, x_margin_mult, y_margin_mult, a_data, **col_idx_dict):\n","  # ------ get vertical ticks ------ #\n","  entry_tick = int(entry_idx - iin)\n","  exit_tick = entry_tick + int(exit_idx - entry_idx)\n","  open_tick = entry_tick - int(entry_idx - open_idx)\n","  point1_tick = open_tick - int(open_idx - point1_idx)\n","\n","  if front_plot == 1:\n","    x_max = open_tick\n","  elif front_plot == 2:\n","    x_max = entry_tick + 20 \n","  elif front_plot == 3:\n","    x_max = exit_tick + 20\n","  elif front_plot == 4:\n","    x_max = entry_tick + config.tr_set.bias_info_tick\n","\n","  if (iout - iin) > x_max:\n","    x_margin = x_max * x_margin_mult\n","    plt.xlim(0 - x_margin, x_max + x_margin)\n","  x0, x1 = plt.gca().get_xlim()\n","  # ------------ hlines ------------ #\n","  # ------ entry & exit ------ #\n","  en_xmin = entry_tick / x1\n","  ex_xmin = exit_tick / x1\n","  plt.axhline(en_p, x0, en_xmin, linewidth=2, linestyle='--', alpha=1, color='lime')  # en_p line axhline\n","  plt.text(x0, en_p, 'en_p :\\n {:.3f} \\n epg {}'.format(en_p, config.tr_set.ep_gap), ha='right', va='center', fontweight='bold', fontsize=15)  # en_p line label\n","  plt.axhline(ex_p, ex_xmin, 1, linewidth=2, linestyle='--', alpha=1, color='lime')  # ex_p line axhline (signal 도 포괄함, 존재 의미)\n","  plt.text(x1, ex_p, 'ex_p :\\n {}'.format(ex_p), ha='left', va='center', fontweight='bold')  # ex_p line label\n","\n","  # ------ tpout_line ------ #\n","  plt.axhline(tp_line, 0.1, 1, linewidth=4, linestyle='-', alpha=1, color='#00ff00')  # ep 와 gap 비교 용이하기 위해 ex_xmin -> 0.1 사용\n","  plt.text(x0, tp_line, 'tpg {}'.format(config.tr_set.tp_gap), ha='right', va='center', fontweight='bold', fontsize=15)\n","  plt.axhline(out_line, 0.1, 1, linewidth=4, linestyle='-', alpha=1, color='#ff0000')\n","  plt.text(x0, out_line, 'outg {}'.format(config.tr_set.out_gap), ha='right', va='center', fontweight='bold', fontsize=15)\n","\n","  # ------ bias_line ------ #\n","  plt.axhline(bias_info, 0.1, 1, linewidth=4, linestyle='-', alpha=1, color='dodgerblue')\n","  plt.text(x0, bias_info, ' bias_info', ha='left', va='center', fontweight='bold')\n","  plt.axhline(bias_thresh, 0.1, 1, linewidth=4, linestyle='-', alpha=1, color='#ff8400')\n","  plt.text(x0, bias_thresh, ' bias_thresh', ha='left', va='center', fontweight='bold')\n","\n","  # ------ ylim ------ #\n","  if front_plot:\n","    y_lim_data = a_data[:x_max + 1, col_idx_dict['ylim_col_idxs']]  # +1 for including open_tick\n","  else:\n","    y_lim_data = a_data[:, col_idx_dict['ylim_col_idxs']]\n","  \n","  y_min = y_lim_data.min()\n","  y_max = y_lim_data.max()\n","  y_margin = (y_max - y_min) * y_margin_mult\n","  plt.ylim(y_min - y_margin, y_max + y_margin)\n","\n","  # ------------ vline (open_tick, entry_tick, exit_tick) ------------ #\n","  y0, y1 = plt.gca().get_ylim()\n","  l_data = a_data[:exit_tick + 1, col_idx_dict['ohlc_col_idxs'][2]]  # +1 for including exit_tick\n","  point1_ymax, open_ymax, en_ymax, ex_ymax = [(l_data[tick_] - y0) / (y1 - y0) - .01 for tick_ in [point1_tick, open_tick, entry_tick, exit_tick]]  # -.05 for margin\n","  plt.axvline(point1_tick, 0, point1_ymax, alpha=1, linewidth=2, linestyle='--', color='#ff7722')\n","  plt.axvline(open_tick, 0, open_ymax, alpha=1, linewidth=2, linestyle='--', color='#ffeb3b')  # 추후, tick 별 세부 정의가 달라질 수 있음을 고려해 multi_line 작성 유지\n","  plt.axvline(entry_tick, 0, en_ymax, alpha=1, linewidth=2, linestyle='--', color='#ffeb3b')\n","  plt.axvline(exit_tick, 0, ex_ymax, alpha=1, linewidth=2, linestyle='--', color='#ffeb3b')\n","\n","  return"],"metadata":{"id":"cFt6CeZf4yEk"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["#### legacy"],"metadata":{"id":"q3zisNOTw3jM"}},{"cell_type":"code","source":["_ = [plot_check_v4(np_df, config, param_zip, pr_msg, x_max, x_margin_mult, y_margin_mult, front_plot, plot_check_dir, 500, 0.07, 100, **col_idx_dict) for param_zip in zip(np_plot_params, np_plot_params[::-1])]"],"metadata":{"id":"fUFdJVrsw78h"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def plot_check_v4(data, config, param_zip, pr_msg, x_max, x_margin_mult, y_margin_mult, front_plot, plot_check_dir=None, vp_range=500, kde_factor=0.05, num_samples=100, **col_idx_dict):\n","  # start_0 = time.time()\n","  plt.style.use(['dark_background', 'fast'])\n","  fig = plt.figure(figsize=(30, 18))\n","  nrows, ncols = 2, 2\n","  gs = gridspec.GridSpec(nrows=nrows,  # row 부터 index 채우고 col 채우는 순서임 (gs_idx)\n","                         ncols=ncols,\n","                         height_ratios=[3, 1]\n","                         )\n","  for gs_idx, params in enumerate(param_zip):\n","    ax = fig.add_subplot(gs[gs_idx])\n","    iin, iout, pr, ep, tp, entry_idx, exit_idx, open_idx, lvrg, fee, tp_line, out_line, bias_info, bias_thresh = params\n","\n","    # ------------ add_col section ------------ #\n","    iin, iout = int(iin), int(iout)\n","    a_data = data[iin:iout]\n","    # ------ candles ------ #\n","    candle_plot(a_data[:, col_idx_dict['ohlc_col_idxs']], ax, alpha=1.0, wickwidth=1.0)\n","    \n","    # ------ add cols ------ #\n","    [nonstep_col_plot(a_data[:, params[0]], *params[1:]) for params in col_idx_dict['nonstep_col_info']]\n","    [step_col_plot(a_data[:, params[0]], *params[1:]) for params in col_idx_dict['step_col_info']]\n","    [stepmark_col_plot(a_data[:, params[0]], *params[1:]) for params in col_idx_dict['stepmark_col_info']]\n","\n","    # vp_data = data[iin - vp_range:iin, col_idx_dict['vp_col_idxs']]\n","    # vp_info = [vp_range, vp_data[:, 0], vp_data[:, 1], kde_factor, num_samples]\n","    vp_data = data[iin - vp_range:iin, col_idx_dict['vp_col_idxs']].T\n","    vp_info = [vp_range, *vp_data, kde_factor, num_samples]\n","\n","    # ------ ep, tp + xlim ------ #\n","    eptp_hvline_v4(config, ep, tp, entry_idx, exit_idx, open_idx, tp_line, out_line, bias_info, bias_thresh, \n","                   front_plot, iin, iout, x_max, x_margin_mult, y_margin_mult, a_data, vp_info, **col_idx_dict)        \n","\n","    #     Todo    #\n","    #     3. outer_price plot 일 경우, gs_idx + nrows 하면 됨\n","\n","    # ------ trade_info ------ #\n","    plt.title(pr_msg.format(entry_idx, exit_idx, pr, lvrg, fee))\n","\n","  if plot_check_dir is None:\n","    plt.show()\n","    print()\n","  else:\n","    fig_name = plot_check_dir +  \"/%s.png\" % int(entry_idx)\n","    plt.savefig(fig_name)\n","    print(fig_name, \"saved !\")\n","  plt.close()\n","  # print(\"elapsed time :\", time.time() - start_0)  \n","\n","  return\n","\n","def eptp_hvline_v4(config, en_p, ex_p, entry_idx, exit_idx, open_idx, tp_line, out_line, bias_info, bias_thresh, \n","                   front_plot, iin, iout, x_max, x_margin_mult, y_margin_mult, a_data, vp_info, **col_idx_dict):\n","  # ------ get vertical ticks ------ #\n","  entry_tick = int(entry_idx - iin)\n","  open_tick = entry_tick - int(entry_idx - open_idx)\n","  exit_tick = entry_tick + int(exit_idx - entry_idx)\n","\n","  if front_plot == 1:\n","    x_max = open_tick\n","  elif front_plot == 2:\n","    x_max = entry_tick\n","  if (iout - iin) > x_max:\n","    x_margin = x_max * x_margin_mult\n","    plt.xlim(0 - x_margin, x_max + x_margin)\n","  x0, x1 = plt.gca().get_xlim()\n","  # ------------ hlines ------------ #\n","  # ------ entry & exit ------ #\n","  en_xmin = entry_tick / x1\n","  ex_xmin = exit_tick / x1\n","  plt.axhline(en_p, x0, en_xmin, linewidth=2, linestyle='--', alpha=1, color='lime')  # en_p line axhline\n","  plt.text(x0, en_p, ' en_p :\\n {}'.format(en_p), ha='right', va='center', fontweight='bold')  # en_p line label\n","  plt.axhline(ex_p, ex_xmin, 1, linewidth=2, linestyle='--', alpha=1, color='lime')  # ex_p line axhline (signal 도 포괄함, 존재 의미)\n","  plt.text(x1, ex_p, ' ex_p :\\n {}'.format(ex_p), ha='left', va='center', fontweight='bold')  # ex_p line label\n","\n","  # ------ tpout_line ------ #\n","  plt.axhline(tp_line, 0.1, 1, linewidth=4, linestyle='-', alpha=1, color='#00ff00')  # ep 와 gap 비교 용이하기 위해 ex_xmin -> 0.1 사용\n","  plt.text(x0, tp_line, ' %s' % config.tr_set.tp_gap, ha='left', va='center', fontweight='bold')\n","  plt.axhline(out_line, 0.1, 1, linewidth=4, linestyle='-', alpha=1, color='#ff0000')\n","  plt.text(x0, out_line, ' %s' % config.tr_set.out_gap, ha='left', va='center', fontweight='bold')\n","\n","  # ------ bias_line ------ #\n","  plt.axhline(bias_info, 0.1, 1, linewidth=4, linestyle='-', alpha=1, color='dodgerblue')\n","  plt.text(x0, bias_info, ' bias_info', ha='left', va='center', fontweight='bold')\n","  plt.axhline(bias_thresh, 0.1, 1, linewidth=4, linestyle='-', alpha=1, color='#ff8400')\n","  plt.text(x0, bias_thresh, ' bias_thresh', ha='left', va='center', fontweight='bold')\n","\n","  # ------ volume profile ------ #\n","  vp_range, close, volume, kde_factor, num_samples = vp_info\n","  if iin >= vp_range:\n","    start_0 = time.time()\n","    kde = stats.gaussian_kde(close, weights=volume, bw_method=kde_factor)\n","    kdx = np.linspace(close.min(), close.max(), num_samples)\n","    kdy = kde(kdx)\n","    print(\"kde elapsed_time :\", time.time() - start_0)\n","\n","    kdy_max = kdy.max()\n","    # peaks,_ = signal.find_peaks(kdy)\n","    peaks,_ = signal.find_peaks(kdy, prominence=kdy_max * 0.3)\n","    peak_list = kdx[peaks]   # peak_list\n","    [plt.axhline(peak, linewidth=6, linestyle='-', alpha=1, color='white') for peak in peak_list]\n","    \n","    kdy_ratio = entry_tick / kdy_max # 30 / 0.0001\n","    plt.plot(kdy * kdy_ratio, kdx, color='white')\n","    # plt.plot(pky, pkx, 'bo', color='yellow')\n","\n","  # ------ ylim ------ #\n","  if front_plot:\n","    y_lim_data = a_data[:x_max + 1, col_idx_dict['ylim_col_idxs']]  # +1 for including open_tick\n","  else:\n","    y_lim_data = a_data[:, col_idx_dict['ylim_col_idxs']]\n","  y_min = y_lim_data.min()\n","  y_max = y_lim_data.max()\n","  y_margin = (y_max - y_min) * y_margin_mult\n","  # plt.ylim(y_min - y_margin, y_max + y_margin)\n","\n","  # ------------ vline (open_tick, entry_tick, exit_tick) ------------ #\n","  y0, y1 = plt.gca().get_ylim()\n","  l_data = a_data[:exit_tick + 1, col_idx_dict['ohlc_col_idxs'][2]]  # +1 for including exit_tick\n","  open_ymax, en_ymax, ex_ymax = [(l_data[tick_] - y0) / (y1 - y0) - .01 for tick_ in [open_tick, entry_tick, exit_tick]]  # -.05 for margin\n","  plt.axvline(open_tick, 0, open_ymax, alpha=1, linewidth=2, linestyle='--', color='#ffeb3b')  # 추후, tick 별 세부 정의가 달라질 수 있음을 고려해 multi_line 작성 유지\n","  plt.axvline(entry_tick, 0, en_ymax, alpha=1, linewidth=2, linestyle='--', color='#ffeb3b')\n","  plt.axvline(exit_tick, 0, ex_ymax, alpha=1, linewidth=2, linestyle='--', color='#ffeb3b')\n","\n","  return"],"metadata":{"id":"ESReTMpP7SoO"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### sync_check"],"metadata":{"id":"X0FsT-8FZRti"}},{"cell_type":"code","source":["save_plot = 0\n","\n","open_idx_range = reversed(range(0, len(res_df), 1000))\n","plot_range = 100\n","\n","x_max = 400\n","\n","inversion = 0\n","hedge = 0\n","\n","\n","if save_plot:\n","  plot_check_dir = current_path + \"plot_check/\" +  key.replace(\".ftr\", \"\")\n","  try:\n","    os.mkdir(plot_check_dir)\n","  except:\n","\n","    #     remove existing dir   #\n","    shutil.rmtree(plot_check_dir)\n","    print(plot_check_dir, 'removed !')\n","    os.mkdir(plot_check_dir)\n","    # pass\n","    \n","\n","prev_plotsize = 30\n","post_plotsize = 20\n","\n","\n","\n","h_candle_intv1 = 15\n","h_candle_intv2 = 60\n","if 'hopen_{}'.format(h_candle_intv2) not in res_df.columns:\n","  res_df = h_candle(res_df, h_candle_intv1)\n","  res_df = h_candle(res_df, h_candle_intv2)\n","\n","res_df[\"ma30_1m\"] = res_df['close'].rolling(30).mean()\n","res_df[\"ma60_1m\"] = res_df['close'].rolling(60).mean()\n","\n","res_df = dtk_plot(res_df, dtk_itv2='15m', hhtf_entry=15, use_dtk_line=config.loc_set.zone.use_dtk_line)\n","# res_df = dtk_plot(res_df, dtk_itv2='15m', hhtf_entry=1, use_dtk_line=1)\n","# break\n","\n","rtc_list = [\"short_tp_1_{}\".format(strat_version), \"short_tp_gap_{}\".format(strat_version), \"long_tp_1_{}\".format(strat_version), \"long_tp_gap_{}\".format(strat_version)]\n","# h_rtc_list = [\"h_short_tp_1\", \"h_short_tp_gap\", \"h_long_tp_1\", \"h_long_tp_gap\"]\n","dtk_list = [\"short_dtk_1_{}\".format(strat_version), \"short_dtk_gap_{}\".format(strat_version), \"long_dtk_1_{}\".format(strat_version), \"long_dtk_gap_{}\".format(strat_version),\n","            # \"short_dtk_1_line\", \"short_dtk_gap_line\", \"long_dtk_1_line\", \"long_dtk_gap_line\",\n","            \"short_dtk_plot_1\", \"short_dtk_plot_gap\", \"long_dtk_plot_1\", \"long_dtk_plot_gap\"]\n","dc_v2_list = ['dc_upper_v2_{}'.format(strat_version), 'dc_lower_v2_{}'.format(strat_version)]\n","\n","\n","ohlc_list = ['open', 'high', 'low', 'close'] # + basic_st_list\n","hcandle_list = ['hopen_%s' % h_candle_intv1, 'hclose_%s' % h_candle_intv1, 'hopen_%s' % h_candle_intv2, 'hclose_%s' % h_candle_intv2]\n","# hcandle_list = ['hopen_%s' % h_candle_intv1, 'hclose_%s' % h_candle_intv1, 'hhigh_%s' % h_candle_intv2, 'hlow_%s' % h_candle_intv2]\n","\n","# --------------------- dc & bb level --------------------- #\n","dc_interval = '1m'\n","hdc_interval = '5m'\n","hhdc_interval = '15m'\n","\n","st_list = ['st_base_%s' % hhdc_interval, 'st_upper_%s' % hhdc_interval, 'st_lower_%s' % hhdc_interval]\n","\n","dc_list = ['dc_upper_%s' % dc_interval, 'dc_lower_%s' % dc_interval]\n","hdc_list = ['dc_upper_%s' % hdc_interval, 'dc_lower_%s' % hdc_interval]\n","hhdc_list = ['dc_upper_%s' % hhdc_interval, 'dc_lower_%s' % hhdc_interval]\n","\n","bb_interval = dc_interval\n","hbb_interval = hdc_interval\n","hhbb_interval = hhdc_interval\n","\n","bb_list = ['bb_upper_%s' % bb_interval, 'bb_lower_%s' % bb_interval]\n","hbb_list = ['bb_upper_%s' % hbb_interval, 'bb_lower_%s' % hbb_interval]\n","hhbb_list = ['bb_upper_%s' % hhbb_interval, 'bb_lower_%s' % hhbb_interval]\n","\n","bbwp_list = ['bbwp', 'bbwp_ma']\n","\n","\n","senkoua_list = ['senkou_a1', 'senkou_a2', 'senkou_a3', 'senkou_a4', 'senkou_a5']\n","senkoub_list = ['senkou_b1', 'senkou_b2', 'senkou_b3', 'senkou_b4', 'senkou_b5']\n","senkoua_list = ['senkou_a1']\n","senkoub_list = ['senkou_b1']\n","\n","sar_list = ['sar_3m', 'sar_5m', 'sar_15m']\n","\n","ma_list = ['ma30_1m', 'ma60_1m']\n","sma_list = ['sma_1m']\n","\n","ema_list = ['ema_5m']\n","# cb_list = ['cloud_bline_1m']\n","cb_list = ['cloud_bline_30m']\n","# cb_list = ['cloud_bline_5m']\n","\n","\n","\n","# -------------- under price phase -------------- #\n","# macd_list = ['macd_hist1', 'macd_hist2', 'macd_hist3']\n","# trix_list = ['trix1', 'trix2', 'trix3']\n","# stoch_list = ['stoch_5m']\n","# fisher_list = ['fisher30', 'fisher60', 'fisher120']\n","# cctbbo_list = ['cctbbo']\n","# emaroc_list = ['ema_roc']\n","rsi_list = ['rsi_%s' % config.loc_set.point.exp_itv] \n","cci_list = ['cci_%s' % config.loc_set.point.exp_itv] \n","\n","\n","# -------------- summation -------------- #\n","# input_colname = ohlc_list + basic_st_list + pline_list + bb_list + hbb_list + sma_list + cb_list + stoch_list + sar_list + dc_list\n","input_colname = ohlc_list + hcandle_list + bb_list + hbb_list + hhbb_list + dc_list + hdc_list + hhdc_list + dtk_list + dc_v2_list + rsi_list + ema_list + ma_list + st_list# + cci_list\n","\n","# yrange_colname = ohlc_list + basic_st_list + pline_list # currently just used for ymin, ymax\n","yrange_colname = ohlc_list + hcandle_list + bb_list + hbb_list + hhbb_list + dc_list + hdc_list + hhdc_list + dc_v2_list + ema_list # currently just used for ymin, ymax\n","yrange_colname = ohlc_list + hcandle_list + bb_list + hbb_list + hhbb_list + dc_list + hdc_list + dc_v2_list + ema_list # currently just used for ymin, ymax\n","\n","\n","\n","odd_cnt = 0\n","obj_i = -1\n","rev_obj_i = 0\n","\n","#   지금, continue 발생시 true / false idx 가 같이 상승하는 문제\n","\n","# while 1:\n","for open_idx in open_idx_range:\n","\n","  # if obj_i >= len_obj or rev_obj_i >= len_obj:\n","  #   break\n","\n","  # if odd_cnt % 2 == 1 and tf_plot: #  loss plot 을 채워야하는 상황\n","  #   rev_obj_i += 1\n","\n","  # else:\n","  #   obj_i += 1\n","\n","  if not(i >= prev_plotsize):\n","    continue\n","  \n","\n","  odd_cnt += 1\n","\n","  # break\n","\n","  print(\"open_idx :\", open_idx)\n","  \n","  plot_df = res_df.iloc[open_idx - prev_plotsize:open_idx + plot_range + post_plotsize][input_colname]\n","  \n","  odds = 1 if odd_cnt % 2 == 1 else 2\n","  if odds == 1:\n","\n","    plt.style.use('dark_background')\n","\n","    fig = plt.figure(figsize=(26, 18))\n","    \n","    gs = gridspec.GridSpec(nrows=2, # row 몇 개 \n","                        ncols=2, # col 몇 개 \n","                        height_ratios=[3, 1]\n","                        )\n","    \n","  ax = fig.add_subplot(gs[odds - 1])\n","\n","  # fig.show()\n","  # fig.canvas.draw()\n","\n","  temp_ohlc = plot_df.values[:, :4]\n","  index = np.arange(len(temp_ohlc))\n","  candle = np.hstack((np.reshape(index, (-1, 1)), temp_ohlc))\n","  mf.candlestick_ohlc(ax, candle, width=0.5, colorup='#26a69a', colordown='#ef5350', alpha=0.5)\n","\n","  # ---------- h_candle ---------- #\n","  alpha = 1\n","  lw = 1\n","  for cd_i, candle in enumerate(hcandle_list):\n","\n","    if cd_i == 2:\n","      lw = 2      \n","    plt.step(np.arange(len(plot_df)), plot_df[candle].values, alpha=alpha, color='#ffffff', linewidth=lw)\n","\n","  # alpha = 0.1\n","  # plt.fill_between(np.arange(len(plot_df)), plot_df['hclose_60'].values, plot_df['hopen_60'].values, \n","  #                     where=1, facecolor='#ffffff', alpha=alpha)  \n","  \n","\n","   # --------- ma --------- #\n","  alpha = 1\n","  lw = 2\n","  for ma_i, item in enumerate(ma_list):\n","    plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#ffeb3b', linewidth=lw)\n","\n","   # --------- ema --------- #\n","  alpha = 1\n","  lw = 4\n","  for sm_i, item in enumerate(ema_list):\n","    plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#03ed30', linewidth=lw)\n","    \n","   # --------- st --------- #\n","  alpha = 1\n","  lw = 2\n","  for sm_i, item in enumerate(st_list):\n","      plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#00ff00', linewidth=lw)\n","\n","  # ---------------------- dc_v2 ---------------------- #\n","  # alpha = 1\n","  # lw = 2\n","  # for sm_i, item in enumerate(dc_v2_list):\n","  #     plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#ffeb3b', linewidth=lw)\n","\n","  # # ---------------------- dc ---------------------- #\n","  # alpha = 1\n","  # lw = 2\n","  # for sm_i, item in enumerate(dc_list):\n","  #     plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#ffeb3b', linewidth=lw)\n","\n","  # # ---------------------- hdc ---------------------- #\n","  # alpha = 1\n","  # lw = 2\n","  # for sm_i, item in enumerate(hdc_list):\n","  #     plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#e65100', linewidth=lw)\n","\n","  # # ---------------------- hhdc ---------------------- #\n","  # alpha = 1\n","  # lw = 4\n","  # for sm_i, item in enumerate(hhdc_list):\n","  #     plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#c2185b', linewidth=lw)\n","\n","\n","  # # ---------------------- bb ---------------------- #\n","  # alpha = 1\n","  # lw = 1\n","  # for sm_i, item in enumerate(bb_list):\n","  #   plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#ffffff', linewidth=lw)\n","\n","  # alpha = 0.2\n","  # plt.fill_between(np.arange(len(plot_df)), plot_df['bb_upper_%s' % bb_interval].values, plot_df['bb_lower_%s' % bb_interval].values, \n","  #                     where=plot_df['bb_upper_%s' % bb_interval].values >= plot_df['bb_lower_%s' % bb_interval].values, facecolor='#ffffff', alpha=alpha)   \n","\n","  # # ---------------------- hbb ---------------------- #\n","  # alpha = 1\n","  # lw = 2\n","  # for sm_i, item in enumerate(hbb_list):\n","  #   plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#ff00ff', linewidth=lw)\n","  \n","  # alpha = 0.2\n","  # plt.fill_between(np.arange(len(plot_df)), plot_df['bb_upper_%s' % hbb_interval].values, plot_df['bb_lower_%s' % hbb_interval].values, \n","  #                     where=plot_df['bb_upper_%s' % hbb_interval].values >= plot_df['bb_lower_%s' % hbb_interval].values, facecolor='#ff00ff', alpha=alpha) \n","  \n","  # # ---------------------- hhbb ---------------------- #\n","\n","  # alpha = 1\n","  # lw = 4\n","  # for sm_i, item in enumerate(hhbb_list):\n","  #   plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#3179f5', linewidth=lw)\n","  \n","  # alpha = 0.2\n","  # plt.fill_between(np.arange(len(plot_df)), plot_df['bb_upper_%s' % hhbb_interval].values, plot_df['bb_lower_%s' % hhbb_interval].values, \n","  #                     where=plot_df['bb_upper_%s' % hhbb_interval].values >= plot_df['bb_lower_%s' % hhbb_interval].values, facecolor='#3179f5', alpha=alpha) \n","  \n","  # ------------------- dtk_line (old, tp_line) ------------------- #\n","  \n","  # alpha = 1\n","  # lw = 2\n","  # rtc_ratio_list = [config.loc_set.zone.dt_k]\n","  \n","  # for rtc_k in rtc_ratio_list:    \n","  #   # plt.step(np.arange(len(plot_df)), plot_df['short_dtk_1_line'].values - plot_df['short_dtk_gap_line'].values * rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","  #   # plt.step(np.arange(len(plot_df)), plot_df['long_dtk_1_line'].values + plot_df['long_dtk_gap_line'].values * rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","  #   plt.step(np.arange(len(plot_df)), plot_df['short_dtk_1'].values - plot_df['short_dtk_gap'].values * rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","  #   plt.step(np.arange(len(plot_df)), plot_df['long_dtk_1'].values + plot_df['long_dtk_gap'].values * rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","\n","  # hy_min = np.min(plot_df['short_dtk_1'].values - plot_df['short_dtk_gap'].values * rtc_k)\n","  # hy_max = np.max(plot_df['long_dtk_1'].values + plot_df['long_dtk_gap'].values * rtc_k)  \n","\n","  # alpha = 1\n","  # lw = 4\n","  # # h_rtc_ratio_list = [config.loc_set.zone.dt_k]\n","  # h_rtc_ratio_list = [config.loc_set.zone.zone_dt_k]\n","  # # h_rtc_ratio_list = [0.272, 0.36, 0.4, 0.5]\n","  \n","  # for h_rtc_k in h_rtc_ratio_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df['short_dtk_plot_1'].values - plot_df['short_dtk_plot_gap'].values * h_rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","  #   plt.step(np.arange(len(plot_df)), plot_df['long_dtk_plot_1'].values + plot_df['long_dtk_plot_gap'].values * h_rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","  #   # plt.step(np.arange(len(plot_df)), plot_df['h_short_tp_1'].values - plot_df['h_short_tp_gap'].values * h_rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","  #   # plt.step(np.arange(len(plot_df)), plot_df['h_long_tp_1'].values + plot_df['h_long_tp_gap'].values * h_rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","\n","  # # hy_min = np.min(plot_df['short_dtk_plot_1'].values - plot_df['short_dtk_plot_gap'].values * h_rtc_k)\n","  # # hy_max = np.max(plot_df['long_dtk_plot_1'].values + plot_df['long_dtk_plot_gap'].values * h_rtc_k)  \n","\n","  # ------------- y lim ------------- #  \n","  y_max = max(np.max(plot_df[yrange_colname]))\n","  y_min = min(np.min(plot_df[yrange_colname]))\n","  # y_max = max(y_max, y_max_)\n","  # y_min = min(y_min, y_min_)\n","  \n","  # hy_min = np.min(plot_df['short_dtk_1'].values - plot_df['short_dtk_gap'].values * 0.36)\n","  # hy_max = np.max(plot_df['long_dtk_1'].values + plot_df['long_dtk_gap'].values * 0.36)  \n","  # y_max = max(y_max, y_max_, hy_max)\n","  # y_min = min(y_min, y_min_, hy_min)\n","\n","  if np.isnan(y_max) or np.isnan(y_min):\n","    print('continued in yminmax')\n","    continue\n","  # print(\"y_max, y_min :\", y_max, y_min)\n","  # break\n","\n","  plt.ylim(y_min, y_max)\n","\n","\n","  # ---------------------- plot ---------------------- #\n","\n","  #           rsi          #    \n","  plt.subplot(gs[odds + 1])\n","  alpha = 1\n","  for rsi_ in rsi_list:\n","    plt.step(np.arange(len(plot_df)), plot_df[rsi_].values, 'g', alpha=alpha)\n","    # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","    alpha -= 0.2\n","  plt.axhline(50, linestyle='--')\n","  plt.axhline(50 + config.loc_set.point.osc_band, linestyle='--')\n","  plt.axhline(50 - config.loc_set.point.osc_band, linestyle='--')\n","  \n","  plt.axvline(prev_plotsize, linestyle='--')\n","  \n","  #           cci          #    \n","  # plt.subplot(gs[odds + 1])\n","  # alpha = 1\n","  # for cci_ in cci_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[cci_].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axhline(config.loc_set.point.osc_band, linestyle='--')\n","  # plt.axhline(-config.loc_set.point.osc_band, linestyle='--')\n","  \n","  # plt.axvline(prev_plotsize, linestyle='--')\n","\n","\n","  if len(plot_df) > x_max:\n","    x_margin = x_max / 20\n","    plt.xlim(0 - x_margin, x_max + x_margin)\n","\n","\n","  if not save_plot:\n","    if odds == 2:\n","      plt.show()\n","      plt.close()\n","  \n","  else:\n","    # ---------- save mode ---------- #\n","    fig_name = plot_check_dir +  \"/%s.png\" % t_i\n","    plt.savefig(fig_name)\n","    print(fig_name, \"saved !\")\n","\n","  # plt.close()  \n","  print()\n","\n","  # break\n"],"metadata":{"id":"inQ6f-CDZYkr"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"13a-U32Uy50I"},"source":["### brief np_pr survey"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"L9LdjV2uUWnp"},"outputs":[],"source":["# plot_pr_list[:100]\n","plt.plot(np_pr)\n","plt.axhline(1)\n","plt.show()"]},{"cell_type":"markdown","metadata":{"id":"TBE0l6dHRYrE"},"source":["### close & pr comp."]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":877},"executionInfo":{"elapsed":1436,"status":"ok","timestamp":1636355589887,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"-txULkhXRbz5","outputId":"7cda9fc7-4a4e-4c52-ffa3-a974b5f7c66f"},"outputs":[{"data":{"image/png":"\n","text/plain":["<Figure size 640x480 with 3 Axes>"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["\n"]},{"data":{"image/png":"\n","text/plain":["<Figure size 640x480 with 3 Axes>"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["\n"]}],"source":["#     chunky survey 필요함    #\n","chunk_size = 50000\n","\n","sync_pr = np.ones(len(res_df))\n","sync_tr = np.zeros(len(res_df))\n","# sync_tr = np.empty(len(res_df))\n","# sync_tr[:] = np.nan\n","\n","max_tr = np.max(tp_ratio_list)\n","min_tr = np.min(tp_ratio_list)\n","\n","for ck_i in range(0, len(res_df), chunk_size):\n","\n","  chunked_df = res_df.iloc[ck_i:ck_i + chunk_size]\n","  # break\n","\n","  for pr_, eptp_idx, tr_ in zip(pr_list[ck_i:ck_i + chunk_size], trade_list[ck_i:ck_i + chunk_size], tp_ratio_list[ck_i:ck_i + chunk_size]):\n","    # print(pr_, eptp_idx)\n","    sync_pr[eptp_idx[-1][0]] = pr_\n","    sync_tr[eptp_idx[-1][0]] = tr_\n","    # break\n","\n","  chunked_pr = sync_pr[ck_i:ck_i + chunk_size]\n","  chunked_tr = sync_tr[ck_i:ck_i + chunk_size]\n","  chunked_tr = np.where(np.isnan(chunked_tr), pd.Series(chunked_tr).shift(1), chunked_tr)\n","\n","  # plt.figure(figsize=(8, 6))\n","\n","  plt.subplot(311)\n","  plt.plot(np.arange(len(chunked_df)), chunked_df['close'])\n","  # plt.show()\n","\n","  plt.subplot(312)\n","  plt.plot(np.cumprod(chunked_pr))\n","  \n","  plt.subplot(313)\n","  plt.plot(chunked_tr)\n","  plt.ylim(min_tr + 0.5 * (max_tr - min_tr), max_tr)\n","  \n","  plt.show()\n","  print()\n"]},{"cell_type":"markdown","metadata":{"id":"Qys2Bw5Ou3u9"},"source":["### plot indi. legacy"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"pi5ntOOVu6JT"},"outputs":[],"source":["\n","  # ---------------------- ma ---------------------- #\n","   # --------- ema --------- #\n","  # alpha = 1\n","  # for sm_i, item in enumerate(ema_list):\n","  #   if sm_i > 0:\n","  #     lw = 5\n","  #   else:\n","  #     lw = 2\n","  #   plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#03ed30', linewidth=lw)\n","  #   alpha -= 0.2\n","\n","  #   # --------- sma --------- #\n","  # alpha = 1\n","  # for sm_i, sma in enumerate(sma_list):\n","  #   if sm_i > 0:\n","  #     lw = 5\n","  #   else:\n","  #     lw = 4\n","  #   plt.step(np.arange(len(plot_df)), plot_df[sma].values, alpha=alpha, color='#e91e63', linewidth=lw)\n","  #   alpha -= 0.2\n","\n","  \n","  # ---------------------- cb ---------------------- #\n","  # alpha = 1\n","  # for sm_i, item in enumerate(cb_list):\n","  #   if sm_i > 0:\n","  #     lw = 5\n","  #   else:\n","  #     lw = 2\n","  #   plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#5b9cf6', linewidth=lw)\n","  #   alpha -= 0.2\n","\n","\n","  \n","  # ---------------------- sar ---------------------- #\n","  # alpha = 1\n","  # markersize = 5\n","  # for sar in sar_list:\n","  #   plt.step(plot_df[sar].values, 'c*', alpha=alpha, markersize=markersize, color='dodgerblue')  # sar mic\n","  #   markersize += 1\n","  #   alpha -= 0.1\n","\n","  # plt.step(plot_df.values[:, [12]], 'co', alpha=1, markersize=7)  # sar mac\n","\n","  #               cloud               #\n","  # alpha = 0.7\n","  # for senkoua, senkoub in zip(senkoua_list, senkoub_list):\n","  #   plt.fill_between(np.arange(len(plot_df)), plot_df[senkoua].values, plot_df[senkoub].values, # ichimoku\n","  #                     where=plot_df[senkoua].values >= plot_df[senkoub].values, facecolor='g', alpha=alpha) # ichimoku\n","  #   plt.fill_between(np.arange(len(plot_df)), plot_df[senkoua].values, plot_df[senkoub].values,\n","  #                     where=plot_df[senkoua].values <= plot_df[senkoub].values, facecolor='r', alpha=alpha)  \n","  #   alpha -= 0.05\n","  \n","\n","\n","  # ---------------------- outer price indi. ---------------------- #\n","  #           macd          #\n","  # plt.subplot(312)\n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for macd in macd_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[macd].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","\n","  # plt.axhline(0, linestyle='--')\n","\n","  \n","  # #           trix          #  \n","  # # plt.subplot(313)\n","  # plt.subplot(gs[2])\n","  # alpha = 1\n","  # for trix in trix_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[trix].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","  # plt.axhline(0, linestyle='--')\n","\n","  \n","  #           fisher          #  \n","  # plt.subplot(313)\n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for fisher in fisher_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[fisher].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","    \n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","\n","  # plt.axhline(0, linestyle='--')\n","  # plt.axhline(fisher_upper, linestyle='--')\n","  # plt.axhline(fisher_lower, linestyle='--')\n","\n","  #           stoch          #  \n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for stoch_ in stoch_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[stoch_].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axhline(50, linestyle='--')\n","  # plt.axhline(stoch_upper, linestyle='--')\n","  # plt.axhline(stoch_lower, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","\n","  # ---------- cctbbo ---------- #  \n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for cctbbo in cctbbo_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[cctbbo].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axhline(50, linestyle='--')\n","  # plt.axhline(cctbbo_upper, linestyle='--')\n","  # plt.axhline(cctbbo_lower, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","\n","  # ---------- ema_roc ---------- #  \n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for emaroc in emaroc_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[emaroc].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","  # plt.axhline(0, linestyle='--')\n","  \n","  # ---------- bbw ---------- #  \n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for bbwp_ in bbwp_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[bbwp_].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","  # plt.axhline(bbwp_thresh, linestyle='--')\n","\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","\n"]},{"cell_type":"markdown","metadata":{"id":"cj9X6S1jJjER"},"source":["### plot nontp case"]},{"cell_type":"markdown","metadata":{"id":"tApzvz_gK9lR"},"source":["## legacy"]},{"cell_type":"markdown","metadata":{"id":"FaRGwR4NEop2"},"source":["### shifting"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"a8aYsjEgQnGF"},"outputs":[],"source":["org_res_df = res_df.copy()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":291,"status":"ok","timestamp":1626515312874,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"},"user_tz":-540},"id":"RF3RM2G2RCb1","outputId":"ba8f6a75-d4df-4f85-cd0f-190935341f7a"},"outputs":[{"name":"stdout","output_type":"stream","text":["                            open     high  ...  min_upper  max_lower\n","2021-06-30 23:55:59.999  0.27223  0.27281  ...   0.272145    0.27005\n","2021-06-30 23:56:59.999  0.27274  0.27290  ...   0.272145    0.27005\n","2021-06-30 23:57:59.999  0.27246  0.27257  ...   0.272523    0.27021\n","2021-06-30 23:58:59.999  0.27166  0.27183  ...   0.272523    0.27021\n","2021-06-30 23:59:59.999  0.27144  0.27211  ...   0.272523    0.27021\n","\n","[5 rows x 37 columns]\n","                            open     high  ...  min_upper  max_lower\n","2021-06-30 23:55:59.999  0.27223  0.27281  ...   0.272523    0.27021\n","2021-06-30 23:56:59.999  0.27274  0.27290  ...        NaN        NaN\n","2021-06-30 23:57:59.999  0.27246  0.27257  ...        NaN        NaN\n","2021-06-30 23:58:59.999  0.27166  0.27183  ...        NaN        NaN\n","2021-06-30 23:59:59.999  0.27144  0.27211  ...        NaN        NaN\n","\n","[5 rows x 37 columns]\n"]}],"source":["#         refresh res_df      #\n","res_df = org_res_df.copy()\n","print(org_res_df.tail(5))\n","\n","# break\n","\n","\n","shift_size = -4\n","# shift_size = -1\n","# shift_size = -7\n","# shift_size = +3\n","\n","res_df['min_upper'] = res_df['min_upper'].shift(shift_size)\n","res_df['max_lower'] = res_df['max_lower'].shift(shift_size)\n","res_df['minor_ST1_Trend'] = res_df['minor_ST1_Trend'].shift(shift_size)\n","res_df['minor_ST2_Trend'] = res_df['minor_ST2_Trend'].shift(shift_size)\n","res_df['minor_ST3_Trend'] = res_df['minor_ST3_Trend'].shift(shift_size)\n","res_df['middle_line'] = res_df['middle_line'].shift(shift_size)\n","\n","print(res_df.tail(5))"]},{"cell_type":"markdown","metadata":{"id":"2gxvme1PC6ha"},"source":["### load model"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":5831,"status":"ok","timestamp":1628862368878,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"},"user_tz":-540},"id":"dtYdAuSsC72_","outputId":"e8dccc53-aaa7-4bab-ed8d-753f634c08d6"},"outputs":[{"name":"stdout","output_type":"stream","text":["Downloading data from https://storage.googleapis.com/tensorflow/keras-applications/resnet/resnet50_weights_tf_dim_ordering_tf_kernels_notop.h5\n","94773248/94765736 [==============================] - 1s 0us/step\n"]}],"source":["# model_name = 'inner_tick_cnnreg_lscalemm_prefee_gpu_%s_%s_%s_%s_%s.h5'\n","\n","# model = tf.keras.models.load_model(ckpt_path + model_name)\n","\n","from tensorflow.keras.applications.resnet50 import ResNet50\n","\n","model = ResNet50(weights='imagenet', include_top=False)\n","# model.summary()\n"]},{"cell_type":"markdown","metadata":{"id":"5la6usMOFzkX"},"source":["#### gen selected vector"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"oQk3-jbKF8FB"},"outputs":[],"source":["def min_max_scale(npy_x):\n","\n","  return (npy_x - np.min(npy_x)) / (np.max(npy_x) - np.min(npy_x))\n","\n","def expand_dims(npy_x):\n","\n","  row, col = npy_x.shape\n","  npy_x2 = np.array(npy_x).reshape(-1, row, col, 1).astype(np.float32)\n","  # input_x = np.array(data_x).reshape(-1, row, col).astype(np.float32)\n","\n","  #     1c to 3c    #\n","  npy_x3 = npy_x2 * np.ones(3, dtype=np.float32)[None, None, None, :]\n","\n","  return npy_x3\n","\n","\n","def vector_dist(f1, f2):\n","  return np.linalg.norm(f1-f2)\n","\n","\n","\n","# ------------------------ params ------------------------  #\n","selected_i = 500\n","input_size = 100\n","\n","\n","\n","#   1. 선택된 인덱스를 입력받았을 때, input generating 형태만 만들어놓고,     #\n","#   1-1. input cols 필요함    #\n","\n","basic_list = ['open', 'high', 'low', 'close', 'minor_ST1_Up', 'minor_ST1_Down',\n","       'minor_ST2_Up', 'minor_ST2_Down', 'minor_ST3_Up', 'minor_ST3_Down',\n","       'middle_line', 'min_upper', 'max_lower']\n","# senkoua_list = ['senkou_a1', 'senkou_a2', 'senkou_a3', 'senkou_a4', 'senkou_a5']\n","# senkoub_list = ['senkou_b1', 'senkou_b2', 'senkou_b3', 'senkou_b4', 'senkou_b5']\n","senkoua_list = ['senkou_a1', 'senkou_a2', 'senkou_a3']\n","senkoub_list = ['senkou_b1', 'senkou_b2', 'senkou_b3']\n","# sar_list = ['sar1', 'sar2', 'sar3', 'sar4', 'sar5']\n","# sar_list = ['sar1', 'sar2', 'sar3', 'sar4', 'sar5']\n","sar_list = ['sar1', 'sar2', 'sar3']\n","sar_list = ['sar1', 'sar2', 'sar3']\n","\n","sma_list = ['sma']\n","\n","#     -------------- outer price phase --------------    #\n","macd_list = ['macd_hist1', 'macd_hist2', 'macd_hist3', 'macd_hist4', 'macd_hist5']\n","trix_list = ['trix1', 'trix2', 'trix3', 'trix4', 'trix5']\n","stoch_list = ['stoch']\n","fisher_list = ['fisher30', 'fisher60', 'fisher120']\n","cctbbo_list = ['cctbbo']\n","\n","selected_price_colname = basic_list + senkoua_list + senkoub_list + sar_list\n","selected_outprice_colname = [macd_list]\n","\n","\n","#         global scaling for outer price data       #\n","#         1. nan 처리       #\n","\n","# # print((np.isnan(df.values)))\n","# print(\"np.sum(np.isnan(df.values), axis=0) :\", np.sum(np.isnan(df.values), axis=0))\n","\n","# max_nan = np.max(np.sum(np.isnan(df.values), axis=0))\n","# # print(max_nan)\n","\n","# df = df.iloc[max_nan:-max_nan]\n","\n","# total_gdata = []\n","# for g_col in selected_outprice_colname:\n","\n","#   temp_data = min_max_scale(res_df[g_col])\n","#   total_gdata.append(temp_data)\n","\n","\n","\n","#   1-2. cols 에 따른, scaling method 구분함    #\n","onprice_input_x = min_max_scale(res_df[selected_price_colname].iloc[selected_i - input_size:selected_i].values)\n","print(onprice_input_x.shape)\n","\n","\n","#   2. plot_check 에서 본인이 원하는 shape 의 인덱스를 선택   #\n","#   3. vertorize, \n","#   3-1. input generator 를 이용해 entry signal 발생할 때마다 dist 비교 진행    #\n","re_onprice_input_x = expand_dims(onprice_input_x)\n","print(re_onprice_input_x.shape)\n","      \n","# break\n","\n","selected_vector = model.predict(re_onprice_input_x, verbose=1)\n","print(selected_vector.shape)"]},{"cell_type":"markdown","metadata":{"id":"OJqkmkpsLCYC"},"source":["### tr_tresh calc"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"gcpo4MGd9Wm4"},"outputs":[],"source":["res_wr = 0.6\n","# tr_thresh = 1\n","# tr_thresh = ((1 - res_wr) / res_wr) ** 0.5\n","tr_thresh = ((1 - res_wr) / res_wr) + 0.01\n","# tr_thresh = 2.6\n","print(\"res_wr :\", res_wr)\n","print(\"tr_thresh :\", tr_thresh)\n","\n","\n","#   단리    #\n","trade_num = 1000\n","asset = 1 # thousand USDT\n","test_loss_gap = 0.95  # fee adjusted\n","test_pr_gap = 1 + (1 - test_loss_gap) * tr_thresh\n","\n","test_loss_cnt = trade_num * (1 - res_wr)\n","test_pr_cnt = trade_num * res_wr\n","\n","test_trade_list = [test_pr_gap] * int(test_pr_cnt) + [test_loss_gap] * int(test_loss_cnt)\n","random.shuffle(test_trade_list)\n","# print(\"len(test_trade_list) :\", len(test_trade_list))\n","print(test_trade_list[:10])\n","print()\n","\n","# print(\"%.5f\" % np.cumprod(test_trade_list)[-1])\n","for tr_thresh_ in np.arange(1, 3, 0.2):\n","  if (1 + (1 - test_loss_gap) * tr_thresh_) ** test_pr_cnt * test_loss_gap ** test_loss_cnt > 1:\n","    break\n","print(\"복리를 위한 tr_thresh_ :\", tr_thresh_)\n","# print(\"tr_thresh :\", tr_thresh)\n","print(\"np.cumprod(test_trade_list)[-1] :\", np.cumprod(test_trade_list)[-1])\n","print(\"total_pr : \", np.cumprod(test_trade_list)[-1])\n","print()\n","#   복리 tr_thresh  #\n","#   1. trade_num 에 영향 받지 않음\n","#   2. loss_gap 에 비례함\n","\n","for tr_thresh_ in np.arange(1, 3, 0.01):\n","  if ((1 - test_loss_gap) * tr_thresh_) * test_pr_cnt + (test_loss_gap - 1) * test_loss_cnt > 0:\n","    break\n","np_test_trade = np.array(test_trade_list) - 1\n","print(np_test_trade[:10])\n","# print(\"%.3f\" % )\n","print(\"단리를 위한 tr_thresh_ :\", tr_thresh_)\n","# print(\"tr_thresh :\", tr_thresh)\n","print(\"np.cumsum(np_test_trade)[-1] :\", np.cumsum(np_test_trade)[-1])\n","print(\"total_pr : \", 1 + np.cumsum(np_test_trade)[-1])\n"]}],"metadata":{"accelerator":"GPU","colab":{"collapsed_sections":["Ic1mfmwWCIBu","mEKyVbHWSuzi","VdukVo5-Suzj","Bw5JibDKSuzj","Pe0QpnORSuzk","E0n53hflJbnp","MlFkpO1MSuzl","t1E_eAyPSuzm","nUs4fjVHSuzl","WVAKq3i8Suzm","L7l5CTJfSuzn","x_XGJqBi8Jex","epgS5Dksu-HX","x2yj2SwAXDLp","xpyP5t8Ht_pE","dzla8i9_ysmP","zQ-roiifspcX","X0FsT-8FZRti","13a-U32Uy50I","TBE0l6dHRYrE","Qys2Bw5Ou3u9","tApzvz_gK9lR","2gxvme1PC6ha","5la6usMOFzkX","OJqkmkpsLCYC"],"name":"stem3_51_vec_backi2(040418_devecto_hl).ipynb","toc_visible":true,"provenance":[],"machine_shape":"hm","authorship_tag":"ABX9TyOycxd08FlZyAot7kXNeAzi"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}