{"nbformat":4,"nbformat_minor":0,"metadata":{"kernelspec":{"display_name":"Python [conda env:tensorflow2_p36]","language":"python","name":"conda-env-tensorflow2_p36-py"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.6.5"},"colab":{"name":"Make_model_2021_close_updown_one_pair_tonpy_ train_prevdata.ipynb의 사본","provenance":[{"file_id":"1z4z_KLPzc6RWsxo3X_dHbpByxUAgjoMJ","timestamp":1583754134002}],"collapsed_sections":["b1UEFg1GVSLS"],"toc_visible":true,"machine_shape":"hm"},"accelerator":"GPU"},"cells":[{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"AK9FjWwLOyay","executionInfo":{"status":"ok","timestamp":1619247841030,"user_tz":-540,"elapsed":22057,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"}},"outputId":"2d43a9e2-34cf-4628-ec35-d82b8b008543"},"source":["from google.colab import drive\n","drive.mount('/content/drive')\n","\n","import os, sys\n","\n","current_path = '/content/drive/My Drive/Colab Notebooks/Project_Stock/'\n","\n","os.chdir(current_path)"],"execution_count":1,"outputs":[{"output_type":"stream","text":["Mounted at /content/drive\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"8uqYv5StTazo"},"source":["### **Requirements**"]},{"cell_type":"code","metadata":{"id":"9qGt60DKTZmf"},"source":["# !pip install statsmodels==0.12.2\n","\n","# import statsmodels\n","# statsmodels.__version__"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"y7bVjhlwPI_-"},"source":["### **ARIMA**"]},{"cell_type":"code","metadata":{"id":"NvdpArctN_6l","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1619247847813,"user_tz":-540,"elapsed":6774,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"}},"outputId":"1e3e9411-8642-4fc9-8397-a154f211096d"},"source":["from statsmodels.tsa.arima_model import ARIMA\n","# from statsmodels.tsa.arima.model import ARIMA\n","\n","from datetime import datetime\n","\n","\n","def arima_test(target, use_rows=None):\n","\n","  size = int(len(target) * 0.66)\n","  train, test = target[:size].values, target[size:]\n","  test_shift = test.shift(1).values\n","  test = test.values\n","  # break\n","\n","  history = list(train)\n","  predictions = list()\n","  err_ranges = list()\n","  for t in range(len(test)):\n","    \n","      if use_rows is not None:\n","        history = history[-use_rows:]\n","        \n","      model = ARIMA(history, order=(0, 2, 4))\n","      model_fit = model.fit()\n","      output = model_fit.forecast()\n","      # print(output)\n","      # break\n","\n","      predictions.append(output[0])\n","      err_ranges.append(output[1])\n","      obs = test[t]\n","      # print('obs :', obs)\n","      history.append(obs)\n","      # break\n","      print('\\r %.2f%%' % (t / len(test) * 100), end='')\n","\n","  print(len(test), len(predictions))\n","\n","  return predictions, err_ranges\n","\n","\n","# print(high)\n","\n","\n","def get_back_result(ohlcv, predictions, err_ranges, tp=0.04, sl=None, leverage=1, show_detail=False, show_plot=False, return_pr=False, cumsum=False, \n","                    close_ver=False, reverse_short=False):\n","\n","  \n","  high, low, test = np.split(ohlcv.values[-len(predictions):, [1, 2, 3]], 3, axis=1)\n","\n","  if close_ver:\n","    predictions = ohlcv['close'].shift(1).values[-len(test):]\n","\n","  fee = 0.0006\n","  long_profits = []\n","  short_profits = []\n","  liquidations = []\n","  win_cnt = 0\n","  for i in range(len(test)):\n","\n","    long_ep = predictions[i]\n","    if sl is not None:\n","      long_sl = long_ep * (1 / (sl + 1))\n","\n","    # assert long_ep < long_exit, 'long_exit < long_ep !, %s, %s' % (long_exit, long_ep)\n","    \n","    short_ep = (predictions[i] + err_ranges[i]) * (1 + tp)\n","    # short_ep = (predictions[i] + err_ranges[i]) * (1 / (1 - tp))\n","    if sl is not None:\n","      short_sl = short_ep * (1 / (1 - sl))\n","\n","    # print((low[i]))\n","\n","    #    long 우선   # <-- long & short 둘다 체결된 상황에서는 long 체결을 우선으로 한다.\n","    if low[i] < long_ep:\n","      \n","      liquidation = low[i] / long_ep - fee\n","      l_liquidation = 1 + (liquidation - 1) * leverage\n","      liquidations.append(l_liquidation)\n","\n","      if max(l_liquidation, 0) == 0:\n","        l_profit = 0\n","        # print('low[i], long_ep, l_liquidation :', low[i], long_ep, l_liquidation)\n","      else:\n","\n","        if sl is not None:\n","          if low[i] < long_sl:\n","            profit = long_sl / long_ep - fee\n","          else:\n","            profit = test[i] / long_ep - fee\n","\n","        else:\n","          profit = test[i] / long_ep - fee\n","\n","        l_profit = 1 + (profit - 1) * leverage\n","        l_profit = max(l_profit, 0)\n","        \n","        if profit >= 1:\n","          win_cnt += 1\n","\n","      long_profits.append(l_profit)\n","      short_profits.append(1.0)\n","\n","      if show_detail:\n","        print(test[i], predictions[i], long_ep)\n","\n","    # if high[i] > short_ep > low[i]: # 지정 대기가 아니라, 해당 price 가 지나면, long 한다.\n","\n","    #   if not reverse_short:\n","    #     liquidation = short_ep / high[i]  - fee\n","    #   else:\n","    #     liquidation = low[i] / short_ep  - fee\n","    #   l_liquidation = 1 + (liquidation - 1) * leverage\n","\n","    #   if max(l_liquidation, 0) == 0:\n","    #     l_profit = 0\n","    #   else:\n","\n","    #     if sl is not None:\n","    #       if high[i] > short_sl:\n","\n","    #         if not reverse_short:\n","    #           profit = short_ep / short_sl - fee\n","    #         else:\n","    #           profit = short_sl / short_ep - fee\n","\n","    #       else:\n","    #         if not reverse_short:\n","    #           profit = short_ep / test[i] - fee\n","    #         else:\n","    #           profit = test[i] / short_ep - fee\n","\n","    #     else:\n","\n","    #       if not reverse_short:\n","    #         profit = short_ep / test[i] - fee\n","    #       else:\n","    #         profit = test[i] / short_ep - fee\n","\n","    #     l_profit = 1 + (profit - 1) * leverage\n","    #     l_profit = max(l_profit, 0)\n","\n","    #     if profit >= 1:\n","    #       win_cnt += 1\n","\n","    #   short_profits.append(l_profit)\n","    #   long_profits.append(1.0)\n","\n","    #   if show_detail:\n","    #     print(test[i], predictions[i], short_ep)\n","    \n","    else:\n","      long_profits.append(1.0)\n","      short_profits.append(1.0)\n","      liquidations.append(1.0)\n","\n","\n","  long_win_ratio = sum(np.array(long_profits) > 1.0) / sum(np.array(long_profits) != 1.0)\n","  short_win_ratio = sum(np.array(short_profits) > 1.0) / sum(np.array(short_profits) != 1.0)\n","  long_frequency = sum(np.array(long_profits) != 1.0) / len(test)\n","  short_frequency = sum(np.array(short_profits) != 1.0) / len(test)\n","  if not cumsum:\n","    long_accum_profit = np.array(long_profits).cumprod()\n","    short_accum_profit = np.array(short_profits).cumprod()\n","  else:\n","    long_accum_profit = (np.array(long_profits) - 1.0).cumsum()\n","    short_accum_profit = (np.array(short_profits) - 1.0).cumsum()\n","\n","  # print(win_ratio)\n","\n","  if show_plot:\n","\n","    plt.figure(figsize=(10, 5))\n","    plt.suptitle('tp=%.4f, lvrg=%d' % (tp, leverage))\n","\n","    plt.subplot(151)\n","    plt.plot(liquidations)\n","    plt.title('liquidations')\n","\n","    plt.subplot(152)\n","    plt.plot(long_profits)\n","    plt.title('Win Ratio : %.2f %%\\nrequency : %.2f %%' % (long_win_ratio * 100, long_frequency * 100), color='black')\n","    # plt.show()\n","\n","    # print()\n","    plt.subplot(153)\n","    plt.plot(long_accum_profit)\n","    plt.title('Accum_profit : %.2f' % long_accum_profit[-1], color='black')\n","\n","    plt.subplot(154)\n","    plt.plot(short_profits)\n","    plt.title('Win Ratio : %.2f %%\\nrequency : %.2f %%' % (short_win_ratio * 100, short_frequency * 100), color='black')\n","    # plt.show()\n","\n","    # print()\n","    plt.subplot(155)\n","    plt.plot(short_accum_profit)\n","    plt.title('Accum_profit : %.2f' % short_accum_profit[-1], color='black')\n","    plt.show()\n","\n","  return [long_win_ratio, short_win_ratio], [long_frequency, short_frequency], [long_accum_profit[-1], short_accum_profit[-1]], [long_profits, short_profits]\n","\n","\n","# get_back_result(tp=0.04, leverage=1, show_plot=True)\n"],"execution_count":2,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tools/_testing.py:19: FutureWarning: pandas.util.testing is deprecated. Use the functions in the public API at pandas.testing instead.\n","  import pandas.util.testing as tm\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"aDkU3tMiM2lO","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1619247849820,"user_tz":-540,"elapsed":8772,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"}},"outputId":"052c1241-7108-4e19-875f-de0295faf690"},"source":["import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","\n","interval = '30m'\n","date_path = './candlestick_concated/%s/2021-02-11/' % interval\n","file_list = os.listdir(date_path)\n","\n","print((file_list))"],"execution_count":3,"outputs":[{"output_type":"stream","text":["['2021-02-11 BTCUSDT.xlsx', '2021-02-11 ETHUSDT.xlsx', '2021-02-11 BCHUSDT.xlsx', '2021-02-11 XRPUSDT.xlsx', '2021-02-11 EOSUSDT.xlsx', '2021-02-11 LTCUSDT.xlsx', '2021-02-11 ETCUSDT.xlsx', '2021-02-11 LINKUSDT.xlsx', '2021-02-11 XLMUSDT.xlsx', '2021-02-11 ADAUSDT.xlsx', '2021-02-11 XMRUSDT.xlsx', '2021-02-11 SXPUSDT.xlsx', '2021-02-11 KAVAUSDT.xlsx', '2021-02-11 BANDUSDT.xlsx', '2021-02-11 DASHUSDT.xlsx', '2021-02-11 ZECUSDT.xlsx', '2021-02-11 XTZUSDT.xlsx', '2021-02-11 BNBUSDT.xlsx', '2021-02-11 ATOMUSDT.xlsx', '2021-02-11 ONTUSDT.xlsx', '2021-02-11 IOTAUSDT.xlsx', '2021-02-11 BATUSDT.xlsx', '2021-02-11 NEOUSDT.xlsx', '2021-02-11 QTUMUSDT.xlsx', '2021-02-11 WAVESUSDT.xlsx', '2021-02-11 MKRUSDT.xlsx', '2021-02-11 SNXUSDT.xlsx', '2021-02-11 DOTUSDT.xlsx', '2021-02-11 THETAUSDT.xlsx', '2021-02-11 ALGOUSDT.xlsx', '2021-02-11 KNCUSDT.xlsx', '2021-02-11 ZRXUSDT.xlsx', '2021-02-11 COMPUSDT.xlsx', '2021-02-11 OMGUSDT.xlsx']\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"0en4ihETQ32K"},"source":["### **Data Stacking**"]},{"cell_type":"code","metadata":{"id":"OgZyYJPg3RJa","executionInfo":{"status":"ok","timestamp":1619247849820,"user_tz":-540,"elapsed":8769,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"}}},"source":["def resize_npy(x):\n","\n","  temp_x = []\n","\n","  for d_i, data in enumerate(x):\n","    # resized_data = cv2.resize(data, (row * 2, col * 2)) --> input image 홰손된다\n","    # resized_data = data.repeat(2, axis=0).repeat(2, axis=1)\n","    data = data.repeat(2, axis=0).repeat(2, axis=1)\n","    # resized_data = data.repeat(1, axis=0).repeat(1, axis=1)\n","    # cmapped = plt.cm.Set1(resized_data)[:, :, :3]  # Drop Alpha Channel\n","    \n","    if d_i == 0:\n","      plt.imshow(data)\n","      plt.show()\n","      # plt.imshow(resized_data)\n","      # plt.show()\n","    # print('resized_data.shape :', resized_data.shape)\n","    # break\n","    temp_x.append(data)\n","\n","  return temp_x"],"execution_count":4,"outputs":[]},{"cell_type":"code","metadata":{"id":"SvZuk1rPrUMe","colab":{"base_uri":"https://localhost:8080/","height":969},"executionInfo":{"status":"ok","timestamp":1619247869113,"user_tz":-540,"elapsed":28054,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"}},"outputId":"2dc15be4-0658-40f9-d81b-92601e3f68cd"},"source":["from sklearn.preprocessing import MinMaxScaler, MaxAbsScaler\n","import pickle\n","from sklearn.model_selection import train_test_split\n","\n","with open('./arima_result/arima_opt_profit_ls_only_long_result_%s.pickle' % interval, 'rb') as f:\n","  load_dict = pickle.load(f)\n","\n","candis = list(load_dict.keys())\n","long_index = 0\n","leverage = 5\n","prev_x = None\n","\n","seed = 1\n","random_state = 20\n","np.random.seed(seed)\n","\n","for i in range(len(candis)):\n","\n","  keys = [candis[i]]\n","  \n","  # if 'algo'.upper() not in candis[i]:\n","  #   continue\n","  if '2021-03-02 DOTUSDT.xlsx' in candis[i]:\n","    # print('')\n","    continue\n","\n","  if '04-08' not in candis[i]:  # <-- 04-08 includes all timestamp range\n","    continue\n","\n","  if 'theta'.upper() not in candis[i]:\n","    continue\n","\n","  # plt.figure(figsize=(35, 10))\n","  # plt.suptitle('%s %s' % (interval, keys))\n","\n","\n","  #         get tp parameter        #\n","\n","  # plt.subplot(1,10,3)\n","  # for key in keys:  \n","  #   # plt.plot(profit_result_dict[key]['tp_list'], profit_result_dict[key]['ap_list'])\n","  #   argmax = np.argmax(profit_result_dict[key]['ap_list'][:, [long_index]])\n","  #   peak_tp = profit_result_dict[key]['tp_list'][argmax]\n","  #   # plt.axvline(peak_tp, linestyle='--')\n","  #   # plt.title('acc profit, max at %.4f' % (peak_tp))  \n","\n","  # plt.subplot(1,10,4)\n","  # plt.title('max acc profit by leverage')  \n","  # for key in keys:  \n","  #   # plt.plot(profit_result_dict[key]['tp_list'], profit_result_dict[key]['max_ap_list'], label=key)\n","  #   argmax = np.argmax(profit_result_dict[key]['max_ap_list'][:, [long_index]])\n","  #   max_peak_tp = profit_result_dict[key]['tp_list'][argmax]\n","  #   # plt.axvline(max_peak_tp, linestyle='--')\n","  #   # plt.title('max acc profit, max at %.4f' % (max_peak_tp))  \n","\n","\n","  for key in keys:  \n","    # print(profit_result_dict[key]['leverage_ap_list'])\n","\n","    # for tp in [max_peak_tp]:\n","\n","      # if tp == peak_tp:\n","      #   plt.subplot(1,10,5)\n","      # else:\n","      #   plt.subplot(1,10,6)\n","\n","      #     leverage analysis     #\n","      ohlcv = load_dict[key]['ohlcv']\n","      # ohlcv = ohlcv.iloc[:-int(len(ohlcv) * 0.3)]  # exclude back_range\n","      # predictions = load_dict[key]['predictions']\n","      # err_ranges = load_dict[key]['err_ranges']\n","      print(\"ohlcv.index[0] :\", ohlcv.index[0])\n","      print(\"ohlcv.index[-1] :\", ohlcv.index[-1])\n","\n","      predictions = ohlcv['close'].shift(1).values\n","      err_ranges = np.zeros_like(predictions)\n","\n","      # leverage_list = profit_result_dict[key]['leverage_list']\n","      # temp_ap_list = list()\n","      # temp_pr_list = list()\n","\n","      try:\n","        print('-------------- %s --------------' % key)\n","        result = get_back_result(ohlcv, predictions, err_ranges, tp=0, leverage=leverage, show_plot=True, reverse_short=False, show_detail=False)\n","        # temp_ap_list.append(result[2])\n","        # temp_pr_list.append(result[3])\n","\n","        # if round(leverage) == 1:\n","        #   temp_pr_list = result[3]\n","        pr_list = result[3][long_index]\n","\n","      except Exception as e:\n","        print(e)\n","        break    \n","  # break\n","\n","\n","      pd.set_option('display.max_rows', 500)\n","      pd.set_option('display.max_columns', 500)\n","      pd.set_option('display.width', 1000)\n","\n","      #         clustering zone           #\n","\n","      #       set data features : ohlc, v, ep\n","      time_index = ohlcv.index[-len(predictions):]\n","      ohlc = ohlcv.iloc[-len(predictions):, :4]\n","      vol = ohlcv.iloc[-len(predictions):, [4]]\n","      long_ep = np.array(predictions)\n","      long_ep = long_ep.reshape(-1, 1)\n","\n","      ohlcv['u_wick'] = ohlcv['high'] / np.maximum(ohlcv['close'] , ohlcv['open'])\n","      ohlcv['d_wick'] = np.minimum(ohlcv['close'] , ohlcv['open']) / ohlcv['low']\n","      ohlcv['body'] = ohlcv['close'] / ohlcv['open']\n","\n","      candle = ohlcv.iloc[-len(predictions):, -3:]\n","\n","\n","      print('len(ohlc) :', len(ohlc))\n","      print('long_ep.shape :', long_ep.shape)\n","      print('len(pr_list) :', len(pr_list))\n","\n","\n","      #       set params    #\n","      period = 45\n","      data_x, data_pr, data_updown = [], [], []\n","      data_index = []\n","      key_i = i\n","\n","      for i in range(period, len(predictions)):\n","\n","        #   pr_list != 1 인 데이터만 사용한다\n","        # if 1:\n","        if pr_list[i] != 1:\n","          \n","          #   prediction 을 제외한 이전 데이터를 사용해야한다\n","          temp_ohlc = ohlc.iloc[i - period : i].values\n","          temp_long_ep = long_ep[i - period : i]\n","          temp_vol = vol.iloc[i - period : i].values\n","          temp_candle = candle.iloc[i - period : i].values\n","\n","          # print(temp_ohlc.shape)\n","          # print(temp_long_ep.shape)\n","          # print(temp_vol.shape)\n","          # print(temp_candle.shape)\n","          # break\n","\n","          #   stacking  \n","          # temp_data = np.hstack((temp_ohlc, temp_long_ep, temp_vol, temp_candle))\n","          temp_data = np.hstack((temp_ohlc, temp_long_ep, temp_vol))\n","          # temp_data = np.hstack((temp_ohlc, temp_vol))\n","\n","          # temp_data = np.hstack((temp_ohlc, temp_long_ep))\n","          # temp_data = temp_vol\n","\n","          #   scaler 설정\n","\n","          #   ohlc & ep -> max_abs\n","          # max_abs = MaxAbsScaler()\n","          # temp_data[:, :5] = max_abs.fit_transform(temp_data[:, :5])\n","\n","\n","          min_max = MinMaxScaler()\n","          temp_data[:, :5] = min_max.fit_transform(temp_data[:, :5])\n","\n","\n","          #   vol -> min_max\n","          min_max = MinMaxScaler()\n","          temp_data[:, [5]] = min_max.fit_transform(temp_data[:, [5]])\n","\n","\n","          #   candle -> max_abs    \n","          # max_abs = MaxAbsScaler()\n","          # temp_data[:, -3:] = max_abs.fit_transform(temp_data[:, -3:])\n","\n","          # min_max = MinMaxScaler()\n","          # temp_data[:, -3:] = min_max.fit_transform(temp_data[:, -3:])\n","\n","          if np.isnan(np.sum(temp_data)):\n","            continue\n","\n","          data_x.append(temp_data)\n","          data_pr.append(pr_list[i])\n","          data_index.append(time_index[i])\n","          data_updown.append(ohlc['close'].iloc[i] / ohlc['open'].iloc[i])\n","\n","\n","      print('np.array(data_x).shape :', np.array(data_x).shape)\n","      # print(data_x[0])\n","\n","\n","      #       Reshape data for image deep - learning     #\n","      _, row, col = np.array(data_x).shape\n","\n","      input_x = np.array(data_x).reshape(-1, row, col, 1).astype(np.float32)\n","\n","      #     1c to 3c    #\n","      input_x = input_x * np.ones(3, dtype=np.float32)[None, None, None, :]\n","      input_x = np.array(resize_npy(input_x))\n","\n","\n","      input_pr = np.array(data_pr).reshape(-1, 1).astype(np.float32)\n","      input_ud = np.array(data_updown).reshape(-1, 1).astype(np.float32)\n","      input_index = np.array(data_index).reshape(-1, 1)\n","      print('input_x.shape :', input_x.shape)\n","      print('input_x.dtype :', input_x.dtype)\n","      print('input_pr.shape :', input_pr.shape)\n","      print('input_ud.shape :', input_ud.shape)\n","      print('input_index.shape :', input_index.shape)\n","\n","\n","      # x_train_, x_test, pr_train_, pr_test, ud_train_, ud_test = train_test_split(input_x, input_pr, input_ud, test_size=0.4, shuffle=False, random_state=random_state)\n","      # x_train, x_val, pr_train, pr_val, ud_train, ud_val = train_test_split(x_train_, pr_train_, ud_train_, test_size=0.25, shuffle=False, random_state=random_state)\n","\n","      #     do stacking   #\n","      if prev_x is None:\n","        prev_x = input_x\n","        prev_pr = input_pr\n","        prev_ud = input_ud\n","      else:\n","        total_x = np.vstack((prev_x, input_x))\n","        total_pr = np.vstack((prev_pr, input_pr))\n","        total_ud = np.vstack((prev_ud, input_ud))\n","\n","        prev_x = total_x\n","        prev_pr = total_pr\n","        prev_ud = total_ud\n","\n","        print('total_x.shape :', total_x.shape)\n","        print('total_pr.shape :', total_pr.shape)\n","        print('total_ud.shape :', total_ud.shape)\n","\n","      # if prev_train_x is None:\n","      #   prev_train_x = x_train\n","      #   prev_val_x = x_val\n","      #   prev_test_x = x_test\n","        \n","      #   prev_train_pr = pr_train\n","      #   prev_val_pr = pr_val\n","      #   prev_test_pr = pr_test\n","\n","      #   prev_train_ud = ud_train\n","      #   prev_val_ud = ud_val\n","      #   prev_test_ud = ud_test\n","\n","      # else:\n","\n","      #   total_train_x = np.vstack((prev_train_x, x_train))\n","      #   total_val_x = np.vstack((prev_val_x, x_val))\n","      #   total_test_x = np.vstack((prev_test_x, x_test))\n","      #   total_train_pr = np.vstack((prev_train_pr, pr_train))\n","      #   total_val_pr = np.vstack((prev_val_pr, pr_val))\n","      #   total_test_pr = np.vstack((prev_test_pr, pr_test))\n","      #   total_train_ud = np.vstack((prev_train_ud, ud_train))\n","      #   total_val_ud = np.vstack((prev_val_ud, ud_val))\n","      #   total_test_ud = np.vstack((prev_test_ud, ud_test))\n","        \n","      #   prev_train_x = total_train_x\n","      #   prev_val_x = total_val_x\n","      #   prev_test_x = total_test_x\n","        \n","      #   prev_train_pr = total_train_pr\n","      #   prev_val_pr = total_val_pr\n","      #   prev_test_pr = total_test_pr\n","\n","      #   prev_train_ud = total_train_ud\n","      #   prev_val_ud = total_val_ud\n","      #   prev_test_ud = total_test_ud\n","        \n","      #   print(\"total_train_x.shape :\", total_train_x.shape)\n","      #   print(\"total_val_x.shape :\", total_val_x.shape)\n","      #   print(\"total_test_x.shape :\", total_test_x.shape)\n","      #   print(\"total_train_pr.shape :\", total_train_pr.shape)\n","      #   print(\"total_val_pr.shape :\", total_val_pr.shape)\n","      #   print(\"total_test_pr.shape :\", total_test_pr.shape)\n","      #   print(\"total_train_ud.shape :\", total_train_ud.shape)\n","      #   print(\"total_val_ud.shape :\", total_val_ud.shape)\n","      #   print(\"total_test_ud.shape :\", total_test_ud.shape)\n","\n","  break # --> use only one pair dataset\n","\n","  #         chunks 로 나누지 않아도, generator 에서 batch_size 만큼만 load 할 것   #\n","  # try:\n","  #   if len(total_x) > 300000:\n","  #     break\n","  # except:\n","  #   pass\n","\n","  \n","        "],"execution_count":5,"outputs":[{"output_type":"stream","text":["ohlcv.index[0] : 2020-05-27 17:29:59.999000\n","ohlcv.index[-1] : 2021-04-08 20:29:59.999000\n","-------------- 2021-04-08 THETAUSDT.xlsx --------------\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:158: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:159: RuntimeWarning: invalid value encountered in long_scalars\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:160: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:163: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray\n","/usr/local/lib/python3.7/dist-packages/numpy/core/_asarray.py:136: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray\n","  return array(a, dtype, copy=False, order=order, subok=True)\n"],"name":"stderr"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 720x360 with 5 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}},{"output_type":"stream","text":["len(ohlc) : 15175\n","long_ep.shape : (15175, 1)\n","len(pr_list) : 15175\n","np.array(data_x).shape : (14504, 45, 6)\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}},{"output_type":"stream","text":["input_x.shape : (14504, 90, 12, 3)\n","input_x.dtype : float32\n","input_pr.shape : (14504, 1)\n","input_ud.shape : (14504, 1)\n","input_index.shape : (14504, 1)\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:201: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"thMdK22LQdKv","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1619247918959,"user_tz":-540,"elapsed":791,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"}},"outputId":"557d2ec3-e717-4f25-e08c-f2b903e53ffd"},"source":["period = 45\n","# x_save_path = current_path + 'npy/' + '%s_close_updown_x.npy' % period\n","# y_save_path = current_path + 'npy/' + '%s_close_updown_y.npy' % period\n","#         save to npy     #\n","# x_save_path = current_path + 'npy/' + '%s_close_updown_theta_x_ex.npy' % period\n","# y_save_path = current_path + 'npy/' + '%s_close_updown_theta_y_ex.npy' % period\n","\n","# total_x = np.load(x_save_path)\n","# total_pr = np.load(y_save_path)\n","\n","# _, row, col, _ = total_x.shape\n","\n","_, row, col, _ = input_x.shape\n","\n","#       split new test      #\n","\n","seed = 1\n","random_state = 20\n","np.random.seed(seed)\n","from sklearn.model_selection import train_test_split\n","#         train / test split      #\n","# x_train, x_test_, pr_train, pr_test_, ud_train, ud_test_ = train_test_split(re_input_x, input_pr, input_ud, test_size=0.4, shuffle=True, random_state=random_state)\n","# x_train_, x_test, pr_train_, pr_test = train_test_split(total_x, total_pr, test_size=0.2, shuffle=False, random_state=random_state)\n","# x_train, x_val, pr_train, pr_val = train_test_split(x_train_, pr_train_, test_size=0.25, shuffle=True, random_state=random_state)\n","# break\n","print(\"input_x.shape : \", input_x.shape)\n","\n","a_input_x, new_input_x, a_input_pr, new_input_pr, a_input_index, new_input_index = train_test_split(input_x, input_pr, input_index, test_size=0.3, shuffle=False, random_state=random_state)\n","\n","\n","      \n","\n","x_train_, x_test, pr_train_, pr_test, index_train_, index_test = train_test_split(a_input_x, a_input_pr, a_input_index, test_size=0.4, shuffle=False, random_state=random_state)\n","\n","print(\"x_train_.shape :\", x_train_.shape) # with a_input_x -> 4263 / with input_x -> 4219\n","\n","#           extract prev data           #\n","#           test data 의 짝수차 데이터를 train set 에 넘기고, train & val split 을 shuffle 로 진행한다\n","print('org x_test.shape :', x_test.shape)\n","x_test4train, pr_test4train, index_test4train =  x_test[::3], pr_test[::3], index_test[::3]\n","x_test, pr_test, index_test =  x_test[2::3], pr_test[2::3], index_test[2::3]\n","print('divided x_test.shape :', x_test.shape)\n","print()\n","\n","\n","#          add test4train data to training set      #\n","x_train_ = np.vstack((x_train_, x_test4train))\n","pr_train_ = np.vstack((pr_train_, pr_test4train))\n","index_train_ = np.vstack((index_train_, index_test4train))\n","\n","print(\"x_test4train.shape :\", x_test4train.shape) \n","print(\"added x_train_.shape :\", x_train_.shape) # with a_input_x -> 4263 / with input_x -> 4219\n","\n","\n","# x_train_, x_test, pr_train_, pr_test = train_test_split(input_x, input_pr, test_size=0.4, shuffle=True, random_state=random_state)\n","x_train, x_val, pr_train, pr_val, index_train, index_val = train_test_split(x_train_, pr_train_, index_train_, test_size=0.3, shuffle=True, random_state=random_state)\n","\n","#         pr label   #\n","y_train = np.where(pr_train > 1, 1, 0)\n","y_test = np.where(pr_test > 1, 1, 0)\n","y_val = np.where(pr_val > 1, 1, 0)\n","\n","print(\"x_train.shape :\", x_train.shape) # with a_input_x -> 4263 / with input_x -> 4219\n","\n","# del total_x"],"execution_count":6,"outputs":[{"output_type":"stream","text":["input_x.shape :  (14504, 90, 12, 3)\n","x_train_.shape : (6091, 90, 12, 3)\n","org x_test.shape : (4061, 90, 12, 3)\n","divided x_test.shape : (1353, 90, 12, 3)\n","\n","x_test4train.shape : (1354, 90, 12, 3)\n","added x_train_.shape : (7445, 90, 12, 3)\n","x_train.shape : (5211, 90, 12, 3)\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"6XibtKgphXyQ"},"source":["### Check shuffled index"]},{"cell_type":"code","metadata":{"id":"KH8eEW8ChZtV","colab":{"base_uri":"https://localhost:8080/","height":205},"executionInfo":{"status":"ok","timestamp":1619247923605,"user_tz":-540,"elapsed":2125,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"}},"outputId":"53e931bb-3689-4485-ae2e-5747288f06d4"},"source":["# print(index_val)\n","from datetime import datetime\n","\n","# print(index_test)\n","# print(index_train)\n","# print(index_val)\n","total_stamp = list(map(lambda x: datetime.timestamp(x[0]), input_index)) \n","timestamp_train = list(map(lambda x: datetime.timestamp(x[0]), index_train)) \n","timestamp_val = list(map(lambda x: datetime.timestamp(x[0]), index_val)) \n","timestamp_test = list(map(lambda x: datetime.timestamp(x[0]), index_test)) \n","# print(total_stamp)\n","# print(timestamp_train)\n","plt.figure(figsize=(40, 4))\n","plt.scatter(range(len(timestamp_train)), timestamp_train, label='train')\n","plt.scatter(range(len(timestamp_val)), timestamp_val, color='orange', label='val')\n","plt.scatter(range(len(timestamp_test)), timestamp_test, color='red', label='test')\n","plt.ylim(min(total_stamp), max(total_stamp))\n","plt.legend(fontsize=20)\n","\n","# print(new_input_index)"],"execution_count":7,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.legend.Legend at 0x7f124ffd38d0>"]},"metadata":{"tags":[]},"execution_count":7},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 2880x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"b1UEFg1GVSLS"},"source":["### Load Data"]},{"cell_type":"code","metadata":{"id":"76BQc5XlUSS6"},"source":["# period = 45\n","# # x_save_path = current_path + 'npy/' + '%s_close_updown_x.npy' % period\n","# # y_save_path = current_path + 'npy/' + '%s_close_updown_y.npy' % period\n","# #         save to npy     #\n","# x_save_path = current_path + 'npy/' + '%s_close_updown_theta_x_ex.npy' % period\n","# y_save_path = current_path + 'npy/' + '%s_close_updown_theta_y_ex.npy' % period\n","\n","# total_x = np.load(x_save_path)\n","# total_pr = np.load(y_save_path)\n","\n","# _, row, col, _ = total_x.shape\n","\n","\n","\n","# seed = 1\n","# random_state = 20\n","# np.random.seed(seed)\n","# from sklearn.model_selection import train_test_split\n","# #         train / test split      #\n","# # x_train, x_test_, pr_train, pr_test_, ud_train, ud_test_ = train_test_split(re_total_x, total_pr, total_ud, test_size=0.4, shuffle=True, random_state=random_state)\n","# x_train_, x_test, pr_train_, pr_test = train_test_split(total_x, total_pr, test_size=0.2, shuffle=False, random_state=random_state)\n","# x_train, x_val, pr_train, pr_val = train_test_split(x_train_, pr_train_, test_size=0.25, shuffle=False, random_state=random_state)\n","# # break\n","# #         pr label   #\n","# y_train = np.where(pr_train > 1, 1, 0)\n","# y_test = np.where(pr_test > 1, 1, 0)\n","# y_val = np.where(pr_val > 1, 1, 0)\n","\n","# del total_x"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"GmmgsEUMqUjN"},"source":["### **Model**"]},{"cell_type":"code","metadata":{"id":"mcDUjgQzqUSr","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1619247932187,"user_tz":-540,"elapsed":5013,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"}},"outputId":"aed96c9b-58f0-4706-9e10-baf2fd7e2513"},"source":["import os\n","# os.environ[\"CUDA_DEVICE_ORDER\"]=\"PCI_BUS_ID\"   \n","# os.environ[\"CUDA_VISIBLE_DEVICES\"]=\"0\"\n","\n","%tensorflow_version 1.x\n","\n","import keras\n","import tensorflow as tf\n","\n","import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import scipy.misc \n","from math import sqrt \n","import itertools\n","from IPython.display import display\n","\n","%matplotlib inline\n","\n","from keras.utils import plot_model\n","import keras.backend as K\n","from keras.models import Model, Sequential\n","import keras.layers as layers\n","from keras.optimizers import Adam, SGD\n","from keras.regularizers import l1, l2\n","\n","from sklearn.cluster import KMeans\n","from sklearn.metrics import silhouette_score\n","from sklearn.metrics import precision_score, recall_score, precision_recall_curve\n","from sklearn.metrics import confusion_matrix\n","from sklearn.metrics import plot_confusion_matrix\n","\n","\n","gdrive_path = current_path\n","\n","num_classes = 2\n","\n","def FER_Model(input_shape=(row, col, 3)):\n","    # first input model\n","    visible = layers.Input(shape=input_shape, name='input')\n","    \n","    net = layers.Conv2D(32, kernel_size=3, padding='same', kernel_initializer='he_normal')(visible)\n","    # net = layers.Conv2D(256, kernel_size=3, padding='same', kernel_initializer='he_normal')(visible)\n","    # net = layers.BatchNormalization()(net)\n","    net = layers.LeakyReLU()(net)\n","\n","    net = layers.Conv2D(64, kernel_size=3, padding='same', kernel_initializer='he_normal')(net)\n","    # net = layers.Conv2D(128, kernel_size=3, padding='same', kernel_initializer='he_normal')(net)\n","    # net = layers.BatchNormalization()(net)\n","    # net = layers.Activation('relu')(net)\n","    net = layers.LeakyReLU()(net)\n","    # net = layers.MaxPool2D(pool_size=2)(net)\n","    # net = layers.AveragePooling2D(padding='same')(net)\n","\n","    shortcut_1 = net\n","\n","    # net = layers.Conv2D(64, kernel_size=3, padding='same', kernel_initializer='he_normal')(net)\n","    net = layers.Conv2D(128, kernel_size=3, padding='same', kernel_initializer='he_normal')(net)\n","    net = layers.LeakyReLU()(net)\n","\n","    net = layers.Conv2D(256, kernel_size=3, padding='same', kernel_initializer='he_normal')(net)\n","    # net = layers.BatchNormalization()(net)\n","    # net = layers.Activation('relu')(net)\n","    net = layers.LeakyReLU()(net)\n","    # net = layers.MaxPool2D(pool_size=2)(net)\n","\n","    shortcut_2 = net\n","\n","#     net = layers.Conv2D(256, kernel_size=3, padding='same')(net)\n","#     # net = layers.Activation('relu')(net)\n","#     net = layers.LeakyReLU()(net)\n","#     net = layers.MaxPool2D(pool_size=2)(net)\n","\n","#     shortcut_3 = net\n","\n","#     net = layers.Conv2D(128, kernel_size=1, padding='same')(net)\n","#     # net = layers.Activation('relu')(net)\n","#     net = layers.LeakyReLU()(net)\n","#     net = layers.MaxPool2D(pool_size=2)(net)\n","\n","    net = layers.Flatten()(net)\n","    net = layers.Dense(128)(net)\n","    net = layers.LeakyReLU()(net)\n","\n","    net = layers.Dense(64)(net)\n","    net = layers.LeakyReLU()(net)\n","\n","    net = layers.Dense(num_classes, activation='softmax')(net)\n","\n","    # create model \n","    model = Model(inputs=visible, outputs=net)\n","    # summary layers\n","    # print(model.summary())\n","    \n","    return model"],"execution_count":8,"outputs":[{"output_type":"stream","text":["TensorFlow 1.x selected.\n"],"name":"stdout"},{"output_type":"stream","text":["Using TensorFlow backend.\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"zscZynIgMbAq","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1619247932188,"user_tz":-540,"elapsed":4374,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"}},"outputId":"f800199b-a28e-405a-88e7-f47ee72281a7"},"source":["print(keras.__version__)\n","print(tf.__version__)"],"execution_count":9,"outputs":[{"output_type":"stream","text":["2.3.1\n","1.15.2\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"fWUEyjzF21cJ"},"source":["### **Data Split**"]},{"cell_type":"code","metadata":{"scrolled":false,"id":"2iYLNSeSEp7p","colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"status":"ok","timestamp":1619247933301,"user_tz":-540,"elapsed":4370,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"}},"outputId":"be3e7f61-2252-4004-d7f2-546817813953"},"source":["from sklearn.model_selection import train_test_split\n","from keras.utils import np_utils\n","from keras.preprocessing.image import ImageDataGenerator \n","from sklearn.utils import class_weight\n","# import cv2\n","\n","\n","_, row, col, _ = x_train.shape\n","\n","#         pr label   #\n","# y_train = np.where(pr_train > 1, 1, 0)\n","# y_test = np.where(pr_test > 1, 1, 0)\n","# y_val = np.where(pr_val > 1, 1, 0)\n","\n","\n","seed = 1\n","random_state = 20\n","np.random.seed(seed)\n","# tf.random.set_seed(seed)\n","\n","#         up label      #\n","# y_train = np.where(ud_train > 1, 1, 0)\n","# y_test = np.where(ud_test > 1, 1, 0)\n","# y_val = np.where(ud_val > 1, 1, 0)\n","\n","print('pr_train[:5] :', pr_train[:5])\n","# print('ud_train[:5] :', ud_train[:5])\n","print('y_train[:5] :', y_train[:5])\n","print('y_train.dtype :', y_train.dtype)\n","\n","print('x_train.shape :', x_train.shape)\n","print('x_test.shape :', x_test.shape)\n","print('x_val.shape :', x_val.shape)\n","print('y_train.shape :', y_train.shape)\n","print('y_test.shape :', y_test.shape)\n","print('y_val.shape :', y_val.shape)\n","\n","def class_ratio(in_list):\n","\n","  return in_list / in_list[1]\n","\n","print('np.unique(y_train, return_counts=True :', np.unique(y_train, return_counts=True), class_ratio(np.unique(y_train, return_counts=True)[1]))\n","print('np.unique(y_val, return_counts=True :', np.unique(y_val, return_counts=True), class_ratio(np.unique(y_val, return_counts=True)[1]))\n","print('np.unique(y_test, return_counts=True :', np.unique(y_test, return_counts=True), class_ratio(np.unique(y_test, return_counts=True)[1]))\n","\n","label = y_train.reshape(-1, )\n","class_weights = class_weight.compute_class_weight('balanced', \n","                                                    classes=np.unique(label),\n","                                                    y=label)\n","class_weights = dict(enumerate(class_weights))\n","print('class_weights :', class_weights)\n","\n","# sample_weight = np.ones(shape=(len(y_train),))\n","# sample_weight[(y_train == 1).reshape(-1,)] = 1.5\n","# print('sample_weight[:20] :', sample_weight[:20])\n","\n","\n","print('np.isnan(np.sum(x_train)) :', np.isnan(np.sum(x_train)))\n","print('np.isnan(np.sum(x_val)) :', np.isnan(np.sum(x_val)))\n","print('np.isnan(np.sum(x_test)) :', np.isnan(np.sum(x_test)))\n","\n","print('np.isnan(np.sum(y_train)) :', np.isnan(np.sum(y_train)))\n","print('np.isnan(np.sum(y_val)) :', np.isnan(np.sum(y_val)))\n","print('np.isnan(np.sum(y_test)) :', np.isnan(np.sum(y_test)))\n","\n","y_train_ohe = np_utils.to_categorical(y_train, num_classes)\n","y_val_ohe = np_utils.to_categorical(y_val, num_classes)\n","y_test_ohe = np_utils.to_categorical(y_test, num_classes)\n","print('y_train_ohe.shape :', y_train_ohe.shape)\n","print('y_val_ohe.shape :', y_val_ohe.shape)\n","print('y_test_ohe.shape :', y_test_ohe.shape)\n","\n","datagen = ImageDataGenerator( \n","    rotation_range = 45,\n","    # zoom_range = 0.5,\n","    # shear_range = 0.5,\n","    # horizontal_flip = True,\n","    # vertical_flip = True,\n","    # width_shift_range=0.5,\n","    # height_shift_range=0.5,\n","    # fill_mode = 'nearest'\n","    )\n","\n","valgen = ImageDataGenerator( \n","    )\n","\n","datagen.fit(x_train)\n","valgen.fit(x_val)\n","\n","batch_size = 16\n","\n","for x_batch, _ in datagen.flow(x_train, y_train_ohe, batch_size=9):\n","\n","    plt.suptitle(\"train x_batch\")\n","\n","    for i in range(0, 9): \n","        plt.subplot(330 + 1 + i) \n","        # resized = cv2.resize(x_batch[i].reshape(row, col), (row * 2, col * 10))\n","        # cmapped = plt.cm.Set1(resized)\n","        # plt.imshow(cmapped)\n","        # plt.imshow(x_batch[i].reshape(row, col))\n","        plt.imshow(x_batch[i])\n","        plt.axis('off') \n","    plt.show() \n","    break\n","\n","for x_batch, _ in valgen.flow(x_val, y_val_ohe, batch_size=9):\n","\n","    plt.suptitle(\"val x_batch\")\n","\n","    for i in range(0, 9): \n","        plt.subplot(330 + 1 + i) \n","        # resized = cv2.resize(x_batch[i].reshape(row, col), (row * 2, col * 10))\n","        # cmapped = plt.cm.Set1(resized)\n","        # plt.imshow(cmapped)\n","        # plt.imshow(x_batch[i].reshape(row, col))\n","        plt.imshow(x_batch[i])\n","        plt.axis('off') \n","    plt.show() \n","    break\n","    \n","train_flow = datagen.flow(x_train, y_train_ohe, batch_size=batch_size) \n","val_flow = valgen.flow(x_val, y_val_ohe, batch_size=batch_size) \n","# break\n","\n"],"execution_count":10,"outputs":[{"output_type":"stream","text":["pr_train[:5] : [[1.0415882 ]\n"," [0.943383  ]\n"," [0.95458716]\n"," [1.0877354 ]\n"," [0.97385186]]\n","y_train[:5] : [[1]\n"," [0]\n"," [0]\n"," [1]\n"," [0]]\n","y_train.dtype : int64\n","x_train.shape : (5211, 90, 12, 3)\n","x_test.shape : (1353, 90, 12, 3)\n","x_val.shape : (2234, 90, 12, 3)\n","y_train.shape : (5211, 1)\n","y_test.shape : (1353, 1)\n","y_val.shape : (2234, 1)\n","np.unique(y_train, return_counts=True : (array([0, 1]), array([2938, 2273])) [1.29256489 1.        ]\n","np.unique(y_val, return_counts=True : (array([0, 1]), array([1241,  993])) [1.24974824 1.        ]\n","np.unique(y_test, return_counts=True : (array([0, 1]), array([726, 627])) [1.15789474 1.        ]\n","class_weights : {0: 0.8868277739959156, 1: 1.1462824461064671}\n","np.isnan(np.sum(x_train)) : False\n","np.isnan(np.sum(x_val)) : False\n","np.isnan(np.sum(x_test)) : False\n","np.isnan(np.sum(y_train)) : False\n","np.isnan(np.sum(y_val)) : False\n","np.isnan(np.sum(y_test)) : False\n","y_train_ohe.shape : (5211, 2)\n","y_val_ohe.shape : (2234, 2)\n","y_test_ohe.shape : (1353, 2)\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 9 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 9 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"s-W6LL5c2VN2"},"source":["### **Training**"]},{"cell_type":"code","metadata":{"id":"EkVg1hVI2TNP","colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"status":"error","timestamp":1619252063347,"user_tz":-540,"elapsed":4130678,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"}},"outputId":"e9e0ee9f-d5c3-4e2c-a231-480366780fe8"},"source":["(_, row, col, _) = x_train.shape\n","  \n","from keras.callbacks import ModelCheckpoint, EarlyStopping, TensorBoard\n","\n","ckpt_path = current_path + 'ckpt/'\n","board_path = current_path + 'graph/'\n","# model_name = 'classifier_%s_close_updown_pr_theta_shuffle_without_back_03.h5' % period\n","\n","# model = keras.models.load_model(ckpt_path + model_name)\n","\n","model_name = 'classifier_%s_close_updown_pr_theta_train_2prevdata.h5' % period\n","\n","model = FER_Model(input_shape=(row, col, 3))\n","opt = Adam(lr=0.00001, decay=0.000005)\n","model.compile(loss='categorical_crossentropy', optimizer=opt, metrics=['accuracy'])\n","\n","checkpoint = ModelCheckpoint(ckpt_path + model_name, monitor='val_loss', verbose=1, save_best_only=True, mode='auto')\n","checkpoint2 = TensorBoard(log_dir=board_path,\n","                          histogram_freq=0,\n","                          write_graph=True,\n","                          write_images=True)\n","checkpoint3 = EarlyStopping(monitor='val_loss', patience=40)\n","# callbacks_list = [checkpoint, checkpoint2, checkpoint3]\n","callbacks_list = [checkpoint, checkpoint2]\n","\n","# keras.callbacks.Callback 로 부터 log 를 받아와 history log 를 작성할 수 있다.\n","\n","# we iterate 200 times over the entire training set\n","num_epochs = 1000\n","history = model.fit_generator(train_flow, \n","                    steps_per_epoch=len(x_train) / batch_size, \n","                    epochs=num_epochs,  \n","                    verbose=2,  \n","                    callbacks=callbacks_list,\n","                    class_weight=class_weights,\n","                    validation_data=val_flow,  \n","                    validation_steps=len(x_val) / batch_size,\n","                    shuffle=False)"],"execution_count":11,"outputs":[{"output_type":"stream","text":["WARNING:tensorflow:From /tensorflow-1.15.2/python3.7/tensorflow_core/python/ops/resource_variable_ops.py:1630: calling BaseResourceVariable.__init__ (from tensorflow.python.ops.resource_variable_ops) with constraint is deprecated and will be removed in a future version.\n","Instructions for updating:\n","If using Keras pass *_constraint arguments to layers.\n","WARNING:tensorflow:From /tensorflow-1.15.2/python3.7/keras/backend/tensorflow_backend.py:422: The name tf.global_variables is deprecated. Please use tf.compat.v1.global_variables instead.\n","\n","WARNING:tensorflow:From /tensorflow-1.15.2/python3.7/keras/callbacks/tensorboard_v1.py:200: The name tf.summary.merge_all is deprecated. Please use tf.compat.v1.summary.merge_all instead.\n","\n","WARNING:tensorflow:From /tensorflow-1.15.2/python3.7/keras/callbacks/tensorboard_v1.py:203: The name tf.summary.FileWriter is deprecated. Please use tf.compat.v1.summary.FileWriter instead.\n","\n","Epoch 1/1000\n"," - 9s - loss: 0.7314 - accuracy: 0.4807 - val_loss: 0.6830 - val_accuracy: 0.4669\n","\n","Epoch 00001: val_loss improved from inf to 0.68298, saving model to /content/drive/My Drive/Colab Notebooks/Project_Stock/ckpt/classifier_45_close_updown_pr_theta_train_2prevdata.h5\n","WARNING:tensorflow:From /tensorflow-1.15.2/python3.7/keras/callbacks/tensorboard_v1.py:343: The name tf.Summary is deprecated. Please use tf.compat.v1.Summary instead.\n","\n","Epoch 2/1000\n"," - 5s - loss: 0.7058 - accuracy: 0.5051 - val_loss: 0.7832 - val_accuracy: 0.5416\n","\n","Epoch 00002: val_loss did not improve from 0.68298\n","Epoch 3/1000\n"," - 5s - loss: 0.7018 - accuracy: 0.5089 - val_loss: 0.8443 - val_accuracy: 0.5492\n","\n","Epoch 00003: val_loss did not improve from 0.68298\n","Epoch 4/1000\n"," - 5s - loss: 0.7009 - accuracy: 0.5128 - val_loss: 0.6779 - val_accuracy: 0.5148\n","\n","Epoch 00004: val_loss improved from 0.68298 to 0.67792, saving model to /content/drive/My Drive/Colab Notebooks/Project_Stock/ckpt/classifier_45_close_updown_pr_theta_train_2prevdata.h5\n","Epoch 5/1000\n"," - 5s - loss: 0.6978 - accuracy: 0.5074 - val_loss: 0.6549 - val_accuracy: 0.5412\n","\n","Epoch 00005: val_loss improved from 0.67792 to 0.65488, saving model to /content/drive/My Drive/Colab Notebooks/Project_Stock/ckpt/classifier_45_close_updown_pr_theta_train_2prevdata.h5\n","Epoch 6/1000\n"," - 5s - loss: 0.6960 - accuracy: 0.5158 - val_loss: 0.7455 - val_accuracy: 0.5345\n","\n","Epoch 00006: val_loss did not improve from 0.65488\n","Epoch 7/1000\n"," - 5s - loss: 0.6964 - accuracy: 0.5120 - val_loss: 0.6629 - val_accuracy: 0.5483\n","\n","Epoch 00007: val_loss did not improve from 0.65488\n","Epoch 8/1000\n"," - 5s - loss: 0.6967 - accuracy: 0.5162 - val_loss: 0.6617 - val_accuracy: 0.5452\n","\n","Epoch 00008: val_loss did not improve from 0.65488\n","Epoch 9/1000\n"," - 5s - loss: 0.6970 - accuracy: 0.5087 - val_loss: 0.6655 - val_accuracy: 0.5282\n","\n","Epoch 00009: val_loss did not improve from 0.65488\n","Epoch 10/1000\n"," - 5s - loss: 0.6936 - accuracy: 0.5270 - val_loss: 0.6986 - val_accuracy: 0.5551\n","\n","Epoch 00010: val_loss did not improve from 0.65488\n","Epoch 11/1000\n"," - 5s - loss: 0.6936 - accuracy: 0.5197 - val_loss: 0.6638 - val_accuracy: 0.5273\n","\n","Epoch 00011: val_loss did not improve from 0.65488\n","Epoch 12/1000\n"," - 5s - loss: 0.6920 - accuracy: 0.5341 - val_loss: 0.7120 - val_accuracy: 0.4951\n","\n","Epoch 00012: val_loss did not improve from 0.65488\n","Epoch 13/1000\n"," - 5s - loss: 0.6940 - accuracy: 0.5258 - val_loss: 0.6795 - val_accuracy: 0.4785\n","\n","Epoch 00013: val_loss did not improve from 0.65488\n","Epoch 14/1000\n"," - 5s - loss: 0.6926 - accuracy: 0.5187 - val_loss: 0.6873 - val_accuracy: 0.5524\n","\n","Epoch 00014: val_loss did not improve from 0.65488\n","Epoch 15/1000\n"," - 5s - loss: 0.6927 - accuracy: 0.5323 - val_loss: 0.5773 - val_accuracy: 0.5461\n","\n","Epoch 00015: val_loss improved from 0.65488 to 0.57731, saving model to /content/drive/My Drive/Colab Notebooks/Project_Stock/ckpt/classifier_45_close_updown_pr_theta_train_2prevdata.h5\n","Epoch 16/1000\n"," - 5s - loss: 0.6911 - accuracy: 0.5304 - val_loss: 0.6838 - val_accuracy: 0.4875\n","\n","Epoch 00016: val_loss did not improve from 0.57731\n","Epoch 17/1000\n"," - 5s - loss: 0.6928 - accuracy: 0.5254 - val_loss: 0.7358 - val_accuracy: 0.5000\n","\n","Epoch 00017: val_loss did not improve from 0.57731\n","Epoch 18/1000\n"," - 5s - loss: 0.6923 - accuracy: 0.5283 - val_loss: 0.6619 - val_accuracy: 0.5179\n","\n","Epoch 00018: val_loss did not improve from 0.57731\n","Epoch 19/1000\n"," - 5s - loss: 0.6913 - accuracy: 0.5235 - val_loss: 0.7083 - val_accuracy: 0.4969\n","\n","Epoch 00019: val_loss did not improve from 0.57731\n","Epoch 20/1000\n"," - 5s - loss: 0.6894 - accuracy: 0.5346 - val_loss: 0.7083 - val_accuracy: 0.4776\n","\n","Epoch 00020: val_loss did not improve from 0.57731\n","Epoch 21/1000\n"," - 5s - loss: 0.6899 - accuracy: 0.5367 - val_loss: 0.7301 - val_accuracy: 0.4597\n","\n","Epoch 00021: val_loss did not improve from 0.57731\n","Epoch 22/1000\n"," - 5s - loss: 0.6901 - accuracy: 0.5287 - val_loss: 0.6682 - val_accuracy: 0.4937\n","\n","Epoch 00022: val_loss did not improve from 0.57731\n","Epoch 23/1000\n"," - 5s - loss: 0.6887 - accuracy: 0.5356 - val_loss: 0.7892 - val_accuracy: 0.5157\n","\n","Epoch 00023: val_loss did not improve from 0.57731\n","Epoch 24/1000\n"," - 5s - loss: 0.6884 - accuracy: 0.5438 - val_loss: 0.6857 - val_accuracy: 0.5264\n","\n","Epoch 00024: val_loss did not improve from 0.57731\n","Epoch 25/1000\n"," - 5s - loss: 0.6894 - accuracy: 0.5323 - val_loss: 0.7385 - val_accuracy: 0.5157\n","\n","Epoch 00025: val_loss did not improve from 0.57731\n","Epoch 26/1000\n"," - 5s - loss: 0.6855 - accuracy: 0.5450 - val_loss: 0.7177 - val_accuracy: 0.4884\n","\n","Epoch 00026: val_loss did not improve from 0.57731\n","Epoch 27/1000\n"," - 5s - loss: 0.6882 - accuracy: 0.5279 - val_loss: 0.7852 - val_accuracy: 0.4933\n","\n","Epoch 00027: val_loss did not improve from 0.57731\n","Epoch 28/1000\n"," - 5s - loss: 0.6838 - accuracy: 0.5548 - val_loss: 0.7159 - val_accuracy: 0.5076\n","\n","Epoch 00028: val_loss did not improve from 0.57731\n","Epoch 29/1000\n"," - 5s - loss: 0.6851 - accuracy: 0.5500 - val_loss: 0.6847 - val_accuracy: 0.5412\n","\n","Epoch 00029: val_loss did not improve from 0.57731\n","Epoch 30/1000\n"," - 5s - loss: 0.6869 - accuracy: 0.5471 - val_loss: 0.6645 - val_accuracy: 0.5107\n","\n","Epoch 00030: val_loss did not improve from 0.57731\n","Epoch 31/1000\n"," - 5s - loss: 0.6828 - accuracy: 0.5584 - val_loss: 0.6830 - val_accuracy: 0.5345\n","\n","Epoch 00031: val_loss did not improve from 0.57731\n","Epoch 32/1000\n"," - 5s - loss: 0.6795 - accuracy: 0.5652 - val_loss: 0.7235 - val_accuracy: 0.5246\n","\n","Epoch 00032: val_loss did not improve from 0.57731\n","Epoch 33/1000\n"," - 5s - loss: 0.6828 - accuracy: 0.5621 - val_loss: 0.6821 - val_accuracy: 0.4973\n","\n","Epoch 00033: val_loss did not improve from 0.57731\n","Epoch 34/1000\n"," - 5s - loss: 0.6801 - accuracy: 0.5542 - val_loss: 0.8138 - val_accuracy: 0.5354\n","\n","Epoch 00034: val_loss did not improve from 0.57731\n","Epoch 35/1000\n"," - 5s - loss: 0.6805 - accuracy: 0.5686 - val_loss: 0.7461 - val_accuracy: 0.5116\n","\n","Epoch 00035: val_loss did not improve from 0.57731\n","Epoch 36/1000\n"," - 5s - loss: 0.6796 - accuracy: 0.5592 - val_loss: 0.7157 - val_accuracy: 0.5210\n","\n","Epoch 00036: val_loss did not improve from 0.57731\n","Epoch 37/1000\n"," - 5s - loss: 0.6776 - accuracy: 0.5673 - val_loss: 0.8458 - val_accuracy: 0.4879\n","\n","Epoch 00037: val_loss did not improve from 0.57731\n","Epoch 38/1000\n"," - 5s - loss: 0.6756 - accuracy: 0.5711 - val_loss: 0.7396 - val_accuracy: 0.5134\n","\n","Epoch 00038: val_loss did not improve from 0.57731\n","Epoch 39/1000\n"," - 5s - loss: 0.6746 - accuracy: 0.5761 - val_loss: 0.6418 - val_accuracy: 0.4888\n","\n","Epoch 00039: val_loss did not improve from 0.57731\n","Epoch 40/1000\n"," - 5s - loss: 0.6764 - accuracy: 0.5770 - val_loss: 0.6287 - val_accuracy: 0.4830\n","\n","Epoch 00040: val_loss did not improve from 0.57731\n","Epoch 41/1000\n"," - 5s - loss: 0.6717 - accuracy: 0.5778 - val_loss: 0.8218 - val_accuracy: 0.5067\n","\n","Epoch 00041: val_loss did not improve from 0.57731\n","Epoch 42/1000\n"," - 5s - loss: 0.6715 - accuracy: 0.5738 - val_loss: 0.7702 - val_accuracy: 0.4897\n","\n","Epoch 00042: val_loss did not improve from 0.57731\n","Epoch 43/1000\n"," - 5s - loss: 0.6673 - accuracy: 0.5903 - val_loss: 0.5874 - val_accuracy: 0.5157\n","\n","Epoch 00043: val_loss did not improve from 0.57731\n","Epoch 44/1000\n"," - 5s - loss: 0.6694 - accuracy: 0.5797 - val_loss: 0.7858 - val_accuracy: 0.5054\n","\n","Epoch 00044: val_loss did not improve from 0.57731\n","Epoch 45/1000\n"," - 5s - loss: 0.6675 - accuracy: 0.5907 - val_loss: 0.6392 - val_accuracy: 0.4906\n","\n","Epoch 00045: val_loss did not improve from 0.57731\n","Epoch 46/1000\n"," - 5s - loss: 0.6648 - accuracy: 0.5878 - val_loss: 0.7057 - val_accuracy: 0.5130\n","\n","Epoch 00046: val_loss did not improve from 0.57731\n","Epoch 47/1000\n"," - 5s - loss: 0.6638 - accuracy: 0.5972 - val_loss: 0.7585 - val_accuracy: 0.5206\n","\n","Epoch 00047: val_loss did not improve from 0.57731\n","Epoch 48/1000\n"," - 5s - loss: 0.6639 - accuracy: 0.5878 - val_loss: 0.6933 - val_accuracy: 0.4973\n","\n","Epoch 00048: val_loss did not improve from 0.57731\n","Epoch 49/1000\n"," - 5s - loss: 0.6603 - accuracy: 0.5945 - val_loss: 0.5539 - val_accuracy: 0.5269\n","\n","Epoch 00049: val_loss improved from 0.57731 to 0.55388, saving model to /content/drive/My Drive/Colab Notebooks/Project_Stock/ckpt/classifier_45_close_updown_pr_theta_train_2prevdata.h5\n","Epoch 50/1000\n"," - 5s - loss: 0.6611 - accuracy: 0.5891 - val_loss: 0.7115 - val_accuracy: 0.5085\n","\n","Epoch 00050: val_loss did not improve from 0.55388\n","Epoch 51/1000\n"," - 5s - loss: 0.6586 - accuracy: 0.6051 - val_loss: 0.6511 - val_accuracy: 0.5215\n","\n","Epoch 00051: val_loss did not improve from 0.55388\n","Epoch 52/1000\n"," - 5s - loss: 0.6508 - accuracy: 0.6110 - val_loss: 0.5290 - val_accuracy: 0.5260\n","\n","Epoch 00052: val_loss improved from 0.55388 to 0.52904, saving model to /content/drive/My Drive/Colab Notebooks/Project_Stock/ckpt/classifier_45_close_updown_pr_theta_train_2prevdata.h5\n","Epoch 53/1000\n"," - 5s - loss: 0.6533 - accuracy: 0.6066 - val_loss: 0.8141 - val_accuracy: 0.5161\n","\n","Epoch 00053: val_loss did not improve from 0.52904\n","Epoch 54/1000\n"," - 5s - loss: 0.6488 - accuracy: 0.6124 - val_loss: 0.6556 - val_accuracy: 0.5134\n","\n","Epoch 00054: val_loss did not improve from 0.52904\n","Epoch 55/1000\n"," - 5s - loss: 0.6526 - accuracy: 0.6003 - val_loss: 0.7548 - val_accuracy: 0.5112\n","\n","Epoch 00055: val_loss did not improve from 0.52904\n","Epoch 56/1000\n"," - 5s - loss: 0.6475 - accuracy: 0.6114 - val_loss: 0.8248 - val_accuracy: 0.5260\n","\n","Epoch 00056: val_loss did not improve from 0.52904\n","Epoch 57/1000\n"," - 5s - loss: 0.6478 - accuracy: 0.6126 - val_loss: 0.6012 - val_accuracy: 0.5072\n","\n","Epoch 00057: val_loss did not improve from 0.52904\n","Epoch 58/1000\n"," - 5s - loss: 0.6424 - accuracy: 0.6172 - val_loss: 0.7153 - val_accuracy: 0.5085\n","\n","Epoch 00058: val_loss did not improve from 0.52904\n","Epoch 59/1000\n"," - 5s - loss: 0.6498 - accuracy: 0.6037 - val_loss: 0.7468 - val_accuracy: 0.5045\n","\n","Epoch 00059: val_loss did not improve from 0.52904\n","Epoch 60/1000\n"," - 5s - loss: 0.6416 - accuracy: 0.6193 - val_loss: 0.6506 - val_accuracy: 0.5291\n","\n","Epoch 00060: val_loss did not improve from 0.52904\n","Epoch 61/1000\n"," - 5s - loss: 0.6343 - accuracy: 0.6388 - val_loss: 0.7889 - val_accuracy: 0.5251\n","\n","Epoch 00061: val_loss did not improve from 0.52904\n","Epoch 62/1000\n"," - 5s - loss: 0.6342 - accuracy: 0.6317 - val_loss: 0.6590 - val_accuracy: 0.5246\n","\n","Epoch 00062: val_loss did not improve from 0.52904\n","Epoch 63/1000\n"," - 5s - loss: 0.6302 - accuracy: 0.6402 - val_loss: 0.7086 - val_accuracy: 0.5206\n","\n","Epoch 00063: val_loss did not improve from 0.52904\n","Epoch 64/1000\n"," - 5s - loss: 0.6313 - accuracy: 0.6310 - val_loss: 0.7254 - val_accuracy: 0.5242\n","\n","Epoch 00064: val_loss did not improve from 0.52904\n","Epoch 65/1000\n"," - 5s - loss: 0.6280 - accuracy: 0.6394 - val_loss: 0.6997 - val_accuracy: 0.5349\n","\n","Epoch 00065: val_loss did not improve from 0.52904\n","Epoch 66/1000\n"," - 5s - loss: 0.6286 - accuracy: 0.6306 - val_loss: 0.8247 - val_accuracy: 0.5219\n","\n","Epoch 00066: val_loss did not improve from 0.52904\n","Epoch 67/1000\n"," - 5s - loss: 0.6262 - accuracy: 0.6450 - val_loss: 0.9698 - val_accuracy: 0.5228\n","\n","Epoch 00067: val_loss did not improve from 0.52904\n","Epoch 68/1000\n"," - 5s - loss: 0.6274 - accuracy: 0.6398 - val_loss: 0.6549 - val_accuracy: 0.5152\n","\n","Epoch 00068: val_loss did not improve from 0.52904\n","Epoch 69/1000\n"," - 5s - loss: 0.6256 - accuracy: 0.6427 - val_loss: 0.8066 - val_accuracy: 0.5233\n","\n","Epoch 00069: val_loss did not improve from 0.52904\n","Epoch 70/1000\n"," - 5s - loss: 0.6161 - accuracy: 0.6488 - val_loss: 0.5659 - val_accuracy: 0.5072\n","\n","Epoch 00070: val_loss did not improve from 0.52904\n","Epoch 71/1000\n"," - 5s - loss: 0.6182 - accuracy: 0.6523 - val_loss: 0.7370 - val_accuracy: 0.5076\n","\n","Epoch 00071: val_loss did not improve from 0.52904\n","Epoch 72/1000\n"," - 5s - loss: 0.6132 - accuracy: 0.6567 - val_loss: 0.7658 - val_accuracy: 0.5224\n","\n","Epoch 00072: val_loss did not improve from 0.52904\n","Epoch 73/1000\n"," - 5s - loss: 0.6126 - accuracy: 0.6607 - val_loss: 0.7563 - val_accuracy: 0.5157\n","\n","Epoch 00073: val_loss did not improve from 0.52904\n","Epoch 74/1000\n"," - 5s - loss: 0.6062 - accuracy: 0.6699 - val_loss: 1.0025 - val_accuracy: 0.5004\n","\n","Epoch 00074: val_loss did not improve from 0.52904\n","Epoch 75/1000\n"," - 5s - loss: 0.6060 - accuracy: 0.6623 - val_loss: 0.8896 - val_accuracy: 0.5233\n","\n","Epoch 00075: val_loss did not improve from 0.52904\n","Epoch 76/1000\n"," - 5s - loss: 0.6050 - accuracy: 0.6617 - val_loss: 0.7582 - val_accuracy: 0.5045\n","\n","Epoch 00076: val_loss did not improve from 0.52904\n","Epoch 77/1000\n"," - 5s - loss: 0.6002 - accuracy: 0.6743 - val_loss: 0.8993 - val_accuracy: 0.5058\n","\n","Epoch 00077: val_loss did not improve from 0.52904\n","Epoch 78/1000\n"," - 5s - loss: 0.6053 - accuracy: 0.6674 - val_loss: 0.9270 - val_accuracy: 0.5130\n","\n","Epoch 00078: val_loss did not improve from 0.52904\n","Epoch 79/1000\n"," - 5s - loss: 0.6018 - accuracy: 0.6734 - val_loss: 0.6392 - val_accuracy: 0.5197\n","\n","Epoch 00079: val_loss did not improve from 0.52904\n","Epoch 80/1000\n"," - 5s - loss: 0.5922 - accuracy: 0.6791 - val_loss: 0.8608 - val_accuracy: 0.5081\n","\n","Epoch 00080: val_loss did not improve from 0.52904\n","Epoch 81/1000\n"," - 5s - loss: 0.5913 - accuracy: 0.6824 - val_loss: 0.8556 - val_accuracy: 0.5103\n","\n","Epoch 00081: val_loss did not improve from 0.52904\n","Epoch 82/1000\n"," - 5s - loss: 0.5903 - accuracy: 0.6717 - val_loss: 0.7548 - val_accuracy: 0.5112\n","\n","Epoch 00082: val_loss did not improve from 0.52904\n","Epoch 83/1000\n"," - 5s - loss: 0.5865 - accuracy: 0.6789 - val_loss: 0.7700 - val_accuracy: 0.5139\n","\n","Epoch 00083: val_loss did not improve from 0.52904\n","Epoch 84/1000\n"," - 5s - loss: 0.5881 - accuracy: 0.6839 - val_loss: 0.7332 - val_accuracy: 0.5090\n","\n","Epoch 00084: val_loss did not improve from 0.52904\n","Epoch 85/1000\n"," - 5s - loss: 0.5892 - accuracy: 0.6893 - val_loss: 0.7323 - val_accuracy: 0.5054\n","\n","Epoch 00085: val_loss did not improve from 0.52904\n","Epoch 86/1000\n"," - 5s - loss: 0.5859 - accuracy: 0.6784 - val_loss: 0.7665 - val_accuracy: 0.5152\n","\n","Epoch 00086: val_loss did not improve from 0.52904\n","Epoch 87/1000\n"," - 5s - loss: 0.5799 - accuracy: 0.6891 - val_loss: 0.6131 - val_accuracy: 0.5161\n","\n","Epoch 00087: val_loss did not improve from 0.52904\n","Epoch 88/1000\n"," - 5s - loss: 0.5750 - accuracy: 0.6972 - val_loss: 0.5122 - val_accuracy: 0.5175\n","\n","Epoch 00088: val_loss improved from 0.52904 to 0.51219, saving model to /content/drive/My Drive/Colab Notebooks/Project_Stock/ckpt/classifier_45_close_updown_pr_theta_train_2prevdata.h5\n","Epoch 89/1000\n"," - 5s - loss: 0.5805 - accuracy: 0.6912 - val_loss: 0.7412 - val_accuracy: 0.5197\n","\n","Epoch 00089: val_loss did not improve from 0.51219\n","Epoch 90/1000\n"," - 5s - loss: 0.5621 - accuracy: 0.7106 - val_loss: 0.8412 - val_accuracy: 0.5085\n","\n","Epoch 00090: val_loss did not improve from 0.51219\n","Epoch 91/1000\n"," - 5s - loss: 0.5729 - accuracy: 0.6951 - val_loss: 0.7455 - val_accuracy: 0.5130\n","\n","Epoch 00091: val_loss did not improve from 0.51219\n","Epoch 92/1000\n"," - 5s - loss: 0.5672 - accuracy: 0.7079 - val_loss: 1.0576 - val_accuracy: 0.5161\n","\n","Epoch 00092: val_loss did not improve from 0.51219\n","Epoch 93/1000\n"," - 5s - loss: 0.5684 - accuracy: 0.6993 - val_loss: 0.8047 - val_accuracy: 0.5192\n","\n","Epoch 00093: val_loss did not improve from 0.51219\n","Epoch 94/1000\n"," - 5s - loss: 0.5649 - accuracy: 0.7024 - val_loss: 0.9112 - val_accuracy: 0.5107\n","\n","Epoch 00094: val_loss did not improve from 0.51219\n","Epoch 95/1000\n"," - 5s - loss: 0.5665 - accuracy: 0.7006 - val_loss: 0.6611 - val_accuracy: 0.5246\n","\n","Epoch 00095: val_loss did not improve from 0.51219\n","Epoch 96/1000\n"," - 5s - loss: 0.5590 - accuracy: 0.7039 - val_loss: 0.9089 - val_accuracy: 0.5125\n","\n","Epoch 00096: val_loss did not improve from 0.51219\n","Epoch 97/1000\n"," - 5s - loss: 0.5538 - accuracy: 0.7070 - val_loss: 1.3377 - val_accuracy: 0.5157\n","\n","Epoch 00097: val_loss did not improve from 0.51219\n","Epoch 98/1000\n"," - 5s - loss: 0.5517 - accuracy: 0.7054 - val_loss: 1.2593 - val_accuracy: 0.5219\n","\n","Epoch 00098: val_loss did not improve from 0.51219\n","Epoch 99/1000\n"," - 5s - loss: 0.5491 - accuracy: 0.7087 - val_loss: 0.7602 - val_accuracy: 0.5031\n","\n","Epoch 00099: val_loss did not improve from 0.51219\n","Epoch 100/1000\n"," - 5s - loss: 0.5511 - accuracy: 0.7100 - val_loss: 0.5065 - val_accuracy: 0.5170\n","\n","Epoch 00100: val_loss improved from 0.51219 to 0.50651, saving model to /content/drive/My Drive/Colab Notebooks/Project_Stock/ckpt/classifier_45_close_updown_pr_theta_train_2prevdata.h5\n","Epoch 101/1000\n"," - 5s - loss: 0.5514 - accuracy: 0.7098 - val_loss: 0.7123 - val_accuracy: 0.5201\n","\n","Epoch 00101: val_loss did not improve from 0.50651\n","Epoch 102/1000\n"," - 5s - loss: 0.5489 - accuracy: 0.7152 - val_loss: 0.8309 - val_accuracy: 0.4973\n","\n","Epoch 00102: val_loss did not improve from 0.50651\n","Epoch 103/1000\n"," - 5s - loss: 0.5454 - accuracy: 0.7198 - val_loss: 0.7173 - val_accuracy: 0.4991\n","\n","Epoch 00103: val_loss did not improve from 0.50651\n","Epoch 104/1000\n"," - 5s - loss: 0.5426 - accuracy: 0.7148 - val_loss: 0.4938 - val_accuracy: 0.5018\n","\n","Epoch 00104: val_loss improved from 0.50651 to 0.49385, saving model to /content/drive/My Drive/Colab Notebooks/Project_Stock/ckpt/classifier_45_close_updown_pr_theta_train_2prevdata.h5\n","Epoch 105/1000\n"," - 5s - loss: 0.5396 - accuracy: 0.7231 - val_loss: 0.8234 - val_accuracy: 0.4960\n","\n","Epoch 00105: val_loss did not improve from 0.49385\n","Epoch 106/1000\n"," - 5s - loss: 0.5337 - accuracy: 0.7306 - val_loss: 0.9266 - val_accuracy: 0.5009\n","\n","Epoch 00106: val_loss did not improve from 0.49385\n","Epoch 107/1000\n"," - 5s - loss: 0.5306 - accuracy: 0.7331 - val_loss: 0.7799 - val_accuracy: 0.5130\n","\n","Epoch 00107: val_loss did not improve from 0.49385\n","Epoch 108/1000\n"," - 5s - loss: 0.5286 - accuracy: 0.7334 - val_loss: 1.2223 - val_accuracy: 0.5107\n","\n","Epoch 00108: val_loss did not improve from 0.49385\n","Epoch 109/1000\n"," - 5s - loss: 0.5238 - accuracy: 0.7310 - val_loss: 0.8435 - val_accuracy: 0.4933\n","\n","Epoch 00109: val_loss did not improve from 0.49385\n","Epoch 110/1000\n"," - 5s - loss: 0.5309 - accuracy: 0.7283 - val_loss: 0.5737 - val_accuracy: 0.5103\n","\n","Epoch 00110: val_loss did not improve from 0.49385\n","Epoch 111/1000\n"," - 5s - loss: 0.5233 - accuracy: 0.7298 - val_loss: 0.8603 - val_accuracy: 0.5013\n","\n","Epoch 00111: val_loss did not improve from 0.49385\n","Epoch 112/1000\n"," - 5s - loss: 0.5191 - accuracy: 0.7384 - val_loss: 1.5448 - val_accuracy: 0.5067\n","\n","Epoch 00112: val_loss did not improve from 0.49385\n","Epoch 113/1000\n"," - 5s - loss: 0.5194 - accuracy: 0.7371 - val_loss: 1.1507 - val_accuracy: 0.4991\n","\n","Epoch 00113: val_loss did not improve from 0.49385\n","Epoch 114/1000\n"," - 5s - loss: 0.5137 - accuracy: 0.7423 - val_loss: 1.2613 - val_accuracy: 0.4969\n","\n","Epoch 00114: val_loss did not improve from 0.49385\n","Epoch 115/1000\n"," - 5s - loss: 0.5188 - accuracy: 0.7390 - val_loss: 1.0924 - val_accuracy: 0.5045\n","\n","Epoch 00115: val_loss did not improve from 0.49385\n","Epoch 116/1000\n"," - 5s - loss: 0.5055 - accuracy: 0.7471 - val_loss: 1.0908 - val_accuracy: 0.5063\n","\n","Epoch 00116: val_loss did not improve from 0.49385\n","Epoch 117/1000\n"," - 5s - loss: 0.5078 - accuracy: 0.7475 - val_loss: 0.9018 - val_accuracy: 0.4933\n","\n","Epoch 00117: val_loss did not improve from 0.49385\n","Epoch 118/1000\n"," - 5s - loss: 0.5037 - accuracy: 0.7578 - val_loss: 1.2593 - val_accuracy: 0.4982\n","\n","Epoch 00118: val_loss did not improve from 0.49385\n","Epoch 119/1000\n"," - 5s - loss: 0.5102 - accuracy: 0.7469 - val_loss: 1.0630 - val_accuracy: 0.5054\n","\n","Epoch 00119: val_loss did not improve from 0.49385\n","Epoch 120/1000\n"," - 5s - loss: 0.5046 - accuracy: 0.7465 - val_loss: 0.5978 - val_accuracy: 0.5027\n","\n","Epoch 00120: val_loss did not improve from 0.49385\n","Epoch 121/1000\n"," - 5s - loss: 0.4984 - accuracy: 0.7538 - val_loss: 1.1700 - val_accuracy: 0.5045\n","\n","Epoch 00121: val_loss did not improve from 0.49385\n","Epoch 122/1000\n"," - 5s - loss: 0.4999 - accuracy: 0.7519 - val_loss: 0.5256 - val_accuracy: 0.5081\n","\n","Epoch 00122: val_loss did not improve from 0.49385\n","Epoch 123/1000\n"," - 5s - loss: 0.4993 - accuracy: 0.7530 - val_loss: 0.7942 - val_accuracy: 0.5018\n","\n","Epoch 00123: val_loss did not improve from 0.49385\n","Epoch 124/1000\n"," - 5s - loss: 0.4918 - accuracy: 0.7490 - val_loss: 0.9409 - val_accuracy: 0.4996\n","\n","Epoch 00124: val_loss did not improve from 0.49385\n","Epoch 125/1000\n"," - 5s - loss: 0.4804 - accuracy: 0.7640 - val_loss: 0.9997 - val_accuracy: 0.4897\n","\n","Epoch 00125: val_loss did not improve from 0.49385\n","Epoch 126/1000\n"," - 5s - loss: 0.4868 - accuracy: 0.7561 - val_loss: 0.6334 - val_accuracy: 0.4969\n","\n","Epoch 00126: val_loss did not improve from 0.49385\n","Epoch 127/1000\n"," - 5s - loss: 0.4824 - accuracy: 0.7693 - val_loss: 1.2653 - val_accuracy: 0.5004\n","\n","Epoch 00127: val_loss did not improve from 0.49385\n","Epoch 128/1000\n"," - 5s - loss: 0.4878 - accuracy: 0.7605 - val_loss: 1.2025 - val_accuracy: 0.5098\n","\n","Epoch 00128: val_loss did not improve from 0.49385\n","Epoch 129/1000\n"," - 5s - loss: 0.4875 - accuracy: 0.7547 - val_loss: 0.8058 - val_accuracy: 0.4973\n","\n","Epoch 00129: val_loss did not improve from 0.49385\n","Epoch 130/1000\n"," - 5s - loss: 0.4818 - accuracy: 0.7634 - val_loss: 0.7588 - val_accuracy: 0.5013\n","\n","Epoch 00130: val_loss did not improve from 0.49385\n","Epoch 131/1000\n"," - 5s - loss: 0.4785 - accuracy: 0.7611 - val_loss: 1.1271 - val_accuracy: 0.5031\n","\n","Epoch 00131: val_loss did not improve from 0.49385\n","Epoch 132/1000\n"," - 5s - loss: 0.4734 - accuracy: 0.7755 - val_loss: 0.8689 - val_accuracy: 0.5170\n","\n","Epoch 00132: val_loss did not improve from 0.49385\n","Epoch 133/1000\n"," - 5s - loss: 0.4716 - accuracy: 0.7768 - val_loss: 1.1886 - val_accuracy: 0.5107\n","\n","Epoch 00133: val_loss did not improve from 0.49385\n","Epoch 134/1000\n"," - 5s - loss: 0.4718 - accuracy: 0.7703 - val_loss: 0.7124 - val_accuracy: 0.5009\n","\n","Epoch 00134: val_loss did not improve from 0.49385\n","Epoch 135/1000\n"," - 5s - loss: 0.4718 - accuracy: 0.7709 - val_loss: 0.5777 - val_accuracy: 0.4978\n","\n","Epoch 00135: val_loss did not improve from 0.49385\n","Epoch 136/1000\n"," - 5s - loss: 0.4619 - accuracy: 0.7743 - val_loss: 1.1435 - val_accuracy: 0.5072\n","\n","Epoch 00136: val_loss did not improve from 0.49385\n","Epoch 137/1000\n"," - 5s - loss: 0.4649 - accuracy: 0.7793 - val_loss: 1.1360 - val_accuracy: 0.5054\n","\n","Epoch 00137: val_loss did not improve from 0.49385\n","Epoch 138/1000\n"," - 5s - loss: 0.4618 - accuracy: 0.7789 - val_loss: 1.0916 - val_accuracy: 0.5125\n","\n","Epoch 00138: val_loss did not improve from 0.49385\n","Epoch 139/1000\n"," - 5s - loss: 0.4582 - accuracy: 0.7891 - val_loss: 1.2919 - val_accuracy: 0.5090\n","\n","Epoch 00139: val_loss did not improve from 0.49385\n","Epoch 140/1000\n"," - 5s - loss: 0.4553 - accuracy: 0.7814 - val_loss: 0.8921 - val_accuracy: 0.5022\n","\n","Epoch 00140: val_loss did not improve from 0.49385\n","Epoch 141/1000\n"," - 5s - loss: 0.4496 - accuracy: 0.7841 - val_loss: 0.6514 - val_accuracy: 0.5040\n","\n","Epoch 00141: val_loss did not improve from 0.49385\n","Epoch 142/1000\n"," - 5s - loss: 0.4504 - accuracy: 0.7828 - val_loss: 1.1617 - val_accuracy: 0.5206\n","\n","Epoch 00142: val_loss did not improve from 0.49385\n","Epoch 143/1000\n"," - 5s - loss: 0.4432 - accuracy: 0.7904 - val_loss: 0.8678 - val_accuracy: 0.5152\n","\n","Epoch 00143: val_loss did not improve from 0.49385\n","Epoch 144/1000\n"," - 5s - loss: 0.4491 - accuracy: 0.7845 - val_loss: 1.1351 - val_accuracy: 0.5184\n","\n","Epoch 00144: val_loss did not improve from 0.49385\n","Epoch 145/1000\n"," - 5s - loss: 0.4448 - accuracy: 0.7881 - val_loss: 0.7653 - val_accuracy: 0.5143\n","\n","Epoch 00145: val_loss did not improve from 0.49385\n","Epoch 146/1000\n"," - 5s - loss: 0.4424 - accuracy: 0.7910 - val_loss: 0.7294 - val_accuracy: 0.5103\n","\n","Epoch 00146: val_loss did not improve from 0.49385\n","Epoch 147/1000\n"," - 5s - loss: 0.4515 - accuracy: 0.7736 - val_loss: 1.2136 - val_accuracy: 0.5139\n","\n","Epoch 00147: val_loss did not improve from 0.49385\n","Epoch 148/1000\n"," - 5s - loss: 0.4319 - accuracy: 0.7960 - val_loss: 0.8921 - val_accuracy: 0.5143\n","\n","Epoch 00148: val_loss did not improve from 0.49385\n","Epoch 149/1000\n"," - 5s - loss: 0.4321 - accuracy: 0.7970 - val_loss: 1.0423 - val_accuracy: 0.5170\n","\n","Epoch 00149: val_loss did not improve from 0.49385\n","Epoch 150/1000\n"," - 5s - loss: 0.4263 - accuracy: 0.8025 - val_loss: 1.6378 - val_accuracy: 0.5197\n","\n","Epoch 00150: val_loss did not improve from 0.49385\n","Epoch 151/1000\n"," - 5s - loss: 0.4193 - accuracy: 0.8106 - val_loss: 1.6840 - val_accuracy: 0.5148\n","\n","Epoch 00151: val_loss did not improve from 0.49385\n","Epoch 152/1000\n"," - 5s - loss: 0.4221 - accuracy: 0.8010 - val_loss: 0.7362 - val_accuracy: 0.5022\n","\n","Epoch 00152: val_loss did not improve from 0.49385\n","Epoch 153/1000\n"," - 5s - loss: 0.4225 - accuracy: 0.7947 - val_loss: 1.2404 - val_accuracy: 0.5121\n","\n","Epoch 00153: val_loss did not improve from 0.49385\n","Epoch 154/1000\n"," - 5s - loss: 0.4313 - accuracy: 0.7962 - val_loss: 1.5047 - val_accuracy: 0.5139\n","\n","Epoch 00154: val_loss did not improve from 0.49385\n","Epoch 155/1000\n"," - 5s - loss: 0.4098 - accuracy: 0.8110 - val_loss: 1.1019 - val_accuracy: 0.5107\n","\n","Epoch 00155: val_loss did not improve from 0.49385\n","Epoch 156/1000\n"," - 5s - loss: 0.4131 - accuracy: 0.8110 - val_loss: 0.5724 - val_accuracy: 0.5045\n","\n","Epoch 00156: val_loss did not improve from 0.49385\n","Epoch 157/1000\n"," - 5s - loss: 0.4149 - accuracy: 0.8075 - val_loss: 0.5549 - val_accuracy: 0.5076\n","\n","Epoch 00157: val_loss did not improve from 0.49385\n","Epoch 158/1000\n"," - 5s - loss: 0.4140 - accuracy: 0.8100 - val_loss: 1.1218 - val_accuracy: 0.5112\n","\n","Epoch 00158: val_loss did not improve from 0.49385\n","Epoch 159/1000\n"," - 5s - loss: 0.4151 - accuracy: 0.8023 - val_loss: 1.7661 - val_accuracy: 0.5121\n","\n","Epoch 00159: val_loss did not improve from 0.49385\n","Epoch 160/1000\n"," - 5s - loss: 0.4133 - accuracy: 0.8066 - val_loss: 1.4869 - val_accuracy: 0.5103\n","\n","Epoch 00160: val_loss did not improve from 0.49385\n","Epoch 161/1000\n"," - 5s - loss: 0.4099 - accuracy: 0.8131 - val_loss: 1.1572 - val_accuracy: 0.5192\n","\n","Epoch 00161: val_loss did not improve from 0.49385\n","Epoch 162/1000\n"," - 5s - loss: 0.4158 - accuracy: 0.8112 - val_loss: 1.4052 - val_accuracy: 0.5072\n","\n","Epoch 00162: val_loss did not improve from 0.49385\n","Epoch 163/1000\n"," - 5s - loss: 0.4076 - accuracy: 0.8137 - val_loss: 0.8085 - val_accuracy: 0.5121\n","\n","Epoch 00163: val_loss did not improve from 0.49385\n","Epoch 164/1000\n"," - 5s - loss: 0.3976 - accuracy: 0.8217 - val_loss: 0.9974 - val_accuracy: 0.5058\n","\n","Epoch 00164: val_loss did not improve from 0.49385\n","Epoch 165/1000\n"," - 5s - loss: 0.4039 - accuracy: 0.8091 - val_loss: 1.3321 - val_accuracy: 0.5040\n","\n","Epoch 00165: val_loss did not improve from 0.49385\n","Epoch 166/1000\n"," - 5s - loss: 0.4009 - accuracy: 0.8244 - val_loss: 0.8145 - val_accuracy: 0.4996\n","\n","Epoch 00166: val_loss did not improve from 0.49385\n","Epoch 167/1000\n"," - 5s - loss: 0.3898 - accuracy: 0.8267 - val_loss: 0.7797 - val_accuracy: 0.5067\n","\n","Epoch 00167: val_loss did not improve from 0.49385\n","Epoch 168/1000\n"," - 5s - loss: 0.3865 - accuracy: 0.8246 - val_loss: 1.7803 - val_accuracy: 0.5219\n","\n","Epoch 00168: val_loss did not improve from 0.49385\n","Epoch 169/1000\n"," - 5s - loss: 0.3904 - accuracy: 0.8190 - val_loss: 0.8680 - val_accuracy: 0.5233\n","\n","Epoch 00169: val_loss did not improve from 0.49385\n","Epoch 170/1000\n"," - 5s - loss: 0.3828 - accuracy: 0.8284 - val_loss: 1.2384 - val_accuracy: 0.5090\n","\n","Epoch 00170: val_loss did not improve from 0.49385\n","Epoch 171/1000\n"," - 5s - loss: 0.3788 - accuracy: 0.8313 - val_loss: 0.7081 - val_accuracy: 0.5152\n","\n","Epoch 00171: val_loss did not improve from 0.49385\n","Epoch 172/1000\n"," - 5s - loss: 0.3861 - accuracy: 0.8319 - val_loss: 1.3099 - val_accuracy: 0.5004\n","\n","Epoch 00172: val_loss did not improve from 0.49385\n","Epoch 173/1000\n"," - 5s - loss: 0.3747 - accuracy: 0.8254 - val_loss: 0.9732 - val_accuracy: 0.5090\n","\n","Epoch 00173: val_loss did not improve from 0.49385\n","Epoch 174/1000\n"," - 5s - loss: 0.3734 - accuracy: 0.8323 - val_loss: 0.5893 - val_accuracy: 0.5237\n","\n","Epoch 00174: val_loss did not improve from 0.49385\n","Epoch 175/1000\n"," - 5s - loss: 0.3692 - accuracy: 0.8334 - val_loss: 0.3548 - val_accuracy: 0.5036\n","\n","Epoch 00175: val_loss improved from 0.49385 to 0.35478, saving model to /content/drive/My Drive/Colab Notebooks/Project_Stock/ckpt/classifier_45_close_updown_pr_theta_train_2prevdata.h5\n","Epoch 176/1000\n"," - 5s - loss: 0.3839 - accuracy: 0.8300 - val_loss: 2.1561 - val_accuracy: 0.5018\n","\n","Epoch 00176: val_loss did not improve from 0.35478\n","Epoch 177/1000\n"," - 5s - loss: 0.3719 - accuracy: 0.8444 - val_loss: 1.1009 - val_accuracy: 0.5197\n","\n","Epoch 00177: val_loss did not improve from 0.35478\n","Epoch 178/1000\n"," - 5s - loss: 0.3707 - accuracy: 0.8344 - val_loss: 1.3061 - val_accuracy: 0.5125\n","\n","Epoch 00178: val_loss did not improve from 0.35478\n","Epoch 179/1000\n"," - 5s - loss: 0.3569 - accuracy: 0.8455 - val_loss: 1.0875 - val_accuracy: 0.5081\n","\n","Epoch 00179: val_loss did not improve from 0.35478\n","Epoch 180/1000\n"," - 5s - loss: 0.3678 - accuracy: 0.8350 - val_loss: 0.7273 - val_accuracy: 0.5009\n","\n","Epoch 00180: val_loss did not improve from 0.35478\n","Epoch 181/1000\n"," - 5s - loss: 0.3618 - accuracy: 0.8359 - val_loss: 1.6739 - val_accuracy: 0.5161\n","\n","Epoch 00181: val_loss did not improve from 0.35478\n","Epoch 182/1000\n"," - 5s - loss: 0.3621 - accuracy: 0.8388 - val_loss: 1.2463 - val_accuracy: 0.5107\n","\n","Epoch 00182: val_loss did not improve from 0.35478\n","Epoch 183/1000\n"," - 5s - loss: 0.3551 - accuracy: 0.8480 - val_loss: 1.8162 - val_accuracy: 0.5139\n","\n","Epoch 00183: val_loss did not improve from 0.35478\n","Epoch 184/1000\n"," - 5s - loss: 0.3652 - accuracy: 0.8405 - val_loss: 1.3508 - val_accuracy: 0.5112\n","\n","Epoch 00184: val_loss did not improve from 0.35478\n","Epoch 185/1000\n"," - 5s - loss: 0.3670 - accuracy: 0.8365 - val_loss: 0.3507 - val_accuracy: 0.5103\n","\n","Epoch 00185: val_loss improved from 0.35478 to 0.35065, saving model to /content/drive/My Drive/Colab Notebooks/Project_Stock/ckpt/classifier_45_close_updown_pr_theta_train_2prevdata.h5\n","Epoch 186/1000\n"," - 5s - loss: 0.3524 - accuracy: 0.8469 - val_loss: 1.3293 - val_accuracy: 0.5067\n","\n","Epoch 00186: val_loss did not improve from 0.35065\n","Epoch 187/1000\n"," - 5s - loss: 0.3576 - accuracy: 0.8411 - val_loss: 1.1213 - val_accuracy: 0.5036\n","\n","Epoch 00187: val_loss did not improve from 0.35065\n","Epoch 188/1000\n"," - 5s - loss: 0.3480 - accuracy: 0.8515 - val_loss: 1.8942 - val_accuracy: 0.5098\n","\n","Epoch 00188: val_loss did not improve from 0.35065\n","Epoch 189/1000\n"," - 5s - loss: 0.3530 - accuracy: 0.8440 - val_loss: 0.8370 - val_accuracy: 0.4973\n","\n","Epoch 00189: val_loss did not improve from 0.35065\n","Epoch 190/1000\n"," - 5s - loss: 0.3448 - accuracy: 0.8505 - val_loss: 1.0215 - val_accuracy: 0.5063\n","\n","Epoch 00190: val_loss did not improve from 0.35065\n","Epoch 191/1000\n"," - 5s - loss: 0.3409 - accuracy: 0.8509 - val_loss: 1.0248 - val_accuracy: 0.5103\n","\n","Epoch 00191: val_loss did not improve from 0.35065\n","Epoch 192/1000\n"," - 5s - loss: 0.3386 - accuracy: 0.8480 - val_loss: 0.5965 - val_accuracy: 0.5219\n","\n","Epoch 00192: val_loss did not improve from 0.35065\n","Epoch 193/1000\n"," - 5s - loss: 0.3460 - accuracy: 0.8440 - val_loss: 0.9681 - val_accuracy: 0.5148\n","\n","Epoch 00193: val_loss did not improve from 0.35065\n","Epoch 194/1000\n"," - 5s - loss: 0.3356 - accuracy: 0.8507 - val_loss: 0.7295 - val_accuracy: 0.5054\n","\n","Epoch 00194: val_loss did not improve from 0.35065\n","Epoch 195/1000\n"," - 5s - loss: 0.3382 - accuracy: 0.8547 - val_loss: 1.7104 - val_accuracy: 0.5063\n","\n","Epoch 00195: val_loss did not improve from 0.35065\n","Epoch 196/1000\n"," - 5s - loss: 0.3388 - accuracy: 0.8599 - val_loss: 1.1480 - val_accuracy: 0.5085\n","\n","Epoch 00196: val_loss did not improve from 0.35065\n","Epoch 197/1000\n"," - 5s - loss: 0.3406 - accuracy: 0.8471 - val_loss: 1.4721 - val_accuracy: 0.5054\n","\n","Epoch 00197: val_loss did not improve from 0.35065\n","Epoch 198/1000\n"," - 5s - loss: 0.3355 - accuracy: 0.8495 - val_loss: 1.6618 - val_accuracy: 0.5076\n","\n","Epoch 00198: val_loss did not improve from 0.35065\n","Epoch 199/1000\n"," - 5s - loss: 0.3279 - accuracy: 0.8530 - val_loss: 1.9042 - val_accuracy: 0.5076\n","\n","Epoch 00199: val_loss did not improve from 0.35065\n","Epoch 200/1000\n"," - 5s - loss: 0.3293 - accuracy: 0.8624 - val_loss: 0.4777 - val_accuracy: 0.5255\n","\n","Epoch 00200: val_loss did not improve from 0.35065\n","Epoch 201/1000\n"," - 5s - loss: 0.3165 - accuracy: 0.8668 - val_loss: 1.5406 - val_accuracy: 0.5139\n","\n","Epoch 00201: val_loss did not improve from 0.35065\n","Epoch 202/1000\n"," - 5s - loss: 0.3111 - accuracy: 0.8735 - val_loss: 0.8176 - val_accuracy: 0.4946\n","\n","Epoch 00202: val_loss did not improve from 0.35065\n","Epoch 203/1000\n"," - 5s - loss: 0.3165 - accuracy: 0.8678 - val_loss: 1.7877 - val_accuracy: 0.5219\n","\n","Epoch 00203: val_loss did not improve from 0.35065\n","Epoch 204/1000\n"," - 5s - loss: 0.3208 - accuracy: 0.8588 - val_loss: 1.7472 - val_accuracy: 0.5063\n","\n","Epoch 00204: val_loss did not improve from 0.35065\n","Epoch 205/1000\n"," - 5s - loss: 0.3226 - accuracy: 0.8636 - val_loss: 1.9097 - val_accuracy: 0.5166\n","\n","Epoch 00205: val_loss did not improve from 0.35065\n","Epoch 206/1000\n"," - 5s - loss: 0.3071 - accuracy: 0.8730 - val_loss: 0.5693 - val_accuracy: 0.5022\n","\n","Epoch 00206: val_loss did not improve from 0.35065\n","Epoch 207/1000\n"," - 5s - loss: 0.3171 - accuracy: 0.8643 - val_loss: 0.9501 - val_accuracy: 0.5045\n","\n","Epoch 00207: val_loss did not improve from 0.35065\n","Epoch 208/1000\n"," - 5s - loss: 0.3120 - accuracy: 0.8747 - val_loss: 2.5697 - val_accuracy: 0.5031\n","\n","Epoch 00208: val_loss did not improve from 0.35065\n","Epoch 209/1000\n"," - 5s - loss: 0.3073 - accuracy: 0.8733 - val_loss: 1.8513 - val_accuracy: 0.5175\n","\n","Epoch 00209: val_loss did not improve from 0.35065\n","Epoch 210/1000\n"," - 5s - loss: 0.3104 - accuracy: 0.8653 - val_loss: 2.1996 - val_accuracy: 0.5143\n","\n","Epoch 00210: val_loss did not improve from 0.35065\n","Epoch 211/1000\n"," - 5s - loss: 0.3082 - accuracy: 0.8720 - val_loss: 1.4450 - val_accuracy: 0.5112\n","\n","Epoch 00211: val_loss did not improve from 0.35065\n","Epoch 212/1000\n"," - 5s - loss: 0.3045 - accuracy: 0.8705 - val_loss: 2.0880 - val_accuracy: 0.5018\n","\n","Epoch 00212: val_loss did not improve from 0.35065\n","Epoch 213/1000\n"," - 5s - loss: 0.2956 - accuracy: 0.8758 - val_loss: 2.6659 - val_accuracy: 0.5045\n","\n","Epoch 00213: val_loss did not improve from 0.35065\n","Epoch 214/1000\n"," - 5s - loss: 0.3033 - accuracy: 0.8653 - val_loss: 1.0951 - val_accuracy: 0.5175\n","\n","Epoch 00214: val_loss did not improve from 0.35065\n","Epoch 215/1000\n"," - 5s - loss: 0.2979 - accuracy: 0.8755 - val_loss: 1.5321 - val_accuracy: 0.5040\n","\n","Epoch 00215: val_loss did not improve from 0.35065\n","Epoch 216/1000\n"," - 5s - loss: 0.3023 - accuracy: 0.8753 - val_loss: 0.6251 - val_accuracy: 0.5081\n","\n","Epoch 00216: val_loss did not improve from 0.35065\n","Epoch 217/1000\n"," - 5s - loss: 0.3104 - accuracy: 0.8609 - val_loss: 0.8192 - val_accuracy: 0.5103\n","\n","Epoch 00217: val_loss did not improve from 0.35065\n","Epoch 218/1000\n"," - 5s - loss: 0.2930 - accuracy: 0.8737 - val_loss: 1.4170 - val_accuracy: 0.5094\n","\n","Epoch 00218: val_loss did not improve from 0.35065\n","Epoch 219/1000\n"," - 5s - loss: 0.2871 - accuracy: 0.8864 - val_loss: 0.7535 - val_accuracy: 0.5152\n","\n","Epoch 00219: val_loss did not improve from 0.35065\n","Epoch 220/1000\n"," - 5s - loss: 0.2947 - accuracy: 0.8780 - val_loss: 0.9172 - val_accuracy: 0.5036\n","\n","Epoch 00220: val_loss did not improve from 0.35065\n","Epoch 221/1000\n"," - 5s - loss: 0.2907 - accuracy: 0.8814 - val_loss: 0.6434 - val_accuracy: 0.5224\n","\n","Epoch 00221: val_loss did not improve from 0.35065\n","Epoch 222/1000\n"," - 5s - loss: 0.2849 - accuracy: 0.8804 - val_loss: 1.2751 - val_accuracy: 0.5013\n","\n","Epoch 00222: val_loss did not improve from 0.35065\n","Epoch 223/1000\n"," - 5s - loss: 0.2893 - accuracy: 0.8747 - val_loss: 0.8319 - val_accuracy: 0.5090\n","\n","Epoch 00223: val_loss did not improve from 0.35065\n","Epoch 224/1000\n"," - 5s - loss: 0.2810 - accuracy: 0.8831 - val_loss: 1.3312 - val_accuracy: 0.5166\n","\n","Epoch 00224: val_loss did not improve from 0.35065\n","Epoch 225/1000\n"," - 5s - loss: 0.2768 - accuracy: 0.8870 - val_loss: 2.0893 - val_accuracy: 0.5166\n","\n","Epoch 00225: val_loss did not improve from 0.35065\n","Epoch 226/1000\n"," - 5s - loss: 0.2812 - accuracy: 0.8845 - val_loss: 1.6419 - val_accuracy: 0.5192\n","\n","Epoch 00226: val_loss did not improve from 0.35065\n","Epoch 227/1000\n"," - 5s - loss: 0.2730 - accuracy: 0.8858 - val_loss: 0.8791 - val_accuracy: 0.5192\n","\n","Epoch 00227: val_loss did not improve from 0.35065\n","Epoch 228/1000\n"," - 5s - loss: 0.2870 - accuracy: 0.8806 - val_loss: 0.6399 - val_accuracy: 0.5049\n","\n","Epoch 00228: val_loss did not improve from 0.35065\n","Epoch 229/1000\n"," - 5s - loss: 0.2701 - accuracy: 0.8937 - val_loss: 1.1686 - val_accuracy: 0.5063\n","\n","Epoch 00229: val_loss did not improve from 0.35065\n","Epoch 230/1000\n"," - 5s - loss: 0.2665 - accuracy: 0.8895 - val_loss: 1.0074 - val_accuracy: 0.5054\n","\n","Epoch 00230: val_loss did not improve from 0.35065\n","Epoch 231/1000\n"," - 5s - loss: 0.2720 - accuracy: 0.8849 - val_loss: 1.4885 - val_accuracy: 0.5094\n","\n","Epoch 00231: val_loss did not improve from 0.35065\n","Epoch 232/1000\n"," - 5s - loss: 0.2699 - accuracy: 0.8868 - val_loss: 2.1805 - val_accuracy: 0.5210\n","\n","Epoch 00232: val_loss did not improve from 0.35065\n","Epoch 233/1000\n"," - 5s - loss: 0.2753 - accuracy: 0.8860 - val_loss: 2.5397 - val_accuracy: 0.5112\n","\n","Epoch 00233: val_loss did not improve from 0.35065\n","Epoch 234/1000\n"," - 5s - loss: 0.2617 - accuracy: 0.8960 - val_loss: 2.6659 - val_accuracy: 0.5175\n","\n","Epoch 00234: val_loss did not improve from 0.35065\n","Epoch 235/1000\n"," - 5s - loss: 0.2657 - accuracy: 0.8943 - val_loss: 1.2888 - val_accuracy: 0.5134\n","\n","Epoch 00235: val_loss did not improve from 0.35065\n","Epoch 236/1000\n"," - 5s - loss: 0.2678 - accuracy: 0.8912 - val_loss: 1.9995 - val_accuracy: 0.5125\n","\n","Epoch 00236: val_loss did not improve from 0.35065\n","Epoch 237/1000\n"," - 5s - loss: 0.2626 - accuracy: 0.8923 - val_loss: 1.2857 - val_accuracy: 0.5103\n","\n","Epoch 00237: val_loss did not improve from 0.35065\n","Epoch 238/1000\n"," - 5s - loss: 0.2507 - accuracy: 0.9004 - val_loss: 1.7238 - val_accuracy: 0.5085\n","\n","Epoch 00238: val_loss did not improve from 0.35065\n","Epoch 239/1000\n"," - 5s - loss: 0.2527 - accuracy: 0.9021 - val_loss: 1.3492 - val_accuracy: 0.5152\n","\n","Epoch 00239: val_loss did not improve from 0.35065\n","Epoch 240/1000\n"," - 5s - loss: 0.2566 - accuracy: 0.8979 - val_loss: 1.7590 - val_accuracy: 0.5081\n","\n","Epoch 00240: val_loss did not improve from 0.35065\n","Epoch 241/1000\n"," - 5s - loss: 0.2489 - accuracy: 0.8952 - val_loss: 1.8198 - val_accuracy: 0.5125\n","\n","Epoch 00241: val_loss did not improve from 0.35065\n","Epoch 242/1000\n"," - 5s - loss: 0.2503 - accuracy: 0.9006 - val_loss: 0.5169 - val_accuracy: 0.5157\n","\n","Epoch 00242: val_loss did not improve from 0.35065\n","Epoch 243/1000\n"," - 5s - loss: 0.2578 - accuracy: 0.8898 - val_loss: 1.7311 - val_accuracy: 0.5063\n","\n","Epoch 00243: val_loss did not improve from 0.35065\n","Epoch 244/1000\n"," - 5s - loss: 0.2537 - accuracy: 0.8977 - val_loss: 2.2768 - val_accuracy: 0.5081\n","\n","Epoch 00244: val_loss did not improve from 0.35065\n","Epoch 245/1000\n"," - 5s - loss: 0.2459 - accuracy: 0.8971 - val_loss: 1.3158 - val_accuracy: 0.5036\n","\n","Epoch 00245: val_loss did not improve from 0.35065\n","Epoch 246/1000\n"," - 5s - loss: 0.2438 - accuracy: 0.8993 - val_loss: 1.9968 - val_accuracy: 0.5090\n","\n","Epoch 00246: val_loss did not improve from 0.35065\n","Epoch 247/1000\n"," - 5s - loss: 0.2412 - accuracy: 0.9023 - val_loss: 3.3522 - val_accuracy: 0.5067\n","\n","Epoch 00247: val_loss did not improve from 0.35065\n","Epoch 248/1000\n"," - 5s - loss: 0.2449 - accuracy: 0.8994 - val_loss: 2.2810 - val_accuracy: 0.4991\n","\n","Epoch 00248: val_loss did not improve from 0.35065\n","Epoch 249/1000\n"," - 5s - loss: 0.2485 - accuracy: 0.9000 - val_loss: 2.4235 - val_accuracy: 0.4996\n","\n","Epoch 00249: val_loss did not improve from 0.35065\n","Epoch 250/1000\n"," - 5s - loss: 0.2412 - accuracy: 0.9004 - val_loss: 0.4502 - val_accuracy: 0.5112\n","\n","Epoch 00250: val_loss did not improve from 0.35065\n","Epoch 251/1000\n"," - 5s - loss: 0.2267 - accuracy: 0.9125 - val_loss: 3.1526 - val_accuracy: 0.5072\n","\n","Epoch 00251: val_loss did not improve from 0.35065\n","Epoch 252/1000\n"," - 5s - loss: 0.2318 - accuracy: 0.9050 - val_loss: 2.3856 - val_accuracy: 0.5067\n","\n","Epoch 00252: val_loss did not improve from 0.35065\n","Epoch 253/1000\n"," - 5s - loss: 0.2376 - accuracy: 0.9052 - val_loss: 0.5630 - val_accuracy: 0.5058\n","\n","Epoch 00253: val_loss did not improve from 0.35065\n","Epoch 254/1000\n"," - 5s - loss: 0.2338 - accuracy: 0.9048 - val_loss: 2.2003 - val_accuracy: 0.5004\n","\n","Epoch 00254: val_loss did not improve from 0.35065\n","Epoch 255/1000\n"," - 5s - loss: 0.2321 - accuracy: 0.9098 - val_loss: 0.6361 - val_accuracy: 0.4902\n","\n","Epoch 00255: val_loss did not improve from 0.35065\n","Epoch 256/1000\n"," - 5s - loss: 0.2350 - accuracy: 0.9079 - val_loss: 1.2296 - val_accuracy: 0.5040\n","\n","Epoch 00256: val_loss did not improve from 0.35065\n","Epoch 257/1000\n"," - 5s - loss: 0.2207 - accuracy: 0.9140 - val_loss: 1.9883 - val_accuracy: 0.4843\n","\n","Epoch 00257: val_loss did not improve from 0.35065\n","Epoch 258/1000\n"," - 5s - loss: 0.2394 - accuracy: 0.9017 - val_loss: 2.6893 - val_accuracy: 0.4906\n","\n","Epoch 00258: val_loss did not improve from 0.35065\n","Epoch 259/1000\n"," - 5s - loss: 0.2211 - accuracy: 0.9135 - val_loss: 1.7871 - val_accuracy: 0.5027\n","\n","Epoch 00259: val_loss did not improve from 0.35065\n","Epoch 260/1000\n"," - 5s - loss: 0.2177 - accuracy: 0.9192 - val_loss: 1.8488 - val_accuracy: 0.5036\n","\n","Epoch 00260: val_loss did not improve from 0.35065\n","Epoch 261/1000\n"," - 5s - loss: 0.2255 - accuracy: 0.9083 - val_loss: 1.0522 - val_accuracy: 0.5081\n","\n","Epoch 00261: val_loss did not improve from 0.35065\n","Epoch 262/1000\n"," - 5s - loss: 0.2254 - accuracy: 0.9102 - val_loss: 2.3696 - val_accuracy: 0.4991\n","\n","Epoch 00262: val_loss did not improve from 0.35065\n","Epoch 263/1000\n"," - 5s - loss: 0.2260 - accuracy: 0.9108 - val_loss: 0.6760 - val_accuracy: 0.5036\n","\n","Epoch 00263: val_loss did not improve from 0.35065\n","Epoch 264/1000\n"," - 5s - loss: 0.2186 - accuracy: 0.9111 - val_loss: 1.2985 - val_accuracy: 0.5081\n","\n","Epoch 00264: val_loss did not improve from 0.35065\n","Epoch 265/1000\n"," - 5s - loss: 0.2136 - accuracy: 0.9177 - val_loss: 2.1069 - val_accuracy: 0.4951\n","\n","Epoch 00265: val_loss did not improve from 0.35065\n","Epoch 266/1000\n"," - 5s - loss: 0.2178 - accuracy: 0.9167 - val_loss: 4.2735 - val_accuracy: 0.5107\n","\n","Epoch 00266: val_loss did not improve from 0.35065\n","Epoch 267/1000\n"," - 5s - loss: 0.2180 - accuracy: 0.9146 - val_loss: 0.9156 - val_accuracy: 0.5112\n","\n","Epoch 00267: val_loss did not improve from 0.35065\n","Epoch 268/1000\n"," - 5s - loss: 0.2188 - accuracy: 0.9135 - val_loss: 1.2998 - val_accuracy: 0.5098\n","\n","Epoch 00268: val_loss did not improve from 0.35065\n","Epoch 269/1000\n"," - 5s - loss: 0.2166 - accuracy: 0.9148 - val_loss: 1.7819 - val_accuracy: 0.5058\n","\n","Epoch 00269: val_loss did not improve from 0.35065\n","Epoch 270/1000\n"," - 5s - loss: 0.2189 - accuracy: 0.9111 - val_loss: 2.0057 - val_accuracy: 0.5067\n","\n","Epoch 00270: val_loss did not improve from 0.35065\n","Epoch 271/1000\n"," - 5s - loss: 0.2150 - accuracy: 0.9115 - val_loss: 1.5406 - val_accuracy: 0.5076\n","\n","Epoch 00271: val_loss did not improve from 0.35065\n","Epoch 272/1000\n"," - 5s - loss: 0.2202 - accuracy: 0.9140 - val_loss: 2.3221 - val_accuracy: 0.5045\n","\n","Epoch 00272: val_loss did not improve from 0.35065\n","Epoch 273/1000\n"," - 4s - loss: 0.2147 - accuracy: 0.9192 - val_loss: 1.3535 - val_accuracy: 0.4991\n","\n","Epoch 00273: val_loss did not improve from 0.35065\n","Epoch 274/1000\n"," - 5s - loss: 0.2040 - accuracy: 0.9184 - val_loss: 2.2198 - val_accuracy: 0.5121\n","\n","Epoch 00274: val_loss did not improve from 0.35065\n","Epoch 275/1000\n"," - 5s - loss: 0.2020 - accuracy: 0.9215 - val_loss: 0.9573 - val_accuracy: 0.5130\n","\n","Epoch 00275: val_loss did not improve from 0.35065\n","Epoch 276/1000\n"," - 5s - loss: 0.2091 - accuracy: 0.9217 - val_loss: 0.3662 - val_accuracy: 0.5090\n","\n","Epoch 00276: val_loss did not improve from 0.35065\n","Epoch 277/1000\n"," - 5s - loss: 0.2055 - accuracy: 0.9171 - val_loss: 1.7070 - val_accuracy: 0.5098\n","\n","Epoch 00277: val_loss did not improve from 0.35065\n","Epoch 278/1000\n"," - 5s - loss: 0.2056 - accuracy: 0.9202 - val_loss: 2.0400 - val_accuracy: 0.5103\n","\n","Epoch 00278: val_loss did not improve from 0.35065\n","Epoch 279/1000\n"," - 5s - loss: 0.1914 - accuracy: 0.9263 - val_loss: 1.8379 - val_accuracy: 0.5134\n","\n","Epoch 00279: val_loss did not improve from 0.35065\n","Epoch 280/1000\n"," - 5s - loss: 0.2022 - accuracy: 0.9236 - val_loss: 0.9411 - val_accuracy: 0.5094\n","\n","Epoch 00280: val_loss did not improve from 0.35065\n","Epoch 281/1000\n"," - 5s - loss: 0.2007 - accuracy: 0.9232 - val_loss: 1.7173 - val_accuracy: 0.5063\n","\n","Epoch 00281: val_loss did not improve from 0.35065\n","Epoch 282/1000\n"," - 5s - loss: 0.2036 - accuracy: 0.9196 - val_loss: 1.6255 - val_accuracy: 0.5031\n","\n","Epoch 00282: val_loss did not improve from 0.35065\n","Epoch 283/1000\n"," - 5s - loss: 0.2032 - accuracy: 0.9211 - val_loss: 1.4168 - val_accuracy: 0.5018\n","\n","Epoch 00283: val_loss did not improve from 0.35065\n","Epoch 284/1000\n"," - 5s - loss: 0.1945 - accuracy: 0.9254 - val_loss: 2.6079 - val_accuracy: 0.4969\n","\n","Epoch 00284: val_loss did not improve from 0.35065\n","Epoch 285/1000\n"," - 5s - loss: 0.1873 - accuracy: 0.9319 - val_loss: 0.2945 - val_accuracy: 0.5040\n","\n","Epoch 00285: val_loss improved from 0.35065 to 0.29450, saving model to /content/drive/My Drive/Colab Notebooks/Project_Stock/ckpt/classifier_45_close_updown_pr_theta_train_2prevdata.h5\n","Epoch 286/1000\n"," - 5s - loss: 0.1885 - accuracy: 0.9323 - val_loss: 1.4590 - val_accuracy: 0.5094\n","\n","Epoch 00286: val_loss did not improve from 0.29450\n","Epoch 287/1000\n"," - 5s - loss: 0.1898 - accuracy: 0.9288 - val_loss: 1.1476 - val_accuracy: 0.5049\n","\n","Epoch 00287: val_loss did not improve from 0.29450\n","Epoch 288/1000\n"," - 5s - loss: 0.1927 - accuracy: 0.9242 - val_loss: 1.4467 - val_accuracy: 0.5134\n","\n","Epoch 00288: val_loss did not improve from 0.29450\n","Epoch 289/1000\n"," - 5s - loss: 0.1946 - accuracy: 0.9234 - val_loss: 2.5438 - val_accuracy: 0.5161\n","\n","Epoch 00289: val_loss did not improve from 0.29450\n","Epoch 290/1000\n"," - 5s - loss: 0.1906 - accuracy: 0.9263 - val_loss: 1.9420 - val_accuracy: 0.5031\n","\n","Epoch 00290: val_loss did not improve from 0.29450\n","Epoch 291/1000\n"," - 5s - loss: 0.1946 - accuracy: 0.9277 - val_loss: 1.2598 - val_accuracy: 0.5143\n","\n","Epoch 00291: val_loss did not improve from 0.29450\n","Epoch 292/1000\n"," - 5s - loss: 0.1842 - accuracy: 0.9284 - val_loss: 1.4214 - val_accuracy: 0.5098\n","\n","Epoch 00292: val_loss did not improve from 0.29450\n","Epoch 293/1000\n"," - 5s - loss: 0.1818 - accuracy: 0.9294 - val_loss: 2.6575 - val_accuracy: 0.5130\n","\n","Epoch 00293: val_loss did not improve from 0.29450\n","Epoch 294/1000\n"," - 5s - loss: 0.1825 - accuracy: 0.9298 - val_loss: 1.7862 - val_accuracy: 0.5116\n","\n","Epoch 00294: val_loss did not improve from 0.29450\n","Epoch 295/1000\n"," - 5s - loss: 0.1871 - accuracy: 0.9269 - val_loss: 1.1952 - val_accuracy: 0.5134\n","\n","Epoch 00295: val_loss did not improve from 0.29450\n","Epoch 296/1000\n"," - 5s - loss: 0.1935 - accuracy: 0.9250 - val_loss: 1.3410 - val_accuracy: 0.5067\n","\n","Epoch 00296: val_loss did not improve from 0.29450\n","Epoch 297/1000\n"," - 5s - loss: 0.1786 - accuracy: 0.9296 - val_loss: 1.6476 - val_accuracy: 0.5076\n","\n","Epoch 00297: val_loss did not improve from 0.29450\n","Epoch 298/1000\n"," - 5s - loss: 0.1753 - accuracy: 0.9330 - val_loss: 0.9013 - val_accuracy: 0.5022\n","\n","Epoch 00298: val_loss did not improve from 0.29450\n","Epoch 299/1000\n"," - 5s - loss: 0.1780 - accuracy: 0.9315 - val_loss: 1.9411 - val_accuracy: 0.5054\n","\n","Epoch 00299: val_loss did not improve from 0.29450\n","Epoch 300/1000\n"," - 5s - loss: 0.1845 - accuracy: 0.9311 - val_loss: 2.1707 - val_accuracy: 0.5049\n","\n","Epoch 00300: val_loss did not improve from 0.29450\n","Epoch 301/1000\n"," - 5s - loss: 0.1663 - accuracy: 0.9382 - val_loss: 1.1002 - val_accuracy: 0.5081\n","\n","Epoch 00301: val_loss did not improve from 0.29450\n","Epoch 302/1000\n"," - 5s - loss: 0.1738 - accuracy: 0.9342 - val_loss: 0.6152 - val_accuracy: 0.5116\n","\n","Epoch 00302: val_loss did not improve from 0.29450\n","Epoch 303/1000\n"," - 5s - loss: 0.1743 - accuracy: 0.9338 - val_loss: 2.5153 - val_accuracy: 0.5081\n","\n","Epoch 00303: val_loss did not improve from 0.29450\n","Epoch 304/1000\n"," - 5s - loss: 0.1708 - accuracy: 0.9363 - val_loss: 1.7389 - val_accuracy: 0.5197\n","\n","Epoch 00304: val_loss did not improve from 0.29450\n","Epoch 305/1000\n"," - 5s - loss: 0.1742 - accuracy: 0.9332 - val_loss: 1.6415 - val_accuracy: 0.5022\n","\n","Epoch 00305: val_loss did not improve from 0.29450\n","Epoch 306/1000\n"," - 5s - loss: 0.1752 - accuracy: 0.9344 - val_loss: 0.9385 - val_accuracy: 0.5170\n","\n","Epoch 00306: val_loss did not improve from 0.29450\n","Epoch 307/1000\n"," - 5s - loss: 0.1703 - accuracy: 0.9382 - val_loss: 2.4836 - val_accuracy: 0.5036\n","\n","Epoch 00307: val_loss did not improve from 0.29450\n","Epoch 308/1000\n"," - 5s - loss: 0.1656 - accuracy: 0.9403 - val_loss: 2.6102 - val_accuracy: 0.4987\n","\n","Epoch 00308: val_loss did not improve from 0.29450\n","Epoch 309/1000\n"," - 5s - loss: 0.1690 - accuracy: 0.9363 - val_loss: 1.8971 - val_accuracy: 0.4964\n","\n","Epoch 00309: val_loss did not improve from 0.29450\n","Epoch 310/1000\n"," - 5s - loss: 0.1648 - accuracy: 0.9424 - val_loss: 2.5488 - val_accuracy: 0.5036\n","\n","Epoch 00310: val_loss did not improve from 0.29450\n","Epoch 311/1000\n"," - 5s - loss: 0.1663 - accuracy: 0.9380 - val_loss: 2.2660 - val_accuracy: 0.5098\n","\n","Epoch 00311: val_loss did not improve from 0.29450\n","Epoch 312/1000\n"," - 4s - loss: 0.1592 - accuracy: 0.9457 - val_loss: 2.2392 - val_accuracy: 0.4960\n","\n","Epoch 00312: val_loss did not improve from 0.29450\n","Epoch 313/1000\n"," - 4s - loss: 0.1598 - accuracy: 0.9417 - val_loss: 2.5009 - val_accuracy: 0.5036\n","\n","Epoch 00313: val_loss did not improve from 0.29450\n","Epoch 314/1000\n"," - 4s - loss: 0.1640 - accuracy: 0.9338 - val_loss: 0.7364 - val_accuracy: 0.5049\n","\n","Epoch 00314: val_loss did not improve from 0.29450\n","Epoch 315/1000\n"," - 4s - loss: 0.1592 - accuracy: 0.9432 - val_loss: 1.6260 - val_accuracy: 0.5112\n","\n","Epoch 00315: val_loss did not improve from 0.29450\n","Epoch 316/1000\n"," - 4s - loss: 0.1634 - accuracy: 0.9386 - val_loss: 1.6244 - val_accuracy: 0.5094\n","\n","Epoch 00316: val_loss did not improve from 0.29450\n","Epoch 317/1000\n"," - 5s - loss: 0.1628 - accuracy: 0.9415 - val_loss: 2.3168 - val_accuracy: 0.5098\n","\n","Epoch 00317: val_loss did not improve from 0.29450\n","Epoch 318/1000\n"," - 5s - loss: 0.1569 - accuracy: 0.9432 - val_loss: 0.9370 - val_accuracy: 0.5170\n","\n","Epoch 00318: val_loss did not improve from 0.29450\n","Epoch 319/1000\n"," - 5s - loss: 0.1498 - accuracy: 0.9451 - val_loss: 1.7733 - val_accuracy: 0.5148\n","\n","Epoch 00319: val_loss did not improve from 0.29450\n","Epoch 320/1000\n"," - 5s - loss: 0.1620 - accuracy: 0.9384 - val_loss: 0.7500 - val_accuracy: 0.5027\n","\n","Epoch 00320: val_loss did not improve from 0.29450\n","Epoch 321/1000\n"," - 5s - loss: 0.1521 - accuracy: 0.9472 - val_loss: 2.5772 - val_accuracy: 0.5098\n","\n","Epoch 00321: val_loss did not improve from 0.29450\n","Epoch 322/1000\n"," - 5s - loss: 0.1538 - accuracy: 0.9436 - val_loss: 3.5783 - val_accuracy: 0.5090\n","\n","Epoch 00322: val_loss did not improve from 0.29450\n","Epoch 323/1000\n"," - 5s - loss: 0.1666 - accuracy: 0.9371 - val_loss: 1.7675 - val_accuracy: 0.5098\n","\n","Epoch 00323: val_loss did not improve from 0.29450\n","Epoch 324/1000\n"," - 5s - loss: 0.1479 - accuracy: 0.9470 - val_loss: 3.4622 - val_accuracy: 0.5098\n","\n","Epoch 00324: val_loss did not improve from 0.29450\n","Epoch 325/1000\n"," - 5s - loss: 0.1547 - accuracy: 0.9447 - val_loss: 1.3402 - val_accuracy: 0.5121\n","\n","Epoch 00325: val_loss did not improve from 0.29450\n","Epoch 326/1000\n"," - 5s - loss: 0.1549 - accuracy: 0.9409 - val_loss: 1.9242 - val_accuracy: 0.5094\n","\n","Epoch 00326: val_loss did not improve from 0.29450\n","Epoch 327/1000\n"," - 5s - loss: 0.1488 - accuracy: 0.9474 - val_loss: 2.1688 - val_accuracy: 0.5040\n","\n","Epoch 00327: val_loss did not improve from 0.29450\n","Epoch 328/1000\n"," - 5s - loss: 0.1557 - accuracy: 0.9399 - val_loss: 3.5431 - val_accuracy: 0.5054\n","\n","Epoch 00328: val_loss did not improve from 0.29450\n","Epoch 329/1000\n"," - 5s - loss: 0.1515 - accuracy: 0.9424 - val_loss: 1.8531 - val_accuracy: 0.5040\n","\n","Epoch 00329: val_loss did not improve from 0.29450\n","Epoch 330/1000\n"," - 5s - loss: 0.1479 - accuracy: 0.9467 - val_loss: 1.0921 - val_accuracy: 0.5072\n","\n","Epoch 00330: val_loss did not improve from 0.29450\n","Epoch 331/1000\n"," - 5s - loss: 0.1438 - accuracy: 0.9478 - val_loss: 1.4799 - val_accuracy: 0.5085\n","\n","Epoch 00331: val_loss did not improve from 0.29450\n","Epoch 332/1000\n"," - 5s - loss: 0.1487 - accuracy: 0.9467 - val_loss: 4.3931 - val_accuracy: 0.5094\n","\n","Epoch 00332: val_loss did not improve from 0.29450\n","Epoch 333/1000\n"," - 5s - loss: 0.1456 - accuracy: 0.9480 - val_loss: 1.4089 - val_accuracy: 0.5085\n","\n","Epoch 00333: val_loss did not improve from 0.29450\n","Epoch 334/1000\n"," - 5s - loss: 0.1383 - accuracy: 0.9524 - val_loss: 3.5503 - val_accuracy: 0.5121\n","\n","Epoch 00334: val_loss did not improve from 0.29450\n","Epoch 335/1000\n"," - 5s - loss: 0.1335 - accuracy: 0.9557 - val_loss: 2.0269 - val_accuracy: 0.5125\n","\n","Epoch 00335: val_loss did not improve from 0.29450\n","Epoch 336/1000\n"," - 5s - loss: 0.1436 - accuracy: 0.9451 - val_loss: 2.4053 - val_accuracy: 0.5009\n","\n","Epoch 00336: val_loss did not improve from 0.29450\n","Epoch 337/1000\n"," - 5s - loss: 0.1397 - accuracy: 0.9539 - val_loss: 0.9908 - val_accuracy: 0.5112\n","\n","Epoch 00337: val_loss did not improve from 0.29450\n","Epoch 338/1000\n"," - 5s - loss: 0.1387 - accuracy: 0.9457 - val_loss: 0.7974 - val_accuracy: 0.5157\n","\n","Epoch 00338: val_loss did not improve from 0.29450\n","Epoch 339/1000\n"," - 5s - loss: 0.1438 - accuracy: 0.9463 - val_loss: 1.7681 - val_accuracy: 0.5143\n","\n","Epoch 00339: val_loss did not improve from 0.29450\n","Epoch 340/1000\n"," - 5s - loss: 0.1334 - accuracy: 0.9513 - val_loss: 3.1270 - val_accuracy: 0.5161\n","\n","Epoch 00340: val_loss did not improve from 0.29450\n","Epoch 341/1000\n"," - 5s - loss: 0.1395 - accuracy: 0.9478 - val_loss: 2.3949 - val_accuracy: 0.5125\n","\n","Epoch 00341: val_loss did not improve from 0.29450\n","Epoch 342/1000\n"," - 5s - loss: 0.1438 - accuracy: 0.9507 - val_loss: 1.6131 - val_accuracy: 0.5098\n","\n","Epoch 00342: val_loss did not improve from 0.29450\n","Epoch 343/1000\n"," - 5s - loss: 0.1401 - accuracy: 0.9480 - val_loss: 1.3301 - val_accuracy: 0.5143\n","\n","Epoch 00343: val_loss did not improve from 0.29450\n","Epoch 344/1000\n"," - 5s - loss: 0.1374 - accuracy: 0.9501 - val_loss: 3.6918 - val_accuracy: 0.5036\n","\n","Epoch 00344: val_loss did not improve from 0.29450\n","Epoch 345/1000\n"," - 5s - loss: 0.1350 - accuracy: 0.9526 - val_loss: 1.6956 - val_accuracy: 0.5107\n","\n","Epoch 00345: val_loss did not improve from 0.29450\n","Epoch 346/1000\n"," - 5s - loss: 0.1349 - accuracy: 0.9513 - val_loss: 1.7786 - val_accuracy: 0.5148\n","\n","Epoch 00346: val_loss did not improve from 0.29450\n","Epoch 347/1000\n"," - 5s - loss: 0.1244 - accuracy: 0.9547 - val_loss: 2.9057 - val_accuracy: 0.5121\n","\n","Epoch 00347: val_loss did not improve from 0.29450\n","Epoch 348/1000\n"," - 5s - loss: 0.1308 - accuracy: 0.9547 - val_loss: 1.7158 - val_accuracy: 0.4942\n","\n","Epoch 00348: val_loss did not improve from 0.29450\n","Epoch 349/1000\n"," - 5s - loss: 0.1250 - accuracy: 0.9578 - val_loss: 2.0367 - val_accuracy: 0.5103\n","\n","Epoch 00349: val_loss did not improve from 0.29450\n","Epoch 350/1000\n"," - 5s - loss: 0.1258 - accuracy: 0.9561 - val_loss: 1.7490 - val_accuracy: 0.4933\n","\n","Epoch 00350: val_loss did not improve from 0.29450\n","Epoch 351/1000\n"," - 5s - loss: 0.1239 - accuracy: 0.9595 - val_loss: 1.0083 - val_accuracy: 0.5049\n","\n","Epoch 00351: val_loss did not improve from 0.29450\n","Epoch 352/1000\n"," - 5s - loss: 0.1279 - accuracy: 0.9553 - val_loss: 1.5369 - val_accuracy: 0.5049\n","\n","Epoch 00352: val_loss did not improve from 0.29450\n","Epoch 353/1000\n"," - 5s - loss: 0.1275 - accuracy: 0.9574 - val_loss: 2.1664 - val_accuracy: 0.5134\n","\n","Epoch 00353: val_loss did not improve from 0.29450\n","Epoch 354/1000\n"," - 5s - loss: 0.1321 - accuracy: 0.9541 - val_loss: 2.1817 - val_accuracy: 0.5018\n","\n","Epoch 00354: val_loss did not improve from 0.29450\n","Epoch 355/1000\n"," - 5s - loss: 0.1279 - accuracy: 0.9526 - val_loss: 2.6274 - val_accuracy: 0.5090\n","\n","Epoch 00355: val_loss did not improve from 0.29450\n","Epoch 356/1000\n"," - 4s - loss: 0.1185 - accuracy: 0.9580 - val_loss: 1.8454 - val_accuracy: 0.5116\n","\n","Epoch 00356: val_loss did not improve from 0.29450\n","Epoch 357/1000\n"," - 5s - loss: 0.1287 - accuracy: 0.9545 - val_loss: 1.0651 - val_accuracy: 0.5148\n","\n","Epoch 00357: val_loss did not improve from 0.29450\n","Epoch 358/1000\n"," - 4s - loss: 0.1287 - accuracy: 0.9545 - val_loss: 2.4241 - val_accuracy: 0.5139\n","\n","Epoch 00358: val_loss did not improve from 0.29450\n","Epoch 359/1000\n"," - 5s - loss: 0.1225 - accuracy: 0.9585 - val_loss: 2.7638 - val_accuracy: 0.5098\n","\n","Epoch 00359: val_loss did not improve from 0.29450\n","Epoch 360/1000\n"," - 5s - loss: 0.1254 - accuracy: 0.9555 - val_loss: 4.0294 - val_accuracy: 0.5076\n","\n","Epoch 00360: val_loss did not improve from 0.29450\n","Epoch 361/1000\n"," - 5s - loss: 0.1191 - accuracy: 0.9587 - val_loss: 1.0871 - val_accuracy: 0.5081\n","\n","Epoch 00361: val_loss did not improve from 0.29450\n","Epoch 362/1000\n"," - 5s - loss: 0.1185 - accuracy: 0.9582 - val_loss: 1.5385 - val_accuracy: 0.5125\n","\n","Epoch 00362: val_loss did not improve from 0.29450\n","Epoch 363/1000\n"," - 5s - loss: 0.1239 - accuracy: 0.9536 - val_loss: 3.2446 - val_accuracy: 0.5081\n","\n","Epoch 00363: val_loss did not improve from 0.29450\n","Epoch 364/1000\n"," - 5s - loss: 0.1165 - accuracy: 0.9632 - val_loss: 3.3711 - val_accuracy: 0.5081\n","\n","Epoch 00364: val_loss did not improve from 0.29450\n","Epoch 365/1000\n"," - 5s - loss: 0.1188 - accuracy: 0.9591 - val_loss: 2.2760 - val_accuracy: 0.5072\n","\n","Epoch 00365: val_loss did not improve from 0.29450\n","Epoch 366/1000\n"," - 5s - loss: 0.1135 - accuracy: 0.9599 - val_loss: 3.2228 - val_accuracy: 0.5004\n","\n","Epoch 00366: val_loss did not improve from 0.29450\n","Epoch 367/1000\n"," - 5s - loss: 0.1192 - accuracy: 0.9587 - val_loss: 3.0439 - val_accuracy: 0.5121\n","\n","Epoch 00367: val_loss did not improve from 0.29450\n","Epoch 368/1000\n"," - 5s - loss: 0.1185 - accuracy: 0.9585 - val_loss: 2.0065 - val_accuracy: 0.5054\n","\n","Epoch 00368: val_loss did not improve from 0.29450\n","Epoch 369/1000\n"," - 5s - loss: 0.1137 - accuracy: 0.9612 - val_loss: 2.7600 - val_accuracy: 0.5210\n","\n","Epoch 00369: val_loss did not improve from 0.29450\n","Epoch 370/1000\n"," - 5s - loss: 0.1135 - accuracy: 0.9605 - val_loss: 2.4958 - val_accuracy: 0.5063\n","\n","Epoch 00370: val_loss did not improve from 0.29450\n","Epoch 371/1000\n"," - 5s - loss: 0.1174 - accuracy: 0.9587 - val_loss: 2.5118 - val_accuracy: 0.5000\n","\n","Epoch 00371: val_loss did not improve from 0.29450\n","Epoch 372/1000\n"," - 5s - loss: 0.1130 - accuracy: 0.9599 - val_loss: 0.9425 - val_accuracy: 0.5103\n","\n","Epoch 00372: val_loss did not improve from 0.29450\n","Epoch 373/1000\n"," - 5s - loss: 0.1075 - accuracy: 0.9668 - val_loss: 2.8451 - val_accuracy: 0.5148\n","\n","Epoch 00373: val_loss did not improve from 0.29450\n","Epoch 374/1000\n"," - 5s - loss: 0.1140 - accuracy: 0.9626 - val_loss: 1.9931 - val_accuracy: 0.5107\n","\n","Epoch 00374: val_loss did not improve from 0.29450\n","Epoch 375/1000\n"," - 5s - loss: 0.1079 - accuracy: 0.9628 - val_loss: 1.6852 - val_accuracy: 0.5027\n","\n","Epoch 00375: val_loss did not improve from 0.29450\n","Epoch 376/1000\n"," - 5s - loss: 0.1142 - accuracy: 0.9607 - val_loss: 1.3343 - val_accuracy: 0.5067\n","\n","Epoch 00376: val_loss did not improve from 0.29450\n","Epoch 377/1000\n"," - 5s - loss: 0.1028 - accuracy: 0.9655 - val_loss: 0.7998 - val_accuracy: 0.5058\n","\n","Epoch 00377: val_loss did not improve from 0.29450\n","Epoch 378/1000\n"," - 5s - loss: 0.1074 - accuracy: 0.9624 - val_loss: 1.0283 - val_accuracy: 0.5036\n","\n","Epoch 00378: val_loss did not improve from 0.29450\n","Epoch 379/1000\n"," - 5s - loss: 0.1060 - accuracy: 0.9637 - val_loss: 1.5065 - val_accuracy: 0.5112\n","\n","Epoch 00379: val_loss did not improve from 0.29450\n","Epoch 380/1000\n"," - 5s - loss: 0.1134 - accuracy: 0.9593 - val_loss: 4.9272 - val_accuracy: 0.4978\n","\n","Epoch 00380: val_loss did not improve from 0.29450\n","Epoch 381/1000\n"," - 5s - loss: 0.1102 - accuracy: 0.9612 - val_loss: 3.2081 - val_accuracy: 0.5116\n","\n","Epoch 00381: val_loss did not improve from 0.29450\n","Epoch 382/1000\n"," - 5s - loss: 0.1086 - accuracy: 0.9616 - val_loss: 1.7535 - val_accuracy: 0.4996\n","\n","Epoch 00382: val_loss did not improve from 0.29450\n","Epoch 383/1000\n"," - 5s - loss: 0.0994 - accuracy: 0.9666 - val_loss: 1.0809 - val_accuracy: 0.5090\n","\n","Epoch 00383: val_loss did not improve from 0.29450\n","Epoch 384/1000\n"," - 5s - loss: 0.0967 - accuracy: 0.9703 - val_loss: 2.4563 - val_accuracy: 0.5022\n","\n","Epoch 00384: val_loss did not improve from 0.29450\n","Epoch 385/1000\n"," - 5s - loss: 0.1122 - accuracy: 0.9628 - val_loss: 2.7196 - val_accuracy: 0.5148\n","\n","Epoch 00385: val_loss did not improve from 0.29450\n","Epoch 386/1000\n"," - 5s - loss: 0.1064 - accuracy: 0.9610 - val_loss: 1.0877 - val_accuracy: 0.5018\n","\n","Epoch 00386: val_loss did not improve from 0.29450\n","Epoch 387/1000\n"," - 5s - loss: 0.1080 - accuracy: 0.9628 - val_loss: 4.6258 - val_accuracy: 0.5067\n","\n","Epoch 00387: val_loss did not improve from 0.29450\n","Epoch 388/1000\n"," - 5s - loss: 0.0991 - accuracy: 0.9662 - val_loss: 1.3274 - val_accuracy: 0.5040\n","\n","Epoch 00388: val_loss did not improve from 0.29450\n","Epoch 389/1000\n"," - 5s - loss: 0.1036 - accuracy: 0.9639 - val_loss: 2.5983 - val_accuracy: 0.5076\n","\n","Epoch 00389: val_loss did not improve from 0.29450\n","Epoch 390/1000\n"," - 5s - loss: 0.1026 - accuracy: 0.9632 - val_loss: 5.1813 - val_accuracy: 0.5040\n","\n","Epoch 00390: val_loss did not improve from 0.29450\n","Epoch 391/1000\n"," - 5s - loss: 0.1010 - accuracy: 0.9681 - val_loss: 1.7821 - val_accuracy: 0.5134\n","\n","Epoch 00391: val_loss did not improve from 0.29450\n","Epoch 392/1000\n"," - 5s - loss: 0.0972 - accuracy: 0.9656 - val_loss: 2.1351 - val_accuracy: 0.5107\n","\n","Epoch 00392: val_loss did not improve from 0.29450\n","Epoch 393/1000\n"," - 5s - loss: 0.1020 - accuracy: 0.9647 - val_loss: 1.7533 - val_accuracy: 0.5121\n","\n","Epoch 00393: val_loss did not improve from 0.29450\n","Epoch 394/1000\n"," - 5s - loss: 0.1002 - accuracy: 0.9635 - val_loss: 0.8153 - val_accuracy: 0.5036\n","\n","Epoch 00394: val_loss did not improve from 0.29450\n","Epoch 395/1000\n"," - 5s - loss: 0.0990 - accuracy: 0.9683 - val_loss: 1.9210 - val_accuracy: 0.4946\n","\n","Epoch 00395: val_loss did not improve from 0.29450\n","Epoch 396/1000\n"," - 5s - loss: 0.1007 - accuracy: 0.9643 - val_loss: 4.0483 - val_accuracy: 0.5049\n","\n","Epoch 00396: val_loss did not improve from 0.29450\n","Epoch 397/1000\n"," - 5s - loss: 0.1020 - accuracy: 0.9643 - val_loss: 1.0707 - val_accuracy: 0.5143\n","\n","Epoch 00397: val_loss did not improve from 0.29450\n","Epoch 398/1000\n"," - 4s - loss: 0.1023 - accuracy: 0.9635 - val_loss: 2.8094 - val_accuracy: 0.5085\n","\n","Epoch 00398: val_loss did not improve from 0.29450\n","Epoch 399/1000\n"," - 5s - loss: 0.0964 - accuracy: 0.9693 - val_loss: 0.7159 - val_accuracy: 0.5112\n","\n","Epoch 00399: val_loss did not improve from 0.29450\n","Epoch 400/1000\n"," - 5s - loss: 0.0953 - accuracy: 0.9683 - val_loss: 2.0971 - val_accuracy: 0.5072\n","\n","Epoch 00400: val_loss did not improve from 0.29450\n","Epoch 401/1000\n"," - 5s - loss: 0.1025 - accuracy: 0.9616 - val_loss: 1.1964 - val_accuracy: 0.5121\n","\n","Epoch 00401: val_loss did not improve from 0.29450\n","Epoch 402/1000\n"," - 5s - loss: 0.0989 - accuracy: 0.9641 - val_loss: 3.5885 - val_accuracy: 0.5107\n","\n","Epoch 00402: val_loss did not improve from 0.29450\n","Epoch 403/1000\n"," - 5s - loss: 0.0965 - accuracy: 0.9681 - val_loss: 4.6760 - val_accuracy: 0.5054\n","\n","Epoch 00403: val_loss did not improve from 0.29450\n","Epoch 404/1000\n"," - 5s - loss: 0.0962 - accuracy: 0.9687 - val_loss: 3.8536 - val_accuracy: 0.4978\n","\n","Epoch 00404: val_loss did not improve from 0.29450\n","Epoch 405/1000\n"," - 5s - loss: 0.0922 - accuracy: 0.9683 - val_loss: 1.0123 - val_accuracy: 0.5040\n","\n","Epoch 00405: val_loss did not improve from 0.29450\n","Epoch 406/1000\n"," - 5s - loss: 0.0963 - accuracy: 0.9674 - val_loss: 4.2535 - val_accuracy: 0.5112\n","\n","Epoch 00406: val_loss did not improve from 0.29450\n","Epoch 407/1000\n"," - 5s - loss: 0.0985 - accuracy: 0.9674 - val_loss: 4.6810 - val_accuracy: 0.5049\n","\n","Epoch 00407: val_loss did not improve from 0.29450\n","Epoch 408/1000\n"," - 5s - loss: 0.0923 - accuracy: 0.9672 - val_loss: 2.4837 - val_accuracy: 0.5121\n","\n","Epoch 00408: val_loss did not improve from 0.29450\n","Epoch 409/1000\n"," - 5s - loss: 0.0886 - accuracy: 0.9712 - val_loss: 2.2122 - val_accuracy: 0.4996\n","\n","Epoch 00409: val_loss did not improve from 0.29450\n","Epoch 410/1000\n"," - 5s - loss: 0.0858 - accuracy: 0.9726 - val_loss: 0.7924 - val_accuracy: 0.5210\n","\n","Epoch 00410: val_loss did not improve from 0.29450\n","Epoch 411/1000\n"," - 5s - loss: 0.0838 - accuracy: 0.9731 - val_loss: 1.3208 - val_accuracy: 0.5045\n","\n","Epoch 00411: val_loss did not improve from 0.29450\n","Epoch 412/1000\n"," - 5s - loss: 0.0965 - accuracy: 0.9674 - val_loss: 3.1143 - val_accuracy: 0.5166\n","\n","Epoch 00412: val_loss did not improve from 0.29450\n","Epoch 413/1000\n"," - 5s - loss: 0.0866 - accuracy: 0.9722 - val_loss: 4.1152 - val_accuracy: 0.5067\n","\n","Epoch 00413: val_loss did not improve from 0.29450\n","Epoch 414/1000\n"," - 5s - loss: 0.0968 - accuracy: 0.9662 - val_loss: 2.1587 - val_accuracy: 0.5103\n","\n","Epoch 00414: val_loss did not improve from 0.29450\n","Epoch 415/1000\n"," - 5s - loss: 0.0849 - accuracy: 0.9733 - val_loss: 4.7671 - val_accuracy: 0.5103\n","\n","Epoch 00415: val_loss did not improve from 0.29450\n","Epoch 416/1000\n"," - 5s - loss: 0.0885 - accuracy: 0.9704 - val_loss: 5.6850 - val_accuracy: 0.5130\n","\n","Epoch 00416: val_loss did not improve from 0.29450\n","Epoch 417/1000\n"," - 5s - loss: 0.0931 - accuracy: 0.9695 - val_loss: 2.6706 - val_accuracy: 0.5098\n","\n","Epoch 00417: val_loss did not improve from 0.29450\n","Epoch 418/1000\n"," - 5s - loss: 0.0824 - accuracy: 0.9762 - val_loss: 3.3790 - val_accuracy: 0.5112\n","\n","Epoch 00418: val_loss did not improve from 0.29450\n","Epoch 419/1000\n"," - 5s - loss: 0.0846 - accuracy: 0.9733 - val_loss: 2.3202 - val_accuracy: 0.5081\n","\n","Epoch 00419: val_loss did not improve from 0.29450\n","Epoch 420/1000\n"," - 5s - loss: 0.0838 - accuracy: 0.9747 - val_loss: 1.3020 - val_accuracy: 0.5049\n","\n","Epoch 00420: val_loss did not improve from 0.29450\n","Epoch 421/1000\n"," - 5s - loss: 0.0858 - accuracy: 0.9706 - val_loss: 0.8370 - val_accuracy: 0.5112\n","\n","Epoch 00421: val_loss did not improve from 0.29450\n","Epoch 422/1000\n"," - 5s - loss: 0.0744 - accuracy: 0.9787 - val_loss: 3.0477 - val_accuracy: 0.5085\n","\n","Epoch 00422: val_loss did not improve from 0.29450\n","Epoch 423/1000\n"," - 5s - loss: 0.0868 - accuracy: 0.9720 - val_loss: 3.4125 - val_accuracy: 0.5072\n","\n","Epoch 00423: val_loss did not improve from 0.29450\n","Epoch 424/1000\n"," - 5s - loss: 0.0880 - accuracy: 0.9693 - val_loss: 2.6999 - val_accuracy: 0.5125\n","\n","Epoch 00424: val_loss did not improve from 0.29450\n","Epoch 425/1000\n"," - 5s - loss: 0.0883 - accuracy: 0.9687 - val_loss: 2.8617 - val_accuracy: 0.5121\n","\n","Epoch 00425: val_loss did not improve from 0.29450\n","Epoch 426/1000\n"," - 5s - loss: 0.0840 - accuracy: 0.9733 - val_loss: 3.4800 - val_accuracy: 0.5116\n","\n","Epoch 00426: val_loss did not improve from 0.29450\n","Epoch 427/1000\n"," - 5s - loss: 0.0844 - accuracy: 0.9727 - val_loss: 2.1100 - val_accuracy: 0.4987\n","\n","Epoch 00427: val_loss did not improve from 0.29450\n","Epoch 428/1000\n"," - 5s - loss: 0.0814 - accuracy: 0.9733 - val_loss: 2.4799 - val_accuracy: 0.5027\n","\n","Epoch 00428: val_loss did not improve from 0.29450\n","Epoch 429/1000\n"," - 5s - loss: 0.0759 - accuracy: 0.9791 - val_loss: 3.0254 - val_accuracy: 0.4996\n","\n","Epoch 00429: val_loss did not improve from 0.29450\n","Epoch 430/1000\n"," - 5s - loss: 0.0814 - accuracy: 0.9710 - val_loss: 3.1624 - val_accuracy: 0.4982\n","\n","Epoch 00430: val_loss did not improve from 0.29450\n","Epoch 431/1000\n"," - 5s - loss: 0.0826 - accuracy: 0.9735 - val_loss: 1.0138 - val_accuracy: 0.5045\n","\n","Epoch 00431: val_loss did not improve from 0.29450\n","Epoch 432/1000\n"," - 5s - loss: 0.0771 - accuracy: 0.9781 - val_loss: 2.4414 - val_accuracy: 0.5076\n","\n","Epoch 00432: val_loss did not improve from 0.29450\n","Epoch 433/1000\n"," - 5s - loss: 0.0755 - accuracy: 0.9779 - val_loss: 1.7556 - val_accuracy: 0.4982\n","\n","Epoch 00433: val_loss did not improve from 0.29450\n","Epoch 434/1000\n"," - 5s - loss: 0.0745 - accuracy: 0.9760 - val_loss: 6.3619 - val_accuracy: 0.5067\n","\n","Epoch 00434: val_loss did not improve from 0.29450\n","Epoch 435/1000\n"," - 5s - loss: 0.0728 - accuracy: 0.9779 - val_loss: 2.1599 - val_accuracy: 0.5054\n","\n","Epoch 00435: val_loss did not improve from 0.29450\n","Epoch 436/1000\n"," - 5s - loss: 0.0833 - accuracy: 0.9724 - val_loss: 2.2002 - val_accuracy: 0.5170\n","\n","Epoch 00436: val_loss did not improve from 0.29450\n","Epoch 437/1000\n"," - 5s - loss: 0.0724 - accuracy: 0.9781 - val_loss: 2.2763 - val_accuracy: 0.5152\n","\n","Epoch 00437: val_loss did not improve from 0.29450\n","Epoch 438/1000\n"," - 5s - loss: 0.0820 - accuracy: 0.9737 - val_loss: 2.2439 - val_accuracy: 0.5103\n","\n","Epoch 00438: val_loss did not improve from 0.29450\n","Epoch 439/1000\n"," - 5s - loss: 0.0781 - accuracy: 0.9751 - val_loss: 3.4018 - val_accuracy: 0.5139\n","\n","Epoch 00439: val_loss did not improve from 0.29450\n","Epoch 440/1000\n"," - 5s - loss: 0.0735 - accuracy: 0.9768 - val_loss: 4.9483 - val_accuracy: 0.5022\n","\n","Epoch 00440: val_loss did not improve from 0.29450\n","Epoch 441/1000\n"," - 5s - loss: 0.0748 - accuracy: 0.9764 - val_loss: 2.0349 - val_accuracy: 0.5031\n","\n","Epoch 00441: val_loss did not improve from 0.29450\n","Epoch 442/1000\n"," - 4s - loss: 0.0782 - accuracy: 0.9731 - val_loss: 5.5718 - val_accuracy: 0.5058\n","\n","Epoch 00442: val_loss did not improve from 0.29450\n","Epoch 443/1000\n"," - 4s - loss: 0.0746 - accuracy: 0.9768 - val_loss: 2.1219 - val_accuracy: 0.5072\n","\n","Epoch 00443: val_loss did not improve from 0.29450\n","Epoch 444/1000\n"," - 4s - loss: 0.0729 - accuracy: 0.9791 - val_loss: 0.5014 - val_accuracy: 0.5112\n","\n","Epoch 00444: val_loss did not improve from 0.29450\n","Epoch 445/1000\n"," - 4s - loss: 0.0733 - accuracy: 0.9783 - val_loss: 3.5678 - val_accuracy: 0.5157\n","\n","Epoch 00445: val_loss did not improve from 0.29450\n","Epoch 446/1000\n"," - 5s - loss: 0.0690 - accuracy: 0.9804 - val_loss: 4.5714 - val_accuracy: 0.5112\n","\n","Epoch 00446: val_loss did not improve from 0.29450\n","Epoch 447/1000\n"," - 5s - loss: 0.0717 - accuracy: 0.9764 - val_loss: 2.5958 - val_accuracy: 0.5013\n","\n","Epoch 00447: val_loss did not improve from 0.29450\n","Epoch 448/1000\n"," - 5s - loss: 0.0737 - accuracy: 0.9777 - val_loss: 3.3780 - val_accuracy: 0.5103\n","\n","Epoch 00448: val_loss did not improve from 0.29450\n","Epoch 449/1000\n"," - 5s - loss: 0.0730 - accuracy: 0.9791 - val_loss: 1.5195 - val_accuracy: 0.4987\n","\n","Epoch 00449: val_loss did not improve from 0.29450\n","Epoch 450/1000\n"," - 5s - loss: 0.0732 - accuracy: 0.9770 - val_loss: 3.2663 - val_accuracy: 0.5103\n","\n","Epoch 00450: val_loss did not improve from 0.29450\n","Epoch 451/1000\n"," - 5s - loss: 0.0740 - accuracy: 0.9768 - val_loss: 5.3539 - val_accuracy: 0.5085\n","\n","Epoch 00451: val_loss did not improve from 0.29450\n","Epoch 452/1000\n"," - 5s - loss: 0.0680 - accuracy: 0.9775 - val_loss: 2.4597 - val_accuracy: 0.5072\n","\n","Epoch 00452: val_loss did not improve from 0.29450\n","Epoch 453/1000\n"," - 5s - loss: 0.0776 - accuracy: 0.9745 - val_loss: 2.5001 - val_accuracy: 0.5152\n","\n","Epoch 00453: val_loss did not improve from 0.29450\n","Epoch 454/1000\n"," - 5s - loss: 0.0749 - accuracy: 0.9762 - val_loss: 3.6610 - val_accuracy: 0.5085\n","\n","Epoch 00454: val_loss did not improve from 0.29450\n","Epoch 455/1000\n"," - 5s - loss: 0.0733 - accuracy: 0.9770 - val_loss: 2.1790 - val_accuracy: 0.5009\n","\n","Epoch 00455: val_loss did not improve from 0.29450\n","Epoch 456/1000\n"," - 5s - loss: 0.0623 - accuracy: 0.9810 - val_loss: 1.7345 - val_accuracy: 0.5058\n","\n","Epoch 00456: val_loss did not improve from 0.29450\n","Epoch 457/1000\n"," - 5s - loss: 0.0650 - accuracy: 0.9766 - val_loss: 1.3924 - val_accuracy: 0.5098\n","\n","Epoch 00457: val_loss did not improve from 0.29450\n","Epoch 458/1000\n"," - 5s - loss: 0.0670 - accuracy: 0.9770 - val_loss: 2.1321 - val_accuracy: 0.5134\n","\n","Epoch 00458: val_loss did not improve from 0.29450\n","Epoch 459/1000\n"," - 5s - loss: 0.0695 - accuracy: 0.9756 - val_loss: 2.0754 - val_accuracy: 0.5098\n","\n","Epoch 00459: val_loss did not improve from 0.29450\n","Epoch 460/1000\n"," - 5s - loss: 0.0706 - accuracy: 0.9752 - val_loss: 1.8375 - val_accuracy: 0.5072\n","\n","Epoch 00460: val_loss did not improve from 0.29450\n","Epoch 461/1000\n"," - 5s - loss: 0.0717 - accuracy: 0.9772 - val_loss: 2.6248 - val_accuracy: 0.5130\n","\n","Epoch 00461: val_loss did not improve from 0.29450\n","Epoch 462/1000\n"," - 5s - loss: 0.0726 - accuracy: 0.9743 - val_loss: 2.3053 - val_accuracy: 0.5125\n","\n","Epoch 00462: val_loss did not improve from 0.29450\n","Epoch 463/1000\n"," - 5s - loss: 0.0729 - accuracy: 0.9751 - val_loss: 4.7010 - val_accuracy: 0.5049\n","\n","Epoch 00463: val_loss did not improve from 0.29450\n","Epoch 464/1000\n"," - 5s - loss: 0.0652 - accuracy: 0.9808 - val_loss: 3.6488 - val_accuracy: 0.5022\n","\n","Epoch 00464: val_loss did not improve from 0.29450\n","Epoch 465/1000\n"," - 5s - loss: 0.0630 - accuracy: 0.9829 - val_loss: 4.7147 - val_accuracy: 0.5148\n","\n","Epoch 00465: val_loss did not improve from 0.29450\n","Epoch 466/1000\n"," - 5s - loss: 0.0628 - accuracy: 0.9799 - val_loss: 2.5003 - val_accuracy: 0.5175\n","\n","Epoch 00466: val_loss did not improve from 0.29450\n","Epoch 467/1000\n"," - 5s - loss: 0.0590 - accuracy: 0.9833 - val_loss: 4.2520 - val_accuracy: 0.5192\n","\n","Epoch 00467: val_loss did not improve from 0.29450\n","Epoch 468/1000\n"," - 5s - loss: 0.0617 - accuracy: 0.9795 - val_loss: 1.8974 - val_accuracy: 0.5107\n","\n","Epoch 00468: val_loss did not improve from 0.29450\n","Epoch 469/1000\n"," - 5s - loss: 0.0631 - accuracy: 0.9841 - val_loss: 2.9774 - val_accuracy: 0.5143\n","\n","Epoch 00469: val_loss did not improve from 0.29450\n","Epoch 470/1000\n"," - 5s - loss: 0.0602 - accuracy: 0.9812 - val_loss: 4.1534 - val_accuracy: 0.5152\n","\n","Epoch 00470: val_loss did not improve from 0.29450\n","Epoch 471/1000\n"," - 5s - loss: 0.0629 - accuracy: 0.9797 - val_loss: 4.4703 - val_accuracy: 0.5013\n","\n","Epoch 00471: val_loss did not improve from 0.29450\n","Epoch 472/1000\n"," - 5s - loss: 0.0622 - accuracy: 0.9820 - val_loss: 1.3185 - val_accuracy: 0.5103\n","\n","Epoch 00472: val_loss did not improve from 0.29450\n","Epoch 473/1000\n"," - 5s - loss: 0.0627 - accuracy: 0.9797 - val_loss: 3.1664 - val_accuracy: 0.5085\n","\n","Epoch 00473: val_loss did not improve from 0.29450\n","Epoch 474/1000\n"," - 5s - loss: 0.0644 - accuracy: 0.9808 - val_loss: 3.4087 - val_accuracy: 0.5098\n","\n","Epoch 00474: val_loss did not improve from 0.29450\n","Epoch 475/1000\n"," - 5s - loss: 0.0663 - accuracy: 0.9774 - val_loss: 5.8090 - val_accuracy: 0.5103\n","\n","Epoch 00475: val_loss did not improve from 0.29450\n","Epoch 476/1000\n"," - 5s - loss: 0.0657 - accuracy: 0.9793 - val_loss: 3.1065 - val_accuracy: 0.5107\n","\n","Epoch 00476: val_loss did not improve from 0.29450\n","Epoch 477/1000\n"," - 5s - loss: 0.0619 - accuracy: 0.9802 - val_loss: 1.6546 - val_accuracy: 0.5063\n","\n","Epoch 00477: val_loss did not improve from 0.29450\n","Epoch 478/1000\n"," - 5s - loss: 0.0644 - accuracy: 0.9781 - val_loss: 2.0933 - val_accuracy: 0.5072\n","\n","Epoch 00478: val_loss did not improve from 0.29450\n","Epoch 479/1000\n"," - 5s - loss: 0.0622 - accuracy: 0.9806 - val_loss: 3.0969 - val_accuracy: 0.5063\n","\n","Epoch 00479: val_loss did not improve from 0.29450\n","Epoch 480/1000\n"," - 5s - loss: 0.0573 - accuracy: 0.9829 - val_loss: 3.7264 - val_accuracy: 0.5081\n","\n","Epoch 00480: val_loss did not improve from 0.29450\n","Epoch 481/1000\n"," - 5s - loss: 0.0587 - accuracy: 0.9835 - val_loss: 3.0732 - val_accuracy: 0.5063\n","\n","Epoch 00481: val_loss did not improve from 0.29450\n","Epoch 482/1000\n"," - 5s - loss: 0.0573 - accuracy: 0.9835 - val_loss: 2.5863 - val_accuracy: 0.5081\n","\n","Epoch 00482: val_loss did not improve from 0.29450\n","Epoch 483/1000\n"," - 5s - loss: 0.0637 - accuracy: 0.9799 - val_loss: 5.0400 - val_accuracy: 0.5179\n","\n","Epoch 00483: val_loss did not improve from 0.29450\n","Epoch 484/1000\n"," - 5s - loss: 0.0651 - accuracy: 0.9774 - val_loss: 1.5906 - val_accuracy: 0.5112\n","\n","Epoch 00484: val_loss did not improve from 0.29450\n","Epoch 485/1000\n"," - 5s - loss: 0.0607 - accuracy: 0.9800 - val_loss: 2.4273 - val_accuracy: 0.5116\n","\n","Epoch 00485: val_loss did not improve from 0.29450\n","Epoch 486/1000\n"," - 5s - loss: 0.0599 - accuracy: 0.9825 - val_loss: 4.4510 - val_accuracy: 0.5031\n","\n","Epoch 00486: val_loss did not improve from 0.29450\n","Epoch 487/1000\n"," - 5s - loss: 0.0538 - accuracy: 0.9866 - val_loss: 4.5967 - val_accuracy: 0.5067\n","\n","Epoch 00487: val_loss did not improve from 0.29450\n","Epoch 488/1000\n"," - 5s - loss: 0.0510 - accuracy: 0.9854 - val_loss: 2.8579 - val_accuracy: 0.5157\n","\n","Epoch 00488: val_loss did not improve from 0.29450\n","Epoch 489/1000\n"," - 5s - loss: 0.0609 - accuracy: 0.9831 - val_loss: 1.6052 - val_accuracy: 0.5054\n","\n","Epoch 00489: val_loss did not improve from 0.29450\n","Epoch 490/1000\n"," - 5s - loss: 0.0546 - accuracy: 0.9845 - val_loss: 4.9960 - val_accuracy: 0.5112\n","\n","Epoch 00490: val_loss did not improve from 0.29450\n","Epoch 491/1000\n"," - 5s - loss: 0.0627 - accuracy: 0.9789 - val_loss: 0.8786 - val_accuracy: 0.5090\n","\n","Epoch 00491: val_loss did not improve from 0.29450\n","Epoch 492/1000\n"," - 5s - loss: 0.0585 - accuracy: 0.9806 - val_loss: 0.7278 - val_accuracy: 0.5036\n","\n","Epoch 00492: val_loss did not improve from 0.29450\n","Epoch 493/1000\n"," - 5s - loss: 0.0556 - accuracy: 0.9829 - val_loss: 3.1650 - val_accuracy: 0.4973\n","\n","Epoch 00493: val_loss did not improve from 0.29450\n","Epoch 494/1000\n"," - 5s - loss: 0.0600 - accuracy: 0.9810 - val_loss: 1.1555 - val_accuracy: 0.5045\n","\n","Epoch 00494: val_loss did not improve from 0.29450\n","Epoch 495/1000\n"," - 5s - loss: 0.0570 - accuracy: 0.9820 - val_loss: 2.6119 - val_accuracy: 0.4955\n","\n","Epoch 00495: val_loss did not improve from 0.29450\n","Epoch 496/1000\n"," - 5s - loss: 0.0526 - accuracy: 0.9848 - val_loss: 3.3568 - val_accuracy: 0.5009\n","\n","Epoch 00496: val_loss did not improve from 0.29450\n","Epoch 497/1000\n"," - 5s - loss: 0.0575 - accuracy: 0.9808 - val_loss: 5.4192 - val_accuracy: 0.5009\n","\n","Epoch 00497: val_loss did not improve from 0.29450\n","Epoch 498/1000\n"," - 5s - loss: 0.0529 - accuracy: 0.9831 - val_loss: 3.9534 - val_accuracy: 0.5022\n","\n","Epoch 00498: val_loss did not improve from 0.29450\n","Epoch 499/1000\n"," - 5s - loss: 0.0498 - accuracy: 0.9870 - val_loss: 2.7905 - val_accuracy: 0.5090\n","\n","Epoch 00499: val_loss did not improve from 0.29450\n","Epoch 500/1000\n"," - 5s - loss: 0.0505 - accuracy: 0.9848 - val_loss: 3.6042 - val_accuracy: 0.5125\n","\n","Epoch 00500: val_loss did not improve from 0.29450\n","Epoch 501/1000\n"," - 5s - loss: 0.0534 - accuracy: 0.9831 - val_loss: 4.3957 - val_accuracy: 0.5031\n","\n","Epoch 00501: val_loss did not improve from 0.29450\n","Epoch 502/1000\n"," - 5s - loss: 0.0581 - accuracy: 0.9843 - val_loss: 4.1298 - val_accuracy: 0.5022\n","\n","Epoch 00502: val_loss did not improve from 0.29450\n","Epoch 503/1000\n"," - 5s - loss: 0.0546 - accuracy: 0.9841 - val_loss: 5.0111 - val_accuracy: 0.5098\n","\n","Epoch 00503: val_loss did not improve from 0.29450\n","Epoch 504/1000\n"," - 5s - loss: 0.0576 - accuracy: 0.9823 - val_loss: 4.2902 - val_accuracy: 0.5076\n","\n","Epoch 00504: val_loss did not improve from 0.29450\n","Epoch 505/1000\n"," - 5s - loss: 0.0560 - accuracy: 0.9833 - val_loss: 5.9222 - val_accuracy: 0.5004\n","\n","Epoch 00505: val_loss did not improve from 0.29450\n","Epoch 506/1000\n"," - 5s - loss: 0.0524 - accuracy: 0.9877 - val_loss: 3.7616 - val_accuracy: 0.5107\n","\n","Epoch 00506: val_loss did not improve from 0.29450\n","Epoch 507/1000\n"," - 5s - loss: 0.0493 - accuracy: 0.9846 - val_loss: 3.2405 - val_accuracy: 0.5098\n","\n","Epoch 00507: val_loss did not improve from 0.29450\n","Epoch 508/1000\n"," - 5s - loss: 0.0459 - accuracy: 0.9879 - val_loss: 4.1820 - val_accuracy: 0.5139\n","\n","Epoch 00508: val_loss did not improve from 0.29450\n","Epoch 509/1000\n"," - 5s - loss: 0.0521 - accuracy: 0.9873 - val_loss: 3.2416 - val_accuracy: 0.4928\n","\n","Epoch 00509: val_loss did not improve from 0.29450\n","Epoch 510/1000\n"," - 5s - loss: 0.0463 - accuracy: 0.9870 - val_loss: 3.5233 - val_accuracy: 0.5022\n","\n","Epoch 00510: val_loss did not improve from 0.29450\n","Epoch 511/1000\n"," - 5s - loss: 0.0492 - accuracy: 0.9871 - val_loss: 4.4405 - val_accuracy: 0.5143\n","\n","Epoch 00511: val_loss did not improve from 0.29450\n","Epoch 512/1000\n"," - 5s - loss: 0.0602 - accuracy: 0.9793 - val_loss: 4.4250 - val_accuracy: 0.5143\n","\n","Epoch 00512: val_loss did not improve from 0.29450\n","Epoch 513/1000\n"," - 5s - loss: 0.0528 - accuracy: 0.9829 - val_loss: 3.1686 - val_accuracy: 0.5098\n","\n","Epoch 00513: val_loss did not improve from 0.29450\n","Epoch 514/1000\n"," - 5s - loss: 0.0499 - accuracy: 0.9846 - val_loss: 2.2916 - val_accuracy: 0.5031\n","\n","Epoch 00514: val_loss did not improve from 0.29450\n","Epoch 515/1000\n"," - 5s - loss: 0.0523 - accuracy: 0.9837 - val_loss: 1.0712 - val_accuracy: 0.5081\n","\n","Epoch 00515: val_loss did not improve from 0.29450\n","Epoch 516/1000\n"," - 5s - loss: 0.0502 - accuracy: 0.9845 - val_loss: 2.4740 - val_accuracy: 0.5125\n","\n","Epoch 00516: val_loss did not improve from 0.29450\n","Epoch 517/1000\n"," - 5s - loss: 0.0535 - accuracy: 0.9835 - val_loss: 1.9517 - val_accuracy: 0.5040\n","\n","Epoch 00517: val_loss did not improve from 0.29450\n","Epoch 518/1000\n"," - 5s - loss: 0.0478 - accuracy: 0.9875 - val_loss: 1.4123 - val_accuracy: 0.5031\n","\n","Epoch 00518: val_loss did not improve from 0.29450\n","Epoch 519/1000\n"," - 5s - loss: 0.0527 - accuracy: 0.9831 - val_loss: 1.0953 - val_accuracy: 0.5125\n","\n","Epoch 00519: val_loss did not improve from 0.29450\n","Epoch 520/1000\n"," - 5s - loss: 0.0504 - accuracy: 0.9856 - val_loss: 3.0774 - val_accuracy: 0.5085\n","\n","Epoch 00520: val_loss did not improve from 0.29450\n","Epoch 521/1000\n"," - 5s - loss: 0.0493 - accuracy: 0.9845 - val_loss: 4.5700 - val_accuracy: 0.5063\n","\n","Epoch 00521: val_loss did not improve from 0.29450\n","Epoch 522/1000\n"," - 5s - loss: 0.0471 - accuracy: 0.9858 - val_loss: 1.8491 - val_accuracy: 0.4987\n","\n","Epoch 00522: val_loss did not improve from 0.29450\n","Epoch 523/1000\n"," - 5s - loss: 0.0490 - accuracy: 0.9866 - val_loss: 1.2383 - val_accuracy: 0.5067\n","\n","Epoch 00523: val_loss did not improve from 0.29450\n","Epoch 524/1000\n"," - 5s - loss: 0.0472 - accuracy: 0.9870 - val_loss: 6.8320 - val_accuracy: 0.5027\n","\n","Epoch 00524: val_loss did not improve from 0.29450\n","Epoch 525/1000\n"," - 5s - loss: 0.0480 - accuracy: 0.9860 - val_loss: 2.7084 - val_accuracy: 0.5161\n","\n","Epoch 00525: val_loss did not improve from 0.29450\n","Epoch 526/1000\n"," - 5s - loss: 0.0420 - accuracy: 0.9893 - val_loss: 1.6500 - val_accuracy: 0.5058\n","\n","Epoch 00526: val_loss did not improve from 0.29450\n","Epoch 527/1000\n"," - 5s - loss: 0.0442 - accuracy: 0.9860 - val_loss: 3.1306 - val_accuracy: 0.5125\n","\n","Epoch 00527: val_loss did not improve from 0.29450\n","Epoch 528/1000\n"," - 5s - loss: 0.0458 - accuracy: 0.9879 - val_loss: 1.6997 - val_accuracy: 0.5098\n","\n","Epoch 00528: val_loss did not improve from 0.29450\n","Epoch 529/1000\n"," - 5s - loss: 0.0536 - accuracy: 0.9823 - val_loss: 4.1996 - val_accuracy: 0.5094\n","\n","Epoch 00529: val_loss did not improve from 0.29450\n","Epoch 530/1000\n"," - 5s - loss: 0.0444 - accuracy: 0.9896 - val_loss: 2.5157 - val_accuracy: 0.5049\n","\n","Epoch 00530: val_loss did not improve from 0.29450\n","Epoch 531/1000\n"," - 5s - loss: 0.0519 - accuracy: 0.9848 - val_loss: 4.3592 - val_accuracy: 0.5058\n","\n","Epoch 00531: val_loss did not improve from 0.29450\n","Epoch 532/1000\n"," - 5s - loss: 0.0421 - accuracy: 0.9883 - val_loss: 4.5710 - val_accuracy: 0.5063\n","\n","Epoch 00532: val_loss did not improve from 0.29450\n","Epoch 533/1000\n"," - 5s - loss: 0.0476 - accuracy: 0.9866 - val_loss: 2.1365 - val_accuracy: 0.4937\n","\n","Epoch 00533: val_loss did not improve from 0.29450\n","Epoch 534/1000\n"," - 5s - loss: 0.0426 - accuracy: 0.9881 - val_loss: 0.4564 - val_accuracy: 0.5063\n","\n","Epoch 00534: val_loss did not improve from 0.29450\n","Epoch 535/1000\n"," - 5s - loss: 0.0450 - accuracy: 0.9864 - val_loss: 2.7582 - val_accuracy: 0.5157\n","\n","Epoch 00535: val_loss did not improve from 0.29450\n","Epoch 536/1000\n"," - 5s - loss: 0.0478 - accuracy: 0.9856 - val_loss: 4.6471 - val_accuracy: 0.4964\n","\n","Epoch 00536: val_loss did not improve from 0.29450\n","Epoch 537/1000\n"," - 5s - loss: 0.0477 - accuracy: 0.9843 - val_loss: 2.6946 - val_accuracy: 0.5076\n","\n","Epoch 00537: val_loss did not improve from 0.29450\n","Epoch 538/1000\n"," - 5s - loss: 0.0436 - accuracy: 0.9873 - val_loss: 2.4822 - val_accuracy: 0.5054\n","\n","Epoch 00538: val_loss did not improve from 0.29450\n","Epoch 539/1000\n"," - 5s - loss: 0.0485 - accuracy: 0.9843 - val_loss: 2.6845 - val_accuracy: 0.5054\n","\n","Epoch 00539: val_loss did not improve from 0.29450\n","Epoch 540/1000\n"," - 5s - loss: 0.0433 - accuracy: 0.9885 - val_loss: 4.1767 - val_accuracy: 0.5188\n","\n","Epoch 00540: val_loss did not improve from 0.29450\n","Epoch 541/1000\n"," - 5s - loss: 0.0438 - accuracy: 0.9868 - val_loss: 1.6296 - val_accuracy: 0.5134\n","\n","Epoch 00541: val_loss did not improve from 0.29450\n","Epoch 542/1000\n"," - 5s - loss: 0.0415 - accuracy: 0.9900 - val_loss: 3.3011 - val_accuracy: 0.5161\n","\n","Epoch 00542: val_loss did not improve from 0.29450\n","Epoch 543/1000\n"," - 5s - loss: 0.0430 - accuracy: 0.9871 - val_loss: 6.3256 - val_accuracy: 0.5206\n","\n","Epoch 00543: val_loss did not improve from 0.29450\n","Epoch 544/1000\n"," - 5s - loss: 0.0438 - accuracy: 0.9873 - val_loss: 3.1342 - val_accuracy: 0.5148\n","\n","Epoch 00544: val_loss did not improve from 0.29450\n","Epoch 545/1000\n"," - 5s - loss: 0.0425 - accuracy: 0.9877 - val_loss: 1.9760 - val_accuracy: 0.5081\n","\n","Epoch 00545: val_loss did not improve from 0.29450\n","Epoch 546/1000\n"," - 5s - loss: 0.0460 - accuracy: 0.9862 - val_loss: 2.1533 - val_accuracy: 0.5031\n","\n","Epoch 00546: val_loss did not improve from 0.29450\n","Epoch 547/1000\n"," - 5s - loss: 0.0435 - accuracy: 0.9856 - val_loss: 1.0768 - val_accuracy: 0.5063\n","\n","Epoch 00547: val_loss did not improve from 0.29450\n","Epoch 548/1000\n"," - 5s - loss: 0.0368 - accuracy: 0.9910 - val_loss: 3.5002 - val_accuracy: 0.5013\n","\n","Epoch 00548: val_loss did not improve from 0.29450\n","Epoch 549/1000\n"," - 5s - loss: 0.0419 - accuracy: 0.9887 - val_loss: 2.4328 - val_accuracy: 0.5130\n","\n","Epoch 00549: val_loss did not improve from 0.29450\n","Epoch 550/1000\n"," - 5s - loss: 0.0394 - accuracy: 0.9891 - val_loss: 4.9224 - val_accuracy: 0.5049\n","\n","Epoch 00550: val_loss did not improve from 0.29450\n","Epoch 551/1000\n"," - 5s - loss: 0.0360 - accuracy: 0.9919 - val_loss: 2.8092 - val_accuracy: 0.5076\n","\n","Epoch 00551: val_loss did not improve from 0.29450\n","Epoch 552/1000\n"," - 5s - loss: 0.0428 - accuracy: 0.9879 - val_loss: 4.0968 - val_accuracy: 0.5031\n","\n","Epoch 00552: val_loss did not improve from 0.29450\n","Epoch 553/1000\n"," - 5s - loss: 0.0462 - accuracy: 0.9845 - val_loss: 2.6858 - val_accuracy: 0.5045\n","\n","Epoch 00553: val_loss did not improve from 0.29450\n","Epoch 554/1000\n"," - 5s - loss: 0.0410 - accuracy: 0.9883 - val_loss: 1.3553 - val_accuracy: 0.5098\n","\n","Epoch 00554: val_loss did not improve from 0.29450\n","Epoch 555/1000\n"," - 5s - loss: 0.0418 - accuracy: 0.9875 - val_loss: 1.6683 - val_accuracy: 0.5027\n","\n","Epoch 00555: val_loss did not improve from 0.29450\n","Epoch 556/1000\n"," - 5s - loss: 0.0412 - accuracy: 0.9881 - val_loss: 1.6611 - val_accuracy: 0.5152\n","\n","Epoch 00556: val_loss did not improve from 0.29450\n","Epoch 557/1000\n"," - 5s - loss: 0.0404 - accuracy: 0.9893 - val_loss: 4.0385 - val_accuracy: 0.5054\n","\n","Epoch 00557: val_loss did not improve from 0.29450\n","Epoch 558/1000\n"," - 5s - loss: 0.0365 - accuracy: 0.9896 - val_loss: 2.9873 - val_accuracy: 0.5116\n","\n","Epoch 00558: val_loss did not improve from 0.29450\n","Epoch 559/1000\n"," - 5s - loss: 0.0415 - accuracy: 0.9896 - val_loss: 0.8318 - val_accuracy: 0.5103\n","\n","Epoch 00559: val_loss did not improve from 0.29450\n","Epoch 560/1000\n"," - 5s - loss: 0.0401 - accuracy: 0.9885 - val_loss: 2.2165 - val_accuracy: 0.5121\n","\n","Epoch 00560: val_loss did not improve from 0.29450\n","Epoch 561/1000\n"," - 5s - loss: 0.0395 - accuracy: 0.9891 - val_loss: 3.1188 - val_accuracy: 0.5067\n","\n","Epoch 00561: val_loss did not improve from 0.29450\n","Epoch 562/1000\n"," - 5s - loss: 0.0406 - accuracy: 0.9868 - val_loss: 4.4519 - val_accuracy: 0.5175\n","\n","Epoch 00562: val_loss did not improve from 0.29450\n","Epoch 563/1000\n"," - 5s - loss: 0.0376 - accuracy: 0.9893 - val_loss: 3.6023 - val_accuracy: 0.5116\n","\n","Epoch 00563: val_loss did not improve from 0.29450\n","Epoch 564/1000\n"," - 5s - loss: 0.0402 - accuracy: 0.9881 - val_loss: 1.3923 - val_accuracy: 0.5040\n","\n","Epoch 00564: val_loss did not improve from 0.29450\n","Epoch 565/1000\n"," - 5s - loss: 0.0358 - accuracy: 0.9912 - val_loss: 1.2035 - val_accuracy: 0.5036\n","\n","Epoch 00565: val_loss did not improve from 0.29450\n","Epoch 566/1000\n"," - 5s - loss: 0.0437 - accuracy: 0.9858 - val_loss: 1.7416 - val_accuracy: 0.5085\n","\n","Epoch 00566: val_loss did not improve from 0.29450\n","Epoch 567/1000\n"," - 5s - loss: 0.0394 - accuracy: 0.9889 - val_loss: 7.4443 - val_accuracy: 0.5009\n","\n","Epoch 00567: val_loss did not improve from 0.29450\n","Epoch 568/1000\n"," - 5s - loss: 0.0443 - accuracy: 0.9860 - val_loss: 4.9917 - val_accuracy: 0.5022\n","\n","Epoch 00568: val_loss did not improve from 0.29450\n","Epoch 569/1000\n"," - 5s - loss: 0.0374 - accuracy: 0.9898 - val_loss: 3.1007 - val_accuracy: 0.5121\n","\n","Epoch 00569: val_loss did not improve from 0.29450\n","Epoch 570/1000\n"," - 5s - loss: 0.0370 - accuracy: 0.9902 - val_loss: 5.6864 - val_accuracy: 0.5054\n","\n","Epoch 00570: val_loss did not improve from 0.29450\n","Epoch 571/1000\n"," - 5s - loss: 0.0369 - accuracy: 0.9896 - val_loss: 2.6481 - val_accuracy: 0.5098\n","\n","Epoch 00571: val_loss did not improve from 0.29450\n","Epoch 572/1000\n"," - 5s - loss: 0.0346 - accuracy: 0.9912 - val_loss: 2.9570 - val_accuracy: 0.5116\n","\n","Epoch 00572: val_loss did not improve from 0.29450\n","Epoch 573/1000\n"," - 5s - loss: 0.0400 - accuracy: 0.9894 - val_loss: 2.3462 - val_accuracy: 0.5054\n","\n","Epoch 00573: val_loss did not improve from 0.29450\n","Epoch 574/1000\n"," - 5s - loss: 0.0374 - accuracy: 0.9900 - val_loss: 2.3051 - val_accuracy: 0.5090\n","\n","Epoch 00574: val_loss did not improve from 0.29450\n","Epoch 575/1000\n"," - 5s - loss: 0.0387 - accuracy: 0.9883 - val_loss: 5.3806 - val_accuracy: 0.5031\n","\n","Epoch 00575: val_loss did not improve from 0.29450\n","Epoch 576/1000\n"," - 5s - loss: 0.0343 - accuracy: 0.9904 - val_loss: 6.1016 - val_accuracy: 0.5112\n","\n","Epoch 00576: val_loss did not improve from 0.29450\n","Epoch 577/1000\n"," - 5s - loss: 0.0355 - accuracy: 0.9889 - val_loss: 2.8328 - val_accuracy: 0.5072\n","\n","Epoch 00577: val_loss did not improve from 0.29450\n","Epoch 578/1000\n"," - 5s - loss: 0.0374 - accuracy: 0.9906 - val_loss: 2.8317 - val_accuracy: 0.5134\n","\n","Epoch 00578: val_loss did not improve from 0.29450\n","Epoch 579/1000\n"," - 5s - loss: 0.0381 - accuracy: 0.9898 - val_loss: 5.4978 - val_accuracy: 0.5112\n","\n","Epoch 00579: val_loss did not improve from 0.29450\n","Epoch 580/1000\n"," - 5s - loss: 0.0442 - accuracy: 0.9870 - val_loss: 0.6699 - val_accuracy: 0.5076\n","\n","Epoch 00580: val_loss did not improve from 0.29450\n","Epoch 581/1000\n"," - 5s - loss: 0.0390 - accuracy: 0.9879 - val_loss: 2.8531 - val_accuracy: 0.5116\n","\n","Epoch 00581: val_loss did not improve from 0.29450\n","Epoch 582/1000\n"," - 5s - loss: 0.0345 - accuracy: 0.9908 - val_loss: 2.8307 - val_accuracy: 0.5107\n","\n","Epoch 00582: val_loss did not improve from 0.29450\n","Epoch 583/1000\n"," - 5s - loss: 0.0380 - accuracy: 0.9894 - val_loss: 5.9493 - val_accuracy: 0.5040\n","\n","Epoch 00583: val_loss did not improve from 0.29450\n","Epoch 584/1000\n"," - 5s - loss: 0.0418 - accuracy: 0.9871 - val_loss: 3.2998 - val_accuracy: 0.5107\n","\n","Epoch 00584: val_loss did not improve from 0.29450\n","Epoch 585/1000\n"," - 5s - loss: 0.0352 - accuracy: 0.9889 - val_loss: 8.5969 - val_accuracy: 0.5090\n","\n","Epoch 00585: val_loss did not improve from 0.29450\n","Epoch 586/1000\n"," - 5s - loss: 0.0369 - accuracy: 0.9885 - val_loss: 3.6975 - val_accuracy: 0.5081\n","\n","Epoch 00586: val_loss did not improve from 0.29450\n","Epoch 587/1000\n"," - 5s - loss: 0.0315 - accuracy: 0.9923 - val_loss: 4.4493 - val_accuracy: 0.5139\n","\n","Epoch 00587: val_loss did not improve from 0.29450\n","Epoch 588/1000\n"," - 5s - loss: 0.0297 - accuracy: 0.9925 - val_loss: 3.2884 - val_accuracy: 0.5076\n","\n","Epoch 00588: val_loss did not improve from 0.29450\n","Epoch 589/1000\n"," - 5s - loss: 0.0329 - accuracy: 0.9908 - val_loss: 0.5110 - val_accuracy: 0.4991\n","\n","Epoch 00589: val_loss did not improve from 0.29450\n","Epoch 590/1000\n"," - 5s - loss: 0.0324 - accuracy: 0.9917 - val_loss: 3.5949 - val_accuracy: 0.5067\n","\n","Epoch 00590: val_loss did not improve from 0.29450\n","Epoch 591/1000\n"," - 5s - loss: 0.0315 - accuracy: 0.9925 - val_loss: 3.7176 - val_accuracy: 0.5004\n","\n","Epoch 00591: val_loss did not improve from 0.29450\n","Epoch 592/1000\n"," - 5s - loss: 0.0331 - accuracy: 0.9914 - val_loss: 4.1167 - val_accuracy: 0.5090\n","\n","Epoch 00592: val_loss did not improve from 0.29450\n","Epoch 593/1000\n"," - 5s - loss: 0.0347 - accuracy: 0.9900 - val_loss: 7.1590 - val_accuracy: 0.5130\n","\n","Epoch 00593: val_loss did not improve from 0.29450\n","Epoch 594/1000\n"," - 5s - loss: 0.0342 - accuracy: 0.9908 - val_loss: 3.8995 - val_accuracy: 0.5157\n","\n","Epoch 00594: val_loss did not improve from 0.29450\n","Epoch 595/1000\n"," - 5s - loss: 0.0322 - accuracy: 0.9931 - val_loss: 3.2340 - val_accuracy: 0.5116\n","\n","Epoch 00595: val_loss did not improve from 0.29450\n","Epoch 596/1000\n"," - 5s - loss: 0.0376 - accuracy: 0.9894 - val_loss: 4.4653 - val_accuracy: 0.5125\n","\n","Epoch 00596: val_loss did not improve from 0.29450\n","Epoch 597/1000\n"," - 5s - loss: 0.0298 - accuracy: 0.9933 - val_loss: 4.4281 - val_accuracy: 0.5027\n","\n","Epoch 00597: val_loss did not improve from 0.29450\n","Epoch 598/1000\n"," - 5s - loss: 0.0309 - accuracy: 0.9927 - val_loss: 7.2682 - val_accuracy: 0.5139\n","\n","Epoch 00598: val_loss did not improve from 0.29450\n","Epoch 599/1000\n"," - 5s - loss: 0.0366 - accuracy: 0.9891 - val_loss: 5.0778 - val_accuracy: 0.5134\n","\n","Epoch 00599: val_loss did not improve from 0.29450\n","Epoch 600/1000\n"," - 5s - loss: 0.0342 - accuracy: 0.9896 - val_loss: 5.6858 - val_accuracy: 0.5107\n","\n","Epoch 00600: val_loss did not improve from 0.29450\n","Epoch 601/1000\n"," - 5s - loss: 0.0364 - accuracy: 0.9910 - val_loss: 1.7088 - val_accuracy: 0.5139\n","\n","Epoch 00601: val_loss did not improve from 0.29450\n","Epoch 602/1000\n"," - 5s - loss: 0.0371 - accuracy: 0.9896 - val_loss: 3.2801 - val_accuracy: 0.5045\n","\n","Epoch 00602: val_loss did not improve from 0.29450\n","Epoch 603/1000\n"," - 5s - loss: 0.0297 - accuracy: 0.9908 - val_loss: 7.0648 - val_accuracy: 0.4987\n","\n","Epoch 00603: val_loss did not improve from 0.29450\n","Epoch 604/1000\n"," - 5s - loss: 0.0340 - accuracy: 0.9900 - val_loss: 6.5631 - val_accuracy: 0.5072\n","\n","Epoch 00604: val_loss did not improve from 0.29450\n","Epoch 605/1000\n"," - 5s - loss: 0.0343 - accuracy: 0.9898 - val_loss: 3.6624 - val_accuracy: 0.5067\n","\n","Epoch 00605: val_loss did not improve from 0.29450\n","Epoch 606/1000\n"," - 5s - loss: 0.0325 - accuracy: 0.9900 - val_loss: 4.3245 - val_accuracy: 0.5112\n","\n","Epoch 00606: val_loss did not improve from 0.29450\n","Epoch 607/1000\n"," - 5s - loss: 0.0327 - accuracy: 0.9908 - val_loss: 2.7846 - val_accuracy: 0.5116\n","\n","Epoch 00607: val_loss did not improve from 0.29450\n","Epoch 608/1000\n"," - 5s - loss: 0.0295 - accuracy: 0.9929 - val_loss: 4.3718 - val_accuracy: 0.5013\n","\n","Epoch 00608: val_loss did not improve from 0.29450\n","Epoch 609/1000\n"," - 5s - loss: 0.0301 - accuracy: 0.9923 - val_loss: 2.9001 - val_accuracy: 0.5063\n","\n","Epoch 00609: val_loss did not improve from 0.29450\n","Epoch 610/1000\n"," - 5s - loss: 0.0291 - accuracy: 0.9935 - val_loss: 7.4931 - val_accuracy: 0.5098\n","\n","Epoch 00610: val_loss did not improve from 0.29450\n","Epoch 611/1000\n"," - 5s - loss: 0.0356 - accuracy: 0.9898 - val_loss: 6.6858 - val_accuracy: 0.5130\n","\n","Epoch 00611: val_loss did not improve from 0.29450\n","Epoch 612/1000\n"," - 5s - loss: 0.0267 - accuracy: 0.9929 - val_loss: 3.8754 - val_accuracy: 0.5179\n","\n","Epoch 00612: val_loss did not improve from 0.29450\n","Epoch 613/1000\n"," - 5s - loss: 0.0307 - accuracy: 0.9929 - val_loss: 2.9415 - val_accuracy: 0.5152\n","\n","Epoch 00613: val_loss did not improve from 0.29450\n","Epoch 614/1000\n"," - 5s - loss: 0.0300 - accuracy: 0.9917 - val_loss: 6.9974 - val_accuracy: 0.5148\n","\n","Epoch 00614: val_loss did not improve from 0.29450\n","Epoch 615/1000\n"," - 5s - loss: 0.0306 - accuracy: 0.9912 - val_loss: 4.4524 - val_accuracy: 0.5125\n","\n","Epoch 00615: val_loss did not improve from 0.29450\n","Epoch 616/1000\n"," - 5s - loss: 0.0338 - accuracy: 0.9900 - val_loss: 5.7925 - val_accuracy: 0.5090\n","\n","Epoch 00616: val_loss did not improve from 0.29450\n","Epoch 617/1000\n"," - 5s - loss: 0.0287 - accuracy: 0.9919 - val_loss: 5.8849 - val_accuracy: 0.5107\n","\n","Epoch 00617: val_loss did not improve from 0.29450\n","Epoch 618/1000\n"," - 5s - loss: 0.0293 - accuracy: 0.9927 - val_loss: 2.5868 - val_accuracy: 0.5085\n","\n","Epoch 00618: val_loss did not improve from 0.29450\n","Epoch 619/1000\n"," - 5s - loss: 0.0307 - accuracy: 0.9917 - val_loss: 4.6030 - val_accuracy: 0.5085\n","\n","Epoch 00619: val_loss did not improve from 0.29450\n","Epoch 620/1000\n"," - 5s - loss: 0.0291 - accuracy: 0.9919 - val_loss: 8.0041 - val_accuracy: 0.5139\n","\n","Epoch 00620: val_loss did not improve from 0.29450\n","Epoch 621/1000\n"," - 5s - loss: 0.0293 - accuracy: 0.9921 - val_loss: 4.7028 - val_accuracy: 0.5188\n","\n","Epoch 00621: val_loss did not improve from 0.29450\n","Epoch 622/1000\n"," - 5s - loss: 0.0318 - accuracy: 0.9919 - val_loss: 2.0066 - val_accuracy: 0.5058\n","\n","Epoch 00622: val_loss did not improve from 0.29450\n","Epoch 623/1000\n"," - 5s - loss: 0.0346 - accuracy: 0.9885 - val_loss: 7.0421 - val_accuracy: 0.5116\n","\n","Epoch 00623: val_loss did not improve from 0.29450\n","Epoch 624/1000\n"," - 5s - loss: 0.0304 - accuracy: 0.9904 - val_loss: 3.3122 - val_accuracy: 0.5058\n","\n","Epoch 00624: val_loss did not improve from 0.29450\n","Epoch 625/1000\n"," - 5s - loss: 0.0289 - accuracy: 0.9923 - val_loss: 3.9317 - val_accuracy: 0.5022\n","\n","Epoch 00625: val_loss did not improve from 0.29450\n","Epoch 626/1000\n"," - 5s - loss: 0.0317 - accuracy: 0.9931 - val_loss: 4.1767 - val_accuracy: 0.5134\n","\n","Epoch 00626: val_loss did not improve from 0.29450\n","Epoch 627/1000\n"," - 5s - loss: 0.0371 - accuracy: 0.9900 - val_loss: 3.5174 - val_accuracy: 0.5067\n","\n","Epoch 00627: val_loss did not improve from 0.29450\n","Epoch 628/1000\n"," - 5s - loss: 0.0272 - accuracy: 0.9927 - val_loss: 4.5706 - val_accuracy: 0.5072\n","\n","Epoch 00628: val_loss did not improve from 0.29450\n","Epoch 629/1000\n"," - 5s - loss: 0.0272 - accuracy: 0.9942 - val_loss: 2.2225 - val_accuracy: 0.5098\n","\n","Epoch 00629: val_loss did not improve from 0.29450\n","Epoch 630/1000\n"," - 5s - loss: 0.0321 - accuracy: 0.9896 - val_loss: 0.2165 - val_accuracy: 0.5112\n","\n","Epoch 00630: val_loss improved from 0.29450 to 0.21645, saving model to /content/drive/My Drive/Colab Notebooks/Project_Stock/ckpt/classifier_45_close_updown_pr_theta_train_2prevdata.h5\n","Epoch 631/1000\n"," - 5s - loss: 0.0257 - accuracy: 0.9941 - val_loss: 5.7229 - val_accuracy: 0.5031\n","\n","Epoch 00631: val_loss did not improve from 0.21645\n","Epoch 632/1000\n"," - 5s - loss: 0.0350 - accuracy: 0.9906 - val_loss: 4.2895 - val_accuracy: 0.5018\n","\n","Epoch 00632: val_loss did not improve from 0.21645\n","Epoch 633/1000\n"," - 5s - loss: 0.0296 - accuracy: 0.9919 - val_loss: 3.2765 - val_accuracy: 0.5036\n","\n","Epoch 00633: val_loss did not improve from 0.21645\n","Epoch 634/1000\n"," - 5s - loss: 0.0317 - accuracy: 0.9917 - val_loss: 0.7546 - val_accuracy: 0.5058\n","\n","Epoch 00634: val_loss did not improve from 0.21645\n","Epoch 635/1000\n"," - 5s - loss: 0.0272 - accuracy: 0.9942 - val_loss: 1.8863 - val_accuracy: 0.5139\n","\n","Epoch 00635: val_loss did not improve from 0.21645\n","Epoch 636/1000\n"," - 5s - loss: 0.0285 - accuracy: 0.9916 - val_loss: 3.9543 - val_accuracy: 0.5134\n","\n","Epoch 00636: val_loss did not improve from 0.21645\n","Epoch 637/1000\n"," - 5s - loss: 0.0275 - accuracy: 0.9933 - val_loss: 2.9573 - val_accuracy: 0.5098\n","\n","Epoch 00637: val_loss did not improve from 0.21645\n","Epoch 638/1000\n"," - 5s - loss: 0.0240 - accuracy: 0.9941 - val_loss: 2.2946 - val_accuracy: 0.5112\n","\n","Epoch 00638: val_loss did not improve from 0.21645\n","Epoch 639/1000\n"," - 5s - loss: 0.0320 - accuracy: 0.9919 - val_loss: 2.3357 - val_accuracy: 0.5112\n","\n","Epoch 00639: val_loss did not improve from 0.21645\n","Epoch 640/1000\n"," - 5s - loss: 0.0306 - accuracy: 0.9912 - val_loss: 1.2332 - val_accuracy: 0.5067\n","\n","Epoch 00640: val_loss did not improve from 0.21645\n","Epoch 641/1000\n"," - 5s - loss: 0.0283 - accuracy: 0.9931 - val_loss: 5.9382 - val_accuracy: 0.5076\n","\n","Epoch 00641: val_loss did not improve from 0.21645\n","Epoch 642/1000\n"," - 5s - loss: 0.0271 - accuracy: 0.9925 - val_loss: 2.2143 - val_accuracy: 0.5103\n","\n","Epoch 00642: val_loss did not improve from 0.21645\n","Epoch 643/1000\n"," - 5s - loss: 0.0256 - accuracy: 0.9935 - val_loss: 4.4607 - val_accuracy: 0.5081\n","\n","Epoch 00643: val_loss did not improve from 0.21645\n","Epoch 644/1000\n"," - 5s - loss: 0.0319 - accuracy: 0.9894 - val_loss: 2.5722 - val_accuracy: 0.4996\n","\n","Epoch 00644: val_loss did not improve from 0.21645\n","Epoch 645/1000\n"," - 5s - loss: 0.0318 - accuracy: 0.9900 - val_loss: 0.1054 - val_accuracy: 0.5148\n","\n","Epoch 00645: val_loss improved from 0.21645 to 0.10541, saving model to /content/drive/My Drive/Colab Notebooks/Project_Stock/ckpt/classifier_45_close_updown_pr_theta_train_2prevdata.h5\n","Epoch 646/1000\n"," - 5s - loss: 0.0237 - accuracy: 0.9964 - val_loss: 5.4781 - val_accuracy: 0.5116\n","\n","Epoch 00646: val_loss did not improve from 0.10541\n","Epoch 647/1000\n"," - 5s - loss: 0.0230 - accuracy: 0.9962 - val_loss: 5.8483 - val_accuracy: 0.5107\n","\n","Epoch 00647: val_loss did not improve from 0.10541\n","Epoch 648/1000\n"," - 5s - loss: 0.0234 - accuracy: 0.9950 - val_loss: 6.4267 - val_accuracy: 0.5112\n","\n","Epoch 00648: val_loss did not improve from 0.10541\n","Epoch 649/1000\n"," - 5s - loss: 0.0239 - accuracy: 0.9939 - val_loss: 6.0782 - val_accuracy: 0.5157\n","\n","Epoch 00649: val_loss did not improve from 0.10541\n","Epoch 650/1000\n"," - 5s - loss: 0.0245 - accuracy: 0.9933 - val_loss: 5.0290 - val_accuracy: 0.5152\n","\n","Epoch 00650: val_loss did not improve from 0.10541\n","Epoch 651/1000\n"," - 5s - loss: 0.0312 - accuracy: 0.9912 - val_loss: 3.1839 - val_accuracy: 0.5116\n","\n","Epoch 00651: val_loss did not improve from 0.10541\n","Epoch 652/1000\n"," - 5s - loss: 0.0264 - accuracy: 0.9923 - val_loss: 2.8692 - val_accuracy: 0.5049\n","\n","Epoch 00652: val_loss did not improve from 0.10541\n","Epoch 653/1000\n"," - 5s - loss: 0.0279 - accuracy: 0.9925 - val_loss: 4.1862 - val_accuracy: 0.4982\n","\n","Epoch 00653: val_loss did not improve from 0.10541\n","Epoch 654/1000\n"," - 5s - loss: 0.0248 - accuracy: 0.9946 - val_loss: 4.4100 - val_accuracy: 0.5098\n","\n","Epoch 00654: val_loss did not improve from 0.10541\n","Epoch 655/1000\n"," - 5s - loss: 0.0293 - accuracy: 0.9917 - val_loss: 3.5694 - val_accuracy: 0.4996\n","\n","Epoch 00655: val_loss did not improve from 0.10541\n","Epoch 656/1000\n"," - 5s - loss: 0.0275 - accuracy: 0.9925 - val_loss: 3.8141 - val_accuracy: 0.5054\n","\n","Epoch 00656: val_loss did not improve from 0.10541\n","Epoch 657/1000\n"," - 5s - loss: 0.0243 - accuracy: 0.9939 - val_loss: 5.8428 - val_accuracy: 0.5076\n","\n","Epoch 00657: val_loss did not improve from 0.10541\n","Epoch 658/1000\n"," - 5s - loss: 0.0293 - accuracy: 0.9921 - val_loss: 3.0425 - val_accuracy: 0.5094\n","\n","Epoch 00658: val_loss did not improve from 0.10541\n","Epoch 659/1000\n"," - 5s - loss: 0.0260 - accuracy: 0.9925 - val_loss: 5.7033 - val_accuracy: 0.5054\n","\n","Epoch 00659: val_loss did not improve from 0.10541\n","Epoch 660/1000\n"," - 5s - loss: 0.0320 - accuracy: 0.9914 - val_loss: 6.9723 - val_accuracy: 0.5054\n","\n","Epoch 00660: val_loss did not improve from 0.10541\n","Epoch 661/1000\n"," - 5s - loss: 0.0265 - accuracy: 0.9954 - val_loss: 4.1090 - val_accuracy: 0.5067\n","\n","Epoch 00661: val_loss did not improve from 0.10541\n","Epoch 662/1000\n"," - 5s - loss: 0.0267 - accuracy: 0.9914 - val_loss: 8.8417 - val_accuracy: 0.5121\n","\n","Epoch 00662: val_loss did not improve from 0.10541\n","Epoch 663/1000\n"," - 5s - loss: 0.0238 - accuracy: 0.9944 - val_loss: 5.0139 - val_accuracy: 0.5081\n","\n","Epoch 00663: val_loss did not improve from 0.10541\n","Epoch 664/1000\n"," - 5s - loss: 0.0244 - accuracy: 0.9935 - val_loss: 4.4810 - val_accuracy: 0.5094\n","\n","Epoch 00664: val_loss did not improve from 0.10541\n","Epoch 665/1000\n"," - 5s - loss: 0.0206 - accuracy: 0.9946 - val_loss: 5.8771 - val_accuracy: 0.5125\n","\n","Epoch 00665: val_loss did not improve from 0.10541\n","Epoch 666/1000\n"," - 5s - loss: 0.0301 - accuracy: 0.9908 - val_loss: 1.1211 - val_accuracy: 0.5121\n","\n","Epoch 00666: val_loss did not improve from 0.10541\n","Epoch 667/1000\n"," - 5s - loss: 0.0230 - accuracy: 0.9948 - val_loss: 1.6695 - val_accuracy: 0.5085\n","\n","Epoch 00667: val_loss did not improve from 0.10541\n","Epoch 668/1000\n"," - 5s - loss: 0.0222 - accuracy: 0.9954 - val_loss: 4.9923 - val_accuracy: 0.5085\n","\n","Epoch 00668: val_loss did not improve from 0.10541\n","Epoch 669/1000\n"," - 5s - loss: 0.0256 - accuracy: 0.9931 - val_loss: 5.6051 - val_accuracy: 0.5134\n","\n","Epoch 00669: val_loss did not improve from 0.10541\n","Epoch 670/1000\n"," - 5s - loss: 0.0292 - accuracy: 0.9914 - val_loss: 4.2937 - val_accuracy: 0.5157\n","\n","Epoch 00670: val_loss did not improve from 0.10541\n","Epoch 671/1000\n"," - 5s - loss: 0.0231 - accuracy: 0.9942 - val_loss: 3.2307 - val_accuracy: 0.5058\n","\n","Epoch 00671: val_loss did not improve from 0.10541\n","Epoch 672/1000\n"," - 5s - loss: 0.0247 - accuracy: 0.9933 - val_loss: 5.9761 - val_accuracy: 0.5036\n","\n","Epoch 00672: val_loss did not improve from 0.10541\n","Epoch 673/1000\n"," - 5s - loss: 0.0264 - accuracy: 0.9923 - val_loss: 5.1934 - val_accuracy: 0.5112\n","\n","Epoch 00673: val_loss did not improve from 0.10541\n","Epoch 674/1000\n"," - 5s - loss: 0.0259 - accuracy: 0.9925 - val_loss: 5.0322 - val_accuracy: 0.5004\n","\n","Epoch 00674: val_loss did not improve from 0.10541\n","Epoch 675/1000\n"," - 5s - loss: 0.0252 - accuracy: 0.9937 - val_loss: 4.0705 - val_accuracy: 0.5116\n","\n","Epoch 00675: val_loss did not improve from 0.10541\n","Epoch 676/1000\n"," - 5s - loss: 0.0235 - accuracy: 0.9939 - val_loss: 4.8328 - val_accuracy: 0.5170\n","\n","Epoch 00676: val_loss did not improve from 0.10541\n","Epoch 677/1000\n"," - 5s - loss: 0.0250 - accuracy: 0.9942 - val_loss: 2.5505 - val_accuracy: 0.5112\n","\n","Epoch 00677: val_loss did not improve from 0.10541\n","Epoch 678/1000\n"," - 5s - loss: 0.0224 - accuracy: 0.9935 - val_loss: 5.3131 - val_accuracy: 0.5179\n","\n","Epoch 00678: val_loss did not improve from 0.10541\n","Epoch 679/1000\n"," - 5s - loss: 0.0260 - accuracy: 0.9919 - val_loss: 0.8107 - val_accuracy: 0.5116\n","\n","Epoch 00679: val_loss did not improve from 0.10541\n","Epoch 680/1000\n"," - 5s - loss: 0.0258 - accuracy: 0.9933 - val_loss: 1.4926 - val_accuracy: 0.5116\n","\n","Epoch 00680: val_loss did not improve from 0.10541\n","Epoch 681/1000\n"," - 5s - loss: 0.0226 - accuracy: 0.9950 - val_loss: 2.5846 - val_accuracy: 0.5027\n","\n","Epoch 00681: val_loss did not improve from 0.10541\n","Epoch 682/1000\n"," - 5s - loss: 0.0210 - accuracy: 0.9950 - val_loss: 5.4297 - val_accuracy: 0.5157\n","\n","Epoch 00682: val_loss did not improve from 0.10541\n","Epoch 683/1000\n"," - 5s - loss: 0.0191 - accuracy: 0.9956 - val_loss: 10.1291 - val_accuracy: 0.5081\n","\n","Epoch 00683: val_loss did not improve from 0.10541\n","Epoch 684/1000\n"," - 5s - loss: 0.0219 - accuracy: 0.9948 - val_loss: 3.7180 - val_accuracy: 0.5130\n","\n","Epoch 00684: val_loss did not improve from 0.10541\n","Epoch 685/1000\n"," - 5s - loss: 0.0245 - accuracy: 0.9927 - val_loss: 6.4526 - val_accuracy: 0.5116\n","\n","Epoch 00685: val_loss did not improve from 0.10541\n","Epoch 686/1000\n"," - 5s - loss: 0.0248 - accuracy: 0.9927 - val_loss: 4.6185 - val_accuracy: 0.5152\n","\n","Epoch 00686: val_loss did not improve from 0.10541\n","Epoch 687/1000\n"," - 5s - loss: 0.0217 - accuracy: 0.9948 - val_loss: 7.3005 - val_accuracy: 0.5125\n","\n","Epoch 00687: val_loss did not improve from 0.10541\n","Epoch 688/1000\n"," - 5s - loss: 0.0233 - accuracy: 0.9937 - val_loss: 4.8771 - val_accuracy: 0.5103\n","\n","Epoch 00688: val_loss did not improve from 0.10541\n","Epoch 689/1000\n"," - 5s - loss: 0.0198 - accuracy: 0.9960 - val_loss: 1.0050 - val_accuracy: 0.5112\n","\n","Epoch 00689: val_loss did not improve from 0.10541\n","Epoch 690/1000\n"," - 5s - loss: 0.0275 - accuracy: 0.9914 - val_loss: 8.3755 - val_accuracy: 0.5148\n","\n","Epoch 00690: val_loss did not improve from 0.10541\n","Epoch 691/1000\n"," - 5s - loss: 0.0232 - accuracy: 0.9933 - val_loss: 4.5754 - val_accuracy: 0.5036\n","\n","Epoch 00691: val_loss did not improve from 0.10541\n","Epoch 692/1000\n"," - 5s - loss: 0.0211 - accuracy: 0.9942 - val_loss: 3.1839 - val_accuracy: 0.5125\n","\n","Epoch 00692: val_loss did not improve from 0.10541\n","Epoch 693/1000\n"," - 5s - loss: 0.0281 - accuracy: 0.9927 - val_loss: 0.8735 - val_accuracy: 0.5116\n","\n","Epoch 00693: val_loss did not improve from 0.10541\n","Epoch 694/1000\n"," - 5s - loss: 0.0182 - accuracy: 0.9965 - val_loss: 1.4885 - val_accuracy: 0.5134\n","\n","Epoch 00694: val_loss did not improve from 0.10541\n","Epoch 695/1000\n"," - 5s - loss: 0.0227 - accuracy: 0.9937 - val_loss: 2.3361 - val_accuracy: 0.5192\n","\n","Epoch 00695: val_loss did not improve from 0.10541\n","Epoch 696/1000\n"," - 5s - loss: 0.0212 - accuracy: 0.9942 - val_loss: 0.3988 - val_accuracy: 0.5098\n","\n","Epoch 00696: val_loss did not improve from 0.10541\n","Epoch 697/1000\n"," - 5s - loss: 0.0209 - accuracy: 0.9956 - val_loss: 4.5301 - val_accuracy: 0.5152\n","\n","Epoch 00697: val_loss did not improve from 0.10541\n","Epoch 698/1000\n"," - 5s - loss: 0.0186 - accuracy: 0.9960 - val_loss: 8.0165 - val_accuracy: 0.5166\n","\n","Epoch 00698: val_loss did not improve from 0.10541\n","Epoch 699/1000\n"," - 5s - loss: 0.0204 - accuracy: 0.9952 - val_loss: 4.3935 - val_accuracy: 0.5134\n","\n","Epoch 00699: val_loss did not improve from 0.10541\n","Epoch 700/1000\n"," - 5s - loss: 0.0241 - accuracy: 0.9942 - val_loss: 2.5498 - val_accuracy: 0.5094\n","\n","Epoch 00700: val_loss did not improve from 0.10541\n","Epoch 701/1000\n"," - 5s - loss: 0.0208 - accuracy: 0.9956 - val_loss: 4.8583 - val_accuracy: 0.5134\n","\n","Epoch 00701: val_loss did not improve from 0.10541\n","Epoch 702/1000\n"," - 5s - loss: 0.0241 - accuracy: 0.9944 - val_loss: 5.2292 - val_accuracy: 0.5103\n","\n","Epoch 00702: val_loss did not improve from 0.10541\n","Epoch 703/1000\n"," - 5s - loss: 0.0217 - accuracy: 0.9944 - val_loss: 3.3336 - val_accuracy: 0.5090\n","\n","Epoch 00703: val_loss did not improve from 0.10541\n","Epoch 704/1000\n"," - 5s - loss: 0.0246 - accuracy: 0.9910 - val_loss: 7.0988 - val_accuracy: 0.5161\n","\n","Epoch 00704: val_loss did not improve from 0.10541\n","Epoch 705/1000\n"," - 5s - loss: 0.0213 - accuracy: 0.9941 - val_loss: 3.1907 - val_accuracy: 0.5090\n","\n","Epoch 00705: val_loss did not improve from 0.10541\n","Epoch 706/1000\n"," - 5s - loss: 0.0235 - accuracy: 0.9931 - val_loss: 4.4865 - val_accuracy: 0.5112\n","\n","Epoch 00706: val_loss did not improve from 0.10541\n","Epoch 707/1000\n"," - 5s - loss: 0.0190 - accuracy: 0.9946 - val_loss: 4.9345 - val_accuracy: 0.5085\n","\n","Epoch 00707: val_loss did not improve from 0.10541\n","Epoch 708/1000\n"," - 5s - loss: 0.0190 - accuracy: 0.9942 - val_loss: 7.6499 - val_accuracy: 0.5161\n","\n","Epoch 00708: val_loss did not improve from 0.10541\n","Epoch 709/1000\n"," - 5s - loss: 0.0215 - accuracy: 0.9941 - val_loss: 4.2194 - val_accuracy: 0.5063\n","\n","Epoch 00709: val_loss did not improve from 0.10541\n","Epoch 710/1000\n"," - 5s - loss: 0.0263 - accuracy: 0.9927 - val_loss: 4.0070 - val_accuracy: 0.5081\n","\n","Epoch 00710: val_loss did not improve from 0.10541\n","Epoch 711/1000\n"," - 5s - loss: 0.0221 - accuracy: 0.9958 - val_loss: 1.5431 - val_accuracy: 0.5031\n","\n","Epoch 00711: val_loss did not improve from 0.10541\n","Epoch 712/1000\n"," - 5s - loss: 0.0237 - accuracy: 0.9935 - val_loss: 7.5859 - val_accuracy: 0.5206\n","\n","Epoch 00712: val_loss did not improve from 0.10541\n","Epoch 713/1000\n"," - 5s - loss: 0.0181 - accuracy: 0.9958 - val_loss: 0.7550 - val_accuracy: 0.5130\n","\n","Epoch 00713: val_loss did not improve from 0.10541\n","Epoch 714/1000\n"," - 5s - loss: 0.0218 - accuracy: 0.9927 - val_loss: 5.5084 - val_accuracy: 0.5098\n","\n","Epoch 00714: val_loss did not improve from 0.10541\n","Epoch 715/1000\n"," - 5s - loss: 0.0200 - accuracy: 0.9950 - val_loss: 3.3969 - val_accuracy: 0.5063\n","\n","Epoch 00715: val_loss did not improve from 0.10541\n","Epoch 716/1000\n"," - 5s - loss: 0.0236 - accuracy: 0.9941 - val_loss: 3.5538 - val_accuracy: 0.5040\n","\n","Epoch 00716: val_loss did not improve from 0.10541\n","Epoch 717/1000\n"," - 5s - loss: 0.0211 - accuracy: 0.9948 - val_loss: 4.1061 - val_accuracy: 0.5067\n","\n","Epoch 00717: val_loss did not improve from 0.10541\n","Epoch 718/1000\n"," - 5s - loss: 0.0181 - accuracy: 0.9950 - val_loss: 3.2644 - val_accuracy: 0.5121\n","\n","Epoch 00718: val_loss did not improve from 0.10541\n","Epoch 719/1000\n"," - 5s - loss: 0.0190 - accuracy: 0.9954 - val_loss: 1.4777 - val_accuracy: 0.5112\n","\n","Epoch 00719: val_loss did not improve from 0.10541\n","Epoch 720/1000\n"," - 5s - loss: 0.0209 - accuracy: 0.9946 - val_loss: 0.7487 - val_accuracy: 0.5103\n","\n","Epoch 00720: val_loss did not improve from 0.10541\n","Epoch 721/1000\n"," - 5s - loss: 0.0182 - accuracy: 0.9956 - val_loss: 3.2919 - val_accuracy: 0.5040\n","\n","Epoch 00721: val_loss did not improve from 0.10541\n","Epoch 722/1000\n"," - 5s - loss: 0.0226 - accuracy: 0.9929 - val_loss: 4.9428 - val_accuracy: 0.5112\n","\n","Epoch 00722: val_loss did not improve from 0.10541\n","Epoch 723/1000\n"," - 5s - loss: 0.0211 - accuracy: 0.9950 - val_loss: 2.8614 - val_accuracy: 0.5125\n","\n","Epoch 00723: val_loss did not improve from 0.10541\n","Epoch 724/1000\n"," - 5s - loss: 0.0224 - accuracy: 0.9954 - val_loss: 4.1684 - val_accuracy: 0.5027\n","\n","Epoch 00724: val_loss did not improve from 0.10541\n","Epoch 725/1000\n"," - 5s - loss: 0.0207 - accuracy: 0.9946 - val_loss: 5.6315 - val_accuracy: 0.5143\n","\n","Epoch 00725: val_loss did not improve from 0.10541\n","Epoch 726/1000\n"," - 5s - loss: 0.0184 - accuracy: 0.9962 - val_loss: 5.2533 - val_accuracy: 0.5112\n","\n","Epoch 00726: val_loss did not improve from 0.10541\n","Epoch 727/1000\n"," - 5s - loss: 0.0216 - accuracy: 0.9925 - val_loss: 2.7003 - val_accuracy: 0.5157\n","\n","Epoch 00727: val_loss did not improve from 0.10541\n","Epoch 728/1000\n"," - 5s - loss: 0.0170 - accuracy: 0.9956 - val_loss: 2.1475 - val_accuracy: 0.5125\n","\n","Epoch 00728: val_loss did not improve from 0.10541\n","Epoch 729/1000\n"," - 5s - loss: 0.0178 - accuracy: 0.9964 - val_loss: 3.4079 - val_accuracy: 0.5116\n","\n","Epoch 00729: val_loss did not improve from 0.10541\n","Epoch 730/1000\n"," - 5s - loss: 0.0158 - accuracy: 0.9967 - val_loss: 6.8321 - val_accuracy: 0.5054\n","\n","Epoch 00730: val_loss did not improve from 0.10541\n","Epoch 731/1000\n"," - 5s - loss: 0.0218 - accuracy: 0.9944 - val_loss: 3.9473 - val_accuracy: 0.5121\n","\n","Epoch 00731: val_loss did not improve from 0.10541\n","Epoch 732/1000\n"," - 5s - loss: 0.0182 - accuracy: 0.9962 - val_loss: 4.2930 - val_accuracy: 0.5157\n","\n","Epoch 00732: val_loss did not improve from 0.10541\n","Epoch 733/1000\n"," - 5s - loss: 0.0202 - accuracy: 0.9948 - val_loss: 3.2577 - val_accuracy: 0.5157\n","\n","Epoch 00733: val_loss did not improve from 0.10541\n","Epoch 734/1000\n"," - 5s - loss: 0.0194 - accuracy: 0.9944 - val_loss: 3.5210 - val_accuracy: 0.5112\n","\n","Epoch 00734: val_loss did not improve from 0.10541\n","Epoch 735/1000\n"," - 5s - loss: 0.0197 - accuracy: 0.9954 - val_loss: 2.1469 - val_accuracy: 0.5076\n","\n","Epoch 00735: val_loss did not improve from 0.10541\n","Epoch 736/1000\n"," - 5s - loss: 0.0171 - accuracy: 0.9962 - val_loss: 1.1634 - val_accuracy: 0.5125\n","\n","Epoch 00736: val_loss did not improve from 0.10541\n","Epoch 737/1000\n"," - 5s - loss: 0.0192 - accuracy: 0.9948 - val_loss: 2.8835 - val_accuracy: 0.5161\n","\n","Epoch 00737: val_loss did not improve from 0.10541\n","Epoch 738/1000\n"," - 5s - loss: 0.0229 - accuracy: 0.9941 - val_loss: 2.9635 - val_accuracy: 0.5143\n","\n","Epoch 00738: val_loss did not improve from 0.10541\n","Epoch 739/1000\n"," - 5s - loss: 0.0185 - accuracy: 0.9958 - val_loss: 5.5014 - val_accuracy: 0.5072\n","\n","Epoch 00739: val_loss did not improve from 0.10541\n","Epoch 740/1000\n"," - 5s - loss: 0.0196 - accuracy: 0.9954 - val_loss: 1.8478 - val_accuracy: 0.5125\n","\n","Epoch 00740: val_loss did not improve from 0.10541\n","Epoch 741/1000\n"," - 5s - loss: 0.0209 - accuracy: 0.9950 - val_loss: 5.5954 - val_accuracy: 0.5049\n","\n","Epoch 00741: val_loss did not improve from 0.10541\n","Epoch 742/1000\n"," - 5s - loss: 0.0194 - accuracy: 0.9958 - val_loss: 4.9166 - val_accuracy: 0.5090\n","\n","Epoch 00742: val_loss did not improve from 0.10541\n","Epoch 743/1000\n"," - 5s - loss: 0.0148 - accuracy: 0.9977 - val_loss: 2.8975 - val_accuracy: 0.5175\n","\n","Epoch 00743: val_loss did not improve from 0.10541\n","Epoch 744/1000\n"," - 5s - loss: 0.0212 - accuracy: 0.9946 - val_loss: 4.7782 - val_accuracy: 0.5175\n","\n","Epoch 00744: val_loss did not improve from 0.10541\n","Epoch 745/1000\n"," - 5s - loss: 0.0168 - accuracy: 0.9965 - val_loss: 15.4599 - val_accuracy: 0.5107\n","\n","Epoch 00745: val_loss did not improve from 0.10541\n","Epoch 746/1000\n"," - 5s - loss: 0.0232 - accuracy: 0.9933 - val_loss: 4.7075 - val_accuracy: 0.5206\n","\n","Epoch 00746: val_loss did not improve from 0.10541\n","Epoch 747/1000\n"," - 5s - loss: 0.0163 - accuracy: 0.9967 - val_loss: 4.8154 - val_accuracy: 0.5166\n","\n","Epoch 00747: val_loss did not improve from 0.10541\n","Epoch 748/1000\n"," - 5s - loss: 0.0167 - accuracy: 0.9958 - val_loss: 1.8651 - val_accuracy: 0.5175\n","\n","Epoch 00748: val_loss did not improve from 0.10541\n","Epoch 749/1000\n"," - 5s - loss: 0.0206 - accuracy: 0.9939 - val_loss: 6.0397 - val_accuracy: 0.5179\n","\n","Epoch 00749: val_loss did not improve from 0.10541\n","Epoch 750/1000\n"," - 5s - loss: 0.0186 - accuracy: 0.9950 - val_loss: 6.0027 - val_accuracy: 0.5143\n","\n","Epoch 00750: val_loss did not improve from 0.10541\n","Epoch 751/1000\n"," - 5s - loss: 0.0211 - accuracy: 0.9942 - val_loss: 10.2335 - val_accuracy: 0.5116\n","\n","Epoch 00751: val_loss did not improve from 0.10541\n","Epoch 752/1000\n"," - 5s - loss: 0.0207 - accuracy: 0.9942 - val_loss: 5.7540 - val_accuracy: 0.5197\n","\n","Epoch 00752: val_loss did not improve from 0.10541\n","Epoch 753/1000\n"," - 5s - loss: 0.0172 - accuracy: 0.9956 - val_loss: 4.2022 - val_accuracy: 0.5121\n","\n","Epoch 00753: val_loss did not improve from 0.10541\n","Epoch 754/1000\n"," - 5s - loss: 0.0199 - accuracy: 0.9950 - val_loss: 6.2821 - val_accuracy: 0.5157\n","\n","Epoch 00754: val_loss did not improve from 0.10541\n","Epoch 755/1000\n"," - 5s - loss: 0.0168 - accuracy: 0.9956 - val_loss: 4.9837 - val_accuracy: 0.5152\n","\n","Epoch 00755: val_loss did not improve from 0.10541\n","Epoch 756/1000\n"," - 5s - loss: 0.0154 - accuracy: 0.9969 - val_loss: 5.5876 - val_accuracy: 0.5049\n","\n","Epoch 00756: val_loss did not improve from 0.10541\n","Epoch 757/1000\n"," - 5s - loss: 0.0198 - accuracy: 0.9952 - val_loss: 2.9236 - val_accuracy: 0.5112\n","\n","Epoch 00757: val_loss did not improve from 0.10541\n","Epoch 758/1000\n"," - 5s - loss: 0.0169 - accuracy: 0.9969 - val_loss: 1.2376 - val_accuracy: 0.5175\n","\n","Epoch 00758: val_loss did not improve from 0.10541\n","Epoch 759/1000\n"," - 5s - loss: 0.0182 - accuracy: 0.9946 - val_loss: 4.2848 - val_accuracy: 0.5175\n","\n","Epoch 00759: val_loss did not improve from 0.10541\n","Epoch 760/1000\n"," - 5s - loss: 0.0165 - accuracy: 0.9956 - val_loss: 2.5402 - val_accuracy: 0.5175\n","\n","Epoch 00760: val_loss did not improve from 0.10541\n","Epoch 761/1000\n"," - 5s - loss: 0.0154 - accuracy: 0.9967 - val_loss: 2.4684 - val_accuracy: 0.5210\n","\n","Epoch 00761: val_loss did not improve from 0.10541\n","Epoch 762/1000\n"," - 5s - loss: 0.0123 - accuracy: 0.9981 - val_loss: 3.4046 - val_accuracy: 0.5246\n","\n","Epoch 00762: val_loss did not improve from 0.10541\n","Epoch 763/1000\n"," - 5s - loss: 0.0159 - accuracy: 0.9960 - val_loss: 8.3590 - val_accuracy: 0.5157\n","\n","Epoch 00763: val_loss did not improve from 0.10541\n","Epoch 764/1000\n"," - 5s - loss: 0.0160 - accuracy: 0.9973 - val_loss: 4.8572 - val_accuracy: 0.5206\n","\n","Epoch 00764: val_loss did not improve from 0.10541\n","Epoch 765/1000\n"," - 5s - loss: 0.0200 - accuracy: 0.9952 - val_loss: 6.1353 - val_accuracy: 0.5130\n","\n","Epoch 00765: val_loss did not improve from 0.10541\n","Epoch 766/1000\n"," - 5s - loss: 0.0186 - accuracy: 0.9952 - val_loss: 5.4174 - val_accuracy: 0.5152\n","\n","Epoch 00766: val_loss did not improve from 0.10541\n","Epoch 767/1000\n"," - 5s - loss: 0.0161 - accuracy: 0.9965 - val_loss: 5.0087 - val_accuracy: 0.5175\n","\n","Epoch 00767: val_loss did not improve from 0.10541\n","Epoch 768/1000\n"," - 5s - loss: 0.0174 - accuracy: 0.9964 - val_loss: 6.0319 - val_accuracy: 0.5152\n","\n","Epoch 00768: val_loss did not improve from 0.10541\n","Epoch 769/1000\n"," - 5s - loss: 0.0156 - accuracy: 0.9969 - val_loss: 7.0676 - val_accuracy: 0.5152\n","\n","Epoch 00769: val_loss did not improve from 0.10541\n","Epoch 770/1000\n"," - 5s - loss: 0.0177 - accuracy: 0.9960 - val_loss: 4.3048 - val_accuracy: 0.5143\n","\n","Epoch 00770: val_loss did not improve from 0.10541\n","Epoch 771/1000\n"," - 5s - loss: 0.0162 - accuracy: 0.9967 - val_loss: 0.3686 - val_accuracy: 0.5040\n","\n","Epoch 00771: val_loss did not improve from 0.10541\n","Epoch 772/1000\n"," - 5s - loss: 0.0151 - accuracy: 0.9969 - val_loss: 3.2011 - val_accuracy: 0.5116\n","\n","Epoch 00772: val_loss did not improve from 0.10541\n","Epoch 773/1000\n"," - 5s - loss: 0.0196 - accuracy: 0.9935 - val_loss: 4.1123 - val_accuracy: 0.5139\n","\n","Epoch 00773: val_loss did not improve from 0.10541\n","Epoch 774/1000\n"," - 5s - loss: 0.0172 - accuracy: 0.9954 - val_loss: 6.5676 - val_accuracy: 0.5121\n","\n","Epoch 00774: val_loss did not improve from 0.10541\n","Epoch 775/1000\n"," - 5s - loss: 0.0202 - accuracy: 0.9948 - val_loss: 1.9064 - val_accuracy: 0.5179\n","\n","Epoch 00775: val_loss did not improve from 0.10541\n","Epoch 776/1000\n"," - 5s - loss: 0.0161 - accuracy: 0.9964 - val_loss: 8.5228 - val_accuracy: 0.5143\n","\n","Epoch 00776: val_loss did not improve from 0.10541\n","Epoch 777/1000\n"," - 5s - loss: 0.0168 - accuracy: 0.9962 - val_loss: 4.3376 - val_accuracy: 0.5157\n","\n","Epoch 00777: val_loss did not improve from 0.10541\n","Epoch 778/1000\n"," - 5s - loss: 0.0179 - accuracy: 0.9960 - val_loss: 4.9040 - val_accuracy: 0.5076\n","\n","Epoch 00778: val_loss did not improve from 0.10541\n","Epoch 779/1000\n"," - 5s - loss: 0.0172 - accuracy: 0.9962 - val_loss: 7.5798 - val_accuracy: 0.5143\n","\n","Epoch 00779: val_loss did not improve from 0.10541\n","Epoch 780/1000\n"," - 5s - loss: 0.0149 - accuracy: 0.9967 - val_loss: 11.4407 - val_accuracy: 0.5103\n","\n","Epoch 00780: val_loss did not improve from 0.10541\n","Epoch 781/1000\n"," - 5s - loss: 0.0160 - accuracy: 0.9952 - val_loss: 4.7307 - val_accuracy: 0.5175\n","\n","Epoch 00781: val_loss did not improve from 0.10541\n","Epoch 782/1000\n"," - 5s - loss: 0.0169 - accuracy: 0.9962 - val_loss: 3.3725 - val_accuracy: 0.5063\n","\n","Epoch 00782: val_loss did not improve from 0.10541\n","Epoch 783/1000\n"," - 5s - loss: 0.0171 - accuracy: 0.9952 - val_loss: 7.9919 - val_accuracy: 0.5121\n","\n","Epoch 00783: val_loss did not improve from 0.10541\n","Epoch 784/1000\n"," - 5s - loss: 0.0196 - accuracy: 0.9946 - val_loss: 9.3004 - val_accuracy: 0.5121\n","\n","Epoch 00784: val_loss did not improve from 0.10541\n","Epoch 785/1000\n"," - 5s - loss: 0.0183 - accuracy: 0.9956 - val_loss: 3.2893 - val_accuracy: 0.5063\n","\n","Epoch 00785: val_loss did not improve from 0.10541\n","Epoch 786/1000\n"," - 5s - loss: 0.0167 - accuracy: 0.9962 - val_loss: 3.6067 - val_accuracy: 0.5116\n","\n","Epoch 00786: val_loss did not improve from 0.10541\n","Epoch 787/1000\n"," - 5s - loss: 0.0179 - accuracy: 0.9952 - val_loss: 8.8670 - val_accuracy: 0.5107\n","\n","Epoch 00787: val_loss did not improve from 0.10541\n","Epoch 788/1000\n"," - 5s - loss: 0.0142 - accuracy: 0.9977 - val_loss: 1.2646 - val_accuracy: 0.5054\n","\n","Epoch 00788: val_loss did not improve from 0.10541\n","Epoch 789/1000\n"," - 5s - loss: 0.0116 - accuracy: 0.9981 - val_loss: 2.6402 - val_accuracy: 0.5103\n","\n","Epoch 00789: val_loss did not improve from 0.10541\n","Epoch 790/1000\n"," - 5s - loss: 0.0130 - accuracy: 0.9975 - val_loss: 6.3495 - val_accuracy: 0.5134\n","\n","Epoch 00790: val_loss did not improve from 0.10541\n","Epoch 791/1000\n"," - 5s - loss: 0.0131 - accuracy: 0.9977 - val_loss: 4.5095 - val_accuracy: 0.5076\n","\n","Epoch 00791: val_loss did not improve from 0.10541\n","Epoch 792/1000\n"," - 5s - loss: 0.0157 - accuracy: 0.9960 - val_loss: 2.1244 - val_accuracy: 0.5148\n","\n","Epoch 00792: val_loss did not improve from 0.10541\n","Epoch 793/1000\n"," - 5s - loss: 0.0179 - accuracy: 0.9956 - val_loss: 5.6759 - val_accuracy: 0.5116\n","\n","Epoch 00793: val_loss did not improve from 0.10541\n","Epoch 794/1000\n"," - 5s - loss: 0.0146 - accuracy: 0.9973 - val_loss: 1.5461 - val_accuracy: 0.5072\n","\n","Epoch 00794: val_loss did not improve from 0.10541\n","Epoch 795/1000\n"," - 5s - loss: 0.0174 - accuracy: 0.9958 - val_loss: 8.7565 - val_accuracy: 0.5170\n","\n","Epoch 00795: val_loss did not improve from 0.10541\n","Epoch 796/1000\n"," - 5s - loss: 0.0135 - accuracy: 0.9973 - val_loss: 4.0769 - val_accuracy: 0.5085\n","\n","Epoch 00796: val_loss did not improve from 0.10541\n","Epoch 797/1000\n"," - 5s - loss: 0.0152 - accuracy: 0.9971 - val_loss: 5.4796 - val_accuracy: 0.5103\n","\n","Epoch 00797: val_loss did not improve from 0.10541\n","Epoch 798/1000\n"," - 5s - loss: 0.0162 - accuracy: 0.9954 - val_loss: 3.1770 - val_accuracy: 0.5103\n","\n","Epoch 00798: val_loss did not improve from 0.10541\n","Epoch 799/1000\n"," - 5s - loss: 0.0158 - accuracy: 0.9965 - val_loss: 8.3048 - val_accuracy: 0.5116\n","\n","Epoch 00799: val_loss did not improve from 0.10541\n","Epoch 800/1000\n"," - 5s - loss: 0.0139 - accuracy: 0.9973 - val_loss: 3.8534 - val_accuracy: 0.4996\n","\n","Epoch 00800: val_loss did not improve from 0.10541\n","Epoch 801/1000\n"," - 5s - loss: 0.0161 - accuracy: 0.9956 - val_loss: 4.7331 - val_accuracy: 0.5081\n","\n","Epoch 00801: val_loss did not improve from 0.10541\n","Epoch 802/1000\n"," - 5s - loss: 0.0141 - accuracy: 0.9967 - val_loss: 2.8468 - val_accuracy: 0.5152\n","\n","Epoch 00802: val_loss did not improve from 0.10541\n","Epoch 803/1000\n"," - 5s - loss: 0.0161 - accuracy: 0.9967 - val_loss: 3.4035 - val_accuracy: 0.5166\n","\n","Epoch 00803: val_loss did not improve from 0.10541\n","Epoch 804/1000\n"," - 5s - loss: 0.0187 - accuracy: 0.9952 - val_loss: 5.4655 - val_accuracy: 0.5148\n","\n","Epoch 00804: val_loss did not improve from 0.10541\n","Epoch 805/1000\n"," - 5s - loss: 0.0117 - accuracy: 0.9983 - val_loss: 0.8445 - val_accuracy: 0.5085\n","\n","Epoch 00805: val_loss did not improve from 0.10541\n","Epoch 806/1000\n"," - 5s - loss: 0.0130 - accuracy: 0.9975 - val_loss: 4.1796 - val_accuracy: 0.5085\n","\n","Epoch 00806: val_loss did not improve from 0.10541\n","Epoch 807/1000\n"," - 5s - loss: 0.0119 - accuracy: 0.9981 - val_loss: 4.5498 - val_accuracy: 0.5112\n","\n","Epoch 00807: val_loss did not improve from 0.10541\n","Epoch 808/1000\n"," - 5s - loss: 0.0122 - accuracy: 0.9983 - val_loss: 2.5921 - val_accuracy: 0.5063\n","\n","Epoch 00808: val_loss did not improve from 0.10541\n","Epoch 809/1000\n"," - 5s - loss: 0.0132 - accuracy: 0.9971 - val_loss: 3.8650 - val_accuracy: 0.5116\n","\n","Epoch 00809: val_loss did not improve from 0.10541\n","Epoch 810/1000\n"," - 5s - loss: 0.0119 - accuracy: 0.9985 - val_loss: 5.4506 - val_accuracy: 0.5125\n","\n","Epoch 00810: val_loss did not improve from 0.10541\n","Epoch 811/1000\n"," - 5s - loss: 0.0158 - accuracy: 0.9960 - val_loss: 10.4106 - val_accuracy: 0.5094\n","\n","Epoch 00811: val_loss did not improve from 0.10541\n","Epoch 812/1000\n"," - 5s - loss: 0.0187 - accuracy: 0.9964 - val_loss: 7.1902 - val_accuracy: 0.5139\n","\n","Epoch 00812: val_loss did not improve from 0.10541\n","Epoch 813/1000\n"," - 5s - loss: 0.0162 - accuracy: 0.9962 - val_loss: 5.7339 - val_accuracy: 0.5040\n","\n","Epoch 00813: val_loss did not improve from 0.10541\n","Epoch 814/1000\n"," - 5s - loss: 0.0162 - accuracy: 0.9958 - val_loss: 2.4574 - val_accuracy: 0.5107\n","\n","Epoch 00814: val_loss did not improve from 0.10541\n","Epoch 815/1000\n"," - 5s - loss: 0.0154 - accuracy: 0.9958 - val_loss: 5.1527 - val_accuracy: 0.5166\n","\n","Epoch 00815: val_loss did not improve from 0.10541\n","Epoch 816/1000\n"," - 5s - loss: 0.0147 - accuracy: 0.9971 - val_loss: 1.6542 - val_accuracy: 0.5130\n","\n","Epoch 00816: val_loss did not improve from 0.10541\n","Epoch 817/1000\n"," - 5s - loss: 0.0132 - accuracy: 0.9969 - val_loss: 3.9038 - val_accuracy: 0.5125\n","\n","Epoch 00817: val_loss did not improve from 0.10541\n","Epoch 818/1000\n"," - 5s - loss: 0.0152 - accuracy: 0.9967 - val_loss: 9.3982 - val_accuracy: 0.5081\n","\n","Epoch 00818: val_loss did not improve from 0.10541\n","Epoch 819/1000\n"," - 5s - loss: 0.0126 - accuracy: 0.9975 - val_loss: 4.5852 - val_accuracy: 0.5107\n","\n","Epoch 00819: val_loss did not improve from 0.10541\n","Epoch 820/1000\n"," - 5s - loss: 0.0125 - accuracy: 0.9975 - val_loss: 0.1657 - val_accuracy: 0.5054\n","\n","Epoch 00820: val_loss did not improve from 0.10541\n","Epoch 821/1000\n"," - 5s - loss: 0.0158 - accuracy: 0.9952 - val_loss: 7.2729 - val_accuracy: 0.5166\n","\n","Epoch 00821: val_loss did not improve from 0.10541\n","Epoch 822/1000\n"," - 5s - loss: 0.0187 - accuracy: 0.9944 - val_loss: 6.2718 - val_accuracy: 0.5040\n","\n","Epoch 00822: val_loss did not improve from 0.10541\n","Epoch 823/1000\n"," - 5s - loss: 0.0163 - accuracy: 0.9956 - val_loss: 1.5913 - val_accuracy: 0.5188\n","\n","Epoch 00823: val_loss did not improve from 0.10541\n","Epoch 824/1000\n"," - 5s - loss: 0.0154 - accuracy: 0.9960 - val_loss: 5.1784 - val_accuracy: 0.5116\n","\n","Epoch 00824: val_loss did not improve from 0.10541\n","Epoch 825/1000\n"," - 5s - loss: 0.0121 - accuracy: 0.9975 - val_loss: 4.7000 - val_accuracy: 0.5076\n","\n","Epoch 00825: val_loss did not improve from 0.10541\n","Epoch 826/1000\n"," - 5s - loss: 0.0165 - accuracy: 0.9956 - val_loss: 4.4316 - val_accuracy: 0.5107\n","\n","Epoch 00826: val_loss did not improve from 0.10541\n","Epoch 827/1000\n"," - 5s - loss: 0.0128 - accuracy: 0.9973 - val_loss: 8.5038 - val_accuracy: 0.5116\n","\n","Epoch 00827: val_loss did not improve from 0.10541\n","Epoch 828/1000\n"," - 5s - loss: 0.0133 - accuracy: 0.9973 - val_loss: 5.3400 - val_accuracy: 0.5040\n","\n","Epoch 00828: val_loss did not improve from 0.10541\n","Epoch 829/1000\n"," - 5s - loss: 0.0140 - accuracy: 0.9973 - val_loss: 4.4738 - val_accuracy: 0.5112\n","\n","Epoch 00829: val_loss did not improve from 0.10541\n","Epoch 830/1000\n"," - 5s - loss: 0.0151 - accuracy: 0.9965 - val_loss: 4.6133 - val_accuracy: 0.5107\n","\n","Epoch 00830: val_loss did not improve from 0.10541\n","Epoch 831/1000\n"," - 5s - loss: 0.0136 - accuracy: 0.9971 - val_loss: 5.8827 - val_accuracy: 0.5143\n","\n","Epoch 00831: val_loss did not improve from 0.10541\n","Epoch 832/1000\n"," - 5s - loss: 0.0152 - accuracy: 0.9962 - val_loss: 1.6082 - val_accuracy: 0.5179\n","\n","Epoch 00832: val_loss did not improve from 0.10541\n","Epoch 833/1000\n"," - 5s - loss: 0.0149 - accuracy: 0.9962 - val_loss: 6.8875 - val_accuracy: 0.5103\n","\n","Epoch 00833: val_loss did not improve from 0.10541\n","Epoch 834/1000\n"," - 5s - loss: 0.0133 - accuracy: 0.9969 - val_loss: 6.6364 - val_accuracy: 0.5130\n","\n","Epoch 00834: val_loss did not improve from 0.10541\n","Epoch 835/1000\n"," - 5s - loss: 0.0157 - accuracy: 0.9969 - val_loss: 4.4381 - val_accuracy: 0.5139\n","\n","Epoch 00835: val_loss did not improve from 0.10541\n","Epoch 836/1000\n"," - 5s - loss: 0.0141 - accuracy: 0.9973 - val_loss: 5.0927 - val_accuracy: 0.5085\n","\n","Epoch 00836: val_loss did not improve from 0.10541\n","Epoch 837/1000\n"," - 5s - loss: 0.0107 - accuracy: 0.9981 - val_loss: 2.2344 - val_accuracy: 0.5161\n","\n","Epoch 00837: val_loss did not improve from 0.10541\n","Epoch 838/1000\n"," - 5s - loss: 0.0099 - accuracy: 0.9981 - val_loss: 3.8587 - val_accuracy: 0.5152\n","\n","Epoch 00838: val_loss did not improve from 0.10541\n","Epoch 839/1000\n"," - 5s - loss: 0.0160 - accuracy: 0.9960 - val_loss: 4.8981 - val_accuracy: 0.5148\n","\n","Epoch 00839: val_loss did not improve from 0.10541\n","Epoch 840/1000\n"," - 5s - loss: 0.0136 - accuracy: 0.9971 - val_loss: 3.9627 - val_accuracy: 0.5139\n","\n","Epoch 00840: val_loss did not improve from 0.10541\n","Epoch 841/1000\n"," - 5s - loss: 0.0132 - accuracy: 0.9975 - val_loss: 3.3248 - val_accuracy: 0.5188\n","\n","Epoch 00841: val_loss did not improve from 0.10541\n","Epoch 842/1000\n"," - 5s - loss: 0.0131 - accuracy: 0.9977 - val_loss: 1.1267 - val_accuracy: 0.5085\n","\n","Epoch 00842: val_loss did not improve from 0.10541\n","Epoch 843/1000\n"," - 5s - loss: 0.0142 - accuracy: 0.9977 - val_loss: 4.3180 - val_accuracy: 0.5134\n","\n","Epoch 00843: val_loss did not improve from 0.10541\n","Epoch 844/1000\n"," - 5s - loss: 0.0170 - accuracy: 0.9944 - val_loss: 5.7301 - val_accuracy: 0.5094\n","\n","Epoch 00844: val_loss did not improve from 0.10541\n","Epoch 845/1000\n"," - 5s - loss: 0.0149 - accuracy: 0.9967 - val_loss: 3.1230 - val_accuracy: 0.5085\n","\n","Epoch 00845: val_loss did not improve from 0.10541\n","Epoch 846/1000\n"," - 5s - loss: 0.0144 - accuracy: 0.9960 - val_loss: 3.8167 - val_accuracy: 0.5063\n","\n","Epoch 00846: val_loss did not improve from 0.10541\n","Epoch 847/1000\n"," - 5s - loss: 0.0111 - accuracy: 0.9977 - val_loss: 3.8077 - val_accuracy: 0.5170\n","\n","Epoch 00847: val_loss did not improve from 0.10541\n","Epoch 848/1000\n"," - 5s - loss: 0.0117 - accuracy: 0.9981 - val_loss: 7.1268 - val_accuracy: 0.5134\n","\n","Epoch 00848: val_loss did not improve from 0.10541\n","Epoch 849/1000\n"," - 5s - loss: 0.0127 - accuracy: 0.9971 - val_loss: 5.1578 - val_accuracy: 0.5157\n","\n","Epoch 00849: val_loss did not improve from 0.10541\n","Epoch 850/1000\n"," - 5s - loss: 0.0110 - accuracy: 0.9979 - val_loss: 6.7924 - val_accuracy: 0.5125\n","\n","Epoch 00850: val_loss did not improve from 0.10541\n","Epoch 851/1000\n"," - 5s - loss: 0.0089 - accuracy: 0.9988 - val_loss: 2.3262 - val_accuracy: 0.5125\n","\n","Epoch 00851: val_loss did not improve from 0.10541\n","Epoch 852/1000\n"," - 5s - loss: 0.0121 - accuracy: 0.9977 - val_loss: 4.7654 - val_accuracy: 0.5134\n","\n","Epoch 00852: val_loss did not improve from 0.10541\n","Epoch 853/1000\n"," - 5s - loss: 0.0110 - accuracy: 0.9983 - val_loss: 2.9637 - val_accuracy: 0.5143\n","\n","Epoch 00853: val_loss did not improve from 0.10541\n","Epoch 854/1000\n"," - 5s - loss: 0.0102 - accuracy: 0.9975 - val_loss: 4.0218 - val_accuracy: 0.5063\n","\n","Epoch 00854: val_loss did not improve from 0.10541\n","Epoch 855/1000\n"," - 5s - loss: 0.0152 - accuracy: 0.9956 - val_loss: 5.8159 - val_accuracy: 0.5103\n","\n","Epoch 00855: val_loss did not improve from 0.10541\n","Epoch 856/1000\n"," - 5s - loss: 0.0166 - accuracy: 0.9954 - val_loss: 4.1529 - val_accuracy: 0.5197\n","\n","Epoch 00856: val_loss did not improve from 0.10541\n","Epoch 857/1000\n"," - 5s - loss: 0.0174 - accuracy: 0.9941 - val_loss: 6.6488 - val_accuracy: 0.5112\n","\n","Epoch 00857: val_loss did not improve from 0.10541\n","Epoch 858/1000\n"," - 5s - loss: 0.0146 - accuracy: 0.9960 - val_loss: 6.0841 - val_accuracy: 0.5148\n","\n","Epoch 00858: val_loss did not improve from 0.10541\n","Epoch 859/1000\n"," - 5s - loss: 0.0115 - accuracy: 0.9975 - val_loss: 6.7725 - val_accuracy: 0.5067\n","\n","Epoch 00859: val_loss did not improve from 0.10541\n","Epoch 860/1000\n"," - 5s - loss: 0.0097 - accuracy: 0.9985 - val_loss: 5.4878 - val_accuracy: 0.5094\n","\n","Epoch 00860: val_loss did not improve from 0.10541\n","Epoch 861/1000\n"," - 5s - loss: 0.0110 - accuracy: 0.9981 - val_loss: 5.7637 - val_accuracy: 0.5143\n","\n","Epoch 00861: val_loss did not improve from 0.10541\n","Epoch 862/1000\n"," - 5s - loss: 0.0105 - accuracy: 0.9983 - val_loss: 2.3399 - val_accuracy: 0.5130\n","\n","Epoch 00862: val_loss did not improve from 0.10541\n","Epoch 863/1000\n"," - 5s - loss: 0.0122 - accuracy: 0.9977 - val_loss: 4.6376 - val_accuracy: 0.5116\n","\n","Epoch 00863: val_loss did not improve from 0.10541\n","Epoch 864/1000\n"," - 5s - loss: 0.0167 - accuracy: 0.9942 - val_loss: 7.3431 - val_accuracy: 0.5094\n","\n","Epoch 00864: val_loss did not improve from 0.10541\n","Epoch 865/1000\n"," - 5s - loss: 0.0143 - accuracy: 0.9962 - val_loss: 10.6725 - val_accuracy: 0.5130\n","\n","Epoch 00865: val_loss did not improve from 0.10541\n","Epoch 866/1000\n"," - 5s - loss: 0.0114 - accuracy: 0.9965 - val_loss: 4.1519 - val_accuracy: 0.5242\n","\n","Epoch 00866: val_loss did not improve from 0.10541\n","Epoch 867/1000\n"," - 5s - loss: 0.0109 - accuracy: 0.9977 - val_loss: 3.6279 - val_accuracy: 0.5192\n","\n","Epoch 00867: val_loss did not improve from 0.10541\n","Epoch 868/1000\n"," - 5s - loss: 0.0104 - accuracy: 0.9981 - val_loss: 4.1656 - val_accuracy: 0.5219\n","\n","Epoch 00868: val_loss did not improve from 0.10541\n","Epoch 869/1000\n"," - 5s - loss: 0.0102 - accuracy: 0.9983 - val_loss: 4.1119 - val_accuracy: 0.5058\n","\n","Epoch 00869: val_loss did not improve from 0.10541\n","Epoch 870/1000\n"," - 5s - loss: 0.0108 - accuracy: 0.9979 - val_loss: 6.1121 - val_accuracy: 0.5121\n","\n","Epoch 00870: val_loss did not improve from 0.10541\n","Epoch 871/1000\n"," - 5s - loss: 0.0137 - accuracy: 0.9971 - val_loss: 2.7991 - val_accuracy: 0.5094\n","\n","Epoch 00871: val_loss did not improve from 0.10541\n","Epoch 872/1000\n"," - 5s - loss: 0.0101 - accuracy: 0.9983 - val_loss: 4.0803 - val_accuracy: 0.5143\n","\n","Epoch 00872: val_loss did not improve from 0.10541\n","Epoch 873/1000\n"," - 5s - loss: 0.0093 - accuracy: 0.9988 - val_loss: 7.4963 - val_accuracy: 0.5107\n","\n","Epoch 00873: val_loss did not improve from 0.10541\n","Epoch 874/1000\n"," - 5s - loss: 0.0142 - accuracy: 0.9962 - val_loss: 1.9798 - val_accuracy: 0.5009\n","\n","Epoch 00874: val_loss did not improve from 0.10541\n","Epoch 875/1000\n"," - 5s - loss: 0.0122 - accuracy: 0.9962 - val_loss: 4.3982 - val_accuracy: 0.5103\n","\n","Epoch 00875: val_loss did not improve from 0.10541\n","Epoch 876/1000\n"," - 5s - loss: 0.0134 - accuracy: 0.9965 - val_loss: 2.4187 - val_accuracy: 0.5166\n","\n","Epoch 00876: val_loss did not improve from 0.10541\n","Epoch 877/1000\n"],"name":"stdout"},{"output_type":"error","ename":"KeyboardInterrupt","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-11-e59284bfdeb6>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     36\u001b[0m                     \u001b[0mvalidation_data\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mval_flow\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     37\u001b[0m                     \u001b[0mvalidation_steps\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx_val\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m/\u001b[0m \u001b[0mbatch_size\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 38\u001b[0;31m                     shuffle=False)\n\u001b[0m","\u001b[0;32m/tensorflow-1.15.2/python3.7/keras/legacy/interfaces.py\u001b[0m in \u001b[0;36mwrapper\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m     89\u001b[0m                 warnings.warn('Update your `' + object_name + '` call to the ' +\n\u001b[1;32m     90\u001b[0m                               'Keras 2 API: ' + signature, stacklevel=2)\n\u001b[0;32m---> 91\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     92\u001b[0m         \u001b[0mwrapper\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_original_function\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     93\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mwrapper\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/tensorflow-1.15.2/python3.7/keras/engine/training.py\u001b[0m in \u001b[0;36mfit_generator\u001b[0;34m(self, generator, steps_per_epoch, epochs, verbose, callbacks, validation_data, validation_steps, validation_freq, class_weight, max_queue_size, workers, use_multiprocessing, shuffle, initial_epoch)\u001b[0m\n\u001b[1;32m   1730\u001b[0m             \u001b[0muse_multiprocessing\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0muse_multiprocessing\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1731\u001b[0m             \u001b[0mshuffle\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mshuffle\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1732\u001b[0;31m             initial_epoch=initial_epoch)\n\u001b[0m\u001b[1;32m   1733\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1734\u001b[0m     \u001b[0;34m@\u001b[0m\u001b[0minterfaces\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlegacy_generator_methods_support\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/tensorflow-1.15.2/python3.7/keras/engine/training_generator.py\u001b[0m in \u001b[0;36mfit_generator\u001b[0;34m(model, generator, steps_per_epoch, epochs, verbose, callbacks, validation_data, validation_steps, validation_freq, class_weight, max_queue_size, workers, use_multiprocessing, shuffle, initial_epoch)\u001b[0m\n\u001b[1;32m    218\u001b[0m                                             \u001b[0msample_weight\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0msample_weight\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    219\u001b[0m                                             \u001b[0mclass_weight\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mclass_weight\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 220\u001b[0;31m                                             reset_metrics=False)\n\u001b[0m\u001b[1;32m    221\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    222\u001b[0m                 \u001b[0mouts\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mto_list\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mouts\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/tensorflow-1.15.2/python3.7/keras/engine/training.py\u001b[0m in \u001b[0;36mtrain_on_batch\u001b[0;34m(self, x, y, sample_weight, class_weight, reset_metrics)\u001b[0m\n\u001b[1;32m   1512\u001b[0m             \u001b[0mins\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mx\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0my\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0msample_weights\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1513\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_make_train_function\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1514\u001b[0;31m         \u001b[0moutputs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtrain_function\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mins\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1515\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1516\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mreset_metrics\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/tensorflow-1.15.2/python3.7/tensorflow_core/python/keras/backend.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, inputs)\u001b[0m\n\u001b[1;32m   3474\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3475\u001b[0m     fetched = self._callable_fn(*array_vals,\n\u001b[0;32m-> 3476\u001b[0;31m                                 run_metadata=self.run_metadata)\n\u001b[0m\u001b[1;32m   3477\u001b[0m     \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_call_fetch_callbacks\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfetched\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_fetches\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3478\u001b[0m     output_structure = nest.pack_sequence_as(\n","\u001b[0;32m/tensorflow-1.15.2/python3.7/tensorflow_core/python/client/session.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1470\u001b[0m         ret = tf_session.TF_SessionRunCallable(self._session._session,\n\u001b[1;32m   1471\u001b[0m                                                \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_handle\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1472\u001b[0;31m                                                run_metadata_ptr)\n\u001b[0m\u001b[1;32m   1473\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mrun_metadata\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1474\u001b[0m           \u001b[0mproto_data\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtf_session\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mTF_GetBuffer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrun_metadata_ptr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}]},{"cell_type":"code","metadata":{"id":"pfPMGMvm0rGu","executionInfo":{"status":"ok","timestamp":1619252072007,"user_tz":-540,"elapsed":5102,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"}}},"source":["ckpt_path = current_path + 'ckpt/'\n","board_path = current_path + 'graph/'\n","# model_name = 'classifier_45_close_updown_pr_theta_non_shuffle_ex_02008.h5'\n","# model_name = 'classifier_45_close_updown_pr_theta.h5'\n","# model_name = 'classifier_45_close_updown_pr_theta_non_shuffle_0002.h5'\n","\n","model = keras.models.load_model(ckpt_path + model_name)"],"execution_count":12,"outputs":[]},{"cell_type":"code","metadata":{"id":"QlxBTT1tEKkB","executionInfo":{"status":"ok","timestamp":1619252072008,"user_tz":-540,"elapsed":2848,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"}}},"source":["org_x_test = x_test\n","org_y_test = y_test\n","org_pr_test = pr_test"],"execution_count":13,"outputs":[]},{"cell_type":"code","metadata":{"id":"_JS3iA80ExQ6"},"source":["x_test = org_x_test\n","y_test = org_y_test\n","pr_test = org_pr_test"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"d3NzZSrbFgrB"},"source":["concat_x = np.vstack((org_x_test, new_input_x))\n","concat_y = np.vstack((org_y_test, np.where(new_input_pr > 1, 1, 0)))\n","concat_pr = np.vstack((org_pr_test, new_input_pr))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"zhRu2BIK792m","colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"status":"error","timestamp":1619252274071,"user_tz":-540,"elapsed":1743,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"}},"outputId":"b82519ea-a5b1-4901-f701-ece3c5ae7141"},"source":["# x_test = new_input_x\n","# y_test = np.where(new_input_pr > 1, 1, 0)\n","# pr_test = new_input_pr\n","\n","x_test = org_x_test\n","y_test = org_y_test\n","pr_test = org_pr_test\n","\n","# x_test = concat_x\n","# y_test = np.where(concat_pr > 1, 1, 0)\n","# pr_test = concat_pr\n","\n","test_result = model.predict(x_test)\n","# test_result = model.predict(test_set)\n","\n","print('test_result.shape :', test_result.shape)\n","print('pr_val.shape :', pr_val.shape)\n","\n","y_score = test_result[:, [1]]\n","print('y_test[:5] :', y_test.reshape(-1,)[:5])\n","# print('np.unique(y_test) :', np.unique(y_test, return_counts=True))\n","print('y_score[:5] :', y_score[:5])\n","# print('np.unique(y_score) :', np.unique(y_score, return_counts=True))\n","\n","print('y_test.shape :', y_test.shape)\n","print('y_score.shape :', y_score.shape)\n","\n","print('len(y_test) :', len(y_test))\n","\n","#     precision recall curve   #\n","precision, recall, threshold = precision_recall_curve(y_test, y_score)\n","precision, recall = precision[:-1], recall[:-1]\n","\n","plt.plot(threshold, precision, label='precision')\n","plt.plot(threshold, recall, label='recall')\n","plt.legend()\n","plt.title('precision recall')\n","plt.show()\n","# print(y_pred)\n","\n","\n","threshold = [0.98]\n","# print('threshold :', threshold)\n","# break\n","\n","acc_pr_bythr = []\n","new_thresh = []\n","\n","for thresh in threshold:\n","  \n","  if thresh < 0.6:\n","      continue\n","\n","  y_pred = np.where(y_score[:, -1] > thresh, 1, 0)\n","  print('y_pred.shape :', y_pred.shape)\n","  # print('y_pred :', y_pred)\n","\n","  #     compare precision     #\n","\n","  print('precision :', precision_score(y_test, y_pred))\n","  print('recall :', recall_score(y_test, y_pred))\n","  print()\n","\n","  print('np.isnan(np.sum(x_test)) :', np.isnan(np.sum(x_test)))\n","  print('np.isnan(np.sum(y_test)) :', np.isnan(np.sum(y_test)))\n","\n","  # plot_confusion_matrix(best_model, x_test, y_test, normalize=None)\n","  # plt.show()  \n","  print()\n","\n","  #     check win-ratio improvement     #\n","  cmat = confusion_matrix(y_test, y_pred)\n","  # print(cmat)\n","  # print(np.sum(cmat, axis=1))\n","\n","  test_size = len(y_test)\n","  test_pr_list = pr_test\n","  print('origin ac_pr :', np.cumprod(test_pr_list)[-1])\n","\n","  org_wr = np.sum(cmat, axis=1)[-1] / sum(np.sum(cmat, axis=1))\n","  ml_wr = cmat[1][1] / np.sum(cmat, axis=0)[-1]\n","  print('win ratio improvement %.2f --> %.2f' % (org_wr, ml_wr))\n","\n","  # print('pr_test.shape :', pr_test.shape)\n","\n","  # print(y_pred)\n","  # print(test_pr_list)\n","  pred_pr_list = np.where(y_pred == 1, test_pr_list.reshape(-1, ), 1.0)\n","  # print('pred_pr_list.shape :', pred_pr_list.shape)\n","\n","  if np.cumprod(test_pr_list)[-1] < np.cumprod(pred_pr_list)[-1]:\n","    print('accum_pr increased ! : %.3f --> %.3f' % (np.cumprod(test_pr_list)[-1], np.cumprod(pred_pr_list)[-1]))\n","    print('thresh :', thresh)\n","    \n","  # if len(threshold) == 1:\n","    plt.figure(figsize=(10, 5))\n","    plt.subplot(121)\n","    plt.plot(np.cumprod(test_pr_list))\n","    plt.title('%.3f' % (np.cumprod(test_pr_list)[-1]))\n","  # plt.show()\n","\n","    plt.subplot(122)\n","    plt.plot(np.cumprod(pred_pr_list))\n","    plt.title('%.3f' % (np.cumprod(pred_pr_list)[-1]))\n","    plt.axvline(len(org_pr_test), linestyle='--', color='r')\n","    plt.show()\n","\n","\n","  acc_pr_bythr.append(np.cumprod(pred_pr_list)[-1])\n","  new_thresh.append(thresh)\n","\n","\n","print('acc_pr_bythr :', acc_pr_bythr)\n","\n","plt.figure(figsize=(10, 5))\n","plt.subplot(121)\n","plt.plot(threshold, precision, label='precision')\n","plt.plot(threshold, recall, label='recall')\n","plt.legend()\n","plt.title('precision recall')\n","# plt.show()\n","plt.subplot(122)\n","plt.plot(new_thresh, acc_pr_bythr)\n","plt.axhline(np.cumprod(test_pr_list)[-1], linestyle='--', color='r')\n","plt.show()"],"execution_count":15,"outputs":[{"output_type":"stream","text":["test_result.shape : (1353, 2)\n","pr_val.shape : (2234, 1)\n","y_test[:5] : [0 1 1 1 1]\n","y_score[:5] : [[0.0269579 ]\n"," [0.00114121]\n"," [0.00270401]\n"," [0.17396073]\n"," [0.02616436]]\n","y_test.shape : (1353, 1)\n","y_score.shape : (1353, 1)\n","len(y_test) : 1353\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}},{"output_type":"stream","text":["y_pred.shape : (1353,)\n","precision : 0.48402948402948404\n","recall : 0.3141945773524721\n","\n","np.isnan(np.sum(x_test)) : False\n","np.isnan(np.sum(y_test)) : False\n","\n","origin ac_pr : 0.0032289955\n","win ratio improvement 0.46 --> 0.48\n","accum_pr increased ! : 0.003 --> 0.423\n","thresh : 0.98\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 720x360 with 2 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}},{"output_type":"stream","text":["acc_pr_bythr : [0.42275062]\n"],"name":"stdout"},{"output_type":"error","ename":"ValueError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-15-b1aad656d42e>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m    115\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfigure\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfigsize\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m10\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m5\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    116\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msubplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m121\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 117\u001b[0;31m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mthreshold\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mprecision\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabel\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'precision'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    118\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mthreshold\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrecall\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabel\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'recall'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    119\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlegend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/matplotlib/pyplot.py\u001b[0m in \u001b[0;36mplot\u001b[0;34m(scalex, scaley, data, *args, **kwargs)\u001b[0m\n\u001b[1;32m   2761\u001b[0m     return gca().plot(\n\u001b[1;32m   2762\u001b[0m         *args, scalex=scalex, scaley=scaley, **({\"data\": data} if data\n\u001b[0;32m-> 2763\u001b[0;31m         is not None else {}), **kwargs)\n\u001b[0m\u001b[1;32m   2764\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2765\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/matplotlib/axes/_axes.py\u001b[0m in \u001b[0;36mplot\u001b[0;34m(self, scalex, scaley, data, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1645\u001b[0m         \"\"\"\n\u001b[1;32m   1646\u001b[0m         \u001b[0mkwargs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcbook\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnormalize_kwargs\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmlines\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mLine2D\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1647\u001b[0;31m         \u001b[0mlines\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_lines\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1648\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mline\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mlines\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1649\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0madd_line\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mline\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/matplotlib/axes/_base.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m    214\u001b[0m                 \u001b[0mthis\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    215\u001b[0m                 \u001b[0margs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 216\u001b[0;31m             \u001b[0;32myield\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_plot_args\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mthis\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    217\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    218\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mget_next_color\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/matplotlib/axes/_base.py\u001b[0m in \u001b[0;36m_plot_args\u001b[0;34m(self, tup, kwargs)\u001b[0m\n\u001b[1;32m    340\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    341\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 342\u001b[0;31m             raise ValueError(f\"x and y must have same first dimension, but \"\n\u001b[0m\u001b[1;32m    343\u001b[0m                              f\"have shapes {x.shape} and {y.shape}\")\n\u001b[1;32m    344\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mndim\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m2\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mndim\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m2\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: x and y must have same first dimension, but have shapes (1,) and (1263,)"]},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 720x360 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":199},"id":"TP6lH9u8PXPY","executionInfo":{"status":"ok","timestamp":1619160755603,"user_tz":-540,"elapsed":1235,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"}},"outputId":"f4ac5c0d-dcbf-4700-cc38-9e08e2a839de"},"source":["plt.figure(figsize=(50, 5))\n","plt.plot(np.cumprod(pred_pr_list)[len(org_pr_test):len(org_pr_test) + 10])\n","# plt.plot(np.cumprod(pred_pr_list)[len(org_pr_test) - 10:len(org_pr_test) + 10])\n","plt.title('%.3f' % (np.cumprod(pred_pr_list)[-1]))\n","# plt.axvline(len(org_pr_test), linestyle='--', color='r')\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 3600x360 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":276},"id":"yWU2mDnQMVlB","executionInfo":{"status":"ok","timestamp":1619105976180,"user_tz":-540,"elapsed":808,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"}},"outputId":"886f8c79-9b60-45ad-a67c-25183b813779"},"source":["# plt.show()\n","# plt.subplot(122)\n","plt.plot(new_thresh, acc_pr_bythr)\n","plt.axhline(np.cumprod(test_pr_list)[-1], linestyle='--', color='r')\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"-jo3k5MdhFyg"},"source":["#### **clustering output**"]},{"cell_type":"code","metadata":{"id":"njxxm-TJ-RP-"},"source":["# x_train_for_k = test_result.flatten().reshape(-1, 1)\n","x_train_for_k = test_result\n","print(x_train_for_k[:10])\n","# x_train_for_k = test_result[:, [1]]\n","pr_train = pr_test\n","\n","print('x_train_for_k.shape :', x_train_for_k.shape)\n","print('pr_train.shape :', pr_train.shape)\n","\n","K = range(2, 10)\n","s_dist = []\n","sil = []\n","for k in K:\n","  # if cen_data.shape[0] < k:\n","  #   break\n","\n","  km = KMeans(n_clusters=k)\n","  km = km.fit(x_train_for_k)\n","\n","  labels = km.labels_\n","  # print('len(labels) :', len(labels))\n","  # print('labels[:10] :', labels[:10])\n","  sil.append(silhouette_score(x_train_for_k, labels, metric='euclidean'))\n","\n","  # inertia = km.inertia_\n","  # s_dist.append(inertia)\n","\n","best_k = K[np.argmax(np.array(sil))]\n","\n","plt.figure(figsize=(10, 5))\n","plt.plot(K, sil)\n","plt.axvline(best_k, linestyle='--')\n","# plt.plot(K, s_dist)\n","plt.show()\n","\n","\n","\n","\n","\n","#   with best_k, label 별 pr_list 확인\n","km = KMeans(n_clusters=best_k)\n","km = km.fit(x_train_for_k)\n","\n","labels = km.labels_\n","\n","print(km.score(x_train_for_k))\n","print(len(labels), len(pr_train))\n","\n","\n","\n","\n","\n","#   label 별로 profit 을 저장, 승률을 확인한다\n","label_types = np.unique(labels, return_counts=False)\n","\n","label_pr_dict = {}\n","#   init dict   #\n","for label in label_types:\n","  label_pr_dict[label] = []\n","print(label_pr_dict)\n","# break\n","\n","for i, (label, pr) in enumerate(zip(labels, pr_train)):\n","  label_pr_dict[label].append(pr[0])\n","\n","  \n","# for label in label_types:\n","print(label_pr_dict)\n","\n","\n","\n","\n","\n","def win_ratio(list_x):\n","\n","  win_cnt = np.sum(np.array(list_x) > 1)\n","  return win_cnt / len(list_x)\n","\n","\n","def acc_pr(list_x):\n","\n","  return np.cumprod(np.array(list_x))[-1]\n","\n","\n","for key in label_pr_dict:\n","  \n","  print(key, ':', 'win_ratio : %.2f' % (win_ratio(label_pr_dict[key])), 'acc_pr : %.2f' % (acc_pr(label_pr_dict[key])))\n","\n","\n","\n","\n","\n","#     predict test && test 의 라벨에 따른 win_ratio 확인\n","# test_labels = km.predict(x_test)\n","# # print(test_labels)\n","\n","# label_pr_dict = {}\n","# #   init dict   #\n","# for label in label_types:\n","#   label_pr_dict[label] = []\n","# print(label_pr_dict)\n","# # break\n","\n","# for i, (label, pr) in enumerate(zip(test_labels, pr_test)):\n","#   label_pr_dict[label].append(pr[0])\n","\n","# for key in label_pr_dict:\n","\n","#   print(key, ':', 'win_ratio : %.2f' % (win_ratio(label_pr_dict[key])), 'acc_pr : %.2f' % (acc_pr(label_pr_dict[key])))\n","\n"],"execution_count":null,"outputs":[]}]}