{"cells":[{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"6rmQpzEGXfCw","executionInfo":{"status":"ok","timestamp":1650414175819,"user_tz":-540,"elapsed":23725,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"da074f4c-891b-4b5b-cda9-ed2f68e12e6b"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')\n","\n","import os, sys\n","\n","current_path = '/content/drive/My Drive/Colab Notebooks/JnQ/'\n","\n","os.chdir(current_path)\n","\n","strat_pkg = 'IDE'\n","\n","mpl_finance_path = '/content/drive/My Drive/Colab Notebooks/JnQ/mpl_finance'\n","zigzag_path = '/content/drive/My Drive/Colab Notebooks/JnQ/zigzag'\n","\n","if mpl_finance_path not in sys.path:\n","\n","  try:\n","    sys.path.insert(0, '/content/drive/My Drive/Colab Notebooks/JnQ')\n","    sys.path.insert(0, '/content/drive/My Drive/Colab Notebooks/JnQ/{}'.format(strat_pkg))\n","    sys.path.insert(0, '/content/drive/My Drive/Colab Notebooks/JnQ/funcs')\n","    sys.path.insert(0, mpl_finance_path)\n","    sys.path.insert(0, zigzag_path)\n","    \n","  except Exception as e:\n","    print(e)"]},{"cell_type":"markdown","metadata":{"id":"8uqYv5StTazo"},"source":["# requirements"]},{"cell_type":"code","execution_count":2,"metadata":{"id":"9qGt60DKTZmf","executionInfo":{"status":"ok","timestamp":1650414201562,"user_tz":-540,"elapsed":25748,"user":{"displayName":"7th June","userId":"08178289703395036410"}}},"outputs":[],"source":["#!pip install zigzag --target=$'/content/drive/My Drive/Colab Notebooks/JnQ/zigzag'\n","\n","# !pip install findiff\n","# import nvstrings, nvcategory, cudf\n","# import cuml\n","# import cudf\n","\n","import os\n","from funcs.funcs_idep import *\n","from funcs.funcs_duration_v2 import *\n","from funcs.funcs_plot_check import *\n","from funcs.funcs_pairing import *\n","# from funcs.funcs_ide import *\n","# from funcs.funcs_indicator_candlescore import *\n","from funcs.funcs_indicator import *\n","from funcs.funcs_trader import *\n","from ast import literal_eval\n","import logging\n","import importlib\n","\n","import mpl_finance as mf\n","import matplotlib.pyplot as plt\n","from matplotlib import gridspec\n","# from zigzag import *\n","# from tqdm.notebook import tqdm\n","\n","import IPython\n","import IPython.display\n","\n","import numpy as np\n","# import jax.numpy as np\n","import pandas as pd\n","# import seaborn as sns\n","# import tensorflow as tf\n","from scipy import stats, signal\n","\n","import pickle\n","import shutil\n","import json\n","from easydict import EasyDict\n","import copy\n","\n","import datetime\n","from datetime import datetime\n","import random\n","import time\n","# import warnings\n","\n","# warnings.simplefilter(\"ignore\", category=RuntimeWarning)\n","\n","np.seterr(invalid=\"ignore\")\n","np.set_printoptions(suppress=True)\n","np.set_printoptions(linewidth=2000) \n","\n","pd.set_option('mode.chained_assignment',  None)\n","\n","pd.set_option('display.max_rows', 500)\n","pd.set_option('display.max_columns', 500)\n","pd.set_option('display.width', 1000)"]},{"cell_type":"markdown","metadata":{"id":"Ic1mfmwWCIBu"},"source":["# makeset - with to_htf dataframes"]},{"cell_type":"markdown","metadata":{"id":"AUSBU7T8Suzi"},"source":["## sync_check_make"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"QmhLikYlSuzi"},"outputs":[],"source":["def sync_check_make(df):\n","\n","    make_itv_list = ['3T', '5T', '15T', '30T', 'H', '4H', 'D']\n","    offset_list = ['1h', '1h', '1h', '1h', '1h', '1h', '9h']\n","\n","    assert len(make_itv_list) == len(offset_list), \"length of itv & offset_list should be equal\"\n","        \n","    htf_df_list = [to_htf(df, itv_=itv_, offset=offset_) for itv_, offset_ in zip(make_itv_list, offset_list)]\n","\n","    df_3T, df_5T, df_15T, df_30T, df_H, df_4H, df_D = htf_df_list\n","\n","    for htf_df in htf_df_list:\n","      print(\"{} -> \".format(pd.infer_freq(htf_df.index)), htf_df.tail(1))\n","\n","    # heikinashi_v2(res_df_)\n","    # h_candle_v3(res_df, '5T')\n","\n","    # --------------- wave_range --------------- #\n","    # df = wave_range(df, 20, 40, ltf_df=None, touch_lbperiod=50)\n","\n","    # print(\"wave_range phase done\")\n","\n","\n","    # --------------- cbline --------------- #    \n","    # cloud_bline(df_3T, 20)\n","    # df = df.join(to_lower_tf_v2(df, df_3T, [-1]), how='inner')\n","    # # cloud_bline(df_5T, 20)\n","    # # df = df.join(to_lower_tf_v2(df, df_5T, [-1]), how='inner')\n","    # cloud_bline(df_15T, 20)\n","    # df = df.join(to_lower_tf_v2(df, df_15T, [-1]), how='inner')\n","    # cloud_bline(df_30T, 20)\n","    # df = df.join(to_lower_tf_v2(df, df_30T, [-1]), how='inner')\n","    # cloud_bline(df_H, 20)\n","    # df = df.join(to_lower_tf_v2(df, df_H, [-1]), how='inner')\n","    # cloud_bline(df_4H, 20)\n","    # df = df.join(to_lower_tf_v2(df, df_4H, [-1]), how='inner')\n","\n","    # print(\"cbline phase done\")\n","\n","    # --------------- dc --------------- #  \n","    # df = dc_line(df, df_5T, '5T')\n","    # df = dc_line(df, df_15T, '15T')\n","    df = dc_line_v2(df, df_H, 'H', dc_period=5)\n","\n","    print(\"dc phase done\")\n","\n","    # --------------- bb --------------- #  \n","    # df = bb_width_v2(df, period, multiple)\n","    # df = bb_line(df, df_5T, '5T')\n","    # df = bb_line(df, df_15T, '15T')\n","\n","    # print(\"bband phase done\")\n","\n","    # --------------- sd_dc --------------- #\n","    # df = sd_dc(df, 20, 40)\n","    # df = sd_dc(df, 20, 20)\n","    # df = sd_dc(df_5T, 20, 40, df)\n","    # df = sd_dc(df_H, 20, 40, df)\n","\n","    # print(\"sd_dc phase done\")\n","\n","    # --------------- imb_ratio --------------- #\n","    # imb_ratio(df, '5T')\n","    # imb_ratio_v3(df, \"5T\")\n","    # imb_ratio_v4(df, \"5T\")\n","\n","    # imb_ratio(df, 'H')\n","    # imb_ratio_v2(df, '5T')\n","    \n","    # print(\"imb_ratio phase done\")\n","\n","    # --------------- rel_abs_ratio --------------- #\n","    # rel_abs_ratio(df, '5T', norm_period=120)\n","\n","    # --------------- normalize data --------------- #\n","    # itv = 'T'\n","    # lb_period = 15\n","    # target_col = 'close_{}{}'.format(itv, lb_period)\n","    # target_data = df['close'].diff(lb_period).to_numpy()\n","    # norm_data(df, target_data, target_col)    \n","    # print(\"normalize data phase done !\")\n","\n","    # --------------- lucid sar --------------- #\n","    # lucid_sar_v2(df)\n","    # lucid_sar_v2(df_3T)\n","    # df = df.join(to_lower_tf_v2(df, df_3T, [-2, -1]), how='inner')\n","    # lucid_sar_v2(df_5T)\n","    # df = df.join(to_lower_tf_v2(df, df_5T, [-2, -1]), how='inner')\n","    # lucid_sar_v2(df_15T)\n","    # df = df.join(to_lower_tf_v2(df, df_15T, [-2, -1]), how='inner')\n","    # lucid_sar_v2(df_30T)\n","    # df = df.join(to_lower_tf_v2(df, df_30T, [-2, -1]), how='inner')       \n","\n","    # print(\"sar phase done\")\n","\n","    # --------------- supertrend --------------- #\n","    # df = st_price_line(df, df_3T, '3m')\n","    # df = st_price_line(df, df_5T, '5m')\n","    # df = st_price_line(df, df_15T, '15m')\n","    # df = st_price_line(df, df_30T, '30m')\n","    # df = st_price_line(df, df_H, '1h')\n","    # df = st_price_line(df, df_4H, '4h')\n","\n","    # print(\"supertrend phase done\")\n","\n","    # --------------- rsi --------------- #  \n","    # df['rsi_1m'] = rsi(df, 14)    \n","    # df_5T['rsi_5m'] = rsi(df_5T, 14)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf_v2(df, df_5T, [-1]), columns=['rsi_5m']))\n","    \n","    # print(\"rsi phase done\")\n","\n","\n","    # --------------- cci --------------- #  \n","    # df['cci_1m'] = cci(df, 20)\n","\n","    # print(\"cci phase done\")\n","\n","    # --------------- ema --------------- #      \n","    # df_5T['ema_5m'] = ema(df_5T['close'], 195)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf_v2(df, df_5T, [-1]), columns=['ema_5m']))\n","    \n","    # print(\"ema phase done\")\n","        \n","    # --------------- stochastic --------------- #\n","    # df['stoch_1m'] = stoch(df, 13, 3, 3)\n","\n","    # df_5T['stoch'] = stoch(df_5T, 13, 3, 3)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf_v2(df, df_5T, [-1], backing_i=-1), columns=['stoch_5m']))\n","\n","    # print(\"stoch phase done\")\n","\n","\n","    return df\n"]},{"cell_type":"markdown","metadata":{"id":"mEKyVbHWSuzi"},"source":["## make & save res_df (concat 생각하면, timeindex sync 맞춰야함)"]},{"cell_type":"markdown","metadata":{"id":"VdukVo5-Suzj"},"source":["### old (xlsx)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":11,"status":"error","timestamp":1636201718856,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"khKb9nhlSuzj","outputId":"02bf2c60-f298-4fe9-e6bb-78230ac1348c"},"outputs":[{"ename":"NameError","evalue":"ignored","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-5-ee034491b257>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     11\u001b[0m \u001b[0ma_day\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m3600\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0;36m24\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     12\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 13\u001b[0;31m \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mtqdm\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfile_list\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     14\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     15\u001b[0m   \u001b[0mkeys\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mfile_list\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'file_list' is not defined"]}],"source":["pd.set_option('display.max_rows', 500)\n","pd.set_option('display.max_columns', 500)\n","pd.set_option('display.width', 1000)\n","\n","\n","save_path = './candlestick_concated/res_df/'\n","\n","exist_list = os.listdir(save_path)\n","\n","\n","a_day = 3600 * 24\n","\n","for i in tqdm(range(len(file_list))):\n","\n","  keys = [file_list[i]]\n","\n","  # if 'neo'.upper() not in file_list[i]:\n","    # continue\n","\n","  # if '2021-04-30'.upper() not in file_list[i]:\n","  if '2021-07-01'.upper() not in file_list[i]:\n","  # if '2021-10-10'.upper() not in file_list[i]:\n","    continue\n","\n","\n","  for key in keys:      \n","\n","    # if 'eth'.upper() not in key:\n","    #   continue\n","\n","    excel_name = key.replace(\".xlsx\", \"_st1h_backi2.xlsx\")\n","    excel_path = save_path + excel_name\n","\n","    if excel_name in exist_list:\n","      print(excel_name, \"already exist !\")\n","      continue\n","    \n","    open_indexes = []\n","    \n","    df = pd.read_excel(date_path + key, index_col=0)\n","    second_df = pd.read_excel(date_path2 + key, index_col=0)\n","    third_df = pd.read_excel(date_path3 + key, index_col=0)\n","    fourth_df = pd.read_excel(date_path4 + key, index_col=0)\n","    fifth_df = pd.read_excel(date_path5 + key, index_col=0)\n","    \n","    print(df.index[[0, -1]])\n","    print(second_df.index[[0, -1]])\n","    print(third_df.index[[0, -1]])\n","    print(fourth_df.index[[0, -1]])\n","    print(fifth_df.index[[0, -1]])\n","\n","    open_indexes.append(df.index[0])\n","    open_indexes.append(second_df.index[0])\n","    open_indexes.append(third_df.index[0])\n","    open_indexes.append(fourth_df.index[0])\n","    open_indexes.append(fifth_df.index[0])\n","    \n","    try:\n","      #     Todo    #\n","      #      1. 1m 마지막 timeindex 의 date 기준, 08:59:59.999000 를 last timestamp 로 설정\n","      #      2. 시작 timestamp 는 모든 tf 의 가장 최근 시작 index,\n","      #       a. 1m 의 시작 timeindex 는 최소, htf 의 시작 timeindex 보다 interval 만큼 앞서야함\n","      #         i. 따라서 1m open_index, latest_open_index + 1d 를 하면 댐\n","      #           1. timestamp 으로 변환후 1day 를 더하고 datetime 으로 변환\n","      sixth_df = pd.read_excel(date_path6 + key, index_col=0)\n","      seventh_df = pd.read_excel(date_path7 + key, index_col=0)\n","\n","      print(sixth_df.index[[0, -1]])\n","      print(seventh_df.index[[0, -1]])\n","      print()\n","\n","      open_indexes.append(sixth_df.index[0])\n","      open_indexes.append(seventh_df.index[0])\n","\n","    except Exception as e:\n","      print(e)\n","\n","    latest_open_index = sorted(open_indexes)[-1]\n","    \n","    open_ts = datetime.timestamp(latest_open_index)\n","    latest_open_index_1m = datetime.fromtimestamp(open_ts + a_day)\n","\n","    #   str 로 만들어 접근하면 불가함  #\n","    end_index = pd.to_datetime(str(df.index[-1]).split(\" \")[0] + \" 08:59:59.999000\")\n","    # break\n","\n","    sliced_df = df.loc[latest_open_index_1m:end_index] # to_lower_tf 의 기준 ltf\n","    sliced_second_df = second_df.loc[latest_open_index:end_index]\n","    sliced_third_df = third_df.loc[latest_open_index:end_index]\n","    sliced_fourth_df = fourth_df.loc[latest_open_index:end_index]\n","    sliced_fifth_df = fifth_df.loc[latest_open_index:end_index]\n","\n","    print(\"sliced index\")\n","    print(sliced_df.index[[0, -1]])\n","    print(sliced_second_df.index[[0, -1]])\n","    print(sliced_third_df.index[[0, -1]])\n","    print(sliced_fourth_df.index[[0, -1]])\n","    print(sliced_fifth_df.index[[0, -1]])\n","\n","    try:\n","      sliced_sixth_df = sixth_df.loc[latest_open_index:end_index]\n","      sliced_seventh_df = seventh_df.loc[latest_open_index:end_index]\n","\n","      print(sliced_sixth_df.index[[0, -1]])\n","      print(sliced_seventh_df.index[[0, -1]])\n","\n","      res_df = sync_check(sliced_df, sliced_second_df, sliced_third_df, sliced_fourth_df, sliced_fifth_df, sliced_sixth_df, sliced_seventh_df)\n","    \n","    except:\n","      res_df = sync_check(sliced_df, sliced_second_df, sliced_third_df, sliced_fourth_df, sliced_fifth_df)\n","\n","\n","\n","    res_df.to_excel(excel_path)\n","    print(excel_name, \"saved succesfully !\")"]},{"cell_type":"markdown","metadata":{"id":"Bw5JibDKSuzj"},"source":["### xlsx to feather"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":355},"id":"VA-_gcA7Suzj","outputId":"f6f3b55d-ec2c-4b2c-d62e-3de7c0384dc4"},"outputs":[{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"be2b848dbcb14a079a2b7bd605af6435","version_major":2,"version_minor":0},"text/plain":["  0%|          | 0/156 [00:00<?, ?it/s]"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["DatetimeIndex(['2021-06-28 00:00:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:02:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:04:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:14:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:29:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-09-14 03:59:59.999000', '2021-11-15 14:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-03-10 20:59:59.999000', '2021-11-15 16:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","\n","xlsx converted to feather !\n","DatetimeIndex(['2021-06-28 00:00:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:02:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:04:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:14:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:29:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-09-14 03:59:59.999000', '2021-11-15 14:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-03-10 20:59:59.999000', '2021-11-15 16:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","\n","xlsx converted to feather !\n"]}],"source":["pd.set_option('display.max_rows', 500)\n","pd.set_option('display.max_columns', 500)\n","pd.set_option('display.width', 1000)\n","\n","\n","save_path = './candlestick_concated/res_df/'\n","\n","exist_list = os.listdir(save_path)\n","\n","\n","a_day = 3600 * 24\n","\n","for i in tqdm(range(len(file_list))):\n","\n","  keys = [file_list[i]]\n","\n","  # if 'neo'.upper() not in file_list[i]:\n","    # continue\n","\n","  # if '2021-04-30'.upper() not in file_list[i]:\n","  # if '2021-07-01'.upper() not in file_list[i]:\n","  if '2021-10-10'.upper() not in file_list[i]:\n","    continue\n","\n","\n","  for key in keys:      \n","\n","    # if 'eth'.upper() not in key:\n","    #   continue\n","\n","    feather_name = key.replace(\".xlsx\", \".ftr\")\n","    # feather_path = save_path + feather_name\n","\n","    if feather_name in exist_list:\n","      print(feather_name, \"already exist !\")\n","      continue\n","    \n","    open_indexes = []\n","    \n","    df = pd.read_excel(date_path + key, index_col=0)\n","    second_df = pd.read_excel(date_path2 + key, index_col=0)\n","    third_df = pd.read_excel(date_path3 + key, index_col=0)\n","    fourth_df = pd.read_excel(date_path4 + key, index_col=0)\n","    fifth_df = pd.read_excel(date_path5 + key, index_col=0)\n","    \n","    print(df.index[[0, -1]])\n","    print(second_df.index[[0, -1]])\n","    print(third_df.index[[0, -1]])\n","    print(fourth_df.index[[0, -1]])\n","    print(fifth_df.index[[0, -1]])\n","\n","    open_indexes.append(df.index[0])\n","    open_indexes.append(second_df.index[0])\n","    open_indexes.append(third_df.index[0])\n","    open_indexes.append(fourth_df.index[0])\n","    open_indexes.append(fifth_df.index[0])\n","    \n","    try:\n","      #     Todo    #\n","      #      1. 1m 마지막 timeindex 의 date 기준, 08:59:59.999000 를 last timestamp 로 설정\n","      #      2. 시작 timestamp 는 모든 tf 의 가장 최근 시작 index,\n","      #       a. 1m 의 시작 timeindex 는 최소, htf 의 시작 timeindex 보다 interval 만큼 앞서야함\n","      #         i. 따라서 1m open_index, latest_open_index + 1d 를 하면 댐\n","      #           1. timestamp 으로 변환후 1day 를 더하고 datetime 으로 변환\n","      sixth_df = pd.read_excel(date_path6 + key, index_col=0)\n","      seventh_df = pd.read_excel(date_path7 + key, index_col=0)\n","\n","      print(sixth_df.index[[0, -1]])\n","      print(seventh_df.index[[0, -1]])\n","      print()\n","\n","      open_indexes.append(sixth_df.index[0])\n","      open_indexes.append(seventh_df.index[0])\n","\n","    except Exception as e:\n","      print(e)\n","\n","\n","    df.reset_index().to_feather(date_path + feather_name, compression='lz4')\n","    second_df.reset_index().to_feather(date_path2 + feather_name, compression='lz4')\n","    third_df.reset_index().to_feather(date_path3 + feather_name, compression='lz4')\n","    fourth_df.reset_index().to_feather(date_path4 + feather_name, compression='lz4')\n","    fifth_df.reset_index().to_feather(date_path5 + feather_name, compression='lz4')\n","    sixth_df.reset_index().to_feather(date_path6 + feather_name, compression='lz4')\n","    seventh_df.reset_index().to_feather(date_path7 + feather_name, compression='lz4')\n","\n","    print(\"xlsx converted to feather !\")\n","    "]},{"cell_type":"markdown","metadata":{"id":"Pe0QpnORSuzk"},"source":["### add itv_name to ftr"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":223},"executionInfo":{"elapsed":43664,"status":"ok","timestamp":1638246331122,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"M-gl30KxSuzk","outputId":"1cfcb580-8d25-4bd0-fdd0-213640779ce2"},"outputs":[{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"e3225655da874b8d89cc8b2a381b3fb6","version_major":2,"version_minor":0},"text/plain":["  0%|          | 0/175 [00:00<?, ?it/s]"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 BTCUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 BCHUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 XRPUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 EOSUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 LTCUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 ETCUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 LINKUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 XLMUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 ADAUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 ETHUSDT_1m.ftr\n"]}],"source":["save_path = './candlestick_concated/res_df/'\n","\n","# dir_path = \"bbdc3m_backi2\"\n","# date = '2021-10-10'\n","date = '2021-07-01'\n","\n","db_path = './candlestick_concated/database_bn/non_cum/%s/' % date\n","os.makedirs(os.path.join(db_path), exist_ok=True)\n","\n","# exist_list = os.listdir(os.path.join(save_path, dir_path))\n","# break\n","\n","\n","a_day = 3600 * 24\n","\n","for i in tqdm(range(len(file_list))):\n","\n","  keys = [file_list[i]]\n","\n","  # if 'neo'.upper() not in file_list[i]:\n","    # continue\n","\n","  if date not in file_list[i]:\n","    continue\n","\n","\n","  for key in keys:      \n","\n","    # if 'eth'.upper() not in key:\n","    #   continue\n","    # print(key)\n","    \n","    if \".ftr\" not in key:\n","      continue\n","        \n","    df = shutil.copy(date_path + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval))\n","    second_df = shutil.copy(date_path2 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval2))\n","    third_df = shutil.copy(date_path3 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval3))\n","    fourth_df = shutil.copy(date_path4 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval4))\n","    fifth_df = shutil.copy(date_path5 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval5))\n","    sixth_df = shutil.copy(date_path6 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval6))\n","    seventh_df = shutil.copy(date_path7 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval7))\n","\n","    print(\"copied to\" + db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval))\n"]},{"cell_type":"markdown","metadata":{"id":"4oZ1ohTtSuzk"},"source":["### feather ver. (database to res_df)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"vgVHpnUsSuzk"},"outputs":[],"source":["# db_path = './candlestick_concated/database_ub/' # upbit\n","db_path = './candlestick_concated/database_bn/'   # binance\n","\n","save_path = './candlestick_concated/res_df/'\n","\n","save_dir_path = \"bb1d_backi2\"\n","date = '2022-02-17'\n","\n","# concat_path = 'noncat' # 새로운 cols 를 기존 cum/concat 에 붙이려는 경우\n","concat_path = 'concat'\n","cum_path = \"cum\"\n","# cum_path = \"non_cum\"  # non_cum 으로 진행하는 경우, row concat 용도이기 때문에 noncat -> concat 으로 변경 (base cols 를 모두 담고 있음)\n","\n","load_path = os.path.join(db_path, cum_path, date)\n","save_path = os.path.join(save_path, save_dir_path, concat_path, cum_path, date)\n","\n","os.makedirs(save_path, exist_ok=True)\n","\n","file_list = os.listdir(load_path)\n","exist_list = os.listdir(save_path)\n","# break\n","\n","a_day = 3600 * 24\n","\n","for i in tqdm(range(len(file_list))):\n","\n","  keys = [file_list[i]]\n","\n","  # if 'neo'.upper() not in file_list[i]:\n","    # continue\n","\n","  if date not in file_list[i]:\n","    continue\n","\n","\n","  for key in keys:      \n","\n","    # if 'eth'.upper() not in key:\n","    #   continue\n","    # print(key)\n","    \n","    if \".ftr\" not in key:\n","      continue\n","\n","    if \"_1m\" not in key:\n","      continue\n","\n","    # feather_name = key.replace(\".ftr\", \"_%.ftr\" % save_dir_path)\n","    feather_name = key.replace(\"_1m\", \"\")\n","    feather_path = os.path.join(save_path, feather_name)\n","\n","    if feather_name in exist_list:\n","      print(feather_name, \"already exist !\")\n","      continue\n","    \n","    df = pd.read_feather(os.path.join(load_path, key), columns=None, use_threads=True).set_index(\"index\")\n","\n","    res_df = sync_check_make(df)\n","\n","    res_df.reset_index().to_feather(feather_path, compression='lz4')\n","    print(feather_path, \"saved succesfully !\")"]},{"cell_type":"markdown","metadata":{"id":"YxCPUzoyidwH"},"source":["#### just add col to loaded df"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":14300,"status":"ok","timestamp":1649654956031,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"odqVwQHpYo1M","outputId":"c29013e4-82d5-4c10-f14e-12c1a9273d06"},"outputs":[{"name":"stdout","output_type":"stream","text":["3T ->                          open     high      low    close\n","index                                                  \n","2022-02-17 10:27:00  3148.85  3150.08  3146.38  3146.76\n","5T ->                          open     high      low    close\n","index                                                  \n","2022-02-17 10:25:00  3146.85  3150.08  3145.44  3146.76\n","15T ->                          open    high      low    close\n","index                                                 \n","2022-02-17 10:15:00  3143.99  3151.0  3139.14  3146.76\n","30T ->                         open     high      low    close\n","index                                                 \n","2022-02-17 10:00:00  3148.8  3158.68  3139.14  3146.76\n","H ->                         open     high      low    close\n","index                                                 \n","2022-02-17 10:00:00  3148.8  3158.68  3139.14  3146.76\n","4H ->                         open     high     low    close\n","index                                                \n","2022-02-17 09:00:00  3121.8  3158.68  3120.0  3146.76\n","D ->                         open     high     low    close\n","index                                                \n","2022-02-17 09:00:00  3121.8  3158.68  3120.0  3146.76\n","dc phase done\n","bband phase done\n"]}],"source":["res_df_ = sync_check_make(res_df_)  # suffix duplication 유의"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"3SKglsQCj5_x"},"outputs":[],"source":["res_df_.tail().iloc[:, -10:]\n","# res_df_.dtypes"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":2846,"status":"ok","timestamp":1649813656881,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"XrgJPQRuisCa","outputId":"2da23c02-993a-44b8-cb62-eea68c2cfa67"},"outputs":[{"name":"stdout","output_type":"stream","text":["./candlestick_concated/res_df/bb1d_backi2/concat/cum/2022-02-17/2022-02-17 ETHUSDT.ftr saved !\n"]}],"source":["# ------------ save current res_df ------------ #\n","ftr_full_path = os.path.join(ftr_path, key)\n","res_df_.reset_index().to_feather(ftr_full_path, compression='lz4')  # key 잘 확인하고 저장\n","print(ftr_full_path, 'saved !')"]},{"cell_type":"markdown","metadata":{"id":"E0n53hflJbnp"},"source":["### htf candle check"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":489,"status":"ok","timestamp":1642148504926,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"6xW0yugCWvGz","outputId":"58106ff9-9709-4a62-bca2-1f6795d13322"},"outputs":[{"name":"stdout","output_type":"stream","text":["itv_ : 3T\n","                        open     high      low    close\n","index                                                  \n","2022-01-10 15:06:00  3169.97  3170.22  3159.51  3161.22\n","2022-01-10 15:09:00  3161.22  3163.98  3161.22  3163.82\n","2022-01-10 15:12:00  3163.82  3163.83  3156.02  3160.49\n","2022-01-10 15:15:00  3160.51  3164.29  3159.01  3162.93\n","2022-01-10 15:18:00  3163.02  3164.29  3162.41  3164.28\n","                            open     high      low    close    volume\n","index                                                                \n","2022-01-10 15:08:59.999  3169.97  3170.22  3159.51  3161.22  4241.449\n","2022-01-10 15:11:59.999  3161.22  3163.98  3161.22  3163.82  1143.874\n","2022-01-10 15:14:59.999  3163.82  3163.83  3156.02  3160.49  2135.292\n","2022-01-10 15:17:59.999  3160.51  3164.29  3159.01  3162.93  1011.598\n","2022-01-10 15:20:59.999  3163.02  3164.29  3162.41  3163.82   466.868\n"]}],"source":["itv_list = ['3T', '5T', '15T', '30T', '1H', '4H']\n","comp_df_list = [second_df, third_df, fourth_df, fifth_df, sixth_df, seventh_df]\n","offset_list = ['1h', '2min', '2min', '2min', '2min', '2min']\n","# itv_list = ['4H']\n","# comp_df_list = [seventh_df]\n","\n","slice_len = 100\n","for itv_, comp_df_, offset in zip(itv_list, comp_df_list, offset_list):\n","\n","  print(\"itv_ :\", itv_)\n","\n","  # df = h_candle_v2(df, '3T')\n","  # end_ts = \n","  h_res_df = df.resample(itv_, offset=offset).agg({\n","          'open': 'first',\n","          'high': 'max',\n","          'low': 'min',\n","          'close': 'last'\n","      })\n","\n","  #   앞은 길이가 다르고, 뒤에서부터 잘라서 비교    #\n","  #   last_row 빼고는 동일, 4h 제외\n","  # print(df.tail())\n","  print(h_res_df.tail())\n","  print(comp_df_.tail())\n","  # # print(h_res_df.head())\n","  # # print(second_df.head())\n","\n","  # print(len(h_res_df))\n","  # print(len(second_df))\n","\n","  # print(h_res_df.values[-slice_len:])\n","  # print(second_df.iloc[:, :4].values[-slice_len:])\n","  # print(np.argwhere(h_res_df.values[-slice_len:] != comp_df_.iloc[:, :4].values[-slice_len:]))\n","  # print()\n","  break"]},{"cell_type":"markdown","metadata":{"id":"jTN3M842Suzl"},"source":["## concat & save new res_df"]},{"cell_type":"markdown","metadata":{"id":"MlFkpO1MSuzl"},"source":["### old (xlsx)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"U-3QkfbFSuzl"},"outputs":[],"source":["save_path = './candlestick_concated/res_df/'\n","\n","dict_name = \"2021-07-01 ETHUSDT_bb15m_backi2_res_dfs.pkl\"\n","\n","#     load with pickle    #\n","with open(save_path + dict_name, 'rb') as f:\n","  saved_res_df_dict = pickle.load(f)\n","\n","print(dict_name, \"loaded !\")\n","res_df_files = os.listdir(save_path)\n","res_df_files.reverse()\n","\n","print(res_df_files)\n","\n","res_df_dict = {}\n","\n","base_postfix = '_bb15m_backi2.xlsx'\n","new_postfix = '_st1h_backi2.xlsx'\n","\n","max_cnt = 10\n","sample_cnt = max_cnt\n","\n","for k_i, key in enumerate(res_df_files):\n","\n","  if '2021-07-01'.upper() not in key:\n","  # if '2021-10-10'.upper() not in key:\n","    continue\n","\n","  # if \"link\".upper() not in key:\n","  # if \"btc\".upper() not in key:\n","  #   continue\n","\n","  if new_postfix not in key:\n","    continue\n","\n","  # if key in \n","\n","  if sample_cnt == max_cnt:\n","    dict_name = \"%s_res_dfs.pkl\" % key.split(\".\")[0]\n","    print(\"dict_name :\", dict_name)\n","\n","  base_df = saved_res_df_dict[key.replace(new_postfix, base_postfix)]\n","  # base_df = pd.read_excel(save_path + key.replace(new_postfix, base_postfix), index_col=0)  \n","  res_df = pd.read_excel(save_path + key, index_col=0)  \n","\n","  # print(base_df.head())\n","  # print(res_df.head())\n","  # break\n","\n","  new_res_df = pd.concat([base_df, res_df], axis=1) # df_tot.drop_duplicates()\n","  # new_res_df.head()\n","\n","  droped_new_res_df = new_res_df.loc[:,~new_res_df.columns.duplicated(keep='last')]\n","  droped_new_res_df.head()\n","  # break\n","\n","  # res_df_dict[key] = res_df\n","  res_df_dict[key] = droped_new_res_df\n","  print(key, \"saved to dict !\")\n","\n","  #     save with pickle    #\n","  with open(save_path + dict_name, 'wb') as f:\n","    pickle.dump(res_df_dict, f)\n","\n","  sample_cnt -= 1\n","\n","  if sample_cnt <= 0:\n","    break\n"]},{"cell_type":"markdown","metadata":{"id":"t1E_eAyPSuzm"},"source":["### new col to latest feather (1m_indi. only)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"xyI5NrM7Suzm"},"outputs":[],"source":["save_path = './candlestick_concated/res_df/'\n","\n","cum_dir = \"cum\"\n","\n","new_dir_path = \"rsi_backi2\"\n","base_dir_path = \"bbdc3m_backi2\"\n","\n","new_date = '2021-11-17'\n","\n","\n","\n","#     load ftr list    #\n","base_save_path = os.path.join(save_path, base_dir_path, \"concat/cum\", new_date)\n","new_save_path = base_save_path.replace(base_dir_path, new_dir_path)\n","\n","#     save to (new) cum dir    #\n","#      1. if dir. not exists, makedir\n","os.makedirs(new_save_path, exist_ok=True)\n","\n","ftr_list = [s for s in os.listdir(base_save_path) if \"ftr\" in s]\n","print(ftr_list)\n","# break\n","\n","\n","max_cnt = 10\n","sample_cnt = max_cnt\n","\n","for key in ftr_list:\n","\n","  if new_date not in key:\n","    continue\n","\n","\n","  #       read from base postfix's directory    #\n","  base_df = pd.read_feather(os.path.join(base_save_path, key), columns=None, use_threads=True).set_index(\"index\")\n","  # print(base_df.head())\n","  # print(res_df.head())\n","  # break\n","\n","  droped_new_res_df = sync_check(base_df)\n","\n","  # new_res_df = pd.concat([base_df, res_df], axis=0) # df_tot.drop_duplicates()\n","  # # new_res_df.head()\n","\n","  # intersection_cols = res_df.columns.intersection(base_df.columns)\n","\n","  # droped_new_res_df = new_res_df.loc[~new_res_df.index.duplicated(keep='last'),intersection_cols]\n","  # droped_new_res_df = new_res_df.loc[:,~new_res_df.columns.duplicated(keep='last')]\n","  # droped_new_res_df = new_res_df.loc[:,~new_res_df.index.duplicated(keep='last')]\n","  # droped_new_res_df.head()\n","  # break\n","\n","  droped_new_res_df.reset_index().to_feather(os.path.join(new_save_path, key), compression='lz4')\n","\n","  print(os.path.join(new_save_path, key), \"saved !\")\n","\n","  # sample_cnt -= 1\n","\n","  # if sample_cnt <= 0:\n","  #   break\n"]},{"cell_type":"markdown","metadata":{"id":"nUs4fjVHSuzl"},"source":["### feather ver. (col concat)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":2001,"status":"ok","timestamp":1642739652513,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"6cu-Y82iSuzl","outputId":"273507b8-0d33-48b5-d9c5-00547688ef73"},"outputs":[{"name":"stdout","output_type":"stream","text":["['2022-01-10 ETHUSDT.ftr']\n","./candlestick_concated/res_df/st3m_backi2/concat/cum/2022-01-10/2022-01-10 ETHUSDT.ftr saved !\n"]}],"source":["new_dir_path = \"st3m_backi2\"\n","base_dir_path = \"bb1d_backi2\"\n","\n","# new_date = \"2021-11-17\"\n","new_date = \"2022-01-10\"\n","\n","#     save to (new) concat dir    #\n","#      1. if dir. not exists, makedir\n","save_path = './candlestick_concated/res_df/'\n","save_path = os.path.join(save_path, new_dir_path, \"concat/cum\", new_date)   \n","# save_path = os.path.join(save_path, new_dir_path, \"concat/non_cum\", new_date)   # row col 하려면 concat 맞음, noncum 사용\n","os.makedirs(save_path, exist_ok=True)\n","\n","\n","#     load ftr list    #\n","# ftr_list = [s for s in os.listdir(os.path.join(save_path, new_dir_path)) if \"ftr\" in s]\n","\n","noncat_path = save_path.replace(\"concat/\", \"noncat/\")\n","ftr_list = [s for s in os.listdir(noncat_path) if \"ftr\" in s]\n","print(ftr_list)\n","# break\n","\n","\n","for key in ftr_list:\n","\n","  if new_date not in key:\n","    continue\n","\n","  try:\n","\n","    #       read from base postfix's directory    #\n","    base_df = pd.read_feather(os.path.join(save_path.replace(new_dir_path, base_dir_path), key), columns=None, use_threads=True).set_index(\"index\")\n","    res_df = pd.read_feather(os.path.join(noncat_path, key), columns=None, use_threads=True).set_index(\"index\")\n","\n","    # print(base_df.head())\n","    # print(res_df.head())\n","    # break\n","\n","    new_res_df = pd.concat([base_df, res_df], axis=1) # df_tot.drop_duplicates()\n","    # new_res_df.head()\n","\n","    droped_new_res_df = new_res_df.loc[:,~new_res_df.columns.duplicated(keep='last')]\n","    # droped_new_res_df.head()\n","    # break\n","\n","    droped_new_res_df.reset_index().to_feather(os.path.join(save_path, key), compression='lz4')\n","\n","    # res_df_dict[key] = res_df\n","    # res_df_dict[key] = droped_new_res_df\n","    print(os.path.join(save_path, key), \"saved !\")\n","  \n","  except Exception as e:\n","    print(\"error occured ! :\", e)\n","  \n","\n","  # sample_cnt -= 1\n","\n","  # if sample_cnt <= 0:\n","  #   break\n"]},{"cell_type":"markdown","metadata":{"id":"WVAKq3i8Suzm"},"source":["### feather ver. (row concat) , database cum 도 호환가능"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":7893,"status":"ok","timestamp":1645188189702,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"XG2p9OhhSuzm","outputId":"e67874ba-0710-4f38-966f-5ea7d42403cb"},"outputs":[{"name":"stdout","output_type":"stream","text":["['2022-02-17 ETHUSDT_1m.ftr']\n","                            open     high     low    close  volume\n","index                                                             \n","2019-11-27 16:45:59.999   146.00   146.00   146.0   146.00   0.010\n","2022-02-17 10:29:59.999  3146.86  3147.22  3146.4  3146.76  26.727\n","continuity checked !\n","./candlestick_concated/database_bn/cum/2022-02-17/2022-02-17 ETHUSDT_1m.ftr saved !\n"]}],"source":["save_path = './candlestick_concated/res_df/'        # cols 추가된 cum db 에 new_row's cols 기준으로 합치는 경우\n","save_path = './candlestick_concated/database_bn/'   # ohlcv cum db 만들 경우\n","\n","base_date = '2022-01-10'\n","new_date = '2022-02-17'\n","\n","#     load ftr list    #\n","if \"database\" in save_path:\n","  base_dir_path = \"\"\n","  new_dir_path = \"\"\n","  concat_dir = \"\"\n","else:\n","  base_dir_path = \"sar_backi2\"\n","  new_dir_path = \"bb4h_backi2\"  # dir_path 가 base / new 서로 달라질 수 있어서 분할함\n","  concat_dir = \"concat\"\n","\n","base_date_path = os.path.join(save_path, base_dir_path, concat_dir, \"cum\", base_date)      # 기존 cum db 와 new_date db 를 cum 진행\n","# base_date_path = os.path.join(save_path, base_dir_path, concat_dir, \"non_cum\", base_date)    # non_cum db 와 new_date db 를 cum 진행\n","\n","# new_date_path = os.path.join(save_path, new_dir_path, concat_dir, \"cum\", new_date)      # 상황별로 직접 선택해야할 듯\n","new_date_path = os.path.join(save_path, new_dir_path, concat_dir, \"non_cum\", new_date)\n","\n","\n","\n","#     save to (new) concat dir    #\n","#      1. if dir. not exists, makedir\n","save_path = new_date_path.replace(\"non_cum\", \"cum\")   # non_cum 아니여도 무관\n","os.makedirs(save_path, exist_ok=True)   # noncat / concat 두가지 경우 존재가능할 것\n","# os.makedirs(os.path.join(save_path, dir_path, \"noncat/cum\", new_date), exist_ok=True)\n","\n","\n","ftr_list = [s for s in os.listdir(new_date_path) if \"ftr\" in s]\n","exist_list = os.listdir(save_path)\n","print(ftr_list)\n","# break\n","\n","\n","for key in ftr_list:\n","\n","  if new_date not in key:   # date rejection\n","    continue\n","  if '1m' not in key:  # itv rejection\n","    continue\n","\n","  # if key in exist_list:\n","  #   print(key, \"already exist !\")\n","  #   continue\n","\n","  #       read from base postfix's directory    #\n","  base_df = pd.read_feather(os.path.join(base_date_path, key.replace(new_date, base_date)), columns=None, use_threads=True).set_index(\"index\")   # key 에 new_date 담겨있음\n","  res_df = pd.read_feather(os.path.join(new_date_path, key), columns=None, use_threads=True).set_index(\"index\")\n","\n","  # print(base_df.head())\n","  # print(res_df.head())\n","  # break\n","\n","  new_res_df = pd.concat([base_df, res_df], axis=0) # df_tot.drop_duplicates()\n","  # new_res_df.head()\n","\n","  intersection_cols = res_df.columns.intersection(base_df.columns)\n","\n","  droped_new_res_df = new_res_df.loc[~new_res_df.index.duplicated(keep='last'),intersection_cols]\n","  # droped_new_res_df = new_res_df.loc[:,~new_res_df.columns.duplicated(keep='last')]\n","  # droped_new_res_df = new_res_df.loc[:,~new_res_df.index.duplicated(keep='last')]\n","  # droped_new_res_df.head()\n","  # break  \n","  \n","  print(droped_new_res_df.iloc[[0, -1]])  \n","\n","  # ------------- verify df continuity directly itv by itv ------------- #\n","  true_continue = True\n","  if \"_\" in key:\n","\n","    interval = key.split(\".\")[0].split(\"_\")[-1] \n","    itv_num = to_itvnum(interval)\n","\n","    # verified_df = consecutive_df(droped_new_res_df, to_itvnum(interval))\n","    # verified_df.reset_index().to_feather(os.path.join(save_path, key), compression='lz4')\n","\n","    # res_df_dict[key] = res_df\n","    # res_df_dict[key] = droped_new_res_df  \n","\n","    np_idx_ts = np.array(list(map(lambda x: datetime.timestamp(x), droped_new_res_df.index)))\n","    ideal_ts_gap = 60 * itv_num\n","\n","    for ts_i in range(len(np_idx_ts)):\n","      \n","      if ts_i != 0:\n","        ts_gap = np_idx_ts[ts_i] - np_idx_ts[ts_i - 1]\n","\n","        if ts_gap > ideal_ts_gap or ts_gap < ideal_ts_gap:\n","        # if ts_gap == ideal_ts_gap:\n","          print(droped_new_res_df.index[ts_i - 1])\n","          print(droped_new_res_df.index[ts_i])\n","          # print(ts_gap)\n","          print(\"------------------ unideal ts_gap ------------------\")\n","          true_continue = False\n","\n","    print(\"continuity checked !\")\n","\n","  if true_continue:\n","    droped_new_res_df.reset_index().to_feather(os.path.join(save_path, key), compression='lz4')\n","\n","  print(os.path.join(save_path, key), \"saved !\")\n","  \n"]},{"cell_type":"markdown","metadata":{"id":"L7l5CTJfSuzn"},"source":["### check continuity"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"w-5jn9opBl73"},"outputs":[],"source":["droped_new_res_df = res_df_"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":4621,"status":"ok","timestamp":1649653761880,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"nGzMGyC3Suzn","outputId":"5007eef3-8a2f-4085-bf3d-f2b415395bc4"},"outputs":[{"name":"stdout","output_type":"stream","text":["                            open     high     low    close  volume  dc_upper_5T  dc_lower_5T  dc_base_5T  dc_upper_15T  dc_lower_15T  dc_base_15T  bb_upper_5T  bb_lower_5T  bb_upper_15T  bb_lower_15T\n","index                                                                                                                                                                                                  \n","2019-11-27 16:45:59.999   146.00   146.00   146.0   146.00   0.010          NaN          NaN         NaN           NaN           NaN          NaN          NaN          NaN           NaN           NaN\n","2022-02-17 10:29:59.999  3146.86  3147.22  3146.4  3146.76  26.727      3158.68      3131.05    3144.865       3174.54       3114.98      3144.76  3147.061024  3127.711976   3153.606702   3132.698298\n","[1.57487316e+09 1.57487322e+09 1.57487328e+09 1.57487334e+09 1.57487340e+09 1.57487346e+09 1.57487352e+09 1.57487358e+09 1.57487364e+09 1.57487370e+09]\n"]}],"source":["# print(droped_new_res_df.columns)\n","\n","print(droped_new_res_df.iloc[[0, -1]])\n","\n","np_idx_ts = np.array(list(map(lambda x: datetime.timestamp(x), droped_new_res_df.index)))\n","\n","print(np_idx_ts[:10])\n","for ts_i in range(len(np_idx_ts)):\n","  \n","  if ts_i != 0:\n","    ts_gap = np_idx_ts[ts_i] - np_idx_ts[ts_i - 1]\n","\n","    if ts_gap > 60 or ts_gap < 60:\n","\n","      print(\"invalid ts_gap found !\")\n","    # if ts_gap == 60:\n","      print(droped_new_res_df.index[ts_i - 1])\n","      print(droped_new_res_df.index[ts_i])\n","      # print(ts_gap)\n","      print()\n"]},{"cell_type":"markdown","metadata":{"id":"x_XGJqBi8Jex"},"source":["### check length of front missing value + middle_data non_missing validity"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":311,"status":"ok","timestamp":1641887318959,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"yRNwqVeAu8X8","outputId":"fb236bde-4527-4bc7-eac4-4bee42532c5a"},"outputs":[{"name":"stdout","output_type":"stream","text":["2.167361111111111\n","38\n"]}],"source":["#       1. new_date 의 시작 timeidx 와 base_date end timeidx 의 최소 days' gap     #\n","#       2. new_date 의 시작 부분 indi. value 는 np.nan 으로 채워질 거기 때문에 계산해야함    #\n","\n","df_count = droped_new_res_df.count()\n","len_missing = df_count.max() - df_count.min()\n","print(len_missing / 1440)\n","\n","#       3. \n","missing_sliced_df = droped_new_res_df.iloc[len_missing:]\n","df_count2 = missing_sliced_df.count()\n","# print(df_count2)\n","print((df_count2.max() - df_count2.min()))    # this value should be zero !\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"AY7E2_hTBsyM"},"outputs":[],"source":["# df_count2.index[df_count2.argmin()]\n","# missing_sliced_df.head(5)\n","\n","stay_missed = np.sum(pd.isnull(missing_sliced_df), axis=0)\n","print(stay_missed)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"p9yqewOw9g33"},"outputs":[],"source":["stay_missed_cols = stay_missed[stay_missed != 0].index\n","\n","for sm_col in stay_missed_cols:\n","  \n","  row_idx = np.argwhere(pd.isnull(missing_sliced_df[sm_col].values))\n","\n","  plt.figure(figsize=(3,3))\n","  plt.plot(row_idx)\n","  plt.ylim(0, len(missing_sliced_df))\n","  plt.title(sm_col)\n","\n","  plt.show()\n"]},{"cell_type":"markdown","metadata":{"id":"MSUY4nnku3s9"},"source":["## legacy"]},{"cell_type":"markdown","metadata":{"id":"epgS5Dksu-HX"},"source":["### mv files"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"aJcVpEdrslA5"},"outputs":[],"source":["df_path = './candlestick_concated/survey_df_v2'\n","files_ = os.listdir(df_path)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"cEKyEYkotFDy"},"outputs":[],"source":["dirs = [file_ for file_ in files_ if not file_.endswith('.ftr')]\n","files = [file_ for file_ in files_ if file_.endswith('.ftr')]"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":4,"status":"ok","timestamp":1644111921194,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"IgM79tcxtPVZ","outputId":"84305b35-eb52-49fc-d5fd-fdbc64cc8679"},"outputs":[{"data":{"text/plain":["['2022-01-10 ETHUSDT', '2022-01-10 ETHUSDT_all', '2022-02-04 SOLUSDT']"]},"execution_count":6,"metadata":{},"output_type":"execute_result"}],"source":["dirs"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"M767iRtwtRQP"},"outputs":[],"source":["def move_fn(dir_, file_):\n","  src_path = os.path.join(df_path, file_)\n","  dst_path = os.path.join(df_path, dir_, file_)\n","  shutil.move(src_path, dst_path)\n","  print(\"moved to {}\".format(dst_path))\n","\n","_ = [move_fn('2022-01-10 ETHUSDT_all', file_) for file_ in files if 'eth'.upper() in file_]\n","# sols\n"]},{"cell_type":"markdown","metadata":{"id":"Ci_jUnNTZbm9"},"source":["### load data (old)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":22503,"status":"ok","timestamp":1638246127510,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"_bXyS2yrZYC6","outputId":"b24a8a66-48b1-42b5-aa79-63f5a8542bac"},"outputs":[{"name":"stdout","output_type":"stream","text":["['2021-05-30 ETHUSDT.xlsx', '2021-04-30 ETHUSDT.xlsx', '2021-07-03 ETHUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-10-10 ETCUSDT.xlsx', '2021-10-10 BTCUSDT.xlsx', '2021-10-10 ETHUSDT.xlsx', '2021-10-10 ADAUSDT.xlsx', '2021-10-10 XLMUSDT.xlsx', '2021-10-10 LINKUSDT.xlsx', '2021-10-10 LTCUSDT.xlsx', '2021-10-10 EOSUSDT.xlsx', '2021-10-10 XRPUSDT.xlsx', '2021-10-10 BCHUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr', '2021-10-10 ETCUSDT.ftr', '2021-10-10 BTCUSDT.ftr', '2021-10-10 ETHUSDT.ftr', '2021-10-10 ADAUSDT.ftr', '2021-10-10 XLMUSDT.ftr', '2021-10-10 LINKUSDT.ftr', '2021-10-10 LTCUSDT.ftr', '2021-10-10 EOSUSDT.ftr', '2021-10-10 XRPUSDT.ftr', '2021-10-10 BCHUSDT.ftr', '2021-11-16 EOSUSDT.ftr', '2021-11-16 LTCUSDT.ftr', '2021-11-16 LINKUSDT.ftr', '2021-11-16 XLMUSDT.ftr', '2021-11-16 ADAUSDT.ftr', '2021-11-16 ETCUSDT.ftr', '2021-11-16 BTCUSDT.ftr', '2021-11-16 ETHUSDT.ftr', '2021-11-16 BCHUSDT.ftr', '2021-11-16 XRPUSDT.ftr']\n","['2021-05-30 ETHUSDT.xlsx', '2021-04-30 ETHUSDT.xlsx', '2021-07-03 ETHUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-10-10 ETCUSDT.xlsx', '2021-10-10 BTCUSDT.xlsx', '2021-10-10 ETHUSDT.xlsx', '2021-10-10 ADAUSDT.xlsx', '2021-10-10 XLMUSDT.xlsx', '2021-10-10 LINKUSDT.xlsx', '2021-10-10 LTCUSDT.xlsx', '2021-10-10 EOSUSDT.xlsx', '2021-10-10 XRPUSDT.xlsx', '2021-10-10 BCHUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr', '2021-10-10 ETCUSDT.ftr', '2021-10-10 BTCUSDT.ftr', '2021-10-10 ETHUSDT.ftr', '2021-10-10 ADAUSDT.ftr', '2021-10-10 XLMUSDT.ftr', '2021-10-10 LINKUSDT.ftr', '2021-10-10 LTCUSDT.ftr', '2021-10-10 EOSUSDT.ftr', '2021-10-10 XRPUSDT.ftr', '2021-10-10 BCHUSDT.ftr', '2021-11-16 LINKUSDT.ftr', '2021-11-16 ADAUSDT.ftr', '2021-11-16 ETCUSDT.ftr', '2021-11-16 XLMUSDT.ftr', '2021-11-16 XRPUSDT.ftr', '2021-11-16 EOSUSDT.ftr', '2021-11-16 BTCUSDT.ftr', '2021-11-16 BCHUSDT.ftr', '2021-11-16 ETHUSDT.ftr', '2021-11-16 LTCUSDT.ftr']\n","['2021-05-30 ETHUSDT.xlsx', '2021-04-30 ETHUSDT.xlsx', '2021-07-03 ETHUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-10-10 ETCUSDT.xlsx', '2021-10-10 BTCUSDT.xlsx', '2021-10-10 ETHUSDT.xlsx', '2021-10-10 ADAUSDT.xlsx', '2021-10-10 XLMUSDT.xlsx', '2021-10-10 LINKUSDT.xlsx', '2021-10-10 LTCUSDT.xlsx', '2021-10-10 EOSUSDT.xlsx', '2021-10-10 XRPUSDT.xlsx', '2021-10-10 BCHUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr', '2021-10-10 ETCUSDT.ftr', '2021-10-10 BTCUSDT.ftr', '2021-10-10 ETHUSDT.ftr', '2021-10-10 ADAUSDT.ftr', '2021-10-10 XLMUSDT.ftr', '2021-10-10 LINKUSDT.ftr', '2021-10-10 LTCUSDT.ftr', '2021-10-10 EOSUSDT.ftr', '2021-10-10 XRPUSDT.ftr', '2021-10-10 BCHUSDT.ftr', '2021-11-16 LINKUSDT.ftr', '2021-11-16 XLMUSDT.ftr', '2021-11-16 ADAUSDT.ftr', '2021-11-16 ETCUSDT.ftr', '2021-11-16 BTCUSDT.ftr', '2021-11-16 BCHUSDT.ftr', '2021-11-16 XRPUSDT.ftr', '2021-11-16 LTCUSDT.ftr', '2021-11-16 EOSUSDT.ftr', '2021-11-16 ETHUSDT.ftr']\n","['2021-07-03 ETHUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-10-10 ETCUSDT.xlsx', '2021-10-10 BTCUSDT.xlsx', '2021-10-10 ETHUSDT.xlsx', '2021-10-10 ADAUSDT.xlsx', '2021-10-10 XLMUSDT.xlsx', '2021-10-10 LINKUSDT.xlsx', '2021-10-10 LTCUSDT.xlsx', '2021-10-10 EOSUSDT.xlsx', '2021-10-10 XRPUSDT.xlsx', '2021-10-10 BCHUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr', '2021-10-10 ETCUSDT.ftr', '2021-10-10 BTCUSDT.ftr', '2021-10-10 ETHUSDT.ftr', '2021-10-10 ADAUSDT.ftr', '2021-10-10 XLMUSDT.ftr', '2021-10-10 LINKUSDT.ftr', '2021-10-10 LTCUSDT.ftr', '2021-10-10 EOSUSDT.ftr', '2021-10-10 XRPUSDT.ftr', '2021-10-10 BCHUSDT.ftr', '2021-11-16 XLMUSDT.ftr', '2021-11-16 ADAUSDT.ftr', '2021-11-16 ETCUSDT.ftr', '2021-11-16 BTCUSDT.ftr', '2021-11-16 ETHUSDT.ftr', '2021-11-16 BCHUSDT.ftr', '2021-11-16 XRPUSDT.ftr', '2021-11-16 EOSUSDT.ftr', '2021-11-16 LTCUSDT.ftr', '2021-11-16 LINKUSDT.ftr']\n","['2021-07-03 ETHUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-08-31 SUSHIUSDT.xlsx', '2021-08-31 CVCUSDT.xlsx', '2021-08-31 BTSUSDT.xlsx', '2021-08-31 HOTUSDT.xlsx', '2021-08-31 ZRXUSDT.xlsx', '2021-08-31 QTUMUSDT.xlsx', '2021-08-31 IOTAUSDT.xlsx', '2021-08-31 BTCBUSD.xlsx', '2021-08-31 WAVESUSDT.xlsx', '2021-08-31 ADAUSDT.xlsx', '2021-08-31 LITUSDT.xlsx', '2021-08-31 XTZUSDT.xlsx', '2021-08-31 BNBUSDT.xlsx', '2021-08-31 AKROUSDT.xlsx', '2021-08-31 HNTUSDT.xlsx', '2021-08-31 ETCUSDT.xlsx', '2021-08-31 XMRUSDT.xlsx', '2021-08-31 YFIUSDT.xlsx', '2021-08-31 ETHUSDT.xlsx', '2021-08-31 ALICEUSDT.xlsx', '2021-08-31 ALPHAUSDT.xlsx', '2021-08-31 SFPUSDT.xlsx', '2021-08-31 REEFUSDT.xlsx', '2021-08-31 BATUSDT.xlsx', '2021-08-31 DOGEUSDT.xlsx', '2021-08-31 TRXUSDT.xlsx', '2021-08-31 RLCUSDT.xlsx', '2021-08-31 BTCSTUSDT.xlsx', '2021-08-31 STORJUSDT.xlsx', '2021-08-31 SNXUSDT.xlsx', '2021-08-31 XLMUSDT.xlsx', '2021-08-31 NEOUSDT.xlsx', '2021-08-31 UNFIUSDT.xlsx', '2021-08-31 SANDUSDT.xlsx', '2021-08-31 DASHUSDT.xlsx', '2021-08-31 KAVAUSDT.xlsx', '2021-08-31 RUNEUSDT.xlsx', '2021-08-31 CTKUSDT.xlsx', '2021-08-31 LINKUSDT.xlsx', '2021-08-31 CELRUSDT.xlsx', '2021-08-31 RSRUSDT.xlsx', '2021-08-31 DGBUSDT.xlsx', '2021-08-31 SKLUSDT.xlsx', '2021-08-31 RENUSDT.xlsx', '2021-08-31 TOMOUSDT.xlsx', '2021-08-31 MTLUSDT.xlsx', '2021-08-31 LTCUSDT.xlsx', '2021-08-31 DODOUSDT.xlsx', '2021-08-31 EGLDUSDT.xlsx', '2021-08-31 KSMUSDT.xlsx', '2021-08-31 ONTUSDT.xlsx', '2021-08-31 VETUSDT.xlsx', '2021-08-31 TRBUSDT.xlsx', '2021-08-31 MANAUSDT.xlsx', '2021-08-31 COTIUSDT.xlsx', '2021-08-31 CHRUSDT.xlsx', '2021-08-31 ETHUSDT_210924.xlsx', '2021-08-31 BAKEUSDT.xlsx', '2021-08-31 GRTUSDT.xlsx', '2021-08-31 FLMUSDT.xlsx', '2021-08-31 EOSUSDT.xlsx', '2021-08-31 OGNUSDT.xlsx', '2021-08-31 SCUSDT.xlsx', '2021-08-31 BALUSDT.xlsx', '2021-08-31 STMXUSDT.xlsx', '2021-08-31 BTTUSDT.xlsx', '2021-08-31 LUNAUSDT.xlsx', '2021-08-31 DENTUSDT.xlsx', '2021-08-31 KNCUSDT.xlsx', '2021-08-31 SRMUSDT.xlsx', '2021-08-31 ENJUSDT.xlsx', '2021-08-31 ZENUSDT.xlsx', '2021-08-31 ATOMUSDT.xlsx', '2021-08-31 NEARUSDT.xlsx', '2021-08-31 BCHUSDT.xlsx', '2021-08-31 IOSTUSDT.xlsx', '2021-08-31 HBARUSDT.xlsx', '2021-08-31 ZECUSDT.xlsx', '2021-08-31 1000SHIBUSDT.xlsx', '2021-08-31 TLMUSDT.xlsx', '2021-08-31 BZRXUSDT.xlsx', '2021-08-31 ETHBUSD.xlsx', '2021-08-31 AAVEUSDT.xlsx', '2021-08-31 GTCUSDT.xlsx', '2021-08-31 ALGOUSDT.xlsx', '2021-08-31 ICPUSDT.xlsx', '2021-08-31 BTCUSDT_210924.xlsx', '2021-08-31 LRCUSDT.xlsx', '2021-08-31 AVAXUSDT.xlsx', '2021-08-31 MATICUSDT.xlsx', '2021-08-31 1INCHUSDT.xlsx', '2021-08-31 MKRUSDT.xlsx', '2021-08-31 THETAUSDT.xlsx', '2021-08-31 UNIUSDT.xlsx', '2021-08-31 LINAUSDT.xlsx', '2021-08-31 RVNUSDT.xlsx', '2021-08-31 FILUSDT.xlsx', '2021-08-31 NKNUSDT.xlsx', '2021-08-31 DEFIUSDT.xlsx', '2021-08-31 COMPUSDT.xlsx', '2021-08-31 BTCDOMUSDT.xlsx', '2021-08-31 SOLUSDT.xlsx', '2021-08-31 BTCUSDT.xlsx', '2021-08-31 OMGUSDT.xlsx', '2021-08-31 ICXUSDT.xlsx', '2021-08-31 BLZUSDT.xlsx', '2021-08-31 FTMUSDT.xlsx', '2021-08-31 YFIIUSDT.xlsx', '2021-08-31 KEEPUSDT.xlsx', '2021-08-31 BANDUSDT.xlsx', '2021-08-31 XRPUSDT.xlsx', '2021-08-31 SXPUSDT.xlsx', '2021-08-31 CRVUSDT.xlsx', '2021-08-31 BELUSDT.xlsx', '2021-08-31 DOTUSDT.xlsx', '2021-08-31 XEMUSDT.xlsx', '2021-08-31 ONEUSDT.xlsx', '2021-08-31 ZILUSDT.xlsx', '2021-08-31 AXSUSDT.xlsx', '2021-08-31 OCEANUSDT.xlsx', '2021-08-31 CHZUSDT.xlsx', '2021-08-31 ANKRUSDT.xlsx', '2021-08-31 SUSHIUSDT_res_dfs.pkl', '2021-07-01 ADAUSDT.xlsx', '2021-10-10 ETCUSDT.xlsx', '2021-10-10 BTCUSDT.xlsx', '2021-10-10 ETHUSDT.xlsx', '2021-10-10 ADAUSDT.xlsx', '2021-10-10 XLMUSDT.xlsx', '2021-10-10 LINKUSDT.xlsx', '2021-10-10 LTCUSDT.xlsx', '2021-10-10 EOSUSDT.xlsx', '2021-10-10 XRPUSDT.xlsx', '2021-10-10 BCHUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr', '2021-10-10 ETCUSDT.ftr', '2021-10-10 BTCUSDT.ftr', '2021-10-10 ETHUSDT.ftr', '2021-10-10 ADAUSDT.ftr', '2021-10-10 XLMUSDT.ftr', '2021-10-10 LINKUSDT.ftr', '2021-10-10 LTCUSDT.ftr', '2021-10-10 EOSUSDT.ftr', '2021-10-10 XRPUSDT.ftr', '2021-10-10 BCHUSDT.ftr', '2021-11-16 EOSUSDT.ftr', '2021-11-16 LTCUSDT.ftr', '2021-11-16 LINKUSDT.ftr', '2021-11-16 XLMUSDT.ftr', '2021-11-16 ADAUSDT.ftr', '2021-11-16 ETCUSDT.ftr', '2021-11-16 BTCUSDT.ftr', '2021-11-16 ETHUSDT.ftr', '2021-11-16 BCHUSDT.ftr', '2021-11-16 XRPUSDT.ftr']\n","['2021-07-01 BTCUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr', '2021-10-10 LTCUSDT.xlsx', '2021-10-10 LINKUSDT.xlsx', '2021-10-10 XLMUSDT.xlsx', '2021-10-10 ADAUSDT.xlsx', '2021-10-10 ETCUSDT.xlsx', '2021-10-10 BTCUSDT.xlsx', '2021-10-10 ETHUSDT.xlsx', '2021-10-10 BCHUSDT.xlsx', '2021-10-10 XRPUSDT.xlsx', '2021-10-10 EOSUSDT.xlsx', '2021-10-10 ETCUSDT.ftr', '2021-10-10 BTCUSDT.ftr', '2021-10-10 ETHUSDT.ftr', '2021-10-10 ADAUSDT.ftr', '2021-10-10 XLMUSDT.ftr', '2021-10-10 LINKUSDT.ftr', '2021-10-10 LTCUSDT.ftr', '2021-10-10 EOSUSDT.ftr', '2021-10-10 XRPUSDT.ftr', '2021-10-10 BCHUSDT.ftr', '2021-11-16 XLMUSDT.ftr', '2021-11-16 ADAUSDT.ftr', '2021-11-16 ETCUSDT.ftr', '2021-11-16 BTCUSDT.ftr', '2021-11-16 ETHUSDT.ftr', '2021-11-16 BCHUSDT.ftr', '2021-11-16 XRPUSDT.ftr', '2021-11-16 EOSUSDT.ftr', '2021-11-16 LTCUSDT.ftr', '2021-11-16 LINKUSDT.ftr']\n","['2021-02-07 BTC.xlsx', '2021-02-07 ETH.xlsx', '2021-02-11 BCHUSDT.xlsx', '2021-02-11 XRPUSDT.xlsx', '2021-02-11 EOSUSDT.xlsx', '2021-02-11 LTCUSDT.xlsx', '2021-02-11 ETCUSDT.xlsx', '2021-02-11 LINKUSDT.xlsx', '2021-02-11 XLMUSDT.xlsx', '2021-02-11 ADAUSDT.xlsx', '2021-02-11 XMRUSDT.xlsx', '2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr', '2021-10-10 ETCUSDT.xlsx', '2021-10-10 XLMUSDT.xlsx', '2021-10-10 BCHUSDT.xlsx', '2021-10-10 ADAUSDT.xlsx', '2021-10-10 XRPUSDT.xlsx', '2021-10-10 BTCUSDT.xlsx', '2021-10-10 EOSUSDT.xlsx', '2021-10-10 ETHUSDT.xlsx', '2021-10-10 LTCUSDT.xlsx', '2021-10-10 LINKUSDT.xlsx', '2021-10-10 ETCUSDT.ftr', '2021-10-10 BTCUSDT.ftr', '2021-10-10 ETHUSDT.ftr', '2021-10-10 ADAUSDT.ftr', '2021-10-10 XLMUSDT.ftr', '2021-10-10 LINKUSDT.ftr', '2021-10-10 LTCUSDT.ftr', '2021-10-10 EOSUSDT.ftr', '2021-10-10 XRPUSDT.ftr', '2021-10-10 BCHUSDT.ftr', '2021-11-16 LTCUSDT.ftr', '2021-11-16 LINKUSDT.ftr', '2021-11-16 XLMUSDT.ftr', '2021-11-16 ADAUSDT.ftr', '2021-11-16 ETCUSDT.ftr', '2021-11-16 BTCUSDT.ftr', '2021-11-16 ETHUSDT.ftr', '2021-11-16 XRPUSDT.ftr', '2021-11-16 BCHUSDT.ftr', '2021-11-16 EOSUSDT.ftr']\n","['2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx']\n"]}],"source":["interval = '1m'\n","date_path = './candlestick_concated/%s/quant_v2/' % interval\n","file_list = os.listdir(date_path)\n","print((file_list))\n","\n","interval2 = '3m'\n","date_path2 = './candlestick_concated/%s/quant_v2/' % interval2\n","file_list2 = os.listdir(date_path2)\n","print((file_list2))\n","\n","interval3 = '5m'\n","date_path3 = './candlestick_concated/%s/quant_v2/' % interval3\n","file_list3 = os.listdir(date_path3)\n","print((file_list3))\n","\n","interval4 = '15m'\n","date_path4 = './candlestick_concated/%s/quant_v2/' % interval4\n","file_list4 = os.listdir(date_path4)\n","print((file_list4))\n","\n","interval5 = '30m'\n","date_path5 = './candlestick_concated/%s/quant_v2/' % interval5\n","file_list5 = os.listdir(date_path5)\n","print((file_list5))\n","\n","interval6 = '1h'\n","date_path6 = './candlestick_concated/%s/quant_v2/' % interval6\n","file_list6 = os.listdir(date_path6)\n","print((file_list6))\n","\n","interval7 = '4h'\n","date_path7 = './candlestick_concated/%s/quant_v2/' % interval7\n","file_list7 = os.listdir(date_path7)\n","print((file_list7))\n","\n","interval8 = '1d'\n","date_path8 = './candlestick_concated/%s/quant_v2/' % interval8\n","file_list8 = os.listdir(date_path8)\n","print((file_list8))"]},{"cell_type":"markdown","metadata":{"id":"M8-EChy0VsDr"},"source":["### cudf"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":414,"status":"ok","timestamp":1638754008241,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"b09qAb1sVtRP","outputId":"3a824202-064a-4544-b791-ffc777bb3f9c"},"outputs":[{"name":"stdout","output_type":"stream","text":["usage: conda [-h] [-V] command ...\n","conda: error: unrecognized arguments: -t=/content/notebooks\n"]}],"source":["# !conda install -c rapidsai-nightly -c nvidia -c numba -c conda-forge \\\n","#     cudf python=3.7 cudatoolkit=11.1 -t=$nb_path"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":413,"status":"ok","timestamp":1638754715310,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"Jnz6i7ZqRnb0","outputId":"207bc57b-a17a-4f67-fb26-24e46e2c6e26"},"outputs":[{"name":"stdout","output_type":"stream","text":["***********************************************************************\n","Woo! Your instance has the right kind of GPU, a Tesla P100-PCIE-16GB!\n","***********************************************************************\n","\n"]}],"source":["# !git clone https://github.com/rapidsai/rapidsai-csp-utils.git\n","!python rapidsai-csp-utils/colab/env-check.py"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"4sKA_9Dbg4s2"},"outputs":[],"source":["# This will update the Colab environment and restart the kernel.  Don't run the next cell until you see the session crash.\n","!bash rapidsai-csp-utils/colab/update_gcc.sh\n","import os\n","os._exit(00)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"d1C4pNiBhYHX"},"outputs":[],"source":["# This will install CondaColab.  This will restart your kernel one last time.  Run this cell by itself and only run the next cell once you see the session crash.\n","import condacolab\n","condacolab.install()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":414,"status":"ok","timestamp":1638754863073,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"iGx3ACTvZqck","outputId":"e8379cc4-c325-4fe0-ac46-5fbbd7d38829"},"outputs":[{"name":"stdout","output_type":"stream","text":["✨🍰✨ Everything looks OK!\n"]}],"source":["# you can now run the rest of the cells as normal\n","import condacolab\n","condacolab.check()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"oR8s7U8c7C28","outputId":"22be2731-fae1-45fc-f310-e48f60774bb2"},"outputs":[{"name":"stdout","output_type":"stream","text":["Installing RAPIDS Stable 21.10\n","Starting the RAPIDS install on Colab.  This will take about 15 minutes.\n","Collecting package metadata (current_repodata.json): ...working... done\n","Solving environment: ...working... WARNING conda.core.solve:_add_specs(611): pinned spec cudatoolkit=11.1 conflicts with explicit specs.  Overriding pinned spec.\n","failed with initial frozen solve. Retrying with flexible solve.\n","Solving environment: ...working... WARNING conda.core.solve:_add_specs(611): pinned spec cudatoolkit=11.1 conflicts with explicit specs.  Overriding pinned spec.\n","failed with repodata from current_repodata.json, will retry with next repodata source.\n","Collecting package metadata (repodata.json): ...working... done\n"]}],"source":["# Installing RAPIDS is now 'python rapidsai-csp-utils/colab/install_rapids.py <release> <packages>'\n","# The <release> options are 'stable' and 'nightly'.  Leaving it blank or adding any other words will default to stable.\n","# The <packages> option are default blank or 'core'.  By default, we install RAPIDSAI and BlazingSQL.  The 'core' option will install only RAPIDSAI and not include BlazingSQL, \n","!python rapidsai-csp-utils/colab/install_rapids.py stable\n","import os\n","os.environ['NUMBAPRO_NVVM'] = '/usr/local/cuda/nvvm/lib64/libnvvm.so'\n","os.environ['NUMBAPRO_LIBDEVICE'] = '/usr/local/cuda/nvvm/libdevice/'\n","os.environ['CONDA_PREFIX'] = '/usr/local'"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"kWsxi4ZpKtGt"},"outputs":[],"source":["import shutil\n","import sys\n","\n","colab_env = \"/usr/lib\"\n","\n","rapids_path = os.path.join(current_path, \"rapidsai-csp-utils/lib\")\n","rapids_libs = os.listdir(rapids_path)\n","print(rapids_libs)\n","# break\n","\n","for lib_ in rapids_libs:\n","  try:\n","    shutil.copy(os.path.join(rapids_path, lib_), os.path.join(colab_env, lib_))\n","    sys.path.append(os.path.join(colab_env, lib_))\n","    print(\"copied to\" + os.path.join(colab_env, lib_))\n","  except Exception as e:\n","    print(e)"]},{"cell_type":"markdown","metadata":{"id":"Iy76iO7gztne"},"source":["### move legacy files"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"hMRht32Czwry"},"outputs":[],"source":["# print()\n","cur_dir_list = os.listdir('.')\n","for f in cur_dir_list:\n","  if 'legacy' in f :\n","    # print(f)\n","    if os.path.isdir(current_path + f,):\n","      continue\n","\n","    shutil.move(current_path + f, current_path + 'legacy/' + f)\n","    print(\"moved to\" + current_path + 'legacy/' +  f)"]},{"cell_type":"markdown","metadata":{"id":"5duWn8t4BRyv"},"source":["# IDE platform\n"]},{"cell_type":"markdown","metadata":{"id":"6HOjnZjSgzk1"},"source":["## load ftr_list"]},{"cell_type":"code","execution_count":3,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":6041,"status":"ok","timestamp":1650414207599,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"7FPBG5Qqg2jB","outputId":"6dc1c205-b78c-469b-d3d8-dbe172f6fe77"},"outputs":[{"output_type":"stream","name":"stdout","text":["['2022-02-17 ETHUSDT.ftr']\n","2022-02-17 ETHUSDT.ftr loaded !\n","load res_df_ elapsed time : 4.638428211212158\n"]}],"source":["save_path = './candlestick_concated/res_df/'\n","\n","dir_path = \"bb4h_backi2\"\n","dir_path = \"bb1d_backi2\"\n","date = \"2022-01-10\"\n","date = \"2022-02-17\"\n","\n","ftr_path = os.path.join(save_path, dir_path, \"concat/cum\", date)\n","\n","# ------ 1T_database ------ #\n","# date = \"2022-04-08\"\n","# ftr_path = os.path.join(save_path.replace(\"res_df\", \"database_bn\"), \"non_cum\", date)\n","# ftr_path = os.path.join(save_path.replace(\"res_df\", \"database_bn\"), \"cum\", date)\n","\n","# ------ load ftr list ------ #\n","ftr_list = [s for s in os.listdir(ftr_path) if \"ftr\" in s if date in s]\n","# ftr_list = [s for s in os.listdir(os.path.join(save_path, dir_path)) if \"ftr\" in s if date in s]\n","print(ftr_list)\n","\n","start_0 = time.time()\n","key = ftr_list[0]  # tempoaray use single key\n","res_df_ = pd.read_feather(os.path.join(ftr_path, key), columns=None, use_threads=True).set_index(\"index\")\n","# print(res_df_.head())\n","print(key, \"loaded !\")\n","print(\"load res_df_ elapsed time :\", time.time() - start_0)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"RQH_l4opEh_O"},"outputs":[],"source":["res_df_.dtypes"]},{"cell_type":"markdown","metadata":{"id":"x2yj2SwAXDLp"},"source":["### edit cols"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"x9wkWw15XCAm"},"outputs":[],"source":["col_list = list(res_df_.columns)\n","# # [col_ for col_ in col_list if 'score' in col_]\n","\n","# ------ drop ------ #\n","# res_df_.drop([col_ for col_ in col_list if '_T20' in col_], inplace=True, axis=1)\n","# res_df_.drop([col_ for col_ in col_list if '_T40' in col_], inplace=True, axis=1)\n","# res_df_.drop([col_ for col_ in col_list if 'long_base' in col_], inplace=True, axis=1)\n","res_df_.drop([col_ for col_ in col_list[5:]], inplace=True, axis=1)\n","\n","# ------ replace ------ #\n","# for c_i, col_ in enumerate(col_list):\n","#   # if 'eTa_5T' in col_:\n","#   # if col_[-1] in ['m', 'h', 'd', 'H'] and '_' in col_:eTa_5T\n","#   # if col_[0] in ['h'] and '_' in col_:\n","#   if 'bir_' in col_:\n","\n","#     col_list[c_i] = col_.replace('bir_', 'ir_')\n","#     # col_list[c_i] = col_.replace('m', 'T').replace('h', 'H').replace('1T', 'T')\n","#     # col_list[c_i] = col_.replace('1d', 'D')\n","#     # col_list[c_i] = col_.replace('eTa_5T', 'ema_5T')\n","#     # col_list[c_i] = col_list[c_i][1:]\n","#     # print(col_list[c_i][0])\n","# res_df_.columns = col_list\n","# col_list[-2:] = ['resi_T', 'sup_T']"]},{"cell_type":"markdown","metadata":{"id":"14chOHeXh6JD"},"source":["### lab"]},{"cell_type":"markdown","metadata":{"id":"O87s8_EUakqS"},"source":["#### instant indi."]},{"cell_type":"code","source":["def pumping_ratio(res_df, config, itv, period1, period2):\n","\n","  bb_lower_5T = res_df['bb_lower_5T'].to_numpy()\n","  bb_upper_5T = res_df['bb_upper_5T'].to_numpy()\n","  bb_range = bb_upper_5T - bb_lower_5T\n","\n","  selection_id = config.strat_version\n","  \n","  res_df['short_ppr_{}'.format(selection_id)] = res_df['short_tp_gap_{}'.format(selection_id)].to_numpy() / get_line(res_df['short_wave_high_idx_{}{}{}'.format(itv, period1, period2)].to_numpy(), bb_range)\n","  res_df['long_ppr_{}'.format(selection_id)] = res_df['long_tp_gap_{}'.format(selection_id)].to_numpy() / get_line(res_df['long_wave_low_idx_{}{}{}'.format(itv, period1, period2)].to_numpy(), bb_range)\n"],"metadata":{"id":"JWj02LLGbnji","executionInfo":{"status":"ok","timestamp":1650415754653,"user_tz":-540,"elapsed":344,"user":{"displayName":"7th June","userId":"08178289703395036410"}}},"execution_count":46,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"OpkclLSzazZ-"},"outputs":[],"source":["def wave_body_ratio(res_df_, itv, period):\n","  dc_upper_ = res_df_['dc_upper_{}{}'.format(itv, period)].to_numpy()\n","  dc_lower_ = res_df_['dc_lower_{}{}'.format(itv, period)].to_numpy()\n","  close_ = res_df_['close_{}'.format(itv)].to_numpy()\n","  open_ = res_df_['open_{}'.format(itv)].to_numpy()\n","\n","  dc_range = dc_upper_ - dc_lower_\n","  body_range = abs(close_ - open_)\n","\n","  res_df_['wave_body_ratio'] = body_range / dc_range\n","  res_df_['dc_upper_body_ratio'] = (np.maximum(close_, open_) - dc_upper_) / body_range\n","  res_df_['dc_lower_body_ratio'] = (dc_lower_) - np.minimum(close_, open_) / body_range\n","\n","  return"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"0-zzitQRbnz8"},"outputs":[],"source":["# res_df_['wave_body_ratio'].tail(200)\n","\n","itv = 'H'\n","period = 5\n","wave_body_ratio(res_df_, itv, period)"]},{"cell_type":"markdown","metadata":{"id":"LyGnAMvLYvOZ"},"source":["#### wave_range"]},{"cell_type":"code","execution_count":25,"metadata":{"id":"PV-dlAVZfehP","executionInfo":{"status":"ok","timestamp":1650414535587,"user_tz":-540,"elapsed":1270,"user":{"displayName":"7th June","userId":"08178289703395036410"}}},"outputs":[],"source":["\n","def get_line(touch_idx, rtc_):\n","  touch_idx_copy = touch_idx.copy()\n","  touch_line = np.full_like(rtc_, np.nan)\n","\n","  nan_idx = np.isnan(touch_idx_copy)\n","  touch_idx_copy[nan_idx] = 0   # for indexing array\n","  touch_line = rtc_[touch_idx_copy.astype(int)]\n","  touch_line[nan_idx] = np.nan   # for true comp.\n","\n","  return touch_line\n","\n","def wave_range_v8(df, period1, period2, ltf_df=None, wave_min_bars=20, wave_max_bars=40):  # v2 for period1 only\n","\n","  itv = pd.infer_freq(df.index)\n","\n","  donchian_channel_v2(df, period1) \n","  donchian_channel_v2(df, period2) \n","  dc_lower_, dc_upper_ = df['dc_lower_{}{}'.format(itv, period1)].to_numpy(), df['dc_upper_{}{}'.format(itv, period1)].to_numpy()\n","  dc_lower2_, dc_upper2_ = df['dc_lower_{}{}'.format(itv, period2)].to_numpy(), df['dc_upper_{}{}'.format(itv, period2)].to_numpy()\n","  \n","  short_base = (dc_lower_ + dc_upper2_) / 2\n","  long_base = (dc_upper_ + dc_lower2_) / 2\n","  df['short_base_{}{}{}'.format(itv, period1, period2)] = short_base\n","  df['long_base_{}{}{}'.format(itv, period1, period2)] = long_base\n","\n","  len_df = len(df)   \n","  short_open_res = np.ones(len_df)\n","  long_open_res = np.ones(len_df)\n","  \n","  data_cols = ['open', 'high', 'low']\n","  open, high, low = [df[col_].to_numpy() for col_ in data_cols]\n","\n","  short_upper_touch_idx = pd.Series(np.where(high >= dc_upper2_, np.arange(len_df), np.nan)).rolling(wave_max_bars, min_periods=1).max().to_numpy()  # min -> max\n","  short_lower_touch_idx = pd.Series(np.where(low <= dc_lower_, np.arange(len_df), np.nan)).rolling(wave_max_bars, min_periods=1).max().to_numpy()   # min 으로 하면 a 이전에 b 있는건 모두 제외하게됨    \n","  short_open_res *= (high >= short_base) & (short_base >= open) & (short_upper_touch_idx < short_lower_touch_idx)\n","  \n","  short_valid_idx = (short_lower_touch_idx - short_upper_touch_idx) >= wave_min_bars\n","  df['short_wave_high_idx_{}{}{}'.format(itv, period1, period2)] = short_upper_touch_idx\n","  df['short_wave_high_{}{}{}'.format(itv, period1, period2)] = get_line(short_upper_touch_idx, dc_upper2_)\n","  df['short_wave_low_{}{}{}'.format(itv, period1, period2)] = get_line(short_lower_touch_idx, dc_lower_)\n","  df['short_wave_point_{}{}{}'.format(itv, period1, period2)] = short_open_res * short_valid_idx  \n","       \n","  long_lower_touch_idx = pd.Series(np.where(low <= dc_lower2_, np.arange(len_df), np.nan)).rolling(wave_max_bars, min_periods=1).max().to_numpy()     \n","  long_upper_touch_idx = pd.Series(np.where(high >= dc_upper_, np.arange(len_df), np.nan)).rolling(wave_max_bars, min_periods=1).max().to_numpy()\n","  long_open_res *= (open >= long_base) & (long_base >= low) & (long_lower_touch_idx < long_upper_touch_idx)\n","\n","  long_valid_idx = (long_upper_touch_idx - long_lower_touch_idx) >= wave_min_bars  \n","  df['long_wave_low_idx_{}{}{}'.format(itv, period1, period2)] = long_lower_touch_idx\n","  df['long_wave_low_{}{}{}'.format(itv, period1, period2)] = get_line(long_lower_touch_idx, dc_lower2_)\n","  df['long_wave_high_{}{}{}'.format(itv, period1, period2)] = get_line(long_upper_touch_idx, dc_upper_)\n","  df['long_wave_point_{}{}{}'.format(itv, period1, period2)] = long_open_res * long_valid_idx  # multi selection_id 로, formatting 하는 거임\n","\n","  if itv != 'T':\n","    assert ltf_df is not None, \"assert ltf_df is not None\"\n","    join_cols = np.arange(-14, 0 ,1).astype(int)  # points & donchian_channels\n","    ltf_df.drop(df.columns[join_cols], inplace=True, axis=1, errors='ignore')\n","    try:\n","      ltf_df = ltf_df.join(to_lower_tf_v2(ltf_df, df, join_cols), how='inner')\n","    except Exception as e:\n","      print(\"error in wave_range()'s join() :\", e)\n","  else:\n","    ltf_df = df    \n","\n","  return ltf_df\n","  \n","def wave_range_v6(df, period1, period2, ltf_df=None, touch_period=50):  # v2 for period1 only\n","\n","  itv = pd.infer_freq(df.index)\n","\n","  donchian_channel_v2(df, period1) \n","  donchian_channel_v2(df, period2) \n","  dc_lower_, dc_upper_ = df['dc_lower_{}{}'.format(itv, period1)].to_numpy(), df['dc_upper_{}{}'.format(itv, period1)].to_numpy()\n","  dc_lower2_, dc_upper2_ = df['dc_lower_{}{}'.format(itv, period2)].to_numpy(), df['dc_upper_{}{}'.format(itv, period2)].to_numpy()\n","  \n","  short_base = (dc_lower_ + dc_upper2_) / 2\n","  long_base = (dc_upper_ + dc_lower2_) / 2\n","  df['short_base_{}{}{}'.format(itv, period1, period2)] = short_base\n","  df['long_base_{}{}{}'.format(itv, period1, period2)] = long_base\n","\n","  len_df = len(df)   \n","  short_open_res = np.ones(len_df)\n","  long_open_res = np.ones(len_df)\n","  \n","  data_cols = ['open', 'high', 'low']\n","  open, high, low = [df[col_].to_numpy() for col_ in data_cols]\n","\n","  short_a_touch_idx = pd.Series(np.where(high >= dc_upper2_, np.arange(len_df), np.nan)).rolling(touch_period, min_periods=1).max().to_numpy()  # min -> max\n","  short_b_touch_idx = pd.Series(np.where(low <= dc_lower_, np.arange(len_df), np.nan)).rolling(touch_period, min_periods=1).max().to_numpy()   # min 으로 하면 a 이전에 b 있는건 모두 제외하게됨    \n","  short_open_res *= (high >= short_base) & (short_base >= open) & (short_a_touch_idx < short_b_touch_idx)\n","  df['short_a_touch_idx_{}{}{}'.format(itv, period1, period2)] = short_a_touch_idx\n","  df['short_b_touch_idx_{}{}{}'.format(itv, period1, period2)] = short_b_touch_idx\n","  df['short_a_line_{}{}{}'.format(itv, period1, period2)] = get_line(short_a_touch_idx, dc_upper2_)\n","  df['short_b_line_{}{}{}'.format(itv, period1, period2)] = get_line(short_b_touch_idx, dc_lower_)\n","  df['short_wave_point_{}{}{}'.format(itv, period1, period2)] = short_open_res\n","  \n","  long_a_touch_idx = pd.Series(np.where(low <= dc_lower2_, np.arange(len_df), np.nan)).rolling(touch_period, min_periods=1).max().to_numpy()       \n","  long_b_touch_idx = pd.Series(np.where(high >= dc_upper_, np.arange(len_df), np.nan)).rolling(touch_period, min_periods=1).max().to_numpy()    \n","  long_open_res *= (open >= long_base) & (long_base >= low) & (long_a_touch_idx < long_b_touch_idx)\n","  df['long_a_touch_idx_{}{}{}'.format(itv, period1, period2)] = long_a_touch_idx\n","  df['long_b_touch_idx_{}{}{}'.format(itv, period1, period2)] = long_b_touch_idx\n","  df['long_a_line_{}{}{}'.format(itv, period1, period2)] = get_line(long_a_touch_idx, dc_lower2_)\n","  df['long_b_line_{}{}{}'.format(itv, period1, period2)] = get_line(long_b_touch_idx, dc_upper_)\n","  df['long_wave_point_{}{}{}'.format(itv, period1, period2)] = long_open_res\n","\n","  if itv != 'T':\n","    assert ltf_df is not None, \"assert ltf_df is not None\"\n","    join_cols = np.arange(-16, 0 ,1).astype(int)  # points & donchian_channels\n","    ltf_df.drop(df.columns[join_cols], inplace=True, axis=1, errors='ignore')\n","    try:\n","      ltf_df = ltf_df.join(to_lower_tf_v2(ltf_df, df, join_cols), how='inner')\n","    except Exception as e:\n","      print(\"error in wave_range_v5's join() :\", e)\n","  else:\n","    ltf_df = df    \n","\n","  return ltf_df\n","\n","def wave_range_v5(df, period1, period2, ltf_df=None, touch_period=50):  # v2 for period1 only\n","\n","  itv = pd.infer_freq(df.index)\n","\n","  donchian_channel_v2(df, period1) \n","  donchian_channel_v2(df, period2) \n","  dc_lower_, dc_upper_ = df['dc_lower_{}{}'.format(itv, period1)].to_numpy(), df['dc_upper_{}{}'.format(itv, period1)].to_numpy()\n","  dc_lower2_, dc_upper2_ = df['dc_lower_{}{}'.format(itv, period2)].to_numpy(), df['dc_upper_{}{}'.format(itv, period2)].to_numpy()\n","  \n","  short_base = (dc_lower_ + dc_upper2_) / 2\n","  long_base = (dc_upper_ + dc_lower2_) / 2\n","  df['short_base_{}{}{}'.format(itv, period1, period2)] = short_base\n","  df['long_base_{}{}{}'.format(itv, period1, period2)] = long_base\n","\n","  len_df = len(df)   \n","  short_open_res = np.ones(len_df)\n","  long_open_res = np.ones(len_df)\n","  \n","  data_cols = ['open', 'high', 'low']\n","  open, high, low = [df[col_].to_numpy() for col_ in data_cols]\n","\n","  short_a_touch_idx = pd.Series(np.where(high >= dc_upper2_, np.arange(len_df), np.nan)).rolling(touch_period, min_periods=1).max().to_numpy()  # min -> max\n","  short_b_touch_idx = pd.Series(np.where(low <= dc_lower_, np.arange(len_df), np.nan)).rolling(touch_period, min_periods=1).max().to_numpy()   # min 으로 하면 a 이전에 b 있는건 모두 제외하게됨    \n","  short_open_res *= (high >= short_base) & (short_base >= open) & (short_a_touch_idx < short_b_touch_idx)\n","  df['short_a_touch_idx_{}{}{}'.format(itv, period1, period2)] = short_a_touch_idx\n","  df['short_b_touch_idx_{}{}{}'.format(itv, period1, period2)] = short_b_touch_idx\n","  df['short_wave_point_{}{}{}'.format(itv, period1, period2)] = short_open_res\n","  \n","  long_a_touch_idx = pd.Series(np.where(low <= dc_lower2_, np.arange(len_df), np.nan)).rolling(touch_period, min_periods=1).max().to_numpy()       \n","  long_b_touch_idx = pd.Series(np.where(high >= dc_upper_, np.arange(len_df), np.nan)).rolling(touch_period, min_periods=1).max().to_numpy()    \n","  long_open_res *= (open >= long_base) & (long_base >= low) & (long_a_touch_idx < long_b_touch_idx)\n","  df['long_a_touch_idx_{}{}{}'.format(itv, period1, period2)] = long_a_touch_idx\n","  df['long_b_touch_idx_{}{}{}'.format(itv, period1, period2)] = long_b_touch_idx\n","  df['long_wave_point_{}{}{}'.format(itv, period1, period2)] = long_open_res\n","\n","  if itv != 'T':\n","    assert ltf_df is not None, \"assert ltf_df is not None\"\n","    join_cols = np.arange(-12, 0 ,1).astype(int)  # points & donchian_channels\n","    ltf_df.drop(df.columns[join_cols], inplace=True, axis=1, errors='ignore')\n","    try:\n","      ltf_df = ltf_df.join(to_lower_tf_v2(ltf_df, df, join_cols), how='inner')\n","      # ltf_df = ltf_df.merge(to_lower_tf_v2(ltf_df, df, [-7, -6, -5, -4, -3, -2, -1]), how='inner')\n","    except Exception as e:\n","      print(\"error in wave_range_v5's join() :\", e)\n","  else:\n","    ltf_df = df    \n","\n","  return ltf_df\n","\n","def wave_range_v4(df, period1, ltf_df=None, touch_lbperiod=50):  # v2 for period1 only\n","\n","  itv = pd.infer_freq(df.index)\n","\n","  donchian_channel_v2(df, period1) \n","  dc_lower_, dc_upper_ = df['dc_lower_{}{}'.format(itv, period1)].to_numpy(), df['dc_upper_{}{}'.format(itv, period1)].to_numpy()\n","\n","  df['wave_base_{}'.format(itv)] = (dc_lower_ + dc_upper_) / 2  # dc_base touch 사용하면 point 를 좀 더 일찍 잡을 수 있음  \n","  wave_base_ = df['wave_base_{}'.format(itv)].to_numpy()\n","  # short_base_ = df['short_base__{}'.format(itv)].to_numpy()\n","  # long_base_ = df['long_base__{}'.format(itv)].to_numpy()\n","\n","  len_df = len(df)   \n","  short_open_res = np.ones(len_df)\n","  long_open_res = np.ones(len_df)\n","  \n","  data_cols = ['open', 'high', 'low']\n","  open, high, low = [df[col_].to_numpy() for col_ in data_cols]\n","\n","  df['upper_touch_idx_{}{}'.format(itv, period1)] = pd.Series(np.where(high >= dc_upper_, np.arange(len_df), np.nan)).rolling(touch_lbperiod, min_periods=1).max().to_numpy()  # min -> max\n","  df['lower_touch_idx_{}{}'.format(itv, period1)] = pd.Series(np.where(low <= dc_lower_, np.arange(len_df), np.nan)).rolling(touch_lbperiod, min_periods=1).max().to_numpy()   # min 으로 하면 a 이전에 b 있는건 모두 제외하게됨    \n","  \n","  upper_touch_idx_ = df['upper_touch_idx_{}{}'.format(itv, period1)].to_numpy()\n","  lower_touch_idx_ = df['lower_touch_idx_{}{}'.format(itv, period1)].to_numpy()\n","\n","  # df['wave_upper_{}'.format(itv)] = pd.Series(get_line(dc_upper_touch_idx, dc_upper_)).ffill().to_numpy() \n","  # df['wave_lower_{}'.format(itv)] = pd.Series(get_line(dc_lower_touch_idx, dc_lower_)).ffill().to_numpy() \n","\n","  short_open_res *= (high >= wave_base_) & (wave_base_ >= open) & (upper_touch_idx_ < lower_touch_idx_)\n","  df['short_wave_point_{}{}'.format(itv, period1)] = short_open_res\n","\n","  long_open_res *= (open >= wave_base_) & (wave_base_ >= low) & (lower_touch_idx_ < upper_touch_idx_)\n","  df['long_wave_point_{}{}'.format(itv, period1)] = long_open_res\n","\n","  if itv != 'T':\n","    assert ltf_df is not None, \"assert ltf_df is not None\"\n","\n","    join_cols = np.arange(-7, 0 ,1).astype(int)\n","    ltf_df.drop(df.columns[join_cols], inplace=True, axis=1, errors='ignore')\n","    try:\n","      ltf_df = ltf_df.join(to_lower_tf_v2(ltf_df, df, join_cols), how='inner')\n","      # ltf_df = ltf_df.merge(to_lower_tf_v2(ltf_df, df, [-7, -6, -5, -4, -3, -2, -1]), how='inner')\n","    except Exception as e:\n","      print(\"error in wave_range_v4's join() :\", e)\n","  else:\n","    ltf_df = df    \n","\n","  return ltf_df"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"YqBXjVPzdccC"},"outputs":[],"source":["i = random.randint(0, len(res_df))\n","\n","plot_size = 200\n","t_df = res_df.iloc[i - plot_size:i]\n","a_data = t_df.to_numpy()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":537},"executionInfo":{"elapsed":1657,"status":"ok","timestamp":1649124296856,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"-Dr_tTk9csFm","outputId":"4c495e36-8ff0-4067-eed0-962c24ada307"},"outputs":[{"data":{"image/png":"\n","text/plain":["<Figure size 1080x648 with 1 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["plt.style.use(['dark_background', 'fast'])\n","fig = plt.figure(figsize=(15, 9))\n","nrows, ncols = 1, 1\n","gs = gridspec.GridSpec(nrows=nrows,  # row 부터 index 채우고 col 채우는 순서임 (gs_idx)\n","                        ncols=ncols\n","                        # height_ratios=[3, 1]\n","                        )\n","\n","ax = fig.add_subplot(gs[0])\n","\n","# ------ candles ------ #\n","candle_plot(a_data[:, col_idx_dict['ohlc_col_idxs']], ax, alpha=1.0, wickwidth=1.0)\n","# _ = [step_col_plot(a_data[:, params[0]], *params[1:]) for params in col_idx_dict['step_col_info']]\n","\n","itv, period1, period2 = 'T', 20, 20\n","t_df = wave_range_v5(t_df, 20, 20, ltf_df=None, touch_period=50)\n","\n","dc_upper_ = t_df['dc_upper_{}{}'.format(itv, period1)].to_numpy()\n","dc_lower_ = t_df['dc_lower_{}{}'.format(itv, period1)].to_numpy()\n","dc_upper2_ = t_df['dc_upper_{}{}'.format(itv, period2)].to_numpy()\n","dc_lower2_ = t_df['dc_lower_{}{}'.format(itv, period2)].to_numpy()\n","plt.step(np.arange(len(dc_upper_)), dc_upper_, alpha=1.0, color='yellow', linewidth=2)\n","plt.step(np.arange(len(dc_lower_)), dc_lower_, alpha=1.0, color='yellow', linewidth=2)\n","# plt.step(np.arange(len(t_df.dc_base_T40.to_numpy())), t_df.dc_base_T40.to_numpy(), alpha=1.0, color='white', linewidth=1)\n","\n","\n","short_open_plot_idx = t_df['short_wave_point_{}{}{}'.format(itv, period1, period2)].to_numpy().astype(bool)\n","long_open_plot_idx = t_df['long_wave_point_{}{}{}'.format(itv, period1, period2)].to_numpy().astype(bool)\n","short_base_ = t_df['short_base_{}{}{}'.format(itv, period1, period2)].to_numpy()\n","long_base_ = t_df['long_base_{}{}{}'.format(itv, period1, period2)].to_numpy()\n","plt.step(np.arange(len(short_base_))[short_open_plot_idx], short_base_[short_open_plot_idx], \"o\", alpha=1.0, color='#ff00ff', markersize=11)\n","plt.step(np.arange(len(long_base_))[long_open_plot_idx], long_base_[long_open_plot_idx], \"o\", alpha=1.0, color='#ff00ff', markersize=11)\n","\n","plt.show()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"7_FX0rIP_vyE"},"outputs":[],"source":["def sd_dc(df, period1, period2, ltf_df=None):\n","    assert period1 <= period2, \"assert period1 <= period2\"\n","    donchian_channel_v2(df, period1)\n","    donchian_channel_v2(df, period2)\n","    itv = pd.infer_freq(df.index)\n","    if itv != 'T':\n","      assert ltf_df is not None, \"assert ltf_df is not None\"\n","      ltf_df = ltf_df.join(to_lower_tf_v2(ltf_df, df, [-4, -3, -2, -1]), how='inner')\n","    else:\n","      ltf_df = df\n","\n","    ltf_df['short_base_{}'.format(itv)] = (ltf_df['dc_lower_{}{}'.format(itv, period1)].to_numpy() + ltf_df['dc_upper_{}{}'.format(itv, period2)].to_numpy()) / 2\n","    ltf_df['long_base_{}'.format(itv)] = (ltf_df['dc_upper_{}{}'.format(itv, period1)].to_numpy() + ltf_df['dc_lower_{}{}'.format(itv, period2)].to_numpy()) / 2\n","\n","    return ltf_df\n","\n","\n","def donchian_channel_v2(df, period):\n","  itv = pd.infer_freq(df.index)\n","  upper_name = 'dc_upper_{}{}'.format(itv, period)\n","  lower_name = 'dc_lower_{}{}'.format(itv, period)\n","\n","  df.drop([upper_name, lower_name], inplace=True, axis=1, errors='ignore')\n","\n","  df[upper_name] = df['high'].rolling(period).max()\n","  df[lower_name] = df['low'].rolling(period).min()\n","\n","  return\n","\n","def wave_range(df, period1, period2, ltf_df=None, touch_lbperiod=50):\n","    assert period1 <= period2, \"assert period1 <= period2\"\n","    donchian_channel_v2(df, period1)\n","    donchian_channel_v2(df, period2)\n","    itv = pd.infer_freq(df.index)\n","    if itv != 'T':\n","      assert ltf_df is not None, \"assert ltf_df is not None\"\n","      ltf_df = ltf_df.join(to_lower_tf_v2(ltf_df, df, [-4, -3, -2, -1]), how='inner')\n","    else:\n","      ltf_df = df\n","\n","    short_tp_1_, short_tp_0_ = ltf_df['dc_lower_{}{}'.format(itv, period1)].to_numpy(), ltf_df['dc_upper_{}{}'.format(itv, period2)].to_numpy()\n","    long_tp_1_, long_tp_0_ = ltf_df['dc_upper_{}{}'.format(itv, period1)].to_numpy(), ltf_df['dc_lower_{}{}'.format(itv, period2)].to_numpy()\n","\n","    ltf_df['short_base_{}'.format(itv)] = (short_tp_1_ + short_tp_0_) / 2  # dc_base touch 사용하면 point 를 좀 더 일찍 잡을 수 있음\n","    ltf_df['long_base_{}'.format(itv)] = (long_tp_1_ + long_tp_0_) / 2\n","    \n","    short_base = ltf_df['short_base_{}'.format(itv)].to_numpy()\n","    long_base = ltf_df['long_base_{}'.format(itv)].to_numpy()\n","\n","    len_df = len(ltf_df)   \n","    short_open_res = np.ones(len_df)\n","    long_open_res = np.ones(len_df)\n","    \n","    data_cols = ['open', 'high', 'low']\n","    open, high, low = [ltf_df[col_].to_numpy() for col_ in data_cols]\n","\n","    short_a_touch_idx = pd.Series(np.where(high >= short_tp_0_, np.arange(len_df), np.nan)).rolling(touch_lbperiod, min_periods=1).max().to_numpy()  # min -> max\n","    short_b_touch_idx = pd.Series(np.where(low <= short_tp_1_, np.arange(len_df), np.nan)).rolling(touch_lbperiod, min_periods=1).max().to_numpy()   # min 으로 하면 a 이전에 b 있는건 모두 제외하게됨    \n","    short_open_res *= (high >= short_base) & (short_base >= open) & (short_a_touch_idx < short_b_touch_idx)\n","\n","    ltf_df['short_wave_1_{}'.format(itv)] = pd.Series(get_line(short_b_touch_idx, short_tp_1_)).ffill().to_numpy()   # ffill() 다음 to_numpy() 안하면 None 값\n","    ltf_df['short_wave_0_{}'.format(itv)] = pd.Series(get_line(short_a_touch_idx, short_tp_0_)).ffill().to_numpy()\n","    ltf_df['short_wave_point_{}'.format(itv)] = short_open_res.astype(bool)\n","\n","    long_a_touch_idx = pd.Series(np.where(low <= long_tp_0_, np.arange(len_df), np.nan)).rolling(touch_lbperiod, min_periods=1).max().to_numpy()       \n","    long_b_touch_idx = pd.Series(np.where(high >= long_tp_1_, np.arange(len_df), np.nan)).rolling(touch_lbperiod, min_periods=1).max().to_numpy()    \n","    long_open_res *= (open >= long_base) & (long_base >= low) & (long_a_touch_idx < long_b_touch_idx)\n","\n","    ltf_df['long_wave_1_{}'.format(itv)] = pd.Series(get_line(long_b_touch_idx, long_tp_1_)).ffill().to_numpy()\n","    ltf_df['long_wave_0_{}'.format(itv)] = pd.Series(get_line(long_a_touch_idx, long_tp_0_)).ffill().to_numpy()\n","    ltf_df['long_wave_point_{}'.format(itv)] = long_open_res.astype(bool)\n","\n","    return ltf_df\n","\n","def wave_range_v2(df, period1, ltf_df=None, touch_lbperiod=50):  # v2 for period1 only\n","\n","  donchian_channel_v2(df, period1) \n","\n","  itv = pd.infer_freq(df.index)\n","  if itv != 'T':\n","    assert ltf_df is not None, \"assert ltf_df is not None\"\n","    try:\n","      ltf_df = ltf_df.join(to_lower_tf_v2(ltf_df, df, [-2, -1]), how='inner')\n","    except Exception as e:\n","      print(\"error in wave_range_v2's join() :\", e)\n","  else:\n","    ltf_df = df    \n","\n","  dc_lower_, dc_upper_ = ltf_df['dc_lower_{}{}'.format(itv, period1)].to_numpy(), ltf_df['dc_upper_{}{}'.format(itv, period1)].to_numpy()\n","\n","  # print(ltf_df.tail().iloc[:, -4:])\n","\n","  ltf_df['wave_base_{}'.format(itv)] = (dc_lower_ + dc_upper_) / 2  # dc_base touch 사용하면 point 를 좀 더 일찍 잡을 수 있음\n","  \n","  wave_base_ = ltf_df['wave_base_{}'.format(itv)].to_numpy()\n","  # short_base_ = ltf_df['short_base__{}'.format(itv)].to_numpy()\n","  # long_base_ = ltf_df['long_base__{}'.format(itv)].to_numpy()\n","\n","  len_df = len(ltf_df)   \n","  short_open_res = np.ones(len_df)\n","  long_open_res = np.ones(len_df)\n","  \n","  data_cols = ['open', 'high', 'low']\n","  open, high, low = [ltf_df[col_].to_numpy() for col_ in data_cols]\n","\n","  dc_upper_touch_idx = pd.Series(np.where(high >= dc_upper_, np.arange(len_df), np.nan)).rolling(touch_lbperiod, min_periods=1).max().to_numpy()  # min -> max\n","  dc_lower_touch_idx = pd.Series(np.where(low <= dc_lower_, np.arange(len_df), np.nan)).rolling(touch_lbperiod, min_periods=1).max().to_numpy()   # min 으로 하면 a 이전에 b 있는건 모두 제외하게됨    \n","  \n","  ltf_df['wave_upper_{}'.format(itv)] = pd.Series(get_line(dc_upper_touch_idx, dc_upper_)).ffill().to_numpy() \n","  ltf_df['wave_lower_{}'.format(itv)] = pd.Series(get_line(dc_lower_touch_idx, dc_lower_)).ffill().to_numpy() \n","\n","  short_open_res *= (high >= wave_base_) & (wave_base_ >= open) & (dc_upper_touch_idx < dc_lower_touch_idx)\n","  ltf_df['short_wave_point_{}'.format(itv)] = short_open_res.astype(bool)\n","\n","  long_open_res *= (open >= wave_base_) & (wave_base_ >= low) & (dc_lower_touch_idx < dc_upper_touch_idx)\n","  ltf_df['long_wave_point_{}'.format(itv)] = long_open_res.astype(bool)\n","\n","  return ltf_df\n","\n","def wave_range_v3(df, period1, ltf_df=None, touch_lbperiod=50):  # v2 for period1 only\n","\n","  itv = pd.infer_freq(df.index)\n","\n","  donchian_channel_v2(df, period1) \n","  dc_lower_, dc_upper_ = df['dc_lower_{}{}'.format(itv, period1)].to_numpy(), df['dc_upper_{}{}'.format(itv, period1)].to_numpy()\n","\n","  df['wave_base_{}'.format(itv)] = (dc_lower_ + dc_upper_) / 2  # dc_base touch 사용하면 point 를 좀 더 일찍 잡을 수 있음  \n","  wave_base_ = df['wave_base_{}'.format(itv)].to_numpy()\n","  # short_base_ = df['short_base__{}'.format(itv)].to_numpy()\n","  # long_base_ = df['long_base__{}'.format(itv)].to_numpy()\n","\n","  len_df = len(df)   \n","  short_open_res = np.ones(len_df)\n","  long_open_res = np.ones(len_df)\n","  \n","  data_cols = ['open', 'high', 'low']\n","  open, high, low = [df[col_].to_numpy() for col_ in data_cols]\n","\n","  dc_upper_touch_idx = pd.Series(np.where(high >= dc_upper_, np.arange(len_df), np.nan)).rolling(touch_lbperiod, min_periods=1).max().to_numpy()  # min -> max\n","  dc_lower_touch_idx = pd.Series(np.where(low <= dc_lower_, np.arange(len_df), np.nan)).rolling(touch_lbperiod, min_periods=1).max().to_numpy()   # min 으로 하면 a 이전에 b 있는건 모두 제외하게됨    \n","  \n","  # df['wave_upper_{}'.format(itv)] = pd.Series(get_line(dc_upper_touch_idx, dc_upper_)).ffill().to_numpy() \n","  # df['wave_lower_{}'.format(itv)] = pd.Series(get_line(dc_lower_touch_idx, dc_lower_)).ffill().to_numpy() \n","\n","  short_open_res *= (high >= wave_base_) & (wave_base_ >= open) & (dc_upper_touch_idx < dc_lower_touch_idx)\n","  df['short_wave_point_{}'.format(itv)] = short_open_res\n","\n","  long_open_res *= (open >= wave_base_) & (wave_base_ >= low) & (dc_lower_touch_idx < dc_upper_touch_idx)\n","  df['long_wave_point_{}'.format(itv)] = long_open_res\n","\n","  if itv != 'T':\n","    assert ltf_df is not None, \"assert ltf_df is not None\"\n","\n","    join_cols = np.arange(-7, 0 ,1).astype(int)\n","    ltf_df.drop(df.columns[join_cols], inplace=True, axis=1, errors='ignore')\n","    try:\n","      ltf_df = ltf_df.join(to_lower_tf_v2(ltf_df, df, join_cols), how='inner')\n","      # ltf_df = ltf_df.merge(to_lower_tf_v2(ltf_df, df, [-7, -6, -5, -4, -3, -2, -1]), how='inner')\n","    except Exception as e:\n","      print(\"error in wave_range_v3's join() :\", e)\n","  else:\n","    ltf_df = df    \n","\n","  return ltf_df\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"-AmhhMxC-ltr"},"outputs":[],"source":["res = wave_range_v3(to_htf(res_df, '5T', '1h'), 12, ltf_df=res_df, touch_lbperiod=50)\n","# res = wave_range_v3(res_df, 12, ltf_df=None, touch_lbperiod=50)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"gGDf6iBxFP_s"},"outputs":[],"source":["print(res.tail(100).iloc[:, -7:])"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ZoS_76wwAXhj"},"outputs":[],"source":["res.dtypes\n","# type(np.arange(-7,0,1).astype(int)[0])"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Z7bHV8CvC7eF"},"outputs":[],"source":["def to_lower_tf_v2(ltf_df, htf_df, column, backing_i=1, show_info=False):\n","    #       Todo        #\n","    #        1. 현재 downsampled df 만 허용, direct_df 사용시 issue 발생 가능할 것\n","    assert type(column[0]) in [int, np.int64], \"column value should be integer\"\n","    # if not replace_last_idx:\n","    #     assert datetime.timestamp(htf_df.index[-1]) >= datetime.timestamp(\n","    #         ltf_df.index[-1]), \"htf_lastidx should >= ltf_lastidx\"  # data sync confirmation\n","    #   htf idx ts 가 ltf 보다 작을 경우, intersec_idx 를 구할 수 없음\n","\n","    #   downsampled htf_df 만 허용 - 통일성\n","    #   non_resampled df 사용시 \"cannot reindex a non-unique index with a method or limit\" 라는 error_msg 확인\n","\n","    cols = htf_df.columns[column]  # to_lower_tf_v1 의 int col 반영\n","\n","    ltf_itv = pd.infer_freq(ltf_df.index)\n","    assert ltf_itv == 'T', \"currently only -> 'T' allowed..\"\n","\n","    if show_info:\n","        print(\"backing_i :\", backing_i)\n","\n","    #        1. htf last_ts_idx 의 second 가 :00 format (all rows same format)이 아닌 경우, bfill() 시 NaN 발생\n","    #           --> 상관 없음, 다른 윈인임\n","    #        2. single positional indexer is out-of-bounds => 대게 len(data) 부족 문제임 (row 증분)\n","    # iloc 뒤에 붙여야함, 아니면 timeidx 정상 출력 안됨\n","\n","    renamed_last_row = htf_df.rename(index={htf_df.index[-1]: ltf_df.index[-1]}, inplace=False).iloc[[-1]]\n","    if htf_df.index[-1] != renamed_last_row.index[-1]:  # cannot reindex a non-unique index with a method or limit 방지\n","        htf_df = htf_df.append(renamed_last_row)\n","\n","    # print(htf_df.tail())\n","\n","    # downsampled htf 의 freq_offset 기준으로 앞에서 뒤로 채우는게 맞음\n","    # --> hh:mm:00 format 을 사용해서 그럼 (59:999 면 bfill() 이였을 것)\n","    resampled_df = htf_df[cols].shift(backing_i).resample(ltf_itv).ffill()\n","    # print(resampled_df.tail())\n","    # print()\n","\n","    #        2. htf 가 downsampled 된 df 를 default 로 사용하기에, slicing 불필요해짐\n","    #        3. Shape of passed values is (799, 3), indices imply (3000, 3) -> len(ltf_df) > len(resampled_df) 란 의미\n","    #        4. solution => reindexing for inner join   #\n","    #         a. len(resampled_df) > len(ltf_df) 경우 slicing 진행\n","    #           -> ltf_index 를 다가져와도 resampled_indx 를 채울 수 없음 => error\n","    #           i. resampled length 를 ltf length 로 줄임\n","    #               1. 이미 htf_indi. 는 계산된 상태이고, \n","    #                   a. trader - 마지막 index 만 사용, 전혀 무리없음\n","    #                   b. idep - resampled_df.head(itv) 만큼만 소실된 것 -> 큰 무리없음\n","    #         b. len(resampled_df) < len(ltf_df)-> 상관없음 (ltf_index 에서 resampled_df length 만큼만 때가면 되니까)\n","    if len(resampled_df) > len(ltf_df):\n","        resampled_df = resampled_df.iloc[-len(ltf_df):]\n","    # print(\"len(ltf_df) :\", len(ltf_df))\n","    # print(\"len(resampled_df) :\", len(resampled_df))\n","    resampled_df.index = ltf_df.index[-len(resampled_df):]\n","    # assert len(ltf_df) <= len(resampled_df), \"for join method, assert len(ltf_df) <= len(resampled_df)\"\n","\n","    #       check last row's validity       #\n","    assert np.sum(\n","        pd.isnull(resampled_df.iloc[-1].values)) == 0, \"np.nan value occured, more {} rows might be reguired\".format(\n","        cols)\n","\n","    # if datetime.timestamp(htf_df.index[-1]) < datetime.timestamp(ltf_df.index[-1]):\n","    #     # resampled_df.rename(index={resampled_df.index[-1]: ltf_df.index[-1]}, inplace=True)\n","    #     print(resampled_df.tail())\n","    #     print(\"-----------\")\n","\n","    #        1. 필요한 len 계산해서 pre_proc. 진행 --> open_idx 를 동일하게 맞춰놓았고, shift 적용 상태이기 때문에 불필요함\n","\n","    #        1. ltf_df 의 마지막 timeidx 와 sync. 맞춰주어야함\n","    #           a. itv '1T' 가 아닌경우, 교집합 timeidx 가 존재하지 않을 수 있음\n","    # ltf_lastidx = ltf_df.tail(1).resample('1T').asfreq().index\n","    # intersec_idx_arr = np.argwhere(resampled_df.index == ltf_lastidx.item())\n","    # intersec_idx = intersec_idx_arr.item()\n","    # print(\"intersec_idx :\", intersec_idx)\n","    # print(\"len(resampled_df) :\", len(resampled_df))\n","    #\n","    # assert len(intersec_idx_arr) >= 1, \"len(intersec_idx_arr) is zero\"\n","    #\n","    # sliced_resampled_df = resampled_df[:intersec_idx + 1]\n","    # return sliced_resampled_df.values[-len(ltf_df):]\n","\n","    # return resampled_df.values[-len(ltf_df):]\n","    return resampled_df"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"WA094Xin1FGr"},"outputs":[],"source":["# 1. base_touch_idx 기준으로, 작정한다음, np.nan value 를 ffill() 진행\n","strat_version = config.strat_version\n","len_df = len(res_df)\n","short_open_res = np.ones(len_df)\n","long_open_res = np.ones(len_df)\n","\n","short_tp_1_col, short_tp_0_col, short_tp_gap_col = 'short_tp_1_{}'.format(strat_version), 'short_tp_0_{}'.format(strat_version), 'short_tp_gap_{}'.format(strat_version) \n","long_tp_1_col, long_tp_0_col, long_tp_gap_col = 'long_tp_1_{}'.format(strat_version), 'long_tp_0_{}'.format(strat_version), 'long_tp_gap_{}'.format(strat_version) \n","short_epout_1_col, short_epout_0_col, short_epout_gap_col = 'short_epout_1_{}'.format(strat_version), 'short_epout_0_{}'.format(strat_version), 'short_epout_gap_{}'.format(strat_version) \n","long_epout_1_col, long_epout_0_col, long_epout_gap_col = 'long_epout_1_{}'.format(strat_version), 'long_epout_0_{}'.format(strat_version), 'long_epout_gap_{}'.format(strat_version) \n","\n","data_cols = ['open', 'high', 'low']   # Todo - public_indi 이전에 해야할지도 모름 # 'close', 'haopen', 'hahigh', 'halow', 'haclose'\n","tp_cols = [short_tp_1_col, short_tp_0_col, short_tp_gap_col, long_tp_1_col, long_tp_0_col, long_tp_gap_col]   # Todo - public_indi 이전에 해야할지도 모름\n","epout_cols = [short_epout_1_col, short_epout_0_col, short_epout_gap_col, long_epout_1_col, long_epout_0_col, long_epout_gap_col]   # Todo - public_indi 이전에 해야할지도 모름\n","\n","short_tp_1_, short_tp_0_, short_tp_gap_, long_tp_1_, long_tp_0_, long_tp_gap_ = [res_df[col_].to_numpy() for col_ in tp_cols]\n","short_epout_1_, short_epout_0_, short_epout_gap_, long_epout_1_, long_epout_0_, long_epout_gap_ = [res_df[col_].to_numpy() for col_ in epout_cols]\n","open, high, low = [res_df[col_].to_numpy() for col_ in data_cols]\n","\n","short_base = (short_tp_1_ + short_tp_0_) / 2\n","long_base = (long_tp_1_ + long_tp_0_) / 2\n","\n","touch_period = 50\n","\n","short_a_touch_idx = pd.Series(np.where(high >= short_tp_0_, np.arange(len_df), np.nan)).rolling(touch_period, min_periods=1).max().to_numpy()  # min -> max\n","short_b_touch_idx = pd.Series(np.where(low <= short_tp_1_, np.arange(len_df), np.nan)).rolling(touch_period, min_periods=1).max().to_numpy()   # min 으로 하면 a 이전에 b 있는건 모두 제외하게됨\n","\n","short_en_p = (get_line(short_a_touch_idx, short_tp_0_) + get_line(short_b_touch_idx, short_tp_1_)) / 2\n","short_base_b = get_line(short_b_touch_idx, short_base)   # 현재, en_p == base_b, why ..?\n","short_tp_0_touch = get_line(short_a_touch_idx, short_tp_0_)\n","short_tp_1_touch = get_line(short_b_touch_idx, short_tp_1_)\n","short_tp_gap_b = get_line(short_b_touch_idx, short_tp_gap_)\n","short_open_res *= (high >= short_base) & (short_base >= open) & (short_a_touch_idx < short_b_touch_idx) #& (short_base_b + config.loc_set.point.base_gap * short_tp_gap_b >= short_base)\n","# short_open_res *= (high >= short_base_b) & (short_base_b >= low) & (short_a_touch_idx < short_b_touch_idx) & (short_base_b + config.loc_set.point.base_gap * short_tp_gap_b >= short_base)\n","\n","len_df = len(res_df)\n","long_a_touch_idx = pd.Series(np.where(low <= long_tp_0_, np.arange(len_df), np.nan)).rolling(touch_period, min_periods=1).max().to_numpy()       \n","long_b_touch_idx = pd.Series(np.where(high >= long_tp_1_, np.arange(len_df), np.nan)).rolling(touch_period, min_periods=1).max().to_numpy()\n","\n","long_en_p = (get_line(long_a_touch_idx, long_tp_0_) + get_line(long_b_touch_idx, long_tp_1_)) / 2\n","long_base_b = get_line(long_b_touch_idx, long_base)\n","long_tp_0_touch = get_line(long_a_touch_idx, long_tp_0_)\n","long_tp_1_touch = get_line(long_b_touch_idx, long_tp_1_)\n","long_tp_gap_b = get_line(long_b_touch_idx, long_tp_gap_)\n","long_open_res *= (open >= long_base) & (long_base >= low) & (long_a_touch_idx < long_b_touch_idx) # & (long_base_b - config.loc_set.point.base_gap * long_tp_gap_b <= long_base)\n","# long_open_res *= (open >= long_base) & (long_base >= low) # & (long_a_touch_idx < long_b_touch_idx) # & (long_base_b - config.loc_set.point.base_gap * long_tp_gap_b <= long_base)\n","# long_open_res *= (high >= long_base) & (long_base >= low) & (long_a_touch_idx < long_b_touch_idx) # & (long_base_b - config.loc_set.point.base_gap * long_tp_gap_b <= long_base)\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"t4P2qIYAFiDm"},"outputs":[],"source":["i = random.randint(0, len(res_df))\n","\n","plot_size = 200\n","t_df = res_df.iloc[i - plot_size:i]\n","a_data = t_df.to_numpy()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"5SIWeZb24xdl"},"outputs":[],"source":["plt.style.use(['dark_background', 'fast'])\n","fig = plt.figure(figsize=(15, 9))\n","nrows, ncols = 1, 1\n","gs = gridspec.GridSpec(nrows=nrows,  # row 부터 index 채우고 col 채우는 순서임 (gs_idx)\n","                        ncols=ncols\n","                        # height_ratios=[3, 1]\n","                        )\n","\n","ax = fig.add_subplot(gs[0])\n","\n","# ------ candles ------ #\n","candle_plot(a_data[:, col_idx_dict['ohlc_col_idxs']], ax, alpha=1.0, wickwidth=1.0)\n","# _ = [step_col_plot(a_data[:, params[0]], *params[1:]) for params in col_idx_dict['step_col_info']]\n","\n","# t_df = wave_range(t_df, 20, 20, ltf_df=None, touch_lbperiod=50)\n","t_df = mcp(t_df, 20, ltf_df=None, touch_lbperiod=50)\n","\n","plt.step(np.arange(len(t_df.dc_upper_T40.to_numpy())), t_df.dc_upper_T40.to_numpy(), alpha=1.0, color='yellow', linewidth=2)\n","plt.step(np.arange(len(t_df.dc_lower_T40.to_numpy())), t_df.dc_lower_T40.to_numpy(), alpha=1.0, color='yellow', linewidth=2)\n","plt.step(np.arange(len(t_df.dc_base_T40.to_numpy())), t_df.dc_base_T40.to_numpy(), alpha=1.0, color='white', linewidth=1)\n","\n","short_open_plot_idx = t_df.short_mcp_point_T40.to_numpy().astype(bool)\n","long_open_plot_idx = t_df.long_mcp_point_T40.to_numpy().astype(bool)\n","long_open_plot_idx = t_df.long_mcp_point_T40.to_numpy().astype(bool)\n","plt.step(np.arange(len(t_df.dc_base_T40.to_numpy()))[short_open_plot_idx], t_df.dc_base_T40.to_numpy()[short_open_plot_idx], \"o\", alpha=1.0, color='#ff00ff', markersize=11)\n","plt.step(np.arange(len(t_df.dc_base_T40.to_numpy()))[long_open_plot_idx], t_df.dc_base_T40.to_numpy()[long_open_plot_idx], \"o\", alpha=1.0, color='#ff00ff', markersize=11)\n","\n","plt.show()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":344,"status":"ok","timestamp":1648963836575,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"xPzel_I-5tdT","outputId":"107a4133-5161-4816-96e4-b57ebb22c1ea"},"outputs":[{"data":{"text/plain":["array([    nan,     nan,     nan,     nan,     nan,     nan,     nan,     nan,     nan,     nan,     nan,     nan,     nan,     nan,     nan,     nan,     nan,     nan,     nan,     nan,     nan,     nan,     nan,     nan,     nan,     nan,     nan,     nan,     nan,     nan,     nan,     nan,     nan,     nan,     nan,     nan,     nan,     nan,     nan, 3800.06, 3800.06, 3800.06, 3800.06, 3800.06, 3800.06, 3800.06, 3800.06, 3793.03, 3785.83, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3788.66, 3791.08, 3780.65, 3780.52, 3775.  , 3775.  , 3775.  , 3775.  , 3775.  , 3775.  , 3775.  , 3775.  , 3775.  , 3775.  , 3775.  , 3775.  , 3775.  , 3775.  , 3775.  , 3750.84, 3750.84, 3750.84, 3750.84, 3750.84, 3750.84, 3750.84, 3750.84, 3750.84, 3750.  , 3750.  , 3750.  , 3745.  , 3745.  , 3745.  , 3738.22, 3738.22, 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.91, 3733.44, 3733.44, 3733.44, 3733.44, 3733.44, 3733.44, 3733.44, 3733.44, 3733.44, 3733.44, 3733.44, 3733.44, 3733.44, 3733.44, 3733.44, 3733.44, 3733.44, 3733.44, 3733.44, 3733.44, 3733.44, 3733.44, 3733.44, 3733.44, 3733.44, 3735.  , 3738.25, 3739.3 , 3741.91, 3741.91, 3741.91, 3741.91, 3741.91, 3741.91])"]},"execution_count":229,"metadata":{},"output_type":"execute_result"}],"source":["t_df.dc_lower_T40.to_numpy()\n","# t_df.dc_base_T40.to_numpy()[short_open_plot_idx]"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":537},"executionInfo":{"elapsed":977,"status":"ok","timestamp":1648599806041,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"7x80Xlje7j4Q","outputId":"90f467c9-ddb1-4f51-933f-b32de99a8c41"},"outputs":[{"data":{"image/png":"\n","text/plain":["<Figure size 1080x648 with 1 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["plt.style.use(['dark_background', 'fast'])\n","fig = plt.figure(figsize=(15, 9))\n","nrows, ncols = 1, 1\n","gs = gridspec.GridSpec(nrows=nrows,  # row 부터 index 채우고 col 채우는 순서임 (gs_idx)\n","                        ncols=ncols\n","                        # height_ratios=[3, 1]\n","                        )\n","\n","ax = fig.add_subplot(gs[0])\n","\n","# ------ candles ------ #\n","candle_plot(a_data[:, col_idx_dict['ohlc_col_idxs']], ax, alpha=1.0, wickwidth=1.0)\n","_ = [step_col_plot(a_data[:, params[0]], *params[1:]) for params in col_idx_dict['step_col_info']]\n","\n","# t_df = wave_range(t_df, 20, 20, ltf_df=None, touch_lbperiod=50)\n","t_df = mcp(t_df, 40, ltf_df=None, touch_lbperiod=50)\n","\n","plt.step(np.arange(len(t_df.short_wave_1_T.to_numpy())), t_df.short_wave_1_T.to_numpy(), alpha=1.0, color='blue', linewidth=2)\n","plt.step(np.arange(len(t_df.short_wave_0_T.to_numpy())), t_df.short_wave_0_T.to_numpy(), alpha=1.0, color='blue', linewidth=2)\n","plt.step(np.arange(len(t_df.long_wave_1_T.to_numpy())), t_df.long_wave_1_T.to_numpy(), alpha=1.0, color='yellow', linewidth=2)\n","plt.step(np.arange(len(t_df.long_wave_0_T.to_numpy())), t_df.long_wave_0_T.to_numpy(), alpha=1.0, color='yellow', linewidth=2)\n","\n","short_open_plot_idx = t_df.short_wave_point_T\n","long_open_plot_idx = t_df.long_wave_point_T\n","plt.step(np.arange(len(short_base[i - plot_size:i]))[short_open_plot_idx], short_base[i - plot_size:i][short_open_plot_idx], \"o\", alpha=1.0, color='#ff00ff', markersize=11)\n","plt.step(np.arange(len(long_base[i - plot_size:i]))[long_open_plot_idx], long_base[i - plot_size:i][long_open_plot_idx], \"o\", alpha=1.0, color='#00ff00', markersize=11)\n","\n","plt.show()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"NXPgF90xMzas"},"outputs":[],"source":["t_df.short_wave_point_T == short_open_res.astype(bool)[i - plot_size:i]\n","t_df.long_wave_point_T[50:] == long_open_res.astype(bool)[i - plot_size:i][50:]\n","\n","# short_open_plot_idx = short_open_res.astype(bool)[i - plot_size:i]\n","# long_open_plot_idx = long_open_res.astype(bool)[i - plot_size:i]\n","\n","# short_open_plot_idx = t_df.short_wave_point_T\n","# # long_open_plot_idx = t_df.long_wave_point_T"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"2OLM9XOI-HO5"},"outputs":[],"source":["# long_a_touch_idx[-plot_size:]\n","touch_idx_copy = long_a_touch_idx.copy()\n","# touch_line = long_tp_0_.copy()\n","touch_line = np.full_like(long_tp_0_, np.nan)\n","\n","nan_idx = np.isnan(touch_idx_copy)  # touch_period 동안 touch 이력이 없는 point\n","touch_idx_copy[nan_idx] = 0   # for indexing array\n","\n","int_touch_idx_copy = touch_idx_copy.astype(int)\n","# print(int_touch_idx_copy[-plot_size:])\n","print(touch_line[int_touch_idx_copy])\n","\n","touch_line = long_tp_0_[int_touch_idx_copy]\n","# touch_line[nan_idx] = np.nan   # for true comp.\n","# print(touch_idx_copy[-plot_size:])\n","print(touch_line[int_touch_idx_copy])\n","print(touch_line[-plot_size:])\n","\n","# long_tp_0_[long_a_touch_idx.astype(int)]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"3cvi-eFR9Jsm"},"outputs":[],"source":["def get_line(touch_idx, rtc_):\n","  touch_idx_copy = touch_idx.copy()\n","  touch_line = np.full_like(rtc_, np.nan)\n","\n","  nan_idx = np.isnan(touch_idx_copy)\n","  touch_idx_copy[nan_idx] = 0   # for indexing array\n","  touch_line = rtc_[touch_idx_copy.astype(int)]\n","  touch_line[nan_idx] = np.nan   # for true comp.\n","\n","  return touch_line"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"1PwSHOShZJNm"},"outputs":[],"source":["# high = t_df.high.to_numpy()\n","# low = t_df.low.to_numpy()\n","\n","# pivot_k = 0.001\n","# high_pivots = peak_valley_pivots(high, pivot_k, -pivot_k)\n","# low_pivots = peak_valley_pivots(low, pivot_k, -pivot_k)\n","# plot_pivots(high, high_pivots)\n","# plot_pivots(low, low_pivots)\n","\n","def plot_pivots(X, pivots):\n","    # plt.xlim(0, len(X))\n","    # plt.ylim(X.min()*0.99, X.max()*1.01)\n","    # plt.plot(np.arange(len(X)), X, 'k:', color='white')\n","    valid_idx = pivots != 0\n","    plt.plot(np.arange(len(X))[valid_idx], X[valid_idx], '-', color='white')\n","    # plt.scatter(np.arange(len(X))[pivots == 1], X[pivots == 1], color='g')\n","    # plt.scatter(np.arange(len(X))[pivots == -1], X[pivots == -1], color='r')"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"4lZwODlFYxSL"},"outputs":[],"source":["X = res_df_.close.iloc[-100:].to_numpy()\n","# X = res_df_.close.to_numpy()\n","pivots = peak_valley_pivots(X, 0.0005, -0.0005)\n","pivots = peak_valley_pivots(X, 0.5, -0.5)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"W_xx9XWXZKJ5"},"outputs":[],"source":["plot_pivots(X, pivots)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":282},"executionInfo":{"elapsed":935,"status":"ok","timestamp":1647999471974,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"ZAjpk42XarfY","outputId":"471a5d20-9df5-4b2a-9d04-53cdb0e35c2f"},"outputs":[{"data":{"text/plain":["[<matplotlib.lines.Line2D at 0x7f82b6491790>]"]},"execution_count":31,"metadata":{},"output_type":"execute_result"},{"data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["t_df = res_df_.iloc[-100:]\n","t_df['date'] = t_df.index\n","data_x = t_df['date'].values\n","data_y = t_df['close'].values\n","peak_indexes = signal.argrelextrema(data_y, np.greater)\n","peak_indexes = peak_indexes[0]\n"," \n","# Find valleys(min).\n","valley_indexes = signal.argrelextrema(data_y, np.less)\n","valley_indexes = valley_indexes[0]\n"," \n","# Instantiate axes.\n","(fig, ax) = plt.subplots()\n"," \n","# Merge peaks and valleys data points using pandas.\n","df_peaks = pd.DataFrame({'date': data_x[peak_indexes], 'zigzag_y': data_y[peak_indexes]})\n","df_valleys = pd.DataFrame({'date': data_x[valley_indexes], 'zigzag_y': data_y[valley_indexes]})\n","df_peaks_valleys = pd.concat([df_peaks, df_valleys], axis=0, ignore_index=True, sort=True)\n"," \n","# Sort peak and valley datapoints by date.\n","df_peaks_valleys = df_peaks_valleys.sort_values(by=['date'])\n"," \n","# Plot zigzag trendline.\n","ax.plot(df_peaks_valleys['date'].values, df_peaks_valleys['zigzag_y'].values, \n","                                                        color='red', label=\"zigzag\")\n"," \n","# Plot close price line.\n","ax.plot(data_x, data_y, linestyle='dashed', color='black', label=\"Close Price\", linewidth=1)\n"," "]},{"cell_type":"markdown","metadata":{"id":"1MNVIExLULhJ"},"source":["#### legacy"]},{"cell_type":"markdown","metadata":{"id":"EOXQbXixiQcK"},"source":["##### volume_profile"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"7pFuazxpgx9B"},"outputs":[],"source":["session_df = res_df_.iloc[-1440:] # 0.159 -> 0.024 (14400 -> 1440)\n","volume = session_df['volume'].to_numpy()\n","close = session_df['close'].to_numpy()\n","# px.histogram(session_df, x='volume', y='close', nbins=150, orientation='h').show()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":332,"status":"ok","timestamp":1647259514394,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"SoPJkiyKiXLM","outputId":"2e1d515d-7caf-4f82-b53b-a17f3e1d9ab9"},"outputs":[{"name":"stdout","output_type":"stream","text":["ticks_per_sample : 1.3911999999999989\n","kdy elapsed_time : 0.021226167678833008\n"]}],"source":["kde_factor = 0.05\n","num_samples = 100\n","\n","start_0 = time.time()\n","kde = stats.gaussian_kde(close,weights=volume,bw_method=kde_factor)\n","kdx = np.linspace(close.min(),close.max(),num_samples)\n","kdy = kde(kdx)\n","ticks_per_sample = (kdx.max() - kdx.min()) / num_samples\n","print(\"ticks_per_sample :\", ticks_per_sample)  # sample 당 가격\n","print(\"kdy elapsed_time :\", time.time() - start_0)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":320},"executionInfo":{"elapsed":362,"status":"ok","timestamp":1647263622450,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"mK2jBddAxJ14","outputId":"74d7a810-1375-4db5-f74e-3cf58e0a0662"},"outputs":[{"data":{"image/png":"\n","text/plain":["<Figure size 720x360 with 1 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["peaks,_ = signal.find_peaks(kdy)\n","pkx = kdx[peaks]\n","pky = kdy[peaks]\n","\n","plt.figure(figsize=(10,5))\n","# plt.hist(close, bins=num_samples, weights=volume, alpha=.8, color='#1592e6')\n","# plt.plot(kdx, kdy, color='white')\n","# plt.plot(pkx, pky, 'bo', color='yellow')\n","plt.plot(kdy, kdx, color='white')\n","plt.plot(pky, pkx, 'bo', color='yellow')\n","plt.show()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":326,"status":"ok","timestamp":1647260132868,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"a8tpQZCy0SO1","outputId":"24ee984e-db8d-4083-97a7-4d3ebb536d38"},"outputs":[{"data":{"text/plain":["array([3059.93252525, 3068.3640404 , 3082.41656566, 3093.65858586, 3104.90060606, 3120.35838384, 3130.19515152, 3140.03191919, 3158.30020202, 3168.1369697 , 3176.56848485])"]},"execution_count":8,"metadata":{},"output_type":"execute_result"}],"source":["pkx"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"gfA946s8UgS0"},"outputs":[],"source":["# ------ vp 의 indi. 화가 필요함 -> point 설정 ------ #\n","# 1. 4 level 은 미리 만들어놓는게 맞는걸로 보임 -> 추종하는 function 이 많음 (utils_tr, ep_out ...)\n","#   a. 4 level 에 국한하는게 아니라, 모든 peaks 에 대해 levels 설정\n","#   b. 각 session 별로 peak_list 가 주어질 것\n","#     i. prev_data 사용해야하는점 주의 (session vp 는 future_data)"]},{"cell_type":"markdown","metadata":{"id":"3T-9FwWFXR4f"},"source":["###### prominence_info"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":558},"executionInfo":{"elapsed":781,"status":"ok","timestamp":1647183981567,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"RmBt2agljClE","outputId":"c61b0e13-ab0a-4e56-8a44-8bc480ec31cc"},"outputs":[{"name":"stdout","output_type":"stream","text":["prom_line elapsed_time : 0.0005087852478027344\n"]},{"data":{"text/html":["<html>\n","<head><meta charset=\"utf-8\" /></head>\n","<body>\n","    <div>            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"></script><script type=\"text/javascript\">if (window.MathJax) {MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script>                <script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>\n","        <script src=\"https://cdn.plot.ly/plotly-2.8.3.min.js\"></script>                <div id=\"f0efc821-18d5-43b5-ad6e-1133ea0ad873\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"f0efc821-18d5-43b5-ad6e-1133ea0ad873\")) {                    Plotly.newPlot(                        \"f0efc821-18d5-43b5-ad6e-1133ea0ad873\",                        [{\"histfunc\":\"sum\",\"histnorm\":\"probability density\",\"marker\":{\"color\":\"#B0C4DE\"},\"name\":\"Vol Profile\",\"nbinsx\":150,\"x\":[3150.12,3150.91,3150.04,3152.76,3150.22,3148.21,3148.25,3148.3,3142.41,3145.56,3144.02,3145.11,3146.27,3142.97,3140.6,3142.02,3142.8,3141.34,3138.28,3138.09,3137.04,3135.5,3133.32,3134.84,3136.27,3137.1,3137.05,3139.74,3138.4,3138.17,3139.49,3141.68,3142.52,3143.14,3143.12,3142.4,3144.17,3142.7,3140.72,3138.89,3142.1,3140.96,3139.76,3138.51,3140.37,3139.0,3138.84,3138.57,3140.62,3143.09,3141.71,3140.05,3139.85,3139.12,3139.9,3139.24,3139.49,3138.88,3138.14,3136.66,3137.03,3138.04,3140.84,3138.27,3137.31,3139.03,3141.06,3141.5,3139.41,3137.62,3141.5,3142.8,3142.24,3143.42,3142.55,3143.9,3146.54,3146.38,3142.34,3144.01,3145.79,3147.35,3146.06,3146.75,3147.37,3153.62,3152.82,3154.53,3153.41,3154.3,3153.01,3156.01,3157.57,3157.36,3160.43,3159.0,3163.78,3164.2,3163.97,3168.45,3170.03,3169.46,3173.73,3169.48,3168.54,3167.57,3166.99,3164.73,3164.25,3166.33,3162.57,3156.97,3159.44,3159.19,3158.11,3156.97,3158.08,3158.32,3158.99,3157.01,3154.91,3147.89,3146.35,3142.36,3142.62,3138.81,3144.68,3143.32,3140.89,3140.16,3139.74,3140.33,3143.48,3145.12,3145.42,3147.13,3143.31,3144.88,3145.12,3143.89,3144.75,3143.91,3140.69,3141.35,3141.59,3141.62,3141.51,3141.96,3142.09,3140.61,3137.55,3138.18,3140.28,3139.39,3139.2,3139.85,3137.92,3138.08,3136.42,3134.93,3135.14,3133.15,3135.12,3133.37,3134.51,3131.06,3128.0,3126.97,3116.7,3122.46,3122.06,3118.8,3115.48,3119.5,3120.88,3110.75,3109.43,3107.1,3111.54,3107.5,3108.74,3111.3,3113.32,3115.38,3118.54,3115.27,3118.6,3120.1,3119.4,3119.35,3123.69,3123.54,3121.8,3121.82,3119.9,3122.01,3122.29,3119.64,3119.91,3118.67,3118.66,3119.45,3120.43,3122.38,3120.43,3121.94,3123.03,3123.6,3121.88,3123.81,3123.85,3121.51,3121.8,3122.29,3123.76,3127.99,3131.35,3131.12,3131.07,3132.76,3131.57,3131.8,3130.61,3134.68,3134.39,3132.91,3130.4,3129.86,3129.9,3129.38,3128.39,3125.57,3124.03,3123.68,3125.42,3125.98,3128.4,3130.98,3128.95,3129.26,3132.05,3131.17,3128.56,3126.45,3127.34,3128.33,3126.96,3128.84,3128.45,3128.34,3128.84,3126.09,3125.6,3125.95,3124.5,3122.44,3122.97,3128.29,3126.43,3127.98,3131.71,3132.68,3130.7,3129.63,3130.04,3129.68,3129.74,3129.36,3129.78,3128.6,3128.87,3130.34,3129.71,3127.47,3129.81,3129.16,3128.41,3126.57,3125.42,3128.63,3129.77,3130.9,3131.42,3129.66,3132.1,3130.24,3133.36,3138.65,3141.3,3144.9,3140.63,3141.08,3139.72,3142.67,3141.99,3140.43,3139.04,3134.85,3133.34,3133.14,3136.4,3138.89,3139.59,3143.64,3140.9,3140.38,3141.76,3140.14,3140.58,3137.29,3138.28,3138.27,3137.57,3139.11,3138.77,3138.93,3139.13,3139.57,3139.76,3141.02,3138.46,3138.77,3139.38,3135.77,3135.49,3136.19,3134.07,3135.5,3134.59,3134.37,3137.84,3139.81,3140.38,3143.15,3142.58,3143.12,3139.01,3137.68,3137.86,3137.6,3136.3,3136.34,3134.66,3136.0,3135.49,3133.83,3132.57,3127.5,3127.82,3130.61,3132.01,3126.05,3128.08,3127.75,3127.18,3128.5,3128.32,3129.79,3128.02,3129.28,3127.92,3129.56,3130.85,3131.61,3133.9,3133.36,3135.98,3136.89,3136.05,3138.23,3137.59,3139.65,3141.26,3140.09,3139.73,3139.13,3140.0,3138.28,3139.07,3140.15,3140.64,3141.14,3140.89,3141.56,3144.82,3146.11,3146.92,3147.37,3148.01,3148.11,3153.52,3153.63,3152.2,3145.75,3149.2,3150.38,3152.32,3148.33,3149.53,3151.03,3149.0,3148.97,3148.26,3148.09,3149.48,3150.14,3153.62,3154.73,3153.73,3154.58,3156.77,3157.02,3157.56,3159.21,3157.99,3157.28,3158.24,3157.75,3153.62,3156.32,3155.98,3156.09,3153.36,3154.85,3153.7,3153.26,3153.92,3152.18,3154.72,3153.76,3151.32,3147.99,3143.63,3142.84,3142.01,3142.34,3141.19,3144.4,3143.24,3146.07,3146.42,3142.71,3145.16,3144.34,3142.69,3139.69,3137.0,3139.75,3138.36,3137.76,3138.86,3141.21,3141.38,3147.22,3146.36,3145.32,3145.22,3143.33,3142.05,3138.36,3136.89,3138.59,3137.22,3138.73,3140.14,3140.55,3143.65,3142.01,3142.94,3141.82,3142.27,3142.38,3141.33,3139.54,3140.53,3141.91,3143.98,3145.27,3145.56,3145.8,3146.38,3146.33,3146.59,3148.72,3149.48,3149.99,3149.19,3147.89,3145.9,3144.89,3143.99,3144.38,3141.47,3141.26,3134.83,3136.75,3135.49,3137.49,3136.01,3138.03,3137.49,3135.5,3133.94,3131.24,3128.72,3131.32,3129.42,3129.77,3126.83,3127.0,3124.12,3125.0,3127.18,3130.0,3129.72,3129.07,3129.68,3129.97,3129.39,3130.92,3132.75,3132.92,3129.99,3133.15,3130.69,3132.15,3134.37,3132.81,3131.7,3130.61,3128.61,3128.99,3124.84,3116.56,3116.76,3116.92,3118.9,3119.05,3118.74,3118.24,3121.88,3121.41,3120.63,3119.45,3119.16,3117.66,3125.21,3122.01,3122.3,3122.27,3123.6,3123.71,3124.0,3126.14,3128.01,3125.94,3126.44,3128.0,3128.04,3128.5,3131.12,3129.44,3129.36,3130.58,3130.58,3130.74,3129.8,3130.8,3130.21,3130.0,3132.5,3132.77,3130.01,3138.72,3139.25,3138.11,3136.77,3136.71,3134.59,3135.98,3133.81,3131.4,3131.16,3133.29,3130.61,3132.0,3132.44,3133.58,3134.18,3133.44,3133.33,3135.37,3134.42,3132.16,3132.2,3130.93,3131.07,3128.89,3127.34,3129.46,3129.77,3130.33,3131.76,3132.28,3130.06,3132.43,3132.6,3134.33,3138.55,3138.49,3137.34,3135.68,3135.12,3133.0,3133.35,3135.1,3135.72,3135.45,3135.74,3134.31,3135.54,3135.0,3134.0,3135.5,3135.47,3138.57,3137.43,3137.26,3137.68,3134.65,3133.04,3134.23,3134.77,3137.77,3138.53,3137.99,3140.51,3141.66,3137.9,3130.11,3125.74,3126.7,3127.43,3126.03,3120.96,3121.81,3124.17,3124.31,3124.54,3125.11,3125.71,3126.3,3128.36,3129.59,3129.72,3130.19,3131.21,3130.5,3130.07,3129.81,3131.5,3134.35,3133.15,3135.09,3136.18,3132.93,3122.75,3122.1,3122.03,3121.84,3121.06,3118.65,3120.18,3119.31,3112.84,3117.62,3114.39,3114.41,3116.04,3117.45,3119.3,3120.57,3120.72,3121.07,3116.17,3110.8,3111.87,3110.61,3115.47,3117.35,3117.49,3117.32,3114.9,3112.16,3112.35,3108.01,3111.41,3109.76,3113.55,3118.27,3120.49,3119.38,3121.0,3119.82,3119.61,3118.49,3116.15,3116.56,3117.76,3115.36,3117.85,3117.1,3118.16,3118.6,3117.1,3114.79,3114.07,3116.16,3113.75,3112.4,3104.99,3118.68,3114.45,3103.37,3094.09,3103.67,3101.78,3098.48,3101.08,3101.52,3096.14,3095.06,3094.52,3093.74,3089.7,3094.76,3094.28,3082.9,3075.29,3071.6,3066.96,3068.99,3068.43,3072.83,3074.19,3068.47,3066.49,3068.45,3071.08,3072.8,3068.44,3067.71,3073.29,3073.62,3075.79,3074.76,3079.0,3077.27,3072.94,3073.42,3070.62,3070.97,3075.98,3073.64,3070.63,3073.96,3074.48,3076.25,3074.55,3072.14,3068.01,3068.44,3057.23,3061.75,3060.41,3060.23,3055.43,3062.96,3064.42,3063.7,3057.99,3057.97,3065.99,3069.05,3073.19,3068.84,3067.58,3067.45,3064.78,3066.87,3067.5,3068.74,3067.5,3070.61,3059.89,3062.56,3066.56,3065.24,3061.41,3060.9,3053.06,3061.95,3059.49,3056.27,3059.09,3059.6,3056.32,3057.96,3058.97,3061.6,3066.01,3068.68,3068.43,3070.66,3072.53,3070.4,3073.28,3072.86,3070.68,3067.65,3066.0,3066.25,3070.21,3071.52,3068.61,3064.15,3064.26,3063.48,3062.8,3060.3,3059.85,3060.47,3064.84,3065.03,3066.71,3066.55,3066.41,3065.24,3067.81,3066.93,3065.0,3067.85,3060.14,3062.51,3061.39,3064.93,3064.94,3066.09,3066.49,3067.75,3070.38,3067.84,3067.51,3072.07,3071.31,3070.05,3068.95,3068.57,3067.73,3068.88,3067.87,3067.89,3065.01,3066.0,3069.24,3065.3,3063.52,3063.06,3064.11,3064.99,3063.19,3062.69,3066.9,3066.87,3065.42,3058.47,3058.2,3068.7,3065.56,3065.52,3059.04,3060.61,3059.57,3058.08,3055.2,3053.72,3060.26,3055.86,3045.88,3046.6,3051.18,3052.99,3057.9,3056.38,3059.4,3061.48,3061.15,3064.36,3065.77,3066.35,3066.8,3067.68,3068.0,3065.05,3063.01,3066.42,3066.16,3064.8,3067.89,3066.3,3068.58,3064.81,3065.74,3064.23,3065.42,3070.43,3069.65,3070.48,3070.57,3073.44,3078.3,3082.89,3079.01,3080.76,3079.67,3082.0,3081.56,3082.01,3081.24,3078.61,3080.11,3080.95,3080.03,3080.65,3079.97,3078.86,3078.5,3078.6,3077.34,3077.0,3076.39,3076.45,3077.45,3076.23,3072.22,3073.67,3079.31,3077.21,3075.68,3076.91,3078.2,3075.92,3077.67,3076.33,3075.14,3076.47,3077.04,3080.69,3079.8,3080.33,3075.65,3074.66,3073.05,3070.38,3067.96,3068.78,3067.92,3069.26,3069.37,3070.76,3068.12,3069.49,3069.98,3071.78,3070.88,3068.71,3067.04,3069.34,3070.99,3070.39,3069.63,3068.6,3068.89,3070.08,3069.26,3069.57,3069.72,3069.53,3067.99,3069.23,3070.93,3071.33,3068.33,3066.84,3066.23,3066.76,3068.17,3070.0,3072.0,3075.66,3073.9,3073.99,3074.66,3074.0,3076.62,3077.82,3076.01,3076.18,3075.52,3075.42,3075.01,3075.67,3079.55,3078.46,3082.28,3080.74,3081.27,3083.38,3084.49,3086.42,3084.9,3086.53,3085.27,3084.7,3084.08,3084.82,3086.99,3092.0,3089.49,3089.26,3084.07,3084.44,3084.8,3083.55,3082.59,3082.36,3084.65,3086.97,3085.67,3085.43,3088.82,3089.81,3091.81,3093.96,3092.59,3093.58,3093.74,3092.61,3091.64,3091.26,3113.47,3104.88,3092.36,3101.44,3107.88,3113.58,3119.86,3128.34,3133.07,3128.34,3123.1,3129.07,3122.38,3127.43,3126.59,3132.79,3137.33,3143.07,3145.41,3147.86,3148.82,3157.67,3157.57,3160.7,3160.01,3163.6,3172.63,3171.77,3174.38,3176.44,3178.06,3179.99,3185.0,3176.75,3171.53,3179.12,3176.52,3168.9,3168.72,3170.03,3168.15,3165.58,3166.83,3167.56,3161.34,3162.78,3167.67,3162.8,3157.67,3155.79,3157.92,3161.37,3163.06,3165.11,3163.45,3164.45,3166.86,3166.61,3165.0,3167.59,3167.45,3164.59,3167.05,3172.29,3176.49,3170.87,3166.5,3165.51,3165.58,3164.96,3165.19,3161.59,3165.09,3162.72,3163.97,3162.62,3165.19,3165.77,3163.55,3173.99,3171.18,3170.87,3168.34,3169.49,3167.69,3169.72,3166.89,3168.42,3166.68,3168.84,3165.83,3162.55,3159.17,3160.93,3162.0,3160.83,3158.69,3159.99,3159.9,3159.88,3160.02,3158.98,3160.0,3158.01,3159.2,3158.6,3158.71,3156.25,3157.2,3156.77,3156.91,3156.6,3156.55,3153.94,3152.29,3151.49,3151.41,3146.89,3148.18,3147.2,3147.17,3147.89,3149.31,3151.59,3156.4,3153.84,3155.3,3155.23,3156.03,3156.24,3155.61,3158.4,3155.05,3155.38,3152.34,3152.18,3153.34,3152.91,3153.99,3151.52,3149.21,3152.48,3151.63,3150.9,3149.75,3148.0,3148.25,3149.4,3149.7,3148.41,3147.65,3146.06,3147.06,3147.41,3146.72,3145.51,3142.17,3142.8,3140.42,3139.24,3140.69,3140.67,3139.22,3136.44,3139.14,3137.55,3133.96,3131.83,3130.8,3130.95,3129.59,3127.0,3129.85,3133.0,3132.21,3132.15,3130.41,3132.9,3134.57,3139.85,3133.04,3138.13,3135.79,3136.96,3133.26,3129.64,3128.02,3127.75,3130.0,3132.21,3133.06,3132.06,3131.88,3132.99,3134.0,3135.79,3137.68,3136.0,3137.89,3133.88,3133.81,3133.84,3133.71,3138.28,3143.06,3144.0,3143.17,3143.02,3145.34,3144.83,3144.81,3144.61,3146.0,3147.91,3146.69,3145.03,3142.46,3142.5,3141.1,3140.17,3140.11,3141.4,3143.92,3144.66,3146.71,3148.95,3146.13,3135.82,3136.96,3139.34,3134.9,3134.48,3136.76,3137.37,3136.92,3136.99,3133.71,3134.44,3132.38,3135.25,3137.14,3135.07,3136.15,3136.15,3139.87,3138.92,3138.5,3141.6,3144.19,3145.44,3147.36,3147.51,3142.12,3143.94,3142.43,3142.02,3142.21,3144.66,3146.53,3144.3,3145.73,3145.94,3146.56,3145.42,3146.05,3150.58,3154.16,3151.01,3149.76,3150.51,3149.31,3146.43,3146.66,3147.47,3145.75,3146.7,3147.1,3143.28,3146.19,3145.38,3145.25,3140.13,3143.45,3140.18,3138.3,3139.7,3136.88,3132.99,3134.7,3135.09,3135.74,3129.89,3126.61,3123.87,3125.14,3119.64,3123.09,3123.35,3120.16,3121.8,3125.0,3132.0,3126.44,3124.57,3120.75,3125.9,3128.05,3127.12,3124.8,3126.19,3128.65,3130.03,3125.31,3125.8,3126.11,3123.22,3125.03,3126.05,3126.24,3129.98,3130.55,3130.97,3129.1,3129.66,3130.27,3130.36,3131.12,3136.13,3137.65,3133.69,3137.18,3137.25,3138.83,3138.58,3141.52,3139.41,3139.05,3137.7,3139.46,3139.8,3140.98,3139.78,3139.17,3140.0,3141.49,3138.86,3139.52,3140.5,3142.58,3142.34,3142.47,3142.91,3142.89,3144.0,3147.55,3148.71,3151.21,3150.66,3148.5,3148.96,3148.5,3150.32,3152.45,3150.83,3150.29,3151.2,3153.01,3152.48,3149.23,3147.45,3146.68,3157.71,3153.34,3147.37,3143.99,3141.45,3142.66,3146.98,3146.61,3148.46,3149.5,3149.29,3148.18,3145.05,3146.86,3145.76,3148.84,3149.31,3146.86,3146.76],\"y\":[1814.895,1182.023,1511.21,821.059,669.95,594.607,397.261,475.226,1430.563,1351.268,848.732,961.415,677.695,2241.498,771.686,3400.92,457.283,815.311,843.761,1456.898,1147.73,2592.488,939.438,695.06,664.589,839.272,344.224,524.897,1029.553,1257.254,764.586,1618.563,599.314,385.634,340.075,245.402,273.54,932.316,297.465,800.419,470.172,358.191,198.746,398.956,521.275,398.68,250.799,376.615,178.701,1034.812,349.27,365.934,193.939,199.584,148.806,343.965,258.079,238.408,273.382,508.892,455.586,1497.43,603.768,705.325,471.812,358.129,1222.79,447.666,603.433,350.189,684.554,404.765,918.631,713.382,803.374,220.673,1013.652,1757.238,887.223,420.149,422.235,642.444,379.785,126.201,499.773,2342.571,1945.816,1288.743,676.794,392.273,424.757,1084.062,1139.501,790.354,2007.705,1446.953,1842.648,777.958,945.39,2579.427,2955.737,1590.911,1476.864,2861.345,772.493,876.768,1835.01,875.833,585.31,765.122,767.852,1825.83,1060.932,682.04,688.755,737.484,429.945,293.821,300.116,1045.831,712.192,2711.994,2052.2,3340.02,897.035,2391.303,2186.713,1517.988,344.748,771.478,720.502,656.313,530.014,1327.673,508.321,904.994,1152.633,523.227,293.715,229.893,202.519,252.467,601.482,317.28,345.035,575.193,374.831,194.465,270.588,367.969,1280.729,1909.713,774.939,518.596,294.403,337.627,382.69,353.682,534.457,1713.387,360.944,713.113,1393.388,1289.595,610.727,739.131,1619.367,2194.335,8164.046,2879.21,2159.701,2512.548,3579.377,1841.206,2810.677,3893.288,1849.815,5497.891,2407.824,1844.752,1304.788,945.57,2745.772,2050.842,2354.528,1577.291,903.569,1269.654,2703.684,766.884,1965.466,1320.285,1111.835,521.223,822.176,942.413,497.538,499.364,222.856,316.366,355.702,243.842,362.266,593.914,349.424,308.565,540.138,769.079,463.481,163.895,237.299,285.424,466.1,224.654,493.52,1674.225,4063.392,1370.598,472.447,957.289,609.428,338.42,243.509,745.35,1417.319,762.417,553.865,616.945,305.569,511.777,416.061,2007.687,312.874,1760.715,470.299,170.102,514.177,647.315,425.481,274.85,415.924,896.493,396.062,588.357,231.181,273.932,245.847,212.412,116.329,109.858,274.394,323.434,335.066,347.193,459.166,944.41,601.327,889.712,412.644,317.84,986.261,934.932,572.116,181.168,460.876,145.156,108.878,210.202,77.92,295.25,300.008,412.518,463.649,312.424,342.369,602.553,325.602,288.656,458.643,344.168,189.501,378.501,506.806,405.58,266.931,508.179,577.092,1968.061,3128.798,2617.171,810.468,1071.792,482.71,702.007,298.08,1139.23,623.801,1162.914,1203.468,673.113,606.991,499.32,344.082,916.323,1133.798,236.462,323.745,227.404,305.618,859.751,541.196,262.919,221.3,135.795,94.984,185.741,146.342,216.582,150.862,227.198,373.705,332.486,216.229,778.895,1204.286,326.503,380.38,1047.579,257.681,288.363,944.527,1025.858,1888.092,606.18,219.281,573.418,618.131,579.352,643.473,227.201,596.85,266.111,593.418,412.236,518.62,714.492,807.998,1833.123,1485.911,696.152,1044.399,1178.696,682.768,339.908,614.242,333.987,289.083,426.036,434.767,363.008,294.274,249.675,759.092,233.645,259.457,692.772,530.582,751.244,252.918,324.292,565.306,530.138,634.433,621.443,362.445,1462.934,578.493,404.427,432.71,381.631,206.741,803.279,286.361,454.727,989.949,1000.012,534.381,1225.959,2611.002,1238.904,1808.266,2668.663,1734.437,1991.659,1533.497,673.975,1417.797,1002.213,689.714,474.831,775.993,612.321,674.988,586.885,486.539,6750.373,1240.763,1031.138,1064.433,810.097,2543.442,1714.432,1408.587,2076.241,891.454,802.952,990.123,356.49,909.726,969.575,1157.716,408.802,557.485,790.536,760.441,903.066,478.393,406.574,460.658,270.44,397.786,2943.217,4367.234,1259.451,1068.328,966.188,1414.714,579.827,511.738,412.874,654.607,675.654,504.93,356.198,858.616,1158.323,1447.125,787.173,728.954,636.948,628.265,669.612,465.412,1222.997,749.451,462.962,472.928,432.435,342.099,1618.728,2358.947,952.987,460.716,651.763,975.681,444.398,645.867,449.599,193.003,278.721,545.444,842.045,277.826,994.515,588.675,591.108,309.423,892.268,276.425,502.627,968.723,404.031,211.579,444.69,715.557,984.707,1097.859,551.379,692.514,900.106,360.002,948.053,805.637,489.368,1676.558,1304.157,367.592,283.184,1023.029,456.415,763.262,343.508,461.29,879.775,1776.793,1251.296,591.245,573.997,1673.844,1283.242,2767.718,1120.511,657.294,746.819,905.747,599.259,715.33,481.675,327.764,388.74,1256.088,1555.066,601.571,277.709,213.939,322.601,214.083,472.872,296.863,364.37,746.543,378.365,967.733,5140.211,4083.258,1994.542,1976.259,888.817,461.462,437.566,1416.611,716.221,1318.431,481.782,2014.435,936.676,1459.321,855.198,732.281,466.019,450.272,560.57,469.751,622.444,518.498,933.561,1274.182,362.645,417.461,200.685,1204.422,1085.208,437.325,388.368,522.196,414.681,402.1,458.488,176.931,774.455,662.126,617.206,452.137,4865.578,3871.135,1343.329,634.081,483.47,1681.018,514.598,502.913,1322.138,529.723,572.34,348.409,713.894,228.335,215.652,253.718,284.838,694.79,180.093,810.769,563.133,209.468,355.301,1084.715,204.09,893.371,557.044,320.725,236.971,360.995,404.746,202.665,416.594,295.445,369.598,1691.926,445.675,502.376,451.028,754.112,460.168,253.657,293.696,364.866,139.172,187.996,297.765,167.774,288.681,128.716,179.501,428.036,213.013,396.147,290.492,459.26,333.25,604.208,535.843,218.827,379.209,623.314,309.742,1047.188,2658.829,741.273,2765.267,2446.593,900.038,1232.736,817.002,2687.132,3309.465,1746.003,699.151,574.566,262.053,505.975,270.49,1023.427,533.5,488.001,536.457,432.03,945.469,1080.591,611.695,611.907,1095.621,485.481,688.799,375.255,1322.925,2347.935,1281.055,1713.871,563.816,371.289,1137.167,1011.662,433.968,4755.422,2060.545,1118.297,1058.42,991.226,512.798,725.336,476.284,633.408,903.175,644.941,2829.545,1218.33,1149.1,755.961,1252.379,2399.314,350.433,457.851,727.54,748.377,2585.751,4337.831,2453.675,1355.272,2073.169,1425.068,1751.715,901.639,353.899,368.582,636.142,1082.148,271.744,399.517,439.441,377.24,330.026,233.732,285.884,308.136,639.158,734.67,567.183,310.671,995.761,12392.217,5461.011,2988.344,5529.668,2618.77,11929.186,2928.894,5355.073,1533.817,2310.282,2210.125,1805.742,2500.52,3272.782,1332.249,2270.554,2483.668,8790.039,13105.425,16039.554,8317.661,6814.545,3909.444,2716.544,2823.368,2433.446,3042.327,4014.336,2680.476,2166.982,8299.153,2107.079,2585.491,3224.808,2437.339,2865.693,1574.387,2219.401,2214.305,2410.523,1263.301,1232.671,1213.058,1789.33,827.919,1530.653,1732.94,1439.558,1552.842,1345.879,1394.187,3147.626,6162.965,7032.083,1330.471,2505.725,7118.551,2288.653,1286.682,1102.423,3249.307,1670.88,2218.379,2946.052,2525.484,1719.79,1630.798,1474.484,1299.503,434.158,1462.856,1914.008,1336.711,872.552,2661.102,1921.851,1223.061,892.979,1675.459,2747.98,3398.563,4782.692,3130.671,914.08,3275.661,3677.987,1920.096,1582.481,626.202,1699.704,3016.389,2348.542,3936.201,1440.961,2551.41,2929.114,3910.54,1731.929,1423.134,1630.803,823.665,1596.309,1843.181,1446.542,850.694,2297.843,856.543,883.961,501.157,1621.147,856.971,707.791,1351.166,795.198,938.608,485.179,455.671,1061.071,580.457,263.109,715.892,1587.285,993.923,1251.255,2659.143,996.502,853.854,744.677,711.983,3232.026,3662.831,807.0,555.69,1043.709,1292.106,987.334,375.225,316.734,438.411,289.699,537.944,942.885,797.012,1077.267,379.583,611.293,521.083,934.505,1175.247,499.493,1141.633,563.435,872.319,811.753,773.096,1412.344,3620.225,4714.694,669.244,1065.55,1598.224,847.615,1923.708,1020.52,1883.069,3076.446,2134.064,1453.728,11270.233,2936.896,6307.007,2166.477,1551.387,1853.874,1372.167,2298.452,1069.092,896.017,1027.708,1205.234,1794.761,2595.809,890.418,848.032,650.893,1088.28,200.664,502.739,575.785,921.978,808.706,3029.201,602.68,309.435,495.715,959.404,569.062,492.893,686.058,1227.456,2415.351,6515.3,1556.79,953.548,1004.564,1320.414,4557.466,1098.609,911.352,1232.801,1241.033,1343.423,769.908,447.129,647.478,822.26,767.131,569.507,437.851,1190.093,378.865,290.814,440.004,366.664,1587.445,389.51,1948.052,1274.222,418.255,155.696,281.607,310.623,166.909,303.48,700.347,271.28,110.636,520.183,820.569,810.861,1088.369,858.322,1295.596,2094.312,1503.768,1037.796,500.033,559.479,227.634,704.975,702.474,560.973,1364.022,508.316,349.588,640.477,527.515,1470.646,248.411,315.355,194.49,727.557,208.254,329.772,769.204,559.27,220.603,179.101,514.706,337.329,450.668,1473.433,2256.979,539.366,738.786,421.76,808.357,281.104,544.472,1304.849,1022.835,193.211,205.636,773.849,215.729,546.43,625.921,225.712,512.885,292.199,264.804,592.964,1204.967,418.402,742.071,437.497,433.652,1078.844,331.74,1040.031,872.767,1004.157,722.758,430.616,408.399,245.932,484.168,3624.12,976.418,394.652,1682.369,625.343,239.747,380.251,1597.606,848.428,708.537,664.832,371.165,750.007,1026.259,843.009,1023.456,1917.749,952.579,870.347,502.286,1363.581,780.743,1448.612,12431.885,6893.299,8886.959,3907.062,9540.759,4740.252,5895.644,16625.626,6312.555,3615.152,3860.571,2514.261,2760.668,1523.597,1871.628,2528.961,7365.0,8920.169,5768.383,6710.649,3346.652,4463.499,3666.88,6450.55,4832.119,5510.211,8186.365,3537.525,8281.314,10045.157,6383.577,5079.938,3813.839,3660.97,5728.121,7917.184,2421.103,5177.868,3136.173,2217.563,3832.957,1720.129,1543.371,1636.799,8034.61,4788.474,3850.793,1514.508,5392.819,1927.194,1163.751,1585.945,1209.542,1998.829,877.24,823.488,781.809,826.931,913.803,742.025,3002.547,1367.89,1044.189,1100.946,2047.804,2818.993,1017.674,1889.338,1032.258,579.044,748.169,927.378,1345.4,516.194,810.503,845.27,650.086,556.495,716.068,3167.786,1365.503,1120.129,1632.121,494.557,495.811,356.546,271.948,320.235,366.049,349.466,550.775,843.882,2000.798,961.087,470.513,438.616,819.214,594.347,286.774,251.089,602.025,267.413,278.638,425.458,282.646,1696.154,921.061,374.925,625.157,346.19,1447.882,338.668,501.822,996.179,1126.58,967.442,927.906,4074.406,898.707,1271.993,720.906,758.176,506.787,1384.601,2630.754,1180.051,296.364,385.161,594.547,303.281,206.3,1509.706,417.533,430.407,350.638,614.913,217.67,109.158,296.924,307.087,827.106,850.038,562.773,402.213,853.225,619.708,185.33,229.867,207.248,255.341,347.69,914.271,348.17,280.522,461.744,242.677,1689.641,1235.344,943.835,1181.751,733.24,268.104,381.13,818.733,1090.052,548.373,754.94,989.387,773.47,1064.937,1070.959,703.035,2594.209,1302.569,682.392,552.382,309.738,466.737,793.098,2376.261,856.232,754.519,404.143,168.334,1477.862,943.652,711.273,1748.362,1006.485,789.572,594.946,279.75,178.433,290.649,215.983,493.113,338.384,762.448,611.586,1334.322,294.505,303.188,134.407,516.94,1550.403,1126.795,485.425,622.304,1249.031,373.648,346.683,211.699,519.095,1088.352,529.813,523.314,772.507,209.114,687.664,329.146,352.705,444.147,395.78,325.339,513.402,784.247,986.546,1584.942,2185.948,785.321,729.112,453.787,897.861,262.964,404.52,171.003,580.24,118.207,406.641,160.17,743.848,437.773,1369.397,191.219,1229.096,398.903,403.85,322.726,970.586,568.304,478.038,404.745,1239.612,454.913,442.573,288.41,264.373,524.088,130.674,443.39,586.952,167.731,307.728,263.88,311.737,866.873,1745.621,745.983,309.615,328.348,383.704,1118.281,450.373,387.296,188.089,629.117,158.39,829.748,364.026,136.85,324.278,1060.597,707.567,409.192,443.098,510.64,923.325,605.203,716.174,198.6,554.733,1635.338,1598.253,4035.924,1229.607,1608.824,2794.958,636.725,1971.132,1481.98,1093.152,3786.967,1736.518,1289.176,1179.711,677.348,1259.158,841.34,248.067,451.306,413.411,883.511,395.721,304.827,431.303,1106.7,599.37,354.735,747.528,810.7,835.158,481.175,629.481,323.974,608.739,557.978,525.368,1225.958,840.532,1067.311,718.545,716.335,312.894,563.057,1017.419,618.553,512.007,588.984,294.695,278.158,217.027,537.444,269.51,225.5,501.376,691.99,483.791,127.283,709.697,467.43,307.414,507.697,422.858,256.808,1153.716,1055.198,1414.849,1144.706,1064.626,623.477,877.503,444.839,742.027,415.472,677.548,1051.317,655.2,370.676,1077.143,1051.053,784.457,4542.468,1733.555,1213.929,1538.198,2121.016,918.853,882.448,654.86,1728.875,631.103,301.013,661.938,933.172,370.951,202.456,406.614,314.65,592.089,26.727],\"type\":\"histogram\"},{\"marker\":{\"color\":\"#D2691E\"},\"mode\":\"lines\",\"name\":\"KDE\",\"x\":[3045.88,3047.2852525252524,3048.690505050505,3050.0957575757575,3051.5010101010103,3052.9062626262626,3054.3115151515153,3055.7167676767676,3057.1220202020204,3058.5272727272727,3059.9325252525255,3061.337777777778,3062.7430303030305,3064.148282828283,3065.5535353535356,3066.958787878788,3068.3640404040407,3069.769292929293,3071.1745454545458,3072.579797979798,3073.9850505050504,3075.390303030303,3076.7955555555554,3078.200808080808,3079.6060606060605,3081.0113131313133,3082.4165656565656,3083.8218181818183,3085.2270707070707,3086.6323232323234,3088.0375757575757,3089.4428282828285,3090.848080808081,3092.2533333333336,3093.658585858586,3095.0638383838386,3096.469090909091,3097.8743434343437,3099.279595959596,3100.6848484848488,3102.090101010101,3103.4953535353534,3104.900606060606,3106.3058585858585,3107.711111111111,3109.1163636363635,3110.5216161616163,3111.9268686868686,3113.3321212121214,3114.7373737373737,3116.1426262626264,3117.5478787878787,3118.9531313131315,3120.358383838384,3121.7636363636366,3123.168888888889,3124.5741414141416,3125.979393939394,3127.3846464646467,3128.789898989899,3130.1951515151513,3131.600404040404,3133.0056565656564,3134.410909090909,3135.8161616161615,3137.2214141414142,3138.6266666666666,3140.0319191919193,3141.4371717171716,3142.8424242424244,3144.2476767676767,3145.6529292929295,3147.0581818181818,3148.4634343434345,3149.868686868687,3151.2739393939396,3152.679191919192,3154.0844444444447,3155.489696969697,3156.8949494949493,3158.300202020202,3159.7054545454544,3161.110707070707,3162.5159595959594,3163.921212121212,3165.3264646464645,3166.7317171717173,3168.1369696969696,3169.5422222222223,3170.9474747474746,3172.3527272727274,3173.7579797979797,3175.1632323232325,3176.568484848485,3177.9737373737375,3179.37898989899,3180.7842424242426,3182.189494949495,3183.5947474747472,3185.0],\"y\":[0.001832905419240713,0.0015170993773343943,0.0009811990405335794,0.0010910781869862753,0.001662787664619852,0.002276584209048065,0.003017679469815101,0.004091626542089751,0.005452920992053675,0.006818537038424319,0.0076664779747402535,0.007643887894555952,0.007344902200072563,0.00827273925583825,0.011220488982456029,0.01494681923660121,0.016672754263443067,0.015298211710060586,0.013000656836147326,0.01136447782936633,0.009905415113226086,0.007991277793749363,0.005915182769079316,0.004603614839180802,0.004340216581875808,0.004677084159634987,0.004804286094145265,0.003945664227425191,0.0025142257578005694,0.0014727830724446968,0.0011591657181478472,0.0015827815995405762,0.0026670028851318566,0.003810420375174876,0.004026389180218125,0.003107185282237217,0.001940076730122543,0.0013880150787554427,0.0015444989246854268,0.0023609061649200076,0.0037401025635127546,0.005029582983599697,0.005321434602966492,0.004778565138234207,0.004284633110071723,0.004142142333983544,0.004650245486454227,0.005790340541463709,0.0068018904562159735,0.007335214235017366,0.008011875247544532,0.009032977214800161,0.009862320541122151,0.01015891479438546,0.010077897051723251,0.009700191176833918,0.00944402389099212,0.010385374840307136,0.012487699392384763,0.014125807036359036,0.014335489751832464,0.013760773754902053,0.013070724606546664,0.012663567468535765,0.013407581002278695,0.0152918031502357,0.01671953731557649,0.01690758767766308,0.0165814827586469,0.01570664895796692,0.014255369464538745,0.013369278115428072,0.012993378487870194,0.011780241643981209,0.009592167939552232,0.007696976248164002,0.006823155935995189,0.006619023196157732,0.007110669748385475,0.008153180108070628,0.008357004173573936,0.007467120695723313,0.006541623694037697,0.005979030384818917,0.00565790251287167,0.005607397002735248,0.00599245781550611,0.006338445734583271,0.0060092038421343755,0.0053319582929410685,0.004754442260061802,0.004333231721163359,0.004227903631578969,0.004279536987396199,0.003930156107007355,0.0029754130410062354,0.0017041868280610027,0.0007672145372132436,0.0005056108010257643,0.0005155116532610217],\"type\":\"scatter\"},{\"marker\":{\"color\":\"black\",\"size\":10},\"mode\":\"markers\",\"name\":\"Peaks\",\"x\":[3059.9325252525255,3068.3640404040407,3082.4165656565656,3093.658585858586,3104.900606060606,3120.358383838384,3130.1951515151513,3140.0319191919193,3158.300202020202,3168.1369696969696,3176.568484848485],\"y\":[0.0076664779747402535,0.016672754263443067,0.004804286094145265,0.004026389180218125,0.005321434602966492,0.01015891479438546,0.014335489751832464,0.01690758767766308,0.008357004173573936,0.006338445734583271,0.004279536987396199],\"type\":\"scatter\"}],                        {\"template\":{\"data\":{\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"choropleth\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"choropleth\"}],\"contour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"contour\"}],\"contourcarpet\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"contourcarpet\"}],\"heatmap\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmap\"}],\"heatmapgl\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmapgl\"}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"histogram2d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2d\"}],\"histogram2dcontour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2dcontour\"}],\"mesh3d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"mesh3d\"}],\"parcoords\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"parcoords\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}],\"scatter\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter\"}],\"scatter3d\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter3d\"}],\"scattercarpet\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattercarpet\"}],\"scattergeo\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergeo\"}],\"scattergl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergl\"}],\"scattermapbox\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattermapbox\"}],\"scatterpolar\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolar\"}],\"scatterpolargl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolargl\"}],\"scatterternary\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterternary\"}],\"surface\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"surface\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}]},\"layout\":{\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"autotypenumbers\":\"strict\",\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]],\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]},\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"geo\":{\"bgcolor\":\"white\",\"lakecolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"showlakes\":true,\"showland\":true,\"subunitcolor\":\"white\"},\"hoverlabel\":{\"align\":\"left\"},\"hovermode\":\"closest\",\"mapbox\":{\"style\":\"light\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"bgcolor\":\"#E5ECF6\",\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"ternary\":{\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"bgcolor\":\"#E5ECF6\",\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"title\":{\"x\":0.05},\"xaxis\":{\"automargin\":true,\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"zerolinewidth\":2},\"yaxis\":{\"automargin\":true,\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"zerolinewidth\":2}}},\"shapes\":[{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3059.9325252525255,\"x1\":3059.9325252525255,\"xref\":\"x\",\"y0\":0,\"y1\":0.007344902200072563,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3068.3640404040407,\"x1\":3068.3640404040407,\"xref\":\"x\",\"y0\":0,\"y1\":0.001159165718147847,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3082.4165656565656,\"x1\":3082.4165656565656,\"xref\":\"x\",\"y0\":0,\"y1\":0.004340216581875808,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3093.658585858586,\"x1\":3093.658585858586,\"xref\":\"x\",\"y0\":0,\"y1\":0.0013880150787554425,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3104.900606060606,\"x1\":3104.900606060606,\"xref\":\"x\",\"y0\":0,\"y1\":0.004142142333983544,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3120.358383838384,\"x1\":3120.358383838384,\"xref\":\"x\",\"y0\":0,\"y1\":0.00944402389099212,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3130.1951515151513,\"x1\":3130.1951515151513,\"xref\":\"x\",\"y0\":0,\"y1\":0.012663567468535765,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3140.0319191919193,\"x1\":3140.0319191919193,\"xref\":\"x\",\"y0\":0,\"y1\":0.0009811990405335785,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3158.300202020202,\"x1\":3158.300202020202,\"xref\":\"x\",\"y0\":0,\"y1\":0.006619023196157732,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3168.1369696969696,\"x1\":3168.1369696969696,\"xref\":\"x\",\"y0\":0,\"y1\":0.005607397002735248,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3176.568484848485,\"x1\":3176.568484848485,\"xref\":\"x\",\"y0\":0,\"y1\":0.004227903631578969,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3048.6624,\"x1\":3062.5744,\"xref\":\"x\",\"y0\":0.007505690087406408,\"y1\":0.007505690087406408,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3048.6624,\"x1\":3087.616,\"xref\":\"x\",\"y0\":0.008915959990795457,\"y1\":0.008915959990795457,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3079.2688000000003,\"x1\":3087.616,\"xref\":\"x\",\"y0\":0.0045722513380105365,\"y1\":0.0045722513380105365,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3087.616,\"x1\":3097.3544,\"xref\":\"x\",\"y0\":0.002707202129486784,\"y1\":0.002707202129486784,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3087.616,\"x1\":3108.484,\"xref\":\"x\",\"y0\":0.004731788468475018,\"y1\":0.004731788468475018,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3087.616,\"x1\":3123.7872,\"xref\":\"x\",\"y0\":0.00980146934268879,\"y1\":0.00980146934268879,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3087.616,\"x1\":3133.5256,\"xref\":\"x\",\"y0\":0.013499528610184115,\"y1\":0.013499528610184115,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3048.6624,\"x1\":3182.2176,\"xref\":\"x\",\"y0\":0.00894439335909833,\"y1\":0.00894439335909833,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3153.0024,\"x1\":3182.2176,\"xref\":\"x\",\"y0\":0.007488013684865834,\"y1\":0.007488013684865834,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3164.132,\"x1\":3182.2176,\"xref\":\"x\",\"y0\":0.005972921368659259,\"y1\":0.005972921368659259,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3173.8704,\"x1\":3182.2176,\"xref\":\"x\",\"y0\":0.004253720309487584,\"y1\":0.004253720309487584,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3059.9325252525255,\"x1\":3059.9325252525255,\"xref\":\"x\",\"y0\":0,\"y1\":0.0076664779747402535,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3068.3640404040407,\"x1\":3068.3640404040407,\"xref\":\"x\",\"y0\":0,\"y1\":0.016672754263443067,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3082.4165656565656,\"x1\":3082.4165656565656,\"xref\":\"x\",\"y0\":0,\"y1\":0.004804286094145265,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3093.658585858586,\"x1\":3093.658585858586,\"xref\":\"x\",\"y0\":0,\"y1\":0.004026389180218125,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3104.900606060606,\"x1\":3104.900606060606,\"xref\":\"x\",\"y0\":0,\"y1\":0.005321434602966492,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3120.358383838384,\"x1\":3120.358383838384,\"xref\":\"x\",\"y0\":0,\"y1\":0.01015891479438546,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3130.1951515151513,\"x1\":3130.1951515151513,\"xref\":\"x\",\"y0\":0,\"y1\":0.014335489751832464,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3140.0319191919193,\"x1\":3140.0319191919193,\"xref\":\"x\",\"y0\":0,\"y1\":0.01690758767766308,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3158.300202020202,\"x1\":3158.300202020202,\"xref\":\"x\",\"y0\":0,\"y1\":0.008357004173573936,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3168.1369696969696,\"x1\":3168.1369696969696,\"xref\":\"x\",\"y0\":0,\"y1\":0.006338445734583271,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3176.568484848485,\"x1\":3176.568484848485,\"xref\":\"x\",\"y0\":0,\"y1\":0.004279536987396199,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3048.6624,\"x1\":3062.5744,\"xref\":\"x\",\"y0\":0.007505690087406408,\"y1\":0.007505690087406408,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3048.6624,\"x1\":3087.616,\"xref\":\"x\",\"y0\":0.008915959990795457,\"y1\":0.008915959990795457,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3079.2688000000003,\"x1\":3087.616,\"xref\":\"x\",\"y0\":0.0045722513380105365,\"y1\":0.0045722513380105365,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3087.616,\"x1\":3097.3544,\"xref\":\"x\",\"y0\":0.002707202129486784,\"y1\":0.002707202129486784,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3087.616,\"x1\":3108.484,\"xref\":\"x\",\"y0\":0.004731788468475018,\"y1\":0.004731788468475018,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3087.616,\"x1\":3123.7872,\"xref\":\"x\",\"y0\":0.00980146934268879,\"y1\":0.00980146934268879,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3087.616,\"x1\":3133.5256,\"xref\":\"x\",\"y0\":0.013499528610184115,\"y1\":0.013499528610184115,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3048.6624,\"x1\":3182.2176,\"xref\":\"x\",\"y0\":0.00894439335909833,\"y1\":0.00894439335909833,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3153.0024,\"x1\":3182.2176,\"xref\":\"x\",\"y0\":0.007488013684865834,\"y1\":0.007488013684865834,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3164.132,\"x1\":3182.2176,\"xref\":\"x\",\"y0\":0.005972921368659259,\"y1\":0.005972921368659259,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3173.8704,\"x1\":3182.2176,\"xref\":\"x\",\"y0\":0.004253720309487584,\"y1\":0.004253720309487584,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3059.9325252525255,\"x1\":3059.9325252525255,\"xref\":\"x\",\"y0\":0,\"y1\":0.0076664779747402535,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3068.3640404040407,\"x1\":3068.3640404040407,\"xref\":\"x\",\"y0\":0,\"y1\":0.016672754263443067,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3082.4165656565656,\"x1\":3082.4165656565656,\"xref\":\"x\",\"y0\":0,\"y1\":0.004804286094145265,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3093.658585858586,\"x1\":3093.658585858586,\"xref\":\"x\",\"y0\":0,\"y1\":0.004026389180218125,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3104.900606060606,\"x1\":3104.900606060606,\"xref\":\"x\",\"y0\":0,\"y1\":0.005321434602966492,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3120.358383838384,\"x1\":3120.358383838384,\"xref\":\"x\",\"y0\":0,\"y1\":0.01015891479438546,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3130.1951515151513,\"x1\":3130.1951515151513,\"xref\":\"x\",\"y0\":0,\"y1\":0.014335489751832464,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3140.0319191919193,\"x1\":3140.0319191919193,\"xref\":\"x\",\"y0\":0,\"y1\":0.01690758767766308,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3158.300202020202,\"x1\":3158.300202020202,\"xref\":\"x\",\"y0\":0,\"y1\":0.008357004173573936,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3168.1369696969696,\"x1\":3168.1369696969696,\"xref\":\"x\",\"y0\":0,\"y1\":0.006338445734583271,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3176.568484848485,\"x1\":3176.568484848485,\"xref\":\"x\",\"y0\":0,\"y1\":0.004279536987396199,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3048.6624,\"x1\":3062.5744,\"xref\":\"x\",\"y0\":0.007505690087406408,\"y1\":0.007505690087406408,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3048.6624,\"x1\":3087.616,\"xref\":\"x\",\"y0\":0.008915959990795457,\"y1\":0.008915959990795457,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3079.2688000000003,\"x1\":3087.616,\"xref\":\"x\",\"y0\":0.0045722513380105365,\"y1\":0.0045722513380105365,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3087.616,\"x1\":3097.3544,\"xref\":\"x\",\"y0\":0.002707202129486784,\"y1\":0.002707202129486784,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3087.616,\"x1\":3108.484,\"xref\":\"x\",\"y0\":0.004731788468475018,\"y1\":0.004731788468475018,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3087.616,\"x1\":3123.7872,\"xref\":\"x\",\"y0\":0.00980146934268879,\"y1\":0.00980146934268879,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3087.616,\"x1\":3133.5256,\"xref\":\"x\",\"y0\":0.013499528610184115,\"y1\":0.013499528610184115,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3048.6624,\"x1\":3182.2176,\"xref\":\"x\",\"y0\":0.00894439335909833,\"y1\":0.00894439335909833,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3153.0024,\"x1\":3182.2176,\"xref\":\"x\",\"y0\":0.007488013684865834,\"y1\":0.007488013684865834,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3164.132,\"x1\":3182.2176,\"xref\":\"x\",\"y0\":0.005972921368659259,\"y1\":0.005972921368659259,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3173.8704,\"x1\":3182.2176,\"xref\":\"x\",\"y0\":0.004253720309487584,\"y1\":0.004253720309487584,\"yref\":\"y\"}]},                        {\"responsive\": true}                    ).then(function(){\n","                            \n","var gd = document.getElementById('f0efc821-18d5-43b5-ad6e-1133ea0ad873');\n","var x = new MutationObserver(function (mutations, observer) {{\n","        var display = window.getComputedStyle(gd).display;\n","        if (!display || display === 'none') {{\n","            console.log([gd, 'removed!']);\n","            Plotly.purge(gd);\n","            observer.disconnect();\n","        }}\n","}});\n","\n","// Listen for the removal of the full notebook cells\n","var notebookContainer = gd.closest('#notebook-container');\n","if (notebookContainer) {{\n","    x.observe(notebookContainer, {childList: true});\n","}}\n","\n","// Listen for the clearing of the current output cell\n","var outputEl = gd.closest('.output');\n","if (outputEl) {{\n","    x.observe(outputEl, {childList: true});\n","}}\n","\n","                        })                };                            </script>        </div>\n","</body>\n","</html>"]},"metadata":{},"output_type":"display_data"}],"source":["start_0 = time.time()\n","min_prom = kdy.max() * 0.0\n","pipsize = 0.01\n","max_width_pips = 20\n","# width_range=(1, max_width_pips * pipsize / ticks_per_sample)\n","width_range= max_width_pips * pipsize / ticks_per_sample\n","peaks, peak_props = signal.find_peaks(kdy, prominence=min_prom, width=width_range)\n","\n","peak_x = kdx[peaks]\n","peak_y = kdy[peaks]\n","# ------ prominence lines ------ #\n","left_base = peak_props['left_bases']\n","right_base = peak_props['right_bases']\n","line_x = peak_x\n","line_y0 = peak_y\n","line_y1 = peak_y # - peak_props['prominences']\n","print(\"prom_line elapsed_time :\", time.time() - start_0)\n","\n","\n","for x, y0, y1 in zip(line_x, line_y0, line_y1):\n","    fig.add_shape(type='line',\n","        xref='x', yref='y',\n","        # x0=x, y0=y0, x1=x, y1=y1,\n","        x0=x, y0=0, x1=x, y1=y1,\n","        line=dict(\n","            color='red',\n","            width=2,\n","        )\n","    )\n","\n","# ------ width ------ #\n","left_ips = peak_props['left_ips']\n","right_ips = peak_props['right_ips']\n","# width_x0 = kdx.min() + (left_ips * ticks_per_sample)\n","# width_x1 = kdx.min() + (right_ips * ticks_per_sample)\n","width_x0 = kdx.min() + (left_base * ticks_per_sample)\n","width_x1 = kdx.min() + (right_base * ticks_per_sample)\n","\n","# int_from = kdx.min() + (left_base * ticks_per_sample)\n","# int_to = kdx.min() + (right_base * ticks_per_sample)\n","# [kde.integrate_box_1d(x0, x1) for x0, x1 in zip(int_from, int_to)]\n","\n","width_y = peak_props['width_heights']\n","\n","for x0, x1, y in zip(width_x0, width_x1, width_y):\n","    fig.add_shape(type='line',\n","        xref='x', yref='y',\n","        x0=x0, y0=y, x1=x1, y1=y,\n","        line=dict(\n","            color='red',\n","            width=2,\n","        )\n","    )\n","fig.show()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"zqj944n-WzyZ"},"outputs":[],"source":["# peaks  # ndarray\n","# kdx  # ndarray\n","# kdy  # ndarray\n","# kdx.min()\n","left_base * ticks_per_sample\n","# volume"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Rvqv0RGojo9h"},"outputs":[],"source":["print(peak_y)\n","print(peak_props['prominences'])\n","peak_props"]},{"cell_type":"markdown","metadata":{"id":"c2729DJ6h720"},"source":["##### imb."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Rucj-iepiR_-"},"outputs":[],"source":["t_df = res_df_.iloc[-120:-100]\n","a_data = t_df.to_numpy()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":537},"executionInfo":{"elapsed":5,"status":"ok","timestamp":1648801482583,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"ktm1aB-Bh7GH","outputId":"6aba1d34-3575-486a-9c29-941dc18a00fc"},"outputs":[{"data":{"image/png":"\n","text/plain":["<Figure size 1080x648 with 1 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["plt.style.use(['dark_background', 'fast'])\n","fig = plt.figure(figsize=(15, 9))\n","nrows, ncols = 1, 1\n","gs = gridspec.GridSpec(nrows=nrows,  # row 부터 index 채우고 col 채우는 순서임 (gs_idx)\n","                        ncols=ncols\n","                        # height_ratios=[3, 1]\n","                        )\n","\n","ax = fig.add_subplot(gs[0])\n","\n","# ------ candles ------ #\n","candle_plot(a_data[:, col_idx_dict['ohlc_col_idxs']], ax, alpha=1.0, wickwidth=1.0)\n","_ = [step_col_plot(a_data[:, params[0]], *params[1:]) for params in col_idx_dict['step_col_info']]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"jMQBhQ1Ljt5Y"},"outputs":[],"source":["def imb_ratio_v4(df, itv):\n","\n","  itv_num = to_itvnum(itv)\n","\n","  close = df['close_{}'.format(itv)].to_numpy()\n","  open = df['open_{}'.format(itv)].to_numpy()\n","\n","  b1_close = df['close_{}'.format(itv)].shift(itv_num).to_numpy()\n","  b1_open = df['open_{}'.format(itv)].shift(itv_num).to_numpy()\n","  b1_high = df['high_{}'.format(itv)].shift(itv_num).to_numpy()\n","  b1_low = df['low_{}'.format(itv)].shift(itv_num).to_numpy()\n","\n","  body_range = abs(close - open)\n","  b1_body_range = abs(b1_close - b1_open)\n","\n","  df['body_rel_ratio_{}'.format(itv)] = body_range / b1_body_range\n","\n","  short_body_range = np.where(close <= b1_low, body_range, b1_body_range)\n","  long_body_range = np.where(close >= b1_high, body_range, b1_body_range)\n","\n","  # 추후에 통계 측정해야함 -> bir 에 따른 개별 trader 의 epout / tpep 이라던가 => short 에 양봉은 취급안함 (why use np.nan)\n","  df['short_ir_{}'.format(itv)] = np.where(close < open, (b1_low - close) / short_body_range, np.nan) # close < open & close < b1_low\n","  df['long_ir_{}'.format(itv)] = np.where(close > open, (close - b1_high) / long_body_range, np.nan) # close > open & close > b1_high\n","\n","  return"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"I1Vq_BiKpY3P"},"outputs":[],"source":["def imb_ratio_v3(df, itv):\n","\n","  itv_num = to_itvnum(itv)\n","\n","  # high = df['high_{}'.format(itv)].to_numpy()\n","  # low = df['low_{}'.format(itv)].to_numpy()\n","  # candle_range = high - low\n","\n","  close = df['close_{}'.format(itv)].to_numpy()\n","  open = df['open_{}'.format(itv)].to_numpy()\n","\n","  b1_close = df['close_{}'.format(itv)].shift(itv_num).to_numpy()\n","  b1_open = df['open_{}'.format(itv)].shift(itv_num).to_numpy()\n","  b1_high = df['high_{}'.format(itv)].shift(itv_num).to_numpy()\n","  b1_low = df['low_{}'.format(itv)].shift(itv_num).to_numpy()\n","\n","  body_range = abs(close - open)\n","  b1_body_range = abs(b1_close - b1_open)\n","\n","  df['body_rel_ratio_{}'.format(itv)] = body_range / b1_body_range\n","\n","  short_body_ratio = np.where(close <= b1_low, body_range, b1_body_range)\n","  long_body_range = np.where(close >= b1_high, body_range, b1_body_range)\n","\n","  # 추후에 통계 측정해야함 -> bir 에 따른 개별 trader 의 epout / tpep 이라던가 => short 에 양봉은 취급안함 (why use np.nan)\n","  df['short_ir_{}'.format(itv)] = np.where(close < open, (b1_low - close) / body_range, np.nan) # close < open & close < b1_low\n","  df['long_ir_{}'.format(itv)] = np.where(close > open, (close - b1_high) / body_range, np.nan) # close > open & close > b1_high\n","\n","  return"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":372,"status":"ok","timestamp":1648807273349,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"mtnMUkhwkdrE","outputId":"b7cff2cd-63d3-4109-8753-d2192079e565"},"outputs":[{"data":{"text/plain":["index\n","2022-02-17 08:30:59.999         NaN\n","2022-02-17 08:31:59.999         NaN\n","2022-02-17 08:32:59.999         NaN\n","2022-02-17 08:33:59.999         NaN\n","2022-02-17 08:34:59.999         NaN\n","2022-02-17 08:35:59.999   -0.022654\n","2022-02-17 08:36:59.999   -0.022654\n","2022-02-17 08:37:59.999   -0.022654\n","2022-02-17 08:38:59.999   -0.022654\n","2022-02-17 08:39:59.999   -0.022654\n","2022-02-17 08:40:59.999    0.559585\n","2022-02-17 08:41:59.999    0.559585\n","2022-02-17 08:42:59.999    0.559585\n","2022-02-17 08:43:59.999    0.559585\n","2022-02-17 08:44:59.999    0.559585\n","2022-02-17 08:45:59.999    0.429719\n","2022-02-17 08:46:59.999    0.429719\n","2022-02-17 08:47:59.999    0.429719\n","2022-02-17 08:48:59.999    0.429719\n","2022-02-17 08:49:59.999    0.429719\n","Name: short_ir_5T, dtype: float64"]},"execution_count":116,"metadata":{},"output_type":"execute_result"}],"source":["imb_ratio(t_df, \"5T\")\n","# imb_ratio_v3(t_df, \"5T\")\n","# imb_ratio_v4(t_df, \"5T\")\n","\n","t_df.tail(100).short_ir_5T  # .461871\n","# t_df.iloc[:, -10:]\n","# t_df.dtypes"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":375,"status":"ok","timestamp":1648807284664,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"RVUs1YE_pgBI","outputId":"0ad635a5-e0b9-40c9-c28f-6ebae5494c7b"},"outputs":[{"data":{"text/plain":["index\n","2022-02-17 08:30:59.999         NaN\n","2022-02-17 08:31:59.999         NaN\n","2022-02-17 08:32:59.999         NaN\n","2022-02-17 08:33:59.999         NaN\n","2022-02-17 08:34:59.999         NaN\n","2022-02-17 08:35:59.999   -0.030303\n","2022-02-17 08:36:59.999   -0.030303\n","2022-02-17 08:37:59.999   -0.030303\n","2022-02-17 08:38:59.999   -0.030303\n","2022-02-17 08:39:59.999   -0.030303\n","2022-02-17 08:40:59.999    0.621583\n","2022-02-17 08:41:59.999    0.621583\n","2022-02-17 08:42:59.999    0.621583\n","2022-02-17 08:43:59.999    0.621583\n","2022-02-17 08:44:59.999    0.621583\n","2022-02-17 08:45:59.999    1.000000\n","2022-02-17 08:46:59.999    1.000000\n","2022-02-17 08:47:59.999    1.000000\n","2022-02-17 08:48:59.999    1.000000\n","2022-02-17 08:49:59.999    1.000000\n","Name: short_ir_5T, dtype: float64"]},"execution_count":117,"metadata":{},"output_type":"execute_result"}],"source":["# imb_ratio(t_df, \"5T\")\n","# imb_ratio_v3(t_df, \"5T\")\n","imb_ratio_v4(t_df, \"5T\")\n","\n","t_df.tail(100).short_ir_5T  # .461871\n","# t_df.iloc[:, -10:]\n","# t_df.dtypes"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"bieHiKjBkuFL"},"outputs":[],"source":["# ------ rtc 1, 0 개념 ------ #\n","# short_rtc_1 = close\n","# short_rtc_0 = b1_low\n","\n","# long_rtc_1 = close\n","# long_rtc_0 = b1_high\n","\n","# rtc 로 활용하려면, col 로 추가해야할 것 -> 추가할만한 col_name 은 아님\n","# 1. h_candle 인 경우 -> ?\n","#   a. h_candle_v3 먹이고, open_{}.shift(num_itv).to_numpy() 진행 -> ex. res_df['close_{}'.format(hc_itv)].shift(itv_num).to_numpy() "]},{"cell_type":"code","execution_count":null,"metadata":{"id":"3X6bMXJIjPYy"},"outputs":[],"source":["# 1. 현재 종가 - 이전 고가 = imb_range (long)\n","long_imb_range = t_df.close - t_df.high.shift(1)\n","# 2. 이전 저가 - 현재 종가 - imb_range (short)\n","short_imb_range = t_df.low.shift(1) - t_df.close"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"q1nEA19v7Qpj"},"outputs":[],"source":["from math import floor\n","\n","\n","def _calc_dev(base_price, price):\n","    return 100 * (price - base_price) / base_price\n","\n","\n","def zigzag(highs, lows, depth=10, dev_threshold=5):\n","    def pivots(src_raw, length, isHigh):\n","        src = list(reversed(src_raw))\n","        bar_index = list(range(len(src)))\n","        for start in range(0, len(src)):\n","            if start + 2 * length + 1 > len(src) - 1:\n","                return\n","            p = 0\n","            if length < len(src) - start:\n","                p = src[start + length]\n","            if length == 0:\n","                yield 0, p\n","            else:\n","                isFound = True\n","                for i in range(start, start + length):\n","                    if isHigh and src[i] > p:\n","                        isFound = False\n","                    if not isHigh and src[i] < p:\n","                        isFound = False\n","                for i in range(start + length + 1, start + 2 * length + 1):\n","                    if isHigh and src[i] >= p:\n","                        isFound = False\n","                    c = not isHigh and src[i] <= p\n","                    if c:\n","                        isFound = False\n","                if isFound:\n","                    yield (bar_index[start + length], p)\n","                else:\n","                    yield None, None\n","\n","    data_highs = [x for x in pivots(highs, floor(depth / 2), True) if x[0]]\n","    data_lows = [x for x in pivots(lows, floor(depth / 2), False) if x[0]]\n","\n","    raw_pairs = []\n","\n","    for i, (ind, p) in enumerate(data_highs):\n","        lows_d = sorted([(ind_l, p_l) for ind_l, p_l in data_lows if ind > ind_l], key=lambda x: x[0])\n","        if lows_d:\n","            lows = lows_d[-1]\n","\n","            if abs(_calc_dev(lows[1], p)) >= dev_threshold:\n","                raw_pairs.append(\n","                    ((ind, p),\n","                     (lows[0], lows[1]))\n","                )\n","\n","    result = []\n","\n","    for (i_h, p_h),(i_l, p_l) in raw_pairs:\n","        if not result:\n","            result.append(((i_h, p_h),(i_l, p_l)))\n","            continue\n","\n","        if i_l == result[-1][1][0]:\n","            if p_h > result[-1][0][1]:\n","                result = result[:-1]\n","            else:\n","                continue\n","\n","        result.append(((i_h, p_h),(i_l, p_l)))\n","\n","    return result\n","\n","# highs, lows = t_df.high.to_numpy(), t_df.low.to_numpy()\n","# zigzag(highs, lows, depth=5, dev_threshold=5)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"fGlmdyb97j4Q"},"outputs":[],"source":["t_df = res_df_.iloc[-120:]\n","a_data = t_df.to_numpy()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ropzIp0wUPAA"},"outputs":[],"source":["# import plotly.express as px\n","# import plotly.graph_objects as go\n","\n","def get_dist_plot(c, v, kx, ky):\n","    fig = go.Figure()\n","    fig.add_trace(go.Histogram(name='Vol Profile', x=c, y=v, nbinsx=150, \n","                               histfunc='sum', histnorm='probability density',\n","                               marker_color='#B0C4DE'))\n","    fig.add_trace(go.Scatter(name='KDE', x=kx, y=ky, mode='lines', marker_color='#D2691E'))    \n","\n","    peaks,_ = signal.find_peaks(kdy)\n","    pkx = kdx[peaks]\n","    pky = kdy[peaks]\n","    pk_marker_args=dict(size=10, color='black')\n","    fig.add_trace(go.Scatter(name=\"Peaks\", x=pkx, y=pky, mode='markers', marker=pk_marker_args))\n","    fig.show()\n","\n","    return fig"]},{"cell_type":"markdown","metadata":{"id":"qsyPhNR8yP1c"},"source":["##### dump"]},{"cell_type":"code","source":["_ = wave_range_v8(res_df, config.loc_set.point.p1_period1, config.loc_set.point.p1_period2, ltf_df=None)"],"metadata":{"id":"YAspOgPqRU8b"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df = res_df\n","period1, period2 = config.loc_set.point.p1_period1, config.loc_set.point.p1_period2\n","ltf_df=None\n","touch_period=50"],"metadata":{"id":"saP02MvMUt1U"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["\n","itv = pd.infer_freq(df.index)\n","\n","donchian_channel_v2(df, period1) \n","donchian_channel_v2(df, period2) \n","dc_lower_, dc_upper_ = df['dc_lower_{}{}'.format(itv, period1)].to_numpy(), df['dc_upper_{}{}'.format(itv, period1)].to_numpy()\n","dc_lower2_, dc_upper2_ = df['dc_lower_{}{}'.format(itv, period2)].to_numpy(), df['dc_upper_{}{}'.format(itv, period2)].to_numpy()\n","\n","short_base = (dc_lower_ + dc_upper2_) / 2\n","long_base = (dc_upper_ + dc_lower2_) / 2\n","df['short_base_{}{}{}'.format(itv, period1, period2)] = short_base\n","df['long_base_{}{}{}'.format(itv, period1, period2)] = long_base\n","\n","len_df = len(df)   \n","short_open_res = np.ones(len_df)\n","long_open_res = np.ones(len_df)\n","\n","data_cols = ['open', 'high', 'low']\n","open, high, low = [df[col_].to_numpy() for col_ in data_cols]\n","\n","short_upper_touch_idx = pd.Series(np.where(high >= dc_upper2_, np.arange(len_df), np.nan)).rolling(touch_period, min_periods=1).max().to_numpy()  # min -> max\n","short_lower_touch_idx = pd.Series(np.where(low <= dc_lower_, np.arange(len_df), np.nan)).rolling(touch_period, min_periods=1).max().to_numpy()   # min 으로 하면 a 이전에 b 있는건 모두 제외하게됨    \n","short_lower_touch_idx_min = pd.Series(np.where(low <= dc_lower_, np.arange(len_df), np.nan)).rolling(touch_period, min_periods=1).min().to_numpy()   # min 으로 하면 a 이전에 b 있는건 모두 제외하게됨    \n","short_open_res *= (high >= short_base) & (short_base >= open) & (short_upper_touch_idx < short_lower_touch_idx)\n","\n","\n","df['short_upper_touch_idx_{}{}{}'.format(itv, period1, period2)] = short_upper_touch_idx\n","df['short_lower_touch_idx_{}{}{}'.format(itv, period1, period2)] = short_lower_touch_idx\n","# df['short_lower_touch_idx_min_{}{}{}'.format(itv, period1, period2)] = short_lower_touch_idx_min\n","df['short_upper_touch_line_{}{}{}'.format(itv, period1, period2)] = get_line(short_upper_touch_idx, dc_upper2_)\n","df['short_lower_touch_line_{}{}{}'.format(itv, period1, period2)] = get_line(short_lower_touch_idx, dc_lower_)\n","df['short_wave_point_{}{}{}'.format(itv, period1, period2)] = short_open_res\n","\n","long_lower_touch_idx = pd.Series(np.where(low <= dc_lower2_, np.arange(len_df), np.nan)).rolling(touch_period, min_periods=1).max().to_numpy()       \n","long_upper_touch_idx = pd.Series(np.where(high >= dc_upper_, np.arange(len_df), np.nan)).rolling(touch_period, min_periods=1).max().to_numpy()    \n","long_upper_touch_idx_min = pd.Series(np.where(high >= dc_upper_, np.arange(len_df), np.nan)).rolling(touch_period, min_periods=1).min().to_numpy()    \n","long_open_res *= (open >= long_base) & (long_base >= low) & (long_lower_touch_idx < long_upper_touch_idx)\n","\n","wave_min_bars = 20\n","wave_max_bars = 40\n","short_p1_idx = np.where(res_df['short_wave_point_{}{}{}'.format(itv, period1, period2)], np.arange(len_df), np.nan)\n","short_prev_p1_idx = pd.Series(short_p1_idx).rolling(wave_max_bars, min_periods=1).min().to_numpy()\n","\n","short_high = np.full_like(high, np.nan)\n","short_valid_idx = (short_p1_idx - short_prev_p1_idx) >= wave_min_bars\n","short_high[short_valid_idx] = np.array([np.min(high[int(iin):int(iout)]) for iin, iout in zip(short_prev_p1_idx[short_valid_idx], short_p1_idx[short_valid_idx])])\n","\n","long_p1_idx = np.where(res_df['long_wave_point_{}{}{}'.format(itv, period1, period2)], np.arange(len_df), np.nan)\n","long_prev_p1_idx = pd.Series(long_p1_idx).rolling(wave_max_bars, min_periods=1).min().to_numpy()\n","\n","long_low = np.full_like(low, np.nan)\n","long_valid_idx = (long_p1_idx - long_prev_p1_idx) >= wave_min_bars\n","long_low[long_valid_idx] = np.array([np.min(low[int(iin):int(iout)]) for iin, iout in zip(long_prev_p1_idx[long_valid_idx], long_p1_idx[long_valid_idx])])\n"],"metadata":{"id":"A21BXePPSPcl"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print(len(long_p1_idx))\n","print(np.sum(np.isnan(long_p1_idx)))\n","print(np.sum(np.isnan(long_prev_p1_idx)))"],"metadata":{"id":"h8YQptgzU2kZ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# min_low[~equal_idx] = \n","# long_p1_idx[~np.isnan(long_p1_idx)]"],"metadata":{"id":"xAbtsLi8VRNm"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# valid_idx\n","# print(long_low)\n","print(long_low[valid_idx])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"b01vSN6SWZYX","executionInfo":{"status":"ok","timestamp":1650364149142,"user_tz":-540,"elapsed":325,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"27297531-56d1-4130-8fdf-b15ecb317bc0"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[ 386.2   386.2   387.96 ... 3058.58 3058.58 3052.65]\n"]}]},{"cell_type":"code","execution_count":null,"metadata":{"id":"M3OxtsKmEmjr"},"outputs":[],"source":["comp_col_list = res_df_.columns"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":3,"status":"ok","timestamp":1649654863270,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"iuNX7A7MEnYk","outputId":"1f7a942f-b03e-46d4-904b-bac88624f2bb"},"outputs":[{"data":{"text/plain":["Index(['open', 'high', 'low', 'close', 'volume', 'dc_upper_5T', 'dc_lower_5T', 'dc_base_5T', 'dc_upper_15T', 'dc_lower_15T', 'dc_base_15T', 'bb_upper_5T', 'bb_lower_5T', 'bb_upper_15T', 'bb_lower_15T'], dtype='object')"]},"execution_count":102,"metadata":{},"output_type":"execute_result"}],"source":["comp_col_list"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"D3UNq1Y4Ef1V"},"outputs":[],"source":["db_res_df = res_df_.copy()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"6tJ-B_GhEvHx"},"outputs":[],"source":["gap_df = res_df_[comp_col_list] - db_res_df"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":334,"status":"ok","timestamp":1649654897410,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"nEuH8TKrFA5J","outputId":"bb20a375-f7dd-439d-f10a-c7763766ff15"},"outputs":[{"data":{"text/plain":["open            0.000000e+00\n","high            0.000000e+00\n","low             0.000000e+00\n","close           0.000000e+00\n","volume          0.000000e+00\n","dc_upper_5T     0.000000e+00\n","dc_lower_5T     9.094947e-13\n","dc_base_5T      0.000000e+00\n","dc_upper_15T    0.000000e+00\n","dc_lower_15T    9.094947e-13\n","dc_base_15T     0.000000e+00\n","bb_upper_5T     0.000000e+00\n","bb_lower_5T     4.547474e-13\n","bb_upper_15T    0.000000e+00\n","bb_lower_15T    4.547474e-13\n","dtype: float64"]},"execution_count":106,"metadata":{},"output_type":"execute_result"}],"source":["gap_df.max() # .tail(1000)  # [gap_df > 0.1]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"9VOxiJB1yUTI"},"outputs":[],"source":["\n","def fill_na(arr_, iin, iout, fill_value):\n","  arr_[iin:iout + 1] = fill_value\n","\n","  # 1. cross_point 찾기\n","  #   a. cross_over & cross_under\n","# def wave_range(t_df):\n","tf_entry = 'T'\n","tf_entry_num = to_itvnum(tf_entry)\n","base_shift_size = 3 # 3T used\n","\n","np_timeidx = np.array([intmin_np(date_) for date_ in t_df.index.to_numpy()])\n","\n","close = t_df.close.to_numpy()\n","b1_close = t_df.close.shift(tf_entry_num).to_numpy()  # 일단, 1 로 설정\n","dc_base_3T = t_df.dc_base_3T.to_numpy()\n","b1_dc_base_3T = t_df.dc_base_3T.shift(3).to_numpy()\n","\n","crossover = (close > dc_base_3T) & (b1_dc_base_3T > b1_close) & (np_timeidx % tf_entry_num == tf_entry_num - 1)\n","crossunder = (close < dc_base_3T) & (b1_dc_base_3T < b1_close) & (np_timeidx % tf_entry_num == tf_entry_num - 1)\n","\n","# 1. crossover ~ crossunder's high (over 과 under 의 index 포함해야함)\n","# 2. crossunder ~ crossover's low\n","high = t_df.high.to_numpy()\n","low = t_df.low.to_numpy()\n","\n","# print(np.sum(crossover))\n","# print(np.sum(crossunder))\n","\n","# pairing -> 더 긴 배열의 시작 index 가 더 작음\n","co_idx = np.argwhere(crossover)\n","cu_idx = np.argwhere(crossunder)\n","\n","print(co_idx)\n","print(cu_idx)\n","\n","# 2. 길이가 다른 경우\n","#  a. 길이가 긴 쪽이 먼저\n","if len(co_idx) > len(cu_idx):\n","  upper_zone = np.hstack((co_idx[:-1], cu_idx))  \n","  lower_zone = np.hstack((cu_idx, co_idx[1:]))  \n","elif len(co_idx) < len(cu_idx):\n","  upper_zone = np.hstack((co_idx, cu_idx[1:]))  \n","  lower_zone = np.hstack((cu_idx[:-1], co_idx))  \n","else:\n","  # 1. 길이가 같은 경우\n","  #   뭐가 먼저인지 판단하는 logic\n","  if co_idx[0] < cu_idx[0]:\n","    #   a. co 가 먼저인 경우\n","    upper_zone = np.hstack((co_idx, cu_idx))  \n","    lower_zone = np.hstack((cu_idx[:-1], co_idx[1:]))  \n","  else:\n","    #   b. cu 가 먼저인 경우\n","    upper_zone = np.hstack((co_idx[:-1], cu_idx[1:]))  \n","    lower_zone = np.hstack((cu_idx, co_idx))  \n","\n","# print(upper_zone)\n","# print(lower_zone)\n","\n","# make envelope\n","wave_high = np.full_like(high, np.nan)\n","wave_low = np.full_like(low, np.nan)\n","\n","fill_upper_zone = np.hstack((upper_zone[:-1, [1]], upper_zone[1:, [1]]))\n","fill_lower_zone = np.hstack((lower_zone[:-1, [1]], lower_zone[1:, [1]]))\n","\n","for items in zip(fill_upper_zone, upper_zone):\n","  print(items)\n","\n","[fill_na(wave_high, f_iin, f_iout, high[iin:iout + 1].max()) for (f_iin, f_iout), (iin, iout) in zip(fill_upper_zone, upper_zone)]\n","[fill_na(wave_low, f_iin, f_iout, low[iin:iout + 1].min()) for (f_iin, f_iout), (iin, iout) in zip(fill_lower_zone, lower_zone)]\n","# [high[iin:iout + 1].max() for iin, iout in upper_zone]\n","# [low[iin:iout + 1].min() for iin, iout in lower_zone]\n","\n","# t_df['fill_wave_high'] = pd.Series(wave_high).bfill().to_numpy()\n","# t_df['fill_wave_low'] = pd.Series(wave_low).bfill().to_numpy()\n","# t_df['fill_wave_high'] = pd.Series(wave_high).ffill().to_numpy()\n","# t_df['fill_wave_low'] = pd.Series(wave_low).ffill().to_numpy()\n","t_df['fill_wave_high'] = wave_high\n","t_df['fill_wave_low'] = wave_low\n","\n","  # return "]},{"cell_type":"markdown","metadata":{"id":"xpyP5t8Ht_pE"},"source":["### calc recursive indi's min_period"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"N1Hbm4OA4Tkk"},"outputs":[],"source":["ticker_prcn = get_precision_by_price(res_df.close.iloc[-1]) + 2\n","\n","target_len = 300000\n","slice_len_list = list(range(50, 10000, 100))\n","slice_len_list.insert(0, target_len)\n","\n","start_0 = time.time()\n","# prev_int_, prev_pnts_ = None, None\n","offset = 1\n","\n","for sl_idx, sample_len in enumerate(slice_len_list):\n","\n","  sample_df = res_df.iloc[-sample_len -offset:-offset]\n","  sample_len2 = sample_len\n","\n","  # --------- input using indi.s --------- #\n","  # res = ema_v0(sample_df['close'], 190)\n","  res = rsi(sample_df, 14)\n","\n","    #    to_htf()    #\n","  # df_5T = to_htf(sample_df, itv_='5T', offset='1h')\n","  # sample_len2 = len(df_5T)\n","\n","  # # --------- input using htf_indi. --------- #\n","  # res = ema(df_5T['close'], 195)\n","  # -------------------------------------- #\n","\n","  res_last_row = res.iloc[-1]\n","  if pd.isnull(res_last_row):\n","    continue\n","\n","  # print(res_last_row)\n","  # break\n","\n","  # sample_df = sample_df.join(to_lower_tf_v2(sample_df, df_5T, [-1]), how='inner')\n","\n","\n","  #   자리수 분할 계산    #\n","  int_, points_ = str(res_last_row).split('.')\n","  pnts_ = points_[:ticker_prcn]\n","\n","  if sl_idx == 0:\n","    target_int_ = int_\n","    target_pnts_ = pnts_\n","    print(\"target {} ({}) -> {} {}\".format(sample_len, sample_len2, int_, points_))\n","\n","  else:\n","    if target_int_ == int_ and target_pnts_ == pnts_:\n","      # print(sample_len, \"({})\".format(sample_len2), '->', int_, pnts_, end='\\n\\n')\n","      print(\"{} ({}) -> {} {}\\n\".format(sample_len, sample_len2, int_, points_))\n","      break\n","\n","print(time.time() - start_0)  # (1301)(1361)(1301)"]},{"cell_type":"markdown","metadata":{"id":"rrIGjmUzqU-D"},"source":["## import utils & config"]},{"cell_type":"code","execution_count":4,"metadata":{"id":"SeJan_0t95yL","executionInfo":{"status":"ok","timestamp":1650414210757,"user_tz":-540,"elapsed":3162,"user":{"displayName":"7th June","userId":"08178289703395036410"}}},"outputs":[],"source":["frame_ver = \"0114_htf\"\n","ID_arr = np.array(['v3', 'v5_2'])\n","\n","utils_public_name = \"{}.utils.{}_utils_public\".format(strat_pkg, frame_ver)\n","utils_public_lib = importlib.import_module(utils_public_name)\n","utils_public = utils_public_lib   # temporary\n","\n","u_name_list = [\"{}.utils.{}_utils_{}\".format(strat_pkg, frame_ver, id_) for id_ in ID_arr]\n","utils_arr = np.array([importlib.import_module(u_name) for u_name in u_name_list])\n","\n","config_name_list = [\"{}_config_{}.json\".format(frame_ver, id_) for id_ in ID_arr]\n","cfg_path_list = [os.path.join(current_path, strat_pkg, \"config\", name_) for name_ in config_name_list]\n","cfg_file_list = [open(cfg_path) for cfg_path in cfg_path_list]\n","config_arr = np.array([EasyDict(json.load(cfg_)) for cfg_ in cfg_file_list])\n","\n","# ------ opened files should be closed --> 닫지 않으면 reopen 시 error occurs ------ #\n","_ = [cfg_.close() for cfg_ in cfg_file_list]\n","show_plot = 1   # idep's var - do not touch"]},{"cell_type":"markdown","metadata":{"id":"leSQlImg4_9L"},"source":["### utils_"]},{"cell_type":"code","execution_count":47,"metadata":{"id":"CB2yZdQ95Cdg","executionInfo":{"status":"ok","timestamp":1650415840380,"user_tz":-540,"elapsed":2425,"user":{"displayName":"7th June","userId":"08178289703395036410"}}},"outputs":[],"source":["# import pandas as pd\n","# import numpy as np\n","# import logging\n","\n","sys_log = logging.getLogger()\n","\n","def get_line(touch_idx, rtc_):\n","    touch_idx_copy = touch_idx.copy()\n","\n","    nan_idx = np.isnan(touch_idx_copy)\n","    touch_idx_copy[nan_idx] = 0  # for indexing array\n","    touch_line = rtc_[touch_idx_copy.astype(int)].copy()\n","    touch_line[nan_idx] = np.nan  # for true comp.\n","\n","    return touch_line\n","\n","\n","def enlist_rtc(res_df, config, np_timeidx):\n","    strat_version = config.strat_version\n","    # ------------ rtc_gap ------------ #\n","    short_epout_1_, long_epout_1_ = 'short_epout_1_{}'.format(strat_version), 'long_epout_1_{}'.format(strat_version)\n","    short_epout_0_, long_epout_0_ = 'short_epout_0_{}'.format(strat_version), 'long_epout_0_{}'.format(strat_version)\n","    short_tp_1_, long_tp_1_ = 'short_tp_1_{}'.format(strat_version), 'long_tp_1_{}'.format(strat_version)\n","    short_tp_0_, long_tp_0_ = 'short_tp_0_{}'.format(strat_version), 'long_tp_0_{}'.format(strat_version)\n","\n","    # b1_itv_num = to_itvnum(config.loc_set.point.p2_itv0)\n","    # b2_itv_num = to_itvnum(config.loc_set.point.p2_itv0) * 2  # multi 2 for imb_v2\n","\n","    itv = config.loc_set.point.p1_itv1\n","    period1 = config.loc_set.point.p1_period1\n","    period2 = config.loc_set.point.p1_period2\n","\n","    res_df[short_tp_1_] = res_df['short_wave_low_{}{}{}'.format(itv, period1, period2)]\n","    res_df[short_tp_0_] = res_df['short_wave_high_{}{}{}'.format(itv, period1, period2)]\n","    res_df[long_tp_1_] = res_df['long_wave_high_{}{}{}'.format(itv, period1, period2)]\n","    res_df[long_tp_0_] = res_df['long_wave_low_{}{}{}'.format(itv, period1, period2)]\n","\n","    if config.loc_set.point.p2_itv1 != \"None\":\n","        p2_period1 = config.loc_set.point.p2_period1\n","        p2_period2 = config.loc_set.point.p2_period2\n","        res_df[short_epout_1_] = res_df['dc_lower_{}{}'.format(config.loc_set.point.p2_itv1, p2_period1)]\n","        res_df[short_epout_0_] = res_df['dc_upper_{}{}'.format(config.loc_set.point.p2_itv0, p2_period2)]\n","        res_df[long_epout_1_] = res_df['dc_upper_{}{}'.format(config.loc_set.point.p2_itv1, p2_period1)]\n","        res_df[long_epout_0_] = res_df['dc_lower_{}{}'.format(config.loc_set.point.p2_itv0, p2_period2)]\n","    else:\n","        res_df[short_epout_1_] = res_df['short_wave_low_{}{}{}'.format(itv, period1, period2)]\n","        res_df[short_epout_0_] = res_df['short_wave_high_{}{}{}'.format(itv, period1, period2)]\n","        res_df[long_epout_1_] = res_df['long_wave_high_{}{}{}'.format(itv, period1, period2)]\n","        res_df[long_epout_0_] = res_df['long_wave_low_{}{}{}'.format(itv, period1, period2)]\n","\n","    # ------ inversion ------ #\n","    if config.pos_set.short_inversion or config.pos_set.long_inversion:\n","        res_df.rename({short_tp_1_: long_tp_1_, long_tp_1_: short_tp_1_}, axis=1, inplace=True)\n","        res_df.rename({short_tp_0_: long_tp_0_, long_tp_0_: short_tp_0_}, axis=1, inplace=True)\n","        res_df.rename({short_epout_1_: long_epout_1_, long_epout_1_: short_epout_1_}, axis=1, inplace=True)\n","        res_df.rename({short_epout_0_: long_epout_0_, long_epout_0_: short_epout_0_}, axis=1, inplace=True)\n","\n","    res_df['short_tp_gap_{}'.format(strat_version)] = abs(res_df[short_tp_1_] - res_df[short_tp_0_])\n","    res_df['long_tp_gap_{}'.format(strat_version)] = abs(res_df[long_tp_1_] - res_df[long_tp_0_])\n","    res_df['short_epout_gap_{}'.format(strat_version)] = abs(res_df[short_epout_1_] - res_df[short_epout_0_])\n","    res_df['long_epout_gap_{}'.format(strat_version)] = abs(res_df[long_epout_1_] - res_df[long_epout_0_])\n","\n","    # ------------ dtk_gap ------------ #\n","    # res_df['short_dtk_1_{}'.format(strat_version)] = res_df['bb_lower_%s' % config.loc_set.zone.dtk_itv]\n","    # res_df['short_dtk_0_{}'.format(strat_version)] = res_df['dc_upper_%s' % config.loc_set.zone.dtk_itv]\n","    # res_df['long_dtk_1_{}'.format(strat_version)] = res_df['bb_upper_%s' % config.loc_set.zone.dtk_itv]\n","    # res_df['long_dtk_0_{}'.format(strat_version)] = res_df['dc_lower_%s' % config.loc_set.zone.dtk_itv]\n","\n","    # res_df['short_dtk_gap_{}'.format(strat_version)] = abs(\n","    #     res_df['short_dtk_0_{}'.format(strat_version)] - res_df['short_dtk_1_{}'.format(strat_version)])\n","    # res_df['long_dtk_gap_{}'.format(strat_version)] = abs(\n","    #     res_df['long_dtk_1_{}'.format(strat_version)] - res_df['long_dtk_0_{}'.format(strat_version)])\n","\n","    return res_df\n","\n","\n","def enlist_tr(res_df, config, np_timeidx, mode='OPEN', show_detail=True):\n","    strat_version = config.strat_version\n","    len_df = len(res_df)\n","    short_open_res = np.ones(len_df)\n","    long_open_res = np.ones(len_df)\n","\n","    short_tp_1_col, short_tp_0_col, short_tp_gap_col = 'short_tp_1_{}'.format(strat_version), 'short_tp_0_{}'.format(\n","        strat_version), 'short_tp_gap_{}'.format(strat_version)\n","    long_tp_1_col, long_tp_0_col, long_tp_gap_col = 'long_tp_1_{}'.format(strat_version), 'long_tp_0_{}'.format(\n","        strat_version), 'long_tp_gap_{}'.format(strat_version)\n","    short_epout_1_col, short_epout_0_col, short_epout_gap_col = 'short_epout_1_{}'.format(strat_version), 'short_epout_0_{}'.format(\n","        strat_version), 'short_epout_gap_{}'.format(strat_version)\n","    long_epout_1_col, long_epout_0_col, long_epout_gap_col = 'long_epout_1_{}'.format(strat_version), 'long_epout_0_{}'.format(\n","        strat_version), 'long_epout_gap_{}'.format(strat_version)\n","\n","    tp_cols = [short_tp_1_col, short_tp_0_col, short_tp_gap_col, long_tp_1_col, long_tp_0_col, long_tp_gap_col]  # Todo - public_indi 이전에 해야할지도 모름\n","    epout_cols = [short_epout_1_col, short_epout_0_col, short_epout_gap_col, long_epout_1_col, long_epout_0_col,\n","                  long_epout_gap_col]  # Todo - public_indi 이전에 해야할지도 모름\n","    data_cols = ['open', 'high', 'low', 'close']  # Todo - public_indi 이전에 해야할지도 모름 # 'close', 'haopen', 'hahigh', 'halow', 'haclose'\n","\n","    short_tp_1_, short_tp_0_, short_tp_gap_, long_tp_1_, long_tp_0_, long_tp_gap_ = [res_df[col_].to_numpy() for col_ in tp_cols]\n","    short_epout_1_, short_epout_0_, short_epout_gap_, long_epout_1_, long_epout_0_, long_epout_gap_ = [res_df[col_].to_numpy() for col_ in epout_cols]\n","    open, high, low, close = [res_df[col_].to_numpy() for col_ in data_cols]\n","\n","    # ---------------- point - support_confirmer---------------- #\n","    point1_to2_period = 60\n","    p1_itv1 = config.loc_set.point.p1_itv1\n","    p1_period1 = config.loc_set.point.p1_period1\n","    p1_period2 = config.loc_set.point.p1_period2\n","    p2_itv1 = config.loc_set.point.p2_itv1\n","    p2_period1 = config.loc_set.point.p2_period1\n","    p2_period2 = config.loc_set.point.p2_period2\n","\n","    if p2_itv1 != \"None\":\n","        short_point1_on2_idx = pd.Series(\n","            np.where(res_df['short_wave_point_{}{}{}'.format(p1_itv1, p1_period1, p1_period2)], np.arange(len_df), np.nan)).rolling(point1_to2_period,\n","                                                                                                                                    min_periods=1).max().to_numpy()  # period 내의 max_point1_idx\n","        long_point1_on2_idx = pd.Series(\n","            np.where(res_df['long_wave_point_{}{}{}'.format(p1_itv1, p1_period1, p1_period2)], np.arange(len_df), np.nan)).rolling(point1_to2_period,\n","                                                                                                                                   min_periods=1).max().to_numpy()\n","\n","        short_point2_idx = pd.Series(\n","            np.where(res_df['short_wave_point_{}{}{}'.format(p2_itv1, p2_period1, p2_period2)], np.arange(len_df), np.nan)).to_numpy()\n","        long_point2_idx = pd.Series(\n","            np.where(res_df['long_wave_point_{}{}{}'.format(p2_itv1, p2_period1, p2_period2)], np.arange(len_df), np.nan)).to_numpy()\n","\n","        res_df['short_point_idxgap_{}'.format(strat_version)] = short_point2_idx - short_point1_on2_idx\n","        res_df['long_point_idxgap_{}'.format(strat_version)] = long_point2_idx - long_point1_on2_idx\n","\n","        # ------ p1 & p2 ------ #\n","        short_open_res *= ~np.isnan(res_df['short_point_idxgap_{}'.format(strat_version)].to_numpy())\n","        long_open_res *= ~np.isnan(res_df['long_point_idxgap_{}'.format(strat_version)].to_numpy())\n","\n","        if show_detail:\n","          sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","          sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))\n","\n","        # ------ p2 amax > p1_idx (long) ------ #\n","        short_open_res *= res_df['short_upper_touch_idx_{}{}{}'.format(p2_itv1, p2_period1, p2_period2)].to_numpy() > short_point1_on2_idx\n","        long_open_res *= res_df['long_lower_touch_idx_{}{}{}'.format(p2_itv1, p2_period1, p2_period2)].to_numpy() > long_point1_on2_idx\n","\n","        if show_detail:\n","          sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","          sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))\n","\n","        # ------ higher low (long) ------ #\n","        # short_a_line1_on2_ = get_line(short_point1_on2_idx, res_df['short_a_line_{}{}{}'.format(p1_itv1, p1_period1, p1_period2)].to_numpy())\n","        # long_a_line1_on2_ = get_line(long_point1_on2_idx, res_df['long_a_line_{}{}{}'.format(p1_itv1, p1_period1, p1_period2)].to_numpy())\n","\n","        # short_a_line2_ = res_df['short_a_line_{}{}{}'.format(p2_itv1, p2_period1, p2_period2)].to_numpy()\n","        # long_a_line2_ = res_df['long_a_line_{}{}{}'.format(p2_itv1, p2_period1, p2_period2)].to_numpy()\n","\n","        # short_open_res *= short_a_line1_on2_ >= short_a_line2_\n","        # long_open_res *= long_a_line1_on2_ <= long_a_line2_\n","\n","        # print(np.sum(long_open_res == 1))\n","\n","    else:  \n","        # ------ p1 only ------ #\n","        res_df['short_point_idxgap_{}'.format(strat_version)] = 0  # default\n","        res_df['long_point_idxgap_{}'.format(strat_version)] = 0\n","\n","        # ------ lower_touch > upper_touch (long) ------ #\n","        # short_open_res *= res_df['short_upper_touch_idx_{}{}{}'.format(p1_itv1, p1_period1, p1_period2)].to_numpy() > res_df['short_lower_touch_idx_{}{}{}'.format(p1_itv1, p1_period1, p1_period2)].to_numpy()\n","        # long_open_res *= res_df['long_lower_touch_idx_{}{}{}'.format(p1_itv1, p1_period1, p1_period2)].to_numpy() > res_df['long_upper_touch_idx_{}{}{}'.format(p1_itv1, p1_period1, p1_period2)].to_numpy()\n","\n","        # # ------ base_3T cross ------ #\n","        # dc_base_3T = res_df['dc_base_3T'].to_numpy()\n","        # b1_close = res_df['close'].shift(1).to_numpy()\n","        # short_open_res *= (b1_close > dc_base_3T) & (dc_base_3T > close)\n","        # long_open_res *= (b1_close < dc_base_3T) & (dc_base_3T < close)\n","\n","        # # ------ lower_touch_line < base_5T (long) ------ #\n","        # dc_base_5T = res_df['dc_base_5T'].to_numpy()        \n","        # short_open_res *= res_df['short_upper_touch_line_{}{}{}'.format(p1_itv1, p1_period1, p1_period2)].to_numpy() > dc_base_5T\n","        # long_open_res *= res_df['long_lower_touch_line_{}{}{}'.format(p1_itv1, p1_period1, p1_period2)].to_numpy() < dc_base_5T      \n","\n","        # ------ ppr ------ #\n","        pumping_ratio(res_df, config, p1_itv1, p1_period1, p1_period2)              \n","        \n","        # ------ wave_point ------ #\n","        short_open_res *= res_df['short_wave_point_{}{}{}'.format(p1_itv1, p1_period1, p1_period2)].to_numpy().astype(bool)\n","        long_open_res *= res_df['long_wave_point_{}{}{}'.format(p1_itv1, p1_period1, p1_period2)].to_numpy().astype(bool)\n","\n","        if show_detail:\n","          sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","          sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))\n","\n","    res_df['short_open_{}'.format(strat_version)] = short_open_res\n","    res_df['long_open_{}'.format(strat_version)] = long_open_res\n","\n","    # ------------------ tr_set ------------------ #\n","    # ------------ tpep ------------ #\n","    tpg = config.tr_set.tp_gap\n","    res_df['short_tp_{}'.format(strat_version)] = short_tp_1_ - short_tp_gap_ * tpg\n","    res_df['long_tp_{}'.format(strat_version)] = long_tp_1_ + long_tp_gap_ * tpg\n","\n","    # ------ limit_ep ------ #\n","    if config.ep_set.entry_type == \"LIMIT\":\n","        epg = config.tr_set.ep_gap\n","        res_df['short_ep_{}'.format(strat_version)] = short_epout_0_ + short_epout_gap_ * epg\n","        res_df['long_ep_{}'.format(strat_version)] = long_epout_0_ - long_epout_gap_ * epg\n","\n","    # ------ market_ep ------ #\n","    else:\n","        res_df['short_ep_{}'.format(strat_version)] = res_df['close']\n","        res_df['long_ep_{}'.format(strat_version)] = res_df['close']\n","\n","    # ------------ out ------------ #\n","    outg = config.tr_set.out_gap\n","    res_df['short_out_{}'.format(strat_version)] = short_epout_0_ + short_epout_gap_ * outg\n","    res_df['long_out_{}'.format(strat_version)] = long_epout_0_ - long_epout_gap_ * outg\n","\n","    # ------------ point validation ------------ #\n","    short_tp_ = res_df['short_tp_{}'.format(strat_version)].to_numpy()\n","    short_ep_ = res_df['short_ep_{}'.format(strat_version)].to_numpy()\n","    short_out_ = res_df['short_out_{}'.format(strat_version)].to_numpy()\n","    short_open_res *= (short_tp_ < short_ep_) & (short_ep_ < short_out_)\n","    res_df['short_open_{}'.format(strat_version)] = short_open_res * (not config.pos_set.short_ban)\n","\n","    long_tp_ = res_df['long_tp_{}'.format(strat_version)].to_numpy()\n","    long_ep_ = res_df['long_ep_{}'.format(strat_version)].to_numpy()\n","    long_out_ = res_df['long_out_{}'.format(strat_version)].to_numpy()\n","    long_open_res *= (long_tp_ > long_ep_) & (long_ep_ > long_out_)\n","    res_df['long_open_{}'.format(strat_version)] = long_open_res * (not config.pos_set.long_ban)\n","\n","    if show_detail:\n","      sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","      sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))\n","\n","    # ------ tr ------ #\n","    res_df['short_tr_{}'.format(strat_version)] = abs(\n","        (short_ep_ / short_tp_ - config.trader_set.limit_fee - 1) / (short_ep_ / short_out_ - config.trader_set.market_fee - 1))\n","    res_df['long_tr_{}'.format(strat_version)] = abs(\n","        (long_tp_ / long_ep_ - config.trader_set.limit_fee - 1) / (long_out_ / long_ep_ - config.trader_set.market_fee - 1))\n","\n","    # ------ zoned_ep ------ #\n","    if config.tr_set.c_ep_gap != \"None\":\n","        # res_df['short_ep_org_{}'.format(strat_version)] = res_df['short_ep_{}'.format(strat_version)].copy()\n","        # res_df['long_ep_org_{}'.format(strat_version)] = res_df['long_ep_{}'.format(strat_version)].copy()\n","        res_df['short_ep2_{}'.format(strat_version)] = short_epout_1_ + short_epout_gap_ * config.tr_set.c_ep_gap\n","        res_df['long_ep2_{}'.format(strat_version)] = long_epout_1_ - long_epout_gap_ * config.tr_set.c_ep_gap\n","\n","    # ------ zoned_out ------ #\n","    if config.tr_set.t_out_gap != \"None\":\n","        # res_df['short_out_org_{}'.format(strat_version)] = res_df['short_out_{}'.format(strat_version)].copy()\n","        # res_df['long_out_org_{}'.format(strat_version)] = res_df['long_out_{}'.format(strat_version)].copy()\n","        res_df['short_out2_{}'.format(strat_version)] = res_df['short_epout_0_{}'.format(strat_version)] + res_df[\n","            'short_epout_gap_{}'.format(strat_version)] * config.tr_set.t_out_gap\n","        res_df['long_out2_{}'.format(strat_version)] = res_df['long_epout_0_{}'.format(strat_version)] - res_df[\n","            'long_epout_gap_{}'.format(strat_version)] * config.tr_set.t_out_gap\n","\n","    # ------------ bias ------------ #  Todo - 추후, bias_set 독립시키는게 좋지 않을까\n","    bias_info_tick = config.tr_set.bias_info_tick\n","    # ------ bias_info can use future_data ------ #\n","    # res_df['short_bias_info_{}'.format(strat_version)] = res_df['dc_lower_T'].shift(-bias_info_tick)  # open / ep_tick 으로부터 bias_info_tick 만큼\n","    # res_df['long_bias_info_{}'.format(strat_version)] = res_df['dc_upper_T'].shift(-bias_info_tick)\n","    res_df['short_bias_info_{}'.format(strat_version)] = res_df['low'].rolling(bias_info_tick).min().shift(-bias_info_tick)\n","    res_df['long_bias_info_{}'.format(strat_version)] = res_df['high'].rolling(bias_info_tick).max().shift(-bias_info_tick)\n","\n","    # bias_thresh 는 결국 tp 가 될 것\n","    res_df['short_bias_thresh_{}'.format(strat_version)] = res_df['short_tp_{}'.format(strat_version)]\n","    res_df['long_bias_thresh_{}'.format(strat_version)] = res_df['long_tp_{}'.format(strat_version)]\n","    # res_df['short_bias_thresh_{}'.format(strat_version)] = res_df['dc_lower_T'] - res_df['short_tp_gap_{}'.format(strat_version)] * config.tr_set.bias_gap\n","    # res_df['long_bias_thresh_{}'.format(strat_version)] = res_df['dc_upper_T'] + res_df['long_tp_gap_{}'.format(strat_version)] * config.tr_set.bias_gap\n","\n","    return res_df\n"]},{"cell_type":"markdown","metadata":{"id":"HKdUKKl-483N"},"source":["### utils_public"]},{"cell_type":"code","execution_count":90,"metadata":{"id":"nzOYWA2kqZ0d","executionInfo":{"status":"ok","timestamp":1650416891381,"user_tz":-540,"elapsed":3262,"user":{"displayName":"7th June","userId":"08178289703395036410"}}},"outputs":[],"source":["from funcs.funcs_indicator import *\n","from funcs.funcs_trader import *\n","import logging\n","from ast import literal_eval\n","\n","pd.set_option('mode.chained_assignment',  None)\n","sys_log = logging.getLogger()\n","\n","\n","class OrderSide:\n","    BUY = \"BUY\"\n","    SELL = \"SELL\"\n","    INVALID = None\n","\n","\n","def lvrg_set(res_df, config, open_side, ep_, out_, fee, limit_leverage=50):\n","    strat_version = config.strat_version\n","    if not pd.isnull(out_) and not config.lvrg_set.static_lvrg:\n","        if strat_version in ['v3']:\n","            if open_side == OrderSide.SELL:\n","                loss = out_ / ep_\n","            else:\n","                loss = ep_ / out_\n","        else:  # 이 phase 가 정석, 윗 phase 는 결과가 수익 극대화라 사용함\n","            if open_side == OrderSide.SELL:\n","                loss = ep_ / out_\n","            else:\n","                loss = out_ / ep_\n","\n","        config.lvrg_set.leverage = config.lvrg_set.target_pct / abs(loss - 1 - (fee + config.trader_set.market_fee))\n","\n","    # ------------ leverage rejection ------------ #\n","    # 감당하기 힘든 fluc. 의 경우 진입하지 않음 - dynamic_lvrg 사용 경우\n","    if config.lvrg_set.leverage < 1 and config.lvrg_set.lvrg_rejection:\n","        # if config.lvrg_set.leverage >= 1 and config.lvrg_set.lvrg_rejection:\n","        return None\n","\n","    if not config.lvrg_set.allow_float:\n","        config.lvrg_set.leverage = int(config.lvrg_set.leverage)\n","\n","    config.lvrg_set.leverage = min(limit_leverage, max(config.lvrg_set.leverage, 1))\n","\n","    return config.lvrg_set.leverage\n","\n","\n","def sync_check(df_, config, order_side=\"OPEN\", row_slice=True):\n","    try:\n","        make_itv_list = [m_itv.replace('m', 'T') for m_itv in literal_eval(config.trader_set.itv_list)]\n","        row_list = literal_eval(config.trader_set.row_list)\n","        rec_row_list = literal_eval(config.trader_set.rec_row_list)\n","        offset_list = literal_eval(config.trader_set.offset_list)\n","\n","        assert len(make_itv_list) == len(offset_list), \"length of itv & offset_list should be equal\"\n","        htf_df_list = [to_htf(df_, itv_=itv_, offset=offset_) for itv_idx, (itv_, offset_)\n","                       in enumerate(zip(make_itv_list, offset_list)) if itv_idx != 0]  #\n","        htf_df_list.insert(0, df_)\n","\n","        # for htf_df_ in htf_df_list:\n","        #     print(htf_df_.tail())\n","\n","        #       Todo        #\n","        #        1. row_list calc.\n","        #           a. indi. 를 만들기 위한 최소 period 가 존재하고, 그 indi. 를 사용한 lb_period 가 존재함\n","        #           b. => default_period + lb_period\n","        #               i. from sync_check, public_indi, ep_point2, ep_dur 의 tf 별 max lb_period check\n","        #                   1. default_period + max lb_period check\n","        #                       a. 현재까지 lb_period_list\n","        #                           h_prev_idx (open / close) 60\n","        #                           dc_period 135\n","        #                           zone_dc_period 135\n","\n","        # --------- slicing (in trader phase only) --------- #\n","        #               --> latency 영향도가 높은 곳은 이곳\n","        if row_slice:  # recursive 가 아닌 indi. 의 latency 를 고려한 slicing\n","            df, df_3T, df_5T, df_15T, df_30T, df_H, df_4H = [df_s.iloc[-row_list[row_idx]:].copy() for row_idx, df_s in enumerate(htf_df_list)]\n","            rec_df, rec_df_3T, rec_df_5T, rec_df_15T, rec_df_30T, rec_df_H, rec_df_4H = [df_s.iloc[-rec_row_list[row_idx]:].copy() for row_idx, df_s\n","                                                                                         in\n","                                                                                         enumerate(htf_df_list)]\n","        else:\n","            df, df_3T, df_5T, df_15T, df_30T, df_H, df_4H = htf_df_list\n","            rec_df, rec_df_3T, rec_df_5T, rec_df_15T, rec_df_30T, rec_df_H, rec_df_4H = htf_df_list\n","\n","        # --------- add indi. --------- #\n","\n","        #        1. 필요한 indi. 는 enlist_epouttp & mr_check 보면서 삽입\n","        #        2. min use_rows 계산을 위해서, tf 별로 gathering 함        #\n","        # start_0 = time.time()\n","\n","        # ------ T ------ #\n","        # df = dc_line(df, None, 'T', dc_period=20)\n","        # df = bb_line(df, None, 'T')\n","        #\n","        # ------ 3T ------ #\n","        # df = dc_line(df, df_3T, '3T')\n","\n","        # ------ 5T ------ #\n","        df = dc_line(df, df_5T, '5T')\n","        df = bb_line(df, df_5T, '5T')\n","        #\n","        # ------ 15T ------ #\n","        df = dc_line(df, df_15T, '15T')\n","        df = bb_line(df, df_15T, '15T')\n","        #\n","        # ------ 30T ------ #\n","        # df = bb_line(df, df_30T, '30T')\n","        #\n","        # ------ H ------ #\n","        # df = dc_line(df, df_H, 'H')\n","\n","        # ------ 4H ------ #\n","        # df = bb_line(df, df_4H, '4H')\n","\n","        # rec_df['rsi_1m'] = rsi(rec_df, 14)  # Todo - recursive, 250 period\n","        # df = df.join(to_lower_tf_v2(df, rec_df.iloc[:, [-1]], [-1], backing_i=0), how='inner')  # <-- join same_tf manual\n","        #\n","        # if order_side in [\"OPEN\"]:\n","        #     rec_df_5T['ema_5T'] = ema(rec_df_5T['close'], 195)  # Todo - recursive, 1100 period (5T)\n","        #     df = df.join(to_lower_tf_v2(df, rec_df_5T, [-1]), how='inner')\n","\n","    except Exception as e:\n","        sys_log.error(\"error in sync_check :\", e)\n","    else:\n","        return df\n","\n","\n","def public_indi(res_df, config, np_timeidx, order_side=\"OPEN\"):\n","    strat_version = config.strat_version\n","\n","    res_df = wave_range_v8(res_df, config.loc_set.point.p1_period1, config.loc_set.point.p1_period2, ltf_df=None, wave_min_bars=config.tr_set.wave_min, wave_max_bars=config.tr_set.wave_max)\n","    if config.loc_set.point.p2_itv1 != \"None\":\n","        res_df = wave_range_v8(res_df, config.loc_set.point.p2_period1, config.loc_set.point.p2_period2, ltf_df=None)\n","\n","    res_df = dc_level(res_df, '5T', 1)\n","    res_df = bb_level(res_df, '5T', 1)\n","\n","    # res_df = st_level(res_df, '5T', 1)\n","\n","    # res_df = dc_level(res_df, '15T', 1)\n","    # res_df = bb_level(res_df, '15T', 1)\n","    # res_df = dtk_plot(res_df, dtk_itv2='15T', hhtf_entry=15, use_dtk_line=config.loc_set.zone.use_dtk_line, np_timeidx=np_timeidx)\n","\n","    # res_df = st_level(res_df, '15T', 1)\n","\n","    # res_df = dc_level(res_df, '30T', 1)\n","    # res_df = bb_level(res_df, '30T', 1)\n","    # res_df = st_level(res_df, '30T', 1)\n","\n","    # res_df = bb_level(res_df, 'H', 1)\n","\n","    # res_df = bb_level(res_df, '4H', 1)\n","\n","    # res_df['dc_upper_v2'.format(strat_version)] = res_df['high'].rolling(config.loc_set.zone.dc_period).max()   # Todo, consider dc_period\n","    # res_df['dc_lower_v2'.format(strat_version)] = res_df['low'].rolling(config.loc_set.zone.dc_period).min()\n","\n","    # res_df['zone_dc_upper_v2'.format(strat_version)] = res_df['high'].rolling(config.loc_set.zone.zone_dc_period).max()   # Todo, consider zone_dc_period\n","    # res_df['zone_dc_lower_v2'.format(strat_version)] = res_df['low'].rolling(config.loc_set.zone.zone_dc_period).min()\n","\n","    if order_side in [\"OPEN\"]:\n","        h_candle_v3(res_df, '5T')\n","        h_candle_v3(res_df, '15T')\n","        h_candle_v3(res_df, 'H')\n","\n","        # candle_score_v3(res_df, 'T', unsigned=False)\n","        candle_score_v3(res_df, config.loc_set.point.exp_itv, unsigned=False)\n","\n","    #     temp indi.    #\n","    # res_df[\"ma30_1m\"] = res_df['close'].rolling(30).mean()\n","    # res_df[\"ma60_1m\"] = res_df['close'].rolling(60).mean()\n","    # res_df = dtk_plot(res_df, dtk_itv2='15T', hhtf_entry=15, use_dtk_line=config.loc_set.zone.use_dtk_line, np_timeidx=np_timeidx)\n","\n","    return res_df\n","\n","\n","def ep_out_v0(res_df, config, op_idx, e_j, tp_j, np_datas, open_side):\n","    h, l = np_datas\n","    strat_version = config.strat_version\n","    ep_out = 0\n","\n","    if config.loc_set.zone.ep_out_tick != \"None\":\n","        if e_j - op_idx >= config.loc_set.zone.ep_out_tick:\n","            ep_out = 1\n","\n","    if config.loc_set.zone.ei_k != \"None\":\n","        if open_side == OrderSide.SELL:\n","            short_tp_1_ = res_df['short_tp_1_{}'.format(strat_version)].to_numpy()  # id 에 따라 dynamic 변수라 이곳에서 numpy 화 진행\n","            short_tp_gap_ = res_df['short_tp_gap_{}'.format(strat_version)].to_numpy()\n","            if l[e_j] <= short_tp_1_[tp_j] - short_tp_gap_[tp_j] * config.loc_set.zone.ei_k:\n","                ep_out = 1\n","        else:\n","            long_tp_1_ = res_df['long_tp_1_{}'.format(strat_version)].to_numpy()  # iloc 이 빠를까, to_numpy() 가 빠를까  # 3.94 ms --> 5.34 ms (iloc)\n","            long_tp_gap_ = res_df['long_tp_gap_{}'.format(strat_version)].to_numpy()\n","            if h[e_j] >= long_tp_1_[tp_j] + long_tp_gap_[tp_j] * config.loc_set.zone.ei_k:\n","                ep_out = 1\n","\n","    return ep_out\n","\n","\n","def ep_out(res_df, config, op_idx, e_j, tp_j, np_datas, open_side):\n","    h, l = np_datas\n","    strat_version = config.strat_version\n","    ep_out = 0\n","\n","    if config.loc_set.zone.ep_out_tick != \"None\":\n","        if e_j - op_idx >= config.loc_set.zone.ep_out_tick:\n","            ep_out = 1\n","\n","    if config.loc_set.zone.ei_k != \"None\":\n","        if open_side == OrderSide.SELL:\n","            short_tp_ = res_df['short_tp_{}'.format(strat_version)].to_numpy()  # id 에 따라 dynamic 변수라 이곳에서 numpy 화 진행\n","            short_tp_gap_ = res_df['short_tp_gap_{}'.format(strat_version)].to_numpy()\n","            if l[e_j] <= short_tp_[tp_j] + short_tp_gap_[tp_j] * config.loc_set.zone.ei_k:\n","                ep_out = 1\n","        else:\n","            long_tp_ = res_df['long_tp_{}'.format(strat_version)].to_numpy()  # iloc 이 빠를까, to_numpy() 가 빠를까  # 3.94 ms --> 5.34 ms (iloc)\n","            long_tp_gap_ = res_df['long_tp_gap_{}'.format(strat_version)].to_numpy()\n","            if h[e_j] >= long_tp_[tp_j] - long_tp_gap_[tp_j] * config.loc_set.zone.ei_k:\n","                ep_out = 1\n","\n","    return ep_out\n","\n","\n","def ep_out_v2(res_df, config, op_idx, e_j, tp_j, np_datas, open_side):\n","    h, l = np_datas\n","    strat_version = config.strat_version\n","    ep_out = 0\n","\n","    if config.loc_set.zone.ep_out_tick != \"None\":\n","        if e_j - op_idx >= config.loc_set.zone.ep_out_tick:\n","            ep_out = 1\n","\n","    if config.loc_set.zone.ei_k != \"None\":\n","        if open_side == OrderSide.SELL:\n","            short_tp_1_ = res_df['short_tp_1_{}'.format(strat_version)].to_numpy()  # id 에 따라 dynamic 변수라 이곳에서 numpy 화 진행\n","            short_tp_0_ = res_df['short_tp_0_{}'.format(strat_version)].to_numpy()\n","            short_tp_gap_ = res_df['short_tp_gap_{}'.format(strat_version)].to_numpy()\n","            if l[e_j] <= short_tp_1_[tp_j] + short_tp_gap_[tp_j] * config.loc_set.zone.ei_k or h[e_j] >= short_tp_0_[tp_j] - short_tp_gap_[\n","                tp_j] * config.loc_set.zone.ei_k:\n","                ep_out = 1\n","        else:\n","            long_tp_1_ = res_df['long_tp_1_{}'.format(strat_version)].to_numpy()\n","            long_tp_0_ = res_df['long_tp_0_{}'.format(strat_version)].to_numpy()\n","            long_tp_gap_ = res_df['long_tp_gap_{}'.format(strat_version)].to_numpy()\n","            if h[e_j] >= long_tp_1_[tp_j] - long_tp_gap_[tp_j] * config.loc_set.zone.ei_k or l[e_j] <= long_tp_0_[tp_j] + long_tp_gap_[\n","                tp_j] * config.loc_set.zone.ei_k:\n","                ep_out = 1\n","\n","    return ep_out\n","\n","\n","def ep_loc_point2_v2(res_df, config, i, out_j, side=OrderSide.SELL):\n","    allow_ep_in = 1\n","    if config.strat_version in ['v5_2']:\n","        if side == OrderSide.SELL:\n","            dc_upper_T = res_df['dc_upper_T'].to_numpy()\n","            dc_upper_15T = res_df['dc_upper_15T'].to_numpy()\n","            allow_ep_in *= (dc_upper_T[i - 1] <= dc_upper_15T[i]) & \\\n","                           (dc_upper_15T[i - 1] != dc_upper_15T[i])\n","        else:\n","            dc_lower_T = res_df['dc_lower_T'].to_numpy()\n","            dc_lower_15T = res_df['dc_lower_15T'].to_numpy()\n","            allow_ep_in *= (dc_lower_T[i - 1] >= dc_lower_15T[i]) & \\\n","                           (dc_lower_15T[i - 1] != dc_lower_15T[i])\n","\n","    if config.strat_version in ['v3_4']:\n","        wick_score_list = literal_eval(config.ep_set.point2.wick_score_list)\n","        wick_scores = [res_df['wick_score_{}'.format(s_itv)].to_numpy() for s_itv in literal_eval(config.ep_set.point2.score_itv_list)]\n","        close = res_df['close'].to_numpy()\n","        if side == OrderSide.SELL:\n","            sup_T = res_df['sup_T'].to_numpy()\n","            allow_ep_in *= close[i] < sup_T[i - 1]\n","            if len(wick_score_list) != 0:\n","                allow_ep_in *= wick_scores[0][i] < -wick_score_list[0]\n","        else:\n","            resi_T = res_df['resi_T'].to_numpy()\n","            allow_ep_in *= close[i] > resi_T[i - 1]\n","            if len(wick_score_list) != 0:\n","                allow_ep_in *= wick_scores[0][i] > wick_score_list[0]\n","\n","    if allow_ep_in:\n","        out_j = i\n","    return allow_ep_in, out_j\n","\n","\n","# vectorized calc.\n","# multi-stem 에 따라 dynamic vars.가 입력되기 때문에 class 내부 vars. 로 종속시키지 않음\n","def ep_loc_v3(res_df, config, np_timeidx, show_detail=True, ep_loc_side=OrderSide.SELL):\n","    # ------- param init ------- #\n","    strat_version = config.strat_version\n","    c_i = config.trader_set.complete_index\n","    len_df = len(res_df)\n","    mr_res = np.ones(len_df)\n","    zone_arr = np.full(len_df, 'n')\n","\n","    # ------ process 한번에 처리해서 param_check 만 ver. 별로 하면 될 것 ------ #\n","    #     => public_indi() 가 될 것\n","    #     1. 사용한 param 정보와 matching 된 data 병렬로 나열 logging 될 것\n","    tp_fee, out_fee = calc_tp_out_fee_v2(config)\n","\n","    # ------------ candle_score ------------ #\n","    wick_score_list = literal_eval(config.loc_set.point.wick_score_list)\n","    if len(wick_score_list) != 0:\n","        score_itv_list = literal_eval(config.loc_set.point.score_itv_list)\n","        # ------ candle_score_v0 (1m initial tick 기준임) ------ #  Todo - higher timeframe 경우 back_data 사용해야함\n","        for wick_score_, score_itv_ in zip(wick_score_list, score_itv_list):\n","            wick_score = res_df['wick_score_{}'.format(score_itv_)].to_numpy()\n","            if ep_loc_side == OrderSide.SELL:\n","                mr_res *= wick_score <= -wick_score_\n","                if show_detail:\n","                    sys_log.warning(\"wick_score <= -wick_score_ : {:.5f} {:.5f} ({})\".format(wick_score[c_i], -wick_score_, mr_res[c_i]))\n","            else:\n","                mr_res *= wick_score >= wick_score_\n","                if show_detail:\n","                    sys_log.warning(\"wick_score >= wick_score_ : {:.5f} {:.5f} ({})\".format(wick_score[c_i], wick_score_, mr_res[c_i]))\n","\n","    # -------------- tr_thresh -------------- #\n","    if config.loc_set.zone.short_tr_thresh != \"None\":\n","        if ep_loc_side == OrderSide.SELL:\n","            short_tr_ = res_df['short_tr_{}'.format(strat_version)].to_numpy()\n","            mr_res *= short_tr_ >= config.loc_set.zone.short_tr_thresh\n","            mr_res *= short_tr_ <= config.loc_set.zone.short_tr_thresh + 0.1\n","            if show_detail:\n","                sys_log.warning(\n","                    \"short_tr_ <= short_tr_thresh : {:.5f} {:.5f} ({})\".format(short_tr_[c_i], config.loc_set.zone.short_tr_thresh, mr_res[c_i]))\n","        else:\n","            long_tr_ = res_df['long_tr_{}'.format(strat_version)].to_numpy()\n","            mr_res *= long_tr_ >= config.loc_set.zone.long_tr_thresh\n","            mr_res *= long_tr_ <= config.loc_set.zone.long_tr_thresh + 0.1\n","            if show_detail:\n","                sys_log.warning(\n","                    \"long_tr_ <= long_tr_thresh : {:.5f} {:.5f} ({})\".format(long_tr_[c_i], config.loc_set.zone.long_tr_thresh, mr_res[c_i]))\n","\n","    # -------------- spread - independent to tr_set -------------- #\n","    if config.loc_set.zone.short_spread != \"None\":\n","        if strat_version in ['v3']:\n","            if ep_loc_side == OrderSide.SELL:\n","                bb_base_5T = res_df['bb_base_5T'].to_numpy()  # to_numpy() 는 ep_loc 에서 진행됨\n","                bb_lower_5T = res_df['bb_lower_5T'].to_numpy()\n","                short_spread = (bb_base_5T - bb_lower_5T - tp_fee * bb_base_5T) / (bb_base_5T - bb_lower_5T + out_fee * bb_base_5T)\n","                mr_res *= short_spread >= config.loc_set.zone.short_spread\n","                if show_detail:\n","                    sys_log.warning(\n","                        \"short_spread >= config.loc_set.zone.short_spread : {:.5f} {:.5f} ({})\".format(short_spread[c_i], config.loc_set.zone.short_spread, mr_res[c_i]))\n","            else:\n","                bb_upper_5T = res_df['bb_upper_5T'].to_numpy()\n","                dc_lower_5T = res_df['dc_lower_5T'].to_numpy()\n","                # mr_res *= (bb_base_5T - dc_lower_5T - tp_fee * bb_upper_5T) / (bb_base_5T - dc_lower_5T + out_fee * bb_base_5T) >= config.loc_set.zone.long_spread\n","                long_spread = (bb_upper_5T - dc_lower_5T - tp_fee * bb_upper_5T) / (bb_upper_5T - dc_lower_5T + out_fee * bb_upper_5T)\n","                mr_res *= long_spread >= config.loc_set.zone.long_spread\n","                if show_detail:\n","                    sys_log.warning(\n","                        \"long_spread >= config.loc_set.zone.long_spread : {:.5f} {:.5f} ({})\".format(long_spread[c_i], config.loc_set.zone.long_spread, mr_res[c_i]))\n","                    \n","    # ------------ rtc_zone  ------------ #\n","    # ------ dtk ------ #\n","    if config.loc_set.zone.dt_k != \"None\":\n","        # ------ dc_v2 ------ #\n","        dc_lower_v2 = res_df['dc_lower_v2'.format(strat_version)].to_numpy()\n","        short_dtk_1_ = res_df['short_dtk_1_{}'.format(strat_version)].to_numpy() - \\\n","                       res_df['short_dtk_gap_{}'.format(strat_version)].to_numpy() * config.loc_set.zone.dt_k\n","        dc_upper_v2 = res_df['dc_upper_v2'.format(strat_version)].to_numpy()\n","        long_dtk_1_ = res_df['long_dtk_1_{}'.format(strat_version)].to_numpy() + \\\n","                      res_df['long_dtk_gap_{}'.format(strat_version)].to_numpy() * config.loc_set.zone.dt_k\n","        if ep_loc_side == OrderSide.SELL:\n","            mr_res *= dc_lower_v2 >= short_dtk_1_\n","            if show_detail:\n","                sys_log.warning(\n","                    \"dc_lower_v2 >= short_dtk_1_ : {:.5f} {:.5f} ({})\".format(dc_lower_v2[c_i], short_dtk_1_[c_i], mr_res[c_i]))\n","        else:\n","            mr_res *= dc_upper_v2 <= long_dtk_1_\n","            if show_detail:\n","                sys_log.warning(\n","                    \"dc_upper_v2 <= long_dtk_1_ : {:.5f} {:.5f} ({})\".format(dc_upper_v2[c_i], long_dtk_1_[c_i], mr_res[c_i]))\n","\n","    # ------------ ratios ------------ #\n","    # ------ wick_body_ratio ------ #\n","    if config.loc_set.zone.wbr != \"None\":\n","        wave_body_ratio = res_df['wave_body_ratio'].to_numpy()\n","        mr_res *= wave_body_ratio >= config.loc_set.zone.wbr\n","        if show_detail:\n","            sys_log.warning(\n","                \"wave_body_ratio >= config.loc_set.zone.wbr : {:.5f} {:.5f} ({})\".format(wave_body_ratio[c_i], config.loc_set.zone.wbr, mr_res[c_i]))\n","            \n","    # ------ body_rel_ratio ------ #\n","    if config.loc_set.zone.brr != \"None\":\n","        body_rel_ratio_ = res_df['body_rel_ratio_{}'.format(config.loc_set.point.tf_entry)].to_numpy()\n","        mr_res *= body_rel_ratio_ >= config.loc_set.zone.brr\n","\n","    # ------ pumping_ratio ------ #\n","    if config.loc_set.zone.ppr != \"None\":\n","      if ep_loc_side == OrderSide.SELL:\n","        short_ppr_ = res_df['short_ppr_{}'.format(strat_version)].to_numpy()\n","        mr_res *= short_ppr_ >= config.loc_set.zone.ppr\n","        if show_detail:\n","            sys_log.warning(\"short_ppr_ >= config.loc_set.zone.ppr : {:.5f} {:.5f} ({})\".format(short_ppr_[c_i], config.loc_set.zone.ppr, mr_res[c_i]))\n","      else:\n","        long_ppr_ = res_df['long_ppr_{}'.format(strat_version)].to_numpy()\n","        mr_res *= long_ppr_ >= config.loc_set.zone.ppr\n","        if show_detail:\n","            sys_log.warning(\"long_ppr_ >= config.loc_set.zone.ppr : {:.5f} {:.5f} ({})\".format(long_ppr_[c_i], config.loc_set.zone.ppr, mr_res[c_i]))\n","\n","    # ------------ zone rejection  ------------ #\n","    # config 로 통제할 수 없는 rejection 은 strat_version 으로 조건문을 나눔 (lvrg_set 과 동일)\n","    if config.loc_set.zone.zone_rejection:\n","\n","        # ------------------ wave_biaser, sr_confirmer ------------------ #\n","        if strat_version in ['3_9']:     \n","          itv, period1, period2 = config.loc_set.point.p1_itv1, config.loc_set.point.p1_period1, config.loc_set.point.p1_period2          \n","\n","          if ep_loc_side == OrderSide.SELL:\n","            short_wave_high_ = res_df['short_wave_high_{}{}{}'.format(itv, period1, period2)]\n","            bb_lower_5T_amax = get_line(res_df['short_wave_high_idx_{}{}{}'.format(itv, period1, period2)].to_numpy(), res_df['bb_lower_5T'].to_numpy())\n","            mr_res *= short_wave_high_ <= bb_lower_5T_amax\n","            if show_detail:\n","                sys_log.warning(\"short_wave_high_ <= bb_lower_5T_amax : {:.5f} {:.5f} ({})\".format(short_wave_high_[c_i], bb_lower_5T_amax[c_i], mr_res[c_i]))\n","          else:\n","            long_wave_low_ = res_df['long_wave_low_{}{}{}'.format(itv, period1, period2)]\n","            bb_upper_5T_amax = get_line(res_df['long_wave_low_idx_{}{}{}'.format(itv, period1, period2)].to_numpy(), res_df['bb_upper_5T'].to_numpy())\n","            mr_res *= long_wave_low_ >= bb_upper_5T_amax\n","            if show_detail:\n","                sys_log.warning(\"long_wave_low_ >= bb_upper_5T_amax : {:.5f} {:.5f} ({})\".format(long_wave_low_[c_i], bb_upper_5T_amax[c_i], mr_res[c_i]))\n","\n","\n","        if strat_version in ['4_3', '3_5', '3_51']:\n","            dc_base_3T = res_df['dc_base_3T'].to_numpy()\n","            b1_dc_base_3T = res_df['dc_base_3T'].shift(3).to_numpy()\n","            dc_base_5T = res_df['dc_base_5T'].to_numpy()\n","            dc_base_15T = res_df['dc_base_15T'].to_numpy()\n","            dc_base_30T = res_df['dc_base_30T'].to_numpy()\n","            dc_base_H = res_df['dc_base_H'].to_numpy()\n","            dc_base_4H = res_df['dc_base_4H'].to_numpy()\n","            dc_base_D = res_df['dc_base_D'].to_numpy()\n","            # wave_base_ = res_df['wave_base_{}'.format(config.loc_set.point.tp_itv0)].to_numpy()\n","\n","            itv, period1, period2 = config.loc_set.point.p1_itv1, config.loc_set.point.p1_period1, config.loc_set.point.p1_period2\n","            if ep_loc_side == OrderSide.SELL:\n","                # ------ short_base_ <= dc_base_3T ------ #\n","                short_base_ = res_df['short_base_{}{}{}'.format(itv, period1, period2)].to_numpy()\n","                mr_res *= short_base_ <= dc_base_3T\n","                if show_detail:\n","                    sys_log.warning(\"short_base_ <= dc_base_3T : {:.5f} {:.5f} ({})\".format(short_base_[c_i], dc_base_3T[c_i], mr_res[c_i]))\n","\n","                # ------ reject csd ------ #\n","                # dc_upper_ = res_df['dc_upper_{}{}'.format(itv, period1)].to_numpy()\n","                # mr_res *= dc_upper_ <= dc_base_3T\n","                # if show_detail:\n","                #     sys_log.warning(\"dc_upper_ <= dc_base_3T : {:.5f} {:.5f} ({})\".format(dc_upper_[c_i], dc_base_3T[c_i], mr_res[c_i]))\n","\n","                # Todo, 부호 조심\n","                # dc_upper2_ = res_df['dc_upper_{}{}'.format(itv, period2)].to_numpy()\n","                # mr_res *= dc_upper2_ >= dc_base_H\n","                # if show_detail:\n","                #     sys_log.warning(\"dc_upper2_ >= dc_base_H : {:.5f} {:.5f} ({})\".format(dc_upper2_[c_i], dc_base_H[c_i], mr_res[c_i]))  \n","\n","                # long 과 동일한 dur.\n","                dc_lower2_ = res_df['dc_lower_{}{}'.format(itv, period2)].to_numpy()\n","                mr_res *= dc_lower2_ >= dc_base_H\n","                if show_detail:\n","                    sys_log.warning(\"dc_lower2_ >= dc_base_H : {:.5f} {:.5f} ({})\".format(dc_lower2_[c_i], dc_base_H[c_i], mr_res[c_i]))  \n","\n","                # ------ consecutive base ascender ------ #\n","                # ------ 1. roll_min ------ #\n","                dc_base_3T_rollmin = res_df['dc_base_3T'].rolling(config.loc_set.zone.base_roll_period).min().to_numpy()\n","                mr_res *= dc_base_3T_rollmin == dc_base_3T\n","                if show_detail:\n","                    sys_log.warning(\n","                        \"dc_base_3T_rollmin == dc_base_3T : {:.5f} {:.5f} ({})\".format(dc_base_3T_rollmin[c_i], dc_base_3T[c_i], mr_res[c_i]))\n","            else:\n","                # ------ long_base >= dc_base_3T ------ #\n","                long_base_ = res_df['long_base_{}{}{}'.format(itv, period1, period2)].to_numpy()\n","                mr_res *= long_base_ >= dc_base_3T\n","                if show_detail:\n","                    sys_log.warning(\"long_base_ >= dc_base_3T : {:.5f} {:.5f} ({})\".format(long_base_[c_i], dc_base_3T[c_i], mr_res[c_i]))\n","\n","                # ------ reject csd ------ #\n","                # dc_lower_ = res_df['dc_lower_{}{}'.format(itv, period1)].to_numpy()\n","                # mr_res *= dc_lower_ >= dc_base_3T\n","                # if show_detail:\n","                #     sys_log.warning(\"dc_lower_ >= dc_base_3T : {:.5f} {:.5f} ({})\".format(dc_lower_[c_i], dc_base_3T[c_i], mr_res[c_i]))\n","\n","                dc_lower2_ = res_df['dc_lower_{}{}'.format(itv, period2)].to_numpy()\n","                mr_res *= dc_lower2_ >= dc_base_H\n","                if show_detail:\n","                    sys_log.warning(\"dc_lower2_ >= dc_base_H : {:.5f} {:.5f} ({})\".format(dc_lower2_[c_i], dc_base_H[c_i], mr_res[c_i]))\n","\n","                # bb_lower_5T = res_df['bb_lower_5T'].to_numpy()\n","                # mr_res *= dc_lower2_ >= bb_lower_5T\n","                # if show_detail:\n","                #     sys_log.warning(\"dc_lower2_ >= bb_lower_5T : {:.5f} {:.5f} ({})\".format(dc_lower2_[c_i], bb_lower_5T[c_i], mr_res[c_i]))\n","\n","                # ------ alignment ------ #\n","                # mr_res *= (dc_base_3T > dc_base_5T) & (dc_base_5T > dc_base_15T) & (dc_base_15T > dc_base_30T)\n","\n","                # ------ consecutive base ascender ------ #\n","                # ------ 1. roll_max ------ #\n","                dc_base_3T_rollmax = res_df['dc_base_3T'].rolling(config.loc_set.zone.base_roll_period).max().to_numpy()\n","                mr_res *= dc_base_3T_rollmax == dc_base_3T\n","                if show_detail:\n","                    sys_log.warning(\n","                        \"dc_base_3T_rollmax == dc_base_3T : {:.5f} {:.5f} ({})\".format(dc_base_3T_rollmax[c_i], dc_base_3T[c_i], mr_res[c_i]))\n","\n","                # ------ 2. roll_max_v2 - ascender  ------ #\n","                # dc_base_3T_ascend = (res_df['dc_base_3T'] >= res_df['dc_base_3T'].shift(3)).rolling(config.loc_set.zone.base_roll_period).sum().to_numpy()\n","                # # mr_res *= dc_base_3T_ascend == config.loc_set.zone.base_roll_period\n","                # mr_res *= dc_base_3T_ascend != config.loc_set.zone.base_roll_period\n","                # if show_detail:\n","                #     sys_log.warning(\"dc_base_3T_ascend == config.loc_set.zone.base_roll_period : {:.5f} {:.5f} ({})\".format(dc_base_3T_ascend[c_i], config.loc_set.zone.base_roll_period, mr_res[c_i]))\n","\n","\n","\n","    # -------------- zoned tr_set - post_work -------------- #\n","    if config.tr_set.c_ep_gap != \"None\" or config.tr_set.t_out_gap != \"None\":\n","        #       by zone_dtk       #\n","        #         c_zone        #\n","        zone_dc_upper_v2_ = res_df['zone_dc_upper_v2'.format(strat_version)].to_numpy()\n","        long_dtk_plot_1 = res_df['long_dtk_plot_1'].to_numpy() + res_df['long_dtk_plot_gap'].to_numpy() * config.loc_set.zone.zone_dt_k\n","        zone_dc_lower_v2_ = res_df['zone_dc_lower_v2'.format(strat_version)].to_numpy()\n","        short_dtk_plot_1 = res_df['short_dtk_plot_1'].to_numpy() - res_df['short_dtk_plot_gap'].to_numpy() * config.loc_set.zone.zone_dt_k\n","        if ep_loc_side == OrderSide.SELL:\n","            zone_res = zone_dc_upper_v2_ > long_dtk_plot_1  # mr_res 와는 별개임\n","            pos = 'short'\n","        else:\n","            zone_res = zone_dc_lower_v2_ < short_dtk_plot_1\n","            pos = 'long'\n","\n","        # static 여부에 따른 vectorized adj. - dynamic 은 vectorize 불가\n","        if config.ep_set.static_ep and config.tr_set.c_ep_gap != \"None\":\n","            res_df['{}_ep_{}'.format(pos, strat_version)][zone_res] = res_df['{}_ep2_{}'.format(pos, strat_version)][zone_res]\n","        if config.out_set.static_out and config.tr_set.t_out_gap != \"None\":\n","            res_df['{}_out_{}'.format(pos, strat_version)][~zone_res] = res_df['{}_out2_{}'.format(pos, strat_version)][\n","                ~zone_res]  # t_zone 에 대한 out2 setting\n","        zone_arr = np.where(zone_res == 1, 'c', 't')\n","\n","    return mr_res, zone_arr  # mr_res 의 True idx 가 open signal"]},{"cell_type":"markdown","source":["#### ep_loc legacy"],"metadata":{"id":"EQ63Jwpvr7qA"}},{"cell_type":"code","source":["\n","            \n","    # ------ dc_over_body_ratio ------ #\n","    if config.loc_set.zone.dbr != \"None\":\n","      if ep_loc_side == OrderSide.SELL:\n","        dc_lower_body_ratio = res_df['dc_lower_body_ratio'].to_numpy()\n","        mr_res *= dc_lower_body_ratio >= config.loc_set.zone.dbr\n","        if show_detail:\n","            sys_log.warning(\n","                \"dc_lower_body_ratio >= config.loc_set.zone.dbr : {:.5f} {:.5f} ({})\".format(dc_lower_body_ratio[c_i], config.loc_set.zone.dbr, mr_res[c_i]))\n","      else:\n","        dc_upper_body_ratio = res_df['dc_upper_body_ratio'].to_numpy()\n","        mr_res *= dc_upper_body_ratio >= config.loc_set.zone.dbr\n","        if show_detail:\n","            sys_log.warning(\n","                \"dc_upper_body_ratio >= config.loc_set.zone.dbr : {:.5f} {:.5f} ({})\".format(dc_upper_body_ratio[c_i], config.loc_set.zone.dbr, mr_res[c_i]))\n","\n","\n","        # ------------------ swing_middle ------------------ #\n","        # ------------ 1. envelope ------------ #\n","\n","        # ------ a. dc ------ #\n","        # ep_loc check 기준 idx 가 entry 기준이라는 걸 명심\n","        if strat_version in ['v3_2']:\n","            hc_itv = '15T'\n","            dc_itv = '15T'\n","            shift_num = [0, to_itvnum(hc_itv)]\n","            div_res = [1, 0]\n","            for itv_num, res in zip(shift_num, div_res):\n","                close_ = res_df['close_{}'.format(hc_itv)].shift(itv_num).to_numpy()  # close_bar timein 사용하는 경우, 특수로 shift(0) 사용가능\n","                if ep_loc_side == OrderSide.SELL:\n","                    dc_lower_ = res_df['dc_lower_%s' % dc_itv].shift(itv_num).to_numpy()\n","                    mr_res *= (close_ < dc_lower_) == res\n","                else:\n","                    dc_upper_ = res_df['dc_upper_%s' % dc_itv].shift(itv_num).to_numpy()\n","                    mr_res *= (close_ > dc_upper_) == res\n","\n","        # ------------ 2. degree ------------ #\n","        # ------ a. norm_body_ratio ------ #\n","        if config.loc_set.zone.abs_ratio != \"None\":\n","            itv = config.loc_set.point.tf_entry\n","            abs_ratio_ = res_df['abs_ratio_{}'.format(itv)].to_numpy()\n","            mr_res *= abs_ratio_ >= config.loc_set.zone.abs_ratio\n","            # mr_res *= abs_ratio_ <= config.loc_set.zone.abs_ratio\n","\n","    # ------------ 2. imbalance_ratio ------------ #\n","    if config.loc_set.zone.ir != \"None\":\n","        itv = config.loc_set.point.tf_entry\n","        itv_num = to_itvnum(itv)\n","        if ep_loc_side == OrderSide.SELL:\n","            short_ir_ = res_df['short_ir_{}'.format(itv)].to_numpy()\n","            # short_ir_ = res_df['short_ir_{}'.format(itv)].shift(itv_num).to_numpy()\n","\n","            # mr_res *= short_ir_ >= config.loc_set.zone.ir     # greater\n","            mr_res *= short_ir_ <= config.loc_set.zone.ir  # lesser\n","            if show_detail:\n","                sys_log.warning(\n","                    \"short_ir_ <= config.loc_set.zone.ir : {:.5f} {:.5f} ({})\".format(short_ir_[c_i], config.loc_set.zone.ir, mr_res[c_i]))\n","        else:\n","            long_ir_ = res_df['long_ir_{}'.format(itv)].to_numpy()\n","            # long_ir_ = res_df['long_ir_{}'.format(itv)].shift(itv_num).to_numpy()\n","\n","            # mr_res *= long_ir_ >= config.loc_set.zone.ir\n","            mr_res *= long_ir_ <= config.loc_set.zone.ir\n","            if show_detail:\n","                sys_log.warning(\n","                    \"long_ir_ <= config.loc_set.zone.ir : {:.5f} {:.5f} ({})\".format(long_ir_[c_i], config.loc_set.zone.ir, mr_res[c_i]))\n","                \n","        # if strat_version in ['3_6']:\n","        #   itv, period1, period2 = config.loc_set.point.p1_itv0, config.loc_set.point.p1_period1, config.loc_set.point.p1_period2          \n","\n","        #   if ep_loc_side == OrderSide.SELL:\n","        #     high_5T = res_df['high_5T'].to_numpy()  # Todo, tf_entry - 1 open 기준이라 future_data 사용 가능\n","        #     short_base_ = res_df['short_base_{}{}{}'.format(itv, period1, period2)]\n","        #     mr_res *= high_5T < short_base_\n","        #     if show_detail:\n","        #         sys_log.warning(\n","        #             \"high_5T < short_base_ : {:.5f} {:.5f} ({})\".format(high_5T[c_i], short_base_[c_i], mr_res[c_i]))\n","        #   else:\n","        #     low_5T = res_df['low_5T'].to_numpy()  # Todo, tf_entry - 1 open 기준이라 future_data 사용 가능\n","        #     long_base_ = res_df['long_base_{}{}{}'.format(itv, period1, period2)]\n","        #     mr_res *= low_5T > long_base_\n","        #     if show_detail:\n","        #         sys_log.warning(\n","        #             \"low_5T > long_base_ : {:.5f} {:.5f} ({})\".format(low_5T[c_i], long_base_[c_i], mr_res[c_i]))'\n","        \n","        # ------ dc_base ------ #\n","        # if strat_version in ['4']:  # 'v3_3', 'v3_4',\n","        #   hc_itv = '5T'\n","        #   dc_itv = '5T'\n","        #   itv_num = to_itvnum(hc_itv)\n","        #   close_ = res_df['close_{}'.format(hc_itv)].shift(itv_num).to_numpy()   # 따라서 future_data 사용시, shifting 필요함\n","        #   if ep_loc_side == OrderSide.SELL:\n","        #     dc_lower_ = res_df['dc_lower_%s' % dc_itv].shift(itv_num).to_numpy()\n","        #     mr_res *= close_ < dc_lower_\n","        #   else:\n","        #     dc_upper_ = res_df['dc_upper_%s' % dc_itv].shift(itv_num).to_numpy()\n","        #     mr_res *= close_ > dc_upper_\n","\n","        # ------ ema ------ #\n","        # if strat_version in ['v5_2']: # 'v3'\n","        #   ema_5T = res_df['ema_5T'].to_numpy()\n","        #   if ep_loc_side == OrderSide.SELL:\n","        #     mr_res *= close < ema_5T\n","        #   else:\n","        #     mr_res *= close > ema_5T\n","        \n","        # ------ b. bb ------ #\n","        # close = res_df['close'].to_numpy()\n","\n","        # if strat_version in ['v3_3']:\n","        #   open = res_df['open'].to_numpy()\n","        #   if ep_loc_side == OrderSide.SELL:\n","        #     bb_lower_1m = res_df['bb_lower_1m'].to_numpy()\n","        #     # mr_res *= close <= bb_lower_1m\n","        #     mr_res *= open <= bb_lower_1m\n","        #   else:\n","        #     bb_upper_1m = res_df['bb_upper_1m'].to_numpy()\n","        #     # mr_res *= close >= bb_upper_1m\n","        #     mr_res *= open >= bb_upper_1m\n","\n","        if strat_version in ['4_1']:\n","            if ep_loc_side == OrderSide.SELL:\n","                bb_lower_15T = res_df['bb_lower_15T'].to_numpy()\n","                short_ep_ = res_df['short_ep_{}'.format(strat_version)].to_numpy()\n","                mr_res *= bb_lower_15T >= short_ep_\n","            else:\n","                bb_upper_15T = res_df['bb_upper_15T'].to_numpy()\n","                long_ep_ = res_df['long_ep_{}'.format(strat_version)].to_numpy()\n","                mr_res *= bb_upper_15T <= long_ep_\n","\n","        # if strat_version in ['v5_2']:\n","        #   bb_upper2_ = res_df['bb_upper2_%s' % config.loc_set.zone.bbz_itv].to_numpy()\n","        #   bb_lower2_ = res_df['bb_lower2_%s' % config.loc_set.zone.bbz_itv].to_numpy()\n","        #   if ep_loc_side == OrderSide.SELL:\n","        #     mr_res *= bb_upper2_ < close\n","        #   else:\n","        #     mr_res *= bb_lower2_ > close\n","\n","        # degree_list = literal_eval(config.loc_set.zone.degree_list)\n","        # if len(degree_list) != 0:\n","        # # if strat_version in ['v3_3', 'v3_4']:\n","        #   norm_close_15 = res_df['norm_close_15'].to_numpy()   # -> 이거 뭘로 만들었는지 불분명함,,\n","        #   b1_norm_close_15 = res_df['norm_close_15'].shift(15).to_numpy()\n","\n","        #   if ep_loc_side == OrderSide.SELL:\n","        #     mr_res *= norm_close_15 <= -degree_list[0]\n","        #     # mr_res *= b1_norm_close_15 <= -degree_list[1]\n","        #   else:\n","        #     mr_res *= norm_close_15 >= degree_list[0]\n","        #     # mr_res *= b1_norm_close_15 >= degree_list[1]\n","\n","        # ------ b. dc ------ #\n","        # if strat_version in ['v3_3']:\n","        #   if ep_loc_side == OrderSide.SELL:\n","        #     dc_lower_ = res_df['dc_lower_1m'].to_numpy()\n","        #     b1_dc_lower_ = res_df['dc_lower_1m'].shift(1).to_numpy()\n","        #     mr_res *= dc_lower_ < b1_dc_lower_\n","        #   else:\n","        #     dc_upper_ = res_df['dc_upper_1m'].to_numpy()\n","        #     b1_dc_upper_ = res_df['dc_upper_1m'].shift(1).to_numpy()\n","        #     mr_res *= dc_upper_ > b1_dc_upper_\n","\n","        # ------ c. sar ------ #\n","        # if strat_version in ['v3_3']:\n","        # sar_uptrend_3T = res_df['sar_uptrend_3T'].to_numpy()\n","        # if ep_loc_side == OrderSide.SELL:\n","        #   mr_res *= sar_uptrend_3T == 0\n","        # else:\n","        #   mr_res *= sar_uptrend_3T == 1"],"metadata":{"id":"csZwxsP5r_Pz"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"JjKHyqftzhD7"},"source":["### set config (override available)"]},{"cell_type":"code","execution_count":65,"metadata":{"id":"q_4E-zH02WJy","executionInfo":{"status":"ok","timestamp":1650416314636,"user_tz":-540,"elapsed":350,"user":{"displayName":"7th June","userId":"08178289703395036410"}}},"outputs":[],"source":["#     caution : MARKET / LIMIT spelling   #\n","#      json doesn't support single quotes     #\n","\n","param_dict = {\n","  \"selection_id\": \"3_9\",\n","  \"trader_set\": {\n","    \"backtrade\": 0,\n","    \"back_data_path\": \"C:\\\\Users\\\\Lenovo\\\\PycharmProjects\\\\System_Trading\\\\JnQ\\\\candlestick_concated\\\\database_bn\\\\2022-04-08\\\\2022-04-08 ETHUSDT_1m.ftr\",\n","    \"start_datetime\": \"2020-09-05 00:00:59.999\",\n","    \"run\": 1,\n","    \"df_log\": 0,\n","    \"latest_index\": -1,\n","    \"complete_index\": -2,\n","    \"limit_fee\": 0.0002,\n","    \"market_fee\": 0.0004,\n","    \"initial_asset\": 10,\n","    \"asset_changed\": 0,\n","    \"symbol\": \"ETHUSDT\",\n","    \"symbol_changed\": 0,\n","    \"itv_list\": \"['T', '3T', '5T', '15T', '30T', '4H']\",\n","    \"row_list\": \"[100, 50, 1, 1, 1, 1]\",\n","    \"rec_row_list\": \"[1, 1, 1, 1, 1, 1]\",\n","    \"offset_list\": \"['1h', '1h', '1h', '1h', '1h', '1h']\",\n","    \"bar_close_second\": 59,\n","    \"realtime_term\": 0.01,\n","    \"api_retry_term\": 3,\n","    \"check_entry_sec\": 10,\n","    \"entry_execution_wait\": 60,\n","    \"breakout_qty_ratio\": 0.97,\n","    \"qty_check_term\": 30,\n","    \"exit_execution_wait\": 60,\n","    \"close_complete_term\": 5,\n","    \"save_stacked_df\": 0,\n","    \"stacked_df_exist\": 1\n","  },\n","  \"pos_set\": {\n","    \"short_inversion\": 0,\n","    \"long_inversion\": 0,\n","    \"short_ban\": 0,\n","    \"long_ban\": 0\n","  },\n","  \"loc_set\": {\n","    \"zone\": {\n","      \"short_spread\": \"None\",\n","      \"long_spread\": \"None\",\n","      \"short_tr_thresh\": \"None\",\n","      \"long_tr_thresh\": \"None\",\n","      \"ei_k\": 0.0,\n","      \"ep_out_tick\": \"None\",\n","      \"zone_rejection\": 1,\n","      \"ppr\": \"None\",\n","      \"wbr\": \"None\",\n","      \"dbr\": \"None\",\n","      \"brr\": \"None\",\n","      \"ir\": \"None\",\n","      \"abs_ratio\": \"None\",\n","      \"base_roll_period\": 50,\n","      \"degree_list\": \"[]\",\n","      \"hc_itv\": 60,\n","      \"dtk_itv\": \"5T\",\n","      \"dt_k\": \"None\",\n","      \"dc_period\": 135,\n","      \"use_dtk_line\": 0,\n","      \"zone_dt_k\": 0.4,\n","      \"zone_dc_period\": 135\n","    },\n","    \"point\": {\n","      \"exp_itv\": \"5T\",\n","      \"p1_itv1\": \"T\",\n","      \"p1_itv0\": \"T\",\n","      \"p1_period1\": 7,\n","      \"p1_period2\": 7,\n","      \"p2_itv1\": \"None\",\n","      \"p2_itv0\": \"T\",\n","      \"p2_period1\": 20,\n","      \"p2_period2\": 40,\n","      \"tf_entry\": \"T\",\n","      \"base_gap\": 0.1,\n","      \"wick_score_list\": \"[]\",\n","      \"body_score_list\": \"[]\",\n","      \"score_itv_list\": \"[]\",\n","      \"osc_band\": 20\n","    }\n","  },\n","  \"tr_set\": {\n","    \"wave_min\": 10,\n","    \"wave_max\": 15,\n","    \"tp_gap\": 0.0,\n","    \"decay_gap\": \"None\",\n","    \"ep_gap\": -0.5,\n","    \"out_gap\": 0,\n","    \"c_ep_gap\": \"None\",\n","    \"t_out_gap\": \"None\",\n","    \"bias_gap\": 0,\n","    \"bias_info_tick\": 240\n","  },\n","  \"ep_set\": {\n","    \"entry_type\": \"LIMIT\",\n","    \"static_ep\": 1,\n","    \"point2\": {\n","      \"use_point2\": 0,\n","      \"entry_type\": \"MARKET\",\n","      \"wick_score_list\": \"[]\",\n","      \"body_score_list\": \"[]\",\n","      \"score_itv_list\": \"['T']\"\n","    }\n","  },\n","  \"tp_set\": {\n","    \"non_tp\": 0,\n","    \"static_tp\": 1,\n","    \"tp_onexec\": 0,\n","    \"decay_term\": 60,\n","    \"p_ranges\": \"[1]\",\n","    \"p_qty_ratio\": \"[1]\"\n","  },\n","  \"out_set\": {\n","    \"hl_out\": 1,\n","    \"static_out\": 1,\n","    \"out_onexec\": 0,\n","    \"tf_exit\": \"None\",\n","    \"rsi_exit\": 0\n","  },\n","  \"lvrg_set\": {\n","    \"leverage\": 2,\n","    \"static_lvrg\": 0,\n","    \"allow_float\": 0,\n","    \"target_pct\": 0.03,\n","    \"lvrg_rejection\": 0\n","  }\n","}\n","\n","config = EasyDict(param_dict)"]},{"cell_type":"markdown","metadata":{"id":"rLI8unIyroiC"},"source":["## run"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"qBJfPsmJzVIr"},"outputs":[],"source":["# funcs = [ep_out_v2, ep_loc_point2_v2, lvrg_set]  # ep_out for p1 & p2\n","funcs = [ep_out, ep_loc_point2_v2, lvrg_set]     # ep_out for p1-only\n","# funcs = [ep_out_v0, ep_loc_point2_v2, lvrg_set]  # ep_out for v3\n","\n","id_idx_list = [0]  # ID_arr 에서 import 할 id_idx 선택\n","public_override = 1\n","utils_override = 1\n","config_override = 1\n","\n","# ------ config_list 와 같은 org_var 에 override 하는거 다시 생각하기 ------ #\n","ID_list = ID_arr[id_idx_list]\n","utils_list = utils_arr[id_idx_list]\n","config_list = config_arr[id_idx_list]\n","\n","if config_override or utils_override:\n","  assert len(config_list) == 1\n","  if config_override:    \n","    config_list[0] = config\n","    ID_list[0] = config.strat_version\n","  \n","config = config_list[0]  # base config = config_list[0]\n","tp_fee, out_fee = calc_tp_out_fee_v2(config)   # -> rev_pr 때문에 일단 이곳에도 선언함\n","\n","# ------- inversion set ------- #\n","inversion = 0\n","fdist_thresh = 1\n","# ------- plot param ------- #\n","show_detail = 0\n","# ------- temp param ------- #\n","allow_osc_touch = 0\n","rsi_gap = 5\n","\n","# ------- just printing config ------- #\n","# ['strat_version', 'pos_set', 'loc_set', 'tr_set', 'ep_set', 'tp_set', 'out_set', 'lvrg_set']\n","_ = [print(json.dumps(config[key_], indent=1), end=' ') for key_ in ['strat_version', 'loc_set', 'tr_set', 'ep_set', 'tp_set', 'out_set', 'lvrg_set']]"]},{"cell_type":"code","execution_count":31,"metadata":{"id":"afUV2b1jaggN","executionInfo":{"status":"ok","timestamp":1650414631188,"user_tz":-540,"elapsed":7,"user":{"displayName":"7th June","userId":"08178289703395036410"}}},"outputs":[],"source":["# config.trader_set.start_datetime = \"2020-09-05 00:00:59.999\" #  \"2020-09-05 00:00:59.999\" # 2022-02-01 16:34:59.999000 2022-01-14 16:34:59.999000  \"2020-09-05 00:00:59.999\" \"2022-01-10 00:00:59.999\" \"2021-10-04 02:39:59.999000\"\n","config_list[0].tr_set.wave_min=10\n","config_list[0].tr_set.wave_max=15"]},{"cell_type":"code","execution_count":48,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":2890,"status":"ok","timestamp":1650415848090,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"WstWVNihCNH8","outputId":"bd7a30a8-a482-488d-e615-40ac68599f5b"},"outputs":[{"output_type":"stream","name":"stdout","text":["public_indi elapsed time : 1.511216640472412\n","make data_list elapsed time : 0.00043463706970214844\n"]}],"source":["# ------ slicing res_df ------ #\n","res_df = res_df_.loc[pd.to_datetime(config.trader_set.start_datetime):]\n","\n","np_timeidx = np.array([intmin_np(date_) for date_ in res_df.index.to_numpy()])\n","\n","# ------------ public_indi ------------ # - 딱히 반복될 이유가 없는 phase - annot. 달때, why 까지 적어주면 좋음\n","start_0 = time.time()\n","if public_override:\n","    res_df = public_indi(res_df, config_list[0], np_timeidx)  # 현재 대부분의 시간은 h_candle 에서 소비되고 있음\n","else:\n","    res_df = utils_public.public_indi(res_df, config_list[0], np_timeidx)\n","print(\"public_indi elapsed time :\", time.time() - start_0)\n","\n","# ------------ make data_list ------------ # - 반복될 이유가 없는 phase - public_indo 에 종속\n","start_0 = time.time()\n","ohlc_cols = ['open', 'high', 'low', 'close']\n","ohlc_list = [res_df[col_].to_numpy() for col_ in ohlc_cols]\n","print(\"make data_list elapsed time :\", time.time() - start_0)"]},{"cell_type":"markdown","metadata":{"id":"RqRF1eyZ0xBL"},"source":["### idep_plot"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"_iYcJk8nK8Yq"},"outputs":[],"source":["# ------ edit utils config ------ #\n","# config_list[0].pos_set.short_ban = 0\n","# config_list[0].loc_set.point.p1_period1 = 20\n","# config_list[0].loc_set.point.p1_period2 = 50\n","# # config_list[0].loc_set.point.p2_period1 = 20\n","# # config_list[0].loc_set.point.p2_period2 = 20\n","# # config_list[0].loc_set.point.base_gap = -0.0\n","# config_list[0].tr_set.tp_gap = 0.5\n","# config_list[0].tr_set.ep_gap = -1.0\n","# config_list[0].tr_set.out_gap = 0\n","# # config_list[0].tr_set.bias_gap = 1.5\n","# config_list[0].tr_set.bias_info_tick = 240"]},{"cell_type":"code","execution_count":49,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":361,"status":"ok","timestamp":1650415848951,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"iI39YI_5GguK","outputId":"e5b03c1e-cf84-498f-9678-94c1238e6a22"},"outputs":[{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 12629\n","np.sum(long_open_res == 1) : 11743\n","np.sum(short_open_res == 1) : 12629\n","np.sum(long_open_res == 1) : 11743\n"]},{"output_type":"stream","name":"stdout","text":["enlist_rtc elapsed time : 0.036390066146850586\n","enlist_tr elapsed time : 0.17201495170593262\n"]}],"source":["if utils_override:   # 현재, utils_override 하는 경우 1개의 ID 만 허용함 \n","  start_0 = time.time()\n","  res_df = enlist_rtc(res_df, config_list[0], np_timeidx)\n","  print(\"enlist_rtc elapsed time :\", time.time() - start_0)\n","  start_0 = time.time()\n","  res_df = enlist_tr(res_df, config_list[0], np_timeidx)    # 36995.0 -> 152766.0 # 4044 np.sum(long_open_res == 1) : 4325\n","  print(\"enlist_tr elapsed time :\", time.time() - start_0)\n","else:\n","    start_0 = time.time()\n","    for utils_, config_ in zip(utils_list, config_list):\n","        res_df = utils_.enlist_rtc(res_df, config_, np_timeidx)\n","        res_df = utils_.enlist_tr(res_df, config_, np_timeidx)\n","    print(\"elapsed time :\", time.time() - start_0)"]},{"cell_type":"code","execution_count":87,"metadata":{"id":"gfDSOGMd91rE","executionInfo":{"status":"ok","timestamp":1650416843217,"user_tz":-540,"elapsed":356,"user":{"displayName":"7th June","userId":"08178289703395036410"}}},"outputs":[],"source":["# ------ edit loc_set config ------ #\n","# config_list[0].loc_set.zone.zone_rejection = 0\n","config_list[0].loc_set.zone.ppr = 1 # 0.9  # 0.7\n","# config_list[0].loc_set.zone.wbr = \"None\"  # 0.7\n","# config_list[0].loc_set.zone.dbr = \"None\"  # 0.7\n","# config_list[0].loc_set.point.wick_score_list = \"[]\"\n","# config_list[0].loc_set.point.score_itv_list = \"['H']\"\n","# config_list[0].loc_set.zone.brr = 20 # \"None\" 0.8\n","# config_list[0].loc_set.zone.ir = \"None\" # \"None\" 0.8\n","# # config_list[0].loc_set.zone.abs_ratio = \"None\"  # 0.7\n","# config_list[0].loc_set.zone.short_tr_thresh = \"None\" #  0.8 # # 0.7 # tr_thresh 엄청 민감함\n","# config_list[0].loc_set.zone.long_tr_thresh = 0.85 #  0.8 ## 0.7\n","# # config_list[0].loc_set.zone.base_roll_period = 60"]},{"cell_type":"code","execution_count":91,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":1265,"status":"ok","timestamp":1650416895891,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"9DPgykxQ92mU","outputId":"08ec11ea-a453-42f3-983b-5dfc2223426a"},"outputs":[{"output_type":"stream","name":"stderr","text":["short_ppr_ >= config.loc_set.zone.ppr : 0.62869 1.00000 (0.0)\n","long_ppr_ >= config.loc_set.zone.ppr : 0.63991 1.00000 (0.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9195442199707031\n"]}],"source":["open_info_df = get_open_info_df(ep_loc_v3, res_df, np_timeidx, ID_list, config_list, id_idx_list)  # --> point * dur. 관련 (loc_set) param 에 종속 (open_info 가 변경되는게 아니라면, 재실행할 필요없음)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"KqVkg236t_f2"},"outputs":[],"source":["# ------ edit entry & exit (ep, tp, out, ..) config ------ #\n","# config_list[0].loc_set.zone.ei_k = 0.0\n","# # config_list[0].loc_set.zone.ep_out_tick = 10\n","# # # config_list[0].ep_set.point2.use_point2 = 1\n","# # # config_list[0].ep_set.point2.entry_type = \"LIMIT\"\n","# # # config_list[0].ep_set.point2.wick_score_list = str([])\n","# # # config_list[0].tp_set.static_tp = 1\n","# # # config_list[0].tp_set.non_tp = 0 # 0 1\n","# config_list[0].tp_set.p_ranges = \"[1]\"\n","# config_list[0].tp_set.p_qty_ratio = \"[1]\"\n","# # config_list[0].tp_set.p_ranges = \"[0.2, 0.66, 1]\"\n","# # config_list[0].tp_set.p_qty_ratio = \"[0.25, 0.25, 0.5]\"\n","# # config_list[0].tp_set.p_ranges = \"[0.66, 1]\"\n","# # config_list[0].tp_set.p_qty_ratio = \"[0.1, 0.9]\"\n","# # # config_list[0].out_set.hl_out = 1\n","# # # config_list[0].out_set.tf_exit = \"None\" # 15 \"None\"\n","# config_list[0].lvrg_set.leverage = 1\n","config_list[0].lvrg_set.static_lvrg = 0\n","config_list[0].lvrg_set.target_pct = 0.03\n","# # config_list[0].lvrg_set.allow_float = 0\n","# config_list[0].lvrg_set.lvrg_rejection = 0"]},{"cell_type":"code","execution_count":92,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":644},"executionInfo":{"elapsed":3295,"status":"ok","timestamp":1650416901658,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"HHq6cr9GPBot","outputId":"2027635a-7572-4c78-c043-0afae32af39b"},"outputs":[{"output_type":"stream","name":"stdout","text":["en_ex_pairing elapsed time : 1.2761216163635254\n","short_obj.shape : (1795, 5)\n","long_obj.shape : (1595, 5)\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1728x576 with 6 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["idep_plot elapsed time : 1.7074415683746338\n"]}],"source":["test_ratio = 0.0\n","short_pr, short_obj, short_lvrg_arr, short_fee_arr, short_tpout_arr, short_bias_arr, short_false_bias_arr, short_point1_arr, short_en_tp1, short_en_out0, \\\n","      long_pr, long_obj, long_lvrg_arr, long_fee_arr, long_tpout_arr, long_bias_arr, long_false_bias_arr, long_point1_arr, long_en_tp1, long_en_out0 = \\\n","get_res_v4(res_df, open_info_df, ohlc_list, config_list, np_timeidx, funcs, test_ratio=test_ratio, plot_is=1, signi=False)   # open 이 많을 수록 en_ex_pairing elapsed time : 11.58370590209961"]},{"cell_type":"markdown","metadata":{"id":"n6gc7lERC4VE"},"source":["### statistics (stem 별로 진행)"]},{"cell_type":"code","execution_count":78,"metadata":{"id":"HHjIdn2MC4VE","executionInfo":{"status":"ok","timestamp":1650416472505,"user_tz":-540,"elapsed":360,"user":{"displayName":"7th June","userId":"08178289703395036410"}}},"outputs":[],"source":["selection_id = config.selection_id\n","\n","short_open_i = short_obj[-1].astype(int)\n","long_open_i = long_obj[-1].astype(int)\n","\n","short_open_tp_1 = res_df['short_tp_1_{}'.format(selection_id)].to_numpy()[short_open_i]\n","long_open_tp_1 = res_df['long_tp_1_{}'.format(selection_id)].to_numpy()[long_open_i]\n","\n","short_open_tp_gap = res_df['short_tp_gap_{}'.format(selection_id)].to_numpy()[short_open_i]  # use open_i\n","long_open_tp_gap = res_df['long_tp_gap_{}'.format(selection_id)].to_numpy()[long_open_i]\n","\n","short_open_epout_0 = res_df['short_epout_0_{}'.format(selection_id)].to_numpy()[short_open_i]\n","long_open_epout_0 = res_df['long_epout_0_{}'.format(selection_id)].to_numpy()[long_open_i]\n","\n","short_open_epout_gap = res_df['short_epout_gap_{}'.format(selection_id)].to_numpy()[short_open_i]  # use open_i\n","long_open_epout_gap = res_df['long_epout_gap_{}'.format(selection_id)].to_numpy()[long_open_i]\n","\n","# ------ pairing 된 en, ex_idx 기준으로 survey 진행 ------ #\n","# 0. high, low (exit_done 까지의) -> partial (tpg) 과 outg survey 목표\n","#   a. short -> tpg - low, outg - high\n","#   b. long -> tpg - high, outg - low\n","short_max_tpg = get_max_tpg_v2(\"SELL\", ohlc_list, short_pr, short_obj[:4], short_open_tp_1, short_open_tp_gap)\n","long_max_tpg = get_max_tpg_v2(\"BUY\", ohlc_list, long_pr, long_obj[:4], long_open_tp_1, long_open_tp_gap)\n","\n","# ------ 0. tp 까지 도달하는 최소 idx 도출, en_idx 부터 ------ #\n","#   a. bias_info_tick 의 limit 을 정해주지 않으면 굉장히 길어질 수 있다고 봄\n","# short_max_outg, short_outg_open_idx = get_max_outg_v2(\"SELL\", config, ohlc_list, short_obj, short_tpout_arr, short_open_epout_0, short_open_epout_gap)\n","# long_max_outg, long_outg_open_idx = get_max_outg_v2(\"BUY\", config, ohlc_list, long_obj, long_tpout_arr, long_open_epout_0, long_open_epout_gap)\n","short_max_outg, short_open_idx, short_true_open_idxth = get_max_outg_v3(\"SELL\", config, ohlc_list, short_obj, short_tpout_arr, short_open_epout_0, short_open_epout_gap)\n","long_max_outg, long_open_idx, long_true_open_idxth = get_max_outg_v3(\"BUY\", config, ohlc_list, long_obj, long_tpout_arr, long_open_epout_0, long_open_epout_gap)\n","\n","current_tpg= config.tr_set.tp_gap\n","current_outg = config.tr_set.out_gap"]},{"cell_type":"markdown","source":["#### consecutive dur. value survey on bias"],"metadata":{"id":"tOFkzUX2imQu"}},{"cell_type":"code","source":["res_df.dtypes"],"metadata":{"id":"CgvSrXaZEkMZ"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":79,"metadata":{"id":"gnSvYKIzC4VF","executionInfo":{"status":"ok","timestamp":1650416474429,"user_tz":-540,"elapsed":2,"user":{"displayName":"7th June","userId":"08178289703395036410"}}},"outputs":[],"source":["# ------------ dependent vars. ------------ #\n","# res_df 에 존재하는 col 는 모두 사용가능함\n","# ------ 1. 도출한 outg 와 vars. pairing 진행 (by valid_idx) ------ #\n","devided_cols = ['tr_{}'.format(selection_id), 'ppr_{}'.format(selection_id)]  # , 'ir_5T'\n","public_cols = []  # 'abs_ratio_5T', 'rel_ratio_5T', 'body_rel_ratio_5T'\n","\n","short_datas = [res_df['short_' + col].to_numpy() for col in devided_cols] + [res_df[col].to_numpy() for col in public_cols]\n","long_datas = [res_df['long_' + col].to_numpy() for col in devided_cols] + [res_df[col].to_numpy() for col in public_cols]\n","\n","titles = devided_cols + public_cols"]},{"cell_type":"code","source":["plt.style.use(['dark_background', 'fast'])\n","fig = plt.figure(figsize=(14, 18))\n","nrows, ncols = len(short_datas), 1\n","gs = gridspec.GridSpec(nrows=nrows,  # row 부터 index 채우고 col 채우는 순서임 (gs_idx)\n","                        ncols=ncols\n","                        )\n","\n","num_samples = 10\n","alpha = 0.8\n","\n","for ings_idx, (title, short_data, long_data) in enumerate(zip(titles, short_datas, long_datas)):\n","  inner_gs = gs[ings_idx].subgridspec(nrows=1, ncols=2)\n","\n","  short_open_data = short_data[short_open_idx]\n","  long_open_data = long_data[long_open_idx]\n","\n","  short_true_data = short_open_data[short_bias_arr.ravel()]\n","  short_false_data = short_open_data[short_false_bias_arr.ravel()]\n","  long_true_data = long_open_data[long_bias_arr.ravel()]\n","  long_false_data = long_open_data[long_false_bias_arr.ravel()]\n","    \n","  plt.subplot(inner_gs[0])\n","  v, c = np.unique(short_true_data, return_counts=True)\n","  plt.hist(v, weights=c, bins=num_samples, alpha=alpha, color='#00ff00', edgecolor='black')\n","  v, c = np.unique(short_false_data, return_counts=True)\n","  plt.hist(v, weights=c, bins=num_samples, alpha=alpha, color='#ff0000', edgecolor='black')\n","  plt.title('short_' + title)  \n","\n","  plt.subplot(inner_gs[1])\n","  v, c = np.unique(long_true_data, return_counts=True)\n","  plt.hist(v, weights=c, bins=num_samples, alpha=alpha, color='#00ff00', edgecolor='black')\n","  v, c = np.unique(long_false_data, return_counts=True)\n","  plt.hist(v, weights=c, bins=num_samples, alpha=alpha, color='#ff0000', edgecolor='black')\n","  plt.title('long_' + title)\n","  \n","# plt.suptitle(title)\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"Sahvc-R0jD1A","executionInfo":{"status":"ok","timestamp":1650416475261,"user_tz":-540,"elapsed":462,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"8f7ef511-e905-4703-a5f6-f2ec89e8a37f"},"execution_count":80,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1008x1296 with 4 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","metadata":{"id":"Arnb-kXlC4VF"},"source":["#### tpg survey for partial"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":741},"executionInfo":{"elapsed":2880,"status":"ok","timestamp":1650080717333,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"jHh0uFkXC4VF","outputId":"97fb68cf-77d7-4f9c-842c-70a8bb26fb8c"},"outputs":[{"output_type":"stream","name":"stdout","text":["186\n","186\n","186\n","186\n","pkx : [-0.40825533  0.81500699  1.18198569  1.85477996]\n","pkx : [-0.39872379  0.48501655  0.6365149   1.14150938  1.39400662  1.72225304]\n","\n","111\n","111\n","111\n","111\n","pkx : [-0.71661626 -0.63018625 -0.43811957 -0.29406955 -0.15962287]\n","pkx : [-0.69082946 -0.5967696  -0.44000317 -0.28323673 -0.21269184 -0.1264703 ]\n","\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 864x576 with 4 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["# 1. outg 는 partial 을 위한 histogram 작성 진행\n","# 현재, outg 내부에는 tp 한것과 out 한것이 공존하는 상태\n","titles = ['outg', 'tpg']\n","short_max_datas = [short_max_outg[short_true_open_idxth], short_max_tpg]\n","long_max_datas = [long_max_outg[long_true_open_idxth], long_max_tpg]\n","\n","# titles = ['tpg']\n","# short_max_datas = [short_max_tpg]\n","# long_max_datas = [long_max_tpg]\n","\n","plt.style.use(['dark_background', 'fast'])\n","fig = plt.figure(figsize=(12, 8))\n","nrows, ncols = 2, 1\n","gs = gridspec.GridSpec(nrows=nrows,  # row 부터 index 채우고 col 채우는 순서임 (gs_idx)\n","                        ncols=ncols\n","                        )\n","  \n","for ings_idx, (title, short_max_data, long_max_data) in enumerate(zip(titles, short_max_datas, long_max_datas)):\n","\n","  inner_gs = gs[ings_idx].subgridspec(nrows=1, ncols=2)\n","  if ings_idx == 0:\n","    axvline = current_outg\n","    title_add = 'true_' + title\n","  else:\n","    axvline = current_tpg\n","    title_add = 'false_' + title\n","\n","  print(len(long_max_data))\n","\n","  short_plot_idx = np.ones_like(short_max_data).astype(bool)\n","  long_plot_idx = np.ones_like(long_max_data).astype(bool)\n","  # short_plot_idx = short_max_data <= axvline\n","  # long_plot_idx = long_max_data <= axvline\n","\n","  print(np.sum(long_plot_idx))    \n","\n","  short_plot_idx *= ~np.isnan(short_max_data)\n","  long_plot_idx *= ~np.isnan(long_max_data)  # nan 과 inf 때문에 이 방식 채택\n","\n","  print(np.sum(long_plot_idx))\n","\n","  short_plot_idx *= ~np.isinf(short_max_data)\n","  long_plot_idx *= ~np.isinf(long_max_data)  # nan 과 inf 때문에 이 방식 채택\n","  \n","  print(np.sum(long_plot_idx))\n","    \n","  plt.subplot(inner_gs[0])\n","  kde_plot_v2(*np.unique(short_max_data[short_plot_idx], return_counts=True))\n","  plt.title('short_' + title_add)  \n","  plt.axvline(axvline, color='red', linewidth=3)\n","\n","  plt.subplot(inner_gs[1])\n","  kde_plot_v2(*np.unique(long_max_data[long_plot_idx], return_counts=True))\n","  plt.title('long_' + title_add)\n","  plt.axvline(axvline, color='red', linewidth=3)\n","\n","  print()\n","\n","# plt.suptitle(title)\n","plt.show()"]},{"cell_type":"markdown","source":["#### legacy"],"metadata":{"id":"mScdfR9hmjVu"}},{"cell_type":"markdown","metadata":{"id":"xivLUsSGC4VF"},"source":["##### outg survey for precision (eploc vars. dependency)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"LB28R3QIjCDc"},"outputs":[],"source":["# ------------ dependent vars. ------------ #\n","# res_df 에 존재하는 col 는 모두 사용가능함\n","# ------ 1. 도출한 outg 와 vars. pairing 진행 (by valid_idx) ------ #\n","devided_cols = ['tr_{}'.format(strat_version)]  # , 'ir_5T'\n","public_cols = ['wave_body_ratio']  # 'abs_ratio_5T', 'rel_ratio_5T', 'body_rel_ratio_5T'\n","\n","short_datas = [res_df['short_' + col].to_numpy() for col in devided_cols] + [res_df[col].to_numpy() for col in public_cols]\n","long_datas = [res_df['long_' + col].to_numpy() for col in devided_cols] + [res_df[col].to_numpy() for col in public_cols]\n","\n","titles = devided_cols + public_cols"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"elapsed":1655,"status":"ok","timestamp":1649812123691,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"nX9TpLcvFu7T","outputId":"1ebbeec2-fa2b-459c-ee69-9779cb36172b"},"outputs":[{"name":"stdout","output_type":"stream","text":["362\n","362\n","362\n","362\n","\n","362\n","362\n","362\n","362\n","\n"]},{"data":{"image/png":"\n","text/plain":["<Figure size 864x1296 with 4 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["plot_outg_range = (-1, 10)\n","plot_data_range = (-10, 100)\n","\n","plt.style.use(['dark_background', 'fast'])\n","fig = plt.figure(figsize=(12, 18))\n","nrows, ncols = len(short_datas), 1\n","gs = gridspec.GridSpec(nrows=nrows,  # row 부터 index 채우고 col 채우는 순서임 (gs_idx)\n","                        ncols=ncols\n","                        )\n","\n","for ings_idx, (title, short_data, long_data) in enumerate(zip(titles, short_datas, long_datas)):\n","  inner_gs = gs[ings_idx].subgridspec(nrows=1, ncols=2)\n","\n","  print(len(long_max_outg))\n","\n","  short_plot_idx = (plot_outg_range[0] <= short_max_outg) & (short_max_outg <= plot_outg_range[1])\n","  long_plot_idx = (plot_outg_range[0] <= long_max_outg) & (long_max_outg <= plot_outg_range[1])  # nan 과 inf 때문에 이 방식 채택\n","\n","  print(np.sum(long_plot_idx))\n","\n","  short_open_data = short_data[short_open_idx]\n","  long_open_data = long_data[long_open_idx]\n","  \n","  short_plot_idx *= (plot_data_range[0] <= short_open_data) * (short_open_data <= plot_data_range[1])\n","  long_plot_idx *= (plot_data_range[0] <= long_open_data) * (long_open_data <= plot_data_range[1]) # nan 과 inf 때문에 이 방식 채택\n","\n","  short_plot_idx *= ~np.isnan(short_open_data)\n","  long_plot_idx *= ~np.isnan(long_open_data)  # nan 과 inf 때문에 이 방식 채택\n","\n","  print(np.sum(long_plot_idx))\n","\n","  short_plot_idx *= ~np.isinf(short_open_data)\n","  long_plot_idx *= ~np.isinf(long_open_data)  # nan 과 inf 때문에 이 방식 채택\n","\n","  print(np.sum(long_plot_idx))\n","\n","  short_true_idx = short_plot_idx * short_true_open_idxth\n","  long_true_idx = long_plot_idx * long_true_open_idxth\n","  \n","  short_false_idx = short_plot_idx * ~short_true_open_idxth\n","  long_false_idx = long_plot_idx * ~long_true_open_idxth\n","\n","  plt.subplot(inner_gs[0])\n","  # ------ true_bias ------ #\n","  x, y = short_max_outg[short_true_idx].ravel(), short_open_data[short_true_idx].ravel()  \n","  plt.scatter(x, y, color='white', alpha=0.5)\n","  # ------ false_bias ------ #\n","  x, y = short_max_outg[short_false_idx].ravel(), short_open_data[short_false_idx].ravel()\n","  plt.scatter(x, y, color='fuchsia', alpha=0.3)\n","  plt.axvline(current_outg, color='red', linewidth=3)\n","  plt.title(\"{} coef : {:0.3f}\".format(title, np.corrcoef(-x, y)[0, 1]))\n","\n","  plt.subplot(inner_gs[1])    \n","  # ------ true_bias ------ #\n","  x, y = long_max_outg[long_true_idx].ravel(), long_open_data[long_true_idx].ravel()  \n","  plt.scatter(x, y, color='white', alpha=0.5)\n","  # ------ false_bias ------ #\n","  x, y = long_max_outg[long_false_idx].ravel(), long_open_data[long_false_idx].ravel()\n","  plt.scatter(x, y, color='fuchsia', alpha=0.3)\n","  plt.axvline(current_outg, color='red', linewidth=3)\n","  plt.title(\"{} coef : {:0.3f}\".format(title, np.corrcoef(-x, y)[0, 1]))\n","\n","  print()  \n","\n","# plt.suptitle(title)\n","plt.show()\n","# print()"]},{"cell_type":"markdown","metadata":{"id":"EtjwB7Qk-Grj"},"source":["### significance_v3"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"oVifICO4-Grk","colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"status":"ok","timestamp":1650245619498,"user_tz":-540,"elapsed":79623,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"fef0683c-18f0-4abb-d7ed-941c2547f68b"},"outputs":[{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 24770\n","np.sum(long_open_res == 1) : 21185\n","np.sum(short_open_res == 1) : 24770\n","np.sum(long_open_res == 1) : 21185\n","short_base_ <= dc_base_3T : 3148.91000 3144.86500 (0.0)\n","dc_lower2_ >= dc_base_H : 3139.14000 3113.60500 (0.0)\n","dc_base_3T_rollmin == dc_base_3T : 3129.07500 3144.86500 (0.0)\n","long_base_ >= dc_base_3T : 3148.91000 3144.86500 (1.0)\n","dc_lower2_ >= dc_base_H : 3139.14000 3113.60500 (1.0)\n","dc_base_3T_rollmax == dc_base_3T : 3144.86500 3144.86500 (1.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 1.7297661304473877\n","en_ex_pairing elapsed time : 0.8320345878601074\n","short_obj.shape : (529, 5)\n","long_obj.shape : (657, 5)\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 24770\n","np.sum(long_open_res == 1) : 21185\n","np.sum(short_open_res == 1) : 24770\n","np.sum(long_open_res == 1) : 21185\n"]},{"output_type":"stream","name":"stdout","text":["idep_plot elapsed time : 0.2585620880126953\n"]},{"output_type":"stream","name":"stderr","text":["short_base_ <= dc_base_3T : 3148.91000 3144.86500 (0.0)\n","dc_lower2_ >= dc_base_H : 3139.14000 3113.60500 (0.0)\n","dc_base_3T_rollmin == dc_base_3T : 3129.07500 3144.86500 (0.0)\n","long_base_ >= dc_base_3T : 3148.91000 3144.86500 (1.0)\n","dc_lower2_ >= dc_base_H : 3139.14000 3113.60500 (1.0)\n","dc_base_3T_rollmax == dc_base_3T : 3144.86500 3144.86500 (1.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 1.6690161228179932\n","en_ex_pairing elapsed time : 0.8847715854644775\n","short_obj.shape : (525, 5)\n","long_obj.shape : (648, 5)\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 24770\n","np.sum(long_open_res == 1) : 21185\n","np.sum(short_open_res == 1) : 24770\n","np.sum(long_open_res == 1) : 21185\n","short_base_ <= dc_base_3T : 3148.91000 3144.86500 (0.0)\n","dc_lower2_ >= dc_base_H : 3139.14000 3113.60500 (0.0)\n","dc_base_3T_rollmin == dc_base_3T : 3129.07500 3144.86500 (0.0)\n"]},{"output_type":"stream","name":"stdout","text":["idep_plot elapsed time : 0.2622659206390381\n"]},{"output_type":"stream","name":"stderr","text":["long_base_ >= dc_base_3T : 3148.91000 3144.86500 (1.0)\n","dc_lower2_ >= dc_base_H : 3139.14000 3113.60500 (1.0)\n","dc_base_3T_rollmax == dc_base_3T : 3144.86500 3144.86500 (1.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9505167007446289\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 24770\n","np.sum(long_open_res == 1) : 21185\n"]},{"output_type":"stream","name":"stdout","text":["en_ex_pairing elapsed time : 0.5239865779876709\n","short_obj.shape : (516, 5)\n","long_obj.shape : (642, 5)\n","idep_plot elapsed time : 0.16784119606018066\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 24770\n","np.sum(long_open_res == 1) : 21185\n","short_base_ <= dc_base_3T : 3148.91000 3144.86500 (0.0)\n","dc_lower2_ >= dc_base_H : 3139.14000 3113.60500 (0.0)\n","dc_base_3T_rollmin == dc_base_3T : 3129.07500 3144.86500 (0.0)\n","long_base_ >= dc_base_3T : 3148.91000 3144.86500 (1.0)\n","dc_lower2_ >= dc_base_H : 3139.14000 3113.60500 (1.0)\n","dc_base_3T_rollmax == dc_base_3T : 3144.86500 3144.86500 (1.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9662516117095947\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 24770\n","np.sum(long_open_res == 1) : 21185\n"]},{"output_type":"stream","name":"stdout","text":["en_ex_pairing elapsed time : 0.5313260555267334\n","short_obj.shape : (509, 5)\n","long_obj.shape : (638, 5)\n","idep_plot elapsed time : 0.17287969589233398\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 24770\n","np.sum(long_open_res == 1) : 21185\n","short_base_ <= dc_base_3T : 3148.91000 3144.86500 (0.0)\n","dc_lower2_ >= dc_base_H : 3139.14000 3113.60500 (0.0)\n","dc_base_3T_rollmin == dc_base_3T : 3129.07500 3144.86500 (0.0)\n","long_base_ >= dc_base_3T : 3148.91000 3144.86500 (1.0)\n","dc_lower2_ >= dc_base_H : 3139.14000 3113.60500 (1.0)\n","dc_base_3T_rollmax == dc_base_3T : 3144.86500 3144.86500 (1.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9555449485778809\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 24770\n","np.sum(long_open_res == 1) : 21185\n"]},{"output_type":"stream","name":"stdout","text":["en_ex_pairing elapsed time : 0.5649592876434326\n","short_obj.shape : (502, 5)\n","long_obj.shape : (634, 5)\n","idep_plot elapsed time : 0.17010760307312012\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 24770\n","np.sum(long_open_res == 1) : 21185\n","short_base_ <= dc_base_3T : 3148.91000 3144.86500 (0.0)\n","dc_lower2_ >= dc_base_H : 3139.14000 3113.60500 (0.0)\n","dc_base_3T_rollmin == dc_base_3T : 3129.07500 3144.86500 (0.0)\n","long_base_ >= dc_base_3T : 3148.91000 3144.86500 (1.0)\n","dc_lower2_ >= dc_base_H : 3139.14000 3113.60500 (1.0)\n","dc_base_3T_rollmax == dc_base_3T : 3144.86500 3144.86500 (1.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9606368541717529\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 24770\n","np.sum(long_open_res == 1) : 21185\n"]},{"output_type":"stream","name":"stdout","text":["en_ex_pairing elapsed time : 0.5817844867706299\n","short_obj.shape : (497, 5)\n","long_obj.shape : (627, 5)\n","idep_plot elapsed time : 0.16537785530090332\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 24770\n","np.sum(long_open_res == 1) : 21185\n","short_base_ <= dc_base_3T : 3148.91000 3144.86500 (0.0)\n","dc_lower2_ >= dc_base_H : 3139.14000 3113.60500 (0.0)\n","dc_base_3T_rollmin == dc_base_3T : 3129.07500 3144.86500 (0.0)\n","long_base_ >= dc_base_3T : 3148.91000 3144.86500 (1.0)\n","dc_lower2_ >= dc_base_H : 3139.14000 3113.60500 (1.0)\n","dc_base_3T_rollmax == dc_base_3T : 3144.86500 3144.86500 (1.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.960613489151001\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 24770\n","np.sum(long_open_res == 1) : 21185\n"]},{"output_type":"stream","name":"stdout","text":["en_ex_pairing elapsed time : 0.6255805492401123\n","short_obj.shape : (489, 5)\n","long_obj.shape : (624, 5)\n","idep_plot elapsed time : 0.16849970817565918\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 24770\n","np.sum(long_open_res == 1) : 21185\n","short_base_ <= dc_base_3T : 3148.91000 3144.86500 (0.0)\n","dc_lower2_ >= dc_base_H : 3139.14000 3113.60500 (0.0)\n","dc_base_3T_rollmin == dc_base_3T : 3129.07500 3144.86500 (0.0)\n","long_base_ >= dc_base_3T : 3148.91000 3144.86500 (1.0)\n","dc_lower2_ >= dc_base_H : 3139.14000 3113.60500 (1.0)\n","dc_base_3T_rollmax == dc_base_3T : 3144.86500 3144.86500 (1.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9639878273010254\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 24770\n","np.sum(long_open_res == 1) : 21185\n"]},{"output_type":"stream","name":"stdout","text":["en_ex_pairing elapsed time : 0.6317770481109619\n","short_obj.shape : (479, 5)\n","long_obj.shape : (618, 5)\n","idep_plot elapsed time : 0.16860055923461914\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 24770\n","np.sum(long_open_res == 1) : 21185\n","short_base_ <= dc_base_3T : 3148.91000 3144.86500 (0.0)\n","dc_lower2_ >= dc_base_H : 3139.14000 3113.60500 (0.0)\n","dc_base_3T_rollmin == dc_base_3T : 3129.07500 3144.86500 (0.0)\n","long_base_ >= dc_base_3T : 3148.91000 3144.86500 (1.0)\n","dc_lower2_ >= dc_base_H : 3139.14000 3113.60500 (1.0)\n","dc_base_3T_rollmax == dc_base_3T : 3144.86500 3144.86500 (1.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9627509117126465\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 24770\n","np.sum(long_open_res == 1) : 21185\n"]},{"output_type":"stream","name":"stdout","text":["en_ex_pairing elapsed time : 0.6912212371826172\n","short_obj.shape : (468, 5)\n","long_obj.shape : (617, 5)\n","idep_plot elapsed time : 0.17321133613586426\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 24770\n","np.sum(long_open_res == 1) : 21185\n","short_base_ <= dc_base_3T : 3148.91000 3144.86500 (0.0)\n","dc_lower2_ >= dc_base_H : 3139.14000 3113.60500 (0.0)\n","dc_base_3T_rollmin == dc_base_3T : 3129.07500 3144.86500 (0.0)\n","long_base_ >= dc_base_3T : 3148.91000 3144.86500 (1.0)\n","dc_lower2_ >= dc_base_H : 3139.14000 3113.60500 (1.0)\n","dc_base_3T_rollmax == dc_base_3T : 3144.86500 3144.86500 (1.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9641425609588623\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 24770\n","np.sum(long_open_res == 1) : 21185\n"]},{"output_type":"stream","name":"stdout","text":["en_ex_pairing elapsed time : 0.6689321994781494\n","short_obj.shape : (461, 5)\n","long_obj.shape : (614, 5)\n","idep_plot elapsed time : 0.16286373138427734\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 24770\n","np.sum(long_open_res == 1) : 21185\n","short_base_ <= dc_base_3T : 3148.91000 3144.86500 (0.0)\n","dc_lower2_ >= dc_base_H : 3139.14000 3113.60500 (0.0)\n","dc_base_3T_rollmin == dc_base_3T : 3129.07500 3144.86500 (0.0)\n","long_base_ >= dc_base_3T : 3148.91000 3144.86500 (1.0)\n","dc_lower2_ >= dc_base_H : 3139.14000 3113.60500 (1.0)\n","dc_base_3T_rollmax == dc_base_3T : 3144.86500 3144.86500 (1.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9857909679412842\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 24770\n","np.sum(long_open_res == 1) : 21185\n"]},{"output_type":"stream","name":"stdout","text":["en_ex_pairing elapsed time : 0.7075119018554688\n","short_obj.shape : (456, 5)\n","long_obj.shape : (611, 5)\n","idep_plot elapsed time : 0.1581578254699707\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 24770\n","np.sum(long_open_res == 1) : 21185\n","short_base_ <= dc_base_3T : 3148.91000 3144.86500 (0.0)\n","dc_lower2_ >= dc_base_H : 3139.14000 3113.60500 (0.0)\n","dc_base_3T_rollmin == dc_base_3T : 3129.07500 3144.86500 (0.0)\n","long_base_ >= dc_base_3T : 3148.91000 3144.86500 (1.0)\n","dc_lower2_ >= dc_base_H : 3139.14000 3113.60500 (1.0)\n","dc_base_3T_rollmax == dc_base_3T : 3144.86500 3144.86500 (1.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9380497932434082\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 24770\n","np.sum(long_open_res == 1) : 21185\n"]},{"output_type":"stream","name":"stdout","text":["en_ex_pairing elapsed time : 0.751079797744751\n","short_obj.shape : (448, 5)\n","long_obj.shape : (608, 5)\n","idep_plot elapsed time : 0.17187833786010742\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 24770\n","np.sum(long_open_res == 1) : 21185\n","short_base_ <= dc_base_3T : 3148.91000 3144.86500 (0.0)\n","dc_lower2_ >= dc_base_H : 3139.14000 3113.60500 (0.0)\n","dc_base_3T_rollmin == dc_base_3T : 3129.07500 3144.86500 (0.0)\n","long_base_ >= dc_base_3T : 3148.91000 3144.86500 (1.0)\n","dc_lower2_ >= dc_base_H : 3139.14000 3113.60500 (1.0)\n","dc_base_3T_rollmax == dc_base_3T : 3144.86500 3144.86500 (1.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9841048717498779\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 24770\n","np.sum(long_open_res == 1) : 21185\n"]},{"output_type":"stream","name":"stdout","text":["en_ex_pairing elapsed time : 0.787764310836792\n","short_obj.shape : (445, 5)\n","long_obj.shape : (601, 5)\n","idep_plot elapsed time : 0.17628931999206543\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 24770\n","np.sum(long_open_res == 1) : 21185\n","short_base_ <= dc_base_3T : 3148.91000 3144.86500 (0.0)\n","dc_lower2_ >= dc_base_H : 3139.14000 3113.60500 (0.0)\n","dc_base_3T_rollmin == dc_base_3T : 3129.07500 3144.86500 (0.0)\n","long_base_ >= dc_base_3T : 3148.91000 3144.86500 (1.0)\n","dc_lower2_ >= dc_base_H : 3139.14000 3113.60500 (1.0)\n","dc_base_3T_rollmax == dc_base_3T : 3144.86500 3144.86500 (1.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.966123104095459\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 24770\n","np.sum(long_open_res == 1) : 21185\n"]},{"output_type":"stream","name":"stdout","text":["en_ex_pairing elapsed time : 0.8085134029388428\n","short_obj.shape : (437, 5)\n","long_obj.shape : (596, 5)\n","idep_plot elapsed time : 0.16208934783935547\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 24770\n","np.sum(long_open_res == 1) : 21185\n","short_base_ <= dc_base_3T : 3148.91000 3144.86500 (0.0)\n","dc_lower2_ >= dc_base_H : 3139.14000 3113.60500 (0.0)\n","dc_base_3T_rollmin == dc_base_3T : 3129.07500 3144.86500 (0.0)\n","long_base_ >= dc_base_3T : 3148.91000 3144.86500 (1.0)\n","dc_lower2_ >= dc_base_H : 3139.14000 3113.60500 (1.0)\n","dc_base_3T_rollmax == dc_base_3T : 3144.86500 3144.86500 (1.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9386610984802246\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 24770\n","np.sum(long_open_res == 1) : 21185\n"]},{"output_type":"stream","name":"stdout","text":["en_ex_pairing elapsed time : 0.8049943447113037\n","short_obj.shape : (433, 5)\n","long_obj.shape : (590, 5)\n","idep_plot elapsed time : 0.16300320625305176\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 24770\n","np.sum(long_open_res == 1) : 21185\n","short_base_ <= dc_base_3T : 3148.91000 3144.86500 (0.0)\n","dc_lower2_ >= dc_base_H : 3139.14000 3113.60500 (0.0)\n","dc_base_3T_rollmin == dc_base_3T : 3129.07500 3144.86500 (0.0)\n","long_base_ >= dc_base_3T : 3148.91000 3144.86500 (1.0)\n","dc_lower2_ >= dc_base_H : 3139.14000 3113.60500 (1.0)\n","dc_base_3T_rollmax == dc_base_3T : 3144.86500 3144.86500 (1.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9713845252990723\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 24770\n","np.sum(long_open_res == 1) : 21185\n"]},{"output_type":"stream","name":"stdout","text":["en_ex_pairing elapsed time : 0.8506584167480469\n","short_obj.shape : (424, 5)\n","long_obj.shape : (584, 5)\n","idep_plot elapsed time : 0.1704707145690918\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 24770\n","np.sum(long_open_res == 1) : 21185\n","short_base_ <= dc_base_3T : 3148.91000 3144.86500 (0.0)\n","dc_lower2_ >= dc_base_H : 3139.14000 3113.60500 (0.0)\n","dc_base_3T_rollmin == dc_base_3T : 3129.07500 3144.86500 (0.0)\n","long_base_ >= dc_base_3T : 3148.91000 3144.86500 (1.0)\n","dc_lower2_ >= dc_base_H : 3139.14000 3113.60500 (1.0)\n","dc_base_3T_rollmax == dc_base_3T : 3144.86500 3144.86500 (1.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9331722259521484\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 24770\n","np.sum(long_open_res == 1) : 21185\n"]},{"output_type":"stream","name":"stdout","text":["en_ex_pairing elapsed time : 0.8571009635925293\n","short_obj.shape : (423, 5)\n","long_obj.shape : (581, 5)\n","idep_plot elapsed time : 0.17519903182983398\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 24770\n","np.sum(long_open_res == 1) : 21185\n","short_base_ <= dc_base_3T : 3148.91000 3144.86500 (0.0)\n","dc_lower2_ >= dc_base_H : 3139.14000 3113.60500 (0.0)\n","dc_base_3T_rollmin == dc_base_3T : 3129.07500 3144.86500 (0.0)\n","long_base_ >= dc_base_3T : 3148.91000 3144.86500 (1.0)\n","dc_lower2_ >= dc_base_H : 3139.14000 3113.60500 (1.0)\n","dc_base_3T_rollmax == dc_base_3T : 3144.86500 3144.86500 (1.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9658145904541016\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 24770\n","np.sum(long_open_res == 1) : 21185\n"]},{"output_type":"stream","name":"stdout","text":["en_ex_pairing elapsed time : 0.9040534496307373\n","short_obj.shape : (418, 5)\n","long_obj.shape : (576, 5)\n","idep_plot elapsed time : 0.16329479217529297\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 24770\n","np.sum(long_open_res == 1) : 21185\n","short_base_ <= dc_base_3T : 3148.91000 3144.86500 (0.0)\n","dc_lower2_ >= dc_base_H : 3139.14000 3113.60500 (0.0)\n","dc_base_3T_rollmin == dc_base_3T : 3129.07500 3144.86500 (0.0)\n","long_base_ >= dc_base_3T : 3148.91000 3144.86500 (1.0)\n","dc_lower2_ >= dc_base_H : 3139.14000 3113.60500 (1.0)\n","dc_base_3T_rollmax == dc_base_3T : 3144.86500 3144.86500 (1.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9428811073303223\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 24770\n","np.sum(long_open_res == 1) : 21185\n"]},{"output_type":"stream","name":"stdout","text":["en_ex_pairing elapsed time : 0.8887848854064941\n","short_obj.shape : (415, 5)\n","long_obj.shape : (567, 5)\n","idep_plot elapsed time : 0.1681363582611084\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 24770\n","np.sum(long_open_res == 1) : 21185\n","short_base_ <= dc_base_3T : 3148.91000 3144.86500 (0.0)\n","dc_lower2_ >= dc_base_H : 3139.14000 3113.60500 (0.0)\n","dc_base_3T_rollmin == dc_base_3T : 3129.07500 3144.86500 (0.0)\n","long_base_ >= dc_base_3T : 3148.91000 3144.86500 (1.0)\n","dc_lower2_ >= dc_base_H : 3139.14000 3113.60500 (1.0)\n","dc_base_3T_rollmax == dc_base_3T : 3144.86500 3144.86500 (1.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.957233190536499\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 24770\n","np.sum(long_open_res == 1) : 21185\n"]},{"output_type":"stream","name":"stdout","text":["en_ex_pairing elapsed time : 0.9168872833251953\n","short_obj.shape : (413, 5)\n","long_obj.shape : (566, 5)\n","idep_plot elapsed time : 0.16791605949401855\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 24770\n","np.sum(long_open_res == 1) : 21185\n","short_base_ <= dc_base_3T : 3148.91000 3144.86500 (0.0)\n","dc_lower2_ >= dc_base_H : 3139.14000 3113.60500 (0.0)\n","dc_base_3T_rollmin == dc_base_3T : 3129.07500 3144.86500 (0.0)\n","long_base_ >= dc_base_3T : 3148.91000 3144.86500 (1.0)\n","dc_lower2_ >= dc_base_H : 3139.14000 3113.60500 (1.0)\n","dc_base_3T_rollmax == dc_base_3T : 3144.86500 3144.86500 (1.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 1.0004496574401855\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 24770\n","np.sum(long_open_res == 1) : 21185\n"]},{"output_type":"stream","name":"stdout","text":["en_ex_pairing elapsed time : 0.944711446762085\n","short_obj.shape : (412, 5)\n","long_obj.shape : (562, 5)\n","idep_plot elapsed time : 0.16642498970031738\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 24770\n","np.sum(long_open_res == 1) : 21185\n","short_base_ <= dc_base_3T : 3148.91000 3144.86500 (0.0)\n","dc_lower2_ >= dc_base_H : 3139.14000 3113.60500 (0.0)\n","dc_base_3T_rollmin == dc_base_3T : 3129.07500 3144.86500 (0.0)\n","long_base_ >= dc_base_3T : 3148.91000 3144.86500 (1.0)\n","dc_lower2_ >= dc_base_H : 3139.14000 3113.60500 (1.0)\n","dc_base_3T_rollmax == dc_base_3T : 3144.86500 3144.86500 (1.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9513115882873535\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 24770\n","np.sum(long_open_res == 1) : 21185\n"]},{"output_type":"stream","name":"stdout","text":["en_ex_pairing elapsed time : 0.9523379802703857\n","short_obj.shape : (407, 5)\n","long_obj.shape : (557, 5)\n","idep_plot elapsed time : 0.1621994972229004\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 24770\n","np.sum(long_open_res == 1) : 21185\n","short_base_ <= dc_base_3T : 3148.91000 3144.86500 (0.0)\n","dc_lower2_ >= dc_base_H : 3139.14000 3113.60500 (0.0)\n","dc_base_3T_rollmin == dc_base_3T : 3129.07500 3144.86500 (0.0)\n","long_base_ >= dc_base_3T : 3148.91000 3144.86500 (1.0)\n","dc_lower2_ >= dc_base_H : 3139.14000 3113.60500 (1.0)\n","dc_base_3T_rollmax == dc_base_3T : 3144.86500 3144.86500 (1.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9473166465759277\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 24770\n","np.sum(long_open_res == 1) : 21185\n"]},{"output_type":"stream","name":"stdout","text":["en_ex_pairing elapsed time : 0.9986307621002197\n","short_obj.shape : (404, 5)\n","long_obj.shape : (551, 5)\n","idep_plot elapsed time : 0.16042828559875488\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 24770\n","np.sum(long_open_res == 1) : 21185\n","short_base_ <= dc_base_3T : 3148.91000 3144.86500 (0.0)\n","dc_lower2_ >= dc_base_H : 3139.14000 3113.60500 (0.0)\n","dc_base_3T_rollmin == dc_base_3T : 3129.07500 3144.86500 (0.0)\n","long_base_ >= dc_base_3T : 3148.91000 3144.86500 (1.0)\n","dc_lower2_ >= dc_base_H : 3139.14000 3113.60500 (1.0)\n","dc_base_3T_rollmax == dc_base_3T : 3144.86500 3144.86500 (1.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.944298267364502\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 24770\n","np.sum(long_open_res == 1) : 21185\n"]},{"output_type":"stream","name":"stdout","text":["en_ex_pairing elapsed time : 1.0043590068817139\n","short_obj.shape : (402, 5)\n","long_obj.shape : (545, 5)\n","idep_plot elapsed time : 0.17002606391906738\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 24770\n","np.sum(long_open_res == 1) : 21185\n","short_base_ <= dc_base_3T : 3148.91000 3144.86500 (0.0)\n","dc_lower2_ >= dc_base_H : 3139.14000 3113.60500 (0.0)\n","dc_base_3T_rollmin == dc_base_3T : 3129.07500 3144.86500 (0.0)\n","long_base_ >= dc_base_3T : 3148.91000 3144.86500 (1.0)\n","dc_lower2_ >= dc_base_H : 3139.14000 3113.60500 (1.0)\n","dc_base_3T_rollmax == dc_base_3T : 3144.86500 3144.86500 (1.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9653527736663818\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 24770\n","np.sum(long_open_res == 1) : 21185\n"]},{"output_type":"stream","name":"stdout","text":["en_ex_pairing elapsed time : 1.0014395713806152\n","short_obj.shape : (401, 5)\n","long_obj.shape : (544, 5)\n","idep_plot elapsed time : 0.15993070602416992\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 24770\n","np.sum(long_open_res == 1) : 21185\n","short_base_ <= dc_base_3T : 3148.91000 3144.86500 (0.0)\n","dc_lower2_ >= dc_base_H : 3139.14000 3113.60500 (0.0)\n","dc_base_3T_rollmin == dc_base_3T : 3129.07500 3144.86500 (0.0)\n","long_base_ >= dc_base_3T : 3148.91000 3144.86500 (1.0)\n","dc_lower2_ >= dc_base_H : 3139.14000 3113.60500 (1.0)\n","dc_base_3T_rollmax == dc_base_3T : 3144.86500 3144.86500 (1.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9425294399261475\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 24770\n","np.sum(long_open_res == 1) : 21185\n"]},{"output_type":"stream","name":"stdout","text":["en_ex_pairing elapsed time : 1.038013219833374\n","short_obj.shape : (392, 5)\n","long_obj.shape : (540, 5)\n","idep_plot elapsed time : 0.17201018333435059\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 24770\n","np.sum(long_open_res == 1) : 21185\n","short_base_ <= dc_base_3T : 3148.91000 3144.86500 (0.0)\n","dc_lower2_ >= dc_base_H : 3139.14000 3113.60500 (0.0)\n","dc_base_3T_rollmin == dc_base_3T : 3129.07500 3144.86500 (0.0)\n","long_base_ >= dc_base_3T : 3148.91000 3144.86500 (1.0)\n","dc_lower2_ >= dc_base_H : 3139.14000 3113.60500 (1.0)\n","dc_base_3T_rollmax == dc_base_3T : 3144.86500 3144.86500 (1.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9360132217407227\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 24770\n","np.sum(long_open_res == 1) : 21185\n"]},{"output_type":"stream","name":"stdout","text":["en_ex_pairing elapsed time : 1.0659258365631104\n","short_obj.shape : (392, 5)\n","long_obj.shape : (537, 5)\n","idep_plot elapsed time : 0.15919041633605957\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 24770\n","np.sum(long_open_res == 1) : 21185\n","short_base_ <= dc_base_3T : 3148.91000 3144.86500 (0.0)\n","dc_lower2_ >= dc_base_H : 3139.14000 3113.60500 (0.0)\n","dc_base_3T_rollmin == dc_base_3T : 3129.07500 3144.86500 (0.0)\n","long_base_ >= dc_base_3T : 3148.91000 3144.86500 (1.0)\n","dc_lower2_ >= dc_base_H : 3139.14000 3113.60500 (1.0)\n","dc_base_3T_rollmax == dc_base_3T : 3144.86500 3144.86500 (1.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9643282890319824\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 24770\n","np.sum(long_open_res == 1) : 21185\n"]},{"output_type":"stream","name":"stdout","text":["en_ex_pairing elapsed time : 1.112870454788208\n","short_obj.shape : (392, 5)\n","long_obj.shape : (534, 5)\n","idep_plot elapsed time : 0.15703296661376953\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 24770\n","np.sum(long_open_res == 1) : 21185\n","short_base_ <= dc_base_3T : 3148.91000 3144.86500 (0.0)\n","dc_lower2_ >= dc_base_H : 3139.14000 3113.60500 (0.0)\n","dc_base_3T_rollmin == dc_base_3T : 3129.07500 3144.86500 (0.0)\n","long_base_ >= dc_base_3T : 3148.91000 3144.86500 (1.0)\n","dc_lower2_ >= dc_base_H : 3139.14000 3113.60500 (1.0)\n","dc_base_3T_rollmax == dc_base_3T : 3144.86500 3144.86500 (1.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9576876163482666\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 24770\n","np.sum(long_open_res == 1) : 21185\n"]},{"output_type":"stream","name":"stdout","text":["en_ex_pairing elapsed time : 1.1309230327606201\n","short_obj.shape : (389, 5)\n","long_obj.shape : (532, 5)\n","idep_plot elapsed time : 0.16353726387023926\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 24770\n","np.sum(long_open_res == 1) : 21185\n","short_base_ <= dc_base_3T : 3148.91000 3144.86500 (0.0)\n","dc_lower2_ >= dc_base_H : 3139.14000 3113.60500 (0.0)\n","dc_base_3T_rollmin == dc_base_3T : 3129.07500 3144.86500 (0.0)\n","long_base_ >= dc_base_3T : 3148.91000 3144.86500 (1.0)\n","dc_lower2_ >= dc_base_H : 3139.14000 3113.60500 (1.0)\n","dc_base_3T_rollmax == dc_base_3T : 3144.86500 3144.86500 (1.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 1.5115916728973389\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 24770\n","np.sum(long_open_res == 1) : 21185\n"]},{"output_type":"stream","name":"stdout","text":["en_ex_pairing elapsed time : 1.1354894638061523\n","short_obj.shape : (387, 5)\n","long_obj.shape : (527, 5)\n","idep_plot elapsed time : 0.1638190746307373\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 24770\n","np.sum(long_open_res == 1) : 21185\n","short_base_ <= dc_base_3T : 3148.91000 3144.86500 (0.0)\n","dc_lower2_ >= dc_base_H : 3139.14000 3113.60500 (0.0)\n","dc_base_3T_rollmin == dc_base_3T : 3129.07500 3144.86500 (0.0)\n","long_base_ >= dc_base_3T : 3148.91000 3144.86500 (1.0)\n","dc_lower2_ >= dc_base_H : 3139.14000 3113.60500 (1.0)\n","dc_base_3T_rollmax == dc_base_3T : 3144.86500 3144.86500 (1.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9414293766021729\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 24770\n","np.sum(long_open_res == 1) : 21185\n"]},{"output_type":"stream","name":"stdout","text":["en_ex_pairing elapsed time : 1.1774442195892334\n","short_obj.shape : (387, 5)\n","long_obj.shape : (526, 5)\n","idep_plot elapsed time : 0.15984535217285156\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 24770\n","np.sum(long_open_res == 1) : 21185\n","short_base_ <= dc_base_3T : 3148.91000 3144.86500 (0.0)\n","dc_lower2_ >= dc_base_H : 3139.14000 3113.60500 (0.0)\n","dc_base_3T_rollmin == dc_base_3T : 3129.07500 3144.86500 (0.0)\n","long_base_ >= dc_base_3T : 3148.91000 3144.86500 (1.0)\n","dc_lower2_ >= dc_base_H : 3139.14000 3113.60500 (1.0)\n","dc_base_3T_rollmax == dc_base_3T : 3144.86500 3144.86500 (1.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9666767120361328\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 24770\n","np.sum(long_open_res == 1) : 21185\n"]},{"output_type":"stream","name":"stdout","text":["en_ex_pairing elapsed time : 1.1481451988220215\n","short_obj.shape : (387, 5)\n","long_obj.shape : (525, 5)\n","idep_plot elapsed time : 0.1597900390625\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 24770\n","np.sum(long_open_res == 1) : 21185\n","short_base_ <= dc_base_3T : 3148.91000 3144.86500 (0.0)\n","dc_lower2_ >= dc_base_H : 3139.14000 3113.60500 (0.0)\n","dc_base_3T_rollmin == dc_base_3T : 3129.07500 3144.86500 (0.0)\n","long_base_ >= dc_base_3T : 3148.91000 3144.86500 (1.0)\n","dc_lower2_ >= dc_base_H : 3139.14000 3113.60500 (1.0)\n","dc_base_3T_rollmax == dc_base_3T : 3144.86500 3144.86500 (1.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9522268772125244\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 24770\n","np.sum(long_open_res == 1) : 21185\n"]},{"output_type":"stream","name":"stdout","text":["en_ex_pairing elapsed time : 1.2270684242248535\n","short_obj.shape : (385, 5)\n","long_obj.shape : (523, 5)\n","idep_plot elapsed time : 0.17196226119995117\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 24770\n","np.sum(long_open_res == 1) : 21185\n","short_base_ <= dc_base_3T : 3148.91000 3144.86500 (0.0)\n","dc_lower2_ >= dc_base_H : 3139.14000 3113.60500 (0.0)\n","dc_base_3T_rollmin == dc_base_3T : 3129.07500 3144.86500 (0.0)\n","long_base_ >= dc_base_3T : 3148.91000 3144.86500 (1.0)\n","dc_lower2_ >= dc_base_H : 3139.14000 3113.60500 (1.0)\n","dc_base_3T_rollmax == dc_base_3T : 3144.86500 3144.86500 (1.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9616255760192871\n","en_ex_pairing elapsed time : 1.2522556781768799\n","short_obj.shape : (385, 5)\n","long_obj.shape : (521, 5)\n","idep_plot elapsed time : 0.15948081016540527\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1728x576 with 36 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["# from google.colab import output\n","# ------------ survey param ------------ #\n","# itv_num_list = [1, 3, 5, 15]\n","# itv_list = ['15m', '30m', '1h', '4h']\n","# itv_list = ['3m', '5m', '15m', '30m', '1h', '4h']\n","# val_list = np.arange(-0.5, -0.9, -0.1)     # prcn 1\n","val_list = np.arange(-0.0, 1.7, 0.05)  # prcn 2\n","# val_list = np.arange(-0.695, -0.75, -0.005)    # prcn 3\n","# val_list = np.arange(0.944, 0.945, 0.0001)    # prcn 4\n","# val_list = np.arange(70, 80, 1)   # prcn -1\n","# val_list = np.arange(200, 180, -5)   # prcn -2\n","\n","# ------------ get survey_res ------------ #\n","result = []\n","res_shape = (3, 12)  # short, long, both x data\n","config_list_copy = copy.deepcopy(config_list)\n","for set_val in val_list:\n","  # ------------ open 결정 이전의 인자값 ------------ #\n","  # ------ point * mr_res ------ #\n","  # config_list_copy[0].loc_set.zone.degree_list = set_val\n","  # config_list_copy[0].loc_set.point2.wick_score_list = str([set_val])\n","  # config_list_copy[0].loc_set.zone.ir = set_val  \n","  # config_list_copy[0].loc_set.zone.ei_k = set_val  \n","  # config_list_copy[0].loc_set.zone.abs_ratio = set_val  \n","\n","  # ------------ open 결정 이후의 인자값 ------------ #\n","  # ------ utils ------ #\n","  config_list_copy[0].tr_set.out_gap = set_val  \n","  # config_list_copy[0].tr_set.ep_gap = set_val \n","\n","  # ------ entry, exit (ep, tp, out vars.) ------ #\n","  # config_list_copy[0].loc_set.zone.ei_k = set_val\n","  # config_list_copy[0].ep_set.ep_out_tick = set_val  \n"," \n","  for utils_, config_ in zip(utils_list, config_list_copy):\n","    # enlist_rtc(res_df, config_, np_timeidx)\n","    enlist_tr(res_df, config_, np_timeidx)\n","  open_info_df = get_open_info_df(ep_loc_v3, res_df, np_timeidx, ID_list, config_list_copy, id_idx_list)   # point * mr_res 이기 때문에 utils_tr & rtc 의 영향을 충분히 받음\n","\n","  try:\n","    result.append(get_res_v4(res_df, open_info_df, ohlc_list, config_list_copy, np_timeidx, funcs, test_ratio=test_ratio, plot_is=1, signi=True))    \n","  except:\n","    result.append(np.full(res_shape, np.nan))\n","    # pass\n","\n","survey_res_list = [np.array(result)[:, s_i::3] for s_i in range(3)]   # 3 for s, l, b\n","# short_res, long_res, both_res = survey_res_list\n","\n","# ------------ plot survey_res ------------ #\n","title_list = [\"short\", \"long\", \"both\"]\n","sub_title_list = ['prcn', 'wb', 'len_pr', 'dpf', 'wr', 'sr', 'acc_pr', 'sum_pr', 'min_pr', 'liqd', 'acc_mdd', 'sum_mdd']\n","space_ = \" \" * 120\n","\n","fig = plt.figure(figsize=(24, 8))\n","plt.style.use('dark_background')\n","gs = gridspec.GridSpec(nrows=1,\n","                        ncols=3,\n","                        # height_ratios=[1, 1, 1]\n","                      )\n","# nrows, ncols, h_r = 3, 3, [1, 1, 1]\n","nrows, ncols, h_r = 3, 4, [1, 1, 1]\n","# nrows, ncols, h_r = 4, 3, [1, 1, 1, 1]\n","# if d_idx == 0:\n","# else:\n","  # nrows, ncols, h_r = 2, 2, [1, 1]\n","\n","for d_idx, (title_name, survey_res) in enumerate(zip(title_list, survey_res_list)):  \n","  inner_gs = gs[d_idx].subgridspec(nrows=nrows,\n","                        ncols=ncols,\n","                        height_ratios=h_r\n","                      )\n","  for in_idx, (data_, sub_title) in enumerate(zip(survey_res.T, sub_title_list)):\n","    plt.subplot(inner_gs[in_idx])\n","    data = data_.ravel()\n","    valid_idx = ~np.isnan(data)\n","    if np.sum(valid_idx) > 0:\n","      x, y = val_list[valid_idx], data[valid_idx]\n","      plt.plot(x, y)  # 앞에서부터 len(result) 만큼만    \n","      plt.title(sub_title + '_{:.2f}'.format(x[np.argmax(y)]))\n","    else:\n","      plt.title(sub_title)\n","\n","plt.suptitle(space_.join(title_list))\n","plt.show()\n","# print(\"\\n\")"]},{"cell_type":"markdown","metadata":{"id":"aT8AXh50ZLVL"},"source":["### backtrader validation"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"1jNPvoh_ZQ_N"},"outputs":[],"source":["trade_log_name = \"ETHUSDT_1649667322.pkl\"\n","trade_log_dir_path = \"./trade_log\"\n","\n","with open(os.path.join(trade_log_dir_path, trade_log_name), 'rb') as f:\n","  trade_log = pickle.load(f)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":3,"status":"ok","timestamp":1649685020052,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"v5JQhEQYnwoe","outputId":"52dec11f-062e-487a-92bc-18d9e90c2895"},"outputs":[{"data":{"text/plain":["{'last_trading_time': '2022-04-11 20:16:12.851518'}"]},"execution_count":21,"metadata":{},"output_type":"execute_result"}],"source":["trade_log"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":336,"status":"ok","timestamp":1649685114112,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"mnAtFxJJa4AL","outputId":"95004b91-55f1-4a47-ed12-b536fd111aa9"},"outputs":[{"name":"stdout","output_type":"stream","text":["['2022-02-04 07:24:59.999000', '2022-02-17 05:30:59.999000']\n","[]\n"]}],"source":["# 1. ts 에 pair 된 en_p, ex_p 만 비교하면 될 것\n","#   -> open_idx, en_idx, ex_idx 조회하면 될 것\n","\n","pos_side = \"BUY\" # SELL BUY\n","val_obj = short_obj if pos_side == \"SELL\" else long_obj\n","\n","# ------ get idep trade_info ------ #\n","en_ts = list(map(lambda x : str(x), res_df.index[val_obj[2].astype(int).ravel()])) \n","ex_ts = list(map(lambda x : str(x), res_df.index[val_obj[3].astype(int).ravel()])) \n","en_p = val_obj[0].ravel()\n","ex_p = val_obj[1].ravel()\n","\n","# ------ execute ts comparison ------ #\n","logged_en_ts = [k for k, v in trade_log.items() if 'entry' in v if pos_side in v]\n","\n","lacked_ts = [ts for ts in en_ts if not ts in logged_en_ts]   # trade_log 에 없는 거래\n","added_ts = [ts for ts in logged_en_ts if not ts in en_ts]    # trade_log 에만 있는 거래\n","\n","print(lacked_ts)\n","print(added_ts)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"sxUBVa5Cd1tN"},"outputs":[],"source":["# en_p < ex_p\n","# print(len(en_p))\n","# print(len(en_ts))\n","# list(np.array(en_ts)[en_p < ex_p])\n","# list(np.array(en_ts)[en_p > ex_p])"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"h0iwWMzcX1cU"},"outputs":[],"source":["long_open_ = res_df['long_open_{}'.format(config.strat_version)].to_numpy()\n","long_open_ts = list(map(lambda x : str(x), res_df.index[long_open_ == 1]))  "]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":293,"status":"ok","timestamp":1649685562865,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"ZJaZJGQnYnHO","outputId":"0a160e7e-2610-4a1b-997b-8da9bb284768"},"outputs":[{"name":"stdout","output_type":"stream","text":["2022-01-16 23:54:59.999000\n","2022-01-19 07:24:59.999000\n","2022-01-23 06:44:59.999000\n","2022-01-23 06:49:59.999000\n","2022-01-23 10:24:59.999000\n","2022-01-23 14:04:59.999000\n","2022-01-24 06:24:59.999000\n","2022-01-24 06:39:59.999000\n","2022-01-28 08:59:59.999000\n","2022-01-28 12:54:59.999000\n","2022-02-04 07:19:59.999000\n","2022-02-14 22:54:59.999000\n","2022-02-14 23:04:59.999000\n","2022-02-15 11:29:59.999000\n","2022-02-17 05:19:59.999000\n"]}],"source":["long_index = open_info_df.side == 'BUY'\n","\n","for ts in res_df.index[open_info_df.index[long_index]]:\n","  print(ts)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"yRfD6mmcGRo9"},"outputs":[],"source":["# ------ check added_ts ------ #\n","keys = list(trade_log.keys())\n","\n","for k_i in range(len(keys)):\n","  if keys[k_i] in added_ts:\n","    # print(trade_log[keys[k_i]])\n","    # print(trade_log[keys[k_i + 1]])\n","    print(keys[k_i], trade_log[keys[k_i]])\n","    print(keys[k_i + 1], trade_log[keys[k_i + 1]])"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"LF4u9d3taxJD"},"outputs":[],"source":["# 확인해야할 것\n","# 1. en_ts sync (갯수 & 동일)\n","#   a. 누락된 거래 check -> how ?\n","# 2. en_p, ex_p 동일 여부\n","\n","# ------ synced 된 price 에 대한 sync_check ------ #\n","accept_price_gap = 0.1\n","for i in range(len(en_ts)):\n","  try:\n","    print(en_ts[i], trade_log[en_ts[i]][0] - en_p[i])\n","    # print(trade_log[str(ex_ts[i])])\n","    # print(ex_ts[i], trade_log[ex_ts[i]][0] - ex_p[i])\n","    print(ex_ts[i])\n","    print()\n","\n","  except Exception as e:\n","    print(e)\n"]},{"cell_type":"markdown","metadata":{"id":"1GVZ03zDyU2N"},"source":["### legacy"]},{"cell_type":"markdown","metadata":{"id":"IWO7KkqltMFt"},"source":["#### main_functions"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"MY1csdNRLGsk"},"outputs":[],"source":["def get_open_info_df(ep_loc_v2, res_df, np_timeidx, ID_list, config_list, id_idx_list):\n","  start_0 = time.time()\n","  # ------ get mr_res, zone_arr ------ #\n","  short_mr_res_obj = np.array([ep_loc_v2(res_df, config_, np_timeidx, show_detail=True, ep_loc_side=OrderSide.SELL) for config_ in config_list])\n","  long_mr_res_obj = np.array([ep_loc_v2(res_df, config_, np_timeidx, show_detail=True, ep_loc_side=OrderSide.BUY) for config_ in config_list])\n","  short_open_idx_list = [np.where(res_df['short_open_{}'.format(id)].to_numpy() * mr_res)[0] for id, mr_res in zip(ID_list, short_mr_res_obj[:, 0].astype(np.float64))]   # \"point * mr_Res\"\n","  long_open_idx_list = [np.where(res_df['long_open_{}'.format(id)].to_numpy() * mr_res)[0] for id, mr_res in zip(ID_list, long_mr_res_obj[:, 0].astype(np.float64))]  # zip 으로 zone (str) 과 묶어서 dtype 변경됨\n","\n","  # ------ open_info_arr ------ #\n","  short_side_list = [np.full(len(list_), OrderSide.SELL) for list_ in short_open_idx_list]\n","  long_side_list = [np.full(len(list_), OrderSide.BUY) for list_ in long_open_idx_list]\n","\n","  short_zone_list = [zone_res[short_open_idx] for zone_res, short_open_idx in zip(short_mr_res_obj[:, 1], short_open_idx_list)]\n","  long_zone_list = [zone_res[long_open_idx] for zone_res, long_open_idx in zip(long_mr_res_obj[:, 1], long_open_idx_list)]\n","\n","  short_id_list = [np.full(len(list_), id) for id, list_ in zip(ID_list, short_open_idx_list)]\n","  long_id_list = [np.full(len(list_), id) for id, list_ in zip(ID_list, long_open_idx_list)]\n","\n","  selected_id_idx = np.arange(len(id_idx_list))\n","  short_id_idx_list = [np.full(len(list_), id) for id, list_ in zip(selected_id_idx, short_open_idx_list)]\n","  long_id_idx_list = [np.full(len(list_), id) for id, list_ in zip(selected_id_idx, long_open_idx_list)]\n","\n","  # ------ get open_info_df ------ #\n","  #   series 만들어서 short / long 끼리 합치고 둘이 합치고, 중복은 우선 순위 정해서 제거\n","  short_open_df_list = [pd.DataFrame(index=index_, data=np.vstack((data_)).T, columns=['side', 'zone', 'id', 'id_idx']) for index_, data_ in zip(short_open_idx_list, zip(short_side_list, short_zone_list, short_id_list, short_id_idx_list))]\n","  long_open_df_list = [pd.DataFrame(index=index_, data=np.vstack((data_)).T, columns=['side', 'zone', 'id', 'id_idx']) for index_, data_ in zip(long_open_idx_list, zip(long_side_list, long_zone_list, long_id_list, long_id_idx_list))]\n","\n","  open_info_df = pd.concat(short_open_df_list + long_open_df_list)\n","  # ------ sorting + unique ------ #\n","  open_info_df.sort_index(inplace=True)\n","  # print(len(open_info_df))\n","  # print(len(open_info_df))\n","  # open_info_df.head()\n","  print(\"get_open_info_df elapsed time :\", time.time() - start_0)\n","  return open_info_df[~open_info_df.index.duplicated(keep='first')]  # 먼저 순서를 우선으로 지정  "]},{"cell_type":"code","execution_count":37,"metadata":{"id":"eiQ36_SLLE3w","executionInfo":{"status":"ok","timestamp":1650414680083,"user_tz":-540,"elapsed":349,"user":{"displayName":"7th June","userId":"08178289703395036410"}}},"outputs":[],"source":["def get_res_v4(res_df, open_info_df, ohlc_list, config_list, np_timeidx, funcs, test_ratio=0.3, plot_is=True, signi=False):\n","  # ------------ make open_info_list ------------ #\n","  open_idx = open_info_df.index.to_numpy()\n","  len_df = len(res_df)\n","  s_idx = (open_idx < int(len_df * (1 - test_ratio))) == plot_is\n","  s_open_info_df = open_info_df[s_idx]\n","  s_open_idx = open_idx[s_idx]\n","\n","  open_info_list = [s_open_info_df[col_].to_numpy() for col_ in s_open_info_df.columns]\n","  side_arr, zone_arr, id_arr, id_idx_arr = open_info_list\n","\n","  # ------------ get paired_res ------------ #\n","  start_0 = time.time()\n","  paired_res = en_ex_pairing_v5(res_df, s_open_idx, open_info_list, ohlc_list, config_list, np_timeidx, funcs)\n","  # valid_openi_arr, pair_idx_arr, pair_price_arr, lvrg_arr, fee_arr, tpout_arr = paired_res\n","  print(\"en_ex_pairing elapsed time :\", time.time() - start_0)  #  0.37 --> 0.3660471439361572 --> 0.21(lesser if)\n","\n","  # ------------ idep_plot ------------ #\n","  start_0 = time.time()\n","  high, low = ohlc_list[1:3]\n","  res = idep_plot_v12(res_df, len_df, config_list[0], high, low, s_open_idx, side_arr, paired_res, inversion=False, sample_ratio=1 - test_ratio, signi=signi)\n","  print(\"idep_plot elapsed time :\", time.time() - start_0)   # 1.40452 (v6) 1.4311 (v5)\n","\n","  return res"]},{"cell_type":"code","execution_count":38,"metadata":{"id":"8LiKwfiJ4bvM","executionInfo":{"status":"ok","timestamp":1650414681543,"user_tz":-540,"elapsed":1,"user":{"displayName":"7th June","userId":"08178289703395036410"}}},"outputs":[],"source":["def plot_info_v6(gs, gs_idx, sample_len, tr, prcn, rc, bars_in, pr, total_pr, cum_pr, liqd, leverage, title_position, fontsize):\n","  try:\n","    plt.subplot(gs[gs_idx])\n","    idep_res_obj = get_res_info_nb_v2(sample_len, pr, total_pr, cum_pr, liqd)\n","    plt.plot(cum_pr)\n","    plt.plot(idep_res_obj[-1], color='gold')\n","    if sample_len is not None:\n","      plt.axvline(sample_len, alpha=1., linestyle='--', color='#ffeb3b')\n","    # title_str = \"prcn : {:.3f} rc : {:.3f}\\n len_pr : {} dpf : {:.3f}\\n wr : {:.3f} sr : {:.3f}\\n acc_pr : {:.3f} sum_pr : {:.3f}\\n\" +\\\n","    #           \"min_pr : {:.3f} liqd : {:.3f}\\n acc_mdd : -{:.3f} sum_mdd : -{:.3f}\\n leverage {}\"\n","    # title_str = \"tr : {:.3f}\\n prcn : {:.3f}\\n rc : {:.3f}\\n len_pr : {}\\n dpf : {:.3f}\\n wr : {:.3f}\\n sr : {:.3f}\\n acc_pr : {:.3f}\\n sum_pr : {:.3f}\\n\" +\\\n","    #           \"min_pr : {:.3f}\\n liqd : {:.3f}\\n acc_mdd : -{:.3f}\\n sum_mdd : -{:.3f}\\n leverage {}\"\n","    title_str = \"tr : {:.3f}\\n prcn : {:.3f}\\n wave_bias : {:.3f}\\n bars_in : {:.3f}\\n len_pr : {}\\n dpf : {:.3f}\\n wr : {:.3f}\\n sr : {:.3f}\\n acc_pr : {:.3f}\\n sum_pr : {:.3f}\\n\" +\\\n","              \"min_pr : {:.3f}\\n liqd : {:.3f}\\n acc_mdd : -{:.3f}\\n sum_mdd : -{:.3f}\\n leverage {}\"\n","    plt.title(title_str.format(tr, prcn, rc, bars_in, *idep_res_obj[:-1], leverage), position=title_position, fontsize=fontsize)\n","  except Exception as e:\n","    print(\"error in plot_info :\", e)\n","\n","  return gs_idx + 1"]},{"cell_type":"code","source":["def ffill_line(line_, idx_):\n","  len_line = len(line_)\n","  total_en_idx = np.zeros(len_line)\n","  total_en_idx[idx_] = 1\n","  idx_line_ = np.where(total_en_idx, line_, np.nan)\n","  idx_line = pd.Series(idx_line_).ffill().to_numpy()\n","\n","  return idx_line\n","\n","def get_wave_bias(res_df, config, high, low, len_df, short_obj, long_obj):\n","  \n","  short_op_idx = short_obj[-1].astype(int)\n","  short_en_idx = short_obj[2].astype(int)\n","  short_en_tp1 = ffill_line(res_df['short_tp_1_{}'.format(config.strat_version)].to_numpy(), short_op_idx)   # en_idx 에 sync 된 open_idx 를 사용해야함\n","  short_en_out0 = ffill_line(res_df['short_epout_0_{}'.format(config.strat_version)].to_numpy(), short_op_idx)\n","\n","  long_op_idx = long_obj[-1].astype(int)\n","  long_en_idx = long_obj[2].astype(int)\n","  long_en_tp1 = ffill_line(res_df['long_tp_1_{}'.format(config.strat_version)].to_numpy(), long_op_idx)\n","  long_en_out0 = ffill_line(res_df['long_epout_0_{}'.format(config.strat_version)].to_numpy(), long_op_idx)\n","\n","  bias_info_tick = config.tr_set.bias_info_tick\n","\n","  # 1. min 에 초점을 맞추는 거니까, touch 없을시 len_df 로 설정\n","  # 2. future_data 사용이니까, shift(-bias_info_tick) 설정\n","  # 3. entry 다음 idx 부터 -> tp & out 체결 logic 이 현재 entry_idx 부터 되어있어서 취소\n","  last_idx = len_df - 1\n","  short_en_tp1_touch_idx = pd.Series(np.where(low <= short_en_tp1, np.arange(len_df), last_idx)).rolling(bias_info_tick, min_periods=1).min().shift(-bias_info_tick).to_numpy()[short_en_idx]  \n","  short_en_out0_touch_idx = pd.Series(np.where(high >= short_en_out0, np.arange(len_df), last_idx)).rolling(bias_info_tick, min_periods=1).min().shift(-bias_info_tick).to_numpy()[short_en_idx]\n","\n","  long_en_tp1_touch_idx = pd.Series(np.where(high >= long_en_tp1, np.arange(len_df), last_idx)).rolling(bias_info_tick, min_periods=1).min().shift(-bias_info_tick).to_numpy()[long_en_idx]\n","  long_en_out0_touch_idx = pd.Series(np.where(low <= long_en_out0, np.arange(len_df), last_idx)).rolling(bias_info_tick, min_periods=1).min().shift(-bias_info_tick).to_numpy()[long_en_idx]\n","\n","  short_true_bias_idx = short_en_tp1_touch_idx < short_en_out0_touch_idx  # true_bias 의 조건\n","  long_true_bias_idx = long_en_tp1_touch_idx < long_en_out0_touch_idx\n","\n","  short_false_bias_idx = short_en_tp1_touch_idx > short_en_out0_touch_idx  # false_bias 의 조건\n","  long_false_bias_idx = long_en_tp1_touch_idx > long_en_out0_touch_idx\n","\n","  # return short_true_bias_idx.ravel(), short_false_bias_idx.ravel(), long_true_bias_idx.ravel(), long_false_bias_idx.ravel()\n","  return short_true_bias_idx, short_false_bias_idx, long_true_bias_idx, long_false_bias_idx, short_en_tp1[short_en_idx], short_en_out0[short_en_idx], long_en_tp1[long_en_idx], long_en_out0[long_en_idx]\n","\n","  \n","def wave_bias(true_idx, false_idx):  # 정확하게 하려고, true & false 로 기준함\n","    true_sum = np.sum(true_idx)\n","    false_sum = np.sum(false_idx)\n","    return true_sum / (true_sum + false_sum)"],"metadata":{"id":"aFpEbTaECnGW"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":39,"metadata":{"id":"xafHpMLwESKf","executionInfo":{"status":"ok","timestamp":1650414684372,"user_tz":-540,"elapsed":363,"user":{"displayName":"7th June","userId":"08178289703395036410"}}},"outputs":[],"source":["def idep_plot_v12(res_df, len_df, config, high, low, open_idx, side_arr, paired_res, inversion=False, sample_ratio=0.7, title_position=(0.5, 0.5), fontsize=15, signi=False):\n","    if not signi:\n","        plt.style.use(['dark_background', 'fast'])\n","        fig = plt.figure(figsize=(24, 8))\n","        gs = gridspec.GridSpec(nrows=2,  # row 몇 개\n","                               ncols=3,  # col 몇 개\n","                               height_ratios=[10, 1]\n","                               # height_ratios=[10, 10, 1]\n","                               )\n","    gs_idx = 0\n","    # plt.suptitle(key)\n","    \n","    p_ranges, p_qty_ratio = literal_eval(config.tp_set.p_ranges), literal_eval(config.tp_set.p_qty_ratio)\n","    assert np.sum(p_qty_ratio) == 1.0\n","    assert len(p_ranges) == len(p_qty_ratio)\n","\n","    if sample_ratio is not None:\n","      sample_len = int(len_df * sample_ratio)\n","    else:\n","      sample_len = len_df\n","\n","    # ------ short & long data preparation ------ #\n","    # start_0 = time.time()\n","    point1_arr, valid_openi_arr, pair_idx_arr, pair_price_arr, lvrg_arr, fee_arr, tpout_arr, tr_arr = paired_res    \n","    assert len(valid_openi_arr) != 0, \"assert len(valid_openi_arr) != 0\"    \n","    short_valid_openi_idx = np.where(side_arr[valid_openi_arr] == OrderSide.SELL)[0]  # valid_openi_arr 에 대한 idx, # side_arr,\n","    long_valid_openi_idx = np.where(side_arr[valid_openi_arr] == OrderSide.BUY)[0]\n","\n","    valid_open_idx = open_idx[valid_openi_arr].reshape(-1, 1)\n","\n","    short_obj = np.hstack((pair_price_arr, pair_idx_arr, valid_open_idx))[short_valid_openi_idx]\n","    long_obj = np.hstack((pair_price_arr, pair_idx_arr, valid_open_idx))[long_valid_openi_idx]\n","    both_obj = np.vstack((short_obj, long_obj))\n","    print(\"short_obj.shape :\", short_obj.shape)\n","    print(\"long_obj.shape :\", long_obj.shape)\n","\n","    short_obj, long_obj, both_obj = [np.split(obj_, 5, axis=1) for obj_ in [short_obj, long_obj, both_obj]]\n","\n","    short_point1_arr, long_point1_arr = [point1_arr[openi_idx_].reshape(-1, 1) for openi_idx_ in [short_valid_openi_idx, long_valid_openi_idx]]\n","    short_lvrg_arr, long_lvrg_arr = [lvrg_arr[openi_idx_].reshape(-1, 1) for openi_idx_ in [short_valid_openi_idx, long_valid_openi_idx]]\n","    short_fee_arr, long_fee_arr = [fee_arr[openi_idx_].reshape(-1, 1) for openi_idx_ in [short_valid_openi_idx, long_valid_openi_idx]]\n","    short_tpout_arr, long_tpout_arr = [tpout_arr[openi_idx_] for openi_idx_ in [short_valid_openi_idx, long_valid_openi_idx]]\n","    # short_bias_arr, long_bias_arr = [bias_arr[openi_idx_] for openi_idx_ in [short_valid_openi_idx, long_valid_openi_idx]]\n","    short_tr_arr, long_tr_arr = [tr_arr[openi_idx_] for openi_idx_ in [short_valid_openi_idx, long_valid_openi_idx]]\n","    # print(\"long_bias_arr.shape :\", long_bias_arr.shape)    \n","    # print(\"elapsed time :\", time.time() - start_0)\n","\n","    short_true_bias_idx, short_false_bias_idx, long_true_bias_idx, long_false_bias_idx, short_en_tp1, short_en_out0, long_en_tp1, long_en_out0 = \\\n","    get_wave_bias(res_df, config, high, low, len_df, short_obj, long_obj)\n","\n","    len_short, len_long = len(short_valid_openi_idx), len(long_valid_openi_idx)\n","\n","    # ------ plot_data ------ #\n","    try:\n","      # start_0 = time.time()      \n","      if len_short == 0:\n","        short_pr = []\n","        gs_idx += 1\n","      else:\n","        short_tr = short_tr_arr.mean()\n","        short_pr, short_liqd = get_pr_v3(OrderSide.SELL, high, low, short_obj, short_tpout_arr, short_lvrg_arr, short_fee_arr, p_ranges, p_qty_ratio, inversion)\n","        short_total_pr = to_total_pr(len_df, short_pr, short_obj[-2])\n","        short_cum_pr = np.cumprod(short_total_pr)\n","        # short_liqd = liquidation_v2(OrderSide.SELL, h, short_obj[:4], short_lvrg_arr, short_fee_arr)\n","        short_prcn, short_rc = precision(short_pr, short_true_bias_idx), wave_bias(short_true_bias_idx, short_false_bias_idx)\n","        short_trade_ticks = np.mean(short_obj[-2] - short_obj[-1])\n","        if signi:\n","          short_idep_res_obj = (short_prcn, short_rc) + get_res_info_nb_v2(sample_len, short_pr, short_total_pr, short_cum_pr, short_liqd)\n","        else:\n","          gs_idx = plot_info_v6(gs, gs_idx, sample_len, short_tr, short_prcn, short_rc, short_trade_ticks, short_pr, short_total_pr, short_cum_pr, short_liqd, short_lvrg_arr[-1], title_position, fontsize)\n","      # print(\"elapsed time :\", time.time() - start_0)\n","\n","    except Exception as e:\n","      gs_idx += 1\n","      print(\"error in short plot_data :\", e)\n","\n","    try:\n","      # start_0 = time.time()   \n","      if len_long == 0:\n","        long_pr = []\n","        gs_idx += 1\n","      else:\n","        long_tr = long_tr_arr.mean()\n","        long_pr, long_liqd = get_pr_v3(OrderSide.BUY, high, low, long_obj, long_tpout_arr, long_lvrg_arr, long_fee_arr, p_ranges, p_qty_ratio, inversion)\n","        long_total_pr = to_total_pr(len_df, long_pr, long_obj[-2])\n","        long_cum_pr = np.cumprod(long_total_pr)\n","        # long_liqd = liquidation_v2(OrderSide.BUY, l, long_obj[:4], long_lvrg_arr, long_fee_arr)\n","        long_prcn, long_rc = precision(long_pr, long_true_bias_idx), wave_bias(long_true_bias_idx, long_false_bias_idx)\n","        long_trade_ticks = np.mean(long_obj[-2] - long_obj[-1])\n","        if signi:\n","          long_idep_res_obj = (long_prcn, long_rc) + get_res_info_nb_v2(sample_len, long_pr, long_total_pr, long_cum_pr, long_liqd)\n","        else:\n","          gs_idx = plot_info_v6(gs, gs_idx, sample_len, long_tr, long_prcn, long_rc, long_trade_ticks, long_pr, long_total_pr, long_cum_pr, long_liqd, long_lvrg_arr[-1], title_position, fontsize)\n","      # print(\"elapsed time :\", time.time() - start_0)\n","    except Exception as e:\n","      gs_idx += 1\n","      print(\"error in long plot_data :\", e)\n","\n","    \n","    try:\n","      # start_0 = time.time()\n","      if len_short * len_long == 0:\n","        both_pr = []\n","        gs_idx += 1\n","      else:\n","        both_tr = (short_tr + long_tr) / 2\n","        both_pr = np.vstack((short_pr, long_pr))  # for 2d arr, obj 를 1d 로 만들지 않는 이상, pr 은 2d 유지될 것\n","        both_total_pr = to_total_pr(len_df, both_pr, both_obj[-2])\n","        both_cum_pr = np.cumprod(both_total_pr)\n","        both_liqd = min(short_liqd, long_liqd)\n","        both_true_bias_idx = np.vstack((short_true_bias_idx, long_true_bias_idx))  # vstack for 2d arr\n","        both_false_bias_idx = np.vstack((short_false_bias_idx, long_false_bias_idx))\n","        both_prcn, both_rc = precision(both_pr, both_true_bias_idx), wave_bias(both_true_bias_idx, both_false_bias_idx)\n","        both_trade_ticks = np.mean(both_obj[-2] - both_obj[-1])\n","        if signi:\n","          both_idep_res_obj = (both_prcn, both_rc) + get_res_info_nb_v2(sample_len, both_pr, both_total_pr, both_cum_pr, both_liqd)\n","        else:\n","          gs_idx = plot_info_v6(gs, gs_idx, sample_len, both_tr, both_prcn, both_rc, both_trade_ticks, both_pr, both_total_pr, both_cum_pr, both_liqd, lvrg_arr[-1], title_position, fontsize)\n","      # print(\"elapsed time :\", time.time() - start_0)\n","    except Exception as e:\n","      gs_idx += 1\n","      print(\"error in both plot_data :\", e)\n","\n","    if not signi:\n","      if len_short * len_long > 0:\n","        for obj, cum_pr in zip([short_obj, long_obj, both_obj], [short_cum_pr, long_cum_pr, both_cum_pr]):\n","          try:\n","            # start_0 = time.time()\n","            gs_idx = frq_dev_plot_v3(gs, gs_idx, len_df, sample_len, obj[-2], cum_pr[-1], fontsize)\n","            # print(\"elapsed time :\", time.time() - start_0)          \n","          except Exception as e:\n","            gs_idx += 1\n","            print(\"error in frq_dev_plot_v3 :\", e)\n","        plt.show()\n","        plt.close()\n","\n","      return short_pr, short_obj, short_lvrg_arr, short_fee_arr, short_tpout_arr, short_true_bias_idx, short_false_bias_idx, short_point1_arr, short_en_tp1, short_en_out0, \\\n","      long_pr, long_obj, long_lvrg_arr, long_fee_arr, long_tpout_arr, long_true_bias_idx, long_false_bias_idx, long_point1_arr, long_en_tp1, long_en_out0\n","        \n","    else:\n","        return [short_idep_res_obj[:-1], long_idep_res_obj[:-1], both_idep_res_obj[:-1]]"]},{"cell_type":"markdown","metadata":{"id":"EFyWTuscH8VH"},"source":["#### get paired_res function"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"qfbtFVMR01UJ"},"outputs":[],"source":["def en_ex_pairing_v5(res_df, open_idx, open_info_list, ohlc_list, config_list, np_timeidx, funcs):  # 이미 충분히 줄여놓은 idx 임\n","    side_arr, zone_arr, id_arr, id_idx_arr = open_info_list\n","    id_idx_arr = id_idx_arr.astype(int)\n","\n","    ep_out, ep_loc_point2, lvrg_set = funcs\n","\n","    point1_list, valid_openi_list, pair_idx_list, pair_price_list, lvrg_list, fee_list, tpout_list, tr_list = [[] for li in range(8)]\n","    len_df = len(res_df)\n","    len_open_idx = len(open_idx)\n","    i, open_i = 0, -1  # i for total_res_df indexing\n","\n","    while 1:\n","        # ------------ entry phase ------------ #\n","        open_i += 1  # 확인 끝났으면 조기 이탈(+1), 다음 open_idx 조사 진행\n","        if open_i >= len_open_idx:\n","            break\n","\n","        # ------ ep_loc ------ #\n","        op_idx = open_idx[open_i]  # open_i 는 i 와 별개로 운영\n","        if op_idx < i:  # i = 이전 거래 끝난후의 res_df index - \"거래 종료후 거래 시작\", '<' : 거래 종료시점 진입 가능하다는 의미\n","            continue\n","\n","        # ------ dynamic data by ID ------ #\n","        #     1. 해당 id 로 config 재할당해야함\n","        id_idx = id_idx_arr[open_i]\n","        config = config_list[id_idx]\n","        strat_version = config.strat_version\n","        open_side = side_arr[open_i]\n","\n","        side_pos = 'short' if open_side == OrderSide.SELL else 'long'\n","        tp_arr = res_df['{}_tp_{}'.format(side_pos, strat_version)].to_numpy()  # => eptpout arr_list 만들어서 꺼내 사용하면 될 것\n","        point_idxgap_arr = res_df['{}_point_idxgap_{}'.format(side_pos, strat_version)].to_numpy()\n","\n","        ep_arr = res_df['{}_ep_{}'.format(side_pos, strat_version)].to_numpy()  # Todo - while loop 내에서 to_numpy() 반복하느니, pd_indexing 이 낫지 않을까\n","        out_arr = res_df['{}_out_{}'.format(side_pos, strat_version)].to_numpy()\n","        # bias_info_arr = res_df['{}_bias_info_{}'.format(side_pos, strat_version)].to_numpy()  # ex. rolling(entry ~ end)'s high\n","        # bias_thresh_arr = res_df['{}_bias_thresh_{}'.format(side_pos, strat_version)].to_numpy()  # ex. close + dc_T20 * 0.5\n","        tr_arr = res_df['{}_tr_{}'.format(side_pos, strat_version)].to_numpy()\n","\n","        # ------ ei_k & point2 ------ #\n","        i = op_idx + 1  # open_signal 이 close_bar.shift(1) 이라고 가정하고 다음 bar 부터 체결확인한다는 의미\n","        if i >= len_df:  # res_df 의 last_index 까지 돌아야함\n","            break\n","\n","        # ------ point1 & 2's tp_j ------ #\n","        point_idxgap = point_idxgap_arr[op_idx]\n","        if np.isnan(point_idxgap):\n","            continue\n","        else:\n","            # ------ allow point2 only next to point1 ------ #\n","            open_arr = res_df['{}_open_{}'.format(side_pos, strat_version)].to_numpy()\n","            tp_j = int(op_idx - point_idxgap)\n","            if np.sum(open_arr[tp_j:op_idx]) != 0:\n","                continue\n","\n","        exec_j, ep_j, tp_j, out_j, entry_done, en_p, fee = check_eik_point2_exec_v3(res_df, config, op_idx, tp_j, len_df, open_side,\n","                                                                                 [*ohlc_list, ep_arr], ep_out, ep_loc_point2)\n","        i = exec_j\n","\n","        if not entry_done:\n","            continue\n","\n","        # ------ leverage ------ #\n","        out = out_arr[out_j]  # lvrg_set use out on out_j\n","        leverage = lvrg_set(res_df, config, open_side, en_p, out, fee)  # res_df 변수 사용됨 - 주석 처리 된 상태일뿐\n","        if leverage is None:\n","            continue\n","\n","        exit_done, cross_on = 0, 0\n","        # ------ check tpout_onexec ------ #\n","        # if not config.ep_set.static_ep and config.ep_set.entry_type == \"LIMIT\" and config.ep_set.tpout_onexec:\n","        if config.ep_set.entry_type == \"LIMIT\":\n","            if config.tp_set.tp_onexec:  # dynamic 은 tp_onexec 사용하는 의미가 없음\n","                tp_j = exec_j\n","            if config.out_set.out_onexec:  # dynamic 은 out_onexec 사용하는 의미가 없음\n","                out_j = exec_j\n","\n","        while 1:\n","            # ------------ exit phase ------------ #\n","            if not config.tp_set.static_tp:  # 앞으로 왠만하면 static 만 사용할 예정\n","                tp_j = i\n","            if not config.out_set.static_out:\n","                out_j = i\n","\n","            # ------------ tp ------------ #\n","            if not config.tp_set.non_tp and i != exec_j:\n","                exit_done, ex_p, fee = check_limit_tp_exec(res_df, config, open_i, i, tp_j, len_df, fee, open_side, exit_done,\n","                                                           [*ohlc_list, [tp_arr]])  # 여기서는 j -> i 로 변경해야함\n","                # if config.tp_set.tp_type in ['LIMIT']:  # 'BOTH' -> 앞으로는, LIMIT 밖에 없을거라 주석처리함\n","                # if not exit_done and config.tp_set.tp_type in ['MARKET', 'BOTH']:\n","\n","            # ------------ out ------------ #\n","            # ------ signal_out ------ #\n","            if not exit_done:\n","                exit_done, cross_on, ex_p, fee = check_market_out_exec_v2(config, res_df, np_timeidx, open_i, i, len_df, fee, open_side, cross_on, exit_done)\n","            # ------ hl_out ------ #\n","            if config.out_set.hl_out != \"None\":\n","                if not exit_done:  # and i != len_df - 1:\n","                    exit_done, ex_p, fee = check_out(config, open_i, i, out_j, len_df, fee, open_side, exit_done, [*ohlc_list, out_arr])\n","\n","            if exit_done:  # 이 phase 는 exit_phase 뒤에도 있어야할 것 - entry_done var. 사용은 안하겠지만\n","                # ------ append dynamic vars. ------ #\n","                point1_list.append(tp_j)\n","                valid_openi_list.append(open_i)  # side, zone, start_ver arr 모두 openi_list 로 접근하기 위해 open_i 를 담음\n","                pair_idx_list.append([exec_j, i])  # entry & exit (체결 기준임)\n","                pair_price_list.append([en_p, ex_p])\n","                lvrg_list.append(leverage)\n","                fee_list.append(fee)\n","                tpout_list.append([tp_arr[tp_j], out_arr[out_j]])  # for tpout_line plot_check\n","                # bias_list.append([bias_info_arr[exec_j], bias_thresh_arr[exec_j]])  # backtest 에서만 가능한 future_data 사용\n","                # bias_list.append([bias_info_arr[exec_j], tp_arr[tp_j]])  # bias_info 는 entry_idx 부터 & tp = bias_thresh\n","                tr_list.append(tr_arr[op_idx])\n","\n","                # open_i += 1  # 다음 open_idx 조사 진행\n","                break\n","\n","            # 1. 아래있으면, 체결 기준부터 tp, out 허용 -> tp 가 entry_idx 에 체결되는게 다소 염려되기는 함, 일단 진행 (그런 case 가 많지 않았으므로)\n","            # 2. 위에있으면, entry 다음 tick 부터 exit 허용\n","            i += 1\n","            if i >= len_df:  # res_df 의 last_index 까지 돌아야함\n","                break\n","\n","        if i >= len_df:  # or open_i >= len_open_idx:  # res_df 의 last_index 까지 돌아야함\n","            break\n","        else:\n","            continue\n","\n","    return np.array(point1_list), np.array(valid_openi_list), np.array(pair_idx_list), np.array(pair_price_list), np.array(lvrg_list), np.array(\n","        fee_list), np.array(tpout_list), np.array(tr_list)\n","\n","\n","def check_eik_point2_exec_v3(res_df, config, op_idx, tp_j, len_df, open_side, np_datas, ep_out, ep_loc_point2):\n","    o, h, l, c, ep_arr = np_datas\n","    ep_j = op_idx\n","    # tp_j = op_idx\n","    out_j = op_idx\n","\n","    strat_version = config.strat_version    \n","    allow_ep_in = 0 if config.ep_set.point2.use_point2 else 1\n","    entry_done = 0\n","    ep = None\n","\n","    if config.ep_set.entry_type == \"LIMIT\":\n","        fee = config.trader_set.limit_fee\n","\n","        for e_j in range(op_idx + 1, len_df):\n","            # ------ index setting for dynamic options ------ #\n","            if not config.ep_set.static_ep:\n","                ep_j = e_j  # dynamic_ep 를 위한 ep_index var.\n","                out_j = e_j  # dynamic_out 를 위한 out_index var. - 조건식이 static_ep 와 같이 있는 이유 모름 => dynamic_lvrg 로 사료됨\n","\n","            if not config.tp_set.static_tp:\n","                tp_j = e_j\n","\n","            # ------ ei_k ------ # - limit 사용하면 default 로 ei_k 가 존재해야함\n","            if ep_out(res_df, config, op_idx, e_j, tp_j, [h, l], open_side):\n","              break\n","\n","            # ------ point2 ------ #\n","            if not allow_ep_in:\n","                allow_ep_in, out_j = ep_loc_point2(res_df, config, e_j, out_j, side=OrderSide.SELL)\n","                if allow_ep_in:\n","                  if config.ep_set.point2.entry_type == \"LIMIT\":\n","                    ep_j = e_j\n","                    # print(\"e_j in point2 :\", e_j)\n","                    continue\n","\n","            # ------ check ep_exec ------ #\n","            if allow_ep_in:\n","              if config.ep_set.point2.use_point2 and config.ep_set.point2.entry_type == 'MARKET':\n","                entry_done = 1\n","                ep = c[e_j]\n","                break\n","              else:\n","                if open_side == OrderSide.SELL:\n","                    if h[e_j] >= ep_arr[ep_j]:\n","                        entry_done = 1\n","                        ep = ep_arr[ep_j]\n","                        if o[e_j] >= ep_arr[ep_j]:  # open comp 는 결국, 수익률에 얹어주는 logic (반보수) -> 사용 보류\n","                            ep = o[e_j]\n","                        break\n","                else:\n","                    if l[e_j] <= ep_arr[ep_j]:\n","                        entry_done = 1\n","                        ep = ep_arr[ep_j]\n","                        if o[e_j] <= ep_arr[ep_j]:\n","                            ep = o[e_j]\n","                        break\n","\n","    else:  # market entry\n","        e_j = op_idx + 1\n","        entry_done = 1\n","        ep = c[op_idx]\n","        fee = config.trader_set.market_fee\n","\n","    return e_j, ep_j, tp_j, out_j, entry_done, ep, fee  # 다음 start_i <-- e_j 로 변경\n","    #   e_j => 다음 phase 의 시작 index <-> ep_j : ep 의 기준 index\n","    #   ep_j, tp_j, out_j 가 return 되어야함 - exit phase 에서 이어가기 위함\n","\n","\n","def check_limit_tp_exec(res_df, config, open_i, j, tp_j, len_df, fee, open_side, exit_done, np_datas):\n","    o, h, l, c, tps = np_datas\n","    tp = None\n","    strat_version = config.strat_version\n","    len_tps = len(tps)\n","\n","    for tp_i, tp_arr in enumerate(tps):\n","        #     decay adjustment    #\n","        #     tp_j includes dynamic_j - functionalize  #\n","        try:\n","            if config.tr_set.decay_gap != \"None\":\n","                decay_share = (j - open_i) // config.tp_set.decay_term\n","                decay_remain = (j - open_i) % config.tp_set.decay_term\n","                if j != open_i and decay_remain == 0:\n","                    if open_side == OrderSide.SELL:\n","                        tp_arr[tp_j] += res_df['short_tp_gap_{}'.format(strat_version)].iloc[open_i] * config.tr_set.decay_gap * decay_share\n","                    else:\n","                        tp_arr[tp_j] -= res_df['long_tp_gap_{}'.format(strat_version)].iloc[open_i] * config.tr_set.decay_gap * decay_share\n","        except:\n","            pass\n","\n","        if open_side == OrderSide.SELL:\n","            if l[j] <= tp_arr[tp_j]:  # and partial_tp_cnt == tp_i:  # we use static tp now\n","                # if l[j] <= tp_arr[j] <= h[j]: --> 이건 잘못되었음\n","                # partial_tp_cnt += 1 --> partial_tp 보류\n","\n","                # ------ dynamic tp ------ #\n","                if tp_arr[j] != tp_arr[j - 1] and not config.tp_set.static_tp:\n","                    # tp limit 이 불가한 경우 - open 이 이미, tp 를 넘은 경우\n","                    if o[j] < tp_arr[j]:\n","                        tp = o[j]\n","                    # tp limit 이 가능한 경우 - open 이 아직, tp 를 넘지 않은 경우\n","                    else:\n","                        tp = tp_arr[j]\n","                # ------ static tp ------ #\n","                else:\n","                    #   tp limit 이 불가한 경우 - open 이 이미, tp 를 넘은 경우\n","                    if o[j] < tp_arr[tp_j]:  # static 해놓고 decay 사용하면 dynamic 이니까\n","                        if config.tr_set.decay_gap != \"None\" and decay_remain == 0:\n","                            tp = o[j]  # tp_j -> open_i 를 가리키기 때문에 decay 는 한번만 진행되는게 맞음\n","                        else:\n","                            tp = tp_arr[tp_j]\n","                    else:\n","                        tp = tp_arr[tp_j]\n","\n","                if tp_i == len_tps - 1:\n","                    exit_done = 1  # partial 을 고려해 exit_done = 1 상태는 tp_i 가 last_index 로 체결된 경우만 해당\n","\n","        else:\n","            if h[j] >= tp_arr[tp_j]:\n","                # ------ dynamic tp ------ #\n","                if tp_arr[j] != tp_arr[j - 1] and not config.tp_set.static_tp:\n","                    if o[j] > tp_arr[j]:\n","                        tp = o[j]\n","                    else:\n","                        tp = tp_arr[j]\n","\n","                # ------ static tp ------ #\n","                else:\n","                    if o[j] > tp_arr[tp_j]:\n","                        if config.tr_set.decay_gap != \"None\" and decay_remain == 0:\n","                            tp = o[j]\n","                        else:\n","                            tp = tp_arr[tp_j]\n","                    else:\n","                        tp = tp_arr[tp_j]\n","\n","                if tp_i == len_tps - 1:\n","                    exit_done = 1  # partial 을 고려해 exit_done = 1 상태는 tp_i 가 last_index 로 체결된 경우만 해당\n","\n","    if exit_done:\n","        fee += config.trader_set.limit_fee\n","\n","    return exit_done, tp, fee\n","\n","\n","def check_market_out_exec_v2(config, res_df, np_timeidx, open_i, j, len_df, fee, open_side, cross_on, exit_done):    \n","    close = res_df['close'].to_numpy()\n","    ex_p = None\n","    strat_version = config.strat_version\n","\n","    # ------ timestamp ------ #\n","    if config.out_set.tf_exit != \"None\":\n","        if np_timeidx[j] % config.out_set.tf_exit == config.out_set.tf_exit - 1 and j != open_i:\n","            exit_done = 1\n","\n","    # ------ rsi ------ # -> vectorize 가능함 => 추후 적용\n","    if config.out_set.rsi_exit:\n","        rsi_T = res_df['rsi_T'].to_numpy()\n","\n","        if open_side == OrderSide.SELL:\n","            if (rsi_T[j - 1] >= 50 - config.loc_set.point.osc_band) & (rsi_T[j] < 50 - config.loc_set.point.osc_band):\n","                exit_done = 1\n","        else:\n","            if (rsi_T[j - 1] <= 50 + config.loc_set.point.osc_band) & (rsi_T[j] > 50 + config.loc_set.point.osc_band):\n","                exit_done = 1\n","\n","    # ------ heikin_ashi ------ #\n","    # if strat_version in ['v3_3']:\n","    #     if open_side == OrderSide.SELL:\n","    #       if (ha_o[j] < ha_c[j]):# & (ha_o[j] == ha_l[j]):   # 양봉 출현\n","    #           exit_done = 1\n","    #     else:\n","    #       if (ha_o[j] > ha_c[j]):# & (ha_o[j] == ha_h[j]):  # 음봉 출현\n","    #           exit_done = 1\n","\n","    # ------------ early out ------------ #\n","    # ------ bb ------ # --> cross_on 기능은 ide latency 개선 여부에 해당되지 않음\n","    if strat_version in ['v5_2']:\n","        bb_upper_5T = res_df['bb_upper_5T'].to_numpy()\n","        bb_lower_5T = res_df['bb_lower_5T'].to_numpy()\n","\n","        if open_side == OrderSide.SELL:\n","            if close[j] < bb_lower_5T[j] < close[j - 1]:\n","                cross_on = 1\n","            if cross_on == 1 and close[j] > bb_upper_5T[j] > close[j - 1]:\n","                exit_done = 1\n","        else:\n","            if close[j] > bb_upper_5T[j] > close[j - 1]:\n","                cross_on = 1\n","            if cross_on == 1 and close[j] < bb_lower_5T[j] < close[j - 1]:\n","                exit_done = 1\n","\n","    if exit_done:\n","        ex_p = close[j]\n","        fee += config.trader_set.market_fee\n","\n","    return exit_done, cross_on, ex_p, fee\n","\n","\n","def check_out(config, open_i, j, out_j, len_df, fee, open_side, exit_done, np_datas):\n","    o, h, l, c, out_arr = np_datas\n","    ex_p = None\n","\n","    if config.out_set.hl_out:\n","        if open_side == OrderSide.SELL:\n","            if h[j] >= out_arr[out_j]:  # check out only once\n","                exit_done = 1\n","        else:\n","            if l[j] <= out_arr[out_j]:  # check out only once\n","                exit_done = 1\n","    else:  # close_out\n","        if open_side == OrderSide.SELL:\n","            if c[j] >= out_arr[out_j]:  # check out only once\n","                exit_done = 1\n","        else:\n","            if c[j] <= out_arr[out_j]:  # check out only once\n","                ex_p = c[j]\n","                exit_done = 1\n","\n","    if exit_done:\n","        if config.out_set.hl_out:\n","            ex_p = out_arr[out_j]\n","        else:\n","            ex_p = c[j]\n","\n","        if open_side == OrderSide.SELL:\n","            if o[j] >= out_arr[out_j]:\n","                ex_p = o[j]\n","        else:\n","            if o[j] <= out_arr[out_j]:\n","                ex_p = o[j]\n","\n","        fee += config.trader_set.market_fee\n","\n","    return exit_done, ex_p, fee"]},{"cell_type":"markdown","metadata":{"id":"zQ-roiifspcX"},"source":["#### ep_loc.point & zone legacy"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Js5eL87VspcX"},"outputs":[],"source":["\n","    # res_df['entry_{}'.format(strat_version)] = np.where((res_df['open'] >= res_df['cloud_bline_%s' % cb_itv]) &\n","    #                 # (res_df['close'].shift(config.loc_set.point.tf_entry * 1) <= res_df['cloud_bline_%s' % cb_itv]) &\n","    #                 (res_df['close'] < res_df['cloud_bline_%s' % cb_itv])\n","    #                 , res_df['entry_{}'.format(strat_version)] - 1, res_df['entry_{}'.format(strat_version)])\n","\n","    # res_df['entry_{}'.format(strat_version)] = np.where((res_df['open'] >= res_df['bb_lower_1m']) &\n","    #                 # (res_df['close'].shift(config.loc_set.point.tf_entry * 1) <= res_df['bb_lower_1m']) &\n","    #                 (res_df['close'] < res_df['bb_lower_1m'])\n","    #                 , res_df['entry_{}'.format(strat_version)] - 1, res_df['entry_{}'.format(strat_version)])\n","\n","    # res_df['entry_{}'.format(strat_version)] = np.where((res_df['open'] <= res_df['cloud_bline_%s' % cb_itv]) &\n","    #                   # (res_df['close'].shift(config.loc_set.point.tf_entry * 1) >= res_df['cloud_bline_%s' % cb_itv]) &\n","    #                   (res_df['close'] > res_df['cloud_bline_%s' % cb_itv])\n","    #                 , res_df['entry_{}'.format(strat_version)] + 1, res_df['entry_{}'.format(strat_version)])\n","\n","    # res_df['entry_{}'.format(strat_version)] = np.where((res_df['open'] <= res_df['bb_upper_1m']) &\n","    #                   # (res_df['close'].shift(config.loc_set.point.tf_entry * 1) >= res_df['bb_upper_1m']) &\n","    #                   (res_df['close'] > res_df['bb_upper_1m'])\n","    #                 , res_df['entry_{}'.format(strat_version)] + 1, res_df['entry_{}'.format(strat_version)])\n","\n","\n","    \n","   # --------------- ema --------------- #   \n","  # res_df['ema5_1m'] = ema(res_df['close'], 5).shift(1)\n","\n","  #   # --------------- cloud bline --------------- #   \n","  # res_df['cloud_bline_1m'] = cloud_bline(res_df, 26).shift(1)\n","  \n","    #       stochastic      #\n","  # res_df['stoch'] = stoch(res_df, 5, 3, 3)\n","\n","    #       fisher      #\n","  # res_df['fisher30'] = fisher(res_df, 30)\n","  # res_df['fisher60'] = fisher(res_df, 60)\n","  # res_df['fisher120'] = fisher(res_df, 120)\n","\n","    #       cctbbo      #\n","  # res_df['cctbbo'], _ = cct_bbo(res_df, 21, 13)\n","\n","    #       ema_roc      #\n","  # res_df['ema_roc'] = ema_roc(res_df['close'], 13, 9)\n","\n","\n","   # ------------------------------ htf data ------------------------------ #    \n","\n","  #             Todo              #\n","  # htf_df = pd.read_excel(date_path2 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","  # htf_df = pd.read_excel(date_path3 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","  # # htf_df = pd.read_excel(date_path4 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","  # # # htf_df = pd.read_excel(date_path5 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","  # # # # # # htf_df = pd.read_excel(date_path6 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","\n","  # # ---- htf index slicing ---- #\n","  # htf_df = htf_df.loc[:res_df.index[-1]]\n","  \n","  # print(\"res_df.index[-1] :\", res_df.index[-1])\n","  # print(\"htf_df.index[-1] :\", htf_df.index[-1])\n","\n","  # res_df = dc_line(res_df, htf_df, '5m')\n","  # res_df = dc_level(res_df, '5m', 1)\n","\n","\n","  # # # if \"sma4\" in res_df.columns:\n","  # # #   res_df.drop(\"sma4\", axis=1, inplace=1)\n","\n","  # # htf_df['sma'] = htf_df['close'].rolling(60).mean()\n","  # # res_df = res_df.join(pd.DataFrame(index=res_df.index, data=to_lower_tf_v2(res_df, htf_df, [-1]), columns=['sma_30m']))\n","  \n","  # htf_df['stoch'] = stoch(htf_df, 13, 3, 3)\n","  # res_df = res_df.join(pd.DataFrame(index=res_df.index, data=to_lower_tf_v2(res_df, htf_df, [-1], backing_i=-1), columns=['stoch_5m']))\n","\n","   \n","  # fifth_df['ema'] = ema(fifth_df['close'], 5)\n","  # res_df = res_df.join(pd.DataFrame(index=res_df.index, data=to_lower_tf_v2(res_df, fifth_df, [-1]), columns=['ema5']))\n","\n","        # ------------------------------------ short ------------------------------------ # \n","\n","        # --------- by sar --------- # \n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_3m'].iloc[i] == 0:\n","        #   mr_score += 1\n","\n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_5m'].iloc[i] == 0:\n","        #   mr_score += 1          \n","\n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_15m'].iloc[i] == 0:\n","        #   mr_score += 1\n","\n","          #      dc & sar      # \n","        # mr_const_cnt += 1\n","        # # if res_df['dc_upper_1m'].iloc[i] <= res_df['sar_15m'].iloc[i]:\n","        # if res_df['dc_upper_3m'].iloc[i] <= res_df['sar_5m'].iloc[i]:\n","        # # if res_df['dc_upper_5m'].iloc[i] <= res_df['sar_15m'].iloc[i]:\n","        #   mr_score += 1\n","\n","        # -------------- dr scheduling -------------- #\n","        # if config.ep_set.entry_type == 'MARKET':\n","        #   mr_const_cnt += 1\n","        #   if (res_df['close'].iloc[i] - res_df['short_tp'].iloc[i]) / (res_df['short_out'].iloc[i] - res_df['close'].iloc[i]) <= config.ep_set.tr_thresh * (1 + config.ep_set.dr_error):  \n","        #     mr_score += 1\n","\n","           \n","        # ------- entry once ------- #   \n","        # prev_entry_cnt = 0\n","        # for back_i in range(i - 1, 0, -1):\n","        #   if res_df['entry'][back_i] == 1:\n","        #     break\n","\n","        #   elif res_df['entry'][back_i] == -1:\n","        #     prev_entry_cnt += 1          \n","        # # # print(\"prev_entry_cnt :\", prev_entry_cnt)\n","\n","        # mr_const_cnt += 1\n","        # # if prev_entry_cnt <= config.ep_set.entry_incycle:\n","        # # if prev_entry_cnt == config.ep_set.entry_incycle:\n","        # if prev_entry_cnt >= config.ep_set.entry_incycle:\n","        #   mr_score += 1\n","\n","        # ------- htf zoning ------- #   \n","        # mr_const_cnt += 1\n","        #   #       bb zone     #\n","        # if res_df['close'].iloc[i] < res_df['bb_lower_%s' % bbz_interval].iloc[i]:\n","        # # if res_df['close'].iloc[i] < res_df['bb_lower2_1h'].iloc[i]:\n","        # # if res_df['close'].iloc[i] < res_df['bb_base_1h'].iloc[i]:\n","\n","        #   #       cbline zone     #\n","        # # if res_df['close'].iloc[i] < res_df['cloud_bline_%s' % cb_interval].iloc[i]:\n","\n","        #   mr_score += 1\n","\n","  \n","        # ------- ben ep_in's tp done ------- #   \n","        # mr_const_cnt += 1\n","        # if res_df['low'].iloc[i] > res_df['short_tp'].iloc[i]:\n","        #   mr_score += 1\n","\n","\n","        # -------------- feature dist const. -------------- #\n","        # if initial_i < input_size:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","        # entry_input_x = min_max_scale(res_df[selected_price_colname].iloc[initial_i - input_size:initial_i].values)\n","       \n","        # re_entry_input_x = expand_dims(entry_input_x)\n","\n","        # entry_vector = model.predict(re_entry_input_x, verbose=0)\n","        # # print(test_result.shape)\n","\n","        # f_dist = vector_dist(entry_vector, selected_vector)\n","        # print(\"f_dist :\", f_dist)\n","\n","        # if f_dist < fdist_thresh:\n","          # mr_score += 1\n","\n","\n","\n","        # ------------------------------------ long ------------------------------------ # \n","          \n","\n","        # --------- by sar --------- # \n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_3m'].iloc[i] == 1:\n","        #   mr_score += 1   \n","\n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_5m'].iloc[i] == 1:\n","        #   mr_score += 1     \n","\n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_15m'].iloc[i] == 1:\n","          # mr_score += 1\n","\n","          #      dc & sar      # \n","        # mr_const_cnt += 1\n","        # # if res_df['dc_lower_1m'].iloc[i] >= res_df['sar_15m'].iloc[i]:\n","        # if res_df['dc_lower_3m'].iloc[i] >= res_df['sar_5m'].iloc[i]:\n","        # # if res_df['dc_lower_5m'].iloc[i] >= res_df['sar_15m'].iloc[i]:\n","        #   mr_score += 1\n","\n","        # -------------- dr scheduling -------------- #\n","        # if config.ep_set.entry_type == \"MARKET\":\n","          # mr_const_cnt += 1        \n","          # if (res_df['long_tp'].iloc[i] - res_df['close'].iloc[i]) / (res_df['close'].iloc[i] - res_df['long_out'].iloc[i]) <= config.ep_set.tr_thresh * (1 + config.ep_set.dr_error): # 일반적으로 dr 상에서 tp 비율이 더 커짐 (tr 보다)\n","          #   mr_score += 1\n","\n","        # -------------- ep limit -------------- #    \n","        # mr_const_cnt += 1\n","        # # if (res_df['open'].iloc[i] - res_df['long_ep'].iloc[i]) / res_df['open'].iloc[i] < config.ep_set.max_eplim_pct:\n","        # if config.ep_set.min_eplim_pct < (res_df['open'].iloc[i] - res_df['long_ep'].iloc[i]) / res_df['open'].iloc[i] < config.ep_set.max_eplim_pct:\n","        # # if 0 < (res_df['open'].iloc[i] - res_df['long_ep'].iloc[i]) / res_df['open'].iloc[i] < config.ep_set.max_eplim_pct:\n","        #   # if res_df['st_gap_15m'].iloc[i] / res_df['open'].iloc[i] < 0:\n","        #   #   print(\"i, res_df['st_gap_15m'].iloc[i] :\", i, res_df['st_gap_15m'].iloc[i])\n","        #   mr_score += 1\n","\n","\n","        # -------------- entry once -------------- #    \n","        # prev_entry_cnt = 0\n","        # for back_i in range(i - 1, 0, -1):\n","        #   if res_df['entry'][back_i] == -1:\n","        #     break\n","\n","        #   elif res_df['entry'][back_i] == 1:\n","        #     prev_entry_cnt += 1\n","          \n","        # mr_const_cnt += 1\n","        # # if prev_entry_cnt <= config.ep_set.entry_incycle:\n","        # # if prev_entry_cnt == config.ep_set.entry_incycle:\n","        # if prev_entry_cnt >= config.ep_set.entry_incycle:\n","        #   mr_score += 1\n","\n","\n","        # ------- htf zoning ------- #   \n","        # mr_const_cnt += 1\n","          \n","        #   #       bb zone     #\n","        # if res_df['close'].iloc[i] > res_df['bb_upper_%s' % bbz_interval].iloc[i]:\n","        # # if res_df['close'].iloc[i] > res_df['bb_upper2_1h'].iloc[i]:\n","        # # if res_df['close'].iloc[i] > res_df['bb_base_1h'].iloc[i]:\n","        \n","        #   #       cbline zone     #\n","        # # if res_df['close'].iloc[i] > res_df['cloud_bline_%s' % cb_interval].iloc[i]:\n","\n","        #   mr_score += 1\n","\n","\n","        # ------- ben ep_in's tp done ------- #   \n","        # mr_const_cnt += 1\n","        # if res_df['high'].iloc[i] < res_df['long_tp'].iloc[i]:\n","        #   mr_score += 1\n","\n","\n","        # -------------- feature dist const. -------------- #\n","        # if initial_i < input_size:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","          \n","        # entry_input_x = min_max_scale(res_df[selected_price_colname].iloc[initial_i - input_size:initial_i].values)\n","       \n","        # re_entry_input_x = expand_dims(entry_input_x)\n","\n","        # entry_vector = model.predict(re_entry_input_x, verbose=0)\n","        # # print(test_result.shape)\n","\n","        # f_dist = vector_dist(entry_vector, selected_vector)\n","        # print(\"f_dist :\", f_dist)\n","\n","        # if f_dist < fdist_thresh:\n","          # mr_score += 1"]},{"cell_type":"markdown","metadata":{"id":"_blyFhQJUd5X"},"source":["#### dump"]},{"cell_type":"code","source":["plot_is=1\n","open_idx = open_info_df.index.to_numpy()\n","len_df = len(res_df)\n","s_idx = (open_idx < int(len_df * (1 - test_ratio))) == plot_is\n","s_open_info_df = open_info_df[s_idx]\n","s_open_idx = open_idx[s_idx]\n","\n","open_info_list = [s_open_info_df[col_].to_numpy() for col_ in s_open_info_df.columns]\n","side_arr, zone_arr, id_arr, id_idx_arr = open_info_list\n","\n","# ------------ get paired_res ------------ #\n","start_0 = time.time()\n","paired_res = en_ex_pairing_v4(res_df, s_open_idx, open_info_list, ohlc_list, config_list, np_timeidx, funcs)\n","# valid_openi_arr, pair_idx_arr, pair_price_arr, lvrg_arr, fee_arr, tpout_arr = paired_res\n","print(\"en_ex_pairing elapsed time :\", time.time() - start_0)  #  0.37 --> 0.3660471439361572 --> 0.21(lesser if)\n","\n","# ------------ idep_plot ------------ #\n","start_0 = time.time()\n","high, low = ohlc_list[1:3]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Q-Xt9w51BOPC","executionInfo":{"status":"ok","timestamp":1650030352162,"user_tz":-540,"elapsed":1285,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"a3bd1b45-d58d-4184-c501-66fc824aaa99"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["en_ex_pairing elapsed time : 1.1988611221313477\n"]}]},{"cell_type":"code","source":["sample_ratio=0.7\n","title_position=(0.5, 0.5)\n","fontsize=15\n","signi=False\n","\n","if sample_ratio is not None:\n","      sample_len = int(len_df * sample_ratio)\n","else:\n","  sample_len = len_df\n","\n","# ------ short & long data preparation ------ #\n","# start_0 = time.time()\n","point1_arr, valid_openi_arr, pair_idx_arr, pair_price_arr, lvrg_arr, fee_arr, tpout_arr, _, tr_arr = paired_res    \n","assert len(valid_openi_arr) != 0, \"assert len(valid_openi_arr) != 0\"    \n","short_valid_openi_idx = np.where(side_arr[valid_openi_arr] == OrderSide.SELL)[0]  # valid_openi_arr 에 대한 idx, # side_arr,\n","long_valid_openi_idx = np.where(side_arr[valid_openi_arr] == OrderSide.BUY)[0]\n","\n","valid_open_idx = open_idx[valid_openi_arr].reshape(-1, 1)\n","\n","short_obj = np.hstack((pair_price_arr, pair_idx_arr, valid_open_idx))[short_valid_openi_idx]\n","long_obj = np.hstack((pair_price_arr, pair_idx_arr, valid_open_idx))[long_valid_openi_idx]\n","both_obj = np.vstack((short_obj, long_obj))\n","print(\"short_obj.shape :\", short_obj.shape)\n","print(\"long_obj.shape :\", long_obj.shape)\n","\n","short_obj, long_obj, both_obj = [np.split(obj_, 5, axis=1) for obj_ in [short_obj, long_obj, both_obj]]\n","\n","short_point1_arr, long_point1_arr = [point1_arr[openi_idx_].reshape(-1, 1) for openi_idx_ in [short_valid_openi_idx, long_valid_openi_idx]]\n","short_lvrg_arr, long_lvrg_arr = [lvrg_arr[openi_idx_].reshape(-1, 1) for openi_idx_ in [short_valid_openi_idx, long_valid_openi_idx]]\n","short_fee_arr, long_fee_arr = [fee_arr[openi_idx_].reshape(-1, 1) for openi_idx_ in [short_valid_openi_idx, long_valid_openi_idx]]\n","short_tpout_arr, long_tpout_arr = [tpout_arr[openi_idx_] for openi_idx_ in [short_valid_openi_idx, long_valid_openi_idx]]\n","# short_bias_arr, long_bias_arr = [bias_arr[openi_idx_] for openi_idx_ in [short_valid_openi_idx, long_valid_openi_idx]]\n","short_tr_arr, long_tr_arr = [tr_arr[openi_idx_] for openi_idx_ in [short_valid_openi_idx, long_valid_openi_idx]]\n","# print(\"long_bias_arr.shape :\", long_bias_arr.shape)    \n","# print(\"elapsed time :\", time.time() - start_0)\n","\n","short_true_bias_idx, short_false_bias_idx, long_true_bias_idx, long_false_bias_idx = get_wave_bias(res_df, config, high, low, len_df, short_obj, long_obj)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ErhWGoABA5L2","executionInfo":{"status":"ok","timestamp":1650030354180,"user_tz":-540,"elapsed":380,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"240dac0e-9466-4c61-d1bf-55580d7de35e"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["short_obj.shape : (425, 5)\n","long_obj.shape : (374, 5)\n"]}]},{"cell_type":"code","source":["short_en_idx = short_obj[2].astype(int)\n","short_en_tp1 = ffill_line(res_df['short_tp_1_{}'.format(config.strat_version)].to_numpy(), short_en_idx)\n","short_en_out0 = ffill_line(res_df['short_epout_0_{}'.format(config.strat_version)].to_numpy(), short_en_idx)\n","\n","long_en_idx = long_obj[2].astype(int)\n","long_en_tp1 = ffill_line(res_df['long_tp_1_{}'.format(config.strat_version)].to_numpy(), long_en_idx)\n","long_en_out0 = ffill_line(res_df['long_epout_0_{}'.format(config.strat_version)].to_numpy(), long_en_idx)\n","\n","bias_info_tick = config.tr_set.bias_info_tick\n","\n","# 1. min 에 초점을 맞추는 거니까, touch 없을시 len_df 로 설정\n","# 2. future_data 사용이니까, shift(-bias_info_tick) 설정\n","# 3. entry 다음 idx 부터 -> tp & out 체결 logic 이 현재 entry_idx 부터 되어있어서 취소\n","last_idx = len_df - 1\n","short_en_tp1_touch_idx = pd.Series(np.where(low <= short_en_tp1, np.arange(len_df), last_idx)).rolling(bias_info_tick, min_periods=1).min().shift(-bias_info_tick).to_numpy()[short_en_idx]  \n","short_en_out0_touch_idx = pd.Series(np.where(high >= short_en_out0, np.arange(len_df), last_idx)).rolling(bias_info_tick, min_periods=1).min().shift(-bias_info_tick).to_numpy()[short_en_idx]\n","\n","long_en_tp1_touch_idx = pd.Series(np.where(high >= long_en_tp1, np.arange(len_df), last_idx)).rolling(bias_info_tick, min_periods=1).min().shift(-bias_info_tick).to_numpy()[long_en_idx]\n","long_en_out0_touch_idx = pd.Series(np.where(low <= long_en_out0, np.arange(len_df), last_idx)).rolling(bias_info_tick, min_periods=1).min().shift(-bias_info_tick).to_numpy()[long_en_idx]\n","\n","short_true_bias_idx = short_en_tp1_touch_idx < short_en_out0_touch_idx  # true_bias 의 조건\n","long_true_bias_idx = long_en_tp1_touch_idx < long_en_out0_touch_idx\n","\n","short_false_bias_idx = short_en_tp1_touch_idx > short_en_out0_touch_idx  # false_bias 의 조건\n","long_false_bias_idx = long_en_tp1_touch_idx > long_en_out0_touch_idx"],"metadata":{"id":"uelGdX2-ISZb"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["long_en_tp1_touch_idx"],"metadata":{"id":"w1g0VQvUfK69"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print(long_en_tp1[long_en_tp1_touch_idx.astype(int)].ravel())\n","print(high[long_en_tp1_touch_idx.astype(int)].ravel()))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"f0hPU71agPGs","executionInfo":{"status":"ok","timestamp":1650031209368,"user_tz":-540,"elapsed":3,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"e37f1fae-6108-4777-9979-5f17775aca60"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[3138.55  355.84 3138.55  341.35  350.44  338.46  358.86 3138.55  363.65 3138.55  382.85 3138.55 3138.55  342.02 3138.55  328.9  3138.55  344.79 3138.55  355.27  354.4  3138.55  353.77 3138.55  347.58 3138.55  352.19  354.42 3138.55 3138.55  338.88  339.4   367.89  375.5   375.5   373.35  375.9   375.14  375.48 3138.55  380.59  382.89  379.92 3138.55  369.7   369.24  381.2   420.    417.28  412.1   408.29  380.55  382.4  3138.55  383.96 3138.55  383.72  406.76  411.49  411.86  432.93 3138.55 3138.55  447.69 3138.55  465.24  454.7   466.5   510.4   535.2   535.2  3138.55  509.2   588.18 3138.55  598.25 3138.55  591.86 3138.55  568.32 3138.55  668.85  649.    661.3  3138.55 3138.55  614.28 3138.55  616.44  622.28  627.99  731.56  775.22 1031.7  3138.55 3138.55 1178.4  3138.55 1326.32 1060.37 3138.55 3138.55 3138.55 1342.85 3138.55 1240.67 3138.55 3138.55 1353.01 1537.91 1647.83 1724.82 1753.25 3138.55 1750.19 1867.96 1813.91 3138.55 3138.55 3138.55 3138.55 1699.51 1494.44 1367.36 3138.55 3138.55 3138.55 3138.55 1844.   3138.55 1807.   1765.04 3138.55 1881.5  3138.55 3138.55 3138.55 1583.38 1937.46 2001.46 2114.   2023.5  2081.23 2129.9  2129.83 2080.83 2476.97 2148.2  3138.55 3138.55 3138.55 3138.55 2222.03 3138.55 2329.38 2263.   2534.76 2650.94 3138.55 2778.02 2775.85 3138.55 3138.55 3471.94 3138.55 3964.08 4320.   3767.6  3138.55 2373.99 3138.55 3138.55 3138.55 3138.55 2850.   2636.88 3138.55 3138.55 2521.4  3138.55 2482.5  3138.55 2414.33 2368.29 2508.85 2571.   3138.55 3138.55 2351.52 2243.45 3138.55 1840.52 1793.36 3138.55 1981.23 3138.55 3138.55 2154.34 3138.55 3138.55 3138.55 2292.99 2249.   2393.86 3138.55 2122.24 3138.55 1906.44 2000.92 3138.55 3138.55 1895.   1915.   1826.21 1828.3  3138.55 2006.57 3138.55 2349.85 2301.25 2355.56 2470.36 2609.14 2496.57 3124.85 3130.8  3273.65 3248.22 3277.91 3138.55 3018.88 3228.28 3138.55 3253.5  3265.17 3138.55 3121.   3138.55 3251.64 3760.4  3768.5  3138.55 3926.18 3138.55 3138.55 3138.55 3243.44 3387.91 3435.57\n"," 3138.55 3584.55 3138.55 3138.55 3138.55 3138.55 3138.55 2940.   3138.55 3138.55 3360.9  3399.06 3138.55 3559.   3138.55 3138.55 3138.55 3138.55 3504.24 3138.55 3653.89 3838.53 3824.   4140.   3138.55 3138.55 3138.55 4204.69 3138.55 4385.29 3138.55 4328.29 4342.8  4368.   4619.95 3138.55 4547.73 4546.49 3138.55 3138.55 4620.   4821.47 4766.   4764.62 4664.7  4713.04 4307.   4309.63 3138.55 3138.55 4193.46 4156.24 3138.55 4097.31 4379.   4678.43 4736.66 3138.55 3138.55 3966.   4218.99 3138.55 4192.11 3138.55 4050.2  3138.55 3892.61 3840.54 4092.5  3138.55 3138.55 3908.04 3936.79 3819.01 3848.34 3138.55 3138.55 4108.36 3138.55 3138.55 3138.55 3679.86 3702.95 3757.2  3138.55 3740.66 3138.55 3138.55 3744.99 3764.   3757.79 3821.99 3747.15 3138.55 3138.55 3226.   3138.55 3138.55 3132.58 3134.2  3260.79 3277.   3268.99 3344.65 3138.55 3132.81 3092.32 3138.55 2470.08 3138.55 2692.   3138.55 2635.   3028.   3138.55 3017.62 3015.03 3000.75 3138.55 3086.7  3105.96 3138.55 3110.   3121.88 3138.55]\n","374\n"]}]},{"cell_type":"code","source":["print(long_en_tp1_touch_idx[long_true_bias_idx])\n","print(long_en_out0_touch_idx[long_true_bias_idx])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"hyXEy7KAedJ2","executionInfo":{"status":"ok","timestamp":1650030425924,"user_tz":-540,"elapsed":364,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"12218782-36bf-464c-f541-bcedca0ff729"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[  3248.   4344.   5341.   6735.   7834.  13347.  25711.  28495.  32237.  33547.  39660.  44409.  45439.  46948.  48805.  51043.  52120.  53359.  54034.  57112.  58538.  60445.  62858.  67542.  71722.  80491.  80767.  86740.  87741.  88510.  89202.  89234.  90141. 105033. 106104. 111037. 113720. 121267. 135864. 139356. 149820. 152586. 155911. 160863. 161642. 162671. 171804. 173306. 175672. 199217. 203117. 212870. 226575. 227026. 230021. 232483. 233282. 248963. 270925. 272996. 275479. 290295. 300154. 302132. 303737. 304638. 305793. 308003. 312179. 321092. 332342. 333530. 334276. 338807. 341295. 342957. 351072. 355171. 361986. 374071. 392165. 394820. 400131. 402941. 405780. 407033. 408021. 412866. 414544. 424202. 424980. 427095. 434430. 437469. 440475. 451161. 455125. 458299. 458442. 462265. 468069. 471761. 474015. 474938. 479950. 485783. 489154. 491021. 493865. 495411. 502142. 503869. 506076. 506701. 515582. 522458. 522527. 525678. 541272. 568971. 584740. 590825. 594590. 600643. 604810. 606480. 609673. 610227. 611668. 614534. 617830. 620083. 623613. 635582. 636202. 640519. 646478. 649546. 651589. 656581. 657916. 658876. 672091. 672723. 673970. 676228. 678667. 679819. 685661. 693579. 693875. 694317. 694843. 697049. 697494. 698408. 699552. 700742. 706565. 712600. 714943. 721810. 722645. 747355. 748460. 748687. 749288. 750137. 752699. 755756. 755934. 761833.]\n","[763830. 763830.   5371. 763830. 763830. 763830.  25738. 763830. 763830. 763830.  39721. 763830.  45562. 763830. 763830. 763830.  52203. 763830. 763830.  57309.  58660.  60458. 763830. 763830. 763830. 763830. 763830.  86826.  87809. 763830. 763830. 763830. 763830. 763830. 763830. 111095. 763830. 763830. 763830. 139363. 763830. 152608. 156017. 763830. 763830. 763830. 171904. 763830. 763830. 763830. 763830. 212940. 763830. 763830. 763830. 763830. 233456. 249015. 763830. 763830. 763830. 763830. 300351. 763830. 303840. 763830. 305881. 308089. 763830. 321269. 763830. 333598. 763830. 763830. 341392. 763830. 763830. 763830. 763830. 763830. 392245. 394855. 400313. 763830. 763830. 407115. 763830. 412940. 763830. 763830. 763830. 763830. 763830. 763830. 440618. 451267. 763830. 763830. 458525. 763830. 468301. 763830. 763830. 763830. 763830. 763830. 763830. 763830. 493893. 763830. 763830. 763830. 506190. 506707. 763830. 763830. 763830. 525726. 763830. 763830. 763830. 763830. 594650. 763830. 763830. 763830. 609694. 763830. 763830. 614559. 763830. 620213. 763830. 763830. 763830. 763830. 763830. 763830. 763830. 763830. 658023. 658979. 763830. 763830. 763830. 763830. 678782. 763830. 685747. 763830. 763830. 694428. 763830. 763830. 763830. 763830. 763830. 763830. 763830. 763830. 763830. 763830. 763830. 747472. 763830. 748782. 763830. 763830. 752722. 763830. 756095. 761897.]\n"]}]},{"cell_type":"code","execution_count":null,"metadata":{"id":"FlNGKvW_w2za"},"outputs":[],"source":["config_name = \"config_v5_2.1220_candlejson\"\n","# config_name = \"config_v3.json\"\n","cfg_full_path = os.path.join(current_path, \"config\", config_name)\n","\n","\n","with open(cfg_full_path, 'w') as cfg:\n","    json.dump(config1, cfg, indent=2)\n","    print(\"{} dumped !\".format(cfg_full_path))"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"xs6TlV7wu6uo"},"outputs":[],"source":["def en_ex_pairing_v4(res_df, open_idx, open_info_list, ohlc_list, point2_list, market_data_list, config_list, np_timeidx, funcs):  # 이미 충분히 줄여놓은 idx 임\n","    side_arr, zone_arr, id_arr, id_idx_arr = open_info_list\n","    id_idx_arr = id_idx_arr.astype(int)\n","\n","    ep_out, ep_loc_point2, lvrg_set = funcs\n","\n","    point1_list, valid_openi_list, pair_idx_list, pair_price_list, lvrg_list, fee_list, tpout_list, bias_list, tr_list = [[] for li in range(9)]\n","    len_df = len(res_df)\n","    len_open_idx = len(open_idx)\n","    i, open_i = 0, -1  # i for total_res_df indexing\n","\n","    while 1:\n","        # ------------ entry phase ------------ #\n","        open_i += 1  # 확인 끝났으면 조기 이탈(+1), 다음 open_idx 조사 진행\n","        if open_i >= len_open_idx:\n","          break\n","          \n","        # ------ ep_loc ------ #\n","        op_idx = open_idx[open_i]  # open_i 는 i 와 별개로 운영\n","        \n","        if str(res_df.index[op_idx]) == '2022-02-14 14:07:59.999000':\n","          print('2022-02-14 14:07:59.999000 passed')\n","          print(op_idx, i, open_i)\n","\n","        if op_idx < i:  # i = 이전 거래 끝난후의 res_df index - \"거래 종료후 거래 시작\", '<' : 거래 종료시점 진입 가능하다는 의미\n","            continue\n","\n","        if str(res_df.index[op_idx]) == '2022-02-14 14:07:59.999000':\n","          print('2022-02-14 14:07:59.999000 passed')\n","\n","        # ------ dynamic data by ID ------ #\n","        #     1. 해당 id 로 config 재할당해야함\n","        id_idx = id_idx_arr[open_i]\n","        config = config_list[id_idx]\n","        strat_version = config.strat_version\n","        open_side = side_arr[open_i]\n","\n","        side_pos = 'short' if open_side == OrderSide.SELL else 'long'\n","        tp_arr = res_df['{}_tp_{}'.format(side_pos, strat_version)].to_numpy()  # => eptpout arr_list 만들어서 꺼내 사용하면 될 것\n","        point_idxgap_arr = res_df['{}_point_idxgap_{}'.format(side_pos, strat_version)].to_numpy()\n","        \n","        ep_arr = res_df['{}_ep_{}'.format(side_pos, strat_version)].to_numpy()  # Todo - while loop 내에서 to_numpy() 반복하느니, pd_indexing 이 낫지 않을까\n","        out_arr = res_df['{}_out_{}'.format(side_pos, strat_version)].to_numpy()\n","        bias_info_arr = res_df['{}_bias_info_{}'.format(side_pos, strat_version)].to_numpy()  # ex. rolling(entry ~ end)'s high\n","        bias_thresh_arr = res_df['{}_bias_thresh_{}'.format(side_pos, strat_version)].to_numpy()  # ex. close + dc_T20 * 0.5\n","        tr_arr = res_df['{}_tr_{}'.format(side_pos, strat_version)].to_numpy()\n","\n","        # ------ ei_k & point2 ------ #\n","        i = op_idx + 1  # open_signal 이 close_bar.shift(1) 이라고 가정하고 다음 bar 부터 체결확인한다는 의미\n","        if i >= len_df:  # res_df 의 last_index 까지 돌아야함\n","            break\n","        \n","        # ------ point1 & 2's tp_j ------ #\n","        point_idxgap = point_idxgap_arr[op_idx]\n","        if np.isnan(point_idxgap):\n","          continue\n","        else:\n","          tp_j = int(op_idx - point_idxgap)\n","\n","          # ------ allow point2 only next to point1 ------ #\n","          # open_arr = res_df['{}_open_{}'.format(side_pos, strat_version)].to_numpy()\n","          # if np.sum(open_arr[tp_j:op_idx]) != 0:\n","          #   continue\n","          \n","        exec_j, ep_j, tp_j, out_j, entry_done, en_p, fee = check_eik_point2_exec_v2(res_df, config, op_idx, tp_j, len_df, open_side, [*ohlc_list, ep_arr], point2_list, ep_out, ep_loc_point2)\n","        i = exec_j\n","        \n","        if not entry_done:\n","            continue\n","\n","        # ------ leverage ------ #\n","        out = out_arr[out_j]  # lvrg_set use out on out_j\n","        leverage = lvrg_set(res_df, config, open_side, en_p, out, fee)  # res_df 변수 사용됨 - 주석 처리 된 상태일뿐\n","        if leverage is None:\n","            continue\n","\n","        exit_done, cross_on = 0, 0\n","        # ------ check tpout_onexec ------ #\n","        # if not config.ep_set.static_ep and config.ep_set.entry_type == \"LIMIT\" and config.ep_set.tpout_onexec:\n","        if config.ep_set.entry_type == \"LIMIT\":\n","            if config.tp_set.tp_onexec:  # dynamic 은 tp_onexec 사용하는 의미가 없음\n","                tp_j = exec_j\n","            if config.out_set.out_onexec:  # dynamic 은 out_onexec 사용하는 의미가 없음\n","                out_j = exec_j\n","\n","\n","        while 1:\n","            # ------------ exit phase ------------ #\n","            if not config.tp_set.static_tp:  # 앞으로 왠만하면 static 만 사용할 예정\n","                tp_j = i\n","            if not config.out_set.static_out:\n","                out_j = i\n","\n","            # ------------ tp ------------ #\n","            if not config.tp_set.non_tp and i != exec_j:\n","                exit_done, ex_p, fee = check_limit_tp_exec(res_df, config, open_i, i, tp_j, len_df, fee, open_side, exit_done, [*ohlc_list, [tp_arr]])  # 여기서는 j -> i 로 변경해야함\n","                # if config.tp_set.tp_type in ['LIMIT']:  # 'BOTH' -> 앞으로는, LIMIT 밖에 없을거라 주석처리함\n","                # if not exit_done and config.tp_set.tp_type in ['MARKET', 'BOTH']:\n","\n","            # ------------ out ------------ #\n","            # ------ signal_out ------ #\n","            if not exit_done:\n","              exit_done, cross_on, ex_p, fee = check_market_out_exec(config, open_i, i, len_df, fee, open_side, cross_on, exit_done, [np_timeidx, *market_data_list])\n","            # ------ hl_out ------ #\n","            if config.out_set.hl_out != \"None\":\n","              if not exit_done:  # and i != len_df - 1:                \n","                  exit_done, ex_p, fee = check_out(config, open_i, i, out_j, len_df, fee, open_side, exit_done, [*ohlc_list, out_arr])\n","\n","            if exit_done:  # 이 phase 는 exit_phase 뒤에도 있어야할 것 - entry_done var. 사용은 안하겠지만\n","                # ------ append dynamic vars. ------ #\n","                point1_list.append(tp_j)\n","                valid_openi_list.append(open_i)  # side, zone, start_ver arr 모두 openi_list 로 접근하기 위해 open_i 를 담음\n","                pair_idx_list.append([exec_j, i])  # entry & exit (체결 기준임)\n","                pair_price_list.append([en_p, ex_p])\n","                lvrg_list.append(leverage)\n","                fee_list.append(fee)\n","                tpout_list.append([tp_arr[tp_j], out_arr[out_j]])  # for tpout_line plot_check\n","                # bias_list.append([bias_info_arr[exec_j], bias_thresh_arr[exec_j]])  # backtest 에서만 가능한 future_data 사용\n","                bias_list.append([bias_info_arr[exec_j], tp_arr[tp_j]])  # bias_info 는 entry_idx 부터 & tp = bias_thresh \n","                tr_list.append(tr_arr[op_idx])\n","\n","                # open_i += 1  # 다음 open_idx 조사 진행\n","                break\n","\n","            # 1. 아래있으면, 체결 기준부터 tp, out 허용\n","            # 2. 위에있으면, entry 다음 tick 부터 exit 허용\n","            i += 1\n","            if i >= len_df:  # res_df 의 last_index 까지 돌아야함\n","                break\n","\n","        # if str(res_df.index[i]) == '2022-02-14 10:37:59.999000':\n","        #   print(i)\n","        if side_pos == 'long':\n","          print(str(res_df.index[op_idx]))\n","          print(str(res_df.index[i]))\n","          print()\n","                \n","        if i >= len_df: # or open_i >= len_open_idx:  # res_df 의 last_index 까지 돌아야함\n","            break\n","        else:\n","            continue\n","\n","    return np.array(point1_list), np.array(valid_openi_list), np.array(pair_idx_list), np.array(pair_price_list), np.array(lvrg_list), np.array(fee_list), np.array(tpout_list), np.array(bias_list), np.array(tr_list)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"iAVss_DwcliC"},"outputs":[],"source":["def get_res_v3(res_df, open_info_df, ohlc_list, point2_list, market_data_list, config_list, np_timeidx, funcs, test_ratio=0.3, plot_is=True, signi=False):\n","  # ------------ make open_info_list ------------ #\n","  open_idx = open_info_df.index.to_numpy()\n","  len_df = len(res_df)\n","  s_idx = (open_idx < int(len_df * (1 - test_ratio))) == plot_is\n","  s_open_info_df = open_info_df[s_idx]\n","  s_open_idx = open_idx[s_idx]\n","\n","  open_info_list = [s_open_info_df[col_].to_numpy() for col_ in s_open_info_df.columns]\n","  side_arr, zone_arr, id_arr, id_idx_arr = open_info_list\n","\n","  # ------------ get paired_res ------------ #\n","  start_0 = time.time()\n","  paired_res = en_ex_pairing_v3(res_df, s_open_idx, open_info_list, ohlc_list, point2_list, market_data_list, config_list, np_timeidx, funcs)\n","  # valid_openi_arr, pair_idx_arr, pair_price_arr, lvrg_arr, fee_arr, tpout_arr = paired_res\n","  print(\"en_ex_pairing elapsed time :\", time.time() - start_0)  #  0.37 --> 0.3660471439361572 --> 0.21(lesser if)\n","\n","  return paired_res"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"183hY18cpUBu"},"outputs":[],"source":["def get_max_outg_v3(open_side, config, ohlc_list, obj, tpout_arr, epout_0, out_gap):\n","\n","    h, l = ohlc_list[1:3]\n","\n","    np_obj = np.array(obj).T[0]\n","    assert len(np_obj.shape) == 2\n","\n","    # iin == iout 인 경우 분리\n","    # en_idx = np_obj[:, 2]\n","    # ex_idx = np_obj[:, 3]\n","    # equal_idx = en_idx == ex_idx\n","\n","    \n","    _, _, en_idxs, ex_idxs, open_idxs = obj\n","\n","    if open_side == \"SELL\":\n","      idxgs = [np.argwhere(l[int(en_idx):int(en_idx + config.tr_set.bias_info_tick)] <= tpout_arr[i, 0]) for i, en_idx in enumerate(en_idxs)]\n","    else:\n","      idxgs = [np.argwhere(h[int(en_idx):int(en_idx + config.tr_set.bias_info_tick)] >= tpout_arr[i, 0]) for i, en_idx in enumerate(en_idxs)]\n","\n","    min_idxg = np.array([gaps.min() if len(gaps) != 0 else np.nan for gaps in idxgs])  # get 최소 idx_gap from en_idx\n","    nan_idx = np.isnan(min_idxg) # .astype(int) -> false swing_bias idx\n","    # min_idxg[nan_idx] = 0  # fill na 0, for idex summation below\n","\n","    if open_side == \"SELL\":      \n","      # max_high = np.array([np.max(h[int(en_idx):int(en_idx + idx_gap + 1)]) for en_idx, idx_gap in zip(en_idxs, min_idxg)]).reshape(-1, 1)  # reshape is important in np boradcasting\n","      # max_high = np.array([np.max(h[int(en_idx):int(en_idx + idx_gap + 1)]) if not np.isnan(idx_gap) else np.max(h[int(en_idx):int(ex_idx + 1)])\n","      max_high = np.array([np.max(h[int(en_idx):int(en_idx + idx_gap + 1)]) if not np.isnan(idx_gap) else np.max(h[int(en_idx):int(en_idx + config.tr_set.bias_info_tick)])\n","                          for en_idx, ex_idx, idx_gap in zip(en_idxs, ex_idxs, min_idxg)]).reshape(-1, 1)  # reshape is important in np boradcasting   # outg 라서, iin + 1 이 아님\n","      max_outg = (max_high - epout_0) / out_gap\n","    else:\n","      # min_low = np.array([np.min(l[int(en_idx):int(en_idx + idx_gap + 1)]) for en_idx, idx_gap in zip(en_idxs, min_idxg)]).reshape(-1, 1)\n","      # min_low = np.array([np.min(l[int(en_idx):int(en_idx + idx_gap + 1)]) if not np.isnan(idx_gap) else np.min(l[int(en_idx):int(ex_idx + 1)])\n","      min_low = np.array([np.min(l[int(en_idx):int(en_idx + idx_gap + 1)]) if not np.isnan(idx_gap) else np.min(l[int(en_idx):int(en_idx + config.tr_set.bias_info_tick)])\n","                          for en_idx, ex_idx, idx_gap in zip(en_idxs, ex_idxs, min_idxg)]).reshape(-1, 1)  # outg 라서, iin + 1 이 아님\n","      max_outg = (epout_0 - min_low) / out_gap # out_idx 포함\n","\n","    return max_outg, open_idxs.astype(int), ~nan_idx.astype(bool).reshape(-1, 1)  # true_bias 의 outg data 만 사용\n","\n","\n","def get_max_outg_v2(open_side, config, ohlc_list, obj, tpout_arr, epout_0, out_gap):\n","\n","    h, l = ohlc_list[1:3]\n","    _, _, en_idxs, _, open_idxs = obj\n","\n","    if open_side == \"SELL\":\n","      idxgs = [np.argwhere(l[int(en_idx):int(en_idx + config.tr_set.bias_info_tick)] <= tpout_arr[i, 0]) for i, en_idx in enumerate(en_idxs)]\n","    else:\n","      idxgs = [np.argwhere(h[int(en_idx):int(en_idx + config.tr_set.bias_info_tick)] >= tpout_arr[i, 0]) for i, en_idx in enumerate(en_idxs)]\n","\n","    min_idxg = np.array([gaps.min() if len(gaps) != 0 else np.nan for gaps in idxgs])  # get 최소 idx_gap from en_idx\n","    nan_idx = np.isnan(min_idxg) # .astype(int)\n","    min_idxg[nan_idx] = 0  # fill na 0, for idex summation below\n","\n","    if open_side == \"SELL\":      \n","      max_high = np.array([np.max(h[int(en_idx):int(en_idx + idx_gap + 1)]) for en_idx, idx_gap in zip(en_idxs, min_idxg)]).reshape(-1, 1)  # reshape is important in np boradcasting\n","      max_outg = (max_high - epout_0) / out_gap\n","    else:\n","      max_low = np.array([np.min(l[int(en_idx):int(en_idx + idx_gap + 1)]) for en_idx, idx_gap in zip(en_idxs, min_idxg)]).reshape(-1, 1)\n","      max_outg = (epout_0 - max_low) / out_gap # out_idx 포함\n","\n","    return max_outg[~nan_idx], open_idxs[~nan_idx].astype(int)  # true_bias 의 outg data 만 사용\n","\n","def get_max_tpg_v2(open_side, ohlc_list, pr_, obj, tp_1, tp_gap):  # much faster\n","\n","    h, l = ohlc_list[1:3]\n","\n","    # en_p = obj[0]\n","    # ex_p = obj[1]\n","\n","    np_obj = np.array(obj).T[0]\n","    assert len(np_obj.shape) == 2\n","\n","    # iin == iout 인 경우 분리\n","    en_idx = np_obj[:, 2]\n","    ex_idx = np_obj[:, 3]\n","    equal_idx = en_idx == ex_idx\n","\n","    if open_side == \"SELL\":\n","        min_low = np.full_like(tp_1, np.nan)\n","        # min_low[~equal_idx] = np.array([np.min(l[int(iin + 1):int(iout + 1)]) for _, _, iin, iout in np_obj[~equal_idx, :4]]).reshape(-1, 1)  # start from iin + 1\n","        min_low[~equal_idx] = np.array([np.min(l[int(iin + 1):int(iout + 1)]) for _, _, iin, iout in np_obj[~equal_idx, :4]]).reshape(-1, 1)  # start from iin + 1\n","        max_tpg = (tp_1 - min_low) / tp_gap\n","    else:\n","        max_high = np.full_like(tp_1, np.nan)\n","        # max_high[~equal_idx] = np.array([np.max(h[int(iin + 1):int(iout + 1)]) for _, _, iin, iout in np_obj[~equal_idx, :4]]).reshape(-1, 1)\n","        max_high[~equal_idx] = np.array([np.max(h[int(iin + 1):int(iout + 1)]) for _, _, iin, iout in np_obj[~equal_idx, :4]]).reshape(-1, 1)\n","        max_tpg = (max_high - tp_1) / tp_gap\n","\n","    return max_tpg[pr_ < 1]  # out 된 case 만 tpg 담음\n","    # return max_tpg"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"eCFQfLGBrwj2"},"outputs":[],"source":["titles = public_cols +devided_cols\n","max_plot_outg = 10\n","\n","for title, short_data, long_data in zip(titles, short_datas, long_datas):\n","\n","  plt.style.use(['dark_background', 'fast'])\n","  fig = plt.figure(figsize=(12, 5))\n","  nrows, ncols = 1, 2\n","  gs = gridspec.GridSpec(nrows=nrows,  # row 부터 index 채우고 col 채우는 순서임 (gs_idx)\n","                          ncols=ncols\n","                          )\n","    \n","  print(len(long_max_outg))\n","\n","  short_plot_idx = short_max_outg <= max_plot_outg\n","  long_plot_idx = long_max_outg <= max_plot_outg  # nan 과 inf 때문에 이 방식 채택\n","\n","  print(np.sum(long_plot_idx))\n","\n","  short_open_data = short_data[short_outg_open_idx]\n","  long_open_data = long_data[long_outg_open_idx]\n","  \n","  short_plot_idx *= short_open_data <= 10\n","  long_plot_idx *= long_open_data <= 10 # nan 과 inf 때문에 이 방식 채택\n","\n","  short_plot_idx *= ~np.isnan(short_open_data)\n","  long_plot_idx *= ~np.isnan(long_open_data)  # nan 과 inf 때문에 이 방식 채택\n","\n","  print(np.sum(long_plot_idx))\n","\n","  short_plot_idx *= ~np.isinf(short_open_data)\n","  long_plot_idx *= ~np.isinf(long_open_data)  # nan 과 inf 때문에 이 방식 채택\n","  \n","  print(np.sum(long_plot_idx))\n","\n","  plt.subplot(gs[0])\n","  x, y = short_max_outg[short_plot_idx].ravel(), short_open_data[short_plot_idx].ravel()\n","  # plt.bar(x, y, width=0.05)\n","  plt.scatter(x, y)\n","  plt.axvline(0.5, color='red', linewidth=3)\n","  plt.title(\"coef : {:0.3f}\".format(np.corrcoef(-x, y)[0, 1]))\n","  plt.xlim(0, max_plot_outg)\n","\n","  plt.subplot(gs[1])\n","  x, y = long_max_outg[long_plot_idx].ravel(), long_open_data[long_plot_idx].ravel()\n","  # plt.bar(x, y, width=0.05)\n","  plt.scatter(x, y)\n","  plt.axvline(0.5, color='red', linewidth=3)\n","  plt.title(\"coef : {:0.3f}\".format(np.corrcoef(-x, y)[0, 1]))\n","  plt.xlim(0, max_plot_outg)\n","\n","  plt.suptitle(title)\n","  plt.show()\n","\n","  print()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"nYDgg3XEt116"},"outputs":[],"source":["short_max_outg, short_outg_open_idx = get_max_outg_v2(\"SELL\", config, ohlc_list, short_obj, short_tpout_arr, short_open_epout_0, short_open_epout_gap)\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"19_q_5awv_Uu"},"outputs":[],"source":["strat_version = config.strat_version\n","len_df = len(res_df)\n","short_open_res = np.ones(len_df)\n","long_open_res = np.ones(len_df)\n","\n","short_tp_1_col, short_tp_0_col, short_tp_gap_col = 'short_tp_1_{}'.format(strat_version), 'short_tp_0_{}'.format(strat_version), 'short_tp_gap_{}'.format(strat_version) \n","long_tp_1_col, long_tp_0_col, long_tp_gap_col = 'long_tp_1_{}'.format(strat_version), 'long_tp_0_{}'.format(strat_version), 'long_tp_gap_{}'.format(strat_version) \n","short_epout_1_col, short_epout_0_col, short_epout_gap_col = 'short_epout_1_{}'.format(strat_version), 'short_epout_0_{}'.format(strat_version), 'short_epout_gap_{}'.format(strat_version) \n","long_epout_1_col, long_epout_0_col, long_epout_gap_col = 'long_epout_1_{}'.format(strat_version), 'long_epout_0_{}'.format(strat_version), 'long_epout_gap_{}'.format(strat_version) \n","\n","data_cols = ['open', 'high', 'low']   # Todo - public_indi 이전에 해야할지도 모름 # 'close', 'haopen', 'hahigh', 'halow', 'haclose'\n","tp_cols = [short_tp_1_col, short_tp_0_col, short_tp_gap_col, long_tp_1_col, long_tp_0_col, long_tp_gap_col]   # Todo - public_indi 이전에 해야할지도 모름\n","epout_cols = [short_epout_1_col, short_epout_0_col, short_epout_gap_col, long_epout_1_col, long_epout_0_col, long_epout_gap_col]   # Todo - public_indi 이전에 해야할지도 모름\n","\n","short_tp_1_, short_tp_0_, short_tp_gap_, long_tp_1_, long_tp_0_, long_tp_gap_ = [res_df[col_].to_numpy() for col_ in tp_cols]\n","short_epout_1_, short_epout_0_, short_epout_gap_, long_epout_1_, long_epout_0_, long_epout_gap_ = [res_df[col_].to_numpy() for col_ in epout_cols]\n","open, high, low = [res_df[col_].to_numpy() for col_ in data_cols]\n","\n","short_base = (short_tp_1_ + short_tp_0_) / 2\n","long_base = (long_tp_1_ + long_tp_0_) / 2\n","\n","touch_period = 50\n","\n","short_a_touch = pd.Series(np.where(high >= short_tp_0_, np.arange(len(res_df)), np.nan)).rolling(touch_period, min_periods=1).max().to_numpy()  # min -> max\n","short_b_touch = pd.Series(np.where(low <= short_tp_1_, np.arange(len(res_df)), np.nan)).rolling(touch_period, min_periods=1).max().to_numpy()   # min 으로 하면 a 이전에 b 있는건 모두 제외하게됨\n","\n","short_en_p = (get_line(short_a_touch, short_tp_0_) + get_line(short_b_touch, short_tp_1_)) / 2\n","short_base_b = get_line(short_b_touch, short_base)\n","short_tp_gap_b = get_line(short_b_touch, short_tp_gap_)\n","short_open_res *= (high >= short_base_b) & (short_base_b >= open) & (short_a_touch < short_b_touch) & (short_base_b + config.loc_set.point.base_gap * short_tp_gap_b >= short_base)\n","\n","long_a_touch = pd.Series(np.where(low <= long_tp_0_, np.arange(len(res_df)), np.nan)).rolling(touch_period, min_periods=1).max().to_numpy()       \n","long_b_touch = pd.Series(np.where(high >= long_tp_1_, np.arange(len(res_df)), np.nan)).rolling(touch_period, min_periods=1).max().to_numpy()\n","\n","long_en_p = (get_line(long_a_touch, long_tp_0_) + get_line(long_b_touch, long_tp_1_)) / 2\n","long_base_b = get_line(long_b_touch, long_base)\n","long_tp_gap_b = get_line(long_b_touch, long_tp_gap_)\n","long_open_res *= (open >= long_base_b) & (long_base_b >= low) & (long_a_touch < long_b_touch) & (long_base_b - config.loc_set.point.base_gap * long_tp_gap_b <= long_base)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":3,"status":"ok","timestamp":1648558797859,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"5X-3R-rSwFDh","outputId":"2053743d-9468-4bd6-c0e8-c2817b448ec6"},"outputs":[{"name":"stdout","output_type":"stream","text":["[ 379.67  379.67  387.17 ... 3145.43 3145.43 3126.73]\n","[ 386.14  386.14  391.39 ... 3158.96 3158.96 3150.79]\n","[ 382.905  382.905  389.28  ... 3152.195 3152.195 3138.76 ]\n"]},{"data":{"text/plain":["0"]},"execution_count":28,"metadata":{},"output_type":"execute_result"}],"source":["print(get_line(long_a_touch, long_tp_0_)[long_open_res.astype(bool)])\n","print(get_line(long_a_touch, long_tp_0_)[long_open_res.astype(bool)])\n","print(get_line(long_b_touch, long_tp_1_)[long_open_res.astype(bool)])\n","print(long_base_b[long_open_res.astype(bool)])\n","np.sum(long_en_p[long_open_res.astype(bool)] != long_base_b[long_open_res.astype(bool)])"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"yGm3hwHEJ1va"},"outputs":[],"source":["def get_max_tpg(open_side, ohlc_list, pr_, obj_, rtc_gap):  # much faster\n","    if type(obj_) == list:\n","        obj_ = list(zip(*obj_))\n","\n","    h, l = ohlc_list[1:3]\n","\n","    if open_side == \"SELL\":\n","      max_tpg = np.array([ep_ - np.min(l[int(iin):int(iout + 1)]) for ep_, _, iin, iout in obj_]) / rtc_gap # out 포함\n","      # max_outg = np.array([np.max(h[int(iin):int(iout + 1)]) - ep_ for ep_, _, iin, iout in obj_]) / rtc_gap\n","    else:\n","      max_tpg = np.array([np.max(h[int(iin):int(iout + 1)]) - ep_ for ep_, _, iin, iout in obj_]) / rtc_gap\n","      # max_outg = np.array([ep_ - np.min(l[int(iin):int(iout + 1)]) for ep_, _, iin, iout in obj_]) / rtc_gap\n","\n","    return max_tpg[pr_ < 1]  # out 된 case 만 tpg 담음"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"eooryL32-zxp"},"outputs":[],"source":["short_max_tpg = get_max_tpg(\"SELL\", ohlc_list, short_pr, short_obj[:4], short_open_rtc_gap)\n","long_max_tpg = get_max_tpg(\"BUY\", ohlc_list, long_pr, long_obj[:4], long_open_rtc_gap)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"yOMiuw7cJYmZ"},"outputs":[],"source":["long_max_tpg"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"SrGNSuOjCyPn"},"outputs":[],"source":["def get_pr_v3(open_side, h, l, obj, tpout, lvrg, fee, p_ranges, p_qty, inversion=False):  # --> 여기서 사용하는 ex_p = ex_p\n","\n","    en_p = obj[0]\n","    # ex_p = obj[1]\n","    tp, out = np.split(tpout, 2, axis=1)\n","    len_p = len(p_ranges)\n","    en_ps, tps, outs, lvrgs, fees = [np.tile(arr_, (1, len_p)) for arr_ in [en_p, tp, out, lvrg, fee]]\n","    \n","    np_obj = np.array(obj).T[0]\n","    assert len(np_obj.shape) == 2\n","    \n","    # iin == iout 인 경우 분리\n","    en_idx = np_obj[:, 2]\n","    ex_idx = np_obj[:, 3]\n","    equal_idx = en_idx == ex_idx\n","        \n","    if open_side == \"SELL\":\n","        p_tps = en_ps - (en_ps - tps) * p_ranges\n","        # min_low = np.array([np.min(l[int(iin):int(iout + 1)]) for _, _, iin, iout in list(zip(*obj[:4]))]).reshape(-1, 1)  # -> deprecated, start from iin + 1\n","        min_low = np.full_like(en_p, np.nan)\n","        min_low[~equal_idx] = np.array([np.min(l[int(iin + 1):int(iout + 1)]) for _, _, iin, iout in np_obj[~equal_idx, :4]]).reshape(-1, 1) # start from iin + 1\n","        tp_idx = np.tile(min_low, (1, len_p)) <= p_tps\n","        \n","        # ------ liquidation ------ #\n","        max_high = np.full_like(en_p, np.nan)\n","        max_high[~equal_idx] = np.array([np.max(h[int(iin):int(iout)]) for _, _, iin, iout in np_obj[~equal_idx, :4]]).reshape(-1, 1)\n","        liqd = np.nanmin((en_p / max_high - fee - 1) * lvrg + 1)\n","    else:\n","        p_tps = en_ps + (tps - en_ps) * p_ranges\n","        # max_high = np.array([np.max(h[int(iin):int(iout + 1)]) for _, _, iin, iout in list(zip(*obj[:4]))]).reshape(-1, 1)\n","        max_high = np.full_like(en_p, np.nan)\n","        max_high[~equal_idx] = np.array([np.max(h[int(iin + 1):int(iout + 1)]) for _, _, iin, iout in np_obj[~equal_idx, :4]]).reshape(-1, 1)\n","        tp_idx = np.tile(max_high, (1, len_p)) >= p_tps\n","        # print(p_tps)\n","        # print(max_high)\n","\n","        # ------ liquidation ------ #\n","        min_low = np.full_like(en_p, np.nan)\n","        min_low[~equal_idx] = np.array([np.min(l[int(iin):int(iout)]) for _, _, iin, iout in np_obj[~equal_idx, :4]]).reshape(-1, 1)\n","        liqd = np.nanmin((min_low / en_p - fee - 1) * lvrg + 1)\n","\n","    ex_ps = outs.copy()\n","    ex_ps[tp_idx] = p_tps[tp_idx]\n","\n","    if open_side == \"SELL\":\n","        if not inversion:\n","            pr = ((en_ps / ex_ps - fees - 1) * lvrgs * p_qty).sum(axis=1) + 1\n","        else:\n","            pr = ((ex_ps / en_ps - fees - 1) * lvrgs * p_qty).sum(axis=1) + 1\n","    else:\n","        if not inversion:\n","            # print(fees)\n","            # print(p_qty)\n","            # print(p_qty * fees)\n","            pr = ((ex_ps / en_ps - fees - 1) * lvrgs * p_qty).sum(axis=1) + 1\n","        else:\n","            pr = ((en_ps / ex_ps - fees - 1) * lvrgs * p_qty).sum(axis=1) + 1\n","\n","    return pr.reshape(-1, 1), liqd"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"b5s3Us9VtlXH"},"outputs":[],"source":["p_ranges, p_qty = [0.2, 0.6, 1], [1, 0.0, 0.00]\n","long_pr, long_liqd = get_pr_v3(OrderSide.BUY, h, l, long_obj, long_tpout_arr, long_lvrg_arr, long_fee_arr, p_ranges, p_qty, inversion)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"s1O_gGXVtrtz"},"outputs":[],"source":["long_pr"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"HBFh3FJLpYeZ"},"outputs":[],"source":["def liquidation_v2(open_side, data_, obj_, lvrg, fee):  # v1 is deprecated\n","    if type(obj_) == list:\n","        obj = list(zip(*obj_))\n","\n","    np_obj = np.array(obj_).T[0]\n","    assert len(np_obj.shape) == 2\n","    \n","    en_p = obj_[0]\n","\n","    # iin == iout 인 경우 분리\n","    en_idx = np_obj[:, 2]\n","    ex_idx = np_obj[:, 3]\n","    equal_idx = en_idx == ex_idx\n","\n","    if open_side == \"SELL\":\n","        max_high = np.full_like(en_p, np.nan)\n","        max_high[~equal_idx] = np.array([np.max(data_[int(iin):int(iout)]) for _, _, iin, iout in np_obj[~equal_idx, :4]]).reshape(-1, 1)\n","        return np.nanmin((en_p / max_high - fee - 1) * lvrg + 1)\n","    else:\n","        min_low = np.full_like(en_p, np.nan)\n","        min_low[~equal_idx] = np.array([np.min(data_[int(iin):int(iout)]) for _, _, iin, iout in np_obj[~equal_idx, :4]]).reshape(-1, 1)\n","        return np.nanmin((min_low / en_p - fee - 1) * lvrg + 1)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":527,"status":"ok","timestamp":1648462727490,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"GtajcCM49AGr","outputId":"a0c857d5-83db-407c-f0dd-bb906de72f20"},"outputs":[{"name":"stdout","output_type":"stream","text":["(2005,)\n","(1724,)\n","0.9338351565411452\n","0.9832121539680836\n"]}],"source":["short_liqd = liquidation_v2(OrderSide.SELL, h, short_obj[:4], short_lvrg_arr, short_fee_arr)\n","long_liqd = liquidation_v2(OrderSide.BUY, l, long_obj[:4], long_lvrg_arr, long_fee_arr)\n","\n","print(short_liqd)\n","print(long_liqd)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"eMuRjqo_evR1"},"outputs":[],"source":["def liquidation_v2(open_side, data_, obj_, lvrg, fee):  # much faster\n","\n","    # if type(obj_) == list:\n","    #     obj_ = \n","    # if open_side == \"SELL\":\n","    #     return np.min([(ep_ / np.max(data_[int(iin):int(iout + 1)]) - fee - 1) * lvrg + 1 for ep_, _, iin, iout in obj_])\n","    # else:\n","    #     return np.min([(np.min(data_[int(iin):int(iout + 1)]) / ep_ - fee - 1) * lvrg + 1 for ep_, _, iin, iout in obj_])\n","\n","    np_obj = np.array(obj).T[0]\n","    assert len(np_obj.shape) == 2\n","\n","    en_p = obj_[0]  # 2d\n","\n","    print(np_obj.shape)\n","    \n","    # iin == iout 인 경우 분리\n","    en_idx = np_obj[:, 2]\n","    ex_idx = np_obj[:, 3]\n","    equal_idx = en_idx == ex_idx\n","    print(equal_idx)\n","        \n","    if open_side == \"SELL\":\n","        max_high = en_p.copy()\n","        max_high[~equal_idx] = np.array([np.max(data_[int(iin):int(iout)]) for _, _, iin, iout in np_obj[~equal_idx, :4]]).reshape(-1, 1)  # equal_idx 는 liqd 를 측정하지 않음\n","        return np.min((en_p / max_high - fee - 1) * lvrg + 1)\n","    else:\n","        min_low = en_p.copy()\n","        print(min_low)\n","\n","        # min_low[~equal_idx] = np.array([np.min(data_[int(iin):int(iout)]) for _, _, iin, iout in np_obj[~equal_idx, :4]]).reshape(-1, 1)\n","        print(data_)\n","        # res = np.array([np.min(data_[int(iin):int(iout)]) for _, _, iin, iout in np_obj[~equal_idx, :4]]).reshape(-1, 1)\n","        res = np.min([(np.min(data_[int(iin):int(iout)]) / ep_ - fee - 1) * lvrg + 1 for ep_, _, iin, iout in list(zip(*obj_)) if iin != iout])\n","        # print(min_low[~equal_idx])\n","        print(res)\n","        return np.min((min_low / en_p - fee - 1) * lvrg + 1)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"uLMEbR_vij3L"},"outputs":[],"source":["h, l = ohlc_list[1:3]\n","long_liqd = liquidation_v2(OrderSide.BUY, l, long_obj[:4], long_lvrg_arr, long_fee_arr)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ykrPUuxiXlLG"},"outputs":[],"source":["# np.array(long_obj)[:,(en_idx == ex_idx)].shape\n","long_np_obj = np.array(long_obj).T[0]"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":401,"status":"ok","timestamp":1648455838651,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"MZiMIYLln8bB","outputId":"3a2f1100-f1b1-4ad9-da2f-d50708a60ccd"},"outputs":[{"data":{"text/plain":["array([[   383.005,    381.73 ,     60.   ,     61.   ],\n","       [   386.33 ,    384.9  ,    105.   ,    107.   ],\n","       [   386.43 ,    385.24 ,    240.   ,    243.   ],\n","       ...,\n","       [  3806.905,   3863.8  , 679660.   , 679934.   ],\n","       [  3953.845,   3944.   , 680228.   , 680255.   ],\n","       [  4102.28 ,   4089.18 , 685040.   , 685167.   ]])"]},"execution_count":507,"metadata":{},"output_type":"execute_result"}],"source":["long_np_obj[~equal_idx, :4]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"r8rHPFeHm1DQ"},"outputs":[],"source":["# for _, _, iin, iout in long_np_obj[~equal_idx, :4]:\n","#   print(iin, iout)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":390,"status":"ok","timestamp":1648453058391,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"Uyjsp9EyZ4GF","outputId":"b15069ba-0057-4665-916c-f4417979cb88"},"outputs":[{"data":{"text/plain":["(1724,)"]},"execution_count":446,"metadata":{},"output_type":"execute_result"}],"source":["# long_np_obj.shape\n","# # long_np_obj.T[0]\n","long_np_obj\n","\n","en_idx = long_np_obj[:, 2]\n","ex_idx = long_np_obj[:, 3]\n","\n","# print(en_idx[:5])\n","# print(ex_idx[:5])\n","# np.sum(en_idx == ex_idx)\n","equal_idx = en_idx == ex_idx\n","equal_idx.shape\n","# en_idx"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"_GrZgkaSZC2K"},"outputs":[],"source":["# # for items in zip(long_np_obj[:4]):\n","# # for items in list(zip(*long_obj[:4])):\n","# for items in long_np_obj:\n","#   print(items)\n","#   break\n","equal_idx = equal_idx.ravel()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"R1YRROdJYWkH"},"outputs":[],"source":["min_low = np.full_like(en_idx, np.nan)\n","min_low[~equal_idx] = np.array([np.min(l[int(iin + 1):int(iout + 1)]) for _, _, iin, iout in long_np_obj[~equal_idx, :4]]).reshape(-1, 1)  # reshape for shape match\n","# min_low[equal_idx] = np.array([np.min(l[int(iin + 1):int(iout + 1)]) for _, _, iin, iout in long_np_obj[equal_idx, :4]]).reshape(-1, 1)  # reshape for shape match # np.nan 은 비교에서 무조건 False 즉, out 처리될 것"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":3,"status":"ok","timestamp":1648454521907,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"jFxV8dami0wn","outputId":"896b3188-7179-4f33-c9e5-f259f5458436"},"outputs":[{"data":{"text/plain":["-1.7472363139317024"]},"execution_count":483,"metadata":{},"output_type":"execute_result"}],"source":["long_liqd"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"mMsDJDmO5qNw"},"outputs":[],"source":["short_outg_plot_data = short_max_outg[short_max_outg <= max_plot_outg]  # nan 과 inf 때문에 이 방식 채택\n","long_outg_plot_data = long_max_outg[long_max_outg <= max_plot_outg]\n","print(\"len(short_outg_plot_data) :\", len(short_outg_plot_data))\n","print(\"len(long_outg_plot_data) :\", len(long_outg_plot_data))\n","\n","plt.style.use(['dark_background', 'fast'])\n","fig = plt.figure(figsize=(12, 5))\n","nrows, ncols = 1, 2\n","gs = gridspec.GridSpec(nrows=nrows,  # row 부터 index 채우고 col 채우는 순서임 (gs_idx)\n","                        ncols=ncols\n","                        )\n","  \n","plt.subplot(gs[0])\n","kde_plot_v2(*np.unique(short_outg_plot_data, return_counts=True))\n","\n","plt.subplot(gs[1])\n","kde_plot_v2(*np.unique(long_outg_plot_data, return_counts=True))\n","\n","plt.suptitle('outg')\n","plt.show()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"BjxCPi96JbfS"},"outputs":[],"source":["# --- tp > ep > out 검사 --- #\n","long_tp, long_out = np.split(long_tpout_arr, 2, axis=1)\n","long_ep = long_obj[0]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Q_wH04vCJzYu"},"outputs":[],"source":["print(np.sum((long_tp <= long_ep)))\n","print(np.sum((long_ep <= long_out)))\n","print(len((long_ep <= long_out)))"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"YlENTUSXhBfa"},"outputs":[],"source":["def kde_plot_v2(v, c, kde_factor=0.15, num_samples=100):\n","\n","  # start_0 = time.time()\n","  kde = stats.gaussian_kde(v,weights=c,bw_method=kde_factor)\n","  kdx = np.linspace(v.min(),v.max(),num_samples)\n","  kdy = kde(kdx)\n","  ticks_per_sample = (kdx.max() - kdx.min()) / num_samples\n","  # print(\"ticks_per_sample :\", ticks_per_sample)  # sample 당 가격\n","  # print(\"kdy elapsed_time :\", time.time() - start_0)\n","\n","  peaks,_ = signal.find_peaks(kdy)\n","  pkx = kdx[peaks]\n","  pky = kdy[peaks]\n","  print(\"pkx :\", pkx)\n","\n","  # plt.figure(figsize=(10,5))\n","  plt.hist(v, weights=c, bins=num_samples, alpha=.8, edgecolor='black')\n","  plt.plot(kdx, kdy, color='white')\n","  plt.plot(pkx, pky, 'bo', color='yellow')\n","  # plt.show()\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ZkbuBX1Ygzll"},"outputs":[],"source":["def get_max_outg(open_side, config, ohlc_list, obj, tpout_arr, rtc_gap):\n","\n","    h, l = ohlc_list[1:3]    \n","    en_p, _, en_idxs, _, open_idxs = obj\n","\n","    if open_side == \"SELL\":\n","      idxgs = [np.argwhere(l[int(en_idx) : int(en_idx + config.tr_set.bias_info_tick)] <= tpout_arr[i, 0]) for i, en_idx in enumerate(en_idxs)]\n","    else:\n","      idxgs = [np.argwhere(h[int(en_idx) : int(en_idx + config.tr_set.bias_info_tick)] >= tpout_arr[i, 0]) for i, en_idx in enumerate(en_idxs)]\n","\n","    min_idxg = np.array([gaps.min() if len(gaps) != 0 else np.nan for gaps in idxgs])  # get 최소 idx_gap from en_idx\n","    nan_idx = np.isnan(min_idxg) # .astype(int)\n","    min_idxg[nan_idx] = 0  # fill na 0, for idex summation below\n","\n","    if open_side == \"SELL\":\n","      max_outg = np.array([np.max(h[int(en_idx):int(en_idx + idx_gap + 1)]) - ep_ for en_idx, idx_gap, ep_ in zip(en_idxs, min_idxg, en_p)]) / rtc_gap\n","    else:\n","      max_outg = np.array([ep_ - np.min(l[int(en_idx):int(en_idx + idx_gap + 1)]) for en_idx, idx_gap, ep_ in zip(en_idxs, min_idxg, en_p)]) / rtc_gap # out_idx 포함\n","\n","    return max_outg[~nan_idx], open_idxs[~nan_idx].astype(int)  # true_bias 의 outg data 만 사용"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":479,"status":"ok","timestamp":1648380698566,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"mYQgnD9CgC8b","outputId":"e316919a-0e22-4266-ef24-185284cc8cb5"},"outputs":[{"name":"stdout","output_type":"stream","text":["[ 390.58  387.91  344.81  346.25  334.7   351.81  366.07  367.09  372.83  372.08  384.92  387.79  374.12  365.82  364.87  359.06  386.58  381.46  384.71  385.    383.9   384.18  381.18  369.86  373.5   374.17  341.4   344.5   345.29  342.93  343.49  340.7   320.3   345.3   349.59  355.    352.    354.    357.96  358.21  355.    352.47  355.18  346.41  347.14  348.54  346.62  348.28  347.38  348.19  351.74  352.98  339.87  339.64  339.99  339.46  349.97  368.    375.85  374.3   367.2   383.8   386.25  385.31  384.97  377.3   377.85  380.28  378.    365.92  366.9   367.9   368.6   369.61  368.48  369.09  372.72  379.    379.17  375.2   379.09  380.52  397.42  417.13  418.05  413.6   412.26  411.7   408.6   406.29  405.5   383.74  388.2   386.95  387.    386.97  387.86  378.69  383.58  459.06  437.    445.    445.99  464.27  463.1   464.96  463.3   456.76  463.89  462.3   458.31  459.37  461.31  470.28  475.    591.54  601.95  619.3   609.46  573.21  512.97  554.39  588.37  593.83  571.43  593.31  589.71  552.62  551.44  563.9   573.    568.68  562.72  556.82  565.49  581.    592.74  651.18  644.2   646.4   607.89  606.5   615.    612.8   614.27  582.76  610.64  704.97  753.49  741.36  736.2   996.   1694.7  1686.52 1859.07 1818.7  1892.84 1930.29 1959.36 1639.28 1565.   1565.   1565.   1565.   1565.   1565.   1565.   1565.   1565.   1565.   1711.55 1783.83 1821.46 1834.   1623.93 1979.92 2062.   2204.69 2527.76 2720.47 3532.96 3890.   2778.64 2600.   2331.29 2175.   2140.   1963.91 1753.24 1969.43 2045.5  2158.   2250.   2280.78 2316.37 3180.   3141.93 3276.   3243.   3271.   3329.56 3236.   3275.94 3184.99 3410.   3963.04 3305.   3260.94 3636.28 3419.99 3400.   3383.32 3558.82 3499.   3503.68 4528.   4579.46 4492.13 4231.98 4373.8  3794.77 4082.93 4055.41 3782.   3745.   3163.98 3227.16 3302.58 3105.25 3078.   2621.06 2548.   2619.76 3116.4 ]\n","[ 390.58  387.91  344.81  346.25  334.7   351.81  366.07  367.09  372.83  372.08  384.92  387.79  374.12  365.82  364.87  359.06  386.58  381.46  384.71  385.    383.9   384.18  381.18  369.86  373.5   374.17  341.4   344.5   345.29  342.93  343.49  340.7   320.3   345.3   349.59  355.    352.    354.    357.96  358.21  355.    352.47  355.18  346.41  347.14  348.54  346.62  348.28  347.38  348.19  351.74  352.98  339.87  339.64  339.99  339.46  349.97  368.    375.85  374.3   367.2   383.8   386.25  385.31  384.97  377.3   377.85  380.28  378.    365.92  366.9   367.9   368.6   369.61  368.48  369.09  372.72  379.    379.17  375.2   379.09  380.52  397.42  417.13  418.05  413.6   412.26  411.7   408.6   406.29  405.5   383.74  388.2   386.95  387.    386.97  387.86  378.69  383.58  459.06  437.    445.    445.99  464.27  463.1   464.96  463.3   456.76  463.89  462.3   458.31  459.37  461.31  470.28  475.    591.54  601.95  619.3   609.46  573.21  512.97  554.39  588.37  593.83  571.43  593.31  589.71  552.62  551.44  563.9   573.    568.68  562.72  556.82  565.49  581.    592.74  651.18  644.2   646.4   607.89  606.5   615.    612.8   614.27  582.76  610.64  704.97  753.49  741.36  736.2   996.   1694.7  1686.52 1859.07 1818.7  1892.84 1930.29 1959.36 1639.28 1565.   1565.   1565.   1565.   1565.   1565.   1565.   1565.   1565.   1565.   1711.55 1783.83 1821.46 1834.   1623.93 1979.92 2062.   2204.69 2527.76 2720.47 3532.96 3890.   2778.64 2600.   2331.29 2175.   2140.   1963.91 1753.24 1969.43 2045.5  2158.   2250.   2280.78 2316.37 3180.   3141.93 3276.   3243.   3271.   3329.56 3236.   3275.94 3184.99 3410.   3963.04 3305.   3260.94 3636.28 3419.99 3400.   3383.32 3558.82 3499.   3503.68 4528.   4579.46 4492.13 4231.98 4373.8  3794.77 4082.93 4055.41 3782.   3745.   3163.98 3227.16 3302.58 3105.25 3078.   2621.06 2548.   2619.76 3116.4 ]\n","234\n"]}],"source":["strat_version = config.strat_version\n","long_open_res = res_df['long_open_{}'.format(strat_version)].to_numpy().astype(bool)\n","\n","res_df['long_tp_{}'.format(strat_version)].to_numpy()[long_open_res]\n","res_df['long_ep_{}'.format(strat_version)].to_numpy()[long_open_res]\n","# res_df['long_ep_{}'.format(strat_version)].to_numpy()\n","# long_open_res\n","# res_df['long_ep_{}'.format(strat_version)].to_numpy()[long_open_res]\n","# np.sum(res_df['long_tp_{}'.format(strat_version)].to_numpy()[long_open_res] <= res_df['long_ep_{}'.format(strat_version)].to_numpy()[long_open_res])\n","# res = res_df['long_tp_{}'.format(strat_version)].to_numpy()[long_open_res] > res_df['long_ep_{}'.format(strat_version)].to_numpy()[long_open_res]\n","res = res_df['long_tp_{}'.format(strat_version)].to_numpy()[long_open_res] <= res_df['long_ep_{}'.format(strat_version)].to_numpy()[long_open_res]\n","\n","print(res_df['long_tp_{}'.format(strat_version)].to_numpy()[long_open_res][res])\n","print(res_df['long_ep_{}'.format(strat_version)].to_numpy()[long_open_res][res])\n","print(len(res_df['long_ep_{}'.format(strat_version)].to_numpy()[long_open_res][res]))\n","\n","# res = res_df['long_tp_{}'.format(strat_version)].to_numpy() > res_df['long_ep_{}'.format(strat_version)].to_numpy()\n","# res = res_df['long_ep_{}'.format(strat_version)].to_numpy() > res_df['long_out_{}'.format(strat_version)].to_numpy()\n","\n","# print(res_df['long_tp_{}'.format(strat_version)].to_numpy()[res])\n","# print(res_df['long_ep_{}'.format(strat_version)].to_numpy()[res])\n","# print(res_df['long_out_{}'.format(strat_version)].to_numpy()[res])\n","# print(len(res_df['long_ep_{}'.format(strat_version)].to_numpy()[res]))\n","# print(len(res_df['long_out_{}'.format(strat_version)].to_numpy()[res]))\n","\n","# assert np.sum(res_df['long_tp_{}'.format(strat_version)].to_numpy()[long_open_res] <= res_df['long_ep_{}'.format(strat_version)].to_numpy()[long_open_res]) == 0\n","# assert np.sum(res_df['long_ep_{}'.format(strat_version)].to_numpy()[long_open_res] <= res_df['long_out_{}'.format(strat_version)].to_numpy()[long_open_res]) == 0"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"57mFruHtCmmh"},"outputs":[],"source":["# fig, axs=plt.subplots(1,2,sharey=True,tight_layout=True)\n","# axs[0].hist(short_max_outg,bins=100)\n","# axs[1].hist(abs_ratio_5T[short_outg_open_idx],bins=100)\n","# plt.show()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"40MdGjCY1YtH"},"outputs":[],"source":["def kde_plot(plot_data, kde_factor=0.15, num_samples=100):\n","  v, c = np.unique(plot_data, return_counts=True)  \n","\n","  # start_0 = time.time()\n","  kde = stats.gaussian_kde(v,weights=c,bw_method=kde_factor)\n","  kdx = np.linspace(v.min(),v.max(),num_samples)\n","  kdy = kde(kdx)\n","  ticks_per_sample = (kdx.max() - kdx.min()) / num_samples\n","  # print(\"ticks_per_sample :\", ticks_per_sample)  # sample 당 가격\n","  # print(\"kdy elapsed_time :\", time.time() - start_0)\n","\n","  peaks,_ = signal.find_peaks(kdy)\n","  pkx = kdx[peaks]\n","  pky = kdy[peaks]\n","\n","  # plt.figure(figsize=(10,5))\n","  plt.hist(v, weights=c, bins=num_samples, alpha=.8, edgecolor='black')\n","  plt.plot(kdx, kdy, color='white')\n","  plt.plot(pkx, pky, 'bo', color='yellow')\n","  # plt.show()\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"v2k6D7UceIK4"},"outputs":[],"source":["v, c = np.unique(long_tpg_plot, return_counts=True)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":424,"status":"ok","timestamp":1648269301273,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"bJe1fSGFdUcj","outputId":"991eb570-3633-49b7-9a91-02cb5d4fba43"},"outputs":[{"name":"stdout","output_type":"stream","text":["ticks_per_sample : 0.047098781436344224\n","kdy elapsed_time : 0.013733863830566406\n"]}],"source":["kde_factor = 0.15\n","num_samples = 100\n","\n","start_0 = time.time()\n","kde = stats.gaussian_kde(v,weights=c,bw_method=kde_factor)\n","kdx = np.linspace(v.min(),v.max(),num_samples)\n","kdy = kde(kdx)\n","ticks_per_sample = (kdx.max() - kdx.min()) / num_samples\n","print(\"ticks_per_sample :\", ticks_per_sample)  # sample 당 가격\n","print(\"kdy elapsed_time :\", time.time() - start_0)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":320},"executionInfo":{"elapsed":954,"status":"ok","timestamp":1648269365137,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"1Cby5teZdUcj","outputId":"db5fd5b3-4617-42f9-877c-c4b9b82adcef"},"outputs":[{"data":{"image/png":"\n","text/plain":["<Figure size 720x360 with 1 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["peaks,_ = signal.find_peaks(kdy)\n","pkx = kdx[peaks]\n","pky = kdy[peaks]\n","\n","plt.figure(figsize=(10,5))\n","plt.hist(v, weights=c, bins=num_samples, alpha=.8, edgecolor='black')\n","plt.plot(kdx, kdy, color='white')\n","plt.plot(pkx, pky, 'bo', color='yellow')\n","plt.show()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"CfiSD0uwcNIZ"},"outputs":[],"source":["def max_tpout_gap(open_side, ohlc_list, obj_, rtc_gap):  # much faster\n","    if type(obj_) == list:\n","        obj_ = list(zip(*obj_))\n","\n","    h, l = ohlc_list[1:3]\n","\n","    if open_side == \"SELL\":\n","      max_tpg = np.array([ep_ - np.min(l[int(iin):int(iout + 1)]) for ep_, _, iin, iout in obj_]) / rtc_gap # out 포함\n","      max_outg = np.array([np.max(h[int(iin):int(iout + 1)]) - ep_ for ep_, _, iin, iout in obj_]) / rtc_gap\n","    else:\n","      max_tpg = np.array([np.max(h[int(iin):int(iout + 1)]) - ep_ for ep_, _, iin, iout in obj_]) / rtc_gap\n","      max_outg = np.array([ep_ - np.min(l[int(iin):int(iout + 1)]) for ep_, _, iin, iout in obj_]) / rtc_gap\n","\n","    return max_tpg, max_outg"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"r82KfqFqi9tp"},"outputs":[],"source":["short_open_res = np.ones(len(res_df))\n","\n","strat_version = config.strat_version\n","\n","short_rtc_1_col, short_rtc_0_col, short_rtc_gap_col = 'short_rtc_1_{}'.format(strat_version), 'short_rtc_0_{}'.format(strat_version), 'short_rtc_gap_{}'.format(strat_version) \n","long_rtc_1_col, long_rtc_0_col, long_rtc_gap_col = 'long_rtc_1_{}'.format(strat_version), 'long_rtc_0_{}'.format(strat_version), 'long_rtc_gap_{}'.format(strat_version) \n","\n","short_rtc_1_col, short_rtc_0_col, short_rtc_gap_col = 'short_rtc_1_{}'.format(strat_version), 'short_rtc_0_{}'.format(strat_version), 'short_rtc_gap_{}'.format(strat_version) \n","long_rtc_1_col, long_rtc_0_col, long_rtc_gap_col = 'long_rtc_1_{}'.format(strat_version), 'long_rtc_0_{}'.format(strat_version), 'long_rtc_gap_{}'.format(strat_version) \n","\n","data_cols = ['open', 'high', 'low']   # Todo - public_indi 이전에 해야할지도 모름 # 'close', 'haopen', 'hahigh', 'halow', 'haclose'\n","rtc_cols = [short_rtc_1_col, short_rtc_0_col, short_rtc_gap_col, long_rtc_1_col, long_rtc_0_col, long_rtc_gap_col]   # Todo - public_indi 이전에 해야할지도 모름\n","\n","short_rtc_1_, short_rtc_0_, short_rtc_gap_, long_rtc_1_, long_rtc_0_, long_rtc_gap_ = [res_df[col_].to_numpy() for col_ in rtc_cols]\n","open, high, low = [res_df[col_].to_numpy() for col_ in data_cols]\n","short_base = (short_rtc_1_ + short_rtc_0_) / 2\n","long_base = (long_rtc_1_ + long_rtc_0_) / 2\n","# back_ha_o = res_df['haopen'].shift(1).to_numpy()\n","# back_ha_c = res_df['haclose'].shift(1).to_numpy()\n","\n","touch_period = 50\n","# short_open_res *= (back_ha_c >= back_ha_o) & (ha_o > ha_c)\n","# short_open_res *= ha_o == ha_h\n","# short_open_res *= np_timeidx % tf_entry == tf_entry - 1     \n","# short_a_touch = pd.Series(np.where(high >= short_rtc_0_, np.arange(len_df), np.nan)).rolling(touch_period, min_periods=1).max().to_numpy()  # min -> max\n","short_a_touch = pd.Series(np.where((high >= short_base_b) & (short_base_b >= open), np.arange(len_df), np.nan)).rolling(touch_period, min_periods=1).min().to_numpy()   # min 으로 하면 a 이전에 b 있는건 모두 제외하게됨\n","short_b_touch = pd.Series(np.where(low <= short_rtc_1_, np.arange(len_df), np.nan)).rolling(touch_period, min_periods=1).max().to_numpy()   # min 으로 하면 a 이전에 b 있는건 모두 제외하게됨\n","\n","short_a_touch_line = get_line(short_a_touch, short_rtc_0_)\n","short_b_touch_line = get_line(short_b_touch, short_rtc_1_)\n","short_en_p = (short_a_touch_line + short_b_touch_line) / 2\n","short_base_b = get_line(short_b_touch, short_base)\n","short_rtc_gap_b = get_line(short_b_touch, short_rtc_gap_)\n","short_open_res *= (high >= short_base_b) & (short_base_b >= open) & (short_a_touch < short_b_touch) & (short_base_b + config.loc_set.point.base_gap * short_rtc_gap_b >= short_base)\n","\n","res_df['short_open_{}'.format(strat_version)] = short_open_res"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":366,"status":"ok","timestamp":1647925782107,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"CgD4-ZKW11MQ","outputId":"c126aabb-cb41-4392-a80c-53971b146c2c"},"outputs":[{"name":"stdout","output_type":"stream","text":["[ 377.545  378.085  379.015 ... 3148.91  3148.91  3148.91 ]\n","[ 377.545  378.085  379.015 ... 3148.91  3148.91  3148.91 ]\n"]},{"data":{"text/plain":["0"]},"execution_count":29,"metadata":{},"output_type":"execute_result"}],"source":["# short_en_p == short_base_b\n","print(short_en_p[~np.isnan(short_en_p)])\n","print(short_base_b[~np.isnan(short_en_p)])\n","\n","np.sum((short_en_p[~np.isnan(short_en_p)] == short_base_b[~np.isnan(short_en_p)]) == 0) # => why ..?"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":310,"status":"ok","timestamp":1647565975814,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"AIt9z1NRj5bJ","outputId":"c1b83639-7041-4745-dacd-d9cff49a205d"},"outputs":[{"name":"stdout","output_type":"stream","text":["[2934.59  2934.59  3028.59  3028.59  3028.59  3026.075 3026.075 3016.09  3014.67  3014.4   3014.4   3014.4   3014.4   3014.4   3014.4   3014.395 3014.315 3014.315 3030.235 3030.235 3030.235 3030.235 3051.18  3051.18  3051.18  3077.275 3076.77  3090.945 3105.1   3105.1   3105.1   3105.1   3105.1   3105.1   3099.205 3099.205 3099.205 3105.495 3105.495 3109.615 3127.43  3123.795 3123.795 3123.795 3112.695 3122.715 3122.715 3122.715 3122.715 3115.2   3114.93  3097.035 3115.31  3115.31  3114.245 3114.15  3114.15  3114.15  3112.2   3110.75  3110.75  3112.16  3112.16  3134.39  3134.39  3134.39  3127.905 3127.905 3127.905 3127.905 3128.595 3128.595 3138.59  3138.59  3147.47  3134.205 3133.04  3134.155 3131.105 3131.105 3131.105 3065.94  3065.94  3065.94  3065.51  3068.    3079.33  3079.33  3079.33  3099.805 3169.595 3169.595 3169.595 3169.04  3140.395 3140.395 3140.395 3148.91  3148.91  3148.91 ]\n","[    nan     nan     nan ... 3158.68 3158.68 3158.68]\n","[    nan     nan     nan ... 763812. 763812. 763812.]\n","[ 388.18  388.18  388.18 ... 3158.68 3158.68 3158.68]\n"]}],"source":["true_idx = short_open_res == 1\n","\n","# print(((short_a_touch_line + short_b_touch_line) / 2)[true_idx][-100:])\n","print(short_en_p[true_idx][-100:])\n","# print(short_a_touch_line[true_idx][-100:])\n","\n","print(short_a_touch_line)\n","print(short_a_touch)\n","print(short_rtc_0_)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":2,"status":"ok","timestamp":1647565931392,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"GXbSWec4ik3g","outputId":"547b0fc1-0e35-4387-e891-a3af42c18476"},"outputs":[{"name":"stdout","output_type":"stream","text":["[    nan     nan     nan ... 3158.68 3158.68 3158.68]\n","[    nan     nan     nan ... 763812. 763812. 763812.]\n","[ 388.18  388.18  388.18 ... 3158.68 3158.68 3158.68]\n"]}],"source":["short_a_touch_line = get_line(short_a_touch, short_rtc_0_)\n","short_b_touch_line = get_line(short_b_touch, short_rtc_1_)\n","short_en_p = (short_a_touch_line + short_b_touch_line) / 2\n","\n","# print(((short_a_touch_line + short_b_touch_line) / 2)[true_idx][-100:])\n","# print(short_en_p[true_idx][-100:])\n","\n","print(short_a_touch_line)\n","print(short_a_touch)\n","print(short_rtc_0_)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"fx4iA-T1k6GS"},"outputs":[],"source":["def get_line(touch, rtc_):\n","  touch_copy = touch.copy()\n","  touch_line = rtc_.copy()\n","\n","  nan_idx = np.isnan(touch_copy)\n","  touch_copy[nan_idx] = 0   # for indexing array\n","  touch_line[touch_copy.astype(int)]\n","  touch_line[nan_idx] = np.nan   # for true comp.\n","\n","  return touch_line"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Pk8i59oM4CFZ"},"outputs":[],"source":["# print(short_b_touch[-100:])\n","# print(short_base_b[-100:])\n","true_idx = short_open_res == 1\n","short_a_touch_line = get_line(short_a_touch, short_rtc_0_)\n","short_b_touch_line = get_line(short_b_touch, short_rtc_1_)\n","\n","print(len(short_a_touch_line))\n","print(len(short_b_touch_line))\n","print(((short_a_touch_line + short_b_touch_line) / 2)[true_idx][-100:])\n","\n","print(short_a_touch_line[true_idx][-100:])\n","print(short_b_touch_line[true_idx][-100:])\n","print(short_open_res[true_idx][-100:])\n","print(short_en_p[true_idx][-100:])"]},{"cell_type":"markdown","metadata":{"id":"8b4SbvPrAPR1"},"source":["##### partial"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"M4MB0mryCiHC"},"outputs":[],"source":["def get_pr_v2(open_side, h, l, obj, tpout, lvrg, fee, p_ranges, p_qty, inversion=False):  # --> 여기서 사용하는 ex_p = ex_p\n","\n","    en_p = obj[0]\n","    # ex_p = obj[1]\n","    tp, out = np.split(tpout, 2, axis=1)\n","    len_p = len(p_ranges)\n","    en_ps, tps, outs, lvrgs, fees = [np.tile(arr_, (1, len_p)) for arr_ in [en_p, tp, out, lvrg, fee]]\n","    \n","    np_obj = np.array(obj).T[0]\n","    assert len(np_obj.shape) == 2\n","    \n","    # iin == iout 인 경우 분리\n","    en_idx = np_obj[:, 2]\n","    ex_idx = np_obj[:, 3]\n","    equal_idx = en_idx == ex_idx\n","        \n","    if open_side == \"SELL\":\n","        p_tps = en_ps - (en_ps - tps) * p_ranges\n","        # min_low = np.array([np.min(l[int(iin):int(iout + 1)]) for _, _, iin, iout in list(zip(*obj[:4]))]).reshape(-1, 1)  # -> deprecated, start from iin + 1\n","        min_low = np.full_like(en_p, np.nan)\n","        min_low[~equal_idx] = np.array([np.min(l[int(iin + 1):int(iout + 1)]) for _, _, iin, iout in np_obj[~equal_idx, :4]]).reshape(-1, 1)\n","        tp_idx = np.tile(min_low, (1, len_p)) <= p_tps\n","    else:\n","        p_tps = en_ps + (tps - en_ps) * p_ranges\n","        # max_high = np.array([np.max(h[int(iin):int(iout + 1)]) for _, _, iin, iout in list(zip(*obj[:4]))]).reshape(-1, 1)\n","        max_high = np.full_like(en_p, np.nan)\n","        max_high[~equal_idx] = np.array([np.max(h[int(iin + 1):int(iout + 1)]) for _, _, iin, iout in np_obj[~equal_idx, :4]]).reshape(-1, 1)\n","        tp_idx = np.tile(max_high, (1, len_p)) >= p_tps\n","\n","    ex_ps = outs.copy()\n","    ex_ps[tp_idx] = p_tps[tp_idx]\n","\n","    if open_side == \"SELL\":\n","        if not inversion:\n","            pr = ((en_ps / ex_ps - fees - 1) * lvrgs * p_qty).sum(axis=1) + 1\n","        else:\n","            pr = ((ex_ps / en_ps - fees - 1) * lvrgs * p_qty).sum(axis=1) + 1\n","    else:\n","        if not inversion:\n","            pr = ((ex_ps / en_ps - fees - 1) * lvrgs * p_qty).sum(axis=1) + 1\n","        else:\n","            pr = ((en_ps / ex_ps - fees - 1) * lvrgs * p_qty).sum(axis=1) + 1\n","\n","    return pr.reshape(-1, 1)"]},{"cell_type":"markdown","metadata":{"id":"JNQxkb06ZdTe"},"source":["## plot_check_v2"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"hpkqOliMxSIU"},"outputs":[],"source":["res_df = wave_range_v4(res_df, 20, ltf_df=None, touch_lbperiod=50)"]},{"cell_type":"code","execution_count":93,"metadata":{"id":"A6QSF9COaHO5","executionInfo":{"status":"ok","timestamp":1650416959526,"user_tz":-540,"elapsed":401,"user":{"displayName":"7th June","userId":"08178289703395036410"}}},"outputs":[],"source":["# ------------------ plot_config ------------------ #\n","save_mode = 0\n","front_plot = 3    # 0 : whole, 1 : open, 2 : ep_tick, 3 : tp_tick, 4 : bias_tick\n","bias_plot = 0     # = swing_bias -> precision check : 1, recall check : 0\n","pr_descend = 1    # 1 -> 내림차순\n","position = 1      # -1 / 1, 0 (short / long)\n","# tf_plot = 1       # true - false plot\n","# pr_sort = 1     # -> default 1,  이상한 체결 확인하기 좋음\n","# wl_case = 1     # 1 / -1 / 0 (win loss study) --> oid\n","\n","x_max = 500\n","x_margin_mult = 1/30\n","y_margin_mult = 1/30  # 0 \n","\n","prev_plotsize = 100 #  100 20\n","# post_plotsize = 60\n","post_plotsize = config.tr_set.bias_info_tick\n","\n","inversion = 0\n","hedge = 0\n","\n","# ------ show or save ------ #\n","if save_mode:\n","  plot_check_dir = current_path + \"plot_check/\" +  key.replace(\".ftr\", \"\")\n","  shutil.rmtree(plot_check_dir, ignore_errors=True)  # remove existing dir\n","  os.makedirs(plot_check_dir)\n","  print(plot_check_dir)\n","else:\n","  plot_check_dir = None\n","\n","# ------------ 한 방향에 대해 plot_check 함 (by position var.) ------------ #\n","#   obj by position  \n","if position == -1:\n","  pos_str = \"SELL\"\n","  pr_, obj_ = short_pr, short_obj\n","  arr_list = [short_point1_arr, short_lvrg_arr, short_fee_arr, short_tpout_arr, short_bias_arr, short_en_tp1, short_en_out0]\n","else:   # both option currently not supported\n","  pos_str = \"BUY\"\n","  pr_, obj_ = long_pr, long_obj\n","  arr_list = [long_point1_arr, long_lvrg_arr, long_fee_arr, long_tpout_arr, long_bias_arr, long_en_tp1, long_en_out0]\n","pr, obj, [point1_arr, lvrg_arr, fee_arr, tpout_arr, bias_arr, en_tp1, en_out0] = sort_bypr_v3(pr_, obj_, arr_list, descending=pr_descend)\n","\n","pr_msg = \"%s\\n {} ~ {} -> {:.5f}\\n lvrg : {}\\n fee : {:.4f}\" % (pos_str)  # pos_str 으로 이곳에서 정의함\n","\n","# ------------------ data chunknize ------------------ #\n","np_df = res_df.to_numpy()\n","\n","# left_end_idx = obj[2] - prev_plotsize  # left_margin 기준 - entry_idx\n","left_end_idx = obj[4] - prev_plotsize  # left_margin 기준 - open_idx\n","right_end_idx = obj[3] + post_plotsize\n","invalid_left_end = np.sum(left_end_idx < 0)\n","\n","np_plot_params = np.hstack((left_end_idx, right_end_idx, pr, *obj, point1_arr, lvrg_arr, fee_arr, tpout_arr, en_tp1, en_out0))[invalid_left_end:]  # all arr should have same dimension\n","if bias_plot:\n","  bias_idx = bias_arr[invalid_left_end:].ravel()\n","  np_plot_params = np_plot_params[bias_idx]  # wave_bias = 1 만 plot"]},{"cell_type":"code","execution_count":99,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":366,"status":"ok","timestamp":1650417126166,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"FnSydxFXn_f9","outputId":"aac3327f-2e61-43c8-be3f-9025e0349e87"},"outputs":[{"output_type":"stream","name":"stderr","text":["/content/drive/My Drive/Colab Notebooks/JnQ/funcs/funcs_plot_check.py:10: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.\n","  step_col_arr = np.array(col_list)\n"]}],"source":["selection_id = config.selection_id\n","\n","# ------------ make col_idx_dict config ------------ #\n","nonstep_col_list = []\n","step_col_list = []\n","stepmark_col_list = []\n","# ------ set period ------ #\n","hc_itv1 = '5T'\n","hc_itv2 = '15T'\n","\n","rs_itv = 'T'\n","\n","wave_itv1 = config_list[0].loc_set.point.p1_itv1\n","wave_period1, wave_period2 = config_list[0].loc_set.point.p1_period1, config_list[0].loc_set.point.p1_period2\n","\n","dc_period = 5\n","tf1 = '5T'\n","tf2 = '15T'\n","\n","bb_itv = dc_itv\n","hbb_itv = hdc_itv\n","hhbb_itv = hhdc_itv\n","\n","# ------------ nonstep_col_list - add info(col, alpha, color, linewidth) ------------ #\n","# nonstep_col_list.append([['close'], 1, '#ffffff', 2])\n","\n","# ------------ step_col_list - add info(col, alpha, color, linewidth) ------------ #\n","# ------ htf_candle ------ #\n","step_col_list.append([['open_{}'.format(hc_itv1), 'close_{}'.format(hc_itv1)], 1, '#ffffff', 1])\n","step_col_list.append([['open_{}'.format(hc_itv2), 'close_{}'.format(hc_itv2)], 1, '#ffffff', 2])\n","\n","# ------ resi_sup ------ #\n","# step_col_list.append([['resi_{}'.format(rs_itv), 'sup_{}'.format(rs_itv)], 1, '#ffeb3b', 1])\n","# step_col_list.append([['resi_out_{}'.format(rs_itv), 'sup_out_{}'.format(rs_itv)], 1, 'dodgerblue', 2])\n","\n","# ------ wave_range ------ #\n","step_col_list.append([['dc_upper_{}{}'.format(wave_itv1, wave_period1), 'dc_lower_{}{}'.format(wave_itv1, wave_period1)], 1, '#ffeb3b', 1])\n","step_col_list.append([['dc_upper_{}{}'.format(wave_itv1, wave_period2), 'dc_lower_{}{}'.format(wave_itv1, wave_period2)], 1, '#ffeb3b', 1])\n","\n","# step_col_list.append([['dc_upper_{}{}'.format(wave_itv2, wave_period2), 'dc_lower_{}{}'.format(wave_itv2, wave_period2)], 1, '#e65100', 2])\n","\n","# ------ dc ------ #\n","# step_col_list.append([['dc_upper_{}'.format(tf1), 'dc_lower_{}'.format(tf1)], 1, '#ffeb3b', 1])\n","\n","step_col_list.append([['dc_upper_{}'.format(tf2), 'dc_lower_{}'.format(tf2)], 1, '#ff00ff', 2])\n","step_col_list.append([['dc_base_{}'.format(tf2)], 1, '#5b9cf6', 2])\n","# step_col_list.append([['dc_upper_{}'.format(tf2), 'dc_lower_{}'.format(tf2)], 1, '#c2185b', 4])\n","# step_col_list.append([['dc_upper_{}{}'.format(tf2, dc_period), 'dc_lower_{}{}'.format(tf2, dc_period)], 1, '#ff00ff', 4]),  # inner\n","# step_col_list.append([['dc_base_{}{}'.format(tf2, dc_period)], 1, '#5b9cf6', 4])\n","\n","# ------ bb ------ #\n","step_col_list.append([['bb_upper_{}'.format(tf1), 'bb_lower_{}'.format(tf1)], 1, '#ffffff', 1])\n","# step_col_list.append([['bb_upper_{}'.format(hbb_itv), 'bb_lower_{}'.format(hbb_itv)], 1, '#ffffff', 2])\n","# step_col_list.append([['bb_upper_{}'.format(tf2), 'bb_lower_{}'.format(tf2)], 1, '#e91e63', 4])\n","\n","# ------ ema ------ #\n","# step_col_list.append([['ema_5T'], 1, '#03ed30', 2])\n","\n","# ------------ stepmark_col_list - add info(col, alpha, color, linewidth) ------------ #\n","# stepmark_col_list.append([['sar_T'], 1, 'dodgerblue', 7])\n","\n","\n","# ------ str to numbcol ------ #\n","nonstep_col_arr = strcol_tonumb(res_df, nonstep_col_list)\n","step_col_arr = strcol_tonumb(res_df, step_col_list)\n","stepmark_col_arr = strcol_tonumb(res_df, stepmark_col_list)\n","\n","col_idx_dict = \\\n","{\n","  \"ohlc_col_idxs\": get_col_idxs(res_df, ['open', 'high', 'low', 'close']),\n","  \"vp_col_idxs\": get_col_idxs(res_df, ['close', 'volume']),\n","  # \"ohlc_col_idxs\": get_col_idxs(res_df, ['haopen', 'hahigh', 'halow', 'haclose']),  # heikin-ashi ver.\n","  \"nonstep_col_info\": nonstep_col_arr,\n","  \"step_col_info\": step_col_arr,\n","  \"stepmark_col_info\": stepmark_col_arr,\n","  \"ylim_col_idxs\": get_col_idxs(res_df, ['open', 'high', 'low', 'close', 'dc_upper_H5', 'dc_lower_H5'])  # , 'dc_upper_H', 'dc_lower_H', 'dc_upper_15T', 'dc_lower_15T', 'short_out_{}'.format(selection_id), 'long_out_{}'.format(selection_id)\n","}   # , 'wave_upper_{}'.format(wave_itv2), 'wave_lower_{}'.format(wave_itv2), 'dc_upper_15T', 'dc_lower_15T'"]},{"cell_type":"markdown","metadata":{"id":"E-VwJkNQbGI4"},"source":["### plot"]},{"cell_type":"code","execution_count":100,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"Roy40BmByyZc","outputId":"78ef57d0-a35d-4944-82a0-a63c7e0ce68f","executionInfo":{"status":"error","timestamp":1650417145540,"user_tz":-540,"elapsed":14467,"user":{"displayName":"7th June","userId":"08178289703395036410"}}},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 2160x1296 with 2 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 2160x1296 with 2 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 2160x1296 with 2 Axes>"],"image/png":"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o0eP3ug+/vnPf6a777477bbbbqlXr16pvLw8FRYWbtE1aNiwYcrPz9/u125ratx///1TQUFBioi0++67p7/+9a/pvvvuy2xbXFyc+vfvv0V13XDDDekf//hH5vPQoUPTzTffvN3/jomIiIiI1JU0b948ff7556l3796pXr166Re/+EUqKytLzZo1q3b9b38n/zqPPPJIGjduXHrzzTczy3Jzc9OgQYNSly5d0meffZa6d+9eZZvHHnss/e1vf0uNGjVKRUVFafbs2em8886r9rgFBQVp2bJlqXfv3ikvLy/deeedacKECTvNtTjhhBNS7969U9OmTVOjRo3SkCFD0ssvv5wZv/LKK1OnTp1S/fr1U7t27dK8efNSnz59snItmjdvnho0aLDV12dr5vHnnntumjFjRtp///3T7rvvnkaNGpUef/zxje57zpw56Zxzzsn8uZk3b1669NJLU8OGDdPFF1+c5s2bl3JzczdbR15eXmrXrl3KyclJEZFOPfXUtHTp0ir/diEiIrWaWi9ARES2IcOGDdtsA/C0005LU6ZM2WB5//79q21Mfp0333yz2sZkfn5++uCDD9KRRx65QWNya+oaP358GjhwYObzBRdcsN0nlV+nfv36W9RcGz16dLr88su3+FpERGrTps1GG5N9+vRJTz31VLrhhhuqNCa/mYYNG6bf//73adq0adWOt23bNq1ZsyY1adIks+yNN97Y4iZuixYt0vLly9Nf//rX1KNHj8zkbHteu62pcffdd09PPPFEevHFFzPLtqYx+dFHH6Vzzz0381ljUkRERERk23LSSSelqVOnVln2wQcfpAsuuKDa9b/9nTwi0lFHHZX++c9/pvPOO69KM+6bWbBgwQaNydLS0nTEEUdkPl977bXpjTfeqHb7gQMHpvHjx2c+N27cOFVWVqbvfe97O921iIjUqVOntGLFio2O33fffen+++/PyrU488wz06JFi9If/vCH1KFDhy2+Plszj3/66afTFVdcUeW6rF69OjVq1GiDdbt165ZWrFiRGjdunCIi/exnP0uffPJJlXXmz5+fjj/++K2qIycnJ/385z9PKaW01157bbc/JyIi8t3jOWcAdUC3bt1i2rRp221/v//97+Ohhx6KRYsWbdN+OnToEJMnT858njx5cnTo0GFby/vOdtttt+jcufN2u1ZNmzaNm266KS6//PJqx1u1ahXl5eWxevXquOKKK+LOO++sdr0OHTrEnDlzYuXKlZllW3OtPvvss2jXrl1MmjQp7rnnnpg7d2787ne/i9atW2/9SW3EltTYpUuXWLZsWaxcuTJOP/30uPfee6vs47bbbovS0tJ46623Nni809d+8pOfxN577x3PPvtsleW/+tWvYunSpfHuu+9Gr169ttt5AQBAXZGTk7PB50MPPXSD9ar7Tl6vXr3405/+FL/+9a83+ZqLLTn2xo4bseEcsrKyMj766KPtPo+sqWuxubn6T37yk42Ob+u1+Nvf/hY9evSIr776Kl599dV455134qKLLopmzZptcrutncd/+3e72267Rdu2bTdYr1+/fvHss89GZWVl5jhTpkypss6UKVMyx9qSOiZPnhxr1qyJF154IQYPHhylpaWbPDcAaobGJMAu7thjj41+/frF9ddfv13294Mf/CC6dOkSDzzwwDbvq0mTJrF8+fLM5+XLl1d538Q35eTkxBVXXBHTp0+PTz/9NP785z/HD37wg9hzzz3j0ksvjbPOOmub6/nLX/4SkydPjldeeWWb9xURcfPNN8eQIUPi008/rXZ8wYIF0bx58ygsLIz//b//d5X3Kn7Tt69TxKavVXUWL14cd999dxx22GHRq1evaNasWbz99ttRXFwchx122Jaf1EZsSY3jx4+PZs2aRcuWLeOuu+6KefPmZcauvvrqOOigg6Jly5bxyCOPxAsvvBAHHXTQBsfp169fPPPMM7Fq1arMsvvvvz/atm0be++9d/z2t7+Nxx9/3PtDAABgK0yYMCFatGgRZ511VjRo0CDOPffcaNOmTTRu3HiDdav7Tn7JJZfEf/7nf8bEiRO3+thjxoyJa665Jpo0aRJt2rSJCy64oNrjRmz93Oioo46KsWPHxuLFi+PVV1+NM844I/bcc8/4yU9+En/+85+r3aamrsW//Mu/xPXXXx9XXnllteM33nhj1KtXL4YOHVrt+PaYJ06bNi2uuuqqaNWqVdx4441x9NFHx9y5czd4F+SmjrupY44ZMyYGDBgQRUVFkZ+fH1dffXVExAbXslGjRtG7d+94/PHHt/j8tqSOjh07Rn5+fpx99tnx1ltvbeZqAFBTNCYBdmFHHnlkjBgxInr37h2zZs3a5v3l5OTEgw8+GIMGDYr169dv8/5WrlwZ+fn5mc/5+flRUVFR7boHHHBAFBUVxY9//OPo2LFjzJ07N4YNGxbvvfdetG7dOv7+979vUy133nlnHHrooXHmmWdu036+1rFjxzj22GPjnnvu2ey65eXl8cQTT8To0aOjfv36G4x/+zpFbPxatWrVKioqKjKpzqxZs2Ly5Mkxe/bsOOSQQzb7P2K3xNbU+Nlnn8WYMWNi5MiRmWXvvPNOrFy5MtatWxf/5//8nxg/fnyceOKJVbZr1KhRnHHGGfHEE09UWT5p0qQoKyuL9evXx8svvxzDhw931yQAAGyFsrKyOPXUU+Pyyy+PxYsXxwknnBCvvfZafPLJJ1XWq+47+X777ReXXHJJ/K//9b++07EvueSSWL16dcyaNStGjx4dTz755AbH/drWzDsiIs4+++z4zW9+Ey1btoz77rsvLrjggvjggw/it7/9bQwePLjabWriWrRp0yZefvnlGDRoULUNs3//93+Pc889N0466aRYt27dNl+Lvn37ZuaIL7300gbjX331Vbz//vsxefLkKCsri0MPPTRyc3O36Libuv6PPfZYPPnkk/H666/HtGnTori4OCJig2vZq1evKCsri3Hjxm3x+W1pHWvXro2RI0fGNddcs13+Uy4A20etP09WRES+ezb2LsfDDz88LV68OP385z/f6LZb+47JPfbYI61fvz4tXLgwLVy4MC1ZsiSllNLChQtT165dt6iub2b8+PFpwIABmc/nn3/+Rt9NsbXvRfx2NvWexBtvvDG9//77ac8999zia/HNVPeOyUGDBqWVK1dmrlVFRUWqrKxM/+///b9q99GyZcuUUkrNmzffYKxt27Zp9erVVd7fOG7cuC1+x2REpHr16qUTTjghjRgxIpWXl6dnn302/fznP6/2/aBbc+2+a41dunRJy5Yt2+j+XnrppXTxxRdXWda3b980d+7czdb74IMPprvvvnub/ryIiIiIiNTl1K9fP82fPz8dd9xxVZZX95381FNPTatXr87MfZYtW5bWrl2bFi5cmOrVq1dl3ereMfnt3HrrrWnEiBHVjg0cODC99dZbmc+NGzdOq1at2uh7Fbd1HpmNa3HAAQekuXPnbnSudP7556cFCxak1q1bb7Kurb0W1WX33XdP/fr1S//4xz9SaWlp+vOf/1zlfZ/VZWvm8d/Oz372s7RgwYINfi+vvvpq+t3vflftut9cNm/evCrvmNyaOmbNmpV69uy5Xf5+iIjINqfWCxARke+QBg0apLy8vDR8+PB08803p7y8vMxEp0OHDmnRokXpzDPPrHbbevXqpby8vHThhRemcePGpby8vNSgQYPMeG5ubsrLy0tvvfVWGjBgQMrLy8tMHPbZZ59MjjjiiJRSSi1atEi5ubmbrevbufDCC9P06dNTixYt0n777ZemTp26Vc22LU1eXl5q3LhxSimldu3apby8vMzYNddckz788MO0zz77VLvtpq7F1/v+/ve/n1JKKS8vLzVs2DBFRGrUqFGVa3XXXXelp59+OhUWFqaISKeddlpq165dysnJSYWFhempp57aaNMyItKECRPSXXfdlfLy8lLPnj1TeXl5Zl+by1577ZU+++yzNHHixHTJJZekgoKC7XLttqbGvn37platWqWI/5qIv/766+nZZ59NEf/V8D7uuONSXl5eql+/furbt29auXJlatu2bZX9v/LKKxtMViMinX766Wn33XdPOTk56Wc/+1lasWLFZv+xQ0REREREqubwww9PDRo0SE2bNk333HNPlabX16nuO3nDhg2rzH0uueSS9Pbbb1eZYzVs2DDl5eWlBQsWpJ/97GdV5hUHHXRQ2nPPPTP/mbK0tDS1b9++2hoLCwvTsmXLUq9evVJeXl66/fbbt7gptiNcixYtWqTZs2en3/zmN9Uet2/fvmnhwoXpkEMO2WyN23otjj/++LR8+fL00ksvpTPPPDMzl91ctmYe37x583TQQQeliEjf//730/vvv58GDhxYZZ2WLVumL774IrPe18nNzU3z5s1Ll1xySWrYsGH693//9zRv3rzMvz1sqo4jjzwydenSJeXm5qbddtstXXXVVWnFihVpv/32q/W/ZyIiEil2gAJEROQ7ZOjQoenbvr6j77HHHkvr169PFRUVmUydOjWzbb9+/TbYdujQoZnx4uLiDcara/QUFRWllFKVu+42VVfXrl1TRUVFlX3ccccdaenSpWnp0qXpjjvuyMq1qs43x9asWVPlWl177bVbdC2+Pv9v2tgdfTfccEMaNmxY5vOvf/3rNGfOnMxdlU8++WQ64IADMuMPPfRQeuihh6pc6+Li4lRZWZlmzpyZevToscXnv/vuu6fDDjtsu1+7ranxlltuSQsWLEgrV65MCxYsSA8//HDmDtXCwsL0zjvvpBUrVqTy8vI0YcKEdOyxx1apo0WLFumLL75Ibdq02aDGN954Iy1btiwtX748vffee6lPnz61/vdTRERERGRny4gRI9KyZcvSsmXL0siRI9Nee+1VZXxT38m/mX79+qU333yzyrK5c+duMK/4+oksZ5xxRvr000/TqlWr0qRJkza4M3Hq1Kmpb9++mc89evRIM2bMSJWVlam4uHiTT3bZ0a7F9ddfn1JKVeaf35wjz5kzJ61bt67K2DfnXNvzWhx44IHfuVG3qXl8RUVF5olKbdu2TTNnzkyrVq1K8+bNS5dddtkG+7rmmmvSG2+8Ue1xDj/88PTuu+9mnj50+OGHb1Ed3bp1S++9915asWJFWrp0aXr99dfTT37yk1r7uyUiIlWT898/AAAAAAAAAGRNvdouAAAAAAAAANj1aUwCAAAAAAAAWacxCQAAAAAAAGSdxiQAAAAAAACQdRqTAOxyUkrRpk2b2i4DAACAnYA5JADUHI1JAMiSfffdN0aPHh2ffvpppJSiqKioyvhdd90VH374YaxYsSJmzJgR55xzzib3d/bZZ8e8efNi5cqV8fzzz0fz5s2zWT4AAAA1aHNzyDPOOCPGjx8fq1atiuLi4s3uzxwSgB2RxiQA/Lf69etv1/199dVXMWbMmDj99NOrHV+1alWcfPLJsccee0S/fv3ivvvui6OOOqraddu3bx8PP/xwnHPOObHPPvtEZWVlPPjgg9u1XgAAALZcTc8hy8rK4t57743bb799s/syhwRgR5ZERER2paSUUps2bdIPf/jDtHDhwlSvXr3MWM+ePdPkyZNTRKQbbrghPf3002nYsGFp+fLlqX///unAAw9M48aNSytWrEj/8R//kf70pz+lYcOGbVM99evXTymlVFRUtMn1Ro8enS6//PJqx2699dY0fPjwzOeDDjoorV27NjVp0qTWr7eIiIiIiMjOnJ1tDtm/f/9UXFy8yX2YQ4qIyI4ad0wCsMt65513YtWqVXHMMcdklvXt2zdGjBiR+XzqqafGM888E82aNYvhw4fHiBEj4p133omCgoK48cYbN/t41fLy8ujSpcs217rbbrtF586dY9q0adWOd+jQISZPnpz5PGfOnFi3bl20a9dum48NAADAzjWH3BxzSAB2VA1quwAAyKYnn3wyzj777HjttdeiSZMmceKJJ8YVV1yRGZ8wYUKMHj06IiL22muv6Ny5c/To0SO++OKLGD9+fPz973/f5P631zs6/vKXv8TkyZPjlVdeqXa8SZMmsXz58irLli9fHk2bNt0uxwcAAGDnmUNujjkkADsqd0wCsEsbMWJE9OrVKxo2bBi9evWKiRMnxscff5wZX7BgQebnFi1aRFlZWaxevbra8Wy5884749BDD40zzzxzo+usXLky8vPzqyzLz8+PioqKbJcHAABQZ+wMc8gtYQ4JwI5KYxKAXdqMGTNi/vz58a//+q8bPIInIiKllPl54cKFseeee0ajRo0yy1q1apXV+m688cb413/91zjuuOM2OUGcNm1adOzYMfO5devWkZeXFx9++GFW6wMAAKhLdvQ55JYyhwRgR6UxCcAub8SIETFo0KDo1q1bPP300xtd7+OPP4533303brzxxsjNzY0f/ehHcfLJJ2/TsfPy8iIvL2+DnyMirrnmmujbt28ce+yxUVZWtsn9DB8+PE4++eTo2rVrNG7cOG666aZ47rnnYuXKldtUHwAAAFXtqHPIevXqRV5eXjRo0KDKz9UxhwRgR6UxCcAu78knn4zu3bvH2LFjY+nSpZtc9xe/+EUcddRRsXTp0rjlllviqaeeirVr1250/YqKiujatetGx9esWROrVq2KiIgPPvgg1qxZkxm77bbb4oADDojZs2dHRUVFVFRUxLXXXlvtvqdPnx6//OUvY/jw4bFkyZJo2rRp/OpXv9qi8wcAAGDL7ahzyHPOOSfWrFkTf/nLX6Jbt26xZs2aGDx4cLX7NocEYEeVExFps2sBQB01cuTImDlzZtx44421XQoAAAA7OHNIANg0d0wCwDccccQRcdBBB0VOTk4cf/zxceqpp8aoUaNquywAAAB2QOaQALB1qn8IOQDUUfvuu28899xzUVBQEJ988klcdNFF8d5779V2WQAAAOyAzCEBYOt4lCsAAAAAAACQdR7lCgAAAAAAAGSdxiQAO7Uf//jH8eGHH0ZFRUWceuqptV0OAAAAOzBzSACoXRqTAOzUbrrppvjTn/4UTZs2jdGjR9fosY855piYMWNGrFq1KsaOHRsHHHDARtctKiqKsWPHxqpVq2LGjBnRo0ePKuOXXnppLFy4MJYvXx5DhgyJhg0bbvG2X3vttdcipRT169ffPicIAACwizGHjGjdunW88MILsWLFiigtLY077rhj+54oAGxGEhER2Vkza9as1KNHjxo/bkFBQVq2bFnq3bt3ysvLS3feeWeaMGHCRtf/5z//me6+++602267pV69eqXy8vJUWFiYIiIdd9xxadGiRal9+/apWbNmqbi4ON12221btO3X6du3bxo3blxKKaX69evX+u9FRERERERkR0xdn0Pm5uam2bNnp8suuyw1btw45eXlpX/5l3+p9d+LiIjUqdR6ASIiIt8ps2fPTuvXr0+VlZWpoqIiNWzYMOXn56dHH300ffbZZ+mTTz5JN998c6pXr15mm/PPPz9Nnz49lZWVpTFjxqQDDjjgOx174MCBafz48ZnPjRs3TpWVlel73/veBuu2bds2rVmzJjVp0iSz7I033kgXXnhhiog0fPjwdOutt2bGjjnmmLRw4cIt2jYiUn5+fvrggw/SkUceqTEpIiIiIiKykZhD/lcdb7zxRq3/LkREpO7Go1wB2GkdfPDB8fHHH8fJJ58cTZs2jXXr1sXjjz8eX375ZRx88MHRqVOnOO6442LAgAEREXHKKafEddddF7169Yq99tor3nzzzXjyySc3uv/JkyfH2WefXe1Yhw4dYvLkyZnPlZWV8dFHH0WHDh2qXXfOnDmxcuXKKvv+et1v72vy5Mmx7777xp577rnZbSMifv/738dDDz0UixYt2twlAwAAqLPMISN+9KMfxbx58+Kll16K0tLSKC4ujkMPPXRLLh8AbBcakwDsMvbee+848cQT49JLL43KysooLS2Ne+65J84666yIiPjlL38Zt912W8ycOTPWr18fv//97+Pwww/f6Hs9OnbsuNFJZ5MmTWL58uVVli1fvjyaNm261et+e/zrn5s2bbrZbX/wgx9Ely5d4oEHHtjodQEAAGBDdXEOuf/++8dZZ50V999/f7Ro0SJefPHFGD16dOTm5m70OgHA9qQxCcAuo6ioKHJzc2PhwoVRXl4e5eXl8fDDD8fee++dGb/vvvsyY2VlZZGTkxMtW7bc6mOtXLky8vPzqyzLz8+PioqKrV732+Nf/1xRUbHJbXNycuLBBx+MQYMGxfr167f6HAAAAOqyujaHjIhYvXp1vPXWWzFmzJj44osv4g9/+EMUFBTE97///a0+JwD4LjQmAdhlLFiwINauXRuFhYXRvHnzaN68eeyxxx6Zx9IsWLAgLrzwwsxY8+bNo3HjxjFhwoStPta0adOi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IiIiIiLigQobmLRYLHz22Wds3bqV5GTXvUgaNmzI4cOHjcdHjhyhYcOGxeolJyeTmppKamoqMTExxZ4XERERERERHzhsVz5qV24IXGXy3BE3951pV65lV65pV87w4fbllC2w6Oyf26MlRUREREQk5FTYVK5xcXEcO3aMevXq8fnnn5OWlsa///3vMu1z/vz5zJ8/H4DU1FRvNFNERERERKTicnckYSPg58KyfR/So8AVdo/tg5SN3dz3DiAfa0rYFnbr7cvbXWy/D8jBOoLT1fat3WyPiIiIiIhICKuwgcljx44BkJGRwapVq+jatatpYPLo0aM0bnz5W2ujRo04evSo07oiIiIiIiLiJSftyr/HfI7JF4CfsM7V+FDhupzCdeHAGawjFB8C/h9wHnjCzTZkAuuBPkAvoCfWYOMjhc9nYZ3XEqAJcLCwPBGYhDW4+k/gYaANMAj4AniqsN6FwjYNcrM9/hJWchUJDWHl+Ic5eME5AJaPqBbglkhZWSwWwsLK73tVfKMiXwMsGbGE1dvssK5FyjyHx3sHjeRkYoLDurorVvu8ba44a7ez9c1nz6ByndoAXMo5xf5R4wBIi+9L/apVAUjPy6PV2nXF9uUL+endCA93vEYVFFioVH+LX44voUsD2JyrkKlcq1WrRo0aNYzy7bffzo8//mha/4MPPuD+++8nIiKCpk2bcv311/Of//zHX80VERERERGpmOy/x3+ENci31Em91kA68AOXR0y+CpwFTnN5PsnmwF6sAc5ou+1LGpn5FHAKqII1qHiwcF8AY4DcErafwOXUscuBE8BNhY8n4X5aWREREZEKwBaULFq2BSWLln2tUv0thNXb7LAUDVSKiPsqZGCyfv36bNq0iR07dvCf//yHtWvX8umnn5KQkMDhw4e5+eabWbt2LevWWXtc7N69m3/961/s3r2bdevW8dhjj1FQUBDgsxARERERESnnvgX+AvwPazpVM4nAKuA3rAHKScA0u+dtjzOxBiqXAM/bPW8/MtOZ3UAs8AHWkZjnCtt2D9ZAY0nSgW6FdTOBPGAn1hGcU93YXkREREREpJyokKlcDxw4QIcOHYqtX716NatXOx/OPnXqVKZO1TdGERERERERv5peuLhyDBjg4vmmwGJgfOHjaGBFYfk88I0b7fgJayDSlUOYp0A9DAxx4zgiIiIiAXQyL5c6VXw0GjEzDktGbLHVFqwpnU0NTHa62t3pyIvKzs4mOjq65Ioi4hMVMjApIiIiIiIiFcjNwDKs6VjPAA24/G14AtZRjCIiIiJCnSpV/Tbnq21ezD0Dk2n57nz2Dhrpsr635sx0GQQVEZ+rkKlcRUREREREpAL5CfgUawrV+liDk+uBBOCVALZLREREpAIpGlgUkYpJIyZFREREREQk9EwqXNyxA+jrw7aIiIiI+Eh+ejfCwx1HMBZowJ+IhDCNmBQRERERERERERERCULh4WGE1dvssLRe/6BX9q0RjCISCGGUfo5YcSE1NZUuXboEuhkiIiIiIuIl+owf3G6//XaeeeYZOnfuTJUqVfj555+ZM2cOs2fPNupMmDCBiRMnAtC9e3eeeuopevfuTWZmJm+99RavvfaaW8d68MEHWbRoEQADBgygf//+3H333eTn55OSksLTTz/NxJKxbAAAIABJREFUhQsXXO7DNrfRokWLSEpK0vtLpBQGLzgHwPIR1QLcEikri8XitzntpPywXQNERILVE+1/0md8J5TKVURERERERELa8OHDefvttx3WtW3bllmzZtG6dWtGjx5dbJs1a9ZQp04dAKpXr86MGTP44Ycf+PTTTz069rx584iJiTEeP/7440RERPDwww+X4kxERETEXUd3raNhO+VqFxEJNQpMioiIiIiISMiqXr06M2fOBGDFihU89thjnDlzhkmTJjF27FhGjRrFrFmzSEtLc9guLS2NAQMG8Pvf/57PPvsMgHvvvdfjwGR6ejpdu3YlPz+fjz76iLZt2zJ8+HCmTZvGwYMHvXKOIiIiUtyGNwYEugl+YcmIJazeZuNxi5R5Ds/vHTTSdNu0+L7Ur1oVgPS8PFqtXedyPZR9BLOr9p1MTKDuitXF6u4ZmEzLd+e7PBezdrs6FzPeGKXtbO5PgIICC5XqbynTvqX8eCI1NdBNCEoKTIqIiIiIiEjI6tatG7Vr1wYgMTGRxMREh+fDw8O59dZbiwUmJ02axPHjxzl+/Djp6enUr1+fxo0be3z8mTNncuDAAQD+9re/8c4771C5cmVuvPFGl4FJpSwUERERXzML0tkCeUXLrhQNKnrDpZxTVK5T2yiXxNn5lOZcvMEs+GjJiPVbG0RClQKTIiIiIiIiErLq1atXYp2oqKhi637++WejnJeXB0CVKlU8Pv7hw4eN8tGjR41yw4YNPd6XiIiIuO+jjz4iPj4+0M3wvcw4Y25qpwYml/kQRfdudjwXrTBXpH1m+9j36Fh4dGxpjuDW/ovVc/WaloXJz2vt2rXcddddvjmmSIhRYFJERERERERCVmZmplEeM2YMb7zxhlvbXbp0ySiX5cZUo0aNjLJ9MNI+SCkiIiLeVyGCklJu6P0qcpkCkyIiIiIiIhKytmzZwunTp6lVqxbjxo1j69atbN26lejoaG677TaeeOIJOnbs6LPjP/nkk3z11VcUFBTw5JNPAtag53fffedyO1swdNGiRSQlJfmsfSIiIuVdeU+PbsmIdThHT+aYLEnR9Ky2zydFX9OTiQlG2Va/+ewZDmlY948a53K9s+PZH7e0P0f7ttm3zxVvzDFpuu8iPy/b8UTkMgUmRUREREREJGSdPXuWcePGMXfuXBo1asTmzZv9evyYmBhjjkmbd955x+X8kiIiIiKhzhZ8LFreP2ocLVLmOQ2YenuOSoD0vDxjbsn0wvT8AGnxfR3Wm8236W0FBZbi80xmxvnl2CKhQoFJERERERERCWnz5s3j0KFDjB07ls6dO1O1alWOHTvG9u3bWbFihU+P/cgjj5CQkMCAAQMoKChg+fLljB1b9vmRRERERKRkZgFHW1CyaNnXKtXfUmydxWJRcFLEjgKTIiIiIiIiEvI+/fRTPv30U5d1Jk2axKRJk4qtb9asWamPe+rUKYYPH87w4cM92q68p50TERERERFxJjzQDRARERERERERERERERGR8k+BSREREREREZFCTZo0wWKxmC4PPvhgoJsoIlLuZGdnu7z2envJysoK9CmLiIhUWErlKiIiIiIiIuKBxYsXs3jx4kA3Q0Sk3IiOjvbr8SwWi1+PJxKs6q5YHegmiEgFpMCkiIiIiIiISKFDhw5p/kcRERGREJeel0f9qlWNsk1afF8ATiYmkJ6XR6u160rc18nEBK8EcS0ZsWXavqDAQqX6W8rcDpFAU2BSRERERERERERERETKDbOAoy1YWbTsczGbytz5rayBTZFgoTkmRUREREREREREREQkJFkyYhW0EwkhCkyKiIiIiIiIX8XExJCVlYXFYsFisfD8888XqxMZGcmLL77I7t27yc3NJTs7m++++44hQ4Y47OeNN95g27ZtXLx40dhfw4YN3WrHXXfdRUpKCnv37uXMmTNk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vv76awD69evHkCFDqFatGrVr1+aOO+5g9erV3HLLLcW2e+ihh2jbti316tXj+eefN9Zv3ryZgoICvvvuOwBuvfVWbrvtNmrXrs3kyZPdatOhQ4cICwtzWCZNmgRASkqKUe+5554jOjqacePGGSMm7Z9fuHChQ9AR4K677uK9996je/fuREZGcuWVVzJr1ixq1KhhtD+UtVq7jrorVjud26xo2dcW//NXwuptdljSjo8iLOwKsrOzad++Pe3btyfnfB4RlSr5rV329gxMZs/AZON94ulS5/1Vxdbte3QsewYms+/RsQ71bHXtt7Edv6ztMGtbrYVLAvK6SsXirRv4Ra8XrpbwcP/MC+drZuljbR0b7Ds42I/MdpYS9WRiglEOdc4+yxZNTy0iUha3334769evJycnh9zcXHbt2sWoUaOM56+66ipjir2PP/7YWP/KK69gsVi4ePEiN954Y4nHefDBB43PZv3792fJkiXk5OSQlZXFm2++aWSZccW2/cKFC0t3sm7QiEkRERERERHxq6effpqvv/6aGjVqsHTpUpYuXerw/N/+9rdi24SHh7Nr1y6HdZ999hmbNm0CrKPmPv/8c6644go+++wzAI4fP27ULe2IvG+//ZYFCxYwYsQIBgwY4DDCc9euXbz++usutw8PD+e+++7jvvvuK/bc2bNnee6550rVLm9p2bIlEyZMoEePHkRFRTm8Zjbdu3dnQ2HaxImpm2heqw53ZmQA8MEHHzB69GjOnTOf689e1apVGT9+PH/6059o2rQp586dM4LK9mw/r0WLFpGUlARYb7QsWrQIsAagATZs2GBsM2zYMIYNG2aUf/jhB1q1agXAe++9Z7x/Pv7ffgZd3waANnWj2etWy72jLHNMumI22iL/9GnCCoPo/hBWowZ13l8FmKT2NEm/WdrxskPezi3lluJSZpzzNJMWx5F29qOjNW9faNs/ahwtUuY5jKC0/TxPJiYEReeTYGU/B3Pz2TO8PpeuuOe/X+a4XXfekhOMTE7Gafp3ER8YPnw4b7/9tsO6tm3bMmvWLFq3bs3o0aM5fvw4Y8aMYcmSJdxxxx3cd9997NmzhyeffBKA1157zelnZlfmzZtHTEyM8fjxxx8nIiKChx9+uOwnVUYaMSkiIiIiIiHHG73YbfP7uLuI92zfvp0uXbqQkpLCiRMnuHDhAseOHePLL79kzJgxfP/998W2mTBhAn/961/JyMjg7NmzpKSkcP/99xvPf/nllwwdOpR9+/aRl5fHxo0b+eMf/2g8X9I8kK48/PDDPPPMM+zZs4fz589z7NgxZs+eza233kpeCXP9ffPNN0ycOJFvv/2WX3/9lYsXL3Ls2DGWL19Op06d2LFjR6nbVVbt2rUjNTWVgQMH0qBBAyIiImjSpInxvLMe1U+178IDLX9PTEwMMTExDB8+nBdffNGt41WuXJnPPvuMF198kZYtW1KlShXq1q1L377WETfx8d5Nr9qxY0ejvHfv5fDjwTOXRwS1qRtDeVapVq1io4GDYcm5t7/DUtr9iO8UHTHY8vMHab3+QeDySDsFqHzH084LwTrfY0VgNgrVG78f9iNYla7btTb3/USb+35yq+7DT++Dms/6uEVlo4w05Ud4eDgzZ84EYMWKFTRo0IDq1avz2muvATBq1CijI93SpUtZs2YNYO2o+c4773DFFVfw448/Xp5T3QPp6ek0b96cJk2a8MMPPwDWIGnTpk29cGZloxGTIiIiIiIStLwx54rZfFZF5/ex7/FuP++S0eM9sAPbyp20tDQGDx7xk26FAAAgAElEQVTsdv0LFy4wduxYxo4d6/T56tWrc/jwYa6//nosFgtXXHEFr7zyivG8/cg6TxUUFDBjxgxmzJjhsl5SUpIxus/m119/ZdKkSUZq2GAyc+ZMatasyd69e0lISGDfvn3Ex8ezcuVKwHo+c+fOddgm32Lh3k9XsfXhJ/nmm2+46qqruPfee/nLX/5S4vEGDx7MH/7wBwCWLVvG6NGjadu2LWvXrqVmzZq8+eabrF271u32b9y40WEOT/vRlYDDaNTTp08b5bMXL88JGmV3szg9L89hdItNeRv1kp/ezXdpKc1G2pWT+flEbFxdL8D62SPUrhe+nONO8+eVjjGCdWCyf+cDdXEtFxHP1KhRg9q1rd8xExMTSUxMdHg+PDycW2+9lbS0NMDaITIuLo6rrrqKq666iosXL/Lggw+6nNPezMyZMzlw4ABwOdBZuXJlbrzxRg4ePGi6nT86fykwKSIiIiIigns93iV41alTh6+//prc3FwyMjKoV68ekZGRAHzyySd8+OGHAW5h4NgCd2a3E1u0aMHu3buLrZ8zZw5z5sxxWFe3SlXe79MfDvY31l133XUuU+U6e2bIkCEMGTLEYV2zZs2K7cc+Pas9Z4Fms7oA77zzDu+8806x9U+378rTTtpex6TdZusDzZOb/uHhYYTV8036OovF4vRmlkadSyD5IhivNKfBZc/AZNNU0c64m2raWb2CInNJu7Mf02O6KTs7uwxbl46v/k74yqAedQBI+arklK4d21WHS2m+blLIMevM6Su27DWllhkH+O4zhrc6VVWuXHIILioqyiinp6fz/vvvG+lW//Of/zjNJuOOw4cPG+WjR48a5YYNG5Zqf96kwKSIiIiIiIgL9qMiJHidPn2ad999l27dulG/fn3y8/PZtm0bKSkpvPHGG4FunoiUkTdG0Jvx5OaoRn+W7FLOKYcMBPYCkXLUWTDeGlhSOuDSMBst6knaUVf7MHvvuNLy3flluj4Uvb6YjZQ3y67hbB9Fpx0o6b1vn7pTI0w9t/xfvwMgxY2A6rYvOkDOCF83ySfKGjy0/e6ZZYbw1XzBztpt9rfU3XO0dRDw1eg+bwU8L126ZJTHjBlT4veS9u3bO2QAiY2N5f777+e9997z+NiNGjUyyvbBSPsgZaBojkkRERERkQpsz8Bk9gxMxlLY+7vO+6scFtt6V4v99iUtBW7WK2nf7rbNYrFQa+GSMr1Grdau09xNAWJL1RkWFsbixYtd1j1z5gyDBg2iadOmREZGUqNGDTp37szMmTMdbghURLY5/ezn5qtWrRr5+fkArFq1yljf8t35xnYt351PWFgYt956q7Fu2LBhRt1FixY5HKOk+QPfffddo/4111xjrF+4cOHlY7ZsSVhYGOfPnwfgvffeM+q99NJLRr1bb7212DyDixYtcmhHp06djOdmz55trE/5+fLo0P7rVhZruy/mQ5TgVqn+lmJzKpotPkuDG4Lsb2zbl/ePGmcEVvyaflJ8ouhnIFvQou6K1Q4BDNvPeu+gkSX+3G2frdzZh9n7zJfzL3rjHEVK0nz2DCMg3Xy26+kCSlI0EG7G9n7WSG//OXv2rDGlwLhx4+jWrRsRERFcddVVPPDAAw6jIStXrsyiRYuIiIjgp59+MqY4ePPNN7nyyis9PvaTTz5J06ZNueaaa3jyyScBa6D0u+++c7md7Xu0/Wd0b9OISRERERGRCswWhLDdQPSkd7dZr3FX6/c9OpaW7853WO/qmO72YHfFZbotkUL3AB0Ky76YDbIxMBXoA9QE9gBvAMWTi/pHbm4uX3/9NT169KBfv34MGTKElStXUvOKCKNOl3oN2OvFY3722WcMHDgQgJdffpk///nP/P73vzfm2jlw4AB791qPeOTIEa699lpuvvlmY24eszSt2dnZREVFcd1111G1alXyCm9cf//996SlpdGqVSvuv/9+Y77MO69pbmy7+2SWw76cXfOcjewpb/NOipSGWTpTEW8ye5/tHzUOHh17uewnGs0o3mI2jUR0Yj/A+j0oa8WHZK2wTkfwbOtWxv+v/NeairY0ox3V4dI3nKUNL7BY56ofN24cc+fOpVGjRmzebD6q9//+7//o0KED+fn5PPTQQxw+fJjdu3cTExPD3Llz6d+/v+m2zsTExBhzTNq88847LueX9BcFJkVEREREpFTMvkyblW03kMpyQ0c9esVXEoBhhWVvBybrA1uARnbr2gNvAw2wBix9KS2+L2C9qWsfRHv66afZtnkzlSMjWbp0KUuXLnXYztsj/ZYtW0ZycjLdunXjgQce4IEHHnB4/oknnjDK77//Ps8++yxNmjQhPT2diIgILly44HS/qamp9OnTh7i4OHJzcwHrvJf79u1j1KhRrFu3jqioKHbu3GlscyE/n4hKldxqd6u164qlFdO1SERKozRzE5b1eHXeX2U+v6H9MQvna3MqZlPxfTup5o25EMt74E8dW6QkWSs+JDqxX7HfhVf+m8ZzbS4HJV3x1ohif887GcqcpQ1vkTKP5dfDvHnzOHToEGPHjqVz585UrVqVY8eOsX37dlasWAHADTfcwHPPPQfArFmzjFGNzzzzDHPnziUhIYEhQ4awbNkyt9v0yCOPkJCQwIABAygoKGD58uWMHTvWS2dcNgpMioiIiIhUYHtsN6RMboZ5NNbQ7IZakfUljWAs9qyLG3Xutq9UoyaLHHfr1q2e70MEa6DTFpQcAqwHVgM3AROApSbbeYtZEG379u2cee4ZPrrxZnr27ElUVBQ5ly5yZbXqAPyUnenVdly6dInevXvz/PPP86c//YkmTZpw7tw5vvvuO/r06cMHH3xg1J08eTIxMTHcc889RtrY3bt389ZbbxXb75///GfmzJlDp06dqFWrlsNzX331FT179mTy5Ml07doVgB9/O80bu7aSctvd1mugm8EAV1cRjcsWEXfYd/iwn1MQfBOQs1gsbncysWTEFrupbqwvsg8FK0pmNo+m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QK3c63HmzJnFPffcUyQpTj/99OLhhx9u+v6NQx/P97///cVhhx1WJCm++tWvDhzP4447rli7dm0xYsSI4thjjy02bdpUDBs2rOnPwTDacciQ7Ttkx84acmP7D1mx/Yec2N5DPuyMIRca+0bTN2BUMc4444zixz/+8cD31157bXHttdc2fV/GWx933XVXcc455xRPPPFEMX78+CLZG0CfeOKJpu/NOPSYOHFicf/99xdnnnnmQMDcuXPnwF+mb37NGq09jjrqqOLpp58+qO712X5jwoQJxbPPPlscffTRxWGHHVasWLGi+MAHPuD12YZj8uTJBwSWcq/Hb3/728Xs2bNLzjNaZ7z5eO4/LrjgguKf//mfi+Tg97g//vGPizPOOKPp+zeMdhwyZOcM2bF9h9zY/kNW7IwhJ7b/kA87Y8iFhku5tpmJEyfmueeeG/h+y5YtmThxYhN3RC0mT56c7u7urFq1KuPGjcv27duTJNu3b8+4ceOavDsqccMNN+Saa67Jnj17kiSjR4/O7t2788YbbyTxGm03U6ZMyc6dO7N48eL09fVl0aJFecc73uH12Ya2bduWv//7v8+zzz6bX/ziF/nVr36V1atXe312gHKvR++R2t/HP/7x3HvvvUkcT6gnr6fOIDu2N7mx/cmKnUFO7DzyYeeRC4cGjUlokiOOOCJ33HFHPvvZz+all1466OdFUTRhV1Rj1qxZ2bFjR/r6+pq9Fepk+PDhOeWUU7Jw4cKccsopeeWVV3LttdceNM/rs/WNHDkyH/7whzNlypRMmDAhRxxxRM4999xmb4sG8HrsDAsWLMjrr7+epUuXNnsrAC1HdmxvcmNnkBU7g5zY+bwG25tcOHRoTLaZrVu35phjjhn4ftKkSdm6dWsTd8RbMXz48Nxxxx1ZunRpli9fniR5/vnnM378+CTJ+PHjs2PHjmZukQpMnz49559/fjZv3pxbb701Z511Vm688caMHDkyhx12WBKv0XazZcuWbNmyJf/+7/+eJPnBD36QU045xeuzDZ1zzjnZvHlzXnjhhbz++uu58847M336dK/PDlDu9eg9UvuaO3duPvShD+WjH/3oQM3xhPrxempvsmP7kxs7g6zYGeTEziMfdg65cGjRmGwzvb29mTp1ao499tgcfvjhmT17du6+++5mb4sqfe9738uGDRty/fXXD9TuvvvuzJ07N8neP4h/+MMfNmt7VGjBggU55phjMmXKlMyePTsPPvhg/uzP/iwPPfRQLrrooiSOZbt5/vnn89xzz+Xd7353kuTss8/O448/7vXZhp599tmcccYZ+b3f+70k//tYen22v3Kvx7vvvjuXXnppkuT000/Pr371q4FL+tC6PvjBD+aaa67J+eefn1dffXWgfvfdd2f27NkZMWJEjj322EydOnXgfwQC1ZEh25vs2P7kxs4gK3YGObHzyIedQS4cmpr+QZdGdWPmzJnFz3/+82LTpk3FggULmr4fo7oxffr0oiiKor+/v1izZk2xZs2aYubMmcWoUaOK+++/v3jyySeLn/zkJ8XRRx/d9L0alY8ZM2YUK1asKJIUU6ZMKVatWlVs3LixuP3224sRI0Y0fX9G5WPatGlFb29v0d/fXyxfvrwYOXKk12ebjr/+678uNmzYUKxfv75YsmRJMWLECK/PNhvLli0rtm3bVrz22mvFc889V3z84x//na/Hf/zHfyw2bdpUrFu3rjj11FObvn/j0Mdz48aNxbPPPjvwnmjhwoUD8xcsWFBs2rSpeOKJJ4pzzz236fs3jHYeMmR7Dtmx84bc2N5DVuyMISe275APO2PIhUaSomvfDQAAAAAAAICGcSlXAAAAAAAAoOE0JgEAAAAAAICG05gEAAAAAAAAGk5jEgAAAAAAAGg4jUkAAAAAAACg4TQmAQAAAAAAgIbTmAQAAAAAAAAaTmMSAAAAAAAAaLj/HxHwYF11L+ywAAAAAElFTkSuQmCC\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 2160x1296 with 2 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 2160x1296 with 2 Axes>"],"image/png":"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ClJEpJycnHTdddelefPmVVn/+PHj0+OPP54aNWqUevTokTZv3pw6d+6clbm6+eab07Rp01JRUVGF7SmldMwxx1R6zJgxY9Jvf/vb1LBhw1RQUJDeeuutdNlll1VrHlu1apWuueaadOqpp6aUUmZedqVjx44pLy8vRURq3bp1WrBgQbrgggsqraNz585py5Yt6fOf/3xq1KhRGjduXJowYUK1771ly5Yfa8769OmTLrroovT9738/TZ06dY/77q3Gzp07pwYNGqSISMcdd1wqLi5OJ554YoqIVFBQkFJKqW7duvtcR/369dPy5cvTDTfckBo0aJCuu+66tHz58lS/fv39/vdRRERERORAzuDBg1Pfvn3TpEmT0vDhwyuM7W398tG8/fbb6dJLL00RkQoLC9MVV1yRmjdvnurVq5dGjBiRFi9eXOWxY8eOTaNHj04RkfLy8tLw4cNTQUFBqlOnTvrSl76UtmzZUuX1zz777LRmzZrUuXPnlJ+fn6ZOnZruuuuuGp2n+vXrp+uvvz716NEjrV69OvXu3bvCeGFhYfra176Whg4dmpYtW7bHcx199NFpx44dmfsZOHBgOuecc1LDhg1Tfn5+eu6559LIkSOrNc/16tVLmzdvTldddVWKiNS9e/dUWlqajj/++EqPveqqq9KSJUtSmzZtUuvWrdPChQvT1VdfXe15aNWq1ceav7/+9a/pxz/+cTrkkENS//7906ZNm6pck06ZMiXdd999qV69eun4449PGzZsSKeffnql+/bu3Ttt2bIls47e23thT3UceeSRqUWLFikiUqNGjdKvf/3r9MADD2T976CIyKc8tV6AiIjsh3znO99J99xzTxo7dmy1G5Nf+tKX0oIFCypse+ONN9IVV1yRIiJNnDgx/ed//mdm7LTTTkvbtm1LDRs2TBGRVq1alb7whS9kxkeMGFFpk6xu3brpG9/4RiovL6+0jry8vPTee++lDh06ZLY9+uijNb6ojPj7YnDRokWpb9+++9SYXLduXerevXvm9U033ZSmT59erXn853nY28K+devWaf78+enb3/52peN33HFHGjduXOZ1+/bt03vvvZcaN25crfv/r//6r7Rs2bJ06623pqOPPnqf5+/rX//6XhuT+1Jjx44d0+rVq9NFF12UIvbemNxTHV/4whfSypUrK2xbsWJFplkuIiIiIiIV89hjj+3WmNyV6qxfevXqVaFB9NE0b948pZTSoYceuttYXl5e2rJlS+rVq1eV5583b17q379/pWPjxo1Ld9xxR+b1mWeemYqLi7M2V0VFRbs1JnelT58+e21M3nLLLWnKlClVjl9wwQVp/vz51ZrnVq1apZRSZm0eEenll19OF198caXHz5w5Mw0dOjTz+oorrkizZs2q9r0/99xz6aWXXkpXX311atasWbWO6dChQ9q+fXuFdeD06dMrbYg2atQopZQqNC0feuih9Oijj1Z67jFjxqQxY8ZU672wr3U88sgj6dlnn83a+0hE5GCIr3IFOAgcddRRccUVV8SIESMqHe/WrVusW7cu3njjjfje974XdevWzYzVqVOnwr516tSJz372s5WO16lTJw455JDo0KFD5OfnR+vWrWPevHmZ8Xnz5kWXLl0qnG/Tpk2xffv2ePDBB+POO++stL6OHTvGjh07YunSpXs8V0148MEH4+abb45t27ZVOj59+vQoLi6OJ598crevLProXFQ1T5WN7813vvOdKC0tjVWrVkWjRo1i/Pjxle7XpUuXCnP+9ttvx/vvv1/h65H25N57742LL744WrVqFa+88kpMmTIlvva1r0XDhg2rXeveVKfGn//851FeXh5vvPFGFBcXx3PPPVfhHCtWrIiioqIYM2ZMtGjRotrXnT9/foVt8+fPz8r7CAAA+PujQ5588snYunVrpeO9evWK4uLi2Lhx425jF154Yaxbty6mT59e6bGtWrWKjh07xsKFCysd/+i6Y968eXHEEUfEoYce+jHuJPsGDx4cjzzySJXjvXr1qvJePzrP7777bowfPz4uv/zyyMnJiVNPPTUKCgrixRdfrPT4yuZqX9ZJX/7yl+POO++Mc845J1asWBHjxo2Ls846a7d18Eev+fbbb0dZWdler7vrPHtac++Sl5cXAwYMqDCXe3ovVKeOHj16xObNm6OsrCwuvPDCuP/++/c2JQDsgcYkwEHgpz/9aXz/+9+P8vLy3camT58en/3sZ6NVq1Zx4YUXxsCBA+Pb3/52RETMmjUrWrduHRdffHHUq1cvBg8eHMccc0zk5eVFRMTkyZPjyiuvjIKCgmjatGl85zvfiYi/LwR2PfuipKQkc62SkpLdnsXQvHnzaNasWVx77bUxZ86cSutv3Lhx5rkiezrXLs2aNYtf/vKX8c4778TixYvje9/7XrRr1y7atm0bo0aNiqOOOqrS4/r16xd169aNSZMmVTreq1evOProo+Mzn/lMrF69Ov7whz9kmriTJ0+OG2+8MRo3bhzHHHNMXHHFFZl52ts8Vsc999wTTZo0iW7dusVjjz1WYV7/WePGjXcb29NcVeall16Kb3zjG9G6desYOXJkDBw4MFauXFnhmZqfRHVq/OY3vxlNmjSJnj17xlNPPRXvvfdeRESsX78+unfvHgUFBXHSSSdFkyZNYty4cTV2XQAAoGY0bNgwBgwYEA8//HCl423atImf//znmWcqftSQIUPi0UcfrXSsXr16MW7cuHjkkUfijTfeqHSfj/7+v+vnqn7/v+yyy2Lu3LmxZs2aePTRR6NXr16Rn58fl156aVx//fVV3WaN6NmzZxx++OHxxBNPVDp+1llnxZAhQ+KWW27ZbayqeZ4wYULccsst8d5778WMGTPiu9/9bqxcubLS81c2V/uyTtqxY0c888wz0b9//zjmmGPif//3f+Oee+6J5cuXxze/+c1qXXNP1y0rK4sXX3wxvv/970dubm5069YtLrzwwkrX1P3794/169fHtGnT9nh/EX9/L1SnjpkzZ0Z+fn60adMmfvjDH8by5cv3PikAVEljEuBT7t/+7d+iSZMm8dvf/rbS8WXLlsXy5csjpRQLFiyIESNGxIABAyIiYuPGjXH++efHf/zHf8TatWujb9++8ec//zmzmBkzZkxMmDAhXnjhhVi4cGFMnTo1IiJWrlyZ+deGTZs2zVyradOmUVpaulsNW7dujV/+8pfx6KOPxmGHHbbbeFlZWYXz7OlcERF9+/aN1157LY455pjo169ftGjRIl588cWYPHlyzJ07N955553djsnLy4t77703vvWtb1V6zoiIGTNmxAcffBAlJSVx/fXXR7t27aJTp04REfGtb30rtm3bFkuXLo1nnnkmJkyYkJmnvc3jvpg7d25s27YtbrvttkrH92WubrrppigtLY3S0tIYOXLkbuPvv/9+zJ8/P+bOnRvvv//+Pn3Cc0+qW+OHH34YM2fOjCOPPDKuueaaiIgoLy+PV199NXbu3BnvvvtuXHvttXHOOedkGuE1cV0AAOCT69+/f2zcuLFCg2iXli1bxv/8z//EL37xi3j88cd3G2/btm2cfvrplTYm69SpE4899li8//77ce2111Z5/Y/+/r/r56p+///Sl74Uffv2jQ4dOsTMmTPjvvvui0WLFkWfPn2q/Y8hP65dn3is7B8Tn3LKKTF+/PgYMGBAhW8R2qWyeT7uuOPi8ccfj8GDB0eDBg2iS5cu8V//9V9x7rnnVnr9yuaqqnl67rnnMuvIQYMG7Ta+YcOGzDqyefPm0a5du2pdc2/XveSSS6Jdu3ZRVFQUI0eOjF//+teVrqkra2jv6b2wL3WsXr06Jk+eXOl7FoB9U+vfJysiItnLfffdl0pKSlJxcXEqLi5OW7duTaWlpWnSpEmV7v+Vr3wlvfrqq5WO1a1bN61YsSKdffbZlY5/4QtfSEVFRalOnTop4u/PmDzrrLMy47fddlulz5jcde6tW7emE044YbexXc+YPPbYYzPbHnnkkSqfMbnr+vuSrl27pvfffz8zTxs2bEg7duxIxcXFlT4zJScnJ5WWlqZ//dd/rfR8d9xxRxo/fvw+zWN1ntESEem73/1ulX9+d9xxR/r1r3+ded2uXbt9esZkRKRDDz00ffOb30wvvfRSWrVqVbr77rvTZz7zmWodW91nTO5LjaNGjUr3339/pWO7np3StGnTvdax6/35z9uWL1/uGZMiIiIiIlXkkzxj8n/+53/Sbbfdttv2/Pz89Nprr1W5nouIdPPNN6dp06ZVOjZmzJg0ZcqUdMghh+yx9nHjxqUf/OAHmddnnHHGHp8x+XHWkf+cj/uMyUMOOSRt3rw5nXHGGbuNnXDCCWnt2rXp3/7t36q8bmXzfOGFF6bXXnutwrb77rsvPfjgg5WeY+bMmenKK6/MvL788sv36RmTEZGOPfbYNGLEiLRs2bI0d+7cdMMNN1R4JuRH06FDh7Rt27YK68Bp06ZV+mzHqv5877zzzgrbjjzyyPTBBx+k9u3bV/u9sK919OjRI23evPkTvVdERKT2CxARkSymcePG6fDDD8/k8ccfTz/5yU9S8+bNU0Skvn37platWqWISMcdd1x6/fXX0y233JI5/oQTTkj16tVLTZo0Sffdd1968cUXM2PNmzfP/MLfqVOn9Prrr6ehQ4dmxu+66670wgsvpPz8/HTcccel1atXZ5pAZ511VjrhhBNSTk5OatKkSXrggQfSqlWrUm5ubqX3MWHChDR+/PiUl5eXPve5z6XNmzenzp0719g81a1bt8I8XXDBBWnVqlXp8MMPTzk5Oalz586pa9euKScnJzVq1Cjdd999acmSJalevXopIlL79u3ToYcemnJyclLfvn3TunXrKtS3p3mMiJSbm5vy8vJSSil17NgxMw916tRJV111VcrPz08RkQoLC9Pq1avTddddV+l9dO7cOZWUlKSePXumvLy89Nhjj1XZDK4sV1xxRdqyZUv67W9/m84999yUk5NTreNycnJSbm5uuvrqq9O0adNSbm5uZm72pcbDDjssffWrX02NGjVKOTk56eyzz05lZWXpvPPOSxGRTj755NSxY8dUp06ddOihh6bHH388TZkypVp11K9fPy1fvjx961vfSg0aNEjf/OY30/Lly1P9+vVr/e+piIiIiMiBlHr16qXc3Nw0bty4dPvtt6fc3NwKa4Oq1i+70qZNm0obRE2aNEkvvfRSlQ2yXVmyZEm6/PLLd9s+cuTINGvWrNSoUaO93sM555yTiouLU6dOnVKzZs3SX/7ylz02Qz9uGjRokHJzc1NRUVH6whe+UGEu6tSpk3Jzc1Pfvn3T8uXLU25u7m7rj4EDB1batOzSpUtas2ZN+spXvlLltaua5/bt26fS0tJMs7N9+/Zp6dKlFdbr/5yrr746LVq0KLVu3Tr9y7/8S1qwYEG1G4QRkUaPHp3WrVuXfvrTn6Zu3bpV+7hZs2alH/7whyk3Nzf169cvbdq0qcpm5mc+85nUuHHjVL9+/XTJJZekdevW7bbvTTfdVGlDe2/vhT3VMWjQoNS2bdsUEemoo45KL7zwQnryySez8vdOROQgSq0XICIi+zFjx45Nt99+e+b1D3/4w7RmzZpUVlaW/va3v6XbbrutQkNp/PjxafPmzWnz5s3p8ccfT4cddlhmrEOHDmnJkiWpvLw8LV++PA0bNqzCtRo0aJBGjx6dSkpK0po1ayqMDxgwIC1evDiVlpamd999N/3hD3+o8OnDm266KT333HOZ182bN09PP/10KisrSytWrEgDBw7M6jz17t27wqfrzjjjjLRkyZJUVlaW1q5dm55++ukKn+C86KKL0qpVq1J5eXmaM2fObp+G3NM8RkSqTMTfF7J//OMf04YNG1JpaWl644030k033VTh2NLS0tSzZ8/M64EDB6YVK1aksrKyNGnSpEwTujrp1KnTPu2/K0OGDNmt/rFjx+5zjS1btkwvvPBC2rRpUyopKUnz58+v8C93L7744vT222+nsrKytHr16vTII4+kww8/vNp1nHDCCemVV15JW7duTa+++mqln9AVERERETnYM3bs2N1+rx4yZEhmvKr1y67ceOONafr06budd/DgwSmllMrKylJpaWkmuxo/EZFOPfXUVFZWtts3qhx11FEppZS2bdtW4dhBgwaliEht27bd7VzDhg1La9asSSUlJWnMmDGpQYMGNT5Xy5Yt220udn2KtHfv3ruNffSbXSZPnpxGjBix23nHjBmTdu7cWeFeFyxYUK15jvj7GvX1119PW7ZsSUVFRenuu+/OfCq0Z8+eqbS0tML+99xzT9qwYUPasGFDuueee/ZpDgoLCz/WP/gsKChIU6dOTVu3bk1LlixJffr0yYwNGjSowv1ef/316d13301lZWVpxowZ6aSTTtrtfIsXL05XXHFFpdfa03thT3X84Ac/SEVFRamsrCwVFRWlhx56KB166KG1+vdTROT/eur84wcAAAAAAACArMmp7QIAAAAAAACATz+NSQAAAAAAACDrNCYBAAAAAACArNOYBAAAAAAAALJOYxIA/iGlFMccc0xtlwEAAMAByroRAD4ZjUkAOMDcdNNNUVpamsnWrVtj586d0aJFi0r3LygoiClTpkR5eXksXrw4+vTps58rBgAAYH864ogj4plnnolVq1ZFSikKCgoqjF900UUxc+bMKC8vj6lTp+71fAMHDozly5dHWVlZPP3009G8efNslQ7AQU5jEgA+obp169bo+e66665o0qRJJvfcc0+88MILsWHDhkr3nzBhQsyZMydatGgR3/3ud+OJJ56Ili1b1mhNAAAAfHw1vW788MMPY/LkyXHhhRdWOr5x48a4//774+67797ruTp37hwPPfRQXHrppXH44YfH1q1b4xe/+EWN1gsAu2hMAsBHnHzyyVFcXBw5Of///0z269cv5s2bFxERw4cPj4kTJ8Zjjz0WJSUlcdlll8XRRx8d06ZNiy1btsSf/vSn+NnPfhaPPfZYjdQzePDgeOSRRyod69ChQ5x44okxfPjw2L59ezz11FPx+uuvV7k4BQAA4JOr7XXju+++GyNHjozZs2dXOv6Xv/wlJk6cGKtXr97ruS655JL4/e9/HzNmzIjy8vL4/ve/H/3794/GjRt/rNoAYE80JgHgI15++eUoLy+PM888M7Nt0KBBMX78+Mzr888/P5544onIz8+PcePGxfjx4+Pll1+OFi1axK233hqXXnrpHq+xadOm6NGjx15r+fznPx+tWrWKJ598stLxLl26xNtvvx1lZWWZbfPmzYsuXbrs9dwAAAB8PAfSuvGT6tKlS6ahGhHx9ttvx/vvvx8dO3bM+rUBOPjUq+0CAOBANGHChBg4cGD8+c9/jsaNG8e5554b//mf/5kZnzVrVjzzzDMREXHYYYdFYWFh9OnTJz744IOYOXNm/O53v9vj+av7vI4hQ4bEE088EeXl5ZWON27cOEpKSipsKykpiTZt2lTr/AAAAHw8B8q68ZOqal3ZpEmT/XJ9AA4uPjEJAJUYP3589O/fPxo0aBD9+/eP1157Ld55553MeFFRUebn1q1bx8aNG2Pbtm2Vjn9cDRs2jIsuuqjKr3GNiCgrK4umTZtW2Na0adMoLS39xNcHAACgagfCurEmWFcCsD9pTAJAJRYvXhwrVqyIL37xi7t9HU9EREop83NxcXEceuih0bBhw8y2tm3bfuIaLrjggti4cWO88MILVe6zcOHCaN++fYVnf3Tt2jUWLlz4ia8PAABA1Q6EdWNNWLhwYXTt2jXzul27dpGbmxtvvvlmLVYFwKeVxiQAVGH8+PFx/fXXR69evWLixIlV7vfOO+/EK6+8ErfeemvUr18/Tj311DjvvPM+8fWHDBkSjz766B73Wbp0acydOzeGDx8eubm50a9fvzj++OOrfCYlAAAANac21425ubmRm5u7288RETk5OZGbmxv16tWr8HNlxo0bF+edd1707Nkz8vLyYsSIEfHUU09FWVnZJ6oPACqjMQkAVZgwYUL07t07pkyZEhs2bNjjvpdcckmcdtppsWHDhvjBD34Qv/nNb+K9996rcv/S0tLo2bNnleOtW7eOM888s9LG5MiRI2PkyJGZ1xdffHF07949Nm3aFHfffXcMGDAg1q9fX407BAAA4JOozXXj9u3bo7y8PCIi3njjjdi+fXtm7NJLL43t27fHL3/5y+jVq1ds3749Ro0aVem5Fy1aFP/+7/8e48aNi3fffTeaNGkS3/jGN6p1/wCwr+pERNrrXgDAPnn88cdjyZIlceutt9Z2KQAAAByArBsBOBj5xCQA1IDu3btH+/bto06dOnHOOefE+eefH5MmTartsgAAADhAWDcCQETlXywOAOyTI444Ip566qlo0aJFrFy5Mq655pqYO3dubZcFAADAAcK6EQB8lSsAAAAAAACwH/gqVwAAAAAAACDrNCYBOCh87nOfizfffDNKS0vj/PPPr+1yAAAAOIBZQwJAdmhMAnBQGDFiRPzsZz+LJk2axDPPPLNfr33mmWfG4sWLo7y8PKZMmRJHHXVUlfsWFBTElClTory8PBYvXhx9+vSpMH7DDTdEcXFxlJSUxOjRo6NBgwbVPnaXP//5z5FSirp169bMDQIAAHzKWENGtGvXLn7/+9/Hli1bYt26dXHPPffU7I0CcNBKIiIin/YsXbo09enTZ79ft19PAuQAACAASURBVEWLFmnz5s1pwIABKTc3N917771p1qxZVe7/17/+Nf34xz9OhxxySOrfv3/atGlTatmyZYqIdPbZZ6c1a9akzp07p/z8/DR16tR01113VevYXRk0aFCaNm1aSimlunXr1vqfi4iIiIiIyIGYg30NWb9+/fTWW2+lYcOGpby8vJSbm5v+9V//tdb/XERE5FORWi9AREQkq3nrrbfSzp0709atW1NpaWlq0KBBatq0afrVr36VVq9enVauXJluv/32lJOTkznm8ssvT4sWLUobN25MkydPTkcdddTHuvbQoUPTzJkzM6/z8vLS1q1b03HHHbfbvh06dEjbt29PjRs3zmybPn16uvrqq1NEpHHjxqU77rgjM3bmmWem4uLiah0bEalp06bpjTfeSKeccorGpIiIiIiISBWxhvx7HdOnT6/1PwsREfn0xVe5AvCpd+yxx8Y777wT5513XjRp0iTef//9ePjhh2PHjh1x7LHHRrdu3eLss8+OK6+8MiIivvzlL8fNN98c/fv3j8MOOyxmzJgREyZMqPL88+bNi4EDB1Y61qVLl5g3b17m9datW+Nvf/tbdOnSpdJ933777SgrK6tw7l37fvRc8+bNiyOOOCIOPfTQvR4bEXHnnXfGyJEjY82aNXubMgAAgIOWNWTEqaeeGsuXL4/nnnsu1q1bF1OnTo3Pfvaz1Zk+ANgjjUkADjqtWrWKc889N2644YbYunVrrFu3Lu677764+OKLIyLi3//93+Ouu+6KJUuWxM6dO+POO++ME044ocrnenTt2rXKRWfjxo2jpKSkwraSkpJo0qTJPu/70fFdPzdp0mSvx5500knRo0ePePDBB6ucFwAAAHZ3MK4hjzzyyLj44ovjpz/9abRu3TqeffbZeOaZZ6J+/fpVzhMAVIfGJAAHnYKCgqhfv34UFxfHpk2bYtOmTfHQQw9Fq1atMuMPPPBAZmzjxo1Rp06daNOmzT5fq6ysLJo2bVphW9OmTaO0tHSf9/3o+K6fS0tL93hsnTp14he/+EVcf/31sXPnzn2+BwAAgIPZwbaGjIjYtm1bvPjiizF58uT44IMP4kc/+lG0aNEiOnXqtM/3BAD/TGMSgINOUVFRvPfee9GyZcto3rx5NG/ePJo1a5b5WpqioqK4+uqrM2PNmzePvLy8mDVr1j5fa+HChdG1a9fM67y8vDjmmGNi4cKFle7bvn37aNy4cWZb165dM/t+9Fxdu3aNNWvWxMaNG/d4bNOmTaN79+7xm9/8JoqLi2P27NkREbFy5cro2bPnPt8TAADAweRgW0NGRMyfPz9SSvtcPwBUR60/6FJERCTbWbZsWerTp0/m9aRJk9L999+fmjRpkurUqZPat2+fevXqlSIi9evXL73++uupc+fOKSJS06ZN04ABAz7WdVu2bJk2b96c+vfvn3Jzc9Pdd9+dZs2aVeX+s2bNSj/84Q9Tbm5u6tevX9q0aVNq2bJlioh0zjnnpOLi4tSpU6fUrFmz9Je//CXddddd1Tr28MMPz6R79+4ppZRat26d6tevX+t/NiIiIiIiIgdaDvY1ZMeOHVN5eXnq06dPysnJSTfccEN66623rCFFRKQmUusFiIiIZD0fXVQ2bdo0/eIXv0hFRUVp8+bN6bXXXktf/epXM+Nf+9rX0vz581NJSUl655130ujRo6s894IFC9KgQYOqHO/Tp09avHhx2rp1a5o6dWoqKCjIjI0cOTKNHDky87qgoCBNnTo1bd26NS1ZsqRCzRGRhg0bltasWZNKSkrSmDFjUoMGDap97D/vl1JKdevWrfU/FxERERERkQMx1pCRLrjggrR06dJUUlKSpk6dmmm8ioiIfJLU+ccPAAAAAAAAAFnjGZMAAAAAAABA1mlMAgAAAAAAAFmnMQkAAAAAAABkncYkAAAAAAAAkHUakwAAAAAAAEDW1avtAoh49913Y8WKFbVdBgAAUEMKCgqiVatWtV0Gn1LWkAAA8OlyMK0hNSYPACtWrIjCwsLaLgMAAKghs2fPru0S+BSzhgQAgE+Xg2kN6atcAQAAAAAAgKzTmAQAAAAAAACyTmPyH0aPHh1r166N119/PbOta9euMWvWrJgzZ07Mnj27wlflPPDAA7F06dKYN29edOvWLbN9x44dMWfOnJgzZ04888wz+/UeAAAAAAAA4EClMfkPDz/8cPTt27fCtnvvvTduu+226NatW9xyyy1x7733RkTEF7/4xejQoUN06NAhrrrqqhg5cmTmmG3btkW3bt2iW7ducf755+/XewAAAAAAAIADlcbkP8yYMSM2btxYYVtKKZo2bRoREc2aNYvVq1dHRMT5558fjz76aEREvPTSS5Gfnx9HHHHE/i0YAAAAAAAA/g+pV9sFHMhuuOGGeP755+NHP/pR5OTkxOc+97mIiGjTpk0UFRVl9lu5cmW0adMm1qxZE4ccckjMnj07duzYEXfffXeVX+c6dOjQuOqqqyIiomXLltm/GQAAAAAAAKhFPjG5B9dcc00MGzYsjjrqqBg2bFiMHj16r8cUFBREYWFhDBo0KO6///5o3759pfuNGjUqCgsLo7CwMNavX1/TpQMAAAAAAMABRWNyD4YMGRJPPfVURERMnDgxTj755IiIWLVqVbRt2zaz35FHHhmrVq2KiMh83euyZcvihRdeiG7duu3nqgEAAAAAAODAozG5B6tXr47evXtHRMSZZ54ZS5cujYiI3/3udzF48OCIiDjllFOipKQk1qxZE/n5+dGgQYOIiGjRokX06NEjFi1aVDvFAwAAAAAAwAHEMyb/Yfz48XH66adHy5Yto6ioKIYPHx5Dhw6NBx54IOrVqxfbt2/PPBPyueeei3PPPTfeeuut2Lp1a1x++eUREdGpU6d46KGH4sMPP4ycnJy4++67Y/HixbV5WwAAAAAAAHBA0Jj8h0GDBlW6vXv37pVuv/baa3fbNmvWrDj++ONrtC4AAAAAAAD4NPBVrgAAAAAAAEDWaUwCAAAAAAAAWacxCQAAAAAAAGSdxiQAAAAAAACQdRqTAAAAAAAAQNZpTAIAAAAAAABZpzEJAAAAAAAAZF292i6A7Fl9QW1XAAAAB6dVtV0AfEzWkQDAgebPayIGz6rtKoCa4hOTAAAAAADAAemsI2q7AqAm+cTkp1jrp2u7AgAAODjNvrm2K4CPxzoSADiQ+DYH+PTxiUkAAAAAAAAg6zQmAQAAAAAAgKzTmAQAAAAAAACyTmMSAAAAAAAAyDqNSQAAAAAAACDrNCYBAACgBjVr1iwmTpwYixcvjkWLFsWpp54aAwYMiAULFsTOnTvjpJNO2u2Ytm3bRmlpafy///f/aqFiAACA/aNebRcAAAAAnyYPPPBATJ48OS666KKoX79+5OXlxebNm6N///7x0EMPVXrMT37yk/jjH/+4nysFAADYvzQmAQAAoIY0bdo0evXqFZdddllERHzwwQdRUlISJSUlVR5z/vnnx7Jly6K8vHw/VQkAAFA7fJUrAAAA1JB27drFunXrYuzYsfHaa6/FqFGjIi8vr8r9GzVqFN/5znfitttu2+N5hw4dGrNnz47Zs2dHy5Yta7psAACA/UJjEgAAAGpIvXr14sQTT4yRI0fGiSeeGOXl5XHjjTdWuf+tt94a9913314/LTlq1KgoLCyMwsLCWL9+fU2XDQAAsF/4KlcAAACoIStXroyVK1fGyy+/HBERTzzxxB4bk6ecckoMGDAg7r333sjPz48PP/wwtm/fHj//+c/3V8kAAAD7jcYkAAAA1JC1a9dGUVFRdOzYMd58883o06dPLFq0qMr9e/Xqlfl5+PDhUVZWpikJAAB8avkqVwAAAKhB1113XYwbNy7mzZsXJ5xwQtx5553Rr1+/KCoqitNOOy2effbZmDx5cm2XCQAAsN/5xCQAAADUoHnz5kVhYWGFbZMmTYpJkybt8bjbbrstm2UBAADUOp+YBAAAAAAAALJOYxIAAAAAAADIOo1JAAAAAAAAIOs0JgEAAAAAAICs05gEAAAAAAAAsk5jEgAAAAAAAMg6jUkAAAAAAAAg6zQmAQAAAAAAgKzTmAQAAAAAAACyTmMSAAAAAAAAyDqNSQAAAAAAACDrNCYBAAAAAACArNOYBAAAAAAAALJOYxIAAAAAAADIOo1JAAAAAAAAIOs0JgEAAAAAAICs05gEAAAAAAAAsk5jEgAAAAAAAMg6jUkAAAAAAAAg6zQmAQAAAAAAgKzTmAQAAAAAAACyTmMSAAAAAAAAyDqNSQAAAAAAACDrNCYBAAAAAACArNOYBAAAAAAAALJOYxIAAAAAAADIOo1JAAAAAAAAIOs0JgEAAAAAAICs05gEAAAAAAAAsk5jEgAAAAAAAMg6jUkAAAAAAAAg6zQmAQAAAAAAgKzTmAQAAAAAAACyTmMSAAAAAAAAyDqNSQAAAAAAACDrNCYBAAAAAACArNOYBAAAAAAAALJOYxIAAAAAAADIOo1JAAAAAAAAIOs0JgEAAAAAAICs05gEAAAAAAAAsk5jEgAAAAAAAMg6jUkAAAAAAAAg6zQmAQAAAAAAgKzTmAQAAAAAAACyTmMSAAAAAAAAyDqNyX8YPXp0rF27Nl5//fXMtq5du8asWbNizpw5MXv27CgsLMyMPfDAA7F06dKYN29edOvWLbN98ODB8eabb8abb74ZgwcP3q/3AAAAAAAAAAcqjcl/ePjhh6Nv374Vtt17771x2223Rbdu3eKWW26Je++9NyIivvjFL0aHDh2iQ4cOcdVVV8XIkSMjIqJ58+YxfPjwOOWUU+Lkk0+O4cOHR35+/n6/FwAAAAAAADjQaEz+w4wZM2Ljxo0VtqWUomnTphER0axZs1i9enVERJx//vnx6KOPRkTESy+9FPn5+XHEEUfEOeecE3/6059i06ZNsXnz5vjTn/60W7MTAAAAAAAADkb1aruAA9kNN9wQzz//fPzoRz+KnJyc+NznPhcREW3atImioqLMfitXrow2bdpUub0yQ4cOjauuuioiIlq2bJnFuwAAAAAAAIDa5xOTe3DNNdfEsGHD4qijjophw4bF6NGja+zco0aNisLCwigsLIz169fX2HkBAAAAAADgQKQxuQdDhgyJp556KiIiJk6cGCeffHJERKxatSratm2b2e/II4+MVatWVbkdAAAAAAAADnYak3uwevXq6N27d0REnHnmmbF06dKIiPjd734XgwcPjoiIU045JUpKSmLNmjXx/PPPx9lnnx35+fmRn58fZ599djz//PO1Vj8AAAAAAAAcKDxj8h/Gjx8fp59+erRs2TKKiopi+PDhMXTo0HjggQeiXr16sX379swzIZ977rk499xz46233oqtW7fG5ZdfHhERmzZtittvvz1mz54dEREjRoyITZs21do9AQAAAAAAwIFCY/IfBg0aVOn27t27V7r92muvrXT72LFjY+zYsTVWFwAAAAAAAHwa+CpXAAAAAAAAIOs0JgEAAAAAAICs05gEAAAAAAAAsk5jEgAAAAAAAMg6jUkAAAAAAAAg6zQmAQAAAAAAgKzTmAQAAAAAAACyTmMSAAAAAAAAyDqNSQAAAAAAACDrNCYBAAAAAACArNOYBAAAAAAAALJOYxIAAAAAAADIOo1JAAAAAAAAIOs0JgEAAAAAAICs05gEAACAGtKs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4Todp01Rs9yW4eXtEyel7fgAAPfZsqImrq1o7gEHIrGHl88NAAAAANzIrN9pxQ19NjfEALgFiUnAQ0IJx+qhg11VijWUlIxdxikny3vK7/dFtQUChkPRAEDjXH73pri2B5/8woFI7OHlcwNwelq2bKmZM2eqa9euMgxD48aN02effabXX39dF110kXbu3Klhw4appiZ4QW3q1Km64447dOTIEd13331av369w2cAAADgbmb9Titu6LO5IQbALSjlCsAxkSM5Q8uZ0nHalPD8kh2nTYl7/kRNbdT3W0dOyGg8sfx+n3xtV0U9cvI/tjUGAAAApMfUqVO1bNkyXXbZZSosLNSWLVs0efJkLV++XAUFBVq+fLkmT54sSbr99tt16aWX6tJLL9WECRP0yiuvOBw9AAAAAGQOiUmgCYgs6xpajkzExSbl7GLnSM6GRm1SXhYA0mfkzbkaeXNuVFv3bueoe7dzHIoos7x8bgBS16JFC914442aNWuWJOmbb75RbW2tBg0apDlz5kiS5syZo8GDg3OtDxo0SHPnzpUkrV69Wrm5uWrXrp0zwQMAAGQJs36nFTf02dwQA+AWlHIFmoAuJcvi5oIMJeIKioviknINzRkJAEAi89/4niSpuO2qcNu65VdKknwRbV7h5XMDkLqLL75YFRUVeu2111RYWKh169bpscceU35+vg4cCM4tdODAAeXn50uSzj//fO3evTu8/Z49e3T++eeH1wUAAEA8s36nFTf02dwQA+AWjJgEkLWsyrOGysJmujwsAAAAEKtZs2bq3r27XnnlFXXv3l1ff/11uGxrJMNIbT7x8ePHa+3atVq7dq3atGmTrnABAAAAwFYkJgFkjVASMsSqPGuoLGymy8MCAAAAsfbs2aM9e/ZozZo1kqS33npL3bt3V3l5ebhEa7t27fTll19Kkvbu3asLLrggvH379u21d+/euP3OmDFDPXr0UI8ePVRZWWnDmQAAAABA+pGYBJAVQiMiC4qLwstumCcTAAAAiFReXq7du3eroKBAktSvXz9t3rxZS5cu1b333itJuvfee/XOO+9IkpYuXaoxY8ZIkq677jrV1tZSxhUAAACAZzHHJICsYDY6MtE8mQAAAIBTHnnkEc2fP19nnnmmtm/frrFjx8rv9+uNN97Q/fffr127dmnYsGGSpD/96U+64447tG3bNh05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\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 2160x1296 with 2 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\n"]},{"output_type":"error","ename":"KeyboardInterrupt","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-100-eb0ceb931ebc>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0m_\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mplot_check_v5\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnp_df\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mconfig\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mparam_zip\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpr_msg\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mx_max\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mx_margin_mult\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_margin_mult\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfront_plot\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mplot_check_dir\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mcol_idx_dict\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mparam_zip\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mzip\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnp_plot_params\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnp_plot_params\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m<ipython-input-100-eb0ceb931ebc>\u001b[0m in \u001b[0;36m<listcomp>\u001b[0;34m(.0)\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0m_\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mplot_check_v5\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnp_df\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mconfig\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mparam_zip\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpr_msg\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mx_max\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mx_margin_mult\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_margin_mult\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfront_plot\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mplot_check_dir\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mcol_idx_dict\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mparam_zip\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mzip\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnp_plot_params\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnp_plot_params\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/content/drive/My Drive/Colab Notebooks/JnQ/funcs/funcs_plot_check.py\u001b[0m in \u001b[0;36mplot_check_v5\u001b[0;34m(data, config, param_zip, pr_msg, x_max, x_margin_mult, y_margin_mult, front_plot, plot_check_dir, **col_idx_dict)\u001b[0m\n\u001b[1;32m    346\u001b[0m     \u001b[0;31m# a_data = data[iin:iout]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    347\u001b[0m     \u001b[0;31m# ------ candles ------ #\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 348\u001b[0;31m     \u001b[0mcandle_plot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ma_data\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcol_idx_dict\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'ohlc_col_idxs'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0max\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0malpha\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1.0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mwickwidth\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1.0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    349\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    350\u001b[0m     \u001b[0;31m# ------ add cols ------ #\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/content/drive/My Drive/Colab Notebooks/JnQ/funcs/funcs_plot_check.py\u001b[0m in \u001b[0;36mcandle_plot\u001b[0;34m(ohlc_np, ax, alpha, wickwidth)\u001b[0m\n\u001b[1;32m    564\u001b[0m   \u001b[0mindex\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0marange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mohlc_np\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    565\u001b[0m   \u001b[0mcandle\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhstack\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreshape\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindex\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mohlc_np\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 566\u001b[0;31m   \u001b[0mmf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcandlestick_ohlc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0max\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcandle\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mwidth\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0.5\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcolorup\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'#26a69a'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcolordown\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'#ef5350'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0malpha\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0malpha\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mwickwidth\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mwickwidth\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    567\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    568\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/content/drive/My Drive/Colab Notebooks/JnQ/mpl_finance/mpl_finance.py\u001b[0m in \u001b[0;36mcandlestick_ohlc\u001b[0;34m(ax, quotes, width, colorup, colordown, alpha, wickwidth)\u001b[0m\n\u001b[1;32m    249\u001b[0m     return _candlestick(ax, quotes, width=width, colorup=colorup,\n\u001b[1;32m    250\u001b[0m                         \u001b[0mcolordown\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcolordown\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 251\u001b[0;31m                         alpha=alpha, ochl=False, wickwidth=wickwidth)\n\u001b[0m\u001b[1;32m    252\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    253\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/content/drive/My Drive/Colab Notebooks/JnQ/mpl_finance/mpl_finance.py\u001b[0m in \u001b[0;36m_candlestick\u001b[0;34m(ax, quotes, width, colorup, colordown, alpha, ochl, wickwidth)\u001b[0m\n\u001b[1;32m    325\u001b[0m         \u001b[0mlines\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvline\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    326\u001b[0m         \u001b[0mpatches\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrect\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 327\u001b[0;31m         \u001b[0max\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0madd_line\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvline\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    328\u001b[0m         \u001b[0max\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0madd_patch\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrect\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    329\u001b[0m     \u001b[0max\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mautoscale_view\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/matplotlib/axes/_base.py\u001b[0m in \u001b[0;36madd_line\u001b[0;34m(self, line)\u001b[0m\n\u001b[1;32m   1846\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_set_artist_props\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mline\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1847\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mline\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_clip_path\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1848\u001b[0;31m             \u001b[0mline\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mset_clip_path\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpatch\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1849\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1850\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_update_line_limits\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mline\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/matplotlib/artist.py\u001b[0m in \u001b[0;36mset_clip_path\u001b[0;34m(self, path, transform)\u001b[0m\n\u001b[1;32m    760\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpath\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mRectangle\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    761\u001b[0m                 self.clipbox = TransformedBbox(Bbox.unit(),\n\u001b[0;32m--> 762\u001b[0;31m                                                path.get_transform())\n\u001b[0m\u001b[1;32m    763\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_clippath\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    764\u001b[0m                 \u001b[0msuccess\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/matplotlib/patches.py\u001b[0m in \u001b[0;36mget_transform\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    260\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mget_transform\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    261\u001b[0m         \u001b[0;34m\"\"\"Return the `~.transforms.Transform` applied to the `Patch`.\"\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 262\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_patch_transform\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0martist\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mArtist\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_transform\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    263\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    264\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mget_data_transform\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/matplotlib/patches.py\u001b[0m in \u001b[0;36mget_patch_transform\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    775\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    776\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mget_patch_transform\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 777\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_update_patch_transform\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    778\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_rect_transform\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    779\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/matplotlib/patches.py\u001b[0m in \u001b[0;36m_update_patch_transform\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    758\u001b[0m         \u001b[0mrot_trans\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrotate_deg_around\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mangle\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    759\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_rect_transform\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtransforms\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mBboxTransformTo\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbbox\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 760\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_rect_transform\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0mrot_trans\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    761\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    762\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_update_x1\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/matplotlib/transforms.py\u001b[0m in \u001b[0;36m__add__\u001b[0;34m(self, other)\u001b[0m\n\u001b[1;32m   1251\u001b[0m         \"\"\"\n\u001b[1;32m   1252\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mother\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mTransform\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1253\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mcomposite_transform_factory\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mother\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1254\u001b[0m         raise TypeError(\n\u001b[1;32m   1255\u001b[0m             \"Can not add Transform to object of type '%s'\" % type(other))\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/matplotlib/transforms.py\u001b[0m in \u001b[0;36mcomposite_transform_factory\u001b[0;34m(a, b)\u001b[0m\n\u001b[1;32m   2484\u001b[0m     \u001b[0;32melif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mAffine2D\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mb\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mAffine2D\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2485\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mCompositeAffine2D\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mb\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2486\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0mCompositeGenericTransform\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mb\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2487\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2488\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/matplotlib/transforms.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, a, b, **kwargs)\u001b[0m\n\u001b[1;32m   2303\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0moutput_dims\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mb\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0moutput_dims\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2304\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2305\u001b[0;31m         \u001b[0mTransform\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__init__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2306\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_a\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0ma\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2307\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_b\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mb\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/matplotlib/transforms.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, shorthand_name)\u001b[0m\n\u001b[1;32m     91\u001b[0m             \u001b[0;31m`\u001b[0m\u001b[0;31m`\u001b[0m\u001b[0mstr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtransform\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;31m`\u001b[0m\u001b[0;31m`\u001b[0m \u001b[0mwhen\u001b[0m \u001b[0mDEBUG\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     92\u001b[0m         \"\"\"\n\u001b[0;32m---> 93\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_parents\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m{\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     94\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     95\u001b[0m         \u001b[0;31m# TransformNodes start out as invalid until their values are\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]},{"output_type":"display_data","data":{"text/plain":["<Figure size 2160x1296 with 2 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["_ = [plot_check_v5(np_df, config, param_zip, pr_msg, x_max, x_margin_mult, y_margin_mult, front_plot, plot_check_dir, **col_idx_dict) for param_zip in zip(np_plot_params, np_plot_params[::-1])]"]},{"cell_type":"markdown","metadata":{"id":"MQ8w8nWVXlGj"},"source":["### plot_funcs"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"cFt6CeZf4yEk"},"outputs":[],"source":["def plot_check_v5(data, config, param_zip, pr_msg, x_max, x_margin_mult, y_margin_mult, front_plot, plot_check_dir=None, **col_idx_dict):\n","  # start_0 = time.time()\n","  plt.style.use(['dark_background', 'fast'])\n","  fig = plt.figure(figsize=(30, 18))\n","  nrows, ncols = 2, 2\n","  gs = gridspec.GridSpec(nrows=nrows,  # row 부터 index 채우고 col 채우는 순서임 (gs_idx)\n","                         ncols=ncols,\n","                         height_ratios=[3, 1]\n","                         )\n","  for gs_idx, params in enumerate(param_zip):\n","    ax = fig.add_subplot(gs[gs_idx])\n","    iin, iout, pr, ep, tp, entry_idx, exit_idx, open_idx, point1_idx, lvrg, fee, tp_line, out_line, en_tp1, en_out0 = params\n","\n","    # if ep > out_line:  # for tp > ep > out plot_check\n","    #   break\n","\n","    # ------------ add_col section ------------ #\n","    a_data = data[int(iin):int(iout + 1)]\n","    # a_data = data[iin:iout]\n","    # ------ candles ------ #\n","    candle_plot(a_data[:, col_idx_dict['ohlc_col_idxs']], ax, alpha=1.0, wickwidth=1.0)\n","\n","    # ------ add cols ------ #\n","    [nonstep_col_plot(a_data[:, params[0]], *params[1:]) for params in col_idx_dict['nonstep_col_info']]\n","    [step_col_plot(a_data[:, params[0]], *params[1:]) for params in col_idx_dict['step_col_info']]\n","    [stepmark_col_plot(a_data[:, params[0]], *params[1:]) for params in col_idx_dict['stepmark_col_info']]\n","\n","    # ------ ep, tp + xlim ------ #\n","    try:\n","      eptp_hvline_v5(config, ep, tp, entry_idx, exit_idx, open_idx, point1_idx, tp_line, out_line, en_tp1, en_out0,\n","                    front_plot, iin, iout, x_max, x_margin_mult, y_margin_mult, a_data, **col_idx_dict)\n","    except Exception as e:\n","      print(\"error in eptp_hvline_v3 :\", e)\n","\n","    #     Todo    #\n","    #     3. outer_price plot 일 경우, gs_idx + nrows 하면 됨\n","\n","    # ------ trade_info ------ #\n","    plt.title(pr_msg.format(entry_idx, exit_idx, pr, lvrg, fee))\n","\n","  if plot_check_dir is None:\n","    plt.show()\n","    print()\n","  else:\n","    fig_name = plot_check_dir + \"/%s.png\" % int(entry_idx)\n","    plt.savefig(fig_name)\n","    print(fig_name, \"saved !\")\n","  plt.close()\n","  # print(\"elapsed time :\", time.time() - start_0)\n","\n","  return\n","\n","def eptp_hvline_v5(config, en_p, ex_p, entry_idx, exit_idx, open_idx, point1_idx, tp_line, out_line, en_tp1, en_out0,\n","                   front_plot, iin, iout, x_max, x_margin_mult, y_margin_mult, a_data, **col_idx_dict):\n","  # ------ get vertical ticks ------ #\n","  entry_tick = int(entry_idx - iin)\n","  exit_tick = entry_tick + int(exit_idx - entry_idx)\n","  open_tick = entry_tick - int(entry_idx - open_idx)\n","  point1_tick = open_tick - int(open_idx - point1_idx)\n","  bias_info_tick = entry_tick + config.tr_set.bias_info_tick\n","\n","  if front_plot == 1:\n","    x_max = open_tick + 20\n","  elif front_plot == 2:\n","    x_max = entry_tick + 20 \n","  elif front_plot == 3:\n","    x_max = exit_tick + 20\n","  elif front_plot == 4:\n","    x_max = bias_info_tick + 20\n","\n","  if (iout - iin) > x_max:\n","    x_margin = x_max * x_margin_mult\n","    plt.xlim(0 - x_margin, x_max + x_margin)\n","  x0, x1 = plt.gca().get_xlim()\n","\n","  # ------------ hlines ------------ #\n","  # ------ entry & exit ------ #\n","  en_xmin = entry_tick / x1\n","  ex_xmin = exit_tick / x1\n","  plt.axhline(en_p, x0, en_xmin, linewidth=2, linestyle='--', alpha=1, color='lime')  # en_p line axhline\n","  plt.text(x0, en_p, 'en_p :\\n {:.3f} \\n epg {}'.format(en_p, config.tr_set.ep_gap), ha='right', va='center', fontweight='bold', fontsize=15)  # en_p line label\n","  plt.axhline(ex_p, ex_xmin, 1, linewidth=2, linestyle='--', alpha=1, color='lime')  # ex_p line axhline (signal 도 포괄함, 존재 의미)\n","  plt.text(x1, ex_p, 'ex_p :\\n {}'.format(ex_p), ha='left', va='center', fontweight='bold', fontsize=15)  # ex_p line label\n","\n","  # ------ tpout_line ------ #\n","  plt.axhline(tp_line, 0.05, 1, linewidth=4, linestyle='-', alpha=1, color='#00ff00')  # ep 와 gap 비교 용이하기 위해 ex_xmin -> 0.1 사용\n","  plt.text(x0, tp_line, 'tpg {}'.format(config.tr_set.tp_gap), ha='right', va='center', fontweight='bold', fontsize=15, color='#00ff00')\n","  plt.axhline(out_line, 0.05, 1, linewidth=4, linestyle='-', alpha=1, color='#ff0000')\n","  plt.text(x0, out_line, 'outg {}'.format(config.tr_set.out_gap), ha='right', va='center', fontweight='bold', fontsize=15, color='#ff0000')\n","\n","  # ------ bias_line ------ #\n","  text_x_pos = (x0 + x1) * 0.1\n","  plt.axhline(en_tp1, 0.2, 1, linewidth=4, linestyle='-', alpha=1, color='#ffffff')\n","  plt.text(text_x_pos, en_tp1, ' en_tp1', ha='right', va='bottom', fontweight='bold', fontsize=15)\n","  plt.axhline(en_out0, 0.2, 1, linewidth=4, linestyle='-', alpha=1, color='#ffffff')\n","  plt.text(text_x_pos, en_out0, ' en_out0', ha='right', va='bottom', fontweight='bold', fontsize=15)\n","\n","  # ------ ylim ------ #\n","  if front_plot:\n","    y_lim_data = a_data[:x_max + 1, col_idx_dict['ylim_col_idxs']]  # +1 for including open_tick\n","  else:\n","    y_lim_data = a_data[:, col_idx_dict['ylim_col_idxs']]\n","  \n","  y_min = y_lim_data.min()\n","  y_max = y_lim_data.max()\n","  y_margin = (y_max - y_min) * y_margin_mult\n","  plt.ylim(y_min - y_margin, y_max + y_margin)\n","\n","  # ------------ vline (open_tick, entry_tick, exit_tick) ------------ #\n","  y0, y1 = plt.gca().get_ylim()\n","  l_data = a_data[:exit_tick + 1, col_idx_dict['ohlc_col_idxs'][2]]  # +1 for including exit_tick\n","  point1_ymax, open_ymax, en_ymax, ex_ymax = [(l_data[tick_] - y0) / (y1 - y0) - .01 for tick_ in [point1_tick, open_tick, entry_tick, exit_tick]]  # -.05 for margin\n","  plt.axvline(point1_tick, 0, point1_ymax, alpha=1, linewidth=2, linestyle='--', color='#ff7722')\n","  plt.axvline(open_tick, 0, open_ymax, alpha=1, linewidth=2, linestyle='--', color='#ffeb3b')  # 추후, tick 별 세부 정의가 달라질 수 있음을 고려해 multi_line 작성 유지\n","  plt.axvline(entry_tick, 0, en_ymax, alpha=1, linewidth=2, linestyle='--', color='#ffeb3b')\n","  plt.axvline(exit_tick, 0, ex_ymax, alpha=1, linewidth=2, linestyle='--', color='#ffeb3b')\n","  plt.axvline(bias_info_tick, alpha=1, linewidth=2, linestyle='-', color='#ffeb3b')\n","\n","  return"]},{"cell_type":"markdown","metadata":{"id":"q3zisNOTw3jM"},"source":["#### legacy"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"fUFdJVrsw78h"},"outputs":[],"source":["_ = [plot_check_v4(np_df, config, param_zip, pr_msg, x_max, x_margin_mult, y_margin_mult, front_plot, plot_check_dir, 500, 0.07, 100, **col_idx_dict) for param_zip in zip(np_plot_params, np_plot_params[::-1])]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ESReTMpP7SoO"},"outputs":[],"source":["def plot_check_v4(data, config, param_zip, pr_msg, x_max, x_margin_mult, y_margin_mult, front_plot, plot_check_dir=None, vp_range=500, kde_factor=0.05, num_samples=100, **col_idx_dict):\n","  # start_0 = time.time()\n","  plt.style.use(['dark_background', 'fast'])\n","  fig = plt.figure(figsize=(30, 18))\n","  nrows, ncols = 2, 2\n","  gs = gridspec.GridSpec(nrows=nrows,  # row 부터 index 채우고 col 채우는 순서임 (gs_idx)\n","                         ncols=ncols,\n","                         height_ratios=[3, 1]\n","                         )\n","  for gs_idx, params in enumerate(param_zip):\n","    ax = fig.add_subplot(gs[gs_idx])\n","    iin, iout, pr, ep, tp, entry_idx, exit_idx, open_idx, lvrg, fee, tp_line, out_line, bias_info, bias_thresh = params\n","\n","    # ------------ add_col section ------------ #\n","    iin, iout = int(iin), int(iout)\n","    a_data = data[iin:iout]\n","    # ------ candles ------ #\n","    candle_plot(a_data[:, col_idx_dict['ohlc_col_idxs']], ax, alpha=1.0, wickwidth=1.0)\n","    \n","    # ------ add cols ------ #\n","    [nonstep_col_plot(a_data[:, params[0]], *params[1:]) for params in col_idx_dict['nonstep_col_info']]\n","    [step_col_plot(a_data[:, params[0]], *params[1:]) for params in col_idx_dict['step_col_info']]\n","    [stepmark_col_plot(a_data[:, params[0]], *params[1:]) for params in col_idx_dict['stepmark_col_info']]\n","\n","    # vp_data = data[iin - vp_range:iin, col_idx_dict['vp_col_idxs']]\n","    # vp_info = [vp_range, vp_data[:, 0], vp_data[:, 1], kde_factor, num_samples]\n","    vp_data = data[iin - vp_range:iin, col_idx_dict['vp_col_idxs']].T\n","    vp_info = [vp_range, *vp_data, kde_factor, num_samples]\n","\n","    # ------ ep, tp + xlim ------ #\n","    eptp_hvline_v4(config, ep, tp, entry_idx, exit_idx, open_idx, tp_line, out_line, bias_info, bias_thresh, \n","                   front_plot, iin, iout, x_max, x_margin_mult, y_margin_mult, a_data, vp_info, **col_idx_dict)        \n","\n","    #     Todo    #\n","    #     3. outer_price plot 일 경우, gs_idx + nrows 하면 됨\n","\n","    # ------ trade_info ------ #\n","    plt.title(pr_msg.format(entry_idx, exit_idx, pr, lvrg, fee))\n","\n","  if plot_check_dir is None:\n","    plt.show()\n","    print()\n","  else:\n","    fig_name = plot_check_dir +  \"/%s.png\" % int(entry_idx)\n","    plt.savefig(fig_name)\n","    print(fig_name, \"saved !\")\n","  plt.close()\n","  # print(\"elapsed time :\", time.time() - start_0)  \n","\n","  return\n","\n","def eptp_hvline_v4(config, en_p, ex_p, entry_idx, exit_idx, open_idx, tp_line, out_line, bias_info, bias_thresh, \n","                   front_plot, iin, iout, x_max, x_margin_mult, y_margin_mult, a_data, vp_info, **col_idx_dict):\n","  # ------ get vertical ticks ------ #\n","  entry_tick = int(entry_idx - iin)\n","  open_tick = entry_tick - int(entry_idx - open_idx)\n","  exit_tick = entry_tick + int(exit_idx - entry_idx)\n","\n","  if front_plot == 1:\n","    x_max = open_tick\n","  elif front_plot == 2:\n","    x_max = entry_tick\n","  if (iout - iin) > x_max:\n","    x_margin = x_max * x_margin_mult\n","    plt.xlim(0 - x_margin, x_max + x_margin)\n","  x0, x1 = plt.gca().get_xlim()\n","  # ------------ hlines ------------ #\n","  # ------ entry & exit ------ #\n","  en_xmin = entry_tick / x1\n","  ex_xmin = exit_tick / x1\n","  plt.axhline(en_p, x0, en_xmin, linewidth=2, linestyle='--', alpha=1, color='lime')  # en_p line axhline\n","  plt.text(x0, en_p, ' en_p :\\n {}'.format(en_p), ha='right', va='center', fontweight='bold')  # en_p line label\n","  plt.axhline(ex_p, ex_xmin, 1, linewidth=2, linestyle='--', alpha=1, color='lime')  # ex_p line axhline (signal 도 포괄함, 존재 의미)\n","  plt.text(x1, ex_p, ' ex_p :\\n {}'.format(ex_p), ha='left', va='center', fontweight='bold')  # ex_p line label\n","\n","  # ------ tpout_line ------ #\n","  plt.axhline(tp_line, 0.1, 1, linewidth=4, linestyle='-', alpha=1, color='#00ff00')  # ep 와 gap 비교 용이하기 위해 ex_xmin -> 0.1 사용\n","  plt.text(x0, tp_line, ' %s' % config.tr_set.tp_gap, ha='left', va='center', fontweight='bold')\n","  plt.axhline(out_line, 0.1, 1, linewidth=4, linestyle='-', alpha=1, color='#ff0000')\n","  plt.text(x0, out_line, ' %s' % config.tr_set.out_gap, ha='left', va='center', fontweight='bold')\n","\n","  # ------ bias_line ------ #\n","  plt.axhline(bias_info, 0.1, 1, linewidth=4, linestyle='-', alpha=1, color='dodgerblue')\n","  plt.text(x0, bias_info, ' bias_info', ha='left', va='center', fontweight='bold')\n","  plt.axhline(bias_thresh, 0.1, 1, linewidth=4, linestyle='-', alpha=1, color='#ff8400')\n","  plt.text(x0, bias_thresh, ' bias_thresh', ha='left', va='center', fontweight='bold')\n","\n","  # ------ volume profile ------ #\n","  vp_range, close, volume, kde_factor, num_samples = vp_info\n","  if iin >= vp_range:\n","    start_0 = time.time()\n","    kde = stats.gaussian_kde(close, weights=volume, bw_method=kde_factor)\n","    kdx = np.linspace(close.min(), close.max(), num_samples)\n","    kdy = kde(kdx)\n","    print(\"kde elapsed_time :\", time.time() - start_0)\n","\n","    kdy_max = kdy.max()\n","    # peaks,_ = signal.find_peaks(kdy)\n","    peaks,_ = signal.find_peaks(kdy, prominence=kdy_max * 0.3)\n","    peak_list = kdx[peaks]   # peak_list\n","    [plt.axhline(peak, linewidth=6, linestyle='-', alpha=1, color='white') for peak in peak_list]\n","    \n","    kdy_ratio = entry_tick / kdy_max # 30 / 0.0001\n","    plt.plot(kdy * kdy_ratio, kdx, color='white')\n","    # plt.plot(pky, pkx, 'bo', color='yellow')\n","\n","  # ------ ylim ------ #\n","  if front_plot:\n","    y_lim_data = a_data[:x_max + 1, col_idx_dict['ylim_col_idxs']]  # +1 for including open_tick\n","  else:\n","    y_lim_data = a_data[:, col_idx_dict['ylim_col_idxs']]\n","  y_min = y_lim_data.min()\n","  y_max = y_lim_data.max()\n","  y_margin = (y_max - y_min) * y_margin_mult\n","  # plt.ylim(y_min - y_margin, y_max + y_margin)\n","\n","  # ------------ vline (open_tick, entry_tick, exit_tick) ------------ #\n","  y0, y1 = plt.gca().get_ylim()\n","  l_data = a_data[:exit_tick + 1, col_idx_dict['ohlc_col_idxs'][2]]  # +1 for including exit_tick\n","  open_ymax, en_ymax, ex_ymax = [(l_data[tick_] - y0) / (y1 - y0) - .01 for tick_ in [open_tick, entry_tick, exit_tick]]  # -.05 for margin\n","  plt.axvline(open_tick, 0, open_ymax, alpha=1, linewidth=2, linestyle='--', color='#ffeb3b')  # 추후, tick 별 세부 정의가 달라질 수 있음을 고려해 multi_line 작성 유지\n","  plt.axvline(entry_tick, 0, en_ymax, alpha=1, linewidth=2, linestyle='--', color='#ffeb3b')\n","  plt.axvline(exit_tick, 0, ex_ymax, alpha=1, linewidth=2, linestyle='--', color='#ffeb3b')\n","\n","  return"]},{"cell_type":"markdown","metadata":{"id":"X0FsT-8FZRti"},"source":["### sync_check"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"inQ6f-CDZYkr"},"outputs":[],"source":["save_plot = 0\n","\n","open_idx_range = reversed(range(0, len(res_df), 1000))\n","plot_range = 100\n","\n","x_max = 400\n","\n","inversion = 0\n","hedge = 0\n","\n","\n","if save_plot:\n","  plot_check_dir = current_path + \"plot_check/\" +  key.replace(\".ftr\", \"\")\n","  try:\n","    os.mkdir(plot_check_dir)\n","  except:\n","\n","    #     remove existing dir   #\n","    shutil.rmtree(plot_check_dir)\n","    print(plot_check_dir, 'removed !')\n","    os.mkdir(plot_check_dir)\n","    # pass\n","    \n","\n","prev_plotsize = 30\n","post_plotsize = 20\n","\n","\n","\n","h_candle_intv1 = 15\n","h_candle_intv2 = 60\n","if 'hopen_{}'.format(h_candle_intv2) not in res_df.columns:\n","  res_df = h_candle(res_df, h_candle_intv1)\n","  res_df = h_candle(res_df, h_candle_intv2)\n","\n","res_df[\"ma30_1m\"] = res_df['close'].rolling(30).mean()\n","res_df[\"ma60_1m\"] = res_df['close'].rolling(60).mean()\n","\n","res_df = dtk_plot(res_df, dtk_itv2='15m', hhtf_entry=15, use_dtk_line=config.loc_set.zone.use_dtk_line)\n","# res_df = dtk_plot(res_df, dtk_itv2='15m', hhtf_entry=1, use_dtk_line=1)\n","# break\n","\n","rtc_list = [\"short_tp_1_{}\".format(strat_version), \"short_tp_gap_{}\".format(strat_version), \"long_tp_1_{}\".format(strat_version), \"long_tp_gap_{}\".format(strat_version)]\n","# h_rtc_list = [\"h_short_tp_1\", \"h_short_tp_gap\", \"h_long_tp_1\", \"h_long_tp_gap\"]\n","dtk_list = [\"short_dtk_1_{}\".format(strat_version), \"short_dtk_gap_{}\".format(strat_version), \"long_dtk_1_{}\".format(strat_version), \"long_dtk_gap_{}\".format(strat_version),\n","            # \"short_dtk_1_line\", \"short_dtk_gap_line\", \"long_dtk_1_line\", \"long_dtk_gap_line\",\n","            \"short_dtk_plot_1\", \"short_dtk_plot_gap\", \"long_dtk_plot_1\", \"long_dtk_plot_gap\"]\n","dc_v2_list = ['dc_upper_v2_{}'.format(strat_version), 'dc_lower_v2_{}'.format(strat_version)]\n","\n","\n","ohlc_list = ['open', 'high', 'low', 'close'] # + basic_st_list\n","hcandle_list = ['hopen_%s' % h_candle_intv1, 'hclose_%s' % h_candle_intv1, 'hopen_%s' % h_candle_intv2, 'hclose_%s' % h_candle_intv2]\n","# hcandle_list = ['hopen_%s' % h_candle_intv1, 'hclose_%s' % h_candle_intv1, 'hhigh_%s' % h_candle_intv2, 'hlow_%s' % h_candle_intv2]\n","\n","# --------------------- dc & bb level --------------------- #\n","dc_interval = '1m'\n","hdc_interval = '5m'\n","hhdc_interval = '15m'\n","\n","st_list = ['st_base_%s' % hhdc_interval, 'st_upper_%s' % hhdc_interval, 'st_lower_%s' % hhdc_interval]\n","\n","dc_list = ['dc_upper_%s' % dc_interval, 'dc_lower_%s' % dc_interval]\n","hdc_list = ['dc_upper_%s' % hdc_interval, 'dc_lower_%s' % hdc_interval]\n","hhdc_list = ['dc_upper_%s' % hhdc_interval, 'dc_lower_%s' % hhdc_interval]\n","\n","bb_interval = dc_interval\n","hbb_interval = hdc_interval\n","hhbb_interval = hhdc_interval\n","\n","bb_list = ['bb_upper_%s' % bb_interval, 'bb_lower_%s' % bb_interval]\n","hbb_list = ['bb_upper_%s' % hbb_interval, 'bb_lower_%s' % hbb_interval]\n","hhbb_list = ['bb_upper_%s' % hhbb_interval, 'bb_lower_%s' % hhbb_interval]\n","\n","bbwp_list = ['bbwp', 'bbwp_ma']\n","\n","\n","senkoua_list = ['senkou_a1', 'senkou_a2', 'senkou_a3', 'senkou_a4', 'senkou_a5']\n","senkoub_list = ['senkou_b1', 'senkou_b2', 'senkou_b3', 'senkou_b4', 'senkou_b5']\n","senkoua_list = ['senkou_a1']\n","senkoub_list = ['senkou_b1']\n","\n","sar_list = ['sar_3m', 'sar_5m', 'sar_15m']\n","\n","ma_list = ['ma30_1m', 'ma60_1m']\n","sma_list = ['sma_1m']\n","\n","ema_list = ['ema_5m']\n","# cb_list = ['cloud_bline_1m']\n","cb_list = ['cloud_bline_30m']\n","# cb_list = ['cloud_bline_5m']\n","\n","\n","\n","# -------------- under price phase -------------- #\n","# macd_list = ['macd_hist1', 'macd_hist2', 'macd_hist3']\n","# trix_list = ['trix1', 'trix2', 'trix3']\n","# stoch_list = ['stoch_5m']\n","# fisher_list = ['fisher30', 'fisher60', 'fisher120']\n","# cctbbo_list = ['cctbbo']\n","# emaroc_list = ['ema_roc']\n","rsi_list = ['rsi_%s' % config.loc_set.point.exp_itv] \n","cci_list = ['cci_%s' % config.loc_set.point.exp_itv] \n","\n","\n","# -------------- summation -------------- #\n","# input_colname = ohlc_list + basic_st_list + pline_list + bb_list + hbb_list + sma_list + cb_list + stoch_list + sar_list + dc_list\n","input_colname = ohlc_list + hcandle_list + bb_list + hbb_list + hhbb_list + dc_list + hdc_list + hhdc_list + dtk_list + dc_v2_list + rsi_list + ema_list + ma_list + st_list# + cci_list\n","\n","# yrange_colname = ohlc_list + basic_st_list + pline_list # currently just used for ymin, ymax\n","yrange_colname = ohlc_list + hcandle_list + bb_list + hbb_list + hhbb_list + dc_list + hdc_list + hhdc_list + dc_v2_list + ema_list # currently just used for ymin, ymax\n","yrange_colname = ohlc_list + hcandle_list + bb_list + hbb_list + hhbb_list + dc_list + hdc_list + dc_v2_list + ema_list # currently just used for ymin, ymax\n","\n","\n","\n","odd_cnt = 0\n","obj_i = -1\n","rev_obj_i = 0\n","\n","#   지금, continue 발생시 true / false idx 가 같이 상승하는 문제\n","\n","# while 1:\n","for open_idx in open_idx_range:\n","\n","  # if obj_i >= len_obj or rev_obj_i >= len_obj:\n","  #   break\n","\n","  # if odd_cnt % 2 == 1 and tf_plot: #  loss plot 을 채워야하는 상황\n","  #   rev_obj_i += 1\n","\n","  # else:\n","  #   obj_i += 1\n","\n","  if not(i >= prev_plotsize):\n","    continue\n","  \n","\n","  odd_cnt += 1\n","\n","  # break\n","\n","  print(\"open_idx :\", open_idx)\n","  \n","  plot_df = res_df.iloc[open_idx - prev_plotsize:open_idx + plot_range + post_plotsize][input_colname]\n","  \n","  odds = 1 if odd_cnt % 2 == 1 else 2\n","  if odds == 1:\n","\n","    plt.style.use('dark_background')\n","\n","    fig = plt.figure(figsize=(26, 18))\n","    \n","    gs = gridspec.GridSpec(nrows=2, # row 몇 개 \n","                        ncols=2, # col 몇 개 \n","                        height_ratios=[3, 1]\n","                        )\n","    \n","  ax = fig.add_subplot(gs[odds - 1])\n","\n","  # fig.show()\n","  # fig.canvas.draw()\n","\n","  temp_ohlc = plot_df.values[:, :4]\n","  index = np.arange(len(temp_ohlc))\n","  candle = np.hstack((np.reshape(index, (-1, 1)), temp_ohlc))\n","  mf.candlestick_ohlc(ax, candle, width=0.5, colorup='#26a69a', colordown='#ef5350', alpha=0.5)\n","\n","  # ---------- h_candle ---------- #\n","  alpha = 1\n","  lw = 1\n","  for cd_i, candle in enumerate(hcandle_list):\n","\n","    if cd_i == 2:\n","      lw = 2      \n","    plt.step(np.arange(len(plot_df)), plot_df[candle].values, alpha=alpha, color='#ffffff', linewidth=lw)\n","\n","  # alpha = 0.1\n","  # plt.fill_between(np.arange(len(plot_df)), plot_df['hclose_60'].values, plot_df['hopen_60'].values, \n","  #                     where=1, facecolor='#ffffff', alpha=alpha)  \n","  \n","\n","   # --------- ma --------- #\n","  alpha = 1\n","  lw = 2\n","  for ma_i, item in enumerate(ma_list):\n","    plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#ffeb3b', linewidth=lw)\n","\n","   # --------- ema --------- #\n","  alpha = 1\n","  lw = 4\n","  for sm_i, item in enumerate(ema_list):\n","    plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#03ed30', linewidth=lw)\n","    \n","   # --------- st --------- #\n","  alpha = 1\n","  lw = 2\n","  for sm_i, item in enumerate(st_list):\n","      plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#00ff00', linewidth=lw)\n","\n","  # ---------------------- dc_v2 ---------------------- #\n","  # alpha = 1\n","  # lw = 2\n","  # for sm_i, item in enumerate(dc_v2_list):\n","  #     plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#ffeb3b', linewidth=lw)\n","\n","  # # ---------------------- dc ---------------------- #\n","  # alpha = 1\n","  # lw = 2\n","  # for sm_i, item in enumerate(dc_list):\n","  #     plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#ffeb3b', linewidth=lw)\n","\n","  # # ---------------------- hdc ---------------------- #\n","  # alpha = 1\n","  # lw = 2\n","  # for sm_i, item in enumerate(hdc_list):\n","  #     plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#e65100', linewidth=lw)\n","\n","  # # ---------------------- hhdc ---------------------- #\n","  # alpha = 1\n","  # lw = 4\n","  # for sm_i, item in enumerate(hhdc_list):\n","  #     plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#c2185b', linewidth=lw)\n","\n","\n","  # # ---------------------- bb ---------------------- #\n","  # alpha = 1\n","  # lw = 1\n","  # for sm_i, item in enumerate(bb_list):\n","  #   plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#ffffff', linewidth=lw)\n","\n","  # alpha = 0.2\n","  # plt.fill_between(np.arange(len(plot_df)), plot_df['bb_upper_%s' % bb_interval].values, plot_df['bb_lower_%s' % bb_interval].values, \n","  #                     where=plot_df['bb_upper_%s' % bb_interval].values >= plot_df['bb_lower_%s' % bb_interval].values, facecolor='#ffffff', alpha=alpha)   \n","\n","  # # ---------------------- hbb ---------------------- #\n","  # alpha = 1\n","  # lw = 2\n","  # for sm_i, item in enumerate(hbb_list):\n","  #   plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#ff00ff', linewidth=lw)\n","  \n","  # alpha = 0.2\n","  # plt.fill_between(np.arange(len(plot_df)), plot_df['bb_upper_%s' % hbb_interval].values, plot_df['bb_lower_%s' % hbb_interval].values, \n","  #                     where=plot_df['bb_upper_%s' % hbb_interval].values >= plot_df['bb_lower_%s' % hbb_interval].values, facecolor='#ff00ff', alpha=alpha) \n","  \n","  # # ---------------------- hhbb ---------------------- #\n","\n","  # alpha = 1\n","  # lw = 4\n","  # for sm_i, item in enumerate(hhbb_list):\n","  #   plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#3179f5', linewidth=lw)\n","  \n","  # alpha = 0.2\n","  # plt.fill_between(np.arange(len(plot_df)), plot_df['bb_upper_%s' % hhbb_interval].values, plot_df['bb_lower_%s' % hhbb_interval].values, \n","  #                     where=plot_df['bb_upper_%s' % hhbb_interval].values >= plot_df['bb_lower_%s' % hhbb_interval].values, facecolor='#3179f5', alpha=alpha) \n","  \n","  # ------------------- dtk_line (old, tp_line) ------------------- #\n","  \n","  # alpha = 1\n","  # lw = 2\n","  # rtc_ratio_list = [config.loc_set.zone.dt_k]\n","  \n","  # for rtc_k in rtc_ratio_list:    \n","  #   # plt.step(np.arange(len(plot_df)), plot_df['short_dtk_1_line'].values - plot_df['short_dtk_gap_line'].values * rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","  #   # plt.step(np.arange(len(plot_df)), plot_df['long_dtk_1_line'].values + plot_df['long_dtk_gap_line'].values * rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","  #   plt.step(np.arange(len(plot_df)), plot_df['short_dtk_1'].values - plot_df['short_dtk_gap'].values * rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","  #   plt.step(np.arange(len(plot_df)), plot_df['long_dtk_1'].values + plot_df['long_dtk_gap'].values * rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","\n","  # hy_min = np.min(plot_df['short_dtk_1'].values - plot_df['short_dtk_gap'].values * rtc_k)\n","  # hy_max = np.max(plot_df['long_dtk_1'].values + plot_df['long_dtk_gap'].values * rtc_k)  \n","\n","  # alpha = 1\n","  # lw = 4\n","  # # h_rtc_ratio_list = [config.loc_set.zone.dt_k]\n","  # h_rtc_ratio_list = [config.loc_set.zone.zone_dt_k]\n","  # # h_rtc_ratio_list = [0.272, 0.36, 0.4, 0.5]\n","  \n","  # for h_rtc_k in h_rtc_ratio_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df['short_dtk_plot_1'].values - plot_df['short_dtk_plot_gap'].values * h_rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","  #   plt.step(np.arange(len(plot_df)), plot_df['long_dtk_plot_1'].values + plot_df['long_dtk_plot_gap'].values * h_rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","  #   # plt.step(np.arange(len(plot_df)), plot_df['h_short_tp_1'].values - plot_df['h_short_tp_gap'].values * h_rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","  #   # plt.step(np.arange(len(plot_df)), plot_df['h_long_tp_1'].values + plot_df['h_long_tp_gap'].values * h_rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","\n","  # # hy_min = np.min(plot_df['short_dtk_plot_1'].values - plot_df['short_dtk_plot_gap'].values * h_rtc_k)\n","  # # hy_max = np.max(plot_df['long_dtk_plot_1'].values + plot_df['long_dtk_plot_gap'].values * h_rtc_k)  \n","\n","  # ------------- y lim ------------- #  \n","  y_max = max(np.max(plot_df[yrange_colname]))\n","  y_min = min(np.min(plot_df[yrange_colname]))\n","  # y_max = max(y_max, y_max_)\n","  # y_min = min(y_min, y_min_)\n","  \n","  # hy_min = np.min(plot_df['short_dtk_1'].values - plot_df['short_dtk_gap'].values * 0.36)\n","  # hy_max = np.max(plot_df['long_dtk_1'].values + plot_df['long_dtk_gap'].values * 0.36)  \n","  # y_max = max(y_max, y_max_, hy_max)\n","  # y_min = min(y_min, y_min_, hy_min)\n","\n","  if np.isnan(y_max) or np.isnan(y_min):\n","    print('continued in yminmax')\n","    continue\n","  # print(\"y_max, y_min :\", y_max, y_min)\n","  # break\n","\n","  plt.ylim(y_min, y_max)\n","\n","\n","  # ---------------------- plot ---------------------- #\n","\n","  #           rsi          #    \n","  plt.subplot(gs[odds + 1])\n","  alpha = 1\n","  for rsi_ in rsi_list:\n","    plt.step(np.arange(len(plot_df)), plot_df[rsi_].values, 'g', alpha=alpha)\n","    # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","    alpha -= 0.2\n","  plt.axhline(50, linestyle='--')\n","  plt.axhline(50 + config.loc_set.point.osc_band, linestyle='--')\n","  plt.axhline(50 - config.loc_set.point.osc_band, linestyle='--')\n","  \n","  plt.axvline(prev_plotsize, linestyle='--')\n","  \n","  #           cci          #    \n","  # plt.subplot(gs[odds + 1])\n","  # alpha = 1\n","  # for cci_ in cci_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[cci_].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axhline(config.loc_set.point.osc_band, linestyle='--')\n","  # plt.axhline(-config.loc_set.point.osc_band, linestyle='--')\n","  \n","  # plt.axvline(prev_plotsize, linestyle='--')\n","\n","\n","  if len(plot_df) > x_max:\n","    x_margin = x_max / 20\n","    plt.xlim(0 - x_margin, x_max + x_margin)\n","\n","\n","  if not save_plot:\n","    if odds == 2:\n","      plt.show()\n","      plt.close()\n","  \n","  else:\n","    # ---------- save mode ---------- #\n","    fig_name = plot_check_dir +  \"/%s.png\" % t_i\n","    plt.savefig(fig_name)\n","    print(fig_name, \"saved !\")\n","\n","  # plt.close()  \n","  print()\n","\n","  # break\n"]},{"cell_type":"markdown","metadata":{"id":"13a-U32Uy50I"},"source":["### brief np_pr survey"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"L9LdjV2uUWnp"},"outputs":[],"source":["# plot_pr_list[:100]\n","plt.plot(np_pr)\n","plt.axhline(1)\n","plt.show()"]},{"cell_type":"markdown","metadata":{"id":"TBE0l6dHRYrE"},"source":["### close & pr comp."]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":877},"executionInfo":{"elapsed":1436,"status":"ok","timestamp":1636355589887,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"-txULkhXRbz5","outputId":"7cda9fc7-4a4e-4c52-ffa3-a974b5f7c66f"},"outputs":[{"data":{"image/png":"\n","text/plain":["<Figure size 640x480 with 3 Axes>"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["\n"]},{"data":{"image/png":"\n","text/plain":["<Figure size 640x480 with 3 Axes>"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["\n"]}],"source":["#     chunky survey 필요함    #\n","chunk_size = 50000\n","\n","sync_pr = np.ones(len(res_df))\n","sync_tr = np.zeros(len(res_df))\n","# sync_tr = np.empty(len(res_df))\n","# sync_tr[:] = np.nan\n","\n","max_tr = np.max(tp_ratio_list)\n","min_tr = np.min(tp_ratio_list)\n","\n","for ck_i in range(0, len(res_df), chunk_size):\n","\n","  chunked_df = res_df.iloc[ck_i:ck_i + chunk_size]\n","  # break\n","\n","  for pr_, eptp_idx, tr_ in zip(pr_list[ck_i:ck_i + chunk_size], trade_list[ck_i:ck_i + chunk_size], tp_ratio_list[ck_i:ck_i + chunk_size]):\n","    # print(pr_, eptp_idx)\n","    sync_pr[eptp_idx[-1][0]] = pr_\n","    sync_tr[eptp_idx[-1][0]] = tr_\n","    # break\n","\n","  chunked_pr = sync_pr[ck_i:ck_i + chunk_size]\n","  chunked_tr = sync_tr[ck_i:ck_i + chunk_size]\n","  chunked_tr = np.where(np.isnan(chunked_tr), pd.Series(chunked_tr).shift(1), chunked_tr)\n","\n","  # plt.figure(figsize=(8, 6))\n","\n","  plt.subplot(311)\n","  plt.plot(np.arange(len(chunked_df)), chunked_df['close'])\n","  # plt.show()\n","\n","  plt.subplot(312)\n","  plt.plot(np.cumprod(chunked_pr))\n","  \n","  plt.subplot(313)\n","  plt.plot(chunked_tr)\n","  plt.ylim(min_tr + 0.5 * (max_tr - min_tr), max_tr)\n","  \n","  plt.show()\n","  print()\n"]},{"cell_type":"markdown","metadata":{"id":"Qys2Bw5Ou3u9"},"source":["### plot indi. legacy"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"pi5ntOOVu6JT"},"outputs":[],"source":["\n","  # ---------------------- ma ---------------------- #\n","   # --------- ema --------- #\n","  # alpha = 1\n","  # for sm_i, item in enumerate(ema_list):\n","  #   if sm_i > 0:\n","  #     lw = 5\n","  #   else:\n","  #     lw = 2\n","  #   plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#03ed30', linewidth=lw)\n","  #   alpha -= 0.2\n","\n","  #   # --------- sma --------- #\n","  # alpha = 1\n","  # for sm_i, sma in enumerate(sma_list):\n","  #   if sm_i > 0:\n","  #     lw = 5\n","  #   else:\n","  #     lw = 4\n","  #   plt.step(np.arange(len(plot_df)), plot_df[sma].values, alpha=alpha, color='#e91e63', linewidth=lw)\n","  #   alpha -= 0.2\n","\n","  \n","  # ---------------------- cb ---------------------- #\n","  # alpha = 1\n","  # for sm_i, item in enumerate(cb_list):\n","  #   if sm_i > 0:\n","  #     lw = 5\n","  #   else:\n","  #     lw = 2\n","  #   plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#5b9cf6', linewidth=lw)\n","  #   alpha -= 0.2\n","\n","\n","  \n","  # ---------------------- sar ---------------------- #\n","  # alpha = 1\n","  # markersize = 5\n","  # for sar in sar_list:\n","  #   plt.step(plot_df[sar].values, 'c*', alpha=alpha, markersize=markersize, color='dodgerblue')  # sar mic\n","  #   markersize += 1\n","  #   alpha -= 0.1\n","\n","  # plt.step(plot_df.values[:, [12]], 'co', alpha=1, markersize=7)  # sar mac\n","\n","  #               cloud               #\n","  # alpha = 0.7\n","  # for senkoua, senkoub in zip(senkoua_list, senkoub_list):\n","  #   plt.fill_between(np.arange(len(plot_df)), plot_df[senkoua].values, plot_df[senkoub].values, # ichimoku\n","  #                     where=plot_df[senkoua].values >= plot_df[senkoub].values, facecolor='g', alpha=alpha) # ichimoku\n","  #   plt.fill_between(np.arange(len(plot_df)), plot_df[senkoua].values, plot_df[senkoub].values,\n","  #                     where=plot_df[senkoua].values <= plot_df[senkoub].values, facecolor='r', alpha=alpha)  \n","  #   alpha -= 0.05\n","  \n","\n","\n","  # ---------------------- outer price indi. ---------------------- #\n","  #           macd          #\n","  # plt.subplot(312)\n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for macd in macd_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[macd].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","\n","  # plt.axhline(0, linestyle='--')\n","\n","  \n","  # #           trix          #  \n","  # # plt.subplot(313)\n","  # plt.subplot(gs[2])\n","  # alpha = 1\n","  # for trix in trix_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[trix].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","  # plt.axhline(0, linestyle='--')\n","\n","  \n","  #           fisher          #  \n","  # plt.subplot(313)\n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for fisher in fisher_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[fisher].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","    \n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","\n","  # plt.axhline(0, linestyle='--')\n","  # plt.axhline(fisher_upper, linestyle='--')\n","  # plt.axhline(fisher_lower, linestyle='--')\n","\n","  #           stoch          #  \n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for stoch_ in stoch_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[stoch_].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axhline(50, linestyle='--')\n","  # plt.axhline(stoch_upper, linestyle='--')\n","  # plt.axhline(stoch_lower, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","\n","  # ---------- cctbbo ---------- #  \n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for cctbbo in cctbbo_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[cctbbo].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axhline(50, linestyle='--')\n","  # plt.axhline(cctbbo_upper, linestyle='--')\n","  # plt.axhline(cctbbo_lower, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","\n","  # ---------- ema_roc ---------- #  \n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for emaroc in emaroc_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[emaroc].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","  # plt.axhline(0, linestyle='--')\n","  \n","  # ---------- bbw ---------- #  \n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for bbwp_ in bbwp_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[bbwp_].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","  # plt.axhline(bbwp_thresh, linestyle='--')\n","\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","\n"]},{"cell_type":"markdown","metadata":{"id":"cj9X6S1jJjER"},"source":["### plot nontp case"]},{"cell_type":"markdown","metadata":{"id":"tApzvz_gK9lR"},"source":["## legacy"]},{"cell_type":"markdown","metadata":{"id":"FaRGwR4NEop2"},"source":["### shifting"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"a8aYsjEgQnGF"},"outputs":[],"source":["org_res_df = res_df.copy()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":291,"status":"ok","timestamp":1626515312874,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"},"user_tz":-540},"id":"RF3RM2G2RCb1","outputId":"ba8f6a75-d4df-4f85-cd0f-190935341f7a"},"outputs":[{"name":"stdout","output_type":"stream","text":["                            open     high  ...  min_upper  max_lower\n","2021-06-30 23:55:59.999  0.27223  0.27281  ...   0.272145    0.27005\n","2021-06-30 23:56:59.999  0.27274  0.27290  ...   0.272145    0.27005\n","2021-06-30 23:57:59.999  0.27246  0.27257  ...   0.272523    0.27021\n","2021-06-30 23:58:59.999  0.27166  0.27183  ...   0.272523    0.27021\n","2021-06-30 23:59:59.999  0.27144  0.27211  ...   0.272523    0.27021\n","\n","[5 rows x 37 columns]\n","                            open     high  ...  min_upper  max_lower\n","2021-06-30 23:55:59.999  0.27223  0.27281  ...   0.272523    0.27021\n","2021-06-30 23:56:59.999  0.27274  0.27290  ...        NaN        NaN\n","2021-06-30 23:57:59.999  0.27246  0.27257  ...        NaN        NaN\n","2021-06-30 23:58:59.999  0.27166  0.27183  ...        NaN        NaN\n","2021-06-30 23:59:59.999  0.27144  0.27211  ...        NaN        NaN\n","\n","[5 rows x 37 columns]\n"]}],"source":["#         refresh res_df      #\n","res_df = org_res_df.copy()\n","print(org_res_df.tail(5))\n","\n","# break\n","\n","\n","shift_size = -4\n","# shift_size = -1\n","# shift_size = -7\n","# shift_size = +3\n","\n","res_df['min_upper'] = res_df['min_upper'].shift(shift_size)\n","res_df['max_lower'] = res_df['max_lower'].shift(shift_size)\n","res_df['minor_ST1_Trend'] = res_df['minor_ST1_Trend'].shift(shift_size)\n","res_df['minor_ST2_Trend'] = res_df['minor_ST2_Trend'].shift(shift_size)\n","res_df['minor_ST3_Trend'] = res_df['minor_ST3_Trend'].shift(shift_size)\n","res_df['middle_line'] = res_df['middle_line'].shift(shift_size)\n","\n","print(res_df.tail(5))"]},{"cell_type":"markdown","metadata":{"id":"2gxvme1PC6ha"},"source":["### load model"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":5831,"status":"ok","timestamp":1628862368878,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"},"user_tz":-540},"id":"dtYdAuSsC72_","outputId":"e8dccc53-aaa7-4bab-ed8d-753f634c08d6"},"outputs":[{"name":"stdout","output_type":"stream","text":["Downloading data from https://storage.googleapis.com/tensorflow/keras-applications/resnet/resnet50_weights_tf_dim_ordering_tf_kernels_notop.h5\n","94773248/94765736 [==============================] - 1s 0us/step\n"]}],"source":["# model_name = 'inner_tick_cnnreg_lscalemm_prefee_gpu_%s_%s_%s_%s_%s.h5'\n","\n","# model = tf.keras.models.load_model(ckpt_path + model_name)\n","\n","from tensorflow.keras.applications.resnet50 import ResNet50\n","\n","model = ResNet50(weights='imagenet', include_top=False)\n","# model.summary()\n"]},{"cell_type":"markdown","metadata":{"id":"5la6usMOFzkX"},"source":["#### gen selected vector"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"oQk3-jbKF8FB"},"outputs":[],"source":["def min_max_scale(npy_x):\n","\n","  return (npy_x - np.min(npy_x)) / (np.max(npy_x) - np.min(npy_x))\n","\n","def expand_dims(npy_x):\n","\n","  row, col = npy_x.shape\n","  npy_x2 = np.array(npy_x).reshape(-1, row, col, 1).astype(np.float32)\n","  # input_x = np.array(data_x).reshape(-1, row, col).astype(np.float32)\n","\n","  #     1c to 3c    #\n","  npy_x3 = npy_x2 * np.ones(3, dtype=np.float32)[None, None, None, :]\n","\n","  return npy_x3\n","\n","\n","def vector_dist(f1, f2):\n","  return np.linalg.norm(f1-f2)\n","\n","\n","\n","# ------------------------ params ------------------------  #\n","selected_i = 500\n","input_size = 100\n","\n","\n","\n","#   1. 선택된 인덱스를 입력받았을 때, input generating 형태만 만들어놓고,     #\n","#   1-1. input cols 필요함    #\n","\n","basic_list = ['open', 'high', 'low', 'close', 'minor_ST1_Up', 'minor_ST1_Down',\n","       'minor_ST2_Up', 'minor_ST2_Down', 'minor_ST3_Up', 'minor_ST3_Down',\n","       'middle_line', 'min_upper', 'max_lower']\n","# senkoua_list = ['senkou_a1', 'senkou_a2', 'senkou_a3', 'senkou_a4', 'senkou_a5']\n","# senkoub_list = ['senkou_b1', 'senkou_b2', 'senkou_b3', 'senkou_b4', 'senkou_b5']\n","senkoua_list = ['senkou_a1', 'senkou_a2', 'senkou_a3']\n","senkoub_list = ['senkou_b1', 'senkou_b2', 'senkou_b3']\n","# sar_list = ['sar1', 'sar2', 'sar3', 'sar4', 'sar5']\n","# sar_list = ['sar1', 'sar2', 'sar3', 'sar4', 'sar5']\n","sar_list = ['sar1', 'sar2', 'sar3']\n","sar_list = ['sar1', 'sar2', 'sar3']\n","\n","sma_list = ['sma']\n","\n","#     -------------- outer price phase --------------    #\n","macd_list = ['macd_hist1', 'macd_hist2', 'macd_hist3', 'macd_hist4', 'macd_hist5']\n","trix_list = ['trix1', 'trix2', 'trix3', 'trix4', 'trix5']\n","stoch_list = ['stoch']\n","fisher_list = ['fisher30', 'fisher60', 'fisher120']\n","cctbbo_list = ['cctbbo']\n","\n","selected_price_colname = basic_list + senkoua_list + senkoub_list + sar_list\n","selected_outprice_colname = [macd_list]\n","\n","\n","#         global scaling for outer price data       #\n","#         1. nan 처리       #\n","\n","# # print((np.isnan(df.values)))\n","# print(\"np.sum(np.isnan(df.values), axis=0) :\", np.sum(np.isnan(df.values), axis=0))\n","\n","# max_nan = np.max(np.sum(np.isnan(df.values), axis=0))\n","# # print(max_nan)\n","\n","# df = df.iloc[max_nan:-max_nan]\n","\n","# total_gdata = []\n","# for g_col in selected_outprice_colname:\n","\n","#   temp_data = min_max_scale(res_df[g_col])\n","#   total_gdata.append(temp_data)\n","\n","\n","\n","#   1-2. cols 에 따른, scaling method 구분함    #\n","onprice_input_x = min_max_scale(res_df[selected_price_colname].iloc[selected_i - input_size:selected_i].values)\n","print(onprice_input_x.shape)\n","\n","\n","#   2. plot_check 에서 본인이 원하는 shape 의 인덱스를 선택   #\n","#   3. vertorize, \n","#   3-1. input generator 를 이용해 entry signal 발생할 때마다 dist 비교 진행    #\n","re_onprice_input_x = expand_dims(onprice_input_x)\n","print(re_onprice_input_x.shape)\n","      \n","# break\n","\n","selected_vector = model.predict(re_onprice_input_x, verbose=1)\n","print(selected_vector.shape)"]},{"cell_type":"markdown","metadata":{"id":"OJqkmkpsLCYC"},"source":["### tr_tresh calc"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"gcpo4MGd9Wm4"},"outputs":[],"source":["res_wr = 0.6\n","# tr_thresh = 1\n","# tr_thresh = ((1 - res_wr) / res_wr) ** 0.5\n","tr_thresh = ((1 - res_wr) / res_wr) + 0.01\n","# tr_thresh = 2.6\n","print(\"res_wr :\", res_wr)\n","print(\"tr_thresh :\", tr_thresh)\n","\n","\n","#   단리    #\n","trade_num = 1000\n","asset = 1 # thousand USDT\n","test_loss_gap = 0.95  # fee adjusted\n","test_pr_gap = 1 + (1 - test_loss_gap) * tr_thresh\n","\n","test_loss_cnt = trade_num * (1 - res_wr)\n","test_pr_cnt = trade_num * res_wr\n","\n","test_trade_list = [test_pr_gap] * int(test_pr_cnt) + [test_loss_gap] * int(test_loss_cnt)\n","random.shuffle(test_trade_list)\n","# print(\"len(test_trade_list) :\", len(test_trade_list))\n","print(test_trade_list[:10])\n","print()\n","\n","# print(\"%.5f\" % np.cumprod(test_trade_list)[-1])\n","for tr_thresh_ in np.arange(1, 3, 0.2):\n","  if (1 + (1 - test_loss_gap) * tr_thresh_) ** test_pr_cnt * test_loss_gap ** test_loss_cnt > 1:\n","    break\n","print(\"복리를 위한 tr_thresh_ :\", tr_thresh_)\n","# print(\"tr_thresh :\", tr_thresh)\n","print(\"np.cumprod(test_trade_list)[-1] :\", np.cumprod(test_trade_list)[-1])\n","print(\"total_pr : \", np.cumprod(test_trade_list)[-1])\n","print()\n","#   복리 tr_thresh  #\n","#   1. trade_num 에 영향 받지 않음\n","#   2. loss_gap 에 비례함\n","\n","for tr_thresh_ in np.arange(1, 3, 0.01):\n","  if ((1 - test_loss_gap) * tr_thresh_) * test_pr_cnt + (test_loss_gap - 1) * test_loss_cnt > 0:\n","    break\n","np_test_trade = np.array(test_trade_list) - 1\n","print(np_test_trade[:10])\n","# print(\"%.3f\" % )\n","print(\"단리를 위한 tr_thresh_ :\", tr_thresh_)\n","# print(\"tr_thresh :\", tr_thresh)\n","print(\"np.cumsum(np_test_trade)[-1] :\", np.cumsum(np_test_trade)[-1])\n","print(\"total_pr : \", 1 + np.cumsum(np_test_trade)[-1])\n"]}],"metadata":{"accelerator":"GPU","colab":{"collapsed_sections":["Ic1mfmwWCIBu","VdukVo5-Suzj","Bw5JibDKSuzj","Pe0QpnORSuzk","E0n53hflJbnp","MlFkpO1MSuzl","t1E_eAyPSuzm","nUs4fjVHSuzl","WVAKq3i8Suzm","L7l5CTJfSuzn","x_XGJqBi8Jex","epgS5Dksu-HX","x2yj2SwAXDLp","qsyPhNR8yP1c","xpyP5t8Ht_pE","EQ63Jwpvr7qA","mScdfR9hmjVu","xivLUsSGC4VF","aT8AXh50ZLVL","_blyFhQJUd5X","8b4SbvPrAPR1","X0FsT-8FZRti","13a-U32Uy50I","TBE0l6dHRYrE","Qys2Bw5Ou3u9","tApzvz_gK9lR","2gxvme1PC6ha","5la6usMOFzkX","OJqkmkpsLCYC"],"name":"stem3_9_vec_backi2(0419).ipynb","toc_visible":true,"provenance":[],"authorship_tag":"ABX9TyOHWWaodOnEO/tFEo9GLD0C"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}