{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"prev_close_survey_multi_only_long_expanded_backtest.ipynb의 사본","provenance":[],"collapsed_sections":["4kzJjVTbF3S_"],"toc_visible":true,"machine_shape":"hm","mount_file_id":"1WZBOhbCk6FMoF-YggUDMyzosdORhu3za","authorship_tag":"ABX9TyN+9pebO7f5Lky6hO/23+XA"},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"code","metadata":{"id":"YzB9a98qMAdM","executionInfo":{"status":"ok","timestamp":1620522532789,"user_tz":-540,"elapsed":1599,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"}}},"source":["import os, sys\n","\n","current_path = '/content/drive/My Drive/Colab Notebooks/Project_Stock/'\n","\n","os.chdir(current_path)"],"execution_count":1,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"NvqYPbmocynh","executionInfo":{"status":"ok","timestamp":1618094932072,"user_tz":-540,"elapsed":3095,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"}},"outputId":"675002b1-d861-44d0-85a4-9f344e02f538"},"source":["# # pickle.format_version\n","# # print(pd.show_versions())\n","# !pip install pandas==0.25.3"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Requirement already satisfied: pandas==0.25.3 in /usr/local/lib/python3.7/dist-packages (0.25.3)\n","Requirement already satisfied: pytz>=2017.2 in /usr/local/lib/python3.7/dist-packages (from pandas==0.25.3) (2018.9)\n","Requirement already satisfied: python-dateutil>=2.6.1 in /usr/local/lib/python3.7/dist-packages (from pandas==0.25.3) (2.8.1)\n","Requirement already satisfied: numpy>=1.13.3 in /usr/local/lib/python3.7/dist-packages (from pandas==0.25.3) (1.19.5)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.7/dist-packages (from python-dateutil>=2.6.1->pandas==0.25.3) (1.15.0)\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"NNoQXskPN-Ge"},"source":["### **ARIMA**"]},{"cell_type":"code","metadata":{"id":"NvdpArctN_6l","executionInfo":{"status":"error","timestamp":1620522544438,"user_tz":-540,"elapsed":13242,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"}},"outputId":"e4067177-7c3e-4420-8721-592fedd84539","colab":{"base_uri":"https://localhost:8080/","height":0}},"source":["from statsmodels.tsa.arima_model import ARIMA\n","from datetime import datetime\n","\n","\n","def arima_test(close, use_rows=None):\n","\n","  size = use_rows\n","  train, test = close[0:size].values, close[size:len(close)]\n","  test_shift = test.shift(1).values\n","  test = test.values\n","  # break\n","\n","  history = list(train)\n","  predictions = list()\n","  err_ranges = list()\n","  for t in range(len(test)):\n","    \n","      if use_rows is not None:\n","        history = history[-use_rows:]\n","        \n","      model = ARIMA(history, order=(0, 2, 1))\n","      model_fit = model.fit(trend='c', disp=0)\n","      output = model_fit.forecast()\n","      # print(output)\n","      # break\n","      yhat = output[0]\n","      predictions.append(yhat)\n","      err_ranges.append(output[1])\n","      obs = test[t]\n","      # print('obs :', obs)\n","      history.append(obs)\n","      # break\n","      print('\\r %.2f%%' % (t / len(test) * 100), end='')\n","\n","  print(len(test), len(predictions))\n","\n","  return predictions, err_ranges\n","\n","\n","# print(high)\n","\n","\n","def get_back_result(ohlcv, predictions, err_ranges, tp=0.04, sl=None, leverage=1, show_detail=False, show_plot=False, return_pr=False, cumsum=False, \n","                    close_ver=False, reverse_short=False):\n","\n","  \n","  # prev_close = ohlcv['close'].shift(1).values[-len(predictions):]\n","  high, low, test = np.split(ohlcv.values[-len(predictions):, [1, 2, 3]], 3, axis=1)\n","\n","  if close_ver:\n","    predictions = ohlcv['close'].shift(1).values[-len(test):]\n","\n","  fee = 0.0006\n","  long_profits = []\n","  short_profits = []\n","  liquidations = []\n","  win_cnt = 0\n","  for i in range(len(test)):\n","\n","    # long_ep = predictions[i]\n","    # long_ep = prev_close[i]\n","    long_ep = (predictions[i] - err_ranges[i]) * (1 / (tp + 1))\n","    if sl is not None:\n","      long_sl = long_ep * (1 / (sl + 1))\n","\n","    # assert long_ep < long_exit, 'long_exit < long_ep !, %s, %s' % (long_exit, long_ep)\n","    \n","    short_ep = (predictions[i] + err_ranges[i]) * (1 + tp)\n","    # short_ep = (predictions[i] + err_ranges[i]) * (1 / (1 - tp))\n","    if sl is not None:\n","      short_sl = short_ep * (1 / (1 - sl))\n","\n","    # print((low[i]))\n","\n","    #    long 우선   # <-- long & short 둘다 체결된 상황에서는 long 체결을 우선으로 한다.\n","    #    조건식 : 예상 종가가 이전 종가보다 상승하면, (bias 가 up 방향) 매수한다\n","\n","    # if prev_close[i] < predictions[i]:\n","\n","    if low[i] < long_ep:\n","      \n","      liquidation = low[i] / long_ep - fee\n","      l_liquidation = 1 + (liquidation - 1) * leverage\n","      liquidations.append(l_liquidation)\n","\n","      if max(l_liquidation, 0) == 0:\n","        l_profit = 0\n","        # print('low[i], long_ep, l_liquidation :', low[i], long_ep, l_liquidation)\n","      else:\n","\n","        if sl is not None:\n","          if low[i] < long_sl:\n","            profit = long_sl / long_ep - fee\n","          else:\n","            profit = test[i] / long_ep - fee\n","\n","        else:\n","          profit = test[i] / long_ep - fee\n","\n","        l_profit = 1 + (profit - 1) * leverage\n","        l_profit = max(l_profit, 0)\n","        \n","        if profit >= 1:\n","          win_cnt += 1\n","\n","      long_profits.append(l_profit)\n","      short_profits.append(1.0)\n","\n","      if show_detail:\n","        print(\"test[i], predictions[i], long_ep :\", test[i], predictions[i], long_ep)\n","\n","      # if high[i] > short_ep > low[i]: # 지정 대기가 아니라, 해당 price 가 지나면, long 한다.\n","\n","      #   if not reverse_short:\n","      #     liquidation = short_ep / high[i]  - fee\n","      #   else:\n","      #     liquidation = low[i] / short_ep  - fee\n","      #   l_liquidation = 1 + (liquidation - 1) * leverage\n","\n","      #   if max(l_liquidation, 0) == 0:\n","      #     l_profit = 0\n","      #   else:\n","\n","      #     if sl is not None:\n","      #       if high[i] > short_sl:\n","\n","      #         if not reverse_short:\n","      #           profit = short_ep / short_sl - fee\n","      #         else:\n","      #           profit = short_sl / short_ep - fee\n","\n","      #       else:\n","      #         if not reverse_short:\n","      #           profit = short_ep / test[i] - fee\n","      #         else:\n","      #           profit = test[i] / short_ep - fee\n","\n","      #     else:\n","\n","      #       if not reverse_short:\n","      #         profit = short_ep / test[i] - fee\n","      #       else:\n","      #         profit = test[i] / short_ep - fee\n","\n","      #     l_profit = 1 + (profit - 1) * leverage\n","      #     l_profit = max(l_profit, 0)\n","\n","      #     if profit >= 1:\n","      #       win_cnt += 1\n","\n","      #   short_profits.append(l_profit)\n","      #   long_profits.append(1.0)\n","\n","      #   if show_detail:\n","      #     print(test[i], predictions[i], short_ep)\n","      \n","    else:\n","      long_profits.append(1.0)\n","      short_profits.append(1.0)\n","      liquidations.append(1.0)\n","\n","\n","  long_win_ratio = sum(np.array(long_profits) > 1.0) / sum(np.array(long_profits) != 1.0)\n","  short_win_ratio = sum(np.array(short_profits) > 1.0) / sum(np.array(short_profits) != 1.0)\n","  long_frequency = sum(np.array(long_profits) != 1.0) / len(test)\n","  short_frequency = sum(np.array(short_profits) != 1.0) / len(test)\n","  if not cumsum:\n","    long_accum_profit = np.array(long_profits).cumprod()\n","    short_accum_profit = np.array(short_profits).cumprod()\n","  else:\n","    long_accum_profit = (np.array(long_profits) - 1.0).cumsum()\n","    short_accum_profit = (np.array(short_profits) - 1.0).cumsum()\n","\n","  # print(win_ratio)\n","\n","  if show_plot:\n","\n","    plt.figure(figsize=(10, 5))\n","    plt.suptitle('tp=%.4f, lvrg=%d' % (tp, leverage))\n","\n","    plt.subplot(151)\n","    plt.plot(liquidations)\n","    plt.title('liquidations')\n","\n","    plt.subplot(152)\n","    plt.plot(long_profits)\n","    plt.title('Win Ratio : %.2f %%\\nrequency : %.2f %%' % (long_win_ratio * 100, long_frequency * 100), color='black')\n","    # plt.show()\n","\n","    # print()\n","    plt.subplot(153)\n","    plt.plot(long_accum_profit)\n","    plt.title('Accum_profit : %.2f' % long_accum_profit[-1], color='black')\n","\n","    plt.subplot(154)\n","    plt.plot(short_profits)\n","    plt.title('Win Ratio : %.2f %%\\nrequency : %.2f %%' % (short_win_ratio * 100, short_frequency * 100), color='black')\n","    # plt.show()\n","\n","    # print()\n","    plt.subplot(155)\n","    plt.plot(short_accum_profit)\n","    plt.title('Accum_profit : %.2f' % short_accum_profit[-1], color='black')\n","    plt.show()\n","\n","  return [long_win_ratio, short_win_ratio], [long_frequency, short_frequency], [long_accum_profit[-1], short_accum_profit[-1]], [long_profits, short_profits]\n","\n","\n","# get_back_result(tp=0.04, leverage=1, show_plot=True)\n"],"execution_count":2,"outputs":[{"output_type":"error","ename":"KeyboardInterrupt","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-2-9cf252756b74>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0;32mfrom\u001b[0m \u001b[0mstatsmodels\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtsa\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0marima_model\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mARIMA\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mdatetime\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mdatetime\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0marima_test\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mclose\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0muse_rows\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/importlib/_bootstrap.py\u001b[0m in \u001b[0;36m_find_and_load\u001b[0;34m(name, import_)\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/importlib/_bootstrap.py\u001b[0m in \u001b[0;36m_find_and_load_unlocked\u001b[0;34m(name, import_)\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/importlib/_bootstrap.py\u001b[0m in \u001b[0;36m_find_spec\u001b[0;34m(name, path, target)\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/importlib/_bootstrap_external.py\u001b[0m in \u001b[0;36mfind_spec\u001b[0;34m(cls, fullname, path, target)\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/importlib/_bootstrap_external.py\u001b[0m in \u001b[0;36m_get_spec\u001b[0;34m(cls, fullname, path, target)\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/importlib/_bootstrap_external.py\u001b[0m in \u001b[0;36mfind_spec\u001b[0;34m(self, fullname, target)\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/importlib/_bootstrap_external.py\u001b[0m in \u001b[0;36m_fill_cache\u001b[0;34m(self)\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}]},{"cell_type":"code","metadata":{"id":"aDkU3tMiM2lO","executionInfo":{"status":"aborted","timestamp":1620522544437,"user_tz":-540,"elapsed":13227,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"}}},"source":["import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","\n","date = \"2021-05-07\"\n","date = \"2021-04-08\"\n","interval = '30m'\n","date_path = './candlestick_concated/%s/%s/' % (interval, date)\n","file_list = os.listdir(date_path)\n","\n","print((file_list))"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"sU4Vt6404iH3"},"source":["### **Load & Individually Plotting & Add Backtest_Result**"]},{"cell_type":"code","metadata":{"id":"vUCKueyUNFE0","colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"status":"ok","timestamp":1620435625319,"user_tz":-540,"elapsed":617007,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"}},"outputId":"8ceb1aae-4d3e-4296-ccef-64077795a387"},"source":["import pickle\n","import time\n","import datetime\n","\n","# with open('./arima_result/arima_opt_profit_ls_only_long_result_%s.pickle' % interval, 'rb') as f:\n","#   load_dict = pickle.load(f)\n","\n","\n","start_stamp = 0\n","# start_stamp = datetime.timestamp(pd.to_datetime('2021-02-12'))\n","print(\"start_stamp :\", start_stamp)\n","\n","save_dict = {}\n","tp_list = np.arange(0, 0.05, 0.001)\n","leverage_list = np.arange(1, 6, 1)\n","safety_threshold = 0.\n","long_index = 0\n","\n","# tp_list = [selected_tp]\n","\n","for file in file_list:\n","\n","  # file = '2021-02-07 ETH.xlsx'\n","  print(file)\n","  if not file.endswith('xlsx'):\n","    continue\n","\n","  # if '04-08' not in file:\n","  #   continue\n","\n","  # if 'eth'.upper() not in file:\n","  #   continue\n","  \n","\n","  key = file\n","\n","  ohlcv = pd.read_excel(date_path + file, index_col=0)\n","  print('len(ohlcv) :', len(ohlcv))\n","\n","# for key in load_dict.keys():\n","\n","  # print(key)\n","\n","  # if len(list(load_dict[key].keys())) > 3:\n","  #   print(list(load_dict[key].keys()))\n","  #   continue\n","\n","  #       tp analysis     #\n","  # ohlcv = load_dict[key]['ohlcv']\n","  # predictions = load_dict[key]['predictions']\n","  # err_ranges = load_dict[key]['err_ranges']\n","\n","  predictions = ohlcv['close'].shift(1).values # [-5824:]\n","  err_ranges = np.zeros_like(predictions) # [-5824:]\n","  \n","  print('len(predictions) :', len(predictions))\n","\n","\n","  wr_list, fr_list, ap_list = list(), list(), list()\n","  max_ap_list = list()  \n","\n","  progress_cnt = 0\n","  # selected_ap_list = list()\n","  start_time = time.time()\n","  for tp in tp_list:\n","\n","    progress_cnt += 1\n","\n","    if progress_cnt != 1:\n","\n","      if progress_cnt == 2:\n","        a_loop_time = time.time() - start_time\n","\n","      r_time = a_loop_time * (len(tp_list) - progress_cnt)\n","      # print(r_time)\n","      print('\\r remaining time : %s' % (datetime.timedelta(seconds=r_time)), end='')\n","    # print('\\r %.2f%%' % (progress_cnt / len(tp_list) * 100), end='')\n","\n","    #     leverage analysis     #\n","    temp_ap_list = list()\n","    for leverage in leverage_list:\n","\n","      # try:\n","        result = get_back_result(ohlcv, predictions, err_ranges, tp=tp, leverage=leverage, reverse_short=False, show_detail=False)\n","\n","        # print(np.min(result[-1]))\n","        temp_ap_list.append(result[2])\n","        # print('tp, result[2] :', tp, result[2])\n","\n","        if round(leverage) == 1:\n","\n","          wr_list.append(result[0])\n","          fr_list.append(result[1])\n","          ap_list.append(result[2])\n","\n","          break # <-- 어차피 acc 와 max acc 를 결정하는 tp 는 큰 차이가 없다고 생각해, \n","          #  소모 시간을 줄이기 위해 break\n","\n","        # if leverage > 1:\n","        #   break\n","\n","      # except Exception as e:\n","      #   print(e)\n","      #   break\n","\n","    # print('np.max(temp_ap_list, axis=0) :', np.max(temp_ap_list, axis=0))\n","    max_ap_list.append(np.max(temp_ap_list, axis=0))\n","\n","  # print(wr_list)\n","  # break\n","\n","  #     stack dict    #\n","  temp_dict = {}\n","\n","  # temp_dict = load_dict[key]\n","  temp_dict['tp_list'] = tp_list[:len(ap_list)]\n","  wr_list = np.array(wr_list).reshape(-1, 2)\n","  fr_list = np.array(fr_list).reshape(-1, 2)\n","  ap_list = np.array(ap_list).reshape(-1, 2)\n","  max_ap_list = np.array(max_ap_list).reshape(-1, 2)\n","\n","  temp_dict['wr_list'] = wr_list\n","  temp_dict['fr_list'] = fr_list\n","  temp_dict['ap_list'] = ap_list\n","  temp_dict['max_ap_list'] = max_ap_list\n","\n","\n","\n","  #     individual plot   #\n","  plt.figure(figsize=(15, 5))\n","\n","  plt.subplot(171)\n","  plt.plot(tp_list[:len(ap_list)], wr_list)\n","  plt.title('win ratio')\n","\n","  plt.subplot(172)\n","  plt.plot(tp_list[:len(ap_list)], fr_list)\n","  plt.title('frequency')\n","\n","  plt.subplot(173)\n","  plt.plot(tp_list[:len(ap_list)], ap_list)\n","  argmax_l, argmax_s = np.argmax(ap_list, axis=0)\n","  plt.axvline(tp_list[:len(ap_list)][argmax_l], linestyle='--')\n","  plt.axvline(tp_list[:len(ap_list)][argmax_s], linestyle='--')\n","  plt.title('acc profit, max at l:%.4f, s:%.4f' % (tp_list[:len(ap_list)][argmax_l], tp_list[:len(ap_list)][argmax_s]))  \n","\n","  plt.subplot(174)\n","  plt.plot(tp_list[:len(max_ap_list)], max_ap_list[:, [long_index]])\n","  argmax_l, argmax_s = np.argmax(max_ap_list, axis=0)\n","  plt.axvline(tp_list[:len(max_ap_list)][argmax_l], linestyle='--')\n","  plt.axvline(tp_list[:len(max_ap_list)][argmax_s], linestyle='--')\n","  plt.title('max acc profit by leverage\\n max at l:%.4f, s:%.4f' % (tp_list[:len(max_ap_list)][argmax_l], tp_list[:len(max_ap_list)][argmax_s])) \n","\n","  # plt.show()\n","  l_selected_tp = tp_list[:len(max_ap_list)][argmax_l]\n","  s_selected_tp = tp_list[:len(max_ap_list)][argmax_s]\n","  #     leverage analysis     #\n","  l_selected_ap_list = list()\n","  s_selected_ap_list = list()\n","  for leverage in leverage_list:\n","\n","    try:\n","      l_result = get_back_result(ohlcv, predictions, err_ranges, tp=l_selected_tp, leverage=leverage, reverse_short=False, show_plot=False)\n","      s_result = get_back_result(ohlcv, predictions, err_ranges, tp=s_selected_tp, leverage=leverage, reverse_short=False)\n","      \n","      if min(s_result[-1][long_index]) < safety_threshold:\n","        continue\n","\n","      l_selected_ap_list.append(l_result[2])\n","      s_selected_ap_list.append(s_result[2])\n","\n","    except Exception as e:\n","      print(e)\n","      break\n","  \n","  #     stack dict    #\n","  temp_dict['leverage_list'] = leverage_list[:len(s_selected_ap_list)]\n","  l_selected_ap_list = np.array(l_selected_ap_list).reshape(-1, 2)[:, :1]\n","  s_selected_ap_list = np.array(s_selected_ap_list).reshape(-1, 2)[:, 1:]\n","  temp_dict['leverage_ap_list'] = np.hstack((l_selected_ap_list, s_selected_ap_list))\n","  \n","  plt.subplot(175)\n","  plt.plot(leverage_list[:len(l_selected_ap_list)], l_selected_ap_list)\n","  plt.plot(leverage_list[:len(s_selected_ap_list)], s_selected_ap_list)\n","  l_argmax = np.argmax(l_selected_ap_list)\n","  s_argmax = np.argmax(s_selected_ap_list)\n","  plt.title('acc profit by leverage\\n max at l:tp=%.3f lvrg=%.0f\\n s:tp=%.3f lvrg=%.0f' \\\n","            % (l_selected_tp, leverage_list[:len(l_selected_ap_list)][l_argmax], s_selected_tp, leverage_list[:len(s_selected_ap_list)][s_argmax]))  \n","  plt.axvline(leverage_list[:len(l_selected_ap_list)][l_argmax], linestyle='--')\n","  plt.axvline(leverage_list[:len(s_selected_ap_list)][s_argmax], linestyle='--')\n","  plt.xlim(0, 13)\n","\n","  best_leverage = leverage_list[:len(l_selected_ap_list)][l_argmax]\n","  \n","  #             std survey            #\n","  #             편의를 위해 long position 분석만을 진행한다.           #\n","  argmax = np.argmax(temp_dict['ap_list'][:, [long_index]])\n","  peak_tp = temp_dict['tp_list'][argmax]\n","\n","  result = get_back_result(ohlcv, predictions, err_ranges, tp=peak_tp, leverage=best_leverage)\n","  profit_list = result[3][long_index]\n","  pr_list_fr = list(map(lambda x : 0 if x == 1.0 else 1, profit_list))\n","  profited_index = np.argwhere(np.array(pr_list_fr) == 1)\n","  # print(profited_index)\n","  term_list = []\n","  for i in range(len(profited_index) - 1):\n","    term_list.append(profited_index[i + 1] - profited_index[i])\n","\n","  temp_dict['pr_list'] = profit_list\n","  temp_dict['pr_fr_std'] = np.std(term_list)\n","\n","  argmax = np.argmax(temp_dict['max_ap_list'][:, [long_index]])\n","  max_peak_tp = temp_dict['tp_list'][argmax]\n","\n","  result = get_back_result(ohlcv, predictions, err_ranges, tp=max_peak_tp, leverage=best_leverage)\n","  profit_list = result[3][long_index]\n","  pr_list_fr = list(map(lambda x : 0 if x == 1.0 else 1, profit_list))\n","  profited_index = np.argwhere(np.array(pr_list_fr) == 1)\n","  # print(profited_index)\n","  term_list = []\n","  for i in range(len(profited_index) - 1):\n","    term_list.append(profited_index[i + 1] - profited_index[i])\n","\n","  temp_dict['max_pr_list'] = profit_list\n","  temp_dict['max_pr_fr_std'] = np.std(term_list)\n","\n","  plt.subplot(176)\n","  plt.plot(profit_list)\n","  \n","  plt.subplot(177)\n","  plt.title(np.std(term_list))\n","  plt.plot(list(map(lambda x : 0 if x == 1.0 else 1, profit_list)))\n","  \n","  plt.show()\n","\n","  save_dict[file] = temp_dict\n","\n","\n","  #         save dict 2       #\n","  with open('./arima_result/prev_close_%s_%s.pickle' % (interval, date), 'wb') as f:\n","    pickle.dump(save_dict, f)\n","  # break\n","  "],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"JbDmxQ7y2Our"},"source":["### **Keep Connection**"]},{"cell_type":"code","metadata":{"id":"3brDVbCf2RFd"},"source":["while 1: 1 "],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"lBTgw0XbdWEg"},"source":["### std survey"]},{"cell_type":"code","metadata":{"id":"Y1pCQ6oRV1cv","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1620438000997,"user_tz":-540,"elapsed":1976,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"}},"outputId":"f61a04f0-492c-44af-8ed0-c9155abd040a"},"source":["import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import pickle\n","# print(type(result_dict))\n","\n","with open('./arima_result/prev_close_%s_%s.pickle' % (interval, date), 'rb') as f:\n","  profit_result_dict = pickle.load(f)\n","\n","keys = profit_result_dict.keys()\n","print(keys)\n","# keys = ['2021-02-07 ETH.xlsx']\n","# break\n","\n","\n","  \n","pd.set_option('display.width', 1000)\n","pd.set_option('display.max_rows', 2500)\n","pd.set_option('display.max_columns', 2500)\n","\n","pairs = list(profit_result_dict.keys())\n","result_df = pd.DataFrame(index=pairs)\n","profit = []\n","max_lv_profit = []\n","pr_fr_std = []\n","max_pr_fr_std = []\n","\n","long_index = 0\n","\n","for key in keys:  \n","  # print(np.max(profit_result_dict[key]['ap_list']))\n","  profit.append(np.max(profit_result_dict[key]['ap_list'][:, [long_index]]))\n","  # print(np.max(profit_result_dict[key]['leverage_ap_list']))\n","  max_lv_profit.append(np.max(profit_result_dict[key]['leverage_ap_list'][:, [long_index]]))\n","\n","  pr_fr_std.append(profit_result_dict[key][\"pr_fr_std\"])\n","\n","  max_pr_fr_std.append(profit_result_dict[key][\"max_pr_fr_std\"])\n","\n","\n","# result_df['index'] = pairs\n","result_df['profit']= profit\n","result_df['max_lv_profit']= max_lv_profit\n","result_df['pr_fr_std'] = pr_fr_std\n","result_df['max_pr_fr_std'] = max_pr_fr_std\n","# print(result_df)\n","\n","#     sort by values    #\n","print(result_df.sort_values(by='profit', ascending=False))\n","print(result_df.sort_values(by=['max_lv_profit'], ascending=False))\n","print(result_df.sort_values(by=['pr_fr_std'], ascending=True))\n","print(result_df.sort_values(by=['max_pr_fr_std'], ascending=True))\n","\n","#     extract candidates    #\n","candis = result_df.sort_values(by=['max_lv_profit'], ascending=False).index\n","print(candis)\n","\n","\n","\n","#         save dict 2       #\n","# with open('./arima_result/prev_close_candi_profit_ls_only_long_result_%s.pickle' % interval, 'wb') as f:\n","#   pickle.dump(profit_result_dict, f)\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["dict_keys(['2021-04-08 BTCUSDT.xlsx', '2021-04-08 ETHUSDT.xlsx', '2021-04-08 BCHUSDT.xlsx', '2021-04-08 XRPUSDT.xlsx', '2021-04-08 EOSUSDT.xlsx', '2021-04-08 LTCUSDT.xlsx', '2021-04-08 ETCUSDT.xlsx', '2021-04-08 LINKUSDT.xlsx', '2021-04-08 XLMUSDT.xlsx', '2021-04-08 ADAUSDT.xlsx', '2021-04-08 XMRUSDT.xlsx', '2021-04-08 SXPUSDT.xlsx', '2021-04-08 KAVAUSDT.xlsx', '2021-04-08 BANDUSDT.xlsx', '2021-04-08 DASHUSDT.xlsx', '2021-04-08 ZECUSDT.xlsx', '2021-04-08 XTZUSDT.xlsx', '2021-04-08 BNBUSDT.xlsx', '2021-04-08 ATOMUSDT.xlsx', '2021-04-08 ONTUSDT.xlsx', '2021-04-08 IOTAUSDT.xlsx', '2021-04-08 BATUSDT.xlsx', '2021-04-08 NEOUSDT.xlsx', '2021-04-08 QTUMUSDT.xlsx', '2021-04-08 WAVESUSDT.xlsx', '2021-04-08 MKRUSDT.xlsx', '2021-04-08 SNXUSDT.xlsx', '2021-04-08 DOTUSDT.xlsx', '2021-04-08 THETAUSDT.xlsx', '2021-04-08 ALGOUSDT.xlsx', '2021-04-08 KNCUSDT.xlsx', '2021-04-08 ZRXUSDT.xlsx', '2021-04-08 COMPUSDT.xlsx', '2021-04-08 OMGUSDT.xlsx'])\n","                                         profit         max_lv_profit   pr_fr_std  max_pr_fr_std\n","2021-04-08 DOTUSDT.xlsx    [11.850283533929263]   [3459.262548260214]   11.383924      11.383924\n","2021-04-08 SXPUSDT.xlsx      [8.36774769737038]   [238.1856685467309]   22.060650      22.060650\n","2021-04-08 BANDUSDT.xlsx    [5.503093548133175]  [139.88644991787461]   29.407960      29.407960\n","2021-04-08 XTZUSDT.xlsx     [5.035267877394526]  [161.86084115417938]   72.423734      72.423734\n","2021-04-08 LINKUSDT.xlsx   [4.6376101369933265]   [41.79077366718076]   31.914706      31.914706\n","2021-04-08 ADAUSDT.xlsx     [4.622823278571806]  [108.05375630349427]   34.340115      34.340115\n","2021-04-08 XLMUSDT.xlsx     [4.473822989924361]  [19.442701584759146]   28.434475      28.434475\n","2021-04-08 IOTAUSDT.xlsx    [3.978522183373036]  [227.95031854722936]  129.992376     129.992376\n","2021-04-08 ALGOUSDT.xlsx   [3.7964366930160276]  [18.551837485688814]   24.465097      24.465097\n","2021-04-08 THETAUSDT.xlsx  [3.7462790373784665]   [16.09483490773481]   14.711876      14.711876\n","2021-04-08 ATOMUSDT.xlsx   [3.5500814942665064]  [110.29638461565274]   94.963642      94.963642\n","2021-04-08 LTCUSDT.xlsx    [3.3540183217134447]  [56.189936451806716]   41.400864      41.400864\n","2021-04-08 WAVESUSDT.xlsx  [3.2565284021439833]   [99.13288046843742]  116.174716     116.174716\n","2021-04-08 ETHUSDT.xlsx     [3.102131909903232]   [20.51073165251033]   55.803022      55.803022\n","2021-04-08 ZECUSDT.xlsx    [2.8627644011254283]   [11.16051493490311]   35.935581      35.935581\n","2021-04-08 XRPUSDT.xlsx    [2.8570184529021905]   [8.940216203165624]  213.241583     213.241583\n","2021-04-08 SNXUSDT.xlsx    [2.7415806176924655]  [22.227013682310506]   40.668573      40.668573\n","2021-04-08 BNBUSDT.xlsx    [2.7100175558148933]  [30.814014987306635]  129.626742     129.626742\n","2021-04-08 ZRXUSDT.xlsx    [2.6442283318955115]   [7.488525680001747]   50.188373      50.188373\n","2021-04-08 DASHUSDT.xlsx   [2.6191363326115082]   [59.39126318577459]  337.601752     337.601752\n","2021-04-08 ONTUSDT.xlsx    [2.4570469006672435]   [9.137814703893268]  262.195170     262.195170\n","2021-04-08 BATUSDT.xlsx    [2.3446881256073864]   [18.37629221839164]  145.264035     145.264035\n","2021-04-08 NEOUSDT.xlsx    [2.2329895137901596]  [14.684047519330276]  208.301607     208.301607\n","2021-04-08 BTCUSDT.xlsx     [2.156634692891473]  [28.216713520275064]  219.277496     219.277496\n","2021-04-08 XMRUSDT.xlsx     [2.016070967467639]  [12.754727785410264]  135.944623     135.944623\n","2021-04-08 COMPUSDT.xlsx   [1.9678219185539954]  [10.821211186676159]  109.368178     109.368178\n","2021-04-08 EOSUSDT.xlsx    [1.8748933850689973]    [4.42484912552277]  230.257558     230.257558\n","2021-04-08 OMGUSDT.xlsx     [1.873781545496101]   [3.209043940543563]   93.755845      93.755845\n","2021-04-08 KNCUSDT.xlsx    [1.8503474332036347]  [10.146362698372123]  287.639687     287.639687\n","2021-04-08 QTUMUSDT.xlsx   [1.8307341180522074]   [6.391575599708198]  263.524017     263.524017\n","2021-04-08 MKRUSDT.xlsx    [1.7409880985506594]   [6.368084514914367]  110.536597     110.536597\n","2021-04-08 BCHUSDT.xlsx    [1.6949847112804326]  [3.1313517601262713]  112.498632     112.498632\n","2021-04-08 ETCUSDT.xlsx    [1.5600239333168147]  [2.5737506004800426]  458.140284     458.140284\n","2021-04-08 KAVAUSDT.xlsx   [1.5461023913784524]   [1.836145905736346]   62.769231      62.769231\n","                                         profit         max_lv_profit   pr_fr_std  max_pr_fr_std\n","2021-04-08 DOTUSDT.xlsx    [11.850283533929263]   [3459.262548260214]   11.383924      11.383924\n","2021-04-08 SXPUSDT.xlsx      [8.36774769737038]   [238.1856685467309]   22.060650      22.060650\n","2021-04-08 IOTAUSDT.xlsx    [3.978522183373036]  [227.95031854722936]  129.992376     129.992376\n","2021-04-08 XTZUSDT.xlsx     [5.035267877394526]  [161.86084115417938]   72.423734      72.423734\n","2021-04-08 BANDUSDT.xlsx    [5.503093548133175]  [139.88644991787461]   29.407960      29.407960\n","2021-04-08 ATOMUSDT.xlsx   [3.5500814942665064]  [110.29638461565274]   94.963642      94.963642\n","2021-04-08 ADAUSDT.xlsx     [4.622823278571806]  [108.05375630349427]   34.340115      34.340115\n","2021-04-08 WAVESUSDT.xlsx  [3.2565284021439833]   [99.13288046843742]  116.174716     116.174716\n","2021-04-08 DASHUSDT.xlsx   [2.6191363326115082]   [59.39126318577459]  337.601752     337.601752\n","2021-04-08 LTCUSDT.xlsx    [3.3540183217134447]  [56.189936451806716]   41.400864      41.400864\n","2021-04-08 LINKUSDT.xlsx   [4.6376101369933265]   [41.79077366718076]   31.914706      31.914706\n","2021-04-08 BNBUSDT.xlsx    [2.7100175558148933]  [30.814014987306635]  129.626742     129.626742\n","2021-04-08 BTCUSDT.xlsx     [2.156634692891473]  [28.216713520275064]  219.277496     219.277496\n","2021-04-08 SNXUSDT.xlsx    [2.7415806176924655]  [22.227013682310506]   40.668573      40.668573\n","2021-04-08 ETHUSDT.xlsx     [3.102131909903232]   [20.51073165251033]   55.803022      55.803022\n","2021-04-08 XLMUSDT.xlsx     [4.473822989924361]  [19.442701584759146]   28.434475      28.434475\n","2021-04-08 ALGOUSDT.xlsx   [3.7964366930160276]  [18.551837485688814]   24.465097      24.465097\n","2021-04-08 BATUSDT.xlsx    [2.3446881256073864]   [18.37629221839164]  145.264035     145.264035\n","2021-04-08 THETAUSDT.xlsx  [3.7462790373784665]   [16.09483490773481]   14.711876      14.711876\n","2021-04-08 NEOUSDT.xlsx    [2.2329895137901596]  [14.684047519330276]  208.301607     208.301607\n","2021-04-08 XMRUSDT.xlsx     [2.016070967467639]  [12.754727785410264]  135.944623     135.944623\n","2021-04-08 ZECUSDT.xlsx    [2.8627644011254283]   [11.16051493490311]   35.935581      35.935581\n","2021-04-08 COMPUSDT.xlsx   [1.9678219185539954]  [10.821211186676159]  109.368178     109.368178\n","2021-04-08 KNCUSDT.xlsx    [1.8503474332036347]  [10.146362698372123]  287.639687     287.639687\n","2021-04-08 ONTUSDT.xlsx    [2.4570469006672435]   [9.137814703893268]  262.195170     262.195170\n","2021-04-08 XRPUSDT.xlsx    [2.8570184529021905]   [8.940216203165624]  213.241583     213.241583\n","2021-04-08 ZRXUSDT.xlsx    [2.6442283318955115]   [7.488525680001747]   50.188373      50.188373\n","2021-04-08 QTUMUSDT.xlsx   [1.8307341180522074]   [6.391575599708198]  263.524017     263.524017\n","2021-04-08 MKRUSDT.xlsx    [1.7409880985506594]   [6.368084514914367]  110.536597     110.536597\n","2021-04-08 EOSUSDT.xlsx    [1.8748933850689973]    [4.42484912552277]  230.257558     230.257558\n","2021-04-08 OMGUSDT.xlsx     [1.873781545496101]   [3.209043940543563]   93.755845      93.755845\n","2021-04-08 BCHUSDT.xlsx    [1.6949847112804326]  [3.1313517601262713]  112.498632     112.498632\n","2021-04-08 ETCUSDT.xlsx    [1.5600239333168147]  [2.5737506004800426]  458.140284     458.140284\n","2021-04-08 KAVAUSDT.xlsx   [1.5461023913784524]   [1.836145905736346]   62.769231      62.769231\n","                                         profit         max_lv_profit   pr_fr_std  max_pr_fr_std\n","2021-04-08 DOTUSDT.xlsx    [11.850283533929263]   [3459.262548260214]   11.383924      11.383924\n","2021-04-08 THETAUSDT.xlsx  [3.7462790373784665]   [16.09483490773481]   14.711876      14.711876\n","2021-04-08 SXPUSDT.xlsx      [8.36774769737038]   [238.1856685467309]   22.060650      22.060650\n","2021-04-08 ALGOUSDT.xlsx   [3.7964366930160276]  [18.551837485688814]   24.465097      24.465097\n","2021-04-08 XLMUSDT.xlsx     [4.473822989924361]  [19.442701584759146]   28.434475      28.434475\n","2021-04-08 BANDUSDT.xlsx    [5.503093548133175]  [139.88644991787461]   29.407960      29.407960\n","2021-04-08 LINKUSDT.xlsx   [4.6376101369933265]   [41.79077366718076]   31.914706      31.914706\n","2021-04-08 ADAUSDT.xlsx     [4.622823278571806]  [108.05375630349427]   34.340115      34.340115\n","2021-04-08 ZECUSDT.xlsx    [2.8627644011254283]   [11.16051493490311]   35.935581      35.935581\n","2021-04-08 SNXUSDT.xlsx    [2.7415806176924655]  [22.227013682310506]   40.668573      40.668573\n","2021-04-08 LTCUSDT.xlsx    [3.3540183217134447]  [56.189936451806716]   41.400864      41.400864\n","2021-04-08 ZRXUSDT.xlsx    [2.6442283318955115]   [7.488525680001747]   50.188373      50.188373\n","2021-04-08 ETHUSDT.xlsx     [3.102131909903232]   [20.51073165251033]   55.803022      55.803022\n","2021-04-08 KAVAUSDT.xlsx   [1.5461023913784524]   [1.836145905736346]   62.769231      62.769231\n","2021-04-08 XTZUSDT.xlsx     [5.035267877394526]  [161.86084115417938]   72.423734      72.423734\n","2021-04-08 OMGUSDT.xlsx     [1.873781545496101]   [3.209043940543563]   93.755845      93.755845\n","2021-04-08 ATOMUSDT.xlsx   [3.5500814942665064]  [110.29638461565274]   94.963642      94.963642\n","2021-04-08 COMPUSDT.xlsx   [1.9678219185539954]  [10.821211186676159]  109.368178     109.368178\n","2021-04-08 MKRUSDT.xlsx    [1.7409880985506594]   [6.368084514914367]  110.536597     110.536597\n","2021-04-08 BCHUSDT.xlsx    [1.6949847112804326]  [3.1313517601262713]  112.498632     112.498632\n","2021-04-08 WAVESUSDT.xlsx  [3.2565284021439833]   [99.13288046843742]  116.174716     116.174716\n","2021-04-08 BNBUSDT.xlsx    [2.7100175558148933]  [30.814014987306635]  129.626742     129.626742\n","2021-04-08 IOTAUSDT.xlsx    [3.978522183373036]  [227.95031854722936]  129.992376     129.992376\n","2021-04-08 XMRUSDT.xlsx     [2.016070967467639]  [12.754727785410264]  135.944623     135.944623\n","2021-04-08 BATUSDT.xlsx    [2.3446881256073864]   [18.37629221839164]  145.264035     145.264035\n","2021-04-08 NEOUSDT.xlsx    [2.2329895137901596]  [14.684047519330276]  208.301607     208.301607\n","2021-04-08 XRPUSDT.xlsx    [2.8570184529021905]   [8.940216203165624]  213.241583     213.241583\n","2021-04-08 BTCUSDT.xlsx     [2.156634692891473]  [28.216713520275064]  219.277496     219.277496\n","2021-04-08 EOSUSDT.xlsx    [1.8748933850689973]    [4.42484912552277]  230.257558     230.257558\n","2021-04-08 ONTUSDT.xlsx    [2.4570469006672435]   [9.137814703893268]  262.195170     262.195170\n","2021-04-08 QTUMUSDT.xlsx   [1.8307341180522074]   [6.391575599708198]  263.524017     263.524017\n","2021-04-08 KNCUSDT.xlsx    [1.8503474332036347]  [10.146362698372123]  287.639687     287.639687\n","2021-04-08 DASHUSDT.xlsx   [2.6191363326115082]   [59.39126318577459]  337.601752     337.601752\n","2021-04-08 ETCUSDT.xlsx    [1.5600239333168147]  [2.5737506004800426]  458.140284     458.140284\n","                                         profit         max_lv_profit   pr_fr_std  max_pr_fr_std\n","2021-04-08 DOTUSDT.xlsx    [11.850283533929263]   [3459.262548260214]   11.383924      11.383924\n","2021-04-08 THETAUSDT.xlsx  [3.7462790373784665]   [16.09483490773481]   14.711876      14.711876\n","2021-04-08 SXPUSDT.xlsx      [8.36774769737038]   [238.1856685467309]   22.060650      22.060650\n","2021-04-08 ALGOUSDT.xlsx   [3.7964366930160276]  [18.551837485688814]   24.465097      24.465097\n","2021-04-08 XLMUSDT.xlsx     [4.473822989924361]  [19.442701584759146]   28.434475      28.434475\n","2021-04-08 BANDUSDT.xlsx    [5.503093548133175]  [139.88644991787461]   29.407960      29.407960\n","2021-04-08 LINKUSDT.xlsx   [4.6376101369933265]   [41.79077366718076]   31.914706      31.914706\n","2021-04-08 ADAUSDT.xlsx     [4.622823278571806]  [108.05375630349427]   34.340115      34.340115\n","2021-04-08 ZECUSDT.xlsx    [2.8627644011254283]   [11.16051493490311]   35.935581      35.935581\n","2021-04-08 SNXUSDT.xlsx    [2.7415806176924655]  [22.227013682310506]   40.668573      40.668573\n","2021-04-08 LTCUSDT.xlsx    [3.3540183217134447]  [56.189936451806716]   41.400864      41.400864\n","2021-04-08 ZRXUSDT.xlsx    [2.6442283318955115]   [7.488525680001747]   50.188373      50.188373\n","2021-04-08 ETHUSDT.xlsx     [3.102131909903232]   [20.51073165251033]   55.803022      55.803022\n","2021-04-08 KAVAUSDT.xlsx   [1.5461023913784524]   [1.836145905736346]   62.769231      62.769231\n","2021-04-08 XTZUSDT.xlsx     [5.035267877394526]  [161.86084115417938]   72.423734      72.423734\n","2021-04-08 OMGUSDT.xlsx     [1.873781545496101]   [3.209043940543563]   93.755845      93.755845\n","2021-04-08 ATOMUSDT.xlsx   [3.5500814942665064]  [110.29638461565274]   94.963642      94.963642\n","2021-04-08 COMPUSDT.xlsx   [1.9678219185539954]  [10.821211186676159]  109.368178     109.368178\n","2021-04-08 MKRUSDT.xlsx    [1.7409880985506594]   [6.368084514914367]  110.536597     110.536597\n","2021-04-08 BCHUSDT.xlsx    [1.6949847112804326]  [3.1313517601262713]  112.498632     112.498632\n","2021-04-08 WAVESUSDT.xlsx  [3.2565284021439833]   [99.13288046843742]  116.174716     116.174716\n","2021-04-08 BNBUSDT.xlsx    [2.7100175558148933]  [30.814014987306635]  129.626742     129.626742\n","2021-04-08 IOTAUSDT.xlsx    [3.978522183373036]  [227.95031854722936]  129.992376     129.992376\n","2021-04-08 XMRUSDT.xlsx     [2.016070967467639]  [12.754727785410264]  135.944623     135.944623\n","2021-04-08 BATUSDT.xlsx    [2.3446881256073864]   [18.37629221839164]  145.264035     145.264035\n","2021-04-08 NEOUSDT.xlsx    [2.2329895137901596]  [14.684047519330276]  208.301607     208.301607\n","2021-04-08 XRPUSDT.xlsx    [2.8570184529021905]   [8.940216203165624]  213.241583     213.241583\n","2021-04-08 BTCUSDT.xlsx     [2.156634692891473]  [28.216713520275064]  219.277496     219.277496\n","2021-04-08 EOSUSDT.xlsx    [1.8748933850689973]    [4.42484912552277]  230.257558     230.257558\n","2021-04-08 ONTUSDT.xlsx    [2.4570469006672435]   [9.137814703893268]  262.195170     262.195170\n","2021-04-08 QTUMUSDT.xlsx   [1.8307341180522074]   [6.391575599708198]  263.524017     263.524017\n","2021-04-08 KNCUSDT.xlsx    [1.8503474332036347]  [10.146362698372123]  287.639687     287.639687\n","2021-04-08 DASHUSDT.xlsx   [2.6191363326115082]   [59.39126318577459]  337.601752     337.601752\n","2021-04-08 ETCUSDT.xlsx    [1.5600239333168147]  [2.5737506004800426]  458.140284     458.140284\n","Index(['2021-04-08 DOTUSDT.xlsx', '2021-04-08 SXPUSDT.xlsx', '2021-04-08 IOTAUSDT.xlsx', '2021-04-08 XTZUSDT.xlsx', '2021-04-08 BANDUSDT.xlsx', '2021-04-08 ATOMUSDT.xlsx', '2021-04-08 ADAUSDT.xlsx', '2021-04-08 WAVESUSDT.xlsx', '2021-04-08 DASHUSDT.xlsx', '2021-04-08 LTCUSDT.xlsx', '2021-04-08 LINKUSDT.xlsx', '2021-04-08 BNBUSDT.xlsx', '2021-04-08 BTCUSDT.xlsx', '2021-04-08 SNXUSDT.xlsx', '2021-04-08 ETHUSDT.xlsx', '2021-04-08 XLMUSDT.xlsx', '2021-04-08 ALGOUSDT.xlsx', '2021-04-08 BATUSDT.xlsx', '2021-04-08 THETAUSDT.xlsx', '2021-04-08 NEOUSDT.xlsx', '2021-04-08 XMRUSDT.xlsx', '2021-04-08 ZECUSDT.xlsx', '2021-04-08 COMPUSDT.xlsx', '2021-04-08 KNCUSDT.xlsx', '2021-04-08 ONTUSDT.xlsx', '2021-04-08 XRPUSDT.xlsx', '2021-04-08 ZRXUSDT.xlsx', '2021-04-08 QTUMUSDT.xlsx', '2021-04-08 MKRUSDT.xlsx', '2021-04-08 EOSUSDT.xlsx', '2021-04-08 OMGUSDT.xlsx', '2021-04-08 BCHUSDT.xlsx', '2021-04-08 ETCUSDT.xlsx', '2021-04-08 KAVAUSDT.xlsx'], dtype='object')\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"IKke4koCbzqi"},"source":["### **Candi Result in sorted way**"]},{"cell_type":"code","metadata":{"id":"4dmtTA9raAwD","colab":{"base_uri":"https://localhost:8080/","height":1000,"output_embedded_package_id":"1fTtwa7RDOIYQWCS-nUr0MNR3VFHM69Tc"},"executionInfo":{"status":"ok","timestamp":1620438252297,"user_tz":-540,"elapsed":247352,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"}},"outputId":"82b90830-2f17-4145-8ae3-cccca4cb3837"},"source":["long_index = 0\n","safety_threshold = 0.6\n","\n","\n","\n","for i in range(len(candis)):\n","\n","  keys = [candis[i]]\n","\n","  # if '04-08' not in candis[i]:\n","  #   continue\n","\n","  # if 'eth'.upper() not in candis[i]:\n","  #   continue\n","\n","  plt.figure(figsize=(35, 7))\n","  plt.suptitle('%s %s' % (interval, keys))\n","\n","  plt.subplot(1,10,1)\n","  plt.title('win ratio')  \n","  for key in keys:  \n","    plt.plot(profit_result_dict[key]['tp_list'], profit_result_dict[key]['wr_list'][:, [long_index]])\n","\n","\n","  plt.subplot(1,10,2)\n","  plt.title('frequency')  \n","  for key in keys:  \n","    plt.plot(profit_result_dict[key]['tp_list'], profit_result_dict[key]['fr_list'][:, [long_index]])\n","\n","    \n","  plt.subplot(1,10,3)\n","  for key in keys:  \n","    plt.plot(profit_result_dict[key]['tp_list'], profit_result_dict[key]['ap_list'][:, [long_index]])\n","    argmax = np.argmax(profit_result_dict[key]['ap_list'][:, [long_index]])\n","    peak_tp = profit_result_dict[key]['tp_list'][argmax]\n","    plt.axvline(peak_tp, linestyle='--')\n","    plt.title('acc profit, max at %.4f' % (peak_tp))  \n","\n","  plt.subplot(1,10,4)\n","  plt.title('max acc profit by leverage')  \n","  for key in keys:  \n","    plt.plot(profit_result_dict[key]['tp_list'], profit_result_dict[key]['max_ap_list'][:, [long_index]], label=key)\n","    argmax = np.argmax(profit_result_dict[key]['max_ap_list'][:, [long_index]])\n","    max_peak_tp = profit_result_dict[key]['tp_list'][argmax]\n","    plt.axvline(max_peak_tp, linestyle='--')\n","    plt.title('max acc profit, max at %.4f' % (max_peak_tp))  \n","\n","\n","  for key in keys:  \n","    # print(profit_result_dict[key]['leverage_ap_list'])\n","\n","    for tp in [peak_tp, max_peak_tp]:\n","\n","      if tp == peak_tp:\n","        plt.subplot(1,10,5)\n","      else:\n","        plt.subplot(1,10,6)\n","\n","      #     leverage analysis     #\n","      ohlcv = pd.read_excel(date_path + key, index_col=0)\n","\n","      # ohlcv = profit_result_dict[key]['ohlcv']\n","      # predictions = profit_result_dict[key]['predictions']\n","      # err_ranges = profit_result_dict[key]['err_ranges']\n","      \n","      predictions = ohlcv['close'].shift(1).values# [-5824:]\n","      err_ranges = np.zeros_like(predictions)# [-5824:]\n","\n","      print(\"len(predictions) :\", len(predictions))\n","      \n","      leverage_list = profit_result_dict[key]['leverage_list']\n","      # leverage_list = [4]\n","      temp_ap_list = list()\n","      temp_pr_list = list()\n","\n","      for leverage in leverage_list:\n","\n","        try:\n","          # result = get_back_result(ohlcv, predictions, err_ranges, tp=0.018, leverage=leverage, reverse_short=False)\n","          result = get_back_result(ohlcv, predictions, err_ranges, tp=tp, show_plot=False, leverage=leverage, reverse_short=False)\n","\n","          # if min(result[-1][long_index]) < safety_threshold:\n","          #   continue\n","\n","          # print(\"leverage, result[2] :\", leverage, result[2])\n","\n","          temp_ap_list.append(result[2][long_index])\n","          temp_pr_list.append(result[3][long_index])\n","\n","          # if round(leverage) == 1:\n","          #   temp_pr_list = result[3]\n","\n","        except Exception as e:\n","          print(e)\n","          break\n","\n","      \n","      # profit_result_dict[key]['pr_list'] = temp_pr_list\n","\n","      plt.plot(profit_result_dict[key]['leverage_list'][:len(temp_ap_list)], temp_ap_list, label=key)\n","      argmax = np.argmax(temp_ap_list)\n","      plt.title('acc profit by leverage\\n max at tp=%.4f lvrg=%.0f' % (tp, profit_result_dict[key]['leverage_list'][:len(temp_ap_list)][argmax]))  \n","      plt.axvline(profit_result_dict[key]['leverage_list'][:len(temp_ap_list)][argmax], linestyle='--')\n","\n","      if tp == peak_tp:\n","        plt.subplot(1,10,7)\n","      else:\n","        plt.subplot(1,10,9)\n","\n","      plt.plot(temp_pr_list[argmax])\n","    # plt.xlim(0, 13)\n","\n","    \n","  # plt.subplot(1,10,7)\n","  for key in keys:  \n","    pr_list = profit_result_dict[key]['pr_list']\n","    # plt.plot(pr_list)\n","\n","    pr_fr_std = profit_result_dict[key]['pr_fr_std']\n","    pr_list_fr = list(map(lambda x : 0 if x == 1.0 else 1, pr_list))\n","\n","    plt.subplot(1,10,8)\n","    plt.title('std : %s' % pr_fr_std)\n","    plt.plot(pr_list_fr)\n","\n","  # plt.subplot(1,10,9)\n","  for key in keys:  \n","    pr_list = profit_result_dict[key]['max_pr_list']\n","    # plt.plot(pr_list)\n","\n","    pr_fr_std = profit_result_dict[key]['max_pr_fr_std']\n","    pr_list_fr = list(map(lambda x : 0 if x == 1.0 else 1, pr_list))\n","\n","    plt.subplot(1,10,10)\n","    plt.title('std : %s' % pr_fr_std)\n","    plt.plot(pr_list_fr)\n","\n","\n","  \n","  \n","\n","  plt.show()\n","\n","  "],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":"Output hidden; open in https://colab.research.google.com to view."},"metadata":{}}]},{"cell_type":"markdown","metadata":{"id":"4kzJjVTbF3S_"},"source":["#### **RM - Maximum Loss**"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000,"output_embedded_package_id":"1O1nCF8GVX0fpOQC8YPkAvjvqZkOajZ8S"},"id":"fCRzI_CNjrUH","executionInfo":{"status":"ok","timestamp":1616839489696,"user_tz":-540,"elapsed":236701,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"}},"outputId":"5b030f70-8a15-4215-e723-9db4fa9dc043"},"source":["leverage_list2 = np.arange(1, 6, 1)\n","\n","for i in range(len(candis)):\n","\n","  keys = [candis[i]]\n","  \n","  # if 'eth'.upper() not in candis[i]:\n","  #   continue\n","\n","  # plt.figure(figsize=(35, 10))\n","  # plt.suptitle('%s %s' % (interval, keys))\n","\n","  # plt.subplot(1,10,3)\n","  for key in keys:  \n","    # plt.plot(profit_result_dict[key]['tp_list'], profit_result_dict[key]['ap_list'])\n","    argmax = np.argmax(profit_result_dict[key]['ap_list'][:, [long_index]])\n","    peak_tp = profit_result_dict[key]['tp_list'][argmax]\n","    # plt.axvline(peak_tp, linestyle='--')\n","    # plt.title('acc profit, max at %.4f' % (peak_tp))  \n","\n","  # plt.subplot(1,10,4)\n","  # plt.title('max acc profit by leverage')  \n","  for key in keys:  \n","    # plt.plot(profit_result_dict[key]['tp_list'], profit_result_dict[key]['max_ap_list'], label=key)\n","    argmax = np.argmax(profit_result_dict[key]['max_ap_list'][:, [long_index]])\n","    max_peak_tp = profit_result_dict[key]['tp_list'][argmax]\n","    # plt.axvline(max_peak_tp, linestyle='--')\n","    # plt.title('max acc profit, max at %.4f' % (max_peak_tp))  \n","\n","\n","  for key in keys:  \n","    # print(profit_result_dict[key]['leverage_ap_list'])\n","\n","    for tp in [peak_tp, max_peak_tp]:\n","\n","      # if tp == peak_tp:\n","      #   plt.subplot(1,10,5)\n","      # else:\n","      #   plt.subplot(1,10,6)\n","\n","      #     leverage analysis     #\n","      ohlcv = profit_result_dict[key]['ohlcv']\n","      predictions = profit_result_dict[key]['predictions']\n","      err_ranges = profit_result_dict[key]['err_ranges']\n","      # leverage_list = profit_result_dict[key]['leverage_list']\n","      # temp_ap_list = list()\n","      # temp_pr_list = list()\n","\n","      for leverage in leverage_list2:\n","\n","        try:\n","          print('-------------- %s --------------' % key)\n","          result = get_back_result(ohlcv, predictions, err_ranges, tp=tp, leverage=leverage, show_plot=True, reverse_short=False, show_detail=False)\n","          # temp_ap_list.append(result[2])\n","          # temp_pr_list.append(result[3])\n","\n","          # if round(leverage) == 1:\n","          #   temp_pr_list = result[3]\n","\n","        except Exception as e:\n","          print(e)\n","          break\n","        \n","  # break\n","\n","  "],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":"Output hidden; open in https://colab.research.google.com to view."},"metadata":{}}]},{"cell_type":"code","metadata":{"id":"4XiZSRpAIhE7"},"source":[""],"execution_count":null,"outputs":[]}]}