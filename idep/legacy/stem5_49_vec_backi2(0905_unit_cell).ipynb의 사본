{"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"6rmQpzEGXfCw","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1662685551809,"user_tz":-540,"elapsed":258850,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"077bfc48-8076-4de7-acdc-3bf6a4383702"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')\n","\n","import os, sys\n","\n","current_path = '/content/drive/My Drive/Colab Notebooks/JnQ/'\n","\n","os.chdir(current_path)\n","\n","strat_pkg = 'IDE'\n","\n","mpl_finance_path = '/content/drive/My Drive/Colab Notebooks/JnQ/mpl_finance'\n","ta_lib_path = '/content/drive/My Drive/Colab Notebooks/JnQ/ta_lib'\n","\n","if mpl_finance_path not in sys.path:\n","\n","  try:\n","    sys.path.insert(0, '/content/drive/My Drive/Colab Notebooks/JnQ')\n","    sys.path.insert(0, '/content/drive/My Drive/Colab Notebooks/JnQ/{}'.format(strat_pkg))\n","    sys.path.insert(0, '/content/drive/My Drive/Colab Notebooks/JnQ/funcs')\n","    sys.path.insert(0, mpl_finance_path)\n","    sys.path.insert(0, ta_lib_path)\n","    \n","  except Exception as e:\n","    print(e)"]},{"cell_type":"markdown","metadata":{"id":"8uqYv5StTazo"},"source":["# requirements"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"9qGt60DKTZmf"},"outputs":[],"source":["# !pip install zigzag --target=$'/content/drive/My Drive/Colab Notebooks/JnQ/zigzag'\n","# !pip install talib-binary --target=$'/content/drive/My Drive/Colab Notebooks/JnQ/ta_lib'\n","# !pip install findiff\n","\n","# import nvstrings, nvcategory, cudf\n","# import cuml\n","# import cudf\n","\n","import os\n","import talib\n","from funcs.funcs_idep import *\n","from funcs.funcs_duration_v2 import *\n","from funcs.funcs_plot_check import *\n","from funcs.funcs_pairing import *\n","# from funcs.funcs_ide import *\n","# from funcs.funcs_indicator_candlescore import *\n","from funcs.funcs_indicator import *\n","from funcs.funcs_trader import *\n","from ast import literal_eval\n","import logging\n","import importlib\n","\n","import mpl_finance as mf\n","import matplotlib.pyplot as plt\n","from matplotlib import gridspec\n","# from zigzag import *\n","# from tqdm.notebook import tqdm\n","\n","# import IPython\n","# import IPython.display\n","\n","import numpy as np\n","# import jax.numpy as np\n","import pandas as pd\n","# import seaborn as sns\n","# import tensorflow as tf\n","# from scipy import stats, signal\n","\n","import pickle\n","import shutil\n","import json\n","from easydict import EasyDict\n","import copy\n","\n","import datetime\n","from datetime import datetime\n","import random\n","import time\n","# import warnings\n","\n","# warnings.simplefilter(\"ignore\", category=RuntimeWarning)\n","\n","np.seterr(invalid=\"ignore\")\n","np.set_printoptions(suppress=True)\n","np.set_printoptions(linewidth=2000) \n","\n","pd.set_option('mode.chained_assignment',  None)\n","\n","pd.set_option('display.max_rows', 500)\n","pd.set_option('display.max_columns', 500)\n","pd.set_option('display.width', 1000)"]},{"cell_type":"markdown","metadata":{"id":"Ic1mfmwWCIBu"},"source":["# makeset - with to_htf dataframes"]},{"cell_type":"markdown","metadata":{"id":"AUSBU7T8Suzi"},"source":["## sync_check_make"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"QmhLikYlSuzi"},"outputs":[],"source":["def sync_check_make(df):\n","\n","    make_itv_list = ['3T', '5T', '15T', '30T', 'H', '4H', 'D']\n","    offset_list = ['1h', '1h', '1h', '1h', '1h', '1h', '9h']\n","\n","    assert len(make_itv_list) == len(offset_list), \"length of itv & offset_list should be equal\"\n","        \n","    htf_df_list = [to_htf(df, itv_=itv_, offset=offset_) for itv_, offset_ in zip(make_itv_list, offset_list)]\n","\n","    df_3T, df_5T, df_15T, df_30T, df_H, df_4H, df_D = htf_df_list\n","\n","    for htf_df in htf_df_list:\n","      print(\"{} -> \".format(pd.infer_freq(htf_df.index)), htf_df.tail(1))\n","\n","    # heikinashi_v2(res_df_)\n","    # h_candle_v3(df, df_5T, '5T')\n","    # df = h_candle_v4(df, df_5T)\n","    # df = h_candle_v4(df, df_15T)\n","    # df = h_candle_v4(df, df_30T)\n","    # df = h_candle_v4(df, 'D')\n","\n","    # df = candle_pattern_pkg(df, df_5T)\n","    # df = candle_pattern_pkg(df, df_30T)\n","    # df = candle_pattern_pkg(df, df_H)\n","    # df = candle_pattern_pkg(df, df_4H)\n","    \n","    # --------------- stochastic --------------- #\n","    # df = stoch_v2(df)\n","    # df_5T['stoch'] = stoch(df_5T, 13, 3, 3)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf_v2(df, df_5T, [-1], backing_i=-1), columns=['stoch_5m']))\n","\n","    # print(\"stoch phase done\")\n","\n","    # --------------- ma --------------- #  \n","    # df = ma(df, 60)\n","    # print(\"ma phase done\")\n","\n","    # df = macd_hist(df, 5, 35, 15)\n","    # print(\"macd_hist phase done\")\n","    \n","    # df = enough_space(df, '15T', 1)\n","    \n","    # --------------- dc --------------- #  \n","    # dc_period = 20\n","    # df = donchian_channel_v4(df, dc_period)\n","    # df = dc_line(df, df_5T, '5T')  # join 사용시에만 return df 허용함\n","    # df = dc_line(df, df_15T, '15T')\n","    # df = dc_line_v2(df, df_H, 'H', dc_period=5)\n","\n","    # df = dc_line_v4(df, df, dc_period=10)\n","    # df = dc_line_v4(df, df, dc_period=20)\n","    # df = dc_line_v4(df, df, dc_period=100)\n","    # df = dc_line_v4(df, df_5T, dc_period=20)\n","    # df = dc_line_v4(df, df_15T, dc_period=20)\n","    # df = dc_line_v4(df, df_H, dc_period=20)\n","    # df = dc_line_v4(df, df_4H, dc_period=20)\n","    # print(\"dc phase done\")\n","\n","    # df_5T = cci_v2(df_5T, 20)\n","\n","    df_5T = tc_cci(df_5T, 20)\n","\n","    df = df.join(to_lower_tf_v2(df, df_5T, [-3, -2, -1]), how='inner')\n","\n","    # --------------- bb --------------- #  \n","    bb_period = 100\n","\n","    # upper, base, lower = talib.BBANDS(res_df_.close, timeperiod=20, nbdevup=1, nbdevdn=1, matype=0)\n","    \n","    # df = bb_width_v3(df, period=60, multiple=1)\n","    # df = bb_line(df, df_5T, '5T')\n","    \n","    # df = bb_line_v3(df, df_15T, 60)\n","    \n","    # df = bb_line_v3(df, df, bb_period)\n","    # df = bb_level_v2(df, 'T', bb_period)\n","    # print(\"bb phase done\")\n","\n","    c_itv = '5T'\n","\n","    # df =  wick_ratio(df, c_itv)\n","    # df =  wick_ratio(df, c_itv)\n","\n","    bb_itv= 'T'\n","\n","    # df = candle_range_ratio(df, c_itv, bb_itv, bb_period)\n","    # # candle_pumping_ratio(df, c_itv, bb_itv, bb_period)\n","\n","    dc_itv= '15T'\n","    dc_period = 4\n","    # df = candle_pumping_ratio_v2(df, c_itv, dc_itv, dc_period)\n","    # print(\"candle_pumping_ratio_v2 phase done\")\n","\n","    # df = dc_over_body_ratio(df, c_itv, dc_itv, dc_period)\n","    # print(\"dc_over_body_ratio phase done\")\n","\n","    # df = body_rel_ratio(df, c_itv)\n","    # print(\"body_rel_ratio phase done\")\n","\n","    # --------------- cbline --------------- #    \n","    # cloud_bline(df_3T, 20)\n","    # df = df.join(to_lower_tf_v2(df, df_3T, [-1]), how='inner')\n","    # # cloud_bline(df_5T, 20)\n","    # # df = df.join(to_lower_tf_v2(df, df_5T, [-1]), how='inner')\n","    # cloud_bline(df_15T, 20)\n","    # df = df.join(to_lower_tf_v2(df, df_15T, [-1]), how='inner')\n","    # cloud_bline(df_30T, 20)\n","    # df = df.join(to_lower_tf_v2(df, df_30T, [-1]), how='inner')\n","    # cloud_bline(df_H, 20)\n","    # df = df.join(to_lower_tf_v2(df, df_H, [-1]), how='inner')\n","    # cloud_bline(df_4H, 20)\n","    # df = df.join(to_lower_tf_v2(df, df_4H, [-1]), how='inner')\n","\n","    # print(\"cbline phase done\")\n","\n","\n","\n","    # --------------- sd_dc --------------- #\n","    # df = sd_dc(df, 20, 40)\n","    # df = sd_dc(df, 20, 20)\n","    # df = sd_dc(df_5T, 20, 40, df)\n","    # df = sd_dc(df_H, 20, 40, df)\n","\n","    # print(\"sd_dc phase done\")\n","\n","    # --------------- imb_ratio --------------- #\n","    # imb_ratio(df, '5T')\n","    # imb_ratio_v3(df, \"5T\")\n","    # imb_ratio_v4(df, \"5T\")\n","\n","    # imb_ratio(df, 'H')\n","    # imb_ratio_v2(df, '5T')\n","    \n","    # print(\"imb_ratio phase done\")\n","\n","    # --------------- rel_abs_ratio --------------- #\n","    # rel_abs_ratio(df, '5T', norm_period=120)\n","\n","    # --------------- normalize data --------------- #\n","    # itv = 'T'\n","    # lb_period = 15\n","    # target_col = 'close_{}{}'.format(itv, lb_period)\n","    # target_data = df['close'].diff(lb_period).to_numpy()\n","    # norm_data(df, target_data, target_col)    \n","    # print(\"normalize data phase done !\")\n","\n","    # --------------- lucid sar --------------- #\n","    # lucid_sar_v2(df)\n","    # lucid_sar_v2(df_3T)\n","    # df = df.join(to_lower_tf_v2(df, df_3T, [-2, -1]), how='inner')\n","    # lucid_sar_v2(df_5T)\n","    # df = df.join(to_lower_tf_v2(df, df_5T, [-2, -1]), how='inner')\n","    # lucid_sar_v2(df_15T)\n","    # df = df.join(to_lower_tf_v2(df, df_15T, [-2, -1]), how='inner')\n","    # lucid_sar_v2(df_30T)\n","    # df = df.join(to_lower_tf_v2(df, df_30T, [-2, -1]), how='inner')       \n","\n","    # print(\"sar phase done\")\n","\n","    # --------------- supertrend --------------- #\n","    # df = st_price_line(df, df_3T, '3m')\n","    # df = st_price_line(df, df_5T, '5m')\n","    # df = st_price_line(df, df_15T, '15m')\n","    # df = st_price_line(df, df_30T, '30m')\n","    # df = st_price_line(df, df_H, '1h')\n","    # df = st_price_line(df, df_4H, '4h')\n","\n","    # print(\"supertrend phase done\")\n","\n","    # --------------- rsi --------------- #  \n","    # df['rsi_1m'] = rsi(df, 14)    \n","    # df_5T['rsi_5m'] = rsi(df_5T, 14)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf_v2(df, df_5T, [-1]), columns=['rsi_5m']))\n","    \n","    # print(\"rsi phase done\")\n","\n","\n","    # --------------- cci --------------- #  \n","    # df['cci_1m'] = cci(df, 20)\n","\n","    # print(\"cci phase done\")\n","\n","    # --------------- ema --------------- #      \n","    # df_5T['ema_5m'] = ema(df_5T['close'], 195)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf_v2(df, df_5T, [-1]), columns=['ema_5m']))\n","    \n","    # print(\"ema phase done\")        \n","\n","\n","    return df\n"]},{"cell_type":"markdown","metadata":{"id":"mEKyVbHWSuzi"},"source":["## make & save res_df (concat 생각하면, timeindex sync 맞춰야함)"]},{"cell_type":"markdown","metadata":{"id":"VdukVo5-Suzj"},"source":["### old (xlsx)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"khKb9nhlSuzj"},"outputs":[],"source":["pd.set_option('display.max_rows', 500)\n","pd.set_option('display.max_columns', 500)\n","pd.set_option('display.width', 1000)\n","\n","\n","save_path = './candlestick_concated/res_df/'\n","\n","exist_list = os.listdir(save_path)\n","\n","\n","a_day = 3600 * 24\n","\n","for i in tqdm(range(len(file_list))):\n","\n","  keys = [file_list[i]]\n","\n","  # if 'neo'.upper() not in file_list[i]:\n","    # continue\n","\n","  # if '2021-04-30'.upper() not in file_list[i]:\n","  if '2021-07-01'.upper() not in file_list[i]:\n","  # if '2021-10-10'.upper() not in file_list[i]:\n","    continue\n","\n","\n","  for key in keys:      \n","\n","    # if 'eth'.upper() not in key:\n","    #   continue\n","\n","    excel_name = key.replace(\".xlsx\", \"_st1h_backi2.xlsx\")\n","    excel_path = save_path + excel_name\n","\n","    if excel_name in exist_list:\n","      print(excel_name, \"already exist !\")\n","      continue\n","    \n","    open_indexes = []\n","    \n","    df = pd.read_excel(date_path + key, index_col=0)\n","    second_df = pd.read_excel(date_path2 + key, index_col=0)\n","    third_df = pd.read_excel(date_path3 + key, index_col=0)\n","    fourth_df = pd.read_excel(date_path4 + key, index_col=0)\n","    fifth_df = pd.read_excel(date_path5 + key, index_col=0)\n","    \n","    print(df.index[[0, -1]])\n","    print(second_df.index[[0, -1]])\n","    print(third_df.index[[0, -1]])\n","    print(fourth_df.index[[0, -1]])\n","    print(fifth_df.index[[0, -1]])\n","\n","    open_indexes.append(df.index[0])\n","    open_indexes.append(second_df.index[0])\n","    open_indexes.append(third_df.index[0])\n","    open_indexes.append(fourth_df.index[0])\n","    open_indexes.append(fifth_df.index[0])\n","    \n","    try:\n","      #     Todo    #\n","      #      1. 1m 마지막 timeindex 의 date 기준, 08:59:59.999000 를 last timestamp 로 설정\n","      #      2. 시작 timestamp 는 모든 tf 의 가장 최근 시작 index,\n","      #       a. 1m 의 시작 timeindex 는 최소, htf 의 시작 timeindex 보다 interval 만큼 앞서야함\n","      #         i. 따라서 1m open_index, latest_open_index + 1d 를 하면 댐\n","      #           1. timestamp 으로 변환후 1day 를 더하고 datetime 으로 변환\n","      sixth_df = pd.read_excel(date_path6 + key, index_col=0)\n","      seventh_df = pd.read_excel(date_path7 + key, index_col=0)\n","\n","      print(sixth_df.index[[0, -1]])\n","      print(seventh_df.index[[0, -1]])\n","      print()\n","\n","      open_indexes.append(sixth_df.index[0])\n","      open_indexes.append(seventh_df.index[0])\n","\n","    except Exception as e:\n","      print(e)\n","\n","    latest_open_index = sorted(open_indexes)[-1]\n","    \n","    open_ts = datetime.timestamp(latest_open_index)\n","    latest_open_index_1m = datetime.fromtimestamp(open_ts + a_day)\n","\n","    #   str 로 만들어 접근하면 불가함  #\n","    end_index = pd.to_datetime(str(df.index[-1]).split(\" \")[0] + \" 08:59:59.999000\")\n","    # break\n","\n","    sliced_df = df.loc[latest_open_index_1m:end_index] # to_lower_tf 의 기준 ltf\n","    sliced_second_df = second_df.loc[latest_open_index:end_index]\n","    sliced_third_df = third_df.loc[latest_open_index:end_index]\n","    sliced_fourth_df = fourth_df.loc[latest_open_index:end_index]\n","    sliced_fifth_df = fifth_df.loc[latest_open_index:end_index]\n","\n","    print(\"sliced index\")\n","    print(sliced_df.index[[0, -1]])\n","    print(sliced_second_df.index[[0, -1]])\n","    print(sliced_third_df.index[[0, -1]])\n","    print(sliced_fourth_df.index[[0, -1]])\n","    print(sliced_fifth_df.index[[0, -1]])\n","\n","    try:\n","      sliced_sixth_df = sixth_df.loc[latest_open_index:end_index]\n","      sliced_seventh_df = seventh_df.loc[latest_open_index:end_index]\n","\n","      print(sliced_sixth_df.index[[0, -1]])\n","      print(sliced_seventh_df.index[[0, -1]])\n","\n","      res_df = sync_check(sliced_df, sliced_second_df, sliced_third_df, sliced_fourth_df, sliced_fifth_df, sliced_sixth_df, sliced_seventh_df)\n","    \n","    except:\n","      res_df = sync_check(sliced_df, sliced_second_df, sliced_third_df, sliced_fourth_df, sliced_fifth_df)\n","\n","\n","\n","    res_df.to_excel(excel_path)\n","    print(excel_name, \"saved succesfully !\")"]},{"cell_type":"markdown","metadata":{"id":"Bw5JibDKSuzj"},"source":["### xlsx to feather"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"VA-_gcA7Suzj"},"outputs":[],"source":["pd.set_option('display.max_rows', 500)\n","pd.set_option('display.max_columns', 500)\n","pd.set_option('display.width', 1000)\n","\n","\n","save_path = './candlestick_concated/res_df/'\n","\n","exist_list = os.listdir(save_path)\n","\n","\n","a_day = 3600 * 24\n","\n","for i in tqdm(range(len(file_list))):\n","\n","  keys = [file_list[i]]\n","\n","  # if 'neo'.upper() not in file_list[i]:\n","    # continue\n","\n","  # if '2021-04-30'.upper() not in file_list[i]:\n","  # if '2021-07-01'.upper() not in file_list[i]:\n","  if '2021-10-10'.upper() not in file_list[i]:\n","    continue\n","\n","\n","  for key in keys:      \n","\n","    # if 'eth'.upper() not in key:\n","    #   continue\n","\n","    feather_name = key.replace(\".xlsx\", \".ftr\")\n","    # feather_path = save_path + feather_name\n","\n","    if feather_name in exist_list:\n","      print(feather_name, \"already exist !\")\n","      continue\n","    \n","    open_indexes = []\n","    \n","    df = pd.read_excel(date_path + key, index_col=0)\n","    second_df = pd.read_excel(date_path2 + key, index_col=0)\n","    third_df = pd.read_excel(date_path3 + key, index_col=0)\n","    fourth_df = pd.read_excel(date_path4 + key, index_col=0)\n","    fifth_df = pd.read_excel(date_path5 + key, index_col=0)\n","    \n","    print(df.index[[0, -1]])\n","    print(second_df.index[[0, -1]])\n","    print(third_df.index[[0, -1]])\n","    print(fourth_df.index[[0, -1]])\n","    print(fifth_df.index[[0, -1]])\n","\n","    open_indexes.append(df.index[0])\n","    open_indexes.append(second_df.index[0])\n","    open_indexes.append(third_df.index[0])\n","    open_indexes.append(fourth_df.index[0])\n","    open_indexes.append(fifth_df.index[0])\n","    \n","    try:\n","      #     Todo    #\n","      #      1. 1m 마지막 timeindex 의 date 기준, 08:59:59.999000 를 last timestamp 로 설정\n","      #      2. 시작 timestamp 는 모든 tf 의 가장 최근 시작 index,\n","      #       a. 1m 의 시작 timeindex 는 최소, htf 의 시작 timeindex 보다 interval 만큼 앞서야함\n","      #         i. 따라서 1m open_index, latest_open_index + 1d 를 하면 댐\n","      #           1. timestamp 으로 변환후 1day 를 더하고 datetime 으로 변환\n","      sixth_df = pd.read_excel(date_path6 + key, index_col=0)\n","      seventh_df = pd.read_excel(date_path7 + key, index_col=0)\n","\n","      print(sixth_df.index[[0, -1]])\n","      print(seventh_df.index[[0, -1]])\n","      print()\n","\n","      open_indexes.append(sixth_df.index[0])\n","      open_indexes.append(seventh_df.index[0])\n","\n","    except Exception as e:\n","      print(e)\n","\n","\n","    df.reset_index().to_feather(date_path + feather_name, compression='lz4')\n","    second_df.reset_index().to_feather(date_path2 + feather_name, compression='lz4')\n","    third_df.reset_index().to_feather(date_path3 + feather_name, compression='lz4')\n","    fourth_df.reset_index().to_feather(date_path4 + feather_name, compression='lz4')\n","    fifth_df.reset_index().to_feather(date_path5 + feather_name, compression='lz4')\n","    sixth_df.reset_index().to_feather(date_path6 + feather_name, compression='lz4')\n","    seventh_df.reset_index().to_feather(date_path7 + feather_name, compression='lz4')\n","\n","    print(\"xlsx converted to feather !\")\n","    "]},{"cell_type":"markdown","metadata":{"id":"Pe0QpnORSuzk"},"source":["### add itv_name to ftr"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"M-gl30KxSuzk"},"outputs":[],"source":["save_path = './candlestick_concated/res_df/'\n","\n","# dir_path = \"bbdc3m_backi2\"\n","# date = '2021-10-10'\n","date = '2021-07-01'\n","\n","db_path = './candlestick_concated/database_bn/non_cum/%s/' % date\n","os.makedirs(os.path.join(db_path), exist_ok=True)\n","\n","# exist_list = os.listdir(os.path.join(save_path, dir_path))\n","# break\n","\n","\n","a_day = 3600 * 24\n","\n","for i in tqdm(range(len(file_list))):\n","\n","  keys = [file_list[i]]\n","\n","  # if 'neo'.upper() not in file_list[i]:\n","    # continue\n","\n","  if date not in file_list[i]:\n","    continue\n","\n","\n","  for key in keys:      \n","\n","    # if 'eth'.upper() not in key:\n","    #   continue\n","    # print(key)\n","    \n","    if \".ftr\" not in key:\n","      continue\n","        \n","    df = shutil.copy(date_path + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval))\n","    second_df = shutil.copy(date_path2 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval2))\n","    third_df = shutil.copy(date_path3 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval3))\n","    fourth_df = shutil.copy(date_path4 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval4))\n","    fifth_df = shutil.copy(date_path5 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval5))\n","    sixth_df = shutil.copy(date_path6 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval6))\n","    seventh_df = shutil.copy(date_path7 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval7))\n","\n","    print(\"copied to\" + db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval))\n"]},{"cell_type":"markdown","metadata":{"id":"4oZ1ohTtSuzk"},"source":["### feather ver. (database to res_df)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"vgVHpnUsSuzk"},"outputs":[],"source":["# db_path = './candlestick_concated/database_ub/' # upbit\n","db_path = './candlestick_concated/database_bn/'   # binance\n","\n","save_path = './candlestick_concated/res_df/'\n","\n","save_dir_path = \"bb1d_backi2\"\n","date = '2022-02-17'\n","\n","# concat_path = 'noncat' # 새로운 cols 를 기존 cum/concat 에 붙이려는 경우\n","concat_path = 'concat'\n","cum_path = \"cum\"\n","# cum_path = \"non_cum\"  # non_cum 으로 진행하는 경우, row concat 용도이기 때문에 noncat -> concat 으로 변경 (base cols 를 모두 담고 있음)\n","\n","load_path = os.path.join(db_path, cum_path, date)\n","save_path = os.path.join(save_path, save_dir_path, concat_path, cum_path, date)\n","\n","os.makedirs(save_path, exist_ok=True)\n","\n","file_list = os.listdir(load_path)\n","exist_list = os.listdir(save_path)\n","# break\n","\n","a_day = 3600 * 24\n","\n","for i in tqdm(range(len(file_list))):\n","\n","  keys = [file_list[i]]\n","\n","  # if 'neo'.upper() not in file_list[i]:\n","    # continue\n","\n","  if date not in file_list[i]:\n","    continue\n","\n","\n","  for key in keys:      \n","\n","    # if 'eth'.upper() not in key:\n","    #   continue\n","    # print(key)\n","    \n","    if \".ftr\" not in key:\n","      continue\n","\n","    if \"_1m\" not in key:\n","      continue\n","\n","    # feather_name = key.replace(\".ftr\", \"_%.ftr\" % save_dir_path)\n","    feather_name = key.replace(\"_1m\", \"\")\n","    feather_path = os.path.join(save_path, feather_name)\n","\n","    if feather_name in exist_list:\n","      print(feather_name, \"already exist !\")\n","      continue\n","    \n","    df = pd.read_feather(os.path.join(load_path, key), columns=None, use_threads=True).set_index(\"index\")\n","\n","    res_df = sync_check_make(df)\n","\n","    res_df.reset_index().to_feather(feather_path, compression='lz4')\n","    print(feather_path, \"saved succesfully !\")"]},{"cell_type":"markdown","metadata":{"id":"YxCPUzoyidwH"},"source":["#### just add col to loaded df"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":602},"executionInfo":{"elapsed":3433,"status":"ok","timestamp":1662649247695,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"odqVwQHpYo1M","outputId":"bb9eae01-c30f-42dc-9ec9-b653eab9d29d"},"outputs":[{"output_type":"stream","name":"stdout","text":["3T ->                          open     high      low    close\n","index                                                  \n","2022-04-27 08:45:00  2803.55  2803.97  2799.26  2800.43\n","5T ->                          open     high      low    close\n","index                                                  \n","2022-04-27 08:45:00  2803.55  2803.97  2799.26  2800.43\n","15T ->                          open     high      low    close\n","index                                                  \n","2022-04-27 08:45:00  2803.55  2803.97  2799.26  2800.43\n","30T ->                          open     high      low    close\n","index                                                  \n","2022-04-27 08:30:00  2783.61  2806.93  2780.79  2800.43\n","H ->                          open     high      low    close\n","index                                                  \n","2022-04-27 08:00:00  2819.33  2822.77  2761.27  2800.43\n","4H ->                          open    high      low    close\n","index                                                 \n","2022-04-27 05:00:00  2837.34  2855.0  2761.27  2800.43\n","D ->                          open    high      low    close\n","index                                                 \n","2022-04-26 09:00:00  3006.12  3043.0  2761.27  2800.43\n"]},{"output_type":"execute_result","data":{"text/plain":["                         dc_base_15T20  dc_upper_H20  dc_lower_H20  dc_base_H20  dc_upper_4H20  dc_lower_4H20  dc_base_4H20   cci_5T20 short_tc_5T20 long_tc_5T20\n","index                                                                                                                                                            \n","2022-04-27 08:41:59.999       2811.135        3020.4       2796.54      2908.47         3043.0         2791.3       2917.15 -69.312832         False        False\n","2022-04-27 08:42:59.999       2811.135        3020.4       2796.54      2908.47         3043.0         2791.3       2917.15 -69.312832         False        False\n","2022-04-27 08:43:59.999       2811.135        3020.4       2796.54      2908.47         3043.0         2791.3       2917.15 -69.312832         False        False\n","2022-04-27 08:44:59.999       2811.135        3020.4       2796.54      2908.47         3043.0         2791.3       2917.15 -69.312832         False        False\n","2022-04-27 08:45:59.999       2811.135        3020.4       2796.54      2908.47         3043.0         2791.3       2917.15 -54.076567         False        False"],"text/html":["\n","  <div id=\"df-a09336c2-d371-494d-885a-78aa17e8bc5a\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>dc_base_15T20</th>\n","      <th>dc_upper_H20</th>\n","      <th>dc_lower_H20</th>\n","      <th>dc_base_H20</th>\n","      <th>dc_upper_4H20</th>\n","      <th>dc_lower_4H20</th>\n","      <th>dc_base_4H20</th>\n","      <th>cci_5T20</th>\n","      <th>short_tc_5T20</th>\n","      <th>long_tc_5T20</th>\n","    </tr>\n","    <tr>\n","      <th>index</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2022-04-27 08:41:59.999</th>\n","      <td>2811.135</td>\n","      <td>3020.4</td>\n","      <td>2796.54</td>\n","      <td>2908.47</td>\n","      <td>3043.0</td>\n","      <td>2791.3</td>\n","      <td>2917.15</td>\n","      <td>-69.312832</td>\n","      <td>False</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>2022-04-27 08:42:59.999</th>\n","      <td>2811.135</td>\n","      <td>3020.4</td>\n","      <td>2796.54</td>\n","      <td>2908.47</td>\n","      <td>3043.0</td>\n","      <td>2791.3</td>\n","      <td>2917.15</td>\n","      <td>-69.312832</td>\n","      <td>False</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>2022-04-27 08:43:59.999</th>\n","      <td>2811.135</td>\n","      <td>3020.4</td>\n","      <td>2796.54</td>\n","      <td>2908.47</td>\n","      <td>3043.0</td>\n","      <td>2791.3</td>\n","      <td>2917.15</td>\n","      <td>-69.312832</td>\n","      <td>False</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>2022-04-27 08:44:59.999</th>\n","      <td>2811.135</td>\n","      <td>3020.4</td>\n","      <td>2796.54</td>\n","      <td>2908.47</td>\n","      <td>3043.0</td>\n","      <td>2791.3</td>\n","      <td>2917.15</td>\n","      <td>-69.312832</td>\n","      <td>False</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>2022-04-27 08:45:59.999</th>\n","      <td>2811.135</td>\n","      <td>3020.4</td>\n","      <td>2796.54</td>\n","      <td>2908.47</td>\n","      <td>3043.0</td>\n","      <td>2791.3</td>\n","      <td>2917.15</td>\n","      <td>-54.076567</td>\n","      <td>False</td>\n","      <td>False</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a09336c2-d371-494d-885a-78aa17e8bc5a')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-a09336c2-d371-494d-885a-78aa17e8bc5a button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-a09336c2-d371-494d-885a-78aa17e8bc5a');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":20}],"source":["res_df_ = sync_check_make(res_df_)  # suffix duplication 유의\n","res_df_.tail().iloc[:, -10:]\n","# res_df_.dtypes"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"3SKglsQCj5_x"},"outputs":[],"source":["test_df_ = sync_check_make(res_df_.iloc[-4000:])  # suffix duplication 유의\n","test_df_.tail().iloc[:, -10:]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"gOQxwYqK0jCS"},"outputs":[],"source":["# ------ validation ------ #\n","# res_df_.cppr_15T.describe()\n","print((res_df_.open_15T.to_numpy() - res_df_.close_15T.to_numpy())[-10:])\n","print((res_df_.dc_upper_15T4.to_numpy() - res_df_.dc_lower_15T4.to_numpy())[-10:])"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"RmiB5VU5DN6B"},"outputs":[],"source":["# np.where(res_df_.CDL3LINESTRIKE_15T) #.iloc[-1000:,]\n","\n","# CDL3LINESTRIKE = talib.CDL3LINESTRIKE(df_15T.open, df_15T.high, df_15T.low, df_15T.close)\n","for col in talib.get_function_groups()['Pattern Recognition']:  \n","  print(np.unique(res_df_[col + '_15T'].to_numpy(), return_counts=True))\n","\n","# CDLCLOSINGMARUBOZU = talib.CDLCLOSINGMARUBOZU(df_15T.open, df_15T.high, df_15T.low, df_15T.close)\n","# print(np.unique(CDLCLOSINGMARUBOZU.to_numpy(), return_counts=True))\n","# print(CDLCLOSINGMARUBOZU.tail(50))"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":2745,"status":"ok","timestamp":1662649314828,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"XrgJPQRuisCa","outputId":"4852a9a5-f5cd-4678-922a-329b53d7e944"},"outputs":[{"output_type":"stream","name":"stdout","text":["./candlestick_concated/database_bn/cum/2022-04-27/2022-04-27 ETHUSDT_1m.ftr saved !\n"]}],"source":["# ------------ save current res_df ------------ #\n","ftr_path = os.path.join(save_path.replace(\"res_df\", \"database_bn\"), \"cum\", date)\n","ftr_full_path = os.path.join(ftr_path, key)\n","\n","res_df_.reset_index().to_feather(ftr_full_path, compression='lz4')  # key 잘 확인하고 저장\n","print(ftr_full_path, 'saved !')"]},{"cell_type":"markdown","metadata":{"id":"E0n53hflJbnp"},"source":["### htf candle check"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"6xW0yugCWvGz"},"outputs":[],"source":["itv_list = ['3T', '5T', '15T', '30T', '1H', '4H']\n","comp_df_list = [second_df, third_df, fourth_df, fifth_df, sixth_df, seventh_df]\n","offset_list = ['1h', '2min', '2min', '2min', '2min', '2min']\n","# itv_list = ['4H']\n","# comp_df_list = [seventh_df]\n","\n","slice_len = 100\n","for itv_, comp_df_, offset in zip(itv_list, comp_df_list, offset_list):\n","\n","  print(\"itv_ :\", itv_)\n","\n","  # df = h_candle_v2(df, '3T')\n","  # end_ts = \n","  h_res_df = df.resample(itv_, offset=offset).agg({\n","          'open': 'first',\n","          'high': 'max',\n","          'low': 'min',\n","          'close': 'last'\n","      })\n","\n","  #   앞은 길이가 다르고, 뒤에서부터 잘라서 비교    #\n","  #   last_row 빼고는 동일, 4h 제외\n","  # print(df.tail())\n","  print(h_res_df.tail())\n","  print(comp_df_.tail())\n","  # # print(h_res_df.head())\n","  # # print(second_df.head())\n","\n","  # print(len(h_res_df))\n","  # print(len(second_df))\n","\n","  # print(h_res_df.values[-slice_len:])\n","  # print(second_df.iloc[:, :4].values[-slice_len:])\n","  # print(np.argwhere(h_res_df.values[-slice_len:] != comp_df_.iloc[:, :4].values[-slice_len:]))\n","  # print()\n","  break"]},{"cell_type":"markdown","metadata":{"id":"jTN3M842Suzl"},"source":["## concat & save new res_df"]},{"cell_type":"markdown","metadata":{"id":"MlFkpO1MSuzl"},"source":["### old (xlsx)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"U-3QkfbFSuzl"},"outputs":[],"source":["save_path = './candlestick_concated/res_df/'\n","\n","dict_name = \"2021-07-01 ETHUSDT_bb15m_backi2_res_dfs.pkl\"\n","\n","#     load with pickle    #\n","with open(save_path + dict_name, 'rb') as f:\n","  saved_res_df_dict = pickle.load(f)\n","\n","print(dict_name, \"loaded !\")\n","res_df_files = os.listdir(save_path)\n","res_df_files.reverse()\n","\n","print(res_df_files)\n","\n","res_df_dict = {}\n","\n","base_postfix = '_bb15m_backi2.xlsx'\n","new_postfix = '_st1h_backi2.xlsx'\n","\n","max_cnt = 10\n","sample_cnt = max_cnt\n","\n","for k_i, key in enumerate(res_df_files):\n","\n","  if '2021-07-01'.upper() not in key:\n","  # if '2021-10-10'.upper() not in key:\n","    continue\n","\n","  # if \"link\".upper() not in key:\n","  # if \"btc\".upper() not in key:\n","  #   continue\n","\n","  if new_postfix not in key:\n","    continue\n","\n","  # if key in \n","\n","  if sample_cnt == max_cnt:\n","    dict_name = \"%s_res_dfs.pkl\" % key.split(\".\")[0]\n","    print(\"dict_name :\", dict_name)\n","\n","  base_df = saved_res_df_dict[key.replace(new_postfix, base_postfix)]\n","  # base_df = pd.read_excel(save_path + key.replace(new_postfix, base_postfix), index_col=0)  \n","  res_df = pd.read_excel(save_path + key, index_col=0)  \n","\n","  # print(base_df.head())\n","  # print(res_df.head())\n","  # break\n","\n","  new_res_df = pd.concat([base_df, res_df], axis=1) # df_tot.drop_duplicates()\n","  # new_res_df.head()\n","\n","  droped_new_res_df = new_res_df.loc[:,~new_res_df.columns.duplicated(keep='last')]\n","  droped_new_res_df.head()\n","  # break\n","\n","  # res_df_dict[key] = res_df\n","  res_df_dict[key] = droped_new_res_df\n","  print(key, \"saved to dict !\")\n","\n","  #     save with pickle    #\n","  with open(save_path + dict_name, 'wb') as f:\n","    pickle.dump(res_df_dict, f)\n","\n","  sample_cnt -= 1\n","\n","  if sample_cnt <= 0:\n","    break\n"]},{"cell_type":"markdown","metadata":{"id":"t1E_eAyPSuzm"},"source":["### new col to latest feather (1m_indi. only)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"xyI5NrM7Suzm"},"outputs":[],"source":["save_path = './candlestick_concated/res_df/'\n","\n","cum_dir = \"cum\"\n","\n","new_dir_path = \"rsi_backi2\"\n","base_dir_path = \"bbdc3m_backi2\"\n","\n","new_date = '2021-11-17'\n","\n","\n","\n","#     load ftr list    #\n","base_save_path = os.path.join(save_path, base_dir_path, \"concat/cum\", new_date)\n","new_save_path = base_save_path.replace(base_dir_path, new_dir_path)\n","\n","#     save to (new) cum dir    #\n","#      1. if dir. not exists, makedir\n","os.makedirs(new_save_path, exist_ok=True)\n","\n","ftr_list = [s for s in os.listdir(base_save_path) if \"ftr\" in s]\n","print(ftr_list)\n","# break\n","\n","\n","max_cnt = 10\n","sample_cnt = max_cnt\n","\n","for key in ftr_list:\n","\n","  if new_date not in key:\n","    continue\n","\n","\n","  #       read from base postfix's directory    #\n","  base_df = pd.read_feather(os.path.join(base_save_path, key), columns=None, use_threads=True).set_index(\"index\")\n","  # print(base_df.head())\n","  # print(res_df.head())\n","  # break\n","\n","  droped_new_res_df = sync_check(base_df)\n","\n","  # new_res_df = pd.concat([base_df, res_df], axis=0) # df_tot.drop_duplicates()\n","  # # new_res_df.head()\n","\n","  # intersection_cols = res_df.columns.intersection(base_df.columns)\n","\n","  # droped_new_res_df = new_res_df.loc[~new_res_df.index.duplicated(keep='last'),intersection_cols]\n","  # droped_new_res_df = new_res_df.loc[:,~new_res_df.columns.duplicated(keep='last')]\n","  # droped_new_res_df = new_res_df.loc[:,~new_res_df.index.duplicated(keep='last')]\n","  # droped_new_res_df.head()\n","  # break\n","\n","  droped_new_res_df.reset_index().to_feather(os.path.join(new_save_path, key), compression='lz4')\n","\n","  print(os.path.join(new_save_path, key), \"saved !\")\n","\n","  # sample_cnt -= 1\n","\n","  # if sample_cnt <= 0:\n","  #   break\n"]},{"cell_type":"markdown","metadata":{"id":"nUs4fjVHSuzl"},"source":["### feather ver. (col concat)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"6cu-Y82iSuzl"},"outputs":[],"source":["new_dir_path = \"st3m_backi2\"\n","base_dir_path = \"bb1d_backi2\"\n","\n","# new_date = \"2021-11-17\"\n","new_date = \"2022-01-10\"\n","\n","#     save to (new) concat dir    #\n","#      1. if dir. not exists, makedir\n","save_path = './candlestick_concated/res_df/'\n","save_path = os.path.join(save_path, new_dir_path, \"concat/cum\", new_date)   \n","# save_path = os.path.join(save_path, new_dir_path, \"concat/non_cum\", new_date)   # row col 하려면 concat 맞음, noncum 사용\n","os.makedirs(save_path, exist_ok=True)\n","\n","\n","#     load ftr list    #\n","# ftr_list = [s for s in os.listdir(os.path.join(save_path, new_dir_path)) if \"ftr\" in s]\n","\n","noncat_path = save_path.replace(\"concat/\", \"noncat/\")\n","ftr_list = [s for s in os.listdir(noncat_path) if \"ftr\" in s]\n","print(ftr_list)\n","# break\n","\n","\n","for key in ftr_list:\n","\n","  if new_date not in key:\n","    continue\n","\n","  try:\n","\n","    #       read from base postfix's directory    #\n","    base_df = pd.read_feather(os.path.join(save_path.replace(new_dir_path, base_dir_path), key), columns=None, use_threads=True).set_index(\"index\")\n","    res_df = pd.read_feather(os.path.join(noncat_path, key), columns=None, use_threads=True).set_index(\"index\")\n","\n","    # print(base_df.head())\n","    # print(res_df.head())\n","    # break\n","\n","    new_res_df = pd.concat([base_df, res_df], axis=1) # df_tot.drop_duplicates()\n","    # new_res_df.head()\n","\n","    droped_new_res_df = new_res_df.loc[:,~new_res_df.columns.duplicated(keep='last')]\n","    # droped_new_res_df.head()\n","    # break\n","\n","    droped_new_res_df.reset_index().to_feather(os.path.join(save_path, key), compression='lz4')\n","\n","    # res_df_dict[key] = res_df\n","    # res_df_dict[key] = droped_new_res_df\n","    print(os.path.join(save_path, key), \"saved !\")\n","  \n","  except Exception as e:\n","    print(\"error occured ! :\", e)\n","  \n","\n","  # sample_cnt -= 1\n","\n","  # if sample_cnt <= 0:\n","  #   break\n"]},{"cell_type":"markdown","metadata":{"id":"WVAKq3i8Suzm"},"source":["### feather ver. (row concat) , database cum 도 호환가능"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"XG2p9OhhSuzm"},"outputs":[],"source":["# save_path = './candlestick_concated/res_df/'        # cols 추가된 cum db 에 new_row's cols 기준으로 합치는 경우\n","save_path = './candlestick_concated/database_bn/'   # ohlcv cum db 만들 경우\n","\n","base_date = '2022-04-25'\n","# new_date = '2022-02-17'\n","new_date = '2022-04-27'\n","\n","# ------ load ftr list ------ #\n","if \"database\" in save_path:\n","  base_dir_path = \"\"\n","  new_dir_path = \"\"\n","  concat_dir = \"\"\n","else:\n","  base_dir_path = \"sar_backi2\"\n","  new_dir_path = \"bb4h_backi2\"  # dir_path 가 base / new 서로 달라질 수 있어서 분할함\n","  concat_dir = \"concat\"\n","\n","base_date_path = os.path.join(save_path, base_dir_path, concat_dir, \"cum\", base_date)      # 기존 cum db 와 new_date db 를 cum 진행\n","# base_date_path = os.path.join(save_path, base_dir_path, concat_dir, \"non_cum\", base_date)    # non_cum db 와 new_date db 를 cum 진행\n","\n","# new_date_path = os.path.join(save_path, new_dir_path, concat_dir, \"cum\", new_date)      # 상황별로 직접 선택해야할 듯\n","new_date_path = os.path.join(save_path, new_dir_path, concat_dir, \"non_cum\", new_date)\n","\n","\n","\n","# ------ save to (new) concat dir ------ #\n","#      1. if dir. not exists, makedir\n","save_path = new_date_path.replace(\"non_cum\", \"cum\")   # non_cum 아니여도 무관\n","os.makedirs(save_path, exist_ok=True)   # noncat / concat 두가지 경우 존재가능할 것\n","# os.makedirs(os.path.join(save_path, dir_path, \"noncat/cum\", new_date), exist_ok=True)\n","\n","\n","ftr_list = [s for s in os.listdir(new_date_path) if \"ftr\" in s]\n","exist_list = os.listdir(save_path)\n","print(ftr_list)\n","# break\n","\n","\n","for key in ftr_list:\n","\n","  if new_date not in key:   # date rejection\n","    continue\n","  if '1m' not in key:  # itv rejection\n","    continue\n","\n","  # if key in exist_list:\n","  #   print(key, \"already exist !\")\n","  #   continue\n","\n","  #       read from base postfix's directory    #\n","  base_df = pd.read_feather(os.path.join(base_date_path, key.replace(new_date, base_date)), columns=None, use_threads=True).set_index(\"index\")   # key 에 new_date 담겨있음\n","  res_df = pd.read_feather(os.path.join(new_date_path, key), columns=None, use_threads=True).set_index(\"index\")\n","\n","  # print(base_df.head())\n","  # print(res_df.head())\n","  # break\n","\n","  new_res_df = pd.concat([base_df, res_df], axis=0) # df_tot.drop_duplicates()\n","  # new_res_df.head()\n","\n","  intersection_cols = res_df.columns.intersection(base_df.columns)\n","\n","  droped_new_res_df = new_res_df.loc[~new_res_df.index.duplicated(keep='last'),intersection_cols]\n","  # droped_new_res_df = new_res_df.loc[:,~new_res_df.columns.duplicated(keep='last')]\n","  # droped_new_res_df = new_res_df.loc[:,~new_res_df.index.duplicated(keep='last')]\n","  # droped_new_res_df.head()\n","  # break  \n","  \n","  print(droped_new_res_df.iloc[[0, -1]])  \n","\n","  # ------------- verify df continuity directly itv by itv ------------- #\n","  true_continue = True\n","  if \"_\" in key:\n","\n","    # interval = key.split(\".\")[0].split(\"_\")[-1] \n","    # itv_num = to_itvnum(interval)\n","\n","    # verified_df = consecutive_df(droped_new_res_df, to_itvnum(interval))\n","    # verified_df.reset_index().to_feather(os.path.join(save_path, key), compression='lz4')\n","\n","    # res_df_dict[key] = res_df\n","    # res_df_dict[key] = droped_new_res_df  \n","\n","    np_idx_ts = np.array(list(map(lambda x: datetime.timestamp(x), droped_new_res_df.index)))\n","    ideal_ts_gap = 60 # * itv_num\n","\n","    for ts_i in range(len(np_idx_ts)):\n","      \n","      if ts_i != 0:\n","        ts_gap = np_idx_ts[ts_i] - np_idx_ts[ts_i - 1]\n","        if ts_gap > ideal_ts_gap or ts_gap < ideal_ts_gap:\n","        # if ts_gap == ideal_ts_gap:\n","          print(droped_new_res_df.index[ts_i - 1])\n","          print(droped_new_res_df.index[ts_i])\n","          # print(ts_gap)\n","          print(\"------------------ unideal ts_gap ------------------\")\n","          true_continue = False\n","\n","    print(\"continuity checked !\")\n","\n","  if true_continue:\n","    droped_new_res_df.reset_index().to_feather(os.path.join(save_path, key), compression='lz4')\n","\n","  print(os.path.join(save_path, key), \"saved !\")\n","  \n"]},{"cell_type":"markdown","metadata":{"id":"L7l5CTJfSuzn"},"source":["### check continuity"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"w-5jn9opBl73"},"outputs":[],"source":["droped_new_res_df = res_df_"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"nGzMGyC3Suzn"},"outputs":[],"source":["# print(droped_new_res_df.columns)\n","\n","print(droped_new_res_df.iloc[[0, -1]])\n","\n","np_idx_ts = np.array(list(map(lambda x: datetime.timestamp(x), droped_new_res_df.index)))\n","\n","print(np_idx_ts[:10])\n","for ts_i in range(len(np_idx_ts)):\n","  \n","  if ts_i != 0:\n","    ts_gap = np_idx_ts[ts_i] - np_idx_ts[ts_i - 1]\n","\n","    if ts_gap > 60 or ts_gap < 60:\n","\n","      print(\"invalid ts_gap found !\")\n","    # if ts_gap == 60:\n","      print(droped_new_res_df.index[ts_i - 1])\n","      print(droped_new_res_df.index[ts_i])\n","      # print(ts_gap)\n","      print()\n"]},{"cell_type":"markdown","metadata":{"id":"x_XGJqBi8Jex"},"source":["### check length of front missing value + middle_data non_missing validity"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"yRNwqVeAu8X8"},"outputs":[],"source":["#       1. new_date 의 시작 timeidx 와 base_date end timeidx 의 최소 days' gap     #\n","#       2. new_date 의 시작 부분 indi. value 는 np.nan 으로 채워질 거기 때문에 계산해야함    #\n","\n","df_count = droped_new_res_df.count()\n","len_missing = df_count.max() - df_count.min()\n","print(len_missing / 1440)\n","\n","#       3. \n","missing_sliced_df = droped_new_res_df.iloc[len_missing:]\n","df_count2 = missing_sliced_df.count()\n","# print(df_count2)\n","print((df_count2.max() - df_count2.min()))    # this value should be zero !\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"AY7E2_hTBsyM"},"outputs":[],"source":["# df_count2.index[df_count2.argmin()]\n","# missing_sliced_df.head(5)\n","\n","stay_missed = np.sum(pd.isnull(missing_sliced_df), axis=0)\n","print(stay_missed)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"p9yqewOw9g33"},"outputs":[],"source":["stay_missed_cols = stay_missed[stay_missed != 0].index\n","\n","for sm_col in stay_missed_cols:\n","  \n","  row_idx = np.argwhere(pd.isnull(missing_sliced_df[sm_col].values))\n","\n","  plt.figure(figsize=(3,3))\n","  plt.plot(row_idx)\n","  plt.ylim(0, len(missing_sliced_df))\n","  plt.title(sm_col)\n","\n","  plt.show()\n"]},{"cell_type":"markdown","metadata":{"id":"MSUY4nnku3s9"},"source":["## legacy"]},{"cell_type":"markdown","metadata":{"id":"epgS5Dksu-HX"},"source":["### mv files"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"aJcVpEdrslA5"},"outputs":[],"source":["df_path = './candlestick_concated/survey_df_v2'\n","files_ = os.listdir(df_path)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"cEKyEYkotFDy"},"outputs":[],"source":["dirs = [file_ for file_ in files_ if not file_.endswith('.ftr')]\n","files = [file_ for file_ in files_ if file_.endswith('.ftr')]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"IgM79tcxtPVZ"},"outputs":[],"source":["dirs"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"M767iRtwtRQP"},"outputs":[],"source":["def move_fn(dir_, file_):\n","  src_path = os.path.join(df_path, file_)\n","  dst_path = os.path.join(df_path, dir_, file_)\n","  shutil.move(src_path, dst_path)\n","  print(\"moved to {}\".format(dst_path))\n","\n","_ = [move_fn('2022-01-10 ETHUSDT_all', file_) for file_ in files if 'eth'.upper() in file_]\n","# sols\n"]},{"cell_type":"markdown","metadata":{"id":"Iy76iO7gztne"},"source":["### move legacy files"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"hMRht32Czwry"},"outputs":[],"source":["# print()\n","cur_dir_list = os.listdir('.')\n","for f in cur_dir_list:\n","  if 'legacy' in f :\n","    # print(f)\n","    if os.path.isdir(current_path + f,):\n","      continue\n","\n","    shutil.move(current_path + f, current_path + 'legacy/' + f)\n","    print(\"moved to\" + current_path + 'legacy/' +  f)"]},{"cell_type":"markdown","metadata":{"id":"5duWn8t4BRyv"},"source":["# IDE platform\n"]},{"cell_type":"markdown","metadata":{"id":"6HOjnZjSgzk1"},"source":["## load ftr_list"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":5219,"status":"ok","timestamp":1662685587678,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"7FPBG5Qqg2jB","outputId":"0b0cda2e-2e99-456b-9d62-942a0494a899"},"outputs":[{"output_type":"stream","name":"stdout","text":["['2022-04-27 ETHUSDT_1m.ftr']\n","2022-04-27 ETHUSDT_1m.ftr loaded !\n","load res_df_ elapsed time : 4.405090093612671\n"]}],"source":["save_path = './candlestick_concated/database_bn/'\n","\n","# dir_path = \"bb1d_backi2\"\n","# date = \"2022-02-17\"\n","# ftr_path = os.path.join(save_path, dir_path, \"concat/cum\", date)\n","\n","# ------ 1T_database ------ #\n","# date = \"2022-04-27\"\n","# ftr_path = os.path.join(save_path, \"non_cum\", date)\n","\n","date = \"2022-04-27\"\n","# date = \"2022-02-17\"\n","ftr_path = os.path.join(save_path, \"cum\", date)\n","\n","# ------ load ftr list ------ #\n","ftr_list = [s for s in os.listdir(ftr_path) if \"ftr\" in s if date in s]\n","print(ftr_list)\n","\n","start_0 = time.time()\n","key = ftr_list[0]  # tempoaray use single key\n","res_df_ = pd.read_feather(os.path.join(ftr_path, key), columns=None, use_threads=True).set_index(\"index\")\n","# print(res_df_.head())\n","print(key, \"loaded !\")\n","print(\"load res_df_ elapsed time :\", time.time() - start_0)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"RQH_l4opEh_O"},"outputs":[],"source":["res_df_.dtypes\n","# res_df_.index[[0, -1]]"]},{"cell_type":"markdown","metadata":{"id":"x2yj2SwAXDLp"},"source":["### edit cols"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"x9wkWw15XCAm","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1662649235837,"user_tz":-540,"elapsed":629,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"fe8f88bc-7e54-4d36-b469-0053db82740a"},"outputs":[{"output_type":"stream","name":"stdout","text":["['cci_5T20']\n"]}],"source":["col_list = list(res_df_.columns)\n","\n","# ------ check target cols ------ #\n","print([col_ for col_ in col_list if 'cci_5T' in col_])\n","\n","# ------ drop ------ #\n","# res_df_.drop([col_ for col_ in col_list if 'open_15T' in col_], inplace=True, axis=1)\n","res_df_.drop([col_ for col_ in col_list if 'cci_5T' in col_], inplace=True, axis=1)\n","# res_df_.drop([col_ for col_ in col_list if '_T40' in col_], inplace=True, axis=1)\n","# res_df_.drop([col_ for col_ in col_list if 'long_base' in col_], inplace=True, axis=1)\n","# res_df_.drop([col_ for col_ in col_list[5:]], inplace=True, axis=1)\n","\n","# ------ replace ------ #\n","# for c_i, col_ in enumerate(col_list):\n","#   if 'basis' in col_:\n","# #   # if col_[-1] in ['m', 'h', 'd', 'H'] and '_' in col_:eTa_5T\n","# #   # if col_[0] in ['h'] and '_' in col_:\n","# #   if 'bir_' in col_:\n","\n","#     col_list[c_i] = col_.replace('basis', 'base')\n","# #     # col_list[c_i] = col_.replace('m', 'T').replace('h', 'H').replace('1T', 'T')\n","# #     # col_list[c_i] = col_.replace('1d', 'D')\n","# #     # col_list[c_i] = col_.replace('eTa_5T', 'ema_5T')\n","# #     # col_list[c_i] = col_list[c_i][1:]\n","# #     # print(col_list[c_i][0])\n","# res_df_.columns = col_list\n","# col_list[-2:] = ['resi_T', 'sup_T']"]},{"cell_type":"markdown","metadata":{"id":"14chOHeXh6JD"},"source":["### lab"]},{"cell_type":"markdown","metadata":{"id":"O87s8_EUakqS"},"source":["#### instant indi."]},{"cell_type":"code","source":["def get_wave_time_ratio(res_df, wave_itv1, wave_period1):\n","\n","  wave_cu_post_idx_fill_ = res_df['wave_cu_post_idx_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy().astype(int)\n","  wave_co_post_idx_fill_ = res_df['wave_co_post_idx_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy().astype(int)\n","\n","  wave_cu_idx_fill_ = res_df['wave_cu_idx_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy().astype(int)\n","  wave_co_idx_fill_ = res_df['wave_co_idx_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy().astype(int)\n","\n","  wave_valid_cu_post_idx_fill_ = np.where(wave_cu_post_idx_fill_ < 0, 0, wave_cu_post_idx_fill_)\n","  wave_valid_co_post_idx_fill_ = np.where(wave_co_post_idx_fill_ < 0, 0, wave_co_post_idx_fill_)\n","\n","  wave_valid_cu_idx_fill_ = np.where(wave_cu_idx_fill_ < 0, 0, wave_cu_idx_fill_)\n","  wave_valid_co_idx_fill_ = np.where(wave_co_idx_fill_ < 0, 0, wave_co_idx_fill_)\n","\n","  res_df['short_wave_time_ratio_{}{}'.format(wave_itv1, wave_period1)] = (wave_valid_co_post_idx_fill_ - wave_valid_cu_post_idx_fill_[wave_valid_co_post_idx_fill_[wave_valid_cu_idx_fill_]]) / (wave_valid_cu_idx_fill_ - wave_valid_co_post_idx_fill_)\n","  res_df['long_wave_time_ratio_{}{}'.format(wave_itv1, wave_period1)] = (wave_valid_cu_post_idx_fill_ - wave_valid_co_post_idx_fill_[wave_valid_cu_post_idx_fill_[wave_valid_co_idx_fill_]]) / (wave_valid_co_idx_fill_ - wave_valid_cu_post_idx_fill_)\n","\n","  return res_df"],"metadata":{"id":"Fg4JnLY6i99D"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def wave_range_cci_v4_1(t_df, wave_period):\n","    t_df = cci_v2(t_df, wave_period)\n","    itv = pd.infer_freq(t_df.index)\n","\n","    cci_ = t_df['cci_{}{}'.format(itv, wave_period)].to_numpy()\n","    b1_cci_ = t_df['cci_{}{}'.format(itv, wave_period)].shift(1).to_numpy()\n","\n","    baseline = 0\n","    band_width = 100\n","    upper_band = baseline + band_width\n","    lower_band = baseline - band_width\n","\n","    data_cols = ['open', 'high', 'low', 'close']\n","    ohlc_list = [t_df[col_].to_numpy() for col_ in data_cols]\n","    open, high, low, close = ohlc_list\n","\n","    # ============ modules ============ #\n","    # ------ define co, cu ------ # <- point missing 과 관련해 정교해아함\n","    cu_bool = (b1_cci_ > upper_band) & (upper_band > cci_)\n","    co_bool = (b1_cci_ < lower_band) & (lower_band < cci_)\n","\n","    return wave_publics_v2(t_df, cu_bool, co_bool, ohlc_list, wave_period)"],"metadata":{"id":"XkrbzNFKZhl0"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def wave_publics_v2(t_df, cu_bool, co_bool, ohlc_list, wave_period):\n","    itv = pd.infer_freq(t_df.index)\n","\n","    len_df = len(t_df)\n","    len_df_range = np.arange(len_df).astype(int)\n","\n","    cu_idx = get_index_bybool(cu_bool, len_df_range)\n","    co_idx = get_index_bybool(co_bool, len_df_range)\n","\n","    open, high, low, close = ohlc_list\n","\n","    cu_fill_idx, co_fill_idx, cu_prime_idx, co_prime_idx, cu_prime_fill_idx, co_prime_fill_idx, valid_cu_bool, valid_co_bool = get_terms_info_v4(\n","        cu_idx, co_idx, len_df, len_df_range)\n","    # cu_fill_idx, co_fill_idx, cu_prime_idx, co_prime_idx, cu_prime_fill_idx, co_prime_fill_idx, \\\n","    #   cu_post_idx, co_post_idx, cu_post_fill_idx, co_post_fill_idx, valid_cu_bool, valid_co_bool = get_terms_info_v5(cu_idx, co_idx, len_df, len_df_range)\n","\n","    # ------ get post_terms ------ #\n","    high_post_terms = np.vstack((co_fill_idx[valid_cu_bool], cu_idx[valid_cu_bool])).T.astype(int)\n","    low_post_terms = np.vstack((cu_fill_idx[valid_co_bool], co_idx[valid_co_bool])).T.astype(int)\n","\n","    high_post_terms_cnt = high_post_terms[:, 1] - high_post_terms[:, 0]\n","    low_post_terms_cnt = low_post_terms[:, 1] - low_post_terms[:, 0]\n","\n","    # ------ get post_idx ------ #\n","    paired_cu_post_idx = high_post_terms[:, 1]  # Todo, 여기는 cross_idx (위에서 vstack 으로 cross_idx 입력함)\n","    paired_co_post_idx = low_post_terms[:, 1]\n","\n","    cu_post_idx = np.full(len_df, np.nan)  # --> Todo, unavailable : not cross_idx\n","    co_post_idx = np.full(len_df, np.nan)\n","\n","    cu_post_idx[paired_cu_post_idx] = paired_cu_post_idx\n","    co_post_idx[paired_co_post_idx] = paired_co_post_idx\n","\n","    cu_post_fill_idx = fill_arr(cu_post_idx)\n","    co_post_fill_idx = fill_arr(co_post_idx)\n","\n","    # ------ get prime_terms ------ # # 기본은 아래 logic 으로 수행하고, update_hl 도 해당 term 구간의 hl 이 더 작거나 클경우 적용 가능할 것\n","    # high_prime_terms = np.vstack((co_prime_fill_idx[valid_cu_bool], cu_idx[valid_cu_bool])).T.astype(int)\n","    # low_prime_terms = np.vstack((cu_prime_fill_idx[valid_co_bool], co_idx[valid_co_bool])).T.astype(int)\n","\n","    # high_prime_terms_cnt = high_prime_terms[:, 1] - high_prime_terms[:, 0]\n","    # low_prime_terms_cnt = low_prime_terms[:, 1] - low_prime_terms[:, 0]\n","\n","    # paired_prime_cu_idx = high_prime_terms[:, 1]\n","    # paired_prime_co_idx = low_prime_terms[:, 1]\n","\n","    # ====== get wave_hl & terms ====== #\n","    wave_high_ = np.full(len_df, np.nan)\n","    wave_low_ = np.full(len_df, np.nan)\n","\n","    wave_highs = np.array([high[iin:iout + 1].max() for iin, iout in high_post_terms])\n","    wave_lows = np.array([low[iin:iout + 1].min() for iin, iout in low_post_terms])\n","\n","    wave_high_[paired_cu_post_idx] = wave_highs\n","    wave_low_[paired_co_post_idx] = wave_lows\n","\n","    wave_high_fill_ = fill_arr(wave_high_)\n","    wave_low_fill_ = fill_arr(wave_low_)\n","\n","    # ------ Todo, update_hl 에 대해서, post_terms_hl 적용 ------ #\n","    wave_high_terms_low_ = np.full(len_df, np.nan)\n","    wave_low_terms_high_ = np.full(len_df, np.nan)\n","\n","    wave_high_terms_lows = np.array([low[iin:iout + 1].min() for iin, iout in high_post_terms])  # for point rejection, Todo, min_max 설정 항상 주의\n","    wave_low_terms_highs = np.array([high[iin:iout + 1].max() for iin, iout in low_post_terms])\n","\n","    wave_high_terms_low_[paired_cu_post_idx] = wave_high_terms_lows\n","    wave_low_terms_high_[paired_co_post_idx] = wave_low_terms_highs\n","\n","    update_low_cu_bool = wave_high_terms_low_ < wave_low_fill_\n","    update_high_co_bool = wave_low_terms_high_ > wave_high_fill_\n","\n","    # ------ term cnt ------ #\n","    wave_high_terms_cnt_ = np.full(len_df, np.nan)\n","    wave_low_terms_cnt_ = np.full(len_df, np.nan)\n","\n","    wave_high_terms_cnt_[paired_cu_post_idx] = high_post_terms_cnt\n","    wave_low_terms_cnt_[paired_co_post_idx] = low_post_terms_cnt\n","\n","    wave_high_terms_cnt_fill_ = fill_arr(wave_high_terms_cnt_)\n","    wave_low_terms_cnt_fill_ = fill_arr(wave_low_terms_cnt_)\n","\n","    # ------ hl_fill 의 prime_idx 를 찾아야함 ------ #\n","    # b1_wave_high_fill_ = pd.Series(wave_high_fill_).shift(1).to_numpy()\n","    # b1_wave_low_fill_ = pd.Series(wave_low_fill_).shift(1).to_numpy()\n","    # wave_high_prime_idx = np.where((wave_high_fill_ != b1_wave_high_fill_) & ~np.isnan(wave_high_fill_), len_df_range, np.nan)\n","    # wave_low_prime_idx = np.where((wave_low_fill_ != b1_wave_low_fill_) & ~np.isnan(wave_low_fill_), len_df_range, np.nan)\n","    #\n","    # high_prime_idx_fill_ = fill_arr(wave_high_prime_idx)\n","    # low_prime_idx_fill_ = fill_arr(wave_low_prime_idx)\n","\n","    # ============ enlist to df_cols ============ #\n","    t_df['wave_high_fill_{}{}'.format(itv, wave_period)] = wave_high_fill_\n","    t_df['wave_low_fill_{}{}'.format(itv, wave_period)] = wave_low_fill_\n","    t_df['wave_high_terms_cnt_fill_{}{}'.format(itv, wave_period)] = wave_high_terms_cnt_fill_\n","    t_df['wave_low_terms_cnt_fill_{}{}'.format(itv, wave_period)] = wave_low_terms_cnt_fill_\n","\n","    t_df['wave_update_low_cu_bool_{}{}'.format(itv, wave_period)] = update_low_cu_bool  # temporary, for plot_check\n","    t_df['wave_update_high_co_bool_{}{}'.format(itv, wave_period)] = update_high_co_bool\n","\n","    t_df['wave_cu_{}{}'.format(itv, wave_period)] = cu_bool  # * ~update_low_cu_bool\n","    t_df['wave_co_{}{}'.format(itv, wave_period)] = co_bool  # * ~update_high_co_bool\n","    \n","    t_df['wave_cu_idx_fill_{}{}'.format(itv, wave_period)] = cu_fill_idx\n","    t_df['wave_co_idx_fill_{}{}'.format(itv, wave_period)] = co_fill_idx\n","\n","    t_df['wave_co_post_idx_{}{}'.format(itv, wave_period)] = co_post_idx  # paired_\n","    t_df['wave_cu_post_idx_{}{}'.format(itv, wave_period)] = cu_post_idx  # paired_\n","    t_df['wave_co_post_idx_fill_{}{}'.format(itv, wave_period)] = co_post_fill_idx\n","    t_df['wave_cu_post_idx_fill_{}{}'.format(itv, wave_period)] = cu_post_fill_idx\n","\n","    # Todo, idx 저장은 sync. 가 맞는 tf_df 에 대하여 적용하여야함\n","    # ------ for roll prev_hl ------ #\n","    # high_post_idx 를 위해 co_prime_idx 입력 = 뜻 : high_term's prime co_idx (high_prime_idx = wave_high 를 만들기 위한 가장 앞단의 co_idx)\n","    t_df['wave_co_prime_idx_{}{}'.format(itv,\n","                                         wave_period)] = co_prime_idx  # co_prime_idx wave_high_prime_idx  # high 갱신을 고려해, prev_hl 는 prime_idx 기준으로 진행\n","    t_df['wave_cu_prime_idx_{}{}'.format(itv,\n","                                         wave_period)] = cu_prime_idx  # cu_prime_idx wave_low_prime_idx  # cu_prime_idx's low 를 사용하겠다라는 의미, 즉 roll_prev 임\n","    t_df['wave_co_prime_idx_fill_{}{}'.format(itv, wave_period)] = co_prime_fill_idx  # co_prime_fill_idx high_prime_idx_fill_\n","    t_df['wave_cu_prime_idx_fill_{}{}'.format(itv, wave_period)] = cu_prime_fill_idx  # cu_prime_fill_idx low_prime_idx_fill_\n","\n","    # ------ for plot_checking ------ #\n","    t_df['wave_cu_marker_{}{}'.format(itv, wave_period)] = get_line(cu_idx, close)\n","    t_df['wave_co_marker_{}{}'.format(itv, wave_period)] = get_line(co_idx, close)\n","\n","    return t_df"],"metadata":{"id":"FdDkSxbaX4AI"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"LyGnAMvLYvOZ"},"source":["#### wave_range"]},{"cell_type":"markdown","metadata":{"id":"O1uu9vQnY5dn"},"source":["##### plot_check"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"YqBXjVPzdccC"},"outputs":[],"source":["i = random.randint(0, len(res_df))\n","# i = 235290, 512385\n","# i = 74470\n","# i = 82533\n","i = 387103\n","i = 370055\n","i = 159000\n","\n","plot_size = 300 # 1500 150\n","# t_df = res_df.iloc[i - plot_size:i + plot_size]\n","t_df = res_df.iloc[i - plot_size:i]\n","a_data = t_df.to_numpy()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"PgaNnempXRd_"},"outputs":[],"source":["wave_itv1, wave_period1 = 'T', 20\n","roll_hl_cnt = 3\n","\n","if wave_itv1 != 'T':\n","    offset = '1h' if wave_itv1 != 'D' else '9h'\n","    htf_df = to_htf(t_df, wave_itv1, offset=offset)  # to_htf 는 ohlc, 4개의 col 만 존재 (현재까지)\n","    # htf_df = wave_range_cci_v3(htf_df, wave_period1)\n","    htf_df = wave_range_dc_envel_v1(htf_df, wave_period1)\n","    \n","\n","    cols = list(htf_df.columns)  # 그냥 다 넣어버리기 (추후 혼란 방지)\n","\n","    valid_high_prime_idx, valid_low_prime_idx, roll_prev_high_idx_arr, roll_prev_low_idx_arr = roll_wave_hl_idx_v5(htf_df, wave_itv1, wave_period1, roll_hl_cnt=roll_hl_cnt)\n","\n","    htf_df = get_roll_wave_data_v2(htf_df, valid_high_prime_idx, roll_prev_high_idx_arr, 'wave_high_fill_{}{}'.format(wave_itv1, wave_period1), roll_hl_cnt)\n","    cols += list(htf_df.columns[-roll_hl_cnt:])\n","\n","    htf_df = get_roll_wave_data_v2(htf_df, valid_low_prime_idx, roll_prev_low_idx_arr, 'wave_low_fill_{}{}'.format(wave_itv1, wave_period1), roll_hl_cnt)\n","    cols += list(htf_df.columns[-roll_hl_cnt:])\n","\n","    htf_df = wave_range_ratio_v4_2(htf_df, wave_itv1, wave_period1, roll_hl_cnt=3)\n","    cols += list(htf_df.columns[-4:])  # wrr 은 4개의 cols\n","\n","    # ------ 필요한 cols 만 join (htf's idx 정보는 ltf 와 sync. 가 맞지 않음 - join 불가함) ------ #\n","    t_df.drop(cols, inplace=True, axis=1, errors='ignore')\n","    t_df = t_df.join(to_lower_tf_v3(t_df, htf_df, cols, backing_i=0), how='inner')\n","\n","else:  \n","  t_df = wave_range_cci_v4(t_df, wave_period1)\n","  # t_df = wave_range_stoch_v1(t_df, wave_period1)\n","  # t_df = wave_range_dc_envel_v1(t_df, wave_period1)\n","\n","  valid_high_prime_idx, valid_low_prime_idx, roll_prev_high_idx_arr, roll_prev_low_idx_arr = roll_wave_hl_idx_v5(t_df, wave_itv1, wave_period1, roll_hl_cnt=roll_hl_cnt)\n","  t_df = get_roll_wave_data_v2(t_df, valid_high_prime_idx, roll_prev_high_idx_arr, 'wave_high_fill_{}{}'.format(wave_itv1, wave_period1), roll_hl_cnt)\n","  t_df = get_roll_wave_data_v2(t_df, valid_low_prime_idx, roll_prev_low_idx_arr, 'wave_low_fill_{}{}'.format(wave_itv1, wave_period1), roll_hl_cnt)\n","\n","  t_df = wave_range_ratio_v4_2(t_df, wave_itv1, wave_period1, roll_hl_cnt=roll_hl_cnt)\n","\n","# t_df = wave_range_v11(t_df, config)\n","# t_df = wave_range_v11_2(t_df, config)\n","# t_df = wave_range_dcbase_v11_3(t_df, config, over_period=2)\n","# t_df = wave_range_cci_v1(t_df, wave_itv1, wave_period1)\n","# t_df = wave_range_v12(t_df, config, ltf_df=None)\n","# t_df = wave_range_v13(t_df, config, ltf_df=None, term_thresh=1)\n","# t_df = wave_range_v14(t_df, config, ltf_df=None, term_thresh1=1, term_thresh2=3)\n","# t_df = wave_range_v15(t_df, config, term_thresh1=2, term_thresh2=3)\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":862},"executionInfo":{"elapsed":2482,"status":"ok","timestamp":1660482394219,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"-Dr_tTk9csFm","outputId":"cbbc017d-db06-458d-ce7d-d3ad9d67a7ad"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1080x1080 with 2 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["plt.style.use(['dark_background', 'fast'])\n","fig = plt.figure(figsize=(15, 15))\n","nrows, ncols = 2, 1\n","gs = gridspec.GridSpec(nrows=nrows,  # row 부터 index 채우고 col 채우는 순서임 (gs_idx)\n","                        ncols=ncols,\n","                        height_ratios=[3, 1]\n","                        )\n","\n","ax = fig.add_subplot(gs[0])\n","\n","# ------ candles ------ #\n","candle_plot(a_data[:, col_idx_dict['ohlc_col_idxs']], ax, alpha=1.0, wickwidth=1.0)\n","# _ = [step_col_plot(a_data[:, params[0]], *params[1:]) for params in col_idx_dict['step_col_info']]\n","\n","len_df = len(t_df)   \n","len_df_range = np.arange(len_df).astype(int)\n","\n","# ============ ============ ============ #\n","# ============ ============ ============ #\n","\n","wave_high_fill_ = t_df['wave_high_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","wave_low_fill_ = t_df['wave_low_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","wave_high_terms_cnt_fill_ = t_df['wave_high_terms_cnt_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","wave_low_terms_cnt_fill_ = t_df['wave_low_terms_cnt_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","\n","wave_cu_idx_ = get_index_bybool(t_df['wave_cu_{}{}'.format(wave_itv1, wave_period1)].to_numpy(), len_df_range)\n","wave_co_idx_ = get_index_bybool(t_df['wave_co_{}{}'.format(wave_itv1, wave_period1)].to_numpy(), len_df_range)\n","# wave_cu_bool_idx_ = get_index_bybool(t_df['wave_cu_bool_{}{}'.format(wave_itv1, wave_period1)].to_numpy(), len_df_range)\n","# wave_co_bool_idx_ = get_index_bybool(t_df['wave_co_bool_{}{}'.format(wave_itv1, wave_period1)].to_numpy(), len_df_range)\n","wave_update_low_cu_bool_idx_ = get_index_bybool(t_df['wave_update_low_cu_bool_{}{}'.format(wave_itv1, wave_period1)].to_numpy(), len_df_range)\n","wave_update_high_co_bool_idx_ = get_index_bybool(t_df['wave_update_high_co_bool_{}{}'.format(wave_itv1, wave_period1)].to_numpy(), len_df_range)\n","\n","wave_cu_prime_idx_ = t_df['wave_cu_prime_idx_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","wave_co_prime_idx_ = t_df['wave_co_prime_idx_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","wave_cu_prime_idx_fill_ = t_df['wave_cu_prime_idx_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","wave_co_prime_idx_fill_ = t_df['wave_co_prime_idx_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","\n","wave_cu_post_idx_ = t_df['wave_cu_post_idx_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","wave_co_post_idx_ = t_df['wave_co_post_idx_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","wave_cu_post_idx_fill_ = t_df['wave_cu_post_idx_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","wave_co_post_idx_fill_ = t_df['wave_co_post_idx_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","\n","wave_cu_marker_ = t_df['wave_cu_marker_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","wave_co_marker_ = t_df['wave_co_marker_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","\n","# high_prime_idx = t_df['wave_high_prime_idx_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","# low_prime_idx = t_df['wave_low_prime_idx_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","# high_prime_idx_fill = t_df['wave_high_prime_idx_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","# low_prime_idx_fill = t_df['wave_low_prime_idx_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","\n","# ============ plot_check ============ #\n","# dc_base_ = t_df['dc_base_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","# plt.step(len_df_range, dc_base_, alpha=1.0, color='cyan', linewidth=1)\n","\n","plt.step(len_df_range, wave_cu_marker_, \"o\", alpha=1.0, color='#ff00ff', markersize=3)\n","plt.step(len_df_range, wave_co_marker_, \"o\", alpha=1.0, color='#00ff00', markersize=3)\n","\n","plt.step(len_df_range, t_df['dc_upper_{}{}'.format(wave_itv1, wave_period1)], color='#ffeb3b')\n","plt.step(len_df_range, t_df['dc_lower_{}{}'.format(wave_itv1, wave_period1)], color='#ffeb3b')\n","\n","# [plt.axvline(int(idx_), color=\"#ff0000\") for idx_ in wave_cu_bool_idx_ if not np.isnan(idx_)]\n","# [plt.axvline(int(idx_), color=\"#0000ff\") for idx_ in wave_co_bool_idx_ if not np.isnan(idx_)]\n","[plt.axvline(int(idx_), color=\"#ff0000\") for idx_ in wave_update_low_cu_bool_idx_ if not np.isnan(idx_)]\n","[plt.axvline(int(idx_), color=\"#0000ff\") for idx_ in wave_update_high_co_bool_idx_ if not np.isnan(idx_)]\n","\n","# [plt.axvline(int(idx_), color=\"#ff00ff\") for idx_ in wave_cu_idx_ if not np.isnan(idx_)]\n","# [plt.axvline(int(idx_), color=\"#00ff00\") for idx_ in wave_co_idx_ if not np.isnan(idx_)]\n","\n","# [plt.axvline(int(idx_), color=\"#00ff00\") for idx_ in wave_high_prime_idx if not np.isnan(idx_)]\n","# [plt.axvline(int(idx_), color=\"#ff00ff\") for idx_ in wave_low_prime_idx if not np.isnan(idx_)]\n","\n","plt.step(len_df_range, wave_high_fill_, \"*\", alpha=1.0, color='#00ff00', markersize=6)\n","plt.step(len_df_range, wave_low_fill_, \"*\", alpha=1.0, color='#ff00ff', markersize=6)\n","\n","# ------ data check in gs[0] ------ #\n","plt.axvline(wave_cu_post_idx_fill_[230], color='r')\n","plt.axvline(wave_cu_prime_idx_fill_[230])\n","\n","plt.xlim(0, len_df)\n","\n","plt.subplot(gs[1])\n","\n","# --- cci --- #\n","cci_ = t_df['cci_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","plt.step(len_df_range, cci_, alpha=1.0, color='yellow', linewidth=2)\n","plt.axhline(100, color=\"#ffffff\")\n","plt.axhline(-100, color=\"#ffffff\")\n","\n","# --- stoch --- #\n","# stoch_ = t_df['stoch_{}{}33'.format(wave_itv1, wave_period1)].to_numpy()\n","# plt.step(len_df_range, stoch_, alpha=1.0, color='yellow', linewidth=2)\n","# plt.axhline(67, color=\"#ffffff\")\n","# plt.axhline(33, color=\"#ffffff\")\n","\n","[plt.axvline(int(idx_), color=\"#ff00ff\") for idx_ in wave_cu_idx_ if not np.isnan(idx_)]\n","[plt.axvline(int(idx_), color=\"#00ff00\") for idx_ in wave_co_idx_ if not np.isnan(idx_)]   # long 이라서 초록색임\n","\n","# plt.step(len_df_range, wave_high_terms_cnt_fill_, alpha=1.0, color='yellow', linewidth=2)\n","# plt.step(len_df_range, wave_low_terms_cnt_fill_, alpha=1.0, color='yellow', linewidth=2)\n","# plt.step(len_df_range, wave_high_terms_cnt_fill_, \"*\", alpha=1.0, color='#00ff00', markersize=6)\n","# plt.step(len_df_range, wave_low_terms_cnt_fill_, \"*\", alpha=1.0, color='#ff00ff', markersize=6)\n","\n","\n","plt.xlim(0, len_df)  # for sync. with gs[0]\n","\n","plt.show()"]},{"cell_type":"markdown","metadata":{"id":"c2yVTn1tnxMn"},"source":["###### data_window"]},{"cell_type":"code","source":["# print(valid_high_prime_idx)  # = valid_co_prime_idx\n","# print(roll_prev_high_idx_arr)   # = roll_prev_co_idx_arr\n","print(valid_low_prime_idx)  # = valid_co_prime_idx\n","print(roll_prev_low_idx_arr)   # = roll_prev_co_idx_arr"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"6bra-Br3lq1h","executionInfo":{"status":"ok","timestamp":1660483201485,"user_tz":-540,"elapsed":351,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"8c90e368-24c7-439e-9733-567d4848859a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[ 39  45 124 164]\n","[[ 39  45 124]\n"," [ 45 124 164]]\n"]}]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":345,"status":"ok","timestamp":1660484147094,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"0DgdFydfB1f-","outputId":"1677cb32-6a71-4292-b49a-204f7da8ed20"},"outputs":[{"output_type":"stream","name":"stdout","text":["145.0\n","239.0\n"]}],"source":["idx = 239\n","# print(wave_cu_post_idx_fill_[idx])\n","# print(wave_co_prime_idx_fill_[idx - 1])\n","# print(wave_co_post_idx_fill_[idx - 1])\n","# print(wave_co_prime_idx_fill_[idx])\n","print(wave_co_post_idx_fill_[int(wave_cu_post_idx_fill_[idx])])\n","print(wave_co_idx_[idx])\n","\n","# print(len(t_df))\n","# len(wave_co_prime_idx_fill_)"]},{"cell_type":"code","source":["wave_co_idx_[~np.isnan(wave_co_idx_)]"],"metadata":{"id":"7zLNu-8gjeJ1"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"zj_d5wsfDzf_"},"outputs":[],"source":["roll_hl_cnt = 3\n","high_prime_idx = t_df['wave_high_prime_idx_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","low_prime_idx = t_df['wave_low_prime_idx_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","\n","valid_high_prime_idx = high_prime_idx[~np.isnan(high_prime_idx)].astype(int)  # roll_high 를 위한 prime_idx\n","valid_low_prime_idx = low_prime_idx[~np.isnan(low_prime_idx)].astype(int)  # roll_low 를 위한 prime_idx\n","\n","roll_high_idx_arr = np.array([valid_high_prime_idx[idx_ + 1 - roll_hl_cnt:idx_ + 1] for idx_ in range(len(valid_high_prime_idx)) if\n","                              idx_ + 1 >= roll_hl_cnt])  # cnt 수를 만족시키기 위해 idx 제한\n","roll_low_idx_arr = np.array(\n","    [valid_low_prime_idx[idx_ + 1 - roll_hl_cnt:idx_ + 1] for idx_ in range(len(valid_low_prime_idx)) if idx_ + 1 >= roll_hl_cnt])"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Z-EokTzIqb-T"},"outputs":[],"source":["%timeit -n1 -r1 wave_range_v10(res_df[-100000:], period1, ltf_df=None) # 23.7 s per loop\n","%timeit -n1 -r1 wave_range_v11(res_df[-100000:], period1, ltf_df=None) # 574 ms per loop"]},{"cell_type":"markdown","metadata":{"id":"Q_1wJTcRYpm8"},"source":["##### legacy"]},{"cell_type":"code","source":["def get_next_fibo_gap(x):\n","  if 0 < x < 0.214:\n","    return -0.786\n","  elif 0.214 < x < 0.382:\n","    return -0.618\n","  elif 0.382 < x < 0.5:\n","    return -0.5\n","  elif 0.5 < x < 0.618:\n","    return -0.382\n","  elif 0.618 < x < 0.764:\n","    return -0.236\n","  elif 0.764 < x < 1:\n","    return 0\n","  else:\n","    return np.nan # 일단은, wrr_32 < 1 만 허용키로.\n","\n","\n","def get_next_fibo_gap2(x):\n","  if 0 < x < 0.214:\n","    return -0.618\n","  elif 0.214 < x < 0.382:\n","    return -0.5\n","  elif 0.382 < x < 0.5:\n","    return -0.382\n","  elif 0.5 < x < 0.618:\n","    return -0.236\n","  elif 0.618 < x < 0.764:\n","    return 0\n","  elif 0.764 < x < 1:\n","    return 0\n","  else:\n","    return np.nan # 일단은, wrr_32 < 1 만 허용키로."],"metadata":{"id":"Bmp7faPhzydp"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"02DcTVB2cYuR"},"source":["##### dump"]},{"cell_type":"code","source":["roll_hl_cnt = 3\n","wave_itv = pd.infer_freq(t_df.index)\n","wave_period = config.tr_set.wave_period\n","\n","len_df = len(t_df)\n","\n","high_prime_idx = t_df['wave_high_prime_idx_{}{}'.format(wave_itv, wave_period)].to_numpy()   # cu_post_idx\n","low_prime_idx = t_df['wave_low_prime_idx_{}{}'.format(wave_itv, wave_period)].to_numpy()    \n","\n","valid_high_prime_idx = high_prime_idx[~np.isnan(high_prime_idx)].astype(int)  # roll_high 를 위한 prime_idx\n","valid_low_prime_idx = low_prime_idx[~np.isnan(low_prime_idx)].astype(int)  # roll_low 를 위한 prime_idx\n","\n","roll_high_idx_arr = np.array([valid_high_prime_idx[idx_ + 1 - roll_hl_cnt:idx_ + 1] for idx_ in range(len(valid_high_prime_idx)) if idx_ + 1 >= roll_hl_cnt])  # cnt 수를 만족시키기 위해 idx 제한\n","roll_low_idx_arr = np.array([valid_low_prime_idx[idx_ + 1 - roll_hl_cnt:idx_ + 1] for idx_ in range(len(valid_low_prime_idx)) if idx_ + 1 >= roll_hl_cnt])\n"],"metadata":{"id":"fjGcs9ngkh5s"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["t_df = cci_v2(t_df, wave_period)\n","\n","cci_ = t_df['cci_{}{}'.format(itv, wave_period)].to_numpy()\n","b1_cci_ = t_df['cci_{}{}'.format(itv, wave_period)].shift(1).to_numpy()\n","\n","band_width = 100\n","upper_band = band_width\n","lower_band = -band_width\n","\n","len_df = len(t_df)\n","len_df_range = np.arange(len_df).astype(int)\n","\n","data_cols = ['open', 'high', 'low', 'close']\n","open, high, low, close = [t_df[col_].to_numpy() for col_ in data_cols]\n","# b1_close = t_df.close.shift(itv_num).to_numpy()\n","\n","# ============ modules ============ #\n","# ------ define co, cu ------ # <- point missing 과 관련해 정교해아함\n","cu_bool = (b1_cci_ > upper_band) & (upper_band > cci_)\n","co_bool = (b1_cci_ < lower_band) & (lower_band < cci_)\n","\n","cu_idx = get_index_bybool(cu_bool, len_df_range)\n","co_idx = get_index_bybool(co_bool, len_df_range)\n","\n","cu_fill_idx, co_fill_idx, cu_prime_idx, co_prime_idx, cu_prime_fill_idx, co_prime_fill_idx, valid_cu_bool, valid_co_bool = get_terms_info_v4(\n","    cu_idx, co_idx, len_df, len_df_range)\n","\n","# ------ get post_terms ------ #\n","high_post_terms = np.vstack((co_fill_idx[valid_cu_bool], cu_idx[valid_cu_bool])).T.astype(int)\n","low_post_terms = np.vstack((cu_fill_idx[valid_co_bool], co_idx[valid_co_bool])).T.astype(int)\n","\n","high_post_terms_cnt = high_post_terms[:, 1] - high_post_terms[:, 0]\n","low_post_terms_cnt = low_post_terms[:, 1] - low_post_terms[:, 0]\n","\n","paired_post_cu_idx = high_post_terms[:, 1]\n","paired_post_co_idx = low_post_terms[:, 1]\n","\n","# ------ get prime_terms ------ # # 기본은 아래 logic 으로 수행하고, update_hl 도 해당 term 구간의 hl 이 더 작거나 클경우 적용 가능할 것\n","# high_prime_terms = np.vstack((co_prime_fill_idx[valid_cu_bool], cu_idx[valid_cu_bool])).T.astype(int)\n","# low_prime_terms = np.vstack((cu_prime_fill_idx[valid_co_bool], co_idx[valid_co_bool])).T.astype(int)\n","\n","# high_prime_terms_cnt = high_prime_terms[:, 1] - high_prime_terms[:, 0]\n","# low_prime_terms_cnt = low_prime_terms[:, 1] - low_prime_terms[:, 0]\n","\n","# paired_prime_cu_idx = high_prime_terms[:, 1]\n","# paired_prime_co_idx = low_prime_terms[:, 1]\n","\n","# ====== get wave_hl & terms ====== #\n","wave_high_ = np.full(len_df, np.nan)\n","wave_low_ = np.full(len_df, np.nan)\n","\n","wave_highs = np.array([high[iin:iout + 1].max() for iin, iout in high_post_terms])\n","wave_lows = np.array([low[iin:iout + 1].min() for iin, iout in low_post_terms])\n","\n","wave_high_[paired_post_cu_idx] = wave_highs\n","wave_low_[paired_post_co_idx] = wave_lows\n","\n","wave_high_fill_ = fill_arr(wave_high_)\n","wave_low_fill_ = fill_arr(wave_low_)\n","\n","# ------ Todo, update_hl 에 대해서, post_terms_hl 적용 ------ #\n","wave_high_terms_low_ = np.full(len_df, np.nan)\n","wave_low_terms_high_ = np.full(len_df, np.nan)\n","\n","wave_high_terms_lows = np.array([low[iin:iout + 1].min() for iin, iout in high_post_terms])  # for point rejection, Todo, min_max 설정 항상 주의\n","wave_low_terms_highs = np.array([high[iin:iout + 1].max() for iin, iout in low_post_terms])\n","\n","wave_high_terms_low_[paired_post_cu_idx] = wave_high_terms_lows\n","wave_low_terms_high_[paired_post_co_idx] = wave_low_terms_highs\n","\n","update_low_cu_bool = wave_high_terms_low_ < wave_low_fill_\n","update_high_co_bool = wave_low_terms_high_ > wave_high_fill_\n","\n","# ------ term cnt ------ #\n","wave_high_terms_cnt_ = np.full(len_df, np.nan)\n","wave_low_terms_cnt_ = np.full(len_df, np.nan)\n","\n","wave_high_terms_cnt_[paired_post_cu_idx] = high_post_terms_cnt\n","wave_low_terms_cnt_[paired_post_co_idx] = low_post_terms_cnt\n","\n","wave_high_terms_cnt_fill_ = fill_arr(wave_high_terms_cnt_)\n","wave_low_terms_cnt_fill_ = fill_arr(wave_low_terms_cnt_)\n","\n","# ------ hl_fill 의 prime_idx 를 찾아야함 ------ #\n","# b1_wave_high_fill_ = pd.Series(wave_high_fill_).shift(1).to_numpy()\n","# b1_wave_low_fill_ = pd.Series(wave_low_fill_).shift(1).to_numpy()\n","# wave_high_prime_idx = np.where((wave_high_fill_ != b1_wave_high_fill_) & ~np.isnan(wave_high_fill_), len_df_range, np.nan)\n","# wave_low_prime_idx = np.where((wave_low_fill_ != b1_wave_low_fill_) & ~np.isnan(wave_low_fill_), len_df_range, np.nan)\n","#\n","# high_prime_idx_fill_ = fill_arr(wave_high_prime_idx)\n","# low_prime_idx_fill_ = fill_arr(wave_low_prime_idx)\n","\n","# ============ enlist to df_cols ============ #\n","t_df['wave_high_fill_{}{}'.format(itv, wave_period)] = wave_high_fill_\n","t_df['wave_low_fill_{}{}'.format(itv, wave_period)] = wave_low_fill_\n","t_df['wave_high_terms_cnt_fill_{}{}'.format(itv, wave_period)] = wave_high_terms_cnt_fill_\n","t_df['wave_low_terms_cnt_fill_{}{}'.format(itv, wave_period)] = wave_low_terms_cnt_fill_\n","\n","# ------ for roll prev_hl ------ #\n","# high_post_idx 를 위해 co_prime_idx 입력\n","t_df['wave_high_prime_idx_{}{}'.format(itv, wave_period)] = co_prime_idx # co_prime_idx wave_high_prime_idx  # high 갱신을 고려해, prev_hl 는 prime_idx 기준으로 진행\n","t_df['wave_low_prime_idx_{}{}'.format(itv, wave_period)] = cu_prime_idx # cu_prime_idx wave_low_prime_idx  # cu_prime_idx's low 를 사용하겠다라는 의미, 즉 roll_prev 임\n","\n","# ------ for first_high ------ #\n","t_df['wave_high_prime_idx_fill_{}{}'.format(itv, wave_period)] = co_prime_fill_idx # co_prime_fill_idx high_prime_idx_fill_\n","t_df['wave_low_prime_idx_fill_{}{}'.format(itv, wave_period)] = cu_prime_fill_idx # cu_prime_fill_idx low_prime_idx_fill_\n","\n","# ------ for plot_checking ------ #\n","t_df['wave_cu_bool_{}{}'.format(itv, wave_period)] = cu_bool  # temporary, for plot_check\n","t_df['wave_co_bool_{}{}'.format(itv, wave_period)] = co_bool\n","t_df['wave_cu_{}{}'.format(itv, wave_period)] = cu_bool * ~update_low_cu_bool\n","t_df['wave_co_{}{}'.format(itv, wave_period)] = co_bool * ~update_high_co_bool\n","t_df['wave_cu_marker_{}{}'.format(itv, wave_period)] = get_line(cu_idx, close)\n","t_df['wave_co_marker_{}{}'.format(itv, wave_period)] = get_line(co_idx, close)\n","# t_df['update_low_cu_bool_{}{}'.format(itv, wave_period)] = update_low_cu_bool\n","# t_df['update_high_co_bool_{}{}'.format(itv, wave_period)] = update_high_co_bool\n","\n","if itv != 'T':\n","    join_cols = np.arange(-15, 0, 1).astype(int)  # wave vars. + wave_unit's col\n","    res_df.drop(t_df.columns[join_cols], inplace=True, axis=1, errors='ignore')\n","    try:\n","        res_df = res_df.join(to_lower_tf_v3(res_df, t_df, join_cols, backing_i=0), how='inner')\n","    except Exception as e:\n","        print(\"error in wave_range()'s join() :\", e)\n","\n","    return res_df\n","\n","else:\n","    return t_df"],"metadata":{"id":"CLYKs7ItkgIa"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Go7ARIUhfC1g"},"outputs":[],"source":["\n","\n","def get_roll_wave_data_v2(valid_prime_idx, roll_idx_arr, len_df, data, roll_prev_hl_cnt):\n","\n","    roll_data = pd.DataFrame(np.full((len_df, roll_prev_hl_cnt), np.nan))\n","    roll_data.iloc[valid_prime_idx[roll_prev_hl_cnt:], :] = data[roll_idx_arr]  # 제한된 idx 를 제외한 row 에 roll_hl 입력\n","\n","    return roll_data.ffill().to_numpy()\n","\n","def roll_wave_hl_v5(t_df, config, roll_prev_hl_cnt=3):\n","  \n","    wave_itv = pd.infer_freq(t_df.index)\n","    wave_period = config.tr_set.wave_period\n","\n","    len_df = len(t_df)\n","\n","    high_prime_idx = t_df['wave_high_prime_idx_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","    low_prime_idx = t_df['wave_low_prime_idx_{}{}'.format(wave_itv, wave_period)].to_numpy()    \n","\n","    valid_high_prime_idx = high_prime_idx[~np.isnan(high_prime_idx)].astype(int)  # roll_high 를 위한 prime_idx\n","    valid_low_prime_idx = low_prime_idx[~np.isnan(low_prime_idx)].astype(int)  # roll_low 를 위한 prime_idx\n","\n","    roll_prev_high_idx_arr = np.array([valid_high_prime_idx[idx_ - roll_prev_hl_cnt:idx_] for idx_ in range(len(valid_high_prime_idx)) if idx_ >= roll_prev_hl_cnt])  # cnt 수를 만족시키기 위해 idx 제한\n","    roll_prev_low_idx_arr = np.array([valid_low_prime_idx[idx_ - roll_prev_hl_cnt:idx_] for idx_ in range(len(valid_low_prime_idx)) if idx_ >= roll_prev_hl_cnt])\n","\n","    return valid_high_prime_idx, valid_low_prime_idx, roll_prev_high_idx_arr, roll_prev_low_idx_arr"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"pgA8QqyXZ66o"},"outputs":[],"source":["t_df[roll_cols].tail(100)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"wF7fKJ3mOhaf"},"outputs":[],"source":["data_col = 'wave_high_fill_{}{}'.format(wave_itv1, wave_period1)\n","data = htf_df[data_col].to_numpy()\n","len_htf_df = len(htf_df)\n","\n","\n","roll_data = pd.DataFrame(index=htf_df.index, data=np.full((len_htf_df, roll_hl_cnt), np.nan))\n","roll_data.iloc[valid_high_prime_idx[roll_hl_cnt - 1:], :] = data[roll_prev_high_idx_arr]  # 제한된 idx 를 제외한 row 에 roll_hl 입력\n","\n","# roll_data.ffill()\n","htf_df[roll_cols] = roll_data.ffill()\n","htf_df[roll_cols]\n","\n","# htf_df[roll_cols] = np.nan\n","# htf_df[roll_cols].iloc[valid_high_prime_idx[roll_hl_cnt - 1:]] = data[roll_prev_high_idx_arr]  # 제한된 idx 를 제외한 row 에 roll_hl 입력\n","\n","# htf_df[roll_cols] = htf_df[roll_cols].ffill().to_numpy()\n","\n","# valid_high_prime_idx\n","# np.sum(~np.isnan(roll_high))\n","# htf_df[roll_cols]\n","# roll_prev_low_idx_arr"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"3vHLGont-BFe"},"outputs":[],"source":["# t_df\n","to_lower_tf_v2(res_df, t_df, join_cols)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Mh3w2s-j34Zs"},"outputs":[],"source":["wave_post_highs = np.array([high[iin:iout + 1].max() for iin, iout in high_post_terms])\n","wave_post_lows = np.array([low[iin:iout + 1].min() for iin, iout in low_post_terms])\n","\n","# print(len(paired_cu_idx))\n","# print(len(wave_post_highs))\n","# print(len(cu_bool))\n","\n","update_paired_cu_bool = (cu_bool * (wave_high_terms_low_ < wave_low_fill_))[paired_cu_idx]\n","update_paired_cu_idx = paired_cu_idx[update_paired_cu_bool]\n","wave_high_[update_paired_cu_idx] = wave_post_highs[update_paired_cu_bool]\n","\n","update_paired_co_bool = (co_bool * (wave_low_terms_high_ > wave_high_fill_))[paired_co_idx]\n","update_paired_co_idx = paired_co_idx[update_paired_co_bool]\n","wave_low_[update_paired_co_idx] = wave_post_lows[update_paired_co_bool]\n","\n","wave_high_fill2_ = fill_arr(wave_high_)\n","wave_low_fill2_ = fill_arr(wave_low_)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":3,"status":"ok","timestamp":1651799326382,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"eQ06-kWq4m6F","outputId":"5c5df956-4fbd-4aa4-e1d6-dc5d0c23ac19"},"outputs":[{"name":"stdout","output_type":"stream","text":["11\n","11\n"]}],"source":["# wave_post_highs\n","# update_cu_bool = (cu_bool * (wave_high_terms_low_ < wave_low_fill_))[paired_cu_idx]\n","# print(paired_cu_idx[update_cu_bool])\n","# print(paired_cu_idx)\n","print(len(update_paired_cu_idx))\n","print(len(wave_post_highs[update_paired_cu_bool]))\n","# print(high_prime_terms[:, 1])\n","# print(high_post_terms[:, 1])"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"SUFmr9Z_kcCN"},"outputs":[],"source":["cu_idx = get_index_bybool(cu_bool, len_df_range)\n","co_idx = get_index_bybool(co_bool, len_df_range)\n","\n","cu_fill_idx = fill_arr(cu_idx)\n","co_fill_idx = fill_arr(co_idx)\n","\n","notnan_cu_bool = ~np.isnan(cu_idx)\n","notnan_co_bool = ~np.isnan(co_idx)\n","\n","# ------ 생략된 idx 에 대한 prime_idx 탐색 ------ #\n","high_bool = cu_fill_idx < co_fill_idx  # 이렇게 해야 high_terms[:, 1] 이 cu_idx 가 나옴\n","low_bool = co_fill_idx < cu_fill_idx\n","\n","high_terms_vec = get_index_bybool(high_bool, len_df_range)\n","low_terms_vec = get_index_bybool(low_bool, len_df_range) # -> low_terms\n","\n","high_terms_list = using_clump(high_terms_vec)\n","low_terms_list = using_clump(low_terms_vec)\n","\n","valid_cu_prime_idx = np.array([terms.min() for terms in low_terms_list])\n","valid_co_prime_idx = np.array([terms.min() for terms in high_terms_list])\n","\n","cu_prime_idx = np.full(len_df, np.nan)\n","co_prime_idx = np.full(len_df, np.nan)\n","\n","cu_prime_idx[valid_cu_prime_idx] = valid_cu_prime_idx\n","co_prime_idx[valid_co_prime_idx] = valid_co_prime_idx\n","\n","cu_prime_fill_idx = fill_arr(cu_prime_idx)\n","co_prime_fill_idx = fill_arr(co_prime_idx)\n","\n","# ------ get co, cu terms_v2 ------ # # 기본은 아래 logic 으로 수행하고, update_hl 도 해당 term 구간의 hl 이 더 작거나 클경우 적용 가능할 것\n","valid_cu_bool = notnan_cu_bool * ~np.isnan(co_fill_idx) * ~np.isnan(co_prime_fill_idx)\n","valid_co_bool = notnan_co_bool * ~np.isnan(cu_fill_idx) * ~np.isnan(cu_prime_fill_idx)\n","\n","high_post_terms = np.vstack((co_fill_idx[valid_cu_bool], cu_idx[valid_cu_bool])).T.astype(int)\n","low_post_terms = np.vstack((cu_fill_idx[valid_co_bool], co_idx[valid_co_bool])).T.astype(int)\n","\n","high_terms_cnt = high_post_terms[:, 1] - high_post_terms[:, 0] \n","low_terms_cnt = low_post_terms[:, 1] - low_post_terms[:, 0] \n","\n","high_prime_terms = np.vstack((co_prime_fill_idx[valid_cu_bool], cu_idx[valid_cu_bool])).T.astype(int)\n","low_prime_terms = np.vstack((cu_prime_fill_idx[valid_co_bool], co_idx[valid_co_bool])).T.astype(int)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"_3pOQtt2ttfk"},"outputs":[],"source":["# co_prime_idx\n","# co_prime_fill_idx\n","high_prime_terms"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":6,"status":"ok","timestamp":1651756811396,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"kKaD1fK3WPRP","outputId":"bbe470f3-17d0-4029-97e9-2fb383a0c752"},"outputs":[{"data":{"text/plain":["array([nan,  2.,  7.,  2.,  4.,  2.,  7.,  5.,  4.,  6.,  9.,  2.,  5., 11., 14.])"]},"execution_count":79,"metadata":{},"output_type":"execute_result"}],"source":["#  get_index_bybool(notnan_cu_bool, len_df_range)\n","valid_cu_idx = cu_idx[notnan_cu_bool]\n","valid_shift_cu_idx = pd.Series(valid_cu_idx).shift(1).to_numpy()\n","valid_co_idx = co_idx[notnan_co_bool]\n","valid_shift_co_idx = pd.Series(valid_co_idx).shift(1).to_numpy()\n","\n","valid_cu_idx - valid_shift_cu_idx\n","valid_co_idx - valid_shift_co_idx"]},{"cell_type":"markdown","metadata":{"id":"1MNVIExLULhJ"},"source":["#### legacy"]},{"cell_type":"markdown","metadata":{"id":"EOXQbXixiQcK"},"source":["##### volume_profile"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"7pFuazxpgx9B"},"outputs":[],"source":["session_df = res_df_.iloc[-1440:] # 0.159 -> 0.024 (14400 -> 1440)\n","volume = session_df['volume'].to_numpy()\n","close = session_df['close'].to_numpy()\n","# px.histogram(session_df, x='volume', y='close', nbins=150, orientation='h').show()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"SoPJkiyKiXLM"},"outputs":[],"source":["kde_factor = 0.05\n","num_samples = 100\n","\n","start_0 = time.time()\n","kde = stats.gaussian_kde(close,weights=volume,bw_method=kde_factor)\n","kdx = np.linspace(close.min(),close.max(),num_samples)\n","kdy = kde(kdx)\n","ticks_per_sample = (kdx.max() - kdx.min()) / num_samples\n","print(\"ticks_per_sample :\", ticks_per_sample)  # sample 당 가격\n","print(\"kdy elapsed_time :\", time.time() - start_0)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"mK2jBddAxJ14"},"outputs":[],"source":["peaks,_ = signal.find_peaks(kdy)\n","pkx = kdx[peaks]\n","pky = kdy[peaks]\n","\n","plt.figure(figsize=(10,5))\n","# plt.hist(close, bins=num_samples, weights=volume, alpha=.8, color='#1592e6')\n","# plt.plot(kdx, kdy, color='white')\n","# plt.plot(pkx, pky, 'bo', color='yellow')\n","plt.plot(kdy, kdx, color='white')\n","plt.plot(pky, pkx, 'bo', color='yellow')\n","plt.show()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"a8tpQZCy0SO1"},"outputs":[],"source":["pkx"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"gfA946s8UgS0"},"outputs":[],"source":["# ------ vp 의 indi. 화가 필요함 -> point 설정 ------ #\n","# 1. 4 level 은 미리 만들어놓는게 맞는걸로 보임 -> 추종하는 function 이 많음 (utils_tr, ep_out ...)\n","#   a. 4 level 에 국한하는게 아니라, 모든 peaks 에 대해 levels 설정\n","#   b. 각 session 별로 peak_list 가 주어질 것\n","#     i. prev_data 사용해야하는점 주의 (session vp 는 future_data)"]},{"cell_type":"markdown","metadata":{"id":"3T-9FwWFXR4f"},"source":["###### prominence_info"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"RmBt2agljClE"},"outputs":[],"source":["start_0 = time.time()\n","min_prom = kdy.max() * 0.0\n","pipsize = 0.01\n","max_width_pips = 20\n","# width_range=(1, max_width_pips * pipsize / ticks_per_sample)\n","width_range= max_width_pips * pipsize / ticks_per_sample\n","peaks, peak_props = signal.find_peaks(kdy, prominence=min_prom, width=width_range)\n","\n","peak_x = kdx[peaks]\n","peak_y = kdy[peaks]\n","# ------ prominence lines ------ #\n","left_base = peak_props['left_bases']\n","right_base = peak_props['right_bases']\n","line_x = peak_x\n","line_y0 = peak_y\n","line_y1 = peak_y # - peak_props['prominences']\n","print(\"prom_line elapsed_time :\", time.time() - start_0)\n","\n","\n","for x, y0, y1 in zip(line_x, line_y0, line_y1):\n","    fig.add_shape(type='line',\n","        xref='x', yref='y',\n","        # x0=x, y0=y0, x1=x, y1=y1,\n","        x0=x, y0=0, x1=x, y1=y1,\n","        line=dict(\n","            color='red',\n","            width=2,\n","        )\n","    )\n","\n","# ------ width ------ #\n","left_ips = peak_props['left_ips']\n","right_ips = peak_props['right_ips']\n","# width_x0 = kdx.min() + (left_ips * ticks_per_sample)\n","# width_x1 = kdx.min() + (right_ips * ticks_per_sample)\n","width_x0 = kdx.min() + (left_base * ticks_per_sample)\n","width_x1 = kdx.min() + (right_base * ticks_per_sample)\n","\n","# int_from = kdx.min() + (left_base * ticks_per_sample)\n","# int_to = kdx.min() + (right_base * ticks_per_sample)\n","# [kde.integrate_box_1d(x0, x1) for x0, x1 in zip(int_from, int_to)]\n","\n","width_y = peak_props['width_heights']\n","\n","for x0, x1, y in zip(width_x0, width_x1, width_y):\n","    fig.add_shape(type='line',\n","        xref='x', yref='y',\n","        x0=x0, y0=y, x1=x1, y1=y,\n","        line=dict(\n","            color='red',\n","            width=2,\n","        )\n","    )\n","fig.show()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"zqj944n-WzyZ"},"outputs":[],"source":["# peaks  # ndarray\n","# kdx  # ndarray\n","# kdy  # ndarray\n","# kdx.min()\n","left_base * ticks_per_sample\n","# volume"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Rvqv0RGojo9h"},"outputs":[],"source":["print(peak_y)\n","print(peak_props['prominences'])\n","peak_props"]},{"cell_type":"markdown","metadata":{"id":"c2729DJ6h720"},"source":["##### imb."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Rucj-iepiR_-"},"outputs":[],"source":["t_df = res_df_.iloc[-120:-100]\n","a_data = t_df.to_numpy()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ktm1aB-Bh7GH"},"outputs":[],"source":["plt.style.use(['dark_background', 'fast'])\n","fig = plt.figure(figsize=(15, 9))\n","nrows, ncols = 1, 1\n","gs = gridspec.GridSpec(nrows=nrows,  # row 부터 index 채우고 col 채우는 순서임 (gs_idx)\n","                        ncols=ncols\n","                        # height_ratios=[3, 1]\n","                        )\n","\n","ax = fig.add_subplot(gs[0])\n","\n","# ------ candles ------ #\n","candle_plot(a_data[:, col_idx_dict['ohlc_col_idxs']], ax, alpha=1.0, wickwidth=1.0)\n","_ = [step_col_plot(a_data[:, params[0]], *params[1:]) for params in col_idx_dict['step_col_info']]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"jMQBhQ1Ljt5Y"},"outputs":[],"source":["def imb_ratio_v4(df, itv):\n","\n","  itv_num = to_itvnum(itv)\n","\n","  close = df['close_{}'.format(itv)].to_numpy()\n","  open = df['open_{}'.format(itv)].to_numpy()\n","\n","  b1_close = df['close_{}'.format(itv)].shift(itv_num).to_numpy()\n","  b1_open = df['open_{}'.format(itv)].shift(itv_num).to_numpy()\n","  b1_high = df['high_{}'.format(itv)].shift(itv_num).to_numpy()\n","  b1_low = df['low_{}'.format(itv)].shift(itv_num).to_numpy()\n","\n","  body_range = abs(close - open)\n","  b1_body_range = abs(b1_close - b1_open)\n","\n","  df['body_rel_ratio_{}'.format(itv)] = body_range / b1_body_range\n","\n","  short_body_range = np.where(close <= b1_low, body_range, b1_body_range)\n","  long_body_range = np.where(close >= b1_high, body_range, b1_body_range)\n","\n","  # 추후에 통계 측정해야함 -> bir 에 따른 개별 trader 의 epout / tpep 이라던가 => short 에 양봉은 취급안함 (why use np.nan)\n","  df['short_ir_{}'.format(itv)] = np.where(close < open, (b1_low - close) / short_body_range, np.nan) # close < open & close < b1_low\n","  df['long_ir_{}'.format(itv)] = np.where(close > open, (close - b1_high) / long_body_range, np.nan) # close > open & close > b1_high\n","\n","  return"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"I1Vq_BiKpY3P"},"outputs":[],"source":["def imb_ratio_v3(df, itv):\n","\n","  itv_num = to_itvnum(itv)\n","\n","  # high = df['high_{}'.format(itv)].to_numpy()\n","  # low = df['low_{}'.format(itv)].to_numpy()\n","  # candle_range = high - low\n","\n","  close = df['close_{}'.format(itv)].to_numpy()\n","  open = df['open_{}'.format(itv)].to_numpy()\n","\n","  b1_close = df['close_{}'.format(itv)].shift(itv_num).to_numpy()\n","  b1_open = df['open_{}'.format(itv)].shift(itv_num).to_numpy()\n","  b1_high = df['high_{}'.format(itv)].shift(itv_num).to_numpy()\n","  b1_low = df['low_{}'.format(itv)].shift(itv_num).to_numpy()\n","\n","  body_range = abs(close - open)\n","  b1_body_range = abs(b1_close - b1_open)\n","\n","  df['body_rel_ratio_{}'.format(itv)] = body_range / b1_body_range\n","\n","  short_body_ratio = np.where(close <= b1_low, body_range, b1_body_range)\n","  long_body_range = np.where(close >= b1_high, body_range, b1_body_range)\n","\n","  # 추후에 통계 측정해야함 -> bir 에 따른 개별 trader 의 epout / tpep 이라던가 => short 에 양봉은 취급안함 (why use np.nan)\n","  df['short_ir_{}'.format(itv)] = np.where(close < open, (b1_low - close) / body_range, np.nan) # close < open & close < b1_low\n","  df['long_ir_{}'.format(itv)] = np.where(close > open, (close - b1_high) / body_range, np.nan) # close > open & close > b1_high\n","\n","  return"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"mtnMUkhwkdrE"},"outputs":[],"source":["imb_ratio(t_df, \"5T\")\n","# imb_ratio_v3(t_df, \"5T\")\n","# imb_ratio_v4(t_df, \"5T\")\n","\n","t_df.tail(100).short_ir_5T  # .461871\n","# t_df.iloc[:, -10:]\n","# t_df.dtypes"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"RVUs1YE_pgBI"},"outputs":[],"source":["# imb_ratio(t_df, \"5T\")\n","# imb_ratio_v3(t_df, \"5T\")\n","imb_ratio_v4(t_df, \"5T\")\n","\n","t_df.tail(100).short_ir_5T  # .461871\n","# t_df.iloc[:, -10:]\n","# t_df.dtypes"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"bieHiKjBkuFL"},"outputs":[],"source":["# ------ rtc 1, 0 개념 ------ #\n","# short_rtc_1 = close\n","# short_rtc_0 = b1_low\n","\n","# long_rtc_1 = close\n","# long_rtc_0 = b1_high\n","\n","# rtc 로 활용하려면, col 로 추가해야할 것 -> 추가할만한 col_name 은 아님\n","# 1. h_candle 인 경우 -> ?\n","#   a. h_candle_v3 먹이고, open_{}.shift(num_itv).to_numpy() 진행 -> ex. res_df['close_{}'.format(hc_itv)].shift(itv_num).to_numpy() "]},{"cell_type":"code","execution_count":null,"metadata":{"id":"3X6bMXJIjPYy"},"outputs":[],"source":["# 1. 현재 종가 - 이전 고가 = imb_range (long)\n","long_imb_range = t_df.close - t_df.high.shift(1)\n","# 2. 이전 저가 - 현재 종가 - imb_range (short)\n","short_imb_range = t_df.low.shift(1) - t_df.close"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"q1nEA19v7Qpj"},"outputs":[],"source":["from math import floor\n","\n","\n","def _calc_dev(base_price, price):\n","    return 100 * (price - base_price) / base_price\n","\n","\n","def zigzag(highs, lows, depth=10, dev_threshold=5):\n","    def pivots(src_raw, length, isHigh):\n","        src = list(reversed(src_raw))\n","        bar_index = list(range(len(src)))\n","        for start in range(0, len(src)):\n","            if start + 2 * length + 1 > len(src) - 1:\n","                return\n","            p = 0\n","            if length < len(src) - start:\n","                p = src[start + length]\n","            if length == 0:\n","                yield 0, p\n","            else:\n","                isFound = True\n","                for i in range(start, start + length):\n","                    if isHigh and src[i] > p:\n","                        isFound = False\n","                    if not isHigh and src[i] < p:\n","                        isFound = False\n","                for i in range(start + length + 1, start + 2 * length + 1):\n","                    if isHigh and src[i] >= p:\n","                        isFound = False\n","                    c = not isHigh and src[i] <= p\n","                    if c:\n","                        isFound = False\n","                if isFound:\n","                    yield (bar_index[start + length], p)\n","                else:\n","                    yield None, None\n","\n","    data_highs = [x for x in pivots(highs, floor(depth / 2), True) if x[0]]\n","    data_lows = [x for x in pivots(lows, floor(depth / 2), False) if x[0]]\n","\n","    raw_pairs = []\n","\n","    for i, (ind, p) in enumerate(data_highs):\n","        lows_d = sorted([(ind_l, p_l) for ind_l, p_l in data_lows if ind > ind_l], key=lambda x: x[0])\n","        if lows_d:\n","            lows = lows_d[-1]\n","\n","            if abs(_calc_dev(lows[1], p)) >= dev_threshold:\n","                raw_pairs.append(\n","                    ((ind, p),\n","                     (lows[0], lows[1]))\n","                )\n","\n","    result = []\n","\n","    for (i_h, p_h),(i_l, p_l) in raw_pairs:\n","        if not result:\n","            result.append(((i_h, p_h),(i_l, p_l)))\n","            continue\n","\n","        if i_l == result[-1][1][0]:\n","            if p_h > result[-1][0][1]:\n","                result = result[:-1]\n","            else:\n","                continue\n","\n","        result.append(((i_h, p_h),(i_l, p_l)))\n","\n","    return result\n","\n","# highs, lows = t_df.high.to_numpy(), t_df.low.to_numpy()\n","# zigzag(highs, lows, depth=5, dev_threshold=5)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"fGlmdyb97j4Q"},"outputs":[],"source":["t_df = res_df_.iloc[-120:]\n","a_data = t_df.to_numpy()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ropzIp0wUPAA"},"outputs":[],"source":["# import plotly.express as px\n","# import plotly.graph_objects as go\n","\n","def get_dist_plot(c, v, kx, ky):\n","    fig = go.Figure()\n","    fig.add_trace(go.Histogram(name='Vol Profile', x=c, y=v, nbinsx=150, \n","                               histfunc='sum', histnorm='probability density',\n","                               marker_color='#B0C4DE'))\n","    fig.add_trace(go.Scatter(name='KDE', x=kx, y=ky, mode='lines', marker_color='#D2691E'))    \n","\n","    peaks,_ = signal.find_peaks(kdy)\n","    pkx = kdx[peaks]\n","    pky = kdy[peaks]\n","    pk_marker_args=dict(size=10, color='black')\n","    fig.add_trace(go.Scatter(name=\"Peaks\", x=pkx, y=pky, mode='markers', marker=pk_marker_args))\n","    fig.show()\n","\n","    return fig"]},{"cell_type":"markdown","metadata":{"id":"RZJ6uIA_VcJs"},"source":["##### instant."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"nLWAP1Cl2Hvu"},"outputs":[],"source":["def wave_range_ratio(res_df, config, bb_itv, bb_period):\n","\n","  wave_itv = pd.infer_freq(res_df.index)\n","  wave_period = config.tr_set.wave_period\n","\n","  bb_upper_ = res_df['bb_upper_{}{}'.format(bb_itv, bb_period)].to_numpy()\n","  bb_lower_ = res_df['bb_lower_{}{}'.format(bb_itv, bb_period)].to_numpy()\n","  \n","  cu_prime_idx_fill_ = res_df['wave_cu_prime_idx_fill_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","  co_prime_idx_fill_ = res_df['wave_co_prime_idx_fill_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","\n","  cu_bb_range = get_line(co_prime_idx_fill_, bb_upper_) - get_line(co_prime_idx_fill_, bb_lower_)  # cu 에서 co_prime 의 bb_range 사용\n","  co_bb_range = get_line(cu_prime_idx_fill_, bb_upper_) - get_line(cu_prime_idx_fill_, bb_lower_)\n","\n","  wave_range = res_df['wave_high_fill_{}{}'.format(wave_itv, wave_period)].to_numpy() - res_df['wave_low_fill_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","  \n","  res_df['cu_wrr_{}{}'.format(wave_itv, wave_period)] = wave_range / cu_bb_range   # for cu (currently, long)\n","  res_df['co_wrr_{}{}'.format(wave_itv, wave_period)] = wave_range / co_bb_range\n","\n","  return res_df"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"H_zPYIshbZgP"},"outputs":[],"source":["# Todo, future_data\n","def enough_space(res_df, itv, period):\n","\n","  dc_upper_ = res_df['dc_upper_{}{}'.format(itv, period)].to_numpy()\n","  dc_base_ = res_df['dc_base_{}{}'.format(itv, period)].to_numpy()\n","  dc_lower_ = res_df['dc_lower_{}{}'.format(itv, period)].to_numpy()  \n","  high_ = res_df['high_{}'.format(config.loc_set.point.tf_entry)].to_numpy()\n","  low_ = res_df['low_{}'.format(config.loc_set.point.tf_entry)].to_numpy()\n","\n","  half_dc_gap = dc_upper_ - dc_base_\n","\n","  res_df['cu_es_{}{}'.format(itv, period)] = (low_ - dc_lower_) / half_dc_gap\n","  res_df['co_es_{}{}'.format(itv, period)] = (dc_upper_ - high_) / half_dc_gap\n","\n","  return res_df"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"o3IUBc59VR5D"},"outputs":[],"source":["# Todo, future_data\n","def candle_range_ratio(res_df, c_itv, bb_itv, bb_period):\n","\n","  itv_num = to_itvnum(c_itv)\n","\n","  b1_bb_upper_ = res_df['bb_upper_{}{}'.format(bb_itv, bb_period)].shift(itv_num).to_numpy()\n","  b1_bb_lower_ = res_df['bb_lower_{}{}'.format(bb_itv, bb_period)].shift(itv_num).to_numpy()\n","  bb_range = b1_bb_upper_ - b1_bb_lower_   # <-- h_candle's open_idx 의 bb_gap 사용\n","\n","  high_ = res_df['high_{}'.format(c_itv)].to_numpy()\n","  low_ = res_df['low_{}'.format(c_itv)].to_numpy()\n","  candle_range = high_ - low_  # 부호로 양 / 음봉 구분 (양봉 > 0)\n","  \n","  res_df['crr_{}'.format(c_itv)] = candle_range / bb_range\n","\n","  return res_df"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"u3yFd8Dcok5m"},"outputs":[],"source":["def body_rel_ratio(res_df, c_itv):\n","\n","  itv_num = to_itvnum(c_itv)\n","  \n","  b1_close_ = res_df['close_{}'.format(c_itv)].shift(itv_num).to_numpy()\n","  b1_open_ = res_df['open_{}'.format(c_itv)].shift(itv_num).to_numpy()\n","  b1_body_range = abs(b1_close_ - b1_open_)\n","\n","  close_ = res_df['close_{}'.format(c_itv)].to_numpy()\n","  open_ = res_df['open_{}'.format(c_itv)].to_numpy()\n","  body_range = abs(close_ - open_)\n","  \n","  res_df['body_rel_ratio_{}'.format(c_itv)] = body_range / b1_body_range\n","\n","  return res_df\n","\n","def dc_over_body_ratio(res_df, c_itv, dc_itv, dc_period):\n","  close_ = res_df['close_{}'.format(c_itv)].to_numpy()\n","  open_ = res_df['open_{}'.format(c_itv)].to_numpy()\n","  body_range = abs(close_ - open_)\n","  \n","  dc_upper_ = res_df['dc_upper_{}{}'.format(dc_itv, dc_period)].to_numpy()\n","  dc_lower_ = res_df['dc_lower_{}{}'.format(dc_itv, dc_period)].to_numpy() \n","\n","  res_df['dc_upper_{}{}_br'.format(dc_itv, dc_period)] = (close_ - dc_upper_) / body_range\n","  res_df['dc_lower_{}{}_br'.format(dc_itv, dc_period)] = (dc_lower_ - close_) / body_range\n","\n","  return res_df"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"JWj02LLGbnji"},"outputs":[],"source":["def candle_pumping_ratio_v2(res_df, c_itv, dc_itv, period):\n","\n","  res_df = dc_line_v3(res_df, dc_itv, dc_period=period)\n","\n","  dc_upper_ = res_df['dc_upper_{}{}'.format(dc_itv, period)].to_numpy()\n","  dc_lower_ = res_df['dc_lower_{}{}'.format(dc_itv, period)].to_numpy()\n","  dc_range = dc_upper_ - dc_lower_\n"," \n","  open_ = res_df['open_{}'.format(c_itv)].to_numpy()\n","  close_ = res_df['close_{}'.format(c_itv)].to_numpy()\n","  body = close_ - open_  # 부호로 양 / 음봉 구분 (양봉 > 0)\n","  \n","  res_df['cppr_{}'.format(c_itv)] = body / dc_range\n","\n","  return res_df\n","\n","\n","# Todo, future_data\n","def candle_pumping_ratio(res_df, c_itv, bb_itv, period):\n","\n","  itv_num = to_itvnum(c_itv)\n","\n","  # 여기에도 v2 처럼 bb_indi. 추가 (자동화)\n","\n","  b1_bb_upper_ = res_df['bb_upper_{}{}'.format(bb_itv, period)].shift(itv_num).to_numpy()\n","  b1_bb_lower_ = res_df['bb_lower_{}{}'.format(bb_itv, period)].shift(itv_num).to_numpy()\n","  bb_range = b1_bb_upper_ - b1_bb_lower_\n","\n","  open_ = res_df['open_{}'.format(c_itv)].to_numpy()\n","  close_ = res_df['close_{}'.format(c_itv)].to_numpy()\n","  body = close_ - open_  # 부호로 양 / 음봉 구분 (양봉 > 0)\n","  \n","  res_df['cppr_{}'.format(c_itv)] = body / bb_range\n","\n","  return res_df\n","\n","\n","def pumping_ratio(res_df, config, itv, period1, period2):\n","\n","  bb_lower_5T = res_df['bb_lower_5T'].to_numpy()\n","  bb_upper_5T = res_df['bb_upper_5T'].to_numpy()\n","  bb_range = bb_upper_5T - bb_lower_5T\n","\n","  selection_id = config.selection_id\n","  \n","  res_df['short_ppr_{}'.format(selection_id)] = res_df['short_tp_gap_{}'.format(selection_id)].to_numpy() / get_line(res_df['short_wave_high_idx_{}{}{}'.format(itv, period1, period2)].to_numpy(), bb_range)\n","  res_df['long_ppr_{}'.format(selection_id)] = res_df['long_tp_gap_{}'.format(selection_id)].to_numpy() / get_line(res_df['long_wave_low_idx_{}{}{}'.format(itv, period1, period2)].to_numpy(), bb_range)\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"OpkclLSzazZ-"},"outputs":[],"source":["def wave_body_ratio(res_df_, itv, period):\n","  dc_upper_ = res_df_['dc_upper_{}{}'.format(itv, period)].to_numpy()\n","  dc_lower_ = res_df_['dc_lower_{}{}'.format(itv, period)].to_numpy()\n","  close_ = res_df_['close_{}'.format(itv)].to_numpy()\n","  open_ = res_df_['open_{}'.format(itv)].to_numpy()\n","\n","  dc_range = dc_upper_ - dc_lower_\n","  body_range = abs(close_ - open_)\n","\n","  res_df_['wave_body_ratio'] = body_range / dc_range\n","  res_df_['dc_upper_body_ratio'] = (np.maximum(close_, open_) - dc_upper_) / body_range\n","  res_df_['dc_lower_body_ratio'] = (dc_lower_) - np.minimum(close_, open_) / body_range\n","\n","  return"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"0-zzitQRbnz8"},"outputs":[],"source":["# res_df_['wave_body_ratio'].tail(200)\n","\n","itv = 'H'\n","period = 5\n","wave_body_ratio(res_df_, itv, period)"]},{"cell_type":"markdown","metadata":{"id":"qsyPhNR8yP1c"},"source":["##### dump"]},{"cell_type":"markdown","metadata":{"id":"xpyP5t8Ht_pE"},"source":["### calc recursive indi's min_period"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"N1Hbm4OA4Tkk"},"outputs":[],"source":["ticker_prcn = get_precision_by_price(res_df.close.iloc[-1]) + 2\n","\n","target_len = 300000\n","slice_len_list = list(range(50, 10000, 100))\n","slice_len_list.insert(0, target_len)\n","\n","start_0 = time.time()\n","# prev_int_, prev_pnts_ = None, None\n","offset = 1\n","\n","for sl_idx, sample_len in enumerate(slice_len_list):\n","\n","  sample_df = res_df.iloc[-sample_len -offset:-offset]\n","  sample_len2 = sample_len\n","\n","  # --------- input using indi.s --------- #\n","  # res = ema_v0(sample_df['close'], 190)\n","  res = rsi(sample_df, 14)\n","\n","    #    to_htf()    #\n","  # df_5T = to_htf(sample_df, itv_='5T', offset='1h')\n","  # sample_len2 = len(df_5T)\n","\n","  # # --------- input using htf_indi. --------- #\n","  # res = ema(df_5T['close'], 195)\n","  # -------------------------------------- #\n","\n","  res_last_row = res.iloc[-1]\n","  if pd.isnull(res_last_row):\n","    continue\n","\n","  # print(res_last_row)\n","  # break\n","\n","  # sample_df = sample_df.join(to_lower_tf_v2(sample_df, df_5T, [-1]), how='inner')\n","\n","\n","  #   자리수 분할 계산    #\n","  int_, points_ = str(res_last_row).split('.')\n","  pnts_ = points_[:ticker_prcn]\n","\n","  if sl_idx == 0:\n","    target_int_ = int_\n","    target_pnts_ = pnts_\n","    print(\"target {} ({}) -> {} {}\".format(sample_len, sample_len2, int_, points_))\n","\n","  else:\n","    if target_int_ == int_ and target_pnts_ == pnts_:\n","      # print(sample_len, \"({})\".format(sample_len2), '->', int_, pnts_, end='\\n\\n')\n","      print(\"{} ({}) -> {} {}\\n\".format(sample_len, sample_len2, int_, points_))\n","      break\n","\n","print(time.time() - start_0)  # (1301)(1361)(1301)"]},{"cell_type":"markdown","metadata":{"id":"rrIGjmUzqU-D"},"source":["## import utils & config"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"SeJan_0t95yL"},"outputs":[],"source":["frame_ver = \"0114_htf\"\n","ID_arr = np.array(['v3', 'v5_2'])\n","\n","utils_public_name = \"{}.utils.{}_utils_public\".format(strat_pkg, frame_ver)\n","utils_public_lib = importlib.import_module(utils_public_name)\n","utils_public = utils_public_lib   # temporary\n","\n","u_name_list = [\"{}.utils.{}_utils_{}\".format(strat_pkg, frame_ver, id_) for id_ in ID_arr]\n","utils_arr = np.array([importlib.import_module(u_name) for u_name in u_name_list])\n","\n","config_name_list = [\"{}_config_{}.json\".format(frame_ver, id_) for id_ in ID_arr]\n","cfg_path_list = [os.path.join(current_path, strat_pkg, \"config\", name_) for name_ in config_name_list]\n","cfg_file_list = [open(cfg_path) for cfg_path in cfg_path_list]\n","config_arr = np.array([EasyDict(json.load(cfg_)) for cfg_ in cfg_file_list])\n","\n","# ------ opened files should be closed --> 닫지 않으면 reopen 시 error occurs ------ #\n","_ = [cfg_.close() for cfg_ in cfg_file_list]\n","show_plot = 1   # idep's var - do not touch"]},{"cell_type":"markdown","metadata":{"id":"leSQlImg4_9L"},"source":["### utils_"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"CB2yZdQ95Cdg"},"outputs":[],"source":["# import pandas as pd\n","# import numpy as np\n","# import logging\n","\n","def enlist_tr(res_df, config, np_timeidx, mode='OPEN', show_detail=True):\n","\n","    # ================== enlist wave_unit ================== #\n","    selection_id = config.selection_id\n","    \n","    len_df = len(res_df)\n","    len_df_range = np.arange(len_df)\n","\n","    # if config.tr_set.check_hlm == 2:  # 동일한 param 으로도 p2_hlm 시도를 충분히 할 수 있음 (csdbox 와 같은)\n","    #   assert not (wave_itv1 == wave_itv2 and wave_period1 == wave_period2)\n","\n","    # ------------ get wave_features ------------ #      \n","    wave_itv1 = config.tr_set.wave_itv1\n","    wave_period1 = config.tr_set.wave_period1\n","    wave_itv2 = config.tr_set.wave_itv2\n","    wave_period2 = config.tr_set.wave_period2\n","    tc_period = config.tr_set.tc_period\n","    roll_hl_cnt = 3\n","\n","    roll_highs1 = [res_df['wave_high_fill_{}{}_-{}'.format(wave_itv1, wave_period1, cnt_ + 1)].to_numpy() for cnt_ in reversed(range(roll_hl_cnt))]\n","    roll_lows1 = [res_df['wave_low_fill_{}{}_-{}'.format(wave_itv1, wave_period1, cnt_ + 1)].to_numpy() for cnt_ in reversed(range(roll_hl_cnt))]\n","\n","    wave_high_fill1_ = res_df['wave_high_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","    wave_low_fill1_ = res_df['wave_low_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","\n","    roll_highs2 = [res_df['wave_high_fill_{}{}_-{}'.format(wave_itv2, wave_period2, cnt_ + 1)].to_numpy() for cnt_ in reversed(range(roll_hl_cnt))]\n","    roll_lows2 = [res_df['wave_low_fill_{}{}_-{}'.format(wave_itv2, wave_period2, cnt_ + 1)].to_numpy() for cnt_ in reversed(range(roll_hl_cnt))]\n","\n","    wave_high_fill2_ = res_df['wave_high_fill_{}{}'.format(wave_itv2, wave_period2)].to_numpy()\n","    wave_low_fill2_ = res_df['wave_low_fill_{}{}'.format(wave_itv2, wave_period2)].to_numpy()\n","    \n","    # res_df['short_wave_spread_fill_{}{}'.format(wave_itv1, wave_period1)] = roll_highs1[-1] / wave_low_fill1_\n","    # res_df['long_wave_spread_fill_{}{}'.format(wave_itv1, wave_period1)] = wave_high_fill1_ / roll_lows1[-1]\n","    res_df['short_wave_spread_fill_{}{}'.format(wave_itv1, wave_period1)] = wave_high_fill1_ / wave_low_fill1_\n","    res_df['long_wave_spread_fill_{}{}'.format(wave_itv1, wave_period1)] = wave_high_fill1_ / wave_low_fill1_\n","\n","    # ------------ enlist tr_unit ------------ #\n","    # cu's roll_high_[:, -1] = prev_high & cu's roll_low_[:, -1] = current_low\n","    # co's roll_low_[:, -1] = prev_low & co's roll_high_[:, -1] = current_high\n","    res_df['short_tp_1_{}'.format(selection_id)] = wave_low_fill1_   # wave_low_fill_ b2_low_5T\n","    res_df['short_tp_0_{}'.format(selection_id)] = roll_highs1[-1]   # roll_highs1[-1] wave_high_fill1_  # roll_high_[:, -2]\n","    res_df['long_tp_1_{}'.format(selection_id)] = wave_high_fill1_   # wave_high_fill_ b2_high_5T\n","    res_df['long_tp_0_{}'.format(selection_id)] = roll_lows1[-1]    # roll_lows1[-1]  wave_low_fill1_   # roll_low_[:, -2]\n","\n","    res_df['short_ep1_1_{}'.format(selection_id)] = wave_low_fill1_   # b2_low_5T\n","    res_df['short_ep1_0_{}'.format(selection_id)] = wave_high_fill1_  # roll_high_[:, -2]\n","    res_df['long_ep1_1_{}'.format(selection_id)] = wave_high_fill1_   # b2_high_5T\n","    res_df['long_ep1_0_{}'.format(selection_id)] = wave_low_fill1_    # roll_low_[:, -2]\n","\n","    # --> p2's ep use p1's ep\n","    # res_df['short_ep2_1_{}'.format(selection_id)] = wave_low_fill1_  # wave_low_fill2_   # b2_low_5T\n","    # res_df['short_ep2_0_{}'.format(selection_id)] = wave_high_fill1_ # wave_high_fill2_  # roll_high_[:, -2]\n","    # res_df['long_ep2_1_{}'.format(selection_id)] = wave_high_fill1_  # wave_high_fill2_   # b2_high_5T\n","    # res_df['long_ep2_0_{}'.format(selection_id)] = wave_low_fill1_   # wave_low_fill2_    # roll_low_[:, -2]\n","\n","    # --> out use p1's low, (allow prev_low as out for p1_hhm only)\n","    # res_df['short_out_1_{}'.format(selection_id)] = wave_low_fill1_   # wave_low_fill1_   # wave_low_fill2_   # b2_low_5T\n","    # res_df['short_out_0_{}'.format(selection_id)] = wave_high_fill1_ # roll_highs1[-1] if not config.tr_set.check_hlm else wave_high_fill1_   # roll_highs2[-1]  # roll_high_[:, -2]\n","    # res_df['long_out_1_{}'.format(selection_id)] = wave_high_fill1_   # wave_high_fill1_   # wave_high_fill2_   # b2_high_5T\n","    # res_df['long_out_0_{}'.format(selection_id)] = wave_low_fill1_ # roll_lows1[-1] if not config.tr_set.check_hlm else wave_low_fill1_   # roll_lows2[-1]    # roll_low_[:, -2]\n","    \n","    # below codes exist for p2_wave\n","    res_df['short_ep2_1_{}'.format(selection_id)] = wave_low_fill2_   # b2_low_5T\n","    res_df['short_ep2_0_{}'.format(selection_id)] = wave_high_fill2_  # roll_high_[:, -2]\n","    res_df['long_ep2_1_{}'.format(selection_id)] = wave_high_fill2_   # b2_high_5T\n","    res_df['long_ep2_0_{}'.format(selection_id)] = wave_low_fill2_    # roll_low_[:, -2]\n","\n","    res_df['short_out_1_{}'.format(selection_id)] = wave_low_fill2_\n","    res_df['short_out_0_{}'.format(selection_id)] = roll_highs2[-1]\n","    res_df['long_out_1_{}'.format(selection_id)] = wave_high_fill2_\n","    res_df['long_out_0_{}'.format(selection_id)] = roll_lows2[-1]\n","    \n","\n","    # --- inversion --- #\n","    if config.pos_set.short_inversion or config.pos_set.long_inversion:\n","        res_df.rename({short_tp_1_: long_tp_1_, long_tp_1_: short_tp_1_}, axis=1, inplace=True)\n","        res_df.rename({short_tp_0_: long_tp_0_, long_tp_0_: short_tp_0_}, axis=1, inplace=True)\n","        res_df.rename({short_epout_1_: long_epout_1_, long_epout_1_: short_epout_1_}, axis=1, inplace=True)\n","        res_df.rename({short_epout_0_: long_epout_0_, long_epout_0_: short_epout_0_}, axis=1, inplace=True)\n","\n","    res_df['short_tp_gap_{}'.format(selection_id)] = abs(res_df['short_tp_1_{}'.format(selection_id)] - res_df['short_tp_0_{}'.format(selection_id)])\n","    res_df['long_tp_gap_{}'.format(selection_id)] = abs(res_df['long_tp_1_{}'.format(selection_id)] - res_df['long_tp_0_{}'.format(selection_id)])\n","    res_df['short_ep1_gap_{}'.format(selection_id)] = abs(res_df['short_ep1_1_{}'.format(selection_id)] - res_df['short_ep1_0_{}'.format(selection_id)])\n","    res_df['long_ep1_gap_{}'.format(selection_id)] = abs(res_df['long_ep1_1_{}'.format(selection_id)] - res_df['long_ep1_0_{}'.format(selection_id)])\n","\n","    res_df['short_out_gap_{}'.format(selection_id)] = abs(res_df['short_out_1_{}'.format(selection_id)] - res_df['short_out_0_{}'.format(selection_id)])\n","    res_df['long_out_gap_{}'.format(selection_id)] = abs(res_df['long_out_1_{}'.format(selection_id)] - res_df['long_out_0_{}'.format(selection_id)])\n","    res_df['short_ep2_gap_{}'.format(selection_id)] = abs(res_df['short_ep2_1_{}'.format(selection_id)] - res_df['short_ep2_0_{}'.format(selection_id)])\n","    res_df['long_ep2_gap_{}'.format(selection_id)] = abs(res_df['long_ep2_1_{}'.format(selection_id)] - res_df['long_ep2_0_{}'.format(selection_id)])\n","\n","\n","    data_cols = ['open', 'high', 'low', 'close']  # Todo - public_indi 이전에 해야할지도 모름 # 'close', 'haopen', 'hahigh', 'halow', 'haclose'\n","    open, high, low, close = [res_df[col_].to_numpy() for col_ in data_cols]\n","\n","    # ================== point ================== #     \n","    short_open_res1 = np.ones(len_df) #.astype(object)\n","    long_open_res1 = np.ones(len_df)  #.astype(object)\n","    short_open_res2 = np.ones(len_df) #.astype(object)\n","    long_open_res2 = np.ones(len_df)  #.astype(object)\n","    \n","    # ------------ wave_point ------------ #\n","    notnan_cu = ~pd.isnull(res_df['wave_cu_{}{}'.format(wave_itv1, wave_period1)].to_numpy())  # isnull for object\n","    notnan_co = ~pd.isnull(res_df['wave_co_{}{}'.format(wave_itv1, wave_period1)].to_numpy())\n","    notnan_cu2 = ~pd.isnull(res_df['wave_cu_{}{}'.format(wave_itv2, wave_period2)].to_numpy())  # isnull for object\n","    notnan_co2 = ~pd.isnull(res_df['wave_co_{}{}'.format(wave_itv2, wave_period2)].to_numpy())\n","\n","    # short_open_res1 *= res_df['wave_cu_{}{}'.format(wave_itv1, wave_period1)].to_numpy().astype(bool) * notnan_cu  # object로 변환되는 경우에 대응해, bool 로 재정의\n","    # long_open_res1 *= res_df['wave_co_{}{}'.format(wave_itv1, wave_period1)].to_numpy().astype(bool) * notnan_co  # np.nan = bool type 으로 True 임..\n","    short_open_res1 *= res_df['short_tc_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","    long_open_res1 *= res_df['long_tc_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","    short_open_res2 *= res_df['wave_cu_{}{}'.format(wave_itv2, wave_period2)].to_numpy().astype(bool) * notnan_cu2  # object로 변환되는 경우에 대응해, bool 로 재정의\n","    long_open_res2 *= res_df['wave_co_{}{}'.format(wave_itv2, wave_period2)].to_numpy().astype(bool) * notnan_co2  # np.nan = bool type 으로 True 임..\n","    # short_open_res2 *= res_df['short_tc_{}{}'.format(wave_itv2, tc_period)].to_numpy()\n","    # long_open_res2 *= res_df['long_tc_{}{}'.format(wave_itv2, tc_period)].to_numpy()\n","\n","    if show_detail:\n","      sys_log.warning(\"wave_point\")\n","      sys_log.warning(\"np.sum(short_open_res1 == 1) : {}\".format(np.sum(short_open_res1 == 1)))\n","      sys_log.warning(\"np.sum(long_open_res1 == 1) : {}\".format(np.sum(long_open_res1 == 1)))  \n","      sys_log.warning(\"np.sum(short_open_res2 == 1) : {}\".format(np.sum(short_open_res2 == 1)))\n","      sys_log.warning(\"np.sum(long_open_res2 == 1) : {}\".format(np.sum(long_open_res2 == 1)))  \n","    \n","    # ------ reject wave_update_hl ------ #\n","    notnan_update_low_cu = ~pd.isnull(res_df['wave_update_low_cu_bool_{}{}'.format(wave_itv1, wave_period1)].to_numpy())\n","    notnan_update_high_co = ~pd.isnull(res_df['wave_update_high_co_bool_{}{}'.format(wave_itv1, wave_period1)].to_numpy())\n","    notnan_update_low_cu2 = ~pd.isnull(res_df['wave_update_low_cu_bool_{}{}'.format(wave_itv2, wave_period2)].to_numpy())\n","    notnan_update_high_co2 = ~pd.isnull(res_df['wave_update_high_co_bool_{}{}'.format(wave_itv2, wave_period2)].to_numpy())\n","\n","    short_open_res1 *= ~(res_df['wave_update_low_cu_bool_{}{}'.format(wave_itv1, wave_period1)].to_numpy().astype(bool)) * notnan_update_low_cu\n","    long_open_res1 *= ~(res_df['wave_update_high_co_bool_{}{}'.format(wave_itv1, wave_period1)].to_numpy().astype(bool)) * notnan_update_high_co\n","    short_open_res2 *= ~(res_df['wave_update_low_cu_bool_{}{}'.format(wave_itv2, wave_period2)].to_numpy().astype(bool)) * notnan_update_low_cu2\n","    long_open_res2 *= ~(res_df['wave_update_high_co_bool_{}{}'.format(wave_itv2, wave_period2)].to_numpy().astype(bool)) * notnan_update_high_co2\n","\n","    # short_open_res1 *= ~res_df['wave_update_low_cu_bool_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","    # long_open_res1 *= ~res_df['wave_update_high_co_bool_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","    # short_open_res2 *= ~res_df['wave_update_low_cu_bool_{}{}'.format(wave_itv2, wave_period2)].to_numpy()\n","    # long_open_res2 *= ~res_df['wave_update_high_co_bool_{}{}'.format(wave_itv2, wave_period2)].to_numpy()\n","\n","    if show_detail:\n","      sys_log.warning(\"reject update_hl\")\n","      sys_log.warning(\"np.sum(short_open_res1 == 1) : {}\".format(np.sum(short_open_res1 == 1)))\n","      sys_log.warning(\"np.sum(long_open_res1 == 1) : {}\".format(np.sum(long_open_res1 == 1)))  \n","      sys_log.warning(\"np.sum(short_open_res2 == 1) : {}\".format(np.sum(short_open_res2 == 1)))\n","      sys_log.warning(\"np.sum(long_open_res2 == 1) : {}\".format(np.sum(long_open_res2 == 1)))  \n","\n","    # ------ wave_itv ------ #    \n","    if wave_itv1 != 'T':      \n","      wave_itv1_num = to_itvnum(wave_itv1)\n","      short_open_res1 *= np_timeidx % wave_itv1_num == (wave_itv1_num - 1)\n","      long_open_res1 *= np_timeidx % wave_itv1_num == (wave_itv1_num - 1) \n","\n","      if show_detail:\n","        sys_log.warning(\"wave_itv1\")\n","        sys_log.warning(\"np.sum(short_open_res1 == 1) : {}\".format(np.sum(short_open_res1 == 1)))\n","        sys_log.warning(\"np.sum(long_open_res1 == 1) : {}\".format(np.sum(long_open_res1 == 1)))  \n","    \n","    if wave_itv2 != 'T':\n","      wave_itv2_num = to_itvnum(wave_itv2)\n","      short_open_res2 *= np_timeidx % wave_itv2_num == (wave_itv2_num - 1)\n","      long_open_res2 *= np_timeidx % wave_itv2_num == (wave_itv2_num - 1) \n","\n","      if show_detail:\n","        sys_log.warning(\"wave_itv2\")\n","        sys_log.warning(\"np.sum(short_open_res2 == 1) : {}\".format(np.sum(short_open_res2 == 1)))\n","        sys_log.warning(\"np.sum(long_open_res2 == 1) : {}\".format(np.sum(long_open_res2 == 1)))\n","\n","    # ------ wave_mm ------ #\n","    wave_high_terms_cnt_fill1_ = res_df['wave_high_terms_cnt_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","    wave_low_terms_cnt_fill1_ = res_df['wave_low_terms_cnt_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","\n","    short_open_res1 *= (wave_high_terms_cnt_fill1_ > config.tr_set.wave_greater2) & (wave_low_terms_cnt_fill1_ > config.tr_set.wave_greater1)\n","    long_open_res1 *= (wave_low_terms_cnt_fill1_ > config.tr_set.wave_greater2) & (wave_high_terms_cnt_fill1_ > config.tr_set.wave_greater1)\n","\n","    # wave_high_terms_cnt_fill2_ = res_df['wave_high_terms_cnt_fill_{}{}'.format(wave_itv2, wave_period2)].to_numpy()\n","    # wave_low_terms_cnt_fill2_ = res_df['wave_low_terms_cnt_fill_{}{}'.format(wave_itv2, wave_period2)].to_numpy()\n","\n","    # short_open_res2 *= (wave_high_terms_cnt_fill2_ > config.tr_set.wave_greater2) & (wave_low_terms_cnt_fill2_ > config.tr_set.wave_greater1)\n","    # long_open_res2 *= (wave_low_terms_cnt_fill2_ > config.tr_set.wave_greater2) & (wave_high_terms_cnt_fill2_ > config.tr_set.wave_greater1)\n","\n","    if show_detail:\n","      sys_log.warning(\"wave_mm\")\n","      sys_log.warning(\"np.sum(short_open_res1 == 1) : {}\".format(np.sum(short_open_res1 == 1)))\n","      sys_log.warning(\"np.sum(long_open_res1 == 1) : {}\".format(np.sum(long_open_res1 == 1)))\n","      # sys_log.warning(\"np.sum(short_open_res2 == 1) : {}\".format(np.sum(short_open_res2 == 1)))\n","      # sys_log.warning(\"np.sum(long_open_res2 == 1) : {}\".format(np.sum(long_open_res2 == 1)))\n","\n","    # ------ wave_length ------ #\n","    if config.tr_set.wave_length1 != \"None\": \n","      short_wave_length_fill_ = res_df['short_wave_length_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","      long_wave_length_fill_ = res_df['long_wave_length_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","\n","      short_open_res1 *= short_wave_length_fill_ >= config.tr_set.wave_length1\n","      long_open_res1 *= long_wave_length_fill_ >= config.tr_set.wave_length1\n","\n","      if show_detail:\n","        sys_log.warning(\"wave_length\")\n","        sys_log.warning(\"np.sum(short_open_res1 == 1) : {}\".format(np.sum(short_open_res1 == 1)))\n","        sys_log.warning(\"np.sum(long_open_res1 == 1) : {}\".format(np.sum(long_open_res1 == 1)))\n","\n","    # ------ wave_spread ------ #\n","    if config.tr_set.wave_spread1 != \"None\":\n","      short_wave_spread_fill = res_df['short_wave_spread_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","      long_wave_spread_fill = res_df['long_wave_spread_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","\n","      short_open_res1 *= short_wave_spread_fill >= config.tr_set.wave_spread1\n","      long_open_res1 *= long_wave_spread_fill >= config.tr_set.wave_spread1\n","\n","      if show_detail:\n","        sys_log.warning(\"wave_spread\")\n","        sys_log.warning(\"np.sum(short_open_res1 == 1) : {}\".format(np.sum(short_open_res1 == 1)))\n","        sys_log.warning(\"np.sum(long_open_res1 == 1) : {}\".format(np.sum(long_open_res1 == 1)))      \n","\n","    # ------ wave_time_ratio ------ #\n","    if config.tr_set.wave_time_ratio1 != \"None\":\n","      short_wave_time_ratio = res_df['short_wave_time_ratio_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","      long_wave_time_ratio = res_df['long_wave_time_ratio_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","\n","      short_open_res1 *= short_wave_time_ratio >= config.tr_set.wave_time_ratio1\n","      long_open_res1 *= long_wave_time_ratio >= config.tr_set.wave_time_ratio1\n","\n","      if show_detail:\n","        sys_log.warning(\"wave_time_ratio\")\n","        sys_log.warning(\"np.sum(short_open_res1 == 1) : {}\".format(np.sum(short_open_res1 == 1)))\n","        sys_log.warning(\"np.sum(long_open_res1 == 1) : {}\".format(np.sum(long_open_res1 == 1)))   \n","\n","\n","    # ------------ 추세선 리스트 ------------ #\n","    # ------ ma & prev_low ------ #    \n","    # ma_period = 60\n","\n","    # short_prev_ma_ = res_df['short_ma_T{}_-1'.format(ma_period)].to_numpy()\n","    # long_prev_ma_ = res_df['long_ma_T{}_-1'.format(ma_period)].to_numpy()    \n","    \n","    # short_open_res1 *= short_prev_ma_ > roll_highs1[-1]  # Todo, index sync. 요망\n","    # long_open_res1 *= long_prev_ma_ < roll_lows1[-1]\n","\n","    # if show_detail:\n","    #   sys_log.warning(\"ma & prev_low\")\n","    #   sys_log.warning(\"np.sum(short_open_res1 == 1) : {}\".format(np.sum(short_open_res1 == 1)))\n","    #   sys_log.warning(\"np.sum(long_open_res1 == 1) : {}\".format(np.sum(long_open_res1 == 1)))     \n","\n","\n","    # ================== tr_set ================== #\n","    # ------------ tp ------------ #\n","    tpg = config.tr_set.tp_gap\n","    res_df['short_tp_{}'.format(selection_id)] = res_df['short_tp_1_{}'.format(selection_id)].to_numpy() - res_df['short_tp_gap_{}'.format(selection_id)].to_numpy() * tpg\n","    res_df['long_tp_{}'.format(selection_id)] = res_df['long_tp_1_{}'.format(selection_id)].to_numpy() + res_df['long_tp_gap_{}'.format(selection_id)].to_numpy() * tpg\n","    # res_df['short_tp_{}'.format(selection_id)] = short_tp_1 - short_epout_gap * tpg\n","    # res_df['long_tp_{}'.format(selection_id)] = long_tp_1 + long_epout_gap * tpg\n","\n","    # ------ limit_ep1 ------ #\n","    if config.ep_set.entry_type == \"LIMIT\":\n","        epg1 = config.tr_set.ep_gap1\n","\n","        # ------ epbox as epg ------ #\n","        # res_df['short_ep1_{}'.format(selection_id)] = res_df['short_ep1_0_{}'.format(selection_id)].to_numpy() + res_df['short_ep1_gap_{}'.format(selection_id)].to_numpy() * epg1\n","        # res_df['long_ep1_{}'.format(selection_id)] = res_df['long_ep1_0_{}'.format(selection_id)].to_numpy() - res_df['long_ep1_gap_{}'.format(selection_id)].to_numpy() * epg1     \n","\n","        # ------ tpbox as epg ------ #\n","        # p1_hlm 을 위해선, tp_0 를 기준할 수 없음 --> ep1 & ep2 를 기준으로 진행\n","        # res_df['short_ep1_{}'.format(selection_id)] = res_df['short_ep1_0_{}'.format(selection_id)].to_numpy() + res_df['short_tp_gap_{}'.format(selection_id)].to_numpy() * epg1  # fibonacci 고려하면, tp / out gap 기준이 맞지 않을까\n","        # res_df['long_ep1_{}'.format(selection_id)] = res_df['long_ep1_0_{}'.format(selection_id)].to_numpy() - res_df['long_tp_gap_{}'.format(selection_id)].to_numpy() * epg1      \n","        \n","        # ------ fibo_ep ------ #\n","        res_df['short_ep1_{}'.format(selection_id)] = res_df['short_tp_0_{}'.format(selection_id)].to_numpy() + res_df['short_tp_gap_{}'.format(selection_id)].to_numpy() * epg1  # fibonacci 고려하면, tp / out gap 기준이 맞지 않을까\n","        res_df['long_ep1_{}'.format(selection_id)] = res_df['long_tp_0_{}'.format(selection_id)].to_numpy() - res_df['long_tp_gap_{}'.format(selection_id)].to_numpy() * epg1    \n","                \n","    # ------ market_ep1 ------ #\n","    else:\n","        res_df['short_ep1_{}'.format(selection_id)] = close\n","        res_df['long_ep1_{}'.format(selection_id)] = close\n","    \n","    # ------ limit_ep2 ------ #   \n","    if config.ep_set.point2.entry_type == \"LIMIT\":\n","        epg2 = config.tr_set.ep_gap2\n","\n","        # # ------ epbox as epg ------ #\n","        # res_df['short_ep2_{}'.format(selection_id)] = res_df['short_ep2_0_{}'.format(selection_id)].to_numpy() + res_df['short_ep2_gap_{}'.format(selection_id)].to_numpy() * epg2\n","        # res_df['long_ep2_{}'.format(selection_id)] = res_df['long_ep2_0_{}'.format(selection_id)].to_numpy() - res_df['long_ep2_gap_{}'.format(selection_id)].to_numpy() * epg2  \n","\n","        # ------ outbox as epg ------ # --> ep1 & ep2 를 기준으로 진행\n","        # res_df['short_ep2_{}'.format(selection_id)] = res_df['short_ep2_0_{}'.format(selection_id)].to_numpy() + res_df['short_out_gap_{}'.format(selection_id)].to_numpy() * epg2\n","        # res_df['long_ep2_{}'.format(selection_id)] = res_df['long_ep2_0_{}'.format(selection_id)].to_numpy() - res_df['long_out_gap_{}'.format(selection_id)].to_numpy() * epg2  \n","        \n","        # ------ fibo_ep by tp_box ------ #\n","        res_df['short_ep2_{}'.format(selection_id)] = res_df['short_tp_0_{}'.format(selection_id)].to_numpy() + res_df['short_tp_gap_{}'.format(selection_id)].to_numpy() * epg2  # fibonacci 고려하면, tp / out gap 기준이 맞지 않을까\n","        res_df['long_ep2_{}'.format(selection_id)] = res_df['long_tp_0_{}'.format(selection_id)].to_numpy() - res_df['long_tp_gap_{}'.format(selection_id)].to_numpy() * epg2   \n","        \n","        # ------ fibo_ep by out_box ------ #        \n","        # res_df['short_ep2_{}'.format(selection_id)] = res_df['short_out_0_{}'.format(selection_id)].to_numpy() + res_df['short_out_gap_{}'.format(selection_id)].to_numpy() * epg2  # fibonacci 고려하면, tp / out gap 기준이 맞지 않을까\n","        # res_df['long_ep2_{}'.format(selection_id)] = res_df['long_out_0_{}'.format(selection_id)].to_numpy() - res_df['long_out_gap_{}'.format(selection_id)].to_numpy() * epg2   \n","\n","    # ------ market_ep2 ------ #\n","    else: \n","        res_df['short_ep2_{}'.format(selection_id)] = close\n","        res_df['long_ep2_{}'.format(selection_id)] = close\n","                \n","\n","    # ------------ out ------------ #\n","    outg = config.tr_set.out_gap\n","    # res_df['short_out_{}'.format(selection_id)] = short_tp_0 + short_tp_gap * outg            # 1. for hhm check -> 규칙성과 wave_range 기반 거래 기준의 hhm 확인\n","    # res_df['long_out_{}'.format(selection_id)] = long_tp_0 - long_tp_gap * outg\n","\n","    if config.tr_set.check_hlm == 0:\n","      res_df['short_out_{}'.format(selection_id)] = res_df['short_tp_0_{}'.format(selection_id)].to_numpy() + res_df['short_tp_gap_{}'.format(selection_id)].to_numpy() * outg\n","      res_df['long_out_{}'.format(selection_id)] = res_df['long_tp_0_{}'.format(selection_id)].to_numpy() - res_df['long_tp_gap_{}'.format(selection_id)].to_numpy() * outg\n","      \n","      # ------ ep1box as outg ------ #\n","      # res_df['short_out_{}'.format(selection_id)] = res_df['short_ep1_0_{}'.format(selection_id)].to_numpy() + res_df['short_ep1_gap_{}'.format(selection_id)].to_numpy() * outg\n","      # res_df['long_out_{}'.format(selection_id)] = res_df['long_ep1_0_{}'.format(selection_id)].to_numpy() - res_df['long_ep1_gap_{}'.format(selection_id)].to_numpy() * outg \n","\n","    elif config.tr_set.check_hlm == 1:    # for p1_hlm\n","      # ------ irregular - next_fibo ------ #\n","      # co_wrr_32_ = res_df['co_wrr_32_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","      # cu_wrr_32_ = res_df['cu_wrr_32_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","\n","      # short_next_fibo_outg = np.vectorize(get_next_fibo_gap2)(cu_wrr_32_)\n","      # long_next_fibo_outg = np.vectorize(get_next_fibo_gap2)(co_wrr_32_)\n","\n","      # res_df['short_out_{}'.format(selection_id)] = res_df['short_tp_0_{}'.format(selection_id)].to_numpy() + res_df['short_tp_gap_{}'.format(selection_id)].to_numpy() * short_next_fibo_outg  # ep 와 마찬가지로, tpg 기준 가능\n","      # res_df['long_out_{}'.format(selection_id)] = res_df['long_tp_0_{}'.format(selection_id)].to_numpy() - res_df['long_tp_gap_{}'.format(selection_id)].to_numpy() * long_next_fibo_outg \n","\n","      # ------ ep1box as outg ------ #\n","      # res_df['short_out_{}'.format(selection_id)] = res_df['short_ep1_0_{}'.format(selection_id)].to_numpy() + res_df['short_ep1_gap_{}'.format(selection_id)].to_numpy() * outg\n","      # res_df['long_out_{}'.format(selection_id)] = res_df['long_ep1_0_{}'.format(selection_id)].to_numpy() - res_df['long_ep1_gap_{}'.format(selection_id)].to_numpy() * outg \n","\n","      # ------ 1_tr - ep1box as outg ------ #\n","      # res_df['short_out_{}'.format(selection_id)] = res_df['short_ep1_0_{}'.format(selection_id)].to_numpy() + res_df['short_ep1_gap_{}'.format(selection_id)].to_numpy() * outg\n","      # res_df['long_out_{}'.format(selection_id)] = res_df['long_ep1_0_{}'.format(selection_id)].to_numpy() - res_df['long_ep1_gap_{}'.format(selection_id)].to_numpy() * outg \n","      \n","      # ------ 1_tr - auto_calculation by ep1 ------ #\n","      # res_df['short_out_{}'.format(selection_id)] = res_df['short_ep1_{}'.format(selection_id)] + (res_df['short_ep1_{}'.format(selection_id)].to_numpy() - res_df['short_tp_{}'.format(selection_id)].to_numpy())\n","      # res_df['long_out_{}'.format(selection_id)] = res_df['long_ep1_{}'.format(selection_id)].to_numpy() - (res_df['long_tp_{}'.format(selection_id)].to_numpy() - res_df['long_ep1_{}'.format(selection_id)].to_numpy())\n","\n","      # ------ tpbox as outg ------ #\n","      # res_df['short_out_{}'.format(selection_id)] = res_df['short_ep1_0_{}'.format(selection_id)].to_numpy() + res_df['short_tp_gap_{}'.format(selection_id)].to_numpy() * outg  # ep 와 마찬가지로, tpg 기준 가능\n","      # res_df['long_out_{}'.format(selection_id)] = res_df['long_ep1_0_{}'.format(selection_id)].to_numpy() - res_df['long_tp_gap_{}'.format(selection_id)].to_numpy() * outg \n","      \n","      # ------ fibo_out ------ #      \n","      res_df['short_out_{}'.format(selection_id)] = res_df['short_tp_0_{}'.format(selection_id)].to_numpy() + res_df['short_tp_gap_{}'.format(selection_id)].to_numpy() * outg  # ep 와 마찬가지로, tpg 기준 가능\n","      res_df['long_out_{}'.format(selection_id)] = res_df['long_tp_0_{}'.format(selection_id)].to_numpy() - res_df['long_tp_gap_{}'.format(selection_id)].to_numpy() * outg \n","    \n","    else:  # p2_hlm    \n","      # ------ outbox as out ------ #\n","      res_df['short_out_{}'.format(selection_id)] = res_df['short_out_0_{}'.format(selection_id)].to_numpy() + res_df['short_out_gap_{}'.format(selection_id)].to_numpy() * outg\n","      res_df['long_out_{}'.format(selection_id)] = res_df['long_out_0_{}'.format(selection_id)].to_numpy() - res_df['long_out_gap_{}'.format(selection_id)].to_numpy() * outg\n","\n","      # res_df['short_out_{}'.format(selection_id)] = res_df['short_tp_0_{}'.format(selection_id)].to_numpy() + res_df['short_tp_gap_{}'.format(selection_id)].to_numpy() * outg\n","      # res_df['long_out_{}'.format(selection_id)] = res_df['long_tp_0_{}'.format(selection_id)].to_numpy() - res_df['long_tp_gap_{}'.format(selection_id)].to_numpy() * outg\n","\n","      # ------ ep2box as out ------ #\n","      # res_df['short_out_{}'.format(selection_id)] = res_df['short_ep2_0_{}'.format(selection_id)].to_numpy() + res_df['short_ep2_gap_{}'.format(selection_id)].to_numpy() * outg   # p2's ep_box 를 out 으로 사용한다?\n","      # res_df['long_out_{}'.format(selection_id)] = res_df['long_ep2_0_{}'.format(selection_id)].to_numpy() - res_df['long_ep2_gap_{}'.format(selection_id)].to_numpy() * outg     \n","      \n","\n","    # ------------ point validation ------------ # - vecto. 로 미리 거를 수 있는걸 거르면 좋을 것\n","    short_tp_ = res_df['short_tp_{}'.format(selection_id)].to_numpy()\n","    short_ep1_ = res_df['short_ep1_{}'.format(selection_id)].to_numpy()\n","    short_ep2_ = res_df['short_ep2_{}'.format(selection_id)].to_numpy()\n","    short_out_ = res_df['short_out_{}'.format(selection_id)].to_numpy()\n","\n","    long_tp_ = res_df['long_tp_{}'.format(selection_id)].to_numpy()\n","    long_ep1_ = res_df['long_ep1_{}'.format(selection_id)].to_numpy()\n","    long_ep2_ = res_df['long_ep2_{}'.format(selection_id)].to_numpy()\n","    long_out_ = res_df['long_out_{}'.format(selection_id)].to_numpy()\n","\n","    # ------ p1 point_validation ------ #\n","    short_open_res1 *= (short_tp_ < short_ep1_) & (short_ep1_ < short_out_)  # tr_set validation reject nan data & 정상 거래 위한 tp > ep / --> p2_box location (cannot be vectorized)\n","    # short_open_res1 *= close < short_ep1_   # reject entry open_execution\n","    short_open_res1 *= close < short_out_ # res_df['short_ep1_0_{}'.format(selection_id)].to_numpy()   # reject hl_out open_execution -> close always < ep1_0 at wave_p1\n","    # short_out_  res_df['short_tp_0_{}'.format(selection_id)].to_numpy() res_df['short_ep1_0_{}'.format(selection_id)].to_numpy()\n","\n","    long_open_res1 *= (long_tp_ > long_ep1_) & (long_ep1_ > long_out_)  # (long_tp_ > long_ep_) # tr_set validation     \n","    # long_open_res1 *= close > long_ep1_  # reject entry open_execution    \n","    long_open_res1 *= close > long_out_ # res_df['long_ep1_0_{}'.format(selection_id)].to_numpy()  # reject hl_out open_execution  \n","    # long_out_ res_df['long_tp_0_{}'.format(selection_id)].to_numpy() res_df['long_ep1_0_{}'.format(selection_id)].to_numpy()\n","\n","    # ------ p2 point_validation ------ # --> executed in en_ex_pairing() function.\n","    # short_open_res2 *= (short_ep2_ < short_out_) # tr_set validation (short_tp_ < short_ep_) # --> p2_box location (cannot be vectorized)\n","    # short_open_res2 *= close < short_out_    # reject hl_out open_execution\n","\n","    # long_open_res2 *= (long_ep2_ > long_out_)  # tr_set validation (long_tp_ > long_ep_) &   # p2's ep & out cannot be vectorized\n","    # long_open_res2 *= close > long_out_    # reject hl_out open_execution\n","\n","    res_df['short_open1_{}'.format(selection_id)] = short_open_res1 * (not config.pos_set.short_ban)\n","    res_df['long_open1_{}'.format(selection_id)] = long_open_res1 * (not config.pos_set.long_ban)\n","    # print(\"res_df['long_open1_{}'.format(selection_id)].to_numpy() :\", res_df['long_open1_{}'.format(selection_id)].to_numpy()) \n","    res_df['short_open2_{}'.format(selection_id)] = short_open_res2\n","    res_df['long_open2_{}'.format(selection_id)] = long_open_res2\n","\n","    if show_detail:\n","      sys_log.warning(\"point validation\")\n","      sys_log.warning(\"np.sum(short_open_res1 == 1) : {}\".format(np.sum(short_open_res1 == 1)))\n","      sys_log.warning(\"np.sum(long_open_res1 == 1) : {}\".format(np.sum(long_open_res1 == 1)))\n","      # sys_log.warning(\"np.sum(short_open_res2 == 1) : {}\".format(np.sum(short_open_res2 == 1)))\n","      # sys_log.warning(\"np.sum(long_open_res2 == 1) : {}\".format(np.sum(long_open_res2 == 1)))\n","    \n","    # ------------ higher_high momentum ------------ #\n","    # wb_tpg = config.tr_set.wb_tp_gap\n","    # wb_outg = config.tr_set.wb_out_gap\n","    # res_df['short_wave_1_{}'.format(selection_id)] = res_df['short_tp_1_{}'.format(selection_id)].to_numpy() - res_df['short_tp_gap_{}'.format(selection_id)].to_numpy() * wb_tpg\n","    # res_df['long_wave_1_{}'.format(selection_id)] = res_df['long_tp_1_{}'.format(selection_id)].to_numpy() + res_df['long_tp_gap_{}'.format(selection_id)].to_numpy() * wb_tpg\n","    \n","    # res_df['short_wave_0_{}'.format(selection_id)] = res_df['short_tp_0_{}'.format(selection_id)].to_numpy() + res_df['short_tp_gap_{}'.format(selection_id)].to_numpy() * wb_outg        # hhm check\n","    # res_df['long_wave_0_{}'.format(selection_id)] = res_df['long_tp_0_{}'.format(selection_id)].to_numpy() - res_df['long_tp_gap_{}'.format(selection_id)].to_numpy() * wb_outg\n","    # res_df['short_wave_0_{}'.format(selection_id)] = short_epout_0 + short_epout_gap * wb_outg\n","    # res_df['long_wave_0_{}'.format(selection_id)] = long_epout_0 - long_epout_gap * wb_outg\n","\n","    # ------ tr ------ #\n","    if config.tr_set.check_hlm == 2:\n","      res_df['short_tr_{}'.format(selection_id)] = np.nan\n","      res_df['long_tr_{}'.format(selection_id)] = np.nan\n","    else:      \n","      res_df['short_tr_{}'.format(selection_id)] = abs(\n","          (short_ep1_ / short_tp_ - config.trader_set.limit_fee - 1) / (short_ep1_ / short_out_ - config.trader_set.market_fee - 1))   # 이게 맞음, loss 의 분모 > 분자 & profit 의 분모 < 분자\n","      res_df['long_tr_{}'.format(selection_id)] = abs(\n","          (long_tp_ / long_ep1_ - config.trader_set.limit_fee - 1) / (long_out_ / long_ep1_ - config.trader_set.market_fee - 1))\n","\n","    # ------ zoned_ep ------ #\n","    # if config.tr_set.c_ep_gap != \"None\":\n","    #     # res_df['short_ep_org_{}'.format(selection_id)] = res_df['short_ep_{}'.format(selection_id)].copy()\n","    #     # res_df['long_ep_org_{}'.format(selection_id)] = res_df['long_ep_{}'.format(selection_id)].copy()\n","    #     res_df['short_ep2_{}'.format(selection_id)] = short_epout_1 + short_epout_gap * config.tr_set.c_ep_gap\n","    #     res_df['long_ep2_{}'.format(selection_id)] = long_epout_1 - long_epout_gap * config.tr_set.c_ep_gap\n","\n","    # # ------ zoned_out ------ #\n","    # if config.tr_set.t_out_gap != \"None\":\n","    #     # res_df['short_out_org_{}'.format(selection_id)] = res_df['short_out_{}'.format(selection_id)].copy()\n","    #     # res_df['long_out_org_{}'.format(selection_id)] = res_df['long_out_{}'.format(selection_id)].copy()\n","    #     res_df['short_out2_{}'.format(selection_id)] = short_epout_0 + short_epout_gap * config.tr_set.t_out_gap\n","    #     res_df['long_out2_{}'.format(selection_id)] = long_epout_0 - long_epout_gap * config.tr_set.t_out_gap\n","\n","    return res_df\n"]},{"cell_type":"markdown","metadata":{"id":"HuCb0phoPN83"},"source":["#### legacy"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"-DNPumVZi0xs"},"outputs":[],"source":["\n","\n","    # ------ wave_point 분리 ------ #\n","    # cci_ = res_df['cci_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","    # b1_cci_ = res_df['cci_{}{}'.format(wave_itv1, wave_period1)].shift(1).to_numpy()        \n","    \n","    # band_width = 100\n","    # upper_band = band_width\n","    # lower_band = -band_width\n","\n","    # update_low_cu_bool = res_df['update_low_cu_bool_{}{}'.format(wave_itv1, wave_period1)]\n","    # update_high_co_bool = res_df['update_high_co_bool_{}{}'.format(wave_itv1, wave_period1)]\n","\n","    # short_open_res1 *= (b1_cci_ > upper_band) & (upper_band > cci_) & ~update_low_cu_bool\n","    # long_open_res1 *= (b1_cci_ < lower_band) & (lower_band < cci_) & ~update_high_co_bool   \n","\n","    \n","# ------------ csd ------------ #\n","    # ------ dc ------ #\n","    # dc_upper_ = res_df['dc_upper_T30'].to_numpy()    \n","    # dc_lower_ = res_df['dc_lower_T30'].to_numpy()    \n","\n","    # # Todo, post_cu ~ co 의 dc_lower == low (=touched) 여부 조사\n","    # short_open_idx1 = get_index_bybool(short_open_res1, len_df_range)\n","    # long_open_idx1 = get_index_bybool(long_open_res1, len_df_range)\n","    # wave_co_post_idx_fill_ = res_df['wave_co_post_idx_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","    # wave_cu_post_idx_fill_ = res_df['wave_cu_post_idx_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()   # co_prime_idx (wave_high 정보를 지정하기 위한 front co_idx 지정)\n","\n","    # # 1. dc_lower == low 여부 조사, np.nan 덕분에 vectorize 불가하다고 봄\n","    # short_valid_idx_bool = ~(pd.isnull(wave_co_post_idx_fill_) | pd.isnull(short_open_idx1)) # get_index_bybool\n","    # dc_upper_touch = dc_upper_ <= high\n","    # dc_upper_touch_span = np.full(len_df, np.nan)\n","    # dc_upper_touch_span[short_valid_idx_bool] = [dc_upper_touch[int(iin):int(iout) + 1].sum() for iin, iout in zip(wave_co_post_idx_fill_, short_open_idx1) if not pd.isnull(iin) if not pd.isnull(iout)]\n","\n","    # long_valid_idx_bool = ~(pd.isnull(wave_cu_post_idx_fill_) | pd.isnull(long_open_idx1)) # get_index_bybool\n","    # dc_lower_touch = dc_lower_ >= low\n","    # dc_lower_touch_span = np.full(len_df, np.nan)\n","    # dc_lower_touch_span[long_valid_idx_bool] = [dc_lower_touch[int(iin):int(iout) + 1].sum() for iin, iout in zip(wave_cu_post_idx_fill_, long_open_idx1) if not pd.isnull(iin) if not pd.isnull(iout)]\n","\n","    # short_open_res1 *= dc_upper_touch_span == 0\n","    # long_open_res1 *= dc_lower_touch_span == 0\n","\n","    # if show_detail:\n","    #   sys_log.warning(\"csd - dc\")\n","    #   sys_log.warning(\"np.sum(short_open_res1 == 1) : {}\".format(np.sum(short_open_res1 == 1)))\n","    #   sys_log.warning(\"np.sum(long_open_res1 == 1) : {}\".format(np.sum(long_open_res1 == 1)))\n","    #   # sys_log.warning(\"np.sum(short_open_res2 == 1) : {}\".format(np.sum(short_open_res2 == 1)))\n","    #   # sys_log.warning(\"np.sum(long_open_res2 == 1) : {}\".format(np.sum(long_open_res2 == 1)))   \n","    \n","    # ================== pattern depiction ================== #  \n","    # bb_upper_ = res_df['bb_upper_{}{}'.format('T', 60)].to_numpy()\n","    # bb_lower_ = res_df['bb_lower_{}{}'.format('T', 60)].to_numpy()\n","    # bb_upper2_ = res_df['bb_upper2_{}{}'.format('T', 60)].to_numpy()\n","    # bb_lower2_ = res_df['bb_lower2_{}{}'.format('T', 60)].to_numpy()\n","    # bb_upper3_ = res_df['bb_upper3_{}{}'.format('T', 60)].to_numpy()\n","    # bb_lower3_ = res_df['bb_lower3_{}{}'.format('T', 60)].to_numpy()\n","    \n","    # ------ 양 / 음봉 (long) ------ #\n","    # short_open_res1 *= close < open\n","    # long_open_res1 *= close > open\n","\n","    # if show_detail:\n","    #   sys_log.warning(\"close > open\")\n","    #   sys_log.warning(\"np.sum(short_open_res1 == 1) : {}\".format(np.sum(short_open_res1 == 1)))\n","    #   sys_log.warning(\"np.sum(long_open_res1 == 1) : {}\".format(np.sum(long_open_res1 == 1)))\n","\n","    \n","    # # ------ even_break, hhhl (long) ------ #        \n","    # # cu's roll_high_[:, -1] = prev_high & cu's roll_low_[:, -1] = current_low\n","    # # co's roll_low_[:, -1] = prev_low & co's roll_high_[:, -1] = current_high\n","    # short_open_res1 *= (roll_low_[:, -2] > roll_low_[:, -1]) # & (roll_high_[:, -2] > roll_high_[:, -1])\n","    # long_open_res1 *= (roll_high_[:, -2] < roll_high_[:, -1]) # & (roll_low_[:, -2] < roll_low_[:, -1])\n","\n","    # if show_detail:\n","    #   sys_log.warning(\"even_break\")\n","    #   sys_log.warning(\"np.sum(short_open_res1 == 1) : {}\".format(np.sum(short_open_res1 == 1)))\n","    #   sys_log.warning(\"np.sum(long_open_res1 == 1) : {}\".format(np.sum(long_open_res1 == 1)))\n","\n","    # # ------ roll_high < bb_upper2 (long) ------ #\n","    # short_open_res1 *= (roll_low_[:, -4] > roll_low_bb_lower2_[:, -4])\n","    # short_open_res1 *= (roll_low_[:, -3] > roll_low_bb_lower2_[:, -3])\n","    # short_open_res1 *= (roll_low_[:, -2] > roll_low_bb_lower2_[:, -2])\n","    # short_open_res1 *= (roll_low_[:, -1] > roll_low_bb_lower2_[:, -1])\n","\n","    # long_open_res1 *= (roll_high_[:, -4] < roll_high_bb_upper2_[:, -4])\n","    # long_open_res1 *= (roll_high_[:, -3] < roll_high_bb_upper2_[:, -3])\n","    # long_open_res1 *= (roll_high_[:, -2] < roll_high_bb_upper2_[:, -2])\n","    # long_open_res1 *= (roll_high_[:, -1] < roll_high_bb_upper2_[:, -1])\n","    \n","    # if show_detail:\n","    #   sys_log.warning(\"roll_high < bb_upper2\")\n","    #   sys_log.warning(\"np.sum(short_open_res1 == 1) : {}\".format(np.sum(short_open_res1 == 1)))\n","    #   sys_log.warning(\"np.sum(long_open_res1 == 1) : {}\".format(np.sum(long_open_res1 == 1)))\n","\n","\n","    # ------ get candle_lastidx ------ #        \n","    # tf_entry = to_itvnum(config.loc_set.point.tf_entry)\n","    # b1_shift = np_timeidx % tf_entry + 1  # dynamic\n","    # b1_candle_lastidx = (len_df_range - b1_shift).astype(float)\n","    # b2_candle_lastidx = (len_df_range - (b1_shift + tf_entry)).astype(float)\n","    # b3_candle_lastidx = (len_df_range - (b1_shift + 2 * tf_entry)).astype(float)\n","    # b1_candle_lastidx[b1_candle_lastidx < 0] = np.nan\n","    # b2_candle_lastidx[b2_candle_lastidx < 0] = np.nan\n","    # b3_candle_lastidx[b3_candle_lastidx < 0] = np.nan\n","\n","    # high_5T = res_df['high_5T'].to_numpy()\n","    # low_5T = res_df['low_5T'].to_numpy()\n","\n","    # b2_high_5T = get_line(b2_candle_lastidx, high_5T)\n","    # b2_low_5T = get_line(b2_candle_lastidx, low_5T)\n","    \n","        # # ------ bb_stream ------ #        \n","        # roll_high_bb_upper_ = get_roll_wave_data(valid_high_prime_idx, roll_high_idx_arr, len_df, bb_upper_, roll_hl_cnt)\n","        # roll_low_bb_upper_ = get_roll_wave_data(valid_low_prime_idx, roll_low_idx_arr, len_df, bb_upper_, roll_hl_cnt)\n","        # roll_high_bb_upper2_ = get_roll_wave_data(valid_high_prime_idx, roll_high_idx_arr, len_df, bb_upper2_, roll_hl_cnt)\n","        # roll_low_bb_upper2_ = get_roll_wave_data(valid_low_prime_idx, roll_low_idx_arr, len_df, bb_upper2_, roll_hl_cnt)\n","\n","        # roll_high_bb_lower_ = get_roll_wave_data(valid_high_prime_idx, roll_high_idx_arr, len_df, bb_lower_, roll_hl_cnt)\n","        # roll_low_bb_lower_ = get_roll_wave_data(valid_low_prime_idx, roll_low_idx_arr, len_df, bb_lower_, roll_hl_cnt)\n","        # roll_high_bb_lower2_ = get_roll_wave_data(valid_high_prime_idx, roll_high_idx_arr, len_df, bb_lower2_, roll_hl_cnt)\n","        # roll_low_bb_lower2_ = get_roll_wave_data(valid_low_prime_idx, roll_low_idx_arr, len_df, bb_lower2_, roll_hl_cnt)\n","\n","        # wave_base_ = res_df['dc_base_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","\n","        # roll_high_wave_base_ = get_roll_wave_data(valid_high_prime_idx, roll_high_idx_arr, len_df, wave_base_, roll_hl_cnt)\n","        # roll_low_wave_base_ = get_roll_wave_data(valid_low_prime_idx, roll_low_idx_arr, len_df, wave_base_, roll_hl_cnt)\n","\n","        # short_open_res *= (roll_high_bb_lower_[:, -2] > roll_high_wave_base_[:, -2]) & (roll_high_wave_base_[:, -2] > roll_high_bb_lower2_[:, -2])\n","        # short_open_res *= (roll_low_bb_lower_[:, -1] > roll_low_wave_base_[:, -1]) & (roll_low_wave_base_[:, -1] > roll_low_bb_lower2_[:, -1])\n","        # short_open_res *= (roll_high_bb_lower_[:, -1] > roll_high_wave_base_[:, -1]) & (roll_high_wave_base_[:, -1] > roll_high_bb_lower2_[:, -1])\n","\n","        # long_open_res *= (roll_low_bb_upper_[:, -2] < roll_low_wave_base_[:, -2]) & (roll_low_wave_base_[:, -2] < roll_low_bb_upper2_[:, -2])\n","        # long_open_res *= (roll_high_bb_upper_[:, -1] < roll_high_wave_base_[:, -1]) & (roll_high_wave_base_[:, -1] < roll_high_bb_upper2_[:, -1])\n","        # long_open_res *= (roll_low_bb_upper_[:, -1] < roll_low_wave_base_[:, -1]) & (roll_low_wave_base_[:, -1] < roll_low_bb_upper2_[:, -1])\n","\n","        # if show_detail:\n","        #   sys_log.warning(\"bb_stream\")\n","        #   sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","        #   sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))  \n","\n","        # ------ candle_pattern  ------ #   \n","        # b3_bb_upper_ = get_line(b3_candle_lastidx, bb_upper_)\n","        # b3_bb_lower_ = get_line(b3_candle_lastidx, bb_lower_)\n","        # b3_bb_upper2_ = get_line(b3_candle_lastidx, bb_upper2_)\n","        # b3_bb_lower2_ = get_line(b3_candle_lastidx, bb_lower2_)\n","        # b3_close = get_line(b3_candle_lastidx, close)\n","\n","        # b2_bb_upper2_ = get_line(b2_candle_lastidx, bb_upper2_)\n","        # b2_bb_lower2_ = get_line(b2_candle_lastidx, bb_lower2_)\n","        # b2_bb_upper3_ = get_line(b2_candle_lastidx, bb_upper3_)\n","        # b2_bb_lower3_ = get_line(b2_candle_lastidx, bb_lower3_)\n","        # b2_close = get_line(b2_candle_lastidx, close)\n","\n","        # b1_bb_upper_ = get_line(b1_candle_lastidx, bb_upper_)\n","        # b1_bb_lower_ = get_line(b1_candle_lastidx, bb_lower_)\n","        # b1_bb_upper2_ = get_line(b1_candle_lastidx, bb_upper2_)\n","        # b1_bb_lower2_ = get_line(b1_candle_lastidx, bb_lower2_)\n","        # b1_close = get_line(b1_candle_lastidx, close)\n","        # b1_high_5T = get_line(b1_candle_lastidx, high_5T)\n","        # b1_low_5T = get_line(b1_candle_lastidx, low_5T)\n","\n","        # short_open_res *= (b3_bb_lower_ > b3_close) & (b3_close > b3_bb_lower2_)\n","        # short_open_res *= (b2_bb_lower2_ > b2_close) & (b2_close > b2_bb_lower3_)\n","        # short_open_res *= (b1_bb_lower_ > b1_close) & (b1_close > b1_bb_lower2_)\n","\n","        # long_open_res *= (b3_bb_upper_ < b3_close) & (b3_close < b3_bb_upper2_)\n","        # long_open_res *= (b2_bb_upper2_ < b2_close) & (b2_close < b2_bb_upper3_)\n","        # long_open_res *= (b1_bb_upper_ < b1_close) & (b1_close < b1_bb_upper2_)\n","\n","        # # short_open_res *= (b2_low_5T < b1_low_5T) & (b2_close < b1_close)\n","        # # long_open_res *= (b2_high_5T > b1_high_5T) & (b2_close > b1_close)\n","\n","        # if show_detail:\n","        #   sys_log.warning(\"candle_pattern\")\n","        #   sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","        #   sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1))) \n","\n","\n","        # ------ low_confirm ------ #\n","        # short_open_res *= b1_high_5T > wave_high_fill_\n","        # long_open_res *= b1_low_5T < wave_low_fill_\n","\n","        # if show_detail:\n","        #   sys_log.warning(\"low_confirm\")\n","        #   sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","        #   sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1))) \n","        \n","        # ------ candle_ratio ------ #\n","        # b2_candle_range_5T = b2_high_5T - b2_low_5T\n","        # b1_candle_range_5T = b1_high_5T - b1_low_5T\n","        \n","        # short_open_res *= b1_candle_range_5T / b2_candle_range_5T < config.loc_set.point.crr\n","        # long_open_res *= b1_candle_range_5T / b2_candle_range_5T < config.loc_set.point.crr\n","\n","        # if show_detail:\n","        #   sys_log.warning(\"candle_ratio\")\n","        #   sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","        #   sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1))) \n","\n","        # ------ wick_ratio ------ #\n","        # upper_wick_ratio_ = res_df['upper_wick_ratio_{}'.format(config.loc_set.point.wick_itv)].to_numpy()\n","        # lower_wick_ratio_ = res_df['lower_wick_ratio_{}'.format(config.loc_set.point.wick_itv)].to_numpy()\n","        # b2_upper_wick_ratio_ = get_line(b2_candle_lastidx, upper_wick_ratio_)\n","        # b2_lower_wick_ratio_ = get_line(b2_candle_lastidx, lower_wick_ratio_)\n","\n","        # short_open_res *= b2_upper_wick_ratio_ < config.loc_set.point.short_wick_ratio\n","        # long_open_res *= b2_upper_wick_ratio_ < config.loc_set.point.long_wick_ratio\n","\n","        # if show_detail:\n","        #   sys_log.warning(\"wick_ratio\")\n","        #   sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","        #   sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1))) \n","\n","        # ------ large wave1_range ------ #          \n","        # roll_bb_upper_ = get_roll_wave_data(valid_high_prime_idx, roll_high_idx_arr, len_df, bb_upper_, roll_hl_cnt)\n","        # roll_bb_lower_ = get_roll_wave_data(valid_low_prime_idx, roll_low_idx_arr, len_df, bb_lower_, roll_hl_cnt)\n","        # roll_bb_upper3_ = get_roll_wave_data(valid_high_prime_idx, roll_high_idx_arr, len_df, bb_upper3_, roll_hl_cnt)\n","        # roll_bb_lower3_ = get_roll_wave_data(valid_low_prime_idx, roll_low_idx_arr, len_df, bb_lower3_, roll_hl_cnt)\n","\n","        # short_open_res *= (roll_bb_upper_[:, -2] < roll_high_[:, -2]) & (roll_low_[:, -1] < roll_bb_lower_[:, -1]) & (roll_low_[:, -1] > roll_bb_lower3_[:, -1])\n","        # long_open_res *= (roll_bb_upper_[:, -1] < roll_high_[:, -1]) & (roll_low_[:, -2] < roll_bb_lower_[:, -2]) & (roll_high_[:, -1] < roll_bb_upper3_[:, -1])\n","\n","        # if show_detail:\n","        #   sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","        #   sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))\n","        \n","        # ------ low in bb_level3 ------ #  Todo, idx sync 맞춰야할 것\n","        # short_open_res *= (bb_upper2_ < wave_high_fill_) & (wave_high_fill_ < bb_upper3_)\n","        # long_open_res *= (bb_lower3_ < wave_low_fill_) & (wave_low_fill_ < bb_lower2_)\n","\n","        # if show_detail:\n","        #   sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","        #   sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))\n","\n","        # ------ first_high ------ #        \n","        # wave_high_prime_idx_fill_= res_df['wave_high_prime_idx_fill_{}{}'.format(itv, period1)].to_numpy()\n","        # wave_low_prime_idx_fill_= res_df['wave_low_prime_idx_fill_{}{}'.format(itv, period1)].to_numpy()\n","        # cu_prime_wave_base = get_line(cu_prime_idx_fill_, wave_base_)\n","        # co_prime_wave_base = get_line(co_prime_idx_fill_, wave_base_)\n","\n","        # # short_open_res *= (co_roll_high_[:, -1] > dc_base_) & (dc_base_ > co_roll_low_[:, -1])\n","        # # long_open_res *= (cu_roll_low_[:, -1] < dc_base_) & (dc_base_ < cu_roll_high_[:, -1])\n","\n","        # short_open_res *= (cu_prime_wave_base > dc_base_) & (dc_base_ > co_prime_wave_base)\n","        # long_open_res *= (co_prime_wave_base < dc_base_) & (dc_base_ < cu_prime_wave_base)\n","\n","        # if show_detail:\n","        #   sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","        #   sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))\n","\n","        # cu_prime_dc_base = get_line(cu_prime_idx_fill_, dc_base_)        \n","        # co_prime_dc_base = get_line(co_prime_idx_fill_, dc_base_)\n","        \n","        # shift_size = to_itvnum(p1_itv1)\n","        # b1_dc_base_ = res_df['dc_base_{}{}'.format(p1_itv1, p1_period1)].shift(shift_size).to_numpy()\n","\n","        # short_open_res *= (b1_dc_base_ < dc_base_)\n","        # long_open_res *= (b1_dc_base_ > dc_base_)\n","\n","        # if show_detail:\n","        #   sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","        #   sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))\n","\n","        # ------ b1_base_15T < wave_high ------ #\n","        # short_open_res *= (b1_dc_base_ > co_roll_low_[:, -1])\n","        # long_open_res *= (b1_dc_base_ < cu_roll_high_[:, -1])\n","\n","        # if show_detail:\n","        #   sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","        #   sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))   \n","        \n","        \n","    # b1_itv_num = to_itvnum(config.tr_set.p2_itv0)\n","    # b2_itv_num = to_itvnum(config.tr_set.p2_itv0) * 2  # multi 2 for imb_v2\n","\n","    # res_df[short_tp_1_] = res_df['dc_lower_{}{}'.format(itv, period1)]\n","    # res_df[short_tp_0_] = res_df['dc_upper_{}{}'.format(itv, period2)]\n","    # # res_df[short_tp_0_] = res_df['dc_upper_15T4']\n","    # res_df[long_tp_1_] = res_df['dc_upper_{}{}'.format(itv, period1)]\n","    # res_df[long_tp_0_] = res_df['dc_lower_{}{}'.format(itv, period2)]\n","    # # res_df[long_tp_0_] = res_df['dc_lower_15T4']\n","    \n","        # ------ base_cc ------ #\n","        dc_base_ = res_df['dc_base_{}{}'.format(p1_itv1, p1_period1)].to_numpy()\n","\n","        # close_ = res_df['close_{}'.format(config.loc_set.point.tf_entry)].to_numpy()\n","        # b1_dc_base_ = res_df['dc_base_{}{}'.format(p1_itv1, p1_period1)].shift(tf_entry).to_numpy()\n","        # b1_close_ = res_df['close_{}'.format(config.loc_set.point.tf_entry)].shift(tf_entry).to_numpy()\n","\n","        # short_open_res *= ((b1_close_ > dc_base_) & (dc_base_ > close_)) | ((b1_close_ > b1_dc_base_) & (dc_base_ > close_))\n","        # long_open_res *= ((b1_close_ < dc_base_) & (dc_base_ < close_)) | ((b1_close_ < b1_dc_base_) & (dc_base_ < close_))\n","\n","        # if show_detail:\n","        #   sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","        #   sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))\n","        \n","        # ------ tf_entry ------ #\n","        # tf_entry = to_itvnum(config.loc_set.point.tf_entry)\n","        \n","        # short_open_res *= np_timeidx % tf_entry == (tf_entry - 1)\n","        # long_open_res *= np_timeidx % tf_entry == (tf_entry - 1) \n","\n","        # if show_detail:\n","        #   sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","        #   sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))\n","\n","    \n","        # ------ cppr 로 양음봉 check ------ # \n","        # tf_entry = to_itvnum(config.loc_set.point.tf_entry)\n","\n","        # res_df['b1_cppr_{}'.format(config.loc_set.point.tf_entry)] = res_df['cppr_{}'.format(config.loc_set.point.tf_entry)].shift(tf_entry)\n","        # b1_cppr_ = res_df['b1_cppr_{}'.format(config.loc_set.point.tf_entry)].to_numpy()  # check b1's cppr in ep_loc\n","        # cppr_ = res_df['cppr_{}'.format(config.loc_set.point.tf_entry)].to_numpy()\n","        # short_open_res *= (b1_cppr_ > 0) & (cppr_ < 0)\n","        # long_open_res *= (b1_cppr_ < 0) & (cppr_ > 0)\n","\n","        # res_df['b1_updbr'] = res_df['dc_upper_15T4_br'].shift(tf_entry).to_numpy()\n","        # res_df['b1_lwdbr'] = res_df['dc_lower_15T4_br'].shift(tf_entry).to_numpy()\n","        \n","        # res_df['b1_updbr_cppr'] = b1_cppr_ * res_df['b1_updbr'].to_numpy()\n","        # res_df['b1_lwdbr_cppr'] = b1_cppr_ * res_df['b1_lwdbr'].to_numpy()\n","\n","        # if show_detail:\n","        #   sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","        #   sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))\n","\n","        # ------ dc_cross ------ #\n","        # b1_dc_upper_15T4 = res_df['dc_upper_15T4'].shift(tf_entry).to_numpy()\n","        # b1_dc_lower_15T4 = res_df['dc_lower_15T4'].shift(tf_entry).to_numpy()\n","        # b1_high_ = res_df['high_{}'.format(config.loc_set.point.tf_entry)].shift(tf_entry).to_numpy()\n","        # b1_low_ = res_df['low_{}'.format(config.loc_set.point.tf_entry)].shift(tf_entry).to_numpy()\n","        # short_open_res *= b1_high_ > b1_dc_upper_15T4\n","        # long_open_res *= b1_low_ < b1_dc_lower_15T4\n","        \n","        # ------ dc_cc ------ #\n","        # b1_close_ = res_df['close_{}'.format(config.loc_set.point.tf_entry)].shift(tf_entry).to_numpy()\n","        # short_open_res *= b1_close_ > b1_dc_upper_15T4\n","        # long_open_res *= b1_close_ < b1_dc_lower_15T4\n","\n","        # if show_detail:\n","        #   sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","        #   sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))\n","\n","        # ------ empty_space ------ #       \n","        # dc_upper_15T4 = res_df['dc_upper_15T4'].to_numpy()\n","        # dc_lower_15T4 = res_df['dc_lower_15T4'].to_numpy() \n","        # high_ = res_df['high_{}'.format(config.loc_set.point.tf_entry)].to_numpy()\n","        # low_ = res_df['low_{}'.format(config.loc_set.point.tf_entry)].to_numpy()\n","        # short_open_res *= high_ < dc_upper_15T4\n","        # long_open_res *= low_ > dc_lower_15T4\n","        \n","        # ------ candle_pattern ------ #  \n","        # pattern_column = \"{}_{}\".format(config.loc_set.point.candle_pattern, config.loc_set.point.tf_entry)\n","        # short_open_res *= res_df[pattern_column].to_numpy() < 0\n","        # long_open_res *= res_df[pattern_column].to_numpy() > 0\n","\n","        # if show_detail:\n","        #   sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","        #   sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))\n","\n","\n","        # ------ lower_touch > upper_touch (long) ------ #\n","        # short_open_res *= res_df['short_upper_touch_idx_{}{}{}'.format(p1_itv1, p1_period1, p1_period2)].to_numpy() > res_df['short_lower_touch_idx_{}{}{}'.format(p1_itv1, p1_period1, p1_period2)].to_numpy()\n","        # long_open_res *= res_df['long_lower_touch_idx_{}{}{}'.format(p1_itv1, p1_period1, p1_period2)].to_numpy() > res_df['long_upper_touch_idx_{}{}{}'.format(p1_itv1, p1_period1, p1_period2)].to_numpy()\n","\n","        # ------ base_3T cross ------ #\n","        # dc_base_3T = res_df['dc_base_3T'].to_numpy()\n","        # b1_close = res_df['close'].shift(1).to_numpy()\n","        # short_open_res *= (b1_close > dc_base_3T) & (dc_base_3T > close)\n","        # long_open_res *= (b1_close < dc_base_3T) & (dc_base_3T < close)\n","\n","        # ------ wave_low < base_5T (long) ------ #\n","        # dc_base_5T = res_df['dc_base_5T'].to_numpy()        \n","        # short_open_res *= res_df['short_upper_touch_line_{}{}{}'.format(p1_itv1, p1_period1, p1_period2)].to_numpy() > dc_base_5T\n","        # long_open_res *= res_df['long_lower_touch_line_{}{}{}'.format(p1_itv1, p1_period1, p1_period2)].to_numpy() < dc_base_5T      \n","\n","        # ------ ppr ------ #\n","        # pumping_ratio(res_df, config, p1_itv1, p1_period1, p1_period2)  "]},{"cell_type":"markdown","metadata":{"id":"aTV4h3LjTZBp"},"source":["#### dump"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"dc49JPmoTaPQ"},"outputs":[],"source":["\n","    \n","    csd_period = 40\n","    res_df = dc_line_v4(res_df, res_df, dc_period=csd_period)\n","    \n","    dc_upper_ = res_df['dc_upper_T{}'.format(csd_period)].to_numpy()    \n","    dc_lower_ = res_df['dc_lower_T{}'.format(csd_period)].to_numpy()  \n","\n","    short_open_res2 *= dc_upper_touch_span == 0\n","    long_open_res2 *= dc_lower_touch_span == 0\n","\n","    # ------ csdbox ------ # --> 결국 dc's upper & lower\n","    if show_detail:\n","      sys_log.warning(\"csdbox\")\n","      # sys_log.warning(\"np.sum(short_open_res1 == 1) : {}\".format(np.sum(short_open_res1 == 1)))\n","      # sys_log.warning(\"np.sum(long_open_res1 == 1) : {}\".format(np.sum(long_open_res1 == 1)))\n","      sys_log.warning(\"np.sum(short_open_res2 == 1) : {}\".format(np.sum(short_open_res2 == 1)))\n","      sys_log.warning(\"np.sum(long_open_res2 == 1) : {}\".format(np.sum(long_open_res2 == 1)))\n","      \n","    # olds,\n","    # np.nan - np.nan = np.nan -> vectorize 가능할 것 => xx\n","    # 1. wave_high_prime_idx_ ~ long_open_idx1 의 valid(not_non) 한 idx 를 max_dc_lower 와 min_low 의 비교값으로 채워넣음\n","    # valid_idx = ~(pd.isnull(wave_cu_post_idx_fill_) | pd.isnull(long_open_idx1))\n","    # max_dc_lower_ = [dc_lower_[int(iin):int(iout)].max() for iin, iout in zip(wave_cu_post_idx_fill_, long_open_idx1) if not pd.isnull(iin) if not pd.isnull(iout)]\n","    # min_low = [low[int(iin):int(iout)].min() for iin, iout in zip(wave_high_prime_idx_, long_open_idx1) if not pd.isnull(iin) if not pd.isnull(iout)]\n","    \n","    short_tp_1_, long_tp_1_ = 'short_tp_1_{}'.format(selection_id), 'long_tp_1_{}'.format(selection_id)\n","    short_tp_0_, long_tp_0_ = 'short_tp_0_{}'.format(selection_id), 'long_tp_0_{}'.format(selection_id)\n","    short_tp_gap_, long_tp_gap_ = 'short_tp_gap_{}'.format(selection_id), 'long_tp_gap_{}'.format(selection_id)\n","\n","    short_ep_1_, long_ep_1_ = 'short_ep_1_{}'.format(selection_id), 'long_ep_1_{}'.format(selection_id)\n","    short_ep_0_, long_ep_0_ = 'short_ep_0_{}'.format(selection_id), 'long_ep_0_{}'.format(selection_id)\n","    short_ep_gap_, long_ep_gap_ = 'short_ep_gap_{}'.format(selection_id), 'long_ep_gap_{}'.format(selection_id)\n","\n","    short_epout_1_, long_epout_1_ = 'short_epout_1_{}'.format(selection_id), 'long_epout_1_{}'.format(selection_id)\n","    short_epout_0_, long_epout_0_ = 'short_epout_0_{}'.format(selection_id), 'long_epout_0_{}'.format(selection_id)\n","    short_epout_gap_, long_epout_gap_ = 'short_epout_gap_{}'.format(selection_id), 'long_epout_gap_{}'.format(selection_id)\n","    \n","    # ================== convert unit -> numpy ================== #   \n","    # tp_cols = [short_tp_1_, short_tp_0_, short_tp_gap_, long_tp_1_, long_tp_0_, long_tp_gap_]\n","    # epout_cols = [short_epout_1_, short_epout_0_, short_epout_gap_, long_epout_1_, long_epout_0_, long_epout_gap_]\n","\n","    # short_tp_1, short_tp_0, short_tp_gap, long_tp_1, long_tp_0, long_tp_gap = [res_df[col_].to_numpy() for col_ in tp_cols]\n","    # short_epout_1, short_epout_0, short_epout_gap, long_epout_1, long_epout_0, long_epout_gap = [res_df[col_].to_numpy() for col_ in epout_cols]\n","\n","    if p2_itv1 != \"None\":  # vectorized point2\n","        short_point1_on2_idx = pd.Series(\n","            np.where(res_df['short_wave_point_{}{}{}'.format(p1_itv1, p1_period1, p1_period2)], len_df_range, np.nan)).rolling(point1_to2_period,\n","                                                                                                                                    min_periods=1).max().to_numpy()  # period 내의 max_point1_idx\n","        long_point1_on2_idx = pd.Series(\n","            np.where(res_df['long_wave_point_{}{}{}'.format(p1_itv1, p1_period1, p1_period2)], len_df_range, np.nan)).rolling(point1_to2_period,\n","                                                                                                                                   min_periods=1).max().to_numpy()\n","\n","        short_point2_idx = pd.Series(\n","            np.where(res_df['short_wave_point_{}{}{}'.format(p2_itv1, p2_period1, p2_period2)], len_df_range, np.nan)).to_numpy()\n","        long_point2_idx = pd.Series(\n","            np.where(res_df['long_wave_point_{}{}{}'.format(p2_itv1, p2_period1, p2_period2)], len_df_range, np.nan)).to_numpy()\n","\n","        res_df['short_point_idxgap_{}'.format(selection_id)] = short_point2_idx - short_point1_on2_idx\n","        res_df['long_point_idxgap_{}'.format(selection_id)] = long_point2_idx - long_point1_on2_idx\n","\n","        # ------ p1 & p2 ------ #\n","        short_open_res *= ~np.isnan(res_df['short_point_idxgap_{}'.format(selection_id)].to_numpy())\n","        long_open_res *= ~np.isnan(res_df['long_point_idxgap_{}'.format(selection_id)].to_numpy())\n","\n","        if show_detail:\n","          sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","          sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))\n","\n","        # ------ p2 amax > p1_idx (long) ------ #\n","        short_open_res *= res_df['short_upper_touch_idx_{}{}{}'.format(p2_itv1, p2_period1, p2_period2)].to_numpy() > short_point1_on2_idx\n","        long_open_res *= res_df['long_lower_touch_idx_{}{}{}'.format(p2_itv1, p2_period1, p2_period2)].to_numpy() > long_point1_on2_idx\n","\n","        if show_detail:\n","          sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","          sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))\n","\n","        # ------ higher low (long) ------ #\n","        # short_a_line1_on2_ = get_line(short_point1_on2_idx, res_df['short_a_line_{}{}{}'.format(p1_itv1, p1_period1, p1_period2)].to_numpy())\n","        # long_a_line1_on2_ = get_line(long_point1_on2_idx, res_df['long_a_line_{}{}{}'.format(p1_itv1, p1_period1, p1_period2)].to_numpy())\n","\n","        # short_a_line2_ = res_df['short_a_line_{}{}{}'.format(p2_itv1, p2_period1, p2_period2)].to_numpy()\n","        # long_a_line2_ = res_df['long_a_line_{}{}{}'.format(p2_itv1, p2_period1, p2_period2)].to_numpy()\n","\n","        # short_open_res *= short_a_line1_on2_ >= short_a_line2_\n","        # long_open_res *= long_a_line1_on2_ <= long_a_line2_\n","\n","        # print(np.sum(long_open_res == 1))\n","\n","        # ------ higher high (long) ------ #\n","        # short_open_res *= co_roll_low_[:, -2] > co_roll_low_[:, -1]\n","        # long_open_res *= cu_roll_high_[:, -2] < cu_roll_high_[:, -1]\n","\n","        # short_open_res *= co_roll_low_[:, -3] > co_roll_low_[:, -2]\n","        # long_open_res *= cu_roll_high_[:, -3] < cu_roll_high_[:, -2]\n","\n","        # if show_detail:\n","        #   sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","        #   sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))\n","\n","        # ------ higher low (long) ------ # \n","        # short_open_res *= co_roll_high_[:, -2] > co_roll_high_[:, -1]\n","        # long_open_res *= cu_roll_low_[:, -2] < cu_roll_low_[:, -1]\n","\n","        # if show_detail:\n","        #   sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","        #   sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))  \n","\n","        # ------ tf2_base < wave_low ------ #\n","        # short_open_res *= (dc_base_ > co_roll_high_[:, -1])\n","        # long_open_res *= (dc_base_ < cu_roll_low_[:, -1])\n","\n","        # if show_detail:\n","        #   sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","        #   sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))  \n","\n","        # short_open_res *= (cu_prime_wave_base > cu_prime_dc_base) & (dc_base_ > co_prime_wave_base)\n","        # long_open_res *= (co_prime_wave_base < co_prime_dc_base) & (dc_base_ < cu_prime_wave_base)\n","\n","        short_open_res *= (co_prime_dc_base < co_roll_low_[:, -2])\n","        long_open_res *= (cu_prime_dc_base > cu_roll_high_[:, -2])  #  b1_cu_prime_idx’s tf2_base > b1_high -> b1 이 아님 (error)\n","\n","\n","        res_df[short_epout_1_] = res_df['short_wave_low_{}{}{}'.format(itv, period1, period2)]\n","        res_df[short_epout_0_] = res_df['short_new_wave_high_{}{}{}'.format(itv, period1, period2)]\n","        res_df[long_epout_1_] = res_df['long_wave_high_{}{}{}'.format(itv, period1, period2)]\n","        res_df[long_epout_0_] = res_df['long_new_wave_low_{}{}{}'.format(itv, period1, period2)]\n","        \n","        # ------ get candle_lastidx ------ #        \n","        tf_entry = to_itvnum(config.loc_set.point.tf_entry)\n","        b1_candle_shift = np_timeidx % tf_entry + 1\n","        b2_candle_shift = b1_candle_shift + tf_entry\n","        b3_candle_shift = b1_candle_shift + 2 * tf_entry\n","\n","        print(b3_candle_shift)\n","\n","        # bb_upper_ = res_df['bb_upper_{}{}'.format('T', 60)].to_numpy()\n","        # bb_lower_ = res_df['bb_lower_{}{}'.format('T', 60)].to_numpy()\n","        # bb_upper2_ = res_df['bb_upper2_{}{}'.format('T', 60)].to_numpy()\n","        # bb_lower2_ = res_df['bb_lower2_{}{}'.format('T', 60)].to_numpy()\n","        # bb_upper3_ = res_df['bb_upper3_{}{}'.format('T', 60)].to_numpy()\n","        # bb_lower3_ = res_df['bb_lower3_{}{}'.format('T', 60)].to_numpy()\n","\n","        # ------ compare by back_idx  ------ #   \n","        b3_bb_upper_ = res_df['bb_upper_{}{}'.format('T', 60)].shift(b3_candle_shift).to_numpy()\n","        b3_bb_lower_ = res_df['bb_lower_{}{}'.format('T', 60)].shift(b3_candle_shift).to_numpy()\n","        b3_bb_upper2_ = res_df['bb_upper2_{}{}'.format('T', 60)].shift(b3_candle_shift).to_numpy()\n","        b3_bb_lower2_ = res_df['bb_lower2_{}{}'.format('T', 60)].shift(b3_candle_shift).to_numpy()\n","        b3_close = res_df['close'].shift(b3_candle_shift).to_numpy()\n","\n","        b2_bb_upper2_ = res_df['bb_upper2_{}{}'.format('T', 60)].shift(b2_candle_shift).to_numpy()\n","        b2_bb_lower2_ = res_df['bb_lower2_{}{}'.format('T', 60)].shift(b2_candle_shift).to_numpy()\n","        b2_bb_upper3_ = res_df['bb_upper3_{}{}'.format('T', 60)].shift(b2_candle_shift).to_numpy()\n","        b2_bb_lower3_ = res_df['bb_lower3_{}{}'.format('T', 60)].shift(b2_candle_shift).to_numpy()\n","        b2_close = res_df['close'].shift(b2_candle_shift).to_numpy()\n","\n","        b1_bb_upper_ = res_df['bb_upper_{}{}'.format('T', 60)].shift(b1_candle_shift).to_numpy()\n","        b1_bb_lower_ = res_df['bb_lower_{}{}'.format('T', 60)].shift(b1_candle_shift).to_numpy()\n","        b1_bb_upper2_ = res_df['bb_upper2_{}{}'.format('T', 60)].shift(b1_candle_shift).to_numpy()\n","        b1_bb_lower2_ = res_df['bb_lower2_{}{}'.format('T', 60)].shift(b1_candle_shift).to_numpy()\n","        b1_close = res_df['close'].shift(b1_candle_shift).to_numpy()\n"]},{"cell_type":"markdown","metadata":{"id":"HKdUKKl-483N"},"source":["### utils_public"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"nzOYWA2kqZ0d"},"outputs":[],"source":["# from funcs.funcs_indicator import *\n","# from funcs.funcs_trader import *\n","# import logging\n","# from ast import literal_eval\n","\n","pd.set_option('mode.chained_assignment',  None)\n","sys_log = logging.getLogger()\n","\n","\n","class OrderSide:\n","    BUY = \"BUY\"\n","    SELL = \"SELL\"\n","    INVALID = None\n","\n","\n","def lvrg_set(res_df, config, open_side, ep_, out_, fee, limit_leverage=50):\n","    selection_id = config.selection_id\n","    if not pd.isnull(out_) and not config.lvrg_set.static_lvrg:\n","        if selection_id in ['v3']:\n","            if open_side == OrderSide.SELL:\n","                loss = out_ / ep_\n","            else:\n","                loss = ep_ / out_\n","        else:  # 이 phase 가 정석, 윗 phase 는 결과가 수익 극대화라 사용함\n","            if open_side == OrderSide.SELL:\n","                loss = ep_ / out_\n","            else:\n","                loss = out_ / ep_\n","\n","        config.lvrg_set.leverage = config.lvrg_set.target_pct / abs(loss - 1 - (fee + config.trader_set.market_fee))\n","\n","    # ------------ leverage rejection ------------ #\n","    # 감당하기 힘든 fluc. 의 경우 진입하지 않음 - dynamic_lvrg 사용 경우\n","    if config.lvrg_set.leverage < 1 and config.lvrg_set.lvrg_rejection:\n","        # if config.lvrg_set.leverage >= 1 and config.lvrg_set.lvrg_rejection:\n","        return None\n","\n","    if not config.lvrg_set.allow_float:\n","        config.lvrg_set.leverage = int(config.lvrg_set.leverage)\n","\n","    config.lvrg_set.leverage = min(limit_leverage, max(config.lvrg_set.leverage, 1))\n","\n","    return config.lvrg_set.leverage\n","\n","\n","def sync_check(df_, config, order_side=\"OPEN\", row_slice=True):\n","    try:\n","        make_itv_list = [m_itv.replace('m', 'T') for m_itv in literal_eval(config.trader_set.itv_list)]\n","        row_list = literal_eval(config.trader_set.row_list)\n","        rec_row_list = literal_eval(config.trader_set.rec_row_list)\n","        offset_list = literal_eval(config.trader_set.offset_list)\n","\n","        assert len(make_itv_list) == len(offset_list), \"length of itv & offset_list should be equal\"\n","        htf_df_list = [to_htf(df_, itv_=itv_, offset=offset_) for itv_idx, (itv_, offset_)\n","                       in enumerate(zip(make_itv_list, offset_list)) if itv_idx != 0]  #\n","        htf_df_list.insert(0, df_)\n","\n","        # for htf_df_ in htf_df_list:\n","        #     print(htf_df_.tail())\n","\n","        #       Todo        #\n","        #        1. row_list calc.\n","        #           a. indi. 를 만들기 위한 최소 period 가 존재하고, 그 indi. 를 사용한 lb_period 가 존재함\n","        #           b. => default_period + lb_period\n","        #               i. from sync_check, public_indi, ep_point2, ep_dur 의 tf 별 max lb_period check\n","        #                   1. default_period + max lb_period check\n","        #                       a. 현재까지 lb_period_list\n","        #                           h_prev_idx (open / close) 60\n","        #                           dc_period 135\n","        #                           zone_dc_period 135\n","\n","        # --------- slicing (in trader phase only) --------- #\n","        #               --> latency 영향도가 높은 곳은 이곳\n","        if row_slice:  # recursive 가 아닌 indi. 의 latency 를 고려한 slicing\n","            df, df_3T, df_5T, df_15T, df_30T, df_H, df_4H = [df_s.iloc[-row_list[row_idx]:].copy() for row_idx, df_s in enumerate(htf_df_list)]\n","            rec_df, rec_df_3T, rec_df_5T, rec_df_15T, rec_df_30T, rec_df_H, rec_df_4H = [df_s.iloc[-rec_row_list[row_idx]:].copy() for row_idx, df_s\n","                                                                                         in\n","                                                                                         enumerate(htf_df_list)]\n","        else:\n","            df, df_3T, df_5T, df_15T, df_30T, df_H, df_4H = htf_df_list\n","            rec_df, rec_df_3T, rec_df_5T, rec_df_15T, rec_df_30T, rec_df_H, rec_df_4H = htf_df_list\n","\n","        # --------- add indi. --------- #\n","\n","        #        1. 필요한 indi. 는 enlist_epouttp & mr_check 보면서 삽입\n","        #        2. min use_rows 계산을 위해서, tf 별로 gathering 함        #\n","        # start_0 = time.time()\n","\n","        # ------ T ------ #\n","        # df = dc_line(df, None, 'T', dc_period=20)\n","        # df = bb_line(df, None, 'T')\n","        #\n","        # ------ 3T ------ #\n","        # df = dc_line(df, df_3T, '3T')\n","\n","        # ------ 5T ------ #\n","        # h_candle_v3(df, '5T')\n","        df = dc_line(df, df_5T, '5T')\n","        df = bb_line(df, df_5T, '5T')\n","        #\n","        # ------ 15T ------ #\n","        # h_candle_v3(df, '15T')\n","        df = dc_line(df, df_15T, '15T')\n","        df = bb_line(df, df_15T, '15T')\n","        #\n","        # ------ 30T ------ #\n","        # df = bb_line(df, df_30T, '30T')\n","        #\n","        # ------ H ------ #\n","        # h_candle_v3(df, 'H')\n","        # df = dc_line(df, df_H, 'H')\n","\n","        # ------ 4H ------ #\n","        # df = bb_line(df, df_4H, '4H')\n","\n","        # rec_df['rsi_1m'] = rsi(rec_df, 14)  # Todo - recursive, 250 period\n","        # df = df.join(to_lower_tf_v2(df, rec_df.iloc[:, [-1]], [-1], backing_i=0), how='inner')  # <-- join same_tf manual\n","        #\n","        # if order_side in [\"OPEN\"]:\n","        #     rec_df_5T['ema_5T'] = ema(rec_df_5T['close'], 195)  # Todo - recursive, 1100 period (5T)\n","        #     df = df.join(to_lower_tf_v2(df, rec_df_5T, [-1]), how='inner')\n","\n","    except Exception as e:\n","        sys_log.error(\"error in sync_check :\", e)\n","    else:\n","        return df\n","\n","\n","    return wave_publics_v2(t_df, cu_bool, co_bool, ohlc_list, wave_period)\n","\n","def public_indi(res_df, config, np_timeidx, order_side=\"OPEN\"):\n","\n","    selection_id = config.selection_id\n","\n","    wave_itv1 = config.tr_set.wave_itv1\n","    wave_itv2 = config.tr_set.wave_itv2\n","    wave_period1 = config.tr_set.wave_period1\n","    wave_period2 = config.tr_set.wave_period2\n","    tc_period = config.tr_set.tc_period\n","    roll_hl_cnt = 3\n","  \n","    # assert to_itvnum(wave_itv1) > 1  # wave_itv2 == 'T' and \n","    # ====== public ====== #\n","    # res_df = wave_range_dcbase_v11_3(res_df, config, over_period=2) \n","    \n","    # ------------ wave_period1 ------------ #\n","    if to_itvnum(wave_itv1) > 1: \n","      offset = '1h' if wave_itv1 != 'D' else '9h'\n","      htf_df = to_htf(res_df, wave_itv1, offset=offset)\n","      htf_df = wave_range_cci_v4(htf_df, wave_period1)\n","      \n","      # cols = list(htf_df.columns[-15:-4])  # except idx col\n","      cols = list(htf_df.columns[4:])  # 15T_ohlc 를 제외한 wave_range_cci_v4 로 추가된 cols, 다 넣어버리기 (추후 혼란 방지)\n","\n","      valid_co_prime_idx, valid_cu_prime_idx, roll_co_idx_arr, roll_cu_idx_arr = roll_wave_hl_idx_v5(htf_df, wave_itv1, wave_period1, roll_hl_cnt=roll_hl_cnt)\n","\n","      htf_df = get_roll_wave_data_v2(htf_df, valid_co_prime_idx, roll_co_idx_arr, 'wave_high_fill_{}{}'.format(wave_itv1, wave_period1), roll_hl_cnt)\n","      cols += list(htf_df.columns[-roll_hl_cnt:])\n","\n","      htf_df = get_roll_wave_data_v2(htf_df, valid_cu_prime_idx, roll_cu_idx_arr, 'wave_low_fill_{}{}'.format(wave_itv1, wave_period1), roll_hl_cnt)\n","      cols += list(htf_df.columns[-roll_hl_cnt:])\n","\n","      htf_df = wave_range_ratio_v4_3(htf_df, wave_itv1, wave_period1, roll_hl_cnt=roll_hl_cnt)\n","      cols += list(htf_df.columns[-4:])\n","\n","      # ------ 필요한 cols 만 join (htf's idx 정보는 ltf 와 sync. 가 맞지 않음 - join 불가함) ------ #\n","      res_df.drop(cols, inplace=True, axis=1, errors='ignore')\n","      res_df = res_df.join(to_lower_tf_v3(res_df, htf_df, cols, backing_i=1), how='inner')\n","    else:\n","      # res_df = wave_range_cci_v4(res_df, wave_period1)\n","      res_df = wave_range_cci_v4_1(res_df, wave_period1)\n","      # res_df = wave_range_stoch_v1(res_df, wave_period1)\n","      # res_df = wave_range_dc_envel_v1(res_df, wave_period1)\n","\n","      res_df = get_wave_time_ratio(res_df, wave_itv1, wave_period1)\n","\n","      valid_co_prime_idx, valid_cu_prime_idx, roll_co_idx_arr, roll_cu_idx_arr = roll_wave_hl_idx_v5(res_df, wave_itv1, wave_period1, roll_hl_cnt=roll_hl_cnt)\n","\n","      # res_df = add_roll_idx(res_df, valid_cu_prime_idx, roll_cu_idx_arr, 'wave_cu_{}{}'.format(wave_itv1, wave_period1), roll_hl_cnt)\n","      # res_df = add_roll_idx(res_df, valid_co_prime_idx, roll_co_idx_arr, 'wave_co_{}{}'.format(wave_itv1, wave_period1), roll_hl_cnt)\n","\n","      res_df = get_roll_wave_data_v2(res_df, valid_co_prime_idx, roll_co_idx_arr, 'wave_high_fill_{}{}'.format(wave_itv1, wave_period1), roll_hl_cnt)  # Todo, 갱신되는 high 의 last_high 를 추리기 위해 co_prime 사용함\n","      res_df = get_roll_wave_data_v2(res_df, valid_cu_prime_idx, roll_cu_idx_arr, 'wave_low_fill_{}{}'.format(wave_itv1, wave_period1), roll_hl_cnt)\n","      \n","      res_df = wave_range_ratio_v4_3(res_df, wave_itv1, wave_period1, roll_hl_cnt=roll_hl_cnt)\n","      res_df = get_wave_length(res_df, valid_co_prime_idx, valid_cu_prime_idx, roll_co_idx_arr, roll_cu_idx_arr, wave_itv1, wave_period1, roll_hl_cnt=roll_hl_cnt)\n","\n","      # res_df = tc_dc_base(res_df, tc_period)\n","      res_df = tc_cci(res_df, tc_period)\n","      # res_df = tc_cci_v2(res_df, tc_period)\n","\n","      # ------ prev_low vs ma ------ #\n","      # ma_period = 60\n","      # res_df = ma(res_df, ma_period)\n","      \n","      # res_df['short_ma_T{}'.format(ma_period)] = res_df['ma_T{}'.format(ma_period)]\n","      # res_df['long_ma_T{}'.format(ma_period)] = res_df['ma_T{}'.format(ma_period)]\n","      \n","      # res_df = get_roll_wave_data_v2(res_df, valid_co_prime_idx, roll_co_idx_arr, 'short_ma_T{}'.format(ma_period), roll_hl_cnt)   # Todo, for index sync.\n","      # res_df = get_roll_wave_data_v2(res_df, valid_cu_prime_idx, roll_cu_idx_arr, 'long_ma_T{}'.format(ma_period), roll_hl_cnt)   # Todo, for index sync.\n","\n","    # ------------ wave_period2 ------------ #\n","    if wave_itv1 != wave_itv2 or wave_period1 != wave_period2:\n","      assert wave_itv2 == 'T'      \n","      \n","      res_df = wave_range_cci_v4_1(res_df, wave_period2, band_width=99)\n","\n","      valid_co_prime_idx, valid_cu_prime_idx, roll_co_idx_arr, roll_cu_idx_arr = roll_wave_hl_idx_v5(res_df, wave_itv2, wave_period2, roll_hl_cnt=roll_hl_cnt)\n","      res_df = get_roll_wave_data_v2(res_df, valid_co_prime_idx, roll_co_idx_arr, 'wave_high_fill_{}{}'.format(wave_itv2, wave_period2), roll_hl_cnt)\n","      res_df = get_roll_wave_data_v2(res_df, valid_cu_prime_idx, roll_cu_idx_arr, 'wave_low_fill_{}{}'.format(wave_itv2, wave_period2), roll_hl_cnt)\n","\n","      res_df = wave_range_ratio_v4_3(res_df, wave_itv2, wave_period2, roll_hl_cnt=roll_hl_cnt)\n","      \n","\n","    # ------ wave_loc_pct (bb) ------ #\n","    # res_df = wave_loc_pct_v2(res_df, config, 'T', 60)\n","    # res_df = wave_loc_pct(res_df, config, 'T', 60)\n","\n","    # future_cols = ['cu_es_15T1', 'co_es_15T1', 'upper_wick_ratio_15T', 'lower_wick_ratio_15T']\n","    # itv_list = ['15T', '15T', '15T', '15T']\n","    # res_df = backing_future_data(res_df, future_cols, itv_list)\n","\n","    # ====== intervaly ====== #    \n","    # ------ 5T ------ #\n","    # res_df = dc_level(res_df, '5T', 1)\n","    # res_df = bb_level(res_df, '5T', 1)\n","\n","    # res_df = st_level(res_df, '5T', 1)\n","\n","    # ------ 15T ------ #\n","    # res_df = dc_level(res_df, '15T', 1)\n","    # res_df = bb_level(res_df, '15T', 1)\n","    # res_df = dtk_plot(res_df, dtk_itv2='15T', hhtf_entry=15, use_dtk_line=config.loc_set.zone1.use_dtk_line, np_timeidx=np_timeidx)\n","\n","    # res_df = st_level(res_df, '15T', 1)\n","\n","    # ------ 30T ------ #\n","    # res_df = dc_level(res_df, '30T', 1)\n","    # res_df = bb_level(res_df, '30T', 1)\n","    # res_df = st_level(res_df, '30T', 1)\n","\n","    # ------ H ------ #\n","    # res_df = bb_level(res_df, 'H', 1)\n","\n","    # ------ 4H ------ #\n","    # res_df = bb_level(res_df, '4H', 1)\n","\n","    # res_df['dc_upper_v2'.format(selection_id)] = res_df['high'].rolling(config.loc_set.zone1.dc_period).max()   # Todo, consider dc_period\n","    # res_df['dc_lower_v2'.format(selection_id)] = res_df['low'].rolling(config.loc_set.zone1.dc_period).min()\n","\n","    # res_df['zone_dc_upper_v2'.format(selection_id)] = res_df['high'].rolling(config.loc_set.zone1.zone_dc_period).max()   # Todo, consider zone_dc_period\n","    # res_df['zone_dc_lower_v2'.format(selection_id)] = res_df['low'].rolling(config.loc_set.zone1.zone_dc_period).min()\n","\n","    # if order_side in [\"OPEN\"]:\n","        # candle_score_v3(res_df, 'T', unsigned=False)\n","        # candle_score_v3(res_df, config.loc_set.point1.exp_itv, unsigned=False)\n","\n","    #     temp indi.    #\n","    # res_df[\"ma30_1m\"] = res_df['close'].rolling(30).mean()\n","    # res_df[\"ma60_1m\"] = res_df['close'].rolling(60).mean()\n","    # res_df = dtk_plot(res_df, dtk_itv2='15T', hhtf_entry=15, use_dtk_line=config.loc_set.zone1.use_dtk_line, np_timeidx=np_timeidx)\n","\n","    return res_df\n","\n","\n","def expiry_v0(res_df, config, op_idx, e_j, tp_j, np_datas, open_side):\n","    high, low = np_datas\n","    selection_id = config.selection_id\n","    expire = 0\n","\n","    if config.tr_set.expire_tick != \"None\":\n","        if e_j - op_idx >= config.tr_set.expire_tick:\n","            expire = 1\n","\n","    if config.tr_set.expire_k1 != \"None\":\n","        if open_side == OrderSide.SELL:\n","            short_tp_1_ = res_df['short_tp_1_{}'.format(selection_id)].to_numpy()  # id 에 따라 dynamic 변수라 이곳에서 numpy 화 진행\n","            short_tp_gap_ = res_df['short_tp_gap_{}'.format(selection_id)].to_numpy()\n","            if low[e_j] <= short_tp_1_[tp_j] - short_tp_gap_[tp_j] * config.tr_set.expire_k1:\n","                expire = 1\n","        else:\n","            long_tp_1_ = res_df['long_tp_1_{}'.format(selection_id)].to_numpy()  # iloc 이 빠를까, to_numpy() 가 빠를까  # 3.94 ms --> 5.34 ms (iloc)\n","            long_tp_gap_ = res_df['long_tp_gap_{}'.format(selection_id)].to_numpy()\n","            if high[e_j] >= long_tp_1_[tp_j] + long_tp_gap_[tp_j] * config.tr_set.expire_k1:\n","                expire = 1\n","\n","    return expire\n","\n","\n","def expiry(res_df, config, op_idx, e_j, tp_j, np_datas, open_side):\n","    high, low = np_datas\n","    selection_id = config.selection_id\n","    expire = 0\n","\n","    if config.tr_set.expire_tick != \"None\":\n","        if e_j - op_idx >= config.tr_set.expire_tick:\n","            expire = 1\n","\n","    if config.tr_set.expire_k1 != \"None\":\n","        if open_side == OrderSide.SELL:\n","            short_tp_ = res_df['short_tp_{}'.format(selection_id)].to_numpy()  # id 에 따라 dynamic 변수라 이곳에서 numpy 화 진행\n","            short_tp_gap_ = res_df['short_tp_gap_{}'.format(selection_id)].to_numpy()\n","            if low[e_j] <= short_tp_[tp_j] + short_tp_gap_[tp_j] * config.tr_set.expire_k1:\n","                expire = 1\n","        else:\n","            long_tp_ = res_df['long_tp_{}'.format(selection_id)].to_numpy()  # iloc 이 빠를까, to_numpy() 가 빠를까  # 3.94 ms --> 5.34 ms (iloc)\n","            long_tp_gap_ = res_df['long_tp_gap_{}'.format(selection_id)].to_numpy()\n","            if high[e_j] >= long_tp_[tp_j] - long_tp_gap_[tp_j] * config.tr_set.expire_k1:\n","                expire = 1\n","\n","    return expire\n","\n","\n","# def expiry_p1(res_df, config, op_idx1, i, op_idx2, np_datas, open_side):\n","def expiry_p1(res_df, config, op_idx1, op_idx2, tp1, tp0, tp_gap, np_datas, open_side):\n","    high, low = np_datas\n","    selection_id = config.selection_id\n","    expire = 0\n","    touch_idx = None\n","\n","    # if config.tr_set.expire_tick != \"None\":\n","    #     if e_j - op_idx >= config.tr_set.expire_tick:\n","    #         expire = 1\n","\n","    # Todo, p1's tp1, 0 cannot be vectorized\n","    #   a. expiration 의 조건은 wave1, 0 의 broken\n","    idx_range = np.arange(op_idx1, op_idx2)\n","    if config.tr_set.expire_k1 != \"None\":\n","        if open_side == OrderSide.SELL:\n","            touch_idx = np.where((low[op_idx1:op_idx2] <= tp1 + tp_gap * config.tr_set.expire_k1) | \\\n","                                 (high[op_idx1:op_idx2] >= tp0 - tp_gap * config.tr_set.expire_k1),\n","                                 idx_range, np.nan)\n","            # if op_idx1 >= 16353:\n","            #   print(\"high[16353], tp0 :\", high[16353], tp0)\n","            if np.sum(~np.isnan(touch_idx)) > 0:  # touch 가 존재하면, \n","            # if low[op_idx1:op_idx2].min() <= tp1 + tp_gap * config.tr_set.expire_k1 or \\\n","            # high[op_idx1:op_idx2].max() >= tp0 - tp_gap * config.tr_set.expire_k1:   # p2_box loc. 이 있어서, op_idx2 + 1 안함\n","                expire = 1\n","        else:\n","            touch_idx = np.where((high[op_idx1:op_idx2] >= tp1 - tp_gap * config.tr_set.expire_k1) | \\\n","                                  (low[op_idx1:op_idx2] <= tp0 + tp_gap * config.tr_set.expire_k1),\n","                                  idx_range, np.nan)\n","            if np.sum(~np.isnan(touch_idx)) > 0:                                  \n","            # if high[op_idx1:op_idx2].max() >= tp1 - tp_gap * config.tr_set.expire_k1 or \\\n","            # low[op_idx1:op_idx2].min() <= tp0 + tp_gap * config.tr_set.expire_k1:\n","                expire = 1\n","\n","    return expire, np.nanmin(touch_idx)\n","\n","\n","def expiry_p2(res_df, config, op_idx, e_j, wave1, wave_gap, np_datas, open_side):\n","    high, low = np_datas\n","    selection_id = config.selection_id\n","    expire = 0\n","\n","    if config.tr_set.expire_tick != \"None\":\n","        if e_j - op_idx >= config.tr_set.expire_tick:\n","            expire = 1\n","\n","    if config.tr_set.expire_k2 != \"None\":\n","        if open_side == OrderSide.SELL:\n","            if low[e_j] <= wave1 + wave_gap * config.tr_set.expire_k2:\n","                expire = 1\n","        else:\n","            if high[e_j] >= wave1 - wave_gap * config.tr_set.expire_k2:\n","                expire = 1\n","\n","    return expire\n","\n","\n","# def ep_loc_point2_v2(res_df, config, i, out_j, side=OrderSide.SELL):\n","#     allow_ep_in = 1\n","#     if config.selection_id in ['v5_2']:\n","#         if side == OrderSide.SELL:\n","#             dc_upper_T = res_df['dc_upper_T'].to_numpy()\n","#             dc_upper_15T = res_df['dc_upper_15T'].to_numpy()\n","#             allow_ep_in *= (dc_upper_T[i - 1] <= dc_upper_15T[i]) & \\\n","#                            (dc_upper_15T[i - 1] != dc_upper_15T[i])\n","#         else:\n","#             dc_lower_T = res_df['dc_lower_T'].to_numpy()\n","#             dc_lower_15T = res_df['dc_lower_15T'].to_numpy()\n","#             allow_ep_in *= (dc_lower_T[i - 1] >= dc_lower_15T[i]) & \\\n","#                            (dc_lower_15T[i - 1] != dc_lower_15T[i])\n","\n","#     if config.selection_id in ['v3_4']:\n","#         wick_score_list = literal_eval(config.ep_set.point2.wick_score_list)\n","#         wick_scores = [res_df['wick_score_{}'.format(s_itv)].to_numpy() for s_itv in literal_eval(config.ep_set.point2.score_itv_list)]\n","#         close = res_df['close'].to_numpy()\n","#         if side == OrderSide.SELL:\n","#             sup_T = res_df['sup_T'].to_numpy()\n","#             allow_ep_in *= close[i] < sup_T[i - 1]\n","#             if len(wick_score_list) != 0:\n","#                 allow_ep_in *= wick_scores[0][i] < -wick_score_list[0]\n","#         else:\n","#             resi_T = res_df['resi_T'].to_numpy()\n","#             allow_ep_in *= close[i] > resi_T[i - 1]\n","#             if len(wick_score_list) != 0:\n","#                 allow_ep_in *= wick_scores[0][i] > wick_score_list[0]\n","\n","#     if allow_ep_in:\n","#         out_j = i\n","#     return allow_ep_in, out_j\n","\n","\n","# vectorized calc.\n","# multi-stem 에 따라 dynamic vars.가 입력되기 때문에 class 내부 vars. 로 종속시키지 않음\n","def ep_loc_p1_v3(res_df, config, np_timeidx, show_detail=True, ep_loc_side=OrderSide.SELL):\n","    # ------- param init ------- #\n","    selection_id = config.selection_id\n","    c_i = config.trader_set.complete_index\n","    len_df = len(res_df)\n","    mr_res = np.ones(len_df)\n","    zone_arr = np.full(len_df, 'n')\n","\n","    # ------ process 한번에 처리해서 param_check 만 ver. 별로 하면 될 것 ------ #\n","    #     => public_indi() 가 될 것\n","    #     1. 사용한 param 정보와 matching 된 data 병렬로 나열 logging 될 것\n","    tp_fee, out_fee = calc_tp_out_fee_v2(config)\n","\n","    # ============ tr_thresh ============ #  # vectorize allow only for p1_hhm\n","    if config.loc_set.point1.short_tr_thresh != \"None\":  #  and not config.tr_set.check_hlm:\n","        if ep_loc_side == OrderSide.SELL:\n","            short_tr_ = res_df['short_tr_{}'.format(selection_id)].to_numpy()\n","            mr_res *= short_tr_ >= config.loc_set.point1.short_tr_thresh\n","            # mr_res *= short_tr_ <= config.loc_set.point1.short_tr_thresh + 0.1\n","            if show_detail:\n","                sys_log.warning(\n","                    \"short_tr_ >= short_tr_thresh : {:.5f} {:.5f} ({})\".format(short_tr_[c_i], config.loc_set.point1.short_tr_thresh, mr_res[c_i]))\n","        else:\n","            long_tr_ = res_df['long_tr_{}'.format(selection_id)].to_numpy()\n","            mr_res *= long_tr_ >= config.loc_set.point1.long_tr_thresh\n","            # mr_res *= long_tr_ <= config.loc_set.point1.long_tr_thresh + 0.1\n","            if show_detail:\n","                sys_log.warning(\n","                    \"long_tr_ >= long_tr_thresh : {:.5f} {:.5f} ({})\".format(long_tr_[c_i], config.loc_set.point1.long_tr_thresh, mr_res[c_i]))\n","\n","    # ============ spread - independent to tr_set ============ #  --> Todo, 사용 안하고 싶은 wave_point1\n","    if config.loc_set.point1.short_spread != \"None\":\n","        if selection_id in ['v3']:\n","            if ep_loc_side == OrderSide.SELL:\n","                bb_base_5T = res_df['bb_base_5T'].to_numpy()  # to_numpy() 는 ep_loc 에서 진행됨\n","                bb_lower_5T = res_df['bb_lower_5T'].to_numpy()\n","                short_spread = (bb_base_5T - bb_lower_5T - tp_fee * bb_base_5T) / (bb_base_5T - bb_lower_5T + out_fee * bb_base_5T)\n","                 \n","                if show_detail:\n","                    sys_log.warning(\n","                        \"short_spread >= config.loc_set.point1.short_spread : {:.5f} {:.5f} ({})\".format(short_spread[c_i], config.loc_set.point1.short_spread, mr_res[c_i]))\n","            else:\n","                bb_upper_5T = res_df['bb_upper_5T'].to_numpy()\n","                dc_lower_5T = res_df['dc_lower_5T'].to_numpy()\n","                # mr_res *= (bb_base_5T - dc_lower_5T - tp_fee * bb_upper_5T) / (bb_base_5T - dc_lower_5T + out_fee * bb_base_5T) >= config.loc_set.point1.long_spread\n","                long_spread = (bb_upper_5T - dc_lower_5T - tp_fee * bb_upper_5T) / (bb_upper_5T - dc_lower_5T + out_fee * bb_upper_5T)\n","                mr_res *= long_spread >= config.loc_set.point1.long_spread\n","                if show_detail:\n","                    sys_log.warning(\n","                        \"long_spread >= config.loc_set.point1.long_spread : {:.5f} {:.5f} ({})\".format(long_spread[c_i], config.loc_set.point1.long_spread, mr_res[c_i]))                  \n","\n","    # ============ point1 ratios ============ #\n","    # ------ wave_range_ratio ------ #    \n","    if config.loc_set.point1.wrr_10 != \"None\":   # for excessive range rejection         \n","      wave_itv1 = config.tr_set.wave_itv1\n","      wave_period1 = config.tr_set.wave_period1\n","      co_wrr_10_ = res_df['co_wrr_10_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","      cu_wrr_10_ = res_df['cu_wrr_10_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","      if ep_loc_side == OrderSide.SELL:\n","        mr_res *= cu_wrr_10_ <= config.loc_set.point1.wrr_10\n","        # mr_res *= cu_wrr_10_ >= config.loc_set.point1.wrr_10\n","        if show_detail:\n","            sys_log.warning(\"cu_wrr_10_ <= config.loc_set.point1.wrr_10 : {:.5f} {:.5f} ({})\".format(cu_wrr_10_[c_i], config.loc_set.point1.wrr_10, mr_res[c_i]))\n","      else:\n","        mr_res *= co_wrr_10_ <= config.loc_set.point1.wrr_10\n","        # mr_res *= co_wrr_10_ >= config.loc_set.point1.wrr_10\n","        if show_detail:\n","            sys_log.warning(\"co_wrr_10_ <= config.loc_set.point1.wrr_10 : {:.5f} {:.5f} ({})\".format(co_wrr_10_[c_i], config.loc_set.point1.wrr_10, mr_res[c_i]))\n","\n","    if config.loc_set.point1.wrr_21 != \"None\":   # for excessive range rejection         \n","      wave_itv1 = config.tr_set.wave_itv1\n","      wave_period1 = config.tr_set.wave_period1\n","      co_wrr_21_ = res_df['co_wrr_21_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","      cu_wrr_21_ = res_df['cu_wrr_21_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","      if ep_loc_side == OrderSide.SELL:\n","        mr_res *= cu_wrr_21_ <= config.loc_set.point1.wrr_21\n","        # mr_res *= cu_wrr_21_ >= config.loc_set.point1.wrr_21\n","        if show_detail:\n","            sys_log.warning(\"cu_wrr_21_ <= config.loc_set.point1.wrr_21 : {:.5f} {:.5f} ({})\".format(cu_wrr_21_[c_i], config.loc_set.point1.wrr_21, mr_res[c_i]))\n","      else:\n","        mr_res *= co_wrr_21_ <= config.loc_set.point1.wrr_21\n","        # mr_res *= co_wrr_21_ >= config.loc_set.point1.wrr_21\n","        if show_detail:\n","            sys_log.warning(\"co_wrr_21_ <= config.loc_set.point1.wrr_21 : {:.5f} {:.5f} ({})\".format(co_wrr_21_[c_i], config.loc_set.point1.wrr_21, mr_res[c_i]))\n","\n","    if config.loc_set.point1.wrr_32 != \"None\":            \n","      wave_itv1 = config.tr_set.wave_itv1\n","      wave_period1 = config.tr_set.wave_period1\n","      co_wrr_32_ = res_df['co_wrr_32_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","      cu_wrr_32_ = res_df['cu_wrr_32_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","      if ep_loc_side == OrderSide.SELL:\n","        mr_res *= cu_wrr_32_ <= config.loc_set.point1.wrr_32 #+ 0.1  # 0.1 0.05\n","        # mr_res *= (cu_wrr_32_ >= config.loc_set.point1.wrr_32) # & (cu_wrr_32_ <= 1)\n","        # mr_res *= cu_wrr_32_ >= config.loc_set.point1.wrr_32 - 0.1\n","        if show_detail:\n","            sys_log.warning(\"cu_wrr_32_ <= config.loc_set.point1.wrr_32 : {:.5f} {:.5f} ({})\".format(cu_wrr_32_[c_i], config.loc_set.point1.wrr_32, mr_res[c_i]))\n","      else:\n","        mr_res *= co_wrr_32_ <= config.loc_set.point1.wrr_32 #+ 0.1  # 0.1 0.05\n","        # mr_res *= (co_wrr_32_ >= config.loc_set.point1.wrr_32) # & (co_wrr_32_ <= 1)\n","        # mr_res *= co_wrr_32_ >= config.loc_set.point1.wrr_32 - 0.1\n","        if show_detail:\n","            sys_log.warning(\"co_wrr_32_ <= config.loc_set.point1.wrr_32 : {:.5f} {:.5f} ({})\".format(co_wrr_32_[c_i], config.loc_set.point1.wrr_32, mr_res[c_i]))\n","\n","    # ------ enough_space - Todo, future_data ------ #\n","    if config.loc_set.point1.co_es != \"None\":      \n","      itv, period1 = config.tr_set.p1_itv1, config.tr_set.p1_period1 \n","      b1_cu_es_ = res_df['b1_cu_es_{}{}'.format(itv, period1)].to_numpy()\n","      b1_co_es_ = res_df['b1_co_es_{}{}'.format(itv, period1)].to_numpy()\n","      if ep_loc_side == OrderSide.SELL:\n","        mr_res *= b1_co_es_ >= config.loc_set.point1.co_es\n","        mr_res *= b1_co_es_ <= config.loc_set.point1.co_es + 2\n","        if show_detail:\n","            sys_log.warning(\"b1_co_es_ >= config.loc_set.point1.co_es : {:.5f} {:.5f} ({})\".format(b1_co_es_[c_i], config.loc_set.point1.co_es, mr_res[c_i]))\n","      else:\n","        mr_res *= b1_cu_es_ >= config.loc_set.point1.cu_es\n","        mr_res *= b1_cu_es_ <= config.loc_set.point1.cu_es + 1\n","        if show_detail:\n","            sys_log.warning(\"b1_cu_es_ >= config.loc_set.point1.cu_es : {:.5f} {:.5f} ({})\".format(b1_cu_es_[c_i], config.loc_set.point1.cu_es, mr_res[c_i]))\n","\n","    # ------------ wick_ratio - Todo, future_data ------------ #\n","    # if config.loc_set.point1.short_wick_ratio != \"None\":\n","    #   b1_upper_wick_ratio_ = res_df['b1_upper_wick_ratio_{}'.format(config.loc_set.point1.wick_itv)].to_numpy()\n","    #   b1_lower_wick_ratio_ = res_df['b1_lower_wick_ratio_{}'.format(config.loc_set.point1.wick_itv)].to_numpy()      \n","    #   if ep_loc_side == OrderSide.SELL:\n","    #       # mr_res *= b1_upper_wick_ratio_ >= config.loc_set.point1.short_wick_ratio\n","    #       mr_res *= b1_lower_wick_ratio_ >= config.loc_set.point1.short_wick_ratio\n","    #       if show_detail:\n","    #           sys_log.warning(\"b1_lower_wick_ratio_ >= config.loc_set.point1.short_wick_ratio : {:.5f} {:.5f} ({})\".format(b1_lower_wick_ratio_[c_i], config.loc_set.point1.short_wick_ratio, mr_res[c_i]))\n","    #   else:\n","    #       # mr_res *= b1_lower_wick_ratio_ >= config.loc_set.point1.long_wick_ratio\n","    #       mr_res *= b1_upper_wick_ratio_ >= config.loc_set.point1.long_wick_ratio\n","    #       if show_detail:\n","    #           sys_log.warning(\"b1_upper_wick_ratio_ >= config.loc_set.point1.long_wick_ratio : {:.5f} {:.5f} ({})\".format(b1_upper_wick_ratio_[c_i], config.loc_set.point1.long_wick_ratio, mr_res[c_i]))\n","\n","    # ------ candle_range_ratio - Todo, future_data ------ #\n","    # if config.loc_set.point1.crr != \"None\":   \n","    #   tf_entry = to_itvnum(config.loc_set.point1.tf_entry)\n","    #   b1_crr_ = res_df['crr_{}'.format(config.loc_set.point1.tf_entry)].shift(tf_entry).to_numpy()\n","    #   mr_res *= b1_crr_ >= config.loc_set.point1.crr\n","    #   if show_detail:\n","    #       sys_log.warning(\"b1_crr_ >= config.loc_set.point1.crr : {:.5f} {:.5f} ({})\".format(b1_crr_[c_i], config.loc_set.point1.crr, mr_res[c_i]))\n","    \n","    # ------ dc_over_body_ratio ------ #\n","    if config.loc_set.point1.dbr != \"None\":\n","      b1_lwdbr = res_df['b1_lwdbr'].to_numpy()\n","      b1_updbr = res_df['b1_updbr'].to_numpy()\n","      if ep_loc_side == OrderSide.SELL:        \n","        mr_res *= b1_lwdbr >= config.loc_set.point1.dbr\n","        if show_detail:\n","            sys_log.warning(\n","                \"b1_lwdbr >= config.loc_set.point1.dbr : {:.5f} {:.5f} ({})\".format(b1_lwdbr[c_i], config.loc_set.point1.dbr, mr_res[c_i]))\n","      else:\n","        mr_res *= b1_updbr >= config.loc_set.point1.dbr\n","        if show_detail:\n","            sys_log.warning(\n","                \"b1_updbr >= config.loc_set.point1.dbr : {:.5f} {:.5f} ({})\".format(b1_updbr[c_i], config.loc_set.point1.dbr, mr_res[c_i]))\n","            \n","    if config.loc_set.point1.dbr2 != \"None\":\n","      b1_lwdbr = res_df['b1_lwdbr'].to_numpy()\n","      b1_updbr = res_df['b1_updbr'].to_numpy()\n","      if ep_loc_side == OrderSide.SELL:    \n","        mr_res *= b1_updbr >= config.loc_set.point1.dbr2\n","        if show_detail:\n","            sys_log.warning(\n","                \"b1_updbr >= config.loc_set.point1.dbr2 : {:.5f} {:.5f} ({})\".format(b1_updbr[c_i], config.loc_set.point1.dbr2, mr_res[c_i]))\n","      else:\n","        mr_res *= b1_lwdbr >= config.loc_set.point1.dbr2\n","        if show_detail:\n","            sys_log.warning(\n","                \"b1_lwdbr >= config.loc_set.point1.dbr2 : {:.5f} {:.5f} ({})\".format(b1_lwdbr[c_i], config.loc_set.point1.dbr2, mr_res[c_i]))\n","\n","    # ------ wick_body_ratio ------ #\n","    if config.loc_set.point1.wbr != \"None\":\n","        wave_body_ratio = res_df['wave_body_ratio'].to_numpy()\n","        mr_res *= wave_body_ratio >= config.loc_set.point1.wbr\n","        if show_detail:\n","            sys_log.warning(\n","                \"wave_body_ratio >= config.loc_set.point1.wbr : {:.5f} {:.5f} ({})\".format(wave_body_ratio[c_i], config.loc_set.point1.wbr, mr_res[c_i]))\n","            \n","    # ------ body_rel_ratio ------ #\n","    if config.loc_set.point1.brr != \"None\":\n","        body_rel_ratio_ = res_df['body_rel_ratio_{}'.format(config.loc_set.point1.tf_entry)].to_numpy()\n","        mr_res *= body_rel_ratio_ <= config.loc_set.point1.brr\n","        if show_detail:\n","            sys_log.warning(\n","                \"body_rel_ratio_ <= config.loc_set.point1.brr : {:.5f} {:.5f} ({})\".format(body_rel_ratio_[c_i], config.loc_set.point1.brr, mr_res[c_i]))\n","\n","    # ------ pumping_ratio ------ #\n","    if config.loc_set.point1.ppr != \"None\":\n","      if ep_loc_side == OrderSide.SELL:\n","        short_ppr_ = res_df['short_ppr_{}'.format(selection_id)].to_numpy()\n","        mr_res *= short_ppr_ >= config.loc_set.point1.ppr\n","        if show_detail:\n","            sys_log.warning(\"short_ppr_ >= config.loc_set.point1.ppr : {:.5f} {:.5f} ({})\".format(short_ppr_[c_i], config.loc_set.point1.ppr, mr_res[c_i]))\n","      else:\n","        long_ppr_ = res_df['long_ppr_{}'.format(selection_id)].to_numpy()\n","        mr_res *= long_ppr_ >= config.loc_set.point1.ppr\n","        if show_detail:\n","            sys_log.warning(\"long_ppr_ >= config.loc_set.point1.ppr : {:.5f} {:.5f} ({})\".format(long_ppr_[c_i], config.loc_set.point1.ppr, mr_res[c_i]))\n"," \n","    # ============ rtc_zone  ============ #  --> Todo, 사용 안하고 싶은 wave_dur., 추후 zone 으로 옮길 것\n","    # ------ dtk ------ #\n","    if config.loc_set.zone1.dt_k != \"None\":\n","        # ------ dc_v2 ------ #\n","        dc_lower_v2 = res_df['dc_lower_v2'.format(selection_id)].to_numpy()\n","        short_dtk_1_ = res_df['short_dtk_1_{}'.format(selection_id)].to_numpy() - \\\n","                       res_df['short_dtk_gap_{}'.format(selection_id)].to_numpy() * config.loc_set.zone1.dt_k\n","        dc_upper_v2 = res_df['dc_upper_v2'.format(selection_id)].to_numpy()\n","        long_dtk_1_ = res_df['long_dtk_1_{}'.format(selection_id)].to_numpy() + \\\n","                      res_df['long_dtk_gap_{}'.format(selection_id)].to_numpy() * config.loc_set.zone1.dt_k\n","        if ep_loc_side == OrderSide.SELL:\n","            mr_res *= dc_lower_v2 >= short_dtk_1_\n","            if show_detail:\n","                sys_log.warning(\n","                    \"dc_lower_v2 >= short_dtk_1_ : {:.5f} {:.5f} ({})\".format(dc_lower_v2[c_i], short_dtk_1_[c_i], mr_res[c_i]))\n","        else:\n","            mr_res *= dc_upper_v2 <= long_dtk_1_\n","            if show_detail:\n","                sys_log.warning(\n","                    \"dc_upper_v2 <= long_dtk_1_ : {:.5f} {:.5f} ({})\".format(dc_upper_v2[c_i], long_dtk_1_[c_i], mr_res[c_i]))\n","                \n","    # ============ zone ============ #\n","    # ------ config var. 이 등록되지 않은 dur. 은 selection_id 으로 조건문을 나눔 (lvrg_set 과 동일) ------ #\n","    if config.loc_set.zone1.use_zone:\n","\n","      # ------------ 추세선 리스트 on_price ------------ #\n","      wave_itv1 = config.tr_set.wave_itv1\n","      wave_period1 = config.tr_set.wave_period1      \n","      \n","      wave_high_fill1_ = res_df['wave_high_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","      wave_low_fill1_ = res_df['wave_low_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","\n","      short_tp_0_ = res_df['short_tp_0_{}'.format(selection_id)].to_numpy()\n","      long_tp_0_ = res_df['long_tp_0_{}'.format(selection_id)].to_numpy()\n","\n","        # ------ ma ------ #\n","      # ma_period = 60\n","      # # res_df = ma(res_df, ma_period)       \n","      # ma_ = res_df['ma_T{}'.format(ma_period)].to_numpy()\n","\n","      # if ep_loc_side == OrderSide.SELL:\n","      #   mr_res *= wave_high_fill1_ < ma_\n","      #   if show_detail:\n","      #     sys_log.warning(\"wave_high_fill1_ < ma_ : {:.5f} {:.5f} ({})\".format(wave_high_fill1_[c_i], ma_[c_i], mr_res[c_i]))\n","      # else:\n","      #   mr_res *= wave_low_fill1_ > ma_\n","      #   if show_detail:\n","      #     sys_log.warning(\"wave_low_fill1_ > ma_ : {:.5f} {:.5f} ({})\".format(wave_low_fill1_[c_i], ma_[c_i], mr_res[c_i]))\n","        \n","        # ------ dc_base ------ #      \n","      # dc_base_ = res_df['dc_base_T30'].to_numpy()\n","      dc_base_T20 = res_df['dc_base_T20'].to_numpy()\n","      dc_base_5T20 = res_df['dc_base_5T20'].to_numpy()\n","      dc_base_15T20 = res_df['dc_base_15T20'].to_numpy()\n","      dc_base_H20 = res_df['dc_base_H20'].to_numpy()\n","      dc_base_4H20 = res_df['dc_base_4H20'].to_numpy()\n","      \n","      if ep_loc_side == OrderSide.SELL:\n","        mr_res *= short_tp_0_ < dc_base_H20\n","        if show_detail:\n","          sys_log.warning(\"short_tp_0_ < dc_base_H20 : {:.5f} {:.5f} ({})\".format(short_tp_0_[c_i], dc_base_H20[c_i], mr_res[c_i]))\n","      else:\n","        mr_res *= long_tp_0_ > dc_base_H20\n","        if show_detail:\n","          sys_log.warning(\"long_tp_0_ > dc_base_H20 : {:.5f} {:.5f} ({})\".format(long_tp_0_[c_i], dc_base_H20[c_i], mr_res[c_i]))   \n","\n","\n","      # if ep_loc_side == OrderSide.SELL:\n","      #   mr_res *= wave_high_fill1_ < dc_base_5T20\n","      #   if show_detail:\n","      #     sys_log.warning(\"wave_high_fill1_ < dc_base_5T20 : {:.5f} {:.5f} ({})\".format(wave_high_fill1_[c_i], dc_base_5T20[c_i], mr_res[c_i]))\n","      # else:\n","      #   mr_res *= wave_low_fill1_ > dc_base_5T20\n","      #   if show_detail:\n","      #     sys_log.warning(\"wave_low_fill1_ > dc_base_5T20 : {:.5f} {:.5f} ({})\".format(wave_low_fill1_[c_i], dc_base_5T20[c_i], mr_res[c_i]))    \n","\n","\n","      # if ep_loc_side == OrderSide.SELL:\n","      #   mr_res *= dc_base_T20 < dc_base_5T20\n","      #   if show_detail:\n","      #     sys_log.warning(\"dc_base_T20 < dc_base_5T20 : {:.5f} {:.5f} ({})\".format(dc_base_T20[c_i], dc_base_5T20[c_i], mr_res[c_i]))\n","      # else:\n","      #   mr_res *= dc_base_T20 > dc_base_5T20\n","      #   if show_detail:\n","      #     sys_log.warning(\"dc_base_T20 > dc_base_5T20 : {:.5f} {:.5f} ({})\".format(dc_base_T20[c_i], dc_base_5T20[c_i], mr_res[c_i]))  \n","          \n","      # if ep_loc_side == OrderSide.SELL:\n","      #   mr_res *= dc_base_5T20 < dc_base_15T20\n","      #   if show_detail:\n","      #     sys_log.warning(\"dc_base_5T20 < dc_base_15T20 : {:.5f} {:.5f} ({})\".format(dc_base_5T20[c_i], dc_base_15T20[c_i], mr_res[c_i]))\n","      # else:\n","      #   mr_res *= dc_base_5T20 > dc_base_15T20\n","      #   if show_detail: \n","      #     sys_log.warning(\"dc_base_5T20 > dc_base_15T20 : {:.5f} {:.5f} ({})\".format(dc_base_5T20[c_i], dc_base_15T20[c_i], mr_res[c_i]))  \n","          \n","      # if ep_loc_side == OrderSide.SELL:\n","      #   mr_res *= dc_base_5T20 < dc_base_15T20\n","      #   if show_detail:\n","      #     sys_log.warning(\"dc_base_15T20 < dc_base_H20 : {:.5f} {:.5f} ({})\".format(dc_base_15T20[c_i], dc_base_H20[c_i], mr_res[c_i]))\n","      # else:\n","      #   mr_res *= dc_base_5T20 > dc_base_15T20\n","      #   if show_detail: \n","      #     sys_log.warning(\"dc_base_15T20 > dc_base_H20 : {:.5f} {:.5f} ({})\".format(dc_base_15T20[c_i], dc_base_H20[c_i], mr_res[c_i]))  \n","      \n","      # ------------ out_price ------------ #\n","        # ------ macd ------ #\n","      # # macd_ = res_df['macd_T535'].to_numpy()\n","      # macd_ = res_df['macd_hist_T53515'].to_numpy()\n","\n","      # if ep_loc_side == OrderSide.SELL:\n","      #   mr_res *= macd_ < 0\n","      #   if show_detail:\n","      #     sys_log.warning(\"macd_ < 0 : {:.5f} {:.5f} ({})\".format(macd_[c_i], 0, mr_res[c_i]))\n","      # else:\n","      #   mr_res *= macd_ > 0\n","      #   if show_detail:\n","      #     sys_log.warning(\"macd_ > 0 : {:.5f} {:.5f} ({})\".format(macd_[c_i], 0, mr_res[c_i]))\n","\n","      # ------ bb_base uptrend ------ #\n","      # bb_base_T100 = res_df['bb_base_T100'].to_numpy()\n","      # b1_bb_base_T100 = res_df['bb_base_T100'].shift(1).to_numpy()\n","\n","      # lb_period = config.loc_set.zone1.bb_trend_period\n","      # bb_base_downtrend = pd.Series(b1_bb_base_T100 < bb_base_T100).rolling(lb_period).sum().to_numpy() == 0\n","      # bb_base_uptrend = pd.Series(b1_bb_base_T100 > bb_base_T100).rolling(lb_period).sum().to_numpy() == 0\n","\n","      # if ep_loc_side == OrderSide.SELL:\n","      #   mr_res *= bb_base_downtrend\n","      #   if show_detail:\n","      #       sys_log.warning(\"bb_base_downtrend : {:.5f} ({})\".format(bb_base_downtrend[c_i], mr_res[c_i]))       \n","      # else:\n","      #   mr_res *= bb_base_uptrend\n","      #   if show_detail:\n","      #       sys_log.warning(\"bb_base_uptrend : {:.5f} ({})\".format(bb_base_uptrend[c_i], mr_res[c_i]))    \n","\n","    # -------------- zoned tr_set - post_work -------------- #\n","    if config.tr_set.c_ep_gap != \"None\" or config.tr_set.t_out_gap != \"None\":\n","        #       by zone_dtk       #\n","        #         c_zone        #\n","        zone_dc_upper_v2_ = res_df['zone_dc_upper_v2'.format(selection_id)].to_numpy()\n","        long_dtk_plot_1 = res_df['long_dtk_plot_1'].to_numpy() + res_df['long_dtk_plot_gap'].to_numpy() * config.loc_set.zone1.zone_dt_k\n","        zone_dc_lower_v2_ = res_df['zone_dc_lower_v2'.format(selection_id)].to_numpy()\n","        short_dtk_plot_1 = res_df['short_dtk_plot_1'].to_numpy() - res_df['short_dtk_plot_gap'].to_numpy() * config.loc_set.zone1.zone_dt_k\n","        if ep_loc_side == OrderSide.SELL:\n","            zone_res = zone_dc_upper_v2_ > long_dtk_plot_1  # mr_res 와는 별개임\n","            pos = 'short'\n","        else:\n","            zone_res = zone_dc_lower_v2_ < short_dtk_plot_1\n","            pos = 'long'\n","\n","        # static 여부에 따른 vectorized adj. - dynamic 은 vectorize 불가\n","        if config.ep_set.static_ep and config.tr_set.c_ep_gap != \"None\":\n","            res_df['{}_ep_{}'.format(pos, selection_id)][zone_res] = res_df['{}_ep2_{}'.format(pos, selection_id)][zone_res]\n","        if config.out_set.static_out and config.tr_set.t_out_gap != \"None\":\n","            res_df['{}_out_{}'.format(pos, selection_id)][~zone_res] = res_df['{}_out2_{}'.format(pos, selection_id)][\n","                ~zone_res]  # t_zone 에 대한 out2 setting\n","        zone_arr = np.where(zone_res == 1, 'c', 't')\n","\n","    return mr_res, zone_arr  # mr_res 의 True idx 가 open signal\n","\n","\n","def ep_loc_p2_v3(res_df, config, np_timeidx, show_detail=True, ep_loc_side=OrderSide.SELL):\n","    # ------- param init ------- #\n","    selection_id = config.selection_id\n","    c_i = config.trader_set.complete_index\n","    len_df = len(res_df)\n","    mr_res = np.ones(len_df)\n","    zone_arr = np.full(len_df, 'n')\n","\n","    # ------ process 한번에 처리해서 param_check 만 ver. 별로 하면 될 것 ------ #\n","    #     => public_indi() 가 될 것\n","    #     1. 사용한 param 정보와 matching 된 data 병렬로 나열 logging 될 것\n","    # tp_fee, out_fee = calc_tp_out_fee_v2(config)\n","\n","    # ============ point1 ratios ============ #\n","    # ------ wave_range_ratio ------ #\n","    # if config.loc_set.point2.cu_wrr_21 != \"None\":   # for excessive range rejection         \n","    #   wave_itv1 = config.tr_set.wave_itv1\n","    #   wave_period1 = config.tr_set.wave_period1\n","    #   co_wrr_21_ = res_df['co_wrr_21_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","    #   cu_wrr_21_ = res_df['cu_wrr_21_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","    #   if ep_loc_side == OrderSide.SELL:\n","    #     mr_res *= cu_wrr_21_ <= config.loc_set.point2.cu_wrr_21\n","    #     mr_res *= cu_wrr_21_ >= config.loc_set.point2.cu_wrr_21 - 0.2\n","    #     if show_detail:\n","    #         sys_log.warning(\"cu_wrr_21_ <= config.loc_set.point2.cu_wrr_21 : {:.5f} {:.5f} ({})\".format(cu_wrr_21_[c_i], config.loc_set.point2.cu_wrr_21, mr_res[c_i]))\n","    #   else:\n","    #     mr_res *= co_wrr_21_ <= config.loc_set.point2.co_wrr_21\n","    #     mr_res *= co_wrr_21_ >= config.loc_set.point2.co_wrr_21 - 0.2\n","    #     if show_detail:\n","    #         sys_log.warning(\"co_wrr_21_ <= config.loc_set.point2.co_wrr_21 : {:.5f} {:.5f} ({})\".format(co_wrr_21_[c_i], config.loc_set.point2.co_wrr_21, mr_res[c_i]))\n","\n","    if config.loc_set.point2.wrr_32 != \"None\":            \n","      wave_itv2 = config.tr_set.wave_itv2\n","      wave_period2 = config.tr_set.wave_period2\n","      co_wrr_32_ = res_df['co_wrr_32_{}{}'.format(wave_itv2, wave_period2)].to_numpy()\n","      cu_wrr_32_ = res_df['cu_wrr_32_{}{}'.format(wave_itv2, wave_period2)].to_numpy()\n","      if ep_loc_side == OrderSide.SELL:\n","        mr_res *= cu_wrr_32_ <= config.loc_set.point2.wrr_32  #  + 0.1  # 0.1 0.05\n","        # mr_res *= cu_wrr_32_ >= config.loc_set.point2.wrr_32\n","        if show_detail:\n","            sys_log.warning(\"cu_wrr_32_ <= config.loc_set.point2.wrr_32 : {:.5f} {:.5f} ({})\".format(cu_wrr_32_[c_i], config.loc_set.point2.wrr_32, mr_res[c_i]))\n","      else:\n","        mr_res *= co_wrr_32_ <= config.loc_set.point2.wrr_32  #  + 0.1  # 0.1 0.05\n","        # mr_res *= co_wrr_32_ >= config.loc_set.point2.wrr_32\n","        if show_detail:\n","            sys_log.warning(\"co_wrr_32_ <= config.loc_set.point2.wrr_32 : {:.5f} {:.5f} ({})\".format(co_wrr_32_[c_i], config.loc_set.point2.wrr_32, mr_res[c_i]))\n","\n","    if config.loc_set.point2.csd_period != \"None\":\n","      wave_itv2 = config.tr_set.wave_itv2\n","      csd_period = config.loc_set.point2.csd_period\n","      \n","      res_df = dc_line_v4(res_df, res_df, dc_period=csd_period)\n","      dc_upper_ = res_df['dc_upper_{}{}'.format(wave_itv2, csd_period)].to_numpy()    \n","      dc_lower_ = res_df['dc_lower_{}{}'.format(wave_itv2, csd_period)].to_numpy()\n","      if ep_loc_side == OrderSide.SELL:\n","        csdbox = res_df['short_tp_1_{}'.format(selection_id)].to_numpy() + res_df['short_tp_gap_{}'.format(selection_id)].to_numpy() * config.loc_set.point2.csdbox_range\n","        mr_res *= dc_upper_ <= csdbox\n","        if show_detail:\n","            sys_log.warning(\"dc_upper_ <= csdbox : {:.5f} {:.5f} ({})\".format(dc_upper_[c_i], csdbox[c_i], mr_res[c_i]))\n","      else:\n","        csdbox = res_df['long_tp_1_{}'.format(selection_id)].to_numpy() - res_df['long_tp_gap_{}'.format(selection_id)].to_numpy() * config.loc_set.point2.csdbox_range\n","        mr_res *= dc_lower_ >= csdbox\n","        if show_detail:\n","            sys_log.warning(\"dc_lower_ >= csdbox : {:.5f} {:.5f} ({})\".format(dc_lower_[c_i], csdbox[c_i], mr_res[c_i]))\n","\n","    # ============ zone ============ #    \n","    # ------------ 추세선 리스트 on_price ------------ #\n","    if config.loc_set.zone2.use_zone:\n","      wave_itv1 = config.tr_set.wave_itv1\n","      wave_period1 = config.tr_set.wave_period1      \n","      \n","      wave_high_fill1_ = res_df['wave_high_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","      wave_low_fill1_ = res_df['wave_low_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","\n","      dc_base_T20 = res_df['dc_base_T20'].to_numpy()\n","      dc_base_5T20 = res_df['dc_base_5T20'].to_numpy()\n","      dc_base_15T20 = res_df['dc_base_15T20'].to_numpy()\n","      dc_base_H20 = res_df['dc_base_H20'].to_numpy()\n","      dc_base_4H20 = res_df['dc_base_4H20'].to_numpy()\n","\n","        # ------ ma ------ #\n","      # ma_period = 60\n","      # # res_df = ma(res_df, ma_period)       \n","      # ma_ = res_df['ma_T{}'.format(ma_period)].to_numpy()\n","\n","      # if ep_loc_side == OrderSide.SELL:\n","      #   mr_res *= wave_high_fill1_ < ma_\n","      #   if show_detail:\n","      #     sys_log.warning(\"wave_high_fill1_ < ma_ : {:.5f} {:.5f} ({})\".format(wave_high_fill1_[c_i], ma_[c_i], mr_res[c_i]))\n","      # else:\n","      #   mr_res *= wave_low_fill1_ > ma_\n","      #   if show_detail:\n","      #     sys_log.warning(\"wave_low_fill1_ > ma_ : {:.5f} {:.5f} ({})\".format(wave_low_fill1_[c_i], ma_[c_i], mr_res[c_i]))\n","        \n","        # ------ out0 & dcbase ------ #      \n","      if ep_loc_side == OrderSide.SELL:\n","        # mr_res *= wave_high_fill1_ < dc_base_5T20\n","        mr_res *= wave_high_fill1_ < dc_base_H20\n","        if show_detail:\n","          # sys_log.warning(\"wave_high_fill1_ < dc_base_5T20 : {:.5f} {:.5f} ({})\".format(wave_high_fill1_[c_i], dc_base_5T20[c_i], mr_res[c_i]))\n","          sys_log.warning(\"wave_high_fill1_ < dc_base_H20 : {:.5f} {:.5f} ({})\".format(wave_high_fill1_[c_i], dc_base_H20[c_i], mr_res[c_i]))\n","      else:\n","        # mr_res *= wave_low_fill1_ > dc_base_5T20\n","        mr_res *= wave_low_fill1_ > dc_base_H20\n","        if show_detail:\n","          # sys_log.warning(\"wave_low_fill1_ > dc_base_5T20 : {:.5f} {:.5f} ({})\".format(wave_low_fill1_[c_i], dc_base_5T20[c_i], mr_res[c_i]))\n","          sys_log.warning(\"wave_low_fill1_ > dc_base_H20 : {:.5f} {:.5f} ({})\".format(wave_low_fill1_[c_i], dc_base_H20[c_i], mr_res[c_i]))\n","\n","        # ------ dcbase ------ #\n","      if ep_loc_side == OrderSide.SELL:\n","        # mr_res *= dc_base_T20 < dc_base_5T20\n","      #   mr_res *= dc_base_5T20 < dc_base_15T20\n","        mr_res *= dc_base_15T20 < dc_base_H20\n","        if show_detail:\n","      #     sys_log.warning(\"dc_base_T20 < dc_base_5T20 : {:.5f} {:.5f} ({})\".format(dc_base_T20[c_i], dc_base_5T20[c_i], mr_res[c_i]))\n","      #     sys_log.warning(\"dc_base_5T20 < dc_base_15T20 : {:.5f} {:.5f} ({})\".format(dc_base_5T20[c_i], dc_base_15T20[c_i], mr_res[c_i]))\n","          sys_log.warning(\"dc_base_5T20 < dc_base_H20 : {:.5f} {:.5f} ({})\".format(dc_base_5T20[c_i], dc_base_H20[c_i], mr_res[c_i]))\n","      else:\n","      #   mr_res *= dc_base_T20 > dc_base_5T20\n","      #   mr_res *= dc_base_5T20 > dc_base_15T20\n","        mr_res *= dc_base_15T20 > dc_base_H20\n","        if show_detail:\n","      #     sys_log.warning(\"dc_base_T20 > dc_base_5T20 : {:.5f} {:.5f} ({})\".format(dc_base_T20[c_i], dc_base_5T20[c_i], mr_res[c_i]))  \n","      #     sys_log.warning(\"dc_base_5T20 > dc_base_15T20 : {:.5f} {:.5f} ({})\".format(dc_base_5T20[c_i], dc_base_15T20[c_i], mr_res[c_i]))\n","          sys_log.warning(\"dc_base_5T20 > dc_base_H20 : {:.5f} {:.5f} ({})\".format(dc_base_5T20[c_i], dc_base_H20[c_i], mr_res[c_i]))\n","      \n","\n","\n","    return mr_res, zone_arr  # mr_res 의 True idx 가 open signal"]},{"cell_type":"markdown","metadata":{"id":"EQ63Jwpvr7qA"},"source":["#### legacy"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"csZwxsP5r_Pz"},"outputs":[],"source":["      \n","    # ------ hl_loc_pct ------ #\n","    if config.loc_set.zone.hl_loc_pct != \"None\":      \n","      wave_high_loc_pct_ = res_df['wave_high_loc_pct_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","      wave_low_loc_pct_ = res_df['wave_low_loc_pct_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","\n","      if ep_loc_side == OrderSide.SELL:\n","        mr_res *= wave_high_loc_pct_ >= config.loc_set.zone.hl_loc_pct\n","        mr_res *= wave_high_loc_pct_ <= config.loc_set.zone.hl_loc_pct + 0.5\n","        if show_detail:\n","            sys_log.warning(\"wave_high_loc_pct_ >= config.loc_set.zone.hl_loc_pct : {:.5f} {:.5f} ({})\".format(wave_high_loc_pct_[c_i], config.loc_set.zone.hl_loc_pct, mr_res[c_i]))\n","      else:\n","        mr_res *= wave_low_loc_pct_ >= config.loc_set.zone.hl_loc_pct\n","        mr_res *= wave_low_loc_pct_ <= config.loc_set.zone.hl_loc_pct + 0.5\n","        if show_detail:\n","            sys_log.warning(\"wave_low_loc_pct_ >= config.loc_set.zone.hl_loc_pct : {:.5f} {:.5f} ({})\".format(wave_low_loc_pct_[c_i], config.loc_set.zone.hl_loc_pct, mr_res[c_i]))\n","\n","            \n","        # ------------------ wave_biaser (sr_confirmer) ------------------ #\n","        if selection_id in ['3_9']:     \n","          itv, period1, period2 = config.tr_set.p1_itv1, config.tr_set.p1_period1, config.tr_set.p1_period2          \n","\n","          if ep_loc_side == OrderSide.SELL:\n","            short_wave_high_ = res_df['short_wave_high_{}{}{}'.format(itv, period1, period2)]\n","            bb_lower_5T_amax = get_line(res_df['short_wave_high_idx_{}{}{}'.format(itv, period1, period2)].to_numpy(), res_df['bb_lower_5T'].to_numpy())\n","            mr_res *= short_wave_high_ <= bb_lower_5T_amax\n","            if show_detail:\n","                sys_log.warning(\"short_wave_high_ <= bb_lower_5T_amax : {:.5f} {:.5f} ({})\".format(short_wave_high_[c_i], bb_lower_5T_amax[c_i], mr_res[c_i]))\n","          else:\n","            long_wave_low_ = res_df['long_wave_low_{}{}{}'.format(itv, period1, period2)]\n","            bb_upper_5T_amax = get_line(res_df['long_wave_low_idx_{}{}{}'.format(itv, period1, period2)].to_numpy(), res_df['bb_upper_5T'].to_numpy())\n","            mr_res *= long_wave_low_ >= bb_upper_5T_amax\n","            if show_detail:\n","                sys_log.warning(\"long_wave_low_ >= bb_upper_5T_amax : {:.5f} {:.5f} ({})\".format(long_wave_low_[c_i], bb_upper_5T_amax[c_i], mr_res[c_i]))\n","\n","\n","        if selection_id in ['4_3', '3_5', '3_51']:\n","            dc_base_T20 = res_df['dc_base_T20'].to_numpy()\n","            dc_base_3T20 = res_df['dc_base_3T20'].to_numpy()\n","            # b1_dc_base_3T20 = res_df['dc_base_3T20'].shift(3).to_numpy()\n","            # dc_base_5T = res_df['dc_base_5T'].to_numpy()\n","            # dc_base_15T = res_df['dc_base_15T'].to_numpy()\n","            # dc_base_30T = res_df['dc_base_30T'].to_numpy()\n","            dc_base_H20 = res_df['dc_base_H20'].to_numpy()\n","            # dc_base_4H = res_df['dc_base_4H'].to_numpy()\n","            # dc_base_D = res_df['dc_base_D'].to_numpy()\n","\n","            itv, period1, period2 = config.tr_set.p1_itv1, config.tr_set.p1_period1, config.tr_set.p1_period2\n","            if ep_loc_side == OrderSide.SELL:\n","                # ------ short_base_ <= dc_base_3T20 ------ #\n","                short_base_ = res_df['short_base_{}{}{}'.format(itv, period1, period2)].to_numpy()\n","                mr_res *= short_base_ <= dc_base_3T20\n","                if show_detail:\n","                    sys_log.warning(\"short_base_ <= dc_base_3T20 : {:.5f} {:.5f} ({})\".format(short_base_[c_i], dc_base_3T20[c_i], mr_res[c_i]))\n","\n","                # mr_res *= short_base_ <= dc_base_T20\n","                # if show_detail:\n","                #     sys_log.warning(\"short_base_ <= dc_base_T20 : {:.5f} {:.5f} ({})\".format(short_base_[c_i], dc_base_T20[c_i], mr_res[c_i]))\n","\n","                # ------ reject csd ------ #\n","                # dc_upper_ = res_df['dc_upper_{}{}'.format(itv, period1)].to_numpy()\n","                # mr_res *= dc_upper_ <= dc_base_3T\n","                # if show_detail:\n","                #     sys_log.warning(\"dc_upper_ <= dc_base_3T20 : {:.5f} {:.5f} ({})\".format(dc_upper_[c_i], dc_base_3T[c_i], mr_res[c_i]))\n","\n","                # Todo, 부호 조심\n","                # dc_upper2_ = res_df['dc_upper_{}{}'.format(itv, period2)].to_numpy()\n","                # mr_res *= dc_upper2_ >= dc_base_H\n","                # if show_detail:\n","                #     sys_log.warning(\"dc_upper2_ >= dc_base_H20 : {:.5f} {:.5f} ({})\".format(dc_upper2_[c_i], dc_base_H[c_i], mr_res[c_i]))  \n","\n","                # long 과 동일한 dur.\n","                dc_lower2_ = res_df['dc_lower_{}{}'.format(itv, period2)].to_numpy()\n","                mr_res *= dc_lower2_ >= dc_base_H20\n","                if show_detail:\n","                    sys_log.warning(\"dc_lower2_ >= dc_base_H20 : {:.5f} {:.5f} ({})\".format(dc_lower2_[c_i], dc_base_H20[c_i], mr_res[c_i]))  \n","\n","                # ------ consecutive base ascender ------ #\n","                # ------ 1. roll_min ------ #\n","                dc_base_3T20_rollmin = res_df['dc_base_3T20'].rolling(config.loc_set.zone.base_roll_period).min().to_numpy()\n","                mr_res *= dc_base_3T20_rollmin == dc_base_3T20\n","                if show_detail:\n","                    sys_log.warning(\n","                        \"dc_base_3T20_rollmin == dc_base_3T2020 : {:.5f} {:.5f} ({})\".format(dc_base_3T20_rollmin[c_i], dc_base_3T20[c_i], mr_res[c_i]))\n","            else:\n","                # ------ long_base >= dc_base_3T20 ------ #\n","                long_base_ = res_df['long_base_{}{}{}'.format(itv, period1, period2)].to_numpy()\n","                mr_res *= long_base_ >= dc_base_3T20\n","                if show_detail:\n","                    sys_log.warning(\"long_base_ >= dc_base_3T20 : {:.5f} {:.5f} ({})\".format(long_base_[c_i], dc_base_3T20[c_i], mr_res[c_i]))\n","\n","                # mr_res *= long_base_ >= dc_base_T20\n","                # if show_detail:\n","                #     sys_log.warning(\"long_base_ >= dc_base_T20 : {:.5f} {:.5f} ({})\".format(long_base_[c_i], dc_base_T20[c_i], mr_res[c_i]))\n","\n","                # ------ reject csd ------ #\n","                # dc_lower_ = res_df['dc_lower_{}{}'.format(itv, period1)].to_numpy()\n","                # mr_res *= dc_lower_ >= dc_base_3T\n","                # if show_detail:\n","                #     sys_log.warning(\"dc_lower_ >= dc_base_3T20 : {:.5f} {:.5f} ({})\".format(dc_lower_[c_i], dc_base_3T[c_i], mr_res[c_i]))\n","\n","                dc_lower2_ = res_df['dc_lower_{}{}'.format(itv, period2)].to_numpy()\n","                mr_res *= dc_lower2_ >= dc_base_H20\n","                if show_detail:\n","                    sys_log.warning(\"dc_lower2_ >= dc_base_H20 : {:.5f} {:.5f} ({})\".format(dc_lower2_[c_i], dc_base_H20[c_i], mr_res[c_i]))\n","\n","                # bb_lower_5T = res_df['bb_lower_5T'].to_numpy()\n","                # mr_res *= dc_lower2_ >= bb_lower_5T\n","                # if show_detail:\n","                #     sys_log.warning(\"dc_lower2_ >= bb_lower_5T : {:.5f} {:.5f} ({})\".format(dc_lower2_[c_i], bb_lower_5T[c_i], mr_res[c_i]))\n","\n","                # ------ alignment ------ #\n","                # mr_res *= (dc_base_3T20 > dc_base_5T) & (dc_base_5T > dc_base_15T) & (dc_base_15T > dc_base_30T)\n","\n","                # ------ consecutive base ascender ------ #\n","                # ------ 1. roll_max ------ #\n","                dc_base_3T20_rollmax = res_df['dc_base_3T20'].rolling(config.loc_set.zone.base_roll_period).max().to_numpy()\n","                mr_res *= dc_base_3T20_rollmax == dc_base_3T20\n","                if show_detail:\n","                    sys_log.warning(\n","                        \"dc_base_3T20_rollmax == dc_base_3T2020 : {:.5f} {:.5f} ({})\".format(dc_base_3T20_rollmax[c_i], dc_base_3T20[c_i], mr_res[c_i]))\n","\n","                # ------ 2. roll_max_v2 - ascender  ------ #\n","                # dc_base_3T_ascend = (res_df['dc_base_3T'] >= res_df['dc_base_3T'].shift(3)).rolling(config.loc_set.zone.base_roll_period).sum().to_numpy()\n","                # # mr_res *= dc_base_3T_ascend == config.loc_set.zone.base_roll_period\n","                # mr_res *= dc_base_3T_ascend != config.loc_set.zone.base_roll_period\n","                # if show_detail:\n","                #     sys_log.warning(\"dc_base_3T_ascend == config.loc_set.zone.base_roll_period : {:.5f} {:.5f} ({})\".format(dc_base_3T_ascend[c_i], config.loc_set.zone.base_roll_period, mr_res[c_i]))\n","\n","\n","    if config.loc_set.point.wrr != \"None\":            \n","      wave_itv = 'T'\n","      wave_period = config.tr_set.wave_period\n","      co_wrr_ = res_df['co_wrr_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","      cu_wrr_ = res_df['cu_wrr_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","      if ep_loc_side == OrderSide.SELL:\n","        mr_res *= co_wrr_ <= config.loc_set.point.wrr\n","        if show_detail:\n","            sys_log.warning(\"co_wrr_ <= config.loc_set.point.wrr : {:.5f} {:.5f} ({})\".format(co_wrr_[c_i], config.loc_set.point.wrr, mr_res[c_i]))\n","      else:\n","        mr_res *= cu_wrr_ <= config.loc_set.point.wrr\n","        if show_detail:\n","            sys_log.warning(\"cu_wrr_ <= config.loc_set.point.wrr : {:.5f} {:.5f} ({})\".format(cu_wrr_[c_i], config.loc_set.point.wrr, mr_res[c_i]))\n","            \n","      # if ep_loc_side == OrderSide.SELL:\n","      #   mr_res *= cu_es_ >= config.loc_set.point.cu_es\n","      #   mr_res *= cu_es_ <= config.loc_set.point.cu_es + 2\n","      #   if show_detail:\n","      #       sys_log.warning(\"cu_es_ >= config.loc_set.point.cu_es : {:.5f} {:.5f} ({})\".format(cu_es_[c_i], config.loc_set.point.cu_es, mr_res[c_i]))\n","      # else:\n","      #   mr_res *= co_es_ >= config.loc_set.point.co_es\n","      #   mr_res *= co_es_ <= config.loc_set.point.co_es + 1\n","      #   if show_detail:\n","      #       sys_log.warning(\"co_es_ >= config.loc_set.point.co_es : {:.5f} {:.5f} ({})\".format(co_es_[c_i], config.loc_set.point.co_es, mr_res[c_i]))\n","\n","\n","      if ep_loc_side == OrderSide.SELL:\n","          mr_res *= lower_wick_ratio_ >= config.loc_set.point.wick_ratio\n","          # mr_res *= upper_wick_ratio_ >= config.loc_set.point.wick_ratio\n","          if show_detail:\n","              sys_log.warning(\"upper_wick_ratio_ >= config.loc_set.point.wick_ratio : {:.5f} {:.5f} ({})\".format(upper_wick_ratio_[c_i], config.loc_set.point.wick_ratio, mr_res[c_i]))\n","      else:\n","          mr_res *= upper_wick_ratio_ >= config.loc_set.point.wick_ratio\n","          mr_res *= upper_wick_ratio_ <= config.loc_set.point.wick_ratio + 0.1\n","          # mr_res *= lower_wick_ratio_ >= config.loc_set.point.wick_ratio\n","          if show_detail:\n","              sys_log.warning(\"lower_wick_ratio_ >= config.loc_set.point.wick_ratio : {:.5f} {:.5f} ({})\".format(lower_wick_ratio_[c_i], config.loc_set.point.wick_ratio, mr_res[c_i]))\n","              \n","      crr_ = res_df['crr_{}'.format(config.loc_set.point.tf_entry)].to_numpy()\n","      mr_res *= crr_ >= config.loc_set.point.crr\n","     \n","      if show_detail:\n","          sys_log.warning(\"crr_ >= config.loc_set.point.crr : {:.5f} {:.5f} ({})\".format(crr_[c_i], config.loc_set.point.crr, mr_res[c_i]))\n","\n","      b1_upper_wick_ratio_ = res_df['upper_wick_ratio_{}'.format(config.loc_set.point.wick_itv)].shift(itv_num).to_numpy()\n","      b1_lower_wick_ratio_ = res_df['lower_wick_ratio_{}'.format(config.loc_set.point.wick_itv)].shift(itv_num).to_numpy()\n","\n","      if ep_loc_side == OrderSide.SELL:\n","          upper_wick_ratio_ = res_df['upper_wick_ratio_{}'.format(config.loc_set.point.wick_itv)].to_numpy()\n","          mr_res *= upper_wick_ratio_ >= config.loc_set.point.wick_ratio\n","          if show_detail:\n","              sys_log.warning(\"upper_wick_ratio_ >= config.loc_set.point.wick_ratio : {:.5f} {:.5f} ({})\".format(upper_wick_ratio_[c_i], config.loc_set.point.wick_ratio, mr_res[c_i]))\n","      else:\n","          lower_wick_ratio_ = res_df['lower_wick_ratio_{}'.format(config.loc_set.point.wick_itv)].to_numpy()\n","          mr_res *= lower_wick_ratio_ >= config.loc_set.point.wick_ratio\n","          if show_detail:\n","              sys_log.warning(\"lower_wick_ratio_ >= config.loc_set.point.wick_ratio : {:.5f} {:.5f} ({})\".format(lower_wick_ratio_[c_i], config.loc_set.point.wick_ratio, mr_res[c_i]))\n","\n","    if config.loc_set.point.cppr != \"None\":   \n","      tf_entry = to_itvnum(config.loc_set.point.tf_entry)\n","      b1_cppr_ = res_df['b1_cppr_{}'.format(config.loc_set.point.tf_entry)].to_numpy()  # check b1's cppr in ep_loc\n","      if ep_loc_side == OrderSide.SELL:\n","        mr_res *= b1_cppr_ >= config.loc_set.point.cppr\n","        if show_detail:\n","            sys_log.warning(\"b1_cppr_ >= config.loc_set.point.cppr : {:.5f} {:.5f} ({})\".format(b1_cppr_[c_i], config.loc_set.point.cppr, mr_res[c_i]))\n","      else:\n","        mr_res *= b1_cppr_ <= -config.loc_set.point.cppr\n","        if show_detail:\n","            sys_log.warning(\"b1_cppr_ <= -config.loc_set.point.cppr : {:.5f} {:.5f} ({})\".format(b1_cppr_[c_i], config.loc_set.point.cppr, mr_res[c_i]))\n","            \n","    # ------------ candle_score ------------ #\n","    wick_score_list = literal_eval(config.loc_set.point.wick_score_list)\n","    if len(wick_score_list) != 0:\n","        score_itv_list = literal_eval(config.loc_set.point.score_itv_list)\n","        # ------ candle_score_v0 (1m initial tick 기준임) ------ #  Todo - higher timeframe 경우 back_data 사용해야함\n","        for wick_score_, score_itv_ in zip(wick_score_list, score_itv_list):\n","            wick_score = res_df['wick_score_{}'.format(score_itv_)].to_numpy()\n","            if ep_loc_side == OrderSide.SELL:\n","                mr_res *= wick_score <= -wick_score_\n","                if show_detail:\n","                    sys_log.warning(\"wick_score <= -wick_score_ : {:.5f} {:.5f} ({})\".format(wick_score[c_i], -wick_score_, mr_res[c_i]))\n","            else:\n","                mr_res *= wick_score >= wick_score_\n","                if show_detail:\n","                    sys_log.warning(\"wick_score >= wick_score_ : {:.5f} {:.5f} ({})\".format(wick_score[c_i], wick_score_, mr_res[c_i]))\n","            \n","\n","        # ------------------ swing_middle ------------------ #\n","        # ------------ 1. envelope ------------ #\n","\n","        # ------ a. dc ------ #\n","        # ep_loc check 기준 idx 가 entry 기준이라는 걸 명심\n","        if selection_id in ['v3_2']:\n","            hc_itv = '15T'\n","            dc_itv = '15T'\n","            shift_num = [0, to_itvnum(hc_itv)]\n","            div_res = [1, 0]\n","            for itv_num, res in zip(shift_num, div_res):\n","                close_ = res_df['close_{}'.format(hc_itv)].shift(itv_num).to_numpy()  # close_bar timein 사용하는 경우, 특수로 shift(0) 사용가능\n","                if ep_loc_side == OrderSide.SELL:\n","                    dc_lower_ = res_df['dc_lower_%s' % dc_itv].shift(itv_num).to_numpy()\n","                    mr_res *= (close_ < dc_lower_) == res\n","                else:\n","                    dc_upper_ = res_df['dc_upper_%s' % dc_itv].shift(itv_num).to_numpy()\n","                    mr_res *= (close_ > dc_upper_) == res\n","\n","        # ------------ 2. degree ------------ #\n","        # ------ a. norm_body_ratio ------ #\n","        if config.loc_set.zone.abs_ratio != \"None\":\n","            itv = config.loc_set.point.tf_entry\n","            abs_ratio_ = res_df['abs_ratio_{}'.format(itv)].to_numpy()\n","            mr_res *= abs_ratio_ >= config.loc_set.zone.abs_ratio\n","            # mr_res *= abs_ratio_ <= config.loc_set.zone.abs_ratio\n","\n","    # ------------ 2. imbalance_ratio ------------ #\n","    if config.loc_set.zone.ir != \"None\":\n","        itv = config.loc_set.point.tf_entry\n","        itv_num = to_itvnum(itv)\n","        if ep_loc_side == OrderSide.SELL:\n","            short_ir_ = res_df['short_ir_{}'.format(itv)].to_numpy()\n","            # short_ir_ = res_df['short_ir_{}'.format(itv)].shift(itv_num).to_numpy()\n","\n","            # mr_res *= short_ir_ >= config.loc_set.zone.ir     # greater\n","            mr_res *= short_ir_ <= config.loc_set.zone.ir  # lesser\n","            if show_detail:\n","                sys_log.warning(\n","                    \"short_ir_ <= config.loc_set.zone.ir : {:.5f} {:.5f} ({})\".format(short_ir_[c_i], config.loc_set.zone.ir, mr_res[c_i]))\n","        else:\n","            long_ir_ = res_df['long_ir_{}'.format(itv)].to_numpy()\n","            # long_ir_ = res_df['long_ir_{}'.format(itv)].shift(itv_num).to_numpy()\n","\n","            # mr_res *= long_ir_ >= config.loc_set.zone.ir\n","            mr_res *= long_ir_ <= config.loc_set.zone.ir\n","            if show_detail:\n","                sys_log.warning(\n","                    \"long_ir_ <= config.loc_set.zone.ir : {:.5f} {:.5f} ({})\".format(long_ir_[c_i], config.loc_set.zone.ir, mr_res[c_i]))\n","                \n","        # if selection_id in ['3_6']:\n","        #   itv, period1, period2 = config.loc_set.point.p1_itv0, config.loc_set.point.p1_period1, config.loc_set.point.p1_period2          \n","\n","        #   if ep_loc_side == OrderSide.SELL:\n","        #     high_5T = res_df['high_5T'].to_numpy()  # Todo, tf_entry - 1 open 기준이라 future_data 사용 가능\n","        #     short_base_ = res_df['short_base_{}{}{}'.format(itv, period1, period2)]\n","        #     mr_res *= high_5T < short_base_\n","        #     if show_detail:\n","        #         sys_log.warning(\n","        #             \"high_5T < short_base_ : {:.5f} {:.5f} ({})\".format(high_5T[c_i], short_base_[c_i], mr_res[c_i]))\n","        #   else:\n","        #     low_5T = res_df['low_5T'].to_numpy()  # Todo, tf_entry - 1 open 기준이라 future_data 사용 가능\n","        #     long_base_ = res_df['long_base_{}{}{}'.format(itv, period1, period2)]\n","        #     mr_res *= low_5T > long_base_\n","        #     if show_detail:\n","        #         sys_log.warning(\n","        #             \"low_5T > long_base_ : {:.5f} {:.5f} ({})\".format(low_5T[c_i], long_base_[c_i], mr_res[c_i]))'\n","        \n","        # ------ dc_base ------ #\n","        # if selection_id in ['4']:  # 'v3_3', 'v3_4',\n","        #   hc_itv = '5T'\n","        #   dc_itv = '5T'\n","        #   itv_num = to_itvnum(hc_itv)\n","        #   close_ = res_df['close_{}'.format(hc_itv)].shift(itv_num).to_numpy()   # 따라서 future_data 사용시, shifting 필요함\n","        #   if ep_loc_side == OrderSide.SELL:\n","        #     dc_lower_ = res_df['dc_lower_%s' % dc_itv].shift(itv_num).to_numpy()\n","        #     mr_res *= close_ < dc_lower_\n","        #   else:\n","        #     dc_upper_ = res_df['dc_upper_%s' % dc_itv].shift(itv_num).to_numpy()\n","        #     mr_res *= close_ > dc_upper_\n","\n","        # ------ ema ------ #\n","        # if selection_id in ['v5_2']: # 'v3'\n","        #   ema_5T = res_df['ema_5T'].to_numpy()\n","        #   if ep_loc_side == OrderSide.SELL:\n","        #     mr_res *= close < ema_5T\n","        #   else:\n","        #     mr_res *= close > ema_5T\n","        \n","        # ------ b. bb ------ #\n","        # close = res_df['close'].to_numpy()\n","\n","        # if selection_id in ['v3_3']:\n","        #   open = res_df['open'].to_numpy()\n","        #   if ep_loc_side == OrderSide.SELL:\n","        #     bb_lower_1m = res_df['bb_lower_1m'].to_numpy()\n","        #     # mr_res *= close <= bb_lower_1m\n","        #     mr_res *= open <= bb_lower_1m\n","        #   else:\n","        #     bb_upper_1m = res_df['bb_upper_1m'].to_numpy()\n","        #     # mr_res *= close >= bb_upper_1m\n","        #     mr_res *= open >= bb_upper_1m\n","\n","        if selection_id in ['4_1']:\n","            if ep_loc_side == OrderSide.SELL:\n","                bb_lower_15T = res_df['bb_lower_15T'].to_numpy()\n","                short_ep_ = res_df['short_ep_{}'.format(selection_id)].to_numpy()\n","                mr_res *= bb_lower_15T >= short_ep_\n","            else:\n","                bb_upper_15T = res_df['bb_upper_15T'].to_numpy()\n","                long_ep_ = res_df['long_ep_{}'.format(selection_id)].to_numpy()\n","                mr_res *= bb_upper_15T <= long_ep_\n","\n","        # if selection_id in ['v5_2']:\n","        #   bb_upper2_ = res_df['bb_upper2_%s' % config.loc_set.zone.bbz_itv].to_numpy()\n","        #   bb_lower2_ = res_df['bb_lower2_%s' % config.loc_set.zone.bbz_itv].to_numpy()\n","        #   if ep_loc_side == OrderSide.SELL:\n","        #     mr_res *= bb_upper2_ < close\n","        #   else:\n","        #     mr_res *= bb_lower2_ > close\n","\n","        # degree_list = literal_eval(config.loc_set.zone.degree_list)\n","        # if len(degree_list) != 0:\n","        # # if selection_id in ['v3_3', 'v3_4']:\n","        #   norm_close_15 = res_df['norm_close_15'].to_numpy()   # -> 이거 뭘로 만들었는지 불분명함,,\n","        #   b1_norm_close_15 = res_df['norm_close_15'].shift(15).to_numpy()\n","\n","        #   if ep_loc_side == OrderSide.SELL:\n","        #     mr_res *= norm_close_15 <= -degree_list[0]\n","        #     # mr_res *= b1_norm_close_15 <= -degree_list[1]\n","        #   else:\n","        #     mr_res *= norm_close_15 >= degree_list[0]\n","        #     # mr_res *= b1_norm_close_15 >= degree_list[1]\n","\n","        # ------ b. dc ------ #\n","        # if selection_id in ['v3_3']:\n","        #   if ep_loc_side == OrderSide.SELL:\n","        #     dc_lower_ = res_df['dc_lower_1m'].to_numpy()\n","        #     b1_dc_lower_ = res_df['dc_lower_1m'].shift(1).to_numpy()\n","        #     mr_res *= dc_lower_ < b1_dc_lower_\n","        #   else:\n","        #     dc_upper_ = res_df['dc_upper_1m'].to_numpy()\n","        #     b1_dc_upper_ = res_df['dc_upper_1m'].shift(1).to_numpy()\n","        #     mr_res *= dc_upper_ > b1_dc_upper_\n","\n","        # ------ c. sar ------ #\n","        # if selection_id in ['v3_3']:\n","        # sar_uptrend_3T = res_df['sar_uptrend_3T'].to_numpy()\n","        # if ep_loc_side == OrderSide.SELL:\n","        #   mr_res *= sar_uptrend_3T == 0\n","        # else:\n","        #   mr_res *= sar_uptrend_3T == 1"]},{"cell_type":"markdown","metadata":{"id":"JjKHyqftzhD7"},"source":["### set config (override available)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"q_4E-zH02WJy"},"outputs":[],"source":["#     caution : MARKET / LIMIT spelling   #\n","#      json doesn't support single quotes     #\n","\n","param_dict = {\n","  \"selection_id\": \"5_49\",\n","  \"trader_set\": {\n","    \"backtrade\": 0,\n","    \"back_data_path\": \"C:\\\\Users\\\\Lenovo\\\\PycharmProjects\\\\System_Trading\\\\JnQ\\\\candlestick_concated\\\\database_bn\\\\2022-02-17\\\\2022-02-17 ETHUSDT_1m.ftr\",\n","    \"start_datetime\": \"2020-09-05 00:00:59.999\",\n","    \"run\": 1,\n","    \"df_log\": 0,\n","    \"latest_index\": -1,\n","    \"complete_index\": -2,\n","    \"limit_fee\": 1e-10,\n","    \"market_fee\": 1e-10,\n","    \"initial_asset\": 24500,\n","    \"asset_changed\": 0,\n","    \"symbol\": \"ETHUSDT\",\n","    \"symbol_changed\": 0,\n","    \"itv_list\": \"['T', '3T', '5T', '15T', '30T', 'H', '4H']\",\n","    \"row_list\": \"[100, 50, 1, 1, 1, 50, 1]\",\n","    \"rec_row_list\": \"[1, 1, 1, 1, 1, 1, 1]\",\n","    \"offset_list\": \"['1h', '1h', '1h', '1h', '1h', '1h', '1h']\",\n","    \"bar_close_second\": 59,\n","    \"realtime_term\": 0.01,\n","    \"order_term\": 0.25,\n","    \"api_retry_term\": 1,\n","    \"check_entry_sec\": 10,\n","    \"entry_execution_wait\": 60,\n","    \"breakout_qty_ratio\": 0.97,\n","    \"qty_check_term\": 30,\n","    \"exit_execution_wait\": 60,\n","    \"close_complete_term\": 5,\n","    \"save_stacked_df\": 0,\n","    \"stacked_df_exist\": 1\n","  },\n","  \"pos_set\": {\n","    \"short_inversion\": 0,\n","    \"long_inversion\": 0,\n","    \"short_ban\": 0,\n","    \"long_ban\": 0\n","  },\n","  \"loc_set\": {      \n","    \"point1\": {\n","      \"exp_itv\": \"5T\",\n","      \"tf_entry\": \"15T\",\n","      \"candle_pattern\": \"CDLMARUBOZU\",\n","      \"short_spread\": \"None\",\n","      \"long_spread\": \"None\",\n","      \"short_tr_thresh\": \"None\",\n","      \"long_tr_thresh\": \"None\",\n","      \"short_wick_ratio\": \"None\",\n","      \"long_wick_ratio\": \"None\",\n","      \"wick_itv\": \"5T\",\n","      \"wrr_10\": \"None\",\n","      \"wrr_21\": \"None\",\n","      \"wrr_32\": 0.3,\n","      \"co_es\": \"None\",\n","      \"cu_es\": \"None\",\n","      \"crr\": \"None\",\n","      \"cppr\": \"None\",\n","      \"ppr\": \"None\",\n","      \"wbr\": \"None\",\n","      \"dbr\": \"None\",\n","      \"dbr2\": \"None\",\n","      \"brr\": \"None\",\n","      \"ir\": \"None\",\n","      \"abs_ratio\": \"None\"\n","    },\n","    \"point2\": {\n","      \"wrr_32\": \"None\",\n","      \"csdbox_range\": 0.3,\n","      \"short_tr_thresh\": \"None\",\n","      \"long_tr_thresh\": \"None\",\n","      \"csd_period\": \"None\"\n","    },\n","    \"zone1\": {\n","      \"use_zone\": 0,\n","      \"base_roll_period\": 50,\n","      \"degree_list\": \"[]\",\n","      \"dtk_itv\": \"5T\",\n","      \"dt_k\": \"None\",\n","      \"dc_period\": 135,\n","      \"use_dtk_line\": 0,\n","      \"zone_dt_k\": 0.4,\n","      \"zone_dc_period\": 135\n","    },\n","    \"zone2\": {\n","      \"use_zone\": 0\n","    }\n","  },\n","  \"tr_set\": {\n","    \"check_hlm\": 0,\n","    \"wave_itv1\" : \"5T\",\n","    \"wave_period1\": 20,\n","    \"wave_length1\": \"None\",\n","    \"wave_spread1\": \"None\",\n","    \"wave_time_ratio1\": \"None\",\n","    \"wave_itv2\" : \"T\",    \n","    \"wave_period2\": 20,\n","    \"tc_period\": 20,\n","    \"wave_greater1\": 0,\n","    \"wave_greater2\": 0,\n","    \"wave_lesser1\": 2,\n","    \"wave_lesser2\": 2,\n","    \"expire_k1\": 0.0,\n","    \"expire_k2\": 0.0,\n","    \"expire_tick\": \"None\",\n","    \"p2_box_k1\" : 0,\n","    \"p2_box_k2\" : 0,\n","    \"p1p2_low\": 0.0,\n","    \"tp_gap\": 0.0,\n","    \"ep_gap1\": -0.12,\n","    \"ep_gap2\": -0.12,\n","    \"out_gap\": 0,\n","    \"decay_gap\": \"None\",\n","    \"c_ep_gap\": \"None\",\n","    \"t_out_gap\": \"None\",\n","    \"wb_tp_gap\": 0,\n","    \"wb_out_gap\": 0,\n","    \"bias_tick\": 100\n","  },\n","  \"ep_set\": {\n","    \"entry_type\": \"LIMIT\",\n","    \"static_ep\": 1,\n","    \"point2\": {\n","      \"entry_type\": \"MARKET\"\n","    }\n","  },\n","  \"tp_set\": {\n","    \"non_tp\": 0,\n","    \"static_tp\": 1,\n","    \"tp_onexec\": 0,\n","    \"decay_term\": 60,\n","    \"p_ranges\": \"[1]\",\n","    \"p_qty_ratio\": \"[1]\"\n","  },\n","  \"out_set\": {\n","    \"hl_out\": 1,\n","    \"static_out\": 1,\n","    \"out_onexec\": 0,\n","    \"tf_exit\": \"None\",\n","    \"rsi_exit\": 0\n","  },\n","  \"lvrg_set\": {\n","    \"static_lvrg\": 0,\n","    \"leverage\": 5,\n","    \"target_pct\": 0.03,\n","    \"allow_float\": 0,\n","    \"lvrg_rejection\": 0\n","  }\n","}\n","\n","config = EasyDict(param_dict)"]},{"cell_type":"markdown","metadata":{"id":"MuD_2vY7TI_8"},"source":["#### legacy"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"EKag94Y2TMCO"},"outputs":[],"source":[",\n","      \"hc_itv\": 60,\n","      \"osc_band\": 20\n","      \n","      \"wick_score_list\": \"[]\",\n","      \"body_score_list\": \"[]\",\n","      \"score_itv_list\": \"[]\",,\n","\n","      \"wick_score_list\": \"[]\",\n","      \"body_score_list\": \"[]\",\n","      \"score_itv_list\": \"['T']\""]},{"cell_type":"markdown","metadata":{"id":"rLI8unIyroiC"},"source":["## run"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":5,"status":"ok","timestamp":1662685616658,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"qBJfPsmJzVIr","outputId":"a0027398-92a5-4518-f56e-338b9b5366d3"},"outputs":[{"output_type":"stream","name":"stdout","text":["\"5_49\" {\n"," \"point1\": {\n","  \"exp_itv\": \"5T\",\n","  \"tf_entry\": \"15T\",\n","  \"candle_pattern\": \"CDLMARUBOZU\",\n","  \"short_spread\": \"None\",\n","  \"long_spread\": \"None\",\n","  \"short_tr_thresh\": \"None\",\n","  \"long_tr_thresh\": \"None\",\n","  \"short_wick_ratio\": \"None\",\n","  \"long_wick_ratio\": \"None\",\n","  \"wick_itv\": \"5T\",\n","  \"wrr_10\": \"None\",\n","  \"wrr_21\": \"None\",\n","  \"wrr_32\": 0.3,\n","  \"co_es\": \"None\",\n","  \"cu_es\": \"None\",\n","  \"crr\": \"None\",\n","  \"cppr\": \"None\",\n","  \"ppr\": \"None\",\n","  \"wbr\": \"None\",\n","  \"dbr\": \"None\",\n","  \"dbr2\": \"None\",\n","  \"brr\": \"None\",\n","  \"ir\": \"None\",\n","  \"abs_ratio\": \"None\"\n"," },\n"," \"point2\": {\n","  \"wrr_32\": \"None\",\n","  \"csdbox_range\": 0.3,\n","  \"short_tr_thresh\": \"None\",\n","  \"long_tr_thresh\": \"None\",\n","  \"csd_period\": \"None\"\n"," },\n"," \"zone1\": {\n","  \"use_zone\": 0,\n","  \"base_roll_period\": 50,\n","  \"degree_list\": \"[]\",\n","  \"dtk_itv\": \"5T\",\n","  \"dt_k\": \"None\",\n","  \"dc_period\": 135,\n","  \"use_dtk_line\": 0,\n","  \"zone_dt_k\": 0.4,\n","  \"zone_dc_period\": 135\n"," },\n"," \"zone2\": {\n","  \"use_zone\": 0\n"," }\n","} {\n"," \"check_hlm\": 0,\n"," \"wave_itv1\": \"5T\",\n"," \"wave_period1\": 20,\n"," \"wave_length1\": \"None\",\n"," \"wave_spread1\": \"None\",\n"," \"wave_time_ratio1\": \"None\",\n"," \"wave_itv2\": \"T\",\n"," \"wave_period2\": 20,\n"," \"tc_period\": 20,\n"," \"wave_greater1\": 0,\n"," \"wave_greater2\": 0,\n"," \"wave_lesser1\": 2,\n"," \"wave_lesser2\": 2,\n"," \"expire_k1\": 0.0,\n"," \"expire_k2\": 0.0,\n"," \"expire_tick\": \"None\",\n"," \"p2_box_k1\": 0,\n"," \"p2_box_k2\": 0,\n"," \"p1p2_low\": 0.0,\n"," \"tp_gap\": 0.0,\n"," \"ep_gap1\": -0.12,\n"," \"ep_gap2\": -0.12,\n"," \"out_gap\": 0,\n"," \"decay_gap\": \"None\",\n"," \"c_ep_gap\": \"None\",\n"," \"t_out_gap\": \"None\",\n"," \"wb_tp_gap\": 0,\n"," \"wb_out_gap\": 0,\n"," \"bias_tick\": 100\n","} {\n"," \"entry_type\": \"LIMIT\",\n"," \"static_ep\": 1,\n"," \"point2\": {\n","  \"entry_type\": \"MARKET\"\n"," }\n","} {\n"," \"non_tp\": 0,\n"," \"static_tp\": 1,\n"," \"tp_onexec\": 0,\n"," \"decay_term\": 60,\n"," \"p_ranges\": \"[1]\",\n"," \"p_qty_ratio\": \"[1]\"\n","} {\n"," \"hl_out\": 1,\n"," \"static_out\": 1,\n"," \"out_onexec\": 0,\n"," \"tf_exit\": \"None\",\n"," \"rsi_exit\": 0\n","} {\n"," \"static_lvrg\": 0,\n"," \"leverage\": 5,\n"," \"target_pct\": 0.03,\n"," \"allow_float\": 0,\n"," \"lvrg_rejection\": 0\n","} "]}],"source":["# funcs = [expire_v2, ep_loc_point2_v2, lvrg_set]  # expire for p1 & p2\n","funcs = [expiry_p1, expiry_p2, lvrg_set]     # expire for p1-only\n","# funcs = [expire_v0, ep_loc_point2_v2, lvrg_set]  # expire for v3\n","\n","id_idx_list = [0]  # ID_arr 에서 import 할 id_idx 선택\n","public_override = 1\n","utils_override = 1\n","config_override = 1\n","\n","# ------ config_list 와 같은 org_var 에 override 하는거 다시 생각하기 ------ #\n","ID_list = ID_arr[id_idx_list]\n","utils_list = utils_arr[id_idx_list]\n","config_list = config_arr[id_idx_list]\n","\n","if config_override or utils_override:\n","  assert len(config_list) == 1\n","  if config_override:    \n","    config_list[0] = config\n","    ID_list[0] = config.selection_id\n","  \n","config = config_list[0]  # base config = config_list[0]\n","tp_fee, out_fee = calc_tp_out_fee_v2(config)   # -> rev_pr 때문에 일단 이곳에도 선언함\n","\n","# ------- inversion set ------- #\n","inversion = 0\n","fdist_thresh = 1\n","# ------- plot param ------- #\n","show_detail = 0\n","# ------- temp param ------- #\n","allow_osc_touch = 0\n","rsi_gap = 5\n","\n","# ------- just printing config ------- #\n","_ = [print(json.dumps(config[key_], indent=1), end=' ') for key_ in ['selection_id', 'loc_set', 'tr_set', 'ep_set', 'tp_set', 'out_set', 'lvrg_set']] #  'trader_set',"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"afUV2b1jaggN"},"outputs":[],"source":["# config.trader_set.start_datetime = \"2020-09-05 00:00:59.999\" #  \"2020-09-05 00:00:59.999\" # 2022-02-01 16:34:59.999000 2022-01-14 16:34:59.999000  \"2020-09-05 00:00:59.999\" \"2022-01-10 00:00:59.999\" \"2021-10-04 02:39:59.999000\"\n","# ------ p1_hhm 의 경우 out_box 를 위해 wave_itv 1 & 2 를 동일하게 설정해야함 ------ #\n","config_list[0].tr_set.wave_itv1 = 'T'\n","config_list[0].tr_set.wave_period1 = 20\n","config_list[0].tr_set.wave_itv2 = 'T'\n","config_list[0].tr_set.wave_period2 = 4\n","config_list[0].tr_set.tc_period = 20"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":4047,"status":"ok","timestamp":1662686048259,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"WstWVNihCNH8","outputId":"ba1eeac8-56de-4e98-bb90-ae969e92af68"},"outputs":[{"output_type":"stream","name":"stdout","text":["public_indi elapsed time : 2.6917524337768555\n","make data_list elapsed time : 0.00020003318786621094\n"]}],"source":["# ------ slicing res_df ------ #\n","res_df = res_df_.loc[pd.to_datetime(config.trader_set.start_datetime):]\n","\n","np_timeidx = np.array([intmin_np(date_) for date_ in res_df.index.to_numpy()])\n","\n","# ------------ public_indi ------------ # - 딱히 반복될 이유가 없는 phase - annot. 달때, why 까지 적어주면 좋음\n","start_0 = time.time()\n","if public_override:\n","    res_df = public_indi(res_df, config_list[0], np_timeidx)  # 현재 대부분의 시간은 h_candle 에서 소비되고 있음\n","else:\n","    res_df = utils_public.public_indi(res_df, config_list[0], np_timeidx)\n","print(\"public_indi elapsed time :\", time.time() - start_0)\n","\n","# ------------ make data_list ------------ # - 반복될 이유가 없는 phase - public_indo 에 종속\n","start_0 = time.time()\n","ohlc_cols = ['open', 'high', 'low', 'close']\n","ohlc_list = [res_df[col_].to_numpy() for col_ in ohlc_cols]\n","print(\"make data_list elapsed time :\", time.time() - start_0)"]},{"cell_type":"code","source":["res_df.dtypes"],"metadata":{"id":"6NkldYL5SK2n"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"RqRF1eyZ0xBL"},"source":["### idep_plot"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"_iYcJk8nK8Yq"},"outputs":[],"source":["# ------ edit utils config ------ #\n","config_list[0].tr_set.check_hlm = 2\n","# config_list[0].loc_set.point.candle_pattern = talib.get_function_groups()['Pattern Recognition'][51]   # \"None\" # 0.5 0.7\n","# config_list[0].pos_set.short_ban = 0\n","# config_list[0].pos_set.long_ban = 0\n","# config_list[0].tr_set.wave_lesser = 3\n","# config_list[0].tr_set.wave_length1 = \"None\"  # \"None\" 45 15 110 100 \n","# config_list[0].tr_set.wave_spread1 = \"None\"  # \"None\" 15 110 100 \n","# config_list[0].tr_set.wave_time_ratio1 = \"None\"  # \"None\" 6\n","# config_list[0].tr_set.wave_greater1 = 0  # 0 50 \n","# config_list[0].tr_set.wave_greater2 = 0  # 10\n","# config_list[0].tr_set.p1_period1 = 5\n","# config_list[0].tr_set.p1_period2 = 5\n","# # config_list[0].tr_set.p2_period1 = 20\n","# # config_list[0].tr_set.p2_period2 = 20\n","# config_list[0].ep_set.entry_type = \"LIMIT\" # \"LIMIT\" # \"MARKET\"\n","# config_list[0].ep_set.point2.entry_type = \"LIMIT\" # \"LIMIT\" # \"MARKET\"\n","# config_list[0].tr_set.tp_gap = 0.5\n","# config_list[0].tr_set.ep_gap1 = -0.5 # -0.8 -0.618 -0.23 -0.382 0.19 0.8 -0.12 -0.26\n","config_list[0].tr_set.ep_gap2 = -0.5 # -0.618 -0.23 -0.382 0.19 -0.5\n","# config_list[0].tr_set.out_gap = 0.2  # 0 -0.35 -0.6\n","# config_list[0].tr_set.wb_tp_gap = 0.5\n","# config_list[0].tr_set.wb_out_gap = -0.0\n","config_list[0].trader_set.limit_fee = 1e-10\n","config_list[0].trader_set.market_fee = 1e-10\n","# config_list[0].trader_set.limit_fee = 0.0002\n","# config_list[0].trader_set.market_fee = 0.0004\n","# config_list[0].loc_set.point.short_wick_ratio = 0.2 # \"None\" # 2.5\n","# config_list[0].loc_set.point.long_wick_ratio = 0.2 # \"None\" # 2.5\n","# config_list[0].loc_set.point.crr = 0.5"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":819,"status":"ok","timestamp":1662686243551,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"iI39YI_5GguK","outputId":"05839a0f-07ec-4f81-e108-9a1679e98c57"},"outputs":[{"output_type":"stream","name":"stderr","text":["WARNING:root:wave_point\n","WARNING:root:np.sum(short_open_res1 == 1) : 42200\n","WARNING:root:np.sum(long_open_res1 == 1) : 41080\n","WARNING:root:np.sum(short_open_res2 == 1) : 42292\n","WARNING:root:np.sum(long_open_res2 == 1) : 42483\n","WARNING:root:reject update_hl\n","WARNING:root:np.sum(short_open_res1 == 1) : 41270\n","WARNING:root:np.sum(long_open_res1 == 1) : 38430\n","WARNING:root:np.sum(short_open_res2 == 1) : 40725\n","WARNING:root:np.sum(long_open_res2 == 1) : 40478\n","WARNING:root:wave_itv1\n","WARNING:root:np.sum(short_open_res1 == 1) : 8254\n","WARNING:root:np.sum(long_open_res1 == 1) : 7686\n","WARNING:root:wave_mm\n","WARNING:root:np.sum(short_open_res1 == 1) : 8249\n","WARNING:root:np.sum(long_open_res1 == 1) : 7685\n","WARNING:root:point validation\n","WARNING:root:np.sum(short_open_res1 == 1) : 3305\n","WARNING:root:np.sum(long_open_res1 == 1) : 2886\n"]},{"output_type":"stream","name":"stdout","text":["enlist_tr elapsed time : 0.4992525577545166\n"]}],"source":["if utils_override:   # 현재, utils_override 하는 경우 1개의 ID 만 허용함 \n","  # start_0 = time.time()\n","  # res_df = enlist_rtc(res_df, config_list[0], np_timeidx)\n","  # print(\"enlist_rtc elapsed time :\", time.time() - start_0)\n","  start_0 = time.time()\n","  res_df = enlist_tr(res_df, config_list[0], np_timeidx)    # 36995.0 -> 152766.0 # 4044 np.sum(long_open_res == 1) : 4325\n","  print(\"enlist_tr elapsed time :\", time.time() - start_0)\n","else:\n","    start_0 = time.time()\n","    for utils_, config_ in zip(utils_list, config_list):\n","        # res_df = utils_.enlist_rtc(res_df, config_, np_timeidx)\n","        res_df = utils_.enlist_tr(res_df, config_, np_timeidx)\n","    print(\"elapsed time :\", time.time() - start_0)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"gfDSOGMd91rE"},"outputs":[],"source":["# ------ edit loc_set config ------ #\n","config_list[0].loc_set.point1.wrr_10 = \"None\" # \"None\" 0.3\n","config_list[0].loc_set.point1.wrr_21 = \"None\" # \"None\" \n","config_list[0].loc_set.point1.wrr_32 = 0.5 # \"None\" 1 0.5 0.482 0.302\n","config_list[0].loc_set.point2.wrr_32 = \"None\" # \"None\" 1 0.5 0.382 0.302 0.25\n","config_list[0].loc_set.point2.csd_period = \"None\"  # \"None\" 100\n","config_list[0].loc_set.zone1.use_zone = 0\n","config_list[0].loc_set.zone1.bb_trend_period = 150\n","# config_list[0].loc_set.zone1.hl_loc_pct = \"None\" # \"None\" 1 0.5\n","config_list[0].loc_set.zone2.use_zone = 0\n","# config_list[0].loc_set.point1.cu_es = \"None\" # \"None\" # -2\n","# config_list[0].loc_set.point1.co_es = \"None\" # \"None\" # -3\n","# config_list[0].loc_set.point1.cppr = 0.5   # \"None\" # 0.5 0.7\n","# config_list[0].loc_set.point1.wbr = \"None\" # 0.7\n","# config_list[0].loc_set.point1.dbr = \"None\"   # 0.7\n","# config_list[0].loc_set.point1.dbr2 = \"None\"  # 0.7\n","# config_list[0].loc_set.point1.brr = \"None\"   # 0.8\n","# config_list[0].loc_set.point1.ir = \"None\" # \"None\" 0.8\n","# config_list[0].loc_set.point1.wick_score_list = \"[]\"\n","# config_list[0].loc_set.point1.score_itv_list = \"['H']\"\n","# # config_list[0].loc_set.point1.abs_ratio = \"None\"  # 0.7\n","config_list[0].loc_set.point1.short_tr_thresh = \"None\"  #  \"None\" 0.5 2 0.8 # # 0.7  5 # tr_thresh 엄청 민감함\n","config_list[0].loc_set.point1.long_tr_thresh = 5  #  \"None\" 2 0.8 ## 0.7 5 \n","# # config_list[0].loc_set.zone1.base_roll_period = 60"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":6361,"status":"ok","timestamp":1662595216067,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"9DPgykxQ92mU","outputId":"40fac197-1f52-4555-df08-680d97b0364b"},"outputs":[{"output_type":"stream","name":"stderr","text":["WARNING:root:cu_wrr_32_ <= config.loc_set.point1.wrr_32 : 0.54867 0.50000 (0.0)\n","WARNING:root:co_wrr_32_ <= config.loc_set.point1.wrr_32 : 1.00000 0.50000 (0.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 2.7328872680664062\n","get_open_info_df elapsed time : 3.5624990463256836\n"]}],"source":["open_info_df1 = get_open_info_df_v2(ep_loc_p1_v3, res_df, np_timeidx, ID_list, config_list, id_idx_list, open_num=1)  # --> point * dur. 관련 (loc_set) param 에 종속 (open_info 가 변경되는게 아니라면, 재실행할 필요없음)\n","open_info_df2 = get_open_info_df_v2(ep_loc_p2_v3, res_df, np_timeidx, ID_list, config_list, id_idx_list, open_num=2)\n","open_info_df_list = [open_info_df1, open_info_df2]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"KqVkg236t_f2"},"outputs":[],"source":["# ------ edit entry & exit (ep, tp, out, ..) config ------ #\n","# config_list[0].tr_set.expire_k = -0.5\n","# config_list[0].tr_set.expire_tick = \"None\"\n","# config_list[0].tr_set.p2_box_k1 = 0.0  # 0 default --> 0 ~ 1 사이 값 사용 tp_1 로부터 떨어지는 거리\n","# config_list[0].tr_set.p2_box_k2 = 0.0  # 0.5 0 default --> \"None\" 불가, 0 ~ 1 사이 값 사용 tp_0 로부터 떨어지는 거리, 본디 p2_box 는 p1_box 내부에 존재해야, 정확한 hhm 이 측정가능해짐\n","# config_list[0].tr_set.p1p2_low = 0.5  # 0.5 0.7 0  0 is equal to \"None\", 마찬가지로 tp_0 로부터 떨어지는 거리\n","config_list[0].loc_set.point2.short_tr_thresh = \"None\"  #  \"None\" 0.5 2 0.8 # # 0.7 # tr_thresh 엄청 민감함\n","config_list[0].loc_set.point2.long_tr_thresh = \"None\"  #  \"None\" 2 0.8 ## 0.7\n","# # # config_list[0].ep_set.point2.entry_type = \"LIMIT\"\n","# # # config_list[0].ep_set.point2.wick_score_list = str([])\n","# # # config_list[0].tp_set.static_tp = 1\n","# # # config_list[0].tp_set.non_tp = 0 # 0 1\n","# config_list[0].tp_set.p_ranges = \"[1]\"\n","# config_list[0].tp_set.p_qty_ratio = \"[1]\"\n","# config_list[0].tp_set.p_ranges = \"[0.2, 0.66, 1]\"\n","# config_list[0].tp_set.p_qty_ratio = \"[0.25, 0.25, 0.5]\"\n","# config_list[0].tp_set.p_ranges = \"[0.66, 1]\"\n","# config_list[0].tp_set.p_qty_ratio = \"[0.3, 0.7]\"\n","# config_list[0].out_set.hl_out = 1\n","# # # config_list[0].out_set.tf_exit = \"None\" # 15 \"None\"\n","config_list[0].lvrg_set.static_lvrg = 0\n","config_list[0].lvrg_set.leverage = 1\n","config_list[0].lvrg_set.target_pct = 0.03 # 0.1 0.03\n","# # config_list[0].lvrg_set.allow_float = 0\n","# config_list[0].lvrg_set.lvrg_rejection = 0"]},{"cell_type":"code","source":["test_ratio = 0.0\n","short_pr, short_obj, short_lvrg_arr, short_fee_arr, short_tpout_arr, short_tr_arr, short_bias_arr, short_net_p1_bias_tick, short_p2exec_p1_bias_tick, short_net_p1_idx_arr, short_p2_idx_arr, short_tp_1, short_tp_0, short_out_1, short_out_0, short_ep2_0, \\\n","      long_pr, long_obj, long_lvrg_arr, long_fee_arr, long_tpout_arr, long_tr_arr, long_bias_arr, long_net_p1_bias_tick, long_p2exec_p1_bias_tick, long_net_p1_idx_arr, long_p2_idx_arr, long_tp_1, long_tp_0, long_out_1, long_out_0, long_ep2_0 = \\\n","get_res_v9(res_df, open_info_df_list, ohlc_list, config_list, np_timeidx, funcs, test_ratio=test_ratio, plot_is=1, signi=0, show_detail=0)   # open 이 많을 수록 en_ex_pairing elapsed time : 11.58370590209961"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":664},"id":"TvGs5mBxsuBK","executionInfo":{"status":"ok","timestamp":1662554952763,"user_tz":-540,"elapsed":3523,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"30eb23de-0c2b-4d27-fc0a-e1a7cfbb150a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["en_ex_pairing elapsed time : 1.03145170211792\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1728x576 with 6 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["idep_plot elapsed time : 1.5385949611663818\n"]}]},{"cell_type":"code","execution_count":null,"metadata":{"id":"8lYgsqH-rfAM"},"outputs":[],"source":["# ------ inversion ------ #\n","_ = get_res_v5(res_df, open_info_df, ohlc_list, config_list, np_timeidx, funcs, inversion=True, test_ratio=test_ratio, plot_is=1, signi=False)"]},{"cell_type":"markdown","metadata":{"id":"n6gc7lERC4VE"},"source":["### statistics (stem 별로 진행)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"HHjIdn2MC4VE"},"outputs":[],"source":["selection_id = config.selection_id\n","\n","short_p1_idx = short_obj[-1].astype(int)\n","long_p1_idx = long_obj[-1].astype(int)\n","\n","short_open_tp_1 = res_df['short_tp_1_{}'.format(selection_id)].to_numpy()[short_p1_idx]\n","long_open_tp_1 = res_df['long_tp_1_{}'.format(selection_id)].to_numpy()[long_p1_idx]\n","\n","short_open_tp_0 = res_df['short_tp_0_{}'.format(selection_id)].to_numpy()[short_p1_idx]\n","long_open_tp_0 = res_df['long_tp_0_{}'.format(selection_id)].to_numpy()[long_p1_idx]\n","\n","short_open_tp_gap = res_df['short_tp_gap_{}'.format(selection_id)].to_numpy()[short_p1_idx]  # use open_i\n","long_open_tp_gap = res_df['long_tp_gap_{}'.format(selection_id)].to_numpy()[long_p1_idx]\n","\n","short_open_out_0 = res_df['short_out_0_{}'.format(selection_id)].to_numpy()[short_p1_idx]\n","long_open_out_0 = res_df['long_out_0_{}'.format(selection_id)].to_numpy()[long_p1_idx]\n","\n","short_open_out_gap = res_df['short_out_gap_{}'.format(selection_id)].to_numpy()[short_p1_idx]  # use open_i\n","long_open_out_gap = res_df['long_out_gap_{}'.format(selection_id)].to_numpy()[long_p1_idx]\n","\n","# ------ out case 의 max_high check (long) ------ #\n","short_max_tpg = get_max_tpg_v2(OrderSide.SELL, ohlc_list, short_pr, short_obj[:4], short_open_tp_1, short_open_tp_gap)\n","long_max_tpg = get_max_tpg_v2(OrderSide.BUY, ohlc_list, long_pr, long_obj[:4], long_open_tp_1, long_open_tp_gap)\n","# short_max_tpg = get_max_tpg_v2(OrderSide.SELL, ohlc_list, short_pr, short_obj[:4], short_open_tp_1, short_open_out_gap)\n","# long_max_tpg = get_max_tpg_v2(OrderSide.BUY, ohlc_list, long_pr, long_obj[:4], long_open_tp_1, long_open_out_gap)\n","\n","# ------ true_bias 의 outg 확인 ------ # --> 추후, outg 로 tp_gap / out_gap custom 여부를 위해, 본 cell 을 지우지 않음\n","short_max_outg = get_max_outg_v4(OrderSide.SELL, config, ohlc_list, short_obj, short_tpout_arr, short_open_tp_0, short_open_tp_gap)  # tp_box's mean_low 확인 위해 tp_gap 입력함\n","long_max_outg = get_max_outg_v4(OrderSide.BUY, config, ohlc_list, long_obj, long_tpout_arr, long_open_tp_0, long_open_tp_gap)\n","\n","current_tpg = config.tr_set.tp_gap\n","current_outg = config.tr_set.out_gap"]},{"cell_type":"markdown","metadata":{"id":"tOFkzUX2imQu"},"source":["#### consecutive dur. value survey on bias"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"CgvSrXaZEkMZ"},"outputs":[],"source":["res_df.dtypes"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"gnSvYKIzC4VF"},"outputs":[],"source":["# ------------ dependent vars. ------------ #\n","# res_df 에 존재하는 col 는 모두 사용가능함\n","\n","# ------ 1. 도출한 outg 와 vars. pairing 진행 (by valid_idx) ------ #\n","devided_cols, public_cols = [], []\n","\n","devided_cols.append('tr_{}'.format(selection_id))\n","\n","devided_cols.append('wave_length_fill_{}{}'.format(wave_itv1, wave_period1))\n","devided_cols.append('wave_spread_fill_{}{}'.format(wave_itv1, wave_period1))\n","\n","wave_itv1 = 'T'\n","wave_period1 = config.tr_set.wave_period1\n","\n","# public_cols.append('cu_wrr_21_{}{}'.format(wave_itv1, wave_period1))\n","public_cols.append('cu_wrr_32_{}{}'.format(wave_itv1, wave_period1))\n","# public_cols.append('co_wrr_21_{}{}'.format(wave_itv1, wave_period1))\n","public_cols.append('co_wrr_32_{}{}'.format(wave_itv1, wave_period1))\n","\n","# public_cols.append('wave_high_terms_cnt_fill_T5')\n","# public_cols.append('wave_low_terms_cnt_fill_T5')\n","# public_cols.append('wave_high_loc_pct_T5')\n","# public_cols.append('wave_low_loc_pct_T5')\n","\n","# public_cols.append('b1_co_es_15T1')\n","# public_cols.append('b1_cu_es_15T1')\n","# public_cols.append('b1_upper_wick_ratio_15T')\n","# public_cols.append('b1_lower_wick_ratio_15T')\n","\n","#  'co_wrr_T5', 'cu_wrr_T5', 'b1_cppr_15T', 'b1_updbr', 'b1_lwdbr', 'b1_updbr_cppr', 'b1_lwdbr_cppr' 'abs_ratio_5T', 'rel_ratio_5T', 'body_rel_ratio_5T'\n","\n","# devided_cols = ['tr_{}'.format(selection_id)]  # , 'ir_5T'\n","# public_cols = ['wave_high_terms_cnt_fill_T5', 'wave_low_terms_cnt_fill_T5', 'wave_high_loc_pct_T5', 'wave_low_loc_pct_T5', \n","#                'b1_co_es_15T1', 'b1_cu_es_15T1', 'b1_upper_wick_ratio_15T', 'b1_lower_wick_ratio_15T']\n","\n","short_datas = [res_df['short_' + col].to_numpy() for col in devided_cols] + [res_df[col].to_numpy() for col in public_cols]\n","long_datas = [res_df['long_' + col].to_numpy() for col in devided_cols] + [res_df[col].to_numpy() for col in public_cols]\n","\n","titles = devided_cols + public_cols"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"elapsed":4479,"status":"ok","timestamp":1658034578976,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"Sahvc-R0jD1A","outputId":"d8b458c5-24c9-40d3-cc1d-5672d1432ae9"},"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/numpy/core/fromnumeric.py:3208: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.\n","  return asarray(a).size\n","/usr/local/lib/python3.7/dist-packages/matplotlib/cbook/__init__.py:1376: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.\n","  X = np.atleast_1d(X.T if isinstance(X, np.ndarray) else np.asarray(X))\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1008x1800 with 20 Axes>"],"image/png":"iVBORw0KGgoAAAANSUhEUgAAA1AAAAV+CAYAAAB4bd9NAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAAgAElEQVR4nOzde3wU9b3/8XcSEkAJBIjckpBEJQjqAdQEbNEgWCFtITzAIqIlaBq0Pdja+ivgpRIOtoI9PdQ+itQTKUYEIuKFWG+gXIoX6CpBCOGSQIxJIOEWIBAuIXx/f1j2GEjILMnu7OX19PF9PNzd78x85sswHz4735kNkmQEAAAAAGhSsN0BAAAAAICvoIACAAAAAIsooAAAAADAIgooAAAAALCIAgoAAAAALKKAAgAAAACLKKAAAAC8VHFxsYYNG2Z3GAC+gwIK+LcZM2Zo0aJFdocBAIBXMMbommuuuaxlY2NjZYxRdXW1sz311FOWl+/YsaP279+v9evXO9+bMGFCvfWdOHFCxhjddNNNlxUjcLkooAA3WbhwoWbNmmWpb3O/YTTG6Pjx486kkpWVZXnZ0NBQFRQUqLS01Pne4MGD6yWp6upqGWM0ZsyYy44RAOBfQkJCmuwTERGh8PBwhYeH65lnnrG87jlz5mj79u313luyZIlzXeHh4frFL36h3bt3a9OmTS7HDjQHBRTgBsHBLftXy0qS6tevnzOpZGRkWF73b3/7Wx04cKDee5988km9JPXjH/9Y1dXV+uCDD1yOHQDQfGFhYZo7d67Ky8tVXl6uuXPnKiwsTJKUnJys0tJS/eY3v1FlZaX27t2rSZMmOZft1KmTcnNzdfToUf3rX//SrFmz6l3Zaci6deskSV999ZWqq6s1btw453amTp2qffv2aeHChW7Z11tvvVU33HBDk+tPS0vTK6+84pYYgEuhgEJAmjp1qsrKynTs2DHt2LFDQ4cOlfRtgsrOztaxY8eUn5+vm2++2bnMddddpzVr1qiqqkr5+fkaOXKk87OFCxfqhRde0Lvvvqvjx48rPT1d9913n6ZOnarq6mrl5uY2Gssrr7yinj176p133lF1dbV++9vfOqc+PPjggyopKdHq1avdMg5xcXG6//779eyzz16yX1pampYvX66amhq3xAEAuLQnn3xSgwYNUv/+/dWvXz8lJSXVmxLXrVs3dejQQVFRUUpPT9e8efMUEREhSZo3b55OnDihbt26KS0tTWlpaU1uLzk5WdL/fTm3bNky53Y6deqk2NhYTZ48ucn1lJSUqLS0VH//+9/VuXPnJvsHBwfrr3/9q6ZMmSJjTKP9evbsqdtvv50CCrYxNFogtYSEBPPNN9+Y7t27G0kmNjbWXH311WbGjBnm5MmTJiUlxQQHB5s//OEP5vPPPzeSTKtWrUxhYaF5/PHHTWhoqLnjjjvMsWPHTEJCgpFkFi5caI4cOWK+973vmaCgINO6dWuzcOFCM2vWLEsxFRcXm2HDhjlfx8bGGmOMyc7ONldccYVp06bNJZc3xpjy8nKzb98+88Ybb5jY2FhL233nnXfM6NGjTXJysiktLW2wzxVXXGGOHTtmkpOTbf+zo9FotEBr5/NDUVGRSUlJcb5/1113meLiYiPJJCcnm5qaGhMSEuL8vLKy0gwcONAEBwebM2fOOPOVJDNr1iyzfv36JrdtjDHXXHON83VycrI5ffq0ad26dZPLXnnllebmm282ISEhpkuXLub11183H3zwQZPLPfroo+aFF14wkkxaWlqjcT711FNmzZo1tv/50AKzcQUKAaeurk6tW7dW37591apVK5WUlGjPnj2Svp269v777+vcuXNatGiR+vXrJ0kaNGiQ2rVrp9mzZ6u2tlZr1qzRP/7xD917773O9a5YsUKfffaZjDE6ffp0i8SamZmpmpoanTp16pL9br/9dsXFxem6667T3r179Y9//KPJaX+jR49WSEiI3n777Uv2GzNmjA4ePOiczgEA8LwePXqopKTE+bqkpEQ9evRwvj506JDq6uqcr2tqatSuXTtdddVVCg0NrXef63f/31UHDhywlONOnDihL7/8UnV1ddq/f7+mTJmi4cOHq127do0u0717d/3yl7/Uk08+2eT6J06cqOzsbJdiB1oKBRQCzu7du/Xoo48qMzNT+/fv19KlS9W9e3dJUkVFhbNfTU2N2rZtq5CQEPXo0UOlpaX1phOUlJQoKirK+bo5CakxVte5fv161dbW6ujRo/rVr36l+Ph49enTp9H+V1xxhZ577jn98pe/bHLdzDEHAPvt3btXsbGxztc9e/bU3r17m1zuwIEDqq2tVXR0tPO9mJiYy47jUtPqrCx3qXuEk5KS1L17dxUUFGjfvn16/vnnlZSUpH379tVb7nvf+5569Oih5cuXX1YsQHNRQCEgLV26VLfddpvzXqM5c+Zcsv/evXsVExOjoKAg53s9e/ZUeXm58/WFScWVJNNY3+Ykqu/GeqFevXopLi5O69ev1759+/Tmm2+qe/fu2rdvX70EHR0drSFDhlBAAYDNli5dqqeeekqRkZHq3Lmznn76ab366qtNLnfu3Dm9+eabyszMVNu2bdW7d29NnDjR0jYrKip09dVXX1a8SUlJSkhIUFBQkDp16qS//OUvWrNmjY4dO9boMu+//77i4uLUv39/9e/fX08//bTy8vLUv39/nTt3ztkvLS1Nb7zxho4fP35ZsQHNRQGFgJOQkKA77rhDYWFhOnXqlE6ePFnvxNyQjRs3qqamRlOnTlWrVq2UnJyskSNHKicnp9FlKisrLSceV/peqG/fvurXr5+Cg4N15ZVX6k9/+pPKy8svevzrd+Xn5ysmJsaZpH72s5+psrJS/fv3r3fV66c//ak+++wz5xRHAIA9nnnmGX3xxRfasmWLtm7dqk2bNll+LPiUKVPUoUMHVVRUaNGiRVq6dKmlaXiZmZnKzs5WVVWVfvKTn7gU79VXX60PPvhA1dXVys/P1+nTp+tNe2/ImTNnVFlZ6WxHjx5VbW2tKisrnX1at26tcePGMX0PtrP9RiwazZPtxhtvNBs3bjTHjh0zhw4dMu+8847p3r27mTFjhlm0aJGz3/kHOZy/Kbdv375m7dq15siRI2bbtm1m9OjRzr4NPTDi2muvNXl5eaaqqsq89dZbl4xp1KhRpqSkxFRVVZnHHnvsom1fqt1xxx1mx44d5vjx46aystK89dZb5tprr3VpTBp7iMT27dvNgw8+aPufGY1Go9Fars2ePdu8/PLLtsdBo/lqC/r3/wAAAMAP9e7dW2FhYdq6dasSExP13nvv6Wc/+5lWrFhhd2iAT2IKHwAAgB8LDw/Xm2++qRMnTui1117Tn/70J61YsUKDBw9WdXV1g82Kxx9/vMFl33vvvUsu19g2Bw8e3BK7C7gdV6AAD4iJiVFBQUGDn/Xt27fJp+1NmDBBL7744kXvl5SU6IYbbmh0ufz8/HoPhTjvoYce0pIlS5qIGgAAABeigAIAAAAAi5jCBwAAAAAWtbI7gJa0f//+er/SDQDwvNjYWHXp0sXuMLwSeQoA7NfcPOVXBVRJSYkSExPtDgMAAprD4bA7BK9FngIA+zU3TzGFDwAAAAAsooACAAAAAIsooAAAAADAIr+6BwoALqm9pLAL3jsj6ZgNsQAA4I0uzJXkyYtQQAEIHGGS3r/gvRQ7AgEAwEtdmCvJkxdhCh8AAAAAWEQBBQAAAAAWMYUPAJqL+eIAAAQMrkABQHOdny9+vl34oAr4heDgYG3atEnvvPOOJCkuLk4bNmxQYWGhcnJyFBoaanOEAABPoIACAMCCX/3qV9q+fbvz9Zw5czR37lz16tVLVVVVSk9PtzE6AICnUEABANCEqKgo/ehHP9JLL73kfG/o0KFavny5JCk7O1ujR4+2KzwAsEd7SZHfae1bqK+X4x4oAACa8Oc//1lTp05VeHi4JKlz5846cuSI6urqJEllZWWKioqyM0QA8DxXHnnuR49H5woUAACX8KMf/Uj79+/Xpk2bLmv5jIwMORwOORwORUZGtnB0AABP4woUAACX8P3vf1+jRo3SD3/4Q7Vp00bt27fX888/r4iICIWEhKiurk7R0dEqLy9vcPmsrCxlZWVJkhwOhydDBwC4AVegAAC4hCeeeEIxMTGKj4/X+PHjtXr1at1///1as2aN7r77bklSWlqaVqxYYXOkAABPoIACAOAyTJs2Tb/5zW9UWFiozp07a8GCBXaHBADwAKbwAQBg0bp167Ru3TpJUnFxsQYOHGhzRAAAT6OAAgAAALxBe138Y+xnJB1r4fW2xDrdxV1j0IIooADAH/hScgQANOzCR31LLfO4b196hLi7xqAFUUABgD/wpeQIAIAP4yESAAAAAGARBRQAAAAAWEQBBQAAAAAW2V5ARUdHa/Xq1dq2bZvy8/P1y1/+UpLUsWNHrVy5Urt27dLKlSsVERFhc6QAAAAAAp3tBdTZs2f12GOP6frrr9egQYP0n//5n+rTp4+mT5+ujz/+WAkJCfr44481ffp0u0MFAAAAvtVeUuR3Wnt7w4Hn2F5AVVRUKC8vT5J0/Phxbd++XVFRUUpNTVV2drYkKTs7W6NHj7YzTAAAAOD/nH/66fl24W8XwW951WPMY2NjNWDAAG3cuFFdu3ZVRUWFpG+LrK5duza4TEZGhiZPnixJioyM9FisAAAAAAKP7Vegzrvyyiv1xhtv6NFHH1V1dfVFnxtjGlwuKytLiYmJSkxM1MGDB90dJgAAAIAA5hUFVKtWrfTGG29o8eLFeuuttyRJlZWV6tatmySpW7du2r9/v50hAgAAwN9xXxMs8IoCasGCBdq+fbvmzp3rfC83N1dpaWmSpLS0NK1YscKu8AAAABAIuK8JFth+D9T3v/99TZw4UVu2bHE+TOKJJ57Q7NmztWzZMqWnp6ukpETjxo2zOVIA8APtdfE/CM5IOmZDLAAA+CDbC6hPP/1UQUFBDX525513ejgaAPBz579d/a4UOwIBADQLX4jZxium8AEA4K1at26tjRs3avPmzcrPz1dmZqYkKS4uThs2bFBhYaFycnIUGhpqb6AAAsuF0w2ZcugxFFAAAFzC6dOnNXToUPXv31/9+/fXiBEjNHDgQM2ZM0dz585Vr169VFVVpfT0dLtDBQB4AAUUAABNOHHihCQpNDRUoaGhMsZo6NChWr58uSR+8B0AAgkFFAAATQgODlZeXp7279+vVatWaffu3Tpy5Ijq6uokSWVlZYqKimpw2YyMDDkcDjkcDn7wHQD8AAUUAABNOHfunAYMGKDo6GglJSXpuuuus7wsP/gOAP7F9qfwAQDgK44ePao1a9bo1ltvVUREhEJCQlRXV6fo6GiVl5fbHR5wsQuf1BaIT2ljDNDCuAIFAJ7Er9z7nMjISHXo0EGS1KZNG/3gBz/Q9u3btWbNGt19992S+MF3eDF+GJYxQIvjChQAeNKFv8PEbzB5ve7duys7O1shISEKDg7WsmXL9O6776qgoEA5OTl65plnlJeXpwULFtgdKgDAAyigAAC4hK1bt+qmm2666P3i4mINHDjQhojgl/hRVP/GNEK/QgEFAABgtwuvTktcofYnzD7wKxRQAJqHb9Xch7EF4K3sPj9xxQ42ooAC0Dx8q+Y+jC0Ab2X3+YkrdrART+EDAAAAAIsooAAAAADAIgooAAAAALCIAgoAAAAALKKAAgAAAACLeAofAAAA3MfuR54DLYwCCoB3ciXhkpwBwHvZ/chzoIVRQAHwTq4kXJIzAADwEO6BAgAAAACLKKAAAAAAwCKm8AG42IX3FEmBd18RYwAAnsV5Fz6CAgrAxS68p0gKvPuKGAP8W3R0tF555RV17dpVxhj97//+r/7yl7+oY8eOeu211xQXF6evv/5a48aN05EjR+wOF/BdnHfhI5jCBwDAJZw9e1aPPfaYrr/+eg0aNEj/+Z//qT59+mj69On6+OOPlZCQoI8//ljTp0+3O1QAgAdQQAG+rr2kyO+09vaGc0m+FCvwbxUVFcrLy5MkHT9+XNu3b1dUVJRSU1OVnZ0tScrOztbo0aPtDBMA4CFM4QN8nS89wtuXYgUaEBsbqwEDBmjjxo3q2rWrKioqJH1bZHXt2rXBZTIyMjR58mRJUmRkpMdiBQC4B1egAACw4Morr9Qbb7yhRx99VNXV1Rd9boxpcLmsrCwlJiYqMTFRBw8edHeYAAA3o4ACAKAJrVq10htvvKHFixfrrbfekiRVVlaqW7dukqRu3bpp//79doYIAPAQCigAAJqwYMECbd++XXPnznW+l5ubq7S0NElSWlqaVqxYYVd4AAAP8ooCasGCBaqsrNTWrVud73Xs2FErV67Url27tHLlSkVERNgYIQAgUH3/+9/XxIkTNXToUOXl5SkvL08pKSmaPXu2fvCDH2jXrl268847NXv2bLtDBQB4gFcUUC+//LJGjBhR7z0eDwsA8AaffvqpgoKC1K9fPw0YMEADBgzQ+++/r8OHD+vOO+9UQkKCfvCDH6iqqsruUAEAHuAVBdT69et1+PDheu/xeFgAAAAA3sZrH2PO42HRotrr20dof9cZScdsiAX4jvZHODQBAPAlXltAXehSj4fNysqSJDkcDk+GBF9y4e8PSfwGEbxC2DkOTQAAfIlXTOFrCI+HBQAA8KD2kiK/09rbGw7grby2gOLxsAAAAB50frbG+Xbh/GIAkrxkCt+SJUs0ZMgQRUZGqrS0VDNmzNDs2bO1bNkypaenq6SkROPGjbM7TOBiF95bdambV1zp6w7cBwYAANBsXlFATZgwocH377zzTg9HArjownurLnXziit93YH7wADA89zx5RlfiAG28ooCCgAAwC+548szvhADbEUBBQAAYPc0awA+gwIKuBBTIwAg8Ng9zRqAz6CAAi7E1AgA8F7e8CUXV6uAgEYBBQAAfIc3fMnF1SogoHnt70ABAAAAgLfhChQAAPBPTLUD/EL7I971V5krUAAANGHBggWqrKzU1q1bne917NhRK1eu1K5du7Ry5UpFRETYGCEadH6q3fl24b1TAHxC2Dnv+qtMAQUAQBNefvlljRgxot5706dP18cff6yEhAR9/PHHmj59uk3RtYD2kiK/09rbGw6Ay9P+CH+VPYECCgCAJqxfv16HDx+u915qaqqys7MlSdnZ2Ro9erQdobUMrtQAfsHbrtT4K+6BQn3e8HhYMG8fDfK2OeCBrmvXrqqoqJAkVVRUqGvXrg32y8jI0OTJkyVJkZGRHosPAOAeFFCozxseDwsekYsGnf9m8TwOC+9ijGnw/aysLGVlZUmSHA6HJ0MCALgBU/gAALgMlZWV6tatmySpW7du2r9/v80RAQA8gQIKAIDLkJubq7S0NElSWlqaVqxYYXNEAGCvQHmIBVP44Nu4VwhoEPdLtawlS5ZoyJAhioyMVGlpqWbMmKHZs2dr2bJlSk9PV0lJicaNG2d3mABgq0CZak4BBd/GvUJAgwIliXnKhAkTGnz/zjvv9HAkAOBZF34hJ7XMl3K+/EUfBRQAAACABl34hZzUMl/K+fIXfRRQAAAA8Eq+dJXCl2OVvDteb0MBBQAWWU2OvpaYfCnpAwgsvnSVwpdjlbw7Xm9DAQUAFllNjr6WmHwp6cML8PAewKP4ksv7UEABAADreHgP4FF8yeV9+B0oAAAAALCIK1C4fO6axhEg00NcuU+Gy/eujQHjBXgJq+fzC/tdqi/QTL52nyq8DwUULp+7pnEEyPQQV+6T4fK9a2PAeAFewur5/MJ+l+oLNJOv3acK70MBBQCAPwqQq/n+zB1X0/lRVNdwtQoNoYACAMAfBcjVfH/mjqvp/Ciqa7hahYZQQH0Xc7Ddh29CvZLd3xjyzR4AT+LqC4CWQAH1XczBdh++CfVKdn9jyDd7ADyJqy8AWgKPMQcAAAAAi7gC5Ql2T1/zwqmJ3jB1y18fi+2uWK2u1xv+bF3hS3+2QEPn8/ZVUljd/73mGPZunHPsz1PewJdixcW8uoAaPny4nn/+eYWEhOill17SnDlz7A7p8tg9fc0LpyZ6w9Qtf30strtitbpeb/izdYUv/dnCO3k0VzVwPg8byDHsSzjn2J+nvIEvxYqLeW0BFRwcrHnz5ukHP/iBysrK5HA4lJubq+3bt9sdGgAAkshV7mT3N/S+djXdHRgDoGFeW0AlJSWpqKhIxcXFkqScnBylpqaSlAAAXoNc5T52f0Pva1fT3YExABoWJMnYHURDxo4dqxEjRigjI0OSdP/992vgwIF65JFH6vXLyMjQ5MmTJUm9e/fWzp07La0/MjJSBw8ebNmg/Qxj1DTGyBrGqWn+NEaxsbHq0qWL3WF4hJVcdbl56rv86fhwN8bKGsbJGsbJGl8bp+bmKa+9AmVVVlaWsrKyXF7O4XAoMTHRDRH5D8aoaYyRNYxT0xgj/3W5eeq7OD6sY6ysYZysYZysCbRx8trHmJeXlysmJsb5Ojo6WuXl5TZGBABAfeQqAAg8XltAORwO9erVS3FxcQoNDdX48eOVm5trd1gAADiRqwAg8IRIyrQ7iIYYY1RYWKjFixfrkUce0auvvqo333yzRbexadOmFl2fP2KMmsYYWcM4NY0x8j2eyFXncXxYx1hZwzhZwzhZE0jj5LUPkQAAAAAAb+O1U/gAAAAAwNtQQAEAAACARX5ZQA0fPlw7duxQYWGhpk2bdtHnYWFhysnJUWFhoTZs2KDY2FjnZ9OnT1dhYaF27Nihu+66y5Nhe9TljlFsbKxqamqUl5envLw8zZ8/39Ohe0xTY3Tbbbfpyy+/VG1trcaOHVvvs4kTJ2rXrl3atWuXJk6c6KmQPa45Y3T27FnncbRixQpPhexxTY3Rr3/9a23btk1fffWVPvroI/Xs2dP5WaAcR4GOnGUNecsacpd15DBryGMNM/7UgoODTVFRkYmPjzehoaFm8+bNpk+fPvX6/PznPzfz5883ksw999xjcnJyjCTTp08fs3nzZhMWFmbi4uJMUVGRCQ4Otn2fvGmMYmNjzdatW23fB28Yo9jYWHPjjTea7OxsM3bsWOf7HTt2NLt37zYdO3Y0ERERZvfu3SYiIsL2ffKmMZJkqqurbd8HbxijIUOGmLZt2xpJ5uGHH3b+XQuU4yjQGznL/eMUKHnL6jgFeu5qibGSAiOHWR2nQMxjfncFKikpSUVFRSouLlZtba1ycnKUmppar09qaqqys7MlScuXL9ewYcOc7+fk5OjMmTP6+uuvVVRUpKSkJI/vg7s1Z4wChZUxKikp0datW3Xu3Ll67w8fPlyrVq1SVVWVjhw5olWrVmnEiBGeDN8jmjNGgcLKGK1du1YnT56UJG3YsEHR0dGSAuc4CnTkLGvIW9aQu6wjh1lDHmuY3xVQUVFRKi0tdb4uKytTVFRUo33q6up09OhRde7c2dKy/qA5YyRJ8fHx2rRpk9auXavBgwd7LnAPas6xwHFkTZs2beRwOPT5559fdDL2F66OUXp6ut5///3LWha+iZxlDXnLGnKXdeQwa8hjDWtldwDwLfv27VPPnj11+PBh3XTTTXr77bd1/fXXq7q62u7Q4GNiY2O1d+9excfHa/Xq1dq6dav27Nljd1i2ue+++3TLLbcoOTnZ7lAAv0LegjuQwy4WSHnM765AlZeXKyYmxvk6Ojpa5eXljfYJCQlRhw4ddOjQIUvL+oPmjNGZM2d0+PBhSd/+YNru3buVkJDgueA9pDnHAseRNXv37pUkFRcXa+3atRowYECLx2g3q2M0bNgwPfnkkxo1apTOnDnj0rLwbeQsa8hb1pC7rCOHWUMea5ztN2K1ZAsJCTG7d+82cXFxzpvd+vbtW6/PL37xi3o3mr722mtGkunbt2+9G3J3797tlzfkNmeMIiMjnWMSHx9vysrKTMeOHW3fJzvG6HxbuHDhRTfi7tmzx0RERJiIiAizZ88exuiCMYqIiDBhYWFGkuncubPZtWvXRTel+kOzMkb9+/c3RUVF5tprr633fqAcR4HeyFnuH6dAyVtWx+l8C9Tc1RJjFSg5zOo4BWgesz2AFm8pKSlm586dpqioyDzxxBNGkpk5c6YZOXKkkWRat25tli1bZgoLC83GjRtNfHy8c9knnnjCFBUVmR07dpgRI0bYvi/eNkZjxowx+fn5Ji8vz3z55Zfmxz/+se37YtcY3XLLLaa0tNQcP37cHDx40OTn5zuXfeCBB0xhYaEpLCw0kyZNsn1fvG2Mbr31VrNlyxazefNms2XLFvPggw/avi92jdGqVatMRUWFycvLM3l5eWbFihUBdxwFeiNnuXecAilvWRknclfzxyqQcpiVcQrEPBb07/8BAAAAADTB7+6BAgAAAAB3saWAWrBggSorK7V169ZG+zz//PMqLCzUV1995bc35gEAvBN5CgDQGFsKqJdffvmSP6SVkpKiXr16qVevXpo8ebLmz5/vwegAAIGOPAUAaIwtBdT69eudjxRtSGpqql555RVJ0saNGxUREaFu3bp5KjwAQIAjTwEAGuOV90D58y8XAwB8H3kKAAJXK7sDaK6MjAxNnjxZktS7d2/t3Lnz8lfmyjMJ3dHXXc9E9KX98oa+Vtm9fcBLxcbGqkuXLnaH4TVaNE+5wu7zqd3bd7Wvrwj0/QdaQHPzlFcWUK78cnFWVpaysrIkSQ6HQ4mJic3buCsnpZZer6vrbOntn4/BHUnUFe6K1R3s3j7ghRwOh90huJ2tecoVdp/77cypl7NeXxHo+w80U3PzlFdO4cvNzdXEiRMlSQMHDtTRo0dVUVFhc1QAAHyLPAUAgcuWK1BLlizRkCFDFBkZqdLSUs2YMUOhoaGSpBdffFHvvfeefvjDH6qoqEg1NTV64IEH7AgTABCgyFMAgMbYUkBNmDChyT5TpkzxQCQAAkZrSadbsB/8GnkKANAYr7wHCgBa3GnZfy8iAADweV55DxQAH9G6hfsBAOzhynmaczoCHAUUgPpcSYznr+o01ZgSB8CbUTxYP597wzndl/68fClWWMYUPsBXuXKvjit9rU51k5juBsA/cN5zD/KUb8UKyyigEBj88QECnJQBAN6MPAU/RYqsGFgAACAASURBVAGFwMADBAAAANACuAcK+C7mHwMAEJh4MBIs4goU8F1MNwAAtBR33QME92C2CiziChQAAIA7uPJkO3dw15USrsAgwFFAAcDl4vG0AFqK1WLLHet013rhGnKKz2AKHwD389dpLEz5BADvRk6BG1BAAXA/kgIAwA6Bnn9cKSDbSDrlhvX6Idum8A0fPlw7duxQYWGhpk2bdtHnMTExWr16tTZt2qSvvvpKKSkpNkQJAAhU5CkPYjoSfIkvHa+uTOM85UJfV4onP326odWharEWHBxsioqKTHx8vAkNDTWbN282ffr0qdfnxRdfNA8//LCRZPr06WOKi4ubXK/D4Wh+fFb/c8d63TnuruxXS/f1tVjdtX27/1zt/DNwZZ2tXYizjRv2y1v+DFq6uTKurvRtoLXIudjm5tV5ypXW0n+X3fX33p193TFWdv4ZeMu4umOdHNvuGS+7t+/KuHqoNfdcbMsVqKSkJBUVFam4uFi1tbXKyclRampqvT7GGLVv316S1KFDB+3du9eOUAH/4Evf6rjr2zJ/ZfXP1pVxDeBpGeeRpwDgEnzp3xVuYMs9UFFRUSotLXW+Lisr08CBA+v1yczM1MqVK/XII4/oyiuv1J133unpMAH/EehzwP0Zv1viFuQpNCrA7/0AJAX8vyu89jHm9957r15++WXFxMTohz/8oRYtWqSgoIv/BDIyMuRwOORwOBQZGWlDpACAQESe8gHu+Jbc7t92AmA7Wwqo8vJyxcTEOF9HR0ervLy8Xp/09HQtW7ZMkrRhwwa1adOmwcSTlZWlxMREJSYm6uDBg+4NHAAQEMhTfoLfKwLgBrYUUA6HQ7169VJcXJxCQ0M1fvx45ebm1uvzzTffaNiwYZKk6667Tm3atNGBAwfsCBcAEGDIUwCAxthSQNXV1WnKlCn68MMPtX37di1btkwFBQWaOXOmRo4cKUl67LHHlJGRoc2bN2vp0qWaNGmSHaECAAIQeQoA0Jgg+dHFa4fDocTExOatxF03xNl9k7cr+9XSfd0xVq5s35W+7ljn+b7uYOdYudLX7u270reNXLtB3O5jwGoMHjxeW+Rc7Kc8Pjb8vSdWX4nVnedef/0zsMobYm3p/NvMh7k091xsy1P4gIDjyl90nvBkrwB/shAA2IJzL3zoGKCAAjzBh04KAADAy/Flq60ooAAAAABfwm8A2sprfwcKAAJWgP/COwAA3owrUADgbZjyCQCA1+IKFAAAAABYRAEFAAAAABZRQAEAAACARRRQAAAAAGARBRTcjyeKuYbxAgAA8Fo8hQ/uxxPFXMNvOwAAAHgtrkABAAAAgEUUUAAAAABgkW0F1PDhw7Vjxw4VFhZq2rRpDfb5yU9+om3btik/P1+LFy/2cIQA0IK4t83nkKcAAI0xnm7BwcGmqKjIxMfHm9DQULN582bTp0+fen2uvfZas2nTJhMREWEkmauuuqrJ9TocjubHZ/U/d6zXnePuyn61dF+7t0+s9ve1e/v+Gqs796sZrUXOxTY3r85TnPuJlVjZL2JtVmvuudiWK1BJSUkqKipScXGxamtrlZOTo9TU1Hp9MjIyNG/ePB05ckSSdODAATtCBQAEIPIUAKAxthRQUVFRKi0tdb4uKytTVFRUvT4JCQlKSEjQJ598os8//1zDhw9vcF0ZGRlyOBxyOByKjIx0a9wAgMBAngIANMZrH2PeqlUr9erVS0OGDFF0dLT++c9/6sYbb9TRo0fr9cvKylJWVpYkyeFw2BEqACAAkacAIDDZcgWqvLxcMTExztfR0dEqLy+v16esrEy5ubk6e/asvv76a+3atUu9evXydKgAgABEngIANMaWAsrhcKhXr16Ki4tTaGioxo8fr9zc3Hp93n77bQ0ZMkSS1LlzZyUkJGjPnj02RAsACDTkKQBAY2wpoOrq6jRlyhR9+OGH2r59u5YtW6aCggLNnDlTI0eOlCR9+OGHOnTokLZt26Y1a9bot7/9rQ4fPmxHuACAAEOeAgA0JkjfPo7PLzgcDiUmJjZvJVZHI8gN63V1nS29/fMxtHRfd6zTXX3t3r4rfe3evit97d6+K33t3r67+rq6zmZokXOxn/L42PjSMUesxOorfe3evit97d6+K319KE/Z9kO6AAAAAOBrKKAAAAAAwCIKKAAAAACwiAIKAAAAACyigAIAAAAAiyigAADwFa3tDgAA0MruAAAAgEWn5bHH/AIAGsYVKAAAAACwiAIKAAAAACyigAIAAAAAiyigAAAAAMAiCigAAAAAsMi2Amr48OHasWOHCgsLNW3atEb7jRkzRsYY3XzzzR6MDgAQ6MhTAICG2FJABQcHa968eUpJSVHfvn117733qk+fPhf1a9eunX71q19pw4YNNkQJAAhU5CkAQGNsKaCSkpJUVFSk4uJi1dbWKicnR6mpqRf1mzVrlubMmaNTp07ZECUAIFCRpwAAjbGlgIqKilJpaanzdVlZmaKiour1GTBggGJiYvTee+95OjwAQIAjTwEAGtPK7gAaEhQUpP/5n//RpEmTmuybkZGhyZMnS5IiIyPdHBkAAOQpAAhktlyBKi8vV0xMjPN1dHS0ysvLna/Dw8N1ww03aO3atSouLtagQYOUm5vb4A26WVlZSkxMVGJiog4ePOiR+AEA/o08BQBojC0FlMPhUK9evRQXF6fQ0FCNHz9eubm5zs+PHTumq666SvHx8YqPj9eGDRs0atQoffnll3aECwAIMOQpAEBjbCmg6urqNGXKFH344Yfavn27li1bpoKCAs2cOVMjR460IyQAAJzIUwCAxgRJMnYH0VIcDocSExObtxKroxHkhvW6us6W3v75GFq6rzvW6a6+dm/flb52b9+VvnZv35W+dm/fXX1dXWcztMi52E95PE/50jFHrMTqK33t3r4rfe3evit9fShP2fZDugAAAADgayigAAAAAMAiCigAAAAAsIgCCgAAAAAsooACAAAAAIsooAAAAADAIgooAAAAALCIAgoAAAAALKKAAgAAAACLKKAAAAAAwCIKKAAAAACwiAIKAAAAACyyrYAaPny4duzYocLCQk2bNu2iz3/9619r27Zt+uqrr/TRRx+pZ8+eNkQJAAhU5CkAQENsKaCCg4M1b948paSkqG/fvrr33nvVp0+fen3y8vJ0yy23qF+/flq+fLmee+45O0IFAAQg8hQAoDG2FFBJSUkqKipScXGxamtrlZOTo9TU1Hp91q5dq5MnT0qSNmzYoOjoaDtCBQAEIPIUAKAxthRQUVFRKi0tdb4uKytTVFRUo/3T09P1/vvveyI0AADIUwCARrWyO4Cm3HfffbrllluUnJzc4OcZGRmaPHmyJCkyMtKToQEAQJ4CgABjyxWo8vJyxcTEOF9HR0ervLz8on7Dhg3Tk08+qVGjRunMmTMNrisrK0uJiYlKTEzUwYMH3RYzACBwkKcAAI2xpYByOBzq1auX4uLiFBoaqvHjxys3N7den/79++vFF1/UqFGjdODAATvCBAAEKPIUAKAxthRQdXV1mjJlij788ENt375dy5YtU0FBgWbOnKmRI0dKkv74xz+qXbt2ev3115WXl6cVK1bYESoAIACRpwAAjQmSZOwOoqU4HA4lJiY2byVWRyPIDet1dZ0tvf3zMbR0X3es01197d6+K33t3r4rfe3evit97d6+u/q6us5maJFzsZ/yeJ7ypWOOWInVV/ravX1X+tq9fVf6+lCesu2HdAEAAADA11BAAQAAAIBFFFAAAAAAYBEFFAAAAABYRAEFAAAAABZRQAEAAACARRRQAAAAAGARBRQAAAAAWEQBBQAAAAAWUUABAAAAgEUUUAAAAABgEQUUAAAAAFhEAQUAAAAAFtlWQA0fPlw7duxQYWGhpk2bdtHnYWFhysnJUWFhoTZs2KDY2FgbogQABCryFACgIbYUUMHBwZo3b55SUlLUt29f3XvvverTp0+9Punp6aqqqlKvXr00d+5czZkzx45QAQABiDwFAGiMLQVUUlKSioqKVFxcrNraWuXk5Cg1NbVen9TUVGVnZ0uSli9frmHDhtkRKgAgAJGnAACNCZJkPL3RsWPHasSIEcrIyJAk3X///Ro4cKAeeeQRZ5+tW7dqxIgRKi8vlyQVFRVp4MCBOnToUL11ZWRkaPLkyZKk3r17a+fOnZbjiIyM1MGDB5u7OwGBsbKOsXIN42Wdr4xVbGysunTpYncYzeIteepCvnIMeAvGyzWMl2sYL9d5y5g1N0+1asFYbJGVlaWsrKzLWtbhcCgxMbGFI/JPjJV1jJVrGC/rGCvf1Jw8dSGOAdcwXq5hvFzDeLnOX8bMlil85eXliomJcb6Ojo52foPXUJ+QkBB16NDhom/1AABwB/IUAKAxthRQDodDvXr1UlxcnEJDQzV+/Hjl5ubW65Obm6u0tDRJ0t13363Vq1fbESoAIACRpwAAjQmRlOnpjRpjVFhYqMWLF+uRRx7Rq6++qjfffFMzZ85UeHi4du3apS1btui+++7TH/7wB/Xv318PP/ywjhw50uKxbNq0qcXX6a8YK+sYK9cwXtYxVp7hTXnqQhwDrmG8XMN4uYbxcp0/jJktD5EAAAAAAF9k2w/pAgAAAICvoYACAAAAAIv8toAaPny4duzYocLCQk2bNu2iz8PCwpSTk6PCwkJt2LBBsbGxzs+mT5+uwsJC7dixQ3fddZcnw7bF5Y5VbGysampqlJeXp7y8PM2fP9/ToXtcU2N122236csvv1Rtba3Gjh1b77OJEydq165d2rVrlyZOnOipkG3TnLE6e/as87hasWKFp0K2TVNj9etf/1rbtm3TV199pY8++kg9e/Z0fhZox5W/Ime5hrzlOvKXa8hhrgnEPGb8rQUHB5uioiITHx9vQkNDzebNm02fPn3q9fn5z39u5s+fbySZe+65x+Tk5BhJpk+fPmbz5s0mLCzMxMXFmaKiIhMcHGz7PnnjWMXGxpqtW7favg/eNFaxsbHmxhtvNNnZ2Wbs2LHO9zt27Gh2795tOnbsaCIiIszu3btNRESE7fvkjWMlyVRXV9u+D940VkOGDDFt27Y1kszDDz/s/DsYaMeVvzZylufGK9DylitjRv5qmfGSAiuHWR0vf8tjfnkFKikpSUVFRSouLlZtba1ycnKUmppar09qaqqys7MlScuXL9ewYcOc7+fk5OjMmTP6+uuvVVRUpKSkJI/vg6c0Z6wCjZWxKikp0datW3Xu3Ll67w8fPlyrVq1SVVWVjhw5olWrVmnEiBGeDN+jmjNWgcbKWK1du1YnT56UJG3YsEHR0dGSAu+48lfkLNeQt1xH/nINOcw1gZjH/LKAioqKUmlpqfN1WVmZoqKiGu1TV1eno0ePqnPnzpaW9SfNGStJio+P16ZNm7R27VoNHjzYc4HboDnHBseVa/vbpk0bORwOff755xedhP2Nq2OVnp6u999//7KWhXciZ7mGvOU68pdryGGuCcQ81sruAOC79u3bp549e+rw4cO66aab9Pbbb+v6669XdXW13aHBx8XGxmrv3r2Kj4/X6tWrtXXrVu3Zs8fusGx333336ZZbblFycrLdoQA+ibwFTyCHNc5f8phfXoEqLy9XTEyM83V0dLTKy8sb7RMSEqIOHTro0KFDlpb1J80ZqzNnzujw4cOSvv1RtN27dyshIcFzwXtYc44NjivX9nfv3r2SpOLiYq1du1YDBgxo8Ri9hdWxGjZsmJ588kmNGjVKZ86ccWlZeDdylmvIW64jf7mGHOaaQM1jtt+I1dItJCTE7N6928TFxTlvZuvbt2+9Pr/4xS/q3WD62muvGUmmb9++9W7I3b17t1/fkNucsYqMjHSOTXx8vCkrKzMdO3a0fZ/sHKvzbeHChRfdhLtnzx4TERFhIiIizJ49exirRsYqIiLChIWFGUmmc+fOZteuXRfdjOpPzcpY9e/f3xQVFZlrr7223vuBdlz5ayNneW68Ai1vuTJm51ug56/mjleg5TCr4+WHecz2ANzSUlJSzM6dO01RUZF54oknjCQzc+ZMM3LkSCPJtG7d2ixbtswUFhaajRs3mvj4eOeyTzzxhCkqKjI7duwwI0aMsH1fvHWsxowZY/Lz801eXp758ssvzY9//GPb98XusbrllltMaWmpOX78uDl48KDJz893LvvAAw+YwsJCU1hYaCZNmmT7vnjrWN16661my5YtZvPmzWbLli3mwQcftH1f7B6rVatWmYqKCpOXl2fy8vLMihUrAva48tdGzvLMeAVi3rI6ZuSvlhmvQMxhVsbL3/JY0L//BwAAAADQBL+8BwoAAAAA3IECCgAAAAAsooACAAAAAIsooAAAAADAIgooAAAAALCIAgoAAAAALKKAAgAAAACLKKAAAAAAwCIKKAAAAACwiAIKAAAAACyigAIAAAAAiyigAAAAAMAiCigAAAAAsIgCCgAAAAAsooCCR8yYMUOLFi2yOwyvYozRNddc4/HtJicnq7S01OXl2rRpo9zcXB05ckTLli3ThAkT9OGHHzo//+7+LFy4ULNmzWqxmAHAHYqLizVs2DC7w/AasbGxMsYoJCTE49tOS0vT+vXrXV6uS5cuWrdunY4dO6b//u//1uOPP66srCxJF+/PmjVrlJ6e3qJxIzBRQMEn8Q9061qqULv77rvVtWtXde7cWePGjdOSJUs0fPjwy1rXhAkTVF1drerqatXU1Kiurs75urq6WmFhYXrppZf09ddf69ixY8rLy9OIESPqrWPo0KHavn27Tpw4odWrV6tnz57N3kcAgPu1ZKE2efJkHTx4UO3bt9f/+3//T88++6wyMjIua12PP/64Mw+dPHlSZ8+edb7Oz8/XVVddpSVLlqi8vFxHjhzRJ598oqSkpHrruPfee/X111/r+PHjeuutt9SxY8dm7yO8DwUUfE5wMIetHWJjY7Vr1y7V1dU1e11LlixReHi4wsPDlZKSor179zpfh4eHq1WrViotLVVycrI6dOigp556SsuWLVNsbKwkqXPnznrzzTf1u9/9Tp06ddIXX3yh1157rdlxAQB8S2xsrAoKClpkXc8++6wzDz388MP6/PPPna9vuOEGtWvXTg6HQzfffLM6deqk7Oxsvfvuu7ryyislSX379tWLL76on/70p+ratatqamr0wgsvtEhs8C78SxQtburUqSorK9OxY8e0Y8cODR06VJIUFham7OxsHTt2TPn5+br55pudy1x33XVas2aNqqqqlJ+fr5EjRzo/W7hwoV544QW9++67On78uNLT03Xfffdp6tSpqq6uVm5ubqOxTJo0qd7nu3bt0rJly5yvv/nmG/Xr10+S9Oc//1nffPONjh49qi+++EKDBw+WJHXv3l01NTX1vkXq37+/Dhw4oFatWkmSHnjgARUUFOjw4cP64IMPXL4aEhYWpj/+8Y8qKSlRRUWF5s+frzZt2kj6vyl3v/nNb1RZWam9e/dq0qRJzmU7deqk3NxcHT16VP/61780a9Ys5zSIdevWSZK++uorVVdXa9y4cc7lGltfQzIzM/X000/rnnvuUXV1tR588MHLnm5hRU1NjWbOnKmSkhIZY/Tuu++quLjYecyMGTNG27Zt0/Lly3X69GllZmaqX79+6t27t1viAeDfwsLCNHfuXJWXl6u8vFxz585VWFiYpOadgxuTmZmpv/zlL5KkVq1a6fjx43ruueckfTtd+uTJk86cs2zZMu3bt09HjhzRunXr1LdvX0lSUlKS9u3bV+9LxdGjR+urr76SJAUFBWnatGkqKirSwYMH9dprr7l8NaR9+/Z66aWXtHfvXpWVlWnWrFnO7Z3PAX/84x91+PBh7dmzp95Mgbi4OOfUulWrVumvf/2rcyr/P//5T0nSkSNHVF1drUGDBjmXa2x9DVm4cKHS0tKc/x4YNmyYW28ZKC4u1ty5c1VRUaFz584pKytLYWFhztxz33336Z133tH69et14sQJ/e53v9OYMWPUrl07t8QD+1BAoUUlJCRoypQpSkxMVPv27TV8+HB9/fXXkqRRo0YpJydHERERys3N1V//+ldJ3yaPd955RytXrlSXLl30yCOPaPHixUpISHCud8KECfr973+v8PBwvfLKK1q8eLGee+45hYeHa9SoUY3Gs27dOt12220KCgpS9+7dFRYWpltvvVWSFB8fr3bt2mnLli2SJIfDof79+6tTp05asmSJXn/9dbVu3Vr79u3T559/rrFjx9aLZ/ny5Tp79qxGjRqlJ554QmPGjNFVV12l9evXa+nSpS6N2+zZs5WQkKD+/fvr2muvVVRUlJ5++mnn5926dVOHDh0UFRWl9PR0zZs3TxEREZKkefPm6cSJE+rWrZvS0tKUlpbmXC45OVmS1K9fP4WHhzuLx0utryGZmZn6wx/+oNdee03h4eH6+9//7tL+NVeXLl2UkJCgbdu2SZKuv/565z8SpG8Lrt27d+v666/3aFwA/MOTTz6pQYMGqX///urXr5+SkpL01FNPOT+/3HNwY9atW6chQ4ZIkhITE1VRUaHbb79dknTrrbdq586dqqqqkiS9//776tWrl7p06aJNmzZp8eLFkqR//etfOnHihPNLSunb3LRkyRJJ0iOPPKLRo0crOTlZPXr0UFVVlebNm+fSuLz88ss6e/asrr32Wg0YMEB33XWXfvaznzk/HzhwoHbu3KnIyEg999xzWrBggfOzJUuW6F//+pc6d+6szMxM/fSnP3V+dn5fIyIiFB4erg0bNjS5voY88MAD9f498PHHH7u0f83Vr18/hYWFqaioSNLFuWnPnj06c+ZMvX/PwH8YGq2l2jXXXGMqKyvNsGHDTKtWrZzvz5gxw6xatcr5uk+fPqampsZIMoMHDzb79u0zQUFBzs+XLFliZsyYYSSZhQsXmuzs7HrbWbhwoZk1a5almL755hszYMAAc88995gXX3zRbNy40fTu3dtMmjTJrFixotHlDh8+bP7jP/7DSDLp6enm448/rrfO2267zUgy7733nnnwwQednwUFBZkTJ06Ynj17XjIuY4y55pprjCRz/Phxc/XVVzs/GzRokNmzZ4+RZJKTk01NTY0JCQlxfl5ZWWkGDhxogoODzZkzZ0xCQoLzs1mzZpn169c3uJ2m1nepeGfMmGEWLVrkfJ2Wltbodlz580lOTjalpaWNft6qVSuzatUq87e//c353ksvvWSeffbZev0++eQTk5aWZvvfARqN5jutuLjYDBs2zBQVFZmUlBTn+3fddZcpLi42UvPPwQ21Nm3amJMnT5pOnTqZadOmmccff9yUlpaaK6+80mRmZprnn3++weU6dOhgjDGmffv2zm0tWLDASDLt2rUzx48fd+aegoICM3ToUOey3bp1M2fOnKm3Hxe22NhYY4wxISEhpkuXLubUqVOmTZs2zs/Hjx9vVq9ebaRvc0BhYaHzs7Zt2xpjjOnatauJiYkxtbW1pm3bts7PFy1a5Mwh393O+c8vtb5LjeWF+ea7uerC7axZs8akp6dbOjYuzHEXtvDwcLNlyxYzffp053sfffSReeihh+r1KysrM8nJybYf67SWbVyBQovavXu3Hn30UWVmZmr//v1aunSpunfvLkmqqKhw9qupqVHbtm0VEhKiHj16qLS0VMYY5+clJSWKiopyvr6cp8add/6bvttvv13r1q3T2rVrlZycrOTkZOcUN0l67LHHVFBQoCNHjqiqqkodOnRQZGSkJOmNN97Qrbfeqm7duun222/XuXPnnFM0YmNj9fzzz6uqqkpVVVU6fPiwgoKC6sV/KVdddZWuvPJKffnll851fPDBB7rqqqucfQ4dOlTv3qOamhq1a9dOV111lUJDQ+uNj5Wxamx93iYoKEiLFi3SmTNnNGXKFOf7x48fV/v27ev1bd++vaqrqz0dIgA/0KNHD5WUlDhfl5SUqEePHs7XLX0OPnXqlL744gslJyc7c9Nnn32m73//+/VyU3BwsJ599lkVFRXp6NGjzhkd53PTkiVLNGbMGIWFhWnMmDHatGmTvvnmG0nf5qa33nrLmVe2b9+uuro6de3a1dKYxMbGKjQ0VPv27XOu48UXX1SXLl2cfb6b10+ePClJateunXr06KHDhw8737M6Lo2tz9u0adNG77zzjjZs2KDZs2c73yc3BQ4KKLS4pUuX6rbbbnM+ZWfOnDmX7L93717FxMQoKCjI+V7Pnj1VXl7ufP3d4qqh15dyvoC67bbbtG7dOq1bt+6iAmrw4MGaOnWqxo0bp44dO6pjx446evSoM6YjR45o5cqVuueeezRhwgTl5OQ4119aWqqHHnrIuVzHjh11xRVX6PPPP7cU38GDB1VTU6Prr7/eufz5aQ1NOXDggGpraxUdHe18LyYmxvLYeLsFCxaoa9euGjt2rM6ePet8f9u2bc571yTpiiuu0DXXXOOc4gcArti7d6/zITXStzlo7969TS7XnHPwunXrNHToUA0YMEAOh0Pr1q3T8OHDlZSU5LxHaMKECUpNTdWdd96pDh06KC4uTpKcuWn79u0qKSlRSkpKvel70re5KSUlpV5uatu2raX9Or/86dOnFRkZ6Vy+Q4cOuuGGG5pcdt++ferUqZPatm3b4Li4ksO9TVhYmN5++22VlZXpoYceqvfZhbkpPj5erVu31q5duzwdJtyMAgotKiEhQXfccYfCwsJ06tQpnTx5UufOnbvkMhs3blRNTY2mTp2qVq1aKTk5WSNHjqxXpFyosrJSV199taWY1q1bpzvuuENt27ZVeXm51q9frxEjRqhz587Ky8uTJIWHh+vs2bPOB0P87ne/u+hbpCVLlmjixIm6++676yWpv/3tb3r88cedN/a2b99ed999t6XYpG8TSVZWlubOneu86tSjRw/dddddTS577tw5vfnmm8rMzFTbtm3Vu3dvTZw4sV6fiooKy2Pl3ARA/wAAIABJREFUTebPn68+ffpo5MiROnXqVL3P3nrrLd1www0aM2aMWrduraefflpbtmzRzp07bYoWgC9bunSpnnrqKUVGRqpz5856+umn9eqrrza5nJVzcGPWrVuniRMnqqCgQLW1tVq7dq1+9rOfqbi4WAcPHpT0bW46ffq0Dh06pCuuuEJ/+MMfLlrPkiVL9Ktf/Uq33367Xn/9def7f/vb3/T73//e+VCjyMjIS94zfKGKigqtXLlSf/rTnxQeHq6goCBdffXVzvuXLuWbb77RF198oczMTIWGhmrQoEH1Hg514MAB1dXV+VxuatWqlZYvX66TJ08qLS3tokJw8eLFGjlypAYPHqwrrrhC//Vf/6U333xTx48ftyliuAsFFFpU69atNXv2bB08eFAVFRXq0qWLHn/88UsuU1tbq5EjRyolJUUHDx7UCy+8oIkTJ17yH8MLFixQ3759VVVVpbfeeuuS6y8sLNTx48edU+6qq6u1Z88effrpp87i7sMPP9QHH3ygXbt2qaSkRKdOnbpoukFubq569eqliooK54MnJOntt9/WnDlzlJOTo6NHjyo/P18pKSmXjOlC55+UtGHDBh09elQfffSR5SfKTZkyRR06dFBFRYUWLVqkpUuX6vTp087PMzMzlZ2draqqKv3kJz9xKS679OzZUw8//LD69++viooK5+9wTJgwQdK3V+3Gjh2r3//+96qqqtLAgQM1fvx4m6MG4Kue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OFBVVVXnHde7d28VFxfr4MGDevDBBzV79mw98cQTZz0G//bwFg0ULjhz587V9OnT7U7Db40fP1579+5V586d9d///d965plnlJWV9b2O9fjjj+vQoUM6dOiQjh49qq+//tqzXVpaqm7dumn+/Plyu906cOCAPvvsMyUnJ9c7xl133aUvvvhChw8f1nvvvaeIiIimOE0AwAXkscceU2FhoTp37qyXXnpJEydO1O9+97vvdazZs2d7atFXX32l48ePe7YXL16shIQEvf/++9q9e7f27dunDz/8UL179653jIcfflg7d+5UXV2d5syZo9DQ0KY4TbQQNFC4oAQG8iN72vk+KWoucXFx2rx5c5Mc65lnnlGnTp3UqVMnTZgwQatXr/ZsX3bZZerYsaMcDof69++vLl26KDc3V3//+9/VoUMHSVLfvn31+uuv695771WPHj105MgRvfrqq02SGwDgu7OzNm3atKlJjjVx4kRPLXr66af11ltvebaHDx+u8PBwFRQUqE+fPurRo4f+9a9/adGiRZ73Dx06VJMmTdKQIUMUFxenH/7wh5o2bVqT5IaWgf8bRZN67LHHVF1drYMHD6qsrEw33nijJCk0NFS5ubk6ePCgSktL1b9/f897LrnkEhUWFqq2tlalpaVKS0vz7Js7d65effVV/f3vf9fhw4eVmZmp0aNH67HHHtOhQ4dUUFDQaC5jx46tt7+8vFz5+fme7e3bt+uKK66QJL344ovavn276urqtHbtWl133XWSpIsuukhHjhyp96nGlVdeqT179ig4OFiSNG7cOG3evFn79+/Xhx9+qJ49e553nl544QXt2rVLdXV12rBhgy699FLP+c6ePVtLly7VwYMHtWLFinrHM8bo/vvvV3l5uZxOpyTplltuUXFxsWpra7Vq1SpdfvnlnvHZ2dlyuVw6ePCgNm3apNtvv92zLzAwUH/4wx+0Z88eVVRU6JZbbjlv3nPnztWYMWM88z9kyJBmvUSzsrJSM2fOVE1Njb755hvl5OQoNDRUffr0kSSNHj1aH3zwgT799FN9+eWX+u1vf6s77rhDHTt2bJZ8ALQ+oaGhmjlzptxut9xut2bOnOn5tOD0pV+PPPKIdu3apR07dmjs2LGe93bp0kUFBQWqq6vTv/71L02fPl2ffvrpOb/fk08+qT/+8Y+SpODgYB0+fFjPPfecJKlt27Y6evSop+bk5+dr586dOnDggFauXKm+fftKkpKTk7Vz5856v1S8/fbbtX79eklSQECAZ/3fu3ev3nrrrfN+Ot+mTRvNmzdPe/fuVW1trf71r3+pe/fukk5djv30009rzZo1qqur0/vvv+853ulLt3/5y19q27ZtWr58uaRz18bGau7pOZg7d67279+vTZs2KSkp6Zx5S9LHH3+swYMH6+WXX9ahQ4eUkJDQrFerOBwO/d///Z9qa2v19ddfa+bMmbrkkkvUpUsXSdKYMWM0Z84cbd68WQcOHND06dPr/dygdTAE0RTRu3dvs337dnPRRRcZSSYuLs788Ic/NFOnTjVHjx41qampJjAw0Dz99NNm9erVRpIJDg42TqfTPP744yYkJMQMHjzYHDx40PTu3dtIMnPnzjUHDhwwP/3pT01AQIBp06aNmTt3rpk+ffp584mPjze1tbUmICDAXHTRReaLL74wVVVVnn379+83AQEBRpIZPXq06dKliwkKCjKPPPKI2blzp2nTpo2RZD7++GPzq1/9ynPc5557zsyePdtIMrfddptxOp3mkksuMUFBQWbKlClm1apV58xr6NChZu3atSYsLMxIMpdccomJiorynO/BgwfN9ddfb0JDQ82LL75oPv30U897jTFm6dKlJiIiwrRt29ZceeWVZteuXSY5OdkEBgaajIwMU1lZaUJDQ40kM2LECHPRRReZgIAAc+edd5rDhw97vtd9991ntmzZYmJiYkxERIRZvny5McaYoKCgc+b/7fmfOnWqmTdvnuff/MxjFBYWmszMTEs/P2PGjKl3rmeLK664whw9etR07tzZSDLvv/++eeyxx+qNOXTokLnqqqts/++BIIiWHZWVlWbIkCFm2rRpZvXq1aZbt24mMjLSrFq1yjz11FNGkhk4cKA5ceKEmTZtmgkODjapqanmyy+/NOHh4UaSWbBggVmwYIFp166dSUxMNNu3bz/vOjZ48GCzYcMGI8n85Cc/MS6XyxQVFXn2lZSUeMaOGzfOdOzY0YSGhpqZM2ea4uJizz6Xy2Vuuukmz3Z+fr7Jzs42ksxDDz1kVq9ebaKjo01oaKh57bXXzPz588+Z1/jx401BQYFp166dCQwMNFdddZXp1KmTkU6t5dXV1ebSSy817du3NwsXLmyw7ufm5pr27dubtm3bnrc2nqvmPvPMM+aTTz4xERERJiYmxmzcuNFTu88V3643Z9aqgQMH1jvG6X97Kz8nZ9a4xiI9Pd3s2LHDs11SUmLuvPNOz3bXrl2NMcZ06dLF9p97osnC9gSIVhI/+tGPzK5du8yQIUNMcHCw5/WpU6eaZcuWebYTExPNkSNHjCRz3XXXmZ07d3oaGUlm/vz5ZurUqUY6tQDm5ubW+z5WGyhJZvv27aZfv35m5MiR5vXXXzdr1qwxffr0MWPHjjWLFi1q9H379+83P/7xj40kk5mZaT7++ON6x7z++uuNJLN48WLzy1/+0rMvICDAfPnll6Znz56NHnvw4MFm69atZsCAAfXO+/S5LViwwLPdoUMH8/XXX5uYmBgjnWqgBg8e7Nn/6quvegr96SgrKzM33HDDWb93cXGxue2224x0qjG87777PPtuvvnmFt1AderUyWzYsMFMmjTJ89pHH31U7xwkmerqajNw4EDb/3sgCKJlx+n/iXa5XCY1NdXz+tChQ01lZaWRTv2P95EjR+qti7t27TIDBgwwgYGB5vjx455f+Eky06dPP28D1bZtW3P06FHTpUsXk52dbR5//HFTVVVlOnToYJ588kkza9ass74vLCzMGGM8v0CaPn26mTNnjpFkOnbsaA4fPuypPZs3bzY33nij571RUVHm+PHj51zfx40bZ1atWmUuv/zyBvsKCwvNM88849lOTEw0X331lQkMDPSs+/Hx8Z7937U2nllzKyoqTEpKimdfVlZWi26goqOjTXV1tRk1apTnNZfLVe8cgoODjTHGxMXF2f5zTzRNcAkfmkxFRYUefvhhPfnkk9q9e7cWLFigiy66SJJUU1PjGXfkyBG1a9dOQUFB+sEPfqCqqioZYzz7t23bpujoaM+2lafvNGblypUaNGiQbrjhBq1cuVIrVqzQwIEDNXDgQK1cudIz7tFHH/V81F5bW6uwsDBFRkZKkt555x395Cc/UVRUlG644QZ98803nks04uLiNGvWLNXW1qq2tlb79+9XQEBAvfy/rbCwUC+//LJeeeUV7d69W6+//ro6dep01vP98ssvtX//fv3gBz846/64uDg9+uijnu9fW1ur2NhYz/h7773Xc3lfbW2tLrvsMs95nZ7707Zt2/a95tgX2rZtqw8++EBFRUV69tlnPa8fPnxYnTt3rje2c+fOOnTokK9TBHCB+sEPflBv/du2bVu9NXffvn06efKkZ/vIkSPq2LGjunXrppCQkHrrqJV6dezYMa1du1YDBw701KZ//vOfuvbaa+vVpsDAQD3zzDNyuVyqq6vTF198IUmeNXz+/Pm64447FBoaqjvuuEPr1q3T9u3bJZ2qDe+9955n7d+yZYtOnjypHj16NJrXvHnztGTJEuXl5cntdmvGjBmeS9W/fW7btm1TaGioJ5dv7z9fbTxXzb2QalNkZKSWLl2qV199VXl5eZ7Xv12bTn9NbWo9aKDQpBYsWKDrr7/ec030jBkzzjl+x44dio2NVUBAgOe1nj17yu12e7bPbK7Otn0upxuo66+/XitXrtTKlSsbNFDXXXedHnvsMd15552KiIhQRESE6urqPDkdOHBAS5cu1ciRI3X33XfXWySrqqp03333ed4XERGh9u3ba/Xq1efM66WXXtLVV1+tvn37qnfv3vqf//kfz77Y2FjP1x06dFCXLl20Y8eOs55/VVWVfv/739f7/h06dFBeXp569uypnJwcPfDAA+ratasiIiJUWlrqOa+dO3fW+15W7t2yQ2hoqN5//31VV1frvvvuq7dv06ZNnvvYJCk+Pl5t2rRReXm5r9MEcIHasWOH4uLiPNs9e/ast+Y2Zs+ePTpx4oRiYmI8r525pp7LypUrdeONN6pfv35yOBxauXKlUlJSlJycrE8++USSdPfddys9PV033XSTwsLC1KtXL0nyrOFbtmzRtm3blJqaqrvvvlvz58/3HL+qqkqpqan1akO7du3OeV5ff/21nnrqKV166aX66U9/qltvvVUZGRlnPbeePXvq+PHj2rt3r+e1b9emxmrj+WruhVKbwsPDtXTpUhUUFOjpp5+ut+/btemKK65QTU2N9u/f7+s00UxooNBkevfurcGDBys0NFTHjh3T0aNH9c0335zzPWvWrNGRI0f02GOPKTg4WAMHDlRaWlq9JuXbdu3apR/+8IeWclq5cqUGDx6sdu3aye1269NPP9WwYcPUtWtXFRcXS5I6deqkr7/+2vNgiN/+9rcNPtWYP3++MjIyNGLEiHpF6rXXXtPjjz/uubG3c+fOGjFixDlzuvrqq5WcnKzg4GB9+eWXOnbsWL15Gj58uK699lqFhIRo+vTpKioqUnV19VmPlZOTowkTJnge7d2+fXsNHz5cHTt2VIcOHWSM0Z49eySdeqjGZZdd5nlvfn6+HnroIUVHRys8PFyTJk2yNKe+FBwcrIULF+ro0aMaM2ZMg+b5zTffVFpamq677jq1b99eTz31lN59910dPnzYpowBXGgWLFigJ554QpGRkeratav+3//7f/rrX/963vd98803evfdd/Xkk0+qXbt26tOnT72G41xWrlypjIwMbd68WSdOnNCKFSv0q1/9SpWVlZ6mpFOnTvrqq6+0b98+tW/fvsH/pEunatOvf/1r3XDDDXr77bc9r7/22mv6/e9/72k+IiMjddttt50zp0GDBumyyy5TYGCgDh48qBMnTtSrTffcc48SExPVrl07PfXUU1q4cGGjNf5ctfF8NTc/P1+PP/64wsPDFR0drQcffNDKlPpUp06dtGTJEq1atUqPP/54g/1/+ctflJmZqcTERIWFhemJJ57QG2+84ftE0WxooNBk2rRpo2effVZ79+5VTU2NunfvftaF5UwnTpxQWlqaUlNTtXfvXr366qvKyMjQ1q1bG33PnDlz1LdvX9XW1uq999475/GdTqcOHz7sueTu0KFD+vzzz7Vq1SrPwr9kyRJ9+OGHKi8v17Zt23Ts2LEGl2EUFBQoISFBNTU12rBhg+f1999/XzNmzFBeXp7q6upUWlqq1NTUc+bUuXNn5eTkqLa2Vtu2bdO+ffv0hz/8wbN//vz5mjp1qvbv36/+/fvrnnvuafRY//73v5WVlaWXX35ZtbW1crlcnif9bNmyRc8//7xWr16tXbt26fLLL9eqVas8783JydGSJUu0fv16rVu3Tu++++4587bDT3/6U6WlpWno0KE6cOCA5+9wnH5i0+bNmzVhwgS9+eab2r17tzp16qT777/f5qwBXEh+97vfae3atdqwYYM2btyodevWWf77QQ888IDCwsJUU1OjefPmacGCBfrqq6/O+75//vOfateunefTps2bN+vYsWOebenU/4Rv27ZNbrdbmzdvVlFRUYPjLFiwQAMHDtTy5cu1b98+z+uzZs1SQUGB54muRUVFGjBgwDlzioqK0sKFC3Xw4EFt2bJFK1eurPeE1Xnz5umNN95QTU2N2rZtq4ceeqjRY52rNp6v5k6bNk3btm1TZWWlli5d2mxPefXGz372MyUnJ2vcuHGeunTo0CHPJ2dLlizRc889p8LCQm3fvl3btm3T1KlTbc4aTSlAp26GAtACzJ07V9XV1frtb39rdyoAgO/o2WefVVRUVKt7ZHVhYaH++te/as6cOXanArQIfAIFAADwPfTp08fzt/eSkpKUmZl53isjAFz4aKBwQYuNja338fnZPkq3w3XXXddoXheCxnI/848dfhezZ88+6/Fmz57dxJkDgO906tRJ7777rr788ku99dZbev7557Vo0aIWWwPuvvvus+ZUWlpqa15WNEe9X7x48VmPd77bDwAu4QMAAAAAi/gECgAAAAAsCj7/kAvH7t27W/QfXAMAfxAXF6fu3bvbnUaLRJ0CAPt5W6daVQO1bds2JSUl2Z0GAPg1h8NhdwotFnUKAOznbZ3iEj4AAAAAsIgGCgAAAAAsooECAAAAAIta1T1QrUJnSaFnbB+XdNCmXAAAFy7qCQA0CxqoliZU0j/O2E61KxEAwAWNegIAzYJL+AAAAADAIhooAAAAALCIBgoAAAAALKKBAgAAAACLaKAAAAAAwCIaKAAAAACwiAYKAAAAACyigQIAAAAAi2igAAAAAMAiGigAAAAAsIgGCgAAAAAsCrY7gQtWZ0mhZ2wfl3TQplwAAAAA+AQN1PcVKukfZ2yn2pUIAAAAAF9pMZfwBQYGat26dfrggw8kSb169VJRUZGcTqfy8vIUEhJic4YAAAAA/F2LaaB+/etfa8uWLZ7tGTNmaObMmUpISFBtba0yMzNtzA4AAAAAWkgDFR0drVtuuUV//vOfPa/deOONWqgF4e8AACAASURBVLhwoSQpNzdXt99+u13pAQD8QExMjJYvX65NmzaptLRUDz30kCQpIiJCS5cuVXl5uZYuXarw8HDPe2bNmiWn06n169erX79+dqUOAPChFtFAvfjii3rsscf0zTffSJK6du2qAwcO6OTJk5Kk6upqRUdH25kiAKCV+/rrr/Xoo4/q0ksv1TXXXKP/+q//UmJioiZNmqSPP/5YvXv31scff6xJkyZJklJTU5WQkKCEhASNHz9es2fPtvkMAAC+YHsDdcstt2j37t1at27d93p/VlaWHA6HHA6HIiMjmzg7AIC/qKmpUXFxsSTp8OHD2rJli6Kjo5Wenq7c3FxJ9a+ISE9P11/+8hdJ0po1axQeHq6oqCh7kgcA+IztT+G79tprddttt2n48OFq27atOnfurFmzZik8PFxBQUE6efKkYmJi5Ha7z/r+nJwc5eTkSJIcDocvUwcAtFJxcXHq16+f1qxZox49eqimpkbSqSarR48ekk5dfl5VVeV5z+mrJU6PBQC0TrZ/AjV58mTFxsYqPj5eo0aN0vLly3XPPfeosLBQI0aMkCSNGTNGixYtsjlTAIA/6NChg9555x09/PDDOnToUIP9xpjvdDyulACA1sX2Bqox2dnZeuSRR+R0OtW1a1fNmTPH7pQAAK1ccHCw3nnnHb355pt67733JEm7du3yXJoXFRWl3bt3S5LcbrdiY2M9723saomcnBwlJSUpKSlJe/fu9cFZAACaU4tqoFauXKm0tDRJUmVlpQYMGKCEhATdeeedOn78uM3ZAQBauzlz5mjLli2aOXOm57WCggKNGTNGUv0rIgoKCpSRkSFJGjBggOrq6rh8DwD8gO33QAEA0BJce+21ysjI0IYNGzwPk5g8ebKeffZZ5efnKzMzU9u2bdOdd94pSVq8eLGGDx8ul8ulI0eOaNy4cXamDwDwERooX+gsKfSM7eOSDtqUCwDgrFatWqWAgICz7rvpppvO+voDDzzQnCkBAFogGihfCJX0jzO2U+1KBAAAAIA3aKAuZHyyBQAAAPgUDdSFjE+2AAAAAJ9qUU/hAwAAAICWjAYKAAAAACziEj4AAC4U3773VeL+VwDwMRooAAAuFN++91Xi/lcA8DEu4QMA/H/27j08qure//iH3EAuIZgowUkMKAGDrQgaAtWIAgpYMfTIURBNQBr0UWw9lQpWz1GrreCpIlUP+uRwECgYKUiJFQoKEUFKHCUEQoJMIGIyEG4SrioY1+8PyvwIZJLJZWbP5f3y2c/j7Fmz92eviXv5nb1mDwAA8BAFFAAAAAB4iAIKAAAAADxEAQUAAAAAHqKAAgAAAAAPUUABAAAAgIcooAAAAADAQxRQAAAAAOAhCigAAAAA8FCE1QEAAIDFoiVFnfP4lKSjFmUBAD9HAQUAQKiLkrTinMfDrQoCAP6PKXwAAAAA4CEKKAAAAADwEAUUAAAAAHiIAgoAAAAAPEQBBQAAAAAeooACAAAAAA9xG3PUdv5vgUj8HggAAADwLxRQqO383wKR+D0QAAAA4F+YwgcAAAAAHqKAAgAAAAAPUUABAAAAgIcooAAAAADAQxRQAAAAAOAhywuohIQErVmzRtu2bVNxcbF+9atfSZI6deqkVatWaceOHVq1apViYmIsTgoACGazZ8/Wvn37tHXrVte6+saimTNnyuFwqKioSH369LEiMgDAApYXUD/88IMef/xxXX311erfv78eeeQRpaSkaOrUqVq9erV69Oih1atXa+rUqVZHBQAEsbffflvDhg2rtc7dWDR8+HAlJycrOTlZEydO1KxZs6yIDACwgOUFVFVVlQoLCyVJx48fV2lpqWw2mzIyMjR37lxJ0ty5czVy5EgrYwIAgty6dev0zTff1FrnbizKyMjQvHnzJEkFBQWKiYlRfHy8bwMDACxheQF1rqSkJPXp00cFBQXq3LmzqqqqJJ0psjp37lzna7Kzs2W322W32xUXF+fLuACAIOduLLLZbKqoqHC1q6yslM1msyQjAMC3/KaAateunZYsWaLHHntMx44du+B5Y0ydr8vJyVFqaqpSU1N18OBBb8cEAIQwd2NRffigDwCCi18UUBEREVqyZIkWLFigpUuXSpL27dvnmg4RHx+v/fv3WxkRABCC3I1FTqdTiYmJrnYJCQlyOp11boMP+gAguPhFATV79myVlpZqxowZrnV5eXnKysqSJGVlZWnZsmVWxQMAhCh3Y1FeXp4yMzMlSWlpaTpy5Ihrqh8AILhFWB3ghhtuUGZmprZs2eK6mcTvfvc7TZs2TYsWLdKECRO0e/du3X333RYnxQWiJUWd8/iUpKMWZQGAZlq4cKFuvvlmxcXFqaKiQs8884zbsWj58uW6/fbbVVZWppMnT2r8+PEWpwcA+IrlBdSnn36qVq1a1fnckCFDfJwGjRIlacU5j4dbFQQAmu/ee++tc727sWjSpEnejAMA8FOWF1DwgfOvFEm+v1rE1SoAAAAEAQqoUHD+lSLJ91eLuFoFAACAIOAXN5EAAAAAgEBAAQUAAAAAHqKAAgAAAAAPUUABAAAAgIcooAAAAADAQ9yF71z+cLtvcMtzAAAA+C0KqHP5w+2+wS3PAQAA4LcooIJIdDUXbgAAAABvooAKIlE/cuEGAAAA8CZuIgEAAAAAHqKAAgAAAAAPMYUPAAB4jjulAghxFFAAAMBz3CkVQIhjCh8AAAAAeIgrUAAAhIDzf+pCYvYdADQFBRQAACHg/J+6kJh9BwBNwRQ+AAAAAPAQV6BaiLemRpy/XaZbAAAAANahgGoh3poacf52mW4BAAAAWIcpfAAAAADgIQooAAAAAPAQU/gAAAhgfv1d2Wj5cTgAaBoKKAAAAphff1c2Sn4cDgCahgIKLYYfaQQAAECwo4BCi+FHGgEAABDsKKBClF/PmW8Mb8yvP3+bLbVdAAAABDwKqBDl13PmG8Mb8+vP32ZLbRcAAgRTsgHAPQqoBnjjSg0DU+O0yHvAVSUA8BhTsgHAPQqoBnjjSg0DU+O0yHvAVSUAAAC0AAooAABgLWYJAAggYVYHqM/QoUO1fft2ORwOTZkyxeo4aEHR1VKcai/RXthuS2wzJEXLS2+QF7YJWCzUx6oWOe+enSVw7nJ+QQUAfsJvr0CFhYXpjTfe0K233qrKykrZ7Xbl5eWptLTU6mhoAd6axhg0N8ewmremPPKjmggyjFUWnHe5WgXAYn5bQPXr109lZWUqLy+XJOXm5iojIyOkBiV/ETS3PD9PY47LbVtv3Ea9rv3XtxtPMzTzfzp83geN2a6P+iAo0ActirHKAt76gMdH53MAgc9vCyibzaaKigrX48rKSqWlpVmYKHQF61WdxhyX27Y+uqJS7248zdDM/+nweR80Zrs+6oOgQB+0KMaqxmmRD64a07YxRdF5/21ED6jnswZvfMDTsi8FAlcAfNDXSpKxOkRd7rrrLg0bNkzZ2dmSpPvuu09paWl69NFHa7XLzs7WxIkTJUk9e/bUl19+ecG24uLidPDgQe+H9gKyW4Ps1gnk/GQ/IykpSZdeemmLbMvfeTJWeTJOuRPIf1PeRt/UjX5xj75xL9T6piXGKeOPS//+/c0//vEP1+OpU6eaqVOnNmlbdrvd8uNp6kJ2sodS9kDPT/bQW1pyrOJ9oW/oF/qGvgmMxW/vwme325WcnKyuXbsqMjJSo0ePVl5entWxAABwYawCgNDjt9+Bqqmp0aRJk7Ry5UqFh4fr//7v/1RSUmJ1LAAAXBirACD0hEt61uoQ7pSVlen111/Xn//8Z61bt65Z29q0aVMLpfI9sluD7NYJ5PxkDz0tOVbVhffFPfqmbvSLe/SNe/SN5/z2JhIAAAAA4G/89jtQAAAAAOBvAq6Amj17tvbt26etW7e6bTNz5kw5HA4VFRWpT58+rvWZmZnasWOHduzYoczMTNf6vn37asuWLXI4HJo5c2ZAZc/Pz9f27dtVWFiowsJCXXLJJX6XfcWKFTp8+LDef//9Wu27du2qjRs3yuFwKDc3V5GRkQGTfc6cOdq1a5er33v37u1X2Xv37q0NGzaouLhYRUVFuvvuu13t/b3f68vuq35vTv7LL79cX3zxhQoLC1VcXKwHH3zQ1d7fzzX1ZffVuSZUeGM8CBbeOHcEg+b8zUhShw4dVFFRoddee83bUX2uOX2TmJiolStXqqSkRNu2bVNSUpIvIvtMc/pm+vTpKi4uVklJiVfHrEBl+a0AG7Okp6ebPn36mK1bt9b5/PDhw83y5cuNJJOWlmY2btxoJJlOnTqZnTt3mk6dOpmYmBizc+dOExMTYySZgoICk5aWZiSZ5cuXm2HDhgVM9vz8fHPdddf5bb9LMoMGDTJ33HGHef/992u95t133zX33HOPkWRmzZplHnrooYDJPmfOHHPXXXf5bb8nJyeb7t27G0mmS5cuZs+ePaZjx44B0e/1ZfdVvzcnf2RkpImKijKSTLt27Ux5ebnp0qWLkfz/XFNfdl+da0Jl8cZ4ECyLN84dwbA0ZyyTZF599VWzYMEC89prr1l+LP7UN/n5+WbIkCFGOnPeu+iiiyw/Hn/omwEDBpj169ebsLAwExYWZjZs2GAGDhxo+fH4yxJwV6DWrVunb775xu3zGRkZmjdvniSpoKBAMTExio+P19ChQ/Xhhx/q8OHDqq6u1ocffqhhw4YpPj5e0dHRKigokCTNmzdPI0eODIjsvtTU7JK0Zs0aHTt27ILXDBo0SIsXL5YkzZ071+/6XXKf3Veamt3hcKisrEyStHfvXu3fv991xcDf+72+7L7U1PynT5/WqVOnJEmtW7dWWNiZ02wgnGvcZUfLC+TxwNsC/dzhLc0Zy/r27avOnTtr1apVPsnqa03tm5SUFEVEROijjz6SJJ04cULffvutTzL7SlP7xhijNm3aKCoqSq1bt1ZkZKT27dvnq9h+L+hGR5vNpoqKCtfjyspK2Wy2etdXVlZesN4Kjc1+1pw5c1RYWKinn37ap3nP1VDG88XGxqq6ulo1NTUetfemxmY/6w9/+IOKior0yiuvKCoqypsR3fIke2pqqqKiorRz586A6/dzs5/lD/0u1Z8/ISFBRUVFqqio0PTp07V3796AONdIdWc/yx/ONaGiqeNBKGjquSPYueuXVq1a6eWXX9bkyZMtTGctd33To0cPVVdXa8mSJdq0aZNeeumlkPvgyF3fbNy4Ufn5+dq7d6/27t2rlStXavv27RYm9S+h9VcShMaOHatrrrlG6enpSk9P1/333291pJDw5JNP6qqrrlJqaqouvvhiTZkyxepIdYqPj9f8+fM1fvx4GWOsjtModWUPlH6vrKxU79691b17d2VlZenSSy+1OpLH3GXnXINAEcjnPW94+OGHtXz5cjmdTquj+J2IiAilp6dr8uTJSk1N1RVXXKFx48ZZHcsvXHnllUpJSVFCQoJsNpsGDRqkG2+80epYfiPoCiin06nExETX44SEBDmdznrXJyQkXLDeCo3NLkl79uyRJB0/flwLFy5Uv379fBv6X+rLWJdDhw4pJiZG4eHhHrX3psZml6SqqipJ0qlTpzRnzhy/7PcOHTrogw8+0FNPPeWaNhYo/V5Xdsl/+l3y7O9m7969Ki4uVnp6ekCca851bnbJf841oaIp40GoaMq5IxS465cBAwZo0qRJKi8v15/+9CdlZmbqxRdftDCp77nrm8rKSm3evFnl5eWqqanR3/72N/Xt29fCpL7nrm9+8YtfaOPGjTpx4oROnDihFStWaMCAARYm9S9BV0Dl5eW57kqUlpamI0eOqKqqSitXrtRtt92mmJgYxcTE6LbbbtPKlStVVVWlo0ePKi0tTdKZuxstW7YsILKHh4crNjZW0plPUe644w4VFxf7Vfb65Ofna9SoUZKkrKwsv+v3+pydVy5JI0eO9Lt+j4yM1NKlSzVv3jwtWbKk1mv8vd/ry+4v/S65z2+z2dSmTRtJUkxMjG688UZ9+eWXAXGucZfdn841oaKx40Eoacq5IxS465f77rtPSUlJ6tatmyZPnqx58+bpySeftDitb7nrG7vdrpiYGMXFxUk68x3hkpISK6P6nLu++frrrzVw4ECFh4crIiJCAwcOVGlpqcVp/Yvld7JozLJw4UKzZ88ec+rUKVNRUWEeeOAB8+CDD5oHH3zQ1eb11183ZWVlZsuWLbXuGjV+/HjjcDiMw+Ew48aNc62/7rrrzNatW01ZWZlX707T0tnbtm1rPv/8c1NUVGSKi4vNq6++asLCwvwu+yeffGL2799vTp48aSoqKsxtt91mJJlu3bqZgoIC43A4zKJFi1x3/wqE7KtXrzZbtmwxW7duNfPnzzft2rXzq+xjx441p06dMoWFha6ld+/eAdHv9WX3Vb83J/+QIUNMUVGR2bx5sykqKjLZ2dmu9v5+rnGX3ZfnmlBZvDGWBcvijXNHMCzN+Zs5u2RlZQXlXfia0zdnz3tbtmwxc+bMMZGRkZYfjz/0TVhYmHnzzTdNSUmJ2bZtm3n55ZctPxZ/Wlr9618AAAAAAA0Iuil8AAAAAOAtlhRQzf01bQAAvIlxCgDgjiUF1Ntvv13vD/8NHz5cycnJSk5O1sSJEzVr1iwfpgMAhDrGKQCAO5YUUM35NW0AALyNcQoA4I5ffgeKX1oHAPgzxikACF0RVgdoruzsbE2cOFGS1LNnT3355ZcWJ0LIaMw9LL1xv0tv7d8bba3ef2PaBuu9SX3495qUlKRLL7206RsIMoxTFgrGcxQQrAJonPLLAqoxv7Sek5OjnJwcSZLdbldqaqpPMgKSGvcfutX791bWYPufE2+9V/7AR3+vdru9eRsIAIxTAcQb/937w7kXCEYBMk755RQ+d7+KDACAP2CcAoDQZckVqIULF+rmm29WXFycKioq9MwzzygyMlKS9NZbb2n58uW6/fbbVVZWppMnT2r8+PFWxAQAhCjGKQCAO5YUUPfee2+DbSZNmuSDJLhAa0nfe6EtAAQQxikAgDt++R0oWOh7MV8bAAAAcMMvvwMFAAACXGsvtQUAi3EFCgAAtDxmNAAIUlyB8gVPP1njEzgAAADAr1FA+cLZT+EaWrghAwAgFDHdD0AAYQofAACwFtP9AAQQrkDB+/hkEQAAAEGCK1DwPj5ZBAAAQJDgChQAAKGOmQIA4DGuQAEAEOoaM1OgjTeDAID/4wqUP+ETQACAv/P0zrLewvgHwGJcgfInfFcIAFCf1vL8Jy8a0zaQMFYCsBhXoJqKT8AAAL7m6dUfb14BAoAQZ1kBNXToUG3fvl0Oh0NTpky54PnExEStWbNGmzZtUlFRkYYPH25BynowiAFAUGOcAgC44+nptcWWsLAwU1ZWZrp162YiIyPN5s2bTUpKSq02b731lnnooYeMJJOSkmLKy8sb3K7dbm9ettaNbO/pP562bew2vbV4I4On/zTmPWjs+xUofWXl32BTsnpj/1a2tfpvKgj+Xpt9LvaDxW/Hqca+j1b/txRIWf3hPWBhCfXFR/+9NPdcbMkVqH79+qmsrEzl5eU6ffq0cnNzlZGRUauNMUbR0dGSpI4dO2rPnj3eDxasn9YF0nTDxrwHwTi3H4Bf8NtxCgBgOUtuImGz2VRRUeF6XFlZqbS0tFptnn32Wa1atUqPPvqo2rVrpyFDhtS5rezsbE2cOFGSFBcX573QgYwv3HouWL90DaBRGKcAAO747U0kxowZo7fffluJiYm6/fbbNX/+fLVqdeH/3efk5Cg1NVWpqak6ePCgBUkRVIL1KiSAFsc4BQChyZICyul0KjEx0fU4ISFBTqezVpsJEyZo0aJFkqSNGzeqTZs2fHLnbwJpaiAANALjFADAHUsKKLvdruTkZHXt2lWRkZEaPXq08vLyarX5+uuvNXjwYEnSVVddpTZt2ujAgQNWxIU7Vv+YIgB4CeMUAMAdSwqompoaTZo0SStXrlRpaakWLVqkkpISPffccxoxYoQk6fHHH1d2drY2b96sd955R+PGjbMiKgAgBDFOAQDcaaUgukZgt9uVmpravI005mYLLd22sdtsjEA6LqtveEHWls/gzb8Bb/y9Bisf/b22yLk4SAX8ONWYtlbvvzFt/WVMBUJdgIxTfnsTCaBF8X0tAAAAtAAKqEBFQdA4fF8LAAAALcCS34FCC+C3nQAAAACf4woUAAAAAHiIAgoAAAAAPEQBBQAAAAAeooACAAAAAA9RQAEAAACAhyigELi4lbt30K8AAABucRtzBC5u5e4d9CsAAIBbXIECAAAAAA9RQAEAAACAhywroIYOHart27fL4XBoypQpdbb593//d23btk3FxcVasGCBjxMCAEIZ4xQAwB3j6yUsLMyUlZWZbt26mcjISLN582aTkpJSq0337t3Npk2bTExMjJFkLrnkkga3a7fbm5/P03+80dbq/XNc3t2/Nxb61TtZg3VpTF81Y2mRc7HFC+NUC7S1ev+NzeoP7wELS6gvPvrvpbnnYkuuQPXr109lZWUqLy/X6dOnlZubq4yMjFptsrOz9cYbb6i6ulqSdODAASuiAgBCEOMUAMAdSwoom82miooK1+PKykrZbLZabXr06KEePXpo/fr1+uc//6mhQ4f6OiYAIEQxTgEA3PHb25hHREQoOTlZN998sxISEvTJJ5/opz/9qY4cOVKrXXZ2tiZOnChJiouLsyIqACAEMU4FkdY68xMOAOABS65AOZ1OJSYmuh4nJCTI6XTWalNZWam8vDz98MMP+uqrr7Rjxw4lJydfsK2cnBylpqYqNTVVBw8e9Hp2AEDwY5wKMWd//86TBUDIs6SAstvtSk5OVteuXRUZGanRo0crLy+vVpu//e1vuvnmmyVJsbGx6tGjh3bt2mVBWgBAqGGcAgC4Y0kBVVNTo0mTJmnlypUqLS3VokWLVFJSoueee04jRoyQJK1cuVKHDh3Stm3blJ+fr9/+9rf65ptvrIgLAAgxjFMAAHdaKYguSNvtdqWmpjZvI572RmN6ztO23timP7S1ev+NaevN/XsD/eqdrMHKR3+vLXIuDlIBP041pq3V+29MW6v3f7YtEOoCZJyy7Id0AQAAACDQUEABAAAAgIcooAAAAADAQxRQAAAAAOAhCigAAAAA8BAFFAAAAAB4iAIKAAAAADxEAQUAAAAAHqKAAgAAAAAPUUABAAAAgIcooAAAAADAQxRQAAAAAOAhywqooUOHavv27XI4HJoyZYrbdv/2b/8mY4yuu+46H6YDAIQ6xikAQF0sKaDCwsL0xhtvaPjw4erVq5fGjBmjlJSUC9q1b99ev/71r7Vx40YLUgIAQhXjFADAHUsKqH79+qmsrEzl5eU6ffq0cnNzlZGRcUG7559/XtOnT9d3331nQUoAQKhinAIAuGNJAWWz2VRRUeF6XFlZKZvNVqtNnz59lJiYqOXLl/s6HgAgxDFOAQDcibA6QF1atWqlV155RePGjWuwbXZ2tiZOnChJiouL83IyAAAYpwAglFlyBcrpdCoxMdH1OCEhQU6n0/W4Q4cO+slPfqKPP/5Y5eXl6t+/v/Ly8ur8gm5OTo5SU1OVmpqqgwcP+iQ/ACC4MU4BANyxpICy2+1KTk5W165dFRkZqdGjRysvL8/1/NGjR3XJJZeoW7du6tatmzZu3Kg777xTX3zxhRVxAQAhhnEKAOCOJQVUTU2NJk2apJUrV6q0tFSLFi1SSUmJnnvuOY0YMcKKSAAAuDBOAQDcaSXJWB2ipdjtdqWmpjZvI572RmN6ztO23timP7S1ev+NaevN/XsD/eqdrMHKR3+vLXIuDlIBP041pq3V+29MW6v3f7YtEOoCZJyy7Id0AQAAACDQUEABAAAAgIcooAAAAADAQxRQAAAAAOAhCigAAAAA8BAFFAAAAAB4iAIKAAAAADxEAQUAAAAAHqKAAgAAAAAPUUABAAAAgIcooAAAAADAQxRQAAAAAOAhCigAAAAA8JBlBdTQoUO1fft2ORwOTZky5YLn/+M//kPbtm1TUVGRPvroI11++eUWpAQAhCrGKQBAXSwpoMLCwvTGG29o+PDh6tWrl8aMGaOUlJRabQoLC3X99derd+/eWrx4sV566SUrogIAQhDjFADAHUsKqH79+qmsrEzl5eU6ffq0cnNzlZGRUavNxx9/rG+//VaStHHjRiUkJFgRFQAQghinAADuWFJA2Ww2VVRUuB5XVlbKZrO5bT9hwgStWLGizueys7Nlt9tlt9sVFxfX4lkBAKGHcQoA4E6E1QEaMnbsWF1//fUaOHBgnc/n5OQoJydHkmS3230ZDQAAxikACDGWFFBOp1OJiYmuxwkJCXI6nRe0Gzx4sJ566ikNHDhQp06d8mVEAEAIY5wCALhjyRQ+u92u5ORkde3aVZGRkRo9erTy8vJqtbn22mv11ltv6c4779SBAwesiAkACFGMUwAAdywpoGpqajRp0iStXLlSpaWlWrRokUpKSvTcc89pxIgRkqT//u//Vvv27fXXv/5VhYWFWrZsmRVRAQAhiHEKAOBOK0nG6hAtxW63KzU1tXkb8bQ3GtNznrb1xjb9oa3V+29MW2/u3xvoV+9kDVY++nttkXNxkAr4caoxba3ef2PaWr3/s22BUBcg45RlP6QLAAAAAIGGAgoAAAAAPEQBBQAAAAAeooACAAAAAA9RQAEAAACAhyigAAAAAMBDFFAAAAAA4CEKKAAAAADwEAUUAAAAAHiIAgoAAAAAPEQBBQAAAAAeooACAAAAAA9ZVkANHTpU27dvl8Ph0JQpUy54PioqSrm5uXI4HNq4caOSkpIsSAkACFWMUwCAulhSQIWFhemNN97Q8OHD1atXL40ZM0YpKSm12kyYMEGHDx9WcnKyZsyYoenTp1sRFQAQghinAADuWFJA9evXT2VlZSovL9fp06eVm5urjIyMWm0yMjI0d+5ccJJ8dwAAIABJREFUSdLixYs1ePBgK6ICAEIQ4xQAwJ1Wkoyvd3rXXXdp2LBhys7OliTdd999SktL06OPPupqs3XrVg0bNkxOp1OSVFZWprS0NB06dKjWtrKzszVx4kRJUs+ePfXll1/Wuc+4uDgdPHjQG4fjE4GeXwr8Ywj0/FLgHwP5refJMSQlJenSSy/1USLvsGKccicY/m68jT6qH/3TMPqoYcHUR80dpyJaMIslcnJylJOT02A7u92u1NRUHyTyjkDPLwX+MQR6finwj4H81guGY/A1T8cpd+jzhtFH9aN/GkYfNYw++v8smcLndDqVmJjoepyQkOD6BK+uNuHh4erYseMFn+oBAOANjFMAAHcsKaDsdruSk5PVtWtXRUZGavTo0crLy6vVJi8vT1lZWZKkUaNGac2aNVZEBQCEIMYpAIA74ZKe9fVOjTFyOBxasGCBHn30Uf3lL3/Re++9p+eee04dOnTQjh07tGXLFo0dO1Z//OMfde211+qhhx5SdXV1s/a7adOmFjoCawR6finwjyHQ80uBfwzkt14wHENDrBqn3AmFPm8u+qh+9E/D6KOG0UdnWHITCQAAAAAIRJb9kC4AAAAABBoKKAAAAADwUEAWULNnz9a+ffu0detWt21mzpwph8OhoqIi9enTx7U+MzNTO3bs0I4dO5SZmela37dvX23ZskUOh0MzZ84MuPz5+fnavn27CgsLVVhYqEsuucRvj2HFihU6fPiw3n///Vrtu3btqo0bN8rhcCg3N1eRkZEBlX/OnDnatWuX6z3o3bu33+Xv3bu3NmzYoOLiYhUVFenuu+92tfdl/3vrGALhPbj88sv1xRdfqLCwUMXFxXrwwQdd7QPhPFRffl+fhwKdN8aCYOON80Qwac7fkCR16NBBFRUVeu2117wd1TLN6aPExEStXLlSJSUl2rZtm5KSknwR2eea00fTp09XcXGxSkpKvD5u+RsTaEt6errp06eP2bp1a53PDx8+3CxfvtxIMmlpaWbjxo1GkunUqZPZuXOn6dSpk4mJiTE7d+40MTExRpIpKCgwaWlpRpJZvny5GTZsWEDlz8/PN9ddd53fvweSzKBBg8wdd9xh3n///Vqveffdd80999xjJJlZs2aZhx56KKDyz5kzx9x1111+3f/Jycmme/fuRpLp0qWL2bNnj+nYsaPP+99bxxAI70FkZKSJiooykky7du1MeXm56dKli5EC4zxUX35fn4cCffHGWBBsizfOE8G0NGcsk2ReffVVs2DBAvPaa69Zfiz+2Ef5+flmyJAhRjpzvrvooossPx5/6qMBAwaY9evXm7CwMBMWFmY2bNhgBg4caPnx+GIJyCtQ69at0zfffOP2+YyMDM2bN0+SVFBQoJiYGMXHx2vo0KH68MMPdfjwYVVXV+vDDz/UsGHDFB8fr+joaBUUFEiS5s2bp5EjRwZMfis09Rgkac2aNTp27NgFrxk0aJAWL14sSZo7d65fvgeS+/y+1NT8DodDZWVlkqS9e/dq//79rqsEvux/bx2DLzU1/+nTp3Xq1ClJUuvWrRUWduY0HCjnIXf50XjBMBZ4W6CfJ7ytOWNZ37591blzZ61atconWa3S1D5KSUlRRESEPvroI0nSiRMn9O233/oks681tY+MMWrTpo2ioqLUunVrRUZGat++fb6KbamgHPlsNpsqKipcjysrK2Wz2epdX1lZecF6qzQ2/1lz5sxRYWGhnn76aZ/mrUtDWc8XGxur6upq1dTUeNTe2xqb/6w//OEPKioq0iuvvKKoqChvRqyXJ/lTU1MVFRWlnTt3+l3/S40/hrMC4T1ISEhQUVGRKioqNH36dO3duzdgzkNS3fnP8qfzUKBr6lgQSpp6nggV7vqnVatWevnllzV58mQL0/kHd33Uo0cPVVdXa8mSJdq0aZNeeumlkP3AyF0fbdy4Ufn5+dq7d6/27t2rlStXavv27RYm9Z3Q/EsIQmPHjtU111yj9PR0paen6/7777c6Ush58sknddVVVyk1NVUXX3yxpkyZYnUkt+Lj4zV//nyNHz9exhir4zRJXccQKO9BZWWlevfure7duysrK0uXXnqp1ZEaxV1+zkPwN8FwrvOGhx9+WMuXL5fT6bQ6it+KiIhQenq6Jk+erNTUVF1xxRUaN26c1bH8ypVXXqmUlBQlJCTIZrNp0KBBuvHGG62O5RNBWUA5nU4lJia6HickJMjpdNa7PiEh4YL1Vmlsfknas2ePJOn48eNauHCh+vXr59vQ56kva10OHTqkmJgYhYeHe9Te2xqbX5KqqqokSadOndKcOXMsfQ/qy9+hQwd98MEHeuqpp1zTxfyt/6XGH4MUOO/BWXv37lVxcbHS09MD5jx0rnPzS/53Hgp0TRkLQk1TzhOhxF3/DBgwQJMmTVJ5ebn+9Kc/KTMzUy+++KKFSa3jro8qKyu1efNmlZeXq6amRn/729/Ut29fC5Nax10f/eIXv9DGjRt14sQJnThxQitWrNCAAQMsTOo7QVlA5eXlue5KlJaWpiNHjqiqqkorV67UbbfdppiYGMXExOi2227TypUrVVVVpaNHjyotLU3SmbsbLVu2LGDyh4eHKzY2VtKZT0zuuOMOFRcXW5Zfcn8M9cnPz9eoUaMkSVlZWX75HtTn7LxySRo5cqSl74G7/JGRkVq6dKnmzZunJUuW1HqNP/W/1LRjCIT3wGazqU2bNpKkmJgY3Xjjjfryyy8D5jzkLr8/nocCXWPHglDUlPNEKHHXP/fdd5+SkpLUrVs3TZ48WfPmzdOTTz5pcVpruOsju92umJgYxcXFSTrzPeGSkhIro1rGXR99/fXXGjhwoMLDwxUREaGBAweqtLTU4rS+Y/mdLBq7LFy40OzZs8ecOnXKVFRUmAceeMA8+OCD5sEHH3S1ef31101ZWZnZsmVLrbtCjR8/3jgcDuNwOMy4ceNc66+77jqzdetWU1ZW5vW70bR0/rZt25rPP//cFBUVmeLiYvPqq6+asLAwvz2GTz75xOzfv9+cPHnSVFRUmNtuu81IMt26dTMFBQXG4XCYRYsWue70FSj5V69ebbZs2WK2bt1q5s+fb9q1a+d3+ceOHWtOnTplCgsLXUvv3r193v/eOoZAeA+GDBliioqKzObNm01RUZHJzs52tQ+E85C7/FachwJ98cZYFmyLN84TwbQ052/o7JKVlRXUd+FrTh+dPd9t2bLFzJkzx0RGRlp+PP7UR2FhYebNN980JSUlZtu2bebll1+2/Fh8tbT6178AAAAAABoQlFP4AAAAAMAbKKAAAAAAwEMUUAAAAADgIQooAAAAAPAQBRQAAAAAeIgCCgAAAAA8RAEFAAAAAB6igAIAAAAAD1FAAQAAAICHKKAAAAAAwEMUUAAAAADgIQooAAAAAPAQBRQAAAAAeIgCCgAAAAA8RAEFAAAAAB6igAIAAGiG8vJyDR482OoYAHyEAgoB5ZlnntH8+fOtjgEAAJooJSVFdrtd33zzjb755ht9+OGHSklJcT0/efJkbd26VUePHtWuXbs0efLkereXmJioY8eOuRZjjI4fP+56fOONNza4zaSkJK1Zs0YnTpxQaWkpBTHqRQGFkDZnzhw9//zzVsfwmtjYWK1fv14HDx7U4cOHtWHDBv3sZz9zPZ+ZmanPP/9cR44cUUVFhaZPn67w8PB6t3nuIFVTU6OTJ0+6Ht97770NbrNTp0567733dPz4cX311VcaM2aM144fAOB9dY0b9Y0le/bs0ahRo3TxxRcrLi5OeXl5ys3NdT3fqlUrZWZmqlOnTho2bJgmTZqke+65x+32Kioq1KFDB9ciSb1793Y9Xr9+fYPbfOedd1RYWKjY2Fg99dRTWrx4seLi4prSHQgRhoUlUJZnnnnGzJ8/v0W2FRYWZubMmWOef/55y4/L0yU8PNyjdWeX1q1bmx49ephWrVoZSSYjI8McOnTI9ZqHHnrI3HjjjSYyMtJcdtll5vPPPzdTpkzxOE95ebkZPHhwrXUNbXPhwoUmNzfXtGvXztxwww2murra9OrVy/K+ZWFhYWnqcvZcGBUVZWbMmGGcTqdxOp1mxowZJioqykgyAwcONBUVFeY3v/mN2bdvn9mzZ48ZN26caxsXX3yxycvLM0eOHDGfffaZef755826desa3HevXr3MqlWrzKFDh0xVVZV58sknjaQLxrez+69vW+PGjTN5eXmuxzt27DCLFi1yPf76669N7969jSRjjDEPP/yw2bFjh9m1a5dr+0888YTZu3evmTdvnkd9Fx4ebh5++GFz4sQJt21mzpxp/vznP3v8fhhjzJVXXllvm3O3mZycbL777jvTvn171/OffPKJefDBBy3/22Lxz4UrUPBbTzzxhCorK3X06FFt375dgwYNkiRFRUVp7ty5Onr0qIqLi3Xddde5XnPVVVcpPz9fhw8fVnFxsUaMGOF6bs6cOfqf//kfffDBBzp+/LgmTJigsWPH6oknntCxY8eUl5dXb56EhAQtWbJE+/fv18GDB/Xaa69JunBaYVJSkowx9X76dvPNN2vLli2ux6tWrdJnn33mevzJJ58oIyND0pm59U888YSKiop04sQJXXnllTLG6IEHHtDu3bu1Zs0at/v5/vvvtWPHDhlj1KpVK9XU1Ojiiy/WxRdfLEl68803tX79ep0+fVp79uzRggULdMMNN9TbDw2pb5tt27bVXXfdpf/8z//UiRMn9OmnnyovL0/3339/s/YJAP7gqaeeUv/+/XXttdeqd+/e6tevn55++mnX8/Hx8erYsaNsNpsmTJigN954QzExMZKkN954QydOnFB8fLyysrKUlZXV4P7at2+vjz76SP/4xz902WWXqXv37lq9enWT869du1bp6elq1aqVunTpoqioKA0YMECS1K1bN7Vv377W2DVy5EilpaWpV69eruO7+OKLlZSUpIkTJza4v8OHD+u7777Ta6+9pj/+8Y9u26Wnp2vbtm1NPq6Gtnn11Vdr165dOn78uOv5oqIiXX311S26TwQPCij4pR49emjSpElKTU1VdHS0hg4dqq+++kqSdOeddyo3N1cxMTHKy8vT66+/LkmKiIjQ+++/r1WrVunSSy/Vo48+qgULFqhHjx6u7d577736wx/+oA4dOmjevHlasGCBXnrpJXXo0EF33nmn2zxhYWH6+9//rt27d6tr166y2Wy1phs01saNG5WcnKzY2FhFRETommuu0WWXXab27durTZs2uv7667Vu3TpX+zFjxujnP/+5YmJi9MMPP0iSBg4cqJSUFA0dOrTB/RUVFem7777T+++/r5ycHB04cKDOdjfddFOLD1LnbrNHjx764Ycf5HA4amVjkAIQDMaOHavf//73OnDggA4ePKjnnnuu1gdEp0+f1u9//3v98MMPWrFihY4fP66ePXsqLCxMd911l5555hl9++23Ki0t1dy5cxvc3x133KGqqiq98sor+v7773X8+PFaH8Y1Vnl5uY4dO6Zrr71WN910k1auXKk9e/aoZ8+eGjhwoNatWydjjKv9iy++6CqCJOnHH3/UM888o1OnTrnW1adTp07q2LGjJk2apMLCwjrbPPvsswoLC9OcOXOafFwNbbN9+/Y6cuRIrTZHjhxxTQcEzhdhdQCgLjU1NWrdurV69eqlAwcOaPfu3a7n1q9frxUrVkiS5s+fr8cee0yS1L9/f7Vv317Tpk2TMUb5+fn6+9//rjFjxui5556TJC1btkwbNmyQdObqjKf69eunyy67TL/97W9VU1MjSfr000+bfHzfffed7Ha7brrpJu3Zs0dFRUWqrq7WDTfcoO+//14Oh0PffPONq/2f//xnVVZW1trGs88+q5MnT3q0v969e6t169b6xS9+oaioqDrbjB8/Xtdff71++ctfNvm4Gtpm+/btdfTo0VptGKQABIvLLrus1ni1e/duXXbZZa7Hhw4dco0hknTy5Em1b99el1xyiSIjI1VRUeF67tx/dycxMVE7d+5sofRnrF27VjfffLO6d++utWvXqrq6WgMHDtSAAQO0du3aWm3Pz3jgwIFGja3SmT548803deDAAaWkpNT6gO+RRx5RZmam0tPTderUqaYf1Dnq2ubx48cVHR1dq110dLSOHTvWIvtE8OEKFPzSzp079dhjj+nZZ5/V/v379c4776hLly6SpKqqKle7kydP6qKLLlJ4eLguu+wyVVRU1Pp0bPfu3bLZbK7HngxIdUlMTNTu3btrDXzNdXaQuummm7R27Vp9/PHHGjhwoAYOHNjgIOVuXX2+//575ebmaurUqbrmmmtqPZeRkaEXX3xRw4cP16FDhxp/MHWoa5sMUgCC2Z49e5SUlOR6fPnll2vPnj0Nvu7AgQM6ffq0EhISXOsSExMbfF1FRYWuuOKKOp87ceKE2rZt63ocHx/f4Pak/z82paena+3atVq7dq3bsenc8baux54KCwtT27Zta43X48eP19SpUzV48GA5nc4mbfd87ra5bds2XXHFFWrfvr1rXe/evVt8RgaCBwUU/NY777yj9PR013eKpk+fXm/7PXv2KDExUa1atXKtu/zyy2udJJt6sq+oqNDll19e5/eamjtInS2gGjNINSb7+SIjI2sNuEOHDlVOTo5GjBih4uLiJm3zfO62uWPHDkVERKh79+6udQxSAILFO++8o6efflpxcXGKjY3Vf/3Xf+kvf/lLg6/78ccf9d577+nZZ5/VRRddpJ49eyozM7PB1/39739Xly5d9Otf/1pRUVFq3769+vXrJ0navHmzbr/9dnXq1EmdO3d2zdZoyNq1a3XLLbfooosuktPp1Lp16zRs2DDFxsa6nWbXWEOGDNG1116rsLAwdejQQa+88ooOHz6s0tJSSWem2//xj3/UrbfeqvLy8hbZZ33bdDgc2rx5s5555hm1bt1aI0eO1DXXXKMlS5a0yL4RfCig4Jd69OihW265RVFRUfruu+/07bff6scff6z3NQUFBTp58qSeeOIJRUREaODAgRoxYkS931Xat2+f20/vzvXZZ59p7969mjZtmtq2bavWrVu7bge+efNm3XTTTUpMTFR0dLSefPJJj45xw4YN6tmzp/r166fPPvtMJSUlSkpKUlpamj755BOPttGQtLQ03XDDDYqMjFSbNm30xBNPqHPnziooKJAk3XLLLVqwYIHuuusu2e32Ftlnfds8efKk3nvvPf3+979X27Zt9bOf/UwZGRn8theAoPDCCy/o888/15YtW7R161Zt2rRJL7zwgkevnTRpkjp27KiqqirNnz9f77zzToPT4Y4fP65bb71VI0aMUFVVlRwOh2655RZJZ6a4FxUV6auvvtKqVav07rvvepTD4XDo+PHjru/hHjt2TLt27dKnn37a4DjsqZiYGL3zzjs6cuSIdu7cqSuvvFLDhg1zHe8LL7yg2NhY2e12189kzJo1q1n7bGibo0eP1vXXX6/Dhw9r2rRpGjVqlA4ePNisfSK4WX4rQBaW85ef/vSnpqCgwBw9etQc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c8rOztbQoUMleW+f98a2eNv27dv1zTffuHw+MTFRS5culSRlZGQoODhYYWFhls99nt4Oq1zvdkjS5s2bK71vX2bF/uGJ7bBKk0mgwsPDVVRU5HxcXFxc6bC5u+Li4hQUFKR9+/Y5l73++uvKysrS22+/raCgoHqJ90p1jb1Fixay2WzauXOn8406JCREpaWlqqiouK423VVf/T569GitWLGi0jJf6/eJEydq3bp11b42PDxcxcXFbrdpRexXagjj/erYrRzv9RH/Zb485n/2s5/J4XDozTff1DPPPFPta+vrPQDXcqdvs7Ky9Nhjj0mSHn30UbVp00bt27dXenq6tmzZoq+//lpff/211q9fr/z8fOfrFi9erMzMTP3qV7/y6e3IysrS0KFDdcMNNygkJET33XefIiMjvbrPe3pbLvP0/l8btd3fvTX31db1vm95c/9wR23fZ63aP2pyvfOFFftGk0mg6kNYWJiWLVumCRMmOD91nTFjhm677TbFxcWpffv2Pnl+f1RUlOLi4jR27FjNnTtXt956q9Uh1UpYWJh69Oih9evXO5f5Wr8/8cQT6tOnj9566y1L47germJvCOO9qtgb0nivru99ecy/++676tKli6ZNm+Yz/0Cgav/zP/+jAQMGaNeuXRowYICKi4tVUVGh733ve4qNjVVERITCw8M1aNAg3XvvvZIujcsf/OAH6t+/v/r376+f/OQnFm+F6+3YsGGD0tLS9Pnnn2vFihXauXOn859CX3U92+JL+39T54v7R1Nm1b7RZBKokpKSSp/kREREqKSkxO3Xt27dWmvXrtXLL7/sPAQtSYcPH5YklZWVafHixYqPj6+/oP+jrrEfOnRIklRYWKitW7eqV69eOnHihIKDgxUQEHBdbbqrrrFL0qhRo7R69WpduHDBucyX+n3w4MF6+eWX9fDDD6usrKza15aUlFQ6Xcvqfq8qdqlhjHdXsVs53usjfsn3x/xlKSkpztM+qhvzdX0PQNXc6duvv/5aI0aM0J133qmXX35ZknTy5Ek9+uijSk9P19mzZ3X27FmtW7dOd911l6T/24fOnDmj999/3yNjrb62Q5J++9vfqlevXnrwwQfl5+engoICr+7znt4WyTv7f23Udn/31txXW9fzvuXt/cMdtX2ftWr/qMn1zBdW7htev/DKihIQEGD27dtnoqOjnRd2du/evcq6V1+QFhgYaDZu3GieffbZa+qGhYU5f58zZ4753e9+51OxBwcHm6CgICPJhISEmIKCAucFrStXrqx0AeFPf/pTn4r9ctm5c6cZOHCgT/b7HXfcYRwOh/OmC5dLu3btzP79+01wcLAJDg42+/fvN+3atTPStRfSJiQk+FTsDWG8u4rd6vFe1/gbwpi/MuaHHnrI2Gw2I8l079690k0k9u3bZ/z9/Wv1HkCp/79XSEiI8fPzM5LMa6+9ZmbNmmUkmVGjRpkNGzaYgIAA06xZM7Nx40bz0EMPmYCAABMSEmIkmWbNmpm//vWvZvLkyT67Hf7+/qZ9+/ZGkunRo4fJyckxAQEBRvLePu+NbfHG/n91iYqKcnmx/7Bhwypd7J+RkWEk6+c+T2+HFftHXbbjchkwYMA1N1+wYv/wxHZYsW/8p3hlJT5REhISzJdffmkcDod56aWXjCQza9YsM3z4cCPJ9OnTxxQVFZkzZ86Y48ePm9zcXCPJPPHEE6asrMxkZmY6S8+ePY0ks2nTJpOdnW1ycnLMsmXLTMuWLX0q9rvuustkZ2eb3bt3m+zsbPPUU0852+zcubPJyMgwdrvdrFy50vmPp6/ELl3a0YqLi52TzeXiK/2+YcMGc/jwYee4WLNmjfO1EyZMMHa73djtdvPkk086l/fu3dvk5OQYh8Nh/vjHP1o23l3F3hDGu6vYfWG813Xc+PqYnzt3rsnNzTWZmZlm8+bNlf45fOmll4zD4TD5+fmV7rBVVZsU7/y9RowYYQoKCsyXX35pFi5c6Bz3/v7+5n//93/Nnj17TF5envn9739vJJkbb7zR/Otf/zJZWVkmNzfXzJ071/j7+/vsdjRv3tzk5eWZvLw8s3PnTud7leTdfd7T2+Kt/f9yef/9982hQ4dMWVmZKSoqMk899ZSZPHlypWThnXfeMQ6Hw2RnZ1e6K53Vc58nt8Oq/aMu2/Hpp5+ao0ePmnPnzpmioiLz4IMPWrZ/eGI7vL1vXC5+//kFAAAAAFCDJnMNFAAAAADUFQkUAAAAALiJBAoAAAAA3EQCBQAAAABuIoECAAAAADeRQAEAAACAm0igAAAAAMBNJFAAAAAA4CYSKAAAAABwEwkUAAAAALiJBAoAAAAA3EQCBQAAAABuIoECAAAAADeRQAEAAACAm0igAAAAAMBNJFAAAAB1UFhYqMGDB1sdBgAvIYFCgzJz5kwtW7bM6jAAAMB1eu6557Rv3z6dPHlSJSUlevvttxUQECBJ6tChg95//32VlJSotLRUO3bsUHx8fLXtzZgxQ6dPn9bp06d1/vx5Xbhwwfk4NzfXrTbHjBmjAwcO6MyZM1q9erXatWvnse1Hw0cChSZt8eLFevXVV60Ow2Mef/xx5efnq7S0VEeOHNGSJUvUunVrSVJQUJD+9Kc/6cCBAzp16pQyMzM1dOjQatsbO3asc1I6d+6cKioqnI9Pnz7tVpuDBg3S3r17dfbsWW3evFmdOnXy2PYDADzvcvJzJX9/1/9ipqam6s4771Tbtm11++23q2fPnnrmmWckSa1atZLNZlPv3r3Vvn17JScna+3atWrZsqXL9n73u9+pdevWat26taZMmaKdO3c6H99+++01ttm9e3e99957+slPfqKOHTvq3Llzevfdd+vYK2jsDIXSUMrMmTPNsmXL6qUtf39/s3jxYvPqq69avl3uloCAALeWXS4REREmJCTESDItW7Y0f/nLX8y8efOMJHPjjTeamTNnmqioKOPn52d++MMfmlOnTpmoqCi3YhkwYIApKiqqtKymNkNCQkxpaakZOXKkad68uXnzzTfNzp07Le9XCoVCqUspLCw0gwcPNkFBQWbOnDmmpKTElJSUmDlz5pigoCAj/d975gsvvGCOHDliDh06ZJ588klnG+3btzepqanm5MmT5p///Kd59dVXzfbt22tcd/fu3c0nn3xiTpw4YQ4fPmxmzJhhJFUbi6uydetW89hjjxlJ5u677zbGGDNs2DAjyQwaNMhkZmYaSWb8+PFmx44d5u233zbHjx83r776qlm8eLF59913zdq1a82ZM2fM4MGD3eq79u3bmw0bNpj58+e7rHPy5Elz5513utXe+PHj3eq3K9t8/fXXzfLly53P3Xrrrea7774zrVq1snxsUXyzcAQKPuvFF19UcXGxTp06pfz8fA0aNEjSpSMnycnJOnXqlHJzc9W7d2/na2677TZt2bJF3377rXJzczV8+HDnc4sXL9a7776rtWvX6syZM5o4caKeeOIJvfjiizp9+rRSU1OrjSciIkIffvihjh49quPHj+uPf/yjJMnPz08vv/yyDhw4oCNHjig5OVlt2rSptq0lS5bohRdekCTdcsstMsboZz/7mSTp1ltv1YkTJ+Tn56cBAwaoqKhIL774or7++mstXrxYM2fO1F//+lctW7ZMJ0+e1JNPPulyPcXFxTpx4oTzcUVFhbp06SJJOnfunGbNmqWDBw/KGKO1a9eqsLCwUn/WVk1tPvbYY8rLy9OqVav03Xff6ZVXXlHPnj3VrVu3614nAPiKl19+Wf369dMdd9yhnj17Kj4+Xr/61a+cz4eFhalt27YKDw/XxIkTNX/+fAUHB0uS5s+fr7NnzyosLEzjx4/X+PHja1xfq1attHHjRn388ce65ZZb1KVLF23atMmtWKqybds2DRw4UJI0YMAA7du3T//1X//lfLxt2zZn3b59+2r//v3q2LGjXn/9dUmXzlJ4/fXX1bp1a+3YsaPadY0ZM0YnT57UiRMn1LNnT7333ntV1uvZs6eCgoLkcDhq7A93Xd3m97//fWVlZTmf379/v8rKytS1a9d6WycaH8uzOArl6tK1a1fz1VdfmZtvvtlIMlFRUebWW281M2fONOfPnzcJCQnG39/f/Pa3v3UewWjWrJmx2+1mxowZJjAw0Nx3333m1KlTpmvXrkaSWbx4sSktLTV333238fPzM82bN3f7CJS/v7/ZvXu3efvtt82NN95omjdvbu655x4jyUyYMMHY7XbTuXNn07JlS/Phhx+apUuXVtvehAkTTGpqqpFkxowZYxwOh0lJSXE+9/e//91Ilz6xLC8vN7NnzzZBQUGmRYsWZubMmaasrMwkJiYaPz8/06JFi2rXdc8995jS0lJjjDFnzpwxDzzwQJX1brrpJnP+/HnTrVs3t/5GVR2BqqnNuXPnmnfffbdSnZycHOcnnhQKhdIQy+UjUA6HwyQkJDiXP/jgg6awsNBIl94zz507V+msgSNHjpi+ffsaf39/U1ZW5pyvJLl1BGr06NFm165dVT5XXSyuyqBBg0xWVpaRZNatW2cmTpzonGO3bt1qHn30USNdOspz8ODBSq9dvHixSU5OrnXfdenSxfzmN78xHTt2vOa51q1bm+zsbDN9+nS326vpCFRVbW7cuNFMnjy5Ur3i4mIzYMAAy8cWxTcLR6DgkyoqKtS8eXN1795dzZo108GDB7V//35J0o4dO7Ru3TpdvHhRy5YtU8+ePSVJ/fr1U6tWrTR79myVl5dry5Yt+sc//qExY8Y4212zZo0+//xzGWP03XffuR1PfHy8brnlFv3yl7/UuXPn9N133+mzzz6TJD3xxBN6++23VVhYqLNnz2rGjBkaPXp0leeEX7Zt2zbde++98vPz03/913/pzTff1D333CPp2k/5Ll68qJkzZ6qsrEz//ve/JUk7d+7UmjVrZIxxLnPls88+U3BwsMLDw/XWW2/pwIED19Rp1qyZli9fruTkZH355Zdu90t1qmqzVatWOnnyZKV6J0+edF6XBQAN2S233KKDBw86Hx88eFC33HKL8/GJEydUUVHhfHzu3Dm1atVKHTp0UGBgoIqKipzPXfm7K5GRkdq3b991xVKVnTt3qmvXrrrpppt0xx13aOnSpYqMjFRISIji4+P16aefVhufOzFfzeFwKC8v75prjlq0aKGPPvpI6enpmj17dq3brYqrNs+cOXPNmSNt2rTR6dOn62W9aHxIoOCT9u3bp+eee06vvPKKjh49qhUrVujmm2+WJB0+fNhZ79y5c7rhhhsUEBCgW265RUVFRTLGOJ8/ePCgwsPDnY+v581dujRJHTx4sNLEd1lVk1RgYKA6duzosr39+/fr7NmzuuOOO9S/f3/94x//0KFDh9S1a9drEqhjx45dk+xdz3YcOnRIH3/8sVJSUiot9/Pz07Jly1RWVqapU6fWut2quGqTSQpAY3bo0CFFRUU5H3fq1EmHDh2q8XXHjh1TeXm5IiIinMsiIyNrfF1RUZFuvfXWeovl/Pnz+uKLL/Tss88qNzdX5eXl+vzzz/XCCy9o3759lU4Jv3KurW6ZO5o1a6bvfe97zsdBQUH6+9//ruLiYk2ePPm62rxadW3m5eU5P4yVpM6dO6t58+YqKCiol3Wj8SGBgs9asWKF+vfvr6ioKBlj9MYbb1Rb/9ChQ4qMjJSfn59zWadOnVRSUuJ8fPWbu7tv9kVFRerUqVOVR5WqmqTKy8t15MiRatvctm2bRo4cqaCgIB06dEjbtm3T+PHj1a5dO+3evbvaGOtrkpKkRYsWqWPHjhoxYoQuXLhwXe1ezVWbV09SN954o773ve8pLy+vXtYLAFZasWKFfvWrXyk0NFQhISH69a9/rb/85S81vu7ixYv629/+pldeeUU33HCDunXrpnHjxtX4un/84x+6+eab9eyzzyooKEitWrVy3p77emPZtm2bpk6d6vwgb+vWrZUe14eJEyeqQ4cOkqTY2FjNmDHDee1Ws2bNtGrVKp0/f17jx4+/7vnuSjW1uXz5cg0fPlz33nuvbrzxRv3mN7/R3/72N505c6bO60bjRAIFn9S1a1fdd999CgoK0r///W+dP39eFy9erPY1GRkZOnfunF588UU1a9ZMAwYM0PDhw6854nKlI0eOuPz07kr//Oc/9fXXX2v27Nm68cYb1bx5c919992SLk1Szz//vKKjo9WyZUv99re/1QcffFDl0aorXZ6kLp8ScXmS2rFjR43b6q6xY8c6P8Xs1KmTXn/9deckJUkLFixQbGyshg8fXuOpgO6qrs3Vq1fr9ttv12OPPabmzZvr17/+tbKzs+vttEEAsNJrr72mf/3rX8rOzlZOTo527dql1157za3XTp06VW3bttXhw4e1bNkyrVixosZTzc+cOaMHHnhAw4cP1+HDh2W323XffffVKZZt27apTZs2zrnp6sf14Z577lFOTo7OnDmjtLQ0paWl6aWXXpIk3X333Ro+fLgefPBBlZaWOr8m4957773u9dXU5p49ezRlyhQtX75cR48eVevWrZ03dgJcsfxCLArl6tKjRw+TkZFhTp06ZU6cOGE++ugjc/PNN19zG/OoqChjjHFelNu9e3ezdetWU1paavLy8swjjzzirFvVDSO6dOliMjMzzbfffmtWr15dbUyRkZFm9erV5vjx4+bYsWPO24H7+fmZ//f//p/56quvzNGjR82yZctMcHBwjdvYtWtXY4wx48aNM5JMmzZtTHl5uXnxxReddaq6UUNtbuX+2muvmaKiInPmzBlTVFRk3nvvPdO+fXsjyXTq1MkYY8z58+fN6dOnnWXs2LFutV1VbO60OXjwYLN3715z7tw5s2XLFrdvm06hUChNqcyePdssWbLE8jgoFMq1xe8/vwAAAMAi3bp1U1BQkHJychQXF6e0tDT993//t9asWWN1aACuwil8AAAAFmvdurX+9re/6ezZs/rggw/0+9//XmvWrNG9997rPOXs6nI9ZsyYUWVbaWlp9bo9ubm5Va5n7Nix193mggULqmxzwYIF9Rg54B7LD4NRKL5QIiMjK512dmWJjIysdXtjx46tsq3c3Nx6jTstLa3K9Vz+NvrrKTNmzKiyzbS0NMv/ThQKhUKhUChWFk7hAwAAAAA3NfPWipo3b65PP/1UzZs3d95O8pVXXlF0dLRSUlIUEhKiL774Qj/5yU9UXl6uoKAgLV26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\n"},"metadata":{}}],"source":["plt.style.use(['dark_background', 'fast'])\n","fig = plt.figure(figsize=(14, len(titles) * 5))\n","nrows, ncols = len(short_datas), 1\n","gs = gridspec.GridSpec(nrows=nrows,  # row 부터 index 채우고 col 채우는 순서임 (gs_idx)\n","                        ncols=ncols\n","                        )\n","\n","num_samples = 30\n","alpha = 0.8\n","xmin = 0\n","xmax = 10\n","\n","for ings_idx, (title, short_data, long_data) in enumerate(zip(titles, short_datas, long_datas)):\n","  inner_gs = gs[ings_idx].subgridspec(nrows=2, ncols=2)\n","\n","  short_open_data = short_data[short_p1_idx]\n","  long_open_data = long_data[long_p1_idx]\n","\n","  short_true_data = short_open_data[short_bias_arr.ravel()]\n","  # short_false_data = short_open_data[short_false_bias_arr.ravel()]\n","  short_false_data = short_open_data[~short_bias_arr.ravel()]\n","  long_true_data = long_open_data[long_bias_arr.ravel()]\n","  # long_false_data = long_open_data[long_false_bias_arr.ravel()]\n","  long_false_data = long_open_data[~long_bias_arr.ravel()]\n","  \n","  short_true_valid_idx = np.ones_like(short_true_data).astype(bool)\n","  short_false_valid_idx = np.ones_like(short_false_data).astype(bool)\n","  long_true_valid_idx = np.ones_like(long_true_data).astype(bool)\n","  long_false_valid_idx = np.ones_like(long_false_data).astype(bool)\n","\n","  short_true_valid_idx *= ~np.isinf(short_true_data)\n","  short_false_valid_idx *= ~np.isinf(short_false_data)\n","  long_true_valid_idx *= ~np.isinf(long_true_data)\n","  long_false_valid_idx *= ~np.isinf(long_false_data)\n","\n","  try:\n","    short_true_valid_idx *= short_true_data > xmin\n","    short_false_valid_idx *= short_false_data > xmin\n","    long_true_valid_idx *= long_true_data > xmin\n","    long_false_valid_idx *= long_false_data > xmin\n","\n","  except:\n","    pass\n","\n","  try:\n","    short_true_valid_idx *= short_true_data < xmax\n","    short_false_valid_idx *= short_false_data < xmax\n","    long_true_valid_idx *= long_true_data < xmax\n","    long_false_valid_idx *= long_false_data < xmax\n","    \n","  except:\n","    pass\n","    \n","  plt.subplot(inner_gs[0])\n","  ns, bins, patches = plt.hist([short_true_data[short_true_valid_idx], short_false_data[short_false_valid_idx]], \n","           bins=num_samples, alpha=alpha, color=['#00ff00', '#ff0000'], edgecolor='black')  \n","  plt.title('short_' + title)  \n","\n","  plt.subplot(inner_gs[2])\n","  total_ns = np.sum(ns, axis=0)\n","  hist_ratio = ns[0] / total_ns\n","  # valid_idx = total_ns > 1\n","  valid_idx = np.full(len(hist_ratio), True)\n","  valid_hist_ratio = hist_ratio[valid_idx]\n","  plt.hist(bins[:-1][valid_idx], weights=valid_hist_ratio, bins=num_samples, color='#00ff00', edgecolor='black')\n","  plt.ylim(0, 1)\n","  \n","\n","  plt.subplot(inner_gs[1])\n","  ns, bins, patches = plt.hist([long_true_data[long_true_valid_idx], long_false_data[long_false_valid_idx]], \n","           bins=num_samples, alpha=alpha, color=['#00ff00', '#ff0000'], edgecolor='black')\n","  plt.title('long_' + title)\n","  \n","  plt.subplot(inner_gs[3])\n","  total_ns = np.sum(ns, axis=0)\n","  hist_ratio = ns[0] / total_ns\n","  # valid_idx = total_ns > 1\n","  valid_idx = np.full(len(hist_ratio), True)\n","  valid_hist_ratio = hist_ratio[valid_idx]\n","  plt.hist(bins[:-1][valid_idx], weights=valid_hist_ratio, bins=num_samples, color='#00ff00', edgecolor='black')\n","  plt.ylim(0, 1)\n","\n","  \n","# plt.suptitle(title)\n","plt.show()"]},{"cell_type":"markdown","metadata":{"id":"Arnb-kXlC4VF"},"source":["#### tpg & outg survey"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":881},"executionInfo":{"elapsed":2820,"status":"ok","timestamp":1659074362424,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"jHh0uFkXC4VF","outputId":"cf21f56c-faf2-471d-b7e0-5c16e0ff2bdd"},"outputs":[{"output_type":"stream","name":"stdout","text":["223\n","533\n","223\n","533\n","223\n","533\n","223\n","533\n","pkx : [0.05994977 0.14818175 0.35111529 0.74815919]\n","pkx : [0.09816775 0.30374184 0.78029994]\n","\n","56\n","84\n","56\n","84\n","56\n","84\n","56\n","84\n","pkx : [-0.23140658 -0.19827966 -0.16515274 -0.14385686 -0.11072994 -0.07287061 -0.01371539]\n","pkx : [-0.32640606 -0.24710795 -0.18102619 -0.11494443 -0.03234223]\n","\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 864x576 with 4 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["# 1. outg 는 partial 을 위한 histogram 작성 진행\n","# 현재, outg 내부에는 tp 한것과 out 한것이 공존하는 상태\n","titles = ['outg', 'tpg']\n","short_max_datas = [short_max_outg[short_bias_arr], short_max_tpg]\n","long_max_datas = [long_max_outg[long_bias_arr], long_max_tpg]\n","\n","# titles = ['tpg']\n","# short_max_datas = [short_max_tpg]\n","# long_max_datas = [long_max_tpg]\n","\n","plt.style.use(['dark_background', 'fast'])\n","fig = plt.figure(figsize=(12, 8))\n","nrows, ncols = 2, 1\n","gs = gridspec.GridSpec(nrows=nrows,  # row 부터 index 채우고 col 채우는 순서임 (gs_idx)\n","                        ncols=ncols\n","                        )\n","  \n","for ings_idx, (title, short_max_data, long_max_data) in enumerate(zip(titles, short_max_datas, long_max_datas)):\n","\n","  inner_gs = gs[ings_idx].subgridspec(nrows=1, ncols=2)\n","  if ings_idx == 0:\n","    axvline = current_outg\n","    title_add = 'true_' + title\n","  else:\n","    axvline = current_tpg\n","    title_add = 'false_' + title\n","\n","  print(len(short_max_data))\n","  print(len(long_max_data))\n","\n","  short_plot_idx = np.ones_like(short_max_data).astype(bool)\n","  long_plot_idx = np.ones_like(long_max_data).astype(bool)\n","  # short_plot_idx = short_max_data <= axvline\n","  # long_plot_idx = long_max_data <= axvline\n","\n","  print(np.sum(short_plot_idx))\n","  print(np.sum(long_plot_idx))    \n","\n","  short_plot_idx *= ~np.isnan(short_max_data)\n","  long_plot_idx *= ~np.isnan(long_max_data)  # nan 과 inf 때문에 이 방식 채택\n","\n","  print(np.sum(short_plot_idx))\n","  print(np.sum(long_plot_idx))\n","\n","  short_plot_idx *= ~np.isinf(short_max_data)\n","  long_plot_idx *= ~np.isinf(long_max_data)  # nan 과 inf 때문에 이 방식 채택\n","  \n","  print(np.sum(short_plot_idx))\n","  print(np.sum(long_plot_idx))\n","    \n","  plt.subplot(inner_gs[0])\n","  kde_plot_v2(*np.unique(short_max_data[short_plot_idx], return_counts=True))\n","  plt.title('short_' + title_add)  \n","  plt.axvline(axvline, color='red', linewidth=3)\n","\n","  plt.subplot(inner_gs[1])\n","  kde_plot_v2(*np.unique(long_max_data[long_plot_idx], return_counts=True))\n","  plt.title('long_' + title_add)\n","  plt.axvline(axvline, color='red', linewidth=3)\n","\n","  print()\n","\n","# plt.suptitle(title)\n","plt.show()"]},{"cell_type":"markdown","metadata":{"id":"mScdfR9hmjVu"},"source":["#### legacy"]},{"cell_type":"markdown","metadata":{"id":"xivLUsSGC4VF"},"source":["##### outg survey for precision (eploc vars. dependency)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"LB28R3QIjCDc"},"outputs":[],"source":["# ------------ dependent vars. ------------ #\n","# res_df 에 존재하는 col 는 모두 사용가능함\n","# ------ 1. 도출한 outg 와 vars. pairing 진행 (by valid_idx) ------ #\n","devided_cols = ['tr_{}'.format(strat_version)]  # , 'ir_5T'\n","public_cols = ['wave_body_ratio']  # 'abs_ratio_5T', 'rel_ratio_5T', 'body_rel_ratio_5T'\n","\n","short_datas = [res_df['short_' + col].to_numpy() for col in devided_cols] + [res_df[col].to_numpy() for col in public_cols]\n","long_datas = [res_df['long_' + col].to_numpy() for col in devided_cols] + [res_df[col].to_numpy() for col in public_cols]\n","\n","titles = devided_cols + public_cols"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"nX9TpLcvFu7T"},"outputs":[],"source":["plot_outg_range = (-1, 10)\n","plot_data_range = (-10, 100)\n","\n","plt.style.use(['dark_background', 'fast'])\n","fig = plt.figure(figsize=(12, 18))\n","nrows, ncols = len(short_datas), 1\n","gs = gridspec.GridSpec(nrows=nrows,  # row 부터 index 채우고 col 채우는 순서임 (gs_idx)\n","                        ncols=ncols\n","                        )\n","\n","for ings_idx, (title, short_data, long_data) in enumerate(zip(titles, short_datas, long_datas)):\n","  inner_gs = gs[ings_idx].subgridspec(nrows=1, ncols=2)\n","\n","  print(len(long_max_outg))\n","\n","  short_plot_idx = (plot_outg_range[0] <= short_max_outg) & (short_max_outg <= plot_outg_range[1])\n","  long_plot_idx = (plot_outg_range[0] <= long_max_outg) & (long_max_outg <= plot_outg_range[1])  # nan 과 inf 때문에 이 방식 채택\n","\n","  print(np.sum(long_plot_idx))\n","\n","  short_open_data = short_data[short_open_idx]\n","  long_open_data = long_data[long_open_idx]\n","  \n","  short_plot_idx *= (plot_data_range[0] <= short_open_data) * (short_open_data <= plot_data_range[1])\n","  long_plot_idx *= (plot_data_range[0] <= long_open_data) * (long_open_data <= plot_data_range[1]) # nan 과 inf 때문에 이 방식 채택\n","\n","  short_plot_idx *= ~np.isnan(short_open_data)\n","  long_plot_idx *= ~np.isnan(long_open_data)  # nan 과 inf 때문에 이 방식 채택\n","\n","  print(np.sum(long_plot_idx))\n","\n","  short_plot_idx *= ~np.isinf(short_open_data)\n","  long_plot_idx *= ~np.isinf(long_open_data)  # nan 과 inf 때문에 이 방식 채택\n","\n","  print(np.sum(long_plot_idx))\n","\n","  short_true_idx = short_plot_idx * short_true_open_idxth\n","  long_true_idx = long_plot_idx * long_true_open_idxth\n","  \n","  short_false_idx = short_plot_idx * ~short_true_open_idxth\n","  long_false_idx = long_plot_idx * ~long_true_open_idxth\n","\n","  plt.subplot(inner_gs[0])\n","  # ------ true_bias ------ #\n","  x, y = short_max_outg[short_true_idx].ravel(), short_open_data[short_true_idx].ravel()  \n","  plt.scatter(x, y, color='white', alpha=0.5)\n","  # ------ false_bias ------ #\n","  x, y = short_max_outg[short_false_idx].ravel(), short_open_data[short_false_idx].ravel()\n","  plt.scatter(x, y, color='fuchsia', alpha=0.3)\n","  plt.axvline(current_outg, color='red', linewidth=3)\n","  plt.title(\"{} coef : {:0.3f}\".format(title, np.corrcoef(-x, y)[0, 1]))\n","\n","  plt.subplot(inner_gs[1])    \n","  # ------ true_bias ------ #\n","  x, y = long_max_outg[long_true_idx].ravel(), long_open_data[long_true_idx].ravel()  \n","  plt.scatter(x, y, color='white', alpha=0.5)\n","  # ------ false_bias ------ #\n","  x, y = long_max_outg[long_false_idx].ravel(), long_open_data[long_false_idx].ravel()\n","  plt.scatter(x, y, color='fuchsia', alpha=0.3)\n","  plt.axvline(current_outg, color='red', linewidth=3)\n","  plt.title(\"{} coef : {:0.3f}\".format(title, np.corrcoef(-x, y)[0, 1]))\n","\n","  print()  \n","\n","# plt.suptitle(title)\n","plt.show()\n","# print()"]},{"cell_type":"markdown","metadata":{"id":"983aUwM76s6X"},"source":["#### dump"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"p_e8PtFXa7mc"},"outputs":[],"source":["# len(np.unique(long_obj[-1]))\n","p1_hhm_p1_idx = long_obj[-1]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"nLZDkNNxbZPO"},"outputs":[],"source":["p1_hlm_p1_idx = long_obj[-1]"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":261,"status":"ok","timestamp":1653452376525,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"WhCPOi1qbkHS","outputId":"e3b8db71-3e48-4177-a3fe-9f891a362596"},"outputs":[{"data":{"text/plain":["array([350065., 440065., 502833., 735204., 836258.])"]},"execution_count":161,"metadata":{},"output_type":"execute_result"}],"source":["# len(p1_hhm_p1_idx[~np.isin(p1_hhm_p1_idx, p1_hlm_p1_idx)])\n","p1_hlm_p1_idx[~np.isin(p1_hlm_p1_idx, p1_hhm_p1_idx)]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"wgERZ65F5RBB"},"outputs":[],"source":["org_p1_idx = long_p2_idx_arr  # long_obj[-1]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"rAao95SEnOY0"},"outputs":[],"source":["new_p1_idx = long_p2_idx_arr  # long_obj[-1]"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":267,"status":"ok","timestamp":1653119592395,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"OEQ9KWXVnQ2J","outputId":"85c3e998-5c1e-4b5a-8366-28fe8cc3639b"},"outputs":[{"name":"stdout","output_type":"stream","text":["153\n","163\n"]},{"data":{"text/plain":["array([ 35609, 105164, 188999, 347399, 358994, 379304, 379544, 397274, 482474, 550919, 656774, 833129])"]},"execution_count":220,"metadata":{},"output_type":"execute_result"}],"source":["uniq_org_p1_idx = np.unique(org_p1_idx)\n","uniq_new_p1_idx = np.unique(new_p1_idx)\n","print(len(uniq_org_p1_idx))\n","print(len(uniq_new_p1_idx))\n","uniq_new_p1_idx[~np.isin(uniq_new_p1_idx, uniq_org_p1_idx)]\n","# np.unique(new_p1_idx).remove(np.unique(org_p1_idx))"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"hOtCGUeBQ4hn"},"outputs":[],"source":["open_idx = open_info_df.index.to_numpy()\n","# len_df = len(res_df)\n","# s_idx = (open_idx < int(len_df * (1 - test_ratio))) == plot_is\n","# s_open_info_df = open_info_df[s_idx]\n","# s_open_idx = open_idx[s_idx]\n","\n","# open_info_list = [s_open_info_df[col_].to_numpy() for col_ in s_open_info_df.columns]\n","# side_arr, zone_arr, id_arr, id_idx_arr = open_info_list\n","\n","long_open_ = res_df['long_open_{}'.format(config.selection_id)].to_numpy()\n","short_open_ = res_df['short_open_{}'.format(config.selection_id)].to_numpy()\n","\n","long_open_idx = get_index_bybool(long_open_, np.arange(len(res_df)))\n","short_open_idx = get_index_bybool(short_open_, np.arange(len(res_df)))"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"QPhjkZQhRLqr"},"outputs":[],"source":["valid_long_open_idx = long_open_idx[~np.isnan(long_open_idx)]\n","valid_short_open_idx = short_open_idx[~np.isnan(short_open_idx)]\n","\n","# print(valid_long_open_idx[valid_long_open_idx > 4000][:10])\n","# print(valid_short_open_idx[valid_short_open_idx > 4000][:10])\n","\n","print(open_idx[open_idx > 4000][:10])\n","\n","print(np.hstack((long_obj[-1], long_obj[3]))[:10])\n","print(np.hstack((short_obj[-1], short_obj[3]))[:10])\n","# print([:10])"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"cFd7Fz0Y6ucU"},"outputs":[],"source":["# short_max_outg, short_outg_open_idx = get_max_outg_v2(\"SELL\", config, ohlc_list, short_obj, short_tpout_arr, short_open_epout_0, short_open_epout_gap)\n","# long_max_outg, long_outg_open_idx = get_max_outg_v2(\"BUY\", config, ohlc_list, long_obj, long_tpout_arr, long_open_epout_0, long_open_epout_gap)\n","# short_max_outg, short_open_idx, short_true_open_idxth = get_max_outg_v3(\"SELL\", config, ohlc_list, short_obj, short_tpout_arr, short_open_epout_0, short_open_epout_gap)\n","# long_max_outg, long_open_idx, long_true_open_idxth = get_max_outg_v3(\"BUY\", config, ohlc_list, long_obj, long_tpout_arr, long_open_epout_0, long_open_epout_gap)"]},{"cell_type":"markdown","metadata":{"id":"EtjwB7Qk-Grj"},"source":["### significance_v4"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"elapsed":94486,"status":"ok","timestamp":1662375629618,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"oVifICO4-Grk","outputId":"6a893363-2ab7-4613-d92b-14407dcb5617"},"outputs":[{"output_type":"stream","name":"stderr","text":["WARNING:root:wave_point\n","WARNING:root:np.sum(short_open_res1 == 1) : 42048\n","WARNING:root:np.sum(long_open_res1 == 1) : 42240\n","WARNING:root:np.sum(short_open_res2 == 1) : 42048\n","WARNING:root:np.sum(long_open_res2 == 1) : 42240\n","WARNING:root:reject update_hl\n","WARNING:root:np.sum(short_open_res1 == 1) : 40427\n","WARNING:root:np.sum(long_open_res1 == 1) : 40130\n","WARNING:root:np.sum(short_open_res2 == 1) : 40427\n","WARNING:root:np.sum(long_open_res2 == 1) : 40130\n","WARNING:root:wave_mm\n","WARNING:root:np.sum(short_open_res1 == 1) : 40425\n","WARNING:root:np.sum(long_open_res1 == 1) : 40128\n","WARNING:root:point validation\n","WARNING:root:np.sum(short_open_res1 == 1) : 28319\n","WARNING:root:np.sum(long_open_res1 == 1) : 28683\n","WARNING:root:cu_wrr_32_ <= config.loc_set.point1.wrr_32 : 0.54867 0.10000 (0.0)\n","WARNING:root:co_wrr_32_ <= config.loc_set.point1.wrr_32 : 1.00000 0.10000 (0.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 1.4183809757232666\n","get_open_info_df elapsed time : 1.1475732326507568\n","en_ex_pairing elapsed time : 0.002592325210571289\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:root:wave_point\n","WARNING:root:np.sum(short_open_res1 == 1) : 42048\n","WARNING:root:np.sum(long_open_res1 == 1) : 42240\n","WARNING:root:np.sum(short_open_res2 == 1) : 42048\n","WARNING:root:np.sum(long_open_res2 == 1) : 42240\n","WARNING:root:reject update_hl\n","WARNING:root:np.sum(short_open_res1 == 1) : 40427\n","WARNING:root:np.sum(long_open_res1 == 1) : 40130\n","WARNING:root:np.sum(short_open_res2 == 1) : 40427\n","WARNING:root:np.sum(long_open_res2 == 1) : 40130\n","WARNING:root:wave_mm\n","WARNING:root:np.sum(short_open_res1 == 1) : 40425\n","WARNING:root:np.sum(long_open_res1 == 1) : 40128\n","WARNING:root:point validation\n","WARNING:root:np.sum(short_open_res1 == 1) : 28319\n","WARNING:root:np.sum(long_open_res1 == 1) : 28683\n","WARNING:root:cu_wrr_32_ <= config.loc_set.point1.wrr_32 : 0.54867 0.20000 (0.0)\n","WARNING:root:co_wrr_32_ <= config.loc_set.point1.wrr_32 : 1.00000 0.20000 (0.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 1.1166181564331055\n","get_open_info_df elapsed time : 1.1268563270568848\n","en_ex_pairing elapsed time : 0.05585646629333496\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:root:wave_point\n","WARNING:root:np.sum(short_open_res1 == 1) : 42048\n","WARNING:root:np.sum(long_open_res1 == 1) : 42240\n","WARNING:root:np.sum(short_open_res2 == 1) : 42048\n","WARNING:root:np.sum(long_open_res2 == 1) : 42240\n","WARNING:root:reject update_hl\n","WARNING:root:np.sum(short_open_res1 == 1) : 40427\n","WARNING:root:np.sum(long_open_res1 == 1) : 40130\n","WARNING:root:np.sum(short_open_res2 == 1) : 40427\n","WARNING:root:np.sum(long_open_res2 == 1) : 40130\n","WARNING:root:wave_mm\n","WARNING:root:np.sum(short_open_res1 == 1) : 40425\n","WARNING:root:np.sum(long_open_res1 == 1) : 40128\n"]},{"output_type":"stream","name":"stdout","text":["idep_plot elapsed time : 0.1961812973022461\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:root:point validation\n","WARNING:root:np.sum(short_open_res1 == 1) : 28319\n","WARNING:root:np.sum(long_open_res1 == 1) : 28683\n","WARNING:root:cu_wrr_32_ <= config.loc_set.point1.wrr_32 : 0.54867 0.30000 (0.0)\n","WARNING:root:co_wrr_32_ <= config.loc_set.point1.wrr_32 : 1.00000 0.30000 (0.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9891541004180908\n","get_open_info_df elapsed time : 1.133213996887207\n","en_ex_pairing elapsed time : 0.443495512008667\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:root:wave_point\n","WARNING:root:np.sum(short_open_res1 == 1) : 42048\n","WARNING:root:np.sum(long_open_res1 == 1) : 42240\n","WARNING:root:np.sum(short_open_res2 == 1) : 42048\n","WARNING:root:np.sum(long_open_res2 == 1) : 42240\n","WARNING:root:reject update_hl\n","WARNING:root:np.sum(short_open_res1 == 1) : 40427\n","WARNING:root:np.sum(long_open_res1 == 1) : 40130\n","WARNING:root:np.sum(short_open_res2 == 1) : 40427\n","WARNING:root:np.sum(long_open_res2 == 1) : 40130\n","WARNING:root:wave_mm\n","WARNING:root:np.sum(short_open_res1 == 1) : 40425\n","WARNING:root:np.sum(long_open_res1 == 1) : 40128\n"]},{"output_type":"stream","name":"stdout","text":["idep_plot elapsed time : 0.21266508102416992\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:root:point validation\n","WARNING:root:np.sum(short_open_res1 == 1) : 28319\n","WARNING:root:np.sum(long_open_res1 == 1) : 28683\n","WARNING:root:cu_wrr_32_ <= config.loc_set.point1.wrr_32 : 0.54867 0.40000 (0.0)\n","WARNING:root:co_wrr_32_ <= config.loc_set.point1.wrr_32 : 1.00000 0.40000 (0.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 1.010218620300293\n","get_open_info_df elapsed time : 1.1166355609893799\n","en_ex_pairing elapsed time : 1.9594817161560059\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:root:wave_point\n","WARNING:root:np.sum(short_open_res1 == 1) : 42048\n","WARNING:root:np.sum(long_open_res1 == 1) : 42240\n","WARNING:root:np.sum(short_open_res2 == 1) : 42048\n","WARNING:root:np.sum(long_open_res2 == 1) : 42240\n","WARNING:root:reject update_hl\n","WARNING:root:np.sum(short_open_res1 == 1) : 40427\n","WARNING:root:np.sum(long_open_res1 == 1) : 40130\n","WARNING:root:np.sum(short_open_res2 == 1) : 40427\n","WARNING:root:np.sum(long_open_res2 == 1) : 40130\n","WARNING:root:wave_mm\n","WARNING:root:np.sum(short_open_res1 == 1) : 40425\n","WARNING:root:np.sum(long_open_res1 == 1) : 40128\n"]},{"output_type":"stream","name":"stdout","text":["idep_plot elapsed time : 0.25990796089172363\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:root:point validation\n","WARNING:root:np.sum(short_open_res1 == 1) : 28319\n","WARNING:root:np.sum(long_open_res1 == 1) : 28683\n","WARNING:root:cu_wrr_32_ <= config.loc_set.point1.wrr_32 : 0.54867 0.50000 (0.0)\n","WARNING:root:co_wrr_32_ <= config.loc_set.point1.wrr_32 : 1.00000 0.50000 (0.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9856662750244141\n","get_open_info_df elapsed time : 1.1325628757476807\n","en_ex_pairing elapsed time : 4.9015138149261475\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:root:wave_point\n","WARNING:root:np.sum(short_open_res1 == 1) : 42048\n","WARNING:root:np.sum(long_open_res1 == 1) : 42240\n","WARNING:root:np.sum(short_open_res2 == 1) : 42048\n","WARNING:root:np.sum(long_open_res2 == 1) : 42240\n","WARNING:root:reject update_hl\n","WARNING:root:np.sum(short_open_res1 == 1) : 40427\n","WARNING:root:np.sum(long_open_res1 == 1) : 40130\n","WARNING:root:np.sum(short_open_res2 == 1) : 40427\n","WARNING:root:np.sum(long_open_res2 == 1) : 40130\n","WARNING:root:wave_mm\n","WARNING:root:np.sum(short_open_res1 == 1) : 40425\n","WARNING:root:np.sum(long_open_res1 == 1) : 40128\n"]},{"output_type":"stream","name":"stdout","text":["idep_plot elapsed time : 0.3125646114349365\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:root:point validation\n","WARNING:root:np.sum(short_open_res1 == 1) : 28319\n","WARNING:root:np.sum(long_open_res1 == 1) : 28683\n","WARNING:root:cu_wrr_32_ <= config.loc_set.point1.wrr_32 : 0.54867 0.60000 (1.0)\n","WARNING:root:co_wrr_32_ <= config.loc_set.point1.wrr_32 : 1.00000 0.60000 (0.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 1.008387565612793\n","get_open_info_df elapsed time : 1.125178575515747\n","en_ex_pairing elapsed time : 8.5075364112854\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:root:wave_point\n","WARNING:root:np.sum(short_open_res1 == 1) : 42048\n","WARNING:root:np.sum(long_open_res1 == 1) : 42240\n","WARNING:root:np.sum(short_open_res2 == 1) : 42048\n","WARNING:root:np.sum(long_open_res2 == 1) : 42240\n","WARNING:root:reject update_hl\n","WARNING:root:np.sum(short_open_res1 == 1) : 40427\n","WARNING:root:np.sum(long_open_res1 == 1) : 40130\n","WARNING:root:np.sum(short_open_res2 == 1) : 40427\n","WARNING:root:np.sum(long_open_res2 == 1) : 40130\n","WARNING:root:wave_mm\n","WARNING:root:np.sum(short_open_res1 == 1) : 40425\n","WARNING:root:np.sum(long_open_res1 == 1) : 40128\n"]},{"output_type":"stream","name":"stdout","text":["idep_plot elapsed time : 0.35973072052001953\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:root:point validation\n","WARNING:root:np.sum(short_open_res1 == 1) : 28319\n","WARNING:root:np.sum(long_open_res1 == 1) : 28683\n","WARNING:root:cu_wrr_32_ <= config.loc_set.point1.wrr_32 : 0.54867 0.70000 (1.0)\n","WARNING:root:co_wrr_32_ <= config.loc_set.point1.wrr_32 : 1.00000 0.70000 (0.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 1.025289535522461\n","get_open_info_df elapsed time : 1.1360254287719727\n","en_ex_pairing elapsed time : 12.39824891090393\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:root:wave_point\n","WARNING:root:np.sum(short_open_res1 == 1) : 42048\n","WARNING:root:np.sum(long_open_res1 == 1) : 42240\n","WARNING:root:np.sum(short_open_res2 == 1) : 42048\n","WARNING:root:np.sum(long_open_res2 == 1) : 42240\n","WARNING:root:reject update_hl\n","WARNING:root:np.sum(short_open_res1 == 1) : 40427\n","WARNING:root:np.sum(long_open_res1 == 1) : 40130\n","WARNING:root:np.sum(short_open_res2 == 1) : 40427\n","WARNING:root:np.sum(long_open_res2 == 1) : 40130\n","WARNING:root:wave_mm\n","WARNING:root:np.sum(short_open_res1 == 1) : 40425\n","WARNING:root:np.sum(long_open_res1 == 1) : 40128\n"]},{"output_type":"stream","name":"stdout","text":["idep_plot elapsed time : 0.39333009719848633\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:root:point validation\n","WARNING:root:np.sum(short_open_res1 == 1) : 28319\n","WARNING:root:np.sum(long_open_res1 == 1) : 28683\n","WARNING:root:cu_wrr_32_ <= config.loc_set.point1.wrr_32 : 0.54867 0.80000 (1.0)\n","WARNING:root:co_wrr_32_ <= config.loc_set.point1.wrr_32 : 1.00000 0.80000 (0.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 1.034311056137085\n","get_open_info_df elapsed time : 1.1319921016693115\n","en_ex_pairing elapsed time : 16.35196018218994\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:root:wave_point\n","WARNING:root:np.sum(short_open_res1 == 1) : 42048\n","WARNING:root:np.sum(long_open_res1 == 1) : 42240\n","WARNING:root:np.sum(short_open_res2 == 1) : 42048\n","WARNING:root:np.sum(long_open_res2 == 1) : 42240\n","WARNING:root:reject update_hl\n","WARNING:root:np.sum(short_open_res1 == 1) : 40427\n","WARNING:root:np.sum(long_open_res1 == 1) : 40130\n","WARNING:root:np.sum(short_open_res2 == 1) : 40427\n","WARNING:root:np.sum(long_open_res2 == 1) : 40130\n","WARNING:root:wave_mm\n","WARNING:root:np.sum(short_open_res1 == 1) : 40425\n","WARNING:root:np.sum(long_open_res1 == 1) : 40128\n"]},{"output_type":"stream","name":"stdout","text":["idep_plot elapsed time : 0.41879725456237793\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:root:point validation\n","WARNING:root:np.sum(short_open_res1 == 1) : 28319\n","WARNING:root:np.sum(long_open_res1 == 1) : 28683\n","WARNING:root:cu_wrr_32_ <= config.loc_set.point1.wrr_32 : 0.54867 0.90000 (1.0)\n","WARNING:root:co_wrr_32_ <= config.loc_set.point1.wrr_32 : 1.00000 0.90000 (0.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 1.0511291027069092\n","get_open_info_df elapsed time : 1.1418323516845703\n","en_ex_pairing elapsed time : 19.928776502609253\n","idep_plot elapsed time : 0.41760993003845215\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1728x576 with 36 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["# from google.colab import output\n","# ------------ survey param ------------ #\n","# itv_num_list = [1, 3, 5, 15]\n","# itv_list = ['15m', '30m', '1h', '4h']\n","# itv_list = ['3m', '5m', '15m', '30m', '1h', '4h']\n","val_list = np.arange(0.1, 1, 0.1)     # prcn 1\n","# val_list = np.arange(-0.5, 0.5, 0.05)  # prcn 2\n","# val_list = np.arange(-0.5, 0., 0.03)  # prcn 2\n","# val_list = np.arange(-0.5, -0.6, -0.005)    # prcn 3\n","# val_list = np.arange(0.944, 0.945, 0.0001)    # prcn 4\n","# val_list = np.arange(1, 10, 1)   # prcn -1\n","# val_list = np.arange(100, 120, 1)   # prcn -2\n","# val_list = talib.get_function_groups()['Pattern Recognition']\n","\n","# ------------ get survey_res ------------ #\n","result = []\n","res_shape = (3, 12)  # short, long, both x data\n","config_list_copy = copy.deepcopy(config_list)\n","for set_val in val_list:\n","  # ------------ open 결정 이전의 인자값 ------------ #\n","  # ------ point * dur. ------ #\n","  config_list_copy[0].loc_set.point1.wrr_32 = set_val\n","  # config_list_copy[0].loc_set.point1.candle_pattern = set_val\n","  # config_list_copy[0].loc_set.zone.degree_list = set_val\n","  # config_list_copy[0].loc_set.point2.wick_score_list = str([set_val])\n","  # config_list_copy[0].loc_set.zone.ir = set_val  \n","  # config_list_copy[0].loc_set.zone.abs_ratio = set_val\n","\n","  # ------------ open 결정 이후의 인자값 ------------ #\n","  # ------ utils ------ #\n","  # config_list_copy[0].tr_set.tp_gap = set_val  \n","  # config_list_copy[0].tr_set.ep_gap1 = set_val \n","  # config_list_copy[0].tr_set.ep_gap2 = set_val \n","  # config_list_copy[0].tr_set.out_gap = set_val  \n","  # config_list_copy[0].tr_set.wave_length1 = set_val  \n","  # config_list_copy[0].tr_set.wave_time_ratio1 = set_val\n","\n","  # config_list_copy[0].tr_set.tp_gap = abs(set_val) - 0.5\n","  # config_list_copy[0].tr_set.out_gap = set_val + 0.5\n","  # config_list_copy[0].tr_set.wb_tp_gap = config_list_copy[0].tr_set.tp_gap\n","  # config_list_copy[0].tr_set.wb_out_gap = config_list_copy[0].tr_set.out_gap\n","\n","  # ------ entry, exit (ep, tp, out vars.) ------ #\n","  # config_list_copy[0].tr_set.expire_k = set_val\n","  # config_list_copy[0].ep_set.expire_tick = set_val  \n"," \n","  for utils_, config_ in zip(utils_list, config_list_copy):\n","    enlist_tr(res_df, config_, np_timeidx)\n","  # open_info_df = get_open_info_df(ep_loc_v3, res_df, np_timeidx, ID_list, config_list_copy, id_idx_list)   # point * mr_res 이기 때문에 utils_tr & rtc 의 영향을 충분히 받음\n","  open_info_df1 = get_open_info_df_v2(ep_loc_p1_v3, res_df, np_timeidx, ID_list, config_list_copy, id_idx_list, open_num=1)  # --> point * dur. 관련 (loc_set) param 에 종속 (open_info 가 변경되는게 아니라면, 재실행할 필요없음)\n","  open_info_df2 = get_open_info_df_v2(ep_loc_p2_v3, res_df, np_timeidx, ID_list, config_list_copy, id_idx_list, open_num=2)\n","  open_info_df_list = [open_info_df1, open_info_df2]\n","\n","  try:\n","    result.append(get_res_v9(res_df, open_info_df_list, ohlc_list, config_list_copy, np_timeidx, funcs, test_ratio=test_ratio, plot_is=1, signi=True))    \n","  except:\n","    result.append(np.full(res_shape, np.nan))\n","    # pass\n","\n","survey_res_list = [np.array(result)[:, s_i::3] for s_i in range(3)]   # 3 for s, l, b\n","# short_res, long_res, both_res = survey_res_list\n","\n","# ------------ plot survey_res ------------ #\n","title_list = [\"short\", \"long\", \"both\"]\n","sub_title_list = ['hhm', 'hlm', 'frq', 'dpf', 'wr', 'sr', 'acc_pr', 'sum_pr', 'min_pr', 'liqd', 'acc_mdd', 'sum_mdd']\n","space_ = \" \" * 120\n","\n","fig = plt.figure(figsize=(24, 8))\n","plt.style.use('dark_background')\n","gs = gridspec.GridSpec(nrows=1,\n","                        ncols=3,\n","                        # height_ratios=[1, 1, 1]\n","                      )\n","# nrows, ncols, h_r = 3, 3, [1, 1, 1]\n","nrows, ncols, h_r = 3, 4, [1, 1, 1]\n","# nrows, ncols, h_r = 4, 3, [1, 1, 1, 1]\n","# if d_idx == 0:\n","# else:\n","  # nrows, ncols, h_r = 2, 2, [1, 1]\n","\n","for d_idx, (title_name, survey_res) in enumerate(zip(title_list, survey_res_list)):  \n","  inner_gs = gs[d_idx].subgridspec(nrows=nrows,\n","                        ncols=ncols,\n","                        height_ratios=h_r\n","                      )\n","  for in_idx, (data_, sub_title) in enumerate(zip(survey_res.T, sub_title_list)):\n","    plt.subplot(inner_gs[in_idx])\n","    data = data_.ravel()\n","    valid_idx = ~np.isnan(data)\n","    if np.sum(valid_idx) > 0:\n","      if type(val_list[0]) == str:\n","        x, y = np.arange(len(val_list))[valid_idx], data[valid_idx]\n","      else:\n","        x, y = val_list[valid_idx], data[valid_idx]\n","      plt.plot(x, y)  # 앞에서부터 len(result) 만큼만    \n","      plt.title(sub_title + '_{:.2f}'.format(x[np.argmax(y)]))\n","    else:\n","      plt.title(sub_title)\n","\n","plt.suptitle(space_.join(title_list))\n","plt.show()\n","# print(\"\\n\")"]},{"cell_type":"markdown","metadata":{"id":"EJ4f-3Zf4ImT"},"source":["### backtrader validation"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"BPI-9QX74ImW"},"outputs":[],"source":["trade_log_name = \"ETHUSDT_1658210884.pkl\"\n","trade_log_dir_path = \"./trade_log/0717_5_47_trader\"\n","\n","with open(os.path.join(trade_log_dir_path, trade_log_name), 'rb') as f:\n","  trade_log = pickle.load(f)"]},{"cell_type":"code","source":["trade_log  # both pos_side's log"],"metadata":{"id":"9Kymnik4ZpA6"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"DiTKuq9T4ImY","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1658222594162,"user_tz":-540,"elapsed":431,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"a06c3f6a-311d-4a7d-c425-00563fd8980f"},"outputs":[{"output_type":"stream","name":"stdout","text":["lacked_open_ts : []\n","added_open_ts : ['2022-01-14 17:27:59.999000']\n","\n","lacked_entry_ts : []\n","added_entry_ts : ['2022-01-14 17:28:59.999000']\n","\n","lacked_exit_ts : []\n","added_exit_ts : ['2022-01-14 19:53:59.999000']\n","\n"]}],"source":["# 1. ts 에 pair 된 en_p, ex_p 만 비교하면 될 것\n","#   -> open_idx, en_idx, ex_idx 조회하면 될 것\n","\n","pos_side = \"SELL\" # BUY\n","val_obj = short_obj if pos_side == \"SELL\" else long_obj\n","\n","# ------ get idep trade_info ------ #\n","op_ts = list(map(lambda x : str(x), res_df.index[val_obj[4].astype(int).ravel()])) \n","en_ts = list(map(lambda x : str(x), res_df.index[val_obj[2].astype(int).ravel()])) \n","ex_ts = list(map(lambda x : str(x), res_df.index[val_obj[3].astype(int).ravel()])) \n","en_p = val_obj[0].ravel()\n","ex_p = val_obj[1].ravel()\n","\n","for order_type, ts_ in zip(['open', 'entry', 'exit'], [op_ts, en_ts, ex_ts]):\n","  trade_log_ts = [k for k, v in trade_log.items() if order_type in v if pos_side in v]\n","  lacked_ts = [ts for ts in ts_ if not ts in trade_log_ts]\n","  added_ts = [ts for ts in trade_log_ts if not ts in ts_]\n","\n","  print(\"lacked_{}_ts :\".format(order_type), lacked_ts)\n","  print(\"added_{}_ts :\".format(order_type), added_ts)\n","  print()"]},{"cell_type":"code","source":["# ex_ts\n","# [k for k, v in trade_log.items() if order_type in v if pos_side in v]\n","# list(trade_log.keys())[1]\n","res_df.iloc[-0:]"],"metadata":{"id":"ZlcPZeuO-UnB"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["#### check added_ts"],"metadata":{"id":"bPfWgZCI73LZ"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"VnTmGTJI4ImZ"},"outputs":[],"source":["keys = list(trade_log.keys())\n","\n","for k_i in range(len(keys)):\n","  if keys[k_i] in added_ts:\n","    # print(trade_log[keys[k_i]])\n","    # print(trade_log[keys[k_i + 1]])\n","    print(keys[k_i], trade_log[keys[k_i]])\n","    print(keys[k_i + 1], trade_log[keys[k_i + 1]])"]},{"cell_type":"markdown","source":["#### price sync_check"],"metadata":{"id":"yMFIedEG77Yt"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"Vn5x7mcP4ImZ","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1658223074884,"user_tz":-540,"elapsed":378,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"96d56d1e-03f6-472a-cddd-5f449f3001ba"},"outputs":[{"output_type":"stream","name":"stdout","text":["2022-01-17 03:19:59.999000 -0.00580000000036307\n","\n","2022-01-18 16:49:59.999000 0.0\n","\n","2022-01-27 05:56:59.999000 -0.007399999999961437\n","\n","2022-01-27 11:51:59.999000 0.0\n","\n","2022-02-03 01:29:59.999000 0.0\n","\n","2022-02-05 10:58:59.999000 0.0\n","\n","2022-02-08 17:00:59.999000 -0.00559999999950378\n","\n","2022-02-13 07:03:59.999000 -0.003800000000410364\n","\n","2022-02-16 10:32:59.999000 -0.0039999999999054126\n","\n","2022-02-16 13:43:59.999000 0.0\n","\n"]}],"source":["accept_price_gap = 0.1\n","for i in range(len(en_ts)):\n","  try:\n","    print(en_ts[i], trade_log[en_ts[i]][0] - en_p[i])\n","    # print(trade_log[str(ex_ts[i])])\n","    # print(ex_ts[i], trade_log[ex_ts[i]][0] - ex_p[i])\n","    # print(ex_ts[i])\n","    print()\n","\n","  except Exception as e:\n","    print(e)\n"]},{"cell_type":"markdown","metadata":{"id":"1GVZ03zDyU2N"},"source":["### legacy"]},{"cell_type":"markdown","metadata":{"id":"IWO7KkqltMFt"},"source":["#### main_functions"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"MY1csdNRLGsk"},"outputs":[],"source":["def get_open_info_df_v2(ep_loc_v2, res_df, np_timeidx, ID_list, config_list, id_idx_list, open_num=1):\n","  start_0 = time.time()\n","  # ------ get mr_res, zone_arr ------ #\n","  short_mr_res_obj = np.array([ep_loc_v2(res_df, config_, np_timeidx, show_detail=True, ep_loc_side=OrderSide.SELL) for config_ in config_list])\n","  long_mr_res_obj = np.array([ep_loc_v2(res_df, config_, np_timeidx, show_detail=True, ep_loc_side=OrderSide.BUY) for config_ in config_list])\n","  short_open_idx_list = [np.where(res_df['short_open{}_{}'.format(open_num, id)].to_numpy() * mr_res)[0] for id, mr_res in zip(ID_list, short_mr_res_obj[:, 0].astype(np.float64))]   # \"point * mr_Res\"\n","  long_open_idx_list = [np.where(res_df['long_open{}_{}'.format(open_num, id)].to_numpy() * mr_res)[0] for id, mr_res in zip(ID_list, long_mr_res_obj[:, 0].astype(np.float64))]  # zip 으로 zone (str) 과 묶어서 dtype 변경됨\n","\n","  # ------ open_info_arr ------ #\n","  short_side_list = [np.full(len(list_), OrderSide.SELL) for list_ in short_open_idx_list]\n","  long_side_list = [np.full(len(list_), OrderSide.BUY) for list_ in long_open_idx_list]\n","\n","  short_zone_list = [zone_res[short_open_idx] for zone_res, short_open_idx in zip(short_mr_res_obj[:, 1], short_open_idx_list)]\n","  long_zone_list = [zone_res[long_open_idx] for zone_res, long_open_idx in zip(long_mr_res_obj[:, 1], long_open_idx_list)]\n","\n","  short_id_list = [np.full(len(list_), id) for id, list_ in zip(ID_list, short_open_idx_list)]\n","  long_id_list = [np.full(len(list_), id) for id, list_ in zip(ID_list, long_open_idx_list)]\n","\n","  selected_id_idx = np.arange(len(id_idx_list))\n","  short_id_idx_list = [np.full(len(list_), id) for id, list_ in zip(selected_id_idx, short_open_idx_list)]\n","  long_id_idx_list = [np.full(len(list_), id) for id, list_ in zip(selected_id_idx, long_open_idx_list)]\n","\n","  # ------ get open_info_df ------ #\n","  #   series 만들어서 short / long 끼리 합치고 둘이 합치고, 중복은 우선 순위 정해서 제거\n","  short_open_df_list = [pd.DataFrame(index=index_, data=np.vstack((data_)).T, columns=['side', 'zone', 'id', 'id_idx']) for index_, data_ in zip(short_open_idx_list, zip(short_side_list, short_zone_list, short_id_list, short_id_idx_list))]\n","  long_open_df_list = [pd.DataFrame(index=index_, data=np.vstack((data_)).T, columns=['side', 'zone', 'id', 'id_idx']) for index_, data_ in zip(long_open_idx_list, zip(long_side_list, long_zone_list, long_id_list, long_id_idx_list))]\n","\n","  open_info_df = pd.concat(short_open_df_list + long_open_df_list)\n","  # ------ sorting + unique ------ #\n","  open_info_df.sort_index(inplace=True)\n","  # print(len(open_info_df))\n","  # print(len(open_info_df))\n","  # open_info_df.head()\n","  print(\"get_open_info_df elapsed time :\", time.time() - start_0)\n","  return open_info_df[~open_info_df.index.duplicated(keep='first')]  # 먼저 순서를 우선으로 지정  "]},{"cell_type":"code","execution_count":null,"metadata":{"id":"eiQ36_SLLE3w"},"outputs":[],"source":["def get_res_v9(res_df, open_info_df_list, ohlc_list, config_list, np_timeidx, funcs, inversion=False, test_ratio=0.3, plot_is=True, signi=False, show_detail=False):\n","  # ------------ make open_info_list ------------ #\n","  open_idx1, open_idx2 = [open_info_df.index.to_numpy() for open_info_df in open_info_df_list]\n","  len_df = len(res_df)\n","\n","  sample_len = int(len_df * (1 - test_ratio))\n","  sample_idx1 = (open_idx1 < sample_len) == plot_is  # in / out sample plot 여부\n","  sample_open_idx1 = open_idx1[sample_idx1]  \n","  sample_idx2 = (open_idx2 < sample_len) == plot_is  # in / out sample plot 여부\n","\n","  # ------------ open_info_list 기준 = p1 ------------ #\n","  sample_open_info_df1, sample_open_info_df2 = [df_[idx_] for df_, idx_ in zip(open_info_df_list, [sample_idx1, sample_idx2])]\n","  open_info1 = [sample_open_info_df1[col_].to_numpy() for col_ in sample_open_info_df1.columns]\n","\n","  if config_list[0].tr_set.check_hlm in [0, 1]:   # 여기서 open_info 자동화하더라도, utils info 는 직접 실행해주어야함\n","    sample_open_idx2 = sample_open_idx1\n","    open_info2 = open_info1\n","  else:\n","    sample_open_idx2 = open_idx2[sample_idx2]\n","    open_info2 = [sample_open_info_df2[col_].to_numpy() for col_ in sample_open_info_df2.columns]\n","\n","  # ------------ get paired_res ------------ #\n","  start_0 = time.time()\n","  paired_res = en_ex_pairing_v9_4(res_df, [sample_open_idx1, sample_open_idx2], [open_info1, open_info2], ohlc_list, config_list, np_timeidx, funcs, show_detail)\n","  # valid_openi_arr, pair_idx_arr, pair_price_arr, lvrg_arr, fee_arr, tpout_arr = paired_res\n","  print(\"en_ex_pairing elapsed time :\", time.time() - start_0)  #  0.37 --> 0.3660471439361572 --> 0.21(lesser if)\n","\n","  # ------------ idep_plot ------------ #\n","  start_0 = time.time()\n","  high, low = ohlc_list[1:3]\n","  res = idep_plot_v16_2(res_df, len_df, config_list[0], high, low, sample_open_info_df1, paired_res, inversion=inversion, sample_ratio=1 - test_ratio, signi=signi)\n","  print(\"idep_plot elapsed time :\", time.time() - start_0)   # 1.40452 (v6) 1.4311 (v5)\n","\n","  return res"]},{"cell_type":"code","source":["def plot_info_v9(gs, gs_idx, len_df, sample_len, tr, hhm, p2_hhm, out_hhm, mean_low, hlm, bars_in, net_p1_frq, pr, total_pr, cum_pr, liqd, leverage, title_position, fontsize):\n","  try:\n","    plt.subplot(gs[gs_idx])\n","    idep_res_obj = get_res_info_nb_v2(sample_len, pr, total_pr, cum_pr, liqd)\n","    plt.plot(cum_pr)\n","    plt.plot(idep_res_obj[-1], color='gold')\n","    if sample_len is not None:\n","      plt.axvline(sample_len, alpha=1., linestyle='--', color='#ffeb3b')\n","    plt.xlim(0, len_df)\n","\n","    title_str = \"tr : {:.3f}\\n tpbox_hhm : {:.3f}\\n tpbox_p2exec_hhm : {:.3f}\\n outbox_hhm : {:.3f}\\n tpbox_mean_low : {:.3f}\\n hlm : {:.3f}\\n bars_in : {:.3f}\\n net_p1_frq : {}\\n frq : {}\\n dpf : {:.3f}\\n wr : {:.3f}\\n sr : {:.3f}\\n acc_pr : {:.3f}\\n sum_pr : {:.3f}\\n\" +\\\n","              \"min_pr : {:.3f}\\n liqd : {:.3f}\\n acc_mdd : -{:.3f}\\n sum_mdd : -{:.3f}\\n leverage {:.3f}\"\n","    plt.title(title_str.format(tr, hhm, p2_hhm, out_hhm, mean_low, hlm, bars_in, net_p1_frq, *idep_res_obj[:-1], leverage), position=title_position, fontsize=fontsize)\n","  except Exception as e:\n","    print(\"error in plot_info :\", e)\n","\n","  return gs_idx + 1"],"metadata":{"id":"8hdpN7S8JJF-"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"xafHpMLwESKf"},"outputs":[],"source":["def idep_plot_v16_2(res_df, len_df, config, high, low, open_info_df1, paired_res, inversion=False, sample_ratio=0.7, title_position=(0.5, 0.5),\n","                  fontsize=15, signi=False):  # open_idx, side_arr\n","    if not signi:\n","        plt.style.use(['dark_background', 'fast'])\n","        plt.figure(figsize=(24, 8))\n","        gs = gridspec.GridSpec(nrows=2,  # row 몇 개\n","                               ncols=3,  # col 몇 개\n","                               height_ratios=[10, 1]\n","                               # height_ratios=[10, 10, 1]\n","                               )\n","    gs_idx = 0\n","    # plt.suptitle(key)\n","\n","    p_ranges, p_qty_ratio = literal_eval(config.tp_set.p_ranges), literal_eval(config.tp_set.p_qty_ratio)\n","    assert np.sum(p_qty_ratio) == 1.0\n","    assert len(p_ranges) == len(p_qty_ratio)\n","\n","    if sample_ratio is not None:\n","        sample_len = int(len_df * sample_ratio)\n","    else:\n","        sample_len = len_df\n","\n","    # ------ short & long data preparation ------ #\n","    # start_0 = time.time()\n","\n","    net_p1_idx_arr, p1_idx_arr, p2_idx_arr, pair_idx_arr, pair_price_arr, lvrg_arr, fee_arr, tpout_arr, tr_arr = paired_res\n","    assert len(p1_idx_arr) != 0, \"assert len(p1_idx_arr) != 0\"\n","\n","    short_net_p1_idx_arr = net_p1_idx_arr[np.where(open_info_df1.side.loc[net_p1_idx_arr] == OrderSide.SELL)[0]]\n","    long_net_p1_idx_arr = net_p1_idx_arr[np.where(open_info_df1.side.loc[net_p1_idx_arr] == OrderSide.BUY)[0]]\n","\n","    short_net_p1_frq = len(short_net_p1_idx_arr)\n","    long_net_p1_frq = len(long_net_p1_idx_arr)\n","    # print(\"len(short_net_p1_true_bias_bool) :\", len(short_net_p1_idx_arr))\n","    # print(\"len(long_net_p1_true_bias_bool) :\", len(long_net_p1_idx_arr))\n","\n","    short_p1_openi_idx = np.where(open_info_df1.side.loc[p1_idx_arr] == OrderSide.SELL)[0]  # p1_idx_arr 에 대한 idx, # side_arr,\n","    long_p1_openi_idx = np.where(open_info_df1.side.loc[p1_idx_arr] == OrderSide.BUY)[0]\n","\n","    # p1_idx = open_idx[p1_openi_arr].reshape(-1, 1)   # != p1_idx_arr, p1_openi_arr 은 exit_done 기준임\n","\n","    np_obj = np.hstack((pair_price_arr, pair_idx_arr, p1_idx_arr.reshape(-1, 1)))  # p1_idx_arr is 1d, need to be changed to 2d (for stacking)\n","    short_obj = np_obj[short_p1_openi_idx]\n","    long_obj = np_obj[long_p1_openi_idx]\n","    both_obj = np.vstack((short_obj, long_obj))\n","    # print(\"short_obj.shape :\", short_obj.shape)\n","    # print(\"long_obj.shape :\", long_obj.shape)\n","\n","    short_obj, long_obj, both_obj = [np.split(obj_, 5, axis=1) for obj_ in [short_obj, long_obj, both_obj]]\n","\n","    short_p2_idx_arr, long_p2_idx_arr = [p2_idx_arr[openi_idx_].reshape(-1, 1) for openi_idx_ in [short_p1_openi_idx, long_p1_openi_idx]]\n","    short_lvrg_arr, long_lvrg_arr = [lvrg_arr[openi_idx_].reshape(-1, 1) for openi_idx_ in [short_p1_openi_idx, long_p1_openi_idx]]\n","    short_fee_arr, long_fee_arr = [fee_arr[openi_idx_].reshape(-1, 1) for openi_idx_ in [short_p1_openi_idx, long_p1_openi_idx]]\n","    short_tpout_arr, long_tpout_arr = [tpout_arr[openi_idx_] for openi_idx_ in [short_p1_openi_idx, long_p1_openi_idx]]\n","    # short_bias_arr, long_bias_arr = [bias_arr[openi_idx_] for openi_idx_ in [short_p1_openi_idx, long_p1_openi_idx]]\n","    short_tr_arr, long_tr_arr = [tr_arr[openi_idx_] for openi_idx_ in [short_p1_openi_idx, long_p1_openi_idx]]\n","    # print(\"long_bias_arr.shape :\", long_bias_arr.shape)\n","    # print(\"short / long arr setting elapsed time :\", time.time() - start_0)\n","\n","    # start_0 = time.time()\n","\n","    short_tpbox_hhm, long_tpbox_hhm, short_tpbox_p2exec_hhm, long_tpbox_p2exec_hhm, short_outbox_hhm, long_outbox_hhm, \\\n","          short_net_p1_bias_tick, long_net_p1_bias_tick, short_p2exec_p1_bias_tick, long_p2exec_p1_bias_tick, short_p2_true_bias_bool, long_p2_true_bias_bool, \\\n","          short_tp_1, short_tp_0, long_tp_1, long_tp_0, short_out_1, short_out_0, long_out_1, long_out_0, short_ep2_0, long_ep2_0 = \\\n","      get_wave_bias_v6(res_df, config, high, low, len_df, short_net_p1_idx_arr, long_net_p1_idx_arr, short_p2_idx_arr, long_p2_idx_arr, short_obj, long_obj)\n","\n","    # print(\"get_wave_bias elapsed time :\", time.time() - start_0)\n","    # print(\"short_net_p1_bias_tick, long_net_p1_bias_tick, short_p2exec_p1_bias_tick, long_p2exec_p1_bias_tick :\", short_net_p1_bias_tick, long_net_p1_bias_tick, short_p2exec_p1_bias_tick, long_p2exec_p1_bias_tick)\n","\n","    len_short, len_long = len(short_p1_openi_idx), len(long_p1_openi_idx)\n","\n","    # ------ plot_data ------ #\n","    try:\n","        # start_0 = time.time()\n","        if len_short == 0:\n","            short_pr = []\n","            gs_idx += 1\n","        else:\n","            short_tr = short_tr_arr.mean()\n","            short_pr, short_liqd = get_pr_v4(OrderSide.SELL, high, low, short_obj, short_tpout_arr, short_lvrg_arr, short_fee_arr, p_ranges,\n","                                             p_qty_ratio, inversion)\n","            short_total_pr = to_total_pr(len_df, short_pr, short_obj[-2])\n","            short_cum_pr = np.cumprod(short_total_pr)\n","            short_hlm = hlm(short_pr, short_p2_true_bias_bool)\n","            short_trade_ticks = np.mean(short_obj[-2] - short_obj[-1])\n","            if signi:\n","                short_idep_res_obj = (short_tpbox_p2exec_hhm, short_hlm) + get_res_info_nb_v2(sample_len, short_pr, short_total_pr, short_cum_pr, short_liqd)\n","            else:\n","                gs_idx = plot_info_v8(gs, gs_idx, len_df, sample_len, short_tr, short_tpbox_hhm, short_tpbox_p2exec_hhm, short_outbox_hhm, short_hlm, short_trade_ticks, short_net_p1_frq, short_pr, short_total_pr,\n","                                      short_cum_pr, short_liqd, short_lvrg_arr.mean(), title_position, fontsize)\n","        # print(\"short plot_data elapsed time :\", time.time() - start_0)\n","\n","    except Exception as e:\n","        gs_idx += 1\n","        print(\"error in short plot_data :\", e)\n","\n","    try:\n","        # start_0 = time.time()\n","        if len_long == 0:\n","            long_pr = []\n","            gs_idx += 1\n","        else:\n","            long_tr = long_tr_arr.mean()\n","            long_pr, long_liqd = get_pr_v4(OrderSide.BUY, high, low, long_obj, long_tpout_arr, long_lvrg_arr, long_fee_arr, p_ranges, p_qty_ratio,\n","                                           inversion)\n","            long_total_pr = to_total_pr(len_df, long_pr, long_obj[-2])\n","            long_cum_pr = np.cumprod(long_total_pr)\n","            # long_hhm = long_net_p1_hhm\n","            long_hlm = hlm(long_pr, long_p2_true_bias_bool)\n","            long_trade_ticks = np.mean(long_obj[-2] - long_obj[-1])\n","            if signi:\n","                long_idep_res_obj = (long_tpbox_p2exec_hhm, long_hlm) + get_res_info_nb_v2(sample_len, long_pr, long_total_pr, long_cum_pr, long_liqd)\n","            else:\n","                gs_idx = plot_info_v8(gs, gs_idx, len_df, sample_len, long_tr, long_tpbox_hhm, long_tpbox_p2exec_hhm, long_outbox_hhm, long_hlm, long_trade_ticks, long_net_p1_frq, long_pr, long_total_pr,\n","                                      long_cum_pr, long_liqd, long_lvrg_arr.mean(), title_position, fontsize)\n","        # print(\"long plot_data elapsed time :\", time.time() - start_0)\n","    except Exception as e:\n","        gs_idx += 1\n","        print(\"error in long plot_data :\", e)\n","\n","    try:\n","        # start_0 = time.time()\n","        if len_short * len_long == 0:\n","            both_pr = []\n","            gs_idx += 1\n","        else:\n","            both_tr = (short_tr + long_tr) / 2\n","            both_pr = np.vstack((short_pr, long_pr))  # for 2d arr, obj 를 1d 로 만들지 않는 이상, pr 은 2d 유지될 것\n","            both_total_pr = to_total_pr(len_df, both_pr, both_obj[-2])\n","            both_cum_pr = np.cumprod(both_total_pr)\n","            both_liqd = min(short_liqd, long_liqd)\n","            both_p2_true_bias_bool = np.hstack((short_p2_true_bias_bool, long_p2_true_bias_bool))  # hstack for 1d arr, vstack for 2d arr\n","            both_tpbox_hhm = (short_tpbox_hhm + long_tpbox_hhm) / 2\n","            both_tpbox_p2exec_hhm, both_hlm = (short_tpbox_p2exec_hhm + long_tpbox_p2exec_hhm) / 2, (short_hlm + long_hlm) / 2\n","            both_outbox_hhm = (short_outbox_hhm + long_outbox_hhm) / 2\n","            both_trade_ticks = np.mean(both_obj[-2] - both_obj[-1])\n","            both_net_p1_frq = short_net_p1_frq + long_net_p1_frq\n","            if signi:\n","                both_idep_res_obj = (both_tpbox_p2exec_hhm, both_hlm) + get_res_info_nb_v2(sample_len, both_pr, both_total_pr, both_cum_pr, both_liqd)\n","            else:\n","                gs_idx = plot_info_v8(gs, gs_idx, len_df, sample_len, both_tr, both_tpbox_hhm, both_tpbox_p2exec_hhm, both_outbox_hhm, both_hlm, both_trade_ticks, both_net_p1_frq, both_pr, both_total_pr,\n","                                      both_cum_pr, both_liqd, lvrg_arr.mean(), title_position, fontsize)\n","        # print(\"both plot_data elapsed time :\", time.time() - start_0)\n","    except Exception as e:\n","        gs_idx += 1\n","        print(\"error in both plot_data :\", e)\n","\n","    if not signi:\n","        if len_short * len_long > 0:\n","            for obj, bias_arr, cum_pr in zip([short_obj, long_obj, both_obj], [short_p2_true_bias_bool, long_p2_true_bias_bool, both_p2_true_bias_bool],\n","                                             [short_cum_pr, long_cum_pr, both_cum_pr]):\n","                try:\n","                    # start_0 = time.time()\n","                    gs_idx = frq_dev_plot_v4(gs, gs_idx, len_df, sample_len, obj[-2], bias_arr, cum_pr[-1], fontsize)\n","                    # print(\"frq_dev_plot elapsed time :\", time.time() - start_0)\n","                except Exception as e:\n","                    gs_idx += 1\n","                    print(\"error in frq_dev_plot :\", e)\n","            plt.show()\n","            plt.close()\n","\n","        return short_pr, short_obj, short_lvrg_arr, short_fee_arr, short_tpout_arr, short_tr_arr, short_p2_true_bias_bool, short_net_p1_bias_tick, short_p2exec_p1_bias_tick, short_net_p1_idx_arr, short_p2_idx_arr, short_tp_1, short_tp_0, short_out_1, short_out_0, short_ep2_0, \\\n","               long_pr, long_obj, long_lvrg_arr, long_fee_arr, long_tpout_arr, long_tr_arr, long_p2_true_bias_bool, long_net_p1_bias_tick, long_p2exec_p1_bias_tick, long_net_p1_idx_arr, long_p2_idx_arr, long_tp_1, long_tp_0, long_out_1, long_out_0, long_ep2_0  # long_net_p1_idx_arr long_p2_idx_arr\n","\n","    else:\n","        return [short_idep_res_obj[:-1], long_idep_res_obj[:-1], both_idep_res_obj[:-1]]"]},{"cell_type":"markdown","metadata":{"id":"EFyWTuscH8VH"},"source":["#### get paired_res function"]},{"cell_type":"code","source":["def en_ex_pairing_v9_4(res_df, open_idx_list, open_info_list, ohlc_list, config_list, np_timeidx, funcs, show_detail=False):  # 이미 충분히 줄여놓은 idx 임\n","\n","    open_info1, open_info2 = open_info_list\n","    side_arr1, _, _, id_idx_arr1 = open_info1\n","    side_arr2, _, _, _ = open_info2\n","\n","    expiry_p1, expiry_p2, lvrg_set = funcs\n","\n","    net_p1_idx_list, p1_idx_list, p2_idx_list, pair_idx_list, pair_price_list, lvrg_list, fee_list, tpout_list, tr_list = [[] for li in range(9)]\n","    len_df = len(res_df)\n","\n","    open, high, low, close = ohlc_list\n","    \n","    open_idx1, open_idx2 = open_idx_list\n","    len_open_idx1 = len(open_idx1)\n","    len_open_idx2 = len(open_idx2)\n","    i, open_i1, open_i2 = 0, -1, -1  # i for total_res_df indexing\n","\n","    while 1:   # for p1's loop\n","\n","        # Todo, \n","        #   1. (갱신) p1's open_i + 1 과 op_idx 를 꺼내오는 건, eik1 또는 tp 체결의 경우만 해당됨, \n","        #   2. out 의 경우 p2's op_idx 기준으로 retry 필요\n","        #     a. 또한, p2's op_idx > p1's op_idx\n","\n","        # ============ get p1_info ============ #\n","        # if eik1 or tp_done or first loop:\n","        open_i1 += 1  # 확인 끝났으면 조기 이탈(+1), 다음 open_idx 조사 진행\n","        if open_i1 >= len_open_idx1:\n","            break\n","\n","        if show_detail:\n","            print(\"open_i1 :\", open_i1, side_arr1[open_i1])\n","\n","        op_idx1 = open_idx1[open_i1]  # open_i1 는 i 와 별개로 운영\n","        if op_idx1 < i:  # i = 이전 거래 끝난후의 res_df index - \"거래 종료후 거래 시작\", '<' : 거래 종료시점 진입 가능하다는 의미\n","            continue\n","\n","        # ------ set loop index i ------ #\n","        i = op_idx1      # + 1 --> op_idx1 = op_idx2 가능함 # open_signal 이 close_bar.shift(1) 이라고 가정하고 다음 bar 부터 체결확인한다는 의미\n","        if i >= len_df:  # res_df 의 last_index 까지 돌아야함\n","            break        \n","\n","        # ------ dynamic arr info by ID ------ #\n","        #     1. 해당 id 로 config 재할당해야함\n","        #       a. use open_i1\n","        open_side = side_arr1[open_i1]\n","        id_idx = id_idx_arr1.astype(int)[open_i1]\n","        config = config_list[id_idx]\n","        selection_id = config.selection_id\n","        check_hlm = config.tr_set.check_hlm   \n","\n","        # check_net_hhm = 1 if (config.tr_set.wave_itv1 == config.tr_set.wave_itv2) and (config.tr_set.wave_period1 == config.tr_set.wave_period2) else 0\n","\n","        side_pos = 'short' if open_side == OrderSide.SELL else 'long'   \n","        if show_detail:\n","          print(\"============ op_idx1 : {} {} ============\".format(op_idx1, open_side))\n","     \n","        # if show_detail:\n","        #   print(\"check_hlm :\", check_hlm)\n","\n","        # ------ load tr_data ------ #\n","        tp_arr = res_df['{}_tp_{}'.format(side_pos, selection_id)].to_numpy()\n","        ep1_arr = res_df['{}_ep1_{}'.format(side_pos, selection_id)].to_numpy()\n","        ep2_arr = res_df['{}_ep2_{}'.format(side_pos, selection_id)].to_numpy()\n","        out_arr = res_df['{}_out_{}'.format(side_pos, selection_id)].to_numpy()\n","\n","        tr_arr = res_df['{}_tr_{}'.format(side_pos, selection_id)].to_numpy()  # just for p1_hhm\n","\n","        tp_1_ = res_df['{}_tp_1_{}'.format(side_pos, selection_id)].to_numpy()[op_idx1]  # for p2_box location & p1's exipiry\n","        tp_0_ = res_df['{}_tp_0_{}'.format(side_pos, selection_id)].to_numpy()[op_idx1]\n","        tp_gap_ = res_df['{}_tp_gap_{}'.format(side_pos, selection_id)].to_numpy()[op_idx1]    \n","\n","        # if not check_net_hhm:  # this phase exist for p1 entry (net hhm sync.) in p2_platform\n","        exec_j, ep_j, tp_j, out_j, entry_done, en_p, fee = check_entry_v6(res_df, config, config.ep_set.entry_type, op_idx1, tp_1_, tp_gap_, len_df, open_side,\n","                                                                                [*ohlc_list, ep1_arr], expiry_p2)        \n","        i = exec_j  # = entry_loop 를 돌고 나온 e_j\n","        if not entry_done:\n","            if show_detail:\n","              print(\"p1's expiry by expiry_p2 function in p1's loop : continue\")\n","            continue   \n","        # else:        \n","        #   tp_j = op_idx1\n","\n","        prev_open_i2 = open_i2\n","        net_p1_idx_list.append(op_idx1)\n","        # if check_hlm in [0, 1]:\n","        #   i = op_idx1  # allow op_idx2 = op_idx1\n","        allow_exit = 1\n","        # ============ entry loop ============ #\n","        while 1:  # for p2's loop (allow retry)\n","\n","          # ============ get p2_info ============ #\n","          if check_hlm in [1, 2]:\n","            open_i2 += 1  # 확인 끝났으면 조기 이탈(+1), 다음 open_idx 조사 진행\n","            if open_i2 >= len_open_idx2:  # open_i2 소진\n","                break\n","\n","            if show_detail:\n","              print(\"open_i2 :\", open_i2, side_arr2[open_i2])\n","\n","            # ------ check side sync. ------ #\n","            if open_side != side_arr2[open_i2]:\n","              continue\n","\n","            # ------ assert, op_idx2 >= exec_j ------ #\n","            op_idx2 = open_idx2[open_i2]  # open_i2 는 i 와 별개로 운영\n","            if check_hlm == 1 and allow_exit:\n","              if op_idx2 < op_idx1:\n","                continue\n","            else:\n","              if op_idx2 < i:   # p1 execution 이후의 i 를 허용 (old, 이곳 i = op_idx1 + 1 or p2's exec_j or exit_loop's i + 1)\n","                continue\n","            \n","            if check_hlm == 2:\n","              i = op_idx2 + 1  # open_signal 이 close_bar.shift(1) 이라고 가정하고 다음 bar 부터 체결확인한다는 의미\n","              if i >= len_df:  # res_df 의 last_index 까지 돌아야함\n","                  break\n","\n","            if show_detail:\n","              print(\"op_idx1, op_idx2 :\", op_idx1, op_idx2, side_arr2[open_i2])\n","              \n","          else:\n","            op_idx2 = op_idx1\n","\n","          tp_ = tp_arr[op_idx1]          \n","          ep2_ = ep2_arr[op_idx2]\n","          out_ = out_arr[op_idx2]\n","\n","          out_1_ = res_df['{}_out_1_{}'.format(side_pos, selection_id)].to_numpy()[op_idx2]\n","          out_0_ = res_df['{}_out_0_{}'.format(side_pos, selection_id)].to_numpy()[op_idx2]\n","          out_gap_ = res_df['{}_out_gap_{}'.format(side_pos, selection_id)].to_numpy()[op_idx2]  \n","\n","          # ------ const. for p2_wave ------ #\n","          wave_itv1 = config.tr_set.wave_itv1\n","          wave_period1 = config.tr_set.wave_period1\n","          wave_itv2 = config.tr_set.wave_itv2\n","          wave_period2 = config.tr_set.wave_period2\n","\n","          if check_hlm in [1, 2]:\n","            # ------ check p1's expiry - Todo, priority ------ # - p2_box 생성 이전의 hl_survey\n","            # 1. op_idx1 ~ op_idx2 까지의 hl_check \n","            # if check_hlm:  # p1_hlm, p2_hlm --> Todo, 이거를 왜 p1_hlm 에도 적용했는지 잘 모르겠음\n","            if op_idx1 < op_idx2:\n","              expire, touch_idx = expiry_p1(res_df, config, op_idx1, op_idx2, tp_1_, tp_0_, tp_gap_, ohlc_list[1:3], open_side)\n","              if expire:   # p1's expiry\n","                  if show_detail:\n","                    print(\"expiry_p1, touch_idx = {} : break\".format(touch_idx))\n","                  i = touch_idx  #  + 1  --> 이거 아닌것 같음 # op_idx1 과 op_idx2 사이의 op_idx1' 을 살리기 위함, 즉 바로 다음 op_idx1 로 회귀 (건너뛰지 않고)\n","                  open_i2 = prev_open_i2\n","                  break   # change op_idx1\n","\n","            if check_hlm == 2:\n","              # ------ p2 point_validation - vectorization unavailable ------ # p1_loop 로 return 되는 정확한 i 를 반환하기 위해서 expiry_p1 에 순서 양보  # Todo, 새로운 tp, ep, out 에 대한 처리 필요 (p1_hlm 사용시)\n","              if open_side == OrderSide.SELL:\n","                # --- p2_wave validation --- #\n","                wave_co_post_idx = res_df['wave_co_post_idx_fill_{}{}'.format(wave_itv2, wave_period2)].to_numpy()[op_idx2]\n","                if not (op_idx1 < wave_co_post_idx):\n","                  if show_detail:\n","                    print(\"p2_wave validation : continue\")\n","                  continue  # change op_idx2\n","\n","                # --- p2_wave high validation --- #\n","                # wave_high_fill1_ = res_df['wave_high_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()[op_idx1]\n","                # wave_high_fill2_ = res_df['wave_high_fill_{}{}'.format(wave_itv2, wave_period2)].to_numpy()[op_idx2]\n","                # if not (wave_high_fill1_ >= wave_high_fill2_):\n","                #   if show_detail:\n","                #     print(\"p2_wave high validation : continue\")\n","                #   continue  # change op_idx2\n","                  \n","                if not (tp_ < ep2_):  # tr_set validation & reject hl_out open_exec.\n","                  break  # change op_idx1\n","                elif not (ep2_ < out_ and close[op_idx2] < out_):\n","                  if show_detail:\n","                    print(\"point validation : continue\")\n","                  continue  # change op_idx2\n","              else:\n","                # --- p2_wave validation --- #\n","                wave_cu_post_idx = res_df['wave_cu_post_idx_fill_{}{}'.format(wave_itv2, wave_period2)].to_numpy()[op_idx2]\n","                if not (op_idx1 < wave_cu_post_idx):\n","                  if show_detail:\n","                    print(\"p2_wave validation : continue\")\n","                  continue  # change op_idx2\n","                \n","                # --- p2_wave low validation --- #\n","                # wave_low_fill1_ = res_df['wave_low_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()[op_idx1]\n","                # wave_low_fill2_ = res_df['wave_low_fill_{}{}'.format(wave_itv2, wave_period2)].to_numpy()[op_idx2]\n","                # if not (wave_low_fill1_ <= wave_low_fill2_):\n","                #   if show_detail:\n","                #     print(\"p2_wave low validation : continue\")\n","                #   continue  # change op_idx2\n","\n","                if not (tp_ > ep2_):              \n","                  break\n","                elif not (ep2_ > out_ and close[op_idx2] > out_):\n","                  if show_detail:\n","                    print(\"point validation : continue\")\n","                  continue\n","\n","              # ------ p2_box location ------ #\n","              if open_side == OrderSide.SELL:\n","                if not ((tp_1_ + tp_gap_ * config.tr_set.p2_box_k1 <= out_1_) and (out_0_ <= tp_0_ - tp_gap_ * config.tr_set.p2_box_k2)):  # tp1, tp0 에 닿으면 expiry\n","                # if not ((tp_1_ + tp_gap_ * config.tr_set.p2_box_k1 >= out_1_) and (out_0_ <= tp_0_ - tp_gap_ * config.tr_set.p2_box_k2)):  # tp1, tp0 에 닿으면 expiry\n","                  if show_detail:\n","                      print(\"p2_box rejection : continue\")\n","                  continue\n","                else:                \n","                  # ------ p1p2_low ------ #\n","                  if not high[op_idx1:op_idx2 + 1].max() < tp_0_ - tp_gap_ * config.tr_set.p1p2_low:\n","                    if show_detail:\n","                      print(\"p1p2_low rejection : continue\")\n","                    continue\n","              else:\n","                if not ((tp_1_ - tp_gap_ * config.tr_set.p2_box_k1 >= out_1_) and (out_0_ >= tp_0_ + tp_gap_ * config.tr_set.p2_box_k2)):\n","                # if not ((tp_1_ - tp_gap_ * config.tr_set.p2_box_k1 <= out_1_) and (out_0_ >= tp_0_ + tp_gap_ * config.tr_set.p2_box_k2)):\n","                  if show_detail:\n","                      print(\"p2_box rejection : continue\")\n","                  continue\n","                else:\n","                  # ------ p1p2_low ------ #\n","                  if not low[op_idx1:op_idx2 + 1].min() > tp_0_ + tp_gap_ * config.tr_set.p1p2_low:\n","                    if show_detail:\n","                      print(\"p1p2_low rejection : continue\")\n","                    continue\n","\n","              # ------ check p2's expiry ------ # - 현재, op_idx2 기준의 ep2_arr 을 사용 중임.\n","              # exec_j, ep_j, _, out_j, entry_done, en_p, fee = check_entry_v6(res_df, config, config.ep_set.point2.entry_type, op_idx2, tp_1_, tp_gap_, len_df, open_side,\n","              #                                                                         [*ohlc_list, ep2_arr], expiry_p2)   # Todo, tp_1 & tp_gap 사용이 맞을 것으로 봄                                                                                      \n","              exec_j, ep_j, _, out_j, entry_done, en_p, fee = check_entry_v6(res_df, config, config.ep_set.point2.entry_type, op_idx2, out_1_, out_gap_, len_df, open_side,\n","                                                                                      [*ohlc_list, ep2_arr], expiry_p2)   # Todo, tp_1 & tp_gap 사용이 맞을 것으로 봄\n","              i = exec_j  # = entry_loop 를 돌고 나온 e_j\n","              if not entry_done:   # p2's expiry\n","                  if show_detail:\n","                      print(\"expiry_p2, i = {} : continue\".format(i))\n","                  continue  # change op_idx2            \n","              \n","              # ------ devectorized tr_calc ------ # - en_p 에 대해 하는게 맞을 것으로봄\n","              if open_side == OrderSide.SELL:\n","                tr_ = abs((en_p / tp_ - config.trader_set.limit_fee - 1) / (en_p / out_ - config.trader_set.market_fee - 1))\n","              else:\n","                tr_ = abs((tp_ / en_p - config.trader_set.limit_fee - 1) / (out_ / en_p - config.trader_set.market_fee - 1))              \n","\n","              # ------ tr_threshold ------ #\n","              if config.loc_set.point2.short_tr_thresh != \"None\":\n","                if open_side == OrderSide.SELL:\n","                  if tr_ < config.loc_set.point2.short_tr_thresh:\n","                    if show_detail:\n","                      print(\"tr_threshold : continue\")\n","                    continue\n","                else:\n","                  if tr_ < config.loc_set.point2.long_tr_thresh:\n","                    if show_detail:\n","                      print(\"tr_threshold : continue\")\n","                    continue\n","                \n","          if not allow_exit:  # p1_hlm 의 경우, 한번 out 되면 price 가 wave_range 에 닿기전까지 retrade 를 허용하지 않는다. (expiry_p1 을 이용해 op_idx1 을 변경할 것)  \n","            if show_detail:\n","              print(\"allow_exit = {} : continue\".format(allow_exit))\n","            continue\n","\n","          if check_hlm in [0, 1]:\n","            tr_ = tr_arr[op_idx1]\n","\n","          # ------ leverage ------ #\n","          # out = out_arr[out_j]  # lvrg_set use out on out_j (out_j shoud be based on p2)\n","          leverage = lvrg_set(res_df, config, open_side, en_p, out_, fee)  # res_df 변수 사용됨 - 주석 처리 된 상태일뿐\n","          if leverage is None:\n","              if show_detail:\n","                    print(\"leverage is None : continue\")\n","              if check_hlm:\n","                continue  # change op_idx2\n","              else:\n","                break   # change op_idx1\n","\n","          exit_done, cross_on = 0, 0\n","          # ------ check tpout_onexec ------ #\n","          # if not config.ep_set.static_ep and config.ep_set.entry_type == \"LIMIT\" and config.ep_set.tpout_onexec:\n","          if config.ep_set.entry_type == \"LIMIT\":\n","              if config.tp_set.tp_onexec:  # dynamic 은 tp_onexec 사용하는 의미가 없음\n","                  tp_j = exec_j\n","              if config.out_set.out_onexec:  # dynamic 은 out_onexec 사용하는 의미가 없음\n","                  out_j = exec_j\n","\n","          # ============ exit loop ============ #\n","          while 1:\n","            if not config.tp_set.static_tp:  # 앞으로 왠만하면 static 만 사용할 예정\n","                tp_j = i\n","            if not config.out_set.static_out:\n","                out_j = i\n","\n","            # ------------ out ------------ #  # out 우선 (보수적 검증)\n","            # ------ signal_out ------ #\n","            if not exit_done:\n","                exit_done, cross_on, ex_p, fee = check_signal_out_v3(res_df, config, open_i2, i, len_df, fee, open_side, cross_on, exit_done, [*ohlc_list, np_timeidx])\n","            # ------ hl_out ------ #\n","            if config.out_set.hl_out:\n","                if not exit_done:  # and i != len_df - 1:\n","                    exit_done, ex_p, fee = check_hl_out_v2(config, i, out_j, len_df, fee, open_side, exit_done, [*ohlc_list, out_arr])\n","\n","            # ------------ tp ------------ #\n","            if not config.tp_set.non_tp and i != exec_j:\n","              if not exit_done:\n","                exit_done, ex_p, fee = check_limit_tp_exec(res_df, config, open_i2, i, tp_j, len_df, fee, open_side, exit_done,\n","                                                          [*ohlc_list, [tp_arr]])  # 여기서는 j -> i 로 변경해야함\n","                # if config.tp_set.tp_type in ['LIMIT']:  # 'BOTH' -> 앞으로는, LIMIT 밖에 없을거라 주석처리함\n","                # if not exit_done and config.tp_set.tp_type in ['MARKET', 'BOTH']:\n","\n","            if exit_done:  # 이 phase 는 exit_phase 뒤에도 있어야할 것 - entry_done var. 사용은 안하겠지만\n","                # ------ append dynamic vars. ------ #\n","                p1_idx_list.append(op_idx1)  # side, zone, start_ver arr 모두 openi_list 로 접근하기 위해 open_i 를 담음\n","                p2_idx_list.append(op_idx2)\n","                pair_idx_list.append([exec_j, i])  # entry & exit (체결 기준임)\n","                pair_price_list.append([en_p, ex_p])\n","                lvrg_list.append(leverage)\n","                fee_list.append(fee)\n","                tpout_list.append([tp_arr[tp_j], out_arr[out_j]])  # for tpout_line plot_check\n","                tr_list.append(tr_)   # Todo, tr vectorize 불가함, 직접 구해주어야할 건데.. (오래걸리지 않을까 --> tr_set 데이터만 모아서 vecto 계산이 나을 것)\n","\n","                # open_i += 1  # 다음 open_idx 조사 진행\n","                break\n","\n","            # 1. 아래있으면, 체결 기준부터 tp, out 허용 -> tp 가 entry_idx 에 체결되는게 다소 염려되기는 함, 일단 진행 (그런 case 가 많지 않았으므로)\n","            # 2. 위에있으면, entry 다음 tick 부터 exit 허용\n","            i += 1\n","            if i >= len_df:  # res_df 의 last_index 까지 돌아야함\n","                break\n","          \n","          if i >= len_df:  # res_df 의 last_index 까지 돌아야함\n","              break\n","\n","          if exit_done == 1:  # tp_done 은 check_hlm 여부와 무관하게 op_idx1 을 변경함\n","            if show_detail:\n","                    print(\"exit_done = {}, i = {} : break\".format(exit_done, i))\n","            break   # change op_idx1\n","          else:  # exit_done -> -1 or 0 (0 means end of df) \n","            if check_hlm in [1, 2]:\n","              if check_hlm == 1:   # exit only once in p1_hlm mode\n","                allow_exit = 0\n","              if show_detail:\n","                      print(\"exit_done = {}, i = {} : continue\".format(exit_done, i))\n","              continue  # change op_idx2\n","            else:\n","              if show_detail:\n","                      print(\"exit_done = {}, i = {} : break\".format(exit_done, i))\n","              break   # change op_idx1    \n","\n","        # if op_idx1 >= 16355:\n","        #   break\n","\n","        if i >= len_df:  # or open_i >= len_open_idx:  # res_df 의 last_index 까지 돌아야함\n","            break\n","        else:\n","            continue\n","\n","    return np.array(net_p1_idx_list), np.array(p1_idx_list), np.array(p2_idx_list), np.array(pair_idx_list), np.array(pair_price_list), np.array(lvrg_list), np.array(\n","        fee_list), np.array(tpout_list), np.array(tr_list)"],"metadata":{"id":"SVkrs1h1M2pl"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"qfbtFVMR01UJ"},"outputs":[],"source":["def check_entry_v6(res_df, config, entry_type, op_idx, wave1, wave_gap, len_df, open_side, np_datas, expiry):\n","    open, high, low, close, ep_arr = np_datas\n","    ep_j = op_idx\n","    tp_j = op_idx\n","    out_j = op_idx\n","\n","    # print(\"ep_arr[op_idx] :\", ep_arr[op_idx])\n","\n","    selection_id = config.selection_id    \n","    # allow_ep_in = 0 if config.ep_set.point2.use_point2 else 1\n","    entry_done = 0\n","    ep = None\n","\n","    if entry_type == \"LIMIT\":\n","        fee = config.trader_set.limit_fee\n","\n","        for e_j in range(op_idx + 1, len_df):\n","            # ------ index setting for dynamic options ------ #\n","            if not config.ep_set.static_ep:\n","                ep_j = e_j  # dynamic_ep 를 위한 ep_index var.\n","                out_j = e_j  # dynamic_out 를 위한 out_index var. - 조건식이 static_ep 와 같이 있는 이유 모름 => dynamic_lvrg 로 사료됨\n","\n","            if not config.tp_set.static_tp:\n","                tp_j = e_j\n","\n","            # ------ expire_k & expire_tick ------ # - limit 사용하면 default 로 expire_k 가 존재해야함\n","            if expiry(res_df, config, op_idx, e_j, wave1, wave_gap, [high, low], open_side):  # tp_j, \n","              break\n","\n","            # ------ point2 ------ #\n","            # if not allow_ep_in:\n","            #     allow_ep_in, out_j = ep_loc_point2(res_df, config, e_j, out_j, side=OrderSide.SELL)\n","            #     if allow_ep_in:\n","            #       if config.ep_set.point2.entry_type == \"LIMIT\":\n","            #         ep_j = e_j\n","            #         # print(\"e_j in point2 :\", e_j)\n","            #         continue\n","\n","            # ------ check ep_exec ------ #\n","            # if allow_ep_in:\n","              # if config.ep_set.point2.use_point2 and config.ep_set.point2.entry_type == 'MARKET':\n","              #   entry_done = 1\n","              #   ep = c[e_j]\n","              #   break\n","              # else:\n","\n","            if open_side == OrderSide.SELL:\n","              if high[e_j] >= ep_arr[ep_j]:\n","                  entry_done = 1\n","                  ep = ep_arr[ep_j]\n","                  if open[e_j] >= ep_arr[ep_j]:  # open comp 는 결국, 수익률에 얹어주는 logic (반보수) -> 사용 보류\n","                      ep = open[e_j]\n","                  break\n","            else:\n","              if low[e_j] <= ep_arr[ep_j]:\n","                  entry_done = 1\n","                  ep = ep_arr[ep_j]\n","                  if open[e_j] <= ep_arr[ep_j]:\n","                      ep = open[e_j]\n","                  break\n","\n","    else:  # market entry\n","        e_j = op_idx + 1\n","        entry_done = 1\n","        ep = close[op_idx]\n","        fee = config.trader_set.market_fee\n","\n","    return e_j, ep_j, tp_j, out_j, entry_done, ep, fee  # 다음 start_i <-- e_j 로 변경\n","    #   e_j => 다음 phase 의 시작 index <-> ep_j : ep 의 기준 index\n","    #   ep_j, tp_j, out_j 가 return 되어야함 - exit phase 에서 이어가기 위함\n","\n","\n","def check_limit_tp_exec(res_df, config, open_i, i, tp_j, len_df, fee, open_side, exit_done, np_datas):\n","\n","    open, high, low, close, tps = np_datas\n","    tp = None\n","    selection_id = config.selection_id\n","    len_tps = len(tps)\n","\n","    for tp_i, tp_arr in enumerate(tps):\n","\n","        #     decay adjustment    #\n","        #     tp_j includes dynamic_j - functionalize  #\n","        # try:\n","        #     if config.tr_set.decay_gap != \"None\":\n","        #         decay_share = (j - open_i) // config.tp_set.decay_term\n","        #         decay_remain = (j - open_i) % config.tp_set.decay_term\n","        #         if j != open_i and decay_remain == 0:\n","        #             if open_side == OrderSide.SELL:\n","        #                 tp_arr[tp_j] += res_df['short_tp_gap_{}'.format(selection_id)].iloc[open_i] * config.tr_set.decay_gap * decay_share\n","        #             else:\n","        #                 tp_arr[tp_j] -= res_df['long_tp_gap_{}'.format(selection_id)].iloc[open_i] * config.tr_set.decay_gap * decay_share\n","        # except:\n","        #     pass\n","\n","        if open_side == OrderSide.SELL:\n","            if low[i] <= tp_arr[tp_j]:  # and partial_tp_cnt == tp_i:  # we use static tp now\n","                # if low[i] <= tp_arr[i] <= h[i]: --> 이건 잘못되었음\n","                # partial_tp_cnt += 1 --> partial_tp 보류\n","\n","                # ------ dynamic tp ------ #\n","                if tp_arr[i] != tp_arr[i - 1] and not config.tp_set.static_tp:\n","                    # tp limit 이 불가한 경우 - open 이 이미, tp 를 넘은 경우\n","                    if open[i] < tp_arr[i]:\n","                        tp = open[i]\n","                    # tp limit 이 가능한 경우 - open 이 아직, tp 를 넘지 않은 경우\n","                    else:\n","                        tp = tp_arr[i]\n","\n","                # ------ static tp ------ #\n","                else:\n","                    #   tp limit 이 불가한 경우 - open 이 이미, tp 를 넘은 경우\n","                    if open[i] < tp_arr[tp_j]:  # static 해놓고 decay 사용하면 dynamic 이니까\n","                        if config.tr_set.decay_gap != \"None\" and decay_remain == 0:\n","                            tp = open[i]  # tp_j -> open_i 를 가리키기 때문에 decay 는 한번만 진행되는게 맞음\n","                        else:\n","                            tp = tp_arr[tp_j]\n","                    else:\n","                        tp = tp_arr[tp_j]\n","\n","                if tp_i == len_tps - 1:\n","                    exit_done = 1  # partial 을 고려해 exit_done = 1 상태는 tp_i 가 last_index 로 체결된 경우만 해당\n","\n","        else:\n","            if high[i] >= tp_arr[tp_j]:\n","                # ------ dynamic tp ------ #\n","                if tp_arr[i] != tp_arr[i - 1] and not config.tp_set.static_tp:\n","                    if open[i] > tp_arr[i]:\n","                        tp = open[i]\n","                    else:\n","                        tp = tp_arr[i]\n","\n","                # ------ static tp ------ #\n","                else:\n","                    if open[i] > tp_arr[tp_j]:\n","                        if config.tr_set.decay_gap != \"None\" and decay_remain == 0:\n","                            tp = open[i]\n","                        else:\n","                            tp = tp_arr[tp_j]\n","                    else:\n","                        tp = tp_arr[tp_j]\n","\n","                if tp_i == len_tps - 1:\n","                    exit_done = 1  # partial 을 고려해 exit_done = 1 상태는 tp_i 가 last_index 로 체결된 경우만 해당\n","\n","    if exit_done:\n","        fee += config.trader_set.limit_fee\n","\n","    return exit_done, tp, fee\n","\n","\n","def check_signal_out_v3(res_df, config, open_i, i, len_df, fee, open_side, cross_on, exit_done, np_datas):    \n","\n","    _, _, _, close, np_timeidx = np_datas\n","    ex_p = None\n","    selection_id = config.selection_id\n","\n","    # ------ timestamp ------ #\n","    if config.out_set.tf_exit != \"None\":\n","        if np_timeidx[i] % config.out_set.tf_exit == config.out_set.tf_exit - 1 and i != open_i:\n","            exit_done = -1\n","\n","    # ------ rsi ------ # -> vectorize 가능함 => 추후 적용\n","    if config.out_set.rsi_exit:\n","        rsi_T = res_df['rsi_T'].to_numpy()\n","\n","        if open_side == OrderSide.SELL:\n","            if (rsi_T[i - 1] >= 50 - config.loc_set.point.osc_band) & (rsi_T[i] < 50 - config.loc_set.point.osc_band):\n","                exit_done = -1\n","        else:\n","            if (rsi_T[i - 1] <= 50 + config.loc_set.point.osc_band) & (rsi_T[i] > 50 + config.loc_set.point.osc_band):\n","                exit_done = -1\n","\n","    # ------ heikin_ashi ------ #\n","    # if selection_id in ['v3_3']:\n","    #     if open_side == OrderSide.SELL:\n","    #       if (ha_o[i] < ha_c[i]):# & (ha_o[i] == ha_l[i]):   # 양봉 출현\n","    #           exit_done = -1\n","    #     else:\n","    #       if (ha_o[i] > ha_c[i]):# & (ha_o[i] == ha_h[i]):  # 음봉 출현\n","    #           exit_done = -1\n","\n","    # ------------ early out ------------ #\n","    # ------ bb ------ # --> cross_on 기능은 ide latency 개선 여부에 해당되지 않음\n","    if selection_id in ['v5_2']:\n","        bb_upper_5T = res_df['bb_upper_5T'].to_numpy()\n","        bb_lower_5T = res_df['bb_lower_5T'].to_numpy()\n","\n","        if open_side == OrderSide.SELL:\n","            if close[i] < bb_lower_5T[i] < close[i - 1]:\n","                cross_on = 1\n","            if cross_on == 1 and close[i] > bb_upper_5T[i] > close[i - 1]:\n","                exit_done = -1\n","        else:\n","            if close[i] > bb_upper_5T[i] > close[i - 1]:\n","                cross_on = 1\n","            if cross_on == 1 and close[i] < bb_lower_5T[i] < close[i - 1]:\n","                exit_done = -1\n","\n","    if exit_done:\n","        ex_p = close[i]\n","        fee += config.trader_set.market_fee\n","\n","    return exit_done, cross_on, ex_p, fee\n","\n","\n","def check_hl_out_v2(config, i, out_j, len_df, fee, open_side, exit_done, np_datas):\n","\n","    open, high, low, close, out_arr = np_datas\n","    ex_p = None\n","\n","    if config.out_set.hl_out:\n","        if open_side == OrderSide.SELL:\n","            if high[i] >= out_arr[out_j]:  # check out only once\n","                exit_done = -1\n","        else:\n","            if low[i] <= out_arr[out_j]:  # check out only once\n","                exit_done = -1\n","    else:  # close_out\n","        if open_side == OrderSide.SELL:\n","            if close[i] >= out_arr[out_j]:  # check out only once\n","                exit_done = -1\n","        else:\n","            if close[i] <= out_arr[out_j]:  # check out only once\n","                ex_p = close[i]\n","                exit_done = -1\n","\n","    if exit_done:\n","        if config.out_set.hl_out:\n","            ex_p = out_arr[out_j]\n","        else:\n","            ex_p = close[i]\n","\n","        if open_side == OrderSide.SELL:\n","            if open[i] >= out_arr[out_j]:\n","                ex_p = open[i]\n","        else:\n","            if open[i] <= out_arr[out_j]:\n","                ex_p = open[i]\n","\n","        fee += config.trader_set.market_fee\n","\n","    return exit_done, ex_p, fee"]},{"cell_type":"markdown","metadata":{"id":"zQ-roiifspcX"},"source":["#### ep_loc.point & zone legacy"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Js5eL87VspcX"},"outputs":[],"source":["\n","    # res_df['entry_{}'.format(selection_id)] = np.where((res_df['open'] >= res_df['cloud_bline_%s' % cb_itv]) &\n","    #                 # (res_df['close'].shift(config.loc_set.point.tf_entry * 1) <= res_df['cloud_bline_%s' % cb_itv]) &\n","    #                 (res_df['close'] < res_df['cloud_bline_%s' % cb_itv])\n","    #                 , res_df['entry_{}'.format(selection_id)] - 1, res_df['entry_{}'.format(selection_id)])\n","\n","    # res_df['entry_{}'.format(selection_id)] = np.where((res_df['open'] >= res_df['bb_lower_1m']) &\n","    #                 # (res_df['close'].shift(config.loc_set.point.tf_entry * 1) <= res_df['bb_lower_1m']) &\n","    #                 (res_df['close'] < res_df['bb_lower_1m'])\n","    #                 , res_df['entry_{}'.format(selection_id)] - 1, res_df['entry_{}'.format(selection_id)])\n","\n","    # res_df['entry_{}'.format(selection_id)] = np.where((res_df['open'] <= res_df['cloud_bline_%s' % cb_itv]) &\n","    #                   # (res_df['close'].shift(config.loc_set.point.tf_entry * 1) >= res_df['cloud_bline_%s' % cb_itv]) &\n","    #                   (res_df['close'] > res_df['cloud_bline_%s' % cb_itv])\n","    #                 , res_df['entry_{}'.format(selection_id)] + 1, res_df['entry_{}'.format(selection_id)])\n","\n","    # res_df['entry_{}'.format(selection_id)] = np.where((res_df['open'] <= res_df['bb_upper_1m']) &\n","    #                   # (res_df['close'].shift(config.loc_set.point.tf_entry * 1) >= res_df['bb_upper_1m']) &\n","    #                   (res_df['close'] > res_df['bb_upper_1m'])\n","    #                 , res_df['entry_{}'.format(selection_id)] + 1, res_df['entry_{}'.format(selection_id)])\n","\n","\n","    \n","   # --------------- ema --------------- #   \n","  # res_df['ema5_1m'] = ema(res_df['close'], 5).shift(1)\n","\n","  #   # --------------- cloud bline --------------- #   \n","  # res_df['cloud_bline_1m'] = cloud_bline(res_df, 26).shift(1)\n","  \n","    #       stochastic      #\n","  # res_df['stoch'] = stoch(res_df, 5, 3, 3)\n","\n","    #       fisher      #\n","  # res_df['fisher30'] = fisher(res_df, 30)\n","  # res_df['fisher60'] = fisher(res_df, 60)\n","  # res_df['fisher120'] = fisher(res_df, 120)\n","\n","    #       cctbbo      #\n","  # res_df['cctbbo'], _ = cct_bbo(res_df, 21, 13)\n","\n","    #       ema_roc      #\n","  # res_df['ema_roc'] = ema_roc(res_df['close'], 13, 9)\n","\n","\n","   # ------------------------------ htf data ------------------------------ #    \n","\n","  #             Todo              #\n","  # htf_df = pd.read_excel(date_path2 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","  # htf_df = pd.read_excel(date_path3 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","  # # htf_df = pd.read_excel(date_path4 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","  # # # htf_df = pd.read_excel(date_path5 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","  # # # # # # htf_df = pd.read_excel(date_path6 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","\n","  # # ---- htf index slicing ---- #\n","  # htf_df = htf_df.loc[:res_df.index[-1]]\n","  \n","  # print(\"res_df.index[-1] :\", res_df.index[-1])\n","  # print(\"htf_df.index[-1] :\", htf_df.index[-1])\n","\n","  # res_df = dc_line(res_df, htf_df, '5m')\n","  # res_df = dc_level(res_df, '5m', 1)\n","\n","\n","  # # # if \"sma4\" in res_df.columns:\n","  # # #   res_df.drop(\"sma4\", axis=1, inplace=1)\n","\n","  # # htf_df['sma'] = htf_df['close'].rolling(60).mean()\n","  # # res_df = res_df.join(pd.DataFrame(index=res_df.index, data=to_lower_tf_v2(res_df, htf_df, [-1]), columns=['sma_30m']))\n","  \n","  # htf_df['stoch'] = stoch(htf_df, 13, 3, 3)\n","  # res_df = res_df.join(pd.DataFrame(index=res_df.index, data=to_lower_tf_v2(res_df, htf_df, [-1], backing_i=-1), columns=['stoch_5m']))\n","\n","   \n","  # fifth_df['ema'] = ema(fifth_df['close'], 5)\n","  # res_df = res_df.join(pd.DataFrame(index=res_df.index, data=to_lower_tf_v2(res_df, fifth_df, [-1]), columns=['ema5']))\n","\n","        # ------------------------------------ short ------------------------------------ # \n","\n","        # --------- by sar --------- # \n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_3m'].iloc[i] == 0:\n","        #   mr_score += 1\n","\n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_5m'].iloc[i] == 0:\n","        #   mr_score += 1          \n","\n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_15m'].iloc[i] == 0:\n","        #   mr_score += 1\n","\n","          #      dc & sar      # \n","        # mr_const_cnt += 1\n","        # # if res_df['dc_upper_1m'].iloc[i] <= res_df['sar_15m'].iloc[i]:\n","        # if res_df['dc_upper_3m'].iloc[i] <= res_df['sar_5m'].iloc[i]:\n","        # # if res_df['dc_upper_5m'].iloc[i] <= res_df['sar_15m'].iloc[i]:\n","        #   mr_score += 1\n","\n","        # -------------- dr scheduling -------------- #\n","        # if config.ep_set.entry_type == 'MARKET':\n","        #   mr_const_cnt += 1\n","        #   if (res_df['close'].iloc[i] - res_df['short_tp'].iloc[i]) / (res_df['short_out'].iloc[i] - res_df['close'].iloc[i]) <= config.ep_set.tr_thresh * (1 + config.ep_set.dr_error):  \n","        #     mr_score += 1\n","\n","           \n","        # ------- entry once ------- #   \n","        # prev_entry_cnt = 0\n","        # for back_i in range(i - 1, 0, -1):\n","        #   if res_df['entry'][back_i] == 1:\n","        #     break\n","\n","        #   elif res_df['entry'][back_i] == -1:\n","        #     prev_entry_cnt += 1          \n","        # # # print(\"prev_entry_cnt :\", prev_entry_cnt)\n","\n","        # mr_const_cnt += 1\n","        # # if prev_entry_cnt <= config.ep_set.entry_incycle:\n","        # # if prev_entry_cnt == config.ep_set.entry_incycle:\n","        # if prev_entry_cnt >= config.ep_set.entry_incycle:\n","        #   mr_score += 1\n","\n","        # ------- htf zoning ------- #   \n","        # mr_const_cnt += 1\n","        #   #       bb zone     #\n","        # if res_df['close'].iloc[i] < res_df['bb_lower_%s' % bbz_interval].iloc[i]:\n","        # # if res_df['close'].iloc[i] < res_df['bb_lower2_1h'].iloc[i]:\n","        # # if res_df['close'].iloc[i] < res_df['bb_base_1h'].iloc[i]:\n","\n","        #   #       cbline zone     #\n","        # # if res_df['close'].iloc[i] < res_df['cloud_bline_%s' % cb_interval].iloc[i]:\n","\n","        #   mr_score += 1\n","\n","  \n","        # ------- ben ep_in's tp done ------- #   \n","        # mr_const_cnt += 1\n","        # if res_df['low'].iloc[i] > res_df['short_tp'].iloc[i]:\n","        #   mr_score += 1\n","\n","\n","        # -------------- feature dist const. -------------- #\n","        # if initial_i < input_size:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","        # entry_input_x = min_max_scale(res_df[selected_price_colname].iloc[initial_i - input_size:initial_i].values)\n","       \n","        # re_entry_input_x = expand_dims(entry_input_x)\n","\n","        # entry_vector = model.predict(re_entry_input_x, verbose=0)\n","        # # print(test_result.shape)\n","\n","        # f_dist = vector_dist(entry_vector, selected_vector)\n","        # print(\"f_dist :\", f_dist)\n","\n","        # if f_dist < fdist_thresh:\n","          # mr_score += 1\n","\n","\n","\n","        # ------------------------------------ long ------------------------------------ # \n","          \n","\n","        # --------- by sar --------- # \n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_3m'].iloc[i] == 1:\n","        #   mr_score += 1   \n","\n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_5m'].iloc[i] == 1:\n","        #   mr_score += 1     \n","\n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_15m'].iloc[i] == 1:\n","          # mr_score += 1\n","\n","          #      dc & sar      # \n","        # mr_const_cnt += 1\n","        # # if res_df['dc_lower_1m'].iloc[i] >= res_df['sar_15m'].iloc[i]:\n","        # if res_df['dc_lower_3m'].iloc[i] >= res_df['sar_5m'].iloc[i]:\n","        # # if res_df['dc_lower_5m'].iloc[i] >= res_df['sar_15m'].iloc[i]:\n","        #   mr_score += 1\n","\n","        # -------------- dr scheduling -------------- #\n","        # if config.ep_set.entry_type == \"MARKET\":\n","          # mr_const_cnt += 1        \n","          # if (res_df['long_tp'].iloc[i] - res_df['close'].iloc[i]) / (res_df['close'].iloc[i] - res_df['long_out'].iloc[i]) <= config.ep_set.tr_thresh * (1 + config.ep_set.dr_error): # 일반적으로 dr 상에서 tp 비율이 더 커짐 (tr 보다)\n","          #   mr_score += 1\n","\n","        # -------------- ep limit -------------- #    \n","        # mr_const_cnt += 1\n","        # # if (res_df['open'].iloc[i] - res_df['long_ep'].iloc[i]) / res_df['open'].iloc[i] < config.ep_set.max_eplim_pct:\n","        # if config.ep_set.min_eplim_pct < (res_df['open'].iloc[i] - res_df['long_ep'].iloc[i]) / res_df['open'].iloc[i] < config.ep_set.max_eplim_pct:\n","        # # if 0 < (res_df['open'].iloc[i] - res_df['long_ep'].iloc[i]) / res_df['open'].iloc[i] < config.ep_set.max_eplim_pct:\n","        #   # if res_df['st_gap_15m'].iloc[i] / res_df['open'].iloc[i] < 0:\n","        #   #   print(\"i, res_df['st_gap_15m'].iloc[i] :\", i, res_df['st_gap_15m'].iloc[i])\n","        #   mr_score += 1\n","\n","\n","        # -------------- entry once -------------- #    \n","        # prev_entry_cnt = 0\n","        # for back_i in range(i - 1, 0, -1):\n","        #   if res_df['entry'][back_i] == -1:\n","        #     break\n","\n","        #   elif res_df['entry'][back_i] == 1:\n","        #     prev_entry_cnt += 1\n","          \n","        # mr_const_cnt += 1\n","        # # if prev_entry_cnt <= config.ep_set.entry_incycle:\n","        # # if prev_entry_cnt == config.ep_set.entry_incycle:\n","        # if prev_entry_cnt >= config.ep_set.entry_incycle:\n","        #   mr_score += 1\n","\n","\n","        # ------- htf zoning ------- #   \n","        # mr_const_cnt += 1\n","          \n","        #   #       bb zone     #\n","        # if res_df['close'].iloc[i] > res_df['bb_upper_%s' % bbz_interval].iloc[i]:\n","        # # if res_df['close'].iloc[i] > res_df['bb_upper2_1h'].iloc[i]:\n","        # # if res_df['close'].iloc[i] > res_df['bb_base_1h'].iloc[i]:\n","        \n","        #   #       cbline zone     #\n","        # # if res_df['close'].iloc[i] > res_df['cloud_bline_%s' % cb_interval].iloc[i]:\n","\n","        #   mr_score += 1\n","\n","\n","        # ------- ben ep_in's tp done ------- #   \n","        # mr_const_cnt += 1\n","        # if res_df['high'].iloc[i] < res_df['long_tp'].iloc[i]:\n","        #   mr_score += 1\n","\n","\n","        # -------------- feature dist const. -------------- #\n","        # if initial_i < input_size:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","          \n","        # entry_input_x = min_max_scale(res_df[selected_price_colname].iloc[initial_i - input_size:initial_i].values)\n","       \n","        # re_entry_input_x = expand_dims(entry_input_x)\n","\n","        # entry_vector = model.predict(re_entry_input_x, verbose=0)\n","        # # print(test_result.shape)\n","\n","        # f_dist = vector_dist(entry_vector, selected_vector)\n","        # print(\"f_dist :\", f_dist)\n","\n","        # if f_dist < fdist_thresh:\n","          # mr_score += 1"]},{"cell_type":"markdown","metadata":{"id":"qM6H6fmrKtsA"},"source":["#### legacy"]},{"cell_type":"code","source":["# np.nanmin([np.nan, 1])\n","np.nan <= np.nan"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"AH3JXLkwL_B6","executionInfo":{"status":"ok","timestamp":1658884508950,"user_tz":-540,"elapsed":1076,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"0fa49ccd-e99c-44fd-ac0a-84441dd585d4"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["False"]},"metadata":{},"execution_count":21}]},{"cell_type":"code","execution_count":null,"metadata":{"id":"uB-I09hKKvmu"},"outputs":[],"source":["def get_wave_bias_v6(res_df, config, high, low, len_df, short_net_p1_idx_arr, long_net_p1_idx_arr, short_p2_idx_arr, long_p2_idx_arr, short_obj,\n","                     long_obj):\n","    short_net_p1_idx = short_net_p1_idx_arr.astype(int)  # .reshape(-1, 1)\n","    short_p1_idx = short_obj[-1].astype(int).ravel()\n","    short_p2_idx = short_p2_idx_arr.astype(int).ravel()  # .reshape(-1, 1)\n","    short_en_idx = short_obj[2].astype(int)\n","\n","    short_tp_1 = ffill_line(res_df['short_tp_1_{}'.format(config.selection_id)].to_numpy(),\n","                            short_net_p1_idx)  # net_p1_idx ~ net_p1_idx' 사이에 대한 momentum 조사 (net 이유는 logic's validation)\n","    short_tp_0 = ffill_line(res_df['short_tp_0_{}'.format(config.selection_id)].to_numpy(), short_net_p1_idx)\n","    short_out_1 = ffill_line(res_df['short_out_1_{}'.format(config.selection_id)].to_numpy(),\n","                             short_p2_idx)  # 체결된, p2_idx ~ p2_idx' 사이에 대한 momentum 조사\n","    short_out_0 = ffill_line(res_df['short_out_0_{}'.format(config.selection_id)].to_numpy(), short_p2_idx)\n","    short_ep2_0 = ffill_line(res_df['short_ep2_0_{}'.format(config.selection_id)].to_numpy(), short_p2_idx)\n","    # short_net_wave_1 = ffill_line(res_df['short_wave_1_{}'.format(config.selection_id)].to_numpy(), short_op_idx)  # en_idx 에 sync 된 open_idx 를 사용해야함\n","    # short_net_wave_0 = ffill_line(res_df['short_wave_0_{}'.format(config.selection_id)].to_numpy(), short_op_idx)\n","\n","    long_net_p1_idx = long_net_p1_idx_arr.astype(int)  # .reshape(-1, 1)\n","    long_p1_idx = long_obj[-1].astype(int).ravel()\n","    long_p2_idx = long_p2_idx_arr.astype(int).ravel()  # .reshape(-1, 1)\n","    long_en_idx = long_obj[2].astype(int)\n","\n","    long_tp_1 = ffill_line(res_df['long_tp_1_{}'.format(config.selection_id)].to_numpy(), long_net_p1_idx)\n","    long_tp_0 = ffill_line(res_df['long_tp_0_{}'.format(config.selection_id)].to_numpy(), long_net_p1_idx)\n","    long_out_1 = ffill_line(res_df['long_out_1_{}'.format(config.selection_id)].to_numpy(), long_p2_idx)  # 체결된, p2_idx ~ p2_idx' 사이에 대한 momentum 조사\n","    long_out_0 = ffill_line(res_df['long_out_0_{}'.format(config.selection_id)].to_numpy(), long_p2_idx)\n","    long_ep2_0 = ffill_line(res_df['long_ep2_0_{}'.format(config.selection_id)].to_numpy(), long_p2_idx)\n","\n","    short_p2exec_p1_idx = np.unique(short_p1_idx)  # .reshape(-1, 1)   # 통일성을 위해 2d 로 설정\n","    long_p2exec_p1_idx = np.unique(long_p1_idx)  # .reshape(-1, 1)\n","\n","    # print(\"long_net_p1_idx.shape :\", long_net_p1_idx.shape)\n","    # print(\"long_en_idx.shape :\", long_en_idx.shape)\n","\n","    # ================== touch idx ================== #\n","    # 1. min 에 초점을 맞추는 거니까, touch 없을시 len_df 로 설정\n","    # 2. future_data 사용이니까, shift(-bias_info_tick) 설정 --> olds\n","    # 3. entry 다음 idx 부터 -> tp & out 체결 logic 이 현재 entry_idx 부터 되어있어서 취소\n","    # Todo, high 와 low 중 어디에 먼저닿느냐가 중요함을 key 로 잡고만든 logic 임\n","    len_df_range = np.arange(len_df)\n","    last_idx = len_df - 1  # nan 발생하면 대소 비교로 hhm 확인이 불가능해짐, np.nan <= np.nan --> false\n","\n","    # ------------ pair & idxs ------------ #\n","    short_net_p1_pair = list(zip(short_net_p1_idx, np.append(short_net_p1_idx[1:], last_idx)))   # p1's 1st & 2nd pair 위해서 last_idx 마지막에 붙여준 것\n","    long_net_p1_pair = list(zip(long_net_p1_idx, np.append(long_net_p1_idx[1:], last_idx)))\n","\n","    short_p2_pair = list(zip(short_p2_idx, np.append(short_p2_idx[1:], last_idx)))\n","    long_p2_pair = list(zip(long_p2_idx, np.append(long_p2_idx[1:], last_idx)))\n","\n","    short_tp_1_touch_idxs = np.where(low <= short_tp_1, len_df_range, last_idx)\n","    short_tp_0_touch_idxs = np.where(high >= short_tp_0, len_df_range, last_idx)\n","    long_tp_1_touch_idxs = np.where(high >= long_tp_1, len_df_range, last_idx)\n","    long_tp_0_touch_idxs = np.where(low <= long_tp_0, len_df_range, last_idx)\n","\n","    short_out_1_touch_idxs = np.where(low <= short_out_1, len_df_range, last_idx)\n","    short_out_0_touch_idxs = np.where(high >= short_out_0, len_df_range, last_idx)\n","    long_out_1_touch_idxs = np.where(high >= long_out_1, len_df_range, last_idx)\n","    long_out_0_touch_idxs = np.where(low <= long_out_0, len_df_range, last_idx)\n","\n","    # ------------ min touch_idx ------------ #\n","    short_tp_1_touch_idx = get_touch_idx_fill(short_tp_1_touch_idxs, short_net_p1_pair, short_net_p1_idx, len_df)  # pair means 구간\n","    short_tp_0_touch_idx = get_touch_idx_fill(short_tp_0_touch_idxs, short_net_p1_pair, short_net_p1_idx, len_df)\n","    long_tp_1_touch_idx = get_touch_idx_fill(long_tp_1_touch_idxs, long_net_p1_pair, long_net_p1_idx, len_df)\n","    long_tp_0_touch_idx = get_touch_idx_fill(long_tp_0_touch_idxs, long_net_p1_pair, long_net_p1_idx, len_df)\n","\n","    short_out_1_touch_idx = get_touch_idx_fill(short_out_1_touch_idxs, short_p2_pair, short_p2_idx, len_df)  # pair means 구간\n","    short_out_0_touch_idx = get_touch_idx_fill(short_out_0_touch_idxs, short_p2_pair, short_p2_idx, len_df)\n","    long_out_1_touch_idx = get_touch_idx_fill(long_out_1_touch_idxs, long_p2_pair, long_p2_idx, len_df)\n","    long_out_0_touch_idx = get_touch_idx_fill(long_out_0_touch_idxs, long_p2_pair, long_p2_idx, len_df)\n","\n","    # ------------ point's touch_idx ------------ #\n","    short_tp_1_net_p1_touch_idx = short_tp_1_touch_idx[short_net_p1_idx]  # for tp_box's net_hhm\n","    short_tp_0_net_p1_touch_idx = short_tp_0_touch_idx[short_net_p1_idx]\n","    long_tp_1_net_p1_touch_idx = long_tp_1_touch_idx[long_net_p1_idx]\n","    long_tp_0_net_p1_touch_idx = long_tp_0_touch_idx[long_net_p1_idx]\n","    # print(\"long_tp_1_net_p1_touch_idx :\", long_tp_1_net_p1_touch_idx)\n","\n","    short_tp_1_p2exec_p1_touch_idx = short_tp_1_touch_idx[short_p2exec_p1_idx]  # p2 까지 체결된 p1's hhm (p2 executed p1_hhm)\n","    short_tp_0_p2exec_p1_touch_idx = short_tp_0_touch_idx[short_p2exec_p1_idx]\n","    long_tp_1_p2exec_p1_touch_idx = long_tp_1_touch_idx[long_p2exec_p1_idx]\n","    long_tp_0_p2exec_p1_touch_idx = long_tp_0_touch_idx[long_p2exec_p1_idx]\n","\n","    short_tp_1_p2_touch_idx = short_tp_1_touch_idx[short_p2_idx]  # hlm 을 위한 hhm (on p2)\n","    short_tp_0_p2_touch_idx = short_tp_0_touch_idx[short_p2_idx]\n","    long_tp_1_p2_touch_idx = long_tp_1_touch_idx[long_p2_idx]\n","    long_tp_0_p2_touch_idx = long_tp_0_touch_idx[long_p2_idx]\n","\n","    short_out_1_p2_touch_idx = short_out_1_touch_idx[short_p2_idx]  # for out_box's executed_hhm\n","    short_out_0_p2_touch_idx = short_out_0_touch_idx[short_p2_idx]\n","    long_out_1_p2_touch_idx = long_out_1_touch_idx[long_p2_idx]\n","    long_out_0_p2_touch_idx = long_out_0_touch_idx[long_p2_idx]\n","\n","    # ------------ get wave's bias_tick ------------ #\n","    short_tp_1_net_p1_touch_idx2 = np.where(short_tp_1_net_p1_touch_idx == last_idx, np.nan, short_tp_1_net_p1_touch_idx)\n","    long_tp_1_net_p1_touch_idx2 = np.where(long_tp_1_net_p1_touch_idx == last_idx, np.nan, long_tp_1_net_p1_touch_idx)\n","\n","    short_tp_1_p2exec_p1_touch_idx2 = np.where(short_tp_1_p2exec_p1_touch_idx == last_idx, np.nan, short_tp_1_p2exec_p1_touch_idx)\n","    long_tp_1_p2exec_p1_touch_idx2 = np.where(long_tp_1_p2exec_p1_touch_idx == last_idx, np.nan, long_tp_1_p2exec_p1_touch_idx)\n","\n","    short_net_p1_bias_tick = short_tp_1_net_p1_touch_idx2 - short_net_p1_idx\n","    long_net_p1_bias_tick = long_tp_1_net_p1_touch_idx2 - long_net_p1_idx\n","\n","    short_p2exec_p1_bias_tick = short_tp_1_p2exec_p1_touch_idx2 - short_p2exec_p1_idx\n","    long_p2exec_p1_bias_tick = long_tp_1_p2exec_p1_touch_idx2 - long_p2exec_p1_idx\n","\n","    # ------------------ bias_bool & hhm ------------------ #\n","    short_net_p1_true_bias_bool = short_tp_1_net_p1_touch_idx < short_tp_0_net_p1_touch_idx  # true_bias 의 조건\n","    short_net_p1_false_bias_bool = short_tp_1_net_p1_touch_idx >= short_tp_0_net_p1_touch_idx  # false_bias 의 조건, ~true_bias_bool 와 같지 않음, why ..? = en_idx\n","    long_net_p1_true_bias_bool = long_tp_1_net_p1_touch_idx < long_tp_0_net_p1_touch_idx\n","    long_net_p1_false_bias_bool = long_tp_1_net_p1_touch_idx >= long_tp_0_net_p1_touch_idx\n","\n","    short_p2exec_p1_true_bias_bool = short_tp_1_p2exec_p1_touch_idx < short_tp_0_p2exec_p1_touch_idx  # true_bias 의 조건\n","    short_p2exec_p1_false_bias_bool = short_tp_1_p2exec_p1_touch_idx >= short_tp_0_p2exec_p1_touch_idx  # false_bias 의 조건, ~true_bias_bool 와 같지 않음, why ..? = en_idx\n","    long_p2exec_p1_true_bias_bool = long_tp_1_p2exec_p1_touch_idx < long_tp_0_p2exec_p1_touch_idx\n","    long_p2exec_p1_false_bias_bool = long_tp_1_p2exec_p1_touch_idx >= long_tp_0_p2exec_p1_touch_idx\n","\n","    short_p2_true_bias_bool = short_tp_1_p2_touch_idx < short_tp_0_p2_touch_idx\n","    # short_p2_false_bias_bool = short_tp_1_p2_touch_idx >= short_tp_0_p2_touch_idx\n","    long_p2_true_bias_bool = long_tp_1_p2_touch_idx < long_tp_0_p2_touch_idx\n","    # long_p2_false_bias_bool = long_tp_1_p2_touch_idx >= long_tp_0_p2_touch_idx\n","\n","    short_p2_out_true_bias_bool = short_out_1_p2_touch_idx < short_out_0_p2_touch_idx\n","    short_p2_out_false_bias_bool = short_out_1_p2_touch_idx >= short_out_0_p2_touch_idx\n","    long_p2_out_true_bias_bool = long_out_1_p2_touch_idx < long_out_0_p2_touch_idx\n","    long_p2_out_false_bias_bool = long_out_1_p2_touch_idx >= long_out_0_p2_touch_idx\n","\n","    short_tpbox_hhm = hhm(short_net_p1_true_bias_bool, short_net_p1_false_bias_bool)\n","    long_tpbox_hhm = hhm(long_net_p1_true_bias_bool, long_net_p1_false_bias_bool)\n","\n","    short_p2exec_tpbox_hhm = hhm(short_p2exec_p1_true_bias_bool, short_p2exec_p1_false_bias_bool)\n","    long_p2exec_tpbox_hhm = hhm(long_p2exec_p1_true_bias_bool, long_p2exec_p1_false_bias_bool)\n","\n","    # short_p2_hhm = hhm(short_p2_true_bias_bool, short_p2_false_bias_bool)\n","    # long_p2_hhm = hhm(long_p2_true_bias_bool, long_p2_false_bias_bool)\n","\n","    short_outbox_hhm = hhm(short_p2_out_true_bias_bool, short_p2_out_false_bias_bool)\n","    long_outbox_hhm = hhm(long_p2_out_true_bias_bool, long_p2_out_false_bias_bool)\n","\n","    # print(\"short_tpbox_hhm, short_p2_hhm, short_outbox_hhm :\", short_tpbox_hhm, short_p2_hhm, short_outbox_hhm)\n","\n","    return short_tpbox_hhm, long_tpbox_hhm, short_p2exec_tpbox_hhm, long_p2exec_tpbox_hhm, short_outbox_hhm, long_outbox_hhm, \\\n","           short_net_p1_bias_tick, long_net_p1_bias_tick, short_p2exec_p1_bias_tick, long_p2exec_p1_bias_tick, short_p2_true_bias_bool, long_p2_true_bias_bool, \\\n","           short_tp_1[short_en_idx], short_tp_0[short_en_idx], long_tp_1[long_en_idx], long_tp_0[long_en_idx], \\\n","           short_out_1[short_en_idx], short_out_0[short_en_idx], long_out_1[long_en_idx], long_out_0[long_en_idx], short_ep2_0[short_en_idx], long_ep2_0[long_en_idx]  # plot_check 을 위해 en_idx 넣음"]},{"cell_type":"code","source":["def idep_plot_v17(res_df, len_df, config, high, low, open_info_df1, paired_res, inversion=False, sample_ratio=0.7, title_position=(0.5, 0.5),\n","                  fontsize=15, signi=False):  # open_idx, side_arr\n","    if not signi:\n","        plt.style.use(['dark_background', 'fast'])\n","        plt.figure(figsize=(24, 8))\n","        gs = gridspec.GridSpec(nrows=2,  # row 몇 개\n","                               ncols=3,  # col 몇 개\n","                               height_ratios=[10, 1]\n","                               # height_ratios=[10, 10, 1]\n","                               )\n","    gs_idx = 0\n","    # plt.suptitle(key)\n","\n","    p_ranges, p_qty_ratio = literal_eval(config.tp_set.p_ranges), literal_eval(config.tp_set.p_qty_ratio)\n","    assert np.sum(p_qty_ratio) == 1.0\n","    assert len(p_ranges) == len(p_qty_ratio)\n","\n","    if sample_ratio is not None:\n","        sample_len = int(len_df * sample_ratio)\n","    else:\n","        sample_len = len_df\n","\n","    # ------ short & long data preparation ------ #\n","    # start_0 = time.time()\n","\n","    net_p1_idx_arr, p1_idx_arr, p2_idx_arr, pair_idx_arr, pair_price_arr, lvrg_arr, fee_arr, tpout_arr, tr_arr = paired_res\n","    assert len(p1_idx_arr) != 0, \"assert len(p1_idx_arr) != 0\"\n","\n","    short_net_p1_idx_arr = net_p1_idx_arr[np.where(open_info_df1.side.loc[net_p1_idx_arr] == OrderSide.SELL)[0]]\n","    long_net_p1_idx_arr = net_p1_idx_arr[np.where(open_info_df1.side.loc[net_p1_idx_arr] == OrderSide.BUY)[0]]\n","\n","    short_net_p1_frq = len(short_net_p1_idx_arr)\n","    long_net_p1_frq = len(long_net_p1_idx_arr)\n","    # print(\"short_net_p1_frq :\", short_net_p1_frq)\n","    # print(\"long_net_p1_frq :\", long_net_p1_frq)\n","\n","    short_p1_openi_idx = np.where(open_info_df1.side.loc[p1_idx_arr] == OrderSide.SELL)[0]  # p1_idx_arr 에 대한 idx, # side_arr,\n","    long_p1_openi_idx = np.where(open_info_df1.side.loc[p1_idx_arr] == OrderSide.BUY)[0]\n","\n","    # p1_idx = open_idx[p1_openi_arr].reshape(-1, 1)   # != p1_idx_arr, p1_openi_arr 은 exit_done 기준임\n","\n","    np_obj = np.hstack((pair_price_arr, pair_idx_arr, p1_idx_arr.reshape(-1, 1)))  # p1_idx_arr is 1d, need to be changed to 2d (for stacking)\n","    short_obj = np_obj[short_p1_openi_idx]\n","    long_obj = np_obj[long_p1_openi_idx]\n","    both_obj = np.vstack((short_obj, long_obj))\n","    print(\"short_obj.shape :\", short_obj.shape)\n","    print(\"long_obj.shape :\", long_obj.shape)\n","\n","    short_obj, long_obj, both_obj = [np.split(obj_, 5, axis=1) for obj_ in [short_obj, long_obj, both_obj]]\n","\n","    short_p2_idx_arr, long_p2_idx_arr = [p2_idx_arr[openi_idx_].reshape(-1, 1) for openi_idx_ in [short_p1_openi_idx, long_p1_openi_idx]]\n","    short_lvrg_arr, long_lvrg_arr = [lvrg_arr[openi_idx_].reshape(-1, 1) for openi_idx_ in [short_p1_openi_idx, long_p1_openi_idx]]\n","    short_fee_arr, long_fee_arr = [fee_arr[openi_idx_].reshape(-1, 1) for openi_idx_ in [short_p1_openi_idx, long_p1_openi_idx]]\n","    short_tpout_arr, long_tpout_arr = [tpout_arr[openi_idx_] for openi_idx_ in [short_p1_openi_idx, long_p1_openi_idx]]\n","    # short_bias_arr, long_bias_arr = [bias_arr[openi_idx_] for openi_idx_ in [short_p1_openi_idx, long_p1_openi_idx]]\n","    short_tr_arr, long_tr_arr = [tr_arr[openi_idx_] for openi_idx_ in [short_p1_openi_idx, long_p1_openi_idx]]\n","    # print(\"long_bias_arr.shape :\", long_bias_arr.shape)\n","    # print(\"short / long arr setting elapsed time :\", time.time() - start_0)\n","\n","\n","    # ------ get hhm ------ #    \n","    # start_0 = time.time()\n","    short_tpbox_hhm, long_tpbox_hhm, short_tpbox_p2exec_hhm, long_tpbox_p2exec_hhm, short_outbox_hhm, long_outbox_hhm, short_p2_true_bias_bool, long_p2_true_bias_bool, \\\n","          short_tp_1, short_tp_0, long_tp_1, long_tp_0, short_out_1, short_out_0, long_out_1, long_out_0, short_ep2_0, long_ep2_0 = \\\n","      get_wave_bias_v5(res_df, config, high, low, len_df, short_net_p1_idx_arr, long_net_p1_idx_arr, short_p2_idx_arr, long_p2_idx_arr, short_obj, long_obj)\n","    # print(\"get_wave_bias elapsed time :\", time.time() - start_0)\n","\n","\n","    # ------ mean_low ------ #    \n","    # start_0 = time.time()\n","    selection_id = config.selection_id\n","\n","    short_p1_idx = short_obj[-1].astype(int)\n","    long_p1_idx = long_obj[-1].astype(int)    \n","\n","    short_open_tp_1 = res_df['short_tp_1_{}'.format(selection_id)].to_numpy()[short_p1_idx] # != short_tp_1\n","    long_open_tp_1 = res_df['long_tp_1_{}'.format(selection_id)].to_numpy()[long_p1_idx]\n","\n","    short_open_tp_0 = res_df['short_tp_0_{}'.format(selection_id)].to_numpy()[short_p1_idx]\n","    long_open_tp_0 = res_df['long_tp_0_{}'.format(selection_id)].to_numpy()[long_p1_idx]\n","\n","    short_open_tp_gap = res_df['short_tp_gap_{}'.format(selection_id)].to_numpy()[short_p1_idx]  # use open_i\n","    long_open_tp_gap = res_df['long_tp_gap_{}'.format(selection_id)].to_numpy()[long_p1_idx]\n","\n","    short_max_outg = get_max_outg_v4(OrderSide.SELL, config, ohlc_list, short_obj, short_tpout_arr, short_open_tp_0, short_open_tp_gap)  # tp_box's mean_low 확인 위해 tp_gap 입력함\n","    long_max_outg = get_max_outg_v4(OrderSide.BUY, config, ohlc_list, long_obj, long_tpout_arr, long_open_tp_0, long_open_tp_gap)\n","\n","    short_mean_low = short_max_outg[short_p2_true_bias_bool].mean()\n","    long_mean_low = long_max_outg[long_p2_true_bias_bool].mean()\n","    both_mean_low = (short_mean_low + long_mean_low) / 2\n","    # print(\"short_mean_low :\", short_mean_low)\n","    # print(\"long_mean_low :\", long_mean_low)\n","    # print(\"both_mean_low :\", both_mean_low)\n","    # print(\"mean_low elapsed time :\", time.time() - start_0)\n","\n","    # ------ plot_data ------ #\n","    len_short, len_long = len(short_p1_openi_idx), len(long_p1_openi_idx)\n","\n","    try:\n","        # start_0 = time.time()\n","        if len_short == 0:\n","            short_pr = []\n","            gs_idx += 1\n","        else:\n","            short_tr = short_tr_arr.mean()\n","            short_pr, short_liqd = get_pr_v4(OrderSide.SELL, high, low, short_obj, short_tpout_arr, short_lvrg_arr, short_fee_arr, p_ranges,\n","                                             p_qty_ratio, inversion)\n","            short_total_pr = to_total_pr(len_df, short_pr, short_obj[-2])\n","            short_cum_pr = np.cumprod(short_total_pr)\n","            short_hlm = hlm(short_pr, short_p2_true_bias_bool)\n","            short_trade_ticks = np.mean(short_obj[-2] - short_obj[-1])\n","            if signi:\n","                short_idep_res_obj = (short_tpbox_p2exec_hhm, short_hlm) + get_res_info_nb_v2(sample_len, short_pr, short_total_pr, short_cum_pr, short_liqd)\n","            else:\n","                gs_idx = plot_info_v9(gs, gs_idx, len_df, sample_len, short_tr, short_tpbox_hhm, short_tpbox_p2exec_hhm, short_outbox_hhm, short_mean_low, short_hlm, short_trade_ticks, short_net_p1_frq, short_pr, short_total_pr,\n","                                      short_cum_pr, short_liqd, short_lvrg_arr.mean(), title_position, fontsize)\n","        # print(\"short plot_data elapsed time :\", time.time() - start_0)\n","\n","    except Exception as e:\n","        gs_idx += 1\n","        print(\"error in short plot_data :\", e)\n","\n","    try:\n","        # start_0 = time.time()\n","        if len_long == 0:\n","            long_pr = []\n","            gs_idx += 1\n","        else:\n","            long_tr = long_tr_arr.mean()\n","            long_pr, long_liqd = get_pr_v4(OrderSide.BUY, high, low, long_obj, long_tpout_arr, long_lvrg_arr, long_fee_arr, p_ranges, p_qty_ratio,\n","                                           inversion)\n","            long_total_pr = to_total_pr(len_df, long_pr, long_obj[-2])\n","            long_cum_pr = np.cumprod(long_total_pr)\n","            # long_hhm = long_net_p1_hhm\n","            long_hlm = hlm(long_pr, long_p2_true_bias_bool)\n","            long_trade_ticks = np.mean(long_obj[-2] - long_obj[-1])\n","            if signi:\n","                long_idep_res_obj = (long_tpbox_p2exec_hhm, long_hlm) + get_res_info_nb_v2(sample_len, long_pr, long_total_pr, long_cum_pr, long_liqd)\n","            else:\n","                gs_idx = plot_info_v9(gs, gs_idx, len_df, sample_len, long_tr, long_tpbox_hhm, long_tpbox_p2exec_hhm, long_outbox_hhm, long_mean_low, long_hlm, long_trade_ticks, long_net_p1_frq, long_pr, long_total_pr,\n","                                      long_cum_pr, long_liqd, long_lvrg_arr.mean(), title_position, fontsize)\n","        # print(\"long plot_data elapsed time :\", time.time() - start_0)\n","    except Exception as e:\n","        gs_idx += 1\n","        print(\"error in long plot_data :\", e)\n","\n","    try:\n","        # start_0 = time.time()\n","        if len_short * len_long == 0:\n","            both_pr = []\n","            gs_idx += 1\n","        else:\n","            both_tr = (short_tr + long_tr) / 2\n","            both_pr = np.vstack((short_pr, long_pr))  # for 2d arr, obj 를 1d 로 만들지 않는 이상, pr 은 2d 유지될 것\n","            both_total_pr = to_total_pr(len_df, both_pr, both_obj[-2])\n","            both_cum_pr = np.cumprod(both_total_pr)\n","            both_liqd = min(short_liqd, long_liqd)\n","            both_p2_true_bias_bool = np.hstack((short_p2_true_bias_bool, long_p2_true_bias_bool))  # hstack for 1d arr, vstack for 2d arr\n","            both_tpbox_hhm = (short_tpbox_hhm + long_tpbox_hhm) / 2\n","            both_tpbox_p2exec_hhm, both_hlm = (short_tpbox_p2exec_hhm + long_tpbox_p2exec_hhm) / 2, (short_hlm + long_hlm) / 2\n","            both_outbox_hhm = (short_outbox_hhm + long_outbox_hhm) / 2\n","            both_trade_ticks = np.mean(both_obj[-2] - both_obj[-1])\n","            both_net_p1_frq = short_net_p1_frq + long_net_p1_frq\n","            if signi:\n","                both_idep_res_obj = (both_tpbox_p2exec_hhm, both_hlm) + get_res_info_nb_v2(sample_len, both_pr, both_total_pr, both_cum_pr, both_liqd)\n","            else:\n","                gs_idx = plot_info_v9(gs, gs_idx, len_df, sample_len, both_tr, both_tpbox_hhm, both_tpbox_p2exec_hhm, both_outbox_hhm, both_mean_low, both_hlm, both_trade_ticks, both_net_p1_frq, both_pr, both_total_pr,\n","                                      both_cum_pr, both_liqd, lvrg_arr.mean(), title_position, fontsize)\n","        # print(\"both plot_data elapsed time :\", time.time() - start_0)\n","    except Exception as e:\n","        gs_idx += 1\n","        print(\"error in both plot_data :\", e)\n","\n","    if not signi:\n","        if len_short * len_long > 0:\n","            for obj, bias_arr, cum_pr in zip([short_obj, long_obj, both_obj], [short_p2_true_bias_bool, long_p2_true_bias_bool, both_p2_true_bias_bool],\n","                                             [short_cum_pr, long_cum_pr, both_cum_pr]):\n","                try:\n","                    # start_0 = time.time()\n","                    gs_idx = frq_dev_plot_v4(gs, gs_idx, len_df, sample_len, obj[-2], bias_arr, cum_pr[-1], fontsize)\n","                    # print(\"frq_dev_plot elapsed time :\", time.time() - start_0)\n","                except Exception as e:\n","                    gs_idx += 1\n","                    print(\"error in frq_dev_plot :\", e)\n","            plt.show()\n","            plt.close()\n","\n","        return short_pr, short_obj, short_lvrg_arr, short_fee_arr, short_tpout_arr, short_tr_arr, short_p2_true_bias_bool, short_p2_idx_arr, short_tp_1, short_tp_0, short_out_1, short_out_0, short_ep2_0, \\\n","               long_pr, long_obj, long_lvrg_arr, long_fee_arr, long_tpout_arr, long_tr_arr, long_p2_true_bias_bool, long_p2_idx_arr, long_tp_1, long_tp_0, long_out_1, long_out_0, long_ep2_0  # long_net_p1_idx_arr long_p2_idx_arr\n","\n","    else:\n","        return [short_idep_res_obj[:-1], long_idep_res_obj[:-1], both_idep_res_obj[:-1]]"],"metadata":{"id":"Eos0FoAgrfW5"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":260,"status":"ok","timestamp":1653436951068,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"oLDZobRcgg6E","outputId":"2f07e665-41ba-4c7e-b5d7-43fc14d09cd5"},"outputs":[{"data":{"text/plain":["Rolling [window=100,center=False,axis=0,method=single]"]},"execution_count":92,"metadata":{},"output_type":"execute_result"}],"source":["res_df.low.rolling(100) #> 1000"]},{"cell_type":"markdown","metadata":{"id":"_blyFhQJUd5X"},"source":["#### dump"]},{"cell_type":"code","source":["def get_pr_v4(open_side, h, l, obj, tpout, lvrg, fee, p_ranges, p_qty_ratio, inversion=False):  # --> 여기서 사용하는 ex_p = ex_p\n","\n","    en_p = obj[0]\n","    # ex_p = obj[1]\n","    tp, out = np.split(tpout, 2, axis=1)\n","    len_p = len(p_ranges)\n","    en_ps, tps, outs, lvrgs, fees = [np.tile(arr_, (1, len_p)) for arr_ in [en_p, tp, out, lvrg, fee]]\n","\n","    np_obj = np.array(obj).T[0]\n","    assert len(np_obj.shape) == 2\n","\n","    # iin == iout 인 경우 분리\n","    en_idx = np_obj[:, 2]\n","    ex_idx = np_obj[:, 3]\n","    equal_idx = en_idx == ex_idx    # equal_idx 는 어차피 out 임\n","    issue_idx = en_idx > ex_idx    # equal_idx 는 어차피 out 임\n","\n","    print('pass')\n","    idx_gap_ = (ex_idx - en_idx)[~equal_idx]\n","    print(\"en_idx[issue_idx] :\", en_idx[issue_idx])\n","    print(\"ex_idx[issue_idx] :\", ex_idx[issue_idx])\n","    print(\"idx_gap_[idx_gap_ <= 0] :\", idx_gap_[idx_gap_ <= 0])\n","\n","    min_low = np.full_like(en_p, np.nan)\n","    min_low[~equal_idx] = np.array([np.min(l[int(iin + 1):int(iout + 1)]) for _, _, iin, iout in np_obj[~equal_idx, :4]]).reshape(-1, 1)  # start from iin + 1 (tp 체결을 entry_idx 부터 보지 않음)\n","    max_high = np.full_like(en_p, np.nan)\n","    max_high[~equal_idx] = np.array([np.max(h[int(iin + 1):int(iout + 1)]) for _, _, iin, iout in np_obj[~equal_idx, :4]]).reshape(-1, 1)\n","\n","    if open_side == \"SELL\":\n","        p_tps = en_ps - (en_ps - tps) * p_ranges\n","        # min_low = np.full_like(en_p, np.nan)\n","        # min_low[~equal_idx] = np.array([np.min(l[int(iin + 1):int(iout + 1)]) for _, _, iin, iout in np_obj[~equal_idx, :4]]).reshape(-1, 1)  # start from iin + 1 (tp 체결을 entry_idx 부터 보지 않음)\n","        tp_idx = (np.tile(min_low, (1, len_p)) <= p_tps) * (np.tile(max_high, (1, len_p)) <= outs)  # entry_idx 포함해서 out touch 금지 (보수적 검증)\n","    else:\n","        p_tps = en_ps + (tps - en_ps) * p_ranges\n","        # max_high = np.full_like(en_p, np.nan)\n","        # max_high[~equal_idx] = np.array([np.max(h[int(iin + 1):int(iout + 1)]) for _, _, iin, iout in np_obj[~equal_idx, :4]]).reshape(-1, 1)\n","        tp_idx = (np.tile(max_high, (1, len_p)) >= p_tps) * (np.tile(min_low, (1, len_p)) >= outs)\n","\n","    ex_ps = outs.copy()\n","    ex_ps[tp_idx] = p_tps[tp_idx]\n","\n","    if open_side == \"SELL\":\n","        if not inversion:\n","            pr = ((en_ps / ex_ps - fees - 1) * lvrgs * p_qty_ratio).sum(axis=1) + 1\n","            # ------ liquidation ------ #\n","            max_high = np.full_like(en_p, np.nan)\n","            max_high[~equal_idx] = np.array([np.max(h[int(iin):int(iout)]) for _, _, iin, iout in np_obj[~equal_idx, :4]]).reshape(-1, 1)\n","            liqd = np.nanmin((en_p / max_high - fee - 1) * lvrg + 1)\n","        else:\n","            pr = ((ex_ps / en_ps - fees - 1) * lvrgs * p_qty_ratio).sum(axis=1) + 1\n","            # ------ liquidation ------ #\n","            min_low = np.full_like(en_p, np.nan)\n","            min_low[~equal_idx] = np.array([np.min(l[int(iin):int(iout)]) for _, _, iin, iout in np_obj[~equal_idx, :4]]).reshape(-1, 1)\n","            liqd = np.nanmin((min_low / en_p - fee - 1) * lvrg + 1)\n","    else:\n","        if not inversion:\n","            pr = ((ex_ps / en_ps - fees - 1) * lvrgs * p_qty_ratio).sum(axis=1) + 1\n","            # ------ liquidation ------ #\n","            min_low = np.full_like(en_p, np.nan)\n","            min_low[~equal_idx] = np.array([np.min(l[int(iin):int(iout)]) for _, _, iin, iout in np_obj[~equal_idx, :4]]).reshape(-1, 1)\n","            liqd = np.nanmin((min_low / en_p - fee - 1) * lvrg + 1)\n","        else:\n","            pr = ((en_ps / ex_ps - fees - 1) * lvrgs * p_qty_ratio).sum(axis=1) + 1\n","            # ------ liquidation ------ #\n","            max_high = np.full_like(en_p, np.nan)\n","            max_high[~equal_idx] = np.array([np.max(h[int(iin):int(iout)]) for _, _, iin, iout in np_obj[~equal_idx, :4]]).reshape(-1, 1)\n","            liqd = np.nanmin((en_p / max_high - fee - 1) * lvrg + 1)\n","\n","    return pr.reshape(-1, 1), liqd"],"metadata":{"id":"wDQWK3v5xOFa"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def idep_plot_v16(res_df, len_df, config, high, low, open_info_df1, paired_res, inversion=False, sample_ratio=0.7, title_position=(0.5, 0.5),\n","                  fontsize=15, signi=False):  # open_idx, side_arr\n","    if not signi:\n","        plt.style.use(['dark_background', 'fast'])\n","        plt.figure(figsize=(24, 8))\n","        gs = gridspec.GridSpec(nrows=2,  # row 몇 개\n","                               ncols=3,  # col 몇 개\n","                               height_ratios=[10, 1]\n","                               # height_ratios=[10, 10, 1]\n","                               )\n","    gs_idx = 0\n","    # plt.suptitle(key)\n","\n","    p_ranges, p_qty_ratio = literal_eval(config.tp_set.p_ranges), literal_eval(config.tp_set.p_qty_ratio)\n","    assert np.sum(p_qty_ratio) == 1.0\n","    assert len(p_ranges) == len(p_qty_ratio)\n","\n","    if sample_ratio is not None:\n","        sample_len = int(len_df * sample_ratio)\n","    else:\n","        sample_len = len_df\n","\n","    # ------ short & long data preparation ------ #\n","    # start_0 = time.time()\n","\n","    net_p1_idx_arr, p1_idx_arr, p2_idx_arr, pair_idx_arr, pair_price_arr, lvrg_arr, fee_arr, tpout_arr, tr_arr = paired_res\n","    assert len(p1_idx_arr) != 0, \"assert len(p1_idx_arr) != 0\"\n","\n","    short_net_p1_idx_arr = net_p1_idx_arr[np.where(open_info_df1.side.loc[net_p1_idx_arr] == OrderSide.SELL)[0]]\n","    long_net_p1_idx_arr = net_p1_idx_arr[np.where(open_info_df1.side.loc[net_p1_idx_arr] == OrderSide.BUY)[0]]\n","\n","    short_net_p1_frq = len(short_net_p1_idx_arr)\n","    long_net_p1_frq = len(long_net_p1_idx_arr)\n","    # print(\"len(short_net_p1_true_bias_bool) :\", len(short_net_p1_idx_arr))\n","    # print(\"len(long_net_p1_true_bias_bool) :\", len(long_net_p1_idx_arr))\n","\n","    short_p1_openi_idx = np.where(open_info_df1.side.loc[p1_idx_arr] == OrderSide.SELL)[0]  # p1_idx_arr 에 대한 idx, # side_arr,\n","    long_p1_openi_idx = np.where(open_info_df1.side.loc[p1_idx_arr] == OrderSide.BUY)[0]\n","\n","    # p1_idx = open_idx[p1_openi_arr].reshape(-1, 1)   # != p1_idx_arr, p1_openi_arr 은 exit_done 기준임\n","\n","    np_obj = np.hstack((pair_price_arr, pair_idx_arr, p1_idx_arr.reshape(-1, 1)))  # p1_idx_arr is 1d, need to be changed to 2d (for stacking)\n","    short_obj = np_obj[short_p1_openi_idx]\n","    long_obj = np_obj[long_p1_openi_idx]\n","    both_obj = np.vstack((short_obj, long_obj))\n","    print(\"short_obj.shape :\", short_obj.shape)\n","    print(\"long_obj.shape :\", long_obj.shape)\n","\n","    short_obj, long_obj, both_obj = [np.split(obj_, 5, axis=1) for obj_ in [short_obj, long_obj, both_obj]]\n","\n","    short_p2_idx_arr, long_p2_idx_arr = [p2_idx_arr[openi_idx_].reshape(-1, 1) for openi_idx_ in [short_p1_openi_idx, long_p1_openi_idx]]\n","    short_lvrg_arr, long_lvrg_arr = [lvrg_arr[openi_idx_].reshape(-1, 1) for openi_idx_ in [short_p1_openi_idx, long_p1_openi_idx]]\n","    short_fee_arr, long_fee_arr = [fee_arr[openi_idx_].reshape(-1, 1) for openi_idx_ in [short_p1_openi_idx, long_p1_openi_idx]]\n","    short_tpout_arr, long_tpout_arr = [tpout_arr[openi_idx_] for openi_idx_ in [short_p1_openi_idx, long_p1_openi_idx]]\n","    # short_bias_arr, long_bias_arr = [bias_arr[openi_idx_] for openi_idx_ in [short_p1_openi_idx, long_p1_openi_idx]]\n","    short_tr_arr, long_tr_arr = [tr_arr[openi_idx_] for openi_idx_ in [short_p1_openi_idx, long_p1_openi_idx]]\n","    # print(\"long_bias_arr.shape :\", long_bias_arr.shape)\n","    # print(\"short / long arr setting elapsed time :\", time.time() - start_0)\n","\n","    # start_0 = time.time()\n","\n","    short_tpbox_hhm, long_tpbox_hhm, short_tpbox_p2exec_hhm, long_tpbox_p2exec_hhm, short_outbox_hhm, long_outbox_hhm, short_p2_true_bias_bool, long_p2_true_bias_bool, \\\n","          short_tp_1, short_tp_0, long_tp_1, long_tp_0, short_out_1, short_out_0, long_out_1, long_out_0, short_ep2_0, long_ep2_0 = \\\n","      get_wave_bias_v5(res_df, config, high, low, len_df, short_net_p1_idx_arr, long_net_p1_idx_arr, short_p2_idx_arr, long_p2_idx_arr, short_obj, long_obj)\n","\n","    # print(\"get_wave_bias elapsed time :\", time.time() - start_0)\n","\n","    len_short, len_long = len(short_p1_openi_idx), len(long_p1_openi_idx)\n","\n","    # ------ plot_data ------ #\n","    try:\n","        # start_0 = time.time()\n","        if len_short == 0:\n","            short_pr = []\n","            gs_idx += 1\n","        else:\n","            short_tr = short_tr_arr.mean()\n","            short_pr, short_liqd = get_pr_v4(OrderSide.SELL, high, low, short_obj, short_tpout_arr, short_lvrg_arr, short_fee_arr, p_ranges,\n","                                             p_qty_ratio, inversion)\n","            short_total_pr = to_total_pr(len_df, short_pr, short_obj[-2])\n","            short_cum_pr = np.cumprod(short_total_pr)\n","            short_hlm = hlm(short_pr, short_p2_true_bias_bool)\n","            short_trade_ticks = np.mean(short_obj[-2] - short_obj[-1])\n","            if signi:\n","                short_idep_res_obj = (short_tpbox_p2exec_hhm, short_hlm) + get_res_info_nb_v2(sample_len, short_pr, short_total_pr, short_cum_pr, short_liqd)\n","            else:\n","                gs_idx = plot_info_v8(gs, gs_idx, len_df, sample_len, short_tr, short_tpbox_hhm, short_tpbox_p2exec_hhm, short_outbox_hhm, short_hlm, short_trade_ticks, short_net_p1_frq, short_pr, short_total_pr,\n","                                      short_cum_pr, short_liqd, short_lvrg_arr.mean(), title_position, fontsize)\n","        # print(\"short plot_data elapsed time :\", time.time() - start_0)\n","\n","    except Exception as e:\n","        gs_idx += 1\n","        print(\"error in short plot_data :\", e)\n","\n","    try:\n","        # start_0 = time.time()\n","        if len_long == 0:\n","            long_pr = []\n","            gs_idx += 1\n","        else:\n","            long_tr = long_tr_arr.mean()\n","            long_pr, long_liqd = get_pr_v4(OrderSide.BUY, high, low, long_obj, long_tpout_arr, long_lvrg_arr, long_fee_arr, p_ranges, p_qty_ratio,\n","                                           inversion)\n","            long_total_pr = to_total_pr(len_df, long_pr, long_obj[-2])\n","            long_cum_pr = np.cumprod(long_total_pr)\n","            # long_hhm = long_net_p1_hhm\n","            long_hlm = hlm(long_pr, long_p2_true_bias_bool)\n","            long_trade_ticks = np.mean(long_obj[-2] - long_obj[-1])\n","            if signi:\n","                long_idep_res_obj = (long_tpbox_p2exec_hhm, long_hlm) + get_res_info_nb_v2(sample_len, long_pr, long_total_pr, long_cum_pr, long_liqd)\n","            else:\n","                gs_idx = plot_info_v8(gs, gs_idx, len_df, sample_len, long_tr, long_tpbox_hhm, long_tpbox_p2exec_hhm, long_outbox_hhm, long_hlm, long_trade_ticks, long_net_p1_frq, long_pr, long_total_pr,\n","                                      long_cum_pr, long_liqd, long_lvrg_arr.mean(), title_position, fontsize)\n","        # print(\"long plot_data elapsed time :\", time.time() - start_0)\n","    except Exception as e:\n","        gs_idx += 1\n","        print(\"error in long plot_data :\", e)\n","\n","    try:\n","        # start_0 = time.time()\n","        if len_short * len_long == 0:\n","            both_pr = []\n","            gs_idx += 1\n","        else:\n","            both_tr = (short_tr + long_tr) / 2\n","            both_pr = np.vstack((short_pr, long_pr))  # for 2d arr, obj 를 1d 로 만들지 않는 이상, pr 은 2d 유지될 것\n","            both_total_pr = to_total_pr(len_df, both_pr, both_obj[-2])\n","            both_cum_pr = np.cumprod(both_total_pr)\n","            both_liqd = min(short_liqd, long_liqd)\n","            both_p2_true_bias_bool = np.hstack((short_p2_true_bias_bool, long_p2_true_bias_bool))  # hstack for 1d arr, vstack for 2d arr\n","            both_tpbox_hhm = (short_tpbox_hhm + long_tpbox_hhm) / 2\n","            both_tpbox_p2exec_hhm, both_hlm = (short_tpbox_p2exec_hhm + long_tpbox_p2exec_hhm) / 2, (short_hlm + long_hlm) / 2\n","            both_outbox_hhm = (short_outbox_hhm + long_outbox_hhm) / 2\n","            both_trade_ticks = np.mean(both_obj[-2] - both_obj[-1])\n","            both_net_p1_frq = short_net_p1_frq + long_net_p1_frq\n","            if signi:\n","                both_idep_res_obj = (both_tpbox_p2exec_hhm, both_hlm) + get_res_info_nb_v2(sample_len, both_pr, both_total_pr, both_cum_pr, both_liqd)\n","            else:\n","                gs_idx = plot_info_v8(gs, gs_idx, len_df, sample_len, both_tr, both_tpbox_hhm, both_tpbox_p2exec_hhm, both_outbox_hhm, both_hlm, both_trade_ticks, both_net_p1_frq, both_pr, both_total_pr,\n","                                      both_cum_pr, both_liqd, lvrg_arr.mean(), title_position, fontsize)\n","        # print(\"both plot_data elapsed time :\", time.time() - start_0)\n","    except Exception as e:\n","        gs_idx += 1\n","        print(\"error in both plot_data :\", e)\n","\n","    if not signi:\n","        if len_short * len_long > 0:\n","            for obj, bias_arr, cum_pr in zip([short_obj, long_obj, both_obj], [short_p2_true_bias_bool, long_p2_true_bias_bool, both_p2_true_bias_bool],\n","                                             [short_cum_pr, long_cum_pr, both_cum_pr]):\n","                try:\n","                    # start_0 = time.time()\n","                    gs_idx = frq_dev_plot_v4(gs, gs_idx, len_df, sample_len, obj[-2], bias_arr, cum_pr[-1], fontsize)\n","                    # print(\"frq_dev_plot elapsed time :\", time.time() - start_0)\n","                except Exception as e:\n","                    gs_idx += 1\n","                    print(\"error in frq_dev_plot :\", e)\n","            plt.show()\n","            plt.close()\n","\n","        return short_pr, short_obj, short_lvrg_arr, short_fee_arr, short_tpout_arr, short_tr_arr, short_p2_true_bias_bool, short_p2_idx_arr, short_tp_1, short_tp_0, short_out_1, short_out_0, short_ep2_0, \\\n","               long_pr, long_obj, long_lvrg_arr, long_fee_arr, long_tpout_arr, long_tr_arr, long_p2_true_bias_bool, long_p2_idx_arr, long_tp_1, long_tp_0, long_out_1, long_out_0, long_ep2_0  # long_net_p1_idx_arr long_p2_idx_arr\n","\n","    else:\n","        return [short_idep_res_obj[:-1], long_idep_res_obj[:-1], both_idep_res_obj[:-1]]"],"metadata":{"id":"6G92q_bExTVn"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"oE5zkT75Beiy"},"outputs":[],"source":["\n","# ------------ plot survey_res ------------ #\n","title_list = [\"short\", \"long\", \"both\"]\n","sub_title_list = ['prcn', 'wb', 'len_pr', 'dpf', 'wr', 'sr', 'acc_pr', 'sum_pr', 'min_pr', 'liqd', 'acc_mdd', 'sum_mdd']\n","space_ = \" \" * 120\n","\n","fig = plt.figure(figsize=(24, 8))\n","plt.style.use('dark_background')\n","gs = gridspec.GridSpec(nrows=1,\n","                        ncols=3,\n","                        # height_ratios=[1, 1, 1]\n","                      )\n","# nrows, ncols, h_r = 3, 3, [1, 1, 1]\n","nrows, ncols, h_r = 3, 4, [1, 1, 1]\n","# nrows, ncols, h_r = 4, 3, [1, 1, 1, 1]\n","# if d_idx == 0:\n","# else:\n","  # nrows, ncols, h_r = 2, 2, [1, 1]\n","\n","for d_idx, (title_name, survey_res) in enumerate(zip(title_list, survey_res_list)):  \n","  inner_gs = gs[d_idx].subgridspec(nrows=nrows,\n","                        ncols=ncols,\n","                        height_ratios=h_r\n","                      )\n","  for in_idx, (data_, sub_title) in enumerate(zip(survey_res.T, sub_title_list)):\n","    plt.subplot(inner_gs[in_idx])\n","    data = data_.ravel()\n","    valid_idx = ~np.isnan(data)\n","    if np.sum(valid_idx) > 0:\n","      if type(val_list[0]) == str:\n","        x, y = np.arange(len(val_list))[valid_idx], data[valid_idx]\n","      else:\n","        x, y = val_list[valid_idx], data[valid_idx]\n","      plt.plot(x, y)  # 앞에서부터 len(result) 만큼만    \n","      plt.title(sub_title + '_{:.2f}'.format(x[np.argmax(y)]))\n","    else:\n","      plt.title(sub_title)\n","\n","plt.suptitle(space_.join(title_list))\n","plt.show()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"pbYUlJl34ImU"},"outputs":[],"source":["# ------ open validation ------ #\n","pos_side = \"SELL\" # SELL BUY\n","\n","if pos_side == \"SELL\":\n","  open_ = res_df['short_open1_{}'.format(config.selection_id)].to_numpy()\n","  open_ts = list(map(lambda x : str(x), res_df.index[open_ == 1]))  \n","else:\n","  open_ = res_df['long_open1_{}'.format(config.selection_id)].to_numpy()\n","  open_ts = list(map(lambda x : str(x), res_df.index[open_ == 1]))  "]},{"cell_type":"code","execution_count":null,"metadata":{"id":"wyYMYcxx4ImV"},"outputs":[],"source":["pos_index = open_info_df1.side == pos_side\n","for ts in res_df.index[open_info_df1.index[pos_index]]:\n","  print(ts)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"6YcqQQzsl6Ys"},"outputs":[],"source":["\n","def hlm(pr_list, true_bool):   # true_pr in true_bias / true_bias\n","  true_bias_pr = pr_list[true_bool].ravel()\n","  print(\"len(pr_list) :\", len(pr_list))\n","  print(\"len(true_bias_pr) :\", len(true_bias_pr))\n","  print(\"np.sum(pr_list > 1) :\", np.sum(pr_list > 1))\n","  print(\"np.sum(true_bias_pr > 1) :\", np.sum(true_bias_pr > 1))\n","  return np.sum(true_bias_pr > 1) / len(true_bias_pr)  # 차원을 고려한 계산"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"t7a5Hyyyd5Lk"},"outputs":[],"source":["\n","def get_wave_bias_v5_1(res_df, config, high, low, len_df, short_net_p1_idx_arr, long_net_p1_idx_arr, short_p2_idx_arr, long_p2_idx_arr, short_obj, long_obj):\n","\n","    short_net_p1_idx = short_net_p1_idx_arr.astype(int) #.reshape(-1, 1)\n","    short_p1_idx = short_obj[-1].astype(int).ravel()\n","    short_p2_idx = short_p2_idx_arr.astype(int).ravel() #.reshape(-1, 1)\n","    short_en_idx = short_obj[2].astype(int)\n","\n","    short_prime_net_p1_bool = short_net_p1_idx - pd.Series(short_net_p1_idx).shift(1).to_numpy() > 1\n","    short_prime_net_p1_bool[0] = True\n","    short_prime_net_p1_idx = short_net_p1_idx[short_prime_net_p1_bool]\n","    \n","    short_prime_p2_bool = short_p2_idx - pd.Series(short_p2_idx).shift(1).to_numpy() > 1\n","    short_prime_p2_bool[0] = True\n","    short_prime_p2_idx = short_p2_idx[short_prime_p2_bool]\n","    \n","    short_tp_1 = ffill_line(res_df['short_tp_1_{}'.format(config.selection_id)].to_numpy(), short_prime_net_p1_idx)  # net_p1_idx ~ net_p1_idx' 사이에 대한 momentum 조사 (net 이유는 logic's validation)\n","    short_tp_0 = ffill_line(res_df['short_tp_0_{}'.format(config.selection_id)].to_numpy(), short_prime_net_p1_idx)\n","    short_out_1 = ffill_line(res_df['short_out_1_{}'.format(config.selection_id)].to_numpy(), short_prime_p2_idx)  # 체결된, p2_idx ~ p2_idx' 사이에 대한 momentum 조사\n","    short_out_0 = ffill_line(res_df['short_out_0_{}'.format(config.selection_id)].to_numpy(), short_prime_p2_idx)\n","    short_ep2_0 = ffill_line(res_df['short_ep2_0_{}'.format(config.selection_id)].to_numpy(), short_prime_p2_idx)\n","    # short_net_wave_1 = ffill_line(res_df['short_wave_1_{}'.format(config.selection_id)].to_numpy(), short_op_idx)  # en_idx 에 sync 된 open_idx 를 사용해야함\n","    # short_net_wave_0 = ffill_line(res_df['short_wave_0_{}'.format(config.selection_id)].to_numpy(), short_op_idx)\n","\n","    long_net_p1_idx = long_net_p1_idx_arr.astype(int) #.reshape(-1, 1)\n","    long_p1_idx = long_obj[-1].astype(int).ravel()\n","    long_p2_idx = long_p2_idx_arr.astype(int).ravel() #.reshape(-1, 1)\n","    long_en_idx = long_obj[2].astype(int)\n","\n","    long_prime_net_p1_bool = long_net_p1_idx - pd.Series(long_net_p1_idx).shift(1).to_numpy() > 1\n","    long_prime_net_p1_bool[0] = True\n","    long_prime_net_p1_idx = long_net_p1_idx[long_prime_net_p1_bool]\n","    \n","    long_prime_p2_bool = long_p2_idx - pd.Series(long_p2_idx).shift(1).to_numpy() > 1\n","    long_prime_p2_bool[0] = True\n","    long_prime_p2_idx = long_p2_idx[long_prime_p2_bool]\n","    \n","    long_tp_1 = ffill_line(res_df['long_tp_1_{}'.format(config.selection_id)].to_numpy(), long_prime_net_p1_idx)\n","    long_tp_0 = ffill_line(res_df['long_tp_0_{}'.format(config.selection_id)].to_numpy(), long_prime_net_p1_idx)\n","    long_out_1 = ffill_line(res_df['long_out_1_{}'.format(config.selection_id)].to_numpy(), long_prime_p2_idx)  # 체결된, p2_idx ~ p2_idx' 사이에 대한 momentum 조사\n","    long_out_0 = ffill_line(res_df['long_out_0_{}'.format(config.selection_id)].to_numpy(), long_prime_p2_idx)\n","    long_ep2_0 = ffill_line(res_df['long_ep2_0_{}'.format(config.selection_id)].to_numpy(), long_prime_p2_idx)\n","\n","    short_unq_p1_idx = np.unique(short_p1_idx)  #.reshape(-1, 1)   # 통일성을 위해 2d 로 설정\n","    long_unq_p1_idx = np.unique(long_p1_idx)  #.reshape(-1, 1)\n","\n","    bias_info_tick = config.tr_set.bias_info_tick\n","\n","    # print(\"long_net_p1_idx.shape :\", long_net_p1_idx.shape)\n","    # print(\"long_en_idx.shape :\", long_en_idx.shape)\n","\n","    # ================== touch idx ================== #\n","    # 1. min 에 초점을 맞추는 거니까, touch 없을시 len_df 로 설정\n","    # 2. future_data 사용이니까, shift(-bias_info_tick) 설정\n","    # 3. entry 다음 idx 부터 -> tp & out 체결 logic 이 현재 entry_idx 부터 되어있어서 취소\n","    # Todo, high 와 low 중 어디에 먼저닿느냐가 중요함을 key 로 잡고만든 logic 임\n","    len_df_range = np.arange(len_df)\n","    last_idx = len_df - 1  # nan 발생하면 대소 비교로 hhm 확인이 불가능해짐\n","    shift_range = bias_info_tick - 1  # entry_idx 까지 포함해서 wave_bias check\n","\n","    # ------------ pair & idxs ------------ #\n","    short_net_p1_pair = list(zip(short_net_p1_idx, np.append(short_net_p1_idx[1:], last_idx)))\n","    long_net_p1_pair = list(zip(long_net_p1_idx, np.append(long_net_p1_idx[1:], last_idx)))\n","\n","    short_p2_pair = list(zip(short_p2_idx, np.append(short_p2_idx[1:], last_idx)))\n","    long_p2_pair = list(zip(long_p2_idx, np.append(long_p2_idx[1:], last_idx)))\n","\n","    short_tp_1_touch_idxs = np.where(low <= short_tp_1, len_df_range, last_idx)   #.rolling(bias_info_tick, min_periods=1).min().shift(-shift_range).to_numpy()\n","    short_tp_0_touch_idxs = np.where(high >= short_tp_0, len_df_range, last_idx)   #.rolling(bias_info_tick, min_periods=1).min().shift(-shift_range).to_numpy()\n","    long_tp_1_touch_idxs = np.where(high >= long_tp_1, len_df_range, last_idx)   #.rolling(bias_info_tick, min_periods=1).min().shift(-shift_range).to_numpy()\n","    long_tp_0_touch_idxs = np.where(low <= long_tp_0, len_df_range, last_idx)   #.rolling(bias_info_tick, min_periods=1).min().shift(-shift_range).to_numpy()\n","\n","    short_out_1_touch_idxs = np.where(low <= short_out_1, len_df_range, last_idx)   #.rolling(bias_info_tick, min_periods=1).min().shift(-shift_range).to_numpy()\n","    short_out_0_touch_idxs = np.where(high >= short_out_0, len_df_range, last_idx)   #.rolling(bias_info_tick, min_periods=1).min().shift(-shift_range).to_numpy()\n","    long_out_1_touch_idxs = np.where(high >= long_out_1, len_df_range, last_idx)   #.rolling(bias_info_tick, min_periods=1).min().shift(-shift_range).to_numpy()\n","    long_out_0_touch_idxs = np.where(low <= long_out_0, len_df_range, last_idx)   #.rolling(bias_info_tick, min_periods=1).min().shift(-shift_range).to_numpy()\n","\n","    # ------------ min touch_idx ------------ #\n","    short_tp_1_touch_idx = get_touch_idx_fill(short_tp_1_touch_idxs, short_net_p1_pair, short_net_p1_idx, len_df)  # pair means 구간\n","    short_tp_0_touch_idx = get_touch_idx_fill(short_tp_0_touch_idxs, short_net_p1_pair, short_net_p1_idx, len_df)\n","    long_tp_1_touch_idx = get_touch_idx_fill(long_tp_1_touch_idxs, long_net_p1_pair, long_net_p1_idx, len_df)\n","    long_tp_0_touch_idx = get_touch_idx_fill(long_tp_0_touch_idxs, long_net_p1_pair, long_net_p1_idx, len_df)\n","\n","    short_out_1_touch_idx = get_touch_idx_fill(short_out_1_touch_idxs, short_p2_pair, short_p2_idx, len_df)  # pair means 구간\n","    short_out_0_touch_idx = get_touch_idx_fill(short_out_0_touch_idxs, short_p2_pair, short_p2_idx, len_df)\n","    long_out_1_touch_idx = get_touch_idx_fill(long_out_1_touch_idxs, long_p2_pair, long_p2_idx, len_df)\n","    long_out_0_touch_idx = get_touch_idx_fill(long_out_0_touch_idxs, long_p2_pair, long_p2_idx, len_df)\n","\n","    # ------------ point's touch_idx ------------ #\n","    short_tp_1_net_p1_touch_idx = short_tp_1_touch_idx[short_net_p1_idx]   # for tp_box's net_hhm\n","    short_tp_0_net_p1_touch_idx = short_tp_0_touch_idx[short_net_p1_idx]\n","    long_tp_1_net_p1_touch_idx = long_tp_1_touch_idx[long_net_p1_idx]\n","    long_tp_0_net_p1_touch_idx = long_tp_0_touch_idx[long_net_p1_idx]\n","    # print(\"long_tp_1_net_p1_touch_idx :\", long_tp_1_net_p1_touch_idx)\n","\n","    short_tp_1_unq_p1_touch_idx = short_tp_1_touch_idx[short_unq_p1_idx]    # p2 까지 체결된 p1's hhm\n","    short_tp_0_unq_p1_touch_idx = short_tp_0_touch_idx[short_unq_p1_idx]\n","    long_tp_1_unq_p1_touch_idx = long_tp_1_touch_idx[long_unq_p1_idx]\n","    long_tp_0_unq_p1_touch_idx = long_tp_0_touch_idx[long_unq_p1_idx]\n","\n","    short_tp_1_p2_touch_idx = short_tp_1_touch_idx[short_p2_idx]    # hlm 을 위한 hhm (on p2)\n","    short_tp_0_p2_touch_idx = short_tp_0_touch_idx[short_p2_idx]\n","    long_tp_1_p2_touch_idx = long_tp_1_touch_idx[long_p2_idx]\n","    long_tp_0_p2_touch_idx = long_tp_0_touch_idx[long_p2_idx]\n","\n","    short_out_1_p2_touch_idx = short_out_1_touch_idx[short_p2_idx]   # for out_box's executed_hhm\n","    short_out_0_p2_touch_idx = short_out_0_touch_idx[short_p2_idx]\n","    long_out_1_p2_touch_idx = long_out_1_touch_idx[long_p2_idx]\n","    long_out_0_p2_touch_idx = long_out_0_touch_idx[long_p2_idx]\n","\n","    # ------------------ bias_bool & hhm ------------------ #\n","    short_net_p1_true_bias_bool = short_tp_1_net_p1_touch_idx < short_tp_0_net_p1_touch_idx  # true_bias 의 조건\n","    short_net_p1_false_bias_bool = short_tp_1_net_p1_touch_idx >= short_tp_0_net_p1_touch_idx  # false_bias 의 조건, ~true_bias_bool 와 같지 않음, why ..? = en_idx\n","    long_net_p1_true_bias_bool = long_tp_1_net_p1_touch_idx < long_tp_0_net_p1_touch_idx\n","    long_net_p1_false_bias_bool = long_tp_1_net_p1_touch_idx >= long_tp_0_net_p1_touch_idx\n","\n","    short_unq_p1_true_bias_bool = short_tp_1_unq_p1_touch_idx < short_tp_0_unq_p1_touch_idx  # true_bias 의 조건\n","    short_unq_p1_false_bias_bool = short_tp_1_unq_p1_touch_idx >= short_tp_0_unq_p1_touch_idx  # false_bias 의 조건, ~true_bias_bool 와 같지 않음, why ..? = en_idx    \n","    long_unq_p1_true_bias_bool = long_tp_1_unq_p1_touch_idx < long_tp_0_unq_p1_touch_idx\n","    long_unq_p1_false_bias_bool = long_tp_1_unq_p1_touch_idx >= long_tp_0_unq_p1_touch_idx\n","\n","    short_p2_true_bias_bool = short_tp_1_p2_touch_idx < short_tp_0_p2_touch_idx\n","    short_p2_false_bias_bool = short_tp_1_p2_touch_idx >= short_tp_0_p2_touch_idx\n","    long_p2_true_bias_bool = long_tp_1_p2_touch_idx < long_tp_0_p2_touch_idx\n","    long_p2_false_bias_bool = long_tp_1_p2_touch_idx >= long_tp_0_p2_touch_idx\n","\n","    short_p2_out_true_bias_bool = short_out_1_p2_touch_idx < short_out_0_p2_touch_idx\n","    short_p2_out_false_bias_bool = short_out_1_p2_touch_idx >= short_out_0_p2_touch_idx\n","    long_p2_out_true_bias_bool = long_out_1_p2_touch_idx < long_out_0_p2_touch_idx\n","    long_p2_out_false_bias_bool = long_out_1_p2_touch_idx >= long_out_0_p2_touch_idx\n","\n","    short_net_p1_hhm = hhm(short_net_p1_true_bias_bool, short_net_p1_false_bias_bool)\n","    long_net_p1_hhm = hhm(long_net_p1_true_bias_bool, long_net_p1_false_bias_bool)\n","\n","    short_p1_hhm = hhm(short_unq_p1_true_bias_bool, short_unq_p1_false_bias_bool)\n","    long_p1_hhm = hhm(long_unq_p1_true_bias_bool, long_unq_p1_false_bias_bool)\n","\n","    # short_p2_hhm = hhm(short_p2_true_bias_bool, short_p2_false_bias_bool)\n","    # long_p2_hhm = hhm(long_p2_true_bias_bool, long_p2_false_bias_bool)\n","\n","    short_out_hhm = hhm(short_p2_out_true_bias_bool, short_p2_out_false_bias_bool)\n","    long_out_hhm = hhm(long_p2_out_true_bias_bool, long_p2_out_false_bias_bool)\n","\n","    # print(\"short_net_p1_hhm, short_p2_hhm, short_out_hhm :\", short_net_p1_hhm, short_p2_hhm, short_out_hhm)\n","\n","    return short_net_p1_hhm, long_net_p1_hhm, short_p1_hhm, long_p1_hhm, short_out_hhm, long_out_hhm, short_p2_true_bias_bool, long_p2_true_bias_bool, \\\n","          short_tp_1[short_en_idx], short_tp_0[short_en_idx], long_tp_1[long_en_idx], long_tp_0[long_en_idx], \\\n","          short_out_1[short_en_idx], short_out_0[short_en_idx], long_out_1[long_en_idx], long_out_0[long_en_idx], short_ep2_0[short_en_idx], long_ep2_0[long_en_idx]   # plot_check 을 위해 en_idx 넣음\n","          "]},{"cell_type":"code","execution_count":null,"metadata":{"id":"dsI-R8Zz7ls1"},"outputs":[],"source":["\n","        # tr_arr = res_df['{}_tr_{}'.format(side_pos, selection_id)].to_numpy()\n","\n","        # ------ point1 & 2's tp_j ------ #\n","        # point_idxgap = point_idxgap_arr[op_idx]\n","        # if np.isnan(point_idxgap):\n","        #     continue\n","        # else:\n","        #     # ------ allow point2 only next to point1 ------ #\n","        #     open_arr = res_df['{}_open_{}'.format(side_pos, selection_id)].to_numpy()\n","        #     tp_j = int(op_idx - point_idxgap)\n","        #     if np.sum(open_arr[tp_j:op_idx]) != 0:\n","        #         continue"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":157},"executionInfo":{"elapsed":350,"status":"ok","timestamp":1652751452213,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"gMur2u8WeQ2K","outputId":"7b506c38-7a8f-4bd1-a021-8a065d009882"},"outputs":[{"data":{"image/png":"\n","text/plain":["<Figure size 1152x144 with 2 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["# ------ bias frquency ------ #\n","len_df = len(res_df)\n","\n","plt.figure(figsize=(16, 2))\n","\n","ax1 = plt.subplot(121)\n","plt.fill_between(short_obj[-2].ravel(), 0, 1, where=short_bias_arr.ravel() > 0,\n","                facecolor='#00ff00', alpha=1, transform=ax1.get_xaxis_transform())   # 00ff00\n","# plt.fill_between(short_obj[-2].ravel(), 0, 1, where=short_bias_arr.ravel() < 1,\n","#                 facecolor='#ff00ff', alpha=1, transform=ax1.get_xaxis_transform())\n","\n","ax2 = plt.subplot(122)\n","plt.fill_between(long_obj[-2].ravel(), 0, 1, where=long_bias_arr.ravel() > 0,\n","                facecolor='#00ff00', alpha=1, transform=ax2.get_xaxis_transform())\n","plt.fill_between(long_obj[-2].ravel(), 0, 1, where=long_bias_arr.ravel() < 1,\n","                facecolor='#ff00ff', alpha=1, transform=ax2.get_xaxis_transform())\n","plt.show()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":157},"executionInfo":{"elapsed":872,"status":"ok","timestamp":1652756329304,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"eoXMxRm3qdz2","outputId":"98c90b55-4c14-402c-e2d4-d7b88f9e2e62"},"outputs":[{"data":{"image/png":"\n","text/plain":["<Figure size 1152x144 with 2 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["# ------ bias frquency ------ #\n","len_df = len(res_df)\n","\n","plt.figure(figsize=(16, 2))\n","\n","ax1 = plt.subplot(121)\n","plt.fill_between(short_obj[-2].ravel(), 0, 1, where=short_bias_arr.ravel() > 0,\n","                facecolor='#00ff00', alpha=1, transform=ax1.get_xaxis_transform())   # 00ff00\n","# plt.fill_between(short_obj[-2].ravel(), 0, 1, where=short_bias_arr.ravel() < 1,\n","#                 facecolor='#ff00ff', alpha=1, transform=ax1.get_xaxis_transform())\n","\n","ax2 = plt.subplot(122)\n","plt.vlines(long_obj[-2][long_bias_arr], ymin=0, ymax=1, color='#00ff00')\n","plt.vlines(long_obj[-2][~long_bias_arr], ymin=0, ymax=1, color='#ff00ff')\n","# [plt.axvline(x_, color='#ff00ff') for x_, bias_ in zip(long_obj[-2], long_bias_arr) if not bias_]\n","plt.show()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"dm7ZqzS9vqhm"},"outputs":[],"source":["%timeit -n1 -r10 plt.vlines(long_obj[-2][long_bias_arr], ymin=0, ymax=1, color='#00ff00')  # 528 ms per loop --> 8.71 ms per loop\n","%timeit -n1 -r10 [plt.axvline(x_, color='#00ff00') for x_, bias_ in zip(long_obj[-2], long_bias_arr) if bias_]\n","\n","# np.sum(long_bias_arr == ~long_bias_arr)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"qOE2YSzntx8v"},"outputs":[],"source":["# %timeit -n1 -r10 [plt.axvline(x_) for x_, bias_ in zip(long_obj[-2].ravel(), long_bias_arr.ravel()) if bias_]\n","%timeit -n1 -r10 plt.fill_between(long_obj[-2].ravel(), 0, 1, where=long_bias_arr.ravel() > 0, facecolor='#00ff00', alpha=1, transform=ax2.get_xaxis_transform())"]},{"cell_type":"markdown","metadata":{"id":"dHFkv6Ar1ojU"},"source":["## plot_check_v3"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"rMIwv1Nr1ojX"},"outputs":[],"source":["# ------------------ plot_config ------------------ #\n","save_mode = 0\n","\n","front_plot = 0    # 0 : p1_tick, 1 : p2_tick\n","back_plot = 4     # 0 : post_plot_size, 1 : open, 2 : p2_tick, 3 : ep_tick, 4 : tp_tick\n","x_max = 300       # back_plot : 0 사용시, custom x_max 반영됨\n","\n","bias_plot = 0     # 1 : true_bias only, -1 : false_bias only, 0 : both\n","\n","pr_descend = 1   # 1 : 큰 pr 부터, -1 : 작은 pr 부터, 0 : 순서대로\n","\n","position = 1      # -1 : short, 0 & 1 : long\n","\n","x_margin_mult = 1/30\n","y_margin_mult = 1/30  # 0 \n","\n","prev_plotsize = 1000 #  150 100 20 500 1000\n","post_plotsize = 200 #\n","\n","inversion = 0\n","hedge = 0\n","\n","# ------ show or save ------ #\n","if save_mode:\n","  plot_check_dir = current_path + \"plot_check/\" +  key.replace(\".ftr\", \"\")\n","  shutil.rmtree(plot_check_dir, ignore_errors=True)  # remove existing dir\n","  os.makedirs(plot_check_dir)\n","  print(plot_check_dir)\n","else:\n","  plot_check_dir = None\n","\n","# ------------ 한 방향에 대해 plot_check 함 (by position var.) ------------ #\n","#   obj by position  \n","if position == -1:\n","  pos_str = \"SELL\"\n","  pr_, obj_ = short_pr, short_obj\n","  arr_list = [short_p2_idx_arr, short_lvrg_arr, short_fee_arr, short_tpout_arr, short_bias_arr, short_net_p1_bias_tick, short_tp_1, short_tp_0, short_out_1, short_out_0, short_ep2_0]\n","else:   # both option currently not supported\n","  pos_str = \"BUY\"\n","  pr_, obj_ = long_pr, long_obj\n","  arr_list = [long_p2_idx_arr, long_lvrg_arr, long_fee_arr, long_tpout_arr, long_bias_arr, long_net_p1_bias_tick, long_tp_1, long_tp_0, long_out_1, long_out_0, long_ep2_0]\n","\n","if pr_descend:\n","  if pr_descend == -1:\n","    pr_descend = 0\n","  pr, obj, [p2_idx_arr, lvrg_arr, fee_arr, tpout_arr, bias_arr, bias_tick, tp_1, tp_0, out_1, out_0, ep2_0] = sort_bypr_v4(pr_, obj_, arr_list, descending=pr_descend)  # --> pr_descend 의 의미가 사라짐.. (false -> true plot 으로 이동한 것뿐)\n","else:\n","  pr, obj, [p2_idx_arr, lvrg_arr, fee_arr, tpout_arr, bias_arr, bias_tick, tp_1, tp_0, out_1, out_0, ep2_0] = pr_, obj_, arr_list\n","\n","pr_msg = \"%s\\n {} ~ {} -> {:.5f}\\n lvrg : {}\\n fee : {:.4f}\" % (pos_str)  # = data_window, pos_str 으로 이곳에서 정의함\n","\n","try:   # wave_range 단독 실행의 경우 tr_arr 이 존재하지 않기 때문에 try 처리함\n","  res_df['short_tr_{}'.format(selection_id)].iloc[short_obj[-1].astype(int).ravel()] = short_tr_arr\n","  res_df['long_tr_{}'.format(selection_id)].iloc[long_obj[-1].astype(int).ravel()] = long_tr_arr\n","except:\n","  pass\n","\n","if front_plot == 0:\n","  front_idx = obj[4]      # left_margin 기준 - open_idx\n","else:\n","  front_idx = p2_idx_arr  # left_margin 기준 - p2_idx\n","\n","left_end_idx = front_idx - prev_plotsize  \n","right_end_idx = obj[3] + post_plotsize\n","invalid_left_end = np.sum(left_end_idx < 0)\n","\n","np_plot_params = np.hstack((left_end_idx, right_end_idx, pr, *obj, p2_idx_arr, lvrg_arr, fee_arr, tpout_arr, tp_1, tp_0, out_1, out_0, ep2_0))[invalid_left_end:]  # all arr should have same dimension\n","# plot_idx = np.full(len(np_plot_params), True)\n","\n","if bias_plot:\n","  if bias_plot == 1:\n","    bias_idx = bias_arr[invalid_left_end:].ravel()  # true_bias 만 plot\n","  else:\n","    bias_idx = ~bias_arr[invalid_left_end:].ravel()  # false_bias 만 plot\n","  \n","  # trendy_idx = bias_tick[invalid_left_end:] < config.tr_set.bias_tick  # temp location\n","\n","  np_plot_params = np_plot_params[bias_idx] #  * trendy_idx]  "]},{"cell_type":"markdown","metadata":{"id":"-4CXGqEN1ojY"},"source":["### session_plot"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":397,"status":"ok","timestamp":1662554968462,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"2bjxKCIh1ojZ","outputId":"637d8586-c0a9-4d1f-ca2a-90152ebfe343"},"outputs":[{"output_type":"stream","name":"stderr","text":["/content/drive/My Drive/Colab Notebooks/JnQ/funcs/funcs_plot_check.py:11: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.\n","  step_col_arr = np.array(col_list)\n"]}],"source":["selection_id = config.selection_id\n","\n","# ============ make col_idx_dict config ============ #\n","nonstep_col_list = []\n","step_col_list = []\n","step_col_list2 = []\n","stepmark_col_list = []\n","data_window_p1_col_list = []\n","data_window_p2_col_list = []\n","\n","# ============ nonstep_col_list - add info(col, alpha, color, linewidth) ============ #\n","# nonstep_col_list.append([['close'], 1, '#ffffff', 2])\n","\n","# ============ step_col_list - add info(col, alpha, color, linewidth) ============ #\n","# ------ htf_candle ------ #\n","# hc_tf1 = '5T'\n","hc_tf2 = '15T'\n","\n","# step_col_list.append([['open_{}'.format(hc_tf1), 'close_{}'.format(hc_tf1)], 1, '#ffffff', 2])\n","step_col_list.append([['open_{}'.format(hc_tf2), 'close_{}'.format(hc_tf2)], 1, '#ffffff', 4])\n","\n","# ------ resi_sup ------ #\n","# rs_tf = 'T'\n","# step_col_list.append([['resi_{}'.format(rs_tf), 'sup_{}'.format(rs_tf)], 1, '#ffeb3b', 1])\n","# step_col_list.append([['resi_out_{}'.format(rs_tf), 'sup_out_{}'.format(rs_tf)], 1, 'dodgerblue', 2])\n","\n","# ------ wave_base ------ #\n","wave_itv1 = config.tr_set.wave_itv1\n","wave_period1 = config.tr_set.wave_period1\n","wave_itv2 = config.tr_set.wave_itv2\n","wave_period2 = config.tr_set.wave_period2\n","\n","# step_col_list.append([['dc_base_{}{}'.format(wave_itv1, wave_period1)], 1, '#5b9cf6', 1])\n","# step_col_list.append([['dc_base_{}{}'.format(wave_itv2, wave_period2)], 1, '#5b9cf6', 5])\n","\n","# step_col_list.append([['wave_low_fill_{}{}'.format(wave_tf, wave_period)], 1, '#ffeb3b', 1])\n","# step_col_list.append([['wave_high_fill_{}{}'.format(wave_tf, wave_period)], 1, '#ffeb3b', 1])\n","# step_col_list.append([['dc_upper_{}{}'.format(wave_tf, wave_period), 'dc_lower_{}{}'.format(wave_tf, wave_period)], 1, '#ffeb3b', 1])\n","\n","# ------ dc ------ #\n","dc_tf1 = 'T'\n","dc_period1 = 20 # wave_period2  # 20\n","dc_tf2 = '5T'\n","dc_period2 = 20 # config.loc_set.point2.csd_period if config.loc_set.point2.csd_period != \"None\" else wave_period2 \n","dc_tf3 = '15T'\n","dc_period3 = 20\n","dc_tf4 = 'H'\n","dc_period4 = 20\n","\n","# step_col_list.append([['dc_upper_{}{}'.format(dc_tf1, dc_period1), 'dc_lower_{}{}'.format(dc_tf1, dc_period1)], 1, '#ff00ff', 1]),  # inner #ffeb3b\n","# step_col_list.append([['dc_upper_{}{}'.format(dc_tf2, dc_period2), 'dc_lower_{}{}'.format(dc_tf2, dc_period2)], 1, '#ffee58', 2]),  # inner #ffeb3b\n","step_col_list.append([['dc_base_{}{}'.format(dc_tf1, dc_period1)], 1, '#5b9cf6', 1]) # ffee58 5b9cf6 \n","step_col_list.append([['dc_base_{}{}'.format(dc_tf2, dc_period2)], 1, '#5b9cf6', 3]) # ffee58 5b9cf6\n","step_col_list.append([['dc_base_{}{}'.format(dc_tf3, dc_period3)], 1, '#5b9cf6', 5]) # ffee58 5b9cf6\n","step_col_list.append([['dc_base_{}{}'.format(dc_tf4, dc_period4)], 1, '#5b9cf6', 7]) # ffee58 5b9cf6\n","\n","# ------ bb ------ #\n","bb_tf1 = 'T'\n","bb_period1 = 60\n","\n","# step_col_list.append([['bb_upper_{}{}'.format(bb_tf1, bb_period1), 'bb_lower_{}{}'.format(bb_tf1, bb_period1)], 1, '#ffffff', 1])\n","# step_col_list.append([['bb_upper2_{}{}'.format(bb_tf1, bb_period1), 'bb_lower2_{}{}'.format(bb_tf1, bb_period1)], 1, '#ffffff', 1])\n","# step_col_list.append([['bb_upper3_{}{}'.format(bb_tf1, bb_period1), 'bb_lower3_{}{}'.format(bb_tf1, bb_period1)], 1, '#ffffff', 1])\n","# step_col_list.append([['bb_base_{}{}'.format(bb_tf1, bb_period1)], 1, '#00ff00', 1])\n","\n","\n","# ------ ma / ema ------ #\n","# step_col_list.append([['ema_5T'], 1, '#03ed30', 2])\n","\n","ma_period = 60\n","step_col_list.append([['ma_T{}'.format(ma_period)], 1, '#03ed30', 2])\n","# step_col_list.append([['long_ma_T{}_-1'.format(ma_period)], 1, '#03ed30', 2])\n","\n","# ============ step_col_list2 - add info(col, alpha, color, linewidth) ============ #\n","# ------ cci ------ #\n","step_col_list2.append([['cci_{}{}'.format(wave_itv1, wave_period1)], 1, '#00ff00', 3])\n","step_col_list2.append([['cci_{}{}'.format(wave_itv2, wave_period2)], 1, '#00ff00', 1])\n","\n","# ------ stoch ------ #\n","# step_col_list2.append([['stoch_{}{}33'.format(wave_itv1, wave_period1)], 1, '#00ff00', 3])\n","\n","# ------ macd ------ #\n","# step_col_list2.append([['macd_T535'], 1, '#00ff00', 1])\n","\n","\n","# ============ stepmark_col_list - add info(col, alpha, color, linewidth, marker_style) ============ #\n","# stepmark_col_list.append([['sar_T'], 1, 'dodgerblue', 7])\n","\n","# ------ wave_range ------ #\n","stepmark_col_list.append([['wave_low_fill_{}{}'.format(wave_itv1, wave_period1)], 1, '#e91e63', 10, '*'])\n","stepmark_col_list.append([['wave_high_fill_{}{}'.format(wave_itv1, wave_period1)], 1, '#2962ff', 10, '*'])\n","\n","stepmark_col_list.append([['wave_low_fill_{}{}'.format(wave_itv2, wave_period2)], 1, '#ff00ff', 7, '*'])\n","stepmark_col_list.append([['wave_high_fill_{}{}'.format(wave_itv2, wave_period2)], 1, '#00ff00', 7, '*'])\n","  \n","# stepmark_col_list.append([['wave_co_marker_{}{}'.format(wave_itv1, wave_period1)], 1, '#00ff00', 3, 'o'])\n","# stepmark_col_list.append([['wave_cu_marker_{}{}'.format(wave_itv1, wave_period1)], 1, '#ff00ff', 3, 'o'])\n","\n","# ============ data_window_col_list ============ #\n","# ------ wrr ------ #\n","# data_window_col_list.append([['cu_wrr_21_{}{}'.format(wave_itv1, wave_period1)], 'cu_wrr_21_{}{}'.format(wave_itv1, wave_period1)])\n","# data_window_col_list.append([['co_wrr_21_{}{}'.format(wave_itv1, wave_period1)], 'co_wrr_21_{}{}'.format(wave_itv1, wave_period1)])\n","data_window_p1_col_list.append([['cu_wrr_32_{}{}'.format(wave_itv1, wave_period1)], 'cu_wrr_32_{}{}'.format(wave_itv1, wave_period1)])\n","data_window_p1_col_list.append([['co_wrr_32_{}{}'.format(wave_itv1, wave_period1)], 'co_wrr_32_{}{}'.format(wave_itv1, wave_period1)])\n","# data_window_p2_col_list.append([['cu_wrr_32_{}{}'.format(wave_itv2, wave_period2)], 'cu_wrr_32_{}{}'.format(wave_itv2, wave_period2)])\n","# data_window_p2_col_list.append([['co_wrr_32_{}{}'.format(wave_itv2, wave_period2)], 'co_wrr_32_{}{}'.format(wave_itv2, wave_period2)])\n","\n","data_window_p1_col_list.append([['short_tr_{}'.format(selection_id)], 'short_tr_{}'.format(selection_id)])\n","data_window_p1_col_list.append([['long_tr_{}'.format(selection_id)], 'long_tr_{}'.format(selection_id)])\n","\n","\n","# ====== str to numbcol ====== #\n","nonstep_col_arr = strcol_tonumb(res_df, nonstep_col_list)\n","step_col_arr = strcol_tonumb(res_df, step_col_list)\n","step_col_arr2 = strcol_tonumb(res_df, step_col_list2)\n","stepmark_col_arr = strcol_tonumb(res_df, stepmark_col_list)\n","data_window_p1_col_arr = strcol_tonumb(res_df, data_window_p1_col_list)\n","data_window_p2_col_arr = strcol_tonumb(res_df, data_window_p2_col_list)\n","\n","col_idx_dict = \\\n","{\n","  \"ohlc_col_idxs\": get_col_idxs(res_df, ['open', 'high', 'low', 'close']),\n","  \"vp_col_idxs\": get_col_idxs(res_df, ['close', 'volume']),\n","  \"post_cu_idx\": get_col_idxs(res_df, ['wave_cu_post_idx_fill_{}{}'.format(wave_itv1, wave_period1)]),\n","  \"post_co_idx\": get_col_idxs(res_df, ['wave_co_post_idx_fill_{}{}'.format(wave_itv1, wave_period1)]),\n","  # \"post_cu_idx\": get_col_idxs(res_df, ['wave_cu_prime_idx_fill_{}{}'.format(wave_itv1, wave_period1)]),\n","  # \"post_co_idx\": get_col_idxs(res_df, ['wave_co_prime_idx_fill_{}{}'.format(wave_itv1, wave_period1)]),\n","  # \"ohlc_col_idxs\": get_col_idxs(res_df, ['haopen', 'hahigh', 'halow', 'haclose']),  # heikin-ashi ver.\n","  \"nonstep_col_info\": nonstep_col_arr,\n","  \"step_col_info\": step_col_arr,\n","  \"step_col_info2\": step_col_arr2,\n","  \"stepmark_col_info\": stepmark_col_arr,\n","  \"data_window_p1_col_info\": data_window_p1_col_arr,\n","  \"data_window_p2_col_info\": data_window_p2_col_arr,\n","  \"ylim_col_idxs\": get_col_idxs(res_df, ['open', 'high', 'low', 'close', 'short_tp_1_{}'.format(selection_id), 'long_tp_1_{}'.format(selection_id), 'short_tp_0_{}'.format(selection_id), 'long_tp_0_{}'.format(selection_id)])  \n","}   \n","#   'wave_low_fill_{}{}'.format(wave_itv2, wave_period2), 'wave_high_fill_{}{}'.format(wave_itv2, wave_period2)\n","#   'dc_upper_H', 'dc_lower_H', 'dc_upper_15T', 'dc_lower_15T', 'short_out_{}'.format(selection_id), 'long_out_{}'.format(selection_id)\n","#   'wave_1_{}'.format(wave_itv2), 'wave_0_{}'.format(wave_itv2), 'dc_upper_15T', 'dc_lower_15T'"]},{"cell_type":"markdown","metadata":{"id":"XfvH5ngyieS9"},"source":["#### session_plot main"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"OCLMABZT1ojb","colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"status":"error","timestamp":1662555505828,"user_tz":-540,"elapsed":15,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"aede1ddc-38d2-4032-e424-ebabf10c6d2e"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 2160x1296 with 4 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["# p2_hlm 의 경우, tr 확인을 우해 session_plot 우선 실행 필요함\n","_ = [plot_check_v9(res_df, config, param_zip, pr_msg, x_max, x_margin_mult, y_margin_mult, back_plot, plot_check_dir, **col_idx_dict) for param_zip in zip(np_plot_params, np_plot_params[::-1])]"]},{"cell_type":"markdown","metadata":{"id":"sZAYhcdoXnm4"},"source":["### whole_plot"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"jjFziVVIhgSr"},"outputs":[],"source":["s_id = config.selection_id\n","\n","# ------------ make col_idx_dict config ------------ #\n","nonstep_col_list = []\n","step_col_list = []\n","stepmark_col_list = []\n","\n","# ============ nonstep_col_list - add info(col, alpha, color, linewidth) ============ #\n","# nonstep_col_list.append([['close'], 1, '#ffffff', 2])\n","\n","# ============ step_col_list - add info(col, alpha, color, linewidth) ============ #\n","# ------ htf_candle ------ #\n","hc_tf1 = '15T'\n","hc_tf2 = 'H'\n","hc_tf3 = '4H'\n","\n","step_col_list.append([['open_{}'.format(hc_tf1), 'close_{}'.format(hc_tf1)], 1, '#ffffff', 1])\n","step_col_list.append([['open_{}'.format(hc_tf2), 'close_{}'.format(hc_tf2)], 1, '#ffffff', 2])\n","# step_col_list.append([['open_{}'.format(hc_tf3), 'close_{}'.format(hc_tf3)], 1, '#ffffff', 4])\n","\n","# ------ resi_sup ------ #\n","# rs_tf = 'T'\n","# step_col_list.append([['resi_{}'.format(rs_tf), 'sup_{}'.format(rs_tf)], 1, '#ffeb3b', 1])\n","# step_col_list.append([['resi_out_{}'.format(rs_tf), 'sup_out_{}'.format(rs_tf)], 1, 'dodgerblue', 2])\n","\n","# ------ wave_range ------ #\n","wave_tf1 = config_list[0].tr_set.p1_itv1\n","wave_period1, wave_period2 = config_list[0].tr_set.p1_period1, config_list[0].tr_set.p1_period2\n","\n","# step_col_list.append([['dc_upper_{}{}'.format(wave_tf1, wave_period1), 'dc_lower_{}{}'.format(wave_tf1, wave_period1)], 1, '#ffeb3b', 1])\n","# step_col_list.append([['dc_upper_{}{}'.format(wave_tf1, wave_period2), 'dc_lower_{}{}'.format(wave_tf1, wave_period2)], 1, '#ffeb3b', 1])\n","\n","# step_col_list.append([['dc_upper_{}{}'.format(wave_tf2, wave_period2), 'dc_lower_{}{}'.format(wave_tf2, wave_period2)], 1, '#e65100', 2])\n","\n","# ------ dc ------ #\n","dc_tf1 = '5T'\n","dc_period1 = 20\n","dc_tf2 = 'H'\n","dc_period2 = 20\n","# step_col_list.append([['dc_upper_{}{}'.format(dc_tf1, dc_period1), 'dc_lower_{}{}'.format(dc_tf1, dc_period1)], 1, '#ffeb3b', 1]),  # inner\n","# step_col_list.append([['dc_base_{}{}'.format(dc_tf1, dc_period1)], 1, '#5b9cf6', 1])\n","step_col_list.append([['dc_upper_{}{}'.format(dc_tf2, dc_period2), 'dc_lower_{}{}'.format(dc_tf2, dc_period2)], 1, '#ff00ff', 4]),  # inner\n","step_col_list.append([['dc_base_{}{}'.format(dc_tf2, dc_period2)], 1, '#5b9cf6', 4])\n","\n","# ------ bb ------ #\n","bb_tf1 = 'T'\n","bb_period1 = 20\n","\n","# step_col_list.append([['bb_upper_{}{}'.format(bb_tf1, bb_period1), 'bb_lower_{}{}'.format(bb_tf1, bb_period1)], 1, '#ffffff', 1])\n","# step_col_list.append([['bb_base_{}{}'.format(bb_tf1, bb_period1)], 1, '#00ff00', 1])\n","\n","# step_col_list.append([['bb_upper_{}'.format(tf2), 'bb_lower_{}'.format(tf2)], 1, '#e91e63', 4])\n","\n","# ------ ema ------ #\n","# step_col_list.append([['ema_5T'], 1, '#03ed30', 2])\n","\n","# ============ stepmark_col_list - add info(col, alpha, color, linewidth) ============ #\n","# stepmark_col_list.append([['sar_T'], 1, 'dodgerblue', 7])\n","\n","\n","# ============ str to numbcol ============ #\n","nonstep_col_arr = strcol_tonumb(res_df, nonstep_col_list)\n","step_col_arr = strcol_tonumb(res_df, step_col_list)\n","stepmark_col_arr = strcol_tonumb(res_df, stepmark_col_list)\n","\n","col_idx_dict = \\\n","{\n","  \"ohlc_col_idxs\": get_col_idxs(res_df, ['open', 'high', 'low', 'close']),\n","  \"vp_col_idxs\": get_col_idxs(res_df, ['close', 'volume']),\n","  # \"ohlc_col_idxs\": get_col_idxs(res_df, ['haopen', 'hahigh', 'halow', 'haclose']),  # heikin-ashi ver.\n","  \"nonstep_col_info\": nonstep_col_arr,\n","  \"step_col_info\": step_col_arr,\n","  \"stepmark_col_info\": stepmark_col_arr,\n","  \"ylim_col_idxs\": get_col_idxs(res_df, ['open', 'high', 'low', 'close', 'dc_upper_15T4', 'dc_lower_15T4'])  # , 'dc_upper_H', 'dc_lower_H', 'dc_upper_15T', 'dc_lower_15T', 'short_out_{}'.format(selection_id), 'long_out_{}'.format(selection_id)\n","}   # , 'wave_1_{}'.format(wave_tf2), 'wave_0_{}'.format(wave_tf2), 'dc_upper_15T', 'dc_lower_15T'"]},{"cell_type":"markdown","metadata":{"id":"50HXDIdJij28"},"source":["#### whole_plot main"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"-tbLsXN9eN2p"},"outputs":[],"source":["plot_op_idx_nums = 10\n","\n","win_idxs = (pr_ > 1).ravel()  # [-plot_op_idx_nums:]\n","selected_op_idxs = obj_[4].ravel().astype(int)  # [-plot_op_idx_nums:]\n","selected_ex_idxs = obj_[3].ravel().astype(int)  # [-plot_op_idx_nums:]\n","\n","len_idxs = len(win_idxs)\n","print(\"len_idxs :\", len_idxs)\n","\n","split_range = np.arange(plot_op_idx_nums, len_idxs, plot_op_idx_nums)\n","win_idxs_list = np.split(win_idxs, split_range, axis=0)\n","selected_op_idxs_list = np.split(selected_op_idxs, split_range, axis=0)\n","selected_ex_idxs_list = np.split(selected_ex_idxs, split_range, axis=0)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"FtILHO-4kVlO"},"outputs":[],"source":["_ = [whole_plot_check(np_df, a, b, c, plot_check_dir=None, **col_idx_dict) for a, b, c in zip(win_idxs_list, selected_op_idxs_list, selected_ex_idxs_list)]"]},{"cell_type":"markdown","metadata":{"id":"iTW2ZuX61ojg"},"source":["### plot_funcs"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"0l6joTK_1ojh"},"outputs":[],"source":["def whole_plot_check(data, win_idxs, selected_op_idxs, selected_ex_idxs, plot_check_dir=None, **col_idx_dict):\n","  # start_0 = time.time()\n","  plt.style.use(['dark_background', 'fast'])\n","  fig = plt.figure(figsize=(30, 12))\n","  nrows, ncols = 1, 1\n","  gs = gridspec.GridSpec(nrows=nrows,  # row 부터 index 채우고 col 채우는 순서임 (gs_idx)\n","                          ncols=ncols,\n","                          #height_ratios=[31, 1]\n","                          )\n","\n","  ax = fig.add_subplot(gs[0])\n","\n","  # ------------ add_col section ------------ #\n","  a_data = data[selected_op_idxs[0]:selected_op_idxs[-1] + 1]\n","\n","  plot_op_idxs = selected_op_idxs - selected_op_idxs[0]  \n","  plot_win_op_idxs = plot_op_idxs[win_idxs]\n","  plot_loss_op_idxs = plot_op_idxs[~win_idxs]\n","\n","  plot_ex_idxs = selected_ex_idxs - selected_op_idxs[0]\n","  plot_win_ex_idxs = plot_ex_idxs[win_idxs]\n","  plot_loss_ex_idxs = plot_ex_idxs[~win_idxs]\n","\n","\n","  # ------ add cols ------ #\n","  [nonstep_col_plot(a_data[:, params[0]], *params[1:]) for params in col_idx_dict['nonstep_col_info']]\n","  [step_col_plot(a_data[:, params[0]], *params[1:]) for params in col_idx_dict['step_col_info']]\n","  [stepmark_col_plot(a_data[:, params[0]], *params[1:]) for params in col_idx_dict['stepmark_col_info']]\n","\n","  # [plt.axvline(op_idx, color='#00ff00') for op_idx in plot_win_op_idxs]\n","  # [plt.axvline(op_idx, color='#ff0000') for op_idx in plot_loss_op_idxs]\n","  [plt.axvspan(op_idx, ex_idx, alpha=0.5, color='#00ff00') for op_idx, ex_idx in zip(plot_win_op_idxs, plot_win_ex_idxs)]\n","  [plt.axvspan(op_idx, ex_idx, alpha=0.5, color='#ff0000') for op_idx, ex_idx in zip(plot_loss_op_idxs, plot_loss_ex_idxs)]\n","  \n","  plt.show()\n","\n","  if plot_check_dir is None:\n","    plt.show()\n","    print()\n","  else:\n","    fig_name = plot_check_dir + \"/whole_plot_{}.png\".format(selected_op_idxs[0])\n","    plt.savefig(fig_name)\n","    print(fig_name, \"saved !\")\n","  plt.close()\n","  # print(\"elapsed time :\", time.time() - start_0)\n","\n","  return\n","\n","def plot_check_v9(res_df, config, param_zip, pr_msg, x_max, x_margin_mult, y_margin_mult, back_plot, plot_check_dir=None, **col_idx_dict):\n","  # start_0 = time.time()\n","  plt.style.use(['dark_background', 'fast'])\n","  fig = plt.figure(figsize=(30, 18))\n","  nrows, ncols = 2, 2\n","  gs = gridspec.GridSpec(nrows=nrows,  # row 부터 index 채우고 col 채우는 순서임 (gs_idx)\n","                         ncols=ncols,\n","                         height_ratios=[3, 1]\n","                         )\n","  for gs_idx, params in enumerate(param_zip):\n","\n","    iin, iout, pr, en_p, ex_p, entry_idx, exit_idx, p1_idx, p2_idx, lvrg, fee, tp_line, out_line, tp_1, tp_0, out_1, out_0, ep2_0 = params\n","\n","    # print(\"en_p, ex_p :\", en_p, ex_p)\n","    # print(\"tp_line, out_line, ep2_0 :\", tp_line, out_line, ep2_0)\n","\n","    # temporary\n","    # if exit_idx - p1_idx < 50:\n","    # if exit_idx != entry_idx:\n","    # print(\"p1_idx :\", p1_idx)\n","    # if p1_idx != 370259:\n","    #   break\n","\n","    # ============ define ax1 & ax2 ============ #\n","    ax1 = fig.add_subplot(gs[gs_idx])\n","    ax2 = fig.add_subplot(gs[gs_idx + 2])\n","\n","    # ------ date range ------ #\n","    if back_plot == 0:\n","      iout = iin + x_max\n","      # print(\"iin, iout :\", iin, iout)\n","\n","    a_data = res_df.iloc[int(iin):int(iout + 1)].to_numpy()\n","    # a_data = data[iin:iout]\n","\n","    # ------------ add_col section ------------ #\n","    # ------ candles ------ #\n","    candle_plot_v2(ax1, a_data[:, col_idx_dict['ohlc_col_idxs']], alpha=1.0, wickwidth=1.0)\n","\n","    # ------ add cols ------ #\n","    [nonstep_col_plot_v2(ax1, a_data[:, params_[0]], *params_[1:]) for params_ in col_idx_dict['nonstep_col_info']]\n","    [step_col_plot_v2(ax1, a_data[:, params_[0]], *params_[1:]) for params_ in col_idx_dict['step_col_info']]\n","    [stepmark_col_plot_v2(ax1, a_data[:, params_[0]], *params_[1:]) for params_ in col_idx_dict['stepmark_col_info']]\n","\n","    [step_col_plot_v2(ax2, a_data[:, params_[0]], *params_[1:]) for params_ in col_idx_dict['step_col_info2']]\n","\n","    # ------ get vp_info ------ #\n","    kde_factor = 0.1   # 커질 수록 전체적인 bars_shape 이 곡선이됨, 커질수록 latency 좋아짐 (0.00003s 정도)\n","    num_samples = 100  # plot 되는 volume bars (y_axis) 와 비례관계\n","    # vp_data = data[iin - 500:iin, col_idx_dict['vp_col_idxs']].T  # Todo, vp_range should be calculated by wave_point\n","\n","    if tp_1 < out_0:  # SELL order\n","      post_co_idx = res_df.iloc[int(p1_idx), col_idx_dict['post_co_idx']]\n","      # vp_iin = res_df.iloc[int(p1_idx) - 1, col_idx_dict['post_cu_idx']].to_numpy()  # Todo, co_idx 와 co_post_idx 의 차별을 위해서 -1 해줌 <-- 중요 point\n","      vp_iin = res_df.iloc[post_co_idx, col_idx_dict['post_cu_idx']].to_numpy()  # Todo, co_idx 와 co_post_idx 의 차별을 위해서 -1 해줌 <-- 중요 point\n","    else:\n","      post_cu_idx = res_df.iloc[int(p1_idx), col_idx_dict['post_cu_idx']]\n","      # vp_iin = res_df.iloc[int(p1_idx) - 1, col_idx_dict['post_co_idx']].to_numpy()\n","      vp_iin = res_df.iloc[int(post_cu_idx), col_idx_dict['post_co_idx']].to_numpy()\n","    # print(\"iin, vp_iin, p1_idx :\", iin, vp_iin, p1_idx)\n","\n","    vp_data = res_df.iloc[int(vp_iin):int(p1_idx), col_idx_dict['vp_col_idxs']].to_numpy().T  # Todo, vp_range should be calculated by wave_point\n","    # print(\"vp_data :\", vp_data)\n","    # vp_info = [vp_range, *vp_data, kde_factor, num_samples]\n","    vp_info = [*vp_data, kde_factor, num_samples]\n","\n","    # ------ ep, tp + xlim ------ #\n","    try:\n","      eptp_hvline_v9_1(ax1, ax2, config, *params, back_plot, x_max, x_margin_mult, y_margin_mult, a_data, vp_info, **col_idx_dict)\n","    except Exception as e:\n","      print(\"error in eptp_hvline :\", e)\n","\n","    #     Todo    #\n","    #     3. outer_price plot 일 경우, gs_idx + nrows 하면 됨\n","\n","    # ------ trade_info ------ #\n","    data_msg_list = [\"\\n {} : {:.3f}\".format(*params_[1:], *res_df.iloc[int(p1_idx), params_[0]]) for params_ in col_idx_dict['data_window_p1_col_info']]  # * for unsupported format for arr\n","    data_msg_list += [\"\\n {} : {:.3f}\".format(*params_[1:], *res_df.iloc[int(p2_idx), params_[0]]) for params_ in col_idx_dict['data_window_p2_col_info']]\n","    ps_msg_expand = pr_msg.format(p1_idx, exit_idx, pr, lvrg, fee) + ''.join(data_msg_list)\n","    \n","    ax1.set_title(ps_msg_expand)   # set_title on ax1\n","\n","  if plot_check_dir is None:\n","    plt.show()\n","    print()\n","  else:\n","    fig_name = plot_check_dir + \"/{}.png\".format(int(entry_idx))\n","    plt.savefig(fig_name)\n","    print(fig_name, \"saved !\")\n","  plt.close()\n","  # print(\"elapsed time :\", time.time() - start_0)\n","\n","  return\n","\n","def eptp_hvline_v9_1(ax1, ax2, config, iin, iout, pr, en_p, ex_p, entry_idx, exit_idx, p1_idx, p2_idx, lvrg, fee, tp_line, out_line, tp_1, tp_0, out_1, out_0, ep2_0,\n","                   back_plot, x_max, x_margin_mult, y_margin_mult, a_data, vp_info, **col_idx_dict):\n","  # ------ get vertical ticks ------ #\n","  entry_tick = int(entry_idx - iin)\n","  exit_tick = entry_tick + int(exit_idx - entry_idx)\n","  p1_tick = entry_tick - int(entry_idx - p1_idx)\n","  p2_tick = p1_tick + int(p2_idx - p1_idx)\n","\n","  if back_plot == 1:\n","    x_max = p1_tick + 20\n","  elif back_plot == 2:\n","    x_max = p2_tick + 20 \n","  elif back_plot == 3:\n","    x_max = entry_tick + 20 \n","  elif back_plot == 4:\n","    x_max = exit_tick + 20\n","\n","  # ============ xlim ============ #\n","  if (iout - iin) > x_max:\n","    x_margin = x_max * x_margin_mult\n","    ax1.set_xlim(0 - x_margin, x_max + x_margin)\n","    ax2.set_xlim(0 - x_margin, x_max + x_margin)\n","  x0, x1 = ax1.get_xlim()\n","\n","  # ============ hlines ============ #\n","  # ------------ ax1 ------------ #\n","  # ------ entry & exit ------ #\n","  en_xmin = entry_tick / x1\n","  ex_xmin = exit_tick / x1\n","  ax1.axhline(en_p, x0, en_xmin, linewidth=2, linestyle='--', alpha=1, color='lime')  # en_p line axhline\n","  if config.tr_set.check_hlm in [0, 1]:\n","    ax1.text(x0, en_p, 'en_p :\\n {:.3f} \\n epg1 {}'.format(en_p, config.tr_set.ep_gap1), ha='right', va='center', fontweight='bold', fontsize=15)  # en_p line label\n","  else:\n","    ax1.text(x0, en_p, 'en_p :\\n {:.3f} \\n epg2 {}'.format(en_p, config.tr_set.ep_gap2), ha='right', va='center', fontweight='bold', fontsize=15)  # en_p line label\n","  ax1.axhline(ex_p, ex_xmin, 1, linewidth=2, linestyle='--', alpha=1, color='lime')  # ex_p line axhline (signal 도 포괄함, 존재 의미)\n","  ax1.text(x1, ex_p, 'ex_p :\\n {}'.format(ex_p), ha='left', va='center', fontweight='bold', fontsize=15)  # ex_p line label\n","\n","  # ------ tpout_line ------ #\n","  ax1.axhline(tp_line, 0.05, 1, linewidth=2, linestyle='-', alpha=1, color='#00ff00')  # ep 와 gap 비교 용이하기 위해 ex_xmin -> 0.1 사용\n","  ax1.text(x0, tp_line, 'tpg {}'.format(config.tr_set.tp_gap), ha='right', va='center', fontweight='bold', fontsize=15, color='#00ff00')\n","  ax1.axhline(out_line, 0.05, 1, linewidth=2, linestyle='-', alpha=1, color='#ff0000')\n","  ax1.text(x0, out_line, 'outg {}'.format(config.tr_set.out_gap), ha='right', va='center', fontweight='bold', fontsize=15, color='#ff0000')\n","\n","  # ------ tp_box ------ #\n","  text_x_pos = (x0 + x1) * 0.1\n","  ax1.axhline(tp_1, 0.2, 1, linewidth=4, linestyle='-', alpha=1, color='#ffffff')\n","  ax1.text(text_x_pos, tp_1, ' tp_1', ha='right', va='bottom', fontweight='bold', fontsize=15)\n","  ax1.axhline(tp_0, 0.2, 1, linewidth=4, linestyle='-', alpha=1, color='#ffffff')\n","  ax1.text(text_x_pos, tp_0, ' tp_0', ha='right', va='bottom', fontweight='bold', fontsize=15)  \n","\n","  # ------ out_box ------ #\n","  # text_x_pos = (x0 + x1) * 0.1\n","  ax1.axhline(out_1, 0.2, 1, linewidth=2, linestyle='-', alpha=1, color='#ffffff')\n","  ax1.text(text_x_pos, out_1, ' out_1', ha='right', va='bottom', fontweight='bold', fontsize=15)\n","  ax1.axhline(out_0, 0.2, 1, linewidth=2, linestyle='-', alpha=1, color='#ffffff')\n","  ax1.text(text_x_pos, out_0, ' out_0', ha='right', va='bottom', fontweight='bold', fontsize=15)  \n","  # ------ ep_box ------ #\n","  # text_x_pos = (x0 + x1) * 0.1\n","  ax1.axhline(ep2_0, 0.2, 1, linewidth=1, linestyle='-', alpha=1, color='#ffffff')\n","  ax1.text(text_x_pos, ep2_0, ' ep2_0', ha='right', va='bottom', fontweight='bold', fontsize=15)\n","  \n","  # ------ volume profile ------ #\n","  close, volume, kde_factor, num_samples = vp_info\n","  # if iin >= vp_range:\n","  # start_0 = time.time()\n","  kde = stats.gaussian_kde(close, weights=volume, bw_method=kde_factor)\n","  kdx = np.linspace(close.min(), close.max(), num_samples)\n","  kdy = kde(kdx)\n","  kdy_max = kdy.max()\n","  # print(\"kde elapsed_time :\", time.time() - start_0)\n","\n","  # peaks,_ = signal.find_peaks(kdy, prominence=kdy_max * 0.3)   # get peak_entries\n","  # peak_list = kdx[peaks]   # peak_list\n","  # [ax1.axhline(peak, linewidth=1, linestyle='-', alpha=1, color='orange') for peak in peak_list]\n","  \n","  kdy_ratio = p1_tick / kdy_max # 30 / 0.0001   # max_value 가 p1_tick 까지 닿을 수 있게.\n","  # print(\"kdx :\", kdx)\n","  # ax1.plot(kdy * kdy_ratio, kdx, color='white')  # Todo, bars 가능 ?\n","  # ax1.barh(kdy * kdy_ratio, kdx, color='white')  # Todo, bars 가능 ?\n","  ax1.barh(kdx, kdy * kdy_ratio, color='#00ff00', alpha=0.5)  # Todo, bars 가능 ?\n","\n","  # ------------ ax2 ------------ #\n","  # ------ cci_band ------ #\n","  ax2.axhline(100, color=\"#ffffff\")\n","  ax2.axhline(-100, color=\"#ffffff\")\n","\n","  # ------ stoch_band ------ #\n","  # ax2.axhline(67, color=\"#ffffff\")\n","  # ax2.axhline(33, color=\"#ffffff\")\n","  \n","  # ax2.axhline(0, color=\"#ffffff\")\n","\n","  # ============ ylim ============ # - ax1 only\n","  if back_plot:\n","    y_lim_data = a_data[:x_max + 1, col_idx_dict['ylim_col_idxs']]  # +1 for including p1_tick\n","  else:\n","    y_lim_data = a_data[:, col_idx_dict['ylim_col_idxs']]\n","  \n","  y_min = y_lim_data.min()\n","  y_max = y_lim_data.max()\n","  y_margin = (y_max - y_min) * y_margin_mult\n","  ax1.set_ylim(y_min - y_margin, y_max + y_margin)\n","\n","  # ============ vline (p1_tick, entry_tick, exit_tick) ============ # - add p1_tick on ax2\n","  y0, y1 = ax1.get_ylim()\n","  low_data = a_data[:exit_tick + 1, col_idx_dict['ohlc_col_idxs'][2]]  # +1 for including exit_tick\n","  p2_ymax, en_ymax, ex_ymax = [(low_data[tick_] - y0) / (y1 - y0) - .01 for tick_ in [p2_tick, entry_tick, exit_tick]]  # -.05 for margin\n","  if p1_tick > 0:\n","    p1_ymax = (low_data[p1_tick] - y0) / (y1 - y0) - .01\n","    ax1.axvline(p1_tick, 0, p1_ymax, alpha=1, linewidth=2, linestyle='--', color='#ff0000')  # 추후, tick 별 세부 정의가 달라질 수 있음을 고려해 multi_line 작성 유지\n","    ax2.axvline(p1_tick, 0, 1, alpha=1, linewidth=2, linestyle='--', color='#ff0000')\n","  ax1.axvline(p2_tick, 0, p2_ymax, alpha=1, linewidth=2, linestyle='--', color='#2196f3')\n","  ax1.axvline(entry_tick, 0, en_ymax, alpha=1, linewidth=2, linestyle='--', color='#ffeb3b')\n","  ax1.axvline(exit_tick, 0, ex_ymax, alpha=1, linewidth=2, linestyle='--', color='#ffeb3b')\n","  ax2.axvline(p2_tick, 0, 1, alpha=1, linewidth=2, linestyle='--', color='#2196f3')\n","  ax2.axvline(entry_tick, 0, 1, alpha=1, linewidth=2, linestyle='--', color='#ffeb3b')\n","  ax2.axvline(exit_tick, 0, 1, alpha=1, linewidth=2, linestyle='--', color='#ffeb3b')\n","\n","  return"]},{"cell_type":"markdown","metadata":{"id":"8soVNGFt1ojj"},"source":["#### legacy"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"narSQRCz1ojj"},"outputs":[],"source":["_ = [plot_check_v4(np_df, config, param_zip, pr_msg, x_max, x_margin_mult, y_margin_mult, front_plot, plot_check_dir, 500, 0.07, 100, **col_idx_dict) for param_zip in zip(np_plot_params, np_plot_params[::-1])]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"kLiEIiMW1ojk"},"outputs":[],"source":["def plot_check_v4(data, config, param_zip, pr_msg, x_max, x_margin_mult, y_margin_mult, front_plot, plot_check_dir=None, vp_range=500, kde_factor=0.05, num_samples=100, **col_idx_dict):\n","  # start_0 = time.time()\n","  plt.style.use(['dark_background', 'fast'])\n","  fig = plt.figure(figsize=(30, 18))\n","  nrows, ncols = 2, 2\n","  gs = gridspec.GridSpec(nrows=nrows,  # row 부터 index 채우고 col 채우는 순서임 (gs_idx)\n","                         ncols=ncols,\n","                         height_ratios=[3, 1]\n","                         )\n","  for gs_idx, params in enumerate(param_zip):\n","    ax = fig.add_subplot(gs[gs_idx])\n","    iin, iout, pr, ep, tp, entry_idx, exit_idx, open_idx, lvrg, fee, tp_line, out_line, bias_info, bias_thresh = params\n","\n","    # ------------ add_col section ------------ #\n","    iin, iout = int(iin), int(iout)\n","    a_data = data[iin:iout]\n","    # ------ candles ------ #\n","    candle_plot(a_data[:, col_idx_dict['ohlc_col_idxs']], ax, alpha=1.0, wickwidth=1.0)\n","    \n","    # ------ add cols ------ #\n","    [nonstep_col_plot(a_data[:, params[0]], *params[1:]) for params in col_idx_dict['nonstep_col_info']]\n","    [step_col_plot(a_data[:, params[0]], *params[1:]) for params in col_idx_dict['step_col_info']]\n","    [stepmark_col_plot(a_data[:, params[0]], *params[1:]) for params in col_idx_dict['stepmark_col_info']]\n","\n","    # vp_data = data[iin - vp_range:iin, col_idx_dict['vp_col_idxs']]\n","    # vp_info = [vp_range, vp_data[:, 0], vp_data[:, 1], kde_factor, num_samples]\n","    vp_data = data[iin - vp_range:iin, col_idx_dict['vp_col_idxs']].T\n","    vp_info = [vp_range, *vp_data, kde_factor, num_samples]\n","\n","    # ------ ep, tp + xlim ------ #\n","    eptp_hvline_v4(config, ep, tp, entry_idx, exit_idx, open_idx, tp_line, out_line, bias_info, bias_thresh, \n","                   front_plot, iin, iout, x_max, x_margin_mult, y_margin_mult, a_data, vp_info, **col_idx_dict)        \n","\n","    #     Todo    #\n","    #     3. outer_price plot 일 경우, gs_idx + nrows 하면 됨\n","\n","    # ------ trade_info ------ #\n","    plt.title(pr_msg.format(entry_idx, exit_idx, pr, lvrg, fee))\n","\n","  if plot_check_dir is None:\n","    plt.show()\n","    print()\n","  else:\n","    fig_name = plot_check_dir +  \"/%s.png\" % int(entry_idx)\n","    plt.savefig(fig_name)\n","    print(fig_name, \"saved !\")\n","  plt.close()\n","  # print(\"elapsed time :\", time.time() - start_0)  \n","\n","  return\n","\n","def eptp_hvline_v4(config, en_p, ex_p, entry_idx, exit_idx, open_idx, tp_line, out_line, bias_info, bias_thresh, \n","                   front_plot, iin, iout, x_max, x_margin_mult, y_margin_mult, a_data, vp_info, **col_idx_dict):\n","  # ------ get vertical ticks ------ #\n","  entry_tick = int(entry_idx - iin)\n","  open_tick = entry_tick - int(entry_idx - open_idx)\n","  exit_tick = entry_tick + int(exit_idx - entry_idx)\n","\n","  if front_plot == 1:\n","    x_max = open_tick\n","  elif front_plot == 2:\n","    x_max = entry_tick\n","  if (iout - iin) > x_max:\n","    x_margin = x_max * x_margin_mult\n","    plt.xlim(0 - x_margin, x_max + x_margin)\n","  x0, x1 = plt.gca().get_xlim()\n","  # ------------ hlines ------------ #\n","  # ------ entry & exit ------ #\n","  en_xmin = entry_tick / x1\n","  ex_xmin = exit_tick / x1\n","  plt.axhline(en_p, x0, en_xmin, linewidth=2, linestyle='--', alpha=1, color='lime')  # en_p line axhline\n","  plt.text(x0, en_p, ' en_p :\\n {}'.format(en_p), ha='right', va='center', fontweight='bold')  # en_p line label\n","  plt.axhline(ex_p, ex_xmin, 1, linewidth=2, linestyle='--', alpha=1, color='lime')  # ex_p line axhline (signal 도 포괄함, 존재 의미)\n","  plt.text(x1, ex_p, ' ex_p :\\n {}'.format(ex_p), ha='left', va='center', fontweight='bold')  # ex_p line label\n","\n","  # ------ tpout_line ------ #\n","  plt.axhline(tp_line, 0.1, 1, linewidth=4, linestyle='-', alpha=1, color='#00ff00')  # ep 와 gap 비교 용이하기 위해 ex_xmin -> 0.1 사용\n","  plt.text(x0, tp_line, ' %s' % config.tr_set.tp_gap, ha='left', va='center', fontweight='bold')\n","  plt.axhline(out_line, 0.1, 1, linewidth=4, linestyle='-', alpha=1, color='#ff0000')\n","  plt.text(x0, out_line, ' %s' % config.tr_set.out_gap, ha='left', va='center', fontweight='bold')\n","\n","  # ------ bias_line ------ #\n","  plt.axhline(bias_info, 0.1, 1, linewidth=4, linestyle='-', alpha=1, color='dodgerblue')\n","  plt.text(x0, bias_info, ' bias_info', ha='left', va='center', fontweight='bold')\n","  plt.axhline(bias_thresh, 0.1, 1, linewidth=4, linestyle='-', alpha=1, color='#ff8400')\n","  plt.text(x0, bias_thresh, ' bias_thresh', ha='left', va='center', fontweight='bold')\n","\n","  # ------ volume profile ------ #\n","  vp_range, close, volume, kde_factor, num_samples = vp_info\n","  if iin >= vp_range:\n","    start_0 = time.time()\n","    kde = stats.gaussian_kde(close, weights=volume, bw_method=kde_factor)\n","    kdx = np.linspace(close.min(), close.max(), num_samples)\n","    kdy = kde(kdx)\n","    print(\"kde elapsed_time :\", time.time() - start_0)\n","\n","    kdy_max = kdy.max()\n","    # peaks,_ = signal.find_peaks(kdy)\n","    peaks,_ = signal.find_peaks(kdy, prominence=kdy_max * 0.3)\n","    peak_list = kdx[peaks]   # peak_list\n","    [plt.axhline(peak, linewidth=6, linestyle='-', alpha=1, color='white') for peak in peak_list]\n","    \n","    kdy_ratio = entry_tick / kdy_max # 30 / 0.0001\n","    plt.plot(kdy * kdy_ratio, kdx, color='white')\n","    # plt.plot(pky, pkx, 'bo', color='yellow')\n","\n","  # ------ ylim ------ #\n","  if front_plot:\n","    y_lim_data = a_data[:x_max + 1, col_idx_dict['ylim_col_idxs']]  # +1 for including open_tick\n","  else:\n","    y_lim_data = a_data[:, col_idx_dict['ylim_col_idxs']]\n","  y_min = y_lim_data.min()\n","  y_max = y_lim_data.max()\n","  y_margin = (y_max - y_min) * y_margin_mult\n","  # plt.ylim(y_min - y_margin, y_max + y_margin)\n","\n","  # ------------ vline (open_tick, entry_tick, exit_tick) ------------ #\n","  y0, y1 = plt.gca().get_ylim()\n","  l_data = a_data[:exit_tick + 1, col_idx_dict['ohlc_col_idxs'][2]]  # +1 for including exit_tick\n","  open_ymax, en_ymax, ex_ymax = [(l_data[tick_] - y0) / (y1 - y0) - .01 for tick_ in [open_tick, entry_tick, exit_tick]]  # -.05 for margin\n","  plt.axvline(open_tick, 0, open_ymax, alpha=1, linewidth=2, linestyle='--', color='#ffeb3b')  # 추후, tick 별 세부 정의가 달라질 수 있음을 고려해 multi_line 작성 유지\n","  plt.axvline(entry_tick, 0, en_ymax, alpha=1, linewidth=2, linestyle='--', color='#ffeb3b')\n","  plt.axvline(exit_tick, 0, ex_ymax, alpha=1, linewidth=2, linestyle='--', color='#ffeb3b')\n","\n","  return"]},{"cell_type":"markdown","metadata":{"id":"ddL_BC24buq0"},"source":["### dump"]},{"cell_type":"markdown","metadata":{"id":"zgTrEWWqbwsT"},"source":["#### whole_plot thing"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"M4zn8wxibzAR"},"outputs":[],"source":["fig = go.Figure(data=[go.Candlestick(x=t_df.index,\n","                open=t_df.open,\n","                high=t_df.high,\n","                low=t_df.low,\n","                close=t_df.close)])\n","\n","fig.show()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"4IhBjPMobzAS"},"outputs":[],"source":["cf.go_offline()\n","init_notebook_mode()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"n9WZkE9wbzAS"},"outputs":[],"source":["qf = cf.QuantFig(t_df, title=\"Apple's stock price in 2021\", name='AAPL')\n","qf.iplot()"]},{"cell_type":"markdown","metadata":{"id":"zmYbP-Gc1ojs"},"source":["#### brief np_pr survey"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"82a8Km8z1ojs"},"outputs":[],"source":["# plot_pr_list[:100]\n","plt.plot(np_pr)\n","plt.axhline(1)\n","plt.show()"]},{"cell_type":"markdown","metadata":{"id":"5rdQZm_71ojv"},"source":["#### plot indi. legacy"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"u11r-dU91ojw"},"outputs":[],"source":["\n","  # ---------------------- ma ---------------------- #\n","   # --------- ema --------- #\n","  # alpha = 1\n","  # for sm_i, item in enumerate(ema_list):\n","  #   if sm_i > 0:\n","  #     lw = 5\n","  #   else:\n","  #     lw = 2\n","  #   plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#03ed30', linewidth=lw)\n","  #   alpha -= 0.2\n","\n","  #   # --------- sma --------- #\n","  # alpha = 1\n","  # for sm_i, sma in enumerate(sma_list):\n","  #   if sm_i > 0:\n","  #     lw = 5\n","  #   else:\n","  #     lw = 4\n","  #   plt.step(np.arange(len(plot_df)), plot_df[sma].values, alpha=alpha, color='#e91e63', linewidth=lw)\n","  #   alpha -= 0.2\n","\n","  \n","  # ---------------------- cb ---------------------- #\n","  # alpha = 1\n","  # for sm_i, item in enumerate(cb_list):\n","  #   if sm_i > 0:\n","  #     lw = 5\n","  #   else:\n","  #     lw = 2\n","  #   plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#5b9cf6', linewidth=lw)\n","  #   alpha -= 0.2\n","\n","\n","  \n","  # ---------------------- sar ---------------------- #\n","  # alpha = 1\n","  # markersize = 5\n","  # for sar in sar_list:\n","  #   plt.step(plot_df[sar].values, 'c*', alpha=alpha, markersize=markersize, color='dodgerblue')  # sar mic\n","  #   markersize += 1\n","  #   alpha -= 0.1\n","\n","  # plt.step(plot_df.values[:, [12]], 'co', alpha=1, markersize=7)  # sar mac\n","\n","  #               cloud               #\n","  # alpha = 0.7\n","  # for senkoua, senkoub in zip(senkoua_list, senkoub_list):\n","  #   plt.fill_between(np.arange(len(plot_df)), plot_df[senkoua].values, plot_df[senkoub].values, # ichimoku\n","  #                     where=plot_df[senkoua].values >= plot_df[senkoub].values, facecolor='g', alpha=alpha) # ichimoku\n","  #   plt.fill_between(np.arange(len(plot_df)), plot_df[senkoua].values, plot_df[senkoub].values,\n","  #                     where=plot_df[senkoua].values <= plot_df[senkoub].values, facecolor='r', alpha=alpha)  \n","  #   alpha -= 0.05\n","  \n","\n","\n","  # ---------------------- outer price indi. ---------------------- #\n","  #           macd          #\n","  # plt.subplot(312)\n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for macd in macd_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[macd].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","\n","  # plt.axhline(0, linestyle='--')\n","\n","  \n","  # #           trix          #  \n","  # # plt.subplot(313)\n","  # plt.subplot(gs[2])\n","  # alpha = 1\n","  # for trix in trix_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[trix].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","  # plt.axhline(0, linestyle='--')\n","\n","  \n","  #           fisher          #  \n","  # plt.subplot(313)\n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for fisher in fisher_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[fisher].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","    \n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","\n","  # plt.axhline(0, linestyle='--')\n","  # plt.axhline(fisher_upper, linestyle='--')\n","  # plt.axhline(fisher_lower, linestyle='--')\n","\n","  #           stoch          #  \n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for stoch_ in stoch_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[stoch_].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axhline(50, linestyle='--')\n","  # plt.axhline(stoch_upper, linestyle='--')\n","  # plt.axhline(stoch_lower, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","\n","  # ---------- cctbbo ---------- #  \n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for cctbbo in cctbbo_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[cctbbo].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axhline(50, linestyle='--')\n","  # plt.axhline(cctbbo_upper, linestyle='--')\n","  # plt.axhline(cctbbo_lower, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","\n","  # ---------- ema_roc ---------- #  \n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for emaroc in emaroc_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[emaroc].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","  # plt.axhline(0, linestyle='--')\n","  \n","  # ---------- bbw ---------- #  \n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for bbwp_ in bbwp_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[bbwp_].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","  # plt.axhline(bbwp_thresh, linestyle='--')\n","\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","\n"]},{"cell_type":"markdown","metadata":{"id":"tApzvz_gK9lR"},"source":["## legacy"]},{"cell_type":"markdown","metadata":{"id":"OJqkmkpsLCYC"},"source":["### tr_tresh calc"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"gcpo4MGd9Wm4"},"outputs":[],"source":["res_wr = 0.6\n","# tr_thresh = 1\n","# tr_thresh = ((1 - res_wr) / res_wr) ** 0.5\n","tr_thresh = ((1 - res_wr) / res_wr) + 0.01\n","# tr_thresh = 2.6\n","print(\"res_wr :\", res_wr)\n","print(\"tr_thresh :\", tr_thresh)\n","\n","\n","#   단리    #\n","trade_num = 1000\n","asset = 1 # thousand USDT\n","test_loss_gap = 0.95  # fee adjusted\n","test_pr_gap = 1 + (1 - test_loss_gap) * tr_thresh\n","\n","test_loss_cnt = trade_num * (1 - res_wr)\n","test_pr_cnt = trade_num * res_wr\n","\n","test_trade_list = [test_pr_gap] * int(test_pr_cnt) + [test_loss_gap] * int(test_loss_cnt)\n","random.shuffle(test_trade_list)\n","# print(\"len(test_trade_list) :\", len(test_trade_list))\n","print(test_trade_list[:10])\n","print()\n","\n","# print(\"%.5f\" % np.cumprod(test_trade_list)[-1])\n","for tr_thresh_ in np.arange(1, 3, 0.2):\n","  if (1 + (1 - test_loss_gap) * tr_thresh_) ** test_pr_cnt * test_loss_gap ** test_loss_cnt > 1:\n","    break\n","print(\"복리를 위한 tr_thresh_ :\", tr_thresh_)\n","# print(\"tr_thresh :\", tr_thresh)\n","print(\"np.cumprod(test_trade_list)[-1] :\", np.cumprod(test_trade_list)[-1])\n","print(\"total_pr : \", np.cumprod(test_trade_list)[-1])\n","print()\n","#   복리 tr_thresh  #\n","#   1. trade_num 에 영향 받지 않음\n","#   2. loss_gap 에 비례함\n","\n","for tr_thresh_ in np.arange(1, 3, 0.01):\n","  if ((1 - test_loss_gap) * tr_thresh_) * test_pr_cnt + (test_loss_gap - 1) * test_loss_cnt > 0:\n","    break\n","np_test_trade = np.array(test_trade_list) - 1\n","print(np_test_trade[:10])\n","# print(\"%.3f\" % )\n","print(\"단리를 위한 tr_thresh_ :\", tr_thresh_)\n","# print(\"tr_thresh :\", tr_thresh)\n","print(\"np.cumsum(np_test_trade)[-1] :\", np.cumsum(np_test_trade)[-1])\n","print(\"total_pr : \", 1 + np.cumsum(np_test_trade)[-1])\n"]}],"metadata":{"accelerator":"GPU","colab":{"collapsed_sections":["Ic1mfmwWCIBu","E0n53hflJbnp","MlFkpO1MSuzl","x2yj2SwAXDLp","14chOHeXh6JD","Q_1wJTcRYpm8","EOXQbXixiQcK","RZJ6uIA_VcJs","xpyP5t8Ht_pE","MuD_2vY7TI_8","983aUwM76s6X","_blyFhQJUd5X","50HXDIdJij28"],"provenance":[],"toc_visible":true,"authorship_tag":"ABX9TyNYcj9uzLiiIb2Xc2m82rT8"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}