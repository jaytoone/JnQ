{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Make_model_low","provenance":[{"file_id":"16vvpYLDxnjas3O39oRbr2uR-DjJ0A4oV","timestamp":1579008418541}],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"code","metadata":{"id":"A0OlJV790sLC","colab_type":"code","colab":{}},"source":["# !nvidia-smi"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"-yZi4B_c2A5B","colab_type":"code","colab":{}},"source":["# from google.colab import files\n","\n","# uploaded = files.upload()\n","\n","# for fn in uploaded.keys():\n","#   print('Local files \"{name}\" with length {length} bytes'.format(name=fn, length=len(uploaded[fn])))"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"BfHamvp0-kV8","colab_type":"code","outputId":"7cfc97aa-dbb3-4d06-ec16-a73b007f455a","executionInfo":{"status":"ok","timestamp":1580658123889,"user_tz":-540,"elapsed":25024,"user":{"displayName":"J 1","photoUrl":"","userId":"08178289703395036410"}},"colab":{"base_uri":"https://localhost:8080/","height":127}},"source":["from google.colab import drive\n","\n","drive.mount('/content/gdrive')"],"execution_count":1,"outputs":[{"output_type":"stream","text":["Go to this URL in a browser: https://accounts.google.com/o/oauth2/auth?client_id=947318989803-6bn6qk8qdgf4n4g3pfee6491hc0brc4i.apps.googleusercontent.com&redirect_uri=urn%3aietf%3awg%3aoauth%3a2.0%3aoob&response_type=code&scope=email%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdocs.test%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdrive%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdrive.photos.readonly%20https%3a%2f%2fwww.googleapis.com%2fauth%2fpeopleapi.readonly\n","\n","Enter your authorization code:\n","··········\n","Mounted at /content/gdrive\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"iiQUsb_R8b93","colab_type":"code","colab":{}},"source":["# !pip uninstall scipy\n","# !pip install scipy==1.1.0\n","# !pip install pillow"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"l9kMVYfN4p_J","colab_type":"code","colab":{}},"source":["import pandas as pd\n","import numpy as np\n","from matplotlib import pyplot as plt\n","from matplotlib import pyplot\n","import scipy.misc \n","from math import sqrt \n","import itertools\n","from IPython.display import display\n","%matplotlib inline"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"Yw8yOWPr_Aoq","colab_type":"code","colab":{}},"source":["# scipy.__version__"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"TkK_cm7d3sQe","colab_type":"code","outputId":"cb4ab44e-9012-4a5e-c36c-92e7c51e38f0","executionInfo":{"status":"ok","timestamp":1580658148311,"user_tz":-540,"elapsed":9050,"user":{"displayName":"J 1","photoUrl":"","userId":"08178289703395036410"}},"colab":{"base_uri":"https://localhost:8080/","height":53}},"source":["input_data_length = int(input('input_data_length : '))\n","model_num = input('Press model number : ')"],"execution_count":4,"outputs":[{"output_type":"stream","text":["input_data_length : 96\n","Press model number : 0\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"Dd8ivd1z46ZA","colab_type":"code","outputId":"e7ecbbc0-a356-404d-fd02-c8eb35a116f0","executionInfo":{"status":"ok","timestamp":1580658165957,"user_tz":-540,"elapsed":13693,"user":{"displayName":"J 1","photoUrl":"","userId":"08178289703395036410"}},"colab":{"base_uri":"https://localhost:8080/","height":71}},"source":["\n","\n","Made_X = np.load('/content/gdrive/My Drive/Colab Notebooks/Made_X/Made_X %s_%s.npy' % (input_data_length, model_num))\n","Made_Y = np.load('/content/gdrive/My Drive/Colab Notebooks/Made_X_low/Made_Y %s_%s.npy' % (input_data_length, model_num))\n","\n","print(Made_X.shape)\n","print(Made_Y.shape)\n","print(np.sum(Made_Y))"],"execution_count":5,"outputs":[{"output_type":"stream","text":["(271489, 96, 6)\n","(271489, 1)\n","28583.0\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"RcT9ZHKZPXwb","colab_type":"code","outputId":"b2752a3e-345e-4031-c72c-5560219a3536","executionInfo":{"status":"ok","timestamp":1580658172026,"user_tz":-540,"elapsed":1885,"user":{"displayName":"J 1","photoUrl":"","userId":"08178289703395036410"}},"colab":{"base_uri":"https://localhost:8080/","height":320}},"source":["plt.figure(figsize=(10,5))\n","plt.plot(Made_Y)\n","plt.show()\n"],"execution_count":6,"outputs":[{"output_type":"display_data","data":{"image/png":"iVBORw0KGgoAAAANSUhEUgAAAlMAAAEvCAYAAABhSUTPAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4xLjIsIGh0\ndHA6Ly9tYXRwbG90bGliLm9yZy8li6FKAAAZFUlEQVR4nO3de4wd53nf8e9zzp69kVwuKS4pWaRE\nKWbSEKkRq4SqwoFr1K4jKYDUom4hAYld14iANipSJC2gwIVruOgfdtEUCKrGVRAjttFaVtQbgTJQ\n3ESFgaKyRce2bEmRTetikaLIJUXukns7t6d/nJGwXnPJlWZ3zvLw+wEOOPPOuzPvPjtn9seZObOR\nmUiSJOmdqfV7AJIkSVczw5QkSVIJhilJkqQSDFOSJEklGKYkSZJKMExJkiSVMNSvDe/atSv379/f\nr81LkiSt2be+9a0zmTl1qWV9C1P79+/n6NGj/dq8JEnSmkXEK6st8zKfJElSCYYpSZKkEgxTkiRJ\nJRimJEmSSjBMSZIklWCYkiRJKsEwJUmSVMIVw1REfCEiTkfE91dZHhHxexFxLCKeiYjb1n+YkiRJ\nm9Nazkz9EXDnZZbfBRwoXg8Av19+WJIkSVeHKz4BPTO/HhH7L9PlXuBLmZnAUxExGRE3ZObJdRrj\nO5KZ3P8HT/HUi2/0cxiSJGmDHfs3dzFU79+dS+ux5RuBV5fNHy/afkpEPBARRyPi6PT09DpsenWP\nf+u4QUqSpGvA+z/3ZF+3X2mMy8xHMvNQZh6amrrk3wpcN6+cnd/Q9UuSpM3htZnFvm5/PcLUCWDf\nsvm9RZskSdLAW48wdRj4aPGpvjuAmX7fLyVJklSVK96AHhFfAT4A7IqI48C/AhoAmfl54AhwN3AM\nmAc+vlGDlSRJ2mzW8mm++6+wPIHfWLcRSZIkXUV8ArokSVIJhilJkqQSDFOSJEklDGyYSrLfQ5Ak\nSdeAwQ1TZilJklSBgQ1TkiRJVTBMSZIklWCYkiRJKsEwJUmSVIJhSpIkqQTDlCRJUgmGKUmSpBIG\nNkz5mClJklSFgQ1TkiRJVRjYMOUT0CVJUhUGNkxJkiRVwTAlSZJUgmFKkiSpBMOUJElSCYYpSZKk\nEgxTkiRJJQxsmEof2ylJkiowsGFKkiSpCoYpSZKkEgxTkiRJJQxumPKWKUmSVIHBDVOSJEkVMExJ\nkiSVYJiSJEkqwTAlSZJUwsCGKe8/lyRJVRjYMCVJklQFw5QkSVIJhilJkqQSDFOSJEklDGyYyvQW\ndEmStPEGNkxJkiRVwTAlSZJUgmFKkiSpBMOUJElSCWsKUxFxZ0S8EBHHIuKhSyy/KSKejIhvR8Qz\nEXH3+g/17fH+c0mSVIUrhqmIqAMPA3cBB4H7I+Lgim7/EngsM98L3Af8x/UeqCRJ0ma0ljNTtwPH\nMvPFzGwCjwL3ruiTwEQxvR14bf2GKEmStHkNraHPjcCry+aPA399RZ9PA38aEf8U2AJ8aF1GJ0mS\ntMmt1w3o9wN/lJl7gbuBL0fET607Ih6IiKMRcXR6enqdNi1JktQ/awlTJ4B9y+b3Fm3LfQJ4DCAz\n/x8wCuxauaLMfCQzD2XmoampqXc24jXy/nNJklSFtYSpp4EDEXFLRAzTu8H88Io+PwY+CBARP08v\nTHnqSZIkDbwrhqnMbAMPAk8Az9P71N6zEfGZiLin6PbbwK9HxHeBrwD/MP3jeJIk6RqwlhvQycwj\nwJEVbZ9aNv0c8L71HZokSdLmN7BPQPe8mCRJqsLAhilJkqQqGKYkSZJKMExJkiSVYJiSJEkqwTAl\nSZJUgmFKkiSpBMOUJElSCYYpSZKkEgY2TKV/6liSJFVgYMOUJElSFQxTkiRJJRimJEmSSjBMSZIk\nlWCYkiRJKsEwJUmSVIJhSpIkqYSBDVPpY6YkSVIFBjZMSZIkVcEwJUmSVIJhSpIkqQTDlCRJUgmG\nKUmSpBIMU5IkSSUYpiRJkkowTEmSJJVgmJIkSSphYMNU+gh0SZJUgcENU/0egCRJuiYMbJiSJEmq\ngmFKkiSpBMOUJElSCYYpSZKkEgxTkiRJJRimJEmSSjBMSZIklTCwYcpndkqSpCoMbJiSJEmqwsCG\nqfQZ6JIkqQIDG6YkSZKqsKYwFRF3RsQLEXEsIh5apc8/iIjnIuLZiPgv6ztMSZKkzWnoSh0iog48\nDPxt4DjwdEQczsznlvU5APwO8L7MPBcRuzdqwJIkSZvJWs5M3Q4cy8wXM7MJPArcu6LPrwMPZ+Y5\ngMw8vb7DlCRJ2pzWEqZuBF5dNn+8aFvuZ4GfjYj/GxFPRcSd6zVASZKkzeyKl/nexnoOAB8A9gJf\nj4i/mpnnl3eKiAeABwBuuummddq0JElS/6zlzNQJYN+y+b1F23LHgcOZ2crMl4Af0AtXPyEzH8nM\nQ5l5aGpq6p2OWZIkadNYS5h6GjgQEbdExDBwH3B4RZ//Qe+sFBGxi95lvxfXcZxvm09AlyRJVbhi\nmMrMNvAg8ATwPPBYZj4bEZ+JiHuKbk8AZyPiOeBJ4F9k5tmNGrQkSdJmsaZ7pjLzCHBkRdunlk0n\n8FvFa1PwxJQkSaqCT0CXJEkqwTAlSZJUgmFKkiSpBMOUJElSCYYpSZKkEgxTkiRJJQxsmPKhnZIk\nqQoDG6YkSZKqYJiSJEkqYYDDlNf5JEnSxhvgMCVJkrTxDFOSJEklGKYkSZJKMExJkiSVYJiSJEkq\nYWDDlA/tlCRJVRjYMCVJklQFw5QkSVIJhilJkqQSDFOSJEklDGyYiuj3CCRJ0rVgYMOUJElSFQxT\nkiRJJRimJEmSShjYMOVDOyVJUhUGNkxJkiRVwTAlSZJUgmFKkiSpBMOUJElSCYYpSZKkEgY2TPlp\nPkmSVIWBDVOSJElVMExJkiSVMLBhKvE6nyRJ2ngDG6YkSZKqYJiSJEkqwTAlSZJUgmFKkiSpBMOU\nJElSCYYpSZKkEgY2TPkEdEmSVIU1hamIuDMiXoiIYxHx0GX6/b2IyIg4tH5DlCRJ2ryuGKYiog48\nDNwFHATuj4iDl+i3DfhN4BvrPch3whNTkiSpCms5M3U7cCwzX8zMJvAocO8l+v1r4LPA4jqOT5Ik\naVNbS5i6EXh12fzxou0tEXEbsC8z/9c6jk2SJGnTK30DekTUgN8FfnsNfR+IiKMRcXR6errspiVJ\nkvpuLWHqBLBv2fzeou1N24BfAP5PRLwM3AEcvtRN6Jn5SGYeysxDU1NT73zUkiRJm8RawtTTwIGI\nuCUihoH7gMNvLszMmczclZn7M3M/8BRwT2Ye3ZARS5IkbSJXDFOZ2QYeBJ4Angcey8xnI+IzEXHP\nRg9QkiRpMxtaS6fMPAIcWdH2qVX6fqD8sCRJkq4OPgFdkiSphMENUz62U5IkVWBgw5QkSVIVDFOS\nJEklGKYkSZJKMExJkiSVYJiSJEkqwTAlSZJUgmFKkiSpBMOUJElSCYYpSZKkEgY3TPkAdEmSVIGB\nDVNmKUmSVIWBDVOSJElVMExJkiSVYJiSJEkqwTAlSZJUgmFKkiSpBMOUJElSCYYpSZKkEgY2TGX6\npClJkrTxBjdM9XsAkiTpmjCwYUqSJKkKhilJkqQSDFOSJEklGKYkSZJKMExJkiSVYJiSJEkqwTAl\nSZJUwsCGKZ/ZKUmSqjCwYUqSJKkKhilJkqQSDFOSJEklGKYkSZJKMExJkiSVYJiSJEkqwTAlSZJU\ngmFKkiSphIENUz6zU5IkVWFgw5QkSVIV1hSmIuLOiHghIo5FxEOXWP5bEfFcRDwTEX8WETev/1Al\nSZI2nyuGqYioAw8DdwEHgfsj4uCKbt8GDmXme4DHgc+t90DfrvSP80mSpAqs5czU7cCxzHwxM5vA\no8C9yztk5pOZOV/MPgXsXd9hSpIkbU5rCVM3Aq8umz9etK3mE8CflBmUJEnS1WJoPVcWEb8KHAL+\n5irLHwAeALjpppvWc9OSJEl9sZYzUyeAfcvm9xZtPyEiPgR8ErgnM5cutaLMfCQzD2XmoampqXcy\nXkmSpE1lLWHqaeBARNwSEcPAfcDh5R0i4r3Af6IXpE6v/zAlSZI2pyuGqcxsAw8CTwDPA49l5rMR\n8ZmIuKfo9m+BrcAfR8R3IuLwKqurjJ/lkyRJVVjTPVOZeQQ4sqLtU8umP7TO45IkSboq+AR0SZKk\nEgxTkiRJJRimJEmSShjcMOUd6JIkqQKDG6YkSZIqYJiSJEkqwTAlSZJUwsCGqfSmKUmSVIGBDVOS\nJElVMExJkiSVYJiSJEkqwTAlSZJUgmFKkiSphIENU+mH+SRJUgUGNkxJkiRVwTAlSZJUwsCGKS/z\nSZKkKgxsmJIkSaqCYUqSJKkEw5QkSVIJhilJkqQSDFOSJEklGKYkSZJKGNgwlfhsBEmStPEGNkxJ\nkiRVwTAlSZJUwsCGKZ+ALkmSqjCwYUqSJKkKhilJkqQSDFOSJEklGKYkSZJKMExJkiSVYJiSJEkq\nwTAlSZJUwsCGKR8zJUmSqjC4Yco0JUmSKjCwYUqSJKkKhilJkqQSDFOSJEklGKYkSZJKMExJkiSV\nsKYwFRF3RsQLEXEsIh66xPKRiPhqsfwbEbF/vQcqSZK0GV0xTEVEHXgYuAs4CNwfEQdXdPsEcC4z\n3w38e+Cz6z1QSZKkzWgtZ6ZuB45l5ouZ2QQeBe5d0ede4IvF9OPAByMi1m+Yb9/0hcV+bl6SJF0j\n1hKmbgReXTZ/vGi7ZJ/MbAMzwHUrVxQRD0TE0Yg4Oj09/c5GvEY/d/22DV2/JEnaHMYa9b5uf6jK\njWXmI8AjAIcOHdrQZ5R/8lcO8p69k0xfWGKx3WFuqc2B3dt47fwC5+abdBMa9WDryBC1WjBcrzG7\n0KJRrzE2XGeh2eHiUptGvZc367XgXZOjnJxZZKndZXSozmijxsxCizfmmrxrcoz9u7bwypk5hodq\nLLW7DNWCTjdpdbrMNTtsH2uQCa1Ol5GhGq1Ol5uu28KZi0s0211en1lk385x5pbazC212btznNmF\nFq1Ol+u2DHNuvsX+XVtYanfodJLdEyM899oszU4yMlQjMxmq15jaNsIrZ+fZMd5gvtlhqd3bXqeb\n3HzdOM+dnKUWQbebRPS+r798/QIjQzX2TIzSbHeJgO1jDTrd5MJim7NzS+zdMc70hSW2jQ6xbXSI\npVaXVqdLJ5MgGBuuc26uyWijzq6tI5ybbxIB7U7SzeRdk2O0O8nZuSXevXsrJ84t0Ox02Tk+zHyr\nw2Krw+TYMD+avgjAlpE6O8aHWWp3mV1osWvbCJ1uMrvQYmSoRjeh3e2ybbTBa+cXmBhrMLPQ4uev\n38aJ8wtcPzHGyZkFxoeHSJJGvff9zS21mdo2wolzC8w128wstAiCX9y3nW+/ep5ON9kxPky9FgzV\ng6VWr/6vnptnqF7jZ6a28hc/PseNk2OcubjE5NgwZy4u0e522T7W4Nxcix1bhtm5pUE9ghPnF9k+\n1mDrSO/N3uomp2YW2T7eKPaP5MDurbx8do49E72fxf7rxpkpvs/9u7ZwamaR2cU2C80OW0aG2DpS\n59TsErdObeHsXJPtYw3GGnUSeOnMRW7dtZXTF5aYWWgyMdbg9ZlFbto5ztm5Jgd2b+Xoy+fYMlLn\nXZNjAFxYbDPfbJMJv3Djdo6fW+DU7CKjjRqjjTrdbrJzywjzzTYXl9rUImi2u+zbOcaZi01mF1sM\n1YJGvcbwUI16BAutDufnW0yON1hodRhr1Nk+1uDkzCJ/5fptvD67yFAtODvXZM/EKNvHGhw/N0+j\nXmNybJhacW57odVhx/gwb8w3mV1oMT5c56Uz89x28yQAL03PsX/XFn546gJjw0NMjA7x0pk5btg+\nytm5JjdfN86ZC012T4wQESy1OzRqNaYv9Or34zfm6WaydWSIPROjnL6wBMBSq8Op2SVGGjV2jA9z\n69QWvnd8hlMXltg6UufgDRMcP7dArRZkJqdnl5gcH36rZhcWWwCMNupcXGwTEdx8Xe/9vW10iHqt\nxuxii+F6jflmm9FGnbNzTWoBO7eMcPzcPEvtLnu2jdKoB83iODBUr9HN5LXzC9QjmBwf5o25JltG\nhoiAmYUWi60O+3aMEwEnzy+ye2KEZrvLxFiDC4vt4njSZLF4D0+ON2jUa7S7WZzVD3aMN2h1utRr\nNU5fWGSsUefdu7fyytl5MpNmp/vWX5rYMzHKufkmw8Xx8+Wz82wdGWLvjjGOn1ugXoOJ0Qazi623\njhsRwc9dv40zF5ZodnrvnQDmmx1GGjXmmx32TIyy0Oy8dYydvrDE3FKbGyZHOT/fIjMZGx5idrHF\nzHyLei2Y2jbC5FhvW+fnW3QThodqdLtJrQbDxTHytZne+3JitLd/np5dZK7ZodXusmvbMFtGhpie\nXaJeCxbbXfZsG+GN+SYjQzV2bR1hcnyYTrdXn788OUu9FkyMNWi2e9/ffLPDvh1jTF9scnJmgVt3\nbWX64hITo0PMLbWZGGswOdbg1GzvmDqz0Oq9d2rB+PAQJ84vMDnWAKCTyeRYg072jh037RxnamKU\nb770BluG69RrwdbRIcjen1KbW2rT6SajjTqjjTpjjTqnLywyMdZg60ivXjvGhzk/32K43nvfvnpu\nnnqtVuybwexCi/lmh0Y9uH77GKdnF9kzMUqnm/xo+iI7twwT0ftrI+PDdbaO9I6/120d5vnid0y7\n22VkqM7uiREmRhv86PRFWt1k/3XjLLY6TF9YYmKswfjwED88dYH9u7YwPlwvapiMNGqcOLfAvp29\nn/1Cq8uB3Vvfqt/rM71j1Lsmx/iV99ywkZHiitYSpk4A+5bN7y3aLtXneEQMAduBs+sywndo+1iD\nX73j5n4OQVehX/sba+v3CW7Z2IFssI+/7+oevyT4NX/HbRprucz3NHAgIm6JiGHgPuDwij6HgY8V\n0x8B/jzTv44nSZIG3xXPTGVmOyIeBJ4A6sAXMvPZiPgMcDQzDwN/CHw5Io4Bb9ALXJIkSQNvTfdM\nZeYR4MiKtk8tm14E/v76Dk2SJGnz8wnokiRJJRimJEmSSjBMSZIklWCYkiRJKsEwJUmSVIJhSpIk\nqQTDlCRJUgnRrweVR8Q08MoGb2YXcGaDt6GfZt2rZ837w7pXz5r3h3WHmzNz6lIL+hamqhARRzPz\nUL/Hca2x7tWz5v1h3atnzfvDul+el/kkSZJKMExJkiSVMOhh6pF+D+AaZd2rZ837w7pXz5r3h3W/\njIG+Z0qSJGmjDfqZKUmSpA01sGEqIu6MiBci4lhEPNTv8VyNIuLliPheRHwnIo4WbTsj4msR8cPi\n3x1Fe0TE7xX1fiYiblu2no8V/X8YER9b1v7XivUfK742qv8u+y8ivhARpyPi+8vaNrzOq23jWrBK\nzT8dESeK/f07EXH3smW/U9TvhYj45WXtlzzORMQtEfGNov2rETFctI8U88eK5fur+Y77LyL2RcST\nEfFcRDwbEb9ZtLuvb5DL1Nx9fb1l5sC9gDrwI+BWYBj4LnCw3+O62l7Ay8CuFW2fAx4qph8CPltM\n3w38CRDAHcA3ivadwIvFvzuK6R3Fsm8WfaP42rv6/T33qc7vB24Dvl9lnVfbxrXwWqXmnwb++SX6\nHiyOISPALcWxpX654wzwGHBfMf154B8X0/8E+HwxfR/w1X7XosKa3wDcVkxvA35Q1NZ9vfqau6+v\n82tQz0zdDhzLzBczswk8Ctzb5zENinuBLxbTXwT+zrL2L2XPU8BkRNwA/DLwtcx8IzPPAV8D7iyW\nTWTmU9l7t31p2bquKZn5deCNFc1V1Hm1bQy8VWq+mnuBRzNzKTNfAo7RO8Zc8jhTnA35W8Djxdev\n/Pm9WfPHgQ9eK2dkM/NkZv5FMX0BeB64Eff1DXOZmq/Gff0dGtQwdSPw6rL541x+B9KlJfCnEfGt\niHigaNuTmSeL6deBPcX0ajW/XPvxS7Srp4o6r7aNa9mDxSWlLyy7FPR2a34dcD4z2yvaf2JdxfKZ\nov81pbjk817gG7ivV2JFzcF9fV0NapjS+vilzLwNuAv4jYh4//KFxf/+/DjoBquizv4sAfh94GeA\nXwROAv+uv8MZTBGxFfivwD/LzNnly9zXN8Ylau6+vs4GNUydAPYtm99btOltyMwTxb+ngf9O71Tv\nqeJ0OsW/p4vuq9X8cu17L9GunirqvNo2rkmZeSozO5nZBf6A3v4Ob7/mZ+ldkhpa0f4T6yqWby/6\nXxMiokHvl/p/zsz/VjS7r2+gS9XcfX39DWqYeho4UHzKYJjezW+H+zymq0pEbImIbW9OAx8Gvk+v\njm9+euZjwP8spg8DHy0+gXMHMFOcVn8C+HBE7ChOJX8YeKJYNhsRdxTX0T+6bF2qps6rbeOa9OYv\n28Lfpbe/Q69O9xWfTroFOEDvRudLHmeKMx9PAh8pvn7lz+/Nmn8E+POi/8Ar9r8/BJ7PzN9dtsh9\nfYOsVnP39Q3Q7zvgN+pF75MgP6D3CYRP9ns8V9uL3qc2vlu8nn2zhvSuef8Z8EPgfwM7i/YAHi7q\n/T3g0LJ1/SN6NzIeAz6+rP0QvTfxj4D/QPEQ2WvtBXyF3qn2Fr17Dj5RRZ1X28a18Fql5l8uavoM\nvV8ENyzr/8mifi+w7FOnqx1nivfPN4ufxR8DI0X7aDF/rFh+a79rUWHNf4ne5bVngO8Ur7vd1/tS\nc/f1dX75BHRJkqQSBvUynyRJUiUMU5IkSSUYpiRJkkowTEmSJJVgmJIkSSrBMCVJklSCYUqSJKkE\nw5QkSVIJ/x+fLvtEJmgWBgAAAABJRU5ErkJggg==\n","text/plain":["<Figure size 720x360 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"id":"5cKL21zC4_rm","colab_type":"code","colab":{}},"source":["from pylab import rcParams\n","rcParams['figure.figsize'] = 15, 10"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"wr76POiF5BAY","colab_type":"code","colab":{}},"source":["classes=np.array((\"Rapid Ascending\", \"None\"))"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"VRjo1aMj5DNN","colab_type":"code","colab":{}},"source":["# reshape 할때 필요한 params\n","# depth = 1\n","row = Made_X.shape[1]\n","col = Made_X.shape[2]\n","\n","# for i in range(0, 10): \n","#   print(Made_X[i].shape)\n","\n","#   array = scipy.misc.imresize(Made_X[i].astype('float32'), [row * 5, col * 5])\n","#   image = scipy.misc.toimage(array, cmin=0.0) \n","#   display(image)\n","# # print(emotion_labels[data.emotion[i]]) "],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"kJ-ure7y5ElN","colab_type":"code","outputId":"be6aad7d-6360-4d02-e1ed-744b455b6b8e","executionInfo":{"status":"ok","timestamp":1580658178888,"user_tz":-540,"elapsed":855,"user":{"displayName":"J 1","photoUrl":"","userId":"08178289703395036410"}},"colab":{"base_uri":"https://localhost:8080/","height":71}},"source":["total_len = len(Made_X)\n","train_len = int(total_len * 0.7)\n","val_len = int(total_len * 0.15)\n","test_len = total_len - (train_len + val_len)\n","\n","X_train = Made_X[:train_len].astype('float32').reshape(-1, input_data_length, col, 1)\n","X_val = Made_X[train_len:train_len + val_len].astype('float32').reshape(-1, input_data_length, col, 1)\n","X_test = Made_X[train_len + val_len:].astype('float32').reshape(-1, input_data_length, col, 1)\n","\n","print(X_train.shape)\n","print(X_val.shape)\n","print(X_test.shape)"],"execution_count":10,"outputs":[{"output_type":"stream","text":["(190042, 96, 6, 1)\n","(40723, 96, 6, 1)\n","(40724, 96, 6, 1)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"7Zqi31SY5G19","colab_type":"code","outputId":"334555fd-4807-48d1-bd0f-742be7854a8b","executionInfo":{"status":"ok","timestamp":1580658184516,"user_tz":-540,"elapsed":1981,"user":{"displayName":"J 1","photoUrl":"","userId":"08178289703395036410"}},"colab":{"base_uri":"https://localhost:8080/","height":82}},"source":["from keras.utils import np_utils\n","from keras.preprocessing.image import ImageDataGenerator "],"execution_count":11,"outputs":[{"output_type":"stream","text":["Using TensorFlow backend.\n"],"name":"stderr"},{"output_type":"display_data","data":{"text/html":["<p style=\"color: red;\">\n","The default version of TensorFlow in Colab will soon switch to TensorFlow 2.x.<br>\n","We recommend you <a href=\"https://www.tensorflow.org/guide/migrate\" target=\"_blank\">upgrade</a> now \n","or ensure your notebook will continue to use TensorFlow 1.x via the <code>%tensorflow_version 1.x</code> magic:\n","<a href=\"https://colab.research.google.com/notebooks/tensorflow_version.ipynb\" target=\"_blank\">more info</a>.</p>\n"],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"id":"kKyYFl4m2z3u","colab_type":"code","colab":{}},"source":["# # Made_Y 데이터 편향성 확인 & Class_weight 적용\n","# sum_0 = np.sum(Made_Y == 0)\n","# sum_1 = np.sum(Made_Y == 1)\n","# print(sum_0, sum_1)\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"46m-6eA35Hon","colab_type":"code","outputId":"3dff2971-d598-42c6-b460-ed65e5b6f530","executionInfo":{"status":"ok","timestamp":1580658186384,"user_tz":-540,"elapsed":572,"user":{"displayName":"J 1","photoUrl":"","userId":"08178289703395036410"}},"colab":{"base_uri":"https://localhost:8080/","height":71}},"source":["Y_train = Made_Y[:train_len].astype('float32')\n","Y_val = Made_Y[train_len:train_len + val_len].astype('float32')\n","Y_test = Made_Y[train_len + val_len:].astype('float32')\n","num_classes = 2\n","Y_train = np_utils.to_categorical(Y_train, num_classes)\n","Y_val = np_utils.to_categorical(Y_val, num_classes)\n","Y_test = np_utils.to_categorical(Y_test, num_classes)\n","print(Y_train.shape)\n","print(Y_val.shape)\n","print(Y_test.shape)"],"execution_count":12,"outputs":[{"output_type":"stream","text":["(190042, 2)\n","(40723, 2)\n","(40724, 2)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"SNxRwrqr5IbF","colab_type":"code","colab":{}},"source":["datagen = ImageDataGenerator( \n","    rotation_range = 60,\n","    horizontal_flip = True,\n","    width_shift_range=0.6,\n","    height_shift_range=0.6,\n","    fill_mode = 'nearest'\n","    )\n","\n","testgen = ImageDataGenerator( \n","    )\n","datagen.fit(X_train)\n","batch_size = 128"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"xQCsyuqj5KBF","colab_type":"code","outputId":"941e8218-8a8b-4cb0-a297-d916ad5d28c5","executionInfo":{"status":"ok","timestamp":1580658189129,"user_tz":-540,"elapsed":1096,"user":{"displayName":"J 1","photoUrl":"","userId":"08178289703395036410"}},"colab":{"base_uri":"https://localhost:8080/","height":575}},"source":["for X_batch, _ in datagen.flow(X_train, Y_train, batch_size=9):\n","    for i in range(0, 9): \n","        pyplot.axis('off') \n","        pyplot.subplot(330 + 1 + i) \n","        pyplot.imshow(X_batch[i].reshape(input_data_length, col), cmap=pyplot.get_cmap('gray'))\n","    pyplot.axis('off') \n","    pyplot.show() \n","    break\n","    \n"],"execution_count":14,"outputs":[{"output_type":"display_data","data":{"image/png":"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\nSpyt+yqTAAAAAElFTkSuQmCC\n","text/plain":["<Figure size 1080x720 with 9 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"id":"_pq66tOr5K2F","colab_type":"code","outputId":"8b9ca539-7828-436f-d913-a26bdf7aea9e","executionInfo":{"status":"ok","timestamp":1580658192322,"user_tz":-540,"elapsed":764,"user":{"displayName":"J 1","photoUrl":"","userId":"08178289703395036410"}},"colab":{"base_uri":"https://localhost:8080/","height":35}},"source":["train_flow = datagen.flow(X_train, Y_train, batch_size=batch_size) \n","val_flow = testgen.flow(X_val, Y_val, batch_size=batch_size) \n","test_flow = testgen.flow(X_test, Y_test, batch_size=batch_size)\n","\n","print(len(train_flow))"],"execution_count":15,"outputs":[{"output_type":"stream","text":["1485\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"V-63Kou25PjQ","colab_type":"code","colab":{}},"source":["from keras.utils import plot_model\n","import keras.backend as K\n","from keras.models import Model, Sequential\n","from keras.layers import LSTM, TimeDistributed, Input, Dense, Flatten, Dropout, BatchNormalization, Conv1D\n","from keras.layers.convolutional import Conv2D\n","from keras.layers.pooling import MaxPooling2D, MaxPooling1D\n","from keras.layers.merge import concatenate\n","from keras.optimizers import Adam, SGD\n","from keras.regularizers import l1, l2\n","from sklearn.metrics import confusion_matrix"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"VPqI8sWb5Qcl","colab_type":"code","colab":{}},"source":["# def FER_Model(input_shape=(input_data_length, col, 1)):\n","#     # first input model\n","#     visible = Input(shape=input_shape, name='input')\n","#     num_classes = 2\n","#     conv1_fit = 128\n","#     conv2_fit = 64\n","#     conv3_fit = 32\n","#     # conv4_fit = 256\n","#     # conv5_fit = 256\n","\n","#     #the 1-st block\n","#     conv1_1 = Conv2D(conv1_fit, kernel_size=3, activation='relu', padding='same', name = 'conv1_1')(visible)\n","#     conv1_1 = BatchNormalization()(conv1_1)\n","#     conv1_2 = Conv2D(conv1_fit, kernel_size=3, activation='relu', padding='same', name = 'conv1_2')(conv1_1)\n","#     conv1_2 = BatchNormalization()(conv1_2)\n","#     pool1_1 = MaxPooling2D(pool_size=(2,2), name = 'pool1_1')(conv1_2)\n","#     drop1_1 = Dropout(0.3, name = 'drop1_1')(pool1_1)\n","\n","#     #the 2-nd block\n","#     conv2_1 = Conv2D(conv2_fit, kernel_size=3, activation='relu', padding='same', name = 'conv2_1')(drop1_1)\n","#     conv2_1 = BatchNormalization()(conv2_1)\n","#     conv2_2 = Conv2D(conv2_fit, kernel_size=3, activation='relu', padding='same', name = 'conv2_2')(conv2_1)\n","#     conv2_2 = BatchNormalization()(conv2_2)\n","#     conv2_3 = Conv2D(conv2_fit, kernel_size=3, activation='relu', padding='same', name = 'conv2_3')(conv2_2)\n","#     conv2_3 = BatchNormalization()(conv2_3)\n","#     pool2_1 = MaxPooling2D(pool_size=(2,2), name = 'pool2_1')(conv2_3)\n","#     drop2_1 = Dropout(0.3, name = 'drop2_1')(pool2_1)\n","\n","#      #the 3-rd block\n","#     conv3_1 = Conv2D(conv3_fit, kernel_size=3, activation='relu', padding='same', name = 'conv3_1')(drop2_1)\n","#     conv3_1 = BatchNormalization()(conv3_1)\n","#     conv3_2 = Conv2D(conv3_fit, kernel_size=3, activation='relu', padding='same', name = 'conv3_2')(conv3_1)\n","#     conv3_2 = BatchNormalization()(conv3_2)\n","#     conv3_3 = Conv2D(conv3_fit, kernel_size=3, activation='relu', padding='same', name = 'conv3_3')(conv3_2)\n","#     conv3_3 = BatchNormalization()(conv3_3)\n","#     conv3_4 = Conv2D(conv3_fit, kernel_size=3, activation='relu', padding='same', name = 'conv3_4')(conv3_3)\n","#     conv3_4 = BatchNormalization()(conv3_4)\n","#     pool3_1 = MaxPooling2D(pool_size=(input_data_length // 4,1), name = 'pool3_1')(conv3_4)\n","#     drop3_1 = Dropout(0.3, name = 'drop3_1')(pool3_1)\n","\n","#     # #the 4-th block\n","#     # conv4_1 = Conv2D(1024, kernel_size=3, activation='relu', padding='same', name = 'conv4_1')(drop3_1)\n","#     # conv4_1 = BatchNormalization()(conv4_1)\n","#     # conv4_2 = Conv2D(1024, kernel_size=3, activation='relu', padding='same', name = 'conv4_2')(conv4_1)\n","#     # conv4_2 = BatchNormalization()(conv4_2)\n","#     # conv4_3 = Conv2D(1024, kernel_size=3, activation='relu', padding='same', name = 'conv4_3')(conv4_2)\n","#     # conv4_3 = BatchNormalization()(conv4_3)\n","#     # conv4_4 = Conv2D(1024, kernel_size=3, activation='relu', padding='same', name = 'conv4_4')(conv4_3)\n","#     # conv4_4 = BatchNormalization()(conv4_4)\n","#     # pool4_1 = MaxPooling2D(pool_size=(2,2), name = 'pool4_1')(conv4_4)\n","#     # drop4_1 = Dropout(0.3, name = 'drop4_1')(pool4_1)\n","    \n","#     # #the 5-th block\n","#     # conv5_1 = Conv2D(512, kernel_size=3, activation='relu', padding='same', name = 'conv5_1')(drop4_1)\n","#     # conv5_1 = BatchNormalization()(conv5_1)\n","#     # conv5_2 = Conv2D(512, kernel_size=3, activation='relu', padding='same', name = 'conv5_2')(conv5_1)\n","#     # conv5_2 = BatchNormalization()(conv5_2)\n","#     # conv5_3 = Conv2D(512, kernel_size=3, activation='relu', padding='same', name = 'conv5_3')(conv5_2)\n","#     # conv5_3 = BatchNormalization()(conv5_3)\n","#     # conv5_4 = Conv2D(512, kernel_size=3, activation='relu', padding='same', name = 'conv5_4')(conv5_3)\n","#     # conv5_3 = BatchNormalization()(conv5_3)\n","#     # pool5_1 = MaxPooling2D(pool_size=(2,2), name = 'pool5_1')(conv5_4)\n","#     # drop5_1 = Dropout(0.3, name = 'drop5_1')(pool5_1)\n","\n","#     #Flatten and output\n","#     flatten = Flatten(name = 'flatten')(drop3_1)\n","#     output = Dense(num_classes, activation='softmax', name = 'output')(flatten)\n","\n","#     # create model \n","#     model = Model(inputs =visible, outputs = output)\n","#     # summary layers\n","#     print(model.summary())\n","    \n","#     return model"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"2Fl_xb6KMn4T","colab_type":"code","colab":{}},"source":["# def FER_Model(input_shape=(input_data_length, col, 1)):\n","#     # first input model\n","#     visible = Input(shape=input_shape, name='input')\n","#     num_classes = 2\n","#     conv1_filt = 128\n","#     conv2_filt = 128\n","#     conv3_filt = 128\n","    \n","#     model = Conv2D(filters=conv1_filt, kernel_size=(3, 3), padding='SAME', activation='relu', input_shape=(input_data_length, col, 1))(visible)\n","#     model = Conv2D(filters=conv1_filt, kernel_size=(3, 3), padding='SAME', activation='relu')(model)\n","#     model = Conv2D(filters=conv1_filt, kernel_size=(3, 3), padding='SAME', activation='relu')(model)\n","#     model = Conv2D(filters=conv1_filt, kernel_size=(3, 3), padding='SAME', activation='relu')(model)\n","#     model = BatchNormalization(momentum=0.15)(model)\n","#     model = MaxPooling2D(pool_size=(2, 2))(model)\n","#     model = Conv2D(filters=32, kernel_size=(5, 5), padding='SAME', activation='relu')(model)\n","#     model = Dropout(rate=0.3)(model)\n","\n","#     model = Conv2D(filters=conv2_filt, kernel_size=(3, 3), padding='SAME', activation='relu')(model)\n","#     model = Conv2D(filters=conv2_filt, kernel_size=(3, 3), padding='SAME', activation='relu')(model)\n","#     model = Conv2D(filters=conv2_filt, kernel_size=(3, 3), padding='SAME', activation='relu')(model)\n","#     model = Conv2D(filters=conv2_filt, kernel_size=(3, 3), padding='SAME', activation='relu')(model)\n","#     model = BatchNormalization(momentum=0.15)(model)\n","#     model = MaxPooling2D(pool_size=(2, 2))(model)\n","#     model = Conv2D(filters=64, kernel_size=(5, 5), padding='SAME', activation='relu')(model)\n","#     model = BatchNormalization(momentum=0.15)(model)\n","#     model = Dropout(rate=0.3)(model)\n","\n","#     model = Conv2D(filters=conv3_filt, kernel_size=(3, 3), padding='SAME', activation='relu')(model)\n","#     model = Conv2D(filters=conv3_filt, kernel_size=(3, 3), padding='SAME', activation='relu')(model)\n","#     model = Conv2D(filters=conv3_filt, kernel_size=(3, 3), padding='SAME', activation='relu')(model)\n","#     model = Conv2D(filters=conv3_filt, kernel_size=(3, 3), padding='SAME', activation='relu')(model)\n","#     model = BatchNormalization(momentum=0.15)(model)\n","#     model = MaxPooling2D(pool_size=(input_data_length // 4, 1))(model)\n","#     model = Conv2D(filters=conv3_filt, kernel_size=(5, 5), padding='SAME', activation='relu')(model)\n","#     model = BatchNormalization(momentum=0.15)(model)\n","#     model = Dropout(rate=0.3)(model)\n","\n","#     # model = Conv2D(filters=256, kernel_size=(3, 3), padding='SAME', activation='relu')(model)\n","#     # model = Conv2D(filters=256, kernel_size=(3, 3), padding='SAME', activation='relu')(model)\n","#     # model = Conv2D(filters=256, kernel_size=(3, 3), padding='SAME', activation='relu')(model)\n","#     # model = Conv2D(filters=256, kernel_size=(3, 3), padding='SAME', activation='relu')(model)\n","#     # model = BatchNormalization(momentum=0.15)(model)\n","#     # model = MaxPooling2D(pool_size=(2, 2))(model)\n","#     # model = Conv2D(filters=256, kernel_size=(5, 5), padding='SAME', activation='relu')(model)\n","#     # model = BatchNormalization(momentum=0.15)(model)\n","#     # model = Dropout(rate=0.3)(model)\n","\n","#     model = Flatten()(model)\n","#     model = Dense(512, activation = \"relu\")(model)\n","#     model = Dropout(rate=0.3)(model)\n","#     dense = Dense(256, activation = \"relu\")(model)\n","#     output = Dense(num_classes, activation='softmax', name = 'output')(dense)\n","\n","#     # create model \n","#     model = Model(inputs =visible, outputs = output)\n","#     # summary layers\n","#     print(model.summary())\n","\n","#     return model"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"n412o2iXhmOQ","colab_type":"code","colab":{}},"source":["def FER_Model(input_shape=(input_data_length, col, 1)):\n","    # first input model\n","    visible = Input(shape=input_shape, name='input')\n","    conv1_fit = 100\n","    conv2_fit = 100\n","    conv3_fit = 128\n","    # conv4_fit = 256\n","    # conv5_fit = 256\n","\n","    #the 1-st block\n","    conv1_1 = Conv2D(conv1_fit, kernel_size=3, activation='relu', padding='same', name = 'conv1_1')(visible)\n","    conv1_1 = BatchNormalization()(conv1_1)\n","    # conv1_2 = Conv2D(conv1_fit, kernel_size=3, activation='relu', padding='same', name = 'conv1_2')(conv1_1)\n","    # conv1_2 = BatchNormalization()(conv1_2)\n","    pool1_1 = MaxPooling2D(pool_size=(2,2), name = 'pool1_1')(conv1_1)\n","    # drop1_1 = Dropout(0.3, name = 'drop1_1')(pool1_1)\n","\n","    #the 2-nd block\n","    conv2_1 = Conv2D(conv2_fit, kernel_size=3, activation='relu', padding='same', name = 'conv2_1')(pool1_1)\n","    conv2_1 = BatchNormalization()(conv2_1)\n","    # conv2_2 = Conv2D(conv2_fit, kernel_size=3, activation='relu', padding='same', name = 'conv2_2')(conv2_1)\n","    # conv2_2 = BatchNormalization()(conv2_2)\n","    # conv2_3 = Conv2D(conv2_fit, kernel_size=3, activation='relu', padding='same', name = 'conv2_3')(conv2_2)\n","    # conv2_3 = BatchNormalization()(conv2_3)\n","    pool2_1 = MaxPooling2D(pool_size=(2,2), name = 'pool2_1')(conv2_1)\n","    drop2_1 = Dropout(0.3, name = 'drop2_1')(pool2_1)\n","\n","     #the 3-rd block\n","    # conv3_1 = Conv2D(conv3_fit, kernel_size=(3,1), activation='relu', padding='same', name = 'conv3_1')(pool2_1)\n","    # conv3_1 = BatchNormalization()(conv3_1)\n","    # # conv3_2 = Conv2D(conv3_fit, kernel_size=3, activation='relu', padding='same', name = 'conv3_2')(conv3_1)\n","    # # conv3_2 = BatchNormalization()(conv3_2)\n","    # # conv3_3 = Conv2D(conv3_fit, kernel_size=3, activation='relu', padding='same', name = 'conv3_3')(conv3_2)\n","    # # conv3_3 = BatchNormalization()(conv3_3)\n","    # # conv3_4 = Conv2D(conv3_fit, kernel_size=3, activation='relu', padding='same', name = 'conv3_4')(conv3_3)\n","    # # conv3_4 = BatchNormalization()(conv3_4)\n","    # pool3_1 = MaxPooling2D(pool_size=(input_data_length // 4,1), name = 'pool3_1')(conv3_1)\n","    # drop3_1 = Dropout(0.3, name = 'drop3_1')(pool3_1)\n","\n","    # #the 4-th block\n","    # conv4_1 = Conv2D(1024, kernel_size=3, activation='relu', padding='same', name = 'conv4_1')(drop3_1)\n","    # conv4_1 = BatchNormalization()(conv4_1)\n","    # conv4_2 = Conv2D(1024, kernel_size=3, activation='relu', padding='same', name = 'conv4_2')(conv4_1)\n","    # conv4_2 = BatchNormalization()(conv4_2)\n","    # conv4_3 = Conv2D(1024, kernel_size=3, activation='relu', padding='same', name = 'conv4_3')(conv4_2)\n","    # conv4_3 = BatchNormalization()(conv4_3)\n","    # conv4_4 = Conv2D(1024, kernel_size=3, activation='relu', padding='same', name = 'conv4_4')(conv4_3)\n","    # conv4_4 = BatchNormalization()(conv4_4)\n","    # pool4_1 = MaxPooling2D(pool_size=(2,2), name = 'pool4_1')(conv4_4)\n","    # drop4_1 = Dropout(0.3, name = 'drop4_1')(pool4_1)\n","    \n","    # #the 5-th block\n","    # conv5_1 = Conv2D(512, kernel_size=3, activation='relu', padding='same', name = 'conv5_1')(drop4_1)\n","    # conv5_1 = BatchNormalization()(conv5_1)\n","    # conv5_2 = Conv2D(512, kernel_size=3, activation='relu', padding='same', name = 'conv5_2')(conv5_1)\n","    # conv5_2 = BatchNormalization()(conv5_2)\n","    # conv5_3 = Conv2D(512, kernel_size=3, activation='relu', padding='same', name = 'conv5_3')(conv5_2)\n","    # conv5_3 = BatchNormalization()(conv5_3)\n","    # conv5_4 = Conv2D(512, kernel_size=3, activation='relu', padding='same', name = 'conv5_4')(conv5_3)\n","    # conv5_3 = BatchNormalization()(conv5_3)\n","    # pool5_1 = MaxPooling2D(pool_size=(2,2), name = 'pool5_1')(conv5_4)\n","    # drop5_1 = Dropout(0.3, name = 'drop5_1')(pool5_1)\n","\n","    #Flatten and output\n","    flatten = Flatten(name = 'flatten')(drop2_1)\n","    dense = Dense(100, activation='relu', name='dense')(flatten)\n","    output = Dense(num_classes, activation='softmax', name = 'output')(dense)\n","\n","    # create model \n","    model = Model(inputs =visible, outputs = output)\n","    # summary layers\n","    print(model.summary())\n","    \n","    return model"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"aYSAQL9yvy1u","colab_type":"code","colab":{}},"source":["# #     LSTM      #\n","\n","# def FER_Model(input_shape=(input_data_length, col, 1)):\n","#     # first input model\n","#     visible = Input(shape=input_shape, name='input')\n","#     conv1_fit = 128\n","#     conv2_fit = 128\n","#     conv3_fit = 128\n","#     # define model\n","#     model = Sequential()\n","#     model.add(TimeDistributed(Conv1D(filters=conv1_fit, kernel_size=3, activation='relu'), input_shape=input_shape))\n","#     model.add(TimeDistributed(Conv1D(filters=conv1_fit, kernel_size=3, activation='relu')))\n","#     # model.add(TimeDistributed(Dropout(0.5)))\n","#     model.add(TimeDistributed(MaxPooling1D(pool_size=2)))\n","#     model.add(TimeDistributed(Flatten()))\n","#     model.add(LSTM(100))\n","#     model.add(Dropout(0.3))\n","#     model.add(Dense(100, activation='relu'))\n","#     model.add(Dense(num_classes, activation='softmax'))\n","\n","#     # # define model\n","#     # model = Sequential()\n","#     # model.add(TimeDistributed(Conv1D(filters=conv1_fit, kernel_size=3, activation='relu'), input_shape=input_shape))\n","#     # model.add(TimeDistributed(MaxPooling1D(pool_size=2)))\n","\n","#     # model.add(TimeDistributed(Conv1D(filters=conv1_fit / 2, kernel_size=3, activation='relu')))\n","#     # model.add(TimeDistributed(MaxPooling1D(pool_size=2)))\n","\n","#     # model.add(TimeDistributed(Conv1D(filters=conv1_fit / 4, kernel_size=3, activation='relu')))\n","#     # model.add(TimeDistributed(MaxPooling1D(pool_size=2)))\n","#     # model.add(TimeDistributed(Flatten()))\n","\n","#     # model.add(LSTM(100))\n","#     # model.add(Dropout(0.3))\n","#     # model.add(Dense(100, activation='relu'))\n","#     # model.add(Dense(num_classes, activation='softmax'))\n","\n","#     return model"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"_wKiQMu35Rmd","colab_type":"code","outputId":"10612018-e159-4330-bae6-798ed086370f","executionInfo":{"status":"ok","timestamp":1580658233199,"user_tz":-540,"elapsed":8644,"user":{"displayName":"J 1","photoUrl":"","userId":"08178289703395036410"}},"colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["model = FER_Model()\n","opt = Adam(lr=0.0001, decay=1e-6)\n","model.compile(loss='categorical_crossentropy', optimizer=opt, metrics=['accuracy'])"],"execution_count":21,"outputs":[{"output_type":"stream","text":["WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:541: The name tf.placeholder is deprecated. Please use tf.compat.v1.placeholder instead.\n","\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:4432: The name tf.random_uniform is deprecated. Please use tf.random.uniform instead.\n","\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:66: The name tf.get_default_graph is deprecated. Please use tf.compat.v1.get_default_graph instead.\n","\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:190: The name tf.get_default_session is deprecated. Please use tf.compat.v1.get_default_session instead.\n","\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:197: The name tf.ConfigProto is deprecated. Please use tf.compat.v1.ConfigProto instead.\n","\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:203: The name tf.Session is deprecated. Please use tf.compat.v1.Session instead.\n","\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:207: The name tf.global_variables is deprecated. Please use tf.compat.v1.global_variables instead.\n","\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:216: The name tf.is_variable_initialized is deprecated. Please use tf.compat.v1.is_variable_initialized instead.\n","\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:223: The name tf.variables_initializer is deprecated. Please use tf.compat.v1.variables_initializer instead.\n","\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:2041: The name tf.nn.fused_batch_norm is deprecated. Please use tf.compat.v1.nn.fused_batch_norm instead.\n","\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:148: The name tf.placeholder_with_default is deprecated. Please use tf.compat.v1.placeholder_with_default instead.\n","\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:4267: The name tf.nn.max_pool is deprecated. Please use tf.nn.max_pool2d instead.\n","\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:3733: calling dropout (from tensorflow.python.ops.nn_ops) with keep_prob is deprecated and will be removed in a future version.\n","Instructions for updating:\n","Please use `rate` instead of `keep_prob`. Rate should be set to `rate = 1 - keep_prob`.\n","Model: \"model_1\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","input (InputLayer)           (None, 96, 6, 1)          0         \n","_________________________________________________________________\n","conv1_1 (Conv2D)             (None, 96, 6, 100)        1000      \n","_________________________________________________________________\n","batch_normalization_1 (Batch (None, 96, 6, 100)        400       \n","_________________________________________________________________\n","pool1_1 (MaxPooling2D)       (None, 48, 3, 100)        0         \n","_________________________________________________________________\n","conv2_1 (Conv2D)             (None, 48, 3, 100)        90100     \n","_________________________________________________________________\n","batch_normalization_2 (Batch (None, 48, 3, 100)        400       \n","_________________________________________________________________\n","pool2_1 (MaxPooling2D)       (None, 24, 1, 100)        0         \n","_________________________________________________________________\n","drop2_1 (Dropout)            (None, 24, 1, 100)        0         \n","_________________________________________________________________\n","flatten (Flatten)            (None, 2400)              0         \n","_________________________________________________________________\n","dense (Dense)                (None, 100)               240100    \n","_________________________________________________________________\n","output (Dense)               (None, 2)                 202       \n","=================================================================\n","Total params: 332,202\n","Trainable params: 331,802\n","Non-trainable params: 400\n","_________________________________________________________________\n","None\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/optimizers.py:793: The name tf.train.Optimizer is deprecated. Please use tf.compat.v1.train.Optimizer instead.\n","\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:3576: The name tf.log is deprecated. Please use tf.math.log instead.\n","\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"8H5kK3PfD9um","colab_type":"code","colab":{}},"source":["# callbacks log 를 저장시키는 방법 예시\n","\n","# class LossHistory(keras.callbacks.Callback):\n","#     def on_train_begin(self, logs={}):\n","#         self.losses = []\n","\n","#     def on_batch_end(self, batch, logs={}):\n","#         self.losses.append(logs.get('loss'))"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"ppVKJC_jCBZy","colab_type":"code","colab":{}},"source":["# callbacks log 를 저장시키는 방법 예시\n","from keras.callbacks import Callback\n","import pickle\n","\n","class Checkpoint_History(Callback):\n","\n","    def on_train_begin(self, logs={}):\n","        self.loss = []\n","        self.val_loss = []\n","        self.acc = []\n","        self.val_acc = []      \n","\n","    def on_batch_end(self, batch, logs={}):\n","        self.loss.append(logs.get('loss'))\n","        self.val_loss.append(logs.get('val_loss'))\n","        self.acc.append(logs.get('acc'))\n","        self.val_acc.append(logs.get('val_acc'))\n","    "],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"djB2_Vc4yNmT","colab_type":"code","colab":{}},"source":["# from keras.models import load_model\n","\n","# model = load_model('/content/gdrive/My Drive/Colab Notebooks/model/rapid_ascending_low %s.hdf5' % input_data_length)\n","# model = load_model('/content/gdrive/My Drive/Colab Notebooks/model/rapid_ascending_low %s_1.hdf5' % input_data_length)\n","# model = load_model('/content/gdrive/My Drive/Colab Notebooks/model/rapid_ascending_low %s_2.hdf5' % input_data_length)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"PdLXhF515Sq9","colab_type":"code","colab":{}},"source":["from keras.callbacks import ModelCheckpoint, EarlyStopping\n","filepath=\"/content/gdrive/My Drive/Colab Notebooks/model/rapid_ascending_low %s.hdf5\" % input_data_length\n","checkpoint = ModelCheckpoint(filepath, monitor='val_loss', verbose=1, save_best_only=True, mode='min')\n","checkpoint2 = Checkpoint_History()\n","checkpoint3 = EarlyStopping(monitor='val_loss', patience=15)\n","callbacks_list = [checkpoint, checkpoint2, checkpoint3]\n","\n","# keras.callbacks.Callback 로 부터 log 를 받아와 history log 를 작성할 수 있다."],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"Lplr9oG45TVN","colab_type":"code","outputId":"6f862681-a3f1-4db1-e56d-5aac83609889","executionInfo":{"status":"ok","timestamp":1580659229672,"user_tz":-540,"elapsed":980263,"user":{"displayName":"J 1","photoUrl":"","userId":"08178289703395036410"}},"colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["# we iterate 200 times over the entire training set\n","num_epochs = 100\n","history = model.fit_generator(train_flow, \n","                    steps_per_epoch=len(X_train) / batch_size, \n","                    epochs=num_epochs,  \n","                    verbose=2,  \n","                    callbacks=callbacks_list,\n","                    validation_data=val_flow,  \n","                    validation_steps=len(X_val) / batch_size,\n","                    shuffle=False)\n"],"execution_count":26,"outputs":[{"output_type":"stream","text":["WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/tensorflow_core/python/ops/math_grad.py:1424: where (from tensorflow.python.ops.array_ops) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","Use tf.where in 2.0, which has the same broadcast rule as np.where\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:1033: The name tf.assign_add is deprecated. Please use tf.compat.v1.assign_add instead.\n","\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:1020: The name tf.assign is deprecated. Please use tf.compat.v1.assign instead.\n","\n","Epoch 1/100\n"," - 52s - loss: 0.3503 - acc: 0.8927 - val_loss: 0.3184 - val_acc: 0.9023\n","\n","Epoch 00001: val_loss improved from inf to 0.31840, saving model to /content/gdrive/My Drive/Colab Notebooks/model/rapid_ascending_low 96.hdf5\n","Epoch 2/100\n"," - 44s - loss: 0.3362 - acc: 0.8943 - val_loss: 0.3171 - val_acc: 0.9023\n","\n","Epoch 00002: val_loss improved from 0.31840 to 0.31713, saving model to /content/gdrive/My Drive/Colab Notebooks/model/rapid_ascending_low 96.hdf5\n","Epoch 3/100\n"," - 44s - loss: 0.3357 - acc: 0.8943 - val_loss: 0.3163 - val_acc: 0.9023\n","\n","Epoch 00003: val_loss improved from 0.31713 to 0.31628, saving model to /content/gdrive/My Drive/Colab Notebooks/model/rapid_ascending_low 96.hdf5\n","Epoch 4/100\n"," - 44s - loss: 0.3351 - acc: 0.8943 - val_loss: 0.3147 - val_acc: 0.9023\n","\n","Epoch 00004: val_loss improved from 0.31628 to 0.31471, saving model to /content/gdrive/My Drive/Colab Notebooks/model/rapid_ascending_low 96.hdf5\n","Epoch 5/100\n"," - 44s - loss: 0.3345 - acc: 0.8943 - val_loss: 0.3224 - val_acc: 0.9023\n","\n","Epoch 00005: val_loss did not improve from 0.31471\n","Epoch 6/100\n"," - 44s - loss: 0.3346 - acc: 0.8943 - val_loss: 0.3151 - val_acc: 0.9023\n","\n","Epoch 00006: val_loss did not improve from 0.31471\n","Epoch 7/100\n"," - 44s - loss: 0.3344 - acc: 0.8943 - val_loss: 0.3136 - val_acc: 0.9023\n","\n","Epoch 00007: val_loss improved from 0.31471 to 0.31364, saving model to /content/gdrive/My Drive/Colab Notebooks/model/rapid_ascending_low 96.hdf5\n","Epoch 8/100\n"," - 44s - loss: 0.3342 - acc: 0.8943 - val_loss: 0.3142 - val_acc: 0.9023\n","\n","Epoch 00008: val_loss did not improve from 0.31364\n","Epoch 9/100\n"," - 44s - loss: 0.3340 - acc: 0.8943 - val_loss: 0.3176 - val_acc: 0.9023\n","\n","Epoch 00009: val_loss did not improve from 0.31364\n","Epoch 10/100\n"," - 44s - loss: 0.3338 - acc: 0.8943 - val_loss: 0.3159 - val_acc: 0.9023\n","\n","Epoch 00010: val_loss did not improve from 0.31364\n","Epoch 11/100\n"," - 44s - loss: 0.3338 - acc: 0.8943 - val_loss: 0.3161 - val_acc: 0.9023\n","\n","Epoch 00011: val_loss did not improve from 0.31364\n","Epoch 12/100\n"," - 44s - loss: 0.3338 - acc: 0.8943 - val_loss: 0.3157 - val_acc: 0.9023\n","\n","Epoch 00012: val_loss did not improve from 0.31364\n","Epoch 13/100\n"," - 44s - loss: 0.3336 - acc: 0.8943 - val_loss: 0.3176 - val_acc: 0.9023\n","\n","Epoch 00013: val_loss did not improve from 0.31364\n","Epoch 14/100\n"," - 44s - loss: 0.3336 - acc: 0.8943 - val_loss: 0.3372 - val_acc: 0.9023\n","\n","Epoch 00014: val_loss did not improve from 0.31364\n","Epoch 15/100\n"," - 44s - loss: 0.3333 - acc: 0.8943 - val_loss: 0.3146 - val_acc: 0.9023\n","\n","Epoch 00015: val_loss did not improve from 0.31364\n","Epoch 16/100\n"," - 44s - loss: 0.3337 - acc: 0.8943 - val_loss: 0.3162 - val_acc: 0.9023\n","\n","Epoch 00016: val_loss did not improve from 0.31364\n","Epoch 17/100\n"," - 44s - loss: 0.3335 - acc: 0.8943 - val_loss: 0.3147 - val_acc: 0.9023\n","\n","Epoch 00017: val_loss did not improve from 0.31364\n","Epoch 18/100\n"," - 44s - loss: 0.3334 - acc: 0.8943 - val_loss: 0.3231 - val_acc: 0.9023\n","\n","Epoch 00018: val_loss did not improve from 0.31364\n","Epoch 19/100\n"," - 44s - loss: 0.3332 - acc: 0.8943 - val_loss: 0.3179 - val_acc: 0.9023\n","\n","Epoch 00019: val_loss did not improve from 0.31364\n","Epoch 20/100\n"," - 44s - loss: 0.3334 - acc: 0.8943 - val_loss: 0.3176 - val_acc: 0.9023\n","\n","Epoch 00020: val_loss did not improve from 0.31364\n","Epoch 21/100\n"," - 44s - loss: 0.3331 - acc: 0.8943 - val_loss: 0.3137 - val_acc: 0.9023\n","\n","Epoch 00021: val_loss did not improve from 0.31364\n","Epoch 22/100\n"," - 44s - loss: 0.3334 - acc: 0.8943 - val_loss: 0.3140 - val_acc: 0.9023\n","\n","Epoch 00022: val_loss did not improve from 0.31364\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"iCB1Kyfb5UJG","colab_type":"code","outputId":"ef921f3f-fd78-44e1-868f-6624749d3fa7","executionInfo":{"status":"ok","timestamp":1580176476076,"user_tz":-540,"elapsed":1302,"user":{"displayName":"J 1","photoUrl":"","userId":"08178289703395036410"}},"colab":{"base_uri":"https://localhost:8080/","height":608}},"source":["%matplotlib inline\n","import pickle\n","\n","train_loss=checkpoint2.loss\n","val_loss=checkpoint2.val_loss\n","train_acc=checkpoint2.acc\n","val_acc=checkpoint2.val_acc\n","\n","\n","epochs = range(len(train_acc))\n","\n","plt.plot(epochs,train_loss,'r', label='train_loss')\n","plt.plot(epochs,val_loss,'b', label='val_loss')\n","plt.title('train_loss vs val_loss')\n","plt.xlabel('epoch')\n","plt.ylabel('loss')\n","plt.legend()\n","plt.figure()\n","\n","plt.plot(epochs,train_acc,'r', label='train_acc')\n","plt.plot(epochs,val_acc,'b', label='val_acc')\n","plt.title('train_acc vs val_acc')\n","plt.xlabel('epoch')\n","plt.ylabel('acc')\n","plt.legend()\n","plt.figure()"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<Figure size 432x288 with 0 Axes>"]},"metadata":{"tags":[]},"execution_count":30},{"output_type":"display_data","data":{"image/png":"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\nK3C5u9d5LXN3v9Pdy929vF27yB/G1e3dd+H666HQRCIi8g1VzERQDjxsZgsJ7s16u5mdWMR4RCSh\nVqxYwe23317vx/Xt25cVK1bUXTHDmWeeyfjxpTM2pmiJwN27uHtnd+8MjAfOd/fHixWPiCRXtkSw\nYcOGiNo1Jk2axE477RRXWI0mzuGjY4FjgbZmVgn8muBm2bj7mLi2KyJN3CWXwMyZDdtmr15w661Z\nV48YMYL333+fXr16UVZWRsuWLWndujVz585l/vz5nHjiiSxevJi1a9cyfPhwhg0bBtRc+2z16tX0\n6dOHo446iv/85z906NCBf/7zn2yzzTZ1hvbss8/yy1/+kg0bNnDIIYcwevRoWrRowYgRI5g4cSLN\nmzfnuOOO449//COPPvoov/nNb2jWrBk77rgjL730UoO8PLElAncfXI+6Z8YVh4hIXW688UZmz57N\nzJkzeeGFFzj++OOZPXv25rH499xzDzvvvDNfffUVhxxyCCeffDJt2rRJa+O9995j7Nix3HXXXQwc\nOJAJEyZw+umn59zu2rVrOfPMM3n22Wfp1q0bZ5xxBqNHj2bo0KE89thjzJ07FzPbfPpp5MiRTJ48\nmQ4dOhR0Siqb5P2yWPdfECltOb65N5ZDDz007QdZt912G4899hgAixcv5r333quVCLp06UKvXr0A\nOPjgg1m4cGGd25k3bx5dunShW7duAPzkJz9h1KhRXHjhhbRs2ZKzzz6bfv360a9fPwCOPPJIzjzz\nTAYOHMhJJ53UEE8VSNK1hjRGWUTytN12222ef+GFF3jmmWd49dVXmTVrFgceeGDkD7ZatGixeb5Z\ns2Z19i/k0rx5c15//XVOOeUUnnjiCXr3Dn6bO2bMGH7729+yePFiDj74YJYtW1bwNtK21yCtiIg0\nYa1atWLVqlWR67744gtat27Ntttuy9y5c5k6dWqDbbd79+4sXLiQiooK9t57bx544AGOOeYYVq9e\nzZo1a+jbty9HHnkke+21FwDvv/8+hx12GIcddhhPPfUUixcvrnVkUgglAhFJvDZt2nDkkUey//77\ns80227DrrrtuXte7d2/GjBnDvvvuS/fu3Tn88MMbbLstW7bk3nvvZcCAAZs7i3/2s5/x+eef079/\nf9auXYu7c8sttwBw2WWX8d577+HufP/73+eAAw5okDia3D2Ly8vLvaA7lI0fDwMGwNtvw/5Zr4En\nIkXw7rvvsu+++xY7jG+MqNfTzKa7e3lU/eT0EYiISCSdGhIRickFF1zAK6+8klY2fPhwzjrrrCJF\nFC15iaCJnQoTkaZr1KhRxQ4hL8k5NaThoyIikZKTCEREJJISgYhIwikRiIgknBKBiEgBtt9++6zr\nFi5cyP5N6PdKyUsEGjUkIpImOcNHNWpIpEkowu0IgOCeBHvssQcXXHABANdddx3Nmzfn+eefZ/ny\n5axfv57f/va39O/fv17bXrt2Leeddx7Tpk2jefPm3HLLLXz3u99lzpw5nHXWWaxbt45NmzYxYcIE\ndt99dwYOHEhlZSUbN27kmmuuYdCgQYU+7bwlJxGIiOQwaNAgLrnkks2JYNy4cUyePJmLL76YHXbY\ngaVLl3L44YdzwgknYPX4Yjlq1CjMjLfffpu5c+dy3HHHMX/+fMaMGcPw4cMZMmQI69atY+PGjUya\nNIndd9+dJ598EggueNcYlAhEpKQU63YEBx54IEuWLOHjjz+mqqqK1q1bs9tuu/Hzn/+cl156ia22\n2oqPPvqIzz77jN122y3vdqdMmcJFF10EwD777EOnTp2YP38+RxxxBDfccAOVlZWcdNJJdO3alZ49\ne3LppZdy+eWX069fP44++ui4nm6a5PURiIhkMWDAAMaPH88jjzzCoEGDeOihh6iqqmL69OnMnDmT\nXXfdNfJeBIU47bTTmDhxIttssw19+/blueeeo1u3bsyYMYOePXty9dVXM3LkyAbZVl10RCAiEho0\naBDnnnsuS5cu5cUXX2TcuHHssssulJWV8fzzz7No0aJ6t3n00Ufz0EMP8b3vfY/58+fz4Ycf0r17\ndxYsWMBee+3FxRdfzIcffshbb73FPvvsw84778zpp5/OTjvtxN133x3Ds6wtzpvX3wP0A5a4e61x\nVGY2BLgcMGAVcJ67z4orHhGRuuy3336sWrWKDh060L59e4YMGcKPfvQjevbsSXl5Ofvss0+92zz/\n/PM577zz6NmzJ82bN+e+++6jRYsWjBs3jgceeICysjJ22203rrzySt544w0uu+wyttpqK8rKyhg9\nenQMz7K22O5HYGbfAVYD92dJBP8FvOvuy82sD3Cdux9WV7sF34/gH/+Ak08OhiM00M0cRKRh6H4E\nDau+9yOI7YjA3V8ys8451v8nZXEq0DGuWAANHxURyaJU+gjOBp7KttLMhgHDAPbcc8/GiklEJKe3\n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\n/wf1HBQoUI6/AgAAAABJRU5ErkJggg==\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"image/png":"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\nNzOz6mwXF4u7xbXX1joCM7OuOe64TJrNTyLo16/WEZiZdU2vXpk0m59EkNEbaGbWY/bO5rHT+UkE\nO3TDS92xiksqBxxQXVvnd/HyyPTpXVu+q8aNg112ScYHDaptLO258sqeW9ff/m31dS+8MLs4OuOw\nw7q2fGFbqEdf/WrpdP/+2a7voIOya/v738+m3YjYroaJEydGp9x8c0Tya4KW4d57k3nl5bvsEvHq\nq63LX3qpdVn5UNDW/FGjkr9Ll0b07p2Mb9yYLHPuue233dRUup4HH9x2PJ0ZthVH8euMiHjnndJ5\nK1cm5b/73bbbKdQtN2hQ67q/+EXlNi67rO33olhx2fve1/3vW3uf+7a2kfa2m5NOqm5dY8Yk5Tfc\nkEyfcUbE3/1dMj5zZvfE3tbw9NOtywrbevl6zjknGT/iiNbzN20qnX7rrWSZyZNbyqRt/5+199rK\nl73xxojvfa973peCRx8tLX/Peypvix15P4vb7wSgIaLy92p+jggq2XPP5O/xx5eWH3ccbN7cun5H\n9yQOP7x12TvvJH+llgs/1Z622nnn0uk99tj2Mh/4QPvz9923ddnEicnfD36wurikytMjR2572QED\nKpcfW+F+he99b+W648a1fJbV+vCH25/f1rqKVYqxO4wbVzpd/tp2371lvPja15Qpyd/990/+TpqU\nDFDd66nkb/6mddnRR8N++5WWDR7cul5bFzYL21f5/H33bb0tFY7CjzqqpezjH2873s7YZx848MC2\n5x9ySMfbLP/f/MhHSqdPPLHycoU4hgzp+Dq7oq0MUa9Dp48IZs9OMurll0esWRPx3HMt8zZsiFi0\nKNlLX7o02QtZubIlC69eHfHCC0nd115rKb///qStBQsiHnssYvnyljaXL494882kvRUrWpbZe+/k\n74oVyXqXLm1Z5vOfb6l3/fXJUck11yTTH/hAUqd8z+C555I95QcfTI4Ynnsu2ZtYsiTiiSciXnkl\nqd+nT8uyxUc7mzcnr33GjGT60kuTPfxFi5J5hT2xb3wj4sUXI15+OXkPyg0e3NLmiy+2lB9/fFK2\n++4RF1xQunezeHHbn9fGjcl7/sorEb//fcTttyflTz4ZsXBhshe3cmUyXvDggxF/+EPEvHkRy5aV\nxhGRtFWI/e23I556KuKee5LPrhDTzJkR990XsW5d8lpffDH5rFavjmhuLj3yePvtiDlzIn7844j1\n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\nSUVORK5CYII=\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 0 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"id":"VejGfotu5U5u","colab_type":"code","outputId":"434fbd42-2ceb-495c-ddb5-772bba9efd03","executionInfo":{"status":"error","timestamp":1580176235200,"user_tz":-540,"elapsed":2082,"user":{"displayName":"J 1","photoUrl":"","userId":"08178289703395036410"}},"colab":{"base_uri":"https://localhost:8080/","height":512}},"source":["from keras.models import load_model\n","\n","model = load_model('/content/gdrive/My Drive/Colab Notebooks/model/backup/rapid_ascending_low %s.h5' % input_data_length)\n","# model = load_model('/content/gdrive/My Drive/Colab Notebooks/model/rapid_ascending %s.hdf5' % input_data_length)\n","loss = model.evaluate_generator(test_flow, steps=len(X_test) / batch_size) \n","print(\"Test Loss \" + str(loss[0]))\n","print(\"Test Acc: \" + str(loss[1]))"],"execution_count":0,"outputs":[{"output_type":"error","ename":"OSError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mOSError\u001b[0m                                   Traceback (most recent call last)","\u001b[0;32m<ipython-input-29-7025782d0870>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mkeras\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmodels\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mload_model\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0mmodel\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mload_model\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'/content/gdrive/My Drive/Colab Notebooks/model/backup/rapid_ascending_low %s.h5'\u001b[0m \u001b[0;34m%\u001b[0m \u001b[0minput_data_length\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m \u001b[0;31m# model = load_model('/content/gdrive/My Drive/Colab Notebooks/model/rapid_ascending %s.hdf5' % input_data_length)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mloss\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mevaluate_generator\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtest_flow\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msteps\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_test\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m/\u001b[0m \u001b[0mbatch_size\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/keras/engine/saving.py\u001b[0m in \u001b[0;36mload_wrapper\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    456\u001b[0m                 \u001b[0mos\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mremove\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtmp_filepath\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    457\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mres\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 458\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mload_function\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    459\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    460\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mload_wrapper\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/keras/engine/saving.py\u001b[0m in \u001b[0;36mload_model\u001b[0;34m(filepath, custom_objects, compile)\u001b[0m\n\u001b[1;32m    547\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    548\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mH5Dict\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mis_supported_type\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 549\u001b[0;31m         \u001b[0;32mwith\u001b[0m \u001b[0mH5Dict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmode\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'r'\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mh5dict\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    550\u001b[0m             \u001b[0mmodel\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_deserialize_model\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mh5dict\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcustom_objects\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcompile\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    551\u001b[0m     \u001b[0;32melif\u001b[0m \u001b[0mhasattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'write'\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mcallable\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwrite\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/keras/utils/io_utils.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, path, mode)\u001b[0m\n\u001b[1;32m    189\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_is_file\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    190\u001b[0m         \u001b[0;32melif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpath\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msix\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstring_types\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0m_is_path_instance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpath\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 191\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mh5py\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mFile\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpath\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmode\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mmode\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    192\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_is_file\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    193\u001b[0m         \u001b[0;32melif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpath\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdict\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/h5py/_hl/files.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, name, mode, driver, libver, userblock_size, swmr, **kwds)\u001b[0m\n\u001b[1;32m    310\u001b[0m             \u001b[0;32mwith\u001b[0m \u001b[0mphil\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    311\u001b[0m                 \u001b[0mfapl\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmake_fapl\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdriver\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlibver\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 312\u001b[0;31m                 \u001b[0mfid\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmake_fid\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmode\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0muserblock_size\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfapl\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mswmr\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mswmr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    313\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    314\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0mswmr_support\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/h5py/_hl/files.py\u001b[0m in \u001b[0;36mmake_fid\u001b[0;34m(name, mode, userblock_size, fapl, fcpl, swmr)\u001b[0m\n\u001b[1;32m    140\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mswmr\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mswmr_support\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    141\u001b[0m             \u001b[0mflags\u001b[0m \u001b[0;34m|=\u001b[0m \u001b[0mh5f\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mACC_SWMR_READ\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 142\u001b[0;31m         \u001b[0mfid\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mh5f\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mflags\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfapl\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mfapl\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    143\u001b[0m     \u001b[0;32melif\u001b[0m \u001b[0mmode\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m'r+'\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    144\u001b[0m         \u001b[0mfid\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mh5f\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mh5f\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mACC_RDWR\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfapl\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mfapl\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32mh5py/_objects.pyx\u001b[0m in \u001b[0;36mh5py._objects.with_phil.wrapper\u001b[0;34m()\u001b[0m\n","\u001b[0;32mh5py/_objects.pyx\u001b[0m in \u001b[0;36mh5py._objects.with_phil.wrapper\u001b[0;34m()\u001b[0m\n","\u001b[0;32mh5py/h5f.pyx\u001b[0m in \u001b[0;36mh5py.h5f.open\u001b[0;34m()\u001b[0m\n","\u001b[0;31mOSError\u001b[0m: Unable to open file (unable to open file: name = '/content/gdrive/My Drive/Colab Notebooks/model/backup/rapid_ascending_low 54.h5', errno = 2, error message = 'No such file or directory', flags = 0, o_flags = 0)"]}]},{"cell_type":"code","metadata":{"id":"wcBEqp7i5Wal","colab_type":"code","colab":{}},"source":["# loss = model.evaluate(X_test, Y_test) \n","# print(\"Test Loss \" + str(loss[0]))\n","# print(\"Test Acc: \" + str(loss[1]))"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"X1YiMAJL5XBT","colab_type":"code","colab":{}},"source":["loss = model.evaluate(X_val, Y_val) \n","print(X_val.shape)\n","print(Y_val.shape)\n","\n","print(\"Val Loss \" + str(loss[0]))\n","print(\"Val Acc: \" + str(loss[1]))"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"rrxiykBP5Xqv","colab_type":"code","colab":{}},"source":["def plot_confusion_matrix(Y_test, Y_pred, classes,\n","                          normalize=False,\n","                          title='Unnormalized confusion matrix',\n","                          cmap=plt.cm.Blues):\n","    cm = confusion_matrix(Y_test, Y_pred)\n","    \n","    if normalize:\n","        cm = np.round(cm.astype('float') / cm.sum(axis=1)[:, np.newaxis], 2)\n","        \n","    np.set_printoptions(precision=2)\n","        \n","    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n","    plt.title(title)\n","    plt.colorbar()\n","    tick_marks = np.arange(len(classes))\n","    plt.xticks(tick_marks, classes, rotation=45)\n","    plt.yticks(tick_marks, classes)\n","\n","    thresh = cm.min() + (cm.max() - cm.min()) / 2.\n","    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n","        plt.text(j, i, cm[i, j],\n","                 horizontalalignment=\"center\",\n","                 color=\"white\" if cm[i, j] > thresh else \"red\")\n","\n","    plt.tight_layout()\n","    plt.ylabel('True expression')\n","    plt.xlabel('Predicted expression')\n","    plt.show()"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"EEye-SqtA0bV","colab_type":"code","outputId":"993ed2f4-5f9a-4252-cbc1-2f05600f8641","executionInfo":{"status":"ok","timestamp":1580176487271,"user_tz":-540,"elapsed":3237,"user":{"displayName":"J 1","photoUrl":"","userId":"08178289703395036410"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["#     Prediction    #\n","Y_pred_ = model.predict(X_test, verbose=1)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["45076/45076 [==============================] - 3s 62us/step\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"nPbtlfXEAxXK","colab_type":"code","outputId":"86891b10-7f96-4011-d6d6-8980052a31c5","executionInfo":{"status":"ok","timestamp":1580176505280,"user_tz":-540,"elapsed":2127,"user":{"displayName":"J 1","photoUrl":"","userId":"08178289703395036410"}},"colab":{"base_uri":"https://localhost:8080/","height":630}},"source":["# Y_pred = Y_pred_[:,[-1]]\n","# print(Y_pred.shape)\n","# print(Y_test.shape)\n","Y_pred = np.argmax(Y_pred_, axis=1)\n","t_te = np.argmax(Y_test, axis=1)\n","\n","#     Manual processing     #\n","Y_pred_one = Y_pred_[:, [-1]]\n","max_value = np.max(Y_pred_one)\n","print(max_value)\n","\n","limit_line = 0.96\n","Y_pred_one = np.where(Y_pred_one > max_value * limit_line, 1, 0)\n","\n","# print(Y_pred_one)\n","Y_pred_one = Y_pred_one.reshape(-1,)\n","# print(Y_pred_1)\n","# print(Y_pred.shape)\n","# print(t_te.shape)\n","\n","# fail = 0\n","# fail2 = 0\n","# for i in range(len(Y_pred)):\n","#   if Y_pred_1[i] != t_te[i]:\n","#     fail += 1\n","\n","#   if Y_pred[i] != t_te[i]:\n","#     fail2 += 1\n","\n","# print(1 - fail / len(Y_pred))\n","# print(1 - fail2 / len(Y_pred))\n","\n","# print(np.sum(Y_pred), np.sum(t_te))\n","# print('Y_pred / Y_test :', np.sum(Y_pred) / np.sum(t_te))\n","\n","plt.figure(figsize=(100,10))\n","plt.subplot(211)\n","plt.plot(Y_test, 'purple', label='test')\n","\n","plt.subplot(212)\n","plt.plot(Y_pred_one, 'y', label='pred')\n","plt.show()\n","# plt.savefig('/content/gdrive/My Drive/Colab Notebooks/model/rapid_ascending %s.png' % input_data_length)\n","# plt.close()"],"execution_count":0,"outputs":[{"output_type":"stream","text":["0.013624883\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"iVBORw0KGgoAAAANSUhEUgAAFfEAAAI/CAYAAAB5F1dtAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4xLjIsIGh0\ndHA6Ly9tYXRwbG90bGliLm9yZy8li6FKAAAgAElEQVR4nOzdebRnWV0Y+u+poavnuapHeogBtAVB\nmRJRJjXiiNGYiEFBZch7Sd56b+WtxLyV6SUxL2/lvSRmPSODMhMI0RBMJDEooNDaQjMFkKmx6Xko\nuummeqqurjrvj6p7+9a9v+HMZ+9zPp+1WLfo+tU5e3/3d++z9z7nd25RlmUAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAO+0auwAAAAAAAAAAAAAAAAAAAAAAAAAAAACQKi/xBQAAAAAAAAAAAAAAAAAAAAAA\nAAAAgCW8xBcAAAAAAAAAAAAAAAAAAAAAAAAAAACW8BJfAAAAAAAAAAAAAAAAAAAAAAAAAAAAWMJL\nfAEAAAAAAAAAAAAAAAAAAAAAAAAAAGAJL/EFAAAAAAAAAAAAAAAAAAAAAAAAAACAJfaMdeILL7yw\nvOqqq8Y6PQAAAAAAAAAAAAAAAAAAAAAAAAAAAERExMc//vGvlWW5f9HfjfYS36uuuiquv/76sU4P\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAERFRFMVNy/5u15AFAQAAAAAAAAAAAAAAAAAAAAAAAAAAgJx4\niS8AAAAAAAAAAAAAAAAAAAAAAAAAAAAs4SW+AAAAAAAAAAAAAAAAAAAAAAAAAAAAsISX+AIAAAAA\nAAAAAAAAAAAAAAAAAAAAAMASXuILAAAAAAAAAAAAAAAAAAAAAAAAAAAAS6x9iW9RFG8siuLuoig+\nu+Tvi6Io/k1RFDcURfE/iqL4ju6LCQAAAAAAAAAAAAAAAAAAAAAAAAAAAMNb+xLfiHhzRLx4xd//\nQEQ88cT/Xh0Rv9q+WAAAAAAAAAAAAAAAAAAAAAAAAAAAADC+tS/xLcvyDyLi3hUfeUlEvLU87rqI\nOLcoiku6KiAAAAAAAAAAAAAAAAAAAAAAAAAAAACMZU8Hx7gsIm7Z8v9vPfHf7ujg2MAEHHvsWHzx\nt76447/f+IEb48oXXBm7dq19n/jj/+ZDN8aVz70ydu2t/m+auO+m++LIw0di/zfvX/j3hw8djoOf\nOxiX/7nLKx3vyENH4o5P3hFXPPeKpZ+550v3xK69u+K8q89rVOau3Ph7N8ZVL7oqiqJY+bmH7nko\n7rvxvrj0mZf2Wp6h43Lo9kPx0D0PxUVPvWiQ89U1VB9YpCzL+OoHvxpXv+jq3s5x6PZD8fC9D8eB\npxzo7RxdqzOWlWUZX/3AV+Pq7+k+hg9//eG458v3xOXPrjYu0c4Ddz8Qh249FJd8x/rfXXH/LffH\n4W8cjgPfujOvHzz4YHzjlm9UOs4yt/zhLXHR0y6KU844pfExhnbwCwdj76l749yrzq30+bs+c1ec\nfsHpcdalZy39zE0fvikue/ZlsWdfF0uc7t3xyTvirMvOijMPnFnp88eOHYubPnRTr2PuIjdfe3Nc\n/PSLW+XT7dffHudefW6cfsHpSz9Tdy61yi1/eEtc9G0XxSlnLi7zunldW4fuOBQP3v1gXPy0ixsf\n45H7H4mvffFra8fwm6+9OS759kti7+l7G58rIuKBux6IQ3ccikuevnjsGeKan5KbPnJTXPqMS2Pv\naSfHdaj5bkpuve7WuPBbLoxTzzm10udv+9htcd43nRenn7+8v293/y33x6MPPBr7v6WfPjmkdXO7\nu//k7th31r445wnnrD3WrdfdGvu/dX/sO2vfys999fe/Gk/4zifE7r27G5U5BTd+8Ma48nlXxq7d\nw6xp1l0n2miyr7HOwS8cjL2n7Y1zr1w/T6rSZ488fCTu+PgdccV3Ld+PiDi+nrj3hnvjsmddVrvM\nqzRZw977leO/T+78bzq/9vmm0Ecils/x7/3KvVEeK+OCJ14wUskiHrr3ofj6V77eea50Ydm4vGit\nUKevVXHnp++MMw6cEWddsnzNssixI8fipmtviqtf0GzeVWXu3dSd/+POOGP/6jrdc8M9URRFo/66\nyM0fuTkuecYlO+ZlbdWZ17UZg5a58UM3xpXf/fi179jRY3HT75+83nvg7gfi0G2H4pJvH/Z3ZN5/\n6/1x+L7Dne3FzW0tMbTHDj8Wt/3xbXHl865s9O/bzl2ajnXL3P3Zu2PfufvinMtXz5dXjXX3fuXe\nKMsyLviz7a+NbdbcVedSbduwrnXr/zoOfv5g7D292bXzxg/cGFc+f7g1QJfuu+m+OPLQkWTWsI8+\n+Gjc+ak7V95v3FBnf7Fqf2yqyr2fWz96a1z4pAvj1HOr7Ulsd+MHboyrXrj6/uayOcGidcttH7st\nzv+z58dp553WqDwcd+OHbowrv+vK2LUnn/7f9VphwxTmSfffcn8cPnQ4DlzT/X3cPtc2dfS1Jmmq\nzr3lPvZdu94v6uoeB93K8RmNtsa6DzuENnPvIw8fids/fntc+V311yt9XT/XabomrPps3FDq3p/r\n06JnHKve1+n7vvwj9z8SX/vC1+Ly5yy/p952bXPTh2+Ky551Wew5dfVzJ036Wpv7F108x9GHVO7J\nPPrgo3HXp++KJ3znE0YtRxV9lLXKXn5XFu2fP/S1h+L+m+9f+exb3blq1WfA+lhnVb23eezosbjp\nD26Kq1+4/txtrrFVVXlGfZ1br7s19l+zP/advfqZhSlqMz9cNhY2WedW2d+qq8p1/IG7HogH7nyg\n1bNvTd356TvjzIvPjDMvOvmZyoOfPxh7z9gb517RbH55+BuH4+CfdPNsYl9Seea763s/KWj6LHHX\nz+vULU+V+3jrnlU9dMehePDgg3Hxty3vz30863THJ+6Isy6v/nz0VuvGoDrX+1X70X3do6u6vrzn\ny/dEsbuI8/9Md88hdKnusyuLnnnY6o5P3RFnXXLWjvG9C31+Hydnq+LS933AFFV9Ln8oy+493PrR\nW+PCJ++8nixbO7a5l1Ll+zgREff+6b1RHu3m+cQunle4+3N3x76z1z+Hfd9X74sjj/S3LxXRz7y5\nq72Vdc/GHXvsWNz04Wpr2A2r5gxDrHM3pPg9sVTua1ax7HsyW62bb1UdU9fNt5p876Sqm/7gprjs\nOfXz5PaP3x7nXnlunH5hP225rB/V2Vdaps4x2nxf/p4v3RO7T9ld+fufG44eORq3/OEtcdXzr1r7\n2WOPHYubPtL8OeouVJlj9v0dmCrruS50+bxlLg7dfige/Frz2A553RvLumfYq+T/uutjX8/j3H/r\n/XH4/sXf3W/jvq/eF0cfPRoXPKlZX3ns8GNx20dviyu/e2feLHtGY939iar3L5Z9d7/qHGbdmHjf\nV++Lxw4/Fhc++cKVx0lJm72rLsb/RfeWU3pGYJUxn6G++7N3x2nnn7Z2HZtiWdo8O9HnvLmpRf3+\nyMNH4vbrb184zjVVZU429N5g13PVZXtB7NRnW3d1n+TqF13d+HsPwLQUZVmu/1BRXBUR/6Usy6cs\n+Lv/EhH/vCzLj5z4/78XEX+nLMvrF3z21RHx6oiIK6644hk33XRTq8IDeTjy0JH4Z2f8s7GLAQAA\nAAAAAAAAAAAAAAAAAAAAAACVveaTr4mLnz78L0kFxlEUxcfLsnzmor/r4teP3RYRW3+t3+Un/tsO\nZVm+PiJeHxHxzGc+c/3bg4FJ2HPqnvhrn/5rJ/239//t98dXfucrcfYTzo6f/i8/Xek4H/2Vj8Yn\nXv+J2Hf2vvi5D/9cH0Xd9NqnvTYiYke5t//9X3nvX4nzrjqv8vF++HU/vPS3uq875xDe+wvvjTuu\nvyMOPOVA/Pg7fnzlZzfK+3Mf/rnYd/a+3so0dFxSaIdlrn/t9XH9r14fp5x1Svz8R35+8PO/8yXv\njPu/en9c/T1Xx/f/y+/v5Rwpx3+R3/s/fi++/NtfjrMuOyv+6vv+6trP/+ZLfzMO/snBuPTZl8aP\nvuFHOy3LRuxe/qGXx2nnndbpsdlpI96v+tirYvcpq3/r8aq83vi7V370lY1+M/Bdn7kr3vOy9yw9\nfqrq9vV1n7/hv90Qv/t3fjeK3UW85hOv6aaQHTp65Gi84ZlviIjqdX7HD74jDt12KJ74Q0+M7/ln\n39Nn8Tbd8ck74r2veG9ENM+nRx98NN74nW9ce4y6c6llDn7+YPzmT/3myvP1fW3p4vgbx/iZ3/2Z\nOGP/GQs/c/Mf3hzv+5/e1/pcW8/36k+8euFvgXz3T7477v3SvfGE5z4hfujf/lCrc6XuK7/7lXj/\n33p/FLuKeM0nTx4/Nue7H/m52HdWf/PdVNx/6/3xzh96Z0RUy7FH7nsk3vz8N1f+/Ibc5nurvOdn\n3xN3ffquuPjbL44fe/OP7fj7qnW994Z7490/8e61n/3MOz8T1/7za2PPqXvilX/8yhYlH8+1/+La\n+MzbPxOnnX9avPyDL+/9fFWuE0196B99KL7wni/EGRedET/z33+ms+NWzZsH7nog3v4X3r72s699\n+msjyogX/5sXr/xt9pvriQ++PE47v5v1xEf/7UfjE6/7RO01bNNx4tNv/3T80b/4o9hz2p545XV5\n9pGIiDs/fWf8p5/9TxGxMwYpjKEbZXjF778iud8WumjNvWyt0HUsmx7vjc99Yzz6wKPxrL/+rHjG\nq59R698++sCj8cbnrp97N1WlTl3G8eaP3Bzv++vviygi/tqnuq3PRjl//tqfj1POPKXSZ7uK6R/9\nqz+KT7/503HquafGK37/FRER8ba/8LZ48K4H45v/4jfHC/7RC04676uuf1Xs3rt6n6FLXdf3XX/x\nXXHfn94XV73gqnjxL7+4k2PyuDc86w1x9NGj8bx/+Ly45sevqfVvf/cXfzdu+K83xNmXnx0//dvV\n7slsN8bYuW6s66pMbdfcVfdmX//M18exI8fihf/0hfHkH3lys8I2KNdrPvmaKHYVnRyrbnw+9H9+\nKL7wH7ufNw8lhfnXVhvl+ZFf+5G47FmXrfzsO37gHXHo9kPxxB9+YnzPL63eXxx7/+yhex6Kt77o\nrY3L8Nv/82/HLdfeEhc86YL4yf/wk2vLsfXe5sa6Zev954e//nC85QVvaVwejvvjX/7j+OQbPxn7\nztkXP/cH/d7b71Jf/eFdL3lX3PfV+3q9z9q3vmJT9b5C3/pckzT1Gz/1G/G1z38tLnvOZfEjr/+R\nlZ/to3263C/q8h4H3UptvjOEt3//2+OBOx+IJ7/kyfHCf/zCsYvTmbZ71q/79tdFeayM7//l74+r\nX3B1rX87Vh41Oe97f/69ccfH74gDTz0QP/721c/GDaHu/bm+bT7j+Pofjsufc3l85P/+SHz23302\nTrvgtHj5B1bf1xlqXfGy//6yOPOiMzsvw1d+5yvx/r/9/rXPnTRZ537qLZ+K6/7ldY3uX3TxHEcf\nUrpvudHuL3nLS+KSp18yalnW2SjrT7zzJ2L/Nfs7PeYQ+bHoXJvPvv3xK2PPqYuffatTxi+970vx\ngb/7gdi1Z1e8+uOvXvnZd/3Yu+K+G++Lq154Vbz4X7ffj77+V6+P619b7fncN7/gzfHI1x+Jp/7M\nU+O5//tzV3528xr7r74/rn5RvWtsVRv3hH/wV38wrvjOK2r/+/tvuT/e+cPpXI+G9vYfeHs8cPsD\n8aQfeVK86J++qPK/+9SbPhXX/evrYu/pe+MX/ugXNv97k3Xuxv7W+U86P/7yf/jL9SqwRNVr1phr\ngmXnblumjX//0t9+aZxz+TktStifVJ75ntqa8Au/9YX40N//UOzauyteff3q68h2VWNx6I5D8Y4X\nv6PSZ6s+2/zBf/jB+OJ/+mKcefGZ8bLfeVnjMq77+w/8gw/El977pbXnqePoo0fjDc+q93z0Vpv3\nsj71miiKnfey/v2P//v4+le+Hlc+/8r4gX/zA0uPc90vXxefeuOnTrovv9Ubnv2GOHr4aDzv7z8v\nrvlL9e6zLvOfX/Of47brbosLv+XC+Evv+ksrP5t6X/v17/z1OPLgkXjW33xWPOOV659deev3vTUe\nuvuh+Jaf+JZ4/j94/kl/V5ZlvO7pr4uIfur7mz/9m3Hwcwfj0mddGj/6a91+Hydnq+KSev71ocpz\n+UNZdu/hwYMPxtu+920RsXwutHWd2/Y5sap50GW+rPu+Qp1jDFnudedYds2qa2O/aPt6ok3Zlj0b\n9+bnvzkeue+ReNornhZ//n/782uP94G/94H40n/+Upx5yZnxsv+2c84wxDo3IuLL//XL8Xu/+HuV\n9giGcvgbh+NN3/2miEh/XL3xgzfG7/yvv7PwezJbrZtvVR1TV823Hrn/kXjz894cEd3H7bPv/mx8\n5Jc+ErtP3R2v+uNXVf53Rx46Er/+53+9lzJFbOlHl54ZL/uvJ/ejt37vW+Ohgw/FNT95TTzv7z2v\n0fHf8qK3xMP3PBxP+emnxHf9ne9a+dk2Y2TTf/trz/m1eOyRx+K5v/jceOpLn7rys2/67jfF4W8c\nju941XfEs//Gs2uXsQvrvvN97f9zbXzmbf1+B2aoOduc54aN95lO7L02uYeai1Xztg//Xx+Oz73r\ncyvvFa7bDx3iOwJd53Tb477+Ga+PY48dixf90oviST/8pLXH/vgbPh4f+/8+FqeceUr8/LU770/U\necfOouPX2bN+z8vfE3d96q64+OkXx4+9pfl3JVPx2OHH4tee/WsRUb/Mv/9Pfj8+/xufj9MPnB4/\n+/6fbXT+Rc9xpPaMwCop3j8YQ9fvxFimz3lzG4vq87rveF2UR8v4vv/3++KbvvebOjnPf/yr/zHu\n/uzdcckzL4mX/PpLVn/mGZfES964+DNdetPz3hSH7z8cT/+Fp8ef+1/+XKtjPXj3g/G271u8F8RO\n676731Td90Otcv4Tz++oVEDuuniJ729FxN8oiuJdEfGciLi/LMs7OjguMBHFriIu+raLTvpvp11w\n/GGjU844ZcffLXPmJccfvt69b3flf9PWuvNc+OQL48InX7j2OMXuIsqjZZz3Z85be8yh6rbIxstX\nTjm7ersceMqBQV7aMnRcxmyHZcboA1udcsbxG7mnXXBa7+dPMf6LnH7h6RERsff0vZXKfMrZx2N4\n6rmn9lbHA996YLNc9O+ib7to7Ut8t3526d899aKlX2RY5cgjR47/ocin32xVt8zLPn/w8wcjImLX\nnl1JxuHokaObf65avr2n742I4+PMUHU6/I3Dx/+wq3k+HT50ePPPVY5RdS61zLGjxyqfL4dr1/5r\n9sdZl5y18O8euPOBiDg+r+yqLhc/7eKFL/HZeGHtqef1d71KxT1fviciVo8fB55yIE49J62XFPbh\nlLMef2ivSrs/dM9DtT6/3RRya+OFP6ees7qvrKvr1n646rM3/cFNERGx+5Rx1gNd2PhS9Z5T9wxS\nhzrXibpO319vLVDXumOedtvjX+Ja9dldu3fFsceOVdqPiIjY/637O3tw/ayLj1/TmrZ33X9z9mVn\nR0TefSTi+AMyEbFyjp9C/Q485UBnL3zuysaa+7TzHt+3WLdW6DqWdY+3e9/uiAeO7/nU/beb8/cG\n562jyrG7OP+h2w9FxOK95K4ceMqByr+MrKsyLLr2ba739u9c7130bRcN+hLfreftwsYXQYbYP5yj\nXXt3xdFHj8Y5Tzindnw37snsPaP93GXIsbPqWNe2TF2tudftze7asyuOHTnWqA3buOhpF3XyJbKI\n+rHemFvuPa2fefNQUil7sauI8lgZ5z/x/LVl2rjenLH/jMrlH2v/7IG7HmhVhlPPO3F/86xq9ze3\n3tvcWLdsvff20Nfa7Xlw3BkXH+//Q+0BdK3rMu8983ifPO38/OdJXZe/7n2Fvnzjtm9ExPG9lFTa\naHP/scZefR9l72K/qI97HHRrTu2yal2es7Z71sXu43PN866qtpe8yFjxrHPefefs2/yZQvvXvT/X\nt+3POJ554MTe1mnV53R912P/Nfs37wd0WYavffFrEbH+uZMmfW2jvHv21Z8bd/EcRx+Sum9ZREQZ\nccETLxi/LOucKGuVdX1dg+41LTjXgaceiL2n7a3977a7+7N3R0S1Z8C63o/eeD63Sl/dc9qeiK9H\nnHXRWeufBzhxjT33qnN7a6di1/Hx+/w/0yy39p7xeNsl3496cMrpx3Op7nN6Z166+JnuJuvcjf2t\nfWd1N0epuzc7Ztv3dV98/zX747yrzmt1jL6l8sz3VPr+nZ+8MyLaPUu87t/tO/fx+83rPlv12ebN\n/lpxjtn0WdkzLjxxng7uF2547PBjlcu1ysVPu3jhf9+83q/ZV133TNquvbvi6OGjcfYTzu6s7pvf\nvap4byIi3b62Z9+eOPLgkTj70mrx2Zj3nXFg5z2osiw3/9xHfZvsmc5BlbjMMV6rnssfysbzUNvv\nPRy649Dmn3e0zYJ1blfPiY0xXi37vkIdKY2zy65ZdZ19affPux546oHN74FstfFdtbMuXr+GjXj8\n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\n3Mfw04dOZ9+D+xa9rdnbu+3v3pa5fn/nia88kXq5ZuX6lbn5bTcvaluj7uSBkzmw60CSV+7Xmfbu\nu27N+Ir+tXdHxfnT5/P0N55O0tln7NL5S9nz5+2/71daau29+ez58z25dP5SxleN59Y7b33F+k7f\n60snXspP/vdP2pY9+uTRHH7kcEd1jqqD3z+YE/tOJBnMe+jkPLFQ+x7cl9OHTve87k4/NxfOXshT\nX3+qbdnp+rbcviXrr1vftlwv+xMLHcdZ6HHi6J6jOfzo0v6OJMmZo2ey9y/mbpONwjF0UONBCzFX\nn7upr9DrfbnQ+qZfd/WOq7P55zZ39dpO294L1cl76uV+PHXoVPY/uL9n9c3WTbuu15+N537wXI4/\nc/xldU5vY91r12XrHVtftuy2996WMja438js13dh1cZV2f7W7T2pk5+a3r/X/sK12XTTpq5eu5Br\nMk3bH+Sxs92xrlcxLbbP3WlbarrcdW+8LpPbJhcQ6cLiaur/L6SubvfPvu/sy+nne99uHpRRaH/N\nNh3Ptrdsy9rXrO2o7Npr1mbbr2zrqOywxs8unruYJ7/25IJjeOobT+XC6QspYyW3vfe2tnHMbsvO\n1W+5+NLFPPnAwuNhynM/fC7Hf/LydtBS0K/vwyCus/Zbv/ZNv/s2nepnn2ShZvq5aydyy6/Nf225\nH3+fXo4X9fIaB701au2dQZirX/5qsNgx6+n9csPtN2TDdRsW9NpBf44Wst09X9uTS+cudTQ3bhC6\nvT7Xb1fOcTzw0IGc3H8ySfv4BtWveN07XpcVa1b0PIYTB07k4K72804W0s89svtIXnjshQXF1ot5\nHP0wStctZ/rKf2tb1l49f1952KZjvfFXb8yaTWt6Wucg/g5zbauTuW/dxHh83/E89/3nOio/08+a\nXJXtf3t727rbOfTIoRx7srP5udPb3rhtY65/4/Udlb3hl2/Ihuu7O8d2aub4fcfWrHvt3HPU5zNq\n56NBmxlH27w22948/zjabC88/kKOPH4kycv320L6uU9/8+mcP3W+7fhWNzo9Zw2zT9C07cXGNP36\nm99+c1auW7mICPtnVOZ8v9r6hMf3Hs9zD3d2HrlSr+frJJ3Pbe60P9fpPU5N6/f+1d6cOXymo9g7\ndfnS5ez+n7sXXGe7a1mP/9njSU1WblyZm9/aPJe13Xj0Yq6zNnnqfz2VC2cupIyX3Pae+Y/do/5d\nm5m7ctvV2fyz7eeuTJdff936bLl9y8vW1VrzxJ91N2e+G/28H2cpm2+/jPrnrx86mZc/KE3XHua7\nPjpXP3ex11I6/Rz08vPSi/kKw4i73TZ6Mf8iSY48cSQv/L+FjRc1xdY0N256/eSNk7nuDde1ra9d\nIYe+uQAAIABJREFUm2EQ/dxkNO8TG5Xrmp04efBkDnxv7vtkZmvX3ur0mDpfe2uh95104tjTx3Lo\nR4e6rvvyxcvZff/C27HtzPc9mmlLXb8+W355yyte24npOjZs2ZAbfumGjsr28/zR9LrNP785V99y\ndUdlN928Kdf+jWu7jrEX2rUxDz58MCf29vcemEG12ZZz23Cx40wLuYa6VMw3h/3ArgM5eWD+a4Xt\nzo+DuEdg1Oqdb67wXHUffuxwju4+2rjNbu7Nmqv+btowM/dKrhzPrXct/F7JUbGYsav9392fU8+d\nWtBrp8017reUrsmM4vWDYeh1Towm/Ww3L8Z814hv2HlDNtzQm/NjJ+N+u7+6O5cvXM7E6onc8s7+\njw3OtFW3b8q1f3NxbdVuri3Q/t79heo2P9R87vzUnbnqdVf1IixgCSilPFRr3TnXuoFehSil3JPk\nniS58cbBJKIChq9erjn+7PGXLVt33bqcPXo2kzdOvmJdk+lJVOteu67j1yxW03bGJsZy+eLlnDt2\nLueOnWtbz4q1K3LhzIVcOHuhbeyDem9zmdw2mSNPHOnq7zI9+NBvg94vw/w7NJm+AWHt5rVDiW/y\npskcf+Z4Nly3oe/bH8X9P5f1r12fsy+czcZtGzuKefKmyRx78lgmt3X+HevW9KRbBmP6ZqVOzPc3\n76aeuYyvHF8y35vZuo25qfz0D5Os2rhq5PdDp/Ft3LYxJ/aeGGi7Z9rE6omebHO+OrptS7UztnJs\n6G2sRdVfktTMXJCZS83U53zF2hU9ey/TkwiuNLl9Mi8+9WI2bOn/OX/Ypo8fK9evbHyvpw4Opr07\nKspY6dnxudevGTWTN07m6J6jbftPnb7XsRXzH8vK+NRkiDVXr1my+2/1ptU5se9E1l+3fqDvoZPz\nRLfWbl6b04dO9+1Y2Wmd7b6zK9atyIXTF3LxpYsd1dnL/sT0OM5C+7DdvqZMLP3vyGzjq5rb+KPw\n/gY1HtSNufrc7foKvd6X3da3dvPanDl8ZtFt8H5+Jjqpuxfb70d790rdtOt6FcP0j5asu/anfbuN\n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\n","text/plain":["<Figure size 7200x720 with 2 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"id":"yRG7eRC95Y6N","colab_type":"code","colab":{}},"source":["fig = plot_confusion_matrix(Y_test=t_te, Y_pred=Y_pred,\n","                      classes=classes,\n","                      normalize=True,\n","                      cmap=plt.cm.Greys,\n","                      title='Average accuracy: ' + str(np.sum(Y_pred == t_te)/len(t_te)) + '\\n')"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"42zRLAIrjgvu","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]}]}