{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"pb_basicv2.1_backi2_vsurvey_trix_liqd_4h1d_pmset.ipynb","provenance":[{"file_id":"1z4z_KLPzc6RWsxo3X_dHbpByxUAgjoMJ","timestamp":1583754134002}],"collapsed_sections":["A4jHXvtbDSez","KdDz-s7ZwrC3"],"toc_visible":true},"kernelspec":{"display_name":"Python [conda env:tensorflow2_p36]","language":"python","name":"conda-env-tensorflow2_p36-py"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.6.5"},"widgets":{"application/vnd.jupyter.widget-state+json":{"93a6e53e238a480ea14c3687947e4654":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_view_name":"HBoxView","_dom_classes":[],"_model_name":"HBoxModel","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.5.0","box_style":"","layout":"IPY_MODEL_c34ae9a8f39a43519847ea745f0ce4c9","_model_module":"@jupyter-widgets/controls","children":["IPY_MODEL_9c5fbf80996942348058d5af5fe79fa9","IPY_MODEL_18d23a3ca08c48e4a15709a2fcea09a7"]}},"c34ae9a8f39a43519847ea745f0ce4c9":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"9c5fbf80996942348058d5af5fe79fa9":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_view_name":"ProgressView","style":"IPY_MODEL_454cef4a202f4827b8416550937db7c6","_dom_classes":[],"description":"  4%","_model_name":"FloatProgressModel","bar_style":"","max":134,"_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":6,"_view_count":null,"_view_module_version":"1.5.0","orientation":"horizontal","min":0,"description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_554ea6858d054571bcccd68f327994ce"}},"18d23a3ca08c48e4a15709a2fcea09a7":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_view_name":"HTMLView","style":"IPY_MODEL_1c2663a699d4448e8b58aaf10c055f41","_dom_classes":[],"description":"","_model_name":"HTMLModel","placeholder":"​","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":" 6/134 [11:17&lt;5:18:58, 149.52s/it]","_view_count":null,"_view_module_version":"1.5.0","description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_c70dc6e3f2b3432bb8fa5f1122b76193"}},"454cef4a202f4827b8416550937db7c6":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_view_name":"StyleView","_model_name":"ProgressStyleModel","description_width":"initial","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","bar_color":null,"_model_module":"@jupyter-widgets/controls"}},"554ea6858d054571bcccd68f327994ce":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"1c2663a699d4448e8b58aaf10c055f41":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_view_name":"StyleView","_model_name":"DescriptionStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"c70dc6e3f2b3432bb8fa5f1122b76193":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}}}}},"cells":[{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"AK9FjWwLOyay","executionInfo":{"status":"ok","timestamp":1628763820416,"user_tz":-540,"elapsed":3,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"}},"outputId":"09db17f9-48ec-4eaf-9dbc-6633e8f3a3e6"},"source":["from google.colab import drive\n","drive.mount('/content/drive')\n","\n","import os, sys\n","\n","current_path = '/content/drive/My Drive/Colab Notebooks/JnQ/'\n","\n","os.chdir(current_path)"],"execution_count":33,"outputs":[{"output_type":"stream","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"8uqYv5StTazo"},"source":["# requirements"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9qGt60DKTZmf","executionInfo":{"status":"ok","timestamp":1628750602953,"user_tz":-540,"elapsed":3582,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"}},"outputId":"d0283f47-dd69-4937-d146-01ac3a78dcba"},"source":["!pip install mpl_finance\n","\n","import matplotlib.pyplot as plt\n","from matplotlib import gridspec\n","from tqdm.notebook import tqdm\n","from funcs_indicator import *\n","from funcs_for_trade import *\n","# import matplotlib.pyplot as plt\n","\n","import mpl_finance as mf\n","import os\n","import datetime\n","\n","import IPython\n","import IPython.display\n","import matplotlib as mpl\n","# import matplotlib.pyplot as plt\n","import numpy as np\n","import pandas as pd\n","import seaborn as sns\n","# import tensorflow as tf\n","\n","import pickle\n","\n","mpl.rcParams['figure.figsize'] = (8, 6)\n","mpl.rcParams['axes.grid'] = False"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Requirement already satisfied: mpl_finance in /usr/local/lib/python3.7/dist-packages (0.10.1)\n","Requirement already satisfied: matplotlib in /usr/local/lib/python3.7/dist-packages (from mpl_finance) (3.2.2)\n","Requirement already satisfied: python-dateutil>=2.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib->mpl_finance) (2.8.1)\n","Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib->mpl_finance) (1.3.1)\n","Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,>=2.0.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib->mpl_finance) (2.4.7)\n","Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.7/dist-packages (from matplotlib->mpl_finance) (0.10.0)\n","Requirement already satisfied: numpy>=1.11 in /usr/local/lib/python3.7/dist-packages (from matplotlib->mpl_finance) (1.19.5)\n","Requirement already satisfied: six in /usr/local/lib/python3.7/dist-packages (from cycler>=0.10->matplotlib->mpl_finance) (1.15.0)\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"Ci_jUnNTZbm9"},"source":["# load data"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_bXyS2yrZYC6","executionInfo":{"status":"ok","timestamp":1628754297412,"user_tz":-540,"elapsed":11255,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"}},"outputId":"890b17e7-8961-4f1d-fb0f-232d6c623a71"},"source":["# interval = '30m'\n","interval = '1m'\n","\n","date_path = './candlestick_concated/%s/quant_v2/' % interval\n","file_list = os.listdir(date_path)\n","print((file_list))\n","\n","interval2 = '3m'\n","date_path2 = './candlestick_concated/%s/quant_v2/' % interval2\n","file_list2 = os.listdir(date_path2)\n","print((file_list2))\n","\n","interval3 = '5m'\n","date_path3 = './candlestick_concated/%s/quant_v2/' % interval3\n","file_list3 = os.listdir(date_path3)\n","print((file_list3))\n","\n","interval4 = '15m'\n","interval4 = '4h'\n","date_path4 = './candlestick_concated/%s/quant_v2/' % interval4\n","file_list4 = os.listdir(date_path4)\n","print((file_list4))\n","\n","interval5 = '30m'\n","interval5 = '1d'\n","date_path5 = './candlestick_concated/%s/quant_v2/' % interval5\n","file_list5 = os.listdir(date_path5)\n","print((file_list5))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["['2021-05-30 ETHUSDT.xlsx', '2021-04-30 ETHUSDT.xlsx', '2021-07-03 ETHUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx']\n","['2021-05-30 ETHUSDT.xlsx', '2021-04-30 ETHUSDT.xlsx', '2021-07-03 ETHUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx']\n","['2021-05-30 ETHUSDT.xlsx', '2021-04-30 ETHUSDT.xlsx', '2021-07-03 ETHUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx']\n","['2021-02-07 BTC.xlsx', '2021-02-07 ETH.xlsx', '2021-02-11 BCHUSDT.xlsx', '2021-02-11 XRPUSDT.xlsx', '2021-02-11 EOSUSDT.xlsx', '2021-02-11 LTCUSDT.xlsx', '2021-02-11 ETCUSDT.xlsx', '2021-02-11 LINKUSDT.xlsx', '2021-02-11 XLMUSDT.xlsx', '2021-02-11 ADAUSDT.xlsx', '2021-02-11 XMRUSDT.xlsx', '2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx']\n","['2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx']\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"EiXxraeZCj0c"},"source":["# basic_func"]},{"cell_type":"code","metadata":{"id":"mi8H188MCiaH"},"source":["def sync_check(df, second_df, third_df, fourth_df, fifth_df):\n","\n","    #           supertrend          #\n","    ha_second_df = heikinashi(second_df)\n","    # ha_third_df = heikinashi(third_df)\n","    # print(ha_second_df.tail(10))\n","    # quit()\n","\n","    second_df['minor_ST1_Up'], second_df['minor_ST1_Down'], second_df['minor_ST1_Trend'] = supertrend(second_df, 10, 2)\n","    second_df['minor_ST2_Up'], second_df['minor_ST2_Down'], second_df['minor_ST2_Trend'] = supertrend(ha_second_df, 7,\n","                                                                                                      2)\n","    second_df['minor_ST3_Up'], second_df['minor_ST3_Down'], second_df['minor_ST3_Trend'] = supertrend(ha_second_df, 7,\n","                                                                                                      2.5)\n","    # print(df.head(20))\n","    # quit()\n","\n","    # startTime = time.time()\n","\n","    df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, second_df, [i for i in range(-9, 0, 1)]),\n","                              columns=['minor_ST1_Up', 'minor_ST1_Down', 'minor_ST1_Trend'\n","                                  , 'minor_ST2_Up', 'minor_ST2_Down', 'minor_ST2_Trend'\n","                                  , 'minor_ST3_Up', 'minor_ST3_Down', 'minor_ST3_Trend']))\n","\n","    # print(df[[\"minor_ST1_Up\", \"minor_ST2_Up\", \"minor_ST3_Up\"]].tail())\n","    # min_upper = np.minimum(df[\"minor_ST1_Up\"], df[\"minor_ST2_Up\"], df[\"minor_ST3_Up\"])\n","    # max_lower = np.maximum(df[\"minor_ST1_Down\"], df[\"minor_ST2_Down\"], df[\"minor_ST3_Down\"])\n","    min_upper = np.min(df[[\"minor_ST1_Up\", \"minor_ST2_Up\", \"minor_ST3_Up\"]], axis=1)\n","    max_lower = np.max(df[[\"minor_ST1_Down\", \"minor_ST2_Down\", \"minor_ST3_Down\"]], axis=1)\n","\n","    df['middle_line'] = (min_upper + max_lower) / 2\n","\n","    print(\"supertrend phase done\")\n","\n","\n","    #           lucid sar              #\n","    df['sar1'] = lucid_sar(df)\n","\n","    second_df['sar'] = lucid_sar(second_df)\n","    df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, second_df, [-1]), columns=['sar2']))\n","\n","    third_df['sar'] = lucid_sar(third_df)\n","    df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, third_df, [-1]), columns=['sar3']))\n","\n","    # fourth_df['sar'] = lucid_sar(fourth_df)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, fourth_df, [-1]), columns=['sar4']))\n","\n","    # fifth_df['sar'] = lucid_sar(fifth_df)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, fifth_df, [-1]), columns=['sar5']))\n","\n","    # print(df[['sar1', 'sar2']].tail(20))\n","    # print(df[['minor_ST1_Up', 'minor_ST1_Trend']].tail(20))\n","    # quit()\n","\n","    print(\"sar phase done\")\n","\n","\n","    \n","    #           ichimoku            #\n","    df['senkou_a1'], df['senkou_b1'] = ichimoku(df)\n","    \n","    second_df['senkou_a'], second_df['senkou_b'] = ichimoku(second_df)\n","    df = df.join( pd.DataFrame(index=df.index, data=to_lower_tf(df, second_df, [-2, -1]), columns=['senkou_a2', 'senkou_b2']))\n","    \n","    third_df['senkou_a'], third_df['senkou_b'] = ichimoku(third_df)\n","    df = df.join( pd.DataFrame(index=df.index, data=to_lower_tf(df, third_df, [-2, -1]), columns=['senkou_a3', 'senkou_b3']))\n","    \n","    # fourth_df['senkou_a'], fourth_df['senkou_b'] = ichimoku(fourth_df)\n","    # df = df.join( pd.DataFrame(index=df.index, data=to_lower_tf(df, fourth_df, [-2, -1]), columns=['senkou_a4', 'senkou_b4']))\n","    \n","    # fifth_df['senkou_a'], fifth_df['senkou_b'] = ichimoku(fifth_df)\n","    # df = df.join( pd.DataFrame(index=df.index, data=to_lower_tf(df, fifth_df, [-2, -1]), columns=['senkou_a5', 'senkou_b5']))\n","\n","\n","    #           1-2. displacement           #\n","    # df['senkou_a1'] = df['senkou_a1'].shift(26 - 1)\n","    # df['senkou_b1'] = df['senkou_b1'].shift(26 - 1)\n","    # df.iloc[:, -10:] = df.iloc[:, -10:].shift(26 - 1)\n","    df.iloc[:, -6:] = df.iloc[:, -6:].shift(26 - 1)\n","\n","    print(\"cloud phase done\")\n","\n","    #           sma         #\n","    fourth_df['sma'] = fourth_df['close'].rolling(14).mean()\n","    df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, fourth_df, [-1]), columns=['sma4']))\n","\n","    fifth_df['sma'] = fifth_df['close'].rolling(9).mean()\n","    df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, fifth_df, [-1]), columns=['sma5']))\n","\n","    \n","    #           macd            #\n","    df['macd_hist1'] = macd(df)\n","    \n","    second_df['macd_hist'] = macd(second_df)\n","    df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, second_df, [-1]), columns=['macd_hist2']))\n","\n","    third_df['macd_hist'] = macd(third_df)\n","    df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, third_df, [-1]), columns=['macd_hist3']))\n","\n","    # fourth_df['macd_hist'] = macd(fourth_df)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, fourth_df, [-1]), columns=['macd_hist4']))\n","\n","    # fifth_df['macd_hist'] = macd(fifth_df)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, fifth_df, [-1]), columns=['macd_hist5']))\n","\n","\n","    print(\"macd phase done\")\n","\n","\n","    #         trix        #\n","    df['trix1'] = trix_hist(df, 14, 1, 5)\n","    \n","    second_df['trix'] = trix_hist(second_df, 14, 1, 5)\n","    df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, second_df, [-1]), columns=['trix2']))\n","\n","    third_df['trix'] = trix_hist(third_df, 14, 1, 5)\n","    df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, third_df, [-1]), columns=['trix3']))\n","\n","    # fourth_df['trix'] = trix_hist(fourth_df, 14, 1, 5)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, fourth_df, [-1]), columns=['trix4']))\n","\n","    # fifth_df['trix'] = trix_hist(fifth_df, 14, 1, 5)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, fifth_df, [-1]), columns=['trix5']))\n","\n","\n","    #       stochastic      #\n","    df['stoch'] = stoch(df, 5, 3, 3)\n","    print(\"stochastic phase done\")\n","\n","    #       fisher      #\n","    df['fisher30'] = fisher(df, 30)\n","    df['fisher60'] = fisher(df, 60)\n","    df['fisher120'] = fisher(df, 120)\n","    print(\"fisher phase done\")\n","\n","    #       cctbbo      #\n","    df['cctbbo'], _ = cct_bbo(df, 21, 13)\n","    print(\"cctbbo phase done\")\n","\n","    \n","    #          add for ep           #\n","    df['min_upper'] = min_upper\n","    df['max_lower'] = max_lower\n","  \n","\n","    return df\n"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"ZnrBE3etCpIA"},"source":["# make & save res_df"]},{"cell_type":"code","metadata":{"id":"X1g9vGP0UnTT","colab":{"base_uri":"https://localhost:8080/","height":1000,"referenced_widgets":["93a6e53e238a480ea14c3687947e4654","c34ae9a8f39a43519847ea745f0ce4c9","9c5fbf80996942348058d5af5fe79fa9","18d23a3ca08c48e4a15709a2fcea09a7","454cef4a202f4827b8416550937db7c6","554ea6858d054571bcccd68f327994ce","1c2663a699d4448e8b58aaf10c055f41","c70dc6e3f2b3432bb8fa5f1122b76193"]},"outputId":"0c31ba72-28f3-400c-a91c-71c9167e7f75"},"source":["pd.set_option('display.max_rows', 500)\n","pd.set_option('display.max_columns', 500)\n","pd.set_option('display.width', 1000)\n","\n","\n","save_path = './candlestick_concated/res_df/'\n","\n","exist_list = os.listdir(save_path)\n","\n","\n","for i in tqdm(range(len(file_list))):\n","\n","  keys = [file_list[i]]\n","\n","  # if 'neo'.upper() not in file_list[i]:\n","    # continue\n","  \n","  # if 'btc'.upper() not in file_list[i]:\n","  #   continue\n","\n","  # if '2021-04-30'.upper() not in file_list[i]:\n","  # if '2021-05-30'.upper() not in file_list[i]:\n","  if '2021-06-30'.upper() not in file_list[i]:\n","  # if '2021-07-03'.upper() not in file_list[i]:\n","  # if '2021-07-01'.upper() not in file_list[i]:\n","    continue\n","\n","  \n","\n","  # if 'eth'.upper() in file_list[i]:\n","  # # if '2021-07-03'.upper() not in file_list[i]:\n","  # # if '2021-07-01'.upper() not in file_list[i]:\n","  #   continue\n","\n","  for key in keys:  \n","\n","    excel_name = key.replace(\".xlsx\", \"_4h1d_backi2.xlsx\")\n","    excel_path = save_path + excel_name\n","\n","    if excel_name in exist_list:\n","      print(excel_name, \"already exist !\")\n","      continue\n","    \n","    df = pd.read_excel(date_path + key, index_col=0)\n","    second_df = pd.read_excel(date_path2 + key, index_col=0)\n","    third_df = pd.read_excel(date_path3 + key, index_col=0)\n","    fourth_df = pd.read_excel(date_path4 + key, index_col=0)\n","    fifth_df = pd.read_excel(date_path5 + key, index_col=0)\n","\n","    print(df.index[:2])\n","    print(second_df.index[:2])\n","    print(third_df.index[:2])\n","    print(fourth_df.index[:2])\n","    print(fifth_df.index[:2])\n","\n","    res_df = sync_check(df, second_df, third_df, fourth_df, fifth_df)\n","\n","\n","    res_df.to_excel(excel_path)\n","    print(\"res_df saved succesfully !\")"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"application/vnd.jupyter.widget-view+json":{"model_id":"93a6e53e238a480ea14c3687947e4654","version_minor":0,"version_major":2},"text/plain":["HBox(children=(FloatProgress(value=0.0, max=134.0), HTML(value='')))"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["2021-06-30 ETHUSDT_4h1d_backi2.xlsx already exist !\n","DatetimeIndex(['2021-06-01 00:00:59.999000', '2021-06-01 00:01:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:02:59.999000', '2021-05-31 00:05:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:04:59.999000', '2021-05-31 00:09:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 04:59:59.999000', '2021-05-31 08:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 08:59:59.999000', '2021-06-01 08:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","backing_i : -2\n","supertrend phase done\n","backing_i : -2\n","backing_i : -2\n","sar phase done\n","backing_i : -2\n","backing_i : -2\n","cloud phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","macd phase done\n","backing_i : -2\n","backing_i : -2\n","stochastic phase done\n","fisher phase done\n","cctbbo phase done\n","res_df saved succesfully !\n","DatetimeIndex(['2021-06-01 00:00:59.999000', '2021-06-01 00:01:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:02:59.999000', '2021-05-31 00:05:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:04:59.999000', '2021-05-31 00:09:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 04:59:59.999000', '2021-05-31 08:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 08:59:59.999000', '2021-06-01 08:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","backing_i : -2\n","supertrend phase done\n","backing_i : -2\n","backing_i : -2\n","sar phase done\n","backing_i : -2\n","backing_i : -2\n","cloud phase done\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","backing_i : -2\n","macd phase done\n","backing_i : -2\n","backing_i : -2\n","stochastic phase done\n","fisher phase done\n","cctbbo phase done\n","res_df saved succesfully !\n","DatetimeIndex(['2021-06-01 00:00:59.999000', '2021-06-01 00:01:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:02:59.999000', '2021-05-31 00:05:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 00:04:59.999000', '2021-05-31 00:09:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 04:59:59.999000', '2021-05-31 08:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-05-31 08:59:59.999000', '2021-06-01 08:59:59.999000'], dtype='datetime64[ns]', freq=None)\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"A4jHXvtbDSez"},"source":["# load res_df"]},{"cell_type":"code","metadata":{"id":"uH88bMlZDWc3"},"source":["save_path = './candlestick_concated/res_df/'\n","\n","# key = '2021-07-03 ETHUSDT.xlsx'\n","# key = '2021-07-01 ETHUSDT.xlsx'\n","key = '2021-07-01 ETHUSDT_backi2.xlsx'\n","# key = '2021-06-30 ETHUSDT_backi2.xlsx'\n","# key = '2021-06-30 BTCUSDT_backi2.xlsx'\n","# key = '2021-06-30 XRPUSDT_backi2.xlsx'\n","# key = '2021-06-30 ETHUSDT_backi1.xlsx'\n","res_df = pd.read_excel(save_path + key, index_col=0)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"KdDz-s7ZwrC3"},"source":["# sync check"]},{"cell_type":"code","metadata":{"id":"4r4H4DAovfsi"},"source":["plot_size = 300\n","\n","\n","#         select plot columns       #\n","basic_cols = [0, 1, 2, 3, 5, 6, 8, 9, 11, 12, 14] # you don't need to touch\n","\n","sar_cols = [15, 18] # 15 ~ 19\n","ichimoku_cols = [20, 21]  # 20 ~ 29\n","macd_cols = [30]  # 30 ~ 34\n","\n","input_cols = basic_cols + sar_cols + ichimoku_cols + macd_cols\n","\n","\n","\n","#         do plot       #\n","plot_df = res_df.iloc[-plot_size:, input_cols]\n","\n","fig = plt.figure(figsize=(8, 6))\n","ax = fig.add_subplot(111)\n","\n","# fig.show()\n","# fig.canvas.draw()\n","\n","temp_ohlc = plot_df.values[:, :4]\n","index = np.arange(len(temp_ohlc))\n","candle = np.hstack((np.reshape(index, (-1, 1)), temp_ohlc))\n","mf.candlestick_ohlc(ax, candle, width=0.5, colorup='r', colordown='b')\n","\n","# print(plot_df.values[:, 4:])\n","plt.plot(plot_df.values[:, [4, 6, 8]], 'r', alpha=1)  # upper\n","plt.plot(plot_df.values[:, [5, 7, 9]], 'b', alpha=1)  # lower\n","plt.plot(plot_df.values[:, [10]], 'g', alpha=1)  # middle\n","\n","plt.plot(plot_df.values[:, [11]], 'c*', alpha=1, markersize=5)  # sar mic\n","plt.plot(plot_df.values[:, [12]], 'co', alpha=1, markersize=7)  # sar mac\n","\n","plt.fill_between(np.arange(len(plot_df)), plot_df.values[:, 13], plot_df.values[:, 14],\n","                  where=plot_df.values[:, 13] >= plot_df.values[:, 14], facecolor='g', alpha=0.5) # ichimoku\n","plt.fill_between(np.arange(len(plot_df)), plot_df.values[:, 13], plot_df.values[:, 14],\n","                  where=plot_df.values[:, 13] <= plot_df.values[:, 14], facecolor='r', alpha=0.5)\n","\n","\n","\n","plt.show()\n","# plt.draw()\n","plt.close()\n","# plt.pause(1e-3)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"qNGeuYuGDXfv"},"source":["# pr check with strategy"]},{"cell_type":"markdown","metadata":{"id":"qkzeUFAyeJXK"},"source":["### save sample res_dfs"]},{"cell_type":"code","metadata":{"id":"dIL0k_VEeL6B","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1628750386009,"user_tz":-540,"elapsed":46231,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"}},"outputId":"74878e6c-9ec2-49db-8bd3-4d6ae94a4996"},"source":["save_path = './candlestick_concated/res_df/'\n","res_df_files = os.listdir(save_path)\n","\n","print(res_df_files)\n","\n","res_df_dict = {}\n","\n","\n","initial_cnt = 3\n","sample_cnt = initial_cnt\n","\n","for k_i, key in enumerate(res_df_files):\n","  # if '2021-04-30'.upper() not in key:\n","  # if '2021-05-30'.upper() not in key:\n","  if '2021-06-30'.upper() not in key:\n","  # if '2021-07-03'.upper() not in key:\n","  # if '2021-07-01'.upper() not in key:\n","    continue\n","\n","  # if \"link\".upper() not in key:\n","  # if \"eth\".upper() not in key:\n","  #   continue\n","\n","  if \"_4h1d_backi2\" not in key:\n","    continue\n","\n","  if sample_cnt == initial_cnt:\n","    dict_name = \"%s_res_dfs.pkl\" % key.split(\".\")[0]\n","    print(\"dict_name :\", dict_name)\n","\n","  res_df = pd.read_excel(save_path + key, index_col=0)  \n","\n","  # print(res_df.columns)\n","\n","  res_df_dict[key] = res_df\n","  print(key, \"saved to dict !\")\n","\n","  #     save with pickle    #\n","  with open(save_path + dict_name, 'wb') as f:\n","    pickle.dump(res_df_dict, f)\n","\n","  sample_cnt -= 1\n","\n","  if sample_cnt <= 0:\n","    break\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["['2021-07-03 ETHUSDT.xlsx_backup', '2021-07-03 ETHUSDT.xlsx', '2021-06-30 ETHUSDT_question.xlsx', '2021-06-30 ETHUSDT_backi1.xlsx', '2021-06-30 ETHUSDT_backi2.xlsx', '2021-07-01 ETHUSDT_backi1.xlsx', '2021-07-01 ETHUSDT_backi2.xlsx', '2021-06-30 BTCUSDT_backi2.xlsx', '2021-06-30 XRPUSDT_backi2.xlsx', '2021-06-30 LINKUSDT_backi2.xlsx', '2021-06-30 ADAUSDT_backi2.xlsx', '2021-06-30 ETCUSDT_backi2.xlsx', '2021-06-30 LTCUSDT_backi2.xlsx', '2021-06-30 EOSUSDT_backi2.xlsx', '2021-06-30 BCHUSDT_backi2.xlsx', '2021-06-30 XLMUSDT_backi2.xlsx', '2021-07-01 BTCUSDT_backi2.xlsx', '2021-07-01 BCHUSDT_backi2.xlsx', '2021-07-01 XRPUSDT_backi2.xlsx', '2021-07-01 EOSUSDT_backi2.xlsx', '2021-07-01 LTCUSDT_backi2.xlsx', '2021-07-01 ETCUSDT_backi2.xlsx', '2021-07-01 LINKUSDT_backi2.xlsx', '2021-07-01 XLMUSDT_backi2.xlsx', '2021-07-01 ADAUSDT_backi2.xlsx', '2021-06-30 ETHUSDTmacd5355_backi2.xlsx', '2021-06-30 BTCUSDTmacd5355_backi2.xlsx', '2021-06-30 BCHUSDTmacd5355_backi2.xlsx', '2021-06-30 XRPUSDTmacd5355_backi2.xlsx', '2021-06-30 EOSUSDTmacd5355_backi2.xlsx', '2021-06-30 LTCUSDTmacd5355_backi2.xlsx', '2021-06-30 ETCUSDTmacd5355_backi2.xlsx', '2021-06-30 LINKUSDTmacd5355_backi2.xlsx', '2021-06-30 XLMUSDTmacd5355_backi2.xlsx', '2021-06-30 ADAUSDTmacd5355_backi2.xlsx', '2021-06-30 BTCUSDT_trix_backi2.xlsx', '2021-06-30 BCHUSDT_trix_backi2.xlsx', '2021-06-30 XRPUSDT_trix_backi2.xlsx', '2021-06-30 EOSUSDT_trix_backi2.xlsx', '2021-06-30 LTCUSDT_trix_backi2.xlsx', '2021-06-30 ETCUSDT_trix_backi2.xlsx', '2021-06-30 LINKUSDT_trix_backi2.xlsx', '2021-06-30 XLMUSDT_trix_backi2.xlsx', '2021-06-30 ADAUSDT_trix_backi2.xlsx', '2021-06-30 ETHUSDT_trix_backi2.xlsx', '2021-06-30 SUSHIUSDT_trix_backi2.xlsx', '2021-06-30 CVCUSDT_trix_backi2.xlsx', '2021-06-30 BTSUSDT_trix_backi2.xlsx', '2021-06-30 HOTUSDT_trix_backi2.xlsx', '2021-06-30 ZRXUSDT_trix_backi2.xlsx', '2021-06-30 QTUMUSDT_trix_backi2.xlsx', '2021-06-30 IOTAUSDT_trix_backi2.xlsx', '2021-06-30 BTCBUSD_trix_backi2.xlsx', '2021-06-30 WAVESUSDT_trix_backi2.xlsx', '2021-06-30 LITUSDT_trix_backi2.xlsx', '2021-06-30 XTZUSDT_trix_backi2.xlsx', '2021-06-30 BNBUSDT_trix_backi2.xlsx', '2021-06-30 AKROUSDT_trix_backi2.xlsx', '2021-06-30 HNTUSDT_trix_backi2.xlsx', '2021-06-30 XMRUSDT_trix_backi2.xlsx', '2021-06-30 YFIUSDT_trix_backi2.xlsx', '2021-06-30 ALICEUSDT_trix_backi2.xlsx', '2021-06-30 ALPHAUSDT_trix_backi2.xlsx', '2021-06-30 SFPUSDT_trix_backi2.xlsx', '2021-06-30 REEFUSDT_trix_backi2.xlsx', '2021-06-30 BATUSDT_trix_backi2.xlsx', '2021-06-30 DOGEUSDT_trix_backi2.xlsx', '2021-06-30 TRXUSDT_trix_backi2.xlsx', '2021-06-30 RLCUSDT_trix_backi2.xlsx', '2021-06-30 BTCSTUSDT_trix_backi2.xlsx', '2021-06-30 STORJUSDT_trix_backi2.xlsx', '2021-06-30 SNXUSDT_trix_backi2.xlsx', '2021-06-30 NEOUSDT_trix_backi2.xlsx', '2021-06-30 UNFIUSDT_trix_backi2.xlsx', '2021-06-30 SANDUSDT_trix_backi2.xlsx', '2021-06-30 DASHUSDT_trix_backi2.xlsx', '2021-06-30 ETHUSDT_cctbbo_backi2.xlsx', '2021-06-30 BTCUSDT_cctbbo_backi2.xlsx', '2021-06-30 BCHUSDT_cctbbo_backi2.xlsx', '2021-06-30 XRPUSDT_cctbbo_backi2.xlsx', '2021-06-30 EOSUSDT_cctbbo_backi2.xlsx', '2021-06-30 LTCUSDT_cctbbo_backi2.xlsx', '2021-06-30 ETCUSDT_cctbbo_backi2.xlsx', '2021-06-30 LINKUSDT_cctbbo_backi2.xlsx', '2021-06-30 XLMUSDT_cctbbo_backi2.xlsx', '2021-06-30 ADAUSDT_cctbbo_backi2.xlsx', '2021-06-30 SUSHIUSDT_cctbbo_backi2.xlsx', '2021-06-30 CVCUSDT_cctbbo_backi2.xlsx', '2021-06-30 BTSUSDT_cctbbo_backi2.xlsx', '2021-06-30 HOTUSDT_cctbbo_backi2.xlsx', '2021-06-30 ZRXUSDT_cctbbo_backi2.xlsx', '2021-06-30 QTUMUSDT_cctbbo_backi2.xlsx', '2021-06-30 IOTAUSDT_cctbbo_backi2.xlsx', '2021-06-30 BTCBUSD_cctbbo_backi2.xlsx', '2021-06-30 WAVESUSDT_cctbbo_backi2.xlsx', '2021-06-30 LITUSDT_cctbbo_backi2.xlsx', '2021-06-30 XTZUSDT_cctbbo_backi2.xlsx', '2021-06-30 BNBUSDT_cctbbo_backi2.xlsx', '2021-06-30 AKROUSDT_cctbbo_backi2.xlsx', '2021-06-30 HNTUSDT_cctbbo_backi2.xlsx', '2021-06-30 XMRUSDT_cctbbo_backi2.xlsx', '2021-06-30 YFIUSDT_cctbbo_backi2.xlsx', '2021-06-30 ALICEUSDT_cctbbo_backi2.xlsx', '2021-06-30 ALPHAUSDT_cctbbo_backi2.xlsx', '2021-06-30 SFPUSDT_cctbbo_backi2.xlsx', '2021-06-30 REEFUSDT_cctbbo_backi2.xlsx', '2021-06-30 BATUSDT_cctbbo_backi2.xlsx', '2021-06-30 DOGEUSDT_cctbbo_backi2.xlsx', '2021-06-30 TRXUSDT_cctbbo_backi2.xlsx', '2021-06-30 RLCUSDT_cctbbo_backi2.xlsx', '2021-06-30 BTCSTUSDT_cctbbo_backi2.xlsx', '2021-06-30 ETHUSDT_cctbbo_backi2_res_dfs.pkl', '2021-06-30 ETHUSDT_533_cctbbo_backi2.xlsx', '2021-06-30 BTCUSDT_533_cctbbo_backi2.xlsx', '2021-06-30 BCHUSDT_533_cctbbo_backi2.xlsx', '2021-06-30 XRPUSDT_533_cctbbo_backi2.xlsx', '2021-06-30 EOSUSDT_533_cctbbo_backi2.xlsx', '2021-06-30 LTCUSDT_533_cctbbo_backi2.xlsx', '2021-06-30 ETCUSDT_533_cctbbo_backi2.xlsx', '2021-06-30 LINKUSDT_533_cctbbo_backi2.xlsx', '2021-06-30 XLMUSDT_533_cctbbo_backi2.xlsx', '2021-06-30 ADAUSDT_533_cctbbo_backi2.xlsx', '2021-06-30 SUSHIUSDT_533_cctbbo_backi2.xlsx', '2021-06-30 CVCUSDT_533_cctbbo_backi2.xlsx', '2021-06-30 BTSUSDT_533_cctbbo_backi2.xlsx', '2021-06-30 HOTUSDT_533_cctbbo_backi2.xlsx', '2021-06-30 ZRXUSDT_533_cctbbo_backi2.xlsx', '2021-06-30 QTUMUSDT_533_cctbbo_backi2.xlsx', '2021-06-30 IOTAUSDT_533_cctbbo_backi2.xlsx', '2021-06-30 BTCBUSD_533_cctbbo_backi2.xlsx', '2021-06-30 WAVESUSDT_533_cctbbo_backi2.xlsx', '2021-06-30 LITUSDT_533_cctbbo_backi2.xlsx', '2021-06-30 XTZUSDT_533_cctbbo_backi2.xlsx', '2021-06-30 ETHUSDT_533_cctbbo_backi2_res_dfs.pkl', '2021-07-01 ETHUSDT_backi2_res_dfs.pkl', '2021-06-30 ETHUSDT_fisher_backi2.xlsx', '2021-06-30 BTCUSDT_fisher_backi2.xlsx', '2021-06-30 BCHUSDT_fisher_backi2.xlsx', '2021-06-30 XRPUSDT_fisher_backi2.xlsx', '2021-06-30 EOSUSDT_fisher_backi2.xlsx', '2021-06-30 LTCUSDT_fisher_backi2.xlsx', '2021-06-30 ETCUSDT_fisher_backi2.xlsx', '2021-06-30 LINKUSDT_fisher_backi2.xlsx', '2021-06-30 XLMUSDT_fisher_backi2.xlsx', '2021-06-30 ADAUSDT_fisher_backi2.xlsx', '2021-06-30 SUSHIUSDT_fisher_backi2.xlsx', '2021-06-30 CVCUSDT_fisher_backi2.xlsx', '2021-06-30 BTSUSDT_fisher_backi2.xlsx', '2021-06-30 HOTUSDT_fisher_backi2.xlsx', '2021-06-30 ZRXUSDT_fisher_backi2.xlsx', '2021-06-30 QTUMUSDT_fisher_backi2.xlsx', '2021-06-30 IOTAUSDT_fisher_backi2.xlsx', '2021-06-30 BTCBUSD_fisher_backi2.xlsx', '2021-06-30 WAVESUSDT_fisher_backi2.xlsx', '2021-06-30 LITUSDT_fisher_backi2.xlsx', '2021-06-30 XTZUSDT_fisher_backi2.xlsx', '2021-06-30 BNBUSDT_fisher_backi2.xlsx', '2021-06-30 AKROUSDT_fisher_backi2.xlsx', '2021-06-30 HNTUSDT_fisher_backi2.xlsx', '2021-06-30 XMRUSDT_fisher_backi2.xlsx', '2021-06-30 YFIUSDT_fisher_backi2.xlsx', '2021-06-30 ALICEUSDT_fisher_backi2.xlsx', '2021-06-30 ALPHAUSDT_fisher_backi2.xlsx', '2021-06-30 SFPUSDT_fisher_backi2.xlsx', '2021-06-30 REEFUSDT_fisher_backi2.xlsx', '2021-06-30 BATUSDT_fisher_backi2.xlsx', '2021-06-30 DOGEUSDT_fisher_backi2.xlsx', '2021-06-30 TRXUSDT_fisher_backi2.xlsx', '2021-06-30 RLCUSDT_fisher_backi2.xlsx', '2021-06-30 BTCSTUSDT_fisher_backi2.xlsx', '2021-06-30 STORJUSDT_fisher_backi2.xlsx', '2021-06-30 SNXUSDT_fisher_backi2.xlsx', '2021-06-30 NEOUSDT_fisher_backi2.xlsx', '2021-06-30 UNFIUSDT_fisher_backi2.xlsx', '2021-06-30 SANDUSDT_fisher_backi2.xlsx', '2021-06-30 DASHUSDT_fisher_backi2.xlsx', '2021-06-30 KAVAUSDT_fisher_backi2.xlsx', '2021-06-30 RUNEUSDT_fisher_backi2.xlsx', '2021-06-30 CTKUSDT_fisher_backi2.xlsx', '2021-06-30 CELRUSDT_fisher_backi2.xlsx', '2021-06-30 RSRUSDT_fisher_backi2.xlsx', '2021-06-30 DGBUSDT_fisher_backi2.xlsx', '2021-06-30 SKLUSDT_fisher_backi2.xlsx', '2021-06-30 RENUSDT_fisher_backi2.xlsx', '2021-06-30 TOMOUSDT_fisher_backi2.xlsx', '2021-06-30 MTLUSDT_fisher_backi2.xlsx', '2021-06-30 DODOUSDT_fisher_backi2.xlsx', '2021-06-30 EGLDUSDT_fisher_backi2.xlsx', '2021-06-30 KSMUSDT_fisher_backi2.xlsx', '2021-06-30 ONTUSDT_fisher_backi2.xlsx', '2021-06-30 VETUSDT_fisher_backi2.xlsx', '2021-06-30 TRBUSDT_fisher_backi2.xlsx', '2021-06-30 MANAUSDT_fisher_backi2.xlsx', '2021-06-30 COTIUSDT_fisher_backi2.xlsx', '2021-06-30 CHRUSDT_fisher_backi2.xlsx', '2021-06-30 ETHUSDT_fisher_backi2_res_dfs.pkl', '2021-06-30 BTCUSDT_4h1d_backi2.xlsx', '2021-06-30 BCHUSDT_4h1d_backi2.xlsx', '2021-06-30 XRPUSDT_4h1d_backi2.xlsx', '2021-06-30 EOSUSDT_4h1d_backi2.xlsx', '2021-06-30 ETHUSDT_4h1d_backi2_res_dfs.pkl', '2021-06-30 LTCUSDT_4h1d_backi2.xlsx', '2021-06-30 ETCUSDT_4h1d_backi2.xlsx', '2021-06-30 LINKUSDT_4h1d_backi2.xlsx', '2021-06-30 XLMUSDT_4h1d_backi2.xlsx']\n","dict_name : 2021-06-30 BTCUSDT_4h1d_backi2_res_dfs.pkl\n","2021-06-30 BTCUSDT_4h1d_backi2.xlsx saved to dict !\n","2021-06-30 BCHUSDT_4h1d_backi2.xlsx saved to dict !\n","2021-06-30 XRPUSDT_4h1d_backi2.xlsx saved to dict !\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"6HOjnZjSgzk1"},"source":["## load res_df_dict"]},{"cell_type":"code","metadata":{"id":"7FPBG5Qqg2jB"},"source":["save_path = './candlestick_concated/res_df/'\n","dict_name = \"2021-06-30 BTCUSDT_4h1d_backi2_res_dfs.pkl\"\n","\n","\n","#     load with pickle    #\n","with open(save_path + dict_name, 'rb') as f:\n","  res_df_dict = pickle.load(f)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"tApzvz_gK9lR"},"source":["## basic strategy"]},{"cell_type":"code","metadata":{"id":"a8aYsjEgQnGF"},"source":["org_res_df = res_df.copy()"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"FaRGwR4NEop2"},"source":["### shifting"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"RF3RM2G2RCb1","executionInfo":{"elapsed":291,"status":"ok","timestamp":1626515312874,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"},"user_tz":-540},"outputId":"ba8f6a75-d4df-4f85-cd0f-190935341f7a"},"source":["#         refresh res_df      #\n","res_df = org_res_df.copy()\n","print(org_res_df.tail(5))\n","\n","# break\n","\n","\n","shift_size = -4\n","# shift_size = -1\n","# shift_size = -7\n","# shift_size = +3\n","\n","res_df['min_upper'] = res_df['min_upper'].shift(shift_size)\n","res_df['max_lower'] = res_df['max_lower'].shift(shift_size)\n","res_df['minor_ST1_Trend'] = res_df['minor_ST1_Trend'].shift(shift_size)\n","res_df['minor_ST2_Trend'] = res_df['minor_ST2_Trend'].shift(shift_size)\n","res_df['minor_ST3_Trend'] = res_df['minor_ST3_Trend'].shift(shift_size)\n","res_df['middle_line'] = res_df['middle_line'].shift(shift_size)\n","\n","print(res_df.tail(5))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["                            open     high  ...  min_upper  max_lower\n","2021-06-30 23:55:59.999  0.27223  0.27281  ...   0.272145    0.27005\n","2021-06-30 23:56:59.999  0.27274  0.27290  ...   0.272145    0.27005\n","2021-06-30 23:57:59.999  0.27246  0.27257  ...   0.272523    0.27021\n","2021-06-30 23:58:59.999  0.27166  0.27183  ...   0.272523    0.27021\n","2021-06-30 23:59:59.999  0.27144  0.27211  ...   0.272523    0.27021\n","\n","[5 rows x 37 columns]\n","                            open     high  ...  min_upper  max_lower\n","2021-06-30 23:55:59.999  0.27223  0.27281  ...   0.272523    0.27021\n","2021-06-30 23:56:59.999  0.27274  0.27290  ...        NaN        NaN\n","2021-06-30 23:57:59.999  0.27246  0.27257  ...        NaN        NaN\n","2021-06-30 23:58:59.999  0.27166  0.27183  ...        NaN        NaN\n","2021-06-30 23:59:59.999  0.27144  0.27211  ...        NaN        NaN\n","\n","[5 rows x 37 columns]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"XEHiA6cOGUHS"},"source":["### 2 case by close.shift(1) & ep"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":872},"id":"yYMVFeCBGXnc","executionInfo":{"status":"ok","timestamp":1628300788554,"user_tz":-540,"elapsed":36875,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"}},"outputId":"6db3f1c4-d1d9-4625-85a6-74aecee6d766"},"source":["fee = 0.0004\n","lvrg = 5\n","lvrg = 3\n","lvrg = 2\n","\n","# cloud_shift_size = -1\n","# cloud_shift_size = 15\n","cloud_shift_size = 1\n","# cloud_shift_size = 0\n","\n","# cloud_lookback = 50\n","# cloud_lookback = 70\n","cloud_lookback = 150\n","cloud_lookback = 100\n","cloud_lookback = 69\n","# cloud_lookback = 57\n","\n","close_shift_size = 1\n","\n","\n","#       1-0. ep line = color on st min/max 조금 이내       #\n","#       1-0-1. option1. color on upper st 색출 \n","# -->   1-0-1. option2. min upper st 바로 추출\n","#       1-0-2. 색출된 st 중 min / max st 선별\n","gap = 0.0002\n","gap = 0.0001\n","gap = 0.00005\n","# gap = 0.0000\n","# gap = -0.00005\n","\n","p_qty_divider = 1.5\n","\n","\n","senkoua_list = ['senkou_a1', 'senkou_a2', 'senkou_a3', 'senkou_a4', 'senkou_a5']\n","senkoub_list = ['senkou_b1', 'senkou_b2', 'senkou_b3', 'senkou_b4', 'senkou_b5']\n","\n","\n","for key, res_df in res_df_dict.items():\n","\n","  # res_df = pd.read_excel(save_path + key, index_col=0)\n","\n","  print(key, \"loaded !\")\n","\n","  for senkou_a, senkou_b in zip(senkoua_list, senkoub_list):\n","\n","    \n","    cloud_top = np.max(res_df[[senkou_a, senkou_b]], axis=1)\n","    cloud_bottom = np.min(res_df[[senkou_a, senkou_b]], axis=1)\n","    \n","    # upper_ep = res_df['middle_line']\n","    # lower_ep = res_df['middle_line']\n","\n","    upper_ep = res_df['min_upper'] * (1 - gap)\n","    lower_ep = res_df['max_lower'] * (1 + gap)\n","\n","    upper_middle = (res_df['middle_line'] + res_df['min_upper']) / 2\n","    lower_middle = (res_df['middle_line'] + res_df['max_lower']) / 2\n","\n","    under_top = res_df['close'].shift(cloud_shift_size) <= cloud_top.shift(cloud_shift_size)\n","    over_bottom = res_df['close'].shift(cloud_shift_size) >= cloud_bottom.shift(cloud_shift_size)\n","    # print(\"under_top :\", under_top)\n","    # break\n","\n","    fisher_upper = 1.5\n","    fisher_lower = -1.5\n","    \n","    stoch_upper = 63\n","    stoch_lower = 37\n","    \n","    \n","    #       short = -1      #\n","    entry = np.where((res_df['close'].shift(1) <= upper_ep) & \n","                      (res_df['high'] >= upper_ep)\n","                      , -1, 0) \n","\n","    #       short = -2      #\n","    # entry = np.where((res_df['close'].shift(1) > upper_ep)\n","    #                   , -2, entry) \n","\n","    #       long = 1     #\n","    #       close.shift(1) > ep | 2nd_middle line       #\n","\n","    entry = np.where((res_df['close'].shift(1) >= lower_ep) & \n","                      (res_df['low'] <= lower_ep)\n","                      , 1, entry) \n","\n","    #       long = 2     #\n","    #       close.shift(1) > ep | 2nd_middle line       #\n","\n","    # entry = np.where((res_df['close'].shift(1) < lower_ep)\n","    #                   , 2, entry) \n","\n","\n","\n","    #       1-2. tp line = middle line 조금 이내         #    \n","    # tp_cut_ratio = 0.5\n","    tp_cut_ratio = 0.7\n","    # tp_cut_ratio = 1\n","    # tp_cut_ratio = 2\n","    # tp_cut_ratio = 3\n","\n","    short_tp = res_df['middle_line'] * (1 + gap)\n","    long_tp = res_df['middle_line'] * (1 - gap)\n","\n","    # short_tp = res_df['close'] - (res_df['middle_line'] - res_df['close']) * tp_cut_ratio\n","    # long_tp = res_df['close'] + (res_df['close'] - res_df['middle_line']) * tp_cut_ratio\n","    \n","    # short_tp = res_df['max_lower'] * (1 + gap)\n","    # long_tp = res_df['min_upper'] * (1 - gap)\n","\n","    short_tp2 = res_df['middle_line'] * (1 + gap)\n","    long_tp2 = res_df['middle_line'] * (1 - gap)\n","\n","    # short_tp = (res_df['middle_line'] + res_df['min_upper']) / 2\n","    # long_tp = (res_df['middle_line'] + res_df['max_lower']) / 2\n","\n","\n","\n","\n","    #       trading : 여기도 체결 결과에 대해 묘사함       #\n","    trade_list = []\n","    h_trade_list = []\n","    liqd_list = []\n","    short_liqd_list = []\n","    long_liqd_list = []\n","\n","    nontp_liqd_list = []\n","    nontp_short_liqd_list = []\n","    nontp_long_liqd_list = []\n","\n","    nontp_pr_list = []\n","    nontp_short_pr_list = []\n","    nontp_long_pr_list = []\n","\n","    nontp_short_indexs = []\n","    nontp_long_indexs = []\n","\n","    nontp_short_ep_list = []\n","    nontp_long_ep_list = []\n","\n","    pr_list = []\n","    long_list = []\n","    short_list = []\n","\n","    h_pr_list = []\n","    h_long_list = []\n","    h_short_list = []\n","\n","    ep_tp_list = []\n","    h_ep_tp_list = []\n","    tp_state_list = []\n","\n","    i = 0\n","    while 1:\n","    # for i in range(len(res_df)):\n","\n","\n","      # if entry[i] == -1:\n","      if entry[i] in [-1, -2]:\n","\n","        initial_i = i\n","\n","        #             ep scheduling               #\n","        # if  (res_df['close'].iloc[i] <= lower_middle.iloc[i]):\n","        #   pass\n","        # else:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","        #             distance protection           #\n","        # tp_dist = (res_df['close'].iloc[i] - short_tp.iloc[i])\n","        # cut_dist = (res_df['middle_line'].iloc[i] - res_df['close'].iloc[i])\n","        # if tp_dist / cut_dist >= tp_cut_ratio:\n","        #   pass\n","        # else:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","\n","        #               cloud const.         #   \n","        # if i < cloud_lookback:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","        # if np.sum(under_top.iloc[i + 1 - cloud_lookback:i + 1]) != cloud_lookback:\n","        # # if np.sum(under_top.iloc[i - cloud_lookback:i]) != cloud_lookback:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","\n","        #               st color const.           #\n","        # if np.sum(res_df[['minor_ST1_Trend', 'minor_ST2_Trend', 'minor_ST3_Trend']].iloc[i]) <= -1:\n","        #   pass\n","        # else:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","        #               sar const.            #\n","        # if res_df['sar2'].iloc[i] > res_df['high'].iloc[i] and res_df['sar3'].iloc[i] > res_df['high'].iloc[i]:\n","        #   pass\n","        # else:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","\n","        #               limit waiting const.             #\n","        # entry_done = False\n","        # for e_j in range(i + 1, len(res_df)):\n","\n","        #   #             Todo            #\n","        #   #             1. ep 설정\n","        #   #             2. limit 대기 시간 설정\n","        #   if res_df['high'].iloc[e_j] >= upper_ep.iloc[initial_i]:\n","        #     entry_done = True\n","        #     # print(\"e_j :\", e_j)\n","        #     break\n","\n","        #   if res_df['close'].iloc[e_j] > res_df['middle_line'].iloc[e_j]:\n","        #     break\n","\n","        # i = e_j\n","        # # print(\"i = e_j :\", i)\n","\n","\n","        # if entry_done:\n","        #   pass\n","        # else:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","        \n","        temp_tp_list = []\n","        remain_tp = 2\n","        hedge_cnt = 1\n","        h_ep, h_tp = None, None\n","        h_i, h_j = None, None\n","        trade_done = False\n","        \n","        for j in range(i + 1, len(res_df)):\n","\n","          \n","          # -------------- hedge only once -------------- #\n","          #             일단, h_quantity 는 초기 진입과 동일하게 설정         #\n","          # if res_df['high'].iloc[j] >= res_df['minor_ST2_Up'].iloc[j] and hedge_cnt == 1:\n","          # if res_df['close'].iloc[j] >= res_df['minor_ST2_Up'].iloc[j] and hedge_cnt == 1:\n","          # if res_df['close'].iloc[j] >= res_df['minor_ST3_Up'].iloc[j] and hedge_cnt == 1:\n","\n","          #   h_ep = res_df['close'].iloc[j]\n","          #   hedge_cnt -= 1\n","          #   h_i = j\n","\n","\n","          # -------------- sub tp -------------- #\n","          # if res_df['low'].iloc[j] <= short_tp2.iloc[j] and remain_tp == 2:\n","          # # if res_df['low'].iloc[j] <= short_tp2.iloc[j] <= res_df['high'].iloc[j]: --> 이건 잘못되었음\n","\n","          #   # trade_done = True # <-- sub tp 에는 trade_done 을 주지 않음 !\n","          #   remain_tp -= 1\n","\n","          #   #         dynamic tp        #\n","          #   if short_tp2.iloc[j] != short_tp2.iloc[j - 1]:\n","\n","          #     #   tp limit 이 불가한 경우 = open 이 이미, tp 를 넘은 경우 # \n","          #     if res_df['open'].iloc[j] < short_tp2.iloc[j]:\n","\n","          #       # tp = short_tp2.iloc[j]\n","          #       tp = res_df['open'].iloc[j]\n","          #       # tp_state_list.append(\"d-open\")\n","\n","          #     #   tp limit 이 가능한 경우 = open 이 아직, tp 를 넘지 않은 경우 # \n","          #     else:\n","\n","          #       tp = short_tp2.iloc[j]\n","          #       # tp = res_df['open'].iloc[j]\n","          #       # tp_state_list.append(\"d-short_tp2\")\n","\n","          #   #         static tp         #\n","          #   else:\n","              \n","          #     #   tp limit 이 불가한 경우 = open 이 이미, tp 를 넘은 경우 # \n","          #     #   non_inversion 의 경우, short_tp2 가 가능함   #\n","\n","          #     if res_df['open'].iloc[j] < short_tp2.iloc[j]:\n","\n","          #       tp = short_tp2.iloc[j]\n","          #       # tp = res_df['open'].iloc[j]\n","          #       # tp_state_list.append(\"s-short_tp2\")\n","\n","          #     #   tp limit 이 가능한 경우 = open 이 아직, tp 를 넘지 않은 경우 # \n","          #     else:\n","\n","          #       tp = short_tp2.iloc[j]\n","          #       # tp = res_df['open'].iloc[j]\n","          #       # tp_state_list.append(\"s-short_tp2\")   \n","\n","          #   temp_tp_list.append(tp)  \n","\n","\n","          # -------------- ultimate tp -------------- #\n","          #               1. by price line             #\n","          if res_df['low'].iloc[j] <= short_tp.iloc[initial_i]: # we use static tp now\n","          # if res_df['low'].iloc[j] <= short_tp.iloc[j]:\n","          # if res_df['low'].iloc[j] <= short_tp.iloc[j] <= res_df['high'].iloc[j]: --> 이건 잘못되었음\n","\n","            trade_done = True\n","\n","            #         dynamic tp        #\n","            if 0:\n","            # if short_tp.iloc[j] != short_tp.iloc[j - 1]:\n","\n","              #   tp limit 이 불가한 경우 = open 이 이미, tp 를 넘은 경우 # \n","              # if res_df['open'].iloc[j] < short_tp.iloc[initial_i]:\n","              if res_df['open'].iloc[j] < short_tp.iloc[j]:\n","\n","                # tp = short_tp.iloc[initial_i]\n","                tp = res_df['open'].iloc[j]\n","                tp_state_list.append(\"d-short_open\")\n","\n","              #   tp limit 이 가능한 경우 = open 이 아직, tp 를 넘지 않은 경우 # \n","              else:\n","\n","                # tp = short_tp.iloc[initial_i]\n","                tp = short_tp.iloc[j]\n","                # tp = res_df['open'].iloc[j]\n","                tp_state_list.append(\"d-short_tp\")\n","\n","            #         static tp         #\n","            else:\n","              \n","              #   tp limit 이 불가한 경우 = open 이 이미, tp 를 넘은 경우 # \n","              #   non_inversion 의 경우, short_tp 가 가능함   #\n","\n","              if res_df['open'].iloc[j] < short_tp.iloc[initial_i]:\n","              # if res_df['open'].iloc[j] < short_tp.iloc[j]:\n","\n","                tp = short_tp.iloc[initial_i]\n","                # tp = short_tp.iloc[j]\n","                # tp = res_df['open'].iloc[j]\n","                tp_state_list.append(\"s-short_tp\")\n","\n","              #   tp limit 이 가능한 경우 = open 이 아직, tp 를 넘지 않은 경우 # \n","              else:\n","\n","                tp = short_tp.iloc[initial_i]\n","                # tp = short_tp.iloc[j]\n","                # tp = res_df['open'].iloc[j]\n","                tp_state_list.append(\"s-short_tp\")   \n","\n","            temp_tp_list.append(tp)     \n","\n","\n","          #           2. by signal        #\n","          # if entry[j] == 1:\n","            \n","          #   tp = res_df['close'].iloc[j]\n","          #   # tp = res_df['open'].iloc[j]\n","          #   tp_state_list.append(\"close tp\")\n","          #   trade_done = True\n","\n","          #   temp_tp_list.append(tp) \n","\n","                  \n","          # -------------- cut -------------- #\n","          # elif res_df['macd_hist3'].iloc[j] > 0:  #  macd cut\n","          # elif res_df['macd_hist3'].iloc[i] < 0 and res_df['macd_hist3'].iloc[j] > 0:\n","          # elif res_df['close'].iloc[j] > res_df['middle_line'].iloc[j]:            \n","\n","          #   tp = res_df['close'].iloc[j]\n","          #   # tp = res_df['open'].iloc[j]\n","          #   tp_state_list.append(\"short close_cut\")\n","          #   trade_done = True\n","\n","          #   temp_tp_list.append(tp) \n","\n","\n","          # -------------- non tp -------------- #\n","          elif j == len(res_df) - 1:\n","            trade_done = True\n","            tp = res_df['close'].iloc[j]\n","          \n","\n","\n","          # -------------- append trade data -------------- #\n","          if trade_done:\n","\n","            if entry[initial_i] == -1:\n","              # ep = res_df['close'].iloc[initial_i]\n","              ep = upper_ep.iloc[initial_i]\n","            else:\n","              ep = res_df['open'].iloc[initial_i]\n","              # ep = upper_ep.iloc[initial_i]\n","              # ep = res_df['close'].iloc[initial_i - 1]     \n","\n","            #       Todo      #\n","            #        1. len(temp_tp_list) 에 대응하는 qty_list 를 만들어야함    #\n","            #        2. temp_pr_list 를 만들어 총합 + 1 을 pr_list 에 저장      #\n","            #        2-1. temp_pr = sum((ep / temp_tp_list[i] - fee - 1) * qty_list[i])   #\n","            #        3. temp_pr_list 의 첫 tp 에는 r_qty 를 할당함        #\n","            qty_list = []\n","            temp_pr_list = []\n","            r_qty = 1\n","            for q_i in range(len(temp_tp_list) - 1, -1, -1):\n","\n","              if len(temp_tp_list) == 1:\n","                temp_qty = r_qty\n","              else:\n","                if q_i !=0:\n","                  temp_qty = r_qty / p_qty_divider\n","                else:\n","                  temp_qty = r_qty\n","\n","              temp_pr = (ep / temp_tp_list[q_i] - fee - 1) * temp_qty\n","              r_qty -= temp_qty\n","\n","              temp_pr_list.append(temp_pr)\n","              qty_list.append(temp_qty)\n","\n","            # if len(temp_pr_list) == 1:\n","            #   print(\"qty_list :\", qty_list)\n","            #   print(\"temp_pr_list :\", temp_pr_list)\n","\n","            temp_pr = sum(temp_pr_list) + 1\n","\n","            #   hedge + non_hedge pr summation    #\n","            #   hedge pr direction is opposite to the other   #\n","            hedge_pr = 1\n","            if hedge_cnt == 0:\n","\n","              #       hedge tp      #\n","              h_tp = res_df['close'].iloc[j]\n","              hedge_pr = h_tp / h_ep - fee  # hedge long\n","              temp_pr += hedge_pr - 1\n","              h_j = j\n","\n","            \n","            hh = max(res_df['high'].iloc[i:j + 1])\n","            short_liq = (ep / hh - fee - 1) * lvrg + 1\n","\n","            if j != len(res_df) - 1:\n","\n","              ep_tp_list.append((ep, temp_tp_list))  \n","              trade_list.append([initial_i, i, j])\n","\n","              liqd_list.append(short_liq)\n","              short_liqd_list.append(short_liq)\n","\n","              h_ep_tp_list.append((h_ep, h_tp))        \n","              h_trade_list.append([initial_i, h_i, h_j])                \n","\n","              pr_list.append(temp_pr)\n","              short_list.append(temp_pr)\n","\n","              h_pr_list.append(hedge_pr)\n","              h_short_list.append(hedge_pr)\n","\n","              i = j\n","              break\n","\n","            else:\n","          \n","              #         tp 미체결 survey        #\n","              nontp_liqd_list.append(short_liq)\n","              nontp_short_liqd_list.append(short_liq)\n","              nontp_short_indexs.append(i)\n","              nontp_short_ep_list.append(ep)\n","\n","              nontp_short_pr = (ep / tp - fee - 1) * lvrg + 1\n","              nontp_pr_list.append(nontp_short_pr)\n","              nontp_short_pr_list.append(nontp_short_pr)\n","\n","\n","\n","      #                  long  phase                #\n","      # elif entry[i] == 1:\n","      elif entry[i] in [1, 2]:\n","\n","        initial_i = i\n","\n","        #               ep scheduling                 #\n","        # if res_df['close'].iloc[i] >= upper_middle.iloc[i]:\n","        #   pass\n","        # else:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","\n","        #             distance protection           #\n","        # tp_dist = (long_tp.iloc[i] - res_df['close'].iloc[i])\n","        # cut_dist = (res_df['close'].iloc[i] - res_df['middle_line'].iloc[i])\n","        # if tp_dist / cut_dist >= tp_cut_ratio:\n","        #   pass\n","        # else:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","\n","        #               cloud const.          #     \n","        # if i < cloud_lookback:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","        # if np.sum(over_bottom.iloc[i + 1 - cloud_lookback:i + 1]) != cloud_lookback:\n","        # # if np.sum(over_bottom.iloc[i - cloud_lookback:i]) != cloud_lookback:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue  \n","\n","        # #              st color const.           #\n","        # if np.sum(res_df[['minor_ST1_Trend', 'minor_ST2_Trend', 'minor_ST3_Trend']].iloc[i]) >= 1:\n","        #   pass\n","        # else:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","        #               sar const.            #\n","        # if res_df['sar2'].iloc[i] < res_df['low'].iloc[i] and res_df['sar3'].iloc[i] < res_df['low'].iloc[i]:\n","        #   pass\n","        # else:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","        #               limit waiting const.             #\n","        # entry_done = False\n","        # for e_j in range(i + 1, len(res_df)):\n","\n","        #   #             Todo            #\n","        #   #             1. ep 설정\n","        #   #             2. limit 대기 시간 설정\n","        #   if res_df['low'].iloc[e_j] <= upper_ep.iloc[initial_i]:\n","        #     entry_done = True\n","        #     break\n","\n","        #   if res_df['close'].iloc[e_j] < res_df['middle_line'].iloc[e_j]:     \n","        #     break\n","\n","        # i = e_j\n","\n","\n","        # if entry_done:\n","        #   pass\n","        # else:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","\n","        temp_tp_list =[]\n","        remain_tp = 2\n","        hedge_cnt = 1\n","        h_ep, h_tp = None, None        \n","        h_i, h_j = None, None        \n","        trade_done = False\n","\n","        for j in range(i + 1, len(res_df)):        \n","\n","          # -------------- hedge only once -------------- #\n","          #             일단, h_quantity 는 초기 진입과 동일하게 설정         #\n","          # if res_df['low'].iloc[j] <= res_df['minor_ST2_Down'].iloc[j] and hedge_cnt == 1:\n","          # if res_df['close'].iloc[j] <= res_df['minor_ST2_Down'].iloc[j] and hedge_cnt == 1:\n","          # if res_df['close'].iloc[j] <= res_df['minor_ST3_Down'].iloc[j] and hedge_cnt == 1:\n","\n","          #   h_ep = res_df['close'].iloc[j]\n","          #   hedge_cnt -= 1\n","          #   h_i = j\n","\n","\n","          # -------------- sub tp --------------  #\n","          # if res_df['high'].iloc[j] >= long_tp2.iloc[j] and remain_tp == 2:\n","\n","          #   # trade_done = True\n","          #   remain_tp -= 1\n","\n","          #   #         dynamic tp        #\n","          #   if long_tp2.iloc[j] != long_tp2.iloc[j - 1]:\n","\n","          #     #   tp limit 이 불가한 경우 = open 이 이미, tp 를 넘은 경우 # \n","          #     if res_df['open'].iloc[j] >= long_tp2.iloc[j]:\n","\n","          #       # tp = long_tp2.iloc[j]\n","          #       tp = res_df['open'].iloc[j]\n","          #       # tp_state_list.append(\"d-open\")\n","\n","              \n","          #     #   tp limit 이 가능한 경우 = open 이 아직, tp 를 넘지 않은 경우 # \n","          #     else:\n","                \n","          #       tp = long_tp2.iloc[j]\n","          #       # tp = res_df['open'].iloc[j]\n","          #       # tp_state_list.append(\"d-long_tp2\")\n","\n","          #   #         static tp         #\n","          #   else:\n","\n","          #     #   tp limit 이 불가한 경우 = open 이 이미, tp 를 넘은 경우 # \n","          #     #   non_inversion 의 경우, short_tp 가 가능함   #\n","\n","          #     if res_df['open'].iloc[j] >= long_tp2.iloc[j]:\n","\n","          #       tp = long_tp2.iloc[j]\n","          #       # tp = res_df['open'].iloc[j]\n","          #       # tp_state_list.append(\"s-long_tp2\")\n","\n","              \n","          #     #   tp limit 이 가능한 경우 = open 이 아직, tp 를 넘지 않은 경우 # \n","          #     else:\n","                \n","          #       tp = long_tp2.iloc[j]\n","          #       # tp = res_df['open'].iloc[j]\n","          #       # tp_state_list.append(\"s-long_tp2\")       \n","            \n","          #   temp_tp_list.append(tp)  \n","\n","\n","          # -------------- ultimate tp -------------- #\n","          #            1. by price line            #\n","          if res_df['high'].iloc[j] >= long_tp.iloc[initial_i]:\n","          # if res_df['high'].iloc[j] >= long_tp.iloc[j]:\n","\n","            trade_done = True\n","\n","            #         dynamic tp        #\n","            if 0:\n","            # if long_tp.iloc[j] != long_tp.iloc[j - 1]:\n","\n","              #   tp limit 이 불가한 경우 = open 이 이미, tp 를 넘은 경우 # \n","              # if res_df['open'].iloc[j] >= long_tp.iloc[initial_i]:\n","              if res_df['open'].iloc[j] >= long_tp.iloc[j]:\n","\n","                # tp = long_tp.iloc[initial_i]\n","                tp = res_df['open'].iloc[j]\n","                tp_state_list.append(\"d-long_open\")\n","\n","              \n","              #   tp limit 이 가능한 경우 = open 이 아직, tp 를 넘지 않은 경우 # \n","              else:\n","                \n","                # tp = long_tp.iloc[initial_i]\n","                tp = long_tp.iloc[j]\n","                # tp = res_df['open'].iloc[j]\n","                tp_state_list.append(\"d-long_tp\")\n","\n","            #         static tp         #\n","            else:\n","\n","              #   tp limit 이 불가한 경우 = open 이 이미, tp 를 넘은 경우 # \n","              #   non_inversion 의 경우, short_tp 가 가능함   #\n","\n","              # if res_df['open'].iloc[j] >= long_tp.iloc[j]:\n","              if res_df['open'].iloc[j] >= long_tp.iloc[initial_i]:\n","\n","                tp = long_tp.iloc[initial_i]\n","                # tp = long_tp.iloc[j]\n","                # tp = res_df['open'].iloc[j]\n","                tp_state_list.append(\"s-long_tp\")\n","\n","              \n","              #   tp limit 이 가능한 경우 = open 이 아직, tp 를 넘지 않은 경우 # \n","              else:\n","                \n","                tp = long_tp.iloc[initial_i]\n","                # tp = long_tp.iloc[j]\n","                # tp = res_df['open'].iloc[j]\n","                tp_state_list.append(\"s-long_tp\")         \n","            \n","            temp_tp_list.append(tp)\n","\n","\n","          #           2. by signal        #\n","          # if entry[j] == -1:\n","            \n","          #   tp = res_df['close'].iloc[j]\n","          #   # tp = res_df['open'].iloc[j]\n","          #   tp_state_list.append(\"close tp\")\n","          #   trade_done = True\n","\n","          #   temp_tp_list.append(tp) \n","\n","\n","\n","          # -------------- cut -------------- #\n","          # elif res_df['macd_hist3'].iloc[j] < 0:\n","          # # elif res_df['macd_hist3'].iloc[i] > 0 and res_df['macd_hist3'].iloc[j] < 0:\n","          # elif res_df['close'].iloc[j] < res_df['middle_line'].iloc[j]:            \n","\n","          #   tp = res_df['close'].iloc[j]\n","          #   # tp = res_df['open'].iloc[j]\n","          #   tp_state_list.append(\"long close_cut\")\n","          #   trade_done = True\n","\n","          #   temp_tp_list.append(tp)\n","\n","          \n","          # -------------- non tp -------------- #\n","          elif j == len(res_df) - 1:\n","            trade_done = True\n","            tp = res_df['close'].iloc[j]\n","\n","\n","          if trade_done:\n","\n","            if entry[initial_i] == 1:\n","              # ep = res_df['close'].iloc[initial_i]\n","              ep = lower_ep.iloc[initial_i]\n","            else:\n","              # ep = lower_ep.iloc[i]\n","              ep = res_df['open'].iloc[initial_i]\n","              # ep = res_df['close'].iloc[initial_i - 1]\n","\n","            qty_list = []\n","            temp_pr_list = []\n","            r_qty = 1\n","            for q_i in range(len(temp_tp_list) - 1, -1, -1):\n","\n","              if len(temp_tp_list) == 1:\n","                temp_qty = r_qty\n","              else:\n","                if q_i !=0:\n","                  temp_qty = r_qty / p_qty_divider\n","                else:\n","                  temp_qty = r_qty\n","\n","              temp_pr = (temp_tp_list[q_i] / ep - fee - 1) * temp_qty\n","              r_qty -= temp_qty\n","\n","              temp_pr_list.append(temp_pr)\n","\n","            temp_pr = sum(temp_pr_list) + 1\n","\n","            #   hedge + non_hedge pr summation    #\n","            #   hedge pr direction is opposite to the other   #\n","            hedge_pr = 1\n","            if hedge_cnt == 0:\n","\n","              #       hedge tp      #\n","              h_tp = res_df['close'].iloc[j]\n","              hedge_pr = h_ep / h_tp - fee  # hedge short\n","              temp_pr += hedge_pr - 1\n","              h_j = j\n","\n","\n","            ll = min(res_df['low'].iloc[i:j + 1])\n","            long_liq = (ll / ep - fee - 1) * lvrg + 1\n","\n","            if j != len(res_df) - 1:\n","\n","              ep_tp_list.append((ep, temp_tp_list))\n","              trade_list.append([initial_i, i, j])\n","\n","              liqd_list.append(long_liq)\n","              long_liqd_list.append(long_liq)\n","\n","              h_ep_tp_list.append((h_ep, h_tp))        \n","              h_trade_list.append([initial_i, h_i, h_j])                \n","\n","              pr_list.append(temp_pr)\n","              long_list.append(temp_pr)\n","\n","              h_pr_list.append(hedge_pr)\n","              h_long_list.append(hedge_pr)                    \n","\n","              i = j\n","              break\n","            \n","            else:\n","          \n","              #         tp 미체결 survey        #\n","              nontp_liqd_list.append(long_liq)\n","              nontp_long_liqd_list.append(long_liq)\n","              nontp_long_indexs.append(i)\n","              nontp_long_ep_list.append(ep)\n","              \n","              nontp_long_pr = (tp / ep - fee - 1) * lvrg + 1\n","              nontp_pr_list.append(nontp_long_pr)\n","              nontp_long_pr_list.append(nontp_long_pr)\n","\n","\n","      i += 1\n","      if i >= len(res_df):\n","        break\n","\n","\n","\n","    # -------------------- result analysis -------------------- #\n","    try:\n","      plt.figure(figsize=(16, 12))\n","      plt.suptitle(key)\n","\n","      np_pr = (np.array(pr_list) - 1) * lvrg + 1\n","\n","      total_pr = np.cumprod(np_pr)\n","      wr = len(np_pr[np_pr > 1]) / len(np_pr[np_pr != 1])\n","\n","      # plt.subplot(121)\n","      plt.subplot(231)\n","      plt.plot(total_pr)\n","      if len(nontp_liqd_list) != 0:\n","        plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\\nliqd : %.2f\\nnontp_liqd_cnt : %s\\nnontp_liqd : %.2f\\nontp_liqd_pr : %.2f\" \n","                  % (wr, np.min(np_pr), total_pr[-1], lvrg, min(liqd_list), len(nontp_liqd_list), min(nontp_liqd_list), min(nontp_pr_list)))\n","      else:\n","        plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\\nliqd : %.2f\\nnontp_liqd_cnt : %s\" \n","                  % (wr, np.min(np_pr), total_pr[-1], lvrg, min(liqd_list), len(nontp_liqd_list)))\n","      # plt.show()\n","\n","      #         short only      #\n","      np_short_pr = (np.array(short_list) - 1) * lvrg + 1\n","\n","      total_short_pr = np.cumprod(np_short_pr)\n","      short_wr = len(np_short_pr[np_short_pr > 1]) / len(np_short_pr[np_short_pr != 1])\n","      \n","      plt.subplot(232)\n","      plt.plot(total_short_pr)\n","      if len(nontp_short_liqd_list) != 0:   \n","\n","        max_nontp_short_term = len(res_df) - nontp_short_indexs[0]\n","        \n","        plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\\nliqd : %.2f\\nnontp_short_liqd_cnt : %s\\nnontp_short_liqd : %.2f\\nontp_short_liqd_pr : %.2f\\nmax_nontp_short_term : %s\"  \n","                  % (short_wr, np.min(np_short_pr), total_short_pr[-1], lvrg, min(short_liqd_list), \n","                     len(nontp_short_liqd_list), min(nontp_short_liqd_list), min(nontp_short_pr_list), max_nontp_short_term))\n","      else:\n","        plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\\nliqd : %.2f\\nnontp_short_liqd_cnt : %s\"  \n","                  % (short_wr, np.min(np_short_pr), total_short_pr[-1], lvrg, min(short_liqd_list), len(nontp_short_liqd_list)))\n","\n","      #         long only      #\n","      np_long_pr = (np.array(long_list) - 1) * lvrg + 1\n","\n","      total_long_pr = np.cumprod(np_long_pr)\n","      long_wr = len(np_long_pr[np_long_pr > 1]) / len(np_long_pr[np_long_pr != 1])\n","      \n","      plt.subplot(233)\n","      plt.plot(total_long_pr)\n","      if len(nontp_long_liqd_list) != 0:\n","\n","        max_nontp_long_term = len(res_df) - nontp_long_indexs[0]\n","\n","        plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\\nliqd : %.2f\\nnontp_long_liqd_cnt : %s\\nnontp_long_liqd : %.2f\\nontp_long_liqd_pr : %.2f\\nmax_nontp_long_term : %s\"   \n","                  % (long_wr, np.min(np_long_pr), total_long_pr[-1], lvrg, min(long_liqd_list), \n","                     len(nontp_long_liqd_list), min(nontp_long_liqd_list), min(nontp_long_pr_list), max_nontp_long_term))\n","      else:\n","        plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\\nliqd : %.2f\\nnontp_long_liqd_cnt : %s\"   \n","                  % (long_wr, np.min(np_long_pr), total_long_pr[-1], lvrg, min(long_liqd_list), len(nontp_long_liqd_list)))\n","\n","\n","      #     reversion adjustment      #\n","      rev_np_pr = (1 / (np.array(pr_list) + fee) - fee - 1) * lvrg + 1\n","          \n","      rev_total_pr = np.cumprod(rev_np_pr)\n","      rev_wr = len(rev_np_pr[rev_np_pr > 1]) / len(rev_np_pr[rev_np_pr != 1])\n","\n","      # plt.subplot(122)\n","      plt.subplot(234)\n","      plt.plot(rev_total_pr)\n","      plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\" % (rev_wr, np.min(rev_np_pr), rev_total_pr[-1], lvrg))\n","\n","      #         short       #\n","      rev_np_short_pr = (1 / (np.array(short_list) + fee) - fee - 1) * lvrg + 1\n","          \n","      rev_total_short_pr = np.cumprod(rev_np_short_pr)\n","      rev_short_wr = len(rev_np_short_pr[rev_np_short_pr > 1]) / len(rev_np_short_pr[rev_np_short_pr != 1])\n","\n","      # plt.subplot(122)\n","      plt.subplot(235)\n","      plt.plot(rev_total_short_pr)\n","      plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\" % (rev_short_wr, np.min(rev_np_short_pr), rev_total_short_pr[-1], lvrg))\n","\n","      #         long       #\n","      rev_np_long_pr = (1 / (np.array(long_list) + fee) - fee - 1) * lvrg + 1\n","          \n","      rev_total_long_pr = np.cumprod(rev_np_long_pr)\n","      rev_long_wr = len(rev_np_long_pr[rev_np_long_pr > 1]) / len(rev_np_long_pr[rev_np_long_pr != 1])\n","\n","      # plt.subplot(122)\n","      plt.subplot(236)\n","      plt.plot(rev_total_long_pr)\n","      plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\" % (rev_long_wr, np.min(rev_np_long_pr), rev_total_long_pr[-1], lvrg))\n","      \n","      plt.show()\n","\n","      h_np_pr = (np.array(h_pr_list) - 1) * lvrg + 1\n","      h_rev_np_pr = (1 / (np.array(h_pr_list) + fee) - fee - 1) * lvrg + 1    # define, for plot_check below cell\n","\n","      # --------------------- h pr plot --------------------- #\n","      if len(h_np_pr[h_np_pr != 1]) != 0:\n","\n","        plt.figure(figsize=(16, 12))\n","        plt.suptitle(key + \" hedge\")\n","\n","        h_total_pr = np.cumprod(h_np_pr)\n","        h_wr = len(h_np_pr[h_np_pr > 1]) / len(h_np_pr[h_np_pr != 1])\n","\n","        # plt.subplot(121)\n","        plt.subplot(231)\n","        plt.plot(h_total_pr)\n","        plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\" % (h_wr, np.min(h_np_pr), h_total_pr[-1], lvrg))\n","        # plt.show()\n","\n","        #         short only      #\n","        h_np_short_pr = (np.array(h_short_list) - 1) * lvrg + 1\n","\n","        h_total_short_pr = np.cumprod(h_np_short_pr)\n","        h_short_wr = len(h_np_short_pr[h_np_short_pr > 1]) / len(h_np_short_pr[h_np_short_pr != 1])\n","        \n","        plt.subplot(232)\n","        plt.plot(h_total_short_pr)\n","        plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\" % (h_short_wr, np.min(h_np_short_pr), h_total_short_pr[-1], lvrg))\n","\n","        #         long only      #\n","        h_np_long_pr = (np.array(h_long_list) - 1) * lvrg + 1\n","\n","        h_total_long_pr = np.cumprod(h_np_long_pr)\n","        h_long_wr = len(h_np_long_pr[h_np_long_pr > 1]) / len(h_np_long_pr[h_np_long_pr != 1])\n","        \n","        plt.subplot(233)\n","        plt.plot(h_total_long_pr)\n","        plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\" % (h_long_wr, np.min(h_np_long_pr), h_total_long_pr[-1], lvrg))\n","\n","\n","        #     reversion adjustment      #\n","            \n","        h_rev_total_pr = np.cumprod(h_rev_np_pr)\n","        h_rev_wr = len(h_rev_np_pr[h_rev_np_pr > 1]) / len(h_rev_np_pr[h_rev_np_pr != 1])\n","\n","        # plt.subplot(122)\n","        plt.subplot(234)\n","        plt.plot(h_rev_total_pr)\n","        plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\" % (h_rev_wr, np.min(h_rev_np_pr), h_rev_total_pr[-1], lvrg))\n","\n","        #         short       #\n","        h_rev_np_short_pr = (1 / (np.array(h_short_list) + fee) - fee - 1) * lvrg + 1\n","            \n","        h_rev_total_short_pr = np.cumprod(h_rev_np_short_pr)\n","        h_rev_short_wr = len(h_rev_np_short_pr[h_rev_np_short_pr > 1]) / len(h_rev_np_short_pr[h_rev_np_short_pr != 1])\n","\n","        # plt.subplot(122)\n","        plt.subplot(235)\n","        plt.plot(h_rev_total_short_pr)\n","        plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\" % (h_rev_short_wr, np.min(h_rev_np_short_pr), h_rev_total_short_pr[-1], lvrg))\n","\n","        #         long       #\n","        h_rev_np_long_pr = (1 / (np.array(h_long_list) + fee) - fee - 1) * lvrg + 1\n","            \n","        h_rev_total_long_pr = np.cumprod(h_rev_np_long_pr)\n","        h_rev_long_wr = len(h_rev_np_long_pr[h_rev_np_long_pr > 1]) / len(h_rev_np_long_pr[h_rev_np_long_pr != 1])\n","\n","        # plt.subplot(122)\n","        plt.subplot(236)\n","        plt.plot(h_rev_total_long_pr)\n","        plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\" % (h_rev_long_wr, np.min(h_rev_np_long_pr), h_rev_total_long_pr[-1], lvrg))\n","        \n","        plt.show()\n","          \n","    except Exception as e:\n","      print('error in pr plot :', e)   \n","    \n","\n","    print()\n","\n","    break # indi. loop\n","  break # pair loop"],"execution_count":null,"outputs":[{"output_type":"stream","text":["2021-06-30 ETHUSDT_533_cctbbo_backi2.xlsx loaded !\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1152x864 with 6 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}},{"output_type":"stream","text":["\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"-IbP_Z3Dlwk4"},"source":["#### nontp survey"]},{"cell_type":"markdown","metadata":{"id":"FxJ1y8v2fkCR"},"source":["##### term & liqd"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":614},"id":"-qIWa48pl1GO","executionInfo":{"status":"ok","timestamp":1628300788555,"user_tz":-540,"elapsed":8,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"}},"outputId":"b2687c93-e070-4d45-8a67-4cc783fd78f1"},"source":["# print(nontp_long_indexs)\n","\n","plot_size = 100\n","\n","for s_i in range(plot_size, len(trade_list), plot_size):\n","\n","  slice_trade_list = trade_list[s_i - plot_size:s_i]\n","  slice_liqd_list = liqd_list[s_i - plot_size:s_i]\n","\n","  # print(len(slice_trade_list))\n","  np_trade = np.array(slice_trade_list)\n","  trade_term = np_trade[:, [2]] - np_trade[:, [1]]\n","\n","  plt.figure(figsize=(5, 10))\n","  plt.subplot(211)\n","  plt.bar(np.arange(len(trade_term)), trade_term.reshape(-1,), width=1, color='b')\n","\n","  # plt.plot(trade_term.reshape(-1,))\n","  plt.ylim(0, 1000)\n","  # plt.show()\n","  # print()\n","\n","  plt.subplot(212)\n","  # print(len(liqd_list))\n","  # plt.bar(np.arange(len(liqd_list)), liqd_list)\n","  plt.bar(np.arange(len(slice_liqd_list)), np.array(slice_liqd_list), width=1, color='r')\n","  # plt.plot(slice_liqd_list)\n","  plt.show()\n","\n","print()"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 360x720 with 2 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}},{"output_type":"stream","text":["\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"VBwVaUkvfnOd"},"source":["##### check nontp index"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"mRCMBOU4frNY","executionInfo":{"status":"ok","timestamp":1628220543161,"user_tz":-540,"elapsed":454,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"}},"outputId":"ce4a9c9b-3589-40b3-8a19-4be03d5b9a1e"},"source":["# np_nontp_short_indexs = np.array(nontp_short_indexs)\n","# np_nontp_long_indexs = np.array(nontp_long_indexs)\n","\n","# short_til_term = len(res_df) - np_nontp_short_indexs\n","# long_til_term = len(res_df) - np_nontp_long_indexs\n","\n","max_nontp_short_term = len(res_df) - nontp_short_indexs[0]\n","max_nontp_long_term = len(res_df) - nontp_long_indexs[0]\n","\n","print(max_nontp_long_term)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["32747\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"BNtUXLtjoEDB"},"source":["### 2 case by close.shift(1) & ep (for inversion check)"]},{"cell_type":"code","metadata":{"id":"tbDiigRtoEDJ"},"source":["fee = 0.0004\n","lvrg = 5\n","\n","# cloud_shift_size = -1\n","# cloud_shift_size = 15\n","cloud_shift_size = 1\n","# cloud_shift_size = 0\n","\n","# cloud_lookback = 50\n","# cloud_lookback = 70\n","cloud_lookback = 150\n","cloud_lookback = 100\n","# cloud_lookback = 69\n","cloud_lookback = 57\n","\n","close_shift_size = 1\n","\n","\n","#       1-0. ep line = color on st min/max 조금 이내       #\n","#       1-0-1. option1. color on upper st 색출 \n","# -->   1-0-1. option2. min upper st 바로 추출\n","#       1-0-2. 색출된 st 중 min / max st 선별\n","gap = 0.0002\n","gap = 0.0001\n","gap = 0.00005\n","# gap = 0.0000\n","# gap = -0.00005\n","\n","p_qty_divider = 1.5\n","\n","\n","senkoua_list = ['senkou_a1', 'senkou_a2', 'senkou_a3', 'senkou_a4', 'senkou_a5']\n","senkoub_list = ['senkou_b1', 'senkou_b2', 'senkou_b3', 'senkou_b4', 'senkou_b5']\n","\n","\n","save_path = './candlestick_concated/res_df/'\n","res_df_list = os.listdir(save_path)\n","\n","for key, res_df in res_df_dict.items():\n","\n","  # if '2021-04-30'.upper() not in key:\n","  # if '2021-05-30'.upper() not in key:\n","  if '2021-06-30'.upper() not in key:\n","  # if '2021-07-03'.upper() not in key:\n","  # if '2021-07-01'.upper() not in key:\n","    continue\n","\n","  # if \"link\".upper() not in key:\n","  # if \"eth\".upper() not in key:\n","  #   continue\n","\n","  if \"cctbbo_backi2\" not in key:\n","    continue\n","\n","\n","  res_df = pd.read_excel(save_path + key, index_col=0)\n","\n","  print(key, \"loaded !\")\n","\n","  for senkou_a, senkou_b in zip(senkoua_list, senkoub_list):\n","\n","    \n","    cloud_top = np.max(res_df[[senkou_a, senkou_b]], axis=1)\n","    cloud_bottom = np.min(res_df[[senkou_a, senkou_b]], axis=1)\n","    \n","    upper_ep = res_df['middle_line']\n","    lower_ep = res_df['middle_line']\n","\n","    upper_middle = (res_df['middle_line'] + res_df['min_upper']) / 2\n","    lower_middle = (res_df['middle_line'] + res_df['max_lower']) / 2\n","\n","    under_top = res_df['close'].shift(cloud_shift_size) <= cloud_top.shift(cloud_shift_size)\n","    over_bottom = res_df['close'].shift(cloud_shift_size) >= cloud_bottom.shift(cloud_shift_size)\n","    # print(\"under_top :\", under_top)\n","    # break\n","\n","    fisher_upper = 1.5\n","    fisher_lower = -1.5\n","    \n","    #       short = -1      #\n","    entry = np.where((res_df['fisher'].shift(1) >= res_df['fisher']) & \n","                      (res_df['fisher'].shift(2) <= res_df['fisher']).shift(1) &\n","                      (res_df['fisher'].shift(1) >= fisher_upper)\n","                      , -1, 0) \n","\n","    #       long = 1     #\n","    entry = np.where((res_df['fisher'].shift(1) <= res_df['fisher']) & \n","                      (res_df['fisher'].shift(2) >= res_df['fisher']).shift(1) &\n","                      (res_df['fisher'].shift(1) <= fisher_lower)\n","                      , 1, entry) \n","\n","\n","\n","    #       1-2. tp line = middle line 조금 이내         #\n","    # short_tp = res_df['middle_line'] * (1 + gap)\n","    # long_tp = res_df['middle_line'] * (1 - gap)\n","    \n","    short_tp = lower_middle * (1 + gap)\n","    long_tp = upper_middle * (1 - gap)\n","\n","    short_tp2 = res_df['middle_line'] * (1 + gap)\n","    long_tp2 = res_df['middle_line'] * (1 - gap)\n","\n","    # short_tp = (res_df['middle_line'] + res_df['min_upper']) / 2\n","    # long_tp = (res_df['middle_line'] + res_df['max_lower']) / 2\n","\n","\n","\n","    #       trading : 여기도 체결 결과에 대해 묘사함       #\n","    trade_list = []\n","    h_trade_list = []\n","\n","    pr_list = []\n","    long_list = []\n","    short_list = []\n","\n","    h_pr_list = []\n","    h_long_list = []\n","    h_short_list = []\n","\n","    ep_tp_list = []\n","    h_ep_tp_list = []\n","    tp_state_list = []\n","\n","    i = 0\n","    while 1:\n","    # for i in range(len(res_df)):\n","\n","      # if i < cloud_lookback:\n","      #   i += 1\n","      #   if i >= len(res_df):\n","      #     break\n","      #   continue\n","\n","      # if entry[i] == -1:\n","      if entry[i] in [-1, -2]:\n","\n","        initial_i = i\n","\n","\n","        #               cloud const.         #      \n","        # if np.sum(under_top.iloc[i + 1 - cloud_lookback:i + 1]) != cloud_lookback:\n","        # # if np.sum(under_top.iloc[i - cloud_lookback:i]) != cloud_lookback:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue  \n","        # else:\n","        #   print(\"np.sum(under_top.iloc[i + 1 - cloud_lookback:i + 1]) :\", under_top.iloc[i + 1 - cloud_lookback:i + 1]) \n","\n","\n","        #               st color const.           #\n","        if np.sum(res_df[['minor_ST1_Trend', 'minor_ST2_Trend', 'minor_ST3_Trend']].iloc[i]) <= -1:\n","          pass\n","        else:\n","          i += 1\n","          if i >= len(res_df):\n","            break\n","          continue\n","\n","        #               sar const.            #\n","        # if res_df['sar2'].iloc[i] > res_df['high'].iloc[i] and res_df['sar3'].iloc[i] > res_df['high'].iloc[i]:\n","        #   pass\n","        # else:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","\n","        #               limit waiting const.             #\n","        # entry_done = False\n","        # for e_j in range(i + 1, len(res_df)):\n","\n","        #   #             Todo            #\n","        #   #             1. ep 설정\n","        #   #             2. limit 대기 시간 설정\n","        #   if res_df['high'].iloc[e_j] >= upper_ep.iloc[initial_i]:\n","        #     entry_done = True\n","        #     # print(\"e_j :\", e_j)\n","        #     break\n","\n","        #   if res_df['close'].iloc[e_j] > res_df['middle_line'].iloc[e_j]:\n","        #     break\n","\n","        # i = e_j\n","        # # print(\"i = e_j :\", i)\n","\n","\n","        # if entry_done:\n","        #   pass\n","        # else:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","        \n","        temp_tp_list = []\n","        remain_tp = 2\n","        hedge_cnt = 1\n","        h_ep, h_tp = None, None\n","        h_i, h_j = None, None\n","        trade_done = False\n","        \n","        for j in range(i + 1, len(res_df)):\n","\n","          \n","          # -------------- hedge only once -------------- #\n","          #             일단, h_quantity 는 초기 진입과 동일하게 설정         #\n","          # if res_df['high'].iloc[j] >= res_df['minor_ST2_Up'].iloc[j] and hedge_cnt == 1:\n","          # if res_df['close'].iloc[j] >= res_df['minor_ST2_Up'].iloc[j] and hedge_cnt == 1:\n","          # if res_df['close'].iloc[j] >= res_df['minor_ST3_Up'].iloc[j] and hedge_cnt == 1:\n","\n","          #   h_ep = res_df['close'].iloc[j]\n","          #   hedge_cnt -= 1\n","          #   h_i = j\n","\n","\n","          # -------------- sub tp -------------- #\n","          # if res_df['low'].iloc[j] <= short_tp2.iloc[j] and remain_tp == 2:\n","          # # if res_df['low'].iloc[j] <= short_tp2.iloc[j] <= res_df['high'].iloc[j]: --> 이건 잘못되었음\n","\n","          #   # trade_done = True # <-- sub tp 에는 trade_done 을 주지 않음 !\n","          #   remain_tp -= 1\n","\n","          #   #         dynamic tp        #\n","          #   if short_tp2.iloc[j] != short_tp2.iloc[j - 1]:\n","\n","          #     #   tp limit 이 불가한 경우 = open 이 이미, tp 를 넘은 경우 # \n","          #     if res_df['open'].iloc[j] < short_tp2.iloc[j]:\n","\n","          #       # tp = short_tp2.iloc[j]\n","          #       tp = res_df['open'].iloc[j]\n","          #       # tp_state_list.append(\"d-open\")\n","\n","          #     #   tp limit 이 가능한 경우 = open 이 아직, tp 를 넘지 않은 경우 # \n","          #     else:\n","\n","          #       tp = short_tp2.iloc[j]\n","          #       # tp = res_df['open'].iloc[j]\n","          #       # tp_state_list.append(\"d-short_tp2\")\n","\n","          #   #         static tp         #\n","          #   else:\n","              \n","          #     #   tp limit 이 불가한 경우 = open 이 이미, tp 를 넘은 경우 # \n","          #     #   non_inversion 의 경우, short_tp2 가 가능함   #\n","\n","          #     if res_df['open'].iloc[j] < short_tp2.iloc[j]:\n","\n","          #       tp = short_tp2.iloc[j]\n","          #       # tp = res_df['open'].iloc[j]\n","          #       # tp_state_list.append(\"s-short_tp2\")\n","\n","          #     #   tp limit 이 가능한 경우 = open 이 아직, tp 를 넘지 않은 경우 # \n","          #     else:\n","\n","          #       tp = short_tp2.iloc[j]\n","          #       # tp = res_df['open'].iloc[j]\n","          #       # tp_state_list.append(\"s-short_tp2\")   \n","\n","          #   temp_tp_list.append(tp)  \n","\n","\n","          # # -------------- ultimate tp -------------- #\n","          if res_df['low'].iloc[j] <= short_tp.iloc[j]:\n","          # if res_df['low'].iloc[j] <= short_tp.iloc[j] <= res_df['high'].iloc[j]: --> 이건 잘못되었음\n","\n","            trade_done = True\n","\n","            #         dynamic tp        #\n","            if short_tp.iloc[j] != short_tp.iloc[j - 1]:\n","\n","              #   tp limit 이 불가한 경우 = open 이 이미, tp 를 넘은 경우 # \n","              if res_df['open'].iloc[j] < short_tp.iloc[j]:\n","\n","                # tp = short_tp.iloc[j]\n","                tp = res_df['open'].iloc[j]\n","                tp_state_list.append(\"d-open\")\n","\n","              #   tp limit 이 가능한 경우 = open 이 아직, tp 를 넘지 않은 경우 # \n","              else:\n","\n","                # tp = short_tp.iloc[j]\n","                # tp = res_df['open'].iloc[j]\n","                tp = res_df['close'].iloc[j]\n","                tp_state_list.append(\"d-close\")\n","\n","            #         static tp         #\n","            else:\n","              \n","              #   tp limit 이 불가한 경우 = open 이 이미, tp 를 넘은 경우 # \n","              #   non_inversion 의 경우, short_tp 가 가능함   #\n","\n","              if res_df['open'].iloc[j] < short_tp.iloc[j]:\n","\n","                # tp = short_tp.iloc[j]\n","                tp = res_df['open'].iloc[j]\n","                # tp = res_df['close'].iloc[j]\n","                tp_state_list.append(\"s-open\")\n","\n","              #   tp limit 이 가능한 경우 = open 이 아직, tp 를 넘지 않은 경우 # \n","              else:\n","\n","                # tp = short_tp.iloc[j]\n","                # tp = res_df['open'].iloc[j]\n","                tp = res_df['close'].iloc[j]\n","                tp_state_list.append(\"s-close\")   \n","\n","            temp_tp_list.append(tp)            \n","\n","                  \n","          # -------------- cut -------------- #\n","          # elif res_df['macd_hist3'].iloc[j] > 0:  #  macd cut\n","          # # elif res_df['macd_hist3'].iloc[i] < 0 and res_df['macd_hist3'].iloc[j] > 0:\n","\n","          # if res_df['close'].iloc[j] > res_df['middle_line'].iloc[j]:            \n","\n","          #   tp = res_df['close'].iloc[j]\n","          #   # tp = res_df['open'].iloc[j]\n","          #   tp_state_list.append(\"close cut\")\n","          #   trade_done = True\n","\n","          #   temp_tp_list.append(tp) \n","\n","\n","          # -------------- append trade data -------------- #\n","          if trade_done:\n","\n","            if entry[initial_i] == -1:\n","              ep = res_df['close'].iloc[initial_i]\n","              # ep = upper_ep.iloc[initial_i]\n","            else:\n","              ep = res_df['open'].iloc[initial_i]\n","              # ep = upper_ep.iloc[initial_i]\n","              # ep = res_df['close'].iloc[initial_i - 1]     \n","\n","            #       Todo      #\n","            #        1. len(temp_tp_list) 에 대응하는 qty_list 를 만들어야함    #\n","            #        2. temp_pr_list 를 만들어 총합 + 1 을 pr_list 에 저장      #\n","            #        2-1. temp_pr = sum((ep / temp_tp_list[i] - fee - 1) * qty_list[i])   #\n","            #        3. temp_pr_list 의 첫 tp 에는 r_qty 를 할당함        #\n","            qty_list = []\n","            temp_pr_list = []\n","            r_qty = 1\n","            for q_i in range(len(temp_tp_list) - 1, -1, -1):\n","\n","              if len(temp_tp_list) == 1:\n","                temp_qty = r_qty\n","              else:\n","                if q_i !=0:\n","                  temp_qty = r_qty / p_qty_divider\n","                else:\n","                  temp_qty = r_qty\n","\n","              temp_pr = (ep / temp_tp_list[q_i] - fee - 1) * temp_qty\n","              r_qty -= temp_qty\n","\n","              temp_pr_list.append(temp_pr)\n","              qty_list.append(temp_qty)\n","\n","            # if len(temp_pr_list) == 1:\n","            #   print(\"qty_list :\", qty_list)\n","            #   print(\"temp_pr_list :\", temp_pr_list)\n","\n","            temp_pr = sum(temp_pr_list) + 1\n","\n","            #   hedge + non_hedge pr summation    #\n","            #   hedge pr direction is opposite to the other   #\n","            hedge_pr = 1\n","            if hedge_cnt == 0:\n","\n","              #       hedge tp      #\n","              h_tp = res_df['close'].iloc[j]\n","              hedge_pr = h_tp / h_ep - fee  # hedge long\n","              temp_pr += hedge_pr - 1\n","              h_j = j\n","\n","            ep_tp_list.append((ep, temp_tp_list))  \n","            trade_list.append([initial_i, i, j])\n","\n","            h_ep_tp_list.append((h_ep, h_tp))        \n","            h_trade_list.append([initial_i, h_i, h_j])                \n","\n","            pr_list.append(temp_pr)\n","            short_list.append(temp_pr)\n","\n","            h_pr_list.append(hedge_pr)\n","            h_short_list.append(hedge_pr)\n","\n","            i = j\n","            break\n","\n","\n","      #                  long  phase                #\n","      # elif entry[i] == 1:\n","      elif entry[i] in [1, 2]:\n","\n","        initial_i = i\n","\n","\n","        #               cloud const.          #     \n","        # if np.sum(over_bottom.iloc[i + 1 - cloud_lookback:i + 1]) != cloud_lookback:\n","        # # if np.sum(over_bottom.iloc[i - cloud_lookback:i]) != cloud_lookback:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue  \n","\n","        #               st color const.           #\n","        if np.sum(res_df[['minor_ST1_Trend', 'minor_ST2_Trend', 'minor_ST3_Trend']].iloc[i]) >= 1:\n","          pass\n","        else:\n","          i += 1\n","          if i >= len(res_df):\n","            break\n","          continue\n","\n","        #               sar const.            #\n","        # if res_df['sar2'].iloc[i] < res_df['low'].iloc[i] and res_df['sar3'].iloc[i] < res_df['low'].iloc[i]:\n","        #   pass\n","        # else:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","        #               limit waiting const.             #\n","        # entry_done = False\n","        # for e_j in range(i + 1, len(res_df)):\n","\n","        #   #             Todo            #\n","        #   #             1. ep 설정\n","        #   #             2. limit 대기 시간 설정\n","        #   if res_df['low'].iloc[e_j] <= upper_ep.iloc[initial_i]:\n","        #     entry_done = True\n","        #     break\n","\n","        #   if res_df['close'].iloc[e_j] < res_df['middle_line'].iloc[e_j]:     \n","        #     break\n","\n","        # i = e_j\n","\n","\n","        # if entry_done:\n","        #   pass\n","        # else:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","\n","        temp_tp_list =[]\n","        remain_tp = 2\n","        hedge_cnt = 1\n","        h_ep, h_tp = None, None        \n","        h_i, h_j = None, None        \n","        trade_done = False\n","\n","        for j in range(i + 1, len(res_df)):        \n","\n","          # -------------- hedge only once -------------- #\n","          #             일단, h_quantity 는 초기 진입과 동일하게 설정         #\n","          # if res_df['low'].iloc[j] <= res_df['minor_ST2_Down'].iloc[j] and hedge_cnt == 1:\n","          # if res_df['close'].iloc[j] <= res_df['minor_ST2_Down'].iloc[j] and hedge_cnt == 1:\n","          # if res_df['close'].iloc[j] <= res_df['minor_ST3_Down'].iloc[j] and hedge_cnt == 1:\n","\n","          #   h_ep = res_df['close'].iloc[j]\n","          #   hedge_cnt -= 1\n","          #   h_i = j\n","\n","\n","          # -------------- sub tp --------------  #\n","          # if res_df['high'].iloc[j] >= long_tp2.iloc[j] and remain_tp == 2:\n","\n","          #   # trade_done = True\n","          #   remain_tp -= 1\n","\n","          #   #         dynamic tp        #\n","          #   if long_tp2.iloc[j] != long_tp2.iloc[j - 1]:\n","\n","          #     #   tp limit 이 불가한 경우 = open 이 이미, tp 를 넘은 경우 # \n","          #     if res_df['open'].iloc[j] >= long_tp2.iloc[j]:\n","\n","          #       # tp = long_tp2.iloc[j]\n","          #       tp = res_df['open'].iloc[j]\n","          #       # tp_state_list.append(\"d-open\")\n","\n","              \n","          #     #   tp limit 이 가능한 경우 = open 이 아직, tp 를 넘지 않은 경우 # \n","          #     else:\n","                \n","          #       tp = long_tp2.iloc[j]\n","          #       # tp = res_df['open'].iloc[j]\n","          #       # tp_state_list.append(\"d-long_tp2\")\n","\n","          #   #         static tp         #\n","          #   else:\n","\n","          #     #   tp limit 이 불가한 경우 = open 이 이미, tp 를 넘은 경우 # \n","          #     #   non_inversion 의 경우, short_tp 가 가능함   #\n","\n","          #     if res_df['open'].iloc[j] >= long_tp2.iloc[j]:\n","\n","          #       tp = long_tp2.iloc[j]\n","          #       # tp = res_df['open'].iloc[j]\n","          #       # tp_state_list.append(\"s-long_tp2\")\n","\n","              \n","          #     #   tp limit 이 가능한 경우 = open 이 아직, tp 를 넘지 않은 경우 # \n","          #     else:\n","                \n","          #       tp = long_tp2.iloc[j]\n","          #       # tp = res_df['open'].iloc[j]\n","          #       # tp_state_list.append(\"s-long_tp2\")       \n","            \n","          #   temp_tp_list.append(tp)  \n","\n","\n","          # # -------------- ultimate tp -------------- #\n","          if res_df['high'].iloc[j] >= long_tp.iloc[j]:\n","\n","            trade_done = True\n","\n","            #         dynamic tp        #\n","            if long_tp.iloc[j] != long_tp.iloc[j - 1]:\n","\n","              #   tp limit 이 불가한 경우 = open 이 이미, tp 를 넘은 경우 # \n","              if res_df['open'].iloc[j] >= long_tp.iloc[j]:\n","\n","                # tp = long_tp.iloc[j]\n","                tp = res_df['open'].iloc[j]\n","                tp_state_list.append(\"d-open\")\n","\n","              \n","              #   tp limit 이 가능한 경우 = open 이 아직, tp 를 넘지 않은 경우 # \n","              else:\n","                \n","                # tp = long_tp.iloc[j]\n","                # tp = res_df['open'].iloc[j]\n","                tp = res_df['close'].iloc[j]                \n","                tp_state_list.append(\"d-close\")\n","\n","            #         static tp         #\n","            else:\n","\n","              #   tp limit 이 불가한 경우 = open 이 이미, tp 를 넘은 경우 # \n","              #   non_inversion 의 경우, short_tp 가 가능함   #\n","\n","              if res_df['open'].iloc[j] >= long_tp.iloc[j]:\n","\n","                # tp = long_tp.iloc[j]\n","                tp = res_df['open'].iloc[j]\n","                tp_state_list.append(\"s-open\")\n","\n","              \n","              #   tp limit 이 가능한 경우 = open 이 아직, tp 를 넘지 않은 경우 # \n","              else:\n","                \n","                # tp = long_tp.iloc[j]\n","                # tp = res_df['open'].iloc[j]\n","                tp = res_df['close'].iloc[j]\n","                tp_state_list.append(\"s-close\")         \n","            \n","            temp_tp_list.append(tp)\n","\n","\n","\n","          # -------------- cut -------------- #\n","          # elif res_df['macd_hist3'].iloc[j] < 0:\n","          # # elif res_df['macd_hist3'].iloc[i] > 0 and res_df['macd_hist3'].iloc[j] < 0:\n","          # if res_df['close'].iloc[j] < res_df['middle_line'].iloc[j]:            \n","\n","          #   tp = res_df['close'].iloc[j]\n","          #   # tp = res_df['open'].iloc[j]\n","          #   tp_state_list.append(\"close cut\")\n","          #   trade_done = True\n","\n","          #   temp_tp_list.append(tp)\n","\n","\n","          if trade_done:\n","\n","            if entry[initial_i] == 1:\n","              ep = res_df['close'].iloc[initial_i]\n","              # ep = lower_ep.iloc[initial_i]\n","            else:\n","              # ep = lower_ep.iloc[i]\n","              ep = res_df['open'].iloc[initial_i]\n","              # ep = res_df['close'].iloc[initial_i - 1]\n","\n","            qty_list = []\n","            temp_pr_list = []\n","            r_qty = 1\n","            for q_i in range(len(temp_tp_list) - 1, -1, -1):\n","\n","              if len(temp_tp_list) == 1:\n","                temp_qty = r_qty\n","              else:\n","                if q_i !=0:\n","                  temp_qty = r_qty / p_qty_divider\n","                else:\n","                  temp_qty = r_qty\n","\n","              temp_pr = (temp_tp_list[q_i] / ep - fee - 1) * temp_qty\n","              r_qty -= temp_qty\n","\n","              temp_pr_list.append(temp_pr)\n","\n","            temp_pr = sum(temp_pr_list) + 1\n","\n","            #   hedge + non_hedge pr summation    #\n","            #   hedge pr direction is opposite to the other   #\n","            hedge_pr = 1\n","            if hedge_cnt == 0:\n","\n","              #       hedge tp      #\n","              h_tp = res_df['close'].iloc[j]\n","              hedge_pr = h_ep / h_tp - fee  # hedge short\n","              temp_pr += hedge_pr - 1\n","              h_j = j\n","\n","            ep_tp_list.append((ep, temp_tp_list))\n","            trade_list.append([initial_i, i, j])\n","\n","            h_ep_tp_list.append((h_ep, h_tp))        \n","            h_trade_list.append([initial_i, h_i, h_j])                \n","\n","            pr_list.append(temp_pr)\n","            long_list.append(temp_pr)\n","\n","            h_pr_list.append(hedge_pr)\n","            h_long_list.append(hedge_pr)                    \n","\n","            i = j\n","            break\n","\n","\n","      i += 1\n","      if i >= len(res_df):\n","        break\n","\n","\n","\n","    # -------------------- result analysis -------------------- #\n","    try:\n","      plt.figure(figsize=(16, 12))\n","      plt.suptitle(key)\n","\n","      np_pr = (np.array(pr_list) - 1) * lvrg + 1\n","\n","      total_pr = np.cumprod(np_pr)\n","      wr = len(np_pr[np_pr > 1]) / len(np_pr[np_pr != 1])\n","\n","      # plt.subplot(121)\n","      plt.subplot(231)\n","      plt.plot(total_pr)\n","      plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\" % (wr, np.min(np_pr), total_pr[-1], lvrg))\n","      # plt.show()\n","\n","      #         short only      #\n","      np_short_pr = (np.array(short_list) - 1) * lvrg + 1\n","\n","      total_short_pr = np.cumprod(np_short_pr)\n","      short_wr = len(np_short_pr[np_short_pr > 1]) / len(np_short_pr[np_short_pr != 1])\n","      \n","      plt.subplot(232)\n","      plt.plot(total_short_pr)\n","      plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\" % (short_wr, np.min(np_short_pr), total_short_pr[-1], lvrg))\n","\n","      #         long only      #\n","      np_long_pr = (np.array(long_list) - 1) * lvrg + 1\n","\n","      total_long_pr = np.cumprod(np_long_pr)\n","      long_wr = len(np_long_pr[np_long_pr > 1]) / len(np_long_pr[np_long_pr != 1])\n","      \n","      plt.subplot(233)\n","      plt.plot(total_long_pr)\n","      plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\" % (long_wr, np.min(np_long_pr), total_long_pr[-1], lvrg))\n","\n","\n","      #     reversion adjustment      #\n","      rev_np_pr = (1 / (np.array(pr_list) + fee) - fee - 1) * lvrg + 1\n","          \n","      rev_total_pr = np.cumprod(rev_np_pr)\n","      rev_wr = len(rev_np_pr[rev_np_pr > 1]) / len(rev_np_pr[rev_np_pr != 1])\n","\n","      # plt.subplot(122)\n","      plt.subplot(234)\n","      plt.plot(rev_total_pr)\n","      plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\" % (rev_wr, np.min(rev_np_pr), rev_total_pr[-1], lvrg))\n","\n","      #         short       #\n","      rev_np_short_pr = (1 / (np.array(short_list) + fee) - fee - 1) * lvrg + 1\n","          \n","      rev_total_short_pr = np.cumprod(rev_np_short_pr)\n","      rev_short_wr = len(rev_np_short_pr[rev_np_short_pr > 1]) / len(rev_np_short_pr[rev_np_short_pr != 1])\n","\n","      # plt.subplot(122)\n","      plt.subplot(235)\n","      plt.plot(rev_total_short_pr)\n","      plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\" % (rev_short_wr, np.min(rev_np_short_pr), rev_total_short_pr[-1], lvrg))\n","\n","      #         long       #\n","      rev_np_long_pr = (1 / (np.array(long_list) + fee) - fee - 1) * lvrg + 1\n","          \n","      rev_total_long_pr = np.cumprod(rev_np_long_pr)\n","      rev_long_wr = len(rev_np_long_pr[rev_np_long_pr > 1]) / len(rev_np_long_pr[rev_np_long_pr != 1])\n","\n","      # plt.subplot(122)\n","      plt.subplot(236)\n","      plt.plot(rev_total_long_pr)\n","      plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\" % (rev_long_wr, np.min(rev_np_long_pr), rev_total_long_pr[-1], lvrg))\n","      \n","      plt.show()\n","\n","\n","\n","      # --------------------- h pr plot --------------------- #\n","\n","      plt.figure(figsize=(16, 12))\n","      plt.suptitle(key)\n","\n","      h_np_pr = (np.array(h_pr_list) - 1) * lvrg + 1\n","      h_rev_np_pr = (1 / (np.array(h_pr_list) + fee) - fee - 1) * lvrg + 1    # define, for plot_check below cell\n","\n","      h_total_pr = np.cumprod(h_np_pr)\n","      h_wr = len(h_np_pr[h_np_pr > 1]) / len(h_np_pr[h_np_pr != 1])\n","\n","      # plt.subplot(121)\n","      plt.subplot(231)\n","      plt.plot(h_total_pr)\n","      plt.title(\"h_wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\" % (h_wr, np.min(h_np_pr), h_total_pr[-1], lvrg))\n","      # plt.show()\n","\n","      #         short only      #\n","      h_np_short_pr = (np.array(h_short_list) - 1) * lvrg + 1\n","\n","      h_total_short_pr = np.cumprod(h_np_short_pr)\n","      h_short_wr = len(h_np_short_pr[h_np_short_pr > 1]) / len(h_np_short_pr[h_np_short_pr != 1])\n","      \n","      plt.subplot(232)\n","      plt.plot(h_total_short_pr)\n","      plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\" % (h_short_wr, np.min(h_np_short_pr), h_total_short_pr[-1], lvrg))\n","\n","      #         long only      #\n","      h_np_long_pr = (np.array(h_long_list) - 1) * lvrg + 1\n","\n","      h_total_long_pr = np.cumprod(h_np_long_pr)\n","      h_long_wr = len(h_np_long_pr[h_np_long_pr > 1]) / len(h_np_long_pr[h_np_long_pr != 1])\n","      \n","      plt.subplot(233)\n","      plt.plot(h_total_long_pr)\n","      plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\" % (h_long_wr, np.min(h_np_long_pr), h_total_long_pr[-1], lvrg))\n","\n","\n","      #     reversion adjustment      #\n","          \n","      h_rev_total_pr = np.cumprod(h_rev_np_pr)\n","      h_rev_wr = len(h_rev_np_pr[h_rev_np_pr > 1]) / len(h_rev_np_pr[h_rev_np_pr != 1])\n","\n","      # plt.subplot(122)\n","      plt.subplot(234)\n","      plt.plot(h_rev_total_pr)\n","      plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\" % (h_rev_wr, np.min(h_rev_np_pr), h_rev_total_pr[-1], lvrg))\n","\n","      #         short       #\n","      h_rev_np_short_pr = (1 / (np.array(h_short_list) + fee) - fee - 1) * lvrg + 1\n","          \n","      h_rev_total_short_pr = np.cumprod(h_rev_np_short_pr)\n","      h_rev_short_wr = len(h_rev_np_short_pr[h_rev_np_short_pr > 1]) / len(h_rev_np_short_pr[h_rev_np_short_pr != 1])\n","\n","      # plt.subplot(122)\n","      plt.subplot(235)\n","      plt.plot(h_rev_total_short_pr)\n","      plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\" % (h_rev_short_wr, np.min(h_rev_np_short_pr), h_rev_total_short_pr[-1], lvrg))\n","\n","      #         long       #\n","      h_rev_np_long_pr = (1 / (np.array(h_long_list) + fee) - fee - 1) * lvrg + 1\n","          \n","      h_rev_total_long_pr = np.cumprod(h_rev_np_long_pr)\n","      h_rev_long_wr = len(h_rev_np_long_pr[h_rev_np_long_pr > 1]) / len(h_rev_np_long_pr[h_rev_np_long_pr != 1])\n","\n","      # plt.subplot(122)\n","      plt.subplot(236)\n","      plt.plot(h_rev_total_long_pr)\n","      plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\" % (h_rev_long_wr, np.min(h_rev_np_long_pr), h_rev_total_long_pr[-1], lvrg))\n","      \n","      plt.show()\n","      print()\n","    \n","    except Exception as e:\n","      print('error in pr plot :', e)\n","\n","    break\n","  break"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"7UqaE02l2UKH"},"source":["## period cut"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":859},"id":"4lQmJpL52VeB","executionInfo":{"status":"ok","timestamp":1628511929781,"user_tz":-540,"elapsed":6596,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"}},"outputId":"e79e7ec6-37c6-4790-9884-9ba2ff0ae152"},"source":["fee = 0.0004\n","lvrg = 5\n","lvrg = 3\n","lvrg = 2\n","\n","# cloud_shift_size = -1\n","# cloud_shift_size = 15\n","cloud_shift_size = 1\n","# cloud_shift_size = 0\n","\n","# cloud_lookback = 50\n","# cloud_lookback = 70\n","cloud_lookback = 150\n","cloud_lookback = 100\n","cloud_lookback = 69\n","# cloud_lookback = 57\n","\n","close_shift_size = 1\n","\n","\n","#       1-0. ep line = color on st min/max 조금 이내       #\n","#       1-0-1. option1. color on upper st 색출 \n","# -->   1-0-1. option2. min upper st 바로 추출\n","#       1-0-2. 색출된 st 중 min / max st 선별\n","gap = 0.0002\n","gap = 0.0001\n","gap = 0.00005\n","# gap = 0.0000\n","# gap = -0.00005\n","\n","p_qty_divider = 1.5\n","\n","cut_period = 10000\n","\n","\n","senkoua_list = ['senkou_a1', 'senkou_a2', 'senkou_a3', 'senkou_a4', 'senkou_a5']\n","senkoub_list = ['senkou_b1', 'senkou_b2', 'senkou_b3', 'senkou_b4', 'senkou_b5']\n","\n","\n","for key, res_df in res_df_dict.items():\n","\n","  # res_df = pd.read_excel(save_path + key, index_col=0)\n","\n","  print(key, \"loaded !\")\n","\n","  for senkou_a, senkou_b in zip(senkoua_list, senkoub_list):\n","\n","    \n","    cloud_top = np.max(res_df[[senkou_a, senkou_b]], axis=1)\n","    cloud_bottom = np.min(res_df[[senkou_a, senkou_b]], axis=1)\n","    \n","    # upper_ep = res_df['middle_line']\n","    # lower_ep = res_df['middle_line']\n","\n","    upper_ep = res_df['min_upper'] * (1 - gap)\n","    lower_ep = res_df['max_lower'] * (1 + gap)\n","\n","    upper_middle = (res_df['middle_line'] + res_df['min_upper']) / 2\n","    lower_middle = (res_df['middle_line'] + res_df['max_lower']) / 2\n","\n","    under_top = res_df['close'].shift(cloud_shift_size) <= cloud_top.shift(cloud_shift_size)\n","    over_bottom = res_df['close'].shift(cloud_shift_size) >= cloud_bottom.shift(cloud_shift_size)\n","    # print(\"under_top :\", under_top)\n","    # break\n","\n","    fisher_upper = 1.5\n","    fisher_lower = -1.5\n","    \n","    stoch_upper = 63\n","    stoch_lower = 37\n","    \n","    \n","    #       short = -1      #\n","    entry = np.where((res_df['close'].shift(1) <= upper_ep) & \n","                      (res_df['high'] >= upper_ep)\n","                      , -1, 0) \n","\n","    #       short = -2      #\n","    # entry = np.where((res_df['close'].shift(1) > upper_ep)\n","    #                   , -2, entry) \n","\n","    #       long = 1     #\n","    #       close.shift(1) > ep | 2nd_middle line       #\n","\n","    entry = np.where((res_df['close'].shift(1) >= lower_ep) & \n","                      (res_df['low'] <= lower_ep)\n","                      , 1, entry) \n","\n","    #       long = 2     #\n","    #       close.shift(1) > ep | 2nd_middle line       #\n","\n","    # entry = np.where((res_df['close'].shift(1) < lower_ep)\n","    #                   , 2, entry) \n","\n","\n","\n","    #       1-2. tp line = middle line 조금 이내         #    \n","    # tp_cut_ratio = 0.5\n","    tp_cut_ratio = 0.7\n","    # tp_cut_ratio = 1\n","    # tp_cut_ratio = 2\n","    # tp_cut_ratio = 3\n","\n","    short_tp = res_df['middle_line'] * (1 + gap)\n","    long_tp = res_df['middle_line'] * (1 - gap)\n","\n","    # short_tp = res_df['close'] - (res_df['middle_line'] - res_df['close']) * tp_cut_ratio\n","    # long_tp = res_df['close'] + (res_df['close'] - res_df['middle_line']) * tp_cut_ratio\n","    \n","    # short_tp = res_df['max_lower'] * (1 + gap)\n","    # long_tp = res_df['min_upper'] * (1 - gap)\n","\n","    short_tp2 = res_df['middle_line'] * (1 + gap)\n","    long_tp2 = res_df['middle_line'] * (1 - gap)\n","\n","    # short_tp = (res_df['middle_line'] + res_df['min_upper']) / 2\n","    # long_tp = (res_df['middle_line'] + res_df['max_lower']) / 2\n","\n","\n","\n","\n","    #       trading : 여기도 체결 결과에 대해 묘사함       #\n","    trade_list = []\n","    h_trade_list = []\n","    liqd_list = []\n","    short_liqd_list = []\n","    long_liqd_list = []\n","\n","    nontp_liqd_list = []\n","    nontp_short_liqd_list = []\n","    nontp_long_liqd_list = []\n","\n","    nontp_pr_list = []\n","    nontp_short_pr_list = []\n","    nontp_long_pr_list = []\n","\n","    nontp_short_indexs = []\n","    nontp_long_indexs = []\n","\n","    nontp_short_ep_list = []\n","    nontp_long_ep_list = []\n","\n","    pr_list = []\n","    long_list = []\n","    short_list = []\n","\n","    h_pr_list = []\n","    h_long_list = []\n","    h_short_list = []\n","\n","    ep_tp_list = []\n","    h_ep_tp_list = []\n","    tp_state_list = []\n","\n","    i = 0\n","    while 1:\n","    # for i in range(len(res_df)):\n","\n","\n","      # if entry[i] == -1:\n","      if entry[i] in [-1, -2]:\n","\n","        initial_i = i\n","\n","        #             ep scheduling               #\n","        # if  (res_df['close'].iloc[i] <= lower_middle.iloc[i]):\n","        #   pass\n","        # else:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","        #             distance protection           #\n","        # tp_dist = (res_df['close'].iloc[i] - short_tp.iloc[i])\n","        # cut_dist = (res_df['middle_line'].iloc[i] - res_df['close'].iloc[i])\n","        # if tp_dist / cut_dist >= tp_cut_ratio:\n","        #   pass\n","        # else:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","\n","        #               cloud const.         #   \n","        # if i < cloud_lookback:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","        # if np.sum(under_top.iloc[i + 1 - cloud_lookback:i + 1]) != cloud_lookback:\n","        # # if np.sum(under_top.iloc[i - cloud_lookback:i]) != cloud_lookback:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","\n","        #               st color const.           #\n","        # if np.sum(res_df[['minor_ST1_Trend', 'minor_ST2_Trend', 'minor_ST3_Trend']].iloc[i]) <= -1:\n","        #   pass\n","        # else:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","        #               sar const.            #\n","        # if res_df['sar2'].iloc[i] > res_df['high'].iloc[i] and res_df['sar3'].iloc[i] > res_df['high'].iloc[i]:\n","        #   pass\n","        # else:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","\n","        #               limit waiting const.             #\n","        # entry_done = False\n","        # for e_j in range(i + 1, len(res_df)):\n","\n","        #   #             Todo            #\n","        #   #             1. ep 설정\n","        #   #             2. limit 대기 시간 설정\n","        #   if res_df['high'].iloc[e_j] >= upper_ep.iloc[initial_i]:\n","        #     entry_done = True\n","        #     # print(\"e_j :\", e_j)\n","        #     break\n","\n","        #   if res_df['close'].iloc[e_j] > res_df['middle_line'].iloc[e_j]:\n","        #     break\n","\n","        # i = e_j\n","        # # print(\"i = e_j :\", i)\n","\n","\n","        # if entry_done:\n","        #   pass\n","        # else:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","        \n","        temp_tp_list = []\n","        remain_tp = 2\n","        hedge_cnt = 1\n","        h_ep, h_tp = None, None\n","        h_i, h_j = None, None\n","        trade_done = False\n","        \n","        for j in range(i + 1, len(res_df)):\n","\n","          \n","          # -------------- hedge only once -------------- #\n","          #             일단, h_quantity 는 초기 진입과 동일하게 설정         #\n","          # if res_df['high'].iloc[j] >= res_df['minor_ST2_Up'].iloc[j] and hedge_cnt == 1:\n","          # if res_df['close'].iloc[j] >= res_df['minor_ST2_Up'].iloc[j] and hedge_cnt == 1:\n","          # if res_df['close'].iloc[j] >= res_df['minor_ST3_Up'].iloc[j] and hedge_cnt == 1:\n","\n","          #   h_ep = res_df['close'].iloc[j]\n","          #   hedge_cnt -= 1\n","          #   h_i = j\n","\n","\n","          # -------------- sub tp -------------- #\n","          # if res_df['low'].iloc[j] <= short_tp2.iloc[j] and remain_tp == 2:\n","          # # if res_df['low'].iloc[j] <= short_tp2.iloc[j] <= res_df['high'].iloc[j]: --> 이건 잘못되었음\n","\n","          #   # trade_done = True # <-- sub tp 에는 trade_done 을 주지 않음 !\n","          #   remain_tp -= 1\n","\n","          #   #         dynamic tp        #\n","          #   if short_tp2.iloc[j] != short_tp2.iloc[j - 1]:\n","\n","          #     #   tp limit 이 불가한 경우 = open 이 이미, tp 를 넘은 경우 # \n","          #     if res_df['open'].iloc[j] < short_tp2.iloc[j]:\n","\n","          #       # tp = short_tp2.iloc[j]\n","          #       tp = res_df['open'].iloc[j]\n","          #       # tp_state_list.append(\"d-open\")\n","\n","          #     #   tp limit 이 가능한 경우 = open 이 아직, tp 를 넘지 않은 경우 # \n","          #     else:\n","\n","          #       tp = short_tp2.iloc[j]\n","          #       # tp = res_df['open'].iloc[j]\n","          #       # tp_state_list.append(\"d-short_tp2\")\n","\n","          #   #         static tp         #\n","          #   else:\n","              \n","          #     #   tp limit 이 불가한 경우 = open 이 이미, tp 를 넘은 경우 # \n","          #     #   non_inversion 의 경우, short_tp2 가 가능함   #\n","\n","          #     if res_df['open'].iloc[j] < short_tp2.iloc[j]:\n","\n","          #       tp = short_tp2.iloc[j]\n","          #       # tp = res_df['open'].iloc[j]\n","          #       # tp_state_list.append(\"s-short_tp2\")\n","\n","          #     #   tp limit 이 가능한 경우 = open 이 아직, tp 를 넘지 않은 경우 # \n","          #     else:\n","\n","          #       tp = short_tp2.iloc[j]\n","          #       # tp = res_df['open'].iloc[j]\n","          #       # tp_state_list.append(\"s-short_tp2\")   \n","\n","          #   temp_tp_list.append(tp)  \n","\n","\n","          # -------------- ultimate tp -------------- #\n","          #               1. by price line             #\n","          if res_df['low'].iloc[j] <= short_tp.iloc[initial_i]: # we use static tp now\n","          # if res_df['low'].iloc[j] <= short_tp.iloc[j]:\n","          # if res_df['low'].iloc[j] <= short_tp.iloc[j] <= res_df['high'].iloc[j]: --> 이건 잘못되었음\n","\n","            trade_done = True\n","\n","            #         dynamic tp        #\n","            if 0:\n","            # if short_tp.iloc[j] != short_tp.iloc[j - 1]:\n","\n","              #   tp limit 이 불가한 경우 = open 이 이미, tp 를 넘은 경우 # \n","              # if res_df['open'].iloc[j] < short_tp.iloc[initial_i]:\n","              if res_df['open'].iloc[j] < short_tp.iloc[j]:\n","\n","                # tp = short_tp.iloc[initial_i]\n","                tp = res_df['open'].iloc[j]\n","                tp_state_list.append(\"d-short_open\")\n","\n","              #   tp limit 이 가능한 경우 = open 이 아직, tp 를 넘지 않은 경우 # \n","              else:\n","\n","                # tp = short_tp.iloc[initial_i]\n","                tp = short_tp.iloc[j]\n","                # tp = res_df['open'].iloc[j]\n","                tp_state_list.append(\"d-short_tp\")\n","\n","            #         static tp         #\n","            else:\n","              \n","              #   tp limit 이 불가한 경우 = open 이 이미, tp 를 넘은 경우 # \n","              #   non_inversion 의 경우, short_tp 가 가능함   #\n","\n","              if res_df['open'].iloc[j] < short_tp.iloc[initial_i]:\n","              # if res_df['open'].iloc[j] < short_tp.iloc[j]:\n","\n","                tp = short_tp.iloc[initial_i]\n","                # tp = short_tp.iloc[j]\n","                # tp = res_df['open'].iloc[j]\n","                tp_state_list.append(\"s-short_tp\")\n","\n","              #   tp limit 이 가능한 경우 = open 이 아직, tp 를 넘지 않은 경우 # \n","              else:\n","\n","                tp = short_tp.iloc[initial_i]\n","                # tp = short_tp.iloc[j]\n","                # tp = res_df['open'].iloc[j]\n","                tp_state_list.append(\"s-short_tp\")   \n","\n","            temp_tp_list.append(tp)     \n","\n","\n","          #           2. by signal        #\n","          # if entry[j] == 1:\n","            \n","          #   tp = res_df['close'].iloc[j]\n","          #   # tp = res_df['open'].iloc[j]\n","          #   tp_state_list.append(\"close tp\")\n","          #   trade_done = True\n","\n","          #   temp_tp_list.append(tp) \n","\n","                  \n","          # -------------- cut -------------- #\n","          # elif res_df['macd_hist3'].iloc[j] > 0:  #  macd cut\n","          # elif res_df['macd_hist3'].iloc[i] < 0 and res_df['macd_hist3'].iloc[j] > 0:\n","          # elif res_df['close'].iloc[j] > res_df['middle_line'].iloc[j]:            \n","          elif j - initial_i >= cut_period:\n","\n","            tp = res_df['close'].iloc[j]\n","            # tp = res_df['open'].iloc[j]\n","            tp_state_list.append(\"short close_cut\")\n","            trade_done = True\n","\n","            temp_tp_list.append(tp) \n","\n","\n","          # -------------- non tp -------------- #\n","          elif j == len(res_df) - 1:\n","            trade_done = True\n","            tp = res_df['close'].iloc[j]\n","          \n","\n","\n","          # -------------- append trade data -------------- #\n","          if trade_done:\n","\n","            if entry[initial_i] == -1:\n","              # ep = res_df['close'].iloc[initial_i]\n","              ep = upper_ep.iloc[initial_i]\n","            else:\n","              ep = res_df['open'].iloc[initial_i]\n","              # ep = upper_ep.iloc[initial_i]\n","              # ep = res_df['close'].iloc[initial_i - 1]     \n","\n","            #       Todo      #\n","            #        1. len(temp_tp_list) 에 대응하는 qty_list 를 만들어야함    #\n","            #        2. temp_pr_list 를 만들어 총합 + 1 을 pr_list 에 저장      #\n","            #        2-1. temp_pr = sum((ep / temp_tp_list[i] - fee - 1) * qty_list[i])   #\n","            #        3. temp_pr_list 의 첫 tp 에는 r_qty 를 할당함        #\n","            qty_list = []\n","            temp_pr_list = []\n","            r_qty = 1\n","            for q_i in range(len(temp_tp_list) - 1, -1, -1):\n","\n","              if len(temp_tp_list) == 1:\n","                temp_qty = r_qty\n","              else:\n","                if q_i !=0:\n","                  temp_qty = r_qty / p_qty_divider\n","                else:\n","                  temp_qty = r_qty\n","\n","              temp_pr = (ep / temp_tp_list[q_i] - fee - 1) * temp_qty\n","              r_qty -= temp_qty\n","\n","              temp_pr_list.append(temp_pr)\n","              qty_list.append(temp_qty)\n","\n","            # if len(temp_pr_list) == 1:\n","            #   print(\"qty_list :\", qty_list)\n","            #   print(\"temp_pr_list :\", temp_pr_list)\n","\n","            temp_pr = sum(temp_pr_list) + 1\n","\n","            #   hedge + non_hedge pr summation    #\n","            #   hedge pr direction is opposite to the other   #\n","            hedge_pr = 1\n","            if hedge_cnt == 0:\n","\n","              #       hedge tp      #\n","              h_tp = res_df['close'].iloc[j]\n","              hedge_pr = h_tp / h_ep - fee  # hedge long\n","              temp_pr += hedge_pr - 1\n","              h_j = j\n","\n","            \n","            hh = max(res_df['high'].iloc[i:j + 1])\n","            short_liq = (ep / hh - fee - 1) * lvrg + 1\n","\n","            if j != len(res_df) - 1:\n","\n","              ep_tp_list.append((ep, temp_tp_list))  \n","              trade_list.append([initial_i, i, j])\n","\n","              liqd_list.append(short_liq)\n","              short_liqd_list.append(short_liq)\n","\n","              h_ep_tp_list.append((h_ep, h_tp))        \n","              h_trade_list.append([initial_i, h_i, h_j])                \n","\n","              pr_list.append(temp_pr)\n","              short_list.append(temp_pr)\n","\n","              h_pr_list.append(hedge_pr)\n","              h_short_list.append(hedge_pr)\n","\n","              i = j\n","              break\n","\n","            else:\n","          \n","              #         tp 미체결 survey        #\n","              nontp_liqd_list.append(short_liq)\n","              nontp_short_liqd_list.append(short_liq)\n","              nontp_short_indexs.append(i)\n","              nontp_short_ep_list.append(ep)\n","\n","              nontp_short_pr = (ep / tp - fee - 1) * lvrg + 1\n","              nontp_pr_list.append(nontp_short_pr)\n","              nontp_short_pr_list.append(nontp_short_pr)\n","\n","\n","\n","      #                  long  phase                #\n","      # elif entry[i] == 1:\n","      elif entry[i] in [1, 2]:\n","\n","        initial_i = i\n","\n","        #               ep scheduling                 #\n","        # if res_df['close'].iloc[i] >= upper_middle.iloc[i]:\n","        #   pass\n","        # else:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","\n","        #             distance protection           #\n","        # tp_dist = (long_tp.iloc[i] - res_df['close'].iloc[i])\n","        # cut_dist = (res_df['close'].iloc[i] - res_df['middle_line'].iloc[i])\n","        # if tp_dist / cut_dist >= tp_cut_ratio:\n","        #   pass\n","        # else:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","\n","        #               cloud const.          #     \n","        # if i < cloud_lookback:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","        # if np.sum(over_bottom.iloc[i + 1 - cloud_lookback:i + 1]) != cloud_lookback:\n","        # # if np.sum(over_bottom.iloc[i - cloud_lookback:i]) != cloud_lookback:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue  \n","\n","        # #              st color const.           #\n","        # if np.sum(res_df[['minor_ST1_Trend', 'minor_ST2_Trend', 'minor_ST3_Trend']].iloc[i]) >= 1:\n","        #   pass\n","        # else:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","        #               sar const.            #\n","        # if res_df['sar2'].iloc[i] < res_df['low'].iloc[i] and res_df['sar3'].iloc[i] < res_df['low'].iloc[i]:\n","        #   pass\n","        # else:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","        #               limit waiting const.             #\n","        # entry_done = False\n","        # for e_j in range(i + 1, len(res_df)):\n","\n","        #   #             Todo            #\n","        #   #             1. ep 설정\n","        #   #             2. limit 대기 시간 설정\n","        #   if res_df['low'].iloc[e_j] <= upper_ep.iloc[initial_i]:\n","        #     entry_done = True\n","        #     break\n","\n","        #   if res_df['close'].iloc[e_j] < res_df['middle_line'].iloc[e_j]:     \n","        #     break\n","\n","        # i = e_j\n","\n","\n","        # if entry_done:\n","        #   pass\n","        # else:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","\n","        temp_tp_list =[]\n","        remain_tp = 2\n","        hedge_cnt = 1\n","        h_ep, h_tp = None, None        \n","        h_i, h_j = None, None        \n","        trade_done = False\n","\n","        for j in range(i + 1, len(res_df)):        \n","\n","          # -------------- hedge only once -------------- #\n","          #             일단, h_quantity 는 초기 진입과 동일하게 설정         #\n","          # if res_df['low'].iloc[j] <= res_df['minor_ST2_Down'].iloc[j] and hedge_cnt == 1:\n","          # if res_df['close'].iloc[j] <= res_df['minor_ST2_Down'].iloc[j] and hedge_cnt == 1:\n","          # if res_df['close'].iloc[j] <= res_df['minor_ST3_Down'].iloc[j] and hedge_cnt == 1:\n","\n","          #   h_ep = res_df['close'].iloc[j]\n","          #   hedge_cnt -= 1\n","          #   h_i = j\n","\n","\n","          # -------------- sub tp --------------  #\n","          # if res_df['high'].iloc[j] >= long_tp2.iloc[j] and remain_tp == 2:\n","\n","          #   # trade_done = True\n","          #   remain_tp -= 1\n","\n","          #   #         dynamic tp        #\n","          #   if long_tp2.iloc[j] != long_tp2.iloc[j - 1]:\n","\n","          #     #   tp limit 이 불가한 경우 = open 이 이미, tp 를 넘은 경우 # \n","          #     if res_df['open'].iloc[j] >= long_tp2.iloc[j]:\n","\n","          #       # tp = long_tp2.iloc[j]\n","          #       tp = res_df['open'].iloc[j]\n","          #       # tp_state_list.append(\"d-open\")\n","\n","              \n","          #     #   tp limit 이 가능한 경우 = open 이 아직, tp 를 넘지 않은 경우 # \n","          #     else:\n","                \n","          #       tp = long_tp2.iloc[j]\n","          #       # tp = res_df['open'].iloc[j]\n","          #       # tp_state_list.append(\"d-long_tp2\")\n","\n","          #   #         static tp         #\n","          #   else:\n","\n","          #     #   tp limit 이 불가한 경우 = open 이 이미, tp 를 넘은 경우 # \n","          #     #   non_inversion 의 경우, short_tp 가 가능함   #\n","\n","          #     if res_df['open'].iloc[j] >= long_tp2.iloc[j]:\n","\n","          #       tp = long_tp2.iloc[j]\n","          #       # tp = res_df['open'].iloc[j]\n","          #       # tp_state_list.append(\"s-long_tp2\")\n","\n","              \n","          #     #   tp limit 이 가능한 경우 = open 이 아직, tp 를 넘지 않은 경우 # \n","          #     else:\n","                \n","          #       tp = long_tp2.iloc[j]\n","          #       # tp = res_df['open'].iloc[j]\n","          #       # tp_state_list.append(\"s-long_tp2\")       \n","            \n","          #   temp_tp_list.append(tp)  \n","\n","\n","          # -------------- ultimate tp -------------- #\n","          #            1. by price line            #\n","          if res_df['high'].iloc[j] >= long_tp.iloc[initial_i]:\n","          # if res_df['high'].iloc[j] >= long_tp.iloc[j]:\n","\n","            trade_done = True\n","\n","            #         dynamic tp        #\n","            if 0:\n","            # if long_tp.iloc[j] != long_tp.iloc[j - 1]:\n","\n","              #   tp limit 이 불가한 경우 = open 이 이미, tp 를 넘은 경우 # \n","              # if res_df['open'].iloc[j] >= long_tp.iloc[initial_i]:\n","              if res_df['open'].iloc[j] >= long_tp.iloc[j]:\n","\n","                # tp = long_tp.iloc[initial_i]\n","                tp = res_df['open'].iloc[j]\n","                tp_state_list.append(\"d-long_open\")\n","\n","              \n","              #   tp limit 이 가능한 경우 = open 이 아직, tp 를 넘지 않은 경우 # \n","              else:\n","                \n","                # tp = long_tp.iloc[initial_i]\n","                tp = long_tp.iloc[j]\n","                # tp = res_df['open'].iloc[j]\n","                tp_state_list.append(\"d-long_tp\")\n","\n","            #         static tp         #\n","            else:\n","\n","              #   tp limit 이 불가한 경우 = open 이 이미, tp 를 넘은 경우 # \n","              #   non_inversion 의 경우, short_tp 가 가능함   #\n","\n","              # if res_df['open'].iloc[j] >= long_tp.iloc[j]:\n","              if res_df['open'].iloc[j] >= long_tp.iloc[initial_i]:\n","\n","                tp = long_tp.iloc[initial_i]\n","                # tp = long_tp.iloc[j]\n","                # tp = res_df['open'].iloc[j]\n","                tp_state_list.append(\"s-long_tp\")\n","\n","              \n","              #   tp limit 이 가능한 경우 = open 이 아직, tp 를 넘지 않은 경우 # \n","              else:\n","                \n","                tp = long_tp.iloc[initial_i]\n","                # tp = long_tp.iloc[j]\n","                # tp = res_df['open'].iloc[j]\n","                tp_state_list.append(\"s-long_tp\")         \n","            \n","            temp_tp_list.append(tp)\n","\n","\n","          #           2. by signal        #\n","          # if entry[j] == -1:\n","            \n","          #   tp = res_df['close'].iloc[j]\n","          #   # tp = res_df['open'].iloc[j]\n","          #   tp_state_list.append(\"close tp\")\n","          #   trade_done = True\n","\n","          #   temp_tp_list.append(tp) \n","\n","\n","\n","          # -------------- cut -------------- #\n","          # elif res_df['macd_hist3'].iloc[j] < 0:\n","          # # elif res_df['macd_hist3'].iloc[i] > 0 and res_df['macd_hist3'].iloc[j] < 0:\n","          # elif res_df['close'].iloc[j] < res_df['middle_line'].iloc[j]:        \n","          elif j - initial_i >= cut_period:    \n","\n","            tp = res_df['close'].iloc[j]\n","            # tp = res_df['open'].iloc[j]\n","            tp_state_list.append(\"long close_cut\")\n","            trade_done = True\n","\n","            temp_tp_list.append(tp)\n","\n","          \n","          # -------------- non tp -------------- #\n","          elif j == len(res_df) - 1:\n","            trade_done = True\n","            tp = res_df['close'].iloc[j]\n","\n","\n","          if trade_done:\n","\n","            if entry[initial_i] == 1:\n","              # ep = res_df['close'].iloc[initial_i]\n","              ep = lower_ep.iloc[initial_i]\n","            else:\n","              # ep = lower_ep.iloc[i]\n","              ep = res_df['open'].iloc[initial_i]\n","              # ep = res_df['close'].iloc[initial_i - 1]\n","\n","            qty_list = []\n","            temp_pr_list = []\n","            r_qty = 1\n","            for q_i in range(len(temp_tp_list) - 1, -1, -1):\n","\n","              if len(temp_tp_list) == 1:\n","                temp_qty = r_qty\n","              else:\n","                if q_i !=0:\n","                  temp_qty = r_qty / p_qty_divider\n","                else:\n","                  temp_qty = r_qty\n","\n","              temp_pr = (temp_tp_list[q_i] / ep - fee - 1) * temp_qty\n","              r_qty -= temp_qty\n","\n","              temp_pr_list.append(temp_pr)\n","\n","            temp_pr = sum(temp_pr_list) + 1\n","\n","            #   hedge + non_hedge pr summation    #\n","            #   hedge pr direction is opposite to the other   #\n","            hedge_pr = 1\n","            if hedge_cnt == 0:\n","\n","              #       hedge tp      #\n","              h_tp = res_df['close'].iloc[j]\n","              hedge_pr = h_ep / h_tp - fee  # hedge short\n","              temp_pr += hedge_pr - 1\n","              h_j = j\n","\n","\n","            ll = min(res_df['low'].iloc[i:j + 1])\n","            long_liq = (ll / ep - fee - 1) * lvrg + 1\n","\n","            if j != len(res_df) - 1:\n","\n","              ep_tp_list.append((ep, temp_tp_list))\n","              trade_list.append([initial_i, i, j])\n","\n","              liqd_list.append(long_liq)\n","              long_liqd_list.append(long_liq)\n","\n","              h_ep_tp_list.append((h_ep, h_tp))        \n","              h_trade_list.append([initial_i, h_i, h_j])                \n","\n","              pr_list.append(temp_pr)\n","              long_list.append(temp_pr)\n","\n","              h_pr_list.append(hedge_pr)\n","              h_long_list.append(hedge_pr)                    \n","\n","              i = j\n","              break\n","            \n","            else:\n","          \n","              #         tp 미체결 survey        #\n","              nontp_liqd_list.append(long_liq)\n","              nontp_long_liqd_list.append(long_liq)\n","              nontp_long_indexs.append(i)\n","              nontp_long_ep_list.append(ep)\n","              \n","              nontp_long_pr = (tp / ep - fee - 1) * lvrg + 1\n","              nontp_pr_list.append(nontp_long_pr)\n","              nontp_long_pr_list.append(nontp_long_pr)\n","\n","\n","      i += 1\n","      if i >= len(res_df):\n","        break\n","\n","\n","\n","    # -------------------- result analysis -------------------- #\n","    try:\n","      plt.figure(figsize=(16, 12))\n","      plt.suptitle(key)\n","\n","      np_pr = (np.array(pr_list) - 1) * lvrg + 1\n","\n","      total_pr = np.cumprod(np_pr)\n","      wr = len(np_pr[np_pr > 1]) / len(np_pr[np_pr != 1])\n","\n","      # plt.subplot(121)\n","      plt.subplot(231)\n","      plt.plot(total_pr)\n","      if len(nontp_liqd_list) != 0:\n","        plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\\nliqd : %.2f\\nnontp_liqd_cnt : %s\\nnontp_liqd : %.2f\\nontp_liqd_pr : %.2f\" \n","                  % (wr, np.min(np_pr), total_pr[-1], lvrg, min(liqd_list), len(nontp_liqd_list), min(nontp_liqd_list), min(nontp_pr_list)))\n","      else:\n","        plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\\nliqd : %.2f\\nnontp_liqd_cnt : %s\" \n","                  % (wr, np.min(np_pr), total_pr[-1], lvrg, min(liqd_list), len(nontp_liqd_list)))\n","      # plt.show()\n","\n","      #         short only      #\n","      np_short_pr = (np.array(short_list) - 1) * lvrg + 1\n","\n","      total_short_pr = np.cumprod(np_short_pr)\n","      short_wr = len(np_short_pr[np_short_pr > 1]) / len(np_short_pr[np_short_pr != 1])\n","      \n","      plt.subplot(232)\n","      plt.plot(total_short_pr)\n","      if len(nontp_short_liqd_list) != 0:   \n","\n","        max_nontp_short_term = len(res_df) - nontp_short_indexs[0]\n","        \n","        plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\\nliqd : %.2f\\nnontp_short_liqd_cnt : %s\\nnontp_short_liqd : %.2f\\nontp_short_liqd_pr : %.2f\\nmax_nontp_short_term : %s\"  \n","                  % (short_wr, np.min(np_short_pr), total_short_pr[-1], lvrg, min(short_liqd_list), \n","                     len(nontp_short_liqd_list), min(nontp_short_liqd_list), min(nontp_short_pr_list), max_nontp_short_term))\n","      else:\n","        plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\\nliqd : %.2f\\nnontp_short_liqd_cnt : %s\"  \n","                  % (short_wr, np.min(np_short_pr), total_short_pr[-1], lvrg, min(short_liqd_list), len(nontp_short_liqd_list)))\n","\n","      #         long only      #\n","      np_long_pr = (np.array(long_list) - 1) * lvrg + 1\n","\n","      total_long_pr = np.cumprod(np_long_pr)\n","      long_wr = len(np_long_pr[np_long_pr > 1]) / len(np_long_pr[np_long_pr != 1])\n","      \n","      plt.subplot(233)\n","      plt.plot(total_long_pr)\n","      if len(nontp_long_liqd_list) != 0:\n","\n","        max_nontp_long_term = len(res_df) - nontp_long_indexs[0]\n","\n","        plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\\nliqd : %.2f\\nnontp_long_liqd_cnt : %s\\nnontp_long_liqd : %.2f\\nontp_long_liqd_pr : %.2f\\nmax_nontp_long_term : %s\"   \n","                  % (long_wr, np.min(np_long_pr), total_long_pr[-1], lvrg, min(long_liqd_list), \n","                     len(nontp_long_liqd_list), min(nontp_long_liqd_list), min(nontp_long_pr_list), max_nontp_long_term))\n","      else:\n","        plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\\nliqd : %.2f\\nnontp_long_liqd_cnt : %s\"   \n","                  % (long_wr, np.min(np_long_pr), total_long_pr[-1], lvrg, min(long_liqd_list), len(nontp_long_liqd_list)))\n","\n","\n","      #     reversion adjustment      #\n","      rev_np_pr = (1 / (np.array(pr_list) + fee) - fee - 1) * lvrg + 1\n","          \n","      rev_total_pr = np.cumprod(rev_np_pr)\n","      rev_wr = len(rev_np_pr[rev_np_pr > 1]) / len(rev_np_pr[rev_np_pr != 1])\n","\n","      # plt.subplot(122)\n","      plt.subplot(234)\n","      plt.plot(rev_total_pr)\n","      plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\" % (rev_wr, np.min(rev_np_pr), rev_total_pr[-1], lvrg))\n","\n","      #         short       #\n","      rev_np_short_pr = (1 / (np.array(short_list) + fee) - fee - 1) * lvrg + 1\n","          \n","      rev_total_short_pr = np.cumprod(rev_np_short_pr)\n","      rev_short_wr = len(rev_np_short_pr[rev_np_short_pr > 1]) / len(rev_np_short_pr[rev_np_short_pr != 1])\n","\n","      # plt.subplot(122)\n","      plt.subplot(235)\n","      plt.plot(rev_total_short_pr)\n","      plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\" % (rev_short_wr, np.min(rev_np_short_pr), rev_total_short_pr[-1], lvrg))\n","\n","      #         long       #\n","      rev_np_long_pr = (1 / (np.array(long_list) + fee) - fee - 1) * lvrg + 1\n","          \n","      rev_total_long_pr = np.cumprod(rev_np_long_pr)\n","      rev_long_wr = len(rev_np_long_pr[rev_np_long_pr > 1]) / len(rev_np_long_pr[rev_np_long_pr != 1])\n","\n","      # plt.subplot(122)\n","      plt.subplot(236)\n","      plt.plot(rev_total_long_pr)\n","      plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\" % (rev_long_wr, np.min(rev_np_long_pr), rev_total_long_pr[-1], lvrg))\n","      \n","      plt.show()\n","\n","      h_np_pr = (np.array(h_pr_list) - 1) * lvrg + 1\n","      h_rev_np_pr = (1 / (np.array(h_pr_list) + fee) - fee - 1) * lvrg + 1    # define, for plot_check below cell\n","\n","      # --------------------- h pr plot --------------------- #\n","      if len(h_np_pr[h_np_pr != 1]) != 0:\n","\n","        plt.figure(figsize=(16, 12))\n","        plt.suptitle(key + \" hedge\")\n","\n","        h_total_pr = np.cumprod(h_np_pr)\n","        h_wr = len(h_np_pr[h_np_pr > 1]) / len(h_np_pr[h_np_pr != 1])\n","\n","        # plt.subplot(121)\n","        plt.subplot(231)\n","        plt.plot(h_total_pr)\n","        plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\" % (h_wr, np.min(h_np_pr), h_total_pr[-1], lvrg))\n","        # plt.show()\n","\n","        #         short only      #\n","        h_np_short_pr = (np.array(h_short_list) - 1) * lvrg + 1\n","\n","        h_total_short_pr = np.cumprod(h_np_short_pr)\n","        h_short_wr = len(h_np_short_pr[h_np_short_pr > 1]) / len(h_np_short_pr[h_np_short_pr != 1])\n","        \n","        plt.subplot(232)\n","        plt.plot(h_total_short_pr)\n","        plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\" % (h_short_wr, np.min(h_np_short_pr), h_total_short_pr[-1], lvrg))\n","\n","        #         long only      #\n","        h_np_long_pr = (np.array(h_long_list) - 1) * lvrg + 1\n","\n","        h_total_long_pr = np.cumprod(h_np_long_pr)\n","        h_long_wr = len(h_np_long_pr[h_np_long_pr > 1]) / len(h_np_long_pr[h_np_long_pr != 1])\n","        \n","        plt.subplot(233)\n","        plt.plot(h_total_long_pr)\n","        plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\" % (h_long_wr, np.min(h_np_long_pr), h_total_long_pr[-1], lvrg))\n","\n","\n","        #     reversion adjustment      #\n","            \n","        h_rev_total_pr = np.cumprod(h_rev_np_pr)\n","        h_rev_wr = len(h_rev_np_pr[h_rev_np_pr > 1]) / len(h_rev_np_pr[h_rev_np_pr != 1])\n","\n","        # plt.subplot(122)\n","        plt.subplot(234)\n","        plt.plot(h_rev_total_pr)\n","        plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\" % (h_rev_wr, np.min(h_rev_np_pr), h_rev_total_pr[-1], lvrg))\n","\n","        #         short       #\n","        h_rev_np_short_pr = (1 / (np.array(h_short_list) + fee) - fee - 1) * lvrg + 1\n","            \n","        h_rev_total_short_pr = np.cumprod(h_rev_np_short_pr)\n","        h_rev_short_wr = len(h_rev_np_short_pr[h_rev_np_short_pr > 1]) / len(h_rev_np_short_pr[h_rev_np_short_pr != 1])\n","\n","        # plt.subplot(122)\n","        plt.subplot(235)\n","        plt.plot(h_rev_total_short_pr)\n","        plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\" % (h_rev_short_wr, np.min(h_rev_np_short_pr), h_rev_total_short_pr[-1], lvrg))\n","\n","        #         long       #\n","        h_rev_np_long_pr = (1 / (np.array(h_long_list) + fee) - fee - 1) * lvrg + 1\n","            \n","        h_rev_total_long_pr = np.cumprod(h_rev_np_long_pr)\n","        h_rev_long_wr = len(h_rev_np_long_pr[h_rev_np_long_pr > 1]) / len(h_rev_np_long_pr[h_rev_np_long_pr != 1])\n","\n","        # plt.subplot(122)\n","        plt.subplot(236)\n","        plt.plot(h_rev_total_long_pr)\n","        plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\" % (h_rev_long_wr, np.min(h_rev_np_long_pr), h_rev_total_long_pr[-1], lvrg))\n","        \n","        plt.show()\n","          \n","    except Exception as e:\n","      print('error in pr plot :', e)   \n","    \n","\n","    print()\n","\n","    break # indi. loop\n","  break # pair loop"],"execution_count":null,"outputs":[{"output_type":"stream","text":["2021-06-30 ETHUSDT_fisher_backi2.xlsx loaded !\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1152x864 with 6 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}},{"output_type":"stream","text":["\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"oQtf6eu5jNXK"},"source":["## sma"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":864},"id":"MXfqfaXEjRk4","executionInfo":{"status":"ok","timestamp":1628761190597,"user_tz":-540,"elapsed":7148,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"}},"outputId":"422fc189-2f86-4c5f-f692-5ee10d9504da"},"source":["fee = 0.0004\n","lvrg = 5\n","lvrg = 3\n","lvrg = 2\n","\n","# cloud_shift_size = -1\n","# cloud_shift_size = 15\n","cloud_shift_size = 1\n","# cloud_shift_size = 0\n","\n","# cloud_lookback = 50\n","# cloud_lookback = 70\n","cloud_lookback = 30\n","# cloud_lookback = 57\n","\n","sma_lookback = 100\n","# sma_lookback = 100\n","\n","sma_shift_size = 1\n","close_shift_size = 1\n","\n","sma = 'sma4'\n","\n","\n","#       1-0. ep line = color on st min/max 조금 이내       #\n","#       1-0-1. option1. color on upper st 색출 \n","# -->   1-0-1. option2. min upper st 바로 추출\n","#       1-0-2. 색출된 st 중 min / max st 선별\n","gap = 0.0002\n","gap = 0.0001\n","gap = 0.00005\n","# gap = 0.0000\n","# gap = -0.00005\n","\n","p_qty_divider = 1.5\n","# sma_period = 250\n","sma_period = 100\n","\n","static_tp = 1\n","\n","fisher_upper = 1.5\n","fisher_lower = -1.5\n","\n","stoch_upper = 63\n","stoch_lower = 37\n","\n","# tp_cut_ratio = 0.5\n","tp_cut_ratio = 0.7\n","# tp_cut_ratio = 1\n","# tp_cut_ratio = 2\n","# tp_cut_ratio = 3\n","\n","senkoua_list = ['senkou_a1', 'senkou_a2', 'senkou_a3', 'senkou_a4', 'senkou_a5']\n","senkoub_list = ['senkou_b1', 'senkou_b2', 'senkou_b3', 'senkou_b4', 'senkou_b5']\n","\n","\n","for key, res_df in res_df_dict.items():\n","\n","  # res_df = pd.read_excel(save_path + key, index_col=0)\n","  fourth_df = pd.read_excel(date_path4 + key.replace(\"_4h1d_backi2\", \"\"), index_col=0)\n","\n","  print(key, \"loaded !\")\n","\n","  # for senkou_a, senkou_b in zip(senkoua_list, senkoub_list): \n","  # for sma4_period in range(5, 30, 2):\n","  for sma4_period in range(13, 14, 2):\n","\n","    print(\"sma4_period :\", sma4_period)\n","\n","    senkou_a, senkou_b = 'senkou_a1', 'senkou_b1'\n","        \n","    # upper_ep = res_df['middle_line']\n","    # lower_ep = res_df['middle_line']\n","\n","    upper_ep = res_df['min_upper'] * (1 - gap)\n","    lower_ep = res_df['max_lower'] * (1 + gap)\n","\n","    upper_middle = (res_df['middle_line'] + res_df['min_upper']) / 2\n","    lower_middle = (res_df['middle_line'] + res_df['max_lower']) / 2\n","    \n","    # print(\"under_top :\", under_top)\n","    # break\n","\n","    # sma = res_df['close'].rolling(300).mean()\n","    res_df['sma'] = res_df['close'].rolling(sma_period).mean()  \n","    # print(res_df['sma5'].tail())\n","\n","    if \"sma4\" in res_df.columns:\n","      res_df.drop(\"sma4\", axis=1, inplace=True)\n","\n","    fourth_df['sma'] = fourth_df['close'].rolling(sma4_period).mean()\n","    res_df = res_df.join(pd.DataFrame(index=res_df.index, data=to_lower_tf(res_df, fourth_df, [-1]), columns=['sma4']))\n","    \n","    #       short = -1      #\n","    entry = np.where((res_df['close'].shift(1) <= upper_ep) & \n","                      (res_df['high'] >= upper_ep)\n","                      , -1, 0) \n","\n","    #       short = -2      #\n","    # entry = np.where((res_df['close'].shift(1) > upper_ep)\n","    #                   , -2, entry) \n","\n","    #       long = 1     #\n","    #       close.shift(1) > ep | 2nd_middle line       #\n","\n","    entry = np.where((res_df['close'].shift(1) >= lower_ep) & \n","                      (res_df['low'] <= lower_ep)\n","                      , 1, entry) \n","\n","    #       long = 2     #\n","    #       close.shift(1) > ep | 2nd_middle line       #\n","\n","    # entry = np.where((res_df['close'].shift(1) < lower_ep)\n","    #                   , 2, entry) \n","\n","\n","\n","    #       1-2. tp line = middle line 조금 이내         #    \n","    short_tp = res_df['middle_line'] * (1 + gap)\n","    long_tp = res_df['middle_line'] * (1 - gap)\n","\n","    # short_tp = res_df['close'] - (res_df['middle_line'] - res_df['close']) * tp_cut_ratio\n","    # long_tp = res_df['close'] + (res_df['close'] - res_df['middle_line']) * tp_cut_ratio\n","    \n","    # short_tp = res_df['max_lower'] * (1 + gap)\n","    # long_tp = res_df['min_upper'] * (1 - gap)\n","\n","    short_tp2 = res_df['middle_line'] * (1 + gap)\n","    long_tp2 = res_df['middle_line'] * (1 - gap)\n","\n","    # short_tp = (res_df['middle_line'] + res_df['min_upper']) / 2\n","    # long_tp = (res_df['middle_line'] + res_df['max_lower']) / 2\n","\n","\n","    #       trading : 여기도 체결 결과에 대해 묘사함       #\n","    trade_list = []\n","    h_trade_list = []\n","    liqd_list = []\n","    short_liqd_list = []\n","    long_liqd_list = []\n","\n","    nontp_liqd_list = []\n","    nontp_short_liqd_list = []\n","    nontp_long_liqd_list = []\n","\n","    nontp_pr_list = []\n","    nontp_short_pr_list = []\n","    nontp_long_pr_list = []\n","\n","    nontp_short_indexs = []\n","    nontp_long_indexs = []\n","\n","    nontp_short_ep_list = []\n","    nontp_long_ep_list = []\n","\n","    pr_list = []\n","    long_list = []\n","    short_list = []\n","\n","    h_pr_list = []\n","    h_long_list = []\n","    h_short_list = []\n","\n","    ep_tp_list = []\n","    h_ep_tp_list = []\n","    tp_state_list = []\n","\n","    i = 0\n","    while 1:\n","    # for i in range(len(res_df)):\n","\n","\n","      # if entry[i] == -1:\n","      if entry[i] in [-1, -2]:\n","\n","        initial_i = i\n","\n","        #             ep scheduling               #\n","        # if  (res_df['close'].iloc[i] <= lower_middle.iloc[i]):\n","        #   pass\n","        # else:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","        #             distance protection           #\n","        # tp_dist = (res_df['close'].iloc[i] - short_tp.iloc[i])\n","        # cut_dist = (res_df['middle_line'].iloc[i] - res_df['close'].iloc[i])\n","        # if tp_dist / cut_dist >= tp_cut_ratio:\n","        #   pass\n","        # else:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","        #               sma const.            #\n","        # if res_df['close'].iloc[i] <= res_df['sma'].iloc[i]:\n","        # if upper_ep.iloc[i] <= res_df['sma'].iloc[i - 1]:\n","        # under_sma = upper_ep <= res_df['sma'].shift(sma_shift_size)\n","        # if np.sum(under_sma.iloc[i + 1 - sma_lookback:i + 1]) == sma_lookback:\n","        #   pass\n","        # else:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","        #              1d sma const.            #\n","        if res_df[sma].iloc[i] >= res_df['close'].iloc[i]:\n","          pass\n","        else:\n","          i += 1\n","          if i >= len(res_df):\n","            break\n","          continue\n","\n","\n","        #               cloud const.         #   \n","        # if i < cloud_lookback:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","        \n","        # cloud_top = np.max(res_df[[senkou_a, senkou_b]], axis=1)\n","        # under_top = res_df['close'].shift(cloud_shift_size) <= cloud_top.shift(cloud_shift_size)\n","\n","        # if np.sum(under_top.iloc[i + 1 - cloud_lookback:i + 1]) != cloud_lookback:\n","        # # if np.sum(under_top.iloc[i - cloud_lookback:i]) != cloud_lookback:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","\n","        #               st color const.           #\n","        # if np.sum(res_df[['minor_ST1_Trend', 'minor_ST2_Trend', 'minor_ST3_Trend']].iloc[i]) <= -1:\n","        #   pass\n","        # else:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","        #               sar const.            #\n","        # if res_df['sar2'].iloc[i] > res_df['high'].iloc[i] and res_df['sar3'].iloc[i] > res_df['high'].iloc[i]:\n","        #   pass\n","        # else:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","\n","        #               limit waiting const.             #\n","        # entry_done = False\n","        # for e_j in range(i + 1, len(res_df)):\n","\n","        #   #             Todo            #\n","        #   #             1. ep 설정\n","        #   #             2. limit 대기 시간 설정\n","        #   if res_df['high'].iloc[e_j] >= upper_ep.iloc[initial_i]:\n","        #     entry_done = True\n","        #     # print(\"e_j :\", e_j)\n","        #     break\n","\n","        #   if res_df['close'].iloc[e_j] > res_df['middle_line'].iloc[e_j]:\n","        #     break\n","\n","        # i = e_j\n","        # # print(\"i = e_j :\", i)\n","\n","\n","        # if entry_done:\n","        #   pass\n","        # else:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","        \n","        temp_tp_list = []\n","        remain_tp = 2\n","        hedge_cnt = 1\n","        h_ep, h_tp = None, None\n","        h_i, h_j = None, None\n","        trade_done = False\n","        \n","        for j in range(i + 1, len(res_df)):\n","          \n","          if static_tp:\n","            tp_j = initial_i\n","          else:\n","            tp_j = j\n","          \n","          # -------------- hedge only once -------------- #\n","          #             일단, h_quantity 는 초기 진입과 동일하게 설정         #\n","          # if res_df['high'].iloc[j] >= res_df['minor_ST2_Up'].iloc[j] and hedge_cnt == 1:\n","          # if res_df['close'].iloc[j] >= res_df['minor_ST2_Up'].iloc[j] and hedge_cnt == 1:\n","          # if res_df['close'].iloc[j] >= res_df['minor_ST3_Up'].iloc[j] and hedge_cnt == 1:\n","\n","          #   h_ep = res_df['close'].iloc[j]\n","          #   hedge_cnt -= 1\n","          #   h_i = j\n","\n","\n","          # -------------- sub tp -------------- #\n","          # if res_df['low'].iloc[j] <= short_tp2.iloc[j] and remain_tp == 2:\n","          # # if res_df['low'].iloc[j] <= short_tp2.iloc[j] <= res_df['high'].iloc[j]: --> 이건 잘못되었음\n","\n","          #   # trade_done = True # <-- sub tp 에는 trade_done 을 주지 않음 !\n","          #   remain_tp -= 1\n","\n","          #   #         dynamic tp        #\n","          #   if short_tp2.iloc[j] != short_tp2.iloc[j - 1]:\n","\n","          #     #   tp limit 이 불가한 경우 = open 이 이미, tp 를 넘은 경우 # \n","          #     if res_df['open'].iloc[j] < short_tp2.iloc[j]:\n","\n","          #       # tp = short_tp2.iloc[j]\n","          #       tp = res_df['open'].iloc[j]\n","          #       # tp_state_list.append(\"d-open\")\n","\n","          #     #   tp limit 이 가능한 경우 = open 이 아직, tp 를 넘지 않은 경우 # \n","          #     else:\n","\n","          #       tp = short_tp2.iloc[j]\n","          #       # tp = res_df['open'].iloc[j]\n","          #       # tp_state_list.append(\"d-short_tp2\")\n","\n","          #   #         static tp         #\n","          #   else:\n","              \n","          #     #   tp limit 이 불가한 경우 = open 이 이미, tp 를 넘은 경우 # \n","          #     #   non_inversion 의 경우, short_tp2 가 가능함   #\n","\n","          #     if res_df['open'].iloc[j] < short_tp2.iloc[j]:\n","\n","          #       tp = short_tp2.iloc[j]\n","          #       # tp = res_df['open'].iloc[j]\n","          #       # tp_state_list.append(\"s-short_tp2\")\n","\n","          #     #   tp limit 이 가능한 경우 = open 이 아직, tp 를 넘지 않은 경우 # \n","          #     else:\n","\n","          #       tp = short_tp2.iloc[j]\n","          #       # tp = res_df['open'].iloc[j]\n","          #       # tp_state_list.append(\"s-short_tp2\")   \n","\n","          #   temp_tp_list.append(tp)  \n","\n","\n","          # -------------- ultimate tp -------------- #\n","          #               1. by price line             #\n","          if res_df['low'].iloc[j] <= short_tp.iloc[tp_j]: # we use static tp now\n","          # if res_df['low'].iloc[j] <= short_tp.iloc[j]:\n","          # if res_df['low'].iloc[j] <= short_tp.iloc[j] <= res_df['high'].iloc[j]: --> 이건 잘못되었음\n","\n","            trade_done = True\n","\n","            #         dynamic tp        #\n","            # if 0:\n","            if short_tp.iloc[j] != short_tp.iloc[j - 1] and not static_tp:\n","\n","              #   tp limit 이 불가한 경우 = open 이 이미, tp 를 넘은 경우 # \n","              # if res_df['open'].iloc[j] < short_tp.iloc[initial_i]:\n","              if res_df['open'].iloc[j] < short_tp.iloc[j]:\n","\n","                # tp = short_tp.iloc[initial_i]\n","                tp = res_df['open'].iloc[j]\n","                tp_state_list.append(\"d-short_open\")\n","\n","              #   tp limit 이 가능한 경우 = open 이 아직, tp 를 넘지 않은 경우 # \n","              else:\n","\n","                # tp = short_tp.iloc[initial_i]\n","                tp = short_tp.iloc[j]\n","                # tp = res_df['open'].iloc[j]\n","                tp_state_list.append(\"d-short_tp\")\n","\n","            #         static tp         #\n","            else:\n","              \n","              #   tp limit 이 불가한 경우 = open 이 이미, tp 를 넘은 경우 # \n","              #   non_inversion 의 경우, short_tp 가 가능함   #              \n","\n","              # if res_df['open'].iloc[j] < short_tp.iloc[initial_i]:\n","              if res_df['open'].iloc[j] < short_tp.iloc[tp_j]:\n","\n","                # tp = short_tp.iloc[initial_i]\n","                tp = short_tp.iloc[tp_j]\n","\n","                # tp = res_df['open'].iloc[j]\n","                tp_state_list.append(\"s-short_tp\")\n","\n","              #   tp limit 이 가능한 경우 = open 이 아직, tp 를 넘지 않은 경우 # \n","              else:\n","\n","                # tp = short_tp.iloc[initial_i]\n","                tp = short_tp.iloc[tp_j]\n","\n","                # tp = res_df['open'].iloc[j]\n","                tp_state_list.append(\"s-short_tp\")   \n","\n","            temp_tp_list.append(tp)     \n","\n","\n","          #           2. by signal        #\n","          # if entry[j] == 1:\n","            \n","          #   tp = res_df['close'].iloc[j]\n","          #   # tp = res_df['open'].iloc[j]\n","          #   tp_state_list.append(\"close tp\")\n","          #   trade_done = True\n","\n","          #   temp_tp_list.append(tp) \n","\n","                  \n","          # -------------- cut -------------- #\n","          # elif res_df['macd_hist3'].iloc[j] > 0:  #  macd cut\n","          # elif res_df['macd_hist3'].iloc[i] < 0 and res_df['macd_hist3'].iloc[j] > 0:\n","          # elif res_df['close'].iloc[j] > res_df['middle_line'].iloc[j]:     \n","          elif res_df['close'].iloc[j] > res_df[sma].iloc[j]:\n","\n","            tp = res_df['close'].iloc[j]\n","            # tp = res_df['open'].iloc[j]\n","            tp_state_list.append(\"short close_cut\")\n","            trade_done = True\n","\n","            temp_tp_list.append(tp) \n","\n","\n","          # -------------- non tp -------------- #\n","          elif j == len(res_df) - 1:\n","            trade_done = True\n","            tp = res_df['close'].iloc[j]\n","          \n","\n","\n","          # -------------- append trade data -------------- #\n","          if trade_done:\n","\n","            if entry[initial_i] == -1:\n","              # ep = res_df['close'].iloc[initial_i]\n","              ep = upper_ep.iloc[initial_i]\n","            else:\n","              ep = res_df['open'].iloc[initial_i]\n","              # ep = upper_ep.iloc[initial_i]\n","              # ep = res_df['close'].iloc[initial_i - 1]     \n","\n","            #       Todo      #\n","            #        1. len(temp_tp_list) 에 대응하는 qty_list 를 만들어야함    #\n","            #        2. temp_pr_list 를 만들어 총합 + 1 을 pr_list 에 저장      #\n","            #        2-1. temp_pr = sum((ep / temp_tp_list[i] - fee - 1) * qty_list[i])   #\n","            #        3. temp_pr_list 의 첫 tp 에는 r_qty 를 할당함        #\n","            qty_list = []\n","            temp_pr_list = []\n","            r_qty = 1\n","            for q_i in range(len(temp_tp_list) - 1, -1, -1):\n","\n","              if len(temp_tp_list) == 1:\n","                temp_qty = r_qty\n","              else:\n","                if q_i !=0:\n","                  temp_qty = r_qty / p_qty_divider\n","                else:\n","                  temp_qty = r_qty\n","\n","              temp_pr = (ep / temp_tp_list[q_i] - fee - 1) * temp_qty\n","              r_qty -= temp_qty\n","\n","              temp_pr_list.append(temp_pr)\n","              qty_list.append(temp_qty)\n","\n","            # if len(temp_pr_list) == 1:\n","            #   print(\"qty_list :\", qty_list)\n","            #   print(\"temp_pr_list :\", temp_pr_list)\n","\n","            temp_pr = sum(temp_pr_list) + 1\n","\n","            #   hedge + non_hedge pr summation    #\n","            #   hedge pr direction is opposite to the other   #\n","            hedge_pr = 1\n","            if hedge_cnt == 0:\n","\n","              #       hedge tp      #\n","              h_tp = res_df['close'].iloc[j]\n","              hedge_pr = h_tp / h_ep - fee  # hedge long\n","              temp_pr += hedge_pr - 1\n","              h_j = j\n","\n","            \n","            hh = max(res_df['high'].iloc[i:j + 1])\n","            short_liq = (ep / hh - fee - 1) * lvrg + 1\n","\n","            if j != len(res_df) - 1:\n","\n","              ep_tp_list.append((ep, temp_tp_list))  \n","              trade_list.append([initial_i, i, j])\n","\n","              liqd_list.append(short_liq)\n","              short_liqd_list.append(short_liq)\n","\n","              h_ep_tp_list.append((h_ep, h_tp))        \n","              h_trade_list.append([initial_i, h_i, h_j])                \n","\n","              pr_list.append(temp_pr)\n","              short_list.append(temp_pr)\n","\n","              h_pr_list.append(hedge_pr)\n","              h_short_list.append(hedge_pr)\n","\n","              i = j\n","              break\n","\n","            else:\n","          \n","              #         tp 미체결 survey        #\n","              nontp_liqd_list.append(short_liq)\n","              nontp_short_liqd_list.append(short_liq)\n","              nontp_short_indexs.append(i)\n","              nontp_short_ep_list.append(ep)\n","\n","              nontp_short_pr = (ep / tp - fee - 1) * lvrg + 1\n","              nontp_pr_list.append(nontp_short_pr)\n","              nontp_short_pr_list.append(nontp_short_pr)\n","\n","\n","\n","      #                  long  phase                #\n","      # elif entry[i] == 1:\n","      elif entry[i] in [1, 2]:\n","\n","        initial_i = i\n","\n","        #               ep scheduling                 #\n","        # if res_df['close'].iloc[i] >= upper_middle.iloc[i]:\n","        #   pass\n","        # else:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","\n","        #             distance protection           #\n","        # tp_dist = (long_tp.iloc[i] - res_df['close'].iloc[i])\n","        # cut_dist = (res_df['close'].iloc[i] - res_df['middle_line'].iloc[i])\n","        # if tp_dist / cut_dist >= tp_cut_ratio:\n","        #   pass\n","        # else:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","        #               sma const.            #\n","        # if res_df['close'].iloc[i] > res_df['sma'].iloc[i]:\n","        # if lower_ep.iloc[i] >= res_df['sma'].iloc[i - 1]:\n","        # upper_sma = lower_ep >= res_df['sma'].shift(sma_shift_size)\n","        # if np.sum(upper_sma.iloc[i + 1 - sma_lookback:i + 1]) == sma_lookback:\n","        #   pass\n","        # else:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","        #              1d sma const.            #\n","        if res_df[sma].iloc[i] <= res_df['close'].iloc[i]:\n","          pass\n","        else:\n","          i += 1\n","          if i >= len(res_df):\n","            break\n","          continue\n","\n","\n","        #               cloud const.          #     \n","        # if i < cloud_lookback:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","        \n","        # cloud_bottom = np.min(res_df[[senkou_a, senkou_b]], axis=1)\n","        # over_bottom = res_df['close'].shift(cloud_shift_size) >= cloud_bottom.shift(cloud_shift_size)\n","\n","        # if np.sum(over_bottom.iloc[i + 1 - cloud_lookback:i + 1]) != cloud_lookback:\n","        # # if np.sum(over_bottom.iloc[i - cloud_lookback:i]) != cloud_lookback:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue  \n","\n","        # #              st color const.           #\n","        # if np.sum(res_df[['minor_ST1_Trend', 'minor_ST2_Trend', 'minor_ST3_Trend']].iloc[i]) >= 1:\n","        #   pass\n","        # else:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","        #               sar const.            #\n","        # if res_df['sar2'].iloc[i] < res_df['low'].iloc[i] and res_df['sar3'].iloc[i] < res_df['low'].iloc[i]:\n","        #   pass\n","        # else:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","        #               limit waiting const.             #\n","        # entry_done = False\n","        # for e_j in range(i + 1, len(res_df)):\n","\n","        #   #             Todo            #\n","        #   #             1. ep 설정\n","        #   #             2. limit 대기 시간 설정\n","        #   if res_df['low'].iloc[e_j] <= upper_ep.iloc[initial_i]:\n","        #     entry_done = True\n","        #     break\n","\n","        #   if res_df['close'].iloc[e_j] < res_df['middle_line'].iloc[e_j]:     \n","        #     break\n","\n","        # i = e_j\n","\n","\n","        # if entry_done:\n","        #   pass\n","        # else:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","\n","        temp_tp_list =[]\n","        remain_tp = 2\n","        hedge_cnt = 1\n","        h_ep, h_tp = None, None        \n","        h_i, h_j = None, None        \n","        trade_done = False\n","\n","        for j in range(i + 1, len(res_df)):     \n","          \n","          if static_tp:\n","            tp_j = initial_i\n","          else:\n","            tp_j = j   \n","\n","          # -------------- hedge only once -------------- #\n","          #             일단, h_quantity 는 초기 진입과 동일하게 설정         #\n","          # if res_df['low'].iloc[j] <= res_df['minor_ST2_Down'].iloc[j] and hedge_cnt == 1:\n","          # if res_df['close'].iloc[j] <= res_df['minor_ST2_Down'].iloc[j] and hedge_cnt == 1:\n","          # if res_df['close'].iloc[j] <= res_df['minor_ST3_Down'].iloc[j] and hedge_cnt == 1:\n","\n","          #   h_ep = res_df['close'].iloc[j]\n","          #   hedge_cnt -= 1\n","          #   h_i = j\n","\n","\n","          # -------------- sub tp --------------  #\n","          # if res_df['high'].iloc[j] >= long_tp2.iloc[j] and remain_tp == 2:\n","\n","          #   # trade_done = True\n","          #   remain_tp -= 1\n","\n","          #   #         dynamic tp        #\n","          #   if long_tp2.iloc[j] != long_tp2.iloc[j - 1]:\n","\n","          #     #   tp limit 이 불가한 경우 = open 이 이미, tp 를 넘은 경우 # \n","          #     if res_df['open'].iloc[j] >= long_tp2.iloc[j]:\n","\n","          #       # tp = long_tp2.iloc[j]\n","          #       tp = res_df['open'].iloc[j]\n","          #       # tp_state_list.append(\"d-open\")\n","\n","              \n","          #     #   tp limit 이 가능한 경우 = open 이 아직, tp 를 넘지 않은 경우 # \n","          #     else:\n","                \n","          #       tp = long_tp2.iloc[j]\n","          #       # tp = res_df['open'].iloc[j]\n","          #       # tp_state_list.append(\"d-long_tp2\")\n","\n","          #   #         static tp         #\n","          #   else:\n","\n","          #     #   tp limit 이 불가한 경우 = open 이 이미, tp 를 넘은 경우 # \n","          #     #   non_inversion 의 경우, short_tp 가 가능함   #\n","\n","          #     if res_df['open'].iloc[j] >= long_tp2.iloc[j]:\n","\n","          #       tp = long_tp2.iloc[j]\n","          #       # tp = res_df['open'].iloc[j]\n","          #       # tp_state_list.append(\"s-long_tp2\")\n","\n","              \n","          #     #   tp limit 이 가능한 경우 = open 이 아직, tp 를 넘지 않은 경우 # \n","          #     else:\n","                \n","          #       tp = long_tp2.iloc[j]\n","          #       # tp = res_df['open'].iloc[j]\n","          #       # tp_state_list.append(\"s-long_tp2\")       \n","            \n","          #   temp_tp_list.append(tp)  \n","\n","\n","          # -------------- ultimate tp -------------- #\n","          #            1. by price line            #\n","          if res_df['high'].iloc[j] >= long_tp.iloc[tp_j]:\n","          # if res_df['high'].iloc[j] >= long_tp.iloc[j]:\n","\n","            trade_done = True\n","\n","            #         dynamic tp        #\n","            # if 0:\n","            if long_tp.iloc[j] != long_tp.iloc[j - 1] and not static_tp:\n","\n","              #   tp limit 이 불가한 경우 = open 이 이미, tp 를 넘은 경우 # \n","              # if res_df['open'].iloc[j] >= long_tp.iloc[initial_i]:\n","              if res_df['open'].iloc[j] >= long_tp.iloc[j]:\n","\n","                # tp = long_tp.iloc[initial_i]\n","                tp = res_df['open'].iloc[j]\n","                tp_state_list.append(\"d-long_open\")\n","\n","              \n","              #   tp limit 이 가능한 경우 = open 이 아직, tp 를 넘지 않은 경우 # \n","              else:\n","                \n","                # tp = long_tp.iloc[initial_i]\n","                tp = long_tp.iloc[j]\n","                # tp = res_df['open'].iloc[j]\n","                tp_state_list.append(\"d-long_tp\")\n","\n","            #         static tp         #\n","            else:\n","\n","              #   tp limit 이 불가한 경우 = open 이 이미, tp 를 넘은 경우 # \n","              #   non_inversion 의 경우, short_tp 가 가능함   #\n","\n","              if res_df['open'].iloc[j] >= long_tp.iloc[tp_j]:\n","              # if res_df['open'].iloc[j] >= long_tp.iloc[initial_i]:\n","\n","                # tp = long_tp.iloc[initial_i]\n","                tp = long_tp.iloc[tp_j]\n","\n","                # tp = res_df['open'].iloc[j]\n","                tp_state_list.append(\"s-long_tp\")\n","\n","              \n","              #   tp limit 이 가능한 경우 = open 이 아직, tp 를 넘지 않은 경우 # \n","              else:\n","                \n","                # tp = long_tp.iloc[initial_i]\n","                tp = long_tp.iloc[tp_j]\n","\n","                # tp = res_df['open'].iloc[j]\n","                tp_state_list.append(\"s-long_tp\")         \n","            \n","            temp_tp_list.append(tp)\n","\n","\n","          #           2. by signal        #\n","          # if entry[j] == -1:\n","            \n","          #   tp = res_df['close'].iloc[j]\n","          #   # tp = res_df['open'].iloc[j]\n","          #   tp_state_list.append(\"close tp\")\n","          #   trade_done = True\n","\n","          #   temp_tp_list.append(tp) \n","\n","\n","\n","          # -------------- cut -------------- #\n","          # elif res_df['macd_hist3'].iloc[j] < 0:\n","          # # elif res_df['macd_hist3'].iloc[i] > 0 and res_df['macd_hist3'].iloc[j] < 0:\n","          # elif res_df['close'].iloc[j] < res_df['middle_line'].iloc[j]:\n","          elif res_df['close'].iloc[j] < res_df[sma].iloc[j]:            \n","\n","            tp = res_df['close'].iloc[j]\n","            # tp = res_df['open'].iloc[j]\n","            tp_state_list.append(\"long close_cut\")\n","            trade_done = True\n","\n","            temp_tp_list.append(tp)\n","\n","          \n","          # -------------- non tp -------------- #\n","          elif j == len(res_df) - 1:\n","            trade_done = True\n","            tp = res_df['close'].iloc[j]\n","\n","\n","          if trade_done:\n","\n","            if entry[initial_i] == 1:\n","              # ep = res_df['close'].iloc[initial_i]\n","              ep = lower_ep.iloc[initial_i]\n","            else:\n","              # ep = lower_ep.iloc[i]\n","              ep = res_df['open'].iloc[initial_i]\n","              # ep = res_df['close'].iloc[initial_i - 1]\n","\n","            qty_list = []\n","            temp_pr_list = []\n","            r_qty = 1\n","            for q_i in range(len(temp_tp_list) - 1, -1, -1):\n","\n","              if len(temp_tp_list) == 1:\n","                temp_qty = r_qty\n","              else:\n","                if q_i !=0:\n","                  temp_qty = r_qty / p_qty_divider\n","                else:\n","                  temp_qty = r_qty\n","\n","              temp_pr = (temp_tp_list[q_i] / ep - fee - 1) * temp_qty\n","              r_qty -= temp_qty\n","\n","              temp_pr_list.append(temp_pr)\n","\n","            temp_pr = sum(temp_pr_list) + 1\n","\n","            #   hedge + non_hedge pr summation    #\n","            #   hedge pr direction is opposite to the other   #\n","            hedge_pr = 1\n","            if hedge_cnt == 0:\n","\n","              #       hedge tp      #\n","              h_tp = res_df['close'].iloc[j]\n","              hedge_pr = h_ep / h_tp - fee  # hedge short\n","              temp_pr += hedge_pr - 1\n","              h_j = j\n","\n","\n","            ll = min(res_df['low'].iloc[i:j + 1])\n","            long_liq = (ll / ep - fee - 1) * lvrg + 1\n","\n","            if j != len(res_df) - 1:\n","\n","              ep_tp_list.append((ep, temp_tp_list))\n","              trade_list.append([initial_i, i, j])\n","\n","              liqd_list.append(long_liq)\n","              long_liqd_list.append(long_liq)\n","\n","              h_ep_tp_list.append((h_ep, h_tp))        \n","              h_trade_list.append([initial_i, h_i, h_j])                \n","\n","              pr_list.append(temp_pr)\n","              long_list.append(temp_pr)\n","\n","              h_pr_list.append(hedge_pr)\n","              h_long_list.append(hedge_pr)                    \n","\n","              i = j\n","              break\n","            \n","            else:\n","          \n","              #         tp 미체결 survey        #\n","              nontp_liqd_list.append(long_liq)\n","              nontp_long_liqd_list.append(long_liq)\n","              nontp_long_indexs.append(i)\n","              nontp_long_ep_list.append(ep)\n","              \n","              nontp_long_pr = (tp / ep - fee - 1) * lvrg + 1\n","              nontp_pr_list.append(nontp_long_pr)\n","              nontp_long_pr_list.append(nontp_long_pr)\n","\n","\n","      i += 1\n","      if i >= len(res_df):\n","        break\n","\n","\n","\n","    # -------------------- result analysis -------------------- #\n","    try:\n","      plt.figure(figsize=(16, 12))\n","      plt.suptitle(key)\n","\n","      np_pr = (np.array(pr_list) - 1) * lvrg + 1\n","\n","      total_pr = np.cumprod(np_pr)\n","      wr = len(np_pr[np_pr > 1]) / len(np_pr[np_pr != 1])\n","\n","      # plt.subplot(121)\n","      plt.subplot(231)\n","      plt.plot(total_pr)\n","      if len(nontp_liqd_list) != 0:\n","        plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\\nliqd : %.2f\\nnontp_liqd_cnt : %s\\nnontp_liqd : %.2f\\nontp_liqd_pr : %.2f\" \n","                  % (wr, np.min(np_pr), total_pr[-1], lvrg, min(liqd_list), len(nontp_liqd_list), min(nontp_liqd_list), min(nontp_pr_list)))\n","      else:\n","        plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\\nliqd : %.2f\\nnontp_liqd_cnt : %s\" \n","                  % (wr, np.min(np_pr), total_pr[-1], lvrg, min(liqd_list), len(nontp_liqd_list)))\n","      # plt.show()\n","\n","      #         short only      #\n","      np_short_pr = (np.array(short_list) - 1) * lvrg + 1\n","\n","      total_short_pr = np.cumprod(np_short_pr)\n","      short_wr = len(np_short_pr[np_short_pr > 1]) / len(np_short_pr[np_short_pr != 1])\n","      \n","      plt.subplot(232)\n","      plt.plot(total_short_pr)\n","      if len(nontp_short_liqd_list) != 0:   \n","\n","        max_nontp_short_term = len(res_df) - nontp_short_indexs[0]\n","        \n","        plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\\nliqd : %.2f\\nnontp_short_liqd_cnt : %s\\nnontp_short_liqd : %.2f\\nontp_short_liqd_pr : %.2f\\nmax_nontp_short_term : %s\"  \n","                  % (short_wr, np.min(np_short_pr), total_short_pr[-1], lvrg, min(short_liqd_list), \n","                     len(nontp_short_liqd_list), min(nontp_short_liqd_list), min(nontp_short_pr_list), max_nontp_short_term))\n","      else:\n","        plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\\nliqd : %.2f\\nnontp_short_liqd_cnt : %s\"  \n","                  % (short_wr, np.min(np_short_pr), total_short_pr[-1], lvrg, min(short_liqd_list), len(nontp_short_liqd_list)))\n","\n","      #         long only      #\n","      np_long_pr = (np.array(long_list) - 1) * lvrg + 1\n","\n","      total_long_pr = np.cumprod(np_long_pr)\n","      long_wr = len(np_long_pr[np_long_pr > 1]) / len(np_long_pr[np_long_pr != 1])\n","      \n","      plt.subplot(233)\n","      plt.plot(total_long_pr)\n","      if len(nontp_long_liqd_list) != 0:\n","\n","        max_nontp_long_term = len(res_df) - nontp_long_indexs[0]\n","\n","        plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\\nliqd : %.2f\\nnontp_long_liqd_cnt : %s\\nnontp_long_liqd : %.2f\\nontp_long_liqd_pr : %.2f\\nmax_nontp_long_term : %s\"   \n","                  % (long_wr, np.min(np_long_pr), total_long_pr[-1], lvrg, min(long_liqd_list), \n","                     len(nontp_long_liqd_list), min(nontp_long_liqd_list), min(nontp_long_pr_list), max_nontp_long_term))\n","      else:\n","        plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\\nliqd : %.2f\\nnontp_long_liqd_cnt : %s\"   \n","                  % (long_wr, np.min(np_long_pr), total_long_pr[-1], lvrg, min(long_liqd_list), len(nontp_long_liqd_list)))\n","\n","\n","      #     reversion adjustment      #\n","      rev_np_pr = (1 / (np.array(pr_list) + fee) - fee - 1) * lvrg + 1\n","          \n","      rev_total_pr = np.cumprod(rev_np_pr)\n","      rev_wr = len(rev_np_pr[rev_np_pr > 1]) / len(rev_np_pr[rev_np_pr != 1])\n","\n","      # plt.subplot(122)\n","      plt.subplot(234)\n","      plt.plot(rev_total_pr)\n","      plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\" % (rev_wr, np.min(rev_np_pr), rev_total_pr[-1], lvrg))\n","\n","      #         short       #\n","      rev_np_short_pr = (1 / (np.array(short_list) + fee) - fee - 1) * lvrg + 1\n","          \n","      rev_total_short_pr = np.cumprod(rev_np_short_pr)\n","      rev_short_wr = len(rev_np_short_pr[rev_np_short_pr > 1]) / len(rev_np_short_pr[rev_np_short_pr != 1])\n","\n","      # plt.subplot(122)\n","      plt.subplot(235)\n","      plt.plot(rev_total_short_pr)\n","      plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\" % (rev_short_wr, np.min(rev_np_short_pr), rev_total_short_pr[-1], lvrg))\n","\n","      #         long       #\n","      rev_np_long_pr = (1 / (np.array(long_list) + fee) - fee - 1) * lvrg + 1\n","          \n","      rev_total_long_pr = np.cumprod(rev_np_long_pr)\n","      rev_long_wr = len(rev_np_long_pr[rev_np_long_pr > 1]) / len(rev_np_long_pr[rev_np_long_pr != 1])\n","\n","      # plt.subplot(122)\n","      plt.subplot(236)\n","      plt.plot(rev_total_long_pr)\n","      plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\" % (rev_long_wr, np.min(rev_np_long_pr), rev_total_long_pr[-1], lvrg))\n","      \n","      plt.show()\n","\n","      h_np_pr = (np.array(h_pr_list) - 1) * lvrg + 1\n","      h_rev_np_pr = (1 / (np.array(h_pr_list) + fee) - fee - 1) * lvrg + 1    # define, for plot_check below cell\n","\n","      # --------------------- h pr plot --------------------- #\n","      if len(h_np_pr[h_np_pr != 1]) != 0:\n","\n","        plt.figure(figsize=(16, 12))\n","        plt.suptitle(key + \" hedge\")\n","\n","        h_total_pr = np.cumprod(h_np_pr)\n","        h_wr = len(h_np_pr[h_np_pr > 1]) / len(h_np_pr[h_np_pr != 1])\n","\n","        # plt.subplot(121)\n","        plt.subplot(231)\n","        plt.plot(h_total_pr)\n","        plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\" % (h_wr, np.min(h_np_pr), h_total_pr[-1], lvrg))\n","        # plt.show()\n","\n","        #         short only      #\n","        h_np_short_pr = (np.array(h_short_list) - 1) * lvrg + 1\n","\n","        h_total_short_pr = np.cumprod(h_np_short_pr)\n","        h_short_wr = len(h_np_short_pr[h_np_short_pr > 1]) / len(h_np_short_pr[h_np_short_pr != 1])\n","        \n","        plt.subplot(232)\n","        plt.plot(h_total_short_pr)\n","        plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\" % (h_short_wr, np.min(h_np_short_pr), h_total_short_pr[-1], lvrg))\n","\n","        #         long only      #\n","        h_np_long_pr = (np.array(h_long_list) - 1) * lvrg + 1\n","\n","        h_total_long_pr = np.cumprod(h_np_long_pr)\n","        h_long_wr = len(h_np_long_pr[h_np_long_pr > 1]) / len(h_np_long_pr[h_np_long_pr != 1])\n","        \n","        plt.subplot(233)\n","        plt.plot(h_total_long_pr)\n","        plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\" % (h_long_wr, np.min(h_np_long_pr), h_total_long_pr[-1], lvrg))\n","\n","\n","        #     reversion adjustment      #\n","            \n","        h_rev_total_pr = np.cumprod(h_rev_np_pr)\n","        h_rev_wr = len(h_rev_np_pr[h_rev_np_pr > 1]) / len(h_rev_np_pr[h_rev_np_pr != 1])\n","\n","        # plt.subplot(122)\n","        plt.subplot(234)\n","        plt.plot(h_rev_total_pr)\n","        plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\" % (h_rev_wr, np.min(h_rev_np_pr), h_rev_total_pr[-1], lvrg))\n","\n","        #         short       #\n","        h_rev_np_short_pr = (1 / (np.array(h_short_list) + fee) - fee - 1) * lvrg + 1\n","            \n","        h_rev_total_short_pr = np.cumprod(h_rev_np_short_pr)\n","        h_rev_short_wr = len(h_rev_np_short_pr[h_rev_np_short_pr > 1]) / len(h_rev_np_short_pr[h_rev_np_short_pr != 1])\n","\n","        # plt.subplot(122)\n","        plt.subplot(235)\n","        plt.plot(h_rev_total_short_pr)\n","        plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\" % (h_rev_short_wr, np.min(h_rev_np_short_pr), h_rev_total_short_pr[-1], lvrg))\n","\n","        #         long       #\n","        h_rev_np_long_pr = (1 / (np.array(h_long_list) + fee) - fee - 1) * lvrg + 1\n","            \n","        h_rev_total_long_pr = np.cumprod(h_rev_np_long_pr)\n","        h_rev_long_wr = len(h_rev_np_long_pr[h_rev_np_long_pr > 1]) / len(h_rev_np_long_pr[h_rev_np_long_pr != 1])\n","\n","        # plt.subplot(122)\n","        plt.subplot(236)\n","        plt.plot(h_rev_total_long_pr)\n","        plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\" % (h_rev_long_wr, np.min(h_rev_np_long_pr), h_rev_total_long_pr[-1], lvrg))\n","        \n","        plt.show()\n","          \n","    except Exception as e:\n","      print('error in pr plot :', e)   \n","    \n","\n","    print()\n","\n","    # break # indi. loop\n","  break # pair loop"],"execution_count":null,"outputs":[{"output_type":"stream","text":["2021-06-30 BTCUSDT_4h1d_backi2.xlsx loaded !\n","sma4_period : 13\n","backing_i : -2\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1152x864 with 6 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}},{"output_type":"stream","text":["\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"wt3451FOtwQK","executionInfo":{"status":"ok","timestamp":1628660254734,"user_tz":-540,"elapsed":339,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"}},"outputId":"0ef59331-bcc7-4dee-f633-74af4a3d3c17"},"source":["print(not True)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["False\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"ud2jkjdSH19C"},"source":["## fisher cut"]},{"cell_type":"code","metadata":{"id":"SFXx1bIJH1zL"},"source":["fee = 0.0004\n","lvrg = 5\n","lvrg = 3\n","lvrg = 2\n","\n","# cloud_shift_size = -1\n","# cloud_shift_size = 15\n","cloud_shift_size = 1\n","# cloud_shift_size = 0\n","\n","# cloud_lookback = 50\n","# cloud_lookback = 70\n","cloud_lookback = 150\n","cloud_lookback = 100\n","cloud_lookback = 69\n","# cloud_lookback = 57\n","\n","close_shift_size = 1\n","\n","\n","#       1-0. ep line = color on st min/max 조금 이내       #\n","#       1-0-1. option1. color on upper st 색출 \n","# -->   1-0-1. option2. min upper st 바로 추출\n","#       1-0-2. 색출된 st 중 min / max st 선별\n","gap = 0.0002\n","gap = 0.0001\n","gap = 0.00005\n","# gap = 0.0000\n","# gap = -0.00005\n","\n","p_qty_divider = 1.5\n","\n","\n","senkoua_list = ['senkou_a1', 'senkou_a2', 'senkou_a3', 'senkou_a4', 'senkou_a5']\n","senkoub_list = ['senkou_b1', 'senkou_b2', 'senkou_b3', 'senkou_b4', 'senkou_b5']\n","\n","\n","for key, res_df in res_df_dict.items():\n","\n","  # res_df = pd.read_excel(save_path + key, index_col=0)\n","\n","  print(key, \"loaded !\")\n","\n","  for senkou_a, senkou_b in zip(senkoua_list, senkoub_list):\n","\n","    \n","    cloud_top = np.max(res_df[[senkou_a, senkou_b]], axis=1)\n","    cloud_bottom = np.min(res_df[[senkou_a, senkou_b]], axis=1)\n","    \n","    # upper_ep = res_df['middle_line']\n","    # lower_ep = res_df['middle_line']\n","\n","    upper_ep = res_df['min_upper'] * (1 - gap)\n","    lower_ep = res_df['max_lower'] * (1 + gap)\n","\n","    upper_middle = (res_df['middle_line'] + res_df['min_upper']) / 2\n","    lower_middle = (res_df['middle_line'] + res_df['max_lower']) / 2\n","\n","    under_top = res_df['close'].shift(cloud_shift_size) <= cloud_top.shift(cloud_shift_size)\n","    over_bottom = res_df['close'].shift(cloud_shift_size) >= cloud_bottom.shift(cloud_shift_size)\n","    # print(\"under_top :\", under_top)\n","    # break\n","\n","    fisher_upper = 1.5\n","    fisher_lower = -1.5\n","    \n","    stoch_upper = 63\n","    stoch_lower = 37\n","    \n","    \n","    #       short = -1      #\n","    entry = np.where((res_df['close'].shift(1) <= upper_ep) & \n","                      (res_df['high'] >= upper_ep)\n","                      , -1, 0) \n","\n","    #       short = -2      #\n","    # entry = np.where((res_df['close'].shift(1) > upper_ep)\n","    #                   , -2, entry) \n","\n","    #       long = 1     #\n","    #       close.shift(1) > ep | 2nd_middle line       #\n","\n","    entry = np.where((res_df['close'].shift(1) >= lower_ep) & \n","                      (res_df['low'] <= lower_ep)\n","                      , 1, entry) \n","\n","    #       long = 2     #\n","    #       close.shift(1) > ep | 2nd_middle line       #\n","\n","    # entry = np.where((res_df['close'].shift(1) < lower_ep)\n","    #                   , 2, entry) \n","\n","\n","\n","    #       1-2. tp line = middle line 조금 이내         #    \n","    # tp_cut_ratio = 0.5\n","    tp_cut_ratio = 0.7\n","    # tp_cut_ratio = 1\n","    # tp_cut_ratio = 2\n","    # tp_cut_ratio = 3\n","\n","    short_tp = res_df['middle_line'] * (1 + gap)\n","    long_tp = res_df['middle_line'] * (1 - gap)\n","\n","    # short_tp = res_df['close'] - (res_df['middle_line'] - res_df['close']) * tp_cut_ratio\n","    # long_tp = res_df['close'] + (res_df['close'] - res_df['middle_line']) * tp_cut_ratio\n","    \n","    # short_tp = res_df['max_lower'] * (1 + gap)\n","    # long_tp = res_df['min_upper'] * (1 - gap)\n","\n","    short_tp2 = res_df['middle_line'] * (1 + gap)\n","    long_tp2 = res_df['middle_line'] * (1 - gap)\n","\n","    # short_tp = (res_df['middle_line'] + res_df['min_upper']) / 2\n","    # long_tp = (res_df['middle_line'] + res_df['max_lower']) / 2\n","\n","\n","\n","\n","    #       trading : 여기도 체결 결과에 대해 묘사함       #\n","    trade_list = []\n","    h_trade_list = []\n","    liqd_list = []\n","    short_liqd_list = []\n","    long_liqd_list = []\n","\n","    nontp_liqd_list = []\n","    nontp_short_liqd_list = []\n","    nontp_long_liqd_list = []\n","\n","    nontp_pr_list = []\n","    nontp_short_pr_list = []\n","    nontp_long_pr_list = []\n","\n","    nontp_short_indexs = []\n","    nontp_long_indexs = []\n","\n","    nontp_short_ep_list = []\n","    nontp_long_ep_list = []\n","\n","    pr_list = []\n","    long_list = []\n","    short_list = []\n","\n","    h_pr_list = []\n","    h_long_list = []\n","    h_short_list = []\n","\n","    ep_tp_list = []\n","    h_ep_tp_list = []\n","    tp_state_list = []\n","\n","    i = 0\n","    while 1:\n","    # for i in range(len(res_df)):\n","\n","\n","      # if entry[i] == -1:\n","      if entry[i] in [-1, -2]:\n","\n","        initial_i = i\n","\n","        #             ep scheduling               #\n","        # if  (res_df['close'].iloc[i] <= lower_middle.iloc[i]):\n","        #   pass\n","        # else:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","        #             distance protection           #\n","        # tp_dist = (res_df['close'].iloc[i] - short_tp.iloc[i])\n","        # cut_dist = (res_df['middle_line'].iloc[i] - res_df['close'].iloc[i])\n","        # if tp_dist / cut_dist >= tp_cut_ratio:\n","        #   pass\n","        # else:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","\n","        #               cloud const.         #   \n","        # if i < cloud_lookback:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","        # if np.sum(under_top.iloc[i + 1 - cloud_lookback:i + 1]) != cloud_lookback:\n","        # # if np.sum(under_top.iloc[i - cloud_lookback:i]) != cloud_lookback:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","\n","        #               st color const.           #\n","        # if np.sum(res_df[['minor_ST1_Trend', 'minor_ST2_Trend', 'minor_ST3_Trend']].iloc[i]) <= -1:\n","        #   pass\n","        # else:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","        #               sar const.            #\n","        # if res_df['sar2'].iloc[i] > res_df['high'].iloc[i] and res_df['sar3'].iloc[i] > res_df['high'].iloc[i]:\n","        #   pass\n","        # else:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","\n","        #               limit waiting const.             #\n","        # entry_done = False\n","        # for e_j in range(i + 1, len(res_df)):\n","\n","        #   #             Todo            #\n","        #   #             1. ep 설정\n","        #   #             2. limit 대기 시간 설정\n","        #   if res_df['high'].iloc[e_j] >= upper_ep.iloc[initial_i]:\n","        #     entry_done = True\n","        #     # print(\"e_j :\", e_j)\n","        #     break\n","\n","        #   if res_df['close'].iloc[e_j] > res_df['middle_line'].iloc[e_j]:\n","        #     break\n","\n","        # i = e_j\n","        # # print(\"i = e_j :\", i)\n","\n","\n","        # if entry_done:\n","        #   pass\n","        # else:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","        \n","        temp_tp_list = []\n","        remain_tp = 2\n","        hedge_cnt = 1\n","        h_ep, h_tp = None, None\n","        h_i, h_j = None, None\n","        trade_done = False\n","        \n","        for j in range(i + 1, len(res_df)):\n","\n","          \n","          # -------------- hedge only once -------------- #\n","          #             일단, h_quantity 는 초기 진입과 동일하게 설정         #\n","          # if res_df['high'].iloc[j] >= res_df['minor_ST2_Up'].iloc[j] and hedge_cnt == 1:\n","          # if res_df['close'].iloc[j] >= res_df['minor_ST2_Up'].iloc[j] and hedge_cnt == 1:\n","          # if res_df['close'].iloc[j] >= res_df['minor_ST3_Up'].iloc[j] and hedge_cnt == 1:\n","\n","          #   h_ep = res_df['close'].iloc[j]\n","          #   hedge_cnt -= 1\n","          #   h_i = j\n","\n","\n","          # -------------- sub tp -------------- #\n","          # if res_df['low'].iloc[j] <= short_tp2.iloc[j] and remain_tp == 2:\n","          # # if res_df['low'].iloc[j] <= short_tp2.iloc[j] <= res_df['high'].iloc[j]: --> 이건 잘못되었음\n","\n","          #   # trade_done = True # <-- sub tp 에는 trade_done 을 주지 않음 !\n","          #   remain_tp -= 1\n","\n","          #   #         dynamic tp        #\n","          #   if short_tp2.iloc[j] != short_tp2.iloc[j - 1]:\n","\n","          #     #   tp limit 이 불가한 경우 = open 이 이미, tp 를 넘은 경우 # \n","          #     if res_df['open'].iloc[j] < short_tp2.iloc[j]:\n","\n","          #       # tp = short_tp2.iloc[j]\n","          #       tp = res_df['open'].iloc[j]\n","          #       # tp_state_list.append(\"d-open\")\n","\n","          #     #   tp limit 이 가능한 경우 = open 이 아직, tp 를 넘지 않은 경우 # \n","          #     else:\n","\n","          #       tp = short_tp2.iloc[j]\n","          #       # tp = res_df['open'].iloc[j]\n","          #       # tp_state_list.append(\"d-short_tp2\")\n","\n","          #   #         static tp         #\n","          #   else:\n","              \n","          #     #   tp limit 이 불가한 경우 = open 이 이미, tp 를 넘은 경우 # \n","          #     #   non_inversion 의 경우, short_tp2 가 가능함   #\n","\n","          #     if res_df['open'].iloc[j] < short_tp2.iloc[j]:\n","\n","          #       tp = short_tp2.iloc[j]\n","          #       # tp = res_df['open'].iloc[j]\n","          #       # tp_state_list.append(\"s-short_tp2\")\n","\n","          #     #   tp limit 이 가능한 경우 = open 이 아직, tp 를 넘지 않은 경우 # \n","          #     else:\n","\n","          #       tp = short_tp2.iloc[j]\n","          #       # tp = res_df['open'].iloc[j]\n","          #       # tp_state_list.append(\"s-short_tp2\")   \n","\n","          #   temp_tp_list.append(tp)  \n","\n","\n","          # -------------- ultimate tp -------------- #\n","          #               1. by price line             #\n","          if res_df['low'].iloc[j] <= short_tp.iloc[initial_i]: # we use static tp now\n","          # if res_df['low'].iloc[j] <= short_tp.iloc[j]:\n","          # if res_df['low'].iloc[j] <= short_tp.iloc[j] <= res_df['high'].iloc[j]: --> 이건 잘못되었음\n","\n","            trade_done = True\n","\n","            #         dynamic tp        #\n","            if 0:\n","            # if short_tp.iloc[j] != short_tp.iloc[j - 1]:\n","\n","              #   tp limit 이 불가한 경우 = open 이 이미, tp 를 넘은 경우 # \n","              # if res_df['open'].iloc[j] < short_tp.iloc[initial_i]:\n","              if res_df['open'].iloc[j] < short_tp.iloc[j]:\n","\n","                # tp = short_tp.iloc[initial_i]\n","                tp = res_df['open'].iloc[j]\n","                tp_state_list.append(\"d-short_open\")\n","\n","              #   tp limit 이 가능한 경우 = open 이 아직, tp 를 넘지 않은 경우 # \n","              else:\n","\n","                # tp = short_tp.iloc[initial_i]\n","                tp = short_tp.iloc[j]\n","                # tp = res_df['open'].iloc[j]\n","                tp_state_list.append(\"d-short_tp\")\n","\n","            #         static tp         #\n","            else:\n","              \n","              #   tp limit 이 불가한 경우 = open 이 이미, tp 를 넘은 경우 # \n","              #   non_inversion 의 경우, short_tp 가 가능함   #\n","\n","              if res_df['open'].iloc[j] < short_tp.iloc[initial_i]:\n","              # if res_df['open'].iloc[j] < short_tp.iloc[j]:\n","\n","                tp = short_tp.iloc[initial_i]\n","                # tp = short_tp.iloc[j]\n","                # tp = res_df['open'].iloc[j]\n","                tp_state_list.append(\"s-short_tp\")\n","\n","              #   tp limit 이 가능한 경우 = open 이 아직, tp 를 넘지 않은 경우 # \n","              else:\n","\n","                tp = short_tp.iloc[initial_i]\n","                # tp = short_tp.iloc[j]\n","                # tp = res_df['open'].iloc[j]\n","                tp_state_list.append(\"s-short_tp\")   \n","\n","            temp_tp_list.append(tp)     \n","\n","\n","          #           2. by signal        #\n","          # if entry[j] == 1:\n","            \n","          #   tp = res_df['close'].iloc[j]\n","          #   # tp = res_df['open'].iloc[j]\n","          #   tp_state_list.append(\"close tp\")\n","          #   trade_done = True\n","\n","          #   temp_tp_list.append(tp) \n","\n","                  \n","          # -------------- cut -------------- #\n","          # elif res_df['macd_hist3'].iloc[j] > 0:  #  macd cut\n","          # elif res_df['macd_hist3'].iloc[i] < 0 and res_df['macd_hist3'].iloc[j] > 0:\n","          # elif res_df['close'].iloc[j] > res_df['middle_line'].iloc[j]:            \n","\n","          #   tp = res_df['close'].iloc[j]\n","          #   # tp = res_df['open'].iloc[j]\n","          #   tp_state_list.append(\"short close_cut\")\n","          #   trade_done = True\n","\n","          #   temp_tp_list.append(tp) \n","\n","\n","          # -------------- non tp -------------- #\n","          elif j == len(res_df) - 1:\n","            trade_done = True\n","            tp = res_df['close'].iloc[j]\n","          \n","\n","\n","          # -------------- append trade data -------------- #\n","          if trade_done:\n","\n","            if entry[initial_i] == -1:\n","              # ep = res_df['close'].iloc[initial_i]\n","              ep = upper_ep.iloc[initial_i]\n","            else:\n","              ep = res_df['open'].iloc[initial_i]\n","              # ep = upper_ep.iloc[initial_i]\n","              # ep = res_df['close'].iloc[initial_i - 1]     \n","\n","            #       Todo      #\n","            #        1. len(temp_tp_list) 에 대응하는 qty_list 를 만들어야함    #\n","            #        2. temp_pr_list 를 만들어 총합 + 1 을 pr_list 에 저장      #\n","            #        2-1. temp_pr = sum((ep / temp_tp_list[i] - fee - 1) * qty_list[i])   #\n","            #        3. temp_pr_list 의 첫 tp 에는 r_qty 를 할당함        #\n","            qty_list = []\n","            temp_pr_list = []\n","            r_qty = 1\n","            for q_i in range(len(temp_tp_list) - 1, -1, -1):\n","\n","              if len(temp_tp_list) == 1:\n","                temp_qty = r_qty\n","              else:\n","                if q_i !=0:\n","                  temp_qty = r_qty / p_qty_divider\n","                else:\n","                  temp_qty = r_qty\n","\n","              temp_pr = (ep / temp_tp_list[q_i] - fee - 1) * temp_qty\n","              r_qty -= temp_qty\n","\n","              temp_pr_list.append(temp_pr)\n","              qty_list.append(temp_qty)\n","\n","            # if len(temp_pr_list) == 1:\n","            #   print(\"qty_list :\", qty_list)\n","            #   print(\"temp_pr_list :\", temp_pr_list)\n","\n","            temp_pr = sum(temp_pr_list) + 1\n","\n","            #   hedge + non_hedge pr summation    #\n","            #   hedge pr direction is opposite to the other   #\n","            hedge_pr = 1\n","            if hedge_cnt == 0:\n","\n","              #       hedge tp      #\n","              h_tp = res_df['close'].iloc[j]\n","              hedge_pr = h_tp / h_ep - fee  # hedge long\n","              temp_pr += hedge_pr - 1\n","              h_j = j\n","\n","            \n","            hh = max(res_df['high'].iloc[i:j + 1])\n","            short_liq = (ep / hh - fee - 1) * lvrg + 1\n","\n","            if j != len(res_df) - 1:\n","\n","              ep_tp_list.append((ep, temp_tp_list))  \n","              trade_list.append([initial_i, i, j])\n","\n","              liqd_list.append(short_liq)\n","              short_liqd_list.append(short_liq)\n","\n","              h_ep_tp_list.append((h_ep, h_tp))        \n","              h_trade_list.append([initial_i, h_i, h_j])                \n","\n","              pr_list.append(temp_pr)\n","              short_list.append(temp_pr)\n","\n","              h_pr_list.append(hedge_pr)\n","              h_short_list.append(hedge_pr)\n","\n","              i = j\n","              break\n","\n","            else:\n","          \n","              #         tp 미체결 survey        #\n","              nontp_liqd_list.append(short_liq)\n","              nontp_short_liqd_list.append(short_liq)\n","              nontp_short_indexs.append(i)\n","              nontp_short_ep_list.append(ep)\n","\n","              nontp_short_pr = (ep / tp - fee - 1) * lvrg + 1\n","              nontp_pr_list.append(nontp_short_pr)\n","              nontp_short_pr_list.append(nontp_short_pr)\n","\n","\n","\n","      #                  long  phase                #\n","      # elif entry[i] == 1:\n","      elif entry[i] in [1, 2]:\n","\n","        initial_i = i\n","\n","        #               ep scheduling                 #\n","        # if res_df['close'].iloc[i] >= upper_middle.iloc[i]:\n","        #   pass\n","        # else:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","\n","        #             distance protection           #\n","        # tp_dist = (long_tp.iloc[i] - res_df['close'].iloc[i])\n","        # cut_dist = (res_df['close'].iloc[i] - res_df['middle_line'].iloc[i])\n","        # if tp_dist / cut_dist >= tp_cut_ratio:\n","        #   pass\n","        # else:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","\n","        #               cloud const.          #     \n","        # if i < cloud_lookback:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","        # if np.sum(over_bottom.iloc[i + 1 - cloud_lookback:i + 1]) != cloud_lookback:\n","        # # if np.sum(over_bottom.iloc[i - cloud_lookback:i]) != cloud_lookback:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue  \n","\n","        # #              st color const.           #\n","        # if np.sum(res_df[['minor_ST1_Trend', 'minor_ST2_Trend', 'minor_ST3_Trend']].iloc[i]) >= 1:\n","        #   pass\n","        # else:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","        #               sar const.            #\n","        # if res_df['sar2'].iloc[i] < res_df['low'].iloc[i] and res_df['sar3'].iloc[i] < res_df['low'].iloc[i]:\n","        #   pass\n","        # else:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","        #               limit waiting const.             #\n","        # entry_done = False\n","        # for e_j in range(i + 1, len(res_df)):\n","\n","        #   #             Todo            #\n","        #   #             1. ep 설정\n","        #   #             2. limit 대기 시간 설정\n","        #   if res_df['low'].iloc[e_j] <= upper_ep.iloc[initial_i]:\n","        #     entry_done = True\n","        #     break\n","\n","        #   if res_df['close'].iloc[e_j] < res_df['middle_line'].iloc[e_j]:     \n","        #     break\n","\n","        # i = e_j\n","\n","\n","        # if entry_done:\n","        #   pass\n","        # else:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","\n","        temp_tp_list =[]\n","        remain_tp = 2\n","        hedge_cnt = 1\n","        h_ep, h_tp = None, None        \n","        h_i, h_j = None, None        \n","        trade_done = False\n","\n","        for j in range(i + 1, len(res_df)):        \n","\n","          # -------------- hedge only once -------------- #\n","          #             일단, h_quantity 는 초기 진입과 동일하게 설정         #\n","          # if res_df['low'].iloc[j] <= res_df['minor_ST2_Down'].iloc[j] and hedge_cnt == 1:\n","          # if res_df['close'].iloc[j] <= res_df['minor_ST2_Down'].iloc[j] and hedge_cnt == 1:\n","          # if res_df['close'].iloc[j] <= res_df['minor_ST3_Down'].iloc[j] and hedge_cnt == 1:\n","\n","          #   h_ep = res_df['close'].iloc[j]\n","          #   hedge_cnt -= 1\n","          #   h_i = j\n","\n","\n","          # -------------- sub tp --------------  #\n","          # if res_df['high'].iloc[j] >= long_tp2.iloc[j] and remain_tp == 2:\n","\n","          #   # trade_done = True\n","          #   remain_tp -= 1\n","\n","          #   #         dynamic tp        #\n","          #   if long_tp2.iloc[j] != long_tp2.iloc[j - 1]:\n","\n","          #     #   tp limit 이 불가한 경우 = open 이 이미, tp 를 넘은 경우 # \n","          #     if res_df['open'].iloc[j] >= long_tp2.iloc[j]:\n","\n","          #       # tp = long_tp2.iloc[j]\n","          #       tp = res_df['open'].iloc[j]\n","          #       # tp_state_list.append(\"d-open\")\n","\n","              \n","          #     #   tp limit 이 가능한 경우 = open 이 아직, tp 를 넘지 않은 경우 # \n","          #     else:\n","                \n","          #       tp = long_tp2.iloc[j]\n","          #       # tp = res_df['open'].iloc[j]\n","          #       # tp_state_list.append(\"d-long_tp2\")\n","\n","          #   #         static tp         #\n","          #   else:\n","\n","          #     #   tp limit 이 불가한 경우 = open 이 이미, tp 를 넘은 경우 # \n","          #     #   non_inversion 의 경우, short_tp 가 가능함   #\n","\n","          #     if res_df['open'].iloc[j] >= long_tp2.iloc[j]:\n","\n","          #       tp = long_tp2.iloc[j]\n","          #       # tp = res_df['open'].iloc[j]\n","          #       # tp_state_list.append(\"s-long_tp2\")\n","\n","              \n","          #     #   tp limit 이 가능한 경우 = open 이 아직, tp 를 넘지 않은 경우 # \n","          #     else:\n","                \n","          #       tp = long_tp2.iloc[j]\n","          #       # tp = res_df['open'].iloc[j]\n","          #       # tp_state_list.append(\"s-long_tp2\")       \n","            \n","          #   temp_tp_list.append(tp)  \n","\n","\n","          # -------------- ultimate tp -------------- #\n","          #            1. by price line            #\n","          if res_df['high'].iloc[j] >= long_tp.iloc[initial_i]:\n","          # if res_df['high'].iloc[j] >= long_tp.iloc[j]:\n","\n","            trade_done = True\n","\n","            #         dynamic tp        #\n","            if 0:\n","            # if long_tp.iloc[j] != long_tp.iloc[j - 1]:\n","\n","              #   tp limit 이 불가한 경우 = open 이 이미, tp 를 넘은 경우 # \n","              # if res_df['open'].iloc[j] >= long_tp.iloc[initial_i]:\n","              if res_df['open'].iloc[j] >= long_tp.iloc[j]:\n","\n","                # tp = long_tp.iloc[initial_i]\n","                tp = res_df['open'].iloc[j]\n","                tp_state_list.append(\"d-long_open\")\n","\n","              \n","              #   tp limit 이 가능한 경우 = open 이 아직, tp 를 넘지 않은 경우 # \n","              else:\n","                \n","                # tp = long_tp.iloc[initial_i]\n","                tp = long_tp.iloc[j]\n","                # tp = res_df['open'].iloc[j]\n","                tp_state_list.append(\"d-long_tp\")\n","\n","            #         static tp         #\n","            else:\n","\n","              #   tp limit 이 불가한 경우 = open 이 이미, tp 를 넘은 경우 # \n","              #   non_inversion 의 경우, short_tp 가 가능함   #\n","\n","              # if res_df['open'].iloc[j] >= long_tp.iloc[j]:\n","              if res_df['open'].iloc[j] >= long_tp.iloc[initial_i]:\n","\n","                tp = long_tp.iloc[initial_i]\n","                # tp = long_tp.iloc[j]\n","                # tp = res_df['open'].iloc[j]\n","                tp_state_list.append(\"s-long_tp\")\n","\n","              \n","              #   tp limit 이 가능한 경우 = open 이 아직, tp 를 넘지 않은 경우 # \n","              else:\n","                \n","                tp = long_tp.iloc[initial_i]\n","                # tp = long_tp.iloc[j]\n","                # tp = res_df['open'].iloc[j]\n","                tp_state_list.append(\"s-long_tp\")         \n","            \n","            temp_tp_list.append(tp)\n","\n","\n","          #           2. by signal        #\n","          # if entry[j] == -1:\n","            \n","          #   tp = res_df['close'].iloc[j]\n","          #   # tp = res_df['open'].iloc[j]\n","          #   tp_state_list.append(\"close tp\")\n","          #   trade_done = True\n","\n","          #   temp_tp_list.append(tp) \n","\n","\n","\n","          # -------------- cut -------------- #\n","          # elif res_df['macd_hist3'].iloc[j] < 0:\n","          # # elif res_df['macd_hist3'].iloc[i] > 0 and res_df['macd_hist3'].iloc[j] < 0:\n","          # elif res_df['close'].iloc[j] < res_df['middle_line'].iloc[j]:            \n","\n","          #   tp = res_df['close'].iloc[j]\n","          #   # tp = res_df['open'].iloc[j]\n","          #   tp_state_list.append(\"long close_cut\")\n","          #   trade_done = True\n","\n","          #   temp_tp_list.append(tp)\n","\n","          \n","          # -------------- non tp -------------- #\n","          elif j == len(res_df) - 1:\n","            trade_done = True\n","            tp = res_df['close'].iloc[j]\n","\n","\n","          if trade_done:\n","\n","            if entry[initial_i] == 1:\n","              # ep = res_df['close'].iloc[initial_i]\n","              ep = lower_ep.iloc[initial_i]\n","            else:\n","              # ep = lower_ep.iloc[i]\n","              ep = res_df['open'].iloc[initial_i]\n","              # ep = res_df['close'].iloc[initial_i - 1]\n","\n","            qty_list = []\n","            temp_pr_list = []\n","            r_qty = 1\n","            for q_i in range(len(temp_tp_list) - 1, -1, -1):\n","\n","              if len(temp_tp_list) == 1:\n","                temp_qty = r_qty\n","              else:\n","                if q_i !=0:\n","                  temp_qty = r_qty / p_qty_divider\n","                else:\n","                  temp_qty = r_qty\n","\n","              temp_pr = (temp_tp_list[q_i] / ep - fee - 1) * temp_qty\n","              r_qty -= temp_qty\n","\n","              temp_pr_list.append(temp_pr)\n","\n","            temp_pr = sum(temp_pr_list) + 1\n","\n","            #   hedge + non_hedge pr summation    #\n","            #   hedge pr direction is opposite to the other   #\n","            hedge_pr = 1\n","            if hedge_cnt == 0:\n","\n","              #       hedge tp      #\n","              h_tp = res_df['close'].iloc[j]\n","              hedge_pr = h_ep / h_tp - fee  # hedge short\n","              temp_pr += hedge_pr - 1\n","              h_j = j\n","\n","\n","            ll = min(res_df['low'].iloc[i:j + 1])\n","            long_liq = (ll / ep - fee - 1) * lvrg + 1\n","\n","            if j != len(res_df) - 1:\n","\n","              ep_tp_list.append((ep, temp_tp_list))\n","              trade_list.append([initial_i, i, j])\n","\n","              liqd_list.append(long_liq)\n","              long_liqd_list.append(long_liq)\n","\n","              h_ep_tp_list.append((h_ep, h_tp))        \n","              h_trade_list.append([initial_i, h_i, h_j])                \n","\n","              pr_list.append(temp_pr)\n","              long_list.append(temp_pr)\n","\n","              h_pr_list.append(hedge_pr)\n","              h_long_list.append(hedge_pr)                    \n","\n","              i = j\n","              break\n","            \n","            else:\n","          \n","              #         tp 미체결 survey        #\n","              nontp_liqd_list.append(long_liq)\n","              nontp_long_liqd_list.append(long_liq)\n","              nontp_long_indexs.append(i)\n","              nontp_long_ep_list.append(ep)\n","              \n","              nontp_long_pr = (tp / ep - fee - 1) * lvrg + 1\n","              nontp_pr_list.append(nontp_long_pr)\n","              nontp_long_pr_list.append(nontp_long_pr)\n","\n","\n","      i += 1\n","      if i >= len(res_df):\n","        break\n","\n","\n","\n","    # -------------------- result analysis -------------------- #\n","    try:\n","      plt.figure(figsize=(16, 12))\n","      plt.suptitle(key)\n","\n","      np_pr = (np.array(pr_list) - 1) * lvrg + 1\n","\n","      total_pr = np.cumprod(np_pr)\n","      wr = len(np_pr[np_pr > 1]) / len(np_pr[np_pr != 1])\n","\n","      # plt.subplot(121)\n","      plt.subplot(231)\n","      plt.plot(total_pr)\n","      if len(nontp_liqd_list) != 0:\n","        plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\\nliqd : %.2f\\nnontp_liqd_cnt : %s\\nnontp_liqd : %.2f\\nontp_liqd_pr : %.2f\" \n","                  % (wr, np.min(np_pr), total_pr[-1], lvrg, min(liqd_list), len(nontp_liqd_list), min(nontp_liqd_list), min(nontp_pr_list)))\n","      else:\n","        plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\\nliqd : %.2f\\nnontp_liqd_cnt : %s\" \n","                  % (wr, np.min(np_pr), total_pr[-1], lvrg, min(liqd_list), len(nontp_liqd_list)))\n","      # plt.show()\n","\n","      #         short only      #\n","      np_short_pr = (np.array(short_list) - 1) * lvrg + 1\n","\n","      total_short_pr = np.cumprod(np_short_pr)\n","      short_wr = len(np_short_pr[np_short_pr > 1]) / len(np_short_pr[np_short_pr != 1])\n","      \n","      plt.subplot(232)\n","      plt.plot(total_short_pr)\n","      if len(nontp_short_liqd_list) != 0:   \n","\n","        max_nontp_short_term = len(res_df) - nontp_short_indexs[0]\n","        \n","        plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\\nliqd : %.2f\\nnontp_short_liqd_cnt : %s\\nnontp_short_liqd : %.2f\\nontp_short_liqd_pr : %.2f\\nmax_nontp_short_term : %s\"  \n","                  % (short_wr, np.min(np_short_pr), total_short_pr[-1], lvrg, min(short_liqd_list), \n","                     len(nontp_short_liqd_list), min(nontp_short_liqd_list), min(nontp_short_pr_list), max_nontp_short_term))\n","      else:\n","        plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\\nliqd : %.2f\\nnontp_short_liqd_cnt : %s\"  \n","                  % (short_wr, np.min(np_short_pr), total_short_pr[-1], lvrg, min(short_liqd_list), len(nontp_short_liqd_list)))\n","\n","      #         long only      #\n","      np_long_pr = (np.array(long_list) - 1) * lvrg + 1\n","\n","      total_long_pr = np.cumprod(np_long_pr)\n","      long_wr = len(np_long_pr[np_long_pr > 1]) / len(np_long_pr[np_long_pr != 1])\n","      \n","      plt.subplot(233)\n","      plt.plot(total_long_pr)\n","      if len(nontp_long_liqd_list) != 0:\n","\n","        max_nontp_long_term = len(res_df) - nontp_long_indexs[0]\n","\n","        plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\\nliqd : %.2f\\nnontp_long_liqd_cnt : %s\\nnontp_long_liqd : %.2f\\nontp_long_liqd_pr : %.2f\\nmax_nontp_long_term : %s\"   \n","                  % (long_wr, np.min(np_long_pr), total_long_pr[-1], lvrg, min(long_liqd_list), \n","                     len(nontp_long_liqd_list), min(nontp_long_liqd_list), min(nontp_long_pr_list), max_nontp_long_term))\n","      else:\n","        plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\\nliqd : %.2f\\nnontp_long_liqd_cnt : %s\"   \n","                  % (long_wr, np.min(np_long_pr), total_long_pr[-1], lvrg, min(long_liqd_list), len(nontp_long_liqd_list)))\n","\n","\n","      #     reversion adjustment      #\n","      rev_np_pr = (1 / (np.array(pr_list) + fee) - fee - 1) * lvrg + 1\n","          \n","      rev_total_pr = np.cumprod(rev_np_pr)\n","      rev_wr = len(rev_np_pr[rev_np_pr > 1]) / len(rev_np_pr[rev_np_pr != 1])\n","\n","      # plt.subplot(122)\n","      plt.subplot(234)\n","      plt.plot(rev_total_pr)\n","      plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\" % (rev_wr, np.min(rev_np_pr), rev_total_pr[-1], lvrg))\n","\n","      #         short       #\n","      rev_np_short_pr = (1 / (np.array(short_list) + fee) - fee - 1) * lvrg + 1\n","          \n","      rev_total_short_pr = np.cumprod(rev_np_short_pr)\n","      rev_short_wr = len(rev_np_short_pr[rev_np_short_pr > 1]) / len(rev_np_short_pr[rev_np_short_pr != 1])\n","\n","      # plt.subplot(122)\n","      plt.subplot(235)\n","      plt.plot(rev_total_short_pr)\n","      plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\" % (rev_short_wr, np.min(rev_np_short_pr), rev_total_short_pr[-1], lvrg))\n","\n","      #         long       #\n","      rev_np_long_pr = (1 / (np.array(long_list) + fee) - fee - 1) * lvrg + 1\n","          \n","      rev_total_long_pr = np.cumprod(rev_np_long_pr)\n","      rev_long_wr = len(rev_np_long_pr[rev_np_long_pr > 1]) / len(rev_np_long_pr[rev_np_long_pr != 1])\n","\n","      # plt.subplot(122)\n","      plt.subplot(236)\n","      plt.plot(rev_total_long_pr)\n","      plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\" % (rev_long_wr, np.min(rev_np_long_pr), rev_total_long_pr[-1], lvrg))\n","      \n","      plt.show()\n","\n","      h_np_pr = (np.array(h_pr_list) - 1) * lvrg + 1\n","      h_rev_np_pr = (1 / (np.array(h_pr_list) + fee) - fee - 1) * lvrg + 1    # define, for plot_check below cell\n","\n","      # --------------------- h pr plot --------------------- #\n","      if len(h_np_pr[h_np_pr != 1]) != 0:\n","\n","        plt.figure(figsize=(16, 12))\n","        plt.suptitle(key + \" hedge\")\n","\n","        h_total_pr = np.cumprod(h_np_pr)\n","        h_wr = len(h_np_pr[h_np_pr > 1]) / len(h_np_pr[h_np_pr != 1])\n","\n","        # plt.subplot(121)\n","        plt.subplot(231)\n","        plt.plot(h_total_pr)\n","        plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\" % (h_wr, np.min(h_np_pr), h_total_pr[-1], lvrg))\n","        # plt.show()\n","\n","        #         short only      #\n","        h_np_short_pr = (np.array(h_short_list) - 1) * lvrg + 1\n","\n","        h_total_short_pr = np.cumprod(h_np_short_pr)\n","        h_short_wr = len(h_np_short_pr[h_np_short_pr > 1]) / len(h_np_short_pr[h_np_short_pr != 1])\n","        \n","        plt.subplot(232)\n","        plt.plot(h_total_short_pr)\n","        plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\" % (h_short_wr, np.min(h_np_short_pr), h_total_short_pr[-1], lvrg))\n","\n","        #         long only      #\n","        h_np_long_pr = (np.array(h_long_list) - 1) * lvrg + 1\n","\n","        h_total_long_pr = np.cumprod(h_np_long_pr)\n","        h_long_wr = len(h_np_long_pr[h_np_long_pr > 1]) / len(h_np_long_pr[h_np_long_pr != 1])\n","        \n","        plt.subplot(233)\n","        plt.plot(h_total_long_pr)\n","        plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\" % (h_long_wr, np.min(h_np_long_pr), h_total_long_pr[-1], lvrg))\n","\n","\n","        #     reversion adjustment      #\n","            \n","        h_rev_total_pr = np.cumprod(h_rev_np_pr)\n","        h_rev_wr = len(h_rev_np_pr[h_rev_np_pr > 1]) / len(h_rev_np_pr[h_rev_np_pr != 1])\n","\n","        # plt.subplot(122)\n","        plt.subplot(234)\n","        plt.plot(h_rev_total_pr)\n","        plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\" % (h_rev_wr, np.min(h_rev_np_pr), h_rev_total_pr[-1], lvrg))\n","\n","        #         short       #\n","        h_rev_np_short_pr = (1 / (np.array(h_short_list) + fee) - fee - 1) * lvrg + 1\n","            \n","        h_rev_total_short_pr = np.cumprod(h_rev_np_short_pr)\n","        h_rev_short_wr = len(h_rev_np_short_pr[h_rev_np_short_pr > 1]) / len(h_rev_np_short_pr[h_rev_np_short_pr != 1])\n","\n","        # plt.subplot(122)\n","        plt.subplot(235)\n","        plt.plot(h_rev_total_short_pr)\n","        plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\" % (h_rev_short_wr, np.min(h_rev_np_short_pr), h_rev_total_short_pr[-1], lvrg))\n","\n","        #         long       #\n","        h_rev_np_long_pr = (1 / (np.array(h_long_list) + fee) - fee - 1) * lvrg + 1\n","            \n","        h_rev_total_long_pr = np.cumprod(h_rev_np_long_pr)\n","        h_rev_long_wr = len(h_rev_np_long_pr[h_rev_np_long_pr > 1]) / len(h_rev_np_long_pr[h_rev_np_long_pr != 1])\n","\n","        # plt.subplot(122)\n","        plt.subplot(236)\n","        plt.plot(h_rev_total_long_pr)\n","        plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\" % (h_rev_long_wr, np.min(h_rev_np_long_pr), h_rev_total_long_pr[-1], lvrg))\n","        \n","        plt.show()\n","          \n","    except Exception as e:\n","      print('error in pr plot :', e)   \n","    \n","\n","    print()\n","\n","    break # indi. loop\n","  break # pair loop"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"2K7geI82NvJi"},"source":["##st color"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":841},"id":"XR4vnjFrNw_y","executionInfo":{"status":"ok","timestamp":1627813325661,"user_tz":-540,"elapsed":6507,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"}},"outputId":"acb8c456-4c9b-4ea9-db9f-7dce086b3cde"},"source":["fee = 0.0004\n","lvrg = 5\n","\n","# cloud_shift_size = -1\n","# cloud_shift_size = 15\n","cloud_shift_size = 1\n","# cloud_shift_size = 0\n","\n","# cloud_lookback = 50\n","# cloud_lookback = 70\n","cloud_lookback = 150\n","cloud_lookback = 100\n","# cloud_lookback = 69\n","cloud_lookback = 57\n","\n","close_shift_size = 1\n","\n","\n","#       1-0. ep line = color on st min/max 조금 이내       #\n","#       1-0-1. option1. color on upper st 색출 \n","# -->   1-0-1. option2. min upper st 바로 추출\n","#       1-0-2. 색출된 st 중 min / max st 선별\n","gap = 0.0002\n","gap = 0.0001\n","gap = 0.00005\n","# gap = 0.0000\n","# gap = -0.00005\n","\n","p_qty_divider = 1.5\n","\n","\n","senkoua_list = ['senkou_a1', 'senkou_a2', 'senkou_a3', 'senkou_a4', 'senkou_a5']\n","senkoub_list = ['senkou_b1', 'senkou_b2', 'senkou_b3', 'senkou_b4', 'senkou_b5']\n","\n","\n","save_path = './candlestick_concated/res_df/'\n","res_df_list = os.listdir(save_path)\n","\n","for key in res_df_list:\n","\n","  # if '2021-04-30'.upper() not in key:\n","  # if '2021-05-30'.upper() not in key:\n","  if '2021-06-30'.upper() not in key:\n","  # if '2021-07-03'.upper() not in key:\n","  # if '2021-07-01'.upper() not in key:\n","    continue\n","\n","  # if \"link\".upper() not in key:\n","  # if \"eth\".upper() not in key:\n","  #   continue\n","\n","  if \"cctbbo_backi2\" not in key:\n","    continue\n","\n","\n","  # res_df = pd.read_excel(save_path + key, index_col=0)\n","\n","  print(key, \"loaded !\")\n","\n","  for senkou_a, senkou_b in zip(senkoua_list, senkoub_list):\n","\n","    \n","    cloud_top = np.max(res_df[[senkou_a, senkou_b]], axis=1)\n","    cloud_bottom = np.min(res_df[[senkou_a, senkou_b]], axis=1)\n","    \n","    upper_ep = res_df['middle_line']\n","    lower_ep = res_df['middle_line']\n","\n","    upper_middle = (res_df['middle_line'] + res_df['min_upper']) / 2\n","    lower_middle = (res_df['middle_line'] + res_df['max_lower']) / 2\n","\n","    under_top = res_df['close'].shift(cloud_shift_size) <= cloud_top.shift(cloud_shift_size)\n","    over_bottom = res_df['close'].shift(cloud_shift_size) >= cloud_bottom.shift(cloud_shift_size)\n","    # print(\"under_top :\", under_top)\n","    # break\n","\n","    fisher_upper = 1.5\n","    fisher_lower = -1.5\n","    \n","    #       short = -1      #\n","    entry = np.where((res_df['fisher'].shift(1) >= res_df['fisher']) & \n","                      (res_df['fisher'].shift(2) <= res_df['fisher']).shift(1) &\n","                      (res_df['fisher'].shift(1) >= fisher_upper)\n","                      , -1, 0) \n","\n","    #       long = 1     #\n","    entry = np.where((res_df['fisher'].shift(1) <= res_df['fisher']) & \n","                      (res_df['fisher'].shift(2) >= res_df['fisher']).shift(1) &\n","                      (res_df['fisher'].shift(1) <= fisher_lower)\n","                      , 1, entry) \n","\n","\n","\n","    #       1-2. tp line = middle line 조금 이내         #\n","    # short_tp = res_df['middle_line'] * (1 + gap)\n","    # long_tp = res_df['middle_line'] * (1 - gap)\n","    \n","    short_tp = lower_middle * (1 + gap)\n","    long_tp = upper_middle * (1 - gap)\n","\n","    short_tp2 = res_df['middle_line'] * (1 + gap)\n","    long_tp2 = res_df['middle_line'] * (1 - gap)\n","\n","    # short_tp = (res_df['middle_line'] + res_df['min_upper']) / 2\n","    # long_tp = (res_df['middle_line'] + res_df['max_lower']) / 2\n","\n","\n","\n","    #       trading : 여기도 체결 결과에 대해 묘사함       #\n","    trade_list = []\n","    h_trade_list = []\n","\n","    pr_list = []\n","    long_list = []\n","    short_list = []\n","\n","    h_pr_list = []\n","    h_long_list = []\n","    h_short_list = []\n","\n","    ep_tp_list = []\n","    h_ep_tp_list = []\n","    tp_state_list = []\n","\n","    i = 0\n","    while 1:\n","    # for i in range(len(res_df)):\n","\n","      # if i < cloud_lookback:\n","      #   i += 1\n","      #   if i >= len(res_df):\n","      #     break\n","      #   continue\n","\n","      # if entry[i] == -1:\n","      if entry[i] in [-1, -2]:\n","\n","        initial_i = i\n","\n","\n","        #               cloud const.         #      \n","        # if np.sum(under_top.iloc[i + 1 - cloud_lookback:i + 1]) != cloud_lookback:\n","        # # if np.sum(under_top.iloc[i - cloud_lookback:i]) != cloud_lookback:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue  \n","        # else:\n","        #   print(\"np.sum(under_top.iloc[i + 1 - cloud_lookback:i + 1]) :\", under_top.iloc[i + 1 - cloud_lookback:i + 1]) \n","\n","\n","        #               st color const.           #\n","        # if np.sum(res_df[['minor_ST1_Trend', 'minor_ST2_Trend', 'minor_ST3_Trend']].iloc[i]) <= -1:\n","        # if np.sum(res_df[['minor_ST1_Trend', 'minor_ST2_Trend', 'minor_ST3_Trend']].iloc[i]) <= 1:          \n","        if np.sum(res_df[['minor_ST1_Trend', 'minor_ST2_Trend', 'minor_ST3_Trend']].iloc[i]) <= -3:          \n","          pass\n","        else:\n","          i += 1\n","          if i >= len(res_df):\n","            break\n","          continue\n","\n","        #               sar const.            #\n","        # if res_df['sar2'].iloc[i] > res_df['high'].iloc[i] and res_df['sar3'].iloc[i] > res_df['high'].iloc[i]:\n","        #   pass\n","        # else:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","\n","        #               limit waiting const.             #\n","        # entry_done = False\n","        # for e_j in range(i + 1, len(res_df)):\n","\n","        #   #             Todo            #\n","        #   #             1. ep 설정\n","        #   #             2. limit 대기 시간 설정\n","        #   if res_df['high'].iloc[e_j] >= upper_ep.iloc[initial_i]:\n","        #     entry_done = True\n","        #     # print(\"e_j :\", e_j)\n","        #     break\n","\n","        #   if res_df['close'].iloc[e_j] > res_df['middle_line'].iloc[e_j]:\n","        #     break\n","\n","        # i = e_j\n","        # # print(\"i = e_j :\", i)\n","\n","\n","        # if entry_done:\n","        #   pass\n","        # else:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","        \n","        temp_tp_list = []\n","        remain_tp = 2\n","        hedge_cnt = 1\n","        h_ep, h_tp = None, None\n","        h_i, h_j = None, None\n","        trade_done = False\n","        \n","        for j in range(i + 1, len(res_df)):\n","\n","          \n","          # -------------- hedge only once -------------- #\n","          #             일단, h_quantity 는 초기 진입과 동일하게 설정         #\n","          # if res_df['high'].iloc[j] >= res_df['minor_ST2_Up'].iloc[j] and hedge_cnt == 1:\n","          # if res_df['close'].iloc[j] >= res_df['minor_ST2_Up'].iloc[j] and hedge_cnt == 1:\n","          # if res_df['close'].iloc[j] >= res_df['minor_ST3_Up'].iloc[j] and hedge_cnt == 1:\n","\n","          #   h_ep = res_df['close'].iloc[j]\n","          #   hedge_cnt -= 1\n","          #   h_i = j\n","\n","\n","          # -------------- sub tp -------------- #\n","          # if res_df['low'].iloc[j] <= short_tp2.iloc[j] and remain_tp == 2:\n","          # # if res_df['low'].iloc[j] <= short_tp2.iloc[j] <= res_df['high'].iloc[j]: --> 이건 잘못되었음\n","\n","          #   # trade_done = True # <-- sub tp 에는 trade_done 을 주지 않음 !\n","          #   remain_tp -= 1\n","\n","          #   #         dynamic tp        #\n","          #   if short_tp2.iloc[j] != short_tp2.iloc[j - 1]:\n","\n","          #     #   tp limit 이 불가한 경우 = open 이 이미, tp 를 넘은 경우 # \n","          #     if res_df['open'].iloc[j] < short_tp2.iloc[j]:\n","\n","          #       # tp = short_tp2.iloc[j]\n","          #       tp = res_df['open'].iloc[j]\n","          #       # tp_state_list.append(\"d-open\")\n","\n","          #     #   tp limit 이 가능한 경우 = open 이 아직, tp 를 넘지 않은 경우 # \n","          #     else:\n","\n","          #       tp = short_tp2.iloc[j]\n","          #       # tp = res_df['open'].iloc[j]\n","          #       # tp_state_list.append(\"d-short_tp2\")\n","\n","          #   #         static tp         #\n","          #   else:\n","              \n","          #     #   tp limit 이 불가한 경우 = open 이 이미, tp 를 넘은 경우 # \n","          #     #   non_inversion 의 경우, short_tp2 가 가능함   #\n","\n","          #     if res_df['open'].iloc[j] < short_tp2.iloc[j]:\n","\n","          #       tp = short_tp2.iloc[j]\n","          #       # tp = res_df['open'].iloc[j]\n","          #       # tp_state_list.append(\"s-short_tp2\")\n","\n","          #     #   tp limit 이 가능한 경우 = open 이 아직, tp 를 넘지 않은 경우 # \n","          #     else:\n","\n","          #       tp = short_tp2.iloc[j]\n","          #       # tp = res_df['open'].iloc[j]\n","          #       # tp_state_list.append(\"s-short_tp2\")   \n","\n","          #   temp_tp_list.append(tp)  \n","\n","\n","          # # -------------- ultimate tp -------------- #\n","          if res_df['low'].iloc[j] <= short_tp.iloc[j]:\n","          # if res_df['low'].iloc[j] <= short_tp.iloc[j] <= res_df['high'].iloc[j]: --> 이건 잘못되었음\n","\n","            trade_done = True\n","\n","            #         dynamic tp        #\n","            if short_tp.iloc[j] != short_tp.iloc[j - 1]:\n","\n","              #   tp limit 이 불가한 경우 = open 이 이미, tp 를 넘은 경우 # \n","              if res_df['open'].iloc[j] < short_tp.iloc[j]:\n","\n","                # tp = short_tp.iloc[j]\n","                tp = res_df['open'].iloc[j]\n","                tp_state_list.append(\"d-open\")\n","\n","              #   tp limit 이 가능한 경우 = open 이 아직, tp 를 넘지 않은 경우 # \n","              else:\n","\n","                tp = short_tp.iloc[j]\n","                # tp = res_df['open'].iloc[j]\n","                # tp = res_df['open'].iloc[j]\n","                tp_state_list.append(\"d-short_tp\")\n","\n","            #         static tp         #\n","            else:\n","              \n","              #   tp limit 이 불가한 경우 = open 이 이미, tp 를 넘은 경우 # \n","              #   non_inversion 의 경우, short_tp 가 가능함   #\n","\n","              if res_df['open'].iloc[j] < short_tp.iloc[j]:\n","\n","                tp = short_tp.iloc[j]\n","                # tp = res_df['open'].iloc[j]\n","                tp_state_list.append(\"s-short_tp\")\n","\n","              #   tp limit 이 가능한 경우 = open 이 아직, tp 를 넘지 않은 경우 # \n","              else:\n","\n","                tp = short_tp.iloc[j]\n","                # tp = res_df['open'].iloc[j]\n","                tp_state_list.append(\"s-short_tp\")   \n","\n","            temp_tp_list.append(tp)            \n","\n","                  \n","          # -------------- cut -------------- #\n","          # elif res_df['macd_hist3'].iloc[j] > 0:  #  macd cut\n","          # # elif res_df['macd_hist3'].iloc[i] < 0 and res_df['macd_hist3'].iloc[j] > 0:\n","\n","          # if res_df['close'].iloc[j] > res_df['middle_line'].iloc[j]:            \n","\n","          #   tp = res_df['close'].iloc[j]\n","          #   # tp = res_df['open'].iloc[j]\n","          #   tp_state_list.append(\"close cut\")\n","          #   trade_done = True\n","\n","          #   temp_tp_list.append(tp) \n","\n","\n","          # -------------- append trade data -------------- #\n","          if trade_done:\n","\n","            if entry[initial_i] == -1:\n","              ep = res_df['close'].iloc[initial_i]\n","              # ep = upper_ep.iloc[initial_i]\n","            else:\n","              ep = res_df['open'].iloc[initial_i]\n","              # ep = upper_ep.iloc[initial_i]\n","              # ep = res_df['close'].iloc[initial_i - 1]     \n","\n","            #       Todo      #\n","            #        1. len(temp_tp_list) 에 대응하는 qty_list 를 만들어야함    #\n","            #        2. temp_pr_list 를 만들어 총합 + 1 을 pr_list 에 저장      #\n","            #        2-1. temp_pr = sum((ep / temp_tp_list[i] - fee - 1) * qty_list[i])   #\n","            #        3. temp_pr_list 의 첫 tp 에는 r_qty 를 할당함        #\n","            qty_list = []\n","            temp_pr_list = []\n","            r_qty = 1\n","            for q_i in range(len(temp_tp_list) - 1, -1, -1):\n","\n","              if len(temp_tp_list) == 1:\n","                temp_qty = r_qty\n","              else:\n","                if q_i !=0:\n","                  temp_qty = r_qty / p_qty_divider\n","                else:\n","                  temp_qty = r_qty\n","\n","              temp_pr = (ep / temp_tp_list[q_i] - fee - 1) * temp_qty\n","              r_qty -= temp_qty\n","\n","              temp_pr_list.append(temp_pr)\n","              qty_list.append(temp_qty)\n","\n","            # if len(temp_pr_list) == 1:\n","            #   print(\"qty_list :\", qty_list)\n","            #   print(\"temp_pr_list :\", temp_pr_list)\n","\n","            temp_pr = sum(temp_pr_list) + 1\n","\n","            #   hedge + non_hedge pr summation    #\n","            #   hedge pr direction is opposite to the other   #\n","            hedge_pr = 1\n","            if hedge_cnt == 0:\n","\n","              #       hedge tp      #\n","              h_tp = res_df['close'].iloc[j]\n","              hedge_pr = h_tp / h_ep - fee  # hedge long\n","              temp_pr += hedge_pr - 1\n","              h_j = j\n","\n","            ep_tp_list.append((ep, temp_tp_list))  \n","            trade_list.append([initial_i, i, j])\n","\n","            h_ep_tp_list.append((h_ep, h_tp))        \n","            h_trade_list.append([initial_i, h_i, h_j])                \n","\n","            pr_list.append(temp_pr)\n","            short_list.append(temp_pr)\n","\n","            h_pr_list.append(hedge_pr)\n","            h_short_list.append(hedge_pr)\n","\n","            i = j\n","            break\n","\n","\n","      #                  long  phase                #\n","      # elif entry[i] == 1:\n","      elif entry[i] in [1, 2]:\n","\n","        initial_i = i\n","\n","\n","        #               cloud const.          #     \n","        # if np.sum(over_bottom.iloc[i + 1 - cloud_lookback:i + 1]) != cloud_lookback:\n","        # # if np.sum(over_bottom.iloc[i - cloud_lookback:i]) != cloud_lookback:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue  \n","\n","        #               st color const.           #\n","        # if np.sum(res_df[['minor_ST1_Trend', 'minor_ST2_Trend', 'minor_ST3_Trend']].iloc[i]) >= 1:\n","        # if np.sum(res_df[['minor_ST1_Trend', 'minor_ST2_Trend', 'minor_ST3_Trend']].iloc[i]) >= -1:\n","        if np.sum(res_df[['minor_ST1_Trend', 'minor_ST2_Trend', 'minor_ST3_Trend']].iloc[i]) >= 3:\n","          pass\n","        else:\n","          i += 1\n","          if i >= len(res_df):\n","            break\n","          continue\n","\n","        #               sar const.            #\n","        # if res_df['sar2'].iloc[i] < res_df['low'].iloc[i] and res_df['sar3'].iloc[i] < res_df['low'].iloc[i]:\n","        #   pass\n","        # else:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","        #               limit waiting const.             #\n","        # entry_done = False\n","        # for e_j in range(i + 1, len(res_df)):\n","\n","        #   #             Todo            #\n","        #   #             1. ep 설정\n","        #   #             2. limit 대기 시간 설정\n","        #   if res_df['low'].iloc[e_j] <= upper_ep.iloc[initial_i]:\n","        #     entry_done = True\n","        #     break\n","\n","        #   if res_df['close'].iloc[e_j] < res_df['middle_line'].iloc[e_j]:     \n","        #     break\n","\n","        # i = e_j\n","\n","\n","        # if entry_done:\n","        #   pass\n","        # else:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","\n","        temp_tp_list =[]\n","        remain_tp = 2\n","        hedge_cnt = 1\n","        h_ep, h_tp = None, None        \n","        h_i, h_j = None, None        \n","        trade_done = False\n","\n","        for j in range(i + 1, len(res_df)):        \n","\n","          # -------------- hedge only once -------------- #\n","          #             일단, h_quantity 는 초기 진입과 동일하게 설정         #\n","          # if res_df['low'].iloc[j] <= res_df['minor_ST2_Down'].iloc[j] and hedge_cnt == 1:\n","          # if res_df['close'].iloc[j] <= res_df['minor_ST2_Down'].iloc[j] and hedge_cnt == 1:\n","          # if res_df['close'].iloc[j] <= res_df['minor_ST3_Down'].iloc[j] and hedge_cnt == 1:\n","\n","          #   h_ep = res_df['close'].iloc[j]\n","          #   hedge_cnt -= 1\n","          #   h_i = j\n","\n","\n","          # -------------- sub tp --------------  #\n","          # if res_df['high'].iloc[j] >= long_tp2.iloc[j] and remain_tp == 2:\n","\n","          #   # trade_done = True\n","          #   remain_tp -= 1\n","\n","          #   #         dynamic tp        #\n","          #   if long_tp2.iloc[j] != long_tp2.iloc[j - 1]:\n","\n","          #     #   tp limit 이 불가한 경우 = open 이 이미, tp 를 넘은 경우 # \n","          #     if res_df['open'].iloc[j] >= long_tp2.iloc[j]:\n","\n","          #       # tp = long_tp2.iloc[j]\n","          #       tp = res_df['open'].iloc[j]\n","          #       # tp_state_list.append(\"d-open\")\n","\n","              \n","          #     #   tp limit 이 가능한 경우 = open 이 아직, tp 를 넘지 않은 경우 # \n","          #     else:\n","                \n","          #       tp = long_tp2.iloc[j]\n","          #       # tp = res_df['open'].iloc[j]\n","          #       # tp_state_list.append(\"d-long_tp2\")\n","\n","          #   #         static tp         #\n","          #   else:\n","\n","          #     #   tp limit 이 불가한 경우 = open 이 이미, tp 를 넘은 경우 # \n","          #     #   non_inversion 의 경우, short_tp 가 가능함   #\n","\n","          #     if res_df['open'].iloc[j] >= long_tp2.iloc[j]:\n","\n","          #       tp = long_tp2.iloc[j]\n","          #       # tp = res_df['open'].iloc[j]\n","          #       # tp_state_list.append(\"s-long_tp2\")\n","\n","              \n","          #     #   tp limit 이 가능한 경우 = open 이 아직, tp 를 넘지 않은 경우 # \n","          #     else:\n","                \n","          #       tp = long_tp2.iloc[j]\n","          #       # tp = res_df['open'].iloc[j]\n","          #       # tp_state_list.append(\"s-long_tp2\")       \n","            \n","          #   temp_tp_list.append(tp)  \n","\n","\n","          # # -------------- ultimate tp -------------- #\n","          if res_df['high'].iloc[j] >= long_tp.iloc[j]:\n","\n","            trade_done = True\n","\n","            #         dynamic tp        #\n","            if long_tp.iloc[j] != long_tp.iloc[j - 1]:\n","\n","              #   tp limit 이 불가한 경우 = open 이 이미, tp 를 넘은 경우 # \n","              if res_df['open'].iloc[j] >= long_tp.iloc[j]:\n","\n","                # tp = long_tp.iloc[j]\n","                tp = res_df['open'].iloc[j]\n","                tp_state_list.append(\"d-open\")\n","\n","              \n","              #   tp limit 이 가능한 경우 = open 이 아직, tp 를 넘지 않은 경우 # \n","              else:\n","                \n","                tp = long_tp.iloc[j]\n","                # tp = res_df['open'].iloc[j]\n","                tp_state_list.append(\"d-long_tp\")\n","\n","            #         static tp         #\n","            else:\n","\n","              #   tp limit 이 불가한 경우 = open 이 이미, tp 를 넘은 경우 # \n","              #   non_inversion 의 경우, short_tp 가 가능함   #\n","\n","              if res_df['open'].iloc[j] >= long_tp.iloc[j]:\n","\n","                tp = long_tp.iloc[j]\n","                # tp = res_df['open'].iloc[j]\n","                tp_state_list.append(\"s-long_tp\")\n","\n","              \n","              #   tp limit 이 가능한 경우 = open 이 아직, tp 를 넘지 않은 경우 # \n","              else:\n","                \n","                tp = long_tp.iloc[j]\n","                # tp = res_df['open'].iloc[j]\n","                tp_state_list.append(\"s-long_tp\")         \n","            \n","            temp_tp_list.append(tp)\n","\n","\n","\n","          # -------------- cut -------------- #\n","          # elif res_df['macd_hist3'].iloc[j] < 0:\n","          # # elif res_df['macd_hist3'].iloc[i] > 0 and res_df['macd_hist3'].iloc[j] < 0:\n","          # if res_df['close'].iloc[j] < res_df['middle_line'].iloc[j]:            \n","\n","          #   tp = res_df['close'].iloc[j]\n","          #   # tp = res_df['open'].iloc[j]\n","          #   tp_state_list.append(\"close cut\")\n","          #   trade_done = True\n","\n","          #   temp_tp_list.append(tp)\n","\n","\n","          if trade_done:\n","\n","            if entry[initial_i] == 1:\n","              ep = res_df['close'].iloc[initial_i]\n","              # ep = lower_ep.iloc[initial_i]\n","            else:\n","              # ep = lower_ep.iloc[i]\n","              ep = res_df['open'].iloc[initial_i]\n","              # ep = res_df['close'].iloc[initial_i - 1]\n","\n","            qty_list = []\n","            temp_pr_list = []\n","            r_qty = 1\n","            for q_i in range(len(temp_tp_list) - 1, -1, -1):\n","\n","              if len(temp_tp_list) == 1:\n","                temp_qty = r_qty\n","              else:\n","                if q_i !=0:\n","                  temp_qty = r_qty / p_qty_divider\n","                else:\n","                  temp_qty = r_qty\n","\n","              temp_pr = (temp_tp_list[q_i] / ep - fee - 1) * temp_qty\n","              r_qty -= temp_qty\n","\n","              temp_pr_list.append(temp_pr)\n","\n","            temp_pr = sum(temp_pr_list) + 1\n","\n","            #   hedge + non_hedge pr summation    #\n","            #   hedge pr direction is opposite to the other   #\n","            hedge_pr = 1\n","            if hedge_cnt == 0:\n","\n","              #       hedge tp      #\n","              h_tp = res_df['close'].iloc[j]\n","              hedge_pr = h_ep / h_tp - fee  # hedge short\n","              temp_pr += hedge_pr - 1\n","              h_j = j\n","\n","            ep_tp_list.append((ep, temp_tp_list))\n","            trade_list.append([initial_i, i, j])\n","\n","            h_ep_tp_list.append((h_ep, h_tp))        \n","            h_trade_list.append([initial_i, h_i, h_j])                \n","\n","            pr_list.append(temp_pr)\n","            long_list.append(temp_pr)\n","\n","            h_pr_list.append(hedge_pr)\n","            h_long_list.append(hedge_pr)                    \n","\n","            i = j\n","            break\n","\n","\n","      i += 1\n","      if i >= len(res_df):\n","        break\n","\n","\n","\n","    # -------------------- result analysis -------------------- #\n","    plt.figure(figsize=(16, 12))\n","    plt.suptitle(key)\n","\n","    np_pr = (np.array(pr_list) - 1) * lvrg + 1\n","\n","    total_pr = np.cumprod(np_pr)\n","    wr = len(np_pr[np_pr > 1]) / len(np_pr[np_pr != 1])\n","\n","    # plt.subplot(121)\n","    plt.subplot(231)\n","    plt.plot(total_pr)\n","    plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\" % (wr, np.min(np_pr), total_pr[-1], lvrg))\n","    # plt.show()\n","\n","    #         short only      #\n","    np_short_pr = (np.array(short_list) - 1) * lvrg + 1\n","\n","    total_short_pr = np.cumprod(np_short_pr)\n","    short_wr = len(np_short_pr[np_short_pr > 1]) / len(np_short_pr[np_short_pr != 1])\n","    \n","    plt.subplot(232)\n","    plt.plot(total_short_pr)\n","    plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\" % (short_wr, np.min(np_short_pr), total_short_pr[-1], lvrg))\n","\n","    #         long only      #\n","    np_long_pr = (np.array(long_list) - 1) * lvrg + 1\n","\n","    total_long_pr = np.cumprod(np_long_pr)\n","    long_wr = len(np_long_pr[np_long_pr > 1]) / len(np_long_pr[np_long_pr != 1])\n","    \n","    plt.subplot(233)\n","    plt.plot(total_long_pr)\n","    plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\" % (long_wr, np.min(np_long_pr), total_long_pr[-1], lvrg))\n","\n","\n","    #     reversion adjustment      #\n","    rev_np_pr = (1 / (np.array(pr_list) + fee) - fee - 1) * lvrg + 1\n","        \n","    rev_total_pr = np.cumprod(rev_np_pr)\n","    rev_wr = len(rev_np_pr[rev_np_pr > 1]) / len(rev_np_pr[rev_np_pr != 1])\n","\n","    # plt.subplot(122)\n","    plt.subplot(234)\n","    plt.plot(rev_total_pr)\n","    plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\" % (rev_wr, np.min(rev_np_pr), rev_total_pr[-1], lvrg))\n","\n","    #         short       #\n","    rev_np_short_pr = (1 / (np.array(short_list) + fee) - fee - 1) * lvrg + 1\n","        \n","    rev_total_short_pr = np.cumprod(rev_np_short_pr)\n","    rev_short_wr = len(rev_np_short_pr[rev_np_short_pr > 1]) / len(rev_np_short_pr[rev_np_short_pr != 1])\n","\n","    # plt.subplot(122)\n","    plt.subplot(235)\n","    plt.plot(rev_total_short_pr)\n","    plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\" % (rev_short_wr, np.min(rev_np_short_pr), rev_total_short_pr[-1], lvrg))\n","\n","    #         long       #\n","    rev_np_long_pr = (1 / (np.array(long_list) + fee) - fee - 1) * lvrg + 1\n","        \n","    rev_total_long_pr = np.cumprod(rev_np_long_pr)\n","    rev_long_wr = len(rev_np_long_pr[rev_np_long_pr > 1]) / len(rev_np_long_pr[rev_np_long_pr != 1])\n","\n","    # plt.subplot(122)\n","    plt.subplot(236)\n","    plt.plot(rev_total_long_pr)\n","    plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\" % (rev_long_wr, np.min(rev_np_long_pr), rev_total_long_pr[-1], lvrg))\n","    \n","    plt.show()\n","\n","\n","\n","    # --------------------- h pr plot --------------------- #\n","\n","    plt.figure(figsize=(16, 12))\n","    plt.suptitle(key)\n","\n","    h_np_pr = (np.array(h_pr_list) - 1) * lvrg + 1\n","    h_rev_np_pr = (1 / (np.array(h_pr_list) + fee) - fee - 1) * lvrg + 1    # define, for plot_check below cell\n","\n","    h_total_pr = np.cumprod(h_np_pr)\n","    try:\n","      h_wr = len(h_np_pr[h_np_pr > 1]) / len(h_np_pr[h_np_pr != 1])\n","    except Exception as e:\n","      print(e)\n","      break\n","\n","    # plt.subplot(121)\n","    plt.subplot(231)\n","    plt.plot(h_total_pr)\n","    plt.title(\"h_wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\" % (h_wr, np.min(h_np_pr), h_total_pr[-1], lvrg))\n","    # plt.show()\n","\n","    #         short only      #\n","    h_np_short_pr = (np.array(h_short_list) - 1) * lvrg + 1\n","\n","    h_total_short_pr = np.cumprod(h_np_short_pr)\n","    h_short_wr = len(h_np_short_pr[h_np_short_pr > 1]) / len(h_np_short_pr[h_np_short_pr != 1])\n","    \n","    plt.subplot(232)\n","    plt.plot(h_total_short_pr)\n","    plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\" % (h_short_wr, np.min(h_np_short_pr), h_total_short_pr[-1], lvrg))\n","\n","    #         long only      #\n","    h_np_long_pr = (np.array(h_long_list) - 1) * lvrg + 1\n","\n","    h_total_long_pr = np.cumprod(h_np_long_pr)\n","    h_long_wr = len(h_np_long_pr[h_np_long_pr > 1]) / len(h_np_long_pr[h_np_long_pr != 1])\n","    \n","    plt.subplot(233)\n","    plt.plot(h_total_long_pr)\n","    plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\" % (h_long_wr, np.min(h_np_long_pr), h_total_long_pr[-1], lvrg))\n","\n","\n","    #     reversion adjustment      #\n","        \n","    h_rev_total_pr = np.cumprod(h_rev_np_pr)\n","    h_rev_wr = len(h_rev_np_pr[h_rev_np_pr > 1]) / len(h_rev_np_pr[h_rev_np_pr != 1])\n","\n","    # plt.subplot(122)\n","    plt.subplot(234)\n","    plt.plot(h_rev_total_pr)\n","    plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\" % (h_rev_wr, np.min(h_rev_np_pr), h_rev_total_pr[-1], lvrg))\n","\n","    #         short       #\n","    h_rev_np_short_pr = (1 / (np.array(h_short_list) + fee) - fee - 1) * lvrg + 1\n","        \n","    h_rev_total_short_pr = np.cumprod(h_rev_np_short_pr)\n","    h_rev_short_wr = len(h_rev_np_short_pr[h_rev_np_short_pr > 1]) / len(h_rev_np_short_pr[h_rev_np_short_pr != 1])\n","\n","    # plt.subplot(122)\n","    plt.subplot(235)\n","    plt.plot(h_rev_total_short_pr)\n","    plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\" % (h_rev_short_wr, np.min(h_rev_np_short_pr), h_rev_total_short_pr[-1], lvrg))\n","\n","    #         long       #\n","    h_rev_np_long_pr = (1 / (np.array(h_long_list) + fee) - fee - 1) * lvrg + 1\n","        \n","    h_rev_total_long_pr = np.cumprod(h_rev_np_long_pr)\n","    h_rev_long_wr = len(h_rev_np_long_pr[h_rev_np_long_pr > 1]) / len(h_rev_np_long_pr[h_rev_np_long_pr != 1])\n","\n","    # plt.subplot(122)\n","    plt.subplot(236)\n","    plt.plot(h_rev_total_long_pr)\n","    plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\" % (h_rev_long_wr, np.min(h_rev_np_long_pr), h_rev_total_long_pr[-1], lvrg))\n","    \n","    plt.show()\n","    print()\n","\n","    break\n","  break"],"execution_count":null,"outputs":[{"output_type":"stream","text":["2021-06-30 LTCUSDT_cctbbo_backi2.xlsx loaded !\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1152x864 with 6 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}},{"output_type":"stream","text":["division by zero\n"],"name":"stdout"},{"output_type":"display_data","data":{"text/plain":["<Figure size 1152x864 with 0 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"markdown","metadata":{"id":"GMJCWUW2MxVJ"},"source":["## sar"]},{"cell_type":"markdown","metadata":{"id":"IIc9oAx_Swv2"},"source":["### one sar"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"Nlr7u6vcMyk4","executionInfo":{"status":"ok","timestamp":1627814041240,"user_tz":-540,"elapsed":25560,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"}},"outputId":"0597f698-6c8a-44c4-cb0f-b1e4f7d3aced"},"source":["fee = 0.0004\n","lvrg = 5\n","\n","# cloud_shift_size = -1\n","# cloud_shift_size = 15\n","cloud_shift_size = 1\n","# cloud_shift_size = 0\n","\n","# cloud_lookback = 50\n","# cloud_lookback = 70\n","cloud_lookback = 150\n","cloud_lookback = 100\n","# cloud_lookback = 69\n","cloud_lookback = 57\n","\n","close_shift_size = 1\n","\n","\n","#       1-0. ep line = color on st min/max 조금 이내       #\n","#       1-0-1. option1. color on upper st 색출 \n","# -->   1-0-1. option2. min upper st 바로 추출\n","#       1-0-2. 색출된 st 중 min / max st 선별\n","gap = 0.0002\n","gap = 0.0001\n","gap = 0.00005\n","# gap = 0.0000\n","# gap = -0.00005\n","\n","p_qty_divider = 1.5\n","\n","\n","# senkoua_list = ['senkou_a1', 'senkou_a2', 'senkou_a3', 'senkou_a4', 'senkou_a5']\n","# senkoub_list = ['senkou_b1', 'senkou_b2', 'senkou_b3', 'senkou_b4', 'senkou_b5']\n","sar_list = ['sar1', 'sar2', 'sar3', 'sar4', 'sar5']\n","sar_list = [ 'sar2']\n","\n","\n","save_path = './candlestick_concated/res_df/'\n","res_df_list = os.listdir(save_path)\n","\n","for key in res_df_list:\n","\n","  # if '2021-04-30'.upper() not in key:\n","  # if '2021-05-30'.upper() not in key:\n","  if '2021-06-30'.upper() not in key:\n","  # if '2021-07-03'.upper() not in key:\n","  # if '2021-07-01'.upper() not in key:\n","    continue\n","\n","  # if \"link\".upper() not in key:\n","  # if \"eth\".upper() not in key:\n","  #   continue\n","\n","  if \"cctbbo_backi2\" not in key:\n","    continue\n","\n","\n","  res_df = pd.read_excel(save_path + key, index_col=0)\n","\n","  print(key, \"loaded !\")\n","\n","  # for senkou_a, senkou_b in zip(senkoua_list, senkoub_list):\n","  for sar in sar_list:\n","\n","\n","    print(\"sar :\", sar)\n","\n","    \n","    # cloud_top = np.max(res_df[[senkou_a, senkou_b]], axis=1)\n","    # cloud_bottom = np.min(res_df[[senkou_a, senkou_b]], axis=1)\n","    \n","    upper_ep = res_df['middle_line']\n","    lower_ep = res_df['middle_line']\n","\n","    upper_middle = (res_df['middle_line'] + res_df['min_upper']) / 2\n","    lower_middle = (res_df['middle_line'] + res_df['max_lower']) / 2\n","\n","    # under_top = res_df['close'].shift(cloud_shift_size) <= cloud_top.shift(cloud_shift_size)\n","    # over_bottom = res_df['close'].shift(cloud_shift_size) >= cloud_bottom.shift(cloud_shift_size)\n","    # print(\"under_top :\", under_top)\n","    # break\n","\n","    fisher_upper = 1.5\n","    fisher_lower = -1.5\n","    \n","    #       short = -1      #\n","    entry = np.where((res_df['fisher'].shift(1) >= res_df['fisher']) & \n","                      (res_df['fisher'].shift(2) <= res_df['fisher']).shift(1) &\n","                      (res_df['fisher'].shift(1) >= fisher_upper)\n","                      , -1, 0) \n","\n","    #       long = 1     #\n","    entry = np.where((res_df['fisher'].shift(1) <= res_df['fisher']) & \n","                      (res_df['fisher'].shift(2) >= res_df['fisher']).shift(1) &\n","                      (res_df['fisher'].shift(1) <= fisher_lower)\n","                      , 1, entry) \n","\n","\n","\n","    #       1-2. tp line = middle line 조금 이내         #\n","    # short_tp = res_df['middle_line'] * (1 + gap)\n","    # long_tp = res_df['middle_line'] * (1 - gap)\n","    \n","    short_tp = lower_middle * (1 + gap)\n","    long_tp = upper_middle * (1 - gap)\n","\n","    short_tp2 = res_df['middle_line'] * (1 + gap)\n","    long_tp2 = res_df['middle_line'] * (1 - gap)\n","\n","    # short_tp = (res_df['middle_line'] + res_df['min_upper']) / 2\n","    # long_tp = (res_df['middle_line'] + res_df['max_lower']) / 2\n","\n","\n","\n","    #       trading : 여기도 체결 결과에 대해 묘사함       #\n","    trade_list = []\n","    h_trade_list = []\n","\n","    pr_list = []\n","    long_list = []\n","    short_list = []\n","\n","    h_pr_list = []\n","    h_long_list = []\n","    h_short_list = []\n","\n","    ep_tp_list = []\n","    h_ep_tp_list = []\n","    tp_state_list = []\n","\n","    i = 0\n","    while 1:\n","    # for i in range(len(res_df)):\n","\n","      # if i < cloud_lookback:\n","      #   i += 1\n","      #   if i >= len(res_df):\n","      #     break\n","      #   continue\n","\n","      # if entry[i] == -1:\n","      if entry[i] in [-1, -2]:\n","\n","        initial_i = i\n","\n","\n","        #               cloud const.         #      \n","        # if np.sum(under_top.iloc[i + 1 - cloud_lookback:i + 1]) != cloud_lookback:\n","        # # if np.sum(under_top.iloc[i - cloud_lookback:i]) != cloud_lookback:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue  \n","        # else:\n","        #   print(\"np.sum(under_top.iloc[i + 1 - cloud_lookback:i + 1]) :\", under_top.iloc[i + 1 - cloud_lookback:i + 1]) \n","\n","\n","        #               st color const.           #\n","        # # if np.sum(res_df[['minor_ST1_Trend', 'minor_ST2_Trend', 'minor_ST3_Trend']].iloc[i]) <= -1:\n","        # if np.sum(res_df[['minor_ST1_Trend', 'minor_ST2_Trend', 'minor_ST3_Trend']].iloc[i]) <= -3:\n","        #   pass\n","        # else:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","        #               sar const.            #\n","        if res_df[sar].iloc[i] > res_df['high'].iloc[i]:\n","        # if res_df['sar2'].iloc[i] > res_df['high'].iloc[i] and res_df['sar3'].iloc[i] > res_df['high'].iloc[i]:\n","          pass\n","        else:\n","          i += 1\n","          if i >= len(res_df):\n","            break\n","          continue\n","\n","\n","        #               limit waiting const.             #\n","        # entry_done = False\n","        # for e_j in range(i + 1, len(res_df)):\n","\n","        #   #             Todo            #\n","        #   #             1. ep 설정\n","        #   #             2. limit 대기 시간 설정\n","        #   if res_df['high'].iloc[e_j] >= upper_ep.iloc[initial_i]:\n","        #     entry_done = True\n","        #     # print(\"e_j :\", e_j)\n","        #     break\n","\n","        #   if res_df['close'].iloc[e_j] > res_df['middle_line'].iloc[e_j]:\n","        #     break\n","\n","        # i = e_j\n","        # # print(\"i = e_j :\", i)\n","\n","\n","        # if entry_done:\n","        #   pass\n","        # else:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","        \n","        temp_tp_list = []\n","        remain_tp = 2\n","        hedge_cnt = 1\n","        h_ep, h_tp = None, None\n","        h_i, h_j = None, None\n","        trade_done = False\n","        \n","        for j in range(i + 1, len(res_df)):\n","\n","          \n","          # -------------- hedge only once -------------- #\n","          #             일단, h_quantity 는 초기 진입과 동일하게 설정         #\n","          # if res_df['high'].iloc[j] >= res_df['minor_ST2_Up'].iloc[j] and hedge_cnt == 1:\n","          # if res_df['close'].iloc[j] >= res_df['minor_ST2_Up'].iloc[j] and hedge_cnt == 1:\n","          # if res_df['close'].iloc[j] >= res_df['minor_ST3_Up'].iloc[j] and hedge_cnt == 1:\n","\n","          #   h_ep = res_df['close'].iloc[j]\n","          #   hedge_cnt -= 1\n","          #   h_i = j\n","\n","\n","          # -------------- sub tp -------------- #\n","          # if res_df['low'].iloc[j] <= short_tp2.iloc[j] and remain_tp == 2:\n","          # # if res_df['low'].iloc[j] <= short_tp2.iloc[j] <= res_df['high'].iloc[j]: --> 이건 잘못되었음\n","\n","          #   # trade_done = True # <-- sub tp 에는 trade_done 을 주지 않음 !\n","          #   remain_tp -= 1\n","\n","          #   #         dynamic tp        #\n","          #   if short_tp2.iloc[j] != short_tp2.iloc[j - 1]:\n","\n","          #     #   tp limit 이 불가한 경우 = open 이 이미, tp 를 넘은 경우 # \n","          #     if res_df['open'].iloc[j] < short_tp2.iloc[j]:\n","\n","          #       # tp = short_tp2.iloc[j]\n","          #       tp = res_df['open'].iloc[j]\n","          #       # tp_state_list.append(\"d-open\")\n","\n","          #     #   tp limit 이 가능한 경우 = open 이 아직, tp 를 넘지 않은 경우 # \n","          #     else:\n","\n","          #       tp = short_tp2.iloc[j]\n","          #       # tp = res_df['open'].iloc[j]\n","          #       # tp_state_list.append(\"d-short_tp2\")\n","\n","          #   #         static tp         #\n","          #   else:\n","              \n","          #     #   tp limit 이 불가한 경우 = open 이 이미, tp 를 넘은 경우 # \n","          #     #   non_inversion 의 경우, short_tp2 가 가능함   #\n","\n","          #     if res_df['open'].iloc[j] < short_tp2.iloc[j]:\n","\n","          #       tp = short_tp2.iloc[j]\n","          #       # tp = res_df['open'].iloc[j]\n","          #       # tp_state_list.append(\"s-short_tp2\")\n","\n","          #     #   tp limit 이 가능한 경우 = open 이 아직, tp 를 넘지 않은 경우 # \n","          #     else:\n","\n","          #       tp = short_tp2.iloc[j]\n","          #       # tp = res_df['open'].iloc[j]\n","          #       # tp_state_list.append(\"s-short_tp2\")   \n","\n","          #   temp_tp_list.append(tp)  \n","\n","\n","          # # -------------- ultimate tp -------------- #\n","          if res_df['low'].iloc[j] <= short_tp.iloc[j]:\n","          # if res_df['low'].iloc[j] <= short_tp.iloc[j] <= res_df['high'].iloc[j]: --> 이건 잘못되었음\n","\n","            trade_done = True\n","\n","            #         dynamic tp        #\n","            if short_tp.iloc[j] != short_tp.iloc[j - 1]:\n","\n","              #   tp limit 이 불가한 경우 = open 이 이미, tp 를 넘은 경우 # \n","              if res_df['open'].iloc[j] < short_tp.iloc[j]:\n","\n","                # tp = short_tp.iloc[j]\n","                tp = res_df['open'].iloc[j]\n","                tp_state_list.append(\"d-open\")\n","\n","              #   tp limit 이 가능한 경우 = open 이 아직, tp 를 넘지 않은 경우 # \n","              else:\n","\n","                tp = short_tp.iloc[j]\n","                # tp = res_df['open'].iloc[j]\n","                # tp = res_df['open'].iloc[j]\n","                tp_state_list.append(\"d-short_tp\")\n","\n","            #         static tp         #\n","            else:\n","              \n","              #   tp limit 이 불가한 경우 = open 이 이미, tp 를 넘은 경우 # \n","              #   non_inversion 의 경우, short_tp 가 가능함   #\n","\n","              if res_df['open'].iloc[j] < short_tp.iloc[j]:\n","\n","                tp = short_tp.iloc[j]\n","                # tp = res_df['open'].iloc[j]\n","                tp_state_list.append(\"s-short_tp\")\n","\n","              #   tp limit 이 가능한 경우 = open 이 아직, tp 를 넘지 않은 경우 # \n","              else:\n","\n","                tp = short_tp.iloc[j]\n","                # tp = res_df['open'].iloc[j]\n","                tp_state_list.append(\"s-short_tp\")   \n","\n","            temp_tp_list.append(tp)            \n","\n","                  \n","          # -------------- cut -------------- #\n","          # elif res_df['macd_hist3'].iloc[j] > 0:  #  macd cut\n","          # # elif res_df['macd_hist3'].iloc[i] < 0 and res_df['macd_hist3'].iloc[j] > 0:\n","\n","          # if res_df['close'].iloc[j] > res_df['middle_line'].iloc[j]:            \n","\n","          #   tp = res_df['close'].iloc[j]\n","          #   # tp = res_df['open'].iloc[j]\n","          #   tp_state_list.append(\"close cut\")\n","          #   trade_done = True\n","\n","          #   temp_tp_list.append(tp) \n","\n","\n","          # -------------- append trade data -------------- #\n","          if trade_done:\n","\n","            if entry[initial_i] == -1:\n","              ep = res_df['close'].iloc[initial_i]\n","              # ep = upper_ep.iloc[initial_i]\n","            else:\n","              ep = res_df['open'].iloc[initial_i]\n","              # ep = upper_ep.iloc[initial_i]\n","              # ep = res_df['close'].iloc[initial_i - 1]     \n","\n","            #       Todo      #\n","            #        1. len(temp_tp_list) 에 대응하는 qty_list 를 만들어야함    #\n","            #        2. temp_pr_list 를 만들어 총합 + 1 을 pr_list 에 저장      #\n","            #        2-1. temp_pr = sum((ep / temp_tp_list[i] - fee - 1) * qty_list[i])   #\n","            #        3. temp_pr_list 의 첫 tp 에는 r_qty 를 할당함        #\n","            qty_list = []\n","            temp_pr_list = []\n","            r_qty = 1\n","            for q_i in range(len(temp_tp_list) - 1, -1, -1):\n","\n","              if len(temp_tp_list) == 1:\n","                temp_qty = r_qty\n","              else:\n","                if q_i !=0:\n","                  temp_qty = r_qty / p_qty_divider\n","                else:\n","                  temp_qty = r_qty\n","\n","              temp_pr = (ep / temp_tp_list[q_i] - fee - 1) * temp_qty\n","              r_qty -= temp_qty\n","\n","              temp_pr_list.append(temp_pr)\n","              qty_list.append(temp_qty)\n","\n","            # if len(temp_pr_list) == 1:\n","            #   print(\"qty_list :\", qty_list)\n","            #   print(\"temp_pr_list :\", temp_pr_list)\n","\n","            temp_pr = sum(temp_pr_list) + 1\n","\n","            #   hedge + non_hedge pr summation    #\n","            #   hedge pr direction is opposite to the other   #\n","            hedge_pr = 1\n","            if hedge_cnt == 0:\n","\n","              #       hedge tp      #\n","              h_tp = res_df['close'].iloc[j]\n","              hedge_pr = h_tp / h_ep - fee  # hedge long\n","              temp_pr += hedge_pr - 1\n","              h_j = j\n","\n","            ep_tp_list.append((ep, temp_tp_list))  \n","            trade_list.append([initial_i, i, j])\n","\n","            h_ep_tp_list.append((h_ep, h_tp))        \n","            h_trade_list.append([initial_i, h_i, h_j])                \n","\n","            pr_list.append(temp_pr)\n","            short_list.append(temp_pr)\n","\n","            h_pr_list.append(hedge_pr)\n","            h_short_list.append(hedge_pr)\n","\n","            i = j\n","            break\n","\n","\n","      #                  long  phase                #\n","      # elif entry[i] == 1:\n","      elif entry[i] in [1, 2]:\n","\n","        initial_i = i\n","\n","\n","        #               cloud const.          #     \n","        # if np.sum(over_bottom.iloc[i + 1 - cloud_lookback:i + 1]) != cloud_lookback:\n","        # # if np.sum(over_bottom.iloc[i - cloud_lookback:i]) != cloud_lookback:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue  \n","\n","        #               st color const.           #\n","        # # if np.sum(res_df[['minor_ST1_Trend', 'minor_ST2_Trend', 'minor_ST3_Trend']].iloc[i]) >= 1:\n","        # if np.sum(res_df[['minor_ST1_Trend', 'minor_ST2_Trend', 'minor_ST3_Trend']].iloc[i]) >= 3:\n","        #   pass\n","        # else:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","        #               sar const.            #\n","        if res_df[sar].iloc[i] < res_df['low'].iloc[i]:\n","        # if res_df['sar2'].iloc[i] < res_df['low'].iloc[i] and res_df['sar3'].iloc[i] < res_df['low'].iloc[i]:\n","          pass\n","        else:\n","          i += 1\n","          if i >= len(res_df):\n","            break\n","          continue\n","\n","        #               limit waiting const.             #\n","        # entry_done = False\n","        # for e_j in range(i + 1, len(res_df)):\n","\n","        #   #             Todo            #\n","        #   #             1. ep 설정\n","        #   #             2. limit 대기 시간 설정\n","        #   if res_df['low'].iloc[e_j] <= upper_ep.iloc[initial_i]:\n","        #     entry_done = True\n","        #     break\n","\n","        #   if res_df['close'].iloc[e_j] < res_df['middle_line'].iloc[e_j]:     \n","        #     break\n","\n","        # i = e_j\n","\n","\n","        # if entry_done:\n","        #   pass\n","        # else:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","\n","        temp_tp_list =[]\n","        remain_tp = 2\n","        hedge_cnt = 1\n","        h_ep, h_tp = None, None        \n","        h_i, h_j = None, None        \n","        trade_done = False\n","\n","        for j in range(i + 1, len(res_df)):        \n","\n","          # -------------- hedge only once -------------- #\n","          #             일단, h_quantity 는 초기 진입과 동일하게 설정         #\n","          # if res_df['low'].iloc[j] <= res_df['minor_ST2_Down'].iloc[j] and hedge_cnt == 1:\n","          # if res_df['close'].iloc[j] <= res_df['minor_ST2_Down'].iloc[j] and hedge_cnt == 1:\n","          # if res_df['close'].iloc[j] <= res_df['minor_ST3_Down'].iloc[j] and hedge_cnt == 1:\n","\n","          #   h_ep = res_df['close'].iloc[j]\n","          #   hedge_cnt -= 1\n","          #   h_i = j\n","\n","\n","          # -------------- sub tp --------------  #\n","          # if res_df['high'].iloc[j] >= long_tp2.iloc[j] and remain_tp == 2:\n","\n","          #   # trade_done = True\n","          #   remain_tp -= 1\n","\n","          #   #         dynamic tp        #\n","          #   if long_tp2.iloc[j] != long_tp2.iloc[j - 1]:\n","\n","          #     #   tp limit 이 불가한 경우 = open 이 이미, tp 를 넘은 경우 # \n","          #     if res_df['open'].iloc[j] >= long_tp2.iloc[j]:\n","\n","          #       # tp = long_tp2.iloc[j]\n","          #       tp = res_df['open'].iloc[j]\n","          #       # tp_state_list.append(\"d-open\")\n","\n","              \n","          #     #   tp limit 이 가능한 경우 = open 이 아직, tp 를 넘지 않은 경우 # \n","          #     else:\n","                \n","          #       tp = long_tp2.iloc[j]\n","          #       # tp = res_df['open'].iloc[j]\n","          #       # tp_state_list.append(\"d-long_tp2\")\n","\n","          #   #         static tp         #\n","          #   else:\n","\n","          #     #   tp limit 이 불가한 경우 = open 이 이미, tp 를 넘은 경우 # \n","          #     #   non_inversion 의 경우, short_tp 가 가능함   #\n","\n","          #     if res_df['open'].iloc[j] >= long_tp2.iloc[j]:\n","\n","          #       tp = long_tp2.iloc[j]\n","          #       # tp = res_df['open'].iloc[j]\n","          #       # tp_state_list.append(\"s-long_tp2\")\n","\n","              \n","          #     #   tp limit 이 가능한 경우 = open 이 아직, tp 를 넘지 않은 경우 # \n","          #     else:\n","                \n","          #       tp = long_tp2.iloc[j]\n","          #       # tp = res_df['open'].iloc[j]\n","          #       # tp_state_list.append(\"s-long_tp2\")       \n","            \n","          #   temp_tp_list.append(tp)  \n","\n","\n","          # # -------------- ultimate tp -------------- #\n","          if res_df['high'].iloc[j] >= long_tp.iloc[j]:\n","\n","            trade_done = True\n","\n","            #         dynamic tp        #\n","            if long_tp.iloc[j] != long_tp.iloc[j - 1]:\n","\n","              #   tp limit 이 불가한 경우 = open 이 이미, tp 를 넘은 경우 # \n","              if res_df['open'].iloc[j] >= long_tp.iloc[j]:\n","\n","                # tp = long_tp.iloc[j]\n","                tp = res_df['open'].iloc[j]\n","                tp_state_list.append(\"d-open\")\n","\n","              \n","              #   tp limit 이 가능한 경우 = open 이 아직, tp 를 넘지 않은 경우 # \n","              else:\n","                \n","                tp = long_tp.iloc[j]\n","                # tp = res_df['open'].iloc[j]\n","                tp_state_list.append(\"d-long_tp\")\n","\n","            #         static tp         #\n","            else:\n","\n","              #   tp limit 이 불가한 경우 = open 이 이미, tp 를 넘은 경우 # \n","              #   non_inversion 의 경우, short_tp 가 가능함   #\n","\n","              if res_df['open'].iloc[j] >= long_tp.iloc[j]:\n","\n","                tp = long_tp.iloc[j]\n","                # tp = res_df['open'].iloc[j]\n","                tp_state_list.append(\"s-long_tp\")\n","\n","              \n","              #   tp limit 이 가능한 경우 = open 이 아직, tp 를 넘지 않은 경우 # \n","              else:\n","                \n","                tp = long_tp.iloc[j]\n","                # tp = res_df['open'].iloc[j]\n","                tp_state_list.append(\"s-long_tp\")         \n","            \n","            temp_tp_list.append(tp)\n","\n","\n","\n","          # -------------- cut -------------- #\n","          # elif res_df['macd_hist3'].iloc[j] < 0:\n","          # # elif res_df['macd_hist3'].iloc[i] > 0 and res_df['macd_hist3'].iloc[j] < 0:\n","          # if res_df['close'].iloc[j] < res_df['middle_line'].iloc[j]:            \n","\n","          #   tp = res_df['close'].iloc[j]\n","          #   # tp = res_df['open'].iloc[j]\n","          #   tp_state_list.append(\"close cut\")\n","          #   trade_done = True\n","\n","          #   temp_tp_list.append(tp)\n","\n","\n","          if trade_done:\n","\n","            if entry[initial_i] == 1:\n","              ep = res_df['close'].iloc[initial_i]\n","              # ep = lower_ep.iloc[initial_i]\n","            else:\n","              # ep = lower_ep.iloc[i]\n","              ep = res_df['open'].iloc[initial_i]\n","              # ep = res_df['close'].iloc[initial_i - 1]\n","\n","            qty_list = []\n","            temp_pr_list = []\n","            r_qty = 1\n","            for q_i in range(len(temp_tp_list) - 1, -1, -1):\n","\n","              if len(temp_tp_list) == 1:\n","                temp_qty = r_qty\n","              else:\n","                if q_i !=0:\n","                  temp_qty = r_qty / p_qty_divider\n","                else:\n","                  temp_qty = r_qty\n","\n","              temp_pr = (temp_tp_list[q_i] / ep - fee - 1) * temp_qty\n","              r_qty -= temp_qty\n","\n","              temp_pr_list.append(temp_pr)\n","\n","            temp_pr = sum(temp_pr_list) + 1\n","\n","            #   hedge + non_hedge pr summation    #\n","            #   hedge pr direction is opposite to the other   #\n","            hedge_pr = 1\n","            if hedge_cnt == 0:\n","\n","              #       hedge tp      #\n","              h_tp = res_df['close'].iloc[j]\n","              hedge_pr = h_ep / h_tp - fee  # hedge short\n","              temp_pr += hedge_pr - 1\n","              h_j = j\n","\n","            ep_tp_list.append((ep, temp_tp_list))\n","            trade_list.append([initial_i, i, j])\n","\n","            h_ep_tp_list.append((h_ep, h_tp))        \n","            h_trade_list.append([initial_i, h_i, h_j])                \n","\n","            pr_list.append(temp_pr)\n","            long_list.append(temp_pr)\n","\n","            h_pr_list.append(hedge_pr)\n","            h_long_list.append(hedge_pr)                    \n","\n","            i = j\n","            break\n","\n","\n","      i += 1\n","      if i >= len(res_df):\n","        break\n","\n","\n","\n","    # -------------------- result analysis -------------------- #\n","    plt.figure(figsize=(16, 12))\n","    plt.suptitle(key)\n","\n","    np_pr = (np.array(pr_list) - 1) * lvrg + 1\n","\n","    total_pr = np.cumprod(np_pr)\n","    wr = len(np_pr[np_pr > 1]) / len(np_pr[np_pr != 1])\n","\n","    # plt.subplot(121)\n","    plt.subplot(231)\n","    plt.plot(total_pr)\n","    plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\" % (wr, np.min(np_pr), total_pr[-1], lvrg))\n","    # plt.show()\n","\n","    #         short only      #\n","    np_short_pr = (np.array(short_list) - 1) * lvrg + 1\n","\n","    total_short_pr = np.cumprod(np_short_pr)\n","    short_wr = len(np_short_pr[np_short_pr > 1]) / len(np_short_pr[np_short_pr != 1])\n","    \n","    plt.subplot(232)\n","    plt.plot(total_short_pr)\n","    plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\" % (short_wr, np.min(np_short_pr), total_short_pr[-1], lvrg))\n","\n","    #         long only      #\n","    np_long_pr = (np.array(long_list) - 1) * lvrg + 1\n","\n","    total_long_pr = np.cumprod(np_long_pr)\n","    long_wr = len(np_long_pr[np_long_pr > 1]) / len(np_long_pr[np_long_pr != 1])\n","    \n","    plt.subplot(233)\n","    plt.plot(total_long_pr)\n","    plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\" % (long_wr, np.min(np_long_pr), total_long_pr[-1], lvrg))\n","\n","\n","    #     reversion adjustment      #\n","    rev_np_pr = (1 / (np.array(pr_list) + fee) - fee - 1) * lvrg + 1\n","        \n","    rev_total_pr = np.cumprod(rev_np_pr)\n","    rev_wr = len(rev_np_pr[rev_np_pr > 1]) / len(rev_np_pr[rev_np_pr != 1])\n","\n","    # plt.subplot(122)\n","    plt.subplot(234)\n","    plt.plot(rev_total_pr)\n","    plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\" % (rev_wr, np.min(rev_np_pr), rev_total_pr[-1], lvrg))\n","\n","    #         short       #\n","    rev_np_short_pr = (1 / (np.array(short_list) + fee) - fee - 1) * lvrg + 1\n","        \n","    rev_total_short_pr = np.cumprod(rev_np_short_pr)\n","    rev_short_wr = len(rev_np_short_pr[rev_np_short_pr > 1]) / len(rev_np_short_pr[rev_np_short_pr != 1])\n","\n","    # plt.subplot(122)\n","    plt.subplot(235)\n","    plt.plot(rev_total_short_pr)\n","    plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\" % (rev_short_wr, np.min(rev_np_short_pr), rev_total_short_pr[-1], lvrg))\n","\n","    #         long       #\n","    rev_np_long_pr = (1 / (np.array(long_list) + fee) - fee - 1) * lvrg + 1\n","        \n","    rev_total_long_pr = np.cumprod(rev_np_long_pr)\n","    rev_long_wr = len(rev_np_long_pr[rev_np_long_pr > 1]) / len(rev_np_long_pr[rev_np_long_pr != 1])\n","\n","    # plt.subplot(122)\n","    plt.subplot(236)\n","    plt.plot(rev_total_long_pr)\n","    plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\" % (rev_long_wr, np.min(rev_np_long_pr), rev_total_long_pr[-1], lvrg))\n","    \n","    plt.show()\n","\n","\n","\n","    # --------------------- h pr plot --------------------- #\n","\n","    try:\n","      plt.figure(figsize=(16, 12))\n","      plt.suptitle(key)\n","\n","      np_pr = (np.array(pr_list) - 1) * lvrg + 1\n","\n","      total_pr = np.cumprod(np_pr)\n","      wr = len(np_pr[np_pr > 1]) / len(np_pr[np_pr != 1])\n","\n","      # plt.subplot(121)\n","      plt.subplot(231)\n","      plt.plot(total_pr)\n","      plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\" % (wr, np.min(np_pr), total_pr[-1], lvrg))\n","      # plt.show()\n","\n","      #         short only      #\n","      np_short_pr = (np.array(short_list) - 1) * lvrg + 1\n","\n","      total_short_pr = np.cumprod(np_short_pr)\n","      short_wr = len(np_short_pr[np_short_pr > 1]) / len(np_short_pr[np_short_pr != 1])\n","      \n","      plt.subplot(232)\n","      plt.plot(total_short_pr)\n","      plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\" % (short_wr, np.min(np_short_pr), total_short_pr[-1], lvrg))\n","\n","      #         long only      #\n","      np_long_pr = (np.array(long_list) - 1) * lvrg + 1\n","\n","      total_long_pr = np.cumprod(np_long_pr)\n","      long_wr = len(np_long_pr[np_long_pr > 1]) / len(np_long_pr[np_long_pr != 1])\n","      \n","      plt.subplot(233)\n","      plt.plot(total_long_pr)\n","      plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\" % (long_wr, np.min(np_long_pr), total_long_pr[-1], lvrg))\n","\n","\n","      #     reversion adjustment      #\n","      rev_np_pr = (1 / (np.array(pr_list) + fee) - fee - 1) * lvrg + 1\n","          \n","      rev_total_pr = np.cumprod(rev_np_pr)\n","      rev_wr = len(rev_np_pr[rev_np_pr > 1]) / len(rev_np_pr[rev_np_pr != 1])\n","\n","      # plt.subplot(122)\n","      plt.subplot(234)\n","      plt.plot(rev_total_pr)\n","      plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\" % (rev_wr, np.min(rev_np_pr), rev_total_pr[-1], lvrg))\n","\n","      #         short       #\n","      rev_np_short_pr = (1 / (np.array(short_list) + fee) - fee - 1) * lvrg + 1\n","          \n","      rev_total_short_pr = np.cumprod(rev_np_short_pr)\n","      rev_short_wr = len(rev_np_short_pr[rev_np_short_pr > 1]) / len(rev_np_short_pr[rev_np_short_pr != 1])\n","\n","      # plt.subplot(122)\n","      plt.subplot(235)\n","      plt.plot(rev_total_short_pr)\n","      plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\" % (rev_short_wr, np.min(rev_np_short_pr), rev_total_short_pr[-1], lvrg))\n","\n","      #         long       #\n","      rev_np_long_pr = (1 / (np.array(long_list) + fee) - fee - 1) * lvrg + 1\n","          \n","      rev_total_long_pr = np.cumprod(rev_np_long_pr)\n","      rev_long_wr = len(rev_np_long_pr[rev_np_long_pr > 1]) / len(rev_np_long_pr[rev_np_long_pr != 1])\n","\n","      # plt.subplot(122)\n","      plt.subplot(236)\n","      plt.plot(rev_total_long_pr)\n","      plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\" % (rev_long_wr, np.min(rev_np_long_pr), rev_total_long_pr[-1], lvrg))\n","      \n","      plt.show()\n","\n","\n","\n","      # --------------------- h pr plot --------------------- #\n","\n","      plt.figure(figsize=(16, 12))\n","      plt.suptitle(key)\n","\n","      h_np_pr = (np.array(h_pr_list) - 1) * lvrg + 1\n","      h_rev_np_pr = (1 / (np.array(h_pr_list) + fee) - fee - 1) * lvrg + 1    # define, for plot_check below cell\n","\n","      h_total_pr = np.cumprod(h_np_pr)\n","      h_wr = len(h_np_pr[h_np_pr > 1]) / len(h_np_pr[h_np_pr != 1])\n","\n","      # plt.subplot(121)\n","      plt.subplot(231)\n","      plt.plot(h_total_pr)\n","      plt.title(\"h_wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\" % (h_wr, np.min(h_np_pr), h_total_pr[-1], lvrg))\n","      # plt.show()\n","\n","      #         short only      #\n","      h_np_short_pr = (np.array(h_short_list) - 1) * lvrg + 1\n","\n","      h_total_short_pr = np.cumprod(h_np_short_pr)\n","      h_short_wr = len(h_np_short_pr[h_np_short_pr > 1]) / len(h_np_short_pr[h_np_short_pr != 1])\n","      \n","      plt.subplot(232)\n","      plt.plot(h_total_short_pr)\n","      plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\" % (h_short_wr, np.min(h_np_short_pr), h_total_short_pr[-1], lvrg))\n","\n","      #         long only      #\n","      h_np_long_pr = (np.array(h_long_list) - 1) * lvrg + 1\n","\n","      h_total_long_pr = np.cumprod(h_np_long_pr)\n","      h_long_wr = len(h_np_long_pr[h_np_long_pr > 1]) / len(h_np_long_pr[h_np_long_pr != 1])\n","      \n","      plt.subplot(233)\n","      plt.plot(h_total_long_pr)\n","      plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\" % (h_long_wr, np.min(h_np_long_pr), h_total_long_pr[-1], lvrg))\n","\n","\n","      #     reversion adjustment      #\n","          \n","      h_rev_total_pr = np.cumprod(h_rev_np_pr)\n","      h_rev_wr = len(h_rev_np_pr[h_rev_np_pr > 1]) / len(h_rev_np_pr[h_rev_np_pr != 1])\n","\n","      # plt.subplot(122)\n","      plt.subplot(234)\n","      plt.plot(h_rev_total_pr)\n","      plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\" % (h_rev_wr, np.min(h_rev_np_pr), h_rev_total_pr[-1], lvrg))\n","\n","      #         short       #\n","      h_rev_np_short_pr = (1 / (np.array(h_short_list) + fee) - fee - 1) * lvrg + 1\n","          \n","      h_rev_total_short_pr = np.cumprod(h_rev_np_short_pr)\n","      h_rev_short_wr = len(h_rev_np_short_pr[h_rev_np_short_pr > 1]) / len(h_rev_np_short_pr[h_rev_np_short_pr != 1])\n","\n","      # plt.subplot(122)\n","      plt.subplot(235)\n","      plt.plot(h_rev_total_short_pr)\n","      plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\" % (h_rev_short_wr, np.min(h_rev_np_short_pr), h_rev_total_short_pr[-1], lvrg))\n","\n","      #         long       #\n","      h_rev_np_long_pr = (1 / (np.array(h_long_list) + fee) - fee - 1) * lvrg + 1\n","          \n","      h_rev_total_long_pr = np.cumprod(h_rev_np_long_pr)\n","      h_rev_long_wr = len(h_rev_np_long_pr[h_rev_np_long_pr > 1]) / len(h_rev_np_long_pr[h_rev_np_long_pr != 1])\n","\n","      # plt.subplot(122)\n","      plt.subplot(236)\n","      plt.plot(h_rev_total_long_pr)\n","      plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\" % (h_rev_long_wr, np.min(h_rev_np_long_pr), h_rev_total_long_pr[-1], lvrg))\n","      \n","      plt.show()\n","      print()\n","    \n","    except Exception as e:\n","      print('error in pr plot :', e)\n","\n","    # break # indi. loop\n","  break # pair loop"],"execution_count":null,"outputs":[{"output_type":"stream","text":["2021-06-30 ETHUSDT_cctbbo_backi2.xlsx loaded !\n","sar : sar2\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1152x864 with 6 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1152x864 with 6 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}},{"output_type":"stream","text":["error in pr plot : division by zero\n"],"name":"stdout"},{"output_type":"display_data","data":{"text/plain":["<Figure size 1152x864 with 0 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"markdown","metadata":{"id":"4KyWm-snS013"},"source":["### two sar"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"Cn9_iU_rS2CQ","executionInfo":{"status":"ok","timestamp":1627814472462,"user_tz":-540,"elapsed":22131,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"}},"outputId":"4c197736-8291-47d4-ff24-6b96e5d6a073"},"source":["fee = 0.0004\n","lvrg = 5\n","\n","# cloud_shift_size = -1\n","# cloud_shift_size = 15\n","cloud_shift_size = 1\n","# cloud_shift_size = 0\n","\n","# cloud_lookback = 50\n","# cloud_lookback = 70\n","cloud_lookback = 150\n","cloud_lookback = 100\n","# cloud_lookback = 69\n","cloud_lookback = 57\n","\n","close_shift_size = 1\n","\n","\n","#       1-0. ep line = color on st min/max 조금 이내       #\n","#       1-0-1. option1. color on upper st 색출 \n","# -->   1-0-1. option2. min upper st 바로 추출\n","#       1-0-2. 색출된 st 중 min / max st 선별\n","gap = 0.0002\n","gap = 0.0001\n","gap = 0.00005\n","# gap = 0.0000\n","# gap = -0.00005\n","\n","p_qty_divider = 1.5\n","\n","\n","# senkoua_list = ['senkou_a1', 'senkou_a2', 'senkou_a3', 'senkou_a4', 'senkou_a5']\n","# senkoub_list = ['senkou_b1', 'senkou_b2', 'senkou_b3', 'senkou_b4', 'senkou_b5']\n","sar_list = ['sar1', 'sar2', 'sar3', 'sar4', 'sar5']\n","sar_list = [ 'sar2']\n","\n","\n","save_path = './candlestick_concated/res_df/'\n","res_df_list = os.listdir(save_path)\n","\n","for key in res_df_list:\n","\n","  # if '2021-04-30'.upper() not in key:\n","  # if '2021-05-30'.upper() not in key:\n","  if '2021-06-30'.upper() not in key:\n","  # if '2021-07-03'.upper() not in key:\n","  # if '2021-07-01'.upper() not in key:\n","    continue\n","\n","  # if \"link\".upper() not in key:\n","  # if \"eth\".upper() not in key:\n","  #   continue\n","\n","  if \"cctbbo_backi2\" not in key:\n","    continue\n","\n","\n","  res_df = pd.read_excel(save_path + key, index_col=0)\n","\n","  print(key, \"loaded !\")\n","\n","  # for senkou_a, senkou_b in zip(senkoua_list, senkoub_list):\n","  for sar in sar_list:\n","\n","\n","    print(\"sar :\", sar)\n","\n","    \n","    # cloud_top = np.max(res_df[[senkou_a, senkou_b]], axis=1)\n","    # cloud_bottom = np.min(res_df[[senkou_a, senkou_b]], axis=1)\n","    \n","    upper_ep = res_df['middle_line']\n","    lower_ep = res_df['middle_line']\n","\n","    upper_middle = (res_df['middle_line'] + res_df['min_upper']) / 2\n","    lower_middle = (res_df['middle_line'] + res_df['max_lower']) / 2\n","\n","    # under_top = res_df['close'].shift(cloud_shift_size) <= cloud_top.shift(cloud_shift_size)\n","    # over_bottom = res_df['close'].shift(cloud_shift_size) >= cloud_bottom.shift(cloud_shift_size)\n","    # print(\"under_top :\", under_top)\n","    # break\n","\n","    fisher_upper = 1.5\n","    fisher_lower = -1.5\n","    \n","    #       short = -1      #\n","    entry = np.where((res_df['fisher'].shift(1) >= res_df['fisher']) & \n","                      (res_df['fisher'].shift(2) <= res_df['fisher']).shift(1) &\n","                      (res_df['fisher'].shift(1) >= fisher_upper)\n","                      , -1, 0) \n","\n","    #       long = 1     #\n","    entry = np.where((res_df['fisher'].shift(1) <= res_df['fisher']) & \n","                      (res_df['fisher'].shift(2) >= res_df['fisher']).shift(1) &\n","                      (res_df['fisher'].shift(1) <= fisher_lower)\n","                      , 1, entry) \n","\n","\n","\n","    #       1-2. tp line = middle line 조금 이내         #\n","    # short_tp = res_df['middle_line'] * (1 + gap)\n","    # long_tp = res_df['middle_line'] * (1 - gap)\n","    \n","    short_tp = lower_middle * (1 + gap)\n","    long_tp = upper_middle * (1 - gap)\n","\n","    short_tp2 = res_df['middle_line'] * (1 + gap)\n","    long_tp2 = res_df['middle_line'] * (1 - gap)\n","\n","    # short_tp = (res_df['middle_line'] + res_df['min_upper']) / 2\n","    # long_tp = (res_df['middle_line'] + res_df['max_lower']) / 2\n","\n","\n","\n","    #       trading : 여기도 체결 결과에 대해 묘사함       #\n","    trade_list = []\n","    h_trade_list = []\n","\n","    pr_list = []\n","    long_list = []\n","    short_list = []\n","\n","    h_pr_list = []\n","    h_long_list = []\n","    h_short_list = []\n","\n","    ep_tp_list = []\n","    h_ep_tp_list = []\n","    tp_state_list = []\n","\n","    i = 0\n","    while 1:\n","    # for i in range(len(res_df)):\n","\n","      # if i < cloud_lookback:\n","      #   i += 1\n","      #   if i >= len(res_df):\n","      #     break\n","      #   continue\n","\n","      # if entry[i] == -1:\n","      if entry[i] in [-1, -2]:\n","\n","        initial_i = i\n","\n","\n","        #               cloud const.         #      \n","        # if np.sum(under_top.iloc[i + 1 - cloud_lookback:i + 1]) != cloud_lookback:\n","        # # if np.sum(under_top.iloc[i - cloud_lookback:i]) != cloud_lookback:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue  \n","        # else:\n","        #   print(\"np.sum(under_top.iloc[i + 1 - cloud_lookback:i + 1]) :\", under_top.iloc[i + 1 - cloud_lookback:i + 1]) \n","\n","\n","        #               st color const.           #\n","        # # if np.sum(res_df[['minor_ST1_Trend', 'minor_ST2_Trend', 'minor_ST3_Trend']].iloc[i]) <= -1:\n","        # if np.sum(res_df[['minor_ST1_Trend', 'minor_ST2_Trend', 'minor_ST3_Trend']].iloc[i]) <= -3:\n","        #   pass\n","        # else:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","        #               sar const.            #\n","        # if res_df[sar].iloc[i] > res_df['high'].iloc[i]:\n","        if res_df['sar1'].iloc[i] > res_df['high'].iloc[i] and res_df['sar2'].iloc[i] > res_df['high'].iloc[i]:\n","          pass\n","        else:\n","          i += 1\n","          if i >= len(res_df):\n","            break\n","          continue\n","\n","\n","        #               limit waiting const.             #\n","        # entry_done = False\n","        # for e_j in range(i + 1, len(res_df)):\n","\n","        #   #             Todo            #\n","        #   #             1. ep 설정\n","        #   #             2. limit 대기 시간 설정\n","        #   if res_df['high'].iloc[e_j] >= upper_ep.iloc[initial_i]:\n","        #     entry_done = True\n","        #     # print(\"e_j :\", e_j)\n","        #     break\n","\n","        #   if res_df['close'].iloc[e_j] > res_df['middle_line'].iloc[e_j]:\n","        #     break\n","\n","        # i = e_j\n","        # # print(\"i = e_j :\", i)\n","\n","\n","        # if entry_done:\n","        #   pass\n","        # else:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","        \n","        temp_tp_list = []\n","        remain_tp = 2\n","        hedge_cnt = 1\n","        h_ep, h_tp = None, None\n","        h_i, h_j = None, None\n","        trade_done = False\n","        \n","        for j in range(i + 1, len(res_df)):\n","\n","          \n","          # -------------- hedge only once -------------- #\n","          #             일단, h_quantity 는 초기 진입과 동일하게 설정         #\n","          # if res_df['high'].iloc[j] >= res_df['minor_ST2_Up'].iloc[j] and hedge_cnt == 1:\n","          # if res_df['close'].iloc[j] >= res_df['minor_ST2_Up'].iloc[j] and hedge_cnt == 1:\n","          # if res_df['close'].iloc[j] >= res_df['minor_ST3_Up'].iloc[j] and hedge_cnt == 1:\n","\n","          #   h_ep = res_df['close'].iloc[j]\n","          #   hedge_cnt -= 1\n","          #   h_i = j\n","\n","\n","          # -------------- sub tp -------------- #\n","          # if res_df['low'].iloc[j] <= short_tp2.iloc[j] and remain_tp == 2:\n","          # # if res_df['low'].iloc[j] <= short_tp2.iloc[j] <= res_df['high'].iloc[j]: --> 이건 잘못되었음\n","\n","          #   # trade_done = True # <-- sub tp 에는 trade_done 을 주지 않음 !\n","          #   remain_tp -= 1\n","\n","          #   #         dynamic tp        #\n","          #   if short_tp2.iloc[j] != short_tp2.iloc[j - 1]:\n","\n","          #     #   tp limit 이 불가한 경우 = open 이 이미, tp 를 넘은 경우 # \n","          #     if res_df['open'].iloc[j] < short_tp2.iloc[j]:\n","\n","          #       # tp = short_tp2.iloc[j]\n","          #       tp = res_df['open'].iloc[j]\n","          #       # tp_state_list.append(\"d-open\")\n","\n","          #     #   tp limit 이 가능한 경우 = open 이 아직, tp 를 넘지 않은 경우 # \n","          #     else:\n","\n","          #       tp = short_tp2.iloc[j]\n","          #       # tp = res_df['open'].iloc[j]\n","          #       # tp_state_list.append(\"d-short_tp2\")\n","\n","          #   #         static tp         #\n","          #   else:\n","              \n","          #     #   tp limit 이 불가한 경우 = open 이 이미, tp 를 넘은 경우 # \n","          #     #   non_inversion 의 경우, short_tp2 가 가능함   #\n","\n","          #     if res_df['open'].iloc[j] < short_tp2.iloc[j]:\n","\n","          #       tp = short_tp2.iloc[j]\n","          #       # tp = res_df['open'].iloc[j]\n","          #       # tp_state_list.append(\"s-short_tp2\")\n","\n","          #     #   tp limit 이 가능한 경우 = open 이 아직, tp 를 넘지 않은 경우 # \n","          #     else:\n","\n","          #       tp = short_tp2.iloc[j]\n","          #       # tp = res_df['open'].iloc[j]\n","          #       # tp_state_list.append(\"s-short_tp2\")   \n","\n","          #   temp_tp_list.append(tp)  \n","\n","\n","          # # -------------- ultimate tp -------------- #\n","          if res_df['low'].iloc[j] <= short_tp.iloc[j]:\n","          # if res_df['low'].iloc[j] <= short_tp.iloc[j] <= res_df['high'].iloc[j]: --> 이건 잘못되었음\n","\n","            trade_done = True\n","\n","            #         dynamic tp        #\n","            if short_tp.iloc[j] != short_tp.iloc[j - 1]:\n","\n","              #   tp limit 이 불가한 경우 = open 이 이미, tp 를 넘은 경우 # \n","              if res_df['open'].iloc[j] < short_tp.iloc[j]:\n","\n","                # tp = short_tp.iloc[j]\n","                tp = res_df['open'].iloc[j]\n","                tp_state_list.append(\"d-open\")\n","\n","              #   tp limit 이 가능한 경우 = open 이 아직, tp 를 넘지 않은 경우 # \n","              else:\n","\n","                tp = short_tp.iloc[j]\n","                # tp = res_df['open'].iloc[j]\n","                # tp = res_df['open'].iloc[j]\n","                tp_state_list.append(\"d-short_tp\")\n","\n","            #         static tp         #\n","            else:\n","              \n","              #   tp limit 이 불가한 경우 = open 이 이미, tp 를 넘은 경우 # \n","              #   non_inversion 의 경우, short_tp 가 가능함   #\n","\n","              if res_df['open'].iloc[j] < short_tp.iloc[j]:\n","\n","                tp = short_tp.iloc[j]\n","                # tp = res_df['open'].iloc[j]\n","                tp_state_list.append(\"s-short_tp\")\n","\n","              #   tp limit 이 가능한 경우 = open 이 아직, tp 를 넘지 않은 경우 # \n","              else:\n","\n","                tp = short_tp.iloc[j]\n","                # tp = res_df['open'].iloc[j]\n","                tp_state_list.append(\"s-short_tp\")   \n","\n","            temp_tp_list.append(tp)            \n","\n","                  \n","          # -------------- cut -------------- #\n","          # elif res_df['macd_hist3'].iloc[j] > 0:  #  macd cut\n","          # # elif res_df['macd_hist3'].iloc[i] < 0 and res_df['macd_hist3'].iloc[j] > 0:\n","\n","          # if res_df['close'].iloc[j] > res_df['middle_line'].iloc[j]:            \n","\n","          #   tp = res_df['close'].iloc[j]\n","          #   # tp = res_df['open'].iloc[j]\n","          #   tp_state_list.append(\"close cut\")\n","          #   trade_done = True\n","\n","          #   temp_tp_list.append(tp) \n","\n","\n","          # -------------- append trade data -------------- #\n","          if trade_done:\n","\n","            if entry[initial_i] == -1:\n","              ep = res_df['close'].iloc[initial_i]\n","              # ep = upper_ep.iloc[initial_i]\n","            else:\n","              ep = res_df['open'].iloc[initial_i]\n","              # ep = upper_ep.iloc[initial_i]\n","              # ep = res_df['close'].iloc[initial_i - 1]     \n","\n","            #       Todo      #\n","            #        1. len(temp_tp_list) 에 대응하는 qty_list 를 만들어야함    #\n","            #        2. temp_pr_list 를 만들어 총합 + 1 을 pr_list 에 저장      #\n","            #        2-1. temp_pr = sum((ep / temp_tp_list[i] - fee - 1) * qty_list[i])   #\n","            #        3. temp_pr_list 의 첫 tp 에는 r_qty 를 할당함        #\n","            qty_list = []\n","            temp_pr_list = []\n","            r_qty = 1\n","            for q_i in range(len(temp_tp_list) - 1, -1, -1):\n","\n","              if len(temp_tp_list) == 1:\n","                temp_qty = r_qty\n","              else:\n","                if q_i !=0:\n","                  temp_qty = r_qty / p_qty_divider\n","                else:\n","                  temp_qty = r_qty\n","\n","              temp_pr = (ep / temp_tp_list[q_i] - fee - 1) * temp_qty\n","              r_qty -= temp_qty\n","\n","              temp_pr_list.append(temp_pr)\n","              qty_list.append(temp_qty)\n","\n","            # if len(temp_pr_list) == 1:\n","            #   print(\"qty_list :\", qty_list)\n","            #   print(\"temp_pr_list :\", temp_pr_list)\n","\n","            temp_pr = sum(temp_pr_list) + 1\n","\n","            #   hedge + non_hedge pr summation    #\n","            #   hedge pr direction is opposite to the other   #\n","            hedge_pr = 1\n","            if hedge_cnt == 0:\n","\n","              #       hedge tp      #\n","              h_tp = res_df['close'].iloc[j]\n","              hedge_pr = h_tp / h_ep - fee  # hedge long\n","              temp_pr += hedge_pr - 1\n","              h_j = j\n","\n","            ep_tp_list.append((ep, temp_tp_list))  \n","            trade_list.append([initial_i, i, j])\n","\n","            h_ep_tp_list.append((h_ep, h_tp))        \n","            h_trade_list.append([initial_i, h_i, h_j])                \n","\n","            pr_list.append(temp_pr)\n","            short_list.append(temp_pr)\n","\n","            h_pr_list.append(hedge_pr)\n","            h_short_list.append(hedge_pr)\n","\n","            i = j\n","            break\n","\n","\n","      #                  long  phase                #\n","      # elif entry[i] == 1:\n","      elif entry[i] in [1, 2]:\n","\n","        initial_i = i\n","\n","\n","        #               cloud const.          #     \n","        # if np.sum(over_bottom.iloc[i + 1 - cloud_lookback:i + 1]) != cloud_lookback:\n","        # # if np.sum(over_bottom.iloc[i - cloud_lookback:i]) != cloud_lookback:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue  \n","\n","        #               st color const.           #\n","        # # if np.sum(res_df[['minor_ST1_Trend', 'minor_ST2_Trend', 'minor_ST3_Trend']].iloc[i]) >= 1:\n","        # if np.sum(res_df[['minor_ST1_Trend', 'minor_ST2_Trend', 'minor_ST3_Trend']].iloc[i]) >= 3:\n","        #   pass\n","        # else:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","        #               sar const.            #\n","        # if res_df[sar].iloc[i] < res_df['low'].iloc[i]:\n","        if res_df['sar1'].iloc[i] < res_df['low'].iloc[i] and res_df['sar2'].iloc[i] < res_df['low'].iloc[i]:\n","          pass\n","        else:\n","          i += 1\n","          if i >= len(res_df):\n","            break\n","          continue\n","\n","        #               limit waiting const.             #\n","        # entry_done = False\n","        # for e_j in range(i + 1, len(res_df)):\n","\n","        #   #             Todo            #\n","        #   #             1. ep 설정\n","        #   #             2. limit 대기 시간 설정\n","        #   if res_df['low'].iloc[e_j] <= upper_ep.iloc[initial_i]:\n","        #     entry_done = True\n","        #     break\n","\n","        #   if res_df['close'].iloc[e_j] < res_df['middle_line'].iloc[e_j]:     \n","        #     break\n","\n","        # i = e_j\n","\n","\n","        # if entry_done:\n","        #   pass\n","        # else:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","\n","        temp_tp_list =[]\n","        remain_tp = 2\n","        hedge_cnt = 1\n","        h_ep, h_tp = None, None        \n","        h_i, h_j = None, None        \n","        trade_done = False\n","\n","        for j in range(i + 1, len(res_df)):        \n","\n","          # -------------- hedge only once -------------- #\n","          #             일단, h_quantity 는 초기 진입과 동일하게 설정         #\n","          # if res_df['low'].iloc[j] <= res_df['minor_ST2_Down'].iloc[j] and hedge_cnt == 1:\n","          # if res_df['close'].iloc[j] <= res_df['minor_ST2_Down'].iloc[j] and hedge_cnt == 1:\n","          # if res_df['close'].iloc[j] <= res_df['minor_ST3_Down'].iloc[j] and hedge_cnt == 1:\n","\n","          #   h_ep = res_df['close'].iloc[j]\n","          #   hedge_cnt -= 1\n","          #   h_i = j\n","\n","\n","          # -------------- sub tp --------------  #\n","          # if res_df['high'].iloc[j] >= long_tp2.iloc[j] and remain_tp == 2:\n","\n","          #   # trade_done = True\n","          #   remain_tp -= 1\n","\n","          #   #         dynamic tp        #\n","          #   if long_tp2.iloc[j] != long_tp2.iloc[j - 1]:\n","\n","          #     #   tp limit 이 불가한 경우 = open 이 이미, tp 를 넘은 경우 # \n","          #     if res_df['open'].iloc[j] >= long_tp2.iloc[j]:\n","\n","          #       # tp = long_tp2.iloc[j]\n","          #       tp = res_df['open'].iloc[j]\n","          #       # tp_state_list.append(\"d-open\")\n","\n","              \n","          #     #   tp limit 이 가능한 경우 = open 이 아직, tp 를 넘지 않은 경우 # \n","          #     else:\n","                \n","          #       tp = long_tp2.iloc[j]\n","          #       # tp = res_df['open'].iloc[j]\n","          #       # tp_state_list.append(\"d-long_tp2\")\n","\n","          #   #         static tp         #\n","          #   else:\n","\n","          #     #   tp limit 이 불가한 경우 = open 이 이미, tp 를 넘은 경우 # \n","          #     #   non_inversion 의 경우, short_tp 가 가능함   #\n","\n","          #     if res_df['open'].iloc[j] >= long_tp2.iloc[j]:\n","\n","          #       tp = long_tp2.iloc[j]\n","          #       # tp = res_df['open'].iloc[j]\n","          #       # tp_state_list.append(\"s-long_tp2\")\n","\n","              \n","          #     #   tp limit 이 가능한 경우 = open 이 아직, tp 를 넘지 않은 경우 # \n","          #     else:\n","                \n","          #       tp = long_tp2.iloc[j]\n","          #       # tp = res_df['open'].iloc[j]\n","          #       # tp_state_list.append(\"s-long_tp2\")       \n","            \n","          #   temp_tp_list.append(tp)  \n","\n","\n","          # # -------------- ultimate tp -------------- #\n","          if res_df['high'].iloc[j] >= long_tp.iloc[j]:\n","\n","            trade_done = True\n","\n","            #         dynamic tp        #\n","            if long_tp.iloc[j] != long_tp.iloc[j - 1]:\n","\n","              #   tp limit 이 불가한 경우 = open 이 이미, tp 를 넘은 경우 # \n","              if res_df['open'].iloc[j] >= long_tp.iloc[j]:\n","\n","                # tp = long_tp.iloc[j]\n","                tp = res_df['open'].iloc[j]\n","                tp_state_list.append(\"d-open\")\n","\n","              \n","              #   tp limit 이 가능한 경우 = open 이 아직, tp 를 넘지 않은 경우 # \n","              else:\n","                \n","                tp = long_tp.iloc[j]\n","                # tp = res_df['open'].iloc[j]\n","                tp_state_list.append(\"d-long_tp\")\n","\n","            #         static tp         #\n","            else:\n","\n","              #   tp limit 이 불가한 경우 = open 이 이미, tp 를 넘은 경우 # \n","              #   non_inversion 의 경우, short_tp 가 가능함   #\n","\n","              if res_df['open'].iloc[j] >= long_tp.iloc[j]:\n","\n","                tp = long_tp.iloc[j]\n","                # tp = res_df['open'].iloc[j]\n","                tp_state_list.append(\"s-long_tp\")\n","\n","              \n","              #   tp limit 이 가능한 경우 = open 이 아직, tp 를 넘지 않은 경우 # \n","              else:\n","                \n","                tp = long_tp.iloc[j]\n","                # tp = res_df['open'].iloc[j]\n","                tp_state_list.append(\"s-long_tp\")         \n","            \n","            temp_tp_list.append(tp)\n","\n","\n","\n","          # -------------- cut -------------- #\n","          # elif res_df['macd_hist3'].iloc[j] < 0:\n","          # # elif res_df['macd_hist3'].iloc[i] > 0 and res_df['macd_hist3'].iloc[j] < 0:\n","          # if res_df['close'].iloc[j] < res_df['middle_line'].iloc[j]:            \n","\n","          #   tp = res_df['close'].iloc[j]\n","          #   # tp = res_df['open'].iloc[j]\n","          #   tp_state_list.append(\"close cut\")\n","          #   trade_done = True\n","\n","          #   temp_tp_list.append(tp)\n","\n","\n","          if trade_done:\n","\n","            if entry[initial_i] == 1:\n","              ep = res_df['close'].iloc[initial_i]\n","              # ep = lower_ep.iloc[initial_i]\n","            else:\n","              # ep = lower_ep.iloc[i]\n","              ep = res_df['open'].iloc[initial_i]\n","              # ep = res_df['close'].iloc[initial_i - 1]\n","\n","            qty_list = []\n","            temp_pr_list = []\n","            r_qty = 1\n","            for q_i in range(len(temp_tp_list) - 1, -1, -1):\n","\n","              if len(temp_tp_list) == 1:\n","                temp_qty = r_qty\n","              else:\n","                if q_i !=0:\n","                  temp_qty = r_qty / p_qty_divider\n","                else:\n","                  temp_qty = r_qty\n","\n","              temp_pr = (temp_tp_list[q_i] / ep - fee - 1) * temp_qty\n","              r_qty -= temp_qty\n","\n","              temp_pr_list.append(temp_pr)\n","\n","            temp_pr = sum(temp_pr_list) + 1\n","\n","            #   hedge + non_hedge pr summation    #\n","            #   hedge pr direction is opposite to the other   #\n","            hedge_pr = 1\n","            if hedge_cnt == 0:\n","\n","              #       hedge tp      #\n","              h_tp = res_df['close'].iloc[j]\n","              hedge_pr = h_ep / h_tp - fee  # hedge short\n","              temp_pr += hedge_pr - 1\n","              h_j = j\n","\n","            ep_tp_list.append((ep, temp_tp_list))\n","            trade_list.append([initial_i, i, j])\n","\n","            h_ep_tp_list.append((h_ep, h_tp))        \n","            h_trade_list.append([initial_i, h_i, h_j])                \n","\n","            pr_list.append(temp_pr)\n","            long_list.append(temp_pr)\n","\n","            h_pr_list.append(hedge_pr)\n","            h_long_list.append(hedge_pr)                    \n","\n","            i = j\n","            break\n","\n","\n","      i += 1\n","      if i >= len(res_df):\n","        break\n","\n","\n","\n","    # -------------------- result analysis -------------------- #\n","    plt.figure(figsize=(16, 12))\n","    plt.suptitle(key)\n","\n","    np_pr = (np.array(pr_list) - 1) * lvrg + 1\n","\n","    total_pr = np.cumprod(np_pr)\n","    wr = len(np_pr[np_pr > 1]) / len(np_pr[np_pr != 1])\n","\n","    # plt.subplot(121)\n","    plt.subplot(231)\n","    plt.plot(total_pr)\n","    plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\" % (wr, np.min(np_pr), total_pr[-1], lvrg))\n","    # plt.show()\n","\n","    #         short only      #\n","    np_short_pr = (np.array(short_list) - 1) * lvrg + 1\n","\n","    total_short_pr = np.cumprod(np_short_pr)\n","    short_wr = len(np_short_pr[np_short_pr > 1]) / len(np_short_pr[np_short_pr != 1])\n","    \n","    plt.subplot(232)\n","    plt.plot(total_short_pr)\n","    plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\" % (short_wr, np.min(np_short_pr), total_short_pr[-1], lvrg))\n","\n","    #         long only      #\n","    np_long_pr = (np.array(long_list) - 1) * lvrg + 1\n","\n","    total_long_pr = np.cumprod(np_long_pr)\n","    long_wr = len(np_long_pr[np_long_pr > 1]) / len(np_long_pr[np_long_pr != 1])\n","    \n","    plt.subplot(233)\n","    plt.plot(total_long_pr)\n","    plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\" % (long_wr, np.min(np_long_pr), total_long_pr[-1], lvrg))\n","\n","\n","    #     reversion adjustment      #\n","    rev_np_pr = (1 / (np.array(pr_list) + fee) - fee - 1) * lvrg + 1\n","        \n","    rev_total_pr = np.cumprod(rev_np_pr)\n","    rev_wr = len(rev_np_pr[rev_np_pr > 1]) / len(rev_np_pr[rev_np_pr != 1])\n","\n","    # plt.subplot(122)\n","    plt.subplot(234)\n","    plt.plot(rev_total_pr)\n","    plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\" % (rev_wr, np.min(rev_np_pr), rev_total_pr[-1], lvrg))\n","\n","    #         short       #\n","    rev_np_short_pr = (1 / (np.array(short_list) + fee) - fee - 1) * lvrg + 1\n","        \n","    rev_total_short_pr = np.cumprod(rev_np_short_pr)\n","    rev_short_wr = len(rev_np_short_pr[rev_np_short_pr > 1]) / len(rev_np_short_pr[rev_np_short_pr != 1])\n","\n","    # plt.subplot(122)\n","    plt.subplot(235)\n","    plt.plot(rev_total_short_pr)\n","    plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\" % (rev_short_wr, np.min(rev_np_short_pr), rev_total_short_pr[-1], lvrg))\n","\n","    #         long       #\n","    rev_np_long_pr = (1 / (np.array(long_list) + fee) - fee - 1) * lvrg + 1\n","        \n","    rev_total_long_pr = np.cumprod(rev_np_long_pr)\n","    rev_long_wr = len(rev_np_long_pr[rev_np_long_pr > 1]) / len(rev_np_long_pr[rev_np_long_pr != 1])\n","\n","    # plt.subplot(122)\n","    plt.subplot(236)\n","    plt.plot(rev_total_long_pr)\n","    plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\" % (rev_long_wr, np.min(rev_np_long_pr), rev_total_long_pr[-1], lvrg))\n","    \n","    plt.show()\n","\n","\n","\n","    # --------------------- h pr plot --------------------- #\n","\n","    try:\n","      plt.figure(figsize=(16, 12))\n","      plt.suptitle(key)\n","\n","      np_pr = (np.array(pr_list) - 1) * lvrg + 1\n","\n","      total_pr = np.cumprod(np_pr)\n","      wr = len(np_pr[np_pr > 1]) / len(np_pr[np_pr != 1])\n","\n","      # plt.subplot(121)\n","      plt.subplot(231)\n","      plt.plot(total_pr)\n","      plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\" % (wr, np.min(np_pr), total_pr[-1], lvrg))\n","      # plt.show()\n","\n","      #         short only      #\n","      np_short_pr = (np.array(short_list) - 1) * lvrg + 1\n","\n","      total_short_pr = np.cumprod(np_short_pr)\n","      short_wr = len(np_short_pr[np_short_pr > 1]) / len(np_short_pr[np_short_pr != 1])\n","      \n","      plt.subplot(232)\n","      plt.plot(total_short_pr)\n","      plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\" % (short_wr, np.min(np_short_pr), total_short_pr[-1], lvrg))\n","\n","      #         long only      #\n","      np_long_pr = (np.array(long_list) - 1) * lvrg + 1\n","\n","      total_long_pr = np.cumprod(np_long_pr)\n","      long_wr = len(np_long_pr[np_long_pr > 1]) / len(np_long_pr[np_long_pr != 1])\n","      \n","      plt.subplot(233)\n","      plt.plot(total_long_pr)\n","      plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\" % (long_wr, np.min(np_long_pr), total_long_pr[-1], lvrg))\n","\n","\n","      #     reversion adjustment      #\n","      rev_np_pr = (1 / (np.array(pr_list) + fee) - fee - 1) * lvrg + 1\n","          \n","      rev_total_pr = np.cumprod(rev_np_pr)\n","      rev_wr = len(rev_np_pr[rev_np_pr > 1]) / len(rev_np_pr[rev_np_pr != 1])\n","\n","      # plt.subplot(122)\n","      plt.subplot(234)\n","      plt.plot(rev_total_pr)\n","      plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\" % (rev_wr, np.min(rev_np_pr), rev_total_pr[-1], lvrg))\n","\n","      #         short       #\n","      rev_np_short_pr = (1 / (np.array(short_list) + fee) - fee - 1) * lvrg + 1\n","          \n","      rev_total_short_pr = np.cumprod(rev_np_short_pr)\n","      rev_short_wr = len(rev_np_short_pr[rev_np_short_pr > 1]) / len(rev_np_short_pr[rev_np_short_pr != 1])\n","\n","      # plt.subplot(122)\n","      plt.subplot(235)\n","      plt.plot(rev_total_short_pr)\n","      plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\" % (rev_short_wr, np.min(rev_np_short_pr), rev_total_short_pr[-1], lvrg))\n","\n","      #         long       #\n","      rev_np_long_pr = (1 / (np.array(long_list) + fee) - fee - 1) * lvrg + 1\n","          \n","      rev_total_long_pr = np.cumprod(rev_np_long_pr)\n","      rev_long_wr = len(rev_np_long_pr[rev_np_long_pr > 1]) / len(rev_np_long_pr[rev_np_long_pr != 1])\n","\n","      # plt.subplot(122)\n","      plt.subplot(236)\n","      plt.plot(rev_total_long_pr)\n","      plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\" % (rev_long_wr, np.min(rev_np_long_pr), rev_total_long_pr[-1], lvrg))\n","      \n","      plt.show()\n","\n","\n","\n","      # --------------------- h pr plot --------------------- #\n","\n","      plt.figure(figsize=(16, 12))\n","      plt.suptitle(key)\n","\n","      h_np_pr = (np.array(h_pr_list) - 1) * lvrg + 1\n","      h_rev_np_pr = (1 / (np.array(h_pr_list) + fee) - fee - 1) * lvrg + 1    # define, for plot_check below cell\n","\n","      h_total_pr = np.cumprod(h_np_pr)\n","      h_wr = len(h_np_pr[h_np_pr > 1]) / len(h_np_pr[h_np_pr != 1])\n","\n","      # plt.subplot(121)\n","      plt.subplot(231)\n","      plt.plot(h_total_pr)\n","      plt.title(\"h_wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\" % (h_wr, np.min(h_np_pr), h_total_pr[-1], lvrg))\n","      # plt.show()\n","\n","      #         short only      #\n","      h_np_short_pr = (np.array(h_short_list) - 1) * lvrg + 1\n","\n","      h_total_short_pr = np.cumprod(h_np_short_pr)\n","      h_short_wr = len(h_np_short_pr[h_np_short_pr > 1]) / len(h_np_short_pr[h_np_short_pr != 1])\n","      \n","      plt.subplot(232)\n","      plt.plot(h_total_short_pr)\n","      plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\" % (h_short_wr, np.min(h_np_short_pr), h_total_short_pr[-1], lvrg))\n","\n","      #         long only      #\n","      h_np_long_pr = (np.array(h_long_list) - 1) * lvrg + 1\n","\n","      h_total_long_pr = np.cumprod(h_np_long_pr)\n","      h_long_wr = len(h_np_long_pr[h_np_long_pr > 1]) / len(h_np_long_pr[h_np_long_pr != 1])\n","      \n","      plt.subplot(233)\n","      plt.plot(h_total_long_pr)\n","      plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\" % (h_long_wr, np.min(h_np_long_pr), h_total_long_pr[-1], lvrg))\n","\n","\n","      #     reversion adjustment      #\n","          \n","      h_rev_total_pr = np.cumprod(h_rev_np_pr)\n","      h_rev_wr = len(h_rev_np_pr[h_rev_np_pr > 1]) / len(h_rev_np_pr[h_rev_np_pr != 1])\n","\n","      # plt.subplot(122)\n","      plt.subplot(234)\n","      plt.plot(h_rev_total_pr)\n","      plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\" % (h_rev_wr, np.min(h_rev_np_pr), h_rev_total_pr[-1], lvrg))\n","\n","      #         short       #\n","      h_rev_np_short_pr = (1 / (np.array(h_short_list) + fee) - fee - 1) * lvrg + 1\n","          \n","      h_rev_total_short_pr = np.cumprod(h_rev_np_short_pr)\n","      h_rev_short_wr = len(h_rev_np_short_pr[h_rev_np_short_pr > 1]) / len(h_rev_np_short_pr[h_rev_np_short_pr != 1])\n","\n","      # plt.subplot(122)\n","      plt.subplot(235)\n","      plt.plot(h_rev_total_short_pr)\n","      plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\" % (h_rev_short_wr, np.min(h_rev_np_short_pr), h_rev_total_short_pr[-1], lvrg))\n","\n","      #         long       #\n","      h_rev_np_long_pr = (1 / (np.array(h_long_list) + fee) - fee - 1) * lvrg + 1\n","          \n","      h_rev_total_long_pr = np.cumprod(h_rev_np_long_pr)\n","      h_rev_long_wr = len(h_rev_np_long_pr[h_rev_np_long_pr > 1]) / len(h_rev_np_long_pr[h_rev_np_long_pr != 1])\n","\n","      # plt.subplot(122)\n","      plt.subplot(236)\n","      plt.plot(h_rev_total_long_pr)\n","      plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\" % (h_rev_long_wr, np.min(h_rev_np_long_pr), h_rev_total_long_pr[-1], lvrg))\n","      \n","      plt.show()\n","      print()\n","    \n","    except Exception as e:\n","      print('error in pr plot :', e)\n","\n","    # break # indi. loop\n","  break # pair loop"],"execution_count":null,"outputs":[{"output_type":"stream","text":["2021-06-30 ETHUSDT_cctbbo_backi2.xlsx loaded !\n","sar : sar2\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 1152x864 with 6 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1152x864 with 6 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}},{"output_type":"stream","text":["error in pr plot : division by zero\n"],"name":"stdout"},{"output_type":"display_data","data":{"text/plain":["<Figure size 1152x864 with 0 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"markdown","metadata":{"id":"5HYwFonmcaLm"},"source":["## clouds"]},{"cell_type":"markdown","metadata":{"id":"PlXeJWBqcfDq"},"source":["### close lb clouds "]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":864},"id":"GxJqrm3vcivI","executionInfo":{"status":"ok","timestamp":1628757059051,"user_tz":-540,"elapsed":15559,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"}},"outputId":"be16879d-3e14-4959-d92b-90241b1a1a1d"},"source":["fee = 0.0004\n","lvrg = 5\n","lvrg = 3\n","lvrg = 2\n","\n","# cloud_shift_size = -1\n","# cloud_shift_size = 15\n","cloud_shift_size = 1\n","# cloud_shift_size = 0\n","\n","# cloud_lookback = 50\n","cloud_lookback = 70\n","# cloud_lookback = 30\n","# cloud_lookback = 57\n","\n","sma_lookback = 100\n","# sma_lookback = 100\n","\n","sma_shift_size = 1\n","close_shift_size = 1\n","\n","sma = 'sma4'\n","\n","\n","#       1-0. ep line = color on st min/max 조금 이내       #\n","#       1-0-1. option1. color on upper st 색출 \n","# -->   1-0-1. option2. min upper st 바로 추출\n","#       1-0-2. 색출된 st 중 min / max st 선별\n","gap = 0.0002\n","gap = 0.0001\n","gap = 0.00005\n","# gap = 0.0000\n","# gap = -0.00005\n","\n","p_qty_divider = 1.5\n","# sma_period = 250\n","sma_period = 100\n","\n","static_tp = 0\n","\n","fisher_upper = 1.5\n","fisher_lower = -1.5\n","\n","stoch_upper = 63\n","stoch_lower = 37\n","\n","# tp_cut_ratio = 0.5\n","tp_cut_ratio = 0.7\n","# tp_cut_ratio = 1\n","# tp_cut_ratio = 2\n","# tp_cut_ratio = 3\n","\n","senkoua_list = ['senkou_a1', 'senkou_a2', 'senkou_a3', 'senkou_a4', 'senkou_a5']\n","senkoub_list = ['senkou_b1', 'senkou_b2', 'senkou_b3', 'senkou_b4', 'senkou_b5']\n","\n","\n","for key, res_df in res_df_dict.items():\n","\n","  # res_df = pd.read_excel(save_path + key, index_col=0)\n","  fourth_df = pd.read_excel(date_path4 + key.replace(\"_4h1d_backi2\", \"\"), index_col=0)\n","\n","  print(key, \"loaded !\")\n","\n","  # for senkou_a, senkou_b in zip(senkoua_list, senkoub_list): \n","  # for sma4_period in range(5, 30, 2):\n","  if 1:\n","\n","    print(\"sma4_period :\", sma4_period)\n","\n","    senkou_a, senkou_b = 'senkou_a1', 'senkou_b1'\n","        \n","    # upper_ep = res_df['middle_line']\n","    # lower_ep = res_df['middle_line']\n","\n","    upper_ep = res_df['min_upper'] * (1 - gap)\n","    lower_ep = res_df['max_lower'] * (1 + gap)\n","\n","    upper_middle = (res_df['middle_line'] + res_df['min_upper']) / 2\n","    lower_middle = (res_df['middle_line'] + res_df['max_lower']) / 2\n","    \n","    # print(\"under_top :\", under_top)\n","    # break\n","\n","    # sma = res_df['close'].rolling(300).mean()\n","    res_df['sma'] = res_df['close'].rolling(sma_period).mean()  \n","    # print(res_df['sma5'].tail())\n","\n","    if \"sma4\" in res_df.columns:\n","      res_df.drop(\"sma4\", axis=1, inplace=True)\n","\n","    fourth_df['sma'] = fourth_df['close'].rolling(sma4_period).mean()\n","    res_df = res_df.join(pd.DataFrame(index=res_df.index, data=to_lower_tf(res_df, fourth_df, [-1]), columns=['sma4']))\n","    \n","    #       short = -1      #\n","    entry = np.where((res_df['close'].shift(1) <= upper_ep) & \n","                      (res_df['high'] >= upper_ep)\n","                      , -1, 0) \n","\n","    #       short = -2      #\n","    # entry = np.where((res_df['close'].shift(1) > upper_ep)\n","    #                   , -2, entry) \n","\n","    #       long = 1     #\n","    #       close.shift(1) > ep | 2nd_middle line       #\n","\n","    entry = np.where((res_df['close'].shift(1) >= lower_ep) & \n","                      (res_df['low'] <= lower_ep)\n","                      , 1, entry) \n","\n","    #       long = 2     #\n","    #       close.shift(1) > ep | 2nd_middle line       #\n","\n","    # entry = np.where((res_df['close'].shift(1) < lower_ep)\n","    #                   , 2, entry) \n","\n","\n","\n","    #       1-2. tp line = middle line 조금 이내         #    \n","    short_tp = res_df['middle_line'] * (1 + gap)\n","    long_tp = res_df['middle_line'] * (1 - gap)\n","\n","    # short_tp = res_df['close'] - (res_df['middle_line'] - res_df['close']) * tp_cut_ratio\n","    # long_tp = res_df['close'] + (res_df['close'] - res_df['middle_line']) * tp_cut_ratio\n","    \n","    # short_tp = res_df['max_lower'] * (1 + gap)\n","    # long_tp = res_df['min_upper'] * (1 - gap)\n","\n","    short_tp2 = res_df['middle_line'] * (1 + gap)\n","    long_tp2 = res_df['middle_line'] * (1 - gap)\n","\n","    # short_tp = (res_df['middle_line'] + res_df['min_upper']) / 2\n","    # long_tp = (res_df['middle_line'] + res_df['max_lower']) / 2\n","\n","\n","    #       trading : 여기도 체결 결과에 대해 묘사함       #\n","    trade_list = []\n","    h_trade_list = []\n","    liqd_list = []\n","    short_liqd_list = []\n","    long_liqd_list = []\n","\n","    nontp_liqd_list = []\n","    nontp_short_liqd_list = []\n","    nontp_long_liqd_list = []\n","\n","    nontp_pr_list = []\n","    nontp_short_pr_list = []\n","    nontp_long_pr_list = []\n","\n","    nontp_short_indexs = []\n","    nontp_long_indexs = []\n","\n","    nontp_short_ep_list = []\n","    nontp_long_ep_list = []\n","\n","    pr_list = []\n","    long_list = []\n","    short_list = []\n","\n","    h_pr_list = []\n","    h_long_list = []\n","    h_short_list = []\n","\n","    ep_tp_list = []\n","    h_ep_tp_list = []\n","    tp_state_list = []\n","\n","    i = 0\n","    while 1:\n","    # for i in range(len(res_df)):\n","\n","\n","      # if entry[i] == -1:\n","      if entry[i] in [-1, -2]:\n","\n","        initial_i = i\n","\n","        #             ep scheduling               #\n","        # if  (res_df['close'].iloc[i] <= lower_middle.iloc[i]):\n","        #   pass\n","        # else:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","        #             distance protection           #\n","        # tp_dist = (res_df['close'].iloc[i] - short_tp.iloc[i])\n","        # cut_dist = (res_df['middle_line'].iloc[i] - res_df['close'].iloc[i])\n","        # if tp_dist / cut_dist >= tp_cut_ratio:\n","        #   pass\n","        # else:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","        #               sma const.            #\n","        # if res_df['close'].iloc[i] <= res_df['sma'].iloc[i]:\n","        # if upper_ep.iloc[i] <= res_df['sma'].iloc[i - 1]:\n","        # under_sma = upper_ep <= res_df['sma'].shift(sma_shift_size)\n","        # if np.sum(under_sma.iloc[i + 1 - sma_lookback:i + 1]) == sma_lookback:\n","        #   pass\n","        # else:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","        #              1d sma const.            #\n","        if res_df[sma].iloc[i] >= res_df['close'].iloc[i]:\n","          pass\n","        else:\n","          i += 1\n","          if i >= len(res_df):\n","            break\n","          continue\n","\n","\n","        #               cloud const.         #   \n","        if i < cloud_lookback:\n","          i += 1\n","          if i >= len(res_df):\n","            break\n","          continue\n","        \n","        cloud_top = np.max(res_df[[senkou_a, senkou_b]], axis=1)\n","        under_top = res_df['close'].shift(cloud_shift_size) <= cloud_top.shift(cloud_shift_size)\n","\n","        if np.sum(under_top.iloc[i + 1 - cloud_lookback:i + 1]) == cloud_lookback:\n","          pass\n","        else:\n","        # if np.sum(under_top.iloc[i - cloud_lookback:i]) != cloud_lookback:\n","          i += 1\n","          if i >= len(res_df):\n","            break\n","          continue\n","\n","\n","        #               st color const.           #\n","        # if np.sum(res_df[['minor_ST1_Trend', 'minor_ST2_Trend', 'minor_ST3_Trend']].iloc[i]) <= -1:\n","        #   pass\n","        # else:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","        #               sar const.            #\n","        # if res_df['sar2'].iloc[i] > res_df['high'].iloc[i] and res_df['sar3'].iloc[i] > res_df['high'].iloc[i]:\n","        #   pass\n","        # else:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","\n","        #               limit waiting const.             #\n","        # entry_done = False\n","        # for e_j in range(i + 1, len(res_df)):\n","\n","        #   #             Todo            #\n","        #   #             1. ep 설정\n","        #   #             2. limit 대기 시간 설정\n","        #   if res_df['high'].iloc[e_j] >= upper_ep.iloc[initial_i]:\n","        #     entry_done = True\n","        #     # print(\"e_j :\", e_j)\n","        #     break\n","\n","        #   if res_df['close'].iloc[e_j] > res_df['middle_line'].iloc[e_j]:\n","        #     break\n","\n","        # i = e_j\n","        # # print(\"i = e_j :\", i)\n","\n","\n","        # if entry_done:\n","        #   pass\n","        # else:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","        \n","        temp_tp_list = []\n","        remain_tp = 2\n","        hedge_cnt = 1\n","        h_ep, h_tp = None, None\n","        h_i, h_j = None, None\n","        trade_done = False\n","        \n","        for j in range(i + 1, len(res_df)):\n","          \n","          if static_tp:\n","            tp_j = initial_i\n","          else:\n","            tp_j = j\n","          \n","          # -------------- hedge only once -------------- #\n","          #             일단, h_quantity 는 초기 진입과 동일하게 설정         #\n","          # if res_df['high'].iloc[j] >= res_df['minor_ST2_Up'].iloc[j] and hedge_cnt == 1:\n","          # if res_df['close'].iloc[j] >= res_df['minor_ST2_Up'].iloc[j] and hedge_cnt == 1:\n","          # if res_df['close'].iloc[j] >= res_df['minor_ST3_Up'].iloc[j] and hedge_cnt == 1:\n","\n","          #   h_ep = res_df['close'].iloc[j]\n","          #   hedge_cnt -= 1\n","          #   h_i = j\n","\n","\n","          # -------------- sub tp -------------- #\n","          # if res_df['low'].iloc[j] <= short_tp2.iloc[j] and remain_tp == 2:\n","          # # if res_df['low'].iloc[j] <= short_tp2.iloc[j] <= res_df['high'].iloc[j]: --> 이건 잘못되었음\n","\n","          #   # trade_done = True # <-- sub tp 에는 trade_done 을 주지 않음 !\n","          #   remain_tp -= 1\n","\n","          #   #         dynamic tp        #\n","          #   if short_tp2.iloc[j] != short_tp2.iloc[j - 1]:\n","\n","          #     #   tp limit 이 불가한 경우 = open 이 이미, tp 를 넘은 경우 # \n","          #     if res_df['open'].iloc[j] < short_tp2.iloc[j]:\n","\n","          #       # tp = short_tp2.iloc[j]\n","          #       tp = res_df['open'].iloc[j]\n","          #       # tp_state_list.append(\"d-open\")\n","\n","          #     #   tp limit 이 가능한 경우 = open 이 아직, tp 를 넘지 않은 경우 # \n","          #     else:\n","\n","          #       tp = short_tp2.iloc[j]\n","          #       # tp = res_df['open'].iloc[j]\n","          #       # tp_state_list.append(\"d-short_tp2\")\n","\n","          #   #         static tp         #\n","          #   else:\n","              \n","          #     #   tp limit 이 불가한 경우 = open 이 이미, tp 를 넘은 경우 # \n","          #     #   non_inversion 의 경우, short_tp2 가 가능함   #\n","\n","          #     if res_df['open'].iloc[j] < short_tp2.iloc[j]:\n","\n","          #       tp = short_tp2.iloc[j]\n","          #       # tp = res_df['open'].iloc[j]\n","          #       # tp_state_list.append(\"s-short_tp2\")\n","\n","          #     #   tp limit 이 가능한 경우 = open 이 아직, tp 를 넘지 않은 경우 # \n","          #     else:\n","\n","          #       tp = short_tp2.iloc[j]\n","          #       # tp = res_df['open'].iloc[j]\n","          #       # tp_state_list.append(\"s-short_tp2\")   \n","\n","          #   temp_tp_list.append(tp)  \n","\n","\n","          # -------------- ultimate tp -------------- #\n","          #               1. by price line             #\n","          if res_df['low'].iloc[j] <= short_tp.iloc[tp_j]: # we use static tp now\n","          # if res_df['low'].iloc[j] <= short_tp.iloc[j]:\n","          # if res_df['low'].iloc[j] <= short_tp.iloc[j] <= res_df['high'].iloc[j]: --> 이건 잘못되었음\n","\n","            trade_done = True\n","\n","            #         dynamic tp        #\n","            # if 0:\n","            if short_tp.iloc[j] != short_tp.iloc[j - 1] and not static_tp:\n","\n","              #   tp limit 이 불가한 경우 = open 이 이미, tp 를 넘은 경우 # \n","              # if res_df['open'].iloc[j] < short_tp.iloc[initial_i]:\n","              if res_df['open'].iloc[j] < short_tp.iloc[j]:\n","\n","                # tp = short_tp.iloc[initial_i]\n","                tp = res_df['open'].iloc[j]\n","                tp_state_list.append(\"d-short_open\")\n","\n","              #   tp limit 이 가능한 경우 = open 이 아직, tp 를 넘지 않은 경우 # \n","              else:\n","\n","                # tp = short_tp.iloc[initial_i]\n","                tp = short_tp.iloc[j]\n","                # tp = res_df['open'].iloc[j]\n","                tp_state_list.append(\"d-short_tp\")\n","\n","            #         static tp         #\n","            else:\n","              \n","              #   tp limit 이 불가한 경우 = open 이 이미, tp 를 넘은 경우 # \n","              #   non_inversion 의 경우, short_tp 가 가능함   #              \n","\n","              # if res_df['open'].iloc[j] < short_tp.iloc[initial_i]:\n","              if res_df['open'].iloc[j] < short_tp.iloc[tp_j]:\n","\n","                # tp = short_tp.iloc[initial_i]\n","                tp = short_tp.iloc[tp_j]\n","\n","                # tp = res_df['open'].iloc[j]\n","                tp_state_list.append(\"s-short_tp\")\n","\n","              #   tp limit 이 가능한 경우 = open 이 아직, tp 를 넘지 않은 경우 # \n","              else:\n","\n","                # tp = short_tp.iloc[initial_i]\n","                tp = short_tp.iloc[tp_j]\n","\n","                # tp = res_df['open'].iloc[j]\n","                tp_state_list.append(\"s-short_tp\")   \n","\n","            temp_tp_list.append(tp)     \n","\n","\n","          #           2. by signal        #\n","          # if entry[j] == 1:\n","            \n","          #   tp = res_df['close'].iloc[j]\n","          #   # tp = res_df['open'].iloc[j]\n","          #   tp_state_list.append(\"close tp\")\n","          #   trade_done = True\n","\n","          #   temp_tp_list.append(tp) \n","\n","                  \n","          # -------------- cut -------------- #\n","          # elif res_df['macd_hist3'].iloc[j] > 0:  #  macd cut\n","          # elif res_df['macd_hist3'].iloc[i] < 0 and res_df['macd_hist3'].iloc[j] > 0:\n","          # elif res_df['close'].iloc[j] > res_df['middle_line'].iloc[j]:     \n","          # elif res_df['close'].iloc[j] > res_df[sma].iloc[j]:\n","          # elif np.sum(under_top.iloc[j + 1 - cloud_lookback:j + 1]) != cloud_lookback:\n","\n","          #   tp = res_df['close'].iloc[j]\n","          #   # tp = res_df['open'].iloc[j]\n","          #   tp_state_list.append(\"short close_cut\")\n","          #   trade_done = True\n","\n","          #   temp_tp_list.append(tp) \n","\n","\n","          # -------------- non tp -------------- #\n","          elif j == len(res_df) - 1:\n","            trade_done = True\n","            tp = res_df['close'].iloc[j]\n","          \n","\n","\n","          # -------------- append trade data -------------- #\n","          if trade_done:\n","\n","            if entry[initial_i] == -1:\n","              # ep = res_df['close'].iloc[initial_i]\n","              ep = upper_ep.iloc[initial_i]\n","            else:\n","              ep = res_df['open'].iloc[initial_i]\n","              # ep = upper_ep.iloc[initial_i]\n","              # ep = res_df['close'].iloc[initial_i - 1]     \n","\n","            #       Todo      #\n","            #        1. len(temp_tp_list) 에 대응하는 qty_list 를 만들어야함    #\n","            #        2. temp_pr_list 를 만들어 총합 + 1 을 pr_list 에 저장      #\n","            #        2-1. temp_pr = sum((ep / temp_tp_list[i] - fee - 1) * qty_list[i])   #\n","            #        3. temp_pr_list 의 첫 tp 에는 r_qty 를 할당함        #\n","            qty_list = []\n","            temp_pr_list = []\n","            r_qty = 1\n","            for q_i in range(len(temp_tp_list) - 1, -1, -1):\n","\n","              if len(temp_tp_list) == 1:\n","                temp_qty = r_qty\n","              else:\n","                if q_i !=0:\n","                  temp_qty = r_qty / p_qty_divider\n","                else:\n","                  temp_qty = r_qty\n","\n","              temp_pr = (ep / temp_tp_list[q_i] - fee - 1) * temp_qty\n","              r_qty -= temp_qty\n","\n","              temp_pr_list.append(temp_pr)\n","              qty_list.append(temp_qty)\n","\n","            # if len(temp_pr_list) == 1:\n","            #   print(\"qty_list :\", qty_list)\n","            #   print(\"temp_pr_list :\", temp_pr_list)\n","\n","            temp_pr = sum(temp_pr_list) + 1\n","\n","            #   hedge + non_hedge pr summation    #\n","            #   hedge pr direction is opposite to the other   #\n","            hedge_pr = 1\n","            if hedge_cnt == 0:\n","\n","              #       hedge tp      #\n","              h_tp = res_df['close'].iloc[j]\n","              hedge_pr = h_tp / h_ep - fee  # hedge long\n","              temp_pr += hedge_pr - 1\n","              h_j = j\n","\n","            \n","            hh = max(res_df['high'].iloc[i:j + 1])\n","            short_liq = (ep / hh - fee - 1) * lvrg + 1\n","\n","            if j != len(res_df) - 1:\n","\n","              ep_tp_list.append((ep, temp_tp_list))  \n","              trade_list.append([initial_i, i, j])\n","\n","              liqd_list.append(short_liq)\n","              short_liqd_list.append(short_liq)\n","\n","              h_ep_tp_list.append((h_ep, h_tp))        \n","              h_trade_list.append([initial_i, h_i, h_j])                \n","\n","              pr_list.append(temp_pr)\n","              short_list.append(temp_pr)\n","\n","              h_pr_list.append(hedge_pr)\n","              h_short_list.append(hedge_pr)\n","\n","              i = j\n","              break\n","\n","            else:\n","          \n","              #         tp 미체결 survey        #\n","              nontp_liqd_list.append(short_liq)\n","              nontp_short_liqd_list.append(short_liq)\n","              nontp_short_indexs.append(i)\n","              nontp_short_ep_list.append(ep)\n","\n","              nontp_short_pr = (ep / tp - fee - 1) * lvrg + 1\n","              nontp_pr_list.append(nontp_short_pr)\n","              nontp_short_pr_list.append(nontp_short_pr)\n","\n","\n","\n","      #                  long  phase                #\n","      # elif entry[i] == 1:\n","      elif entry[i] in [1, 2]:\n","\n","        initial_i = i\n","\n","        #               ep scheduling                 #\n","        # if res_df['close'].iloc[i] >= upper_middle.iloc[i]:\n","        #   pass\n","        # else:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","\n","        #             distance protection           #\n","        # tp_dist = (long_tp.iloc[i] - res_df['close'].iloc[i])\n","        # cut_dist = (res_df['close'].iloc[i] - res_df['middle_line'].iloc[i])\n","        # if tp_dist / cut_dist >= tp_cut_ratio:\n","        #   pass\n","        # else:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","        #               sma const.            #\n","        # if res_df['close'].iloc[i] > res_df['sma'].iloc[i]:\n","        # if lower_ep.iloc[i] >= res_df['sma'].iloc[i - 1]:\n","        # upper_sma = lower_ep >= res_df['sma'].shift(sma_shift_size)\n","        # if np.sum(upper_sma.iloc[i + 1 - sma_lookback:i + 1]) == sma_lookback:\n","        #   pass\n","        # else:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","        #              1d sma const.            #\n","        # if res_df[sma].iloc[i] <= res_df['close'].iloc[i]:\n","        #   pass\n","        # else:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","\n","        #               cloud const.          #     \n","        if i < cloud_lookback:\n","          i += 1\n","          if i >= len(res_df):\n","            break\n","          continue\n","        \n","        cloud_bottom = np.min(res_df[[senkou_a, senkou_b]], axis=1)\n","        over_bottom = res_df['close'].shift(cloud_shift_size) >= cloud_bottom.shift(cloud_shift_size)\n","\n","        if np.sum(over_bottom.iloc[i + 1 - cloud_lookback:i + 1]) == cloud_lookback:\n","          pass\n","        else:\n","        # if np.sum(over_bottom.iloc[i - cloud_lookback:i]) != cloud_lookback:\n","          i += 1\n","          if i >= len(res_df):\n","            break\n","          continue  \n","\n","        # #              st color const.           #\n","        # if np.sum(res_df[['minor_ST1_Trend', 'minor_ST2_Trend', 'minor_ST3_Trend']].iloc[i]) >= 1:\n","        #   pass\n","        # else:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","        #               sar const.            #\n","        # if res_df['sar2'].iloc[i] < res_df['low'].iloc[i] and res_df['sar3'].iloc[i] < res_df['low'].iloc[i]:\n","        #   pass\n","        # else:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","        #               limit waiting const.             #\n","        # entry_done = False\n","        # for e_j in range(i + 1, len(res_df)):\n","\n","        #   #             Todo            #\n","        #   #             1. ep 설정\n","        #   #             2. limit 대기 시간 설정\n","        #   if res_df['low'].iloc[e_j] <= upper_ep.iloc[initial_i]:\n","        #     entry_done = True\n","        #     break\n","\n","        #   if res_df['close'].iloc[e_j] < res_df['middle_line'].iloc[e_j]:     \n","        #     break\n","\n","        # i = e_j\n","\n","\n","        # if entry_done:\n","        #   pass\n","        # else:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","\n","        temp_tp_list =[]\n","        remain_tp = 2\n","        hedge_cnt = 1\n","        h_ep, h_tp = None, None        \n","        h_i, h_j = None, None        \n","        trade_done = False\n","\n","        for j in range(i + 1, len(res_df)):     \n","          \n","          if static_tp:\n","            tp_j = initial_i\n","          else:\n","            tp_j = j   \n","\n","          # -------------- hedge only once -------------- #\n","          #             일단, h_quantity 는 초기 진입과 동일하게 설정         #\n","          # if res_df['low'].iloc[j] <= res_df['minor_ST2_Down'].iloc[j] and hedge_cnt == 1:\n","          # if res_df['close'].iloc[j] <= res_df['minor_ST2_Down'].iloc[j] and hedge_cnt == 1:\n","          # if res_df['close'].iloc[j] <= res_df['minor_ST3_Down'].iloc[j] and hedge_cnt == 1:\n","\n","          #   h_ep = res_df['close'].iloc[j]\n","          #   hedge_cnt -= 1\n","          #   h_i = j\n","\n","\n","          # -------------- sub tp --------------  #\n","          # if res_df['high'].iloc[j] >= long_tp2.iloc[j] and remain_tp == 2:\n","\n","          #   # trade_done = True\n","          #   remain_tp -= 1\n","\n","          #   #         dynamic tp        #\n","          #   if long_tp2.iloc[j] != long_tp2.iloc[j - 1]:\n","\n","          #     #   tp limit 이 불가한 경우 = open 이 이미, tp 를 넘은 경우 # \n","          #     if res_df['open'].iloc[j] >= long_tp2.iloc[j]:\n","\n","          #       # tp = long_tp2.iloc[j]\n","          #       tp = res_df['open'].iloc[j]\n","          #       # tp_state_list.append(\"d-open\")\n","\n","              \n","          #     #   tp limit 이 가능한 경우 = open 이 아직, tp 를 넘지 않은 경우 # \n","          #     else:\n","                \n","          #       tp = long_tp2.iloc[j]\n","          #       # tp = res_df['open'].iloc[j]\n","          #       # tp_state_list.append(\"d-long_tp2\")\n","\n","          #   #         static tp         #\n","          #   else:\n","\n","          #     #   tp limit 이 불가한 경우 = open 이 이미, tp 를 넘은 경우 # \n","          #     #   non_inversion 의 경우, short_tp 가 가능함   #\n","\n","          #     if res_df['open'].iloc[j] >= long_tp2.iloc[j]:\n","\n","          #       tp = long_tp2.iloc[j]\n","          #       # tp = res_df['open'].iloc[j]\n","          #       # tp_state_list.append(\"s-long_tp2\")\n","\n","              \n","          #     #   tp limit 이 가능한 경우 = open 이 아직, tp 를 넘지 않은 경우 # \n","          #     else:\n","                \n","          #       tp = long_tp2.iloc[j]\n","          #       # tp = res_df['open'].iloc[j]\n","          #       # tp_state_list.append(\"s-long_tp2\")       \n","            \n","          #   temp_tp_list.append(tp)  \n","\n","\n","          # -------------- ultimate tp -------------- #\n","          #            1. by price line            #\n","          if res_df['high'].iloc[j] >= long_tp.iloc[tp_j]:\n","          # if res_df['high'].iloc[j] >= long_tp.iloc[j]:\n","\n","            trade_done = True\n","\n","            #         dynamic tp        #\n","            # if 0:\n","            if long_tp.iloc[j] != long_tp.iloc[j - 1] and not static_tp:\n","\n","              #   tp limit 이 불가한 경우 = open 이 이미, tp 를 넘은 경우 # \n","              # if res_df['open'].iloc[j] >= long_tp.iloc[initial_i]:\n","              if res_df['open'].iloc[j] >= long_tp.iloc[j]:\n","\n","                # tp = long_tp.iloc[initial_i]\n","                tp = res_df['open'].iloc[j]\n","                tp_state_list.append(\"d-long_open\")\n","\n","              \n","              #   tp limit 이 가능한 경우 = open 이 아직, tp 를 넘지 않은 경우 # \n","              else:\n","                \n","                # tp = long_tp.iloc[initial_i]\n","                tp = long_tp.iloc[j]\n","                # tp = res_df['open'].iloc[j]\n","                tp_state_list.append(\"d-long_tp\")\n","\n","            #         static tp         #\n","            else:\n","\n","              #   tp limit 이 불가한 경우 = open 이 이미, tp 를 넘은 경우 # \n","              #   non_inversion 의 경우, short_tp 가 가능함   #\n","\n","              if res_df['open'].iloc[j] >= long_tp.iloc[tp_j]:\n","              # if res_df['open'].iloc[j] >= long_tp.iloc[initial_i]:\n","\n","                # tp = long_tp.iloc[initial_i]\n","                tp = long_tp.iloc[tp_j]\n","\n","                # tp = res_df['open'].iloc[j]\n","                tp_state_list.append(\"s-long_tp\")\n","\n","              \n","              #   tp limit 이 가능한 경우 = open 이 아직, tp 를 넘지 않은 경우 # \n","              else:\n","                \n","                # tp = long_tp.iloc[initial_i]\n","                tp = long_tp.iloc[tp_j]\n","\n","                # tp = res_df['open'].iloc[j]\n","                tp_state_list.append(\"s-long_tp\")         \n","            \n","            temp_tp_list.append(tp)\n","\n","\n","          #           2. by signal        #\n","          # if entry[j] == -1:\n","            \n","          #   tp = res_df['close'].iloc[j]\n","          #   # tp = res_df['open'].iloc[j]\n","          #   tp_state_list.append(\"close tp\")\n","          #   trade_done = True\n","\n","          #   temp_tp_list.append(tp) \n","\n","\n","\n","          # -------------- cut -------------- #\n","          # elif res_df['macd_hist3'].iloc[j] < 0:\n","          # # elif res_df['macd_hist3'].iloc[i] > 0 and res_df['macd_hist3'].iloc[j] < 0:\n","          # elif res_df['close'].iloc[j] < res_df['middle_line'].iloc[j]:\n","          # elif res_df['close'].iloc[j] < res_df[sma].iloc[j]:     \n","          # elif np.sum(over_bottom.iloc[j + 1 - cloud_lookback:j + 1]) != cloud_lookback:       \n","\n","          #   tp = res_df['close'].iloc[j]\n","          #   # tp = res_df['open'].iloc[j]\n","          #   tp_state_list.append(\"long close_cut\")\n","          #   trade_done = True\n","\n","          #   temp_tp_list.append(tp)\n","\n","          \n","          # -------------- non tp -------------- #\n","          elif j == len(res_df) - 1:\n","            trade_done = True\n","            tp = res_df['close'].iloc[j]\n","\n","\n","          if trade_done:\n","\n","            if entry[initial_i] == 1:\n","              # ep = res_df['close'].iloc[initial_i]\n","              ep = lower_ep.iloc[initial_i]\n","            else:\n","              # ep = lower_ep.iloc[i]\n","              ep = res_df['open'].iloc[initial_i]\n","              # ep = res_df['close'].iloc[initial_i - 1]\n","\n","            qty_list = []\n","            temp_pr_list = []\n","            r_qty = 1\n","            for q_i in range(len(temp_tp_list) - 1, -1, -1):\n","\n","              if len(temp_tp_list) == 1:\n","                temp_qty = r_qty\n","              else:\n","                if q_i !=0:\n","                  temp_qty = r_qty / p_qty_divider\n","                else:\n","                  temp_qty = r_qty\n","\n","              temp_pr = (temp_tp_list[q_i] / ep - fee - 1) * temp_qty\n","              r_qty -= temp_qty\n","\n","              temp_pr_list.append(temp_pr)\n","\n","            temp_pr = sum(temp_pr_list) + 1\n","\n","            #   hedge + non_hedge pr summation    #\n","            #   hedge pr direction is opposite to the other   #\n","            hedge_pr = 1\n","            if hedge_cnt == 0:\n","\n","              #       hedge tp      #\n","              h_tp = res_df['close'].iloc[j]\n","              hedge_pr = h_ep / h_tp - fee  # hedge short\n","              temp_pr += hedge_pr - 1\n","              h_j = j\n","\n","\n","            ll = min(res_df['low'].iloc[i:j + 1])\n","            long_liq = (ll / ep - fee - 1) * lvrg + 1\n","\n","            if j != len(res_df) - 1:\n","\n","              ep_tp_list.append((ep, temp_tp_list))\n","              trade_list.append([initial_i, i, j])\n","\n","              liqd_list.append(long_liq)\n","              long_liqd_list.append(long_liq)\n","\n","              h_ep_tp_list.append((h_ep, h_tp))        \n","              h_trade_list.append([initial_i, h_i, h_j])                \n","\n","              pr_list.append(temp_pr)\n","              long_list.append(temp_pr)\n","\n","              h_pr_list.append(hedge_pr)\n","              h_long_list.append(hedge_pr)                    \n","\n","              i = j\n","              break\n","            \n","            else:\n","          \n","              #         tp 미체결 survey        #\n","              nontp_liqd_list.append(long_liq)\n","              nontp_long_liqd_list.append(long_liq)\n","              nontp_long_indexs.append(i)\n","              nontp_long_ep_list.append(ep)\n","              \n","              nontp_long_pr = (tp / ep - fee - 1) * lvrg + 1\n","              nontp_pr_list.append(nontp_long_pr)\n","              nontp_long_pr_list.append(nontp_long_pr)\n","\n","\n","      i += 1\n","      if i >= len(res_df):\n","        break\n","\n","\n","\n","    # -------------------- result analysis -------------------- #\n","    try:\n","      plt.figure(figsize=(16, 12))\n","      plt.suptitle(key)\n","\n","      np_pr = (np.array(pr_list) - 1) * lvrg + 1\n","\n","      total_pr = np.cumprod(np_pr)\n","      wr = len(np_pr[np_pr > 1]) / len(np_pr[np_pr != 1])\n","\n","      # plt.subplot(121)\n","      plt.subplot(231)\n","      plt.plot(total_pr)\n","      if len(nontp_liqd_list) != 0:\n","        plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\\nliqd : %.2f\\nnontp_liqd_cnt : %s\\nnontp_liqd : %.2f\\nontp_liqd_pr : %.2f\" \n","                  % (wr, np.min(np_pr), total_pr[-1], lvrg, min(liqd_list), len(nontp_liqd_list), min(nontp_liqd_list), min(nontp_pr_list)))\n","      else:\n","        plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\\nliqd : %.2f\\nnontp_liqd_cnt : %s\" \n","                  % (wr, np.min(np_pr), total_pr[-1], lvrg, min(liqd_list), len(nontp_liqd_list)))\n","      # plt.show()\n","\n","      #         short only      #\n","      np_short_pr = (np.array(short_list) - 1) * lvrg + 1\n","\n","      total_short_pr = np.cumprod(np_short_pr)\n","      short_wr = len(np_short_pr[np_short_pr > 1]) / len(np_short_pr[np_short_pr != 1])\n","      \n","      plt.subplot(232)\n","      plt.plot(total_short_pr)\n","      if len(nontp_short_liqd_list) != 0:   \n","\n","        max_nontp_short_term = len(res_df) - nontp_short_indexs[0]\n","        \n","        plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\\nliqd : %.2f\\nnontp_short_liqd_cnt : %s\\nnontp_short_liqd : %.2f\\nontp_short_liqd_pr : %.2f\\nmax_nontp_short_term : %s\"  \n","                  % (short_wr, np.min(np_short_pr), total_short_pr[-1], lvrg, min(short_liqd_list), \n","                     len(nontp_short_liqd_list), min(nontp_short_liqd_list), min(nontp_short_pr_list), max_nontp_short_term))\n","      else:\n","        plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\\nliqd : %.2f\\nnontp_short_liqd_cnt : %s\"  \n","                  % (short_wr, np.min(np_short_pr), total_short_pr[-1], lvrg, min(short_liqd_list), len(nontp_short_liqd_list)))\n","\n","      #         long only      #\n","      np_long_pr = (np.array(long_list) - 1) * lvrg + 1\n","\n","      total_long_pr = np.cumprod(np_long_pr)\n","      long_wr = len(np_long_pr[np_long_pr > 1]) / len(np_long_pr[np_long_pr != 1])\n","      \n","      plt.subplot(233)\n","      plt.plot(total_long_pr)\n","      if len(nontp_long_liqd_list) != 0:\n","\n","        max_nontp_long_term = len(res_df) - nontp_long_indexs[0]\n","\n","        plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\\nliqd : %.2f\\nnontp_long_liqd_cnt : %s\\nnontp_long_liqd : %.2f\\nontp_long_liqd_pr : %.2f\\nmax_nontp_long_term : %s\"   \n","                  % (long_wr, np.min(np_long_pr), total_long_pr[-1], lvrg, min(long_liqd_list), \n","                     len(nontp_long_liqd_list), min(nontp_long_liqd_list), min(nontp_long_pr_list), max_nontp_long_term))\n","      else:\n","        plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\\nliqd : %.2f\\nnontp_long_liqd_cnt : %s\"   \n","                  % (long_wr, np.min(np_long_pr), total_long_pr[-1], lvrg, min(long_liqd_list), len(nontp_long_liqd_list)))\n","\n","\n","      #     reversion adjustment      #\n","      rev_np_pr = (1 / (np.array(pr_list) + fee) - fee - 1) * lvrg + 1\n","          \n","      rev_total_pr = np.cumprod(rev_np_pr)\n","      rev_wr = len(rev_np_pr[rev_np_pr > 1]) / len(rev_np_pr[rev_np_pr != 1])\n","\n","      # plt.subplot(122)\n","      plt.subplot(234)\n","      plt.plot(rev_total_pr)\n","      plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\" % (rev_wr, np.min(rev_np_pr), rev_total_pr[-1], lvrg))\n","\n","      #         short       #\n","      rev_np_short_pr = (1 / (np.array(short_list) + fee) - fee - 1) * lvrg + 1\n","          \n","      rev_total_short_pr = np.cumprod(rev_np_short_pr)\n","      rev_short_wr = len(rev_np_short_pr[rev_np_short_pr > 1]) / len(rev_np_short_pr[rev_np_short_pr != 1])\n","\n","      # plt.subplot(122)\n","      plt.subplot(235)\n","      plt.plot(rev_total_short_pr)\n","      plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\" % (rev_short_wr, np.min(rev_np_short_pr), rev_total_short_pr[-1], lvrg))\n","\n","      #         long       #\n","      rev_np_long_pr = (1 / (np.array(long_list) + fee) - fee - 1) * lvrg + 1\n","          \n","      rev_total_long_pr = np.cumprod(rev_np_long_pr)\n","      rev_long_wr = len(rev_np_long_pr[rev_np_long_pr > 1]) / len(rev_np_long_pr[rev_np_long_pr != 1])\n","\n","      # plt.subplot(122)\n","      plt.subplot(236)\n","      plt.plot(rev_total_long_pr)\n","      plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\" % (rev_long_wr, np.min(rev_np_long_pr), rev_total_long_pr[-1], lvrg))\n","      \n","      plt.show()\n","\n","      h_np_pr = (np.array(h_pr_list) - 1) * lvrg + 1\n","      h_rev_np_pr = (1 / (np.array(h_pr_list) + fee) - fee - 1) * lvrg + 1    # define, for plot_check below cell\n","\n","      # --------------------- h pr plot --------------------- #\n","      if len(h_np_pr[h_np_pr != 1]) != 0:\n","\n","        plt.figure(figsize=(16, 12))\n","        plt.suptitle(key + \" hedge\")\n","\n","        h_total_pr = np.cumprod(h_np_pr)\n","        h_wr = len(h_np_pr[h_np_pr > 1]) / len(h_np_pr[h_np_pr != 1])\n","\n","        # plt.subplot(121)\n","        plt.subplot(231)\n","        plt.plot(h_total_pr)\n","        plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\" % (h_wr, np.min(h_np_pr), h_total_pr[-1], lvrg))\n","        # plt.show()\n","\n","        #         short only      #\n","        h_np_short_pr = (np.array(h_short_list) - 1) * lvrg + 1\n","\n","        h_total_short_pr = np.cumprod(h_np_short_pr)\n","        h_short_wr = len(h_np_short_pr[h_np_short_pr > 1]) / len(h_np_short_pr[h_np_short_pr != 1])\n","        \n","        plt.subplot(232)\n","        plt.plot(h_total_short_pr)\n","        plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\" % (h_short_wr, np.min(h_np_short_pr), h_total_short_pr[-1], lvrg))\n","\n","        #         long only      #\n","        h_np_long_pr = (np.array(h_long_list) - 1) * lvrg + 1\n","\n","        h_total_long_pr = np.cumprod(h_np_long_pr)\n","        h_long_wr = len(h_np_long_pr[h_np_long_pr > 1]) / len(h_np_long_pr[h_np_long_pr != 1])\n","        \n","        plt.subplot(233)\n","        plt.plot(h_total_long_pr)\n","        plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\" % (h_long_wr, np.min(h_np_long_pr), h_total_long_pr[-1], lvrg))\n","\n","\n","        #     reversion adjustment      #\n","            \n","        h_rev_total_pr = np.cumprod(h_rev_np_pr)\n","        h_rev_wr = len(h_rev_np_pr[h_rev_np_pr > 1]) / len(h_rev_np_pr[h_rev_np_pr != 1])\n","\n","        # plt.subplot(122)\n","        plt.subplot(234)\n","        plt.plot(h_rev_total_pr)\n","        plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\" % (h_rev_wr, np.min(h_rev_np_pr), h_rev_total_pr[-1], lvrg))\n","\n","        #         short       #\n","        h_rev_np_short_pr = (1 / (np.array(h_short_list) + fee) - fee - 1) * lvrg + 1\n","            \n","        h_rev_total_short_pr = np.cumprod(h_rev_np_short_pr)\n","        h_rev_short_wr = len(h_rev_np_short_pr[h_rev_np_short_pr > 1]) / len(h_rev_np_short_pr[h_rev_np_short_pr != 1])\n","\n","        # plt.subplot(122)\n","        plt.subplot(235)\n","        plt.plot(h_rev_total_short_pr)\n","        plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\" % (h_rev_short_wr, np.min(h_rev_np_short_pr), h_rev_total_short_pr[-1], lvrg))\n","\n","        #         long       #\n","        h_rev_np_long_pr = (1 / (np.array(h_long_list) + fee) - fee - 1) * lvrg + 1\n","            \n","        h_rev_total_long_pr = np.cumprod(h_rev_np_long_pr)\n","        h_rev_long_wr = len(h_rev_np_long_pr[h_rev_np_long_pr > 1]) / len(h_rev_np_long_pr[h_rev_np_long_pr != 1])\n","\n","        # plt.subplot(122)\n","        plt.subplot(236)\n","        plt.plot(h_rev_total_long_pr)\n","        plt.title(\"wr : %.2f\\nmin_pr : %.2f\\nacc_pr : %.2f\\n lvrg %s\" % (h_rev_long_wr, np.min(h_rev_np_long_pr), h_rev_total_long_pr[-1], lvrg))\n","        \n","        plt.show()\n","          \n","    except Exception as e:\n","      print('error in pr plot :', e)   \n","    \n","\n","    print()\n","\n","    # break # indi. loop\n","  break # pair loop"],"execution_count":null,"outputs":[{"output_type":"stream","text":["2021-06-30 BTCUSDT_4h1d_backi2.xlsx loaded !\n","sma4_period : 29\n","backing_i : -2\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1152x864 with 6 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}},{"output_type":"stream","text":["\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"JNQxkb06ZdTe"},"source":["# traded section plot"]},{"cell_type":"markdown","metadata":{"id":"UmH_Pb5BZUtm"},"source":["## plot with off-color st with dash"]},{"cell_type":"markdown","metadata":{"id":"59nW2aKYzkN8"},"source":["### plot all indicator (stepline ver.)"]},{"cell_type":"code","metadata":{"id":"JDH4rXgNzno6","colab":{"base_uri":"https://localhost:8080/","height":1000,"output_embedded_package_id":"1gx8AljJBteRUVEp9962K0MnteKEXMlgG"},"executionInfo":{"status":"ok","timestamp":1628764729772,"user_tz":-540,"elapsed":252993,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"}},"outputId":"e5744e90-f454-4b19-b869-67b2620c5719"},"source":["prev_plotsize = 50\n","post_plotsize = 10\n","\n","# inversion = True\n","inversion = False\n","\n","# hedge = True\n","# hedge = False\n","\n","\n","if inversion:  \n","\n","    plot_pr_list = rev_np_pr\n","    h_plot_pr_list = h_rev_np_pr  # hedge\n","\n","else:\n","\n","    plot_pr_list = np_pr\n","    h_plot_pr_list = h_np_pr\n","\n","\n","\n","#         select plot columns       #\n","# basic_cols = [0, 1, 2, 3, 5, 6, 8, 9, 11, 12, 14] # you don't need to touch\n","\n","# sar_cols = [15, 18] # 15 ~ 19\n","# ichimoku_cols = [20, 21]  # 20 ~ 29\n","# # ichimoku_cols = [22, 23]  # 20 ~ 29\n","# ichimoku_cols2 = [22, 23]  # 20 ~ 29\n","# macd_cols = [30]  # 30 ~ 34\n","\n","# print(res_df.columns[basic_cols])\n","# break\n","\n","basic_list = ['open', 'high', 'low', 'close', 'minor_ST1_Up', 'minor_ST1_Down',\n","       'minor_ST2_Up', 'minor_ST2_Down', 'minor_ST3_Up', 'minor_ST3_Down',\n","       'middle_line', 'min_upper', 'max_lower']\n","# senkoua_list = ['senkou_a1', 'senkou_a2', 'senkou_a3', 'senkou_a4', 'senkou_a5']\n","# senkoub_list = ['senkou_b1', 'senkou_b2', 'senkou_b3', 'senkou_b4', 'senkou_b5']\n","senkoua_list = ['senkou_a1', 'senkou_a2', 'senkou_a3']\n","senkoub_list = ['senkou_b1', 'senkou_b2', 'senkou_b3']\n","# sar_list = ['sar1', 'sar2', 'sar3', 'sar4', 'sar5']\n","# sar_list = ['sar1', 'sar2', 'sar3', 'sar4', 'sar5']\n","sar_list = ['sar1', 'sar2', 'sar3']\n","sar_list = ['sar1', 'sar2', 'sar3']\n","\n","sma_list = ['sma', 'sma4']\n","\n","\n","#     -------------- under price phase --------------    #\n","# macd_list = ['macd_hist1', 'macd_hist2', 'macd_hist3', 'macd_hist4', 'macd_hist5']\n","macd_list = ['macd_hist1', 'macd_hist2', 'macd_hist3']\n","# trix_list = ['trix1', 'trix2', 'trix3', 'trix4', 'trix5']\n","trix_list = ['trix1', 'trix2', 'trix3']\n","stoch_list = ['stoch']\n","fisher_list = ['fisher30', 'fisher60', 'fisher120']\n","cctbbo_list = ['cctbbo']\n","\n","\n","#       \n","# input_cols = basic_cols + sar_cols + ichimoku_cols + macd_cols + ichimoku_cols2\n","# input_colname = basic_list + senkoua_list + senkoub_list + sar_list + macd_list + trix_list\n","input_colname = basic_list + senkoua_list + senkoub_list + sar_list + sma_list + macd_list + stoch_list + fisher_list + cctbbo_list\n","price_colname = basic_list + senkoua_list + senkoub_list + sar_list + sma_list\n","# input_cols = basic_cols + sar_cols + ichimoku_cols + macd_cols\n","\n","\n","\n","\n","for t_i, (initial_i, i, j) in enumerate(trade_list):\n","  # print(i, j)\n","\n","  if not(i >= prev_plotsize):\n","    continue\n","\n","  # if i <= 4860:\n","  # if i == 1536:\n","  # # if 1800 < i < 1860:\n","  #   pass\n","  # else:\n","  #   continue\n","\n","  # if tp_state_list[t_i] != 'd-open':\n","  #   continue\n","\n","  # if (entry[i] == -1) and res_df['close'].iloc[i - 1] > upper_ep.iloc[i]:\n","  #   pass\n","  # else:\n","  #   continue\n","\n","  # if plot_pr_list[t_i] > 0.5:\n","  # if plot_pr_list[t_i] > 1.0:\n","  if plot_pr_list[t_i] < 1.0:\n","    continue\n","\n","  # plot_df = res_df.iloc[i - prev_plotsize:j + post_plotsize, input_cols]\n","  plot_df = res_df.iloc[i - prev_plotsize:j + post_plotsize][input_colname]\n","\n","\n","  #       keep off-color st with another variable         #\n","  st_trend_plot_df = res_df.iloc[i - prev_plotsize:j + post_plotsize, [7, 10, 13]]\n","\n","  # y_max = np.max(plot_df.iloc[:, [4, 6, 8]])\n","  # y_min = np.min(plot_df.iloc[:, [5, 7, 9]])\n","  # print(\"y_max, y_min :\", y_max, y_min)\n","  \n","  # y_max = max(np.max(plot_df.iloc[:, [4, 6, 8]]))\n","  # y_min = min(np.min(plot_df.iloc[:, [5, 7, 9]]))\n","  \n","  y_max = max(np.max(plot_df[price_colname]))\n","  y_min = min(np.min(plot_df[price_colname]))\n","  # print(\"y_max, y_min :\", y_max, y_min)\n","  # break\n","\n","  plot_df[\"off_color_upper_st1\"] = np.where(st_trend_plot_df.iloc[:, [0]] == 1, plot_df.iloc[:, [4]], np.nan)\n","  plot_df[\"off_color_upper_st2\"] = np.where(st_trend_plot_df.iloc[:, [1]] == 1, plot_df.iloc[:, [6]], np.nan)\n","  plot_df[\"off_color_upper_st3\"] = np.where(st_trend_plot_df.iloc[:, [2]] == 1, plot_df.iloc[:, [8]], np.nan)\n","  plot_df[\"off_color_lower_st1\"] = np.where(st_trend_plot_df.iloc[:, [0]] == -1, plot_df.iloc[:, [5]], np.nan)\n","  plot_df[\"off_color_lower_st2\"] = np.where(st_trend_plot_df.iloc[:, [1]] == -1, plot_df.iloc[:, [7]], np.nan)\n","  plot_df[\"off_color_lower_st3\"] = np.where(st_trend_plot_df.iloc[:, [2]] == -1, plot_df.iloc[:, [9]], np.nan)\n","\n","\n","  #       replace st values with np.nan, using st trend     #\n","  plot_df.iloc[:, [4]] = np.where(st_trend_plot_df.iloc[:, [0]] == 1, np.nan, plot_df.iloc[:, [4]])\n","  plot_df.iloc[:, [6]] = np.where(st_trend_plot_df.iloc[:, [1]] == 1, np.nan, plot_df.iloc[:, [6]])\n","  plot_df.iloc[:, [8]] = np.where(st_trend_plot_df.iloc[:, [2]] == 1, np.nan, plot_df.iloc[:, [8]])\n","  plot_df.iloc[:, [5]] = np.where(st_trend_plot_df.iloc[:, [0]] == -1, np.nan, plot_df.iloc[:, [5]])\n","  plot_df.iloc[:, [7]] = np.where(st_trend_plot_df.iloc[:, [1]] == -1, np.nan, plot_df.iloc[:, [7]])\n","  plot_df.iloc[:, [9]] = np.where(st_trend_plot_df.iloc[:, [2]] == -1, np.nan, plot_df.iloc[:, [9]])\n","\n","\n","  plot_upper_ep = upper_ep.iloc[i - prev_plotsize:j + post_plotsize]\n","  plot_lower_ep = lower_ep.iloc[i - prev_plotsize:j + post_plotsize]\n","\n","  plot_upper_middle = (plot_df['middle_line'] + plot_df['min_upper']) / 2\n","  plot_lower_middle = (plot_df['middle_line'] + plot_df['max_lower']) / 2\n","\n","  plot_short_tp = short_tp.iloc[i - prev_plotsize:j + post_plotsize]\n","  plot_long_tp = long_tp.iloc[i - prev_plotsize:j + post_plotsize]  \n","\n","\n","\n","  # fig = plt.figure(figsize=(12, 16))\n","  fig = plt.figure(figsize=(12, 16))\n","  \n","  gs = gridspec.GridSpec(nrows=3, # row 몇 개 \n","                       ncols=1, # col 몇 개 \n","                       height_ratios=[3, 1, 1]\n","                      )\n","  \n","  # fig = plt.figure(figsize=(8, 12))\n","  # ax = fig.add_subplot(111)\n","  # ax = fig.add_subplot(311)\n","  ax = fig.add_subplot(gs[0])\n","\n","  # fig.show()\n","  # fig.canvas.draw()\n","\n","  temp_ohlc = plot_df.values[:, :4]\n","  index = np.arange(len(temp_ohlc))\n","  candle = np.hstack((np.reshape(index, (-1, 1)), temp_ohlc))\n","  mf.candlestick_ohlc(ax, candle, width=0.5, colorup='r', colordown='b')\n","\n","  # print(plot_df.values[:, 4:])\n","  plt.step(plot_df.values[:, [4, 6, 8]], 'r', alpha=1)  # upper on color\n","  # plt.plot(plot_df.values[:, [4, 6, 8]], 'r', alpha=1)  # upper on color\n","  plt.step(plot_df.values[:, [5, 7, 9]], 'b', alpha=1)  # lower on color\n","  plt.step(plot_df.values[:, [10]], 'fuchsia', alpha=1)  # middle\n","  \n","  plt.step(plot_df.values[:, -6:-3], 'r', alpha=1, linestyle=':')  # upper off color\n","  plt.step(plot_df.values[:, -3:], 'b', alpha=1, linestyle=':')  # lower off color\n","\n","\n","\n","  # plt.step(np.arange(len(plot_df)), plot_upper_ep.values, alpha=1, linestyle='--', color='y')  # ep\n","  # plt.step(np.arange(len(plot_df)),plot_lower_ep.values, alpha=1, linestyle='--', color='y')  # ep\n","\n","  plt.step(np.arange(len(plot_df)), plot_upper_middle.values, alpha=1, linestyle='--', color='g')  # 2nd middle\n","  plt.step(np.arange(len(plot_df)), plot_lower_middle.values, alpha=1, linestyle='--', color='g')  # 2nd middle\n","\n","  # plt.step(np.arange(len(plot_df)), plot_short_tp.values, alpha=1, linestyle=':', color='y')  # tp\n","  # plt.step(np.arange(len(plot_df)), plot_long_tp.values, alpha=1, linestyle=':', color='y')  # tp\n","\n","\n","\n","  # ---------------------- on price indicator part ---------------------- #\n","\n","  alpha = 1\n","  for sm_i, sma in enumerate(sma_list):\n","    if sm_i > 0:\n","      lw = 5\n","    else:\n","      lw = 2\n","    plt.plot(plot_df[sma].values, alpha=alpha, color='black', linewidth=lw)\n","    alpha -= 0.2\n","  \n","  #               sar               #\n","  alpha = 1\n","  markersize = 5\n","  for sar in sar_list:\n","    plt.step(plot_df[sar].values, 'c*', alpha=alpha, markersize=markersize, color='dodgerblue')  # sar mic\n","    markersize += 1\n","    alpha -= 0.1\n","\n","  # plt.step(plot_df.values[:, [12]], 'co', alpha=1, markersize=7)  # sar mac\n","\n","  #               cloud               #\n","  alpha = 0.7\n","  for senkoua, senkoub in zip(senkoua_list, senkoub_list):\n","    plt.fill_between(np.arange(len(plot_df)), plot_df[senkoua].values, plot_df[senkoub].values, # ichimoku\n","                      where=plot_df[senkoua].values >= plot_df[senkoub].values, facecolor='g', alpha=alpha) # ichimoku\n","    plt.fill_between(np.arange(len(plot_df)), plot_df[senkoua].values, plot_df[senkoub].values,\n","                      where=plot_df[senkoua].values <= plot_df[senkoub].values, facecolor='r', alpha=alpha)  \n","    alpha -= 0.05\n","  \n","  # ------------------------------------------------------------- #\n","\n","\n","  #       ep & tp     #\n","  if i != initial_i:\n","    plt.axvline(prev_plotsize - (i - initial_i), alpha=0.5, linestyle='--')\n","  plt.axvline(prev_plotsize, alpha=0.5, linestyle='--')\n","  plt.axhline(ep_tp_list[t_i][0], linestyle='-', xmin=0.75, xmax=1, linewidth=3, color='lime')  # ep line axhline\n","\n","  for sub_i in range(len(ep_tp_list[t_i][1])):\n","    plt.axhline(ep_tp_list[t_i][1][sub_i], linestyle='-', xmin=0.75 + 0.05 * (sub_i + 1) , xmax=1, linewidth=3, color='lime')  # tp line axhline\n","    # plt.axhline(ep_tp_list[t_i][1], linestyle='-', xmin=0.9, xmax=1, linewidth=3)  # tp line axhline  \n","  plt.axvline(prev_plotsize + (j - i), alpha=0.5, linestyle='--')\n","\n","\n","  #         hedge ep & tp         #\n","  h_i = h_trade_list[t_i][1]\n","  if h_i is not None:\n","    plt.axvline(prev_plotsize + (h_i - i), linestyle='--')\n","    plt.axhline(h_ep_tp_list[t_i][0], linestyle='-', xmin=0.75, xmax=1, linewidth=3, color='magenta')  # ep line axhline\n","    plt.axhline(h_ep_tp_list[t_i][1], linestyle='-', xmin=0.85, xmax=1, linewidth=3, color='magenta')  # tp line axhline\n","\n","  \n","  #         check pr        #\n","  plt.title(\"%s ~ %s -> %.5f\\n %s\\n h_pr : %.5f\" % (i, j, plot_pr_list[t_i], tp_state_list[t_i], h_plot_pr_list[t_i]))\n","  print(\"short real pr :\", (ep_tp_list[t_i][0] / ep_tp_list[t_i][1][sub_i] - fee - 1) * lvrg + 1)\n","  print(\"long real pr :\", (ep_tp_list[t_i][1][sub_i] / ep_tp_list[t_i][0] - fee - 1) * lvrg + 1)\n","\n","  #           y lim         #\n","  plt.ylim(y_min, y_max)\n","\n","\n","  # ---------------------- outer price indi. ---------------------- #\n","  # #           macd          #\n","  # # plt.subplot(312)\n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for macd in macd_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[macd].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axhline(0, linestyle='--')\n","\n","  \n","  # #           trix          #  \n","  # # plt.subplot(313)\n","  # plt.subplot(gs[2])\n","  # alpha = 1\n","  # for trix in trix_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[trix].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axhline(0, linestyle='--')\n","\n","  \n","  #           fisher          #  \n","  # # plt.subplot(313)\n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for fisher in fisher_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[fisher].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axhline(0, linestyle='--')\n","  # plt.axhline(fisher_upper, linestyle='--')\n","  # plt.axhline(fisher_lower, linestyle='--')\n","\n","  #           stoch          #  \n","  # plt.subplot(313)\n","  plt.subplot(gs[1])\n","  alpha = 1\n","  for stoch in stoch_list:\n","    plt.step(np.arange(len(plot_df)), plot_df[stoch].values, 'g', alpha=alpha)\n","    # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","    alpha -= 0.2\n","  plt.axvline(prev_plotsize, linestyle='--')\n","  plt.axhline(50, linestyle='--')\n","  plt.axhline(stoch_upper, linestyle='--')\n","  plt.axhline(stoch_lower, linestyle='--')\n","  plt.axvline(prev_plotsize + (j - i), alpha=1, linestyle='--')\n","\n","\n","\n","  # ---------------------- plot ---------------------- #\n","\n","  plt.show()\n","  # plt.draw()\n","  plt.close()\n","  print()\n","\n","  # break\n"],"execution_count":41,"outputs":[{"output_type":"display_data","data":{"text/plain":"Output hidden; open in https://colab.research.google.com to view."},"metadata":{}}]},{"cell_type":"markdown","metadata":{"id":"cj9X6S1jJjER"},"source":["### plot nontp case"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000,"output_embedded_package_id":"1dHUk1pGrUHlPNEF1BNYHFo70iOYuc0d-"},"id":"Gb1jGrS4Jl8A","executionInfo":{"status":"ok","timestamp":1628239204133,"user_tz":-540,"elapsed":5201438,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"}},"outputId":"3c9e8485-f381-43e9-ecd6-49126078bdd7"},"source":["prev_plotsize = 50\n","\n","# inversion = True\n","inversion = False\n","\n","# hedge = True\n","# hedge = False\n","\n","short_ver = False\n","\n","\n","if inversion:  \n","\n","    plot_pr_list = rev_np_pr\n","    h_plot_pr_list = h_rev_np_pr  # hedge\n","\n","else:\n","\n","    plot_pr_list = np_pr\n","    h_plot_pr_list = h_np_pr\n","\n","\n","\n","#         select plot columns       #\n","# basic_cols = [0, 1, 2, 3, 5, 6, 8, 9, 11, 12, 14] # you don't need to touch\n","\n","# sar_cols = [15, 18] # 15 ~ 19\n","# ichimoku_cols = [20, 21]  # 20 ~ 29\n","# # ichimoku_cols = [22, 23]  # 20 ~ 29\n","# ichimoku_cols2 = [22, 23]  # 20 ~ 29\n","# macd_cols = [30]  # 30 ~ 34\n","\n","# print(res_df.columns[basic_cols])\n","# break\n","\n","basic_list = ['open', 'high', 'low', 'close', 'minor_ST1_Up', 'minor_ST1_Down',\n","       'minor_ST2_Up', 'minor_ST2_Down', 'minor_ST3_Up', 'minor_ST3_Down',\n","       'middle_line', 'min_upper', 'max_lower']\n","# senkoua_list = ['senkou_a1', 'senkou_a2', 'senkou_a3', 'senkou_a4', 'senkou_a5']\n","# senkoub_list = ['senkou_b1', 'senkou_b2', 'senkou_b3', 'senkou_b4', 'senkou_b5']\n","senkoua_list = ['senkou_a1', 'senkou_a2', 'senkou_a3']\n","senkoub_list = ['senkou_b1', 'senkou_b2', 'senkou_b3']\n","# sar_list = ['sar1', 'sar2', 'sar3', 'sar4', 'sar5']\n","# sar_list = ['sar1', 'sar2', 'sar3', 'sar4', 'sar5']\n","sar_list = ['sar1', 'sar2', 'sar3']\n","sar_list = ['sar1', 'sar2', 'sar3']\n","\n","#     -------------- under price phase --------------    #\n","macd_list = ['macd_hist1', 'macd_hist2', 'macd_hist3', 'macd_hist4', 'macd_hist5']\n","trix_list = ['trix1', 'trix2', 'trix3', 'trix4', 'trix5']\n","stoch_list = ['stoch']\n","fisher_list = ['fisher']\n","cctbbo_list = ['cctbbo']\n","\n","\n","#       \n","# input_cols = basic_cols + sar_cols + ichimoku_cols + macd_cols + ichimoku_cols2\n","# input_colname = basic_list + senkoua_list + senkoub_list + sar_list + macd_list + trix_list\n","input_colname = basic_list + senkoua_list + senkoub_list + sar_list + macd_list + stoch_list + fisher_list + cctbbo_list\n","price_colname = basic_list + senkoua_list + senkoub_list + sar_list \n","# input_cols = basic_cols + sar_cols + ichimoku_cols + macd_cols\n","\n","\n","if short_ver:\n","  nontp_indexs = nontp_short_indexs\n","  nontp_liqd_list = nontp_short_liqd_list\n","  nontp_pr_list = nontp_short_pr_list\n","  nontp_ep = nontp_short_ep_list\n","else:\n","  nontp_indexs = nontp_long_indexs\n","  nontp_liqd_list = nontp_long_liqd_list\n","  nontp_pr_list = nontp_long_pr_list\n","  nontp_ep = nontp_long_ep_list\n","\n","\n","for t_i, i in enumerate(nontp_indexs):\n","\n","  j = len(res_df) - 1\n","\n","  # print(i, j)\n","\n","  if not(i >= prev_plotsize):\n","    continue\n","\n","  # if i <= 4860:\n","  # if i == 1536:\n","  # # if 1800 < i < 1860:\n","  #   pass\n","  # else:\n","  #   continue\n","\n","  # if tp_state_list[t_i] != 'd-open':\n","  #   continue\n","\n","  # if (entry[i] == -1) and res_df['close'].iloc[i - 1] > upper_ep.iloc[i]:\n","  #   pass\n","  # else:\n","  #   continue\n","\n","  # if plot_pr_list[t_i] > 0.5:\n","  # if plot_pr_list[t_i] > 1.0:\n","  # # if plot_pr_list[t_i] < 1.0:\n","  #   continue\n","\n","  # plot_df = res_df.iloc[i - prev_plotsize:j + 1, input_cols]\n","  plot_df = res_df.iloc[i - prev_plotsize:j + 1][input_colname]\n","\n","\n","  #       keep off-color st with another variable         #\n","  st_trend_plot_df = res_df.iloc[i - prev_plotsize:j + 1, [7, 10, 13]]\n","\n","  # y_max = np.max(plot_df.iloc[:, [4, 6, 8]])\n","  # y_min = np.min(plot_df.iloc[:, [5, 7, 9]])\n","  # print(\"y_max, y_min :\", y_max, y_min)\n","  \n","  # y_max = max(np.max(plot_df.iloc[:, [4, 6, 8]]))\n","  # y_min = min(np.min(plot_df.iloc[:, [5, 7, 9]]))\n","  \n","  y_max = max(np.max(plot_df[price_colname]))\n","  y_min = min(np.min(plot_df[price_colname]))\n","  # print(\"y_max, y_min :\", y_max, y_min)\n","  # break\n","\n","  plot_df[\"off_color_upper_st1\"] = np.where(st_trend_plot_df.iloc[:, [0]] == 1, plot_df.iloc[:, [4]], np.nan)\n","  plot_df[\"off_color_upper_st2\"] = np.where(st_trend_plot_df.iloc[:, [1]] == 1, plot_df.iloc[:, [6]], np.nan)\n","  plot_df[\"off_color_upper_st3\"] = np.where(st_trend_plot_df.iloc[:, [2]] == 1, plot_df.iloc[:, [8]], np.nan)\n","  plot_df[\"off_color_lower_st1\"] = np.where(st_trend_plot_df.iloc[:, [0]] == -1, plot_df.iloc[:, [5]], np.nan)\n","  plot_df[\"off_color_lower_st2\"] = np.where(st_trend_plot_df.iloc[:, [1]] == -1, plot_df.iloc[:, [7]], np.nan)\n","  plot_df[\"off_color_lower_st3\"] = np.where(st_trend_plot_df.iloc[:, [2]] == -1, plot_df.iloc[:, [9]], np.nan)\n","\n","\n","  #       replace st values with np.nan, using st trend     #\n","  plot_df.iloc[:, [4]] = np.where(st_trend_plot_df.iloc[:, [0]] == 1, np.nan, plot_df.iloc[:, [4]])\n","  plot_df.iloc[:, [6]] = np.where(st_trend_plot_df.iloc[:, [1]] == 1, np.nan, plot_df.iloc[:, [6]])\n","  plot_df.iloc[:, [8]] = np.where(st_trend_plot_df.iloc[:, [2]] == 1, np.nan, plot_df.iloc[:, [8]])\n","  plot_df.iloc[:, [5]] = np.where(st_trend_plot_df.iloc[:, [0]] == -1, np.nan, plot_df.iloc[:, [5]])\n","  plot_df.iloc[:, [7]] = np.where(st_trend_plot_df.iloc[:, [1]] == -1, np.nan, plot_df.iloc[:, [7]])\n","  plot_df.iloc[:, [9]] = np.where(st_trend_plot_df.iloc[:, [2]] == -1, np.nan, plot_df.iloc[:, [9]])\n","\n","\n","  plot_upper_ep = upper_ep.iloc[i - prev_plotsize:j + 1]\n","  plot_lower_ep = lower_ep.iloc[i - prev_plotsize:j + 1]\n","\n","  plot_upper_middle = (plot_df['middle_line'] + plot_df['min_upper']) / 2\n","  plot_lower_middle = (plot_df['middle_line'] + plot_df['max_lower']) / 2\n","\n","  plot_short_tp = short_tp.iloc[i - prev_plotsize:j + 1]\n","  plot_long_tp = long_tp.iloc[i - prev_plotsize:j + 1]  \n","\n","\n","\n","  # fig = plt.figure(figsize=(12, 16))\n","  fig = plt.figure(figsize=(12, 16))\n","  \n","  gs = gridspec.GridSpec(nrows=3, # row 몇 개 \n","                       ncols=1, # col 몇 개 \n","                       height_ratios=[3, 1, 1]\n","                      )\n","  \n","  # fig = plt.figure(figsize=(8, 12))\n","  # ax = fig.add_subplot(111)\n","  # ax = fig.add_subplot(311)\n","  ax = fig.add_subplot(gs[0])\n","\n","  # fig.show()\n","  # fig.canvas.draw()\n","\n","  temp_ohlc = plot_df.values[:, :4]\n","  index = np.arange(len(temp_ohlc))\n","  candle = np.hstack((np.reshape(index, (-1, 1)), temp_ohlc))\n","  mf.candlestick_ohlc(ax, candle, width=0.5, colorup='r', colordown='b')\n","\n","  # print(plot_df.values[:, 4:])\n","  plt.step(plot_df.values[:, [4, 6, 8]], 'r', alpha=1)  # upper on color\n","  # plt.plot(plot_df.values[:, [4, 6, 8]], 'r', alpha=1)  # upper on color\n","  plt.step(plot_df.values[:, [5, 7, 9]], 'b', alpha=1)  # lower on color\n","  plt.step(plot_df.values[:, [10]], 'fuchsia', alpha=1)  # middle\n","  \n","  plt.step(plot_df.values[:, -6:-3], 'r', alpha=1, linestyle=':')  # upper off color\n","  plt.step(plot_df.values[:, -3:], 'b', alpha=1, linestyle=':')  # lower off color\n","\n","\n","\n","  # plt.step(np.arange(len(plot_df)), plot_upper_ep.values, alpha=1, linestyle='--', color='y')  # ep\n","  # plt.step(np.arange(len(plot_df)),plot_lower_ep.values, alpha=1, linestyle='--', color='y')  # ep\n","\n","  plt.step(np.arange(len(plot_df)), plot_upper_middle.values, alpha=1, linestyle='--', color='g')  # 2nd middle\n","  plt.step(np.arange(len(plot_df)), plot_lower_middle.values, alpha=1, linestyle='--', color='g')  # 2nd middle\n","\n","  # plt.step(np.arange(len(plot_df)), plot_short_tp.values, alpha=1, linestyle=':', color='y')  # tp\n","  # plt.step(np.arange(len(plot_df)), plot_long_tp.values, alpha=1, linestyle=':', color='y')  # tp\n","\n","\n","\n","  # ---------------------- indicator part ---------------------- #\n","  \n","  #               sar               #\n","  alpha = 1\n","  markersize = 5\n","  for sar in sar_list:\n","    plt.step(plot_df[sar].values, 'c*', alpha=alpha, markersize=markersize, color='dodgerblue')  # sar mic\n","    markersize += 1\n","    alpha -= 0.1\n","\n","  # plt.step(plot_df.values[:, [12]], 'co', alpha=1, markersize=7)  # sar mac\n","\n","  #               cloud               #\n","  alpha = 0.7\n","  for senkoua, senkoub in zip(senkoua_list, senkoub_list):\n","    plt.fill_between(np.arange(len(plot_df)), plot_df[senkoua].values, plot_df[senkoub].values, # ichimoku\n","                      where=plot_df[senkoua].values >= plot_df[senkoub].values, facecolor='g', alpha=alpha) # ichimoku\n","    plt.fill_between(np.arange(len(plot_df)), plot_df[senkoua].values, plot_df[senkoub].values,\n","                      where=plot_df[senkoua].values <= plot_df[senkoub].values, facecolor='r', alpha=alpha)  \n","    alpha -= 0.05\n","  \n","  # ------------------------------------------------------------- #\n","\n","\n","  #       ep & tp     #\n","  if i != initial_i:\n","    plt.axvline(prev_plotsize - (i - initial_i), alpha=0.5, linestyle='--')\n","  plt.axvline(prev_plotsize, alpha=0.5, linestyle='--')\n","  plt.axhline(nontp_ep[t_i], linestyle='-', xmin=0.75, xmax=1, linewidth=3, color='lime')  # ep line axhline\n","\n","  # for sub_i in range(len(ep_tp_list[t_i][1])):\n","  #   plt.axhline(ep_tp_list[t_i][1][sub_i], linestyle='-', xmin=0.75 + 0.05 * (sub_i + 1) , xmax=1, linewidth=3, color='lime')  # tp line axhline\n","    # plt.axhline(ep_tp_list[t_i][1], linestyle='-', xmin=0.9, xmax=1, linewidth=3)  # tp line axhline    \n","\n","  #         hedge ep & tp         #\n","  # h_i = h_trade_list[t_i][1]\n","  # if h_i is not None:\n","  #   plt.axvline(prev_plotsize + (h_i - i), linestyle='--')\n","  #   plt.axhline(h_ep_tp_list[t_i][0], linestyle='-', xmin=0.75, xmax=1, linewidth=3, color='magenta')  # ep line axhline\n","  #   plt.axhline(h_ep_tp_list[t_i][1], linestyle='-', xmin=0.85, xmax=1, linewidth=3, color='magenta')  # tp line axhline\n","\n","  \n","  #         check pr        #\n","  plt.title(\"%s ~ %s -> liqd : %.2f\\npr : %.2f\" % (i, j, nontp_liqd_list[t_i], nontp_pr_list[t_i]))\n","\n","  #           y lim         #\n","  plt.ylim(y_min, y_max)\n","\n","\n","  # #           macd          #\n","  # # plt.subplot(312)\n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for macd in macd_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[macd].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axhline(0, linestyle='--')\n","\n","  \n","  # #           trix          #  \n","  # # plt.subplot(313)\n","  # plt.subplot(gs[2])\n","  # alpha = 1\n","  # for trix in trix_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[trix].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axhline(0, linestyle='--')\n","\n","  \n","  #           fisher          #  \n","  # # plt.subplot(313)\n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for fisher in fisher_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[fisher].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axhline(0, linestyle='--')\n","  # plt.axhline(fisher_upper, linestyle='--')\n","  # plt.axhline(fisher_lower, linestyle='--')\n","\n","  #           stoch          #  \n","  # plt.subplot(313)\n","  plt.subplot(gs[1])\n","  alpha = 1\n","  for stoch in stoch_list:\n","    plt.step(np.arange(len(plot_df)), plot_df[stoch].values, 'g', alpha=alpha)\n","    # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","    alpha -= 0.2\n","  plt.axvline(prev_plotsize, linestyle='--')\n","  plt.axhline(50, linestyle='--')\n","  plt.axhline(stoch_upper, linestyle='--')\n","  plt.axhline(stoch_lower, linestyle='--')\n","\n","\n","\n","  # ---------------------- plot ---------------------- #\n","\n","  plt.show()\n","  # plt.draw()\n","  plt.close()\n","  print()\n","\n","  # break\n"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":"Output hidden; open in https://colab.research.google.com to view."},"metadata":{}}]},{"cell_type":"markdown","metadata":{"id":"wXqR5bwGzqDW"},"source":["### specific plot v1"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":594},"id":"UiCTTXJpZX1i","executionInfo":{"elapsed":630,"status":"error","timestamp":1626564536389,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"},"user_tz":-540},"outputId":"7eadc90e-ed0c-4951-859e-fc5fa135d6ff"},"source":["prev_plotsize = 50\n","\n","# inversion = True\n","inversion = False\n","\n","if inversion:\n","  plot_pr_list = rev_np_pr\n","else:\n","  plot_pr_list = np_pr\n","\n","\n","\n","#         select plot columns       #\n","basic_cols = [0, 1, 2, 3, 5, 6, 8, 9, 11, 12, 14] # you don't need to touch\n","\n","sar_cols = [15, 18] # 15 ~ 19\n","ichimoku_cols = [20, 21]  # 20 ~ 29\n","# ichimoku_cols = [22, 23]  # 20 ~ 29\n","ichimoku_cols2 = [22, 23]  # 20 ~ 29\n","macd_cols = [30]  # 30 ~ 34\n","\n","\n","senkoua_list = ['senkou_a1', 'senkou_a2', 'senkou_a3', 'senkou_a4', 'senkou_a5']\n","senkoub_list = ['senkou_b1', 'senkou_b2', 'senkou_b3', 'senkou_b4', 'senkou_b5']\n","sar_list = ['sar1', 'sar2', 'sar3', 'sar4', 'sar5']\n","macd_list = ['macd_hist1', 'macd_hist2', 'macd_hist3', 'macd_hist4', 'macd_hist5']\n","\n","input_cols = basic_cols + sar_cols + ichimoku_cols + macd_cols + ichimoku_cols2\n","# input_cols = basic_cols + sar_cols + ichimoku_cols + macd_cols\n","\n","\n","\n","\n","for t_i, (i, j) in enumerate(trade_list):\n","  # print(i, j)\n","\n","  if not(i >= prev_plotsize):\n","    continue\n","\n","  # if i <= 4860:\n","  # if i != 257:\n","  #   continue\n","\n","  # if tp_state_list[t_i] != 'd-open':\n","  #   continue\n","\n","\n","  if plot_pr_list[t_i] > 1.0:\n","  # if plot_pr_list[t_i] < 1.0:\n","    continue\n","\n","  plot_df = res_df.iloc[i - prev_plotsize:j + 1, input_cols]\n","\n","\n","  #       keep off-color st with another variable         #\n","  st_trend_plot_df = res_df.iloc[i - prev_plotsize:j + 1, [7, 10, 13]]\n","\n","  plot_df[\"off_color_upper_st1\"] = np.where(st_trend_plot_df.iloc[:, [0]] == 1, plot_df.iloc[:, [4]], np.nan)\n","  plot_df[\"off_color_upper_st2\"] = np.where(st_trend_plot_df.iloc[:, [1]] == 1, plot_df.iloc[:, [6]], np.nan)\n","  plot_df[\"off_color_upper_st3\"] = np.where(st_trend_plot_df.iloc[:, [2]] == 1, plot_df.iloc[:, [8]], np.nan)\n","  plot_df[\"off_color_lower_st1\"] = np.where(st_trend_plot_df.iloc[:, [0]] == -1, plot_df.iloc[:, [5]], np.nan)\n","  plot_df[\"off_color_lower_st2\"] = np.where(st_trend_plot_df.iloc[:, [1]] == -1, plot_df.iloc[:, [7]], np.nan)\n","  plot_df[\"off_color_lower_st3\"] = np.where(st_trend_plot_df.iloc[:, [2]] == -1, plot_df.iloc[:, [9]], np.nan)\n","\n","\n","  #       replace st values with np.nan, using st trend     #\n","  plot_df.iloc[:, [4]] = np.where(st_trend_plot_df.iloc[:, [0]] == 1, np.nan, plot_df.iloc[:, [4]])\n","  plot_df.iloc[:, [6]] = np.where(st_trend_plot_df.iloc[:, [1]] == 1, np.nan, plot_df.iloc[:, [6]])\n","  plot_df.iloc[:, [8]] = np.where(st_trend_plot_df.iloc[:, [2]] == 1, np.nan, plot_df.iloc[:, [8]])\n","  plot_df.iloc[:, [5]] = np.where(st_trend_plot_df.iloc[:, [0]] == -1, np.nan, plot_df.iloc[:, [5]])\n","  plot_df.iloc[:, [7]] = np.where(st_trend_plot_df.iloc[:, [1]] == -1, np.nan, plot_df.iloc[:, [7]])\n","  plot_df.iloc[:, [9]] = np.where(st_trend_plot_df.iloc[:, [2]] == -1, np.nan, plot_df.iloc[:, [9]])\n","\n","\n","  plot_upper_ep = upper_ep.iloc[i - prev_plotsize:j + 1]\n","  plot_lower_ep = lower_ep.iloc[i - prev_plotsize:j + 1]\n","\n","  plot_upper_middle = (plot_df['middle_line'] + plot_df['min_upper']) / 2\n","  plot_lower_middle = (plot_df['middle_line'] + plot_df['max_lower']) / 2\n","\n","  plot_short_tp = short_tp.iloc[i - prev_plotsize:j + 1]\n","  plot_long_tp = long_tp.iloc[i - prev_plotsize:j + 1]  \n","\n","\n","\n","  fig = plt.figure(figsize=(12, 16))\n","  # fig = plt.figure(figsize=(8, 12))\n","  # ax = fig.add_subplot(111)\n","  ax = fig.add_subplot(211)\n","\n","  # fig.show()\n","  # fig.canvas.draw()\n","\n","  temp_ohlc = plot_df.values[:, :4]\n","  index = np.arange(len(temp_ohlc))\n","  candle = np.hstack((np.reshape(index, (-1, 1)), temp_ohlc))\n","  mf.candlestick_ohlc(ax, candle, width=0.5, colorup='r', colordown='b')\n","\n","  # print(plot_df.values[:, 4:])\n","  plt.plot(plot_df.values[:, [4, 6, 8]], 'r', alpha=1)  # upper on color\n","  plt.plot(plot_df.values[:, [5, 7, 9]], 'b', alpha=1)  # lower on color\n","  plt.plot(plot_df.values[:, [10]], 'g', alpha=1)  # middle\n","  \n","  plt.plot(plot_df.values[:, -6:-3], 'r', alpha=1, linestyle=':')  # upper off color\n","  plt.plot(plot_df.values[:, -3:], 'b', alpha=1, linestyle=':')  # lower off color\n","\n","  plt.plot(plot_df.values[:, [11]], 'c*', alpha=1, markersize=5)  # sar mic\n","  # plt.plot(plot_df.values[:, [12]], 'co', alpha=1, markersize=7)  # sar mac\n","\n","  plt.plot(plot_upper_ep.values, alpha=1, linestyle='--')  # ep\n","  plt.plot(plot_lower_ep.values, alpha=1, linestyle='--')  # ep\n","\n","  plt.plot(plot_upper_middle.values, alpha=1, linestyle='--')  # middle\n","  plt.plot(plot_lower_middle.values, alpha=1, linestyle='--')  # middle\n","\n","  plt.plot(plot_short_tp.values, alpha=1, linestyle=':')  # tp\n","  plt.plot(plot_long_tp.values, alpha=1, linestyle=':')  # tp\n","\n","  plt.fill_between(np.arange(len(plot_df)), plot_df.values[:, 13], plot_df.values[:, 14], # ichimoku\n","                    where=plot_df.values[:, 13] >= plot_df.values[:, 14], facecolor='g', alpha=0.5) # ichimoku\n","  plt.fill_between(np.arange(len(plot_df)), plot_df.values[:, 13], plot_df.values[:, 14],\n","                    where=plot_df.values[:, 13] <= plot_df.values[:, 14], facecolor='r', alpha=0.5)  \n","  \n","  plt.fill_between(np.arange(len(plot_df)), plot_df.values[:, 16], plot_df.values[:, 17], # ichimoku\n","                    where=plot_df.values[:, 16] >= plot_df.values[:, 17], facecolor='g', alpha=0.3) # ichimoku\n","  plt.fill_between(np.arange(len(plot_df)), plot_df.values[:, 16], plot_df.values[:, 17],\n","                    where=plot_df.values[:, 16] <= plot_df.values[:, 17], facecolor='r', alpha=0.3)\n","\n","  plt.axvline(prev_plotsize, linestyle='--')\n","  plt.axhline(ep_tp_list[t_i][1], linestyle='-')  # tp line axhline\n","  plt.title(\"%s ~ %s -> %.5f\\n %s\" % (i, j, plot_pr_list[t_i], tp_state_list[t_i]))\n","\n","\n","  plt.subplot(212)\n","  plt.plot(plot_df.values[:, [15]], 'g', alpha=1)  # middle\n","  plt.axvline(prev_plotsize, linestyle='--')\n","  plt.axhline(0, linestyle='--')\n","\n","  plt.show()\n","  # plt.draw()\n","  plt.close()\n","  print()\n","\n"],"execution_count":null,"outputs":[{"output_type":"error","ename":"KeyError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36mget_loc\u001b[0;34m(self, key, method, tolerance)\u001b[0m\n\u001b[1;32m   2897\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2898\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcasted_key\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2899\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mKeyError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0merr\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32mpandas/_libs/index.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n","\u001b[0;32mpandas/_libs/index.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n","\u001b[0;32mpandas/_libs/hashtable_class_helper.pxi\u001b[0m in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[0;34m()\u001b[0m\n","\u001b[0;32mpandas/_libs/hashtable_class_helper.pxi\u001b[0m in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[0;34m()\u001b[0m\n","\u001b[0;31mKeyError\u001b[0m: 'min_upper'","\nThe above exception was the direct cause of the following exception:\n","\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)","\u001b[0;32m<ipython-input-11-9a4f23889388>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     76\u001b[0m   \u001b[0mplot_lower_ep\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlower_ep\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0miloc\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0mprev_plotsize\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0mj\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     77\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 78\u001b[0;31m   \u001b[0mplot_upper_middle\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mplot_df\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'middle_line'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mplot_df\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'min_upper'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m/\u001b[0m \u001b[0;36m2\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     79\u001b[0m   \u001b[0mplot_lower_middle\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mplot_df\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'middle_line'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mplot_df\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'max_lower'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m/\u001b[0m \u001b[0;36m2\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     80\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36m__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   2904\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnlevels\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2905\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_getitem_multilevel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2906\u001b[0;31m             \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2907\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mis_integer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2908\u001b[0m                 \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36mget_loc\u001b[0;34m(self, key, method, tolerance)\u001b[0m\n\u001b[1;32m   2898\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcasted_key\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2899\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mKeyError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0merr\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2900\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0merr\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2901\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2902\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mtolerance\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyError\u001b[0m: 'min_upper'"]}]},{"cell_type":"markdown","metadata":{"id":"-g7YY5BvMcLS"},"source":["### show detail values"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5TxQ3rDnKMa7","executionInfo":{"elapsed":255,"status":"ok","timestamp":1625228960601,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"},"user_tz":-540},"outputId":"422ac214-8c88-4f39-ec3a-7c823574f6da"},"source":["i, j = 27267, 27268\n","print(\"upper_ep.iloc[i] :\", upper_ep.iloc[i])\n","print(\"short_tp.iloc[j] :\", short_tp.iloc[j])"],"execution_count":null,"outputs":[{"output_type":"stream","text":["upper_ep.iloc[i] : 2348.266954813089\n","short_tp.iloc[j] : 2205.609333246829\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"7AIl6EBuZNOL"},"source":["## none plot off-color st"]},{"cell_type":"code","metadata":{"id":"yaVxrNGzZgrF"},"source":["prev_plotsize = 50\n","\n","for t_i, (i, j) in enumerate(trade_list):\n","  # print(i, j)\n","\n","  if not(i >= prev_plotsize):\n","    continue\n","\n","  # if pr_list[t_i] >= 1:\n","  #   continue\n","\n","  plot_df = res_df.iloc[i - prev_plotsize:j + 1, [0, 1, 2, 3, 5, 6, 8, 9, 11, 12, 14, 15, 16]]\n","\n","  #       replace st values with np.nan, using st trend     #\n","  st_trend_plot_df = res_df.iloc[i - prev_plotsize:j + 1, [7, 10, 13]]\n","  plot_df.iloc[:, [4]] = np.where(st_trend_plot_df.iloc[:, [0]] == 1, np.nan, plot_df.iloc[:, [4]])\n","  plot_df.iloc[:, [6]] = np.where(st_trend_plot_df.iloc[:, [1]] == 1, np.nan, plot_df.iloc[:, [6]])\n","  plot_df.iloc[:, [8]] = np.where(st_trend_plot_df.iloc[:, [2]] == 1, np.nan, plot_df.iloc[:, [8]])\n","  plot_df.iloc[:, [5]] = np.where(st_trend_plot_df.iloc[:, [0]] == -1, np.nan, plot_df.iloc[:, [5]])\n","  plot_df.iloc[:, [7]] = np.where(st_trend_plot_df.iloc[:, [1]] == -1, np.nan, plot_df.iloc[:, [7]])\n","  plot_df.iloc[:, [9]] = np.where(st_trend_plot_df.iloc[:, [2]] == -1, np.nan, plot_df.iloc[:, [9]])\n","\n","\n","  plot_upper_ep = upper_ep.iloc[i - prev_plotsize:j + 1]\n","  plot_lower_ep = lower_ep.iloc[i - prev_plotsize:j + 1]\n","\n","  fig = plt.figure(figsize=(8, 6))\n","  ax = fig.add_subplot(111)\n","\n","  # fig.show()\n","  # fig.canvas.draw()\n","\n","  temp_ohlc = plot_df.values[:, :4]\n","  index = np.arange(len(temp_ohlc))\n","  candle = np.hstack((np.reshape(index, (-1, 1)), temp_ohlc))\n","  mf.candlestick_ohlc(ax, candle, width=0.5, colorup='r', colordown='b')\n","\n","  # print(plot_df.values[:, 4:])\n","  plt.plot(plot_df.values[:, [4, 6, 8]], 'r', alpha=1)  # upper\n","  plt.plot(plot_df.values[:, [5, 7, 9]], 'b', alpha=1)  # lower\n","  plt.plot(plot_df.values[:, [10]], 'g', alpha=1)  # middle\n","\n","  plt.plot(plot_df.values[:, [11]], 'c*', alpha=1, markersize=5)  # sar mic\n","  plt.plot(plot_df.values[:, [12]], 'co', alpha=1, markersize=7)  # sar mac\n","\n","  plt.plot(plot_upper_ep.values, alpha=1, linestyle='--')  # ep\n","  plt.plot(plot_lower_ep.values, alpha=1, linestyle='--')  # ep\n","\n","  plt.axvline(prev_plotsize, linestyle='--')\n","\n","  plt.title(\"%s ~ %s -> %.5f\" % (i, j, pr_list[t_i]))\n","  plt.show()\n","  # plt.draw()\n","  plt.close()"],"execution_count":null,"outputs":[]}]}